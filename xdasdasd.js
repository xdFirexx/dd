(function() {
	let engineActive = false;
	let autoCrownReady = true;
	const saveKey = "exclusivev2";
	const JoinedPlayers = [];
	const KilledPlayers = [];
	const SandstormImage = new Image;
	SandstormImage.src = "https://raw.githubusercontent.com/XmreLoux/images/main/sandstorm.png";
	const BlizzardImage = new Image;
	BlizzardImage.src = "https://raw.githubusercontent.com/XmreLoux/images/main/blizzard.png";
	const Timers = {
		HealTimer: 10,
		GaugeTimer: 5
	};
	const Packets = {
		TakeChest: 8,
		TakeOven: 13,
		TakeWindmill: 4,
		TakeExtractor: 37,
		PutExtractor: 27,
		UnlockChest: 20,
		Craft: 26,
		Recycle: 18,
		SendBuild: 22,
		GiveWheatWindmill: 30,
		GiveWoodOven: 14,
		GiveFlourOven: 25,
		DropAll: 31,
		Equip: 34,
		Resurrection: 35,
		JoinTeam: 17,
		SendAttack: 36,
		StopAttack: 16,
		Move: 11,
		Focus: 9,
		GiveItem: 1
	};
	const Stamps = {
		AutoSteal: Date.now(),
		AutoBreadTake: Date.now(),
		AutoBreadPut: Date.now(),
		AutoExtractorTake: Date.now(),
		AutoExtractorPut: Date.now(),
		AutoCraft: Date.now(),
		AutoRecycle: Date.now(),
		AutoSpike: Date.now(),
		AutoWall: Date.now(),
		DropSword: Date.now(),
		AutoFire: Date.now(),
		AutoCrown: Date.now(),
		AutoTotem: Date.now(),
		AutoFarm: Date.now(),
		AutoSeed: Date.now(),
		AutoBuild: Date.now(),
		AutoIce: Date.now(),
		AutoFeed: Date.now(),
		ZMA: Date.now(),
		BottleHeal: Date.now(),
		autoBand: Date.now(),
		GoToLobby: Date.now(),
		XDLOLXD: Date.now(),
		crownHeal: Date.now(),
	};
	window.Settings = {
		VehicleOpacity: {
			enabled: true,
			e: true,
			o: .5,
		},
		GhostInfo: {
			enabled: true,
			draw: false,
		},
		Equip: {
			enabled: false,
			draw : false,
		},
		XDLOLXD: {
			enabled: true,
			draw: false,
		},
		Totem: {
			enabled: true,
			draw: false,
			x: null,
			y: null
		},
		Death: {
			enabled: true,
			draw: false,
			x: null,
			y: null,
		},
		AutoRespawn: {
			enabled: false,
			draw: false,
		},
		
		ZMApath: {
			enabled: false,
			draw: true,
		},
		ShowLevel: {
			enabled: false,
			draw: false,
		},
		GoToLobby: {
			enabled: false,
			draw: false,
			keyMode: "hold",
			key: "NONE",
			pushToBinds: true,
		},
	LBscore: {
		enabled: true,
		draw: false,
	},
	HideGUI: {
			enabled: false,
			draw: false,
			key: "none",
			keyMode: "press",
			pushToBinds: true,
		},
		autoBand: {
			enabled: false,
			draw: true,
		},
		ZMA: {
			enabled: false,
			draw: true,
		},
		Tokens: {
			enabled: false,
			token: null,
			tokenid: null,
		},
		crownHeal: {
			enabled: false,
			draw: true,
		},
		Skin: 0,
		BottleHeal: {
			enabled: false,
			draw: true,
			key: "ShiftLeft",
			pushToBinds: true,
		},
		PutInChest : 10,
		PlayerTracers: {
			enabled: true
		},
		KrakenTracers: {
			enabled: true
		},
		SandwormTracers: {
			enabled: true
		},
		PlayerOnTop: {
			enabled: true
		},
		BoxOnTop: {
			enabled: true
		},
		ListEnabledHacks: {
			enabled: true
		},
		ShowJoinLeaves: {
			enabled: true
		},
		Roofs: {
			enabled: true
		},
		ShowHP: {
			enabled: true
		},
		Debugger: {
			enabled: false
		},
		ColoredSpikes: {
			enabled: true,
			textures: "1"
		},
		Timers: {
			enabled: true
		},
		WeatherInfo: {
			enabled: true
		},
		ExtractorInfo: {
			enabled: true
		},
		ChestInfo: {
			enabled: true
		},
		BoxInfo: {
			enabled: true
		},
		WindmillInfo: {
			enabled: true
		},
		OvenInfo: {
			enabled: true
		},
		TotemInfo: {
			enabled: true
		},
		FurnaceInfo: {
			enabled: true
		},
		MachineInfo: {
			enabled: true
		},
		ShowHoodNames: {
			enabled: false
		},
		NoFog: {
			enabled: true
		},
		Xray: {
			enabled: false,
			draw: true,
			key: "Semicolon",
			keyMode: "press",
			pushToBinds: true
		},
		XrayOpacity: .4,
		RoofsOpacity: .4,
		AutoBook: {
			enabled: true
		},
		AutoTotem: {
			enabled: false,
			draw: true,
			key: "KeyH",
			keyMode: "press",
			pushToBinds: true
		},
		AutoCraft: {
			enabled: false,
			draw: true,
			key: "KeyK",
			keyMode: "press",
			last: null,
			pushToBinds: true
		},
		AutoRecycle: {
			enabled: false,
			draw: true,
			key: "KeyL",
			keyMode: "press",
			last: null,
			pushToBinds: true
		},
		AutoCrown: {
			enabled: false,
			draw: false
		},
		AimBot: {
			enabled: false,
			draw: true,
			key: "KeyF",
			keyMode: "press",
			pushToBinds: true,
			angle: null
		},
		AutoSteal: {
			enabled: false,
			draw: true,
			key: "KeyQ",
			keyMode: "hold"
		},
		AutoBreadTake: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			pushToBinds: true
		},
		AutoBreadPut: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			pushToBinds: true
		},
		AutoExtractorTake: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			pushToBinds: true
		},
		AutoExtractorPut: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			pushToBinds: true
		},
		AutoFeed: {
			enabled: true
		},
		AutoIce: {
			enabled: true
		},
		DropSword: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "hold",
			pushToBinds: true
		},
		AutoFire: {
			enabled: false,
			draw: true,
			key: "KeyV",
			keyMode: "hold",
			pushToBinds: true
		},
		AutoBuild: {
			enabled: false,
			draw: true,
			key: "KeyT",
			keyMode: "press",
			build: "Roofs",
			pushToBinds: true
		},
		AutoSeed: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			seed: "Auto",
			pushToBinds: true
		},
		AutoWall: {
			enabled: false,
			draw: true,
			key: "KeyC",
			mode: true,
			keyMode: "hold"
		},
		AutoSpike: {
			enabled: false,
			draw: true,
			key: "Space",
			keyMode: "hold",
			mode: true,
			priority: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
		},
		SmartCraft: {
			enabled: false,
			draw: true,
			key: "NONE",
			keyMode: "press",
			select: "REIDITE_SPIKE",
			hm: 255
		},
		Spectator: {
			enabled: false,
			draw: true,
			key: "KeyP",
			keyMode: "press",
			speed: .5
		},
		AutoFarm: {
			enabled: false,
			draw: true,
			key: "KeyU",
			keyMode: "press",
			angle: null,
			water: false,
			x: null,
			xx: null,
			y: null,
			yy: null,
			sy: null,
			sx: null,
			pushToBinds: true
		},
		AutoSeedG: true,
		AutoUnlock: true,
		AutoExtractorPutMax: 255,
		BreadPutMax: 31,
		WindmillPutMax: 255,
		PutInChest: 10
	};

	function loadSettings() {
		for (const property in Settings) {
			const data = localStorage.getItem(property + saveKey);
			if (data) Settings[property] = JSON.parse(data)
		}
	}

	function saveSettings() {
		for (const property in Settings) {
			localStorage.setItem(property + saveKey, JSON.stringify(Settings[property]))
		}
	}
	loadSettings();
	let ΔⲆⲆⲆⵠΔΔ = 118 + 188;
	var ᐃΔΔⲆᐃⲆΔ = 170;
	var ΔᐃⵠΔᐃⵠⲆ = 41;
	var ΔΔⲆΔΔΔⵠᐃΔ = 46;
	const ⵠⵠⲆΔᐃᐃᐃⲆΔ = window;
	let ΔⵠⵠⲆΔⲆᐃ = 151 - 160;
	var ⲆᐃᐃⲆⲆⵠΔ, ⵠᐃΔᐃⲆΔⵠⵠᐃ;
	let ᐃⲆⵠᐃⵠᐃⵠ = 50;
	let ᐃᐃᐃⵠⲆⵠⲆᐃⵠ = ᐃⲆⵠᐃⵠᐃⵠ;
	var ᐃᐃᐃⲆᐃΔⵠ, ΔⲆⵠⵠΔΔⲆΔΔ, ⲆᐃᐃΔᐃΔⲆⲆᐃ;
	let ᐃΔΔⵠⲆⵠᐃ = 246;
	if (ΔΔⲆΔΔΔⵠᐃΔ === ᐃΔΔⵠⲆⵠᐃ) ΔᐃⵠΔᐃⵠⲆ = 92;
	var ⲆᐃΔⲆΔⲆΔΔⵠ = 149;
	var ⲆᐃᐃⵠⲆΔⲆ = 149;
	var ᐃᐃⲆᐃⲆΔΔᐃⲆ = 250;
	var ΔⵠΔⵠΔΔΔⲆⲆ = 77;
	if (ᐃᐃⲆᐃⲆΔΔᐃⲆ == ΔⵠΔⵠΔΔΔⲆⲆ) ⲆᐃᐃⵠⲆΔⲆ = 201;
	var ⲆΔⲆⵠᐃⵠᐃ = 246;
	var ᐃⲆⲆⵠⲆΔΔ, ⵠᐃⵠⵠⵠⲆⵠ;
	let ⵠⲆᐃⲆⵠⵠⲆ = 197;
	const ᐃⲆⵠⲆᐃᐃⲆΔᐃ = 63;
	var ᐃᐃΔⵠⵠⵠⲆⲆⲆ = 53 * 82;
	if (ⵠⲆᐃⲆⵠⵠⲆ == ᐃⲆⵠⲆᐃᐃⲆΔᐃ) ⲆΔⲆⵠᐃⵠᐃ = 16;
	let ΔᐃΔΔⲆΔⵠ = 95 - 12;
	var ⵠⲆᐃⲆⲆⵠⲆ = 24;
	let ⲆⲆΔᐃⲆⵠᐃ = 197 * 38;
	let ᐃⲆᐃᐃⲆΔΔΔΔ = 241;
	if (ⵠⲆᐃⲆⲆⵠⲆ == ᐃⲆᐃᐃⲆΔΔΔΔ) ⲆᐃΔⲆΔⲆΔΔⵠ = 104;
	var ⵠᐃΔΔⲆᐃⵠᐃⵠ = 185;
	if (ⵠᐃΔΔⲆᐃⵠᐃⵠ >= 9) ⵠᐃΔΔⲆᐃⵠᐃⵠ = 15;
	var ⲆⵠⵠⵠⵠⵠⲆⵠᐃ = 8;
	let ᐃⵠΔⲆΔΔⲆ = 8;
	if (ⲆⵠⵠⵠⵠⵠⲆⵠᐃ > 5) ⲆⵠⵠⵠⵠⵠⲆⵠᐃ = 153;
	if (ᐃΔΔⲆᐃⲆΔ >= 0) ᐃΔΔⲆᐃⲆΔ = 113;
	let ᐃᐃⵠΔⲆΔΔ = 127;
	var ⲆⲆᐃᐃⲆⲆⵠ = 96;
	var ΔᐃⵠⲆⵠ = 117;
	var ⲆⵠⲆΔⵠⵠⵠ = 50 + 209;
	var ⵠᐃⲆⵠΔΔⲆⲆⲆ = 247;
	if (ⵠᐃⲆⵠΔΔⲆⲆⲆ == 14) ⵠᐃⲆⵠΔΔⲆⲆⲆ = 56;
	if (ΔᐃⵠⲆⵠ >= 0) ΔᐃⵠⲆⵠ = 169;
	var ᐃΔⵠΔⵠⲆᐃ = 58 * 236;
	var ᐃⲆⲆⲆᐃᐃⲆ = 122;
	const ᐃΔΔⵠⵠᐃΔⵠᐃ = 39 + 218;
	if (ᐃⲆⲆⲆᐃᐃⲆ >= 4) ᐃⲆⲆⲆᐃᐃⲆ = 38;
	var ⵠⲆΔⲆᐃⲆᐃ = 159;
	var ᐃⵠΔⲆᐃⲆᐃⲆᐃ = 31;
	let ᐃΔᐃⲆᐃⵠⲆ = 68;
	var ⵠⲆΔΔⵠΔΔⲆᐃ = 212;
	var ⲆΔⵠΔⲆᐃⵠ = 63;
	let ⵠᐃᐃⲆΔΔⲆᐃⲆ = 4;
	let ΔⲆᐃΔⵠᐃᐃⲆΔ = 184;
	if (ⵠᐃᐃⲆΔΔⲆᐃⲆ == ΔⲆᐃΔⵠᐃᐃⲆΔ) ⲆΔⵠΔⲆᐃⵠ = 67;
	var ΔⲆⲆΔΔⲆⵠⵠⲆ = 171 + 128;
	if (ⵠⲆΔΔⵠΔΔⲆᐃ >= 1) ⵠⲆΔΔⵠΔΔⲆᐃ = 143;
	var ⲆΔᐃΔᐃᐃⲆΔⲆ = 230;
	var ⵠⵠᐃΔᐃᐃᐃ = 82;
	if (ⵠⵠᐃΔᐃᐃᐃ > 2) ⵠⵠᐃΔᐃᐃᐃ = 150;
	var ⵠⲆⲆΔⲆᐃᐃ, ᐃⵠᐃⵠΔΔⲆ, ΔⵠⲆⲆⲆⲆⵠⲆᐃ, ΔⲆᐃⵠⲆⵠᐃ;
	if (ᐃⵠΔⲆᐃⲆᐃⲆᐃ > ᐃΔᐃⲆᐃⵠⲆ) ⵠⲆΔⲆᐃⲆᐃ = 148;
	var ᐃⵠΔΔΔⲆΔⲆΔ = 191;
	let ⵠΔⲆⵠᐃᐃⵠ = 8;
	if (ᐃⵠΔΔΔⲆΔⲆΔ == ⵠΔⲆⵠᐃᐃⵠ) ⲆⲆᐃᐃⲆⲆⵠ = 22;
	var ΔⵠⲆΔⲆᐃΔ = 72 - 23;
	ᐃᐃⵠΔⲆΔΔ.ᐃⵠⲆᐃⲆⵠΔΔᐃ = 9;
	const ⲆⵠⲆⲆΔΔΔΔΔ = 191;
	var ᐃⵠᐃΔⲆⲆᐃ = 138;
	const ᐃⵠᐃᐃⲆ = undefined;
	let ᐃᐃᐃᐃⲆ = 90;
	const ⲆⵠⵠⲆΔⵠΔΔᐃ = 87;
	var ⲆᐃⲆⵠⵠⵠᐃ = 161;
	if (ⲆᐃⲆⵠⵠⵠᐃ == 2) ⲆᐃⲆⵠⵠⵠᐃ = 97;
	if (ᐃᐃᐃᐃⲆ === ⲆⵠⵠⲆΔⵠΔΔᐃ) ᐃⵠᐃΔⲆⲆᐃ = 233;
	let ᐃΔΔᐃᐃⲆⲆ = 192;
	var ⲆⲆᐃᐃᐃᐃΔ = 21;
	let ⵠⲆⲆᐃΔⲆⲆΔⲆ = 207 + 63 << 0;
	const ᐃΔⵠᐃΔⵠⲆⵠᐃ = 248;
	ᐃΔⵠᐃΔⵠⲆⵠᐃ.ⲆΔΔⵠᐃⵠⵠⲆΔ = 3;
	if (ⵠⵠⲆΔᐃᐃᐃⲆΔ.ᐃΔᐃΔ === ᐃⵠᐃᐃⲆ) ⵠⵠⲆΔᐃᐃᐃⲆΔ.ᐃΔᐃΔ = 3;
	var ⵠΔⲆᐃⲆⲆᐃⵠⲆ = 153;
	var ΔᐃⲆⵠᐃᐃᐃⵠᐃ = 113;
	if (ΔᐃⲆⵠᐃᐃᐃⵠᐃ == 9) ΔᐃⲆⵠᐃᐃᐃⵠᐃ = 30;
	let ΔⲆⲆᐃⲆᐃⲆΔⲆ = 28;
	let ΔᐃΔᐃΔⲆᐃ = 22;
	if (ΔⲆⲆᐃⲆᐃⲆΔⲆ > ΔᐃΔᐃΔⲆᐃ) ⵠΔⲆᐃⲆⲆᐃⵠⲆ = 88;
	var ᐃΔΔⲆⵠⲆᐃ = 21;
	if (ᐃΔΔⲆⵠⲆᐃ === 14) ᐃΔΔⲆⵠⲆᐃ = 146;
	if (ⲆⲆᐃᐃᐃᐃΔ === 9) ⲆⲆᐃᐃᐃᐃΔ = 166;
	var ΔⵠⵠΔΔᐃᐃ = 98;
	var ⵠΔΔⵠΔᐃΔ = 112;
	let ⲆᐃⲆᐃᐃⲆⲆ = 56;
	ⲆᐃⲆᐃᐃⲆⲆ.ΔᐃⲆΔⵠᐃⵠ = 13;
	let ᐃⵠΔΔⵠⲆⵠ = 219;
	let ᐃΔᐃⵠΔΔⵠ = 94;
	if (ᐃⵠΔΔⵠⲆⵠ === ᐃΔᐃⵠΔΔⵠ) ⵠΔΔⵠΔᐃΔ = 147;
	const ΔᐃᐃΔᐃⲆΔΔΔ = 130;
	var ΔⵠⵠⵠⲆⵠⵠΔⲆ = 42;
	if (ΔᐃᐃΔᐃⲆΔΔΔ === ΔⵠⵠⵠⲆⵠⵠΔⲆ) ΔⵠⵠΔΔᐃᐃ = 1;
	var ⵠⵠΔᐃᐃᐃΔ = 29;
	ⵠⵠΔᐃᐃᐃΔ.ⵠΔΔΔⲆⲆⵠ = 7;
	var ΔⵠⵠⵠⵠΔⲆ = ⲆⵠⲆⲆΔΔΔΔΔ;
	var ΔΔⲆⲆΔⲆᐃ;
	var ⵠⲆⵠⲆΔⲆⵠΔⲆ = 192;
	const ΔᐃⲆⲆΔΔΔ = 118;
	let ⲆⵠⲆⵠⲆᐃᐃΔᐃ = 21;
	if (ΔᐃⲆⲆΔΔΔ > ⲆⵠⲆⵠⲆᐃᐃΔᐃ) ⵠⲆⵠⲆΔⲆⵠΔⲆ = 46;
	var ΔⲆⲆⲆⵠⵠⲆ = 250;
	var ΔᐃⵠΔᐃⵠΔ = 18;
	let ᐃΔΔᐃΔᐃⲆ = 241;
	if (ΔᐃⵠΔᐃⵠΔ >= ᐃΔΔᐃΔᐃⲆ) ΔⲆⲆⲆⵠⵠⲆ = 64;
	var ⲆΔⵠⲆᐃΔΔ = 198;
	if (ⲆΔⵠⲆᐃΔΔ == 1) ⲆΔⵠⲆᐃΔΔ = 154;
	let ⵠⲆⵠⲆᐃΔΔ = 35 + 203;
	var ⵠᐃⵠᐃⲆᐃᐃ = 215;
	var ΔⵠⲆᐃⲆⲆⵠΔⵠ = 26;
	let ΔⲆΔⵠᐃⵠⵠ = 73;
	if (ΔⵠⲆᐃⲆⲆⵠΔⵠ === ΔⲆΔⵠᐃⵠⵠ) ⵠᐃⵠᐃⲆᐃᐃ = 214;
	var ᐃΔΔⵠΔⵠᐃ;
	let ⵠⵠᐃⵠΔΔᐃ = 87;
	var ⲆᐃᐃⲆⲆⵠᐃⵠⲆ = 147;
	const ᐃΔⵠᐃⲆᐃᐃ = function(ⲆΔᐃⲆᐃⵠⲆⲆⵠ) {
		let ⵠⲆⲆⵠⵠᐃΔᐃΔ = "";
		for (let ᐃⵠⵠⲆᐃⵠᐃⲆᐃ = 0; ᐃⵠⵠⲆᐃⵠᐃⲆᐃ < ⲆΔᐃⲆᐃⵠⲆⲆⵠ["length"]; ᐃⵠⵠⲆᐃⵠᐃⲆᐃ++) ⵠⲆⲆⵠⵠᐃΔᐃΔ += ⵠⵠⲆΔᐃᐃᐃⲆΔ["String"]["fromCharCode"](ⲆΔᐃⲆᐃⵠⲆⲆⵠ[ᐃⵠⵠⲆᐃⵠᐃⲆᐃ] ^ ⵠⵠᐃⵠΔΔᐃ++ % 255);
		return ⵠⲆⲆⵠⵠᐃΔᐃΔ
	};
	const ⲆⵠΔᐃⵠΔⵠ = 206;
	var ΔΔⲆΔΔᐃⲆ, ⵠⲆΔΔⲆⵠⲆ, ΔᐃⵠⵠⲆⲆⵠ;
	var ᐃⵠᐃⲆΔΔⵠ = 12;
	var ᐃΔⵠⵠΔᐃᐃΔⲆ;
	if (ᐃⵠᐃⲆΔΔⵠ >= 11) ᐃⵠᐃⲆΔΔⵠ = 47;
	var ⵠᐃΔᐃᐃᐃΔ, ΔΔΔⵠⵠΔᐃ, ⵠΔΔΔⲆᐃⲆᐃⲆ, ΔⵠⵠⲆΔⵠⵠⲆⵠ;
	var ⵠⵠᐃⵠΔΔΔ = 34 + 136;
	let ⵠΔΔⲆⲆΔⲆᐃⵠ = 50 - 30;
	ⲆᐃⲆⵠΔΔⲆ = [
		[15, 105, 96, 48, 57, 110, 37, 45, 5, 55, 47, 82],
		[0, 86, 9, 19],
		[62, 91, 63, 19, 8, 94, 84, 23],
		[53, 40, 25, 30, 42, 68, 59, 0, 21, 47, 72, 18, 25, 17, 44, 67],
		[37, 199, 215, 235, 231, 211, 230, 187],
		[222, 223, 241, 230, 232, 226, 220, 179],
		[213, 200, 219, 235, 241, 167, 220, 171],
		[243, 223, 245, 238, 193, 205, 160, 163],
		[251, 232, 235, 202, 193, 202, 235, 213, 254, 240, 251, 198],
		[201, 251, 148, 197, 245, 225, 140, 143],
		[209, 227, 243, 193],
		[211, 207, 132, 135],
		[223, 142, 251, 206, 219, 129, 252, 255],
		[153, 169, 252, 179, 163, 137, 244, 247],
		[170, 155, 248, 187, 149, 136, 155, 138, 178, 131, 135, 230, 182, 153, 228, 231],
		[184, 239, 143, 182, 187, 168, 183, 152],
		[128, 137, 179, 140, 133, 218, 220, 159, 177, 187, 163, 222],
		[182, 158, 167, 194, 151, 179, 204, 131, 148, 143, 196, 199],
		[161, 146, 183, 136, 98, 80, 63, 62],
		[83, 64, 55, 74, 91, 65, 88, 59, 111, 75, 68, 99, 115, 73, 68, 127, 119, 38, 71, 42],
		[65, 65, 72, 109, 69, 122, 35, 34],
		[121, 121, 108, 83, 70, 66, 27, 26],
		[113, 68, 124, 69, 77, 122, 27, 126, 105, 105, 96, 92],
		[110, 109, 120, 93, 97, 97, 120, 87],
		[111, 104, 108, 114, 18, 16, 127, 126],
		[32, 2, 127, 48],
		[41, 30, 127, 49, 22, 21, 4, 127, 1, 60, 4, 62, 54, 102, 28, 59],
		[58, 107, 111, 40, 62, 111, 24, 52],
		[2, 38, 14, 22, 62, 51, 52, 17],
		[60, 91, 32, 26, 54, 58, 32, 95],
		[18, 67, 71, 26, 46, 34, 44, 1, 27, 20, 44, 74, 30, 16, 6, 9, 217, 214, 211, 190],
		[222, 232, 234, 244, 234, 207, 192, 231, 213, 190, 223, 178],
		[243, 162, 196, 250, 247, 166, 196, 238, 249, 206, 175, 245],
		[197, 175, 230, 169, 237, 219, 235, 158],
		[245, 253, 236, 222, 241, 241, 193, 150],
		[245, 250, 224, 159, 209, 230, 139, 198],
		[214, 134, 244, 219, 218, 222, 135, 134],
		[223, 142, 236, 215, 163, 175, 147, 254],
		[157, 146, 190, 176, 169, 142, 143, 246],
		[168, 138, 247, 255, 137, 134, 165, 238],
		[141, 231, 239, 162, 186, 180, 140, 177, 184, 156, 227, 226],
		[131, 134, 223, 222],
		[189, 178, 180, 140, 186, 177, 176, 135, 142, 131, 188, 162, 145, 169, 188, 195, 174, 162, 195, 155, 155, 158, 199, 198],
		[166, 147, 180, 118, 99, 87, 77, 107, 92, 94, 77, 76, 107, 56, 89, 96],
		[111, 89, 89, 100, 115, 33, 89, 33],
		[118, 123, 65, 108, 123, 41, 65, 112, 76, 44, 119, 80, 67, 101, 114, 25],
		[70, 75, 113, 92, 75, 25, 113, 64],
		[123, 121, 67, 69, 85, 118, 91, 118, 86, 88, 125, 80, 92, 107, 6, 1],
		[92, 12, 105, 117],
		[34, 112, 122, 117, 38, 43, 9, 36],
		[16, 29, 5, 58, 46, 57, 114, 109],
		[48, 5, 102, 46, 49, 17, 17, 45, 61, 29, 55, 52, 57, 25, 10, 93],
		[2, 80, 53, 84, 54, 49, 82, 88, 51, 50, 33, 94, 52, 57, 24, 77],
		[16, 42, 33, 24, 23, 46, 58, 69],
		[35, 45, 78, 22, 31, 76, 45, 236, 215, 212, 201, 206, 212, 180, 190, 252, 234, 205, 178, 249, 215, 217, 186, 160],
		[243, 213, 170, 254, 244, 225, 170, 165],
		[192, 253, 166, 161],
		[254, 173, 205, 149, 195, 229, 246, 153],
		[199, 225, 225, 193, 243, 253, 220, 145],
		[207, 233, 249, 197, 235, 129, 225, 219],
		[228, 219, 219, 214, 239, 237, 215, 201, 217, 250, 230, 240, 144, 154, 137, 189, 156, 158, 172, 245],
		[173, 157, 254, 191, 175, 252, 129, 162],
		[137, 227, 234, 229, 183, 184, 149, 168, 187, 189, 230, 225],
		[191, 137, 153, 212],
		[130, 170, 169, 136, 129, 139, 177, 157, 141, 175, 185, 128, 183, 131, 169, 193, 147, 186, 162, 201],
		[151, 196, 194, 129, 163, 162, 181, 140, 152, 147, 85, 60],
		[91, 109, 82, 108, 95, 106, 112, 101, 105, 124, 49, 48],
		[92, 72, 86, 33, 72, 66, 41, 40],
		[76, 80, 78, 115, 120, 41, 78, 113, 72, 73, 106, 107, 115, 17, 29, 81, 69, 96, 17, 92, 112, 124, 25, 29],
		[116, 66, 9, 91, 86, 107, 121, 8],
		[84, 5, 13, 83, 88, 9, 9, 13, 100, 103, 40, 113, 32, 20, 18, 48, 34, 22, 117, 116],
		[41, 121, 26, 56, 20, 14, 109, 108],
		[3, 62, 56, 59, 5, 0, 109, 105, 20, 49, 14, 31, 61, 49, 42, 9, 7, 50, 89, 88],
		[60, 63, 50, 5, 8, 5, 61, 80],
		[13, 40, 8, 25, 43, 65, 34, 26, 20, 69, 0, 18, 32, 35, 53, 64],
		[39, 18, 198, 235, 227, 177, 224, 252, 228, 180, 222, 252, 208, 206, 194, 251, 236, 200, 169, 232],
		[241, 254, 194, 253, 204, 214, 165, 164],
		[254, 211, 214, 245, 199, 173, 245, 156],
		[244, 145, 242, 204, 243, 149, 145, 195, 203, 153, 250, 157],
		[244, 157, 230, 129, 227, 129, 141, 192, 210, 240, 238, 141, 222, 250, 129, 128],
		[231, 209, 150, 172, 152, 174, 146, 188],
		[165, 170, 142, 188, 144, 140, 245, 185],
		[156, 154, 225, 128, 132, 149, 191, 232],
		[143, 185, 142, 233, 190, 156, 229, 168],
		[188, 136, 217, 138, 131, 180, 190, 208],
		[131, 182, 213, 212],
		[176, 172, 213, 135, 138, 184, 193, 157, 144, 157, 165, 200],
		[148, 176, 193, 151, 183, 175, 189, 192],
		[167, 87, 79, 50, 98, 92, 95, 106],
		[100, 58, 97, 122, 81, 98, 95, 66, 85, 72, 122, 47],
		[73, 83, 121, 108, 116, 95, 97, 114, 126, 77, 32, 35],
		[77, 78, 119, 87, 122, 23, 119, 86, 69, 26, 29, 23],
		[79, 30, 107, 94, 75, 119, 93, 71, 105, 67, 8, 11],
		[84, 10, 119, 67, 97, 107, 107, 75],
		[92, 45, 120, 115, 33, 41, 20, 123],
		[18, 13, 34, 119],
		[18, 126, 53, 56, 44, 98, 4, 111],
		[9, 28, 31, 62, 51, 104, 53, 46, 2, 11, 57, 50],
		[6, 82, 25, 10, 2, 51, 84, 10, 61, 41, 84, 87],
		[50, 52, 39, 4, 57, 55, 73, 79],
		[41, 25, 25, 5, 19, 63, 47, 3],
		[25, 78, 72, 8, 28, 199, 215, 247],
		[225, 182, 176, 234, 228, 230, 195, 252, 232, 235, 176, 179],
		[237, 215, 168, 250, 201, 211, 195, 253],
		[244, 170, 207, 233, 193, 203, 211, 174],
		[198, 248, 243, 146, 250, 243, 235, 212],
		[197, 239, 197, 223, 241, 249, 227, 198, 204, 241, 140, 143],
		[234, 227, 255, 204],
		[228, 212, 247, 234, 239, 219, 128, 131],
		[219, 152, 128, 255],
		[166, 128, 140, 251],
		[164, 128, 131, 188, 175, 139, 244, 254, 170, 136, 147, 190],
		[178, 131, 224, 163, 141, 128, 147, 147, 141, 153, 236, 147],
		[137, 183, 141, 151, 135, 160, 160, 212, 182, 176, 163, 147, 178, 180, 134, 211],
		[182, 194, 137, 130, 169, 163, 192, 198, 160, 185, 196, 199],
		[152, 145, 171, 132, 90, 89, 83, 62],
		[103, 66, 64, 126, 107, 59, 92, 65, 110, 99, 95, 50],
		[116, 86, 68, 105, 112, 84, 43, 42],
		[123, 116, 76, 97, 127, 90, 39, 106, 67, 19, 116, 118, 126, 125, 78, 23],
		[123, 126, 31, 27, 97, 121, 116, 109, 83, 95, 120, 91, 81, 100, 11, 10],
		[97, 11, 66, 77, 95, 15, 104, 110, 25, 25, 16, 44],
		[32, 119, 42, 44, 44, 14, 45, 118],
		[22, 26, 123, 36],
		[51, 63, 53, 110],
		[7, 2, 103, 63, 2, 107, 15, 102],
		[63, 48, 8, 39, 4, 54, 52, 25, 0, 32, 32, 18, 9, 62, 91, 3, 8, 42, 2, 25, 18, 26, 40, 10, 45, 34, 71, 27],
		[33, 75, 2, 11, 38, 42, 75, 79, 215, 208, 191, 190],
		[224, 210, 179, 236, 210, 222, 208, 251, 238, 224, 216, 228],
		[243, 162, 192, 234, 246, 167, 226, 251],
		[203, 206, 175, 171, 209, 231, 212, 221, 195, 207, 232, 203, 193, 244, 155, 154],
		[253, 196, 252, 197, 254, 245, 198, 216],
		[211, 246, 222, 198, 238, 194, 139, 138],
		[218, 139, 143, 208, 223, 208, 248, 209, 163, 242, 144, 171, 167, 171, 151, 250],
		[171, 251, 132, 163, 174, 138, 155, 242],
		[138, 227, 132, 227, 130, 146, 186, 163, 130, 129, 170, 173, 190, 176, 136, 143, 186, 140, 184, 153, 190, 189, 183, 218],
		[177, 190, 223, 133, 142, 170, 187, 210],
		[149, 181, 183, 206],
		[161, 189, 188, 129, 154, 174, 150, 129, 166, 172, 195, 61],
		[98, 48, 123, 116, 92, 52, 82, 53],
		[80, 56, 99, 96, 84, 60, 124, 45],
		[114, 85, 85, 109, 118, 36, 66, 37],
		[76, 41, 73, 101, 124, 73, 42, 78],
		[115, 79, 91, 82, 124, 126, 118, 26, 103, 111, 109, 85, 78, 67, 105, 5],
		[104, 0, 10, 66, 84, 4, 91, 84],
		[88, 114, 113, 80, 103, 89, 2, 125],
		[34, 113, 17, 44, 33, 1, 18, 117],
		[45, 13, 114, 26, 27, 11, 1, 4, 53, 26, 25, 36, 55, 59, 52, 101],
		[0, 104, 29, 47, 63, 31, 98, 93],
		[5, 37, 15, 16, 63, 49, 94, 89, 13, 43, 86, 81],
		[55, 41, 41, 64, 40, 35, 78, 73],
		[44, 46, 61, 18],
		[27, 23, 61, 78, 28, 41, 27, 232, 229, 197, 186, 253],
		[220, 180, 190, 251, 235, 185, 194, 177],
		[215, 188, 217, 160, 196, 255, 197, 238, 246, 209, 174, 237, 250, 168, 205, 213, 199, 201, 217, 203, 251, 250, 234, 153],
		[252, 148, 207, 192, 202, 193, 229, 218, 247, 233, 249, 242, 213, 243, 142, 137],
		[239, 219, 219, 203, 219, 252, 233, 208, 216, 246, 238, 253],
		[162, 241, 137, 174],
		[159, 129, 145, 250, 168, 157, 133, 160, 152, 137, 163, 228, 139, 133, 171, 135, 140, 142, 133, 168, 187, 173, 230, 225],
		[135, 153, 230, 148, 184, 181, 143, 145],
		[129, 190, 169, 132, 138, 129, 147, 132, 143, 131, 139, 193, 168, 165, 151, 152],
		[150, 155, 161, 144, 163, 178, 151, 168, 153, 185, 70, 49, 88, 82, 57, 56],
		[92, 106, 49, 124, 110, 67, 65, 48],
		[108, 72, 86, 100, 72, 32, 66, 125, 76, 37, 77, 36],
		[123, 76, 41, 103, 122, 88, 102, 84, 123, 17, 113, 24],
		[68, 96, 68, 92, 112, 126, 92, 91, 79, 120, 4, 12],
		[80, 94, 13, 6],
		[108, 89, 114, 85, 96, 99, 76, 81],
		[93, 13, 6, 115, 24, 18, 121, 120],
		[28, 42, 36, 58, 40, 10, 113, 112],
		[23, 124, 26, 61, 11, 11, 6, 57, 4, 0, 32, 53, 56, 12, 10, 40, 58, 30, 93, 92],
		[55, 38, 93, 47, 50, 11, 58, 61],
		[9, 35, 38, 1, 52, 2, 28, 69],
		[17, 64, 34, 28, 47, 47, 50, 0, 35, 35, 23, 64],
		[29, 18, 185, 177, 219, 219, 214, 233],
		[228, 181, 189, 240, 208, 220, 202, 230, 235, 215, 222, 161, 203, 203, 198, 249, 207, 165, 240, 241, 248, 246, 248, 241],
		[253, 172, 242, 216, 192, 145, 208, 201, 243, 148, 250, 156, 200, 236, 249, 144],
		[244, 247, 216, 198, 208, 128, 254, 133, 213, 192, 133, 132],
		[217, 136, 238, 196, 220, 141, 180, 173, 148, 132, 146, 241, 162, 134, 245, 244],
		[169, 248, 142, 190, 175, 152, 158, 189],
		[177, 225, 130, 229, 131, 186, 142, 161, 190, 140, 138, 167, 186, 154, 136, 141, 187, 180, 182, 137, 133, 128, 213, 212],
		[176, 134, 128, 152, 180, 174, 205, 204],
		[171, 164, 140, 134],
		[175, 197, 128, 149, 163, 163, 182, 174, 164, 87, 79, 50],
		[96, 55, 87, 106, 100, 73, 52, 55],
		[104, 62, 91, 98, 85, 81, 44, 47],
		[73, 38, 67, 38, 69, 79, 97, 118, 121, 75, 75, 107, 123, 101, 107, 23, 112, 115, 116, 27],
		[68, 69, 127, 94, 73, 31, 119, 66, 126, 2, 73, 90, 80, 7, 120, 11],
		[109, 105, 4, 7],
		[98, 109, 0, 3],
		[92, 115, 19, 52, 32, 5, 120, 123],
		[29, 37, 37, 57, 41, 10, 3, 126, 42, 7, 41, 62],
		[7, 58, 3, 34, 14, 53, 15, 35],
		[56, 49, 49, 48, 62, 40, 48, 95],
		[49, 9, 29, 16, 62, 48, 56, 16, 38, 7, 43, 23, 12, 29, 55, 71],
		[23, 51, 25, 2, 45, 45, 47, 15, 33, 61, 64, 67],
		[28, 238, 234, 191],
		[226, 233, 188, 246, 229, 239, 180, 183],
		[233, 203, 180, 189],
		[238, 162, 199, 167, 240, 220, 223, 250, 244, 171, 212, 167],
		[194, 241, 203, 174, 198, 241, 156, 159],
		[249, 150, 221, 208, 254, 197, 239, 217, 250, 158, 148, 218, 204, 247, 136, 200, 210, 236, 231, 218, 227, 139, 251, 214, 216, 209, 251, 142, 222, 151, 248, 183],
		[160, 247, 131, 191, 163, 137, 244, 247],
		[169, 139, 161, 180, 171, 145, 236, 239],
		[183, 147, 236, 147, 142, 128, 139, 178, 141, 138, 151, 147],
		[187, 210, 167, 155, 129, 131, 216, 219],
		[132, 218, 175, 158, 136, 171, 149, 130],
		[181, 194, 167, 194, 161, 163, 141, 154, 149, 175, 175, 143, 159, 180, 179, 189, 101, 87, 80, 107, 94, 53, 51, 111, 106, 94, 95, 54],
		[85, 96, 55, 100, 117, 64, 47, 46],
		[112, 77, 88, 123, 123, 114, 92, 117, 70, 74, 43, 47],
		[121, 19, 90, 79, 125, 125, 108, 114, 73, 126, 27, 71, 78, 30, 120, 31],
		[81, 102, 7, 88, 110, 109, 94, 103, 98, 94, 7, 6],
		[95, 80, 104, 69, 36, 6, 123, 58, 30, 20, 123, 122],
		[17, 123, 12, 62, 21, 127, 24, 60, 1, 6, 103, 35, 54, 2, 16, 103, 57, 14, 99, 46, 14, 51, 20, 55, 2, 54, 55, 94],
		[62, 87, 48, 87, 62, 46, 6, 31, 54, 60, 83, 82],
		[21, 37, 59, 78],
		[23, 71, 32, 71, 46, 62, 22, 15, 38, 42, 71, 78, 228, 192, 191, 190],
		[230, 210, 234, 183, 210, 209, 192, 198, 237, 218, 191, 255, 244, 208, 175, 174],
		[205, 167, 238, 231, 194, 206, 175, 171, 207, 218, 200, 239, 250, 147, 202, 147],
		[198, 242, 159, 149, 242, 255, 248, 221],
		[206, 234, 151, 193],
		[233, 233, 224, 219, 214, 223, 255, 138],
		[220, 254, 131, 213, 230, 143, 198, 211, 145, 243, 186, 171, 167, 246, 139, 250],
		[170, 164, 140, 191, 150, 156, 243, 242],
		[177, 134, 231, 164, 176, 141, 135, 234],
		[186, 142, 156, 172, 191, 154, 178, 170, 186, 150, 223, 222],
		[134, 215, 211, 147, 178, 177, 164, 145, 181, 186, 138, 131],
		[145, 166, 195, 155, 174, 199, 160, 164, 162, 174, 207, 144, 166, 165, 180, 112, 99, 111, 96, 57],
		[100, 65, 107, 102, 104, 75, 54, 49],
		[110, 73, 73, 32, 112, 83, 46, 41],
		[79, 36, 65, 40, 77, 77, 119, 111, 127, 89, 115, 90, 123, 117, 109, 82, 71, 75, 117, 82],
		[120, 114, 97, 85, 116, 118, 67, 115, 85, 101, 105, 89, 111, 110, 126, 5],
		[90, 8, 87, 82, 95, 89, 2, 125],
		[21, 21, 5, 116, 36, 7, 122, 117],
		[42, 13, 114, 127],
		[46, 6, 25, 42, 48, 19, 110, 105],
		[12, 100, 63, 48, 58, 49, 29, 108],
		[56, 31, 98, 93],
		[2, 15, 53, 16, 7, 85, 61, 4, 59, 50, 49, 0, 15, 0, 61, 61, 16, 42, 61, 68, 47, 33, 66, 20, 26, 29, 70, 65],
		[39, 19, 57, 235, 219, 211, 190, 185],
		[220, 180, 190, 253, 237, 194, 193, 250, 239, 207, 178, 173],
		[245, 213, 197, 160, 241, 211, 209, 235, 248, 205, 255, 233],
		[199, 198, 247, 215, 192, 250, 233, 200, 198, 209, 154, 149],
		[205, 199, 199, 192, 201, 217, 146, 141],
		[210, 128, 229, 132, 225, 225, 219, 203, 219, 253, 215, 198, 231, 233, 241, 182, 163, 175, 145, 190],
		[167, 245, 133, 248, 168, 157, 242, 185, 174, 185, 242, 237],
		[180, 134, 150, 233],
		[180, 129, 230, 176, 131, 232, 141, 136, 191, 137, 230, 150, 133, 165, 139, 148, 135, 139, 131, 174, 139, 135, 173, 133, 143, 169, 185, 155],
		[146, 181, 202, 142, 148, 174, 165, 136, 155, 200, 207, 193],
		[158, 185, 70, 120, 88, 84, 49, 53, 82, 106, 49, 98, 80, 90, 49, 48],
		[84, 88, 37, 121, 75, 126, 108, 121, 76, 86, 37, 36],
		[67, 41, 37, 103],
		[127, 71, 114, 77, 64, 114, 25, 24],
		[127, 112, 122, 66],
		[121, 124, 25, 29, 97, 106, 118, 72, 81, 94, 114, 0],
		[110, 6, 1, 64, 94, 115, 110, 77, 102, 13, 10, 41, 33, 113, 17, 120],
		[16, 117, 30, 32, 27, 19, 2, 55, 20, 24, 97, 56, 48, 27, 63, 104],
		[15, 0, 10, 50, 11, 105, 36, 53, 61, 108, 45, 92],
		[56, 36, 93, 86, 4, 0, 85, 84],
		[50, 90, 85, 26, 15, 56, 68, 76],
		[43, 65, 28, 29, 21, 28, 54, 15, 32, 60, 41, 64],
		[26, 55, 236, 246, 216, 210, 185, 184],
		[223, 240, 181, 180],
		[238, 184, 198, 253, 234, 200, 197, 172],
		[203, 203, 214, 226, 204, 192, 173, 242, 203, 169, 244, 237, 252, 216, 241, 156],
		[251, 206, 200, 208, 252, 230, 149, 148],
		[203, 153, 250, 152, 255, 157, 137, 218, 232, 226, 137, 136],
		[212, 133, 141, 210, 217, 214, 133, 202],
		[228, 141, 184, 183, 155, 174, 130, 182, 151, 144, 176, 190, 171, 140, 137, 240],
		[175, 152, 229, 164, 136, 139, 158, 128, 140, 143, 176, 233],
		[185, 182, 138, 170, 188, 152, 166, 139, 184, 178, 217, 216],
		[135, 191, 166, 166, 179, 190, 216, 208],
		[182, 222, 201, 132, 168, 171, 151, 200],
		[149, 197, 174, 138, 160, 172, 178, 205, 164, 87, 83, 72, 97, 105, 87, 106, 98, 73, 52, 55],
		[93, 91, 97, 123, 107, 84, 92, 107, 66, 76, 95, 111, 78, 64, 114, 39],
		[121, 75, 113, 107],
		[124, 77, 119, 81, 121, 115, 99, 92, 125, 121, 20, 23],
		[72, 31, 111, 93, 78, 104, 96, 15],
		[81, 115, 99, 91, 83, 121, 4, 7],
		[98, 14, 4, 75, 92, 114, 120, 49, 25, 21, 120, 123],
		[35, 0, 3, 34, 41, 34, 3, 62, 43, 23, 61, 36, 49, 51, 104, 107],
		[13, 0, 49, 54, 2, 43, 96, 99],
		[5, 13, 25, 20, 1, 87, 44, 91],
		[4, 5, 63, 0, 15, 45, 80, 83],
		[14, 55, 39, 2, 41, 70, 29, 70],
		[20, 74, 17, 10, 33, 18, 44, 67],
		[28, 199, 249, 234, 230, 213, 184, 187],
		[228, 186, 229, 188, 209, 221, 176, 179],
		[214, 162, 168, 231, 241, 249, 195, 252, 243, 223, 207, 241],
		[250, 203, 168, 235, 197, 248, 235, 235, 249, 243, 201, 200, 198, 224, 248, 151],
		[202, 158, 251, 155, 204, 199, 140, 143],
		[215, 134, 221, 198, 238, 138, 222, 135],
		[225, 253, 128, 131],
		[221, 135, 173, 183, 153, 146, 161, 182, 157, 128, 155, 165],
		[146, 161, 155, 248, 174, 135, 135, 171, 130, 231, 131, 175, 179, 181, 143, 143, 185, 171, 224, 227],
		[190, 167, 141, 151, 135, 165, 216, 219],
		[189, 218, 191, 218],
		[138, 187, 216, 131, 141, 135, 204, 207],
		[169, 147, 200, 203],
		[148, 203, 171, 131, 154, 171, 200, 144, 97, 86, 88, 54],
		[96, 66, 63, 83, 108, 65, 64, 123, 110, 96, 109, 50],
		[74, 35, 68, 35, 69, 120, 47, 38, 122, 116, 72, 107, 126, 112, 122, 91, 66, 102, 78, 79, 70, 75, 116, 116, 114, 126, 100, 27],
		[78, 122, 120, 71, 83, 2, 100, 74, 110, 99, 100, 91, 93, 113, 107, 6],
		[88, 122, 104, 11, 36, 4, 8, 43, 39, 119, 16, 52, 41, 30, 127, 39],
		[21, 21, 12, 56, 50, 25, 57, 110],
		[54, 102, 20, 63, 1, 107, 54, 107, 57, 12, 99, 98],
		[2, 38, 91, 9, 61, 61, 52, 23, 10, 91, 94, 86],
		[13, 58, 63, 82],
		[20, 57, 56, 3, 22, 36, 75, 74],
		[26, 46, 44, 1, 31, 79, 56, 17, 218, 208, 191, 190],
		[230, 194, 208, 181, 210, 222, 253, 182],
		[238, 202, 183, 229, 241, 163, 196, 248],
		[247, 167, 175, 238, 252, 216, 167, 166],
		[255, 175, 200, 175],
		[194, 147, 150, 158],
		[192, 200, 224, 212, 204, 254, 255, 150]
	];
	let ᐃᐃΔᐃⲆΔⵠΔⲆ = 131;
	const ⲆᐃⲆᐃᐃᐃⲆ = {};
	ⲆᐃⲆᐃᐃᐃⲆ.ᐃⵠⲆⲆᐃⵠᐃ = 5;
	const ᐃᐃⵠΔⵠⵠᐃⲆᐃ = ᐃᐃΔᐃⲆΔⵠΔⲆ;
	var ⵠᐃⵠⵠⵠⵠΔ;
	var ⲆᐃᐃⵠⲆᐃⲆⵠᐃ = 158;
	var ΔⵠᐃⵠᐃᐃⲆᐃᐃ, ᐃᐃⲆΔⲆΔⲆ, ᐃΔΔⵠᐃΔΔ, ⵠΔⲆⲆⲆᐃⵠ;
	var ᐃⵠΔⲆΔᐃΔΔⲆ, ⲆⲆᐃⵠⵠⵠΔᐃΔ;
	let Δᐃᐃᐃⵠⵠᐃ = 82;
	var ⲆᐃⵠᐃΔΔΔ, ᐃⲆⵠΔⲆⲆⵠⵠΔ, ᐃᐃⵠΔᐃᐃⲆ, ᐃⲆΔᐃΔⵠᐃⵠᐃ;
	let ᐃⲆΔⵠᐃⵠⵠΔΔ = 128;
	var ΔΔⵠⵠⵠⵠΔⲆⵠ = 204;
	let ⵠΔᐃΔⲆΔⵠΔΔ = 250 - 218;
	var ΔⲆⵠⲆⲆΔⲆᐃⵠ, ⲆⵠⵠΔΔⲆΔ, ⲆΔⲆΔⲆⵠᐃ, ᐃΔⵠⵠⲆᐃⲆ;
	if (ΔΔⵠⵠⵠⵠΔⲆⵠ === 9) ΔΔⵠⵠⵠⵠΔⲆⵠ = 96;
	var ⵠⲆΔⲆΔⵠⵠ;
	if (Δᐃᐃᐃⵠⵠᐃ > ᐃⲆΔⵠᐃⵠⵠΔΔ) ⲆᐃᐃⵠⲆᐃⲆⵠᐃ = 139;
	var ⲆⵠⲆΔⵠⲆⲆⵠⲆ = 210;
	const ΔΔⵠΔⵠⵠΔⲆⲆ = 247;
	var ΔⲆᐃⲆΔⲆΔ = 163 * 122;
	const ⵠⲆⲆⵠⵠⵠᐃ = 88;
	if (ΔΔⵠΔⵠⵠΔⲆⲆ >= ⵠⲆⲆⵠⵠⵠᐃ) ⲆⵠⲆΔⵠⲆⲆⵠⲆ = 113;
	for (let ᐃⵠⵠⲆᐃⵠᐃⲆᐃ = 0; ᐃⵠⵠⲆᐃⵠᐃⲆᐃ < ⲆᐃⲆⵠΔΔⲆ["length"]; ᐃⵠⵠⲆᐃⵠᐃⲆᐃ++) ⲆᐃⲆⵠΔΔⲆ[ᐃⵠⵠⲆᐃⵠᐃⲆᐃ] = ⵠⵠⲆΔᐃᐃᐃⲆΔ["atob"](ᐃΔⵠᐃⲆᐃᐃ(ⲆᐃⲆⵠΔΔⲆ[ᐃⵠⵠⲆᐃⵠᐃⲆᐃ]));
	const ⵠᐃⵠᐃⵠ = -2012 + 1418 + 340 + 47 + 31 + 387 + 7 + 14 + 21 + 2;
	const ᐃᐃⲆΔⵠ = -1254 + 496 + 147 + 35 + 83 + 267 + 192 + 12 + 15 + 24 + 3;
	const ⲆΔᐃⲆᐃ = 7;
	const ⵠⲆⵠᐃΔ = 19;
	const ΔⲆⲆⲆⲆΔΔ = 1080;
	const ⵠ = ["#ffffff", "cave o chão para pegar terra, areia e gelo", "claim_rewards", "cs", "#74ede6", "000_111_010", "Nützlich um Gebäude zu zerstören", "Możesz także zdobyć minerały", "Communist", "#347f93", "#b864d6", "#0F3A24", "#785f4c", "Durability: 2000", "Building method: Free. Press G to change", "#A9D6D3", "#0d2e33", "CrysTal", "#eda80d", "killdragon_1", "#4d4a2e", "You will be cured faster", "Réchauffe en dehors de l'eau et dans l'hiver", "#485e66", "servselect", "cancel_sure_delete", "#3dc4c0", "playing", "Dégâts: 2", "Birth: 4min", "#1d1d22", "Totem", "Haltbarkeit: 1000", "kit", "#a7983c", "Score", "110_111_010", "010_010_010", "#242330", "durabilidade: 2000", "#b3e0e3", "click", "#d45ce5", "Kill", "Damage: 14", "Damage: 20", "#7d5234", "Damage: 4", "Crab sticks", "shop_starterkit", "#9baaa3", "mousedown", "#0c0c0d", "#523e26", "Useful to destroy buildings", "#D8DC74", "#1a7961", "You feel a great power emanating from this orb", "#3A2A0D", "#c4a23a", "Days survived", "#124949", "#077b49", "#43b5af", "útil para destruir construções", "DESERT", "play", "011_111_110", "typequest", "Hält dich warm außerhalb von Wasser und Winter", "#34255d", "Продолжительность: 8 дней", "fod", "Damage: 5", "#83827e", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "110_110_000", "de", "Cava para conseguir tierra, arena y hielo", "#2a2938", "timeremainingquest", "#07393d", "mousemove", "#183f3f", "#bfb360", "#C0BF55", "#432516", "#083b3a", "#4eb687", "#252525", "middle", "#000000", "#C1C0C0", "quit_chronoquest", "starve_safe", "#59c9c0", "#123d38", "#032428", "Ciepło w i poza zimą", "Starve.io ", "#FFFFFF", "Damage: 3", "You can not attack when you use it", "000_011_000", "#e8e8e8", "la", "event", "CLAIM REWARD!", "#816511", "Durée de vie: 8 jours", "#efd435", "fade", "#2b5c48", "110_111_000", "#77371f", "#EBF2F0", "WINTER", "Game", "Wytrzymałość: 700", "110_111_111", "#e6636a", "#8c29aa", "#e7dc8f", "Oh, yeah? Is there crab in the crab sticks?", "#C09D6F", "#3fc9c9", "#47341d", "dano em construções: 1", "Emerald Machine", "auth2", "#082b22", "#7f6d52", "#57442a", "#29aaa1", "Damage: 24", " After 1 day, survive in winter", "Du kannst auch Mineralien bekommen", "#232828", "#111316", "FOREST", "points", "#87d2e6", "Building Damage: 4", "Durability: 1000", " Open 5 treasure chests", "#EDCE4F", "eject_member", "#83ddd4", "#113f3c", "#EAEAEA", "#B56D18", "#53A4D5", "#21112D", " Reward", "#747471", "000_011_010", "Essen: 100", "Cactus", "#388AC7", "#afac98", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16", "#dfd1cb", "#A89F67", "Pomocny w niszczeniu budowli", "#2b9390", "active", "Content-Type", "#be8d50", "gapi", "gw", "#c1b06b", "opacity", "você também pode pegar minerais", "team_box", "011_111_010", "Warm outside water and in winter", "fo", "_trad_number", "Défense: 4, Défense contre animaux: 16", "Прочность: 2000", "mouseup", "none", "#73dde5", "Chrono Quests", "name", "#73583e", "#1f4948", "#0a2728", "#f4efc6", "#33b4e4", "010_111_011", "010_111_010", "#63c9d6", "#b2d4d1", "#665329", "#042b30", "#032b23", "#43aa82", "dano: 2", "Damage: 2", "Урон по строениям: 1", "#4C3B19", "#b29e4d", " : ", "#000", "#d588f1", "durabilidade: 700", "#8a938e", " Share on Twitter", "Так же вы можете получить ресурсы", "Dig the ground to gather dirt, ice, and sand", "#7C5A29", "#041c21", "#ac222a", " you can only hit people who are flying too", "Lebenszeit: 8 Tage", "#092813", "spectator", "000_011_011", "#B6222A", "starve_quests", "#328587", "#29997c", "_number", "Allow you to calm crabs, and heal them", "#b7252c", "Schaden an Gebäuden: 1", "nickname_input", "#654320", "#614627", "#634828", "#1e2021", "Obrażenia do budowli: 1", "home_craft", "FB", "010_011_010", "#c7a726", "111_111_111", "#d7990c", "#171a19", "#133a2b", "#660000", "Защищает от холода вне воды.", "#5cc5ce", "Utile pour détruire les bâtiments", "Players Defense: 4", "000_111_111", "#89d1d4", "Durabilidad: 1000", "110_111_011", "#030d14", "#a08f47", "#EFE4B4", "GET", "#0d1b1c", " Be peaceful", "Sushui", "#392C16", "010_110_010", "#54a4ba", "Durabilité: 700", "Daño: 2", "string", "Crabs follow you", "110_110_010", "survive20min_3", "starve_info_box", "plm", "010_111_111", "#123335", "Survive without losing life", "Bed", "#096d41", "#C98435", "starve_cancel", "#46554D", "#35b1b5", "Animals Defense: 13", "#58645F", "#86d4e0", "gm", "high_ing", "wtb", "#e0f2f6", "game_body", "#3f332a", "#280e09", "Wytrzymałość: 1000", "recipe_craft", "#2b7c57", "#af59cd", "Wytrzymałość: 2000", "#0e3022", "#211108", "011_011_011", "Прочность: 700", "You can buy items on the shop in the next game with your points", "011_011_010", "#4c3a15", "011_111_111", "#e45936", "&userid=", "#252B28", "You are less cold, less thirsty, and less hungry", "Pixelbitie", "#46c2c9", "011_111_011", "#86d0d1", "Food: 20", "defesa de jogadores: 4, defesa de animais: 16", "When you are flying,", "Haltbarkeit: 700", "azerty_ing", "score", "LAVA", "#25c5d6", "canvas", "forest", "#382e19", "account_nickname_input", "claim_reward_", "#6a7570", "Creuse la terre, le sable et la neige", "#4c3b19", "Easter Egg", ".md-languages label button", "#0a0b0c", "#e4efe8", "object", "#f9efeb", " Claim rewards", "#7d6144", "111_111_011", "#0a2f2b", "Crab Spear", "#c26de0", "010_011_011", "#8359d3", "volume", "nu", "upfiz", "#95d5d8", "011_011_000", "aloner", "#322413", "#493e26", "Time Remaining", "Прочность: 1000", "Bueno para destruir estructuras", "#c3be9a", "#1d051e", " Gather 1 amethyst", "#a33e2b", "#c27add", "011_111_000", "#e2cf27", "treasure_chest_4", "#44301b", "#281A49", "Jedzenie: 100", "#263947", "Uuunnnggg...", "pizza wa", "#bbbbbb", "#fef4f4", "000_110_000", "#5cccc4", "#123b3f", "111_111_000", "#939393", "#BB0000", "También puedes conseguir minerales", "init", "#58452b", "#75827D", "You can also gather minerals", "#262114", "#67766F", "#564021", "#939995", "#2E85A0", "destination-out", "getAuthResponse", "XPayStationWidget", "#184747", "Durability: 700", "Schaden: 2", "#0a2d18", "Crab Claw", "#1F343F", "rewardquest", "000_111_011", "#5E3E1A", "#C6AF81", "#ee593d", "cursor", "#B26F31", "#574122", "rgba(255, 255, 255, 0)", "#342C7C", "Durability: 400", "round", "audio/ambience.mp3", "#083326", "#1678a2", "Damage: 30", "#5E3C10", "px", " Collect 100 bread in deep winter", "#182935", "#200333", "#c4bc51", "Durabilidad: 700", "#043c37", "010_111_000", "constraintquest", " Collect 1 dragon heart", "inv_shop", "isl", "#031619", "#A37943", "111_111_010", "#0b2326", "Winter", "010_010_000", "img/avatar-player14.png", "time", "starve_quality", "#1a4935", "Crab claws can also be eaten", "#9b2b25", "Czas życia: 8 dni", "#c04933", "Haltbarkeit: 2000", "#163A3A", "#a9e4ed", "110_111_110", "_blank", "010_111_110", "#2A8B9B", "'Baloo Paaji', sans-serif", " Constraints", "inline-block", "#1f343f", "2d", "#1b170c", "starve_aliasing", "#FFF", "010_110_000", "re", "#174a51", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16", "000_010_000", "source-over", "#3e3c25", " BACK TO THE GAME", "low_ing", "#e9dad9", "Sandwich", "eogito", "#674C2A", "Food: 10", "Starve.io", "#5f6061", "000_010_010", " QUIT", "#1f773d", "Урон: 2", "Lifetime: 8 days", "Uuunnnggg", "</div>", "comida: 100", "Building Damage: 1", "serverAddressInput", "#554139", "#68622D", "#2b6664", "pos", "#107746", "#b29c32", "Widget", "You are the king of crabs!", "Players Defense: 4, Animals Defense: 16", "Durabilidad: 2000", "#0a4049", "#c67933", "Durabilité: 2000", "qwerty_ing", "#A5A244", "#092b29", "#454545", "000_110_010", "winter_7", "010_110_110", "Damage: 1", "110_110_110", "#fff", "#214C4B", "#073030", "Daño para estructuras: 1", "stop", "#cd98e5", "#394841", "timeremain_", "Crab Helmet", "Peut aussi récupérer des minéraux", "#8255b5", "Используется для разрушения зданий", "nickname_block", "Копайте землю, чтобы получить грязь, лед и песок", "sw", "MADBalgouthi", "#3da34d", "id", "010_011_000", "#ddcf8a", "Durabilité: 1000", "#0e3838", "000_111_110", "#ff0000", "#141414", "Chapka", "Comida: 100", "On-Hit Damage: 3", "#313041", "They can't hit you and you can't hit them", "&region=", "Building method: Grid. Press G to change", "#1a4545", "Anyone want to play?", "starve_mapping", "Relax in this confortable bed", "#462966", "#281C08", "#b15ecf", "input_ratio", "#24878f", "#115E60", "#0b3432", "#4d2d14", "#2b280a", "111_111_110", "#15514f", "#120202", "#596560", "Grab herum um Dreck, Eis und Sand zu bekommen", "#877d36", "time_finished_", "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.", "buy_kit", "#09373F", "Защита от игроков: 4, Защита от животных: 16", "#163a3a", "#adbcb5", "send", "bread_6", "#072824", " Share on Facebook", "Taco4Life", "000_110_110", "#1f5453", "Te calienta en invierno y fuera del agua", "iblk", "dw", "#9E8456", "durabilidade: 1000", "lock_team", "000_111_000", "#3ba578", "application/x-www-form-urlencoded", "amethyst_2", "dont_hit_5", "px Baloo Paaji", "#0B6A84", "#555555", "#d2c77b", "#3d2a6e", "#187484", "#136167", "#764eb5", "#0F464C"];
	const ΔⲆᐃⵠⵠΔᐃ = ⵠⲆⵠᐃΔ;
	const ΔⵠⵠⲆΔᐃⵠ = 3523 - 1158 - 407 - 23 - 11 - 4;
	const ΔⵠΔⵠΔ = 8;
	const ᐃᐃⲆ = -3668 + 3515 + 123 + 16 + 12 + 2;
	const ᐃⲆⲆᐃᐃⵠⵠ = -687 + 669 + 8 + 19 + 2 + 3;
	const ᐃⲆΔⲆᐃ = 102 - 2;
	const ⵠⵠⲆⵠⵠ = -2356 + 443 + 137 + 1524 + 155 + 73 + 5 + 28;
	const ⵠⵠᐃᐃᐃ = -791 + 253 + 434 + 8 + 85 + 10 + 3 + 4;
	const ᐃⵠⵠⵠⲆⵠᐃ = -ΔⵠΔⵠΔ;
	const ᐃⲆⲆΔᐃⵠⲆ = ΔⵠⵠⲆΔᐃⵠ;
	const ᐃᐃΔⲆⵠ = true;
	const ⵠⵠΔⵠΔⵠᐃ = -4;
	const ΔⵠΔⵠⵠ = false;
	const ⵠᐃⲆⲆⲆⵠΔ = 0;
	const ᐃⲆⵠΔΔⲆⵠ = -1601 + 230 + 842 + 436 + 72 + 73 + 49 + 152 + 2 + 1;
	const ⲆᐃΔⵠⵠᐃᐃ = ⵠᐃⵠᐃⵠ;
	const ᐃΔⵠⲆ = 5 - 1 - 1;
	const ⲆⵠⵠⲆⵠⵠᐃ = 1;
	const ⲆΔⵠⵠΔ = 10;
	const ⵠᐃᐃⲆᐃⲆⲆ = 2 * 1;
	const ⲆⲆⲆⵠⵠⲆᐃⵠⵠ = 1 << 0;
	const ⵠⵠᐃᐃ = -305 + 295 + 12 + 1 + 2;
	const ⵠᐃⲆⵠᐃ = -1440 + 1001 + 58 + 288 + 42 + 8 + 29 + 15 + 8 + 1 + 1;
	const ⲆᐃᐃΔⲆΔⵠ = -1269 + 506 + 648 + 29 + 102 + 1;
	const ⲆⵠⲆⵠⲆⵠᐃ = 1 * 4;
	const ᐃⲆⲆⵠᐃ = 20 - 1 - 1;
	const ΔΔⵠⲆᐃ = 16 - 1;
	const ⲆⲆᐃⲆⵠᐃⲆ = -442 + 293 + 67 + 80 + 2 + 2 + 9 + 4 + 1;
	const ⲆⵠᐃⵠⲆ = 14 - 2;
	const ΔⲆᐃⵠᐃᐃΔ = ⵠⵠᐃᐃᐃ;
	const ᐃΔⵠⲆΔ = ⵠᐃⵠᐃⵠ;
	const ⵠΔᐃⲆⲆ = -1024 + 197 + 188 + 634 + 12 + 5 + 1;
	const ᐃⲆᐃᐃ = 4 - 2;
	const ⲆⲆΔⲆⵠᐃⲆ = 1 << 11;
	const ΔΔΔⵠᐃⲆᐃⲆᐃ = 4200333;

	function ⲆⲆⲆⲆΔⵠⵠ(ΔΔⵠⵠᐃᐃΔⵠΔ) {
		return ⵠⵠⲆΔᐃᐃᐃⲆΔ.String.fromCharCode(ΔΔⵠⵠᐃᐃΔⵠΔ)
	}

	function ⲆΔⵠΔΔⲆᐃⵠⵠ(ΔᐃΔⲆⲆᐃᐃ) {
		return ΔᐃΔⲆⲆᐃᐃ.map(ⲆⲆⲆⲆΔⵠⵠ).join("")
	}
	const ⵠᐃⲆΔᐃᐃΔ = function() {
		const ΔⲆᐃᐃⲆⲆᐃ = ⲆΔⵠΔΔⲆᐃⵠⵠ([916, 916, 916, 11616, 5123, 11398, 5123, 11398, 5123]);
		const ⵠΔⲆⵠⲆΔⲆⲆᐃ = {
			"ΔᐃⵠⲆᐃᐃΔ": 1509895,
			"ⲆⲆⵠᐃΔᐃΔ": 17020,
			"ΔΔΔⵠᐃⲆᐃⲆᐃ": 15007836,
			"ⵠΔΔᐃᐃᐃⲆΔⵠ": 10372316
		};
		if (ⵠΔⲆⵠⲆΔⲆⲆᐃ[ΔⲆᐃᐃⲆⲆᐃ] !== ⵠΔⲆⵠⲆΔⲆⲆᐃ.ΔΔΔⵠᐃⲆᐃⲆᐃ) {
			const ΔΔΔⵠᐃⲆᐃⲆᐃ = function() {
				for (let ⲆⲆⲆⲆΔⵠⵠ = 0; ⲆⲆⲆⲆΔⵠⵠ < 5; ⲆⲆⲆⲆΔⵠⵠ++) ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("click", (function() {
					ΔΔΔⵠᐃⲆᐃⲆᐃ()
				}))
			};
			ΔΔΔⵠᐃⲆᐃⲆᐃ()
		}
	};
	ⵠᐃⲆΔᐃᐃΔ();
	const ⵠⵠΔᐃⲆ = ⵠⲆⵠᐃΔ;
	const ⵠⲆΔ = ᐃᐃⲆ;
	const ⵠⲆⵠⵠᐃ = ᐃᐃΔⲆⵠ;
	const ⲆᐃᐃⲆᐃ = ⲆⵠᐃⵠⲆ;
	const ⲆⲆⵠⵠⵠⵠΔ = 1 << ᐃⲆⲆᐃᐃⵠⵠ;
	const ⵠⵠⵠⲆⵠᐃⵠ = 1 << 12;
	const ⲆΔⲆⲆⲆ = ⲆⲆᐃⲆⵠᐃⲆ;
	const ᐃᐃΔᐃᐃᐃΔ = 0;
	const ᐃᐃᐃⵠⵠ = ᐃᐃΔⲆⵠ;
	const ⲆⵠⲆΔᐃᐃΔ = ΔⲆⲆⲆⲆΔΔ;
	const ᐃΔᐃⲆⵠ = ᐃᐃΔⲆⵠ;
	const ⵠΔᐃ = -839 + 776 + 57 + 7;
	const ᐃΔⲆⵠΔΔⲆ = 4;
	const ᐃΔᐃⵠⲆ = ⵠⲆⵠⵠᐃ;
	const ⲆⵠⲆΔⲆⲆΔ = ΔⲆⲆⲆⲆΔΔ;
	const ᐃⵠΔΔⵠ = ⵠᐃⵠᐃⵠ;
	const ⵠΔⵠΔΔⵠⵠ = ΔⵠΔⵠΔ;
	const ᐃⵠΔⵠ = ᐃΔⵠⲆ;
	const ΔⵠᐃⵠᐃΔΔ = 12;
	const ΔⵠᐃᐃⵠΔⲆ = 12;
	const ⲆⲆᐃⲆⵠⲆᐃ = ⲆⲆᐃⲆⵠᐃⲆ;
	let ⲆⵠⵠⵠΔΔᐃ = undefined;
	let ᐃᐃΔΔΔᐃΔ = ᐃⵠᐃᐃⲆ;
	const ⵠᐃΔⲆ = ᐃΔᐃΔ;
	let ⵠⲆⵠΔⲆⵠⲆ = undefined;
	let ⵠΔⵠᐃΔ = undefined;
	const ᐃᐃᐃΔΔ = ⲆΔⵠⵠΔ;
	const ⲆⵠⲆΔⵠⲆⲆ = ᐃⲆΔⲆᐃ;
	const Δⵠᐃ = ⵠΔᐃ;
	let ⲆⵠⲆⲆⵠᐃⵠ = undefined;
	let ⲆΔᐃⲆᐃⵠΔ = ᐃⵠᐃᐃⲆ;
	const ᐃΔΔⲆⲆ = ⵠⵠⲆⵠⵠ;
	const ᐃᐃⵠⵠΔⵠⲆ = 9548678;

	function ⲆⲆΔᐃΔᐃᐃ(ⲆⲆⲆΔΔΔΔ) {
		return ⵠⵠⲆΔᐃᐃᐃⲆΔ.String.fromCharCode(ⲆⲆⲆΔΔΔΔ)
	}

	function ⵠⵠⵠΔᐃⲆᐃ(ⵠᐃᐃⲆᐃᐃᐃ) {
		return ⵠᐃᐃⲆᐃᐃᐃ.map(ⲆⲆΔᐃΔᐃᐃ).join("")
	}
	const ⲆⲆᐃΔᐃⲆⲆ = function() {
		const ᐃᐃⵠᐃⵠΔᐃⲆᐃ = ⵠⵠⵠΔᐃⲆᐃ([5123, 5123, 11616, 11616, 916, 11616, 11398]);
		const ⵠⵠⵠΔⵠ = {
			"ᐃⲆᐃᐃΔⵠⵠ": 12196210,
			"ᐃΔΔᐃⲆⵠⲆΔⲆ": 3408672,
			"ᐃᐃⵠⵠΔⵠⲆ": 8095995,
			"ⵠᐃⲆⲆⵠᐃⵠ": 13422094
		};
		if (ⵠⵠⵠΔⵠ[ᐃᐃⵠᐃⵠΔᐃⲆᐃ] !== ⵠⵠⵠΔⵠ.ᐃᐃⵠⵠΔⵠⲆ) {
			const ᐃᐃⵠⵠΔⵠⲆ = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]];
			const ⲆⲆΔᐃΔᐃᐃ = ᐃᐃⵠⵠΔⵠⲆ;
			const ⲆⲆⲆΔΔΔΔ = function() {
				ᐃᐃⵠⵠΔⵠⲆ(ⲆⲆⲆΔΔΔΔ, 2303);
				ⲆⲆΔᐃΔᐃᐃ(ⲆⲆⲆΔΔΔΔ, 8963)
			};
			ⲆⲆⲆΔΔΔΔ()
		}
	};
	ⲆⲆᐃΔᐃⲆⲆ();
	let ⵠⲆΔΔᐃᐃⵠ = undefined;
	const ᐃⲆᐃΔΔ = ⲆΔᐃⲆᐃ;
	let ⵠⵠⵠⵠᐃⵠⲆ = ᐃⵠᐃᐃⲆ;
	let ΔⵠΔⵠΔⲆᐃ = "_";
	let ΔⲆⵠⵠⵠ = [];
	let ⲆⵠΔᐃᐃⵠⵠ = undefined;
	const ⵠⵠΔⲆᐃΔⲆ = ⵠⲆⵠⵠᐃ;
	let ⲆΔΔΔⵠᐃⵠ = ᐃⵠᐃᐃⲆ;
	let ΔΔⵠⵠΔⵠᐃ = ᐃⵠᐃᐃⲆ;
	const ΔΔⵠΔΔ = ᐃⵠᐃᐃⲆ;
	let ᐃⵠⵠⲆᐃⲆⲆ = undefined;
	let ⲆⲆⵠᐃᐃ = ΔΔⵠΔΔ;
	const ⲆᐃΔⲆΔ = ⵠⲆⵠᐃΔ;
	const ⲆⵠΔᐃΔ = ⲆΔⲆⲆⲆ;
	let ⵠᐃⲆᐃⲆⵠΔ = ΔΔⵠΔΔ;
	let ᐃΔⵠΔⲆΔⵠ = undefined;
	const ΔⲆΔᐃⲆⵠⲆ = ᐃⲆⲆᐃᐃⵠⵠ;
	let ᐃⲆⵠΔⵠΔⵠ = undefined;
	const ΔⵠⵠᐃΔ = ΔⵠΔⵠⵠ;
	let ΔⵠⵠⵠᐃⲆⵠ = ᐃⵠᐃᐃⲆ;
	const ⵠΔⵠⲆⲆ = 3316592;
	const ⵠⵠᐃⵠΔᐃΔ = ⵠΔⵠⲆⲆ["ⵠⵠⵠΔⲆⲆΔ"];
	const ⲆⲆᐃⲆᐃ = `const ᐃⲆⲆΔ = (typeof ⵠΔⲆⵠ === "${ⵠⵠᐃⵠΔᐃΔ}") ? 1 : 0; return ᐃⲆⲆΔ;`;

	function ⵠΔⲆⵠ() {
		ⵠⵠᐃⵠΔᐃΔ;
		ⵠΔⵠⲆⲆ();
		return ⲆⲆᐃⲆᐃ
	}
	const ᐃⲆⲆΔ = 5414105;
	const ᐃᐃΔⵠⲆⲆⵠ = new Function(ⵠΔⲆⵠ + ⲆⲆᐃⲆᐃ);
	const ⲆᐃᐃⲆ = 13591196;
	if (ᐃᐃΔⵠⲆⲆⵠ(ᐃⲆⲆΔ, ⲆᐃᐃⲆ) === 1) {
		const ⵠΔⵠⲆⲆ = function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("mousemove", (function() {
				ⵠΔⵠⲆⲆ()
			}))
		};
		ⵠΔⵠⲆⲆ()
	}
	const ᐃΔⲆⵠᐃ = String.fromCharCode;
	const ⵠⲆⵠⲆⲆΔⲆ = 101;
	const ⵠΔⵠⲆΔⲆΔ = 118;
	const ΔᐃΔⲆⲆᐃⲆ = "ᐃᐃᐃⵠᐃ";
	const ⲆⵠΔᐃᐃᐃΔ = 97;
	const ᐃᐃΔᐃᐃⵠΔ = 108;
	const ⵠᐃΔᐃΔⵠⵠ = ᐃΔⲆⵠᐃ(ⵠⲆⵠⲆⲆΔⲆ);
	const ᐃᐃᐃⲆⵠΔⲆ = ᐃΔⲆⵠᐃ(ⵠΔⵠⲆΔⲆΔ);

	function ᐃᐃᐃⵠᐃ() {
		ⵠᐃᐃⵠⲆⲆⵠ = ᐃᐃᐃⵠᐃ;
		return ᐃᐃᐃⵠᐃ
	}
	const ᐃᐃᐃⲆΔⵠⲆ = ᐃΔⲆⵠᐃ(ⲆⵠΔᐃᐃᐃΔ);
	const ΔΔⵠᐃΔΔⵠ = ᐃΔⲆⵠᐃ(ᐃᐃΔᐃᐃⵠΔ);
	const ΔΔⵠᐃⵠΔⲆ = ⵠᐃΔᐃΔⵠⵠ + ᐃᐃᐃⲆⵠΔⲆ + ᐃᐃᐃⲆΔⵠⲆ + ΔΔⵠᐃΔΔⵠ;
	const ⲆᐃⲆⲆΔⲆⵠⲆⵠ = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ΔΔⵠᐃⵠΔⲆ];
	const ᐃⲆᐃⲆΔᐃΔⵠΔ = ⲆᐃⲆⲆΔⲆⵠⲆⵠ(ᐃᐃᐃⵠᐃ + "try{" + ΔᐃΔⲆⲆᐃⲆ + "();0;}catch(ᐃᐃᐃⲆΔⵠⲆ){1;}");
	if (ᐃⲆᐃⲆΔᐃΔⵠΔ) {
		const ᐃΔⲆⵠᐃ = function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("mousemove", (function() {
				ᐃΔⲆⵠᐃ()
			}))
		};
		ᐃΔⲆⵠᐃ()
	}
	let ⵠⲆΔΔⵠᐃⲆ = undefined;
	let ⲆⵠⲆΔΔⵠⲆ = undefined;
	const ⲆᐃⵠΔᐃ = ΔⲆΔᐃⲆⵠⲆ;
	const ΔΔⵠΔⲆ = ⲆΔᐃⲆᐃ;
	const ⲆΔⲆΔⵠ = ⵠᐃⲆⵠᐃ;
	let ΔⲆΔⵠⵠΔⲆ = undefined;
	let ΔᐃⵠᐃⲆⲆⵠ = undefined;
	let ⵠᐃⲆΔΔΔⲆ = ᐃⵠᐃᐃⲆ;
	let ⵠΔⲆⵠⲆᐃᐃ = undefined;
	let ⲆⵠΔⵠⵠΔᐃ = ᐃⵠᐃᐃⲆ;
	const ᐃΔΔⲆΔ = ᐃᐃⲆΔⵠ;
	let ⵠΔⵠᐃᐃⵠⲆ = ᐃⵠᐃᐃⲆ;
	let ⵠᐃⲆᐃΔⵠⲆ = ΔΔⵠΔΔ;
	const ⵠⲆⵠⵠΔ = ᐃΔᐃⵠⲆ;
	let ⵠⵠⲆⵠⲆΔᐃ = undefined;
	const ⲆⲆΔΔᐃ = ᐃⲆᐃΔΔ;
	let ⵠΔⲆⲆⲆⲆⲆ = ᐃⵠᐃᐃⲆ;
	const ⵠᐃⵠᐃⲆΔⲆⲆᐃ = ᐃⲆⲆΔᐃⵠⲆ;
	const ⵠᐃᐃⲆᐃⵠⲆ = ΔⲆⲆⲆⲆΔΔ;
	const ΔΔᐃ = ⵠⲆΔ;
	let ᐃΔΔᐃΔⵠⵠ = undefined;
	let ⲆⲆⵠΔⵠⵠⵠ = ΔΔⵠΔΔ;
	const ⲆⵠⵠΔⲆ = ⵠΔᐃⲆⲆ;
	let ᐃᐃⲆᐃⵠⲆΔ = undefined;
	const ⲆΔⲆᐃᐃ = ΔⵠΔⵠΔ;
	const ᐃΔΔⵠⲆ = ΔⵠⵠᐃΔ;
	const ⲆⲆⲆᐃⲆᐃⵠ = ᐃⲆⵠΔΔⲆⵠ;
	const ᐃⵠΔⲆ = ᐃΔⵠⲆ;
	const ᐃⲆᐃⲆⵠ = ᐃⲆⲆⵠᐃ;
	const ᐃΔⲆⵠΔ = ⲆⵠΔᐃΔ;
	const ᐃᐃΔᐃ = ⵠⵠᐃᐃ;
	let ΔΔⲆⲆΔΔᐃ = undefined;
	let ⵠᐃΔΔᐃΔᐃ = ΔΔⵠΔΔ;
	let ⲆᐃⲆΔⵠⲆⵠ = undefined;
	const ΔΔΔⲆ = ⵠⵠᐃᐃᐃ;
	let ᐃⵠⵠⲆⲆⲆⲆ = undefined;
	let ΔⲆⲆⵠⲆⲆⲆ = ᐃⵠᐃᐃⲆ;
	let ᐃⵠⲆⵠᐃⵠᐃ = ᐃⵠᐃᐃⲆ;
	const ⵠⵠⲆⵠΔⲆⵠ = ΔⵠⵠⲆΔᐃⵠ;
	const ⲆΔΔΔⵠ = ΔΔⵠⲆᐃ;
	const ΔⲆΔⲆΔ = ᐃΔΔⲆΔ;
	let ⲆᐃⲆⲆⲆᐃⵠ = ᐃⵠᐃᐃⲆ;
	let ⲆᐃⲆⵠᐃⲆᐃ = undefined;
	const ᐃⵠᐃⲆ = ⵠⵠᐃᐃ;
	const ⵠΔΔΔΔ = ⲆᐃᐃΔⲆΔⵠ;
	const ⵠᐃⵠΔᐃ = ⲆⵠᐃⵠⲆ;
	const ᐃⵠΔᐃ = ᐃⵠΔⵠ;
	const ᐃⲆᐃᐃⲆ = ᐃΔΔⲆⲆ;
	let ⵠⲆⵠⲆᐃᐃΔ = ᐃⵠᐃᐃⲆ;
	const ⵠⵠΔⵠ = ᐃⵠΔⵠ;
	const ⵠⵠⲆⲆᐃ = ⲆᐃΔⵠⵠᐃᐃ;
	let ⵠⵠΔⵠⵠⲆᐃ = undefined;
	let ⲆᐃⲆⵠⵠⵠⲆ = ΔΔⵠΔΔ;
	let ᐃⵠᐃⲆΔΔᐃ = ΔΔⵠΔΔ;
	const ⲆᐃΔ = ⵠΔᐃ;
	const ⲆⲆΔⲆ = ᐃⲆᐃᐃ;
	let ΔΔᐃΔⲆΔΔ = ᐃⵠᐃᐃⲆ;
	const ⲆⵠⲆᐃᐃᐃⲆ = ᐃⲆⲆᐃᐃⵠⵠ;
	let ᐃᐃᐃΔΔⲆΔ = ΔΔⵠΔΔ;
	let ᐃⵠᐃΔⲆΔΔ = ΔΔⵠΔΔ;
	const ⵠΔΔΔⵠ = ⲆΔⵠⵠΔ;
	let ⵠⵠⲆⲆⲆⲆⵠ = undefined;
	let ΔᐃⲆⵠΔⲆⵠ = ᐃⵠᐃᐃⲆ;
	const ΔᐃⲆⲆⲆ = ᐃⲆΔⲆᐃ;
	const Ⲇᐃⵠᐃᐃ = ΔⵠΔⵠΔ;
	let ΔⵠᐃᐃⲆⵠᐃ = ΔΔⵠΔΔ;
	const ⵠⵠᐃΔᐃ = ᐃΔΔⲆΔ;
	let ᐃΔΔᐃⵠᐃΔ = undefined;
	let ⵠΔⲆΔΔΔΔ = undefined;
	let ⲆⲆⲆⵠᐃΔᐃ = ⵠⲆΔ;
	if (!ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[255]] || !ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[255]].instantiate) ⲆΔⵠⵠⵠᐃⵠᐃΔ();
	const ⵠⲆⲆΔᐃⲆⲆ = {
		Date: Date
	};
	ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[255]].instantiate(Uint8Array.from(ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[20]](""), (function(ⵠⵠⵠᐃⵠⲆΔ) {
		return ⵠⵠⵠᐃⵠⲆΔ.charCodeAt(0)
	})), ⵠⲆⲆΔᐃⲆⲆ).then((function(ⵠᐃⲆᐃⵠⵠΔ) {
		ⲆⵠⵠⵠΔΔᐃ = ⵠᐃⲆᐃⵠⵠΔ[ⲆᐃⲆⵠΔΔⲆ[163]];
		ᐃᐃΔΔΔᐃΔ = ⲆⵠⵠⵠΔΔᐃ[ⲆᐃⲆⵠΔΔⲆ[176]];
		ⵠⲆⵠΔⲆⵠⲆ = ᐃᐃΔΔΔᐃΔ[ⲆᐃⲆⵠΔΔⲆ[44]];
		ⵠΔⵠᐃΔ = ⵠⲆⵠΔⲆⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[80]];
		ⲆⵠⲆⲆⵠᐃⵠ = ᐃᐃΔΔΔᐃΔ[ⲆᐃⲆⵠΔΔⲆ[258]];
		ⲆΔᐃⲆᐃⵠΔ = ᐃᐃΔΔΔᐃΔ[ⲆᐃⲆⵠΔΔⲆ[62]];
		ⵠⲆΔΔᐃᐃⵠ = ᐃᐃΔΔΔᐃΔ[ⲆᐃⲆⵠΔΔⲆ[271]];
		ⵠⵠⵠⵠᐃⵠⲆ = ᐃᐃΔΔΔᐃΔ[ⲆᐃⲆⵠΔΔⲆ[0]];
		ΔⵠΔⵠΔⲆᐃ = "_";
		for (let Ⲇᐃ = ᐃᐃⲆ; Ⲇᐃ < 31; Ⲇᐃ++) ΔⲆⵠⵠⵠ[Ⲇᐃ] = ᐃᐃΔΔΔᐃΔ[ΔⵠΔⵠΔⲆᐃ + Ⲇᐃ];
		ⲆⵠΔᐃᐃⵠⵠ = ᐃᐃΔΔΔᐃΔ[ⲆᐃⲆⵠΔΔⲆ[254]];
		ⲆΔΔΔⵠᐃⵠ = new Float32Array(ⵠΔⵠᐃΔ);
		ΔΔⵠⵠΔⵠᐃ = new Float64Array(ⵠΔⵠᐃΔ);
		ᐃⵠⵠⲆᐃⲆⲆ = new BigUint64Array(ⵠΔⵠᐃΔ);
		ⲆⲆⵠᐃᐃ = new Uint32Array(ⵠΔⵠᐃΔ);
		ⵠᐃⲆᐃⲆⵠΔ = new Uint16Array(ⵠΔⵠᐃΔ);
		ᐃΔⵠΔⲆΔⵠ = new Uint8Array(ⵠΔⵠᐃΔ);
		ᐃⲆⵠΔⵠΔⵠ = new BigInt64Array(ⵠΔⵠᐃΔ);
		ΔⵠⵠⵠᐃⲆⵠ = new Int32Array(ⵠΔⵠᐃΔ);
		ⵠⲆΔΔⵠᐃⲆ = new Int16Array(ⵠΔⵠᐃΔ);
		ⲆⵠⲆΔΔⵠⲆ = new Int8Array(ⵠΔⵠᐃΔ);
		ⵠᐃΔΔᐃΔᐃ = ΔⲆⵠⵠⵠ[ᐃΔᐃΔ];
		ᐃⵠᐃⲆΔΔᐃ = ΔⲆⵠⵠⵠ[28];
		ᐃⵠⵠⲆⲆⲆⲆ = ΔⲆⵠⵠⵠ[16];
		ΔⲆⲆⵠⲆⲆⲆ = ΔⲆⵠⵠⵠ[3];
		ⲆᐃⲆΔⵠⲆⵠ = ΔⲆⵠⵠⵠ[10];
		ᐃΔΔᐃⵠᐃΔ = ΔⲆⵠⵠⵠ[25];
		ΔⵠᐃᐃⲆⵠᐃ = ΔⲆⵠⵠⵠ[ᐃⲆᐃᐃ];
		ⵠᐃⲆΔΔΔⲆ = ΔⲆⵠⵠⵠ[1];
		ⲆᐃⲆⵠᐃⲆᐃ = ΔⲆⵠⵠⵠ[26];
		ⵠΔⲆⵠⲆᐃᐃ = ΔⲆⵠⵠⵠ[24];
		ⵠⵠⲆⲆⲆⲆⵠ = ΔⲆⵠⵠⵠ[ⲆΔΔΔⵠ];
		ⲆᐃⲆⲆⲆᐃⵠ = ΔⲆⵠⵠⵠ[7];
		ᐃᐃⲆᐃⵠⲆΔ = ΔⲆⵠⵠⵠ[ⵠΔΔΔΔ];
		ΔᐃⲆⵠΔⲆⵠ = ΔⲆⵠⵠⵠ[27];
		ᐃⵠᐃΔⲆΔΔ = ΔⲆⵠⵠⵠ[29];
		ᐃᐃᐃΔΔⲆΔ = ΔⲆⵠⵠⵠ[20];
		ΔΔᐃΔⲆΔΔ = ΔⲆⵠⵠⵠ[9];
		ⲆᐃⲆⵠⵠⵠⲆ = ΔⲆⵠⵠⵠ[30];
		ΔⲆΔⵠⵠΔⲆ = ΔⲆⵠⵠⵠ[ⲆⵠⵠΔⲆ];
		ᐃⵠⲆⵠᐃⵠᐃ = ΔⲆⵠⵠⵠ[23];
		ⵠⵠΔⵠⵠⲆᐃ = ΔⲆⵠⵠⵠ[ᐃⲆⲆⵠᐃ];
		ⵠᐃⲆᐃΔⵠⲆ = ΔⲆⵠⵠⵠ[22];
		ⲆⲆⵠΔⵠⵠⵠ = ΔⲆⵠⵠⵠ[ΔⲆᐃⵠⵠΔᐃ];
		ⵠⲆⵠⲆᐃᐃΔ = ΔⲆⵠⵠⵠ[ⵠⵠᐃᐃ];
		ΔΔⲆⲆΔΔᐃ = ΔⲆⵠⵠⵠ[ᐃᐃⲆ];
		ⵠΔⵠᐃᐃⵠⲆ = ΔⲆⵠⵠⵠ[21];
		ⵠⵠⲆⵠⲆΔᐃ = ΔⲆⵠⵠⵠ[ⲆΔⲆΔⵠ];
		ⲆⵠΔⵠⵠΔᐃ = ΔⲆⵠⵠⵠ[6];
		ⵠΔⲆⲆⲆⲆⲆ = ΔⲆⵠⵠⵠ[12];
		ΔᐃⵠᐃⲆⲆⵠ = ΔⲆⵠⵠⵠ[ΔⵠΔⵠΔ];
		ᐃΔΔᐃΔⵠⵠ = ΔⲆⵠⵠⵠ[14];
		ⲆⲆⲆⵠᐃΔᐃ = Δⵠᐃ;
		if (ⵠΔⲆΔΔΔΔ) ⵠΔⲆΔΔΔΔ()
	}));

	function ⵠⵠⲆⲆⵠⲆⵠᐃⲆ(ΔⲆΔΔⵠᐃΔ) {
		return ΔⲆΔΔⵠᐃΔ[ⲆⵠΔᐃᐃⵠⵠ >>> 2]
	}

	function ⲆⵠΔᐃᐃᐃᐃ(ΔᐃᐃᐃⲆ) {
		return ⲆⲆⵠᐃᐃ[(ⲆⵠΔᐃᐃⵠⵠ + 4 >>> ᐃⲆᐃᐃ) + (ΔᐃᐃᐃⲆ << Δⵠᐃ)]
	}
	const ⵠⲆᐃΔⵠΔᐃ = ⲆⵠΔᐃᐃᐃᐃ;
	const ⲆⵠⲆΔᐃ = ᐃⲆᐃΔΔ;

	function ΔⲆⲆⲆⵠᐃΔ(Ⲇᐃⵠⵠⵠ) {
		return 31 - Math.clz32(Ⲇᐃⵠⵠⵠ >>> ΔⲆᐃⵠᐃᐃΔ & 31)
	}

	function ⲆᐃᐃΔᐃⲆᐃᐃΔ(ᐃⲆⵠⵠΔΔᐃ) {
		const ᐃⲆᐃᐃΔ = ᐃⲆⵠⵠΔΔᐃ.length;
		const ᐃⲆΔⲆⲆ = ΔⵠⵠⲆⲆⵠΔ(2 * ᐃⲆᐃᐃΔ, ⲆⵠⵠⲆⵠⵠᐃ);
		const ᐃΔΔⵠᐃᐃΔ = new Uint16Array(ⵠΔⵠᐃΔ);
		for (var Ⲇᐃ = 0, ΔⲆⵠ = ᐃⲆΔⲆⲆ >>> 1; ᐃⲆᐃᐃΔ > Ⲇᐃ; ++Ⲇᐃ) ᐃΔΔⵠᐃᐃΔ[ΔⲆⵠ + Ⲇᐃ] = ᐃⲆⵠⵠΔΔᐃ.charCodeAt(Ⲇᐃ);
		return ᐃⲆΔⲆⲆ
	}
	const ΔᐃᐃΔΔ = ⲆΔⲆⲆⲆ;

	function ᐃΔⲆΔⲆᐃᐃⲆᐃ(ⵠᐃΔⲆⲆ) {
		const ᐃᐃᐃΔᐃᐃᐃ = new Uint8Array(ⵠᐃΔⲆⲆ);
		const ᐃⲆΔⲆⲆ = ⵠⲆΔΔᐃᐃⵠ(ᐃᐃᐃΔᐃᐃᐃ.length, ⵠᐃⲆⲆⲆⵠΔ);
		ᐃΔⵠΔⲆΔⵠ.set(ᐃᐃᐃΔᐃᐃᐃ, ᐃⲆΔⲆⲆ);
		return ᐃⲆΔⲆⲆ
	}
	const ᐃᐃΔΔΔ = ⵠⵠᐃΔᐃ;

	function ⲆᐃΔⵠⵠⲆΔⲆΔ(ᐃⲆΔⲆⲆ) {
		let ΔⵠⵠᐃⵠⲆⲆ = "";
		ᐃⲆΔⲆⲆ /= ⲆⲆΔⲆ;
		const ᐃⵠΔΔᐃ = ⲆⲆⵠᐃᐃ[ᐃⲆΔⲆⲆ / ⲆⲆΔⲆ - ⲆᐃΔ] / ᐃⲆᐃᐃ;
		for (let Ⲇᐃ = ⵠⲆΔ; ᐃⵠΔΔᐃ > Ⲇᐃ; Ⲇᐃ++) ΔⵠⵠᐃⵠⲆⲆ += String.fromCharCode(ⵠᐃⲆᐃⲆⵠΔ[ᐃⲆΔⲆⲆ++]);
		return ΔⵠⵠᐃⵠⲆⲆ
	}
	const ⵠⲆΔⵠ = ᐃΔᐃΔ;
	const ⵠⵠⲆᐃᐃ = ᐃⵠᐃᐃⲆ;
	const ⵠᐃⵠΔⲆⵠⵠ = ᐃⲆⵠΔΔⲆⵠ;

	function ᐃΔⵠΔⵠⲆⲆΔⲆ(ΔᐃᐃᐃⲆ, ᐃᐃΔⵠᐃᐃⵠ) {
		ᐃᐃΔⵠᐃᐃⵠ = ᐃᐃΔⵠᐃᐃⵠ || 0;
		const ⵠⵠⲆⵠⲆᐃⵠ = ᐃᐃΔⵠᐃᐃⵠ;
		const Ⲇᐃⵠⵠⵠ = ⵠⲆᐃΔⵠΔᐃ(ΔᐃᐃᐃⲆ);
		const ⲆⵠΔⵠⵠΔΔ = ΔⲆⲆⲆⵠᐃΔ(Ⲇᐃⵠⵠⵠ);
		const ᐃᐃᐃⵠᐃΔᐃ = typeof ⵠⵠⲆⵠⲆᐃⵠ !== "number";
		const ᐃⲆᐃᐃΔ = ᐃᐃᐃⵠᐃΔᐃ ? ⵠⵠⲆⵠⲆᐃⵠ.length : ⵠⵠⲆⵠⲆᐃⵠ;
		const ⵠᐃΔⲆⲆ = ⵠⲆΔΔᐃᐃⵠ(ᐃⲆᐃᐃΔ << ⲆⵠΔⵠⵠΔΔ, Ⲇᐃⵠⵠⵠ & ⲆⵠⲆⵠⲆⵠᐃ ? ΔᐃᐃᐃⲆ : ⵠᐃⲆⲆⲆⵠΔ);
		let ΔⲆⲆⲆΔⲆΔ;
		if (Ⲇᐃⵠⵠⵠ & ⲆⵠⲆⵠⲆⵠᐃ) {
			ΔⲆⲆⲆΔⲆΔ = ⵠᐃΔⲆⲆ
		} else {
			ⲆⵠⲆⲆⵠᐃⵠ(ⵠᐃΔⲆⲆ);
			const Δⵠᐃᐃᐃ = ⵠⲆΔΔᐃᐃⵠ(Ⲇᐃⵠⵠⵠ & ⵠᐃᐃⲆᐃⲆⲆ ? ⲆⲆᐃⲆⵠⲆᐃ : ΔⵠᐃᐃⵠΔⲆ, ΔᐃᐃᐃⲆ);
			ⲆΔᐃⲆᐃⵠΔ(ⵠᐃΔⲆⲆ);
			ⲆⲆⵠᐃᐃ[Δⵠᐃᐃᐃ + ᐃᐃΔᐃᐃᐃΔ >>> 2] = ⵠᐃΔⲆⲆ;
			ⲆⲆⵠᐃᐃ[Δⵠᐃᐃᐃ + ᐃΔⲆⵠΔΔⲆ >>> ⲆⲆΔⲆ] = ⵠᐃΔⲆⲆ;
			ⲆⲆⵠᐃᐃ[Δⵠᐃᐃᐃ + ⵠΔⵠΔΔⵠⵠ >>> ᐃⲆᐃᐃ] = ᐃⲆᐃᐃΔ << ⲆⵠΔⵠⵠΔΔ;
			if (Ⲇᐃⵠⵠⵠ & ⵠᐃᐃⲆᐃⲆⲆ) ⲆⲆⵠᐃᐃ[Δⵠᐃᐃᐃ + ΔⵠᐃⵠᐃΔΔ >>> 2] = ᐃⲆᐃᐃΔ;
			ΔⲆⲆⲆΔⲆΔ = Δⵠᐃᐃᐃ
		}
		if (ᐃᐃᐃⵠᐃΔᐃ) {
			const ⵠᐃᐃⵠΔΔΔ = ⲆⵠⲆᐃⵠᐃᐃ(ⲆⵠΔⵠⵠΔΔ, Ⲇᐃⵠⵠⵠ & ⲆⲆΔⲆⵠᐃⲆ, Ⲇᐃⵠⵠⵠ & ⵠⵠⵠⲆⵠᐃⵠ);
			const ⲆᐃⵠⲆΔⵠⲆ = ⵠᐃΔⲆⲆ >>> ⲆⵠΔⵠⵠΔΔ;
			if (Ⲇᐃⵠⵠⵠ & ⲆⲆⵠⵠⵠⵠΔ) {
				for (let Ⲇᐃ = ΔΔᐃ; Ⲇᐃ < ᐃⲆᐃᐃΔ; ++Ⲇᐃ) {
					ⵠᐃᐃⵠΔΔΔ[ⲆᐃⵠⲆΔⵠⲆ + Ⲇᐃ] = ⵠⵠⲆⵠⲆᐃⵠ[Ⲇᐃ]
				}
			} else {
				ⵠᐃᐃⵠΔΔΔ.set(ⵠⵠⲆⵠⲆᐃⵠ, ⲆᐃⵠⲆΔⵠⲆ)
			}
		}
		return ΔⲆⲆⲆΔⲆΔ
	}

	function ⲆⵠⲆᐃⵠᐃᐃ(ᐃΔᐃⵠΔⲆⲆ, ΔⵠⲆΔⲆΔⵠ, ΔΔᐃⵠⲆᐃⲆ) {
		if (ΔΔᐃⵠⲆᐃⲆ) {
			switch (ᐃΔᐃⵠΔⲆⲆ) {
				case ᐃⲆᐃᐃ:
					return ⲆΔΔΔⵠᐃⵠ;
				case ᐃΔⵠⲆ:
					return ΔΔⵠⵠΔⵠᐃ
			}
		} else {
			switch (ᐃΔᐃⵠΔⲆⲆ) {
				case ᐃᐃⲆ:
					return ΔⵠⲆΔⲆΔⵠ ? ⲆⵠⲆΔΔⵠⲆ : ᐃΔⵠΔⲆΔⵠ;
				case ⲆᐃΔ:
					return ΔⵠⲆΔⲆΔⵠ ? ⵠⲆΔΔⵠᐃⲆ : ⵠᐃⲆᐃⲆⵠΔ;
				case ⲆⲆΔⲆ:
					return ΔⵠⲆΔⲆΔⵠ ? ΔⵠⵠⵠᐃⲆⵠ : ⲆⲆⵠᐃᐃ;
				case 3:
					return ΔⵠⲆΔⲆΔⵠ ? ᐃⲆⵠΔⵠΔⵠ : ᐃⵠⵠⲆᐃⲆⲆ
			}
		}
	}
	const ΔⲆΔᐃΔ = ᐃΔΔⵠⲆ;
	const ⲆⵠΔᐃⵠ = ⵠⲆⵠⵠΔ;

	function ΔΔΔᐃⵠⵠⲆ(Δⵠᐃᐃᐃ) {
		const ΔᐃᐃᐃⲆ = ⲆⲆⵠᐃᐃ[Δⵠᐃᐃᐃ + ᐃⵠⵠⵠⲆⵠᐃ >>> 2];
		const Ⲇᐃⵠⵠⵠ = ⵠⲆᐃΔⵠΔᐃ(ΔᐃᐃᐃⲆ);
		const ⲆⵠΔⵠⵠΔΔ = ΔⲆⲆⲆⵠᐃΔ(Ⲇᐃⵠⵠⵠ);
		let ⵠᐃΔⲆⲆ = Ⲇᐃⵠⵠⵠ & ⲆⵠⲆⵠⲆⵠᐃ ? Δⵠᐃᐃᐃ : ⲆⲆⵠᐃᐃ[Δⵠᐃᐃᐃ + ᐃΔⲆⵠΔΔⲆ >>> 2];
		const ᐃⲆᐃᐃΔ = Ⲇᐃⵠⵠⵠ & ⵠᐃᐃⲆᐃⲆⲆ ? ⲆⲆⵠᐃᐃ[Δⵠᐃᐃᐃ + ΔⵠᐃⵠᐃΔΔ >>> 2] : ⲆⲆⵠᐃᐃ[ⵠᐃΔⲆⲆ + ⵠⵠΔⵠΔⵠᐃ >>> ᐃⲆᐃᐃ] >>> ⲆⵠΔⵠⵠΔΔ;
		return ⲆⵠⲆᐃⵠᐃᐃ(ⲆⵠΔⵠⵠΔΔ, Ⲇᐃⵠⵠⵠ & ⲆⲆΔⲆⵠᐃⲆ, Ⲇᐃⵠⵠⵠ & ⵠⵠⵠⲆⵠᐃⵠ).subarray(ⵠᐃΔⲆⲆ >>>= ⲆⵠΔⵠⵠΔΔ, ⵠᐃΔⲆⲆ + ᐃⲆᐃᐃΔ)
	}

	function ⵠⲆⲆᐃⵠΔⲆⲆΔ(ᐃⲆΔⲆⲆ) {
		const ᐃⲆᐃᐃΔ = ⲆⲆⵠᐃᐃ[ᐃⲆΔⲆⲆ + ⵠⵠΔⵠΔⵠᐃ >>> 2];
		return ⵠΔⵠᐃΔ.slice(ᐃⲆΔⲆⲆ, ᐃⲆΔⲆⲆ + ᐃⲆᐃᐃΔ)
	}

	function ᐃΔΔⲆⵠΔⵠᐃᐃ(Δⵠᐃᐃᐃ) {
		const ⵠⵠⲆⵠⲆᐃⵠ = ΔΔΔᐃⵠⵠⲆ(Δⵠᐃᐃᐃ);
		const ᐃⵠΔΔᐃ = ⵠⵠⲆⵠⲆᐃⵠ.length;
		const ⵠⵠΔΔⵠⲆⵠ = new Array(ᐃⵠΔΔᐃ);
		for (let Ⲇᐃ = 0; Ⲇᐃ < ᐃⵠΔΔᐃ; Ⲇᐃ++) ⵠⵠΔΔⵠⲆⵠ[Ⲇᐃ] = ⵠⵠⲆⵠⲆᐃⵠ[Ⲇᐃ];
		return ⵠⵠΔΔⵠⲆⵠ
	}
	const ⵠΔᐃᐃΔ = ᐃΔΔⲆⲆ;
	const ⵠⲆⲆⲆⵠᐃⲆ = () => new Promise(((ᐃⵠⵠⵠᐃᐃⲆ, ΔᐃᐃⲆᐃⲆΔ) => {
		ⵠⵠⲆΔᐃᐃᐃⲆΔ["grecaptcha"]["ready"]((function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ["grecaptcha"]["execute"]("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
				action: "validate_recaptcha"
			}).then((function(ΔⲆⵠⵠᐃ) {
				ᐃⵠⵠⵠᐃᐃⲆ(ΔⲆⵠⵠᐃ)
			})).catch((ⵠᐃⵠⵠⵠⵠᐃ => {
				if (ᐃΔᐃΔⵠ) {
					ᐃⵠⵠⵠᐃᐃⲆ(ⵠⲆΔ);
					return
				}
				ΔᐃᐃⲆᐃⲆΔ(ⵠᐃⵠⵠⵠⵠᐃ)
			}))
		}))
	}));
	const ⵠⲆⵠΔⵠ = ᐃΔΔⲆⲆ;
	const ⵠΔⵠⵠⲆ = ᐃⵠᐃᐃⲆ;
	const ΔΔⲆᐃ = ⲆⲆΔⲆ;
	const ⵠΔⲆᐃᐃ = ⲆᐃⵠΔᐃ;

	function ᐃⲆⲆⵠⵠΔΔ(ⵠᐃⵠⲆᐃΔⲆ, ⵠᐃⲆᐃΔⲆⲆ) {
		const ΔⵠΔⲆⲆⲆⵠ = ⵠᐃⵠⲆᐃΔⲆ ^ 13400;
		const ᐃⵠᐃΔᐃⵠΔ = (24 << (ⵠᐃⲆᐃΔⲆⲆ >> 16 & 255)) + (16 << (ⵠᐃⲆᐃΔⲆⲆ >> ⵠⲆΔ & 255)) + (0 << (ⵠᐃⲆᐃΔⲆⲆ >> 8 & 255)) + (8 << (ⵠᐃⲆᐃΔⲆⲆ >> 24 & 255));
		const ⲆⵠⲆⵠΔΔⵠ = ⵠΔᐃⲆⲆᐃⲆ(ΔⵠΔⲆⲆⲆⵠ, ᐃⵠᐃΔᐃⵠΔ, ΔⵠΔⲆⲆⲆⵠ, ᐃⵠᐃΔᐃⵠΔ, ΔⵠΔⲆⲆⲆⵠ);
		const ᐃⲆⵠᐃⵠⵠᐃⲆᐃ = ⲆΔᐃΔΔⲆΔ(ᐃⵠᐃΔᐃⵠΔ, ΔⵠΔⲆⲆⲆⵠ, ᐃⵠᐃΔᐃⵠΔ);
		const ΔⵠᐃⵠⲆᐃⲆ = 4678 ^ ⲆⵠⲆⵠΔΔⵠ;
		return ΔⵠᐃⵠⲆᐃⲆ
	}
	const Δᐃᐃⵠᐃ = ⵠⲆⵠᐃΔ;
	var ᐃⵠΔᐃΔΔΔ = ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].acos;
	ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].acos = ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].asin;
	ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].asin = ᐃⵠΔᐃΔΔΔ;
	var ⲆⲆᐃΔΔΔᐃ = ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].cos;
	ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].cos = ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].sin;
	ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].sin = ⲆⲆᐃΔΔΔᐃ;
	const ⵠⲆⲆⵠ = ⵠⲆΔⵠ;
	const ᐃᐃΔΔⵠ = ⲆᐃᐃⲆᐃ;
	const Δᐃⵠⵠⵠ = Δᐃᐃⵠᐃ;
	const ⲆⵠⲆⲆⵠ = ᐃⲆΔⲆᐃ;
	const ΔⵠᐃΔᐃⲆⵠ = ᐃⲆⲆΔᐃⵠⲆ;
	const ᐃⲆⵠᐃΔⲆⵠ = {
		"ᐃᐃᐃᐃΔⲆⵠ": "development",
		"ᐃⲆⲆᐃⵠΔᐃ": "production"
	};
	const ᐃⵠⵠⵠΔ = ⲆⵠⵠΔⲆ;
	const ⵠΔΔⲆΔ = ᐃᐃᐃΔΔ;
	const ΔᐃⲆⲆΔ = ⲆⵠΔᐃΔ;
	const ᐃᐃⵠⲆⲆᐃᐃ = ᐃⲆⵠᐃΔⲆⵠ.ᐃⲆⲆᐃⵠΔᐃ;
	const ⵠΔⵠⲆⵠ = ᐃⲆᐃⲆⵠ;

	function ⵠⲆΔᐃⲆ(ΔΔᐃᐃᐃ) {
		this.ⵠⲆⲆⲆ = 2147483648;
		this.a = 1103515245;
		this.c = 12345;
		this.state = ΔΔᐃᐃᐃ ? ΔΔᐃᐃᐃ : Math.floor((this.ⵠⲆⲆⲆ - 1) * Math.random())
	}
	ⵠⲆΔᐃⲆ.prototype.random = function() {
		this.state = (this.a * this.state + this.c) % this.ⵠⲆⲆⲆ;
		return this.state / this.ⵠⲆⲆⲆ
	};
	ⵠⲆΔᐃⲆ.prototype.ᐃᐃⲆᐃΔⵠᐃ = function(ΔΔᐃᐃᐃ) {
		this.state = ΔΔᐃᐃᐃ
	};
	const ᐃⵠΔⲆΔ = ⵠᐃⲆⵠᐃ;
	ΔᐃᐃⵠᐃᐃΔ = 1e4;
	const ΔⲆⵠᐃ = ᐃⵠΔⲆ;
	const ⵠᐃⵠΔⲆ = Ⲇᐃⵠᐃᐃ;
	const ⵠⲆⲆⲆⲆ = ΔΔⵠΔΔ;
	ⲆᐃⲆⵠΔⲆΔ = [];
	const ⵠⲆⲆᐃΔΔᐃ = ⲆⵠⲆΔᐃᐃΔ;
	const ᐃⵠⵠΔⵠΔⵠ = ⲆⵠⲆᐃᐃᐃⲆ;
	const ΔⵠΔⲆⵠ = ΔⲆΔᐃΔ;
	const ⲆΔⲆⵠΔ = ΔᐃᐃΔΔ;
	var ΔᐃⲆⲆⵠⵠᐃ = new ⵠⲆΔᐃⲆ;
	ΔᐃⲆⲆⵠⵠᐃ.ᐃᐃⲆᐃΔⵠᐃ((new Date).getTime());
	for (var ⵠᐃᐃᐃ = 0; ΔᐃᐃⵠᐃᐃΔ > ⵠᐃᐃᐃ; ⵠᐃᐃᐃ++) ⲆᐃⲆⵠΔⲆΔ.push(ΔᐃⲆⲆⵠⵠᐃ.random());

	function ᐃΔᐃΔᐃᐃᐃ(ⲆⲆΔΔⲆ, ⵠΔᐃΔᐃ, ⲆᐃⵠⲆⲆⲆᐃ, ᐃⵠⲆΔⲆ, ᐃᐃΔⲆⵠᐃᐃ) {
		ⵠⵠⲆⵠⲆΔᐃ(ᐃⵠΔⲆⲆ, ⲆⲆΔΔⲆ, ⵠΔᐃΔᐃ, ⲆᐃⵠⲆⲆⲆᐃ, ᐃⵠⲆΔⲆ, ᐃᐃΔⲆⵠᐃᐃ);
		const ⲆⵠΔⵠⲆⲆⲆ = ⵠⲆΔᐃⵠⵠᐃ(ⲆⲆⵠΔ[ΔΔᐃ], ⲆⲆⵠΔ[ⲆᐃΔ]);
		const ΔΔᐃⵠᐃΔᐃ = ⵠⲆΔᐃⵠⵠᐃ(ⲆⲆⵠΔ[2], ⲆⲆⵠΔ[ΔⲆⵠᐃ]);
		const ΔⵠⲆᐃⵠⵠᐃ = ((ⲆⵠΔⵠⲆⲆⲆ ^ ΔΔᐃⵠᐃΔᐃ) + 34644) % 65480;
		return ΔⵠⲆᐃⵠⵠᐃ
	}

	function ᐃᐃⵠⲆᐃΔⵠ(ΔⲆⵠΔⵠΔⵠ, ᐃΔⵠⵠᐃᐃⵠ, ⵠᐃⲆⵠⲆᐃⲆ, ΔⵠⲆΔᐃΔⲆ, ⲆΔⲆⲆⲆⲆᐃ) {
		const ⵠⵠᐃΔⵠᐃⲆ = ~(ΔⲆⵠΔⵠΔⵠ & 10416) & 10416 | ~(10416 & ΔⲆⵠΔⵠΔⵠ) & ΔⲆⵠΔⵠΔⵠ;
		const ᐃΔΔⲆᐃΔⲆ = ~(9377 & ᐃΔⵠⵠᐃᐃⵠ) & ᐃΔⵠⵠᐃᐃⵠ | ~(ᐃΔⵠⵠᐃᐃⵠ & 9377) & 9377;
		const ΔᐃᐃⲆⵠΔⵠ = (ⵠᐃⲆⵠⲆᐃⲆ + 28227) % 65531;
		const ⲆⲆⵠⲆᐃᐃᐃ = ((25986 + ΔⵠⲆΔᐃΔⲆ) * 22695477 + 1) % 4294967296;
		const ⲆΔΔᐃⲆⲆΔ = ~(167 & ⲆΔⲆⲆⲆⲆᐃ) & (167 | ⲆΔⲆⲆⲆⲆᐃ);
		const ᐃⲆⵠⵠᐃᐃΔ = ᐃΔⲆᐃᐃⵠⲆ(ⵠⵠᐃΔⵠᐃⲆ, ᐃΔΔⲆᐃΔⲆ);
		const ΔΔⵠⲆΔΔⲆ = ⲆⲆⲆᐃⵠⲆⵠ(ΔᐃᐃⲆⵠΔⵠ, ⲆⲆⵠⲆᐃᐃᐃ, ⲆΔΔᐃⲆⲆΔ);
		const ⵠΔⵠⲆⲆⲆⵠ = (1 + 22695477 * (44917 + (ᐃⲆⵠⵠᐃᐃΔ ^ ΔΔⵠⲆΔΔⲆ))) % 4294967296;
		return ⵠΔⵠⲆⲆⲆⵠ
	}

	function ᐃᐃⲆᐃᐃᐃⵠ(ᐃᐃΔⵠⲆᐃⲆ, ⲆᐃᐃᐃⲆⵠΔ, ΔⵠⲆⵠⵠ, ᐃⵠⲆΔΔⵠᐃ, ⲆⵠᐃᐃΔᐃΔ) {
		const ⵠΔⵠⵠᐃᐃᐃ = 37469 ^ ᐃᐃΔⵠⲆᐃⲆ;
		const ⵠΔⲆΔⲆⲆⵠ = ~(ⲆᐃᐃᐃⲆⵠΔ & 23636) & 23636 | ~(23636 & ⲆᐃᐃᐃⲆⵠΔ) & ⲆᐃᐃᐃⲆⵠΔ;
		const ⵠᐃⲆᐃᐃΔᐃ = (0 << (ΔⵠⲆⵠⵠ >> ΔᐃⲆⲆΔ & ᐃⵠΔΔⵠ)) + (24 << (ΔⵠⲆⵠⵠ >> 24 & 255)) + (Ⲇᐃⵠᐃᐃ << (ΔⵠⲆⵠⵠ >> 8 & 255)) + (ΔᐃⲆⲆΔ << (ΔⵠⲆⵠⵠ >> 0 & ⵠⵠⲆⲆᐃ));
		const ΔⲆΔΔⵠΔᐃ = (24 << (ᐃⵠⲆΔΔⵠᐃ >> 8 & 255)) + (16 << (ᐃⵠⲆΔΔⵠᐃ >> 0 & 255)) + (0 << (ᐃⵠⲆΔΔⵠᐃ >> 24 & ⵠⵠⲆⲆᐃ)) + (8 << (ᐃⵠⲆΔΔⵠᐃ >> 16 & 255));
		const ⲆⲆⵠΔᐃΔⵠ = (16 << (ⲆⵠᐃᐃΔᐃΔ >> 24 & 255)) + (24 << (ⲆⵠᐃᐃΔᐃΔ >> 0 & 255)) + (ΔΔᐃ << (ⲆⵠᐃᐃΔᐃΔ >> 8 & ᐃⵠΔΔⵠ)) + (ⵠᐃⵠΔⲆ << (ⲆⵠᐃᐃΔᐃΔ >> 16 & 255));
		const ⵠᐃᐃⵠΔᐃⲆ = ⵠΔⵠΔᐃⲆᐃ(ⵠΔⵠⵠᐃᐃᐃ, ⵠΔⲆΔⲆⲆⵠ, ⵠᐃⲆᐃᐃΔᐃ, ΔⲆΔΔⵠΔᐃ);
		const ⲆⲆΔⵠΔΔⵠΔⵠ = ⵠΔⵠⵠⵠᐃⲆ(ⲆⲆⵠΔᐃΔⵠ, ⵠΔⵠⵠᐃᐃᐃ, ⵠΔⲆΔⲆⲆⵠ, ⵠᐃⲆᐃᐃΔᐃ, ΔⲆΔΔⵠΔᐃ, ⲆⲆⵠΔᐃΔⵠ);
		const ᐃⲆⲆΔΔⲆΔ = 64325 ^ ⵠᐃᐃⵠΔᐃⲆ;
		return ᐃⲆⲆΔΔⲆΔ
	}
	const ⵠⲆⵠⵠⲆ = ⵠΔΔΔⵠ;
	const ᐃⲆᐃⵠ = ᐃⲆᐃᐃ;
	const ⵠΔΔⵠᐃ = ᐃΔᐃⲆⵠ;
	const ⵠΔᐃⵠⲆ = ⲆΔΔΔⵠ;
	const ᐃⲆⵠΔᐃ = ᐃᐃΔΔⵠ;

	function ⲆΔᐃΔΔⲆΔ(ᐃΔⵠⵠⵠᐃⵠ, ⲆⵠⲆⲆΔᐃᐃ, ΔⵠⲆᐃⲆΔⵠ) {
		const ⵠᐃᐃⲆⵠΔⲆ = ~(36466 & ᐃΔⵠⵠⵠᐃⵠ) & 36466 | ~(36466 & ᐃΔⵠⵠⵠᐃⵠ) & ᐃΔⵠⵠⵠᐃⵠ;
		const ⲆⵠⵠⲆⵠⵠΔ = (2147483629 * (44681 + ⲆⵠⲆⲆΔᐃᐃ) + 2147483587) % 2147483647;
		const ⵠⲆᐃⵠⲆⲆΔ = (1013904223 + (ΔⵠⲆᐃⲆΔⵠ + 16533) * 1664525) % 4294967296;
		const ᐃᐃⲆᐃⲆⲆᐃ = ᐃᐃⲆΔᐃⲆΔ(ⵠᐃᐃⲆⵠΔⲆ, ⲆⵠⵠⲆⵠⵠΔ);
		const ᐃΔⵠⵠⵠⵠΔ = ᐃᐃⲆΔᐃⲆΔ(ⵠⲆᐃⵠⲆⲆΔ, ⵠᐃᐃⲆⵠΔⲆ);
		const ⵠΔΔⵠᐃᐃΔ = (48290 + (ᐃᐃⲆᐃⲆⲆᐃ ^ ᐃΔⵠⵠⵠⵠΔ)) % 65419;
		return ⵠΔΔⵠᐃᐃΔ
	}
	const ΔΔᐃⵠᐃ = ΔⵠΔⵠⵠ;
	const ΔΔⲆⲆⲆⲆⵠ = ⵠⲆⲆᐃΔΔᐃ;
	const ⲆⲆΔΔⵠ = ⲆᐃΔⵠⵠᐃᐃ;

	function ⵠⲆΔΔᐃΔⲆ(ΔⵠⵠΔΔ, ⲆΔΔᐃⵠⵠᐃ, ᐃⵠᐃΔⵠΔᐃ, ⲆΔⵠᐃⲆᐃᐃ, ΔⲆᐃⲆᐃΔᐃ, ΔᐃᐃⵠⵠΔⵠ) {
		const ᐃⲆᐃΔⵠΔᐃ = (24 << (ΔⵠⵠΔΔ >> 16 & 255)) + (8 << (ΔⵠⵠΔΔ >> ΔⵠΔⵠΔ & 255)) + (0 << (ΔⵠⵠΔΔ >> 24 & ⵠⵠⲆⲆᐃ)) + (16 << (ΔⵠⵠΔΔ >> 0 & 255));
		const ΔⵠⲆᐃⵠⵠΔ = (12345 + 1103515245 * (ⲆΔΔᐃⵠⵠᐃ + 13392)) % 2147483648;
		const ⵠⲆⲆⲆⵠᐃΔ = ~(24579 & ᐃⵠᐃΔⵠΔᐃ) & ᐃⵠᐃΔⵠΔᐃ | ~(ᐃⵠᐃΔⵠΔᐃ & 24579) & 24579;
		const ⵠⲆⵠⵠᐃⲆᐃ = (35402 + ⲆΔⵠᐃⲆᐃᐃ) % 65312;
		const ⵠᐃΔΔⵠᐃⲆ = ~(ΔⲆᐃⲆᐃΔᐃ & 25653) & ΔⲆᐃⲆᐃΔᐃ | ~(ΔⲆᐃⲆᐃΔᐃ & 25653) & 25653;
		const ⲆⵠⲆⵠⲆᐃΔ = ~(ΔᐃᐃⵠⵠΔⵠ & 63138) & (63138 | ΔᐃᐃⵠⵠΔⵠ);
		const ⲆⵠⲆⲆⲆⵠⵠ = ⵠᐃᐃΔⲆⲆᐃ(ᐃⲆᐃΔⵠΔᐃ, ΔⵠⲆᐃⵠⵠΔ, ⵠⲆⲆⲆⵠᐃΔ, ⵠⲆⵠⵠᐃⲆᐃ, ⵠᐃΔΔⵠᐃⲆ, ⲆⵠⲆⵠⲆᐃΔ);
		const ⵠΔⲆᐃⲆᐃᐃⵠΔ = ⵠᐃᐃΔⲆⲆᐃ(ᐃⲆᐃΔⵠΔᐃ, ΔⵠⲆᐃⵠⵠΔ, ⵠⲆⲆⲆⵠᐃΔ, ⵠⲆⵠⵠᐃⲆᐃ, ⵠᐃΔΔⵠᐃⲆ, ⲆⵠⲆⵠⲆᐃΔ);
		const ⵠⲆⵠⲆΔⵠᐃ = ~(ⲆⵠⲆⲆⲆⵠⵠ & 57892) & (57892 | ⲆⵠⲆⲆⲆⵠⵠ);
		return ⵠⲆⵠⲆΔⵠᐃ
	}

	function ⵠᐃⵠΔⲆΔᐃ(ⲆⲆΔΔⲆ, ⵠΔᐃΔᐃ, ⲆᐃⵠⲆⲆⲆᐃ, ᐃⵠⲆΔⲆ) {
		const ᐃᐃⵠⲆⵠΔΔ = ~(59259 & ⲆⲆΔΔⲆ) & ⲆⲆΔΔⲆ | ~(ⲆⲆΔΔⲆ & 59259) & 59259;
		const ΔⵠΔⲆΔⲆΔ = ~(ⵠΔᐃΔᐃ & 56097) & ⵠΔᐃΔᐃ | ~(ⵠΔᐃΔᐃ & 56097) & 56097;
		const ⲆⵠⲆΔⵠΔΔ = ((43315 + ⲆᐃⵠⲆⲆⲆᐃ) * 1664525 + 1013904223) % 4294967296;
		const ᐃΔⲆⵠᐃΔᐃ = (8 << (ᐃⵠⲆΔⲆ >> 24 & ᐃΔⵠⲆΔ)) + (32 << (ᐃⵠⲆΔⲆ >> 32 & 255)) + (24 << (ᐃⵠⲆΔⲆ >> 8 & 255)) + (16 << (ᐃⵠⲆΔⲆ >> 16 & 255));
		const ⲆΔᐃΔᐃᐃⵠ = ΔᐃΔⲆΔⵠᐃ(ᐃᐃⵠⲆⵠΔΔ, ΔⵠΔⲆΔⲆΔ, ⲆⵠⲆΔⵠΔΔ, ᐃΔⲆⵠᐃΔᐃ, ᐃᐃⵠⲆⵠΔΔ, ΔⵠΔⲆΔⲆΔ);
		const ᐃᐃᐃΔⲆⲆΔ = ⵠᐃΔⲆΔⲆⵠ(ⲆⵠⲆΔⵠΔΔ, ᐃΔⲆⵠᐃΔᐃ, ᐃᐃⵠⲆⵠΔΔ, ΔⵠΔⲆΔⲆΔ, ⲆⵠⲆΔⵠΔΔ);
		const ΔⵠⵠᐃΔΔΔⵠⵠ = ⵠΔΔᐃⲆⲆⲆ(ᐃΔⲆⵠᐃΔᐃ, ᐃᐃⵠⲆⵠΔΔ, ΔⵠΔⲆΔⲆΔ, ⲆⵠⲆΔⵠΔΔ, ᐃΔⲆⵠᐃΔᐃ, ᐃᐃⵠⲆⵠΔΔ);
		const ⲆⲆⲆⵠᐃΔⲆ = (1013904223 + ((ⲆΔᐃΔᐃᐃⵠ ^ ᐃᐃᐃΔⲆⲆΔ) + 26191) * 1664525) % 4294967296;
		const ⵠᐃΔⵠⵠᐃⲆ = (ⲆⲆⲆⵠᐃΔⲆ | 38630) & ~(38630 & ⲆⲆⲆⵠᐃΔⲆ);
		return ⵠᐃΔⵠⵠᐃⲆ
	}
	const ΔⲆΔⲆⲆ = ⲆⲆΔΔⵠ;
	const ⲆⲆᐃᐃ = ᐃⵠᐃⲆ;
	const ΔΔⵠΔᐃ = ΔΔΔⲆ;

	function ⲆΔᐃⲆᐃᐃΔ(ⵠΔⵠΔΔⵠᐃ, ⵠⲆⲆⲆᐃ, ⵠⲆᐃΔΔ, ᐃⵠⵠⲆᐃΔⲆ, ᐃΔᐃⵠⲆⵠⵠ, ᐃⵠⵠⵠΔΔⲆ) {
		const ⵠⵠᐃᐃΔⵠⲆ = ((39488 + ⵠΔⵠΔΔⵠᐃ) * 214013 + 2531011) % 4294967296;
		const ⲆΔΔⲆⵠᐃⲆ = ~(49976 & ⵠⲆⲆⲆᐃ) & ⵠⲆⲆⲆᐃ | ~(ⵠⲆⲆⲆᐃ & 49976) & 49976;
		const ⵠⲆⵠⵠⲆΔᐃ = ~(ⵠⲆᐃΔΔ & 35856) & ⵠⲆᐃΔΔ | ~(ⵠⲆᐃΔΔ & 35856) & 35856;
		const ᐃⲆⲆᐃᐃⲆⵠ = 52219 ^ ᐃⵠⵠⲆᐃΔⲆ;
		const ᐃⲆⵠΔⵠⵠⵠ = (ᐃΔᐃⵠⲆⵠⵠ + 3575) % 65503;
		const ⵠᐃⵠⲆⲆⵠᐃ = ~(6932 & ᐃⵠⵠⵠΔΔⲆ) & ᐃⵠⵠⵠΔΔⲆ | ~(ᐃⵠⵠⵠΔΔⲆ & 6932) & 6932;
		const ΔᐃⲆⵠΔᐃⵠ = ΔⲆᐃⵠⵠⲆᐃ(ⵠⵠᐃᐃΔⵠⲆ, ⲆΔΔⲆⵠᐃⲆ, ⵠⲆⵠⵠⲆΔᐃ, ᐃⲆⲆᐃᐃⲆⵠ, ᐃⲆⵠΔⵠⵠⵠ);
		const ᐃⵠⲆⲆⲆⵠᐃ = ᐃᐃΔΔⵠᐃᐃ(ⵠᐃⵠⲆⲆⵠᐃ, ⵠⵠᐃᐃΔⵠⲆ, ⲆΔΔⲆⵠᐃⲆ, ⵠⲆⵠⵠⲆΔᐃ, ᐃⲆⲆᐃᐃⲆⵠ, ᐃⲆⵠΔⵠⵠⵠ);
		const ⵠᐃᐃⵠⲆᐃΔΔᐃ = ⲆⵠⵠⲆᐃΔᐃ(ⵠᐃⵠⲆⲆⵠᐃ, ⵠⵠᐃᐃΔⵠⲆ, ⲆΔΔⲆⵠᐃⲆ, ⵠⲆⵠⵠⲆΔᐃ, ᐃⲆⲆᐃᐃⲆⵠ, ᐃⲆⵠΔⵠⵠⵠ);
		const ⵠᐃᐃᐃΔⲆⵠ = (1013904223 + ((ΔᐃⲆⵠΔᐃⵠ ^ ᐃⵠⲆⲆⲆⵠᐃ) + 60709) * 1664525) % 4294967296;
		const ΔⲆⵠⵠΔⲆⵠ = ~(ⵠᐃᐃᐃΔⲆⵠ & 42138) & ⵠᐃᐃᐃΔⲆⵠ | ~(ⵠᐃᐃᐃΔⲆⵠ & 42138) & 42138;
		return ΔⲆⵠⵠΔⲆⵠ
	}
	const ᐃΔΔⲆᐃⵠᐃ = ⵠΔΔΔΔ;

	function ⲆⲆΔⲆΔ(ᐃᐃΔⵠⲆᐃⲆ, ⲆᐃᐃᐃⲆⵠΔ, ΔⵠⲆⵠⵠ, ᐃⵠⲆΔΔⵠᐃ) {
		const ΔᐃᐃⲆⵠΔⲆ = 11762 ^ ᐃᐃΔⵠⲆᐃⲆ;
		const ΔⲆⲆⲆΔΔᐃ = ~(ⲆᐃᐃᐃⲆⵠΔ & 19425) & 19425 | ~(19425 & ⲆᐃᐃᐃⲆⵠΔ) & ⲆᐃᐃᐃⲆⵠΔ;
		const ΔⵠᐃⵠⲆΔΔ = (32 << (ΔⵠⲆⵠⵠ >> 16 & 255)) + (8 << (ΔⵠⲆⵠⵠ >> 32 & 255)) + (24 << (ΔⵠⲆⵠⵠ >> 24 & ⵠⵠⲆⲆᐃ)) + (16 << (ΔⵠⲆⵠⵠ >> Ⲇᐃⵠᐃᐃ & 255));
		const ᐃⵠⵠⵠⲆᐃⵠ = ~(259 & ᐃⵠⲆΔΔⵠᐃ) & 259 | ~(259 & ᐃⵠⲆΔΔⵠᐃ) & ᐃⵠⲆΔΔⵠᐃ;
		const ⲆᐃⲆⵠᐃΔⵠ = (32 << ((ΔᐃᐃⲆⵠΔⲆ ^ ΔⲆⲆⲆΔΔᐃ) >> 32 & 255)) + (8 << ((ΔᐃᐃⲆⵠΔⲆ ^ ΔⲆⲆⲆΔΔᐃ) >> 8 & 255)) + (24 << ((ΔᐃᐃⲆⵠΔⲆ ^ ΔⲆⲆⲆΔΔᐃ) >> 24 & ⵠᐃⵠᐃⵠ)) + (ΔᐃⲆⲆΔ << ((ΔᐃᐃⲆⵠΔⲆ ^ ΔⲆⲆⲆΔΔᐃ) >> 16 & 255));
		const ⵠⵠⵠⲆᐃΔΔ = ((17757 + (ⲆᐃⲆⵠᐃΔⵠ ^ ΔⵠᐃⵠⲆΔΔ)) * 1664525 + 1013904223) % 4294967296;
		const ᐃᐃΔᐃⵠⲆᐃ = (1664525 * (55182 + (ⵠⵠⵠⲆᐃΔΔ ^ ᐃⵠⵠⵠⲆᐃⵠ)) + 1013904223) % 4294967296;
		return ᐃᐃΔᐃⵠⲆᐃ
	}

	function ᐃΔΔΔΔᐃⵠ(ΔⵠΔⵠΔᐃⲆ, ⲆᐃΔᐃΔⲆⲆ) {
		const ⲆⵠⵠⵠⲆⲆⵠ = ~(41406 & ΔⵠΔⵠΔᐃⲆ) & ΔⵠΔⵠΔᐃⲆ | ~(ΔⵠΔⵠΔᐃⲆ & 41406) & 41406;
		const ᐃΔᐃⲆΔⲆⵠ = ((ⲆᐃΔᐃΔⲆⲆ + 17922) * 1103515245 + 12345) % 2147483648;
		const ⲆΔⲆᐃΔΔᐃ = ᐃᐃⲆⲆⵠⲆⵠ(ⲆⵠⵠⵠⲆⲆⵠ, ᐃΔᐃⲆΔⲆⵠ, ⲆⵠⵠⵠⲆⲆⵠ);
		const ⲆⲆⲆⲆᐃᐃⵠⲆⵠ = ΔᐃᐃⲆΔΔΔ(ᐃΔᐃⲆΔⲆⵠ, ⲆⵠⵠⵠⲆⲆⵠ, ᐃΔᐃⲆΔⲆⵠ, ⲆⵠⵠⵠⲆⲆⵠ);
		const ⲆⲆΔⲆΔⵠⵠ = ⲆΔⲆⲆⲆᐃΔ(ᐃΔᐃⲆΔⲆⵠ, ⲆⵠⵠⵠⲆⲆⵠ, ᐃΔᐃⲆΔⲆⵠ, ⲆⵠⵠⵠⲆⲆⵠ, ᐃΔᐃⲆΔⲆⵠ);
		const ⵠᐃΔᐃᐃⵠΔ = ⲆΔⲆᐃΔΔᐃ ^ 18573;
		const ᐃΔᐃⵠᐃᐃⵠ = ((42346 + (ⵠᐃΔᐃᐃⵠΔ ^ ⲆⲆΔⲆΔⵠⵠ)) * 2147483629 + 2147483587) % 2147483647;
		return ᐃΔᐃⵠᐃᐃⵠ
	}

	function ⵠᐃⲆᐃⲆΔⲆ(ΔⲆΔⲆᐃⲆⲆ, ᐃⲆΔᐃΔᐃΔ, ⲆᐃⵠᐃᐃΔᐃ, ⲆΔⵠⲆⵠⲆⲆ, ⵠⲆⵠⵠⲆᐃⵠ) {
		const ⵠᐃⲆⵠⲆⲆΔ = (2147483629 * (ΔⲆΔⲆᐃⲆⲆ + 14772) + 2147483587) % 2147483647;
		const ⵠΔⵠⲆᐃΔⵠ = 63080 ^ ᐃⲆΔᐃΔᐃΔ;
		const ΔⲆΔⵠⵠΔᐃ = (22695477 * (ⲆᐃⵠᐃᐃΔᐃ + 60304) + 1) % 4294967296;
		const ΔⵠᐃΔΔⲆΔ = ~(5467 & ⲆΔⵠⲆⵠⲆⲆ) & 5467 | ~(5467 & ⲆΔⵠⲆⵠⲆⲆ) & ⲆΔⵠⲆⵠⲆⲆ;
		const ΔⵠⲆΔⲆⲆΔ = (ⵠⲆⵠⵠⲆᐃⵠ | 40165) & ~(40165 & ⵠⲆⵠⵠⲆᐃⵠ);
		const ⲆᐃⵠⲆΔⵠⵠ = ⲆⲆᐃᐃⲆᐃᐃ(ⵠᐃⲆⵠⲆⲆΔ, ⵠΔⵠⲆᐃΔⵠ, ΔⲆΔⵠⵠΔᐃ, ΔⵠᐃΔΔⲆΔ);
		const ᐃᐃΔⵠᐃⵠᐃ = ⵠᐃΔⲆΔⲆⵠ(ΔⵠⲆΔⲆⲆΔ, ⵠᐃⲆⵠⲆⲆΔ, ⵠΔⵠⲆᐃΔⵠ, ΔⲆΔⵠⵠΔᐃ, ΔⵠᐃΔΔⲆΔ);
		const ΔᐃᐃⲆⵠᐃᐃ = ⲆΔⲆⲆⵠΔΔ(ΔⵠⲆΔⲆⲆΔ, ⵠᐃⲆⵠⲆⲆΔ, ⵠΔⵠⲆᐃΔⵠ, ΔⲆΔⵠⵠΔᐃ, ΔⵠᐃΔΔⲆΔ, ΔⵠⲆΔⲆⲆΔ);
		const ⲆΔΔⲆΔΔⵠ = (16 << ((ⲆᐃⵠⲆΔⵠⵠ ^ ᐃᐃΔⵠᐃⵠᐃ) >> 24 & ΔⲆΔⲆⲆ)) + (8 << ((ⲆᐃⵠⲆΔⵠⵠ ^ ᐃᐃΔⵠᐃⵠᐃ) >> 16 & 255)) + (24 << ((ⲆᐃⵠⲆΔⵠⵠ ^ ᐃᐃΔⵠᐃⵠᐃ) >> 32 & 255)) + (32 << ((ⲆᐃⵠⲆΔⵠⵠ ^ ᐃᐃΔⵠᐃⵠᐃ) >> 8 & 255));
		const ⲆΔⵠΔᐃⲆⲆ = (1664525 * (28765 + (ⲆΔΔⲆΔΔⵠ ^ ΔᐃᐃⲆⵠᐃᐃ)) + 1013904223) % 4294967296;
		return ⲆΔⵠΔᐃⲆⲆ
	}

	function ⲆΔⲆⲆⲆᐃΔ(ᐃⲆᐃⵠⵠⲆⵠ, ⵠᐃⲆᐃΔⵠᐃ, ⲆᐃΔⵠⵠⲆⵠ, ⲆⲆᐃⲆᐃⵠᐃ, ᐃΔⵠⲆΔᐃᐃ) {
		const ⲆⲆⵠᐃⲆᐃⲆ = (32 << (ᐃⲆᐃⵠⵠⲆⵠ >> 24 & 255)) + (16 << (ᐃⲆᐃⵠⵠⲆⵠ >> 8 & 255)) + (24 << (ᐃⲆᐃⵠⵠⲆⵠ >> ΔᐃᐃΔΔ & 255)) + (8 << (ᐃⲆᐃⵠⵠⲆⵠ >> 32 & 255));
		const ᐃΔᐃΔⲆⲆⵠ = (ⵠᐃⲆᐃΔⵠᐃ + 39144) % 65406;
		const ΔⵠᐃⲆⲆⲆⲆ = ⲆᐃΔⵠⵠⲆⵠ ^ 34575;
		const ⵠΔⵠᐃᐃⲆΔ = ~(37841 & ⲆⲆᐃⲆᐃⵠᐃ) & ⲆⲆᐃⲆᐃⵠᐃ | ~(ⲆⲆᐃⲆᐃⵠᐃ & 37841) & 37841;
		const ⵠⵠⵠⵠΔⵠΔ = (25975 | ᐃΔⵠⲆΔᐃᐃ) & ~(25975 & ᐃΔⵠⲆΔᐃᐃ);
		const ᐃΔᐃΔΔⲆΔ = ⲆⲆΔⲆΔ(ⲆⲆⵠᐃⲆᐃⲆ, ᐃΔᐃΔⲆⲆⵠ, ΔⵠᐃⲆⲆⲆⲆ, ⵠΔⵠᐃᐃⲆΔ);
		const ⲆⵠΔΔⵠΔⵠⵠΔ = ᐃᐃᐃⵠΔⲆⵠ(ⵠⵠⵠⵠΔⵠΔ, ⲆⲆⵠᐃⲆᐃⲆ, ᐃΔᐃΔⲆⲆⵠ, ΔⵠᐃⲆⲆⲆⲆ, ⵠΔⵠᐃᐃⲆΔ);
		const ᐃΔΔⲆᐃΔΔⲆⲆ = ⲆⵠⵠⲆᐃΔᐃ(ⵠⵠⵠⵠΔⵠΔ, ⲆⲆⵠᐃⲆᐃⲆ, ᐃΔᐃΔⲆⲆⵠ, ΔⵠᐃⲆⲆⲆⲆ, ⵠΔⵠᐃᐃⲆΔ, ⵠⵠⵠⵠΔⵠΔ);
		const ᐃΔΔᐃⵠⵠΔ = (19326 | ᐃΔᐃΔΔⲆΔ) & ~(19326 & ᐃΔᐃΔΔⲆΔ);
		const ᐃΔⲆΔⵠᐃⵠ = 36297 ^ ᐃΔΔᐃⵠⵠΔ;
		return ᐃΔⲆΔⵠᐃⵠ
	}

	function ⲆⵠΔⲆⲆⲆᐃ(ΔΔⵠⲆⲆΔⲆ, ᐃΔᐃᐃⵠⲆᐃ, ⲆⲆⵠᐃᐃⲆᐃ, ΔⵠᐃΔⵠⲆⲆ, ⲆⲆⵠᐃⵠ) {
		const ⲆⵠⵠⲆᐃⲆΔ = (12345 + (23101 + ΔΔⵠⲆⲆΔⲆ) * 1103515245) % 2147483648;
		const ⲆⵠⲆⵠᐃⲆⲆ = 58614 ^ ᐃΔᐃᐃⵠⲆᐃ;
		const ᐃⲆᐃⵠᐃⵠΔ = ((ⲆⲆⵠᐃᐃⲆᐃ + 45267) * 214013 + 2531011) % 4294967296;
		const ⵠⵠⵠΔⵠⲆⲆ = ΔⵠᐃΔⵠⲆⲆ ^ 40810;
		const ⵠΔᐃᐃⲆᐃᐃ = (24 << (ⲆⲆⵠᐃⵠ >> 24 & 255)) + (8 << (ⲆⲆⵠᐃⵠ >> 32 & 255)) + (32 << (ⲆⲆⵠᐃⵠ >> 8 & ⵠᐃⵠᐃⵠ)) + (16 << (ⲆⲆⵠᐃⵠ >> 16 & 255));
		const ᐃⵠᐃΔᐃᐃⲆ = Ⲇⵠᐃⵠⵠᐃᐃ(ⲆⵠⵠⲆᐃⲆΔ, ⲆⵠⲆⵠᐃⲆⲆ);
		const ΔᐃⲆᐃⵠΔⲆ = ⵠᐃⵠΔⲆΔᐃ(ᐃⲆᐃⵠᐃⵠΔ, ⵠⵠⵠΔⵠⲆⲆ, ⵠΔᐃᐃⲆᐃᐃ, ⲆⵠⵠⲆᐃⲆΔ);
		const ᐃⵠⵠᐃⲆⵠᐃΔᐃ = ΔⲆΔⵠⲆⵠⵠ(ⲆⵠⲆⵠᐃⲆⲆ, ᐃⲆᐃⵠᐃⵠΔ, ⵠⵠⵠΔⵠⲆⲆ, ⵠΔᐃᐃⲆᐃᐃ);
		const ⵠⲆΔⲆΔᐃⵠ = (24 << ((ᐃⵠᐃΔᐃᐃⲆ ^ ΔᐃⲆᐃⵠΔⲆ) >> 24 & 255)) + (32 << ((ᐃⵠᐃΔᐃᐃⲆ ^ ΔᐃⲆᐃⵠΔⲆ) >> 16 & 255)) + (8 << ((ᐃⵠᐃΔᐃᐃⲆ ^ ΔᐃⲆᐃⵠΔⲆ) >> 32 & 255)) + (16 << ((ᐃⵠᐃΔᐃᐃⲆ ^ ΔᐃⲆᐃⵠΔⲆ) >> 8 & 255));
		const ⵠⲆΔⵠⵠⲆᐃ = ~(13644 & ⵠⲆΔⲆΔᐃⵠ) & ⵠⲆΔⲆΔᐃⵠ | ~(ⵠⲆΔⲆΔᐃⵠ & 13644) & 13644;
		return ⵠⲆΔⵠⵠⲆᐃ
	}
	const ⵠᐃᐃⵠΔ = ⵠⵠᐃΔᐃ;

	function ⵠⲆΔⲆᐃⲆⲆ(ΔⲆⵠΔⵠΔⵠ, ᐃΔⵠⵠᐃᐃⵠ, ⵠᐃⲆⵠⲆᐃⲆ, ΔⵠⲆΔᐃΔⲆ, ⲆΔⲆⲆⲆⲆᐃ) {
		const ⲆᐃΔΔⲆᐃⲆ = (24 << (ΔⲆⵠΔⵠΔⵠ >> 24 & 255)) + (32 << (ΔⲆⵠΔⵠΔⵠ >> 16 & 255)) + (16 << (ΔⲆⵠΔⵠΔⵠ >> 8 & 255)) + (8 << (ΔⲆⵠΔⵠΔⵠ >> 32 & 255));
		const ᐃⲆᐃΔᐃⲆⵠ = (12345 + 1103515245 * (ᐃΔⵠⵠᐃᐃⵠ + 3024)) % 2147483648;
		const ⲆᐃⵠΔⵠᐃᐃ = (8 << (ⵠᐃⲆⵠⲆᐃⲆ >> 8 & 255)) + (32 << (ⵠᐃⲆⵠⲆᐃⲆ >> 32 & 255)) + (24 << (ⵠᐃⲆⵠⲆᐃⲆ >> 16 & 255)) + (16 << (ⵠᐃⲆⵠⲆᐃⲆ >> 24 & 255));
		const ⲆᐃⵠᐃⵠΔΔ = (1 + 22695477 * (ΔⵠⲆΔᐃΔⲆ + 41324)) % 4294967296;
		const ΔⲆⲆⵠᐃⵠⵠ = (19607 | ⲆΔⲆⲆⲆⲆᐃ) & ~(ⲆΔⲆⲆⲆⲆᐃ & 19607);
		const ΔⵠⲆⵠᐃⲆⲆ = ΔΔᐃᐃᐃⵠⲆ(ⲆᐃΔΔⲆᐃⲆ, ᐃⲆᐃΔᐃⲆⵠ);
		const ⵠⵠⵠᐃⲆᐃⵠⲆΔ = ᐃᐃᐃⵠΔⲆⵠ(ⲆᐃⵠΔⵠᐃᐃ, ⲆᐃⵠᐃⵠΔΔ, ΔⲆⲆⵠᐃⵠⵠ, ⲆᐃΔΔⲆᐃⲆ, ᐃⲆᐃΔᐃⲆⵠ);
		const ΔⵠΔΔᐃΔᐃⲆΔ = ⲆⲆᐃᐃⵠⲆⲆ(ⲆᐃⵠΔⵠᐃᐃ, ⲆᐃⵠᐃⵠΔΔ, ΔⲆⲆⵠᐃⵠⵠ, ⲆᐃΔΔⲆᐃⲆ, ᐃⲆᐃΔᐃⲆⵠ, ⲆᐃⵠΔⵠᐃᐃ);
		const ⲆⲆΔⵠᐃᐃⵠ = ~(49323 & ΔⵠⲆⵠᐃⲆⲆ) & 49323 | ~(49323 & ΔⵠⲆⵠᐃⲆⲆ) & ΔⵠⲆⵠᐃⲆⲆ;
		const ΔΔΔⲆⵠⵠΔ = ~(ⲆⲆΔⵠᐃᐃⵠ & 46567) & (46567 | ⲆⲆΔⵠᐃᐃⵠ);
		return ΔΔΔⲆⵠⵠΔ
	}
	const ΔⲆΔᐃᐃ = ΔⵠΔⲆⵠ;

	function ΔΔⵠⲆΔᐃΔ(ΔⲆⲆⲆⲆⲆΔ, ⵠᐃⲆⵠΔΔⲆ, ⵠⵠⵠΔᐃⲆⵠ, ⵠΔᐃⲆⵠⲆⵠ, ΔΔΔΔᐃΔΔ, ⵠⵠⲆᐃΔⲆΔ) {
		const ⲆⵠΔⵠⵠᐃⲆ = (1013904223 + (ΔⲆⲆⲆⲆⲆΔ + 28824) * 1664525) % 4294967296;
		const ⲆΔⲆⲆⵠⲆⵠ = (1013904223 + 1664525 * (13210 + ⵠᐃⲆⵠΔΔⲆ)) % 4294967296;
		const ⲆⲆⲆᐃⵠΔᐃ = ~(32165 & ⵠⵠⵠΔᐃⲆⵠ) & 32165 | ~(32165 & ⵠⵠⵠΔᐃⲆⵠ) & ⵠⵠⵠΔᐃⲆⵠ;
		const ⵠⵠΔⵠⲆΔⵠ = (24 << (ⵠΔᐃⲆⵠⲆⵠ >> 24 & 255)) + (16 << (ⵠΔᐃⲆⵠⲆⵠ >> 8 & 255)) + (ΔⵠΔⵠΔ << (ⵠΔᐃⲆⵠⲆⵠ >> ⲆⵠΔᐃΔ & ⵠⵠⲆⲆᐃ)) + (32 << (ⵠΔᐃⲆⵠⲆⵠ >> 32 & 255));
		const ⲆΔⲆⲆᐃⲆⵠ = (Δⵠᐃ + (39199 + ΔΔΔΔᐃΔΔ) * 22695477) % 4294967296;
		const ΔΔⲆᐃⵠⲆΔ = 33037 ^ ⵠⵠⲆᐃΔⲆΔ;
		const ΔⵠᐃⲆᐃᐃᐃ = ᐃⵠᐃΔⵠΔⲆ(ⲆⵠΔⵠⵠᐃⲆ, ⲆΔⲆⲆⵠⲆⵠ, ⲆⲆⲆᐃⵠΔᐃ);
		const ΔⵠⵠⵠⵠᐃⵠⲆΔ = ⲆΔⵠΔⵠᐃⲆ(ⵠⵠΔⵠⲆΔⵠ, ⲆΔⲆⲆᐃⲆⵠ, ΔΔⲆᐃⵠⲆΔ, ⲆⵠΔⵠⵠᐃⲆ);
		const ⵠᐃⲆⲆⵠᐃⲆ = ᐃΔᐃⵠΔⲆᐃ(ⲆΔⲆⲆⵠⲆⵠ, ⲆⲆⲆᐃⵠΔᐃ, ⵠⵠΔⵠⲆΔⵠ, ⲆΔⲆⲆᐃⲆⵠ);
		const ⵠᐃᐃⵠΔΔⵠ = ΔⵠᐃⲆᐃᐃᐃ ^ 2959;
		const ⲆⲆⲆΔΔᐃⲆ = ((34159 + (ⵠᐃᐃⵠΔΔⵠ ^ ⵠᐃⲆⲆⵠᐃⲆ)) * 1103515245 + 12345) % 2147483648;
		return ⲆⲆⲆΔΔᐃⲆ
	}

	function ⲆⲆᐃᐃⲆᐃᐃ(Ⲇᐃⵠⵠᐃᐃⵠ, ᐃΔⲆΔⵠΔⵠ, ⲆΔⵠᐃᐃⲆⲆ, ᐃⲆΔⲆⵠⵠᐃ) {
		const ᐃⲆᐃⵠⵠⵠⵠ = (57611 | Ⲇᐃⵠⵠᐃᐃⵠ) & ~(Ⲇᐃⵠⵠᐃᐃⵠ & 57611);
		const ΔΔᐃⵠⵠⵠᐃ = (1664525 * (ᐃΔⲆΔⵠΔⵠ + 56889) + 1013904223) % 4294967296;
		const ΔⲆΔⲆⵠⲆⵠ = ⲆΔⵠᐃᐃⲆⲆ ^ 62842;
		const ⵠⲆⵠⲆⲆᐃᐃ = ~(ᐃⲆΔⲆⵠⵠᐃ & 1179) & ᐃⲆΔⲆⵠⵠᐃ | ~(ᐃⲆΔⲆⵠⵠᐃ & 1179) & 1179;
		const ⲆᐃΔᐃᐃᐃᐃ = ⲆⲆΔⲆΔ(ᐃⲆᐃⵠⵠⵠⵠ, ΔΔᐃⵠⵠⵠᐃ, ΔⲆΔⲆⵠⲆⵠ, ⵠⲆⵠⲆⲆᐃᐃ);
		const ΔⲆᐃᐃᐃⵠᐃ = ⲆΔⵠΔⵠᐃⲆ(ᐃⲆᐃⵠⵠⵠⵠ, ΔΔᐃⵠⵠⵠᐃ, ΔⲆΔⲆⵠⲆⵠ, ⵠⲆⵠⲆⲆᐃᐃ);
		const ⲆⵠᐃⲆⲆΔΔⵠⵠ = ⵠᐃⵠΔⲆΔᐃ(ᐃⲆᐃⵠⵠⵠⵠ, ΔΔᐃⵠⵠⵠᐃ, ΔⲆΔⲆⵠⲆⵠ, ⵠⲆⵠⲆⲆᐃᐃ);
		const ᐃᐃΔΔⲆᐃΔ = (24 << ((ⲆᐃΔᐃᐃᐃᐃ ^ ΔⲆᐃᐃᐃⵠᐃ) >> 24 & 255)) + (8 << ((ⲆᐃΔᐃᐃᐃᐃ ^ ΔⲆᐃᐃᐃⵠᐃ) >> 16 & 255)) + (16 << ((ⲆᐃΔᐃᐃᐃᐃ ^ ΔⲆᐃᐃᐃⵠᐃ) >> 32 & 255)) + (32 << ((ⲆᐃΔᐃᐃᐃᐃ ^ ΔⲆᐃᐃᐃⵠᐃ) >> 8 & 255));
		const ⲆⵠⲆⵠᐃⲆΔ = ~(63304 & ᐃᐃΔΔⲆᐃΔ) & (ᐃᐃΔΔⲆᐃΔ | 63304);
		return ⲆⵠⲆⵠᐃⲆΔ
	}

	function ΔᐃΔⲆΔⵠᐃ(ⲆⲆⲆⵠᐃᐃⵠ, ⵠΔⵠⵠᐃΔΔ, ⲆⲆⲆᐃΔⵠᐃ, ⲆⵠΔᐃΔΔⵠ, ᐃΔᐃⵠⲆᐃⵠ, ⲆᐃΔⵠⵠⵠᐃ) {
		const ΔΔᐃᐃⵠⵠᐃ = 10715 ^ ⲆⲆⲆⵠᐃᐃⵠ;
		const ⵠⲆⲆΔⲆⲆΔ = (24 << (ⵠΔⵠⵠᐃΔΔ >> 16 & 255)) + (16 << (ⵠΔⵠⵠᐃΔΔ >> 32 & 255)) + (32 << (ⵠΔⵠⵠᐃΔΔ >> 8 & ᐃΔⵠⲆΔ)) + (8 << (ⵠΔⵠⵠᐃΔΔ >> 24 & 255));
		const ⵠᐃⵠΔⵠᐃᐃ = (8 << (ⲆⲆⲆᐃΔⵠᐃ >> ΔᐃᐃΔΔ & ⵠⵠⲆⲆᐃ)) + (32 << (ⲆⲆⲆᐃΔⵠᐃ >> 24 & 255)) + (16 << (ⲆⲆⲆᐃΔⵠᐃ >> ⵠᐃⵠΔⲆ & 255)) + (24 << (ⲆⲆⲆᐃΔⵠᐃ >> 32 & 255));
		const ᐃᐃⲆᐃΔⵠⲆ = ⲆⵠΔᐃΔΔⵠ ^ 40782;
		const ΔⲆⵠⵠⵠΔⵠ = ᐃΔᐃⵠⲆᐃⵠ ^ 41301;
		const ⲆᐃΔⵠΔⵠⵠ = ~(ⲆᐃΔⵠⵠⵠᐃ & 12091) & (12091 | ⲆᐃΔⵠⵠⵠᐃ);
		const ⲆᐃⵠⲆⵠⲆᐃ = ⵠΔΔᐃⲆⲆⲆ(ΔΔᐃᐃⵠⵠᐃ, ⵠⲆⲆΔⲆⲆΔ, ⵠᐃⵠΔⵠᐃᐃ, ᐃᐃⲆᐃΔⵠⲆ, ΔⲆⵠⵠⵠΔⵠ, ⲆᐃΔⵠΔⵠⵠ);
		const ⲆⲆⵠⵠΔⲆⲆΔⲆ = ⵠΔΔᐃⲆⲆⲆ(ΔΔᐃᐃⵠⵠᐃ, ⵠⲆⲆΔⲆⲆΔ, ⵠᐃⵠΔⵠᐃᐃ, ᐃᐃⲆᐃΔⵠⲆ, ΔⲆⵠⵠⵠΔⵠ, ⲆᐃΔⵠΔⵠⵠ);
		const ⲆᐃᐃⲆΔΔⵠⲆᐃ = ΔᐃⲆⲆⵠᐃΔ(ΔΔᐃᐃⵠⵠᐃ, ⵠⲆⲆΔⲆⲆΔ, ⵠᐃⵠΔⵠᐃᐃ, ᐃᐃⲆᐃΔⵠⲆ, ΔⲆⵠⵠⵠΔⵠ);
		const ΔᐃⲆΔᐃⲆΔ = (ⲆᐃⵠⲆⵠⲆᐃ | 3006) & ~(ⲆᐃⵠⲆⵠⲆᐃ & 3006);
		const ⵠⵠⵠⵠΔᐃᐃ = ~(24460 & ΔᐃⲆΔᐃⲆΔ) & (ΔᐃⲆΔᐃⲆΔ | 24460);
		return ⵠⵠⵠⵠΔᐃᐃ
	}
	const ᐃΔᐃᐃⲆ = ⲆⵠΔᐃΔ;

	function ᐃΔᐃⵠΔⲆᐃ(ΔⲆⲆᐃⵠⵠᐃ, ⲆⲆⲆΔᐃᐃⵠ, ᐃⲆⲆᐃⲆᐃΔ, ⵠⵠᐃΔᐃᐃⵠ) {
		const ⵠⵠᐃⵠΔⲆⵠ = ~(33107 & ΔⲆⲆᐃⵠⵠᐃ) & (33107 | ΔⲆⲆᐃⵠⵠᐃ);
		const ΔᐃⲆᐃΔᐃⲆ = (24 << (ⲆⲆⲆΔᐃᐃⵠ >> 32 & 255)) + (32 << (ⲆⲆⲆΔᐃᐃⵠ >> 8 & ᐃΔⵠⲆΔ)) + (8 << (ⲆⲆⲆΔᐃᐃⵠ >> 16 & 255)) + (16 << (ⲆⲆⲆΔᐃᐃⵠ >> 24 & ⲆⲆΔΔⵠ));
		const ΔⲆⵠⵠⲆⲆⲆ = ~(ᐃⲆⲆᐃⲆᐃΔ & 32053) & (32053 | ᐃⲆⲆᐃⲆᐃΔ);
		const ᐃΔⲆΔᐃᐃⲆ = 12240 ^ ⵠⵠᐃΔᐃᐃⵠ;
		const ⵠⲆᐃⲆᐃᐃⵠ = ⵠⲆⵠᐃⲆᐃⵠ(ⵠⵠᐃⵠΔⲆⵠ, ΔᐃⲆᐃΔᐃⲆ, ΔⲆⵠⵠⲆⲆⲆ, ᐃΔⲆΔᐃᐃⲆ);
		const ΔᐃᐃⵠⵠⵠᐃⲆΔ = ⲆΔⵠΔⵠᐃⲆ(ⵠⵠᐃⵠΔⲆⵠ, ΔᐃⲆᐃΔᐃⲆ, ΔⲆⵠⵠⲆⲆⲆ, ᐃΔⲆΔᐃᐃⲆ);
		const ⲆᐃⲆⵠⲆⵠⲆ = ΔⲆᐃⵠⵠⲆᐃ(ⵠⵠᐃⵠΔⲆⵠ, ΔᐃⲆᐃΔᐃⲆ, ΔⲆⵠⵠⲆⲆⲆ, ᐃΔⲆΔᐃᐃⲆ, ⵠⵠᐃⵠΔⲆⵠ);
		const ΔⵠΔᐃᐃⵠΔ = ~(64131 & ⵠⲆᐃⲆᐃᐃⵠ) & 64131 | ~(64131 & ⵠⲆᐃⲆᐃᐃⵠ) & ⵠⲆᐃⲆᐃᐃⵠ;
		const ⲆΔᐃᐃΔΔⲆ = (2531011 + (44352 + (ΔⵠΔᐃᐃⵠΔ ^ ⲆᐃⲆⵠⲆⵠⲆ)) * 214013) % 4294967296;
		return ⲆΔᐃᐃΔΔⲆ
	}
	const ᐃᐃᐃ = ΔΔᐃ;
	const ⵠΔⵠⵠᐃ = ⵠⲆⵠΔⵠ;
	const ⵠⲆⲆᐃᐃ = ΔΔΔⲆ;

	function ΔᐃᐃⲆΔΔΔ(ΔⵠⵠΔΔ, ⲆΔΔᐃⵠⵠᐃ, ᐃⵠᐃΔⵠΔᐃ, ⲆΔⵠᐃⲆᐃᐃ) {
		const ᐃΔΔⲆⵠᐃᐃ = (ΔⵠⵠΔΔ | 15432) & ~(ΔⵠⵠΔΔ & 15432);
		const ⲆⵠⵠΔΔᐃⲆ = 12315 ^ ⲆΔΔᐃⵠⵠᐃ;
		const ⲆᐃᐃΔⲆⲆΔ = ᐃⵠᐃΔⵠΔᐃ ^ 38714;
		const ᐃⲆⵠⲆⵠⵠⵠ = 58084 ^ ⲆΔⵠᐃⲆᐃᐃ;
		const ᐃᐃΔⲆⲆΔⵠ = ⲆΔᐃⲆᐃᐃΔ(ᐃΔΔⲆⵠᐃᐃ, ⲆⵠⵠΔΔᐃⲆ, ⲆᐃᐃΔⲆⲆΔ, ᐃⲆⵠⲆⵠⵠⵠ, ᐃΔΔⲆⵠᐃᐃ, ⲆⵠⵠΔΔᐃⲆ);
		const ⵠΔΔΔᐃⲆⵠᐃⲆ = ⲆΔⵠΔⵠᐃⲆ(ⲆᐃᐃΔⲆⲆΔ, ᐃⲆⵠⲆⵠⵠⵠ, ᐃΔΔⲆⵠᐃᐃ, ⲆⵠⵠΔΔᐃⲆ);
		const ᐃⲆⵠΔᐃΔⵠ = ⲆⵠⵠⲆᐃΔᐃ(ⲆᐃᐃΔⲆⲆΔ, ᐃⲆⵠⲆⵠⵠⵠ, ᐃΔΔⲆⵠᐃᐃ, ⲆⵠⵠΔΔᐃⲆ, ⲆᐃᐃΔⲆⲆΔ, ᐃⲆⵠⲆⵠⵠⵠ);
		const ΔⲆᐃⲆΔΔⲆ = ~(41134 & ᐃᐃΔⲆⲆΔⵠ) & ᐃᐃΔⲆⲆΔⵠ | ~(ᐃᐃΔⲆⲆΔⵠ & 41134) & 41134;
		const ΔⵠⵠⵠΔⲆΔ = ((34681 + (ΔⲆᐃⲆΔΔⲆ ^ ᐃⲆⵠΔᐃΔⵠ)) * 214013 + 2531011) % 4294967296;
		return ΔⵠⵠⵠΔⲆΔ
	}

	function ⲆᐃΔΔΔⲆⵠ(ΔⲆΔⲆΔⲆⲆ, ⲆⲆᐃⵠΔⲆⵠ) {
		const ⵠΔⲆⵠΔΔΔ = ((ΔⲆΔⲆΔⲆⲆ + 49468) * 1103515245 + 12345) % 2147483648;
		const ᐃⵠΔⵠΔⵠⲆ = (214013 * (ⲆⲆᐃⵠΔⲆⵠ + 30513) + 2531011) % 4294967296;
		const ΔΔⵠᐃΔΔⲆ = ᐃᐃᐃᐃΔᐃⲆ(ⵠΔⲆⵠΔΔΔ, ᐃⵠΔⵠΔⵠⲆ, ⵠΔⲆⵠΔΔΔ);
		const ⵠᐃᐃⵠⵠⵠΔⲆᐃ = ΔᐃⲆⲆⵠᐃΔ(ᐃⵠΔⵠΔⵠⲆ, ⵠΔⲆⵠΔΔΔ, ᐃⵠΔⵠΔⵠⲆ, ⵠΔⲆⵠΔΔΔ, ᐃⵠΔⵠΔⵠⲆ);
		const ᐃΔᐃⲆⵠⲆⲆⲆᐃ = ⲆⲆΔⲆΔ(ⵠΔⲆⵠΔΔΔ, ᐃⵠΔⵠΔⵠⲆ, ⵠΔⲆⵠΔΔΔ, ᐃⵠΔⵠΔⵠⲆ);
		const ΔΔⵠⲆΔⵠⵠ = (17943 | ΔΔⵠᐃΔΔⲆ) & ~(ΔΔⵠᐃΔΔⲆ & 17943);
		const ΔᐃᐃΔⵠⲆΔ = 21791 ^ ΔΔⵠⲆΔⵠⵠ;
		return ΔᐃᐃΔⵠⲆΔ
	}

	function ⵠⲆⲆⲆΔᐃᐃ(ΔΔⵠⲆⲆᐃΔ, ⲆΔᐃΔⵠⵠⵠ, ᐃⵠᐃⲆΔⵠⲆ, ⵠⵠΔᐃⵠᐃΔ, ᐃⲆΔΔⵠΔⲆ) {
		const ᐃⲆⵠΔⵠⲆⵠ = ((9716 + ΔΔⵠⲆⲆᐃΔ) * 1664525 + 1013904223) % 4294967296;
		const ⲆᐃⵠΔΔᐃᐃ = ~(ⲆΔᐃΔⵠⵠⵠ & 7703) & ⲆΔᐃΔⵠⵠⵠ | ~(ⲆΔᐃΔⵠⵠⵠ & 7703) & 7703;
		const ᐃⲆⲆⵠΔΔⲆ = (ᐃⵠᐃⲆΔⵠⲆ | 31275) & ~(31275 & ᐃⵠᐃⲆΔⵠⲆ);
		const ⲆΔᐃΔⲆⵠⲆ = ~(25693 & ⵠⵠΔᐃⵠᐃΔ) & 25693 | ~(25693 & ⵠⵠΔᐃⵠᐃΔ) & ⵠⵠΔᐃⵠᐃΔ;
		const ΔΔᐃᐃⵠΔΔ = (8 << (ᐃⲆΔΔⵠΔⲆ >> 8 & 255)) + (32 << (ᐃⲆΔΔⵠΔⲆ >> 24 & 255)) + (24 << (ᐃⲆΔΔⵠΔⲆ >> ᐃΔᐃᐃⲆ & 255)) + (16 << (ᐃⲆΔΔⵠΔⲆ >> 32 & ᐃΔⵠⲆΔ));
		const ΔᐃⵠΔⲆⵠΔ = ⲆⵠⵠⲆᐃΔᐃ(ᐃⲆⵠΔⵠⲆⵠ, ⲆᐃⵠΔΔᐃᐃ, ᐃⲆⲆⵠΔΔⲆ, ⲆΔᐃΔⲆⵠⲆ, ΔΔᐃᐃⵠΔΔ, ᐃⲆⵠΔⵠⲆⵠ);
		const ⵠⲆⲆΔⵠᐃⵠ = ⲆⲆΔⲆΔ(ⲆᐃⵠΔΔᐃᐃ, ᐃⲆⲆⵠΔΔⲆ, ⲆΔᐃΔⲆⵠⲆ, ΔΔᐃᐃⵠΔΔ);
		const ⵠΔⵠΔⵠᐃⲆΔΔ = ᐃᐃⲆⲆⵠⲆⵠ(ᐃⲆⵠΔⵠⲆⵠ, ⲆᐃⵠΔΔᐃᐃ, ᐃⲆⲆⵠΔΔⲆ);
		const ⵠΔⵠΔⲆΔᐃ = (24 << ((ΔᐃⵠΔⲆⵠΔ ^ ⵠⲆⲆΔⵠᐃⵠ) >> 16 & 255)) + (8 << ((ΔᐃⵠΔⲆⵠΔ ^ ⵠⲆⲆΔⵠᐃⵠ) >> 8 & 255)) + (32 << ((ΔᐃⵠΔⲆⵠΔ ^ ⵠⲆⲆΔⵠᐃⵠ) >> 24 & 255)) + (16 << ((ΔᐃⵠΔⲆⵠΔ ^ ⵠⲆⲆΔⵠᐃⵠ) >> 32 & ΔⲆΔⲆⲆ));
		const ᐃᐃⵠᐃⵠΔⵠ = ⵠΔⵠΔⲆΔᐃ ^ 31710;
		return ᐃᐃⵠᐃⵠΔⵠ
	}

	function ⵠΔΔᐃⲆⲆⲆ(ᐃΔΔⵠΔⵠⵠ, ΔⵠⲆΔᐃᐃⲆ, ᐃⵠΔⲆⵠⵠⵠ, ΔΔᐃⲆᐃᐃⵠ, ⵠⵠΔᐃΔⵠᐃ, Δⵠⵠᐃⵠⵠⵠ) {
		const ᐃⵠⲆⵠᐃΔⵠ = ~(ᐃΔΔⵠΔⵠⵠ & 36133) & (ᐃΔΔⵠΔⵠⵠ | 36133);
		const ᐃΔᐃⵠᐃⵠΔ = (13670 | ΔⵠⲆΔᐃᐃⲆ) & ~(ΔⵠⲆΔᐃᐃⲆ & 13670);
		const ⲆΔΔᐃⵠⲆΔ = (31390 | ᐃⵠΔⲆⵠⵠⵠ) & ~(ᐃⵠΔⲆⵠⵠⵠ & 31390);
		const ΔΔⲆΔᐃΔⲆ = ΔΔᐃⲆᐃᐃⵠ ^ 64081;
		const ⵠⵠᐃⵠΔΔⲆ = 7550 ^ ⵠⵠΔᐃΔⵠᐃ;
		const Δⵠⵠⵠⵠⵠᐃ = (2147483587 + 2147483629 * (Δⵠⵠᐃⵠⵠⵠ + 63950)) % 2147483647;
		const ᐃᐃᐃⵠΔⲆⲆ = ⲆⵠΔΔⲆⵠᐃ(ᐃⵠⲆⵠᐃΔⵠ, ᐃΔᐃⵠᐃⵠΔ, ⲆΔΔᐃⵠⲆΔ, ΔΔⲆΔᐃΔⲆ, ⵠⵠᐃⵠΔΔⲆ);
		const ⵠΔᐃᐃⵠΔⵠ = ⲆΔⵠΔⵠᐃⲆ(Δⵠⵠⵠⵠⵠᐃ, ᐃⵠⲆⵠᐃΔⵠ, ᐃΔᐃⵠᐃⵠΔ, ⲆΔΔᐃⵠⲆΔ);
		const ⲆⵠᐃΔᐃⲆᐃ = ΔᐃⲆⲆⵠᐃΔ(ΔΔⲆΔᐃΔⲆ, ⵠⵠᐃⵠΔΔⲆ, Δⵠⵠⵠⵠⵠᐃ, ᐃⵠⲆⵠᐃΔⵠ, ᐃΔᐃⵠᐃⵠΔ);
		const ⲆᐃⵠⲆΔᐃⲆ = (2147483629 * (62552 + (ᐃᐃᐃⵠΔⲆⲆ ^ ⵠΔᐃᐃⵠΔⵠ)) + 2147483587) % 2147483647;
		const ⲆΔᐃⵠΔⲆᐃ = (12345 + 1103515245 * (36760 + (ⲆᐃⵠⲆΔᐃⲆ ^ ⲆⵠᐃΔᐃⲆᐃ))) % 2147483648;
		return ⲆΔᐃⵠΔⲆᐃ
	}

	function ⲆⵠⵠⲆᐃΔᐃ(ᐃΔᐃΔⵠΔⲆ, ΔᐃᐃⲆᐃⵠⲆ, ᐃⵠᐃⵠᐃⵠΔ, ᐃⲆᐃⵠⲆΔⲆ, ⲆⵠᐃⵠΔΔⵠ, ᐃΔᐃⵠⲆᐃΔ) {
		const ΔᐃΔᐃⲆⲆⲆ = ᐃΔᐃΔⵠΔⲆ ^ 23409;
		const ⵠⵠᐃΔⲆΔΔ = ΔᐃᐃⲆᐃⵠⲆ ^ 26380;
		const ⲆᐃⲆΔᐃΔᐃ = ᐃⵠᐃⵠᐃⵠΔ ^ 53590;
		const ⵠⵠΔΔᐃⲆΔ = 36633 ^ ᐃⲆᐃⵠⲆΔⲆ;
		const ⵠᐃⵠⵠΔᐃⲆ = ((ⲆⵠᐃⵠΔΔⵠ + 33017) * 1103515245 + 12345) % 2147483648;
		const ⵠᐃⵠⵠᐃⲆΔ = 42490 ^ ᐃΔᐃⵠⲆᐃΔ;
		const ΔⵠΔᐃⲆᐃᐃ = ⲆⲆΔⲆΔ(ΔᐃΔᐃⲆⲆⲆ, ⵠⵠᐃΔⲆΔΔ, ⲆᐃⲆΔᐃΔᐃ, ⵠⵠΔΔᐃⲆΔ);
		const ⵠⲆᐃΔⵠΔⵠ = ⲆⲆΔⲆΔ(ⵠᐃⵠⵠΔᐃⲆ, ⵠᐃⵠⵠᐃⲆΔ, ΔᐃΔᐃⲆⲆⲆ, ⵠⵠᐃΔⲆΔΔ);
		const ⲆᐃᐃⲆΔᐃⵠ = ((19056 + (ΔⵠΔᐃⲆᐃᐃ ^ ⵠⲆᐃΔⵠΔⵠ)) * 22695477 + 1) % 4294967296;
		return ⲆᐃᐃⲆΔᐃⵠ
	}

	function ᐃᐃᐃᐃΔᐃⲆ(ⵠᐃⲆᐃᐃⲆⵠ, ⵠⵠᐃΔⲆΔⲆ, ᐃⲆⲆⲆᐃΔᐃ) {
		const ⲆᐃᐃⲆⵠⵠΔ = (1664525 * (5294 + ⵠᐃⲆᐃᐃⲆⵠ) + 1013904223) % 4294967296;
		const ⲆⵠᐃΔⲆⲆᐃ = (ⵠⵠᐃΔⲆΔⲆ | 55665) & ~(55665 & ⵠⵠᐃΔⲆΔⲆ);
		const ⲆΔⵠΔᐃᐃⲆ = (ᐃⲆⲆⲆᐃΔᐃ + 54633) % 65404;
		const ⲆᐃΔⵠᐃⵠᐃ = ⵠᐃⲆᐃⲆΔⲆ(ⲆᐃᐃⲆⵠⵠΔ, ⲆⵠᐃΔⲆⲆᐃ, ⲆΔⵠΔᐃᐃⲆ, ⲆᐃᐃⲆⵠⵠΔ, ⲆⵠᐃΔⲆⲆᐃ);
		const ⲆᐃⵠⲆΔⲆⲆⵠⵠ = ⵠⲆⵠΔⲆⵠΔ(ⲆΔⵠΔᐃᐃⲆ, ⲆᐃᐃⲆⵠⵠΔ, ⲆⵠᐃΔⲆⲆᐃ, ⲆΔⵠΔᐃᐃⲆ, ⲆᐃᐃⲆⵠⵠΔ, ⲆⵠᐃΔⲆⲆᐃ);
		const ΔⵠⲆⲆΔΔᐃΔᐃ = ⲆΔⵠΔⵠᐃⲆ(ⲆΔⵠΔᐃᐃⲆ, ⲆᐃᐃⲆⵠⵠΔ, ⲆⵠᐃΔⲆⲆᐃ, ⲆΔⵠΔᐃᐃⲆ);
		const ⲆⲆⵠᐃΔΔᐃ = ~(43875 & ⲆᐃΔⵠᐃⵠᐃ) & (43875 | ⲆᐃΔⵠᐃⵠᐃ);
		const ⲆᐃⵠⲆⲆⵠΔ = ⲆⲆⵠᐃΔΔᐃ ^ 15116;
		return ⲆᐃⵠⲆⲆⵠΔ
	}

	function ΔⲆΔⵠⲆⵠⵠ(ΔᐃΔᐃᐃᐃⵠ, ⵠᐃⵠⵠⲆⵠⲆ, ⵠΔΔΔᐃΔⲆ, ⲆⲆⲆⲆⲆⲆᐃ) {
		const ⲆⲆⵠⲆⲆᐃᐃ = (ΔᐃΔᐃᐃᐃⵠ + 34282) % 65336;
		const ⵠⵠΔᐃᐃⵠⵠ = ~(ⵠᐃⵠⵠⲆⵠⲆ & 45181) & 45181 | ~(45181 & ⵠᐃⵠⵠⲆⵠⲆ) & ⵠᐃⵠⵠⲆⵠⲆ;
		const ᐃᐃᐃⵠᐃⲆΔ = (16 << (ⵠΔΔΔᐃΔⲆ >> 8 & 255)) + (32 << (ⵠΔΔΔᐃΔⲆ >> 24 & 255)) + (8 << (ⵠΔΔΔᐃΔⲆ >> 32 & 255)) + (24 << (ⵠΔΔΔᐃΔⲆ >> 16 & 255));
		const ᐃⵠᐃΔᐃⵠⵠ = ~(ⲆⲆⲆⲆⲆⲆᐃ & 25475) & 25475 | ~(25475 & ⲆⲆⲆⲆⲆⲆᐃ) & ⲆⲆⲆⲆⲆⲆᐃ;
		const ⵠᐃᐃΔΔⵠᐃ = ᐃΔΔΔΔᐃⵠ(ⲆⲆⵠⲆⲆᐃᐃ, ⵠⵠΔᐃᐃⵠⵠ);
		const ΔᐃⵠΔⵠΔⲆ = ᐃᐃᐃⵠΔⲆⵠ(ᐃᐃᐃⵠᐃⲆΔ, ᐃⵠᐃΔᐃⵠⵠ, ⲆⲆⵠⲆⲆᐃᐃ, ⵠⵠΔᐃᐃⵠⵠ, ᐃᐃᐃⵠᐃⲆΔ);
		const ΔⲆⲆⵠΔⲆⲆᐃΔ = Ⲇⵠᐃⵠⵠᐃᐃ(ᐃⵠᐃΔᐃⵠⵠ, ⲆⲆⵠⲆⲆᐃᐃ);
		const ⵠⲆᐃⲆᐃⲆⲆ = (58498 + (ⵠᐃᐃΔΔⵠᐃ ^ ΔᐃⵠΔⵠΔⲆ)) % 65531;
		const ΔΔⲆⲆΔⵠⲆ = ~(ⵠⲆᐃⲆᐃⲆⲆ & 37009) & 37009 | ~(37009 & ⵠⲆᐃⲆᐃⲆⲆ) & ⵠⲆᐃⲆᐃⲆⲆ;
		return ΔΔⲆⲆΔⵠⲆ
	}
	const ⵠⵠⵠ = ΔΔᐃ;
	const ᐃⵠΔⵠⵠᐃⲆⵠΔ = ⵠᐃᐃⲆᐃⵠⲆ;

	function ᐃᐃΔΔⵠᐃᐃ(ⲆᐃΔᐃⵠⲆⵠ, ᐃΔΔΔᐃΔⵠ, ΔΔΔΔΔⵠᐃ, ⵠⵠⵠⵠᐃᐃΔ, ΔΔⵠΔⵠ, ᐃⵠⵠΔΔᐃⲆ) {
		const ⲆᐃΔⲆⵠⲆⲆ = 30142 ^ ⲆᐃΔᐃⵠⲆⵠ;
		const ΔⵠⲆᐃⲆΔΔ = (ᐃΔΔΔᐃΔⵠ + 63025) % 65493;
		const ᐃⵠΔΔⵠᐃⲆ = ΔΔΔΔΔⵠᐃ ^ 30777;
		const ⵠᐃΔⵠⲆᐃⵠ = ((45939 + ⵠⵠⵠⵠᐃᐃΔ) * 22695477 + 1) % 4294967296;
		const ⲆⵠⵠΔΔᐃᐃ = (8 << (ΔΔⵠΔⵠ >> 16 & 255)) + (32 << (ΔΔⵠΔⵠ >> 24 & 255)) + (24 << (ΔΔⵠΔⵠ >> 32 & ᐃΔⵠⲆΔ)) + (16 << (ΔΔⵠΔⵠ >> ΔⵠΔⵠΔ & 255));
		const ΔΔⲆⲆᐃΔᐃ = (ᐃⵠⵠΔΔᐃⲆ | 45652) & ~(ᐃⵠⵠΔΔᐃⲆ & 45652);
		const ⵠΔΔΔⵠⲆΔ = ΔⲆᐃⵠⵠⲆᐃ(ⲆᐃΔⲆⵠⲆⲆ, ΔⵠⲆᐃⲆΔΔ, ᐃⵠΔΔⵠᐃⲆ, ⵠᐃΔⵠⲆᐃⵠ, ⲆⵠⵠΔΔᐃᐃ);
		const ⵠⵠⵠᐃᐃΔᐃⲆᐃ = ⵠᐃⲆᐃⲆΔⲆ(ΔΔⲆⲆᐃΔᐃ, ⲆᐃΔⲆⵠⲆⲆ, ΔⵠⲆᐃⲆΔΔ, ᐃⵠΔΔⵠᐃⲆ, ⵠᐃΔⵠⲆᐃⵠ);
		const ΔᐃⵠⲆⲆᐃᐃⵠⵠ = ⲆⲆᐃᐃⵠⲆⲆ(ⲆⵠⵠΔΔᐃᐃ, ΔΔⲆⲆᐃΔᐃ, ⲆᐃΔⲆⵠⲆⲆ, ΔⵠⲆᐃⲆΔΔ, ᐃⵠΔΔⵠᐃⲆ, ⵠᐃΔⵠⲆᐃⵠ);
		const ⵠΔᐃᐃⵠⲆⲆ = 46918 ^ ⵠΔΔΔⵠⲆΔ;
		const ⵠⵠⲆΔᐃᐃᐃ = ⵠΔᐃᐃⵠⲆⲆ ^ 24022;
		return ⵠⵠⲆΔᐃᐃᐃ
	}

	function ⲆⲆᐃᐃⵠⲆⲆ(ⵠⵠⲆΔⵠⲆΔ, ΔΔⵠᐃⵠΔⵠ, ⵠⲆΔΔᐃ, ⵠΔΔⵠΔᐃⵠ, ΔⵠⲆⵠⵠⲆⵠ, ⲆᐃⵠᐃΔⵠᐃ) {
		const ΔⲆᐃⲆᐃⲆⵠ = (24 << (ⵠⵠⲆΔⵠⲆΔ >> 24 & 255)) + (32 << (ⵠⵠⲆΔⵠⲆΔ >> 16 & 255)) + (16 << (ⵠⵠⲆΔⵠⲆΔ >> 8 & 255)) + (Ⲇᐃⵠᐃᐃ << (ⵠⵠⲆΔⵠⲆΔ >> 32 & 255));
		const ΔΔΔⲆᐃΔΔ = (41551 | ΔΔⵠᐃⵠΔⵠ) & ~(ΔΔⵠᐃⵠΔⵠ & 41551);
		const ΔᐃᐃⵠΔⲆⵠ = (24 << (ⵠⲆΔΔᐃ >> 24 & ⲆⲆΔΔⵠ)) + (16 << (ⵠⲆΔΔᐃ >> 32 & 255)) + (8 << (ⵠⲆΔΔᐃ >> 16 & ᐃΔⵠⲆΔ)) + (32 << (ⵠⲆΔΔᐃ >> 8 & ᐃⵠΔΔⵠ));
		const ⵠΔΔᐃⲆΔⵠ = ~(32641 & ⵠΔΔⵠΔᐃⵠ) & (32641 | ⵠΔΔⵠΔᐃⵠ);
		const ΔⵠⲆᐃΔᐃⲆ = ((ΔⵠⲆⵠⵠⲆⵠ + 35582) * 214013 + 2531011) % 4294967296;
		const ⲆⵠΔᐃᐃⲆⲆ = ~(1090 & ⲆᐃⵠᐃΔⵠᐃ) & (ⲆᐃⵠᐃΔⵠᐃ | 1090);
		const ⵠᐃⲆⲆⵠⲆⵠ = ⲆΔⲆⲆⵠΔΔ(ΔⲆᐃⲆᐃⲆⵠ, ΔΔΔⲆᐃΔΔ, ΔᐃᐃⵠΔⲆⵠ, ⵠΔΔᐃⲆΔⵠ, ΔⵠⲆᐃΔᐃⲆ, ⲆⵠΔᐃᐃⲆⲆ);
		const ⵠⲆΔⲆⲆΔⲆᐃⲆ = ⲆΔⲆⲆⲆᐃΔ(ΔⲆᐃⲆᐃⲆⵠ, ΔΔΔⲆᐃΔΔ, ΔᐃᐃⵠΔⲆⵠ, ⵠΔΔᐃⲆΔⵠ, ΔⵠⲆᐃΔᐃⲆ);
		const ⲆⵠⲆⵠⵠᐃᐃᐃΔ = ⲆⲆΔⲆΔ(ⲆⵠΔᐃᐃⲆⲆ, ΔⲆᐃⲆᐃⲆⵠ, ΔΔΔⲆᐃΔΔ, ΔᐃᐃⵠΔⲆⵠ);
		const ΔΔΔΔᐃⲆⲆ = ~(ⵠᐃⲆⲆⵠⲆⵠ & 8077) & 8077 | ~(8077 & ⵠᐃⲆⲆⵠⲆⵠ) & ⵠᐃⲆⲆⵠⲆⵠ;
		const ⵠΔᐃⲆΔᐃᐃ = ~(3708 & ΔΔΔΔᐃⲆⲆ) & (ΔΔΔΔᐃⲆⲆ | 3708);
		return ⵠΔᐃⲆΔᐃᐃ
	}

	function ΔΔⵠⵠΔᐃⵠ(ⲆΔΔⵠΔΔⵠ, ⵠⲆⲆⲆᐃΔⲆ) {
		const ᐃⲆⵠⲆⵠΔⲆ = (2531011 + (ⲆΔΔⵠΔΔⵠ + 62874) * 214013) % 4294967296;
		const ΔΔⵠΔⵠΔⲆ = (24 << (ⵠⲆⲆⲆᐃΔⲆ >> 24 & 255)) + (16 << (ⵠⲆⲆⲆᐃΔⲆ >> 32 & 255)) + (8 << (ⵠⲆⲆⲆᐃΔⲆ >> 8 & 255)) + (32 << (ⵠⲆⲆⲆᐃΔⲆ >> ᐃΔⲆⵠΔ & 255));
		const ᐃΔⵠΔⵠⵠᐃ = ⲆⵠⵠⲆᐃΔᐃ(ᐃⲆⵠⲆⵠΔⲆ, ΔΔⵠΔⵠΔⲆ, ᐃⲆⵠⲆⵠΔⲆ, ΔΔⵠΔⵠΔⲆ, ᐃⲆⵠⲆⵠΔⲆ, ΔΔⵠΔⵠΔⲆ);
		const ΔⲆΔΔⵠⵠᐃ = ⲆⵠⵠⲆᐃΔᐃ(ᐃⲆⵠⲆⵠΔⲆ, ΔΔⵠΔⵠΔⲆ, ᐃⲆⵠⲆⵠΔⲆ, ΔΔⵠΔⵠΔⲆ, ᐃⲆⵠⲆⵠΔⲆ, ΔΔⵠΔⵠΔⲆ);
		const ⵠⲆⲆⲆⵠⵠⵠⵠⲆ = ⲆⲆΔⲆΔ(ᐃⲆⵠⲆⵠΔⲆ, ΔΔⵠΔⵠΔⲆ, ᐃⲆⵠⲆⵠΔⲆ, ΔΔⵠΔⵠΔⲆ);
		const ᐃᐃᐃΔⵠⵠᐃ = (16 << ((ᐃΔⵠΔⵠⵠᐃ ^ ΔⲆΔΔⵠⵠᐃ) >> 32 & 255)) + (8 << ((ᐃΔⵠΔⵠⵠᐃ ^ ΔⲆΔΔⵠⵠᐃ) >> 24 & 255)) + (24 << ((ᐃΔⵠΔⵠⵠᐃ ^ ΔⲆΔΔⵠⵠᐃ) >> 16 & 255)) + (32 << ((ᐃΔⵠΔⵠⵠᐃ ^ ΔⲆΔΔⵠⵠᐃ) >> 8 & ᐃⵠΔΔⵠ));
		const ⵠⲆⵠⲆᐃᐃᐃ = ~(ᐃᐃᐃΔⵠⵠᐃ & 55949) & 55949 | ~(55949 & ᐃᐃᐃΔⵠⵠᐃ) & ᐃᐃᐃΔⵠⵠᐃ;
		return ⵠⲆⵠⲆᐃᐃᐃ
	}
	const ΔⵠΔⲆΔΔⲆ = ⲆⲆΔΔⵠ;
	const ᐃⲆΔ = Δⵠᐃ;

	function ⲆΔⵠᐃⲆΔⵠ(ΔⲆⵠⵠᐃ) {
		return ΔΔⵠⲆΔᐃΔ(ΔⲆⵠⵠᐃ, 8260, 46947, 8004, 37330, 5330)
	}

	function ⵠⲆⵠΔⲆⵠΔ(Ⲇⵠⵠⵠᐃᐃⵠ, ⵠᐃᐃⲆⲆᐃᐃ, ΔⵠΔⵠⵠᐃᐃ, ⲆⲆᐃΔⲆΔⲆ, ⵠᐃΔᐃᐃᐃᐃ, ᐃⵠᐃᐃⲆⲆⲆ) {
		const ⲆᐃⲆⵠⵠΔⲆ = (2531011 + 214013 * (Ⲇⵠⵠⵠᐃᐃⵠ + 16955)) % 4294967296;
		const ⵠⵠⵠⲆⵠᐃⲆ = ((9436 + ⵠᐃᐃⲆⲆᐃᐃ) * 1103515245 + 12345) % 2147483648;
		const ᐃᐃⵠᐃᐃΔᐃ = (14774 | ΔⵠΔⵠⵠᐃᐃ) & ~(14774 & ΔⵠΔⵠⵠᐃᐃ);
		const ᐃΔⵠⵠⵠⲆΔ = (48802 | ⲆⲆᐃΔⲆΔⲆ) & ~(ⲆⲆᐃΔⲆΔⲆ & 48802);
		const ΔⵠΔᐃΔⲆⵠ = ~(ⵠᐃΔᐃᐃᐃᐃ & 24998) & (ⵠᐃΔᐃᐃᐃᐃ | 24998);
		const ΔᐃⲆΔⵠⲆᐃ = (8 << (ᐃⵠᐃᐃⲆⲆⲆ >> 8 & 255)) + (16 << (ᐃⵠᐃᐃⲆⲆⲆ >> 16 & 255)) + (32 << (ᐃⵠᐃᐃⲆⲆⲆ >> 32 & 255)) + (24 << (ᐃⵠᐃᐃⲆⲆⲆ >> 24 & 255));
		const ⲆᐃⵠⲆⲆΔᐃ = ᐃΔᐃⵠΔⲆᐃ(ⲆᐃⲆⵠⵠΔⲆ, ⵠⵠⵠⲆⵠᐃⲆ, ᐃᐃⵠᐃᐃΔᐃ, ᐃΔⵠⵠⵠⲆΔ);
		const Δⵠᐃⵠᐃⵠⵠ = ᐃᐃᐃⵠΔⲆⵠ(ΔⵠΔᐃΔⲆⵠ, ΔᐃⲆΔⵠⲆᐃ, ⲆᐃⲆⵠⵠΔⲆ, ⵠⵠⵠⲆⵠᐃⲆ, ᐃᐃⵠᐃᐃΔᐃ);
		const ΔᐃΔⵠⲆΔᐃ = ᐃΔᐃⵠΔⲆᐃ(ᐃΔⵠⵠⵠⲆΔ, ΔⵠΔᐃΔⲆⵠ, ΔᐃⲆΔⵠⲆᐃ, ⲆᐃⲆⵠⵠΔⲆ);
		const ΔᐃᐃⵠⲆᐃⵠ = (24 << ((ⲆᐃⵠⲆⲆΔᐃ ^ Δⵠᐃⵠᐃⵠⵠ) >> 24 & 255)) + (8 << ((ⲆᐃⵠⲆⲆΔᐃ ^ Δⵠᐃⵠᐃⵠⵠ) >> 32 & 255)) + (16 << ((ⲆᐃⵠⲆⲆΔᐃ ^ Δⵠᐃⵠᐃⵠⵠ) >> 8 & 255)) + (32 << ((ⲆᐃⵠⲆⲆΔᐃ ^ Δⵠᐃⵠᐃⵠⵠ) >> 16 & 255));
		const ⲆⵠⵠΔⲆⲆⲆ = (((ΔᐃᐃⵠⲆᐃⵠ ^ ΔᐃΔⵠⲆΔᐃ) + 35404) * 214013 + 2531011) % 4294967296;
		return ⲆⵠⵠΔⲆⲆⲆ
	}
	const ⲆᐃⲆⵠᐃ = ᐃᐃⲆΔⵠ;
	const ⲆᐃΔΔⲆ = ᐃΔᐃⵠⲆ;
	const ⵠⵠⵠⵠⵠ = ⲆⵠⲆΔᐃ;

	function ⲆΔᐃΔⲆΔΔ(ᐃᐃⲆΔΔᐃᐃ, ᐃΔⵠⲆΔᐃⲆ, ⲆΔⲆᐃΔⲆⵠ, ΔᐃᐃΔⲆⲆⵠ, ⲆⲆⵠᐃᐃⲆⵠ) {
		const ⵠⲆⲆᐃⲆΔⲆ = 64570 ^ ᐃᐃⲆΔΔᐃᐃ;
		const ΔΔⲆᐃᐃⲆᐃ = (2531011 + (ᐃΔⵠⲆΔᐃⲆ + 41768) * 214013) % 4294967296;
		const ΔⵠΔΔᐃⲆᐃ = (1013904223 + (ⲆΔⲆᐃΔⲆⵠ + 43923) * 1664525) % 4294967296;
		const ᐃⵠΔΔΔΔⲆ = (16 << (ΔᐃᐃΔⲆⲆⵠ >> 32 & 255)) + (ΔⵠΔⵠΔ << (ΔᐃᐃΔⲆⲆⵠ >> 24 & 255)) + (32 << (ΔᐃᐃΔⲆⲆⵠ >> 16 & 255)) + (24 << (ΔᐃᐃΔⲆⲆⵠ >> 8 & 255));
		const ⲆⲆᐃΔΔΔΔ = (ⲆⲆⵠᐃᐃⲆⵠ | 21896) & ~(ⲆⲆⵠᐃᐃⲆⵠ & 21896);
		const ᐃⵠΔΔⵠⲆⲆ = ⲆᐃΔΔΔⲆⵠ(ⵠⲆⲆᐃⲆΔⲆ, ΔΔⲆᐃᐃⲆᐃ);
		const ⵠΔⵠᐃΔⲆⵠⲆᐃ = ΔᐃᐃⲆΔΔΔ(ΔⵠΔΔᐃⲆᐃ, ᐃⵠΔΔΔΔⲆ, ⲆⲆᐃΔΔΔΔ, ⵠⲆⲆᐃⲆΔⲆ);
		const ⲆᐃᐃᐃᐃⵠΔ = ⵠⲆΔⲆᐃⲆⲆ(ΔΔⲆᐃᐃⲆᐃ, ΔⵠΔΔᐃⲆᐃ, ᐃⵠΔΔΔΔⲆ, ⲆⲆᐃΔΔΔΔ, ⵠⲆⲆᐃⲆΔⲆ);
		const ΔⲆΔⲆΔⲆᐃ = ~(52206 & ᐃⵠΔΔⵠⲆⲆ) & (ᐃⵠΔΔⵠⲆⲆ | 52206);
		const ⵠⵠᐃⵠΔⲆᐃ = (12345 + (7491 + (ΔⲆΔⲆΔⲆᐃ ^ ⲆᐃᐃᐃᐃⵠΔ)) * 1103515245) % 2147483648;
		return ⵠⵠᐃⵠΔⲆᐃ
	}

	function ΔᐃⲆⲆⵠᐃΔ(ᐃⲆΔⲆΔⵠⲆ, ΔΔΔΔⵠⲆⵠ, ⲆᐃᐃⲆΔΔᐃ, ⲆⵠᐃⲆⵠΔⵠ, ᐃⵠⵠⲆⲆΔⵠ) {
		const ⵠⲆⲆΔⵠᐃⲆ = (2147483587 + (ᐃⲆΔⲆΔⵠⲆ + 64762) * 2147483629) % 2147483647;
		const ⲆΔⲆⵠⲆΔⲆ = ((18197 + ΔΔΔΔⵠⲆⵠ) * 214013 + 2531011) % 4294967296;
		const ΔⲆᐃᐃᐃᐃⲆ = (2531011 + (22845 + ⲆᐃᐃⲆΔΔᐃ) * 214013) % 4294967296;
		const ΔᐃᐃⲆⲆᐃⲆ = (32 << (ⲆⵠᐃⲆⵠΔⵠ >> 16 & 255)) + (ΔᐃᐃΔΔ << (ⲆⵠᐃⲆⵠΔⵠ >> 8 & 255)) + (8 << (ⲆⵠᐃⲆⵠΔⵠ >> 32 & ΔⲆΔⲆⲆ)) + (24 << (ⲆⵠᐃⲆⵠΔⵠ >> 24 & ⲆᐃΔⵠⵠᐃᐃ));
		const ΔⵠⵠΔⵠⵠⵠ = ~(ᐃⵠⵠⲆⲆΔⵠ & 11999) & ᐃⵠⵠⲆⲆΔⵠ | ~(ᐃⵠⵠⲆⲆΔⵠ & 11999) & 11999;
		const ᐃⲆΔᐃⲆⵠⲆ = ⲆⵠⵠⲆᐃΔᐃ(ⵠⲆⲆΔⵠᐃⲆ, ⲆΔⲆⵠⲆΔⲆ, ΔⲆᐃᐃᐃᐃⲆ, ΔᐃᐃⲆⲆᐃⲆ, ΔⵠⵠΔⵠⵠⵠ, ⵠⲆⲆΔⵠᐃⲆ);
		const ⵠⲆⲆᐃⲆΔⵠ = ⲆⲆᐃᐃⵠⲆⲆ(ⲆΔⲆⵠⲆΔⲆ, ΔⲆᐃᐃᐃᐃⲆ, ΔᐃᐃⲆⲆᐃⲆ, ΔⵠⵠΔⵠⵠⵠ, ⵠⲆⲆΔⵠᐃⲆ, ⲆΔⲆⵠⲆΔⲆ);
		const ΔⵠΔΔⲆᐃᐃⵠΔ = ⲆⲆΔⲆΔ(ΔⲆᐃᐃᐃᐃⲆ, ΔᐃᐃⲆⲆᐃⲆ, ΔⵠⵠΔⵠⵠⵠ, ⵠⲆⲆΔⵠᐃⲆ);
		const ⵠΔⲆᐃΔⲆΔ = (8 << ((ᐃⲆΔᐃⲆⵠⲆ ^ ⵠⲆⲆᐃⲆΔⵠ) >> 24 & 255)) + (16 << ((ᐃⲆΔᐃⲆⵠⲆ ^ ⵠⲆⲆᐃⲆΔⵠ) >> 16 & ⵠᐃⵠᐃⵠ)) + (24 << ((ᐃⲆΔᐃⲆⵠⲆ ^ ⵠⲆⲆᐃⲆΔⵠ) >> 8 & 255)) + (32 << ((ᐃⲆΔᐃⲆⵠⲆ ^ ⵠⲆⲆᐃⲆΔⵠ) >> 32 & 255));
		const ⲆⲆᐃΔΔⵠΔ = ⵠΔⲆᐃΔⲆΔ ^ 35444;
		return ⲆⲆᐃΔΔⵠΔ
	}
	const ΔΔⵠⲆⲆ = Δᐃᐃⵠᐃ;
	const ᐃᐃⲆⵠⲆᐃⵠ = ⵠᐃⵠΔⲆⵠⵠ;

	function ⲆΔⵠΔⵠᐃⲆ(ⵠᐃⵠⲆᐃΔⲆ, ⵠᐃⲆᐃΔⲆⲆ, Ⲇⵠⵠⵠⵠᐃⵠ, ⲆΔⵠᐃΔⲆⵠ) {
		const ⵠᐃᐃⲆⵠⵠⲆ = (2147483587 + (37418 + ⵠᐃⵠⲆᐃΔⲆ) * 2147483629) % 2147483647;
		const ⵠⵠⲆⲆΔⵠΔ = ⵠᐃⲆᐃΔⲆⲆ ^ 57623;
		const ⲆᐃᐃᐃΔⵠᐃ = ~(Ⲇⵠⵠⵠⵠᐃⵠ & 40280) & Ⲇⵠⵠⵠⵠᐃⵠ | ~(Ⲇⵠⵠⵠⵠᐃⵠ & 40280) & 40280;
		const ⲆⲆⲆᐃΔᐃᐃ = ~(ⲆΔⵠᐃΔⲆⵠ & 24601) & ⲆΔⵠᐃΔⲆⵠ | ~(ⲆΔⵠᐃΔⲆⵠ & 24601) & 24601;
		const ⲆΔᐃⲆⲆⲆᐃ = ΔΔᐃᐃᐃⵠⲆ(ⵠᐃᐃⲆⵠⵠⲆ, ⵠⵠⲆⲆΔⵠΔ);
		const ΔⵠⲆΔᐃⲆΔᐃⲆ = ΔΔᐃᐃᐃⵠⲆ(ⲆᐃᐃᐃΔⵠᐃ, ⲆⲆⲆᐃΔᐃᐃ);
		const ΔΔᐃΔΔᐃⲆⲆⲆ = ⵠᐃΔⲆΔⲆⵠ(ⵠᐃᐃⲆⵠⵠⲆ, ⵠⵠⲆⲆΔⵠΔ, ⲆᐃᐃᐃΔⵠᐃ, ⲆⲆⲆᐃΔᐃᐃ, ⵠᐃᐃⲆⵠⵠⲆ);
		const ⲆᐃⵠᐃᐃΔⲆ = ~(43902 & ⲆΔᐃⲆⲆⲆᐃ) & 43902 | ~(43902 & ⲆΔᐃⲆⲆⲆᐃ) & ⲆΔᐃⲆⲆⲆᐃ;
		const ⵠΔⵠΔᐃᐃᐃ = (8862 | ⲆᐃⵠᐃᐃΔⲆ) & ~(8862 & ⲆᐃⵠᐃᐃΔⲆ);
		return ⵠΔⵠΔᐃᐃᐃ
	}
	const ⵠᐃΔΔ = ⵠⲆΔⵠ;
	const ⵠᐃᐃᐃᐃⵠΔ = ΔⵠⵠⲆΔᐃⵠ;
	const ⵠⲆ = 4483750;

	function ᐃⲆ(ⲆⲆ) {
		return ⵠⵠⲆΔᐃᐃᐃⲆΔ.String.fromCharCode(ⲆⲆ)
	}

	function ⵠΔ(ⵠⵠΔ) {
		return ⵠⵠΔ.map(ᐃⲆ).join("")
	}
	const ᐃΔᐃ = function() {
		const ⵠⲆⵠ = ⵠΔ([11616, 11398]);
		const ᐃⲆᐃ = {
			"ΔᐃⵠᐃⲆⲆΔ": 9542514,
			"ⵠᐃΔ": 14154949,
			"ⵠⲆ": 4559927,
			"ⲆⵠΔᐃᐃ": 3156638
		};
		if (ᐃⲆᐃ[ⵠⲆⵠ] !== ᐃⲆᐃ.ⵠⲆ) {
			const ⵠⲆ = function() {
				for (let ᐃⲆ = 0; ᐃⲆ < 5; ᐃⲆ++) ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("click", (function() {
					ⵠⲆ()
				}))
			};
			ⵠⲆ()
		}
	};
	ᐃΔᐃ();

	function ⵠⲆⵠᐃⲆᐃⵠ(ⲆΔᐃⵠΔⲆⵠ, ΔⲆΔᐃⲆⵠΔ, ⵠΔΔⵠᐃⲆⲆ, ᐃⵠᐃⵠⲆⲆΔ) {
		const ΔᐃᐃⲆⵠⵠⵠ = (32 << (ⲆΔᐃⵠΔⲆⵠ >> 32 & 255)) + (16 << (ⲆΔᐃⵠΔⲆⵠ >> 16 & 255)) + (24 << (ⲆΔᐃⵠΔⲆⵠ >> 24 & 255)) + (ⵠᐃⵠΔⲆ << (ⲆΔᐃⵠΔⲆⵠ >> 8 & 255));
		const ΔᐃⲆΔⵠⵠⵠ = (1 + 22695477 * (50595 + ΔⲆΔᐃⲆⵠΔ)) % 4294967296;
		const ⲆᐃΔΔⵠⵠⵠ = ~(40066 & ⵠΔΔⵠᐃⲆⲆ) & ⵠΔΔⵠᐃⲆⲆ | ~(ⵠΔΔⵠᐃⲆⲆ & 40066) & 40066;
		const ᐃΔΔΔⵠᐃᐃ = 18768 ^ ᐃⵠᐃⵠⲆⲆΔ;
		const ⲆΔⲆΔⵠⵠΔ = ΔⲆᐃⵠⵠⲆᐃ(ΔᐃᐃⲆⵠⵠⵠ, ΔᐃⲆΔⵠⵠⵠ, ⲆᐃΔΔⵠⵠⵠ, ᐃΔΔΔⵠᐃᐃ, ΔᐃᐃⲆⵠⵠⵠ);
		const ᐃΔⵠᐃⵠⲆᐃ = ⲆⵠΔⲆⲆⲆᐃ(ΔᐃⲆΔⵠⵠⵠ, ⲆᐃΔΔⵠⵠⵠ, ᐃΔΔΔⵠᐃᐃ, ΔᐃᐃⲆⵠⵠⵠ, ΔᐃⲆΔⵠⵠⵠ);
		const ⲆΔⵠⲆⵠⵠⲆ = ΔΔⵠⵠΔᐃⵠ(ⲆᐃΔΔⵠⵠⵠ, ᐃΔΔΔⵠᐃᐃ);
		const ⵠΔⲆᐃⲆⲆᐃ = (2531011 + 214013 * ((ⲆΔⲆΔⵠⵠΔ ^ ᐃΔⵠᐃⵠⲆᐃ) + 35287)) % 4294967296;
		const ᐃⵠⲆΔⵠⵠⵠ = (1664525 * ((ⵠΔⲆᐃⲆⲆᐃ ^ ⲆΔⵠⲆⵠⵠⲆ) + 16767) + 1013904223) % 4294967296;
		return ᐃⵠⲆΔⵠⵠⵠ
	}
	const ᐃⲆᐃⵠⲆ = ᐃΔΔⲆΔ;

	function ΔⲆᐃⵠⵠⲆᐃ(ΔⲆᐃᐃⲆⵠⲆ, ΔΔᐃⲆⲆⲆⵠ, ᐃⲆⲆⵠⵠᐃᐃ, ⲆⵠⵠᐃΔΔΔ, ⲆⲆⲆᐃᐃⲆΔ) {
		const ᐃᐃⲆⲆⲆᐃⲆ = ΔⲆᐃᐃⲆⵠⲆ ^ 62008;
		const ΔΔⲆⵠΔⵠⵠ = (24 << (ΔΔᐃⲆⲆⲆⵠ >> 32 & 255)) + (ΔⵠΔⵠΔ << (ΔΔᐃⲆⲆⲆⵠ >> 16 & 255)) + (32 << (ΔΔᐃⲆⲆⲆⵠ >> Ⲇᐃⵠᐃᐃ & 255)) + (16 << (ΔΔᐃⲆⲆⲆⵠ >> 24 & 255));
		const ⲆΔΔⵠΔⲆᐃ = ((ᐃⲆⲆⵠⵠᐃᐃ + 46531) * 22695477 + 1) % 4294967296;
		const ᐃⵠΔΔⲆΔⲆ = ~(ⲆⵠⵠᐃΔΔΔ & 1884) & 1884 | ~(1884 & ⲆⵠⵠᐃΔΔΔ) & ⲆⵠⵠᐃΔΔΔ;
		const ΔᐃⵠᐃⵠΔⲆ = ~(ⲆⲆⲆᐃᐃⲆΔ & 55588) & 55588 | ~(55588 & ⲆⲆⲆᐃᐃⲆΔ) & ⲆⲆⲆᐃᐃⲆΔ;
		const ⲆⵠⲆⵠⲆᐃⵠ = ⵠᐃⲆᐃⲆΔⲆ(ᐃᐃⲆⲆⲆᐃⲆ, ΔΔⲆⵠΔⵠⵠ, ⲆΔΔⵠΔⲆᐃ, ᐃⵠΔΔⲆΔⲆ, ΔᐃⵠᐃⵠΔⲆ);
		const ⵠⵠᐃᐃⲆΔᐃΔᐃ = ⲆΔⲆⲆⵠΔΔ(ᐃᐃⲆⲆⲆᐃⲆ, ΔΔⲆⵠΔⵠⵠ, ⲆΔΔⵠΔⲆᐃ, ᐃⵠΔΔⲆΔⲆ, ΔᐃⵠᐃⵠΔⲆ, ᐃᐃⲆⲆⲆᐃⲆ);
		const ⲆΔΔⲆᐃⵠᐃ = ⵠᐃΔⲆΔⲆⵠ(ΔΔⲆⵠΔⵠⵠ, ⲆΔΔⵠΔⲆᐃ, ᐃⵠΔΔⲆΔⲆ, ΔᐃⵠᐃⵠΔⲆ, ᐃᐃⲆⲆⲆᐃⲆ);
		const ΔⲆⲆΔΔⲆⵠ = ⲆⵠⲆⵠⲆᐃⵠ ^ 57467;
		const ⵠΔⲆⵠΔΔⲆ = (1664525 * ((ΔⲆⲆΔΔⲆⵠ ^ ⲆΔΔⲆᐃⵠᐃ) + 3037) + 1013904223) % 4294967296;
		return ⵠΔⲆⵠΔΔⲆ
	}

	function ᐃⵠᐃΔⵠΔⲆ(ⲆᐃⲆⵠⲆⵠΔ, ᐃⲆᐃⵠⵠΔⲆ, ⵠᐃⲆⲆⲆ) {
		const ᐃⲆᐃⲆᐃⵠΔ = (12345 + 1103515245 * (39051 + ⲆᐃⲆⵠⲆⵠΔ)) % 2147483648;
		const ⵠᐃⵠΔΔⲆΔ = (44117 | ᐃⲆᐃⵠⵠΔⲆ) & ~(ᐃⲆᐃⵠⵠΔⲆ & 44117);
		const ⲆΔΔᐃⵠⲆⵠ = (24 << (ⵠᐃⲆⲆⲆ >> 24 & 255)) + (8 << (ⵠᐃⲆⲆⲆ >> 16 & ⵠᐃⵠᐃⵠ)) + (16 << (ⵠᐃⲆⲆⲆ >> 32 & 255)) + (32 << (ⵠᐃⲆⲆⲆ >> 8 & 255));
		const ⵠⵠᐃⲆⲆΔⲆ = ⵠⲆⲆⲆΔᐃᐃ(ᐃⲆᐃⲆᐃⵠΔ, ⵠᐃⵠΔΔⲆΔ, ⲆΔΔᐃⵠⲆⵠ, ᐃⲆᐃⲆᐃⵠΔ, ⵠᐃⵠΔΔⲆΔ);
		const ⲆⵠⲆᐃΔᐃᐃ = ⲆΔⲆⲆⵠΔΔ(ⲆΔΔᐃⵠⲆⵠ, ᐃⲆᐃⲆᐃⵠΔ, ⵠᐃⵠΔΔⲆΔ, ⲆΔΔᐃⵠⲆⵠ, ᐃⲆᐃⲆᐃⵠΔ, ⵠᐃⵠΔΔⲆΔ);
		const ⲆΔᐃⵠΔᐃᐃ = ⵠⵠΔᐃᐃⲆᐃ(ⲆΔΔᐃⵠⲆⵠ, ᐃⲆᐃⲆᐃⵠΔ);
		const ⵠᐃᐃᐃᐃΔⵠ = (16 << ((ⵠⵠᐃⲆⲆΔⲆ ^ ⲆⵠⲆᐃΔᐃᐃ) >> 32 & 255)) + (24 << ((ⵠⵠᐃⲆⲆΔⲆ ^ ⲆⵠⲆᐃΔᐃᐃ) >> 24 & 255)) + (32 << ((ⵠⵠᐃⲆⲆΔⲆ ^ ⲆⵠⲆᐃΔᐃᐃ) >> 8 & 255)) + (ⵠᐃⵠΔⲆ << ((ⵠⵠᐃⲆⲆΔⲆ ^ ⲆⵠⲆᐃΔᐃᐃ) >> 16 & 255));
		const ⵠΔⵠⲆⲆᐃΔ = (ΔⵠΔⵠΔ << ((ⵠᐃᐃᐃᐃΔⵠ ^ ⲆΔᐃⵠΔᐃᐃ) >> 32 & ΔⵠΔⲆΔΔⲆ)) + (16 << ((ⵠᐃᐃᐃᐃΔⵠ ^ ⲆΔᐃⵠΔᐃᐃ) >> 8 & 255)) + (32 << ((ⵠᐃᐃᐃᐃΔⵠ ^ ⲆΔᐃⵠΔᐃᐃ) >> 16 & 255)) + (24 << ((ⵠᐃᐃᐃᐃΔⵠ ^ ⲆΔᐃⵠΔᐃᐃ) >> 24 & 255));
		return ⵠΔⵠⲆⲆᐃΔ
	}

	function ⲆⵠΔΔⲆⵠᐃ(ⵠⵠⲆⲆⵠᐃᐃ, ⵠⲆᐃⵠΔΔⵠ, ⵠⵠΔⲆⵠᐃⵠ, ΔⲆΔᐃⲆⲆⲆ, ΔⵠⲆΔΔΔⲆ) {
		const ᐃⲆⵠΔⲆΔⵠ = (ᐃΔⲆⵠΔ << (ⵠⵠⲆⲆⵠᐃᐃ >> 32 & ΔⲆΔⲆⲆ)) + (24 << (ⵠⵠⲆⲆⵠᐃᐃ >> 24 & 255)) + (ΔⵠΔⵠΔ << (ⵠⵠⲆⲆⵠᐃᐃ >> 8 & 255)) + (32 << (ⵠⵠⲆⲆⵠᐃᐃ >> 16 & 255));
		const ΔᐃⲆⵠᐃᐃΔ = ⵠⲆᐃⵠΔΔⵠ ^ 55978;
		const ⵠⵠⲆΔⵠⵠⵠ = (1664525 * (ⵠⵠΔⲆⵠᐃⵠ + 2934) + 1013904223) % 4294967296;
		const ⲆⲆⵠⲆΔⲆΔ = ~(ΔⲆΔᐃⲆⲆⲆ & 30642) & (ΔⲆΔᐃⲆⲆⲆ | 30642);
		const ΔΔⵠΔⲆΔⲆ = (8 << (ΔⵠⲆΔΔΔⲆ >> 8 & 255)) + (24 << (ΔⵠⲆΔΔΔⲆ >> 32 & 255)) + (16 << (ΔⵠⲆΔΔΔⲆ >> 24 & 255)) + (32 << (ΔⵠⲆΔΔΔⲆ >> 16 & 255));
		const ᐃⲆⵠⲆⲆⵠⲆ = ᐃᐃᐃⵠΔⲆⵠ(ᐃⲆⵠΔⲆΔⵠ, ΔᐃⲆⵠᐃᐃΔ, ⵠⵠⲆΔⵠⵠⵠ, ⲆⲆⵠⲆΔⲆΔ, ΔΔⵠΔⲆΔⲆ);
		const ΔⲆⵠᐃⵠΔᐃ = ΔᐃⲆⲆⵠᐃΔ(ᐃⲆⵠΔⲆΔⵠ, ΔᐃⲆⵠᐃᐃΔ, ⵠⵠⲆΔⵠⵠⵠ, ⲆⲆⵠⲆΔⲆΔ, ΔΔⵠΔⲆΔⲆ);
		const ⵠΔᐃᐃⵠⲆᐃΔⲆ = ⲆⲆΔⲆΔ(ᐃⲆⵠΔⲆΔⵠ, ΔᐃⲆⵠᐃᐃΔ, ⵠⵠⲆΔⵠⵠⵠ, ⲆⲆⵠⲆΔⲆΔ);
		const ⵠᐃΔΔⵠⵠⲆ = (16 << ((ᐃⲆⵠⲆⲆⵠⲆ ^ ΔⲆⵠᐃⵠΔᐃ) >> 32 & 255)) + (24 << ((ᐃⲆⵠⲆⲆⵠⲆ ^ ΔⲆⵠᐃⵠΔᐃ) >> 8 & ΔⵠΔⲆΔΔⲆ)) + (8 << ((ᐃⲆⵠⲆⲆⵠⲆ ^ ΔⲆⵠᐃⵠΔᐃ) >> 24 & 255)) + (32 << ((ᐃⲆⵠⲆⲆⵠⲆ ^ ΔⲆⵠᐃⵠΔᐃ) >> 16 & 255));
		const ⲆᐃᐃΔⵠᐃⵠ = ~(23686 & ⵠᐃΔΔⵠⵠⲆ) & (23686 | ⵠᐃΔΔⵠⵠⲆ);
		return ⲆᐃᐃΔⵠᐃⵠ
	}

	function ᐃᐃᐃⵠΔⲆⵠ(ⲆⲆⲆΔⲆΔⲆ, ᐃᐃⵠΔΔⵠⵠ, ⲆⵠⲆⲆⵠᐃΔ, ΔΔⵠⵠᐃᐃΔ, ⵠΔΔΔⲆΔⵠ) {
		const ΔᐃⵠΔΔΔΔ = ~(42203 & ⲆⲆⲆΔⲆΔⲆ) & ⲆⲆⲆΔⲆΔⲆ | ~(ⲆⲆⲆΔⲆΔⲆ & 42203) & 42203;
		const ⵠᐃᐃⵠⵠΔᐃ = 50118 ^ ᐃᐃⵠΔΔⵠⵠ;
		const ⲆⵠⵠᐃᐃⲆΔ = ⲆⵠⲆⲆⵠᐃΔ ^ 41620;
		const ᐃᐃΔΔΔⲆⲆ = (2147483629 * (ΔΔⵠⵠᐃᐃΔ + 34240) + 2147483587) % 2147483647;
		const ᐃᐃⵠⵠΔΔⵠ = (32 << (ⵠΔΔΔⲆΔⵠ >> 16 & 255)) + (16 << (ⵠΔΔΔⲆΔⵠ >> 8 & 255)) + (8 << (ⵠΔΔΔⲆΔⵠ >> 32 & 255)) + (24 << (ⵠΔΔΔⲆΔⵠ >> 24 & 255));
		const ᐃⲆⵠᐃΔⵠΔ = ⲆΔⲆⲆⵠΔΔ(ΔᐃⵠΔΔΔΔ, ⵠᐃᐃⵠⵠΔᐃ, ⲆⵠⵠᐃᐃⲆΔ, ᐃᐃΔΔΔⲆⲆ, ᐃᐃⵠⵠΔΔⵠ, ΔᐃⵠΔΔΔΔ);
		const ⲆᐃⲆⵠΔᐃᐃᐃⵠ = ⲆΔⲆⲆⵠΔΔ(ⵠᐃᐃⵠⵠΔᐃ, ⲆⵠⵠᐃᐃⲆΔ, ᐃᐃΔΔΔⲆⲆ, ᐃᐃⵠⵠΔΔⵠ, ΔᐃⵠΔΔΔΔ, ⵠᐃᐃⵠⵠΔᐃ);
		const ⲆΔΔⵠΔᐃΔ = ⲆⲆΔⲆΔ(ⲆⵠⵠᐃᐃⲆΔ, ᐃᐃΔΔΔⲆⲆ, ᐃᐃⵠⵠΔΔⵠ, ΔᐃⵠΔΔΔΔ);
		const ⲆⵠⲆᐃⵠΔᐃ = (43477 | ᐃⲆⵠᐃΔⵠΔ) & ~(ᐃⲆⵠᐃΔⵠΔ & 43477);
		const ΔⵠΔᐃΔΔⲆ = (2531011 + 214013 * ((ⲆⵠⲆᐃⵠΔᐃ ^ ⲆΔΔⵠΔᐃΔ) + 53616)) % 4294967296;
		return ΔⵠΔᐃΔΔⲆ
	}

	function ΔΔᐃᐃᐃⵠⲆ(ΔⵠΔⲆⵠΔⵠ, ⵠⵠᐃⵠⲆⲆⲆ) {
		const ⵠⲆⲆⲆΔΔᐃ = ((ΔⵠΔⲆⵠΔⵠ + 44664) * 1664525 + 1013904223) % 4294967296;
		const ᐃⲆΔⵠᐃⲆⲆ = ⵠⵠᐃⵠⲆⲆⲆ ^ 53080;
		const ΔΔᐃᐃΔⲆᐃ = ⲆⵠΔΔⲆⵠᐃ(ⵠⲆⲆⲆΔΔᐃ, ᐃⲆΔⵠᐃⲆⲆ, ⵠⲆⲆⲆΔΔᐃ, ᐃⲆΔⵠᐃⲆⲆ, ⵠⲆⲆⲆΔΔᐃ);
		const ⲆᐃⲆⲆⵠᐃᐃ = ᐃᐃᐃⵠΔⲆⵠ(ᐃⲆΔⵠᐃⲆⲆ, ⵠⲆⲆⲆΔΔᐃ, ᐃⲆΔⵠᐃⲆⲆ, ⵠⲆⲆⲆΔΔᐃ, ᐃⲆΔⵠᐃⲆⲆ);
		const ⵠΔᐃΔΔⲆⵠ = ⲆⲆΔⲆΔ(ⵠⲆⲆⲆΔΔᐃ, ᐃⲆΔⵠᐃⲆⲆ, ⵠⲆⲆⲆΔΔᐃ, ᐃⲆΔⵠᐃⲆⲆ);
		const ⲆΔⵠᐃᐃᐃⵠ = ((ΔΔᐃᐃΔⲆᐃ ^ ⲆᐃⲆⲆⵠᐃᐃ) + 17769) % 65357;
		const ᐃᐃⵠΔⵠⲆΔ = (1 + 22695477 * ((ⲆΔⵠᐃᐃᐃⵠ ^ ⵠΔᐃΔΔⲆⵠ) + 57525)) % 4294967296;
		return ᐃᐃⵠΔⵠⲆΔ
	}
	const ᐃⵠⵠᐃΔⵠᐃ = ΔᐃⲆⲆⲆ;
	const ᐃΔⵠⵠ = ⵠᐃΔΔ;

	function ⵠᐃΔⲆΔⲆⵠ(ᐃΔⵠⵠⵠᐃⵠ, ⲆⵠⲆⲆΔᐃᐃ, ΔⵠⲆᐃⲆΔⵠ, ΔⲆᐃⵠⵠᐃⵠ, ⲆⲆΔⲆⲆⵠⲆ) {
		const ⲆΔΔΔΔᐃᐃ = ((ᐃΔⵠⵠⵠᐃⵠ + 49173) * 1103515245 + 12345) % 2147483648;
		const ⵠᐃⵠΔⵠⲆⵠ = (ⲆⵠⲆⲆΔᐃᐃ + 52922) % 65337;
		const ⲆⲆⲆⲆⲆⵠᐃ = ΔⵠⲆᐃⲆΔⵠ ^ 25250;
		const ΔᐃⲆΔⵠⲆΔ = ~(ΔⲆᐃⵠⵠᐃⵠ & 10903) & 10903 | ~(10903 & ΔⲆᐃⵠⵠᐃⵠ) & ΔⲆᐃⵠⵠᐃⵠ;
		const ΔⲆⵠᐃΔᐃᐃ = ~(ⲆⲆΔⲆⲆⵠⲆ & 33814) & 33814 | ~(33814 & ⲆⲆΔⲆⲆⵠⲆ) & ⲆⲆΔⲆⲆⵠⲆ;
		const ⵠᐃᐃⲆᐃⵠΔ = ⲆΔⲆⲆⲆᐃΔ(ⲆΔΔΔΔᐃᐃ, ⵠᐃⵠΔⵠⲆⵠ, ⲆⲆⲆⲆⲆⵠᐃ, ΔᐃⲆΔⵠⲆΔ, ΔⲆⵠᐃΔᐃᐃ);
		const ᐃΔᐃᐃⲆΔΔ = Ⲇⵠᐃⵠⵠᐃᐃ(ⲆΔΔΔΔᐃᐃ, ⵠᐃⵠΔⵠⲆⵠ);
		const ᐃⵠⵠⲆⵠΔΔⲆⵠ = ⲆΔⲆⲆⲆᐃΔ(ⲆⲆⲆⲆⲆⵠᐃ, ΔᐃⲆΔⵠⲆΔ, ΔⲆⵠᐃΔᐃᐃ, ⲆΔΔΔΔᐃᐃ, ⵠᐃⵠΔⵠⲆⵠ);
		const ⵠⵠⲆⲆⲆⲆᐃ = (1 + ((ⵠᐃᐃⲆᐃⵠΔ ^ ᐃΔᐃᐃⲆΔΔ) + 19675) * 22695477) % 4294967296;
		const ΔⲆⵠⵠⵠⲆᐃ = ~(7922 & ⵠⵠⲆⲆⲆⲆᐃ) & ⵠⵠⲆⲆⲆⲆᐃ | ~(ⵠⵠⲆⲆⲆⲆᐃ & 7922) & 7922;
		return ΔⲆⵠⵠⵠⲆᐃ
	}
	const ⵠⲆᐃᐃⵠ = ᐃⵠⵠΔⵠΔⵠ;
	const Ⲇⵠⵠᐃᐃ = ⵠΔⵠⵠⲆ;
	const ⵠⲆΔᐃΔ = ⵠⲆⵠⵠΔ;

	function Ⲇⵠᐃⵠⵠᐃᐃ(Δⵠⵠᐃⵠᐃᐃ, ⲆᐃᐃⵠᐃⲆⵠ) {
		const ᐃΔᐃΔⲆⲆⲆ = 24508 ^ Δⵠⵠᐃⵠᐃᐃ;
		const ⵠⲆᐃΔⲆΔⵠ = (16 << (ⲆᐃᐃⵠᐃⲆⵠ >> 16 & 255)) + (24 << (ⲆᐃᐃⵠᐃⲆⵠ >> ⲆΔⲆᐃᐃ & 255)) + (32 << (ⲆᐃᐃⵠᐃⲆⵠ >> 32 & 255)) + (8 << (ⲆᐃᐃⵠᐃⲆⵠ >> 24 & 255));
		const ⵠᐃΔᐃⲆⲆΔ = ⵠⲆΔⲆᐃⲆⲆ(ᐃΔᐃΔⲆⲆⲆ, ⵠⲆᐃΔⲆΔⵠ, ᐃΔᐃΔⲆⲆⲆ, ⵠⲆᐃΔⲆΔⵠ, ᐃΔᐃΔⲆⲆⲆ);
		const ⲆᐃΔⲆΔᐃⲆ = ⲆⵠΔΔⲆⵠᐃ(ⵠⲆᐃΔⲆΔⵠ, ᐃΔᐃΔⲆⲆⲆ, ⵠⲆᐃΔⲆΔⵠ, ᐃΔᐃΔⲆⲆⲆ, ⵠⲆᐃΔⲆΔⵠ);
		const ⵠⵠΔⲆᐃΔⲆΔΔ = ⵠⲆⲆⲆΔᐃᐃ(ᐃΔᐃΔⲆⲆⲆ, ⵠⲆᐃΔⲆΔⵠ, ᐃΔᐃΔⲆⲆⲆ, ⵠⲆᐃΔⲆΔⵠ, ᐃΔᐃΔⲆⲆⲆ);
		const ΔⵠⵠⵠΔⲆⲆ = (2147483629 * ((ⵠᐃΔᐃⲆⲆΔ ^ ⲆᐃΔⲆΔᐃⲆ) + 11269) + 2147483587) % 2147483647;
		const ᐃᐃⲆΔᐃⲆᐃ = ~(ΔⵠⵠⵠΔⲆⲆ & 40927) & 40927 | ~(40927 & ΔⵠⵠⵠΔⲆⲆ) & ΔⵠⵠⵠΔⲆⲆ;
		return ᐃᐃⲆΔᐃⲆᐃ
	}
	const ⲆΔᐃⲆ = ᐃⵠΔᐃ;
	const ᐃΔⵠⵠⲆ = ⵠⵠⲆⵠⵠ;
	const ⲆᐃⲆᐃⲆ = ᐃⲆⵠΔᐃ;
	const ΔⲆᐃΔᐃ = ⵠΔᐃⲆⲆ;

	function ⵠⵠΔᐃᐃⲆᐃ(ΔᐃᐃΔᐃΔⲆ, ᐃⲆⵠⵠⵠᐃⲆ) {
		const ⵠᐃᐃᐃᐃⲆⲆ = (16 << (ΔᐃᐃΔᐃΔⲆ >> 8 & 255)) + (32 << (ΔᐃᐃΔᐃΔⲆ >> 16 & 255)) + (8 << (ΔᐃᐃΔᐃΔⲆ >> 32 & ⲆᐃΔⵠⵠᐃᐃ)) + (24 << (ΔᐃᐃΔᐃΔⲆ >> 24 & 255));
		const Ⲇⵠⵠᐃⵠⵠⵠ = (32 << (ᐃⲆⵠⵠⵠᐃⲆ >> 32 & ᐃⵠΔΔⵠ)) + (24 << (ᐃⲆⵠⵠⵠᐃⲆ >> 24 & 255)) + (8 << (ᐃⲆⵠⵠⵠᐃⲆ >> 8 & 255)) + (16 << (ᐃⲆⵠⵠⵠᐃⲆ >> 16 & 255));
		const ⵠⵠᐃⵠⲆⵠᐃ = ⲆⲆᐃᐃⵠⲆⲆ(ⵠᐃᐃᐃᐃⲆⲆ, Ⲇⵠⵠᐃⵠⵠⵠ, ⵠᐃᐃᐃᐃⲆⲆ, Ⲇⵠⵠᐃⵠⵠⵠ, ⵠᐃᐃᐃᐃⲆⲆ, Ⲇⵠⵠᐃⵠⵠⵠ);
		const ΔⲆⲆΔΔⵠᐃᐃⵠ = ⲆΔᐃΔⲆΔΔ(ⵠᐃᐃᐃᐃⲆⲆ, Ⲇⵠⵠᐃⵠⵠⵠ, ⵠᐃᐃᐃᐃⲆⲆ, Ⲇⵠⵠᐃⵠⵠⵠ, ⵠᐃᐃᐃᐃⲆⲆ);
		const Ⲇⵠᐃⵠⵠⵠⵠᐃᐃ = ΔΔᐃᐃᐃⵠⲆ(Ⲇⵠⵠᐃⵠⵠⵠ, ⵠᐃᐃᐃᐃⲆⲆ);
		const ⵠΔⵠΔᐃⵠⲆ = (ⵠⵠᐃⵠⲆⵠᐃ | 58283) & ~(58283 & ⵠⵠᐃⵠⲆⵠᐃ);
		const ⵠᐃᐃΔΔᐃΔ = 8337 ^ ⵠΔⵠΔᐃⵠⲆ;
		return ⵠᐃᐃΔΔᐃΔ
	}

	function ⲆΔⲆⲆⵠΔΔ(ⵠΔⵠᐃⲆΔΔ, ᐃᐃⵠΔⲆⲆᐃ, ⵠᐃᐃⲆⲆⲆⲆ, ⵠⲆᐃⲆⵠΔΔ, ᐃⵠⵠΔⲆⵠᐃ, ⲆΔΔΔⲆΔΔ) {
		const ⵠⵠᐃΔⵠᐃⵠ = (ⵠΔⵠᐃⲆΔΔ + 52483) % 65496;
		const ᐃᐃΔⵠᐃᐃⲆ = (16 << (ᐃᐃⵠΔⲆⲆᐃ >> 16 & 255)) + (24 << (ᐃᐃⵠΔⲆⲆᐃ >> 8 & ᐃⵠΔΔⵠ)) + (32 << (ᐃᐃⵠΔⲆⲆᐃ >> 24 & 255)) + (8 << (ᐃᐃⵠΔⲆⲆᐃ >> 32 & 255));
		const ΔΔᐃⵠⵠⲆΔ = ⵠᐃᐃⲆⲆⲆⲆ ^ 8102;
		const ⵠⵠΔⵠⵠᐃΔ = (24 << (ⵠⲆᐃⲆⵠΔΔ >> 16 & 255)) + (32 << (ⵠⲆᐃⲆⵠΔΔ >> 32 & ᐃⵠΔΔⵠ)) + (8 << (ⵠⲆᐃⲆⵠΔΔ >> 24 & 255)) + (16 << (ⵠⲆᐃⲆⵠΔΔ >> ⵠᐃⵠΔⲆ & ΔⲆΔⲆⲆ));
		const ΔᐃΔⲆⲆⲆⲆ = ~(ᐃⵠⵠΔⲆⵠᐃ & 29687) & 29687 | ~(29687 & ᐃⵠⵠΔⲆⵠᐃ) & ᐃⵠⵠΔⲆⵠᐃ;
		const ᐃⵠΔΔⵠⲆΔ = (1 + (62237 + ⲆΔΔΔⲆΔΔ) * 22695477) % 4294967296;
		const ᐃⵠᐃΔⲆⲆⵠ = ΔΔⵠⵠΔᐃⵠ(ⵠⵠᐃΔⵠᐃⵠ, ᐃᐃΔⵠᐃᐃⲆ);
		const ⲆᐃⲆⵠⲆᐃⲆ = ΔΔⵠⵠΔᐃⵠ(ΔΔᐃⵠⵠⲆΔ, ⵠⵠΔⵠⵠᐃΔ);
		const ⵠᐃⵠⵠᐃⲆⵠᐃⲆ = ΔΔⵠⵠΔᐃⵠ(ΔᐃΔⲆⲆⲆⲆ, ᐃⵠΔΔⵠⲆΔ);
		const ⲆᐃᐃⲆᐃⵠΔ = (45290 + (ᐃⵠᐃΔⲆⲆⵠ ^ ⲆᐃⲆⵠⲆᐃⲆ)) % 65334;
		const ⵠᐃⲆΔⵠΔᐃ = 55575 ^ ⲆᐃᐃⲆᐃⵠΔ;
		return ⵠᐃⲆΔⵠΔᐃ
	}

	function ᐃᐃⲆⲆⵠⲆⵠ(ⵠᐃΔᐃⵠᐃΔ, ΔΔⵠᐃΔΔᐃ, ΔΔΔᐃⲆᐃᐃ) {
		const ⲆⵠⵠⲆⵠΔᐃ = 23323 ^ ⵠᐃΔᐃⵠᐃΔ;
		const ΔᐃᐃᐃⲆΔᐃ = (2531011 + (61713 + ΔΔⵠᐃΔΔᐃ) * 214013) % 4294967296;
		const ΔᐃⵠⲆᐃⲆΔ = (ΔΔΔᐃⲆᐃᐃ | 24198) & ~(ΔΔΔᐃⲆᐃᐃ & 24198);
		const ΔⵠⵠⵠⵠⵠΔ = ⵠⲆΔⲆᐃⲆⲆ(ⲆⵠⵠⲆⵠΔᐃ, ΔᐃᐃᐃⲆΔᐃ, ΔᐃⵠⲆᐃⲆΔ, ⲆⵠⵠⲆⵠΔᐃ, ΔᐃᐃᐃⲆΔᐃ);
		const ΔΔΔⲆΔⲆⵠ = ⵠⲆΔⲆᐃⲆⲆ(ΔᐃⵠⲆᐃⲆΔ, ⲆⵠⵠⲆⵠΔᐃ, ΔᐃᐃᐃⲆΔᐃ, ΔᐃⵠⲆᐃⲆΔ, ⲆⵠⵠⲆⵠΔᐃ);
		const ᐃᐃᐃᐃΔⵠⲆᐃΔ = ⵠⲆΔⲆᐃⲆⲆ(ΔᐃᐃᐃⲆΔᐃ, ΔᐃⵠⲆᐃⲆΔ, ⲆⵠⵠⲆⵠΔᐃ, ΔᐃᐃᐃⲆΔᐃ, ΔᐃⵠⲆᐃⲆΔ);
		const ⲆᐃΔᐃⲆⲆⵠ = (16 << ((ΔⵠⵠⵠⵠⵠΔ ^ ΔΔΔⲆΔⲆⵠ) >> 32 & 255)) + (8 << ((ΔⵠⵠⵠⵠⵠΔ ^ ΔΔΔⲆΔⲆⵠ) >> 8 & 255)) + (24 << ((ΔⵠⵠⵠⵠⵠΔ ^ ΔΔΔⲆΔⲆⵠ) >> 24 & 255)) + (32 << ((ΔⵠⵠⵠⵠⵠΔ ^ ΔΔΔⲆΔⲆⵠ) >> 16 & ᐃⵠΔΔⵠ));
		const ᐃΔⲆΔⲆΔⵠ = ⲆᐃΔᐃⲆⲆⵠ ^ 31181;
		return ᐃΔⲆΔⲆΔⵠ
	}

	function ΔᐃᐃᐃΔᐃⵠ(ᐃΔΔⵠΔⵠⵠ, ΔⵠⲆΔᐃᐃⲆ, ᐃⵠΔⲆⵠⵠⵠ, ΔΔᐃⲆᐃᐃⵠ, ⵠⵠΔᐃΔⵠᐃ, Δⵠⵠᐃⵠⵠⵠ) {
		ⵠⲆⵠⲆᐃᐃΔ(ᐃⵠΔⲆⲆ, ᐃΔΔⵠΔⵠⵠ, ΔⵠⲆΔᐃᐃⲆ, ᐃⵠΔⲆⵠⵠⵠ, ΔΔᐃⲆᐃᐃⵠ, ⵠⵠΔᐃΔⵠᐃ, Δⵠⵠᐃⵠⵠⵠ);
		const ᐃⲆΔΔᐃᐃⵠ = (21469 | ⲆⲆⵠΔ[ⵠⵠⵠ]) & ~(ⲆⲆⵠΔ[ΔΔᐃ] & 21469);
		const ᐃᐃᐃᐃΔΔⵠ = (0 << ((ᐃⲆΔΔᐃᐃⵠ ^ ⲆⲆⵠΔ[ΔΔⲆᐃ]) >> 24 & ᐃⵠΔΔⵠ)) + (ⲆΔⲆⲆⲆ << ((ᐃⲆΔΔᐃᐃⵠ ^ ⲆⲆⵠΔ[ΔΔⲆᐃ]) >> ⲆΔⲆᐃᐃ & 255)) + (8 << ((ᐃⲆΔΔᐃᐃⵠ ^ ⲆⲆⵠΔ[2]) >> 0 & ⵠᐃⵠᐃⵠ)) + (24 << ((ᐃⲆΔΔᐃᐃⵠ ^ ⲆⲆⵠΔ[ᐃⲆᐃⵠ]) >> 16 & 255));
		const ΔΔⲆⵠᐃᐃΔ = 52673 ^ ᐃᐃᐃᐃΔΔⵠ;
		const ⲆΔⵠΔⲆⵠΔ = 20433 ^ ΔΔⲆⵠᐃᐃΔ;
		const ᐃⲆⲆᐃⵠᐃᐃ = (24 << ((ⲆΔⵠΔⲆⵠΔ ^ ⲆⲆⵠΔ[5]) >> 16 & 255)) + (16 << ((ⲆΔⵠΔⲆⵠΔ ^ ⲆⲆⵠΔ[5]) >> 0 & 255)) + (0 << ((ⲆΔⵠΔⲆⵠΔ ^ ⲆⲆⵠΔ[5]) >> 24 & 255)) + (8 << ((ⲆΔⵠΔⲆⵠΔ ^ ⲆⲆⵠΔ[5]) >> ⵠᐃⵠΔⲆ & 255));
		return ᐃⲆⲆᐃⵠᐃᐃ
	}
	const Δⵠⵠᐃ = ᐃⵠΔⲆ;
	const ⲆᐃⵠΔⲆⲆⲆ = ⲆⵠⲆΔᐃᐃΔ;
	const ⵠΔⵠᐃⵠ = ⵠⲆⵠᐃΔ;

	function ⵠᐃᐃⵠⲆⲆᐃ(ΔⲆᐃᐃⲆⵠⲆ, ΔΔᐃⲆⲆⲆⵠ) {
		ⲆⲆⵠΔⵠⵠⵠ(ᐃⵠΔⲆⲆ, ΔⲆᐃᐃⲆⵠⲆ, ΔΔᐃⲆⲆⲆⵠ);
		const ᐃΔⵠᐃΔᐃΔ = ᐃΔᐃΔᐃᐃᐃ(ⲆⲆⵠΔ[ᐃᐃⲆ], ⲆⲆⵠΔ[ⵠΔᐃ], ⲆⲆⵠΔ[ᐃᐃᐃ], ⲆⲆⵠΔ[ᐃⲆΔ], ⲆⲆⵠΔ[0]);
		const ⵠᐃᐃΔⲆⲆⵠ = ⵠΔᐃᐃⲆΔᐃ(ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[0]);
		const ᐃΔΔᐃⲆⲆΔ = ((218 + (ᐃΔⵠᐃΔᐃΔ ^ ⵠᐃᐃΔⲆⲆⵠ)) * 75 + 74) % 65537;
		return ᐃΔΔᐃⲆⲆΔ
	}

	function ⵠᐃⵠᐃΔⲆΔ(ΔᐃΔᐃᐃᐃⵠ, ⵠᐃⵠⵠⲆⵠⲆ, ⵠΔΔΔᐃΔⲆ, ⲆⲆⲆⲆⲆⲆᐃ) {
		const ΔᐃⲆⵠⵠᐃᐃ = (8 << (ΔᐃΔᐃᐃᐃⵠ >> 16 & 255)) + (16 << (ΔᐃΔᐃᐃᐃⵠ >> ΔⵠΔⵠΔ & 255)) + (0 << (ΔᐃΔᐃᐃᐃⵠ >> 24 & 255)) + (24 << (ΔᐃΔᐃᐃᐃⵠ >> ᐃᐃⲆ & 255));
		const ⲆⵠᐃΔΔⵠΔ = 22208 ^ ⵠᐃⵠⵠⲆⵠⲆ;
		const ΔΔⲆⵠΔⵠᐃ = ~(10131 & ⵠΔΔΔᐃΔⲆ) & (10131 | ⵠΔΔΔᐃΔⲆ);
		const ᐃᐃᐃⲆⲆᐃⲆ = (1013904223 + 1664525 * (ⲆⲆⲆⲆⲆⲆᐃ + 15348)) % 4294967296;
		const ⲆⵠᐃⵠΔⲆⲆ = ⲆᐃⵠᐃⵠⲆⲆ(ΔᐃⲆⵠⵠᐃᐃ, ⲆⵠᐃΔΔⵠΔ, ΔΔⲆⵠΔⵠᐃ, ᐃᐃᐃⲆⲆᐃⲆ);
		const ΔⲆᐃΔⲆⵠⲆΔᐃ = ⵠΔⵠⵠⵠᐃⲆ(ΔᐃⲆⵠⵠᐃᐃ, ⲆⵠᐃΔΔⵠΔ, ΔΔⲆⵠΔⵠᐃ, ᐃᐃᐃⲆⲆᐃⲆ, ΔᐃⲆⵠⵠᐃᐃ, ⲆⵠᐃΔΔⵠΔ);
		const ΔΔⵠⵠⲆᐃΔ = ⲆⵠᐃⵠΔⲆⲆ ^ 45358;
		return ΔΔⵠⵠⲆᐃΔ
	}
	const ⵠᐃⵠᐃΔ = ᐃⲆᐃⲆⵠ;
	const ᐃᐃΔᐃⲆ = ⵠΔᐃⵠⲆ;
	const ⲆⲆᐃᐃⵠⵠⲆ = ⵠⵠⲆⵠΔⲆⵠ;
	const ⵠⵠⲆΔⲆ = ΔΔⵠΔΔ;

	function ⲆⲆΔⵠⲆⲆⲆ(ᐃΔΔⵠΔⵠⵠ, ΔⵠⲆΔᐃᐃⲆ, ᐃⵠΔⲆⵠⵠⵠ) {
		const ᐃⲆΔⲆⲆⲆⲆ = (1 + 22695477 * (ᐃΔΔⵠΔⵠⵠ + 43568)) % 4294967296;
		const ᐃᐃΔᐃᐃΔⲆ = ((60686 + ΔⵠⲆΔᐃᐃⲆ) * 1103515245 + 12345) % 2147483648;
		const ΔⲆᐃΔΔⵠⵠ = ((31118 + ᐃⵠΔⲆⵠⵠⵠ) * 2147483629 + 2147483587) % 2147483647;
		const ⵠΔᐃΔⲆⲆⲆ = ᐃⲆⲆⵠⵠΔΔ(ᐃⲆΔⲆⲆⲆⲆ, ᐃᐃΔᐃᐃΔⲆ);
		const ᐃᐃᐃΔⲆⲆᐃⵠΔ = ⲆᐃⵠⲆΔΔⲆ(ΔⲆᐃΔΔⵠⵠ, ᐃⲆΔⲆⲆⲆⲆ, ᐃᐃΔᐃᐃΔⲆ);
		const ⵠⲆᐃᐃᐃⲆᐃ = ⵠΔᐃΔⲆⲆⲆ ^ 12623;
		return ⵠⲆᐃᐃᐃⲆᐃ
	}
	const Ⲇⵠⵠⵠ = ⵠⲆΔⵠ;
	const ᐃᐃΔⵠ = ᐃⲆᐃⵠ;
	const ⲆΔⵠΔⵠ = ᐃᐃᐃΔΔ;
	const ⲆᐃⲆⵠⲆ = ΔᐃⲆⲆⲆ;

	function ⲆⲆⲆᐃⵠⲆⵠ(ⵠⵠⲆⲆⵠᐃᐃ, ⵠⲆᐃⵠΔΔⵠ, ⵠⵠΔⲆⵠᐃⵠ) {
		const ⵠΔⵠⵠⵠΔΔ = (214013 * (63596 + ⵠⵠⲆⲆⵠᐃᐃ) + 2531011) % 4294967296;
		const ⲆΔᐃⵠⵠᐃΔ = (1103515245 * (5879 + ⵠⲆᐃⵠΔΔⵠ) + 12345) % 2147483648;
		const ⵠΔⲆⲆⵠⵠΔ = ~(ⵠⵠΔⲆⵠᐃⵠ & 10848) & 10848 | ~(10848 & ⵠⵠΔⲆⵠᐃⵠ) & ⵠⵠΔⲆⵠᐃⵠ;
		const ⵠΔⵠⲆᐃⲆⲆ = ⵠΔᐃⲆⲆᐃⲆ(ⵠΔⵠⵠⵠΔΔ, ⲆΔᐃⵠⵠᐃΔ, ⵠΔⲆⲆⵠⵠΔ, ⵠΔⵠⵠⵠΔΔ, ⲆΔᐃⵠⵠᐃΔ);
		const ⲆᐃᐃΔᐃⲆᐃΔⵠ = ⲆᐃⵠⲆΔΔⲆ(ⵠΔⲆⲆⵠⵠΔ, ⵠΔⵠⵠⵠΔΔ, ⲆΔᐃⵠⵠᐃΔ);
		const ΔΔⲆΔⵠᐃⲆ = ⵠΔⵠⲆᐃⲆⲆ ^ 4789;
		return ΔΔⲆΔⵠᐃⲆ
	}

	function ᐃⲆⲆⲆⲆⲆΔ(ᐃᐃⲆΔΔᐃᐃ, ᐃΔⵠⲆΔᐃⲆ) {
		const ⲆΔⲆᐃΔᐃΔ = ~(ᐃᐃⲆΔΔᐃᐃ & 33556) & (ᐃᐃⲆΔΔᐃᐃ | 33556);
		const ᐃᐃⲆΔᐃᐃⵠ = (24 << (ᐃΔⵠⲆΔᐃⲆ >> 24 & 255)) + (0 << (ᐃΔⵠⲆΔᐃⲆ >> 8 & 255)) + (ⲆΔⲆᐃᐃ << (ᐃΔⵠⲆΔᐃⲆ >> 0 & ⵠᐃⵠᐃⵠ)) + (16 << (ᐃΔⵠⲆΔᐃⲆ >> 16 & 255));
		const ⲆⲆΔⵠΔⵠᐃ = ΔⲆΔᐃⵠⵠᐃ(ⲆΔⲆᐃΔᐃΔ, ᐃᐃⲆΔᐃᐃⵠ);
		const ΔᐃΔᐃⲆᐃᐃⲆΔ = ᐃⲆⵠᐃⲆΔᐃ(ⲆΔⲆᐃΔᐃΔ, ᐃᐃⲆΔᐃᐃⵠ);
		const ⲆᐃⵠΔᐃᐃⲆ = (32588 | ⲆⲆΔⵠΔⵠᐃ) & ~(32588 & ⲆⲆΔⵠΔⵠᐃ);
		return ⲆᐃⵠΔᐃᐃⲆ
	}
	ΔⵠΔⵠ = {
		"ⵠⲆⲆⲆⵠᐃⲆ": ⵠⲆⲆⲆⵠᐃⲆ,
		"ⵠⲆⲆⲆⵠᐃⵠᐃⲆ": function(ᐃᐃᐃⲆⲆΔΔ) {
			var ᐃΔΔΔΔⵠᐃ = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]](ᐃᐃᐃⲆⲆΔΔ, ⵠ[437]);
			ᐃΔΔΔΔⵠᐃ.focus()
		},
		"ⵠⵠⵠⲆΔΔΔ": function(ᐃᐃᐃⲆⲆΔΔ) {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]](ᐃᐃᐃⲆⲆΔΔ, ⵠ[437], "location=yes,height=570,width=520,scrollbars=yes,status=yes")
		},
		"ⵠΔΔⲆΔⲆᐃ": function(ⵠᐃⲆᐃ, ⲆⲆᐃΔ) {
			for (var Ⲇᐃ in ⵠᐃⲆᐃ) {
				if (ⵠᐃⲆᐃ[Ⲇᐃ] != ⲆⲆᐃΔ[Ⲇᐃ]) return ΔⲆΔᐃᐃ
			}
			return ⵠⲆⵠⵠΔ
		},
		"ΔᐃⵠᐃⲆΔΔΔⵠ": function(ⵠᐃⲆᐃ, ⲆⲆᐃΔ) {
			if (ⵠᐃⲆᐃ.length != ⲆⲆᐃΔ.length) return false;
			for (var Ⲇᐃ = ᐃᐃⲆ; Ⲇᐃ < ⵠᐃⲆᐃ.length; Ⲇᐃ++) {
				if (typeof ⵠᐃⲆᐃ == ⵠ[328]) {
					if (!this.ⵠΔΔⲆΔⲆᐃ(ⵠᐃⲆᐃ[Ⲇᐃ], ⲆⲆᐃΔ[Ⲇᐃ])) return ΔΔᐃⵠᐃ
				} else if (ⵠᐃⲆᐃ[Ⲇᐃ] != ⲆⲆᐃΔ[Ⲇᐃ]) return ΔⵠΔⵠⵠ
			}
			return true
		},
		"ⵠⲆᐃᐃΔΔᐃ": function(ᐃⵠⲆᐃⵠ, ⵠᐃⲆⲆⵠⵠΔ) {
			ⵠᐃⲆⲆⵠⵠΔ.x = ᐃⵠⲆᐃⵠ.x;
			ⵠᐃⲆⲆⵠⵠΔ.y = ᐃⵠⲆᐃⵠ.y
		},
		"ⵠⲆⵠⵠΔⵠⵠ": function(ᐃᐃⵠⲆⲆ, ΔΔᐃⲆⵠ) {
			return {
				x: ᐃᐃⵠⲆⲆ.x - ΔΔᐃⲆⵠ.x,
				y: ᐃᐃⵠⲆⲆ.y - ΔΔᐃⲆⵠ.y
			}
		},
		"ⲆΔᐃΔΔᐃΔⵠᐃ": function(ⲆⵠⲆ, ΔⵠⵠⵠⲆᐃᐃ) {
			ⲆⵠⲆ.x *= ΔⵠⵠⵠⲆᐃᐃ, ⲆⵠⲆ.y *= ΔⵠⵠⵠⲆᐃᐃ
		},
		"ᐃᐃⲆᐃⲆΔⲆ": function(ᐃᐃⵠⲆⲆ, ΔΔᐃⲆⵠ) {
			return ᐃᐃⵠⲆⲆ.x * ΔΔᐃⲆⵠ.x + ᐃᐃⵠⲆⲆ.y * ΔΔᐃⲆⵠ.y
		},
		"ᐃⲆⵠⵠᐃᐃᐃ": function(ⲆⵠⲆ) {
			return Math.sqrt(ⲆⵠⲆ.x * ⲆⵠⲆ.x + ⲆⵠⲆ.y * ⲆⵠⲆ.y)
		},
		sign: function(ⵠᐃⲆᐃ) {
			if (ⵠᐃⲆᐃ < 0) return -ⵠΔᐃ;
			else return 1
		},
		"ΔⲆᐃⲆΔΔⵠ": function(ᐃᐃⵠⲆⲆ, ΔΔᐃⲆⵠ) {
			return ᐃᐃⵠⲆⲆ.x * ΔΔᐃⲆⵠ.y - ᐃᐃⵠⲆⲆ.y * ΔΔᐃⲆⵠ.x
		},
		"ⲆΔᐃⵠΔΔᐃ": function(ⲆᐃΔⲆⲆΔΔ, ᐃⵠΔⲆⵠⲆⲆ, ⵠΔᐃⲆᐃ, ⵠΔⲆᐃⵠ) {
			var ᐃΔᐃΔⲆΔⲆ = ⵠΔⲆᐃⵠ - ᐃⵠΔⲆⵠⲆⲆ;
			var ΔΔⵠⵠΔΔΔ = ⵠΔᐃⲆᐃ - ⲆᐃΔⲆⲆΔΔ;
			return Math.atan2(ᐃΔᐃΔⲆΔⲆ, ΔΔⵠⵠΔΔΔ)
		},
		"ᐃⲆⵠⵠⵠᐃΔ": function(ᐃᐃⵠⲆⲆ, ΔΔᐃⲆⵠ) {
			return Math.asin(this.ᐃᐃⲆᐃⲆΔⲆ(ᐃᐃⵠⲆⲆ, ΔΔᐃⲆⵠ) / (this.ᐃⲆⵠⵠᐃᐃᐃ(ᐃᐃⵠⲆⲆ) * this.ᐃⲆⵠⵠᐃᐃᐃ(ΔΔᐃⲆⵠ))) * this.sign(this.ΔⲆᐃⲆΔΔⵠ(ᐃᐃⵠⲆⲆ, ΔΔᐃⲆⵠ))
		},
		"ΔⲆΔΔⲆⲆⵠ": function(ⲆⲆⲆΔⵠⵠΔ) {
			ⲆΔΔΔΔᐃⲆ = location[ⲆᐃⲆⵠΔΔⲆ[144]];
			ⲆⲆⲆΔⵠⵠΔ = ⲆⲆⲆΔⵠⵠΔ.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
			var ᐃⵠΔΔΔⵠⲆ = "[\\?&]" + ⲆⲆⲆΔⵠⵠΔ + "=([^&#]*)";
			var ᐃⲆⵠⲆᐃⲆⲆ = new RegExp(ᐃⵠΔΔΔⵠⲆ);
			var ΔⲆΔᐃⲆΔⲆ = ᐃⲆⵠⲆᐃⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[280]](ⲆΔΔΔΔᐃⲆ);
			return ΔⲆΔᐃⲆΔⲆ === null ? null : ΔⲆΔᐃⲆΔⲆ[ⲆᐃΔ]
		},
		"ⵠⵠΔΔᐃⵠⲆ": function(ΔᐃΔΔⲆ, ⵠᐃᐃⵠⲆ) {
			var ᐃⲆⵠΔᐃⲆᐃ = Math.PI * 2;
			ⵠᐃᐃⵠⲆ = (ⵠᐃᐃⵠⲆ % ᐃⲆⵠΔᐃⲆᐃ + ᐃⲆⵠΔᐃⲆᐃ) % ᐃⲆⵠΔᐃⲆᐃ;
			if (Math.abs(ΔᐃΔΔⲆ - ⵠᐃᐃⵠⲆ) > Math.PI) {
				if (ΔᐃΔΔⲆ > ⵠᐃᐃⵠⲆ) return ⵠᐃᐃⵠⲆ + ᐃⲆⵠΔᐃⲆᐃ;
				else return ⵠᐃᐃⵠⲆ - ᐃⲆⵠΔᐃⲆᐃ
			}
			return ⵠᐃᐃⵠⲆ
		},
		"ⵠΔᐃⵠⲆⲆᐃ": function(ᐃⲆⵠᐃΔᐃⲆ, ⵠⵠΔⲆᐃⵠⲆ) {
			return this.ᐃⲆⵠⵠⵠᐃΔ({
				x: ⵠΔᐃ,
				y: ⵠⲆΔ
			}, this.ⵠⲆⵠⵠΔⵠⵠ(ᐃⲆⵠᐃΔᐃⲆ, ⵠⵠΔⲆᐃⵠⲆ))
		},
		"ΔⲆⲆᐃ": function(ⵠᐃⲆᐃ, ⲆⲆᐃΔ) {
			return Math.sqrt((ⲆⲆᐃΔ.x - ⵠᐃⲆᐃ.x) * (ⲆⲆᐃΔ.x - ⵠᐃⲆᐃ.x) + (ⲆⲆᐃΔ.y - ⵠᐃⲆᐃ.y) * (ⲆⲆᐃΔ.y - ⵠᐃⲆᐃ.y))
		},
		"ᐃⵠⵠᐃᐃⲆⵠ": function(ᐃⲆⲆᐃ, ⵠᐃⲆᐃ) {
			return {
				x: Math.sin(ⵠᐃⲆᐃ) * ᐃⲆⲆᐃ,
				y: Math.cos(ⵠᐃⲆᐃ) * ᐃⲆⲆᐃ
			}
		},
		"ΔᐃⵠⲆⵠⲆⵠ": function(ᐃⵠⲆᐃⵠ, ⵠᐃⲆⲆⵠⵠΔ) {
			ᐃⵠⲆᐃⵠ.x += ⵠᐃⲆⲆⵠⵠΔ.x;
			ᐃⵠⲆᐃⵠ.y += ⵠᐃⲆⲆⵠⵠΔ.y
		},
		"ᐃΔⲆᐃΔΔⵠ": function(ᐃⵠⲆᐃⵠ, ⵠᐃⲆⲆⵠⵠΔ) {
			ᐃⵠⲆᐃⵠ.x -= ⵠᐃⲆⲆⵠⵠΔ.x;
			ᐃⵠⲆᐃⵠ.y -= ⵠᐃⲆⲆⵠⵠΔ.y
		},
		"ⲆⲆⵠⲆᐃⵠᐃⵠΔ": function(ⲆⵠⲆ, Ⲇⵠ, ᐃⵠⲆ) {
			ⲆⵠⲆ.x += Ⲇⵠ;
			ⲆⵠⲆ.y += ᐃⵠⲆ
		},
		"ᐃᐃⲆᐃⲆⵠⵠⵠΔ": function(ⲆⵠⲆ, Ⲇⵠ, ᐃⵠⲆ) {
			return {
				x: ⲆⵠⲆ.x + Ⲇⵠ,
				y: ⲆⵠⲆ.y + ᐃⵠⲆ
			}
		},
		"ⵠᐃΔⲆⵠ": function(Ⲇⵠⵠ, ᐃⲆⲆᐃ, ⵠᐃⲆᐃ) {
			Ⲇⵠⵠ.x += Math.sin(ⵠᐃⲆᐃ) * ᐃⲆⲆᐃ;
			Ⲇⵠⵠ.y += Math.cos(ⵠᐃⲆᐃ) * ᐃⲆⲆᐃ
		},
		"ⲆⵠᐃᐃⲆⲆΔ": function(ⵠᐃⲆᐃ, ⲆⲆᐃΔ) {
			return Math.floor((ⵠᐃⲆᐃ - ⲆⲆᐃΔ) / ΔΔⲆᐃ)
		},
		"ᐃⵠⵠⵠᐃⲆⲆ": function(ⵠᐃⲆᐃ, ⲆⲆᐃΔ) {
			return {
				x: (ⵠᐃⲆᐃ.x + ⲆⲆᐃΔ.x) / 2,
				y: (ⵠᐃⲆᐃ.y + ⲆⲆᐃΔ.y) / 2
			}
		},
		"ⵠⵠⵠᐃᐃᐃᐃ": function() {
			return Math.random() > .5 ? 1 : -Δⵠᐃ
		},
		"ⵠⵠⲆⲆⵠⵠΔⲆᐃ": function(Ⲇⵠ, ᐃⵠⲆ, ᐃⲆⲆᐃ) {
			var ⲆⵠⵠⲆⲆ = this.ⵠⵠⵠᐃᐃᐃᐃ();
			var ⵠⵠⲆΔᐃ = this.ⵠⵠⵠᐃᐃᐃᐃ();
			var ⵠᐃⲆᐃ = Math.random() * Math.PI / 2;
			return {
				x: Math.floor(Ⲇⵠ + Math.sin(ⵠᐃⲆᐃ) * ⲆⵠⵠⲆⲆ * ᐃⲆⲆᐃ),
				y: Math.floor(ᐃⵠⲆ + Math.cos(ⵠᐃⲆᐃ) * ⵠⵠⲆΔᐃ * ᐃⲆⲆᐃ)
			}
		},
		"ΔⲆⵠⵠⲆⲆⵠⵠΔ": function(Ⲇⵠ, ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ) {
			this.x = Ⲇⵠ;
			this.y = ᐃⵠⲆ;
			this.w = ⲆⲆᐃ;
			this.ⲆΔⲆ = ⲆΔⲆ
		},
		"ⵠᐃⲆⵠⵠⵠⲆⲆⵠ": function(ᐃᐃⲆᐃ) {
			ⵠᐃⲆᐃ = [];
			ⵠᐃⲆᐃ.push.apply(ⵠᐃⲆᐃ, ᐃᐃⲆᐃ);
			var ΔⵠΔᐃⵠⲆⵠ = [];
			while (ⵠᐃⲆᐃ.length > 0) {
				var ΔⲆΔ = Math.floor(Math.random() * ⵠᐃⲆᐃ.length);
				ΔⵠΔᐃⵠⲆⵠ.push(ⵠᐃⲆᐃ[ΔⲆΔ]);
				ⵠᐃⲆᐃ.splice(ΔⲆΔ, 1)
			}
			return ΔⵠΔᐃⵠⲆⵠ
		},
		"ⲆᐃΔⵠΔᐃⲆ": function(ⵠᐃΔⵠ) {
			if (ⵠᐃΔⵠ >= 2e4) ⵠᐃΔⵠ = (ⵠᐃΔⵠ - 2e4) * 1e3;
			else if (ⵠᐃΔⵠ >= 1e4) ⵠᐃΔⵠ = (ⵠᐃΔⵠ - 1e4) * ᐃⵠⵠᐃΔⵠᐃ;
			return ⵠᐃΔⵠ
		},
		"ⵠⵠᐃᐃᐃⲆΔ": function(ⵠᐃΔⵠ) {
			if (typeof ⵠᐃΔⵠ !== "number") return "0";
			else if (ⵠᐃΔⵠ >= 1e4) {
				var ⵠᐃᐃⲆᐃ = Math.floor(Math.log10(ⵠᐃΔⵠ)) - ᐃᐃΔⵠ;
				var ΔΔᐃⲆⲆⲆᐃ = Math.max(0, 3 - ⵠᐃᐃⲆᐃ);
				var ⵠᐃᐃⵠ = Math.floor(ⵠᐃΔⵠ / 1e3)[ⲆᐃⲆⵠΔΔⲆ[299]]();
				if (ΔΔᐃⲆⲆⲆᐃ) {
					ⵠᐃᐃⵠ += "." + (ⵠᐃΔⵠ % 1e3 / 1e3)[ⲆᐃⲆⵠΔΔⲆ[299]]().substring(ᐃⲆᐃⵠ).substring(0, ΔΔᐃⲆⲆⲆᐃ);
					for (var Ⲇᐃ = ⵠᐃᐃⵠ.length - ᐃⲆΔ, ΔⲆⵠᐃⵠⵠΔ = 0; Ⲇᐃ > ⵠⲆΔ; Ⲇᐃ--) {
						if (ⵠᐃᐃⵠ[Ⲇᐃ] != "0") break;
						else ΔⲆⵠᐃⵠⵠΔ++
					}
					ⵠᐃᐃⵠ = ⵠᐃᐃⵠ.substring(0, ⵠᐃᐃⵠ.length - ΔⲆⵠᐃⵠⵠΔ);
					if (ⵠᐃᐃⵠ[ⵠᐃᐃⵠ.length - 1] == ".") ⵠᐃᐃⵠ = ⵠᐃᐃⵠ.substring(0, ⵠᐃᐃⵠ.length - Δⵠᐃ)
				}
				ⵠᐃᐃⵠ += "k";
				return ⵠᐃᐃⵠ
			} else return ⵠᐃΔⵠ[ⲆᐃⲆⵠΔΔⲆ[299]]()
		},
		"ⲆΔⲆΔᐃΔᐃ": function(Δᐃᐃ) {
			return Δᐃᐃ * (2 - Δᐃᐃ)
		},
		"ⲆⲆⵠᐃⲆΔΔ": function(Δᐃᐃ) {
			return --Δᐃᐃ * Δᐃᐃ * Δᐃᐃ + ᐃⲆΔ
		},
		"ᐃⵠⵠΔⵠ": function(Δᐃᐃ) {
			return Δᐃᐃ < .5 ? ΔΔⲆᐃ * Δᐃᐃ * Δᐃᐃ : -1 + (4 - ⲆⲆΔⲆ * Δᐃᐃ) * Δᐃᐃ
		},
		"ΔᐃⵠᐃⵠⵠⲆ": function(Δᐃᐃ) {
			return Δᐃᐃ < .5 ? ⵠⲆⲆⵠ * Δᐃᐃ * Δᐃᐃ * Δᐃᐃ : (Δᐃᐃ - 1) * (2 * Δᐃᐃ - ᐃᐃΔⵠ) * (ΔΔⲆᐃ * Δᐃᐃ - ᐃⲆᐃᐃ) + ᐃⲆΔ
		},
		"ⲆⵠⵠΔΔΔΔⲆΔ": function(Δᐃᐃ) {
			return Δᐃᐃ < .5 ? ⲆΔⲆᐃᐃ * Δᐃᐃ * Δᐃᐃ * Δᐃᐃ * Δᐃᐃ : 1 - 8 * --Δᐃᐃ * Δᐃᐃ * Δᐃᐃ * Δᐃᐃ
		},
		"Ⲇⵠᐃᐃᐃⵠᐃ": function(Δᐃᐃ) {
			return ⲆᐃΔ - --Δᐃᐃ * Δᐃᐃ * Δᐃᐃ * Δᐃᐃ
		},
		"ᐃΔⵠΔᐃΔᐃ": function(Δᐃᐃ) {
			return 1 + --Δᐃᐃ * Δᐃᐃ * Δᐃᐃ * Δᐃᐃ * Δᐃᐃ
		},
		"ΔᐃΔⵠ": function(Ⲇⵠⵠ, ⲆⵠⲆ, ΔⵠᐃⲆ, ⲆΔⲆⵠ, ⵠᐃⵠΔⵠᐃⵠ, ᐃⵠⲆᐃⵠⲆⵠ) {
			this.Ⲇⵠⵠ = Ⲇⵠⵠ;
			this.ⲆⵠⲆ = ⲆⵠⲆ;
			this.max = ΔⵠᐃⲆ;
			this.min = ⲆΔⲆⵠ;
			this.ⵠᐃⵠΔⵠᐃⵠ = ⵠᐃⵠΔⵠᐃⵠ;
			this.ᐃⵠⲆᐃⵠⲆⵠ = ᐃⵠⲆᐃⵠⲆⵠ;
			this.ⲆᐃⲆΔᐃ = 0;
			this.ⲆᐃⲆ = function() {
				if (this.Ⲇⵠⵠ) {
					var ⲆⵠⲆ = this.ⲆⵠⲆ + ⲆΔΔⲆ * this.ⵠᐃⵠΔⵠᐃⵠ;
					if (ⲆⵠⲆ > this.max) {
						this.ⲆⵠⲆ = this.max;
						this.Ⲇⵠⵠ = ΔⲆΔᐃΔ;
						return ⵠⲆⵠⵠΔ
					} else this.ⲆⵠⲆ = ⲆⵠⲆ
				} else {
					var ⲆⵠⲆ = this.ⲆⵠⲆ - ⲆΔΔⲆ * this.ᐃⵠⲆᐃⵠⲆⵠ;
					if (ⲆⵠⲆ < this.min) {
						this.ⲆⵠⲆ = this.min;
						this.Ⲇⵠⵠ = ⵠΔΔⵠᐃ
					} else this.ⲆⵠⲆ = ⲆⵠⲆ
				}
			};
			return false
		},
		"ⲆⲆⲆⲆΔ": function(ⲆΔᐃᐃⵠ, ⵠⲆᐃⲆᐃ, ΔⵠΔΔΔ, ⲆⵠⵠⲆⲆ, Ⲇⵠ, ΔⵠΔⲆⲆ) {
			this.ⲆΔᐃᐃⵠ = ⲆΔᐃᐃⵠ;
			this.ⵠⲆᐃⲆᐃ = ⵠⲆᐃⲆᐃ, this.ΔⵠΔΔΔ = ΔⵠΔΔΔ, this.ⲆⵠⵠⲆⲆ = ⲆⵠⵠⲆⲆ, this.x = Ⲇⵠ, this.ΔⵠΔⲆⲆ = ΔⵠΔⲆⲆ, this.ⵠⵠᐃᐃᐃⲆᐃ = function() {
				this.x = this.ᐃᐃΔⵠᐃᐃΔⵠⵠ;
				this.ⵠⲆᐃⲆᐃ = 0
			}, this.ⲆᐃⲆᐃΔ = function(Ⲇⵠ) {
				if (Ⲇⵠ !== this.ΔⵠΔⲆⲆ) {
					this.ΔⵠΔⲆⲆ = Ⲇⵠ;
					this.ⲆⵠⵠⲆⲆ = this.x;
					this.ⵠⲆᐃⲆᐃ = ᐃᐃⲆ
				}
				if (this.ΔⵠΔⲆⲆ !== this.x) {
					this.ⵠⲆᐃⲆᐃ += ⲆΔΔⲆ;
					if (this.ⵠⲆᐃⲆᐃ > this.ΔⵠΔΔΔ) this.x = this.ΔⵠΔⲆⲆ;
					else {
						var ᐃⲆⵠⲆ = this.ⲆΔᐃᐃⵠ(this.ⵠⲆᐃⲆᐃ / this.ΔⵠΔΔΔ);
						this.x = this.ⲆⵠⵠⲆⲆ + (this.ΔⵠΔⲆⲆ - this.ⲆⵠⵠⲆⲆ) * ᐃⲆⵠⲆ
					}
				}
			}
		},
		"ⵠΔΔⲆⲆΔΔ": function(ⲆΔᐃᐃⵠ, ⵠⲆᐃⲆᐃ, ΔⵠΔΔΔ, ⲆⵠⵠⲆⲆ, ⵠⵠⲆΔᐃ, Ⲇⵠ, ᐃⵠⲆ, ΔⵠΔⲆⲆ, ⲆΔΔⲆΔΔΔ) {
			this.ⲆΔᐃᐃⵠ = ⲆΔᐃᐃⵠ;
			this.ⵠⲆᐃⲆᐃ = ⵠⲆᐃⲆᐃ, this.ΔⵠΔΔΔ = ΔⵠΔΔΔ, this.ⲆⵠⵠⲆⲆ = ⲆⵠⵠⲆⲆ, this.ⵠⵠⲆΔᐃ = ⵠⵠⲆΔᐃ, this.x = Ⲇⵠ, this.y = ᐃⵠⲆ, this.ΔⵠΔⲆⲆ = ΔⵠΔⲆⲆ, this.ⲆΔΔⲆΔΔΔ = ⲆΔΔⲆΔΔΔ, this.ⲆᐃⲆᐃΔ = function(ⲆΔⲆΔ) {
				if (ⲆΔⲆΔ.x != this.ΔⵠΔⲆⲆ || ⲆΔⲆΔ.y != this.ⲆΔΔⲆΔΔΔ) {
					this.ΔⵠΔⲆⲆ = ⲆΔⲆΔ.x;
					this.ⲆΔΔⲆΔΔΔ = ⲆΔⲆΔ.y;
					this.ⲆⵠⵠⲆⲆ = this.x;
					this.ⵠⵠⲆΔᐃ = this.y;
					this.ⵠⲆᐃⲆᐃ = 0
				}
				if (this.ΔⵠΔⲆⲆ != this.x || this.ⲆΔΔⲆΔΔΔ != this.y) {
					this.ⵠⲆᐃⲆᐃ += ⲆΔΔⲆ;
					if (this.ⵠⲆᐃⲆᐃ > this.ΔⵠΔΔΔ) {
						this.x = this.ΔⵠΔⲆⲆ;
						this.y = this.ⲆΔΔⲆΔΔΔ
					} else {
						var ᐃⲆⵠⲆ = this.ⲆΔᐃᐃⵠ(this.ⵠⲆᐃⲆᐃ / this.ΔⵠΔΔΔ);
						this.x = this.ⲆⵠⵠⲆⲆ + (this.ΔⵠΔⲆⲆ - this.ⲆⵠⵠⲆⲆ) * ᐃⲆⵠⲆ;
						this.y = this.ⵠⵠⲆΔᐃ + (this.ⲆΔΔⲆΔΔΔ - this.ⵠⵠⲆΔᐃ) * ᐃⲆⵠⲆ
					}
				}
			}
		},
		"ΔⲆⵠΔᐃⵠᐃ": function(ᐃⵠΔΔᐃ) {
			var ΔⲆⵠⵠᐃ = "";
			for (var Ⲇᐃ = 0; Ⲇᐃ < ᐃⵠΔΔᐃ; Ⲇᐃ++) {
				ΔⲆⵠⵠᐃ += String.fromCharCode(48 + Math.floor(Math.random() * 74))
			}
			return ΔⲆⵠⵠᐃ
		},
		"ⲆⵠᐃⵠΔᐃᐃ": function(name, ᐃᐃᐃⲆⲆΔΔ) {
			if (!ᐃᐃᐃⲆⲆΔΔ) ᐃᐃᐃⲆⲆΔΔ = location[ⲆᐃⲆⵠΔΔⲆ[144]];
			name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
			var ᐃⵠΔΔΔⵠⲆ = "[\\?&]" + name + "=([^&#]*)";
			var ᐃⲆⵠⲆΔⵠᐃ = new RegExp(ᐃⵠΔΔΔⵠⲆ);
			var ΔⲆΔᐃⲆΔⲆ = ᐃⲆⵠⲆΔⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[280]](ᐃᐃᐃⲆⲆΔΔ);
			return ΔⲆΔᐃⲆΔⲆ == null ? null : ΔⲆΔᐃⲆΔⲆ[1]
		},
		"ΔⲆᐃⲆΔ": function(ᐃⵠⵠⲆⵠΔΔ) {
			let ᐃⲆᐃⵠⲆⵠᐃ = "";
			const ᐃⵠΔΔᐃ = ᐃⵠⵠⲆⵠΔΔ.length;
			for (let Ⲇᐃ = ⵠⵠⵠ; Ⲇᐃ < ᐃⵠΔΔᐃ; Ⲇᐃ++) ᐃⲆᐃⵠⲆⵠᐃ += String.fromCharCode(ᐃⵠⵠⲆⵠΔΔ[Ⲇᐃ]);
			return ᐃⲆᐃⵠⲆⵠᐃ
		},
		"ΔᐃᐃΔⵠΔⲆ": function(ΔⲆⵠ, ⵠⲆⵠΔᐃ) {
			if (ΔⲆⵠ.x >= ⵠⲆⵠΔᐃ.x && ΔⲆⵠ.x <= ⵠⲆⵠΔᐃ.x + ⵠⲆⵠΔᐃ.w && ΔⲆⵠ.y >= ⵠⲆⵠΔᐃ.y && ΔⲆⵠ.y <= ⵠⲆⵠΔᐃ.y + ⵠⲆⵠΔᐃ.ⲆΔⲆ) return true;
			return ᐃΔΔⵠⲆ
		},
		"ΔΔⲆⵠᐃᐃⵠ": function(ⵠΔⵠⲆⲆΔΔ, ⲆⲆΔⵠⵠⵠᐃ, ⲆᐃΔᐃᐃⵠⲆ, ⵠⲆΔⵠⲆΔⲆ, ⲆᐃⵠⵠⲆΔⵠ, ᐃΔΔⲆΔⲆᐃ, ⲆᐃᐃΔⵠᐃΔ, ΔᐃⲆᐃⲆΔⲆ) {
			if (Math.max(ⵠΔⵠⲆⲆΔΔ, ⲆᐃⵠⵠⲆΔⵠ) < Math.min(ⲆⲆΔⵠⵠⵠᐃ, ᐃΔΔⲆΔⲆᐃ) && Math.max(ⲆᐃΔᐃᐃⵠⲆ, ⲆᐃᐃΔⵠᐃΔ) < Math.min(ⵠⲆΔⵠⲆΔⲆ, ΔᐃⲆᐃⲆΔⲆ)) return 1;
			return 0
		},
		"ᐃᐃΔᐃⵠ": function(p1, p2, ⲆⲆᐃ) {
			return (ᐃⲆΔ - ⲆⲆᐃ) * p1 + ⲆⲆᐃ * p2
		},
		"ΔⲆᐃΔⵠⵠΔ": function(ⵠⵠⲆⵠⵠᐃⵠ) {
			return ⵠⵠⲆⵠⵠᐃⵠ.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;")
		}
	};
	const ΔⵠΔΔⲆ = ΔⲆΔᐃᐃ;
	Math.sign = Math.sign || function(ⵠᐃΔⵠ) {
		if (ΔΔᐃ === ⵠᐃΔⵠ) return ⵠⵠⵠ;
		else if (ⵠᐃΔⵠ > 0) return 1;
		else return -ⵠΔᐃ
	};
	const ΔΔⲆΔⲆᐃⲆ = ⵠᐃᐃⵠΔ;
	Math.log10 = Math.log10 || function(Ⲇⵠ) {
		return Math.log(Ⲇⵠ) / Math.ⵠⵠΔΔⵠᐃΔⵠᐃ
	};

	function ⲆⲆⲆᐃⵠᐃⵠ(ⲆᐃΔᐃⵠⲆⵠ, ᐃΔΔΔᐃΔⵠ, ΔΔΔΔΔⵠᐃ) {
		ⵠᐃⲆᐃΔⵠⲆ(ᐃⵠΔⲆⲆ, ⲆᐃΔᐃⵠⲆⵠ, ᐃΔΔΔᐃΔⵠ, ΔΔΔΔΔⵠᐃ);
		const ⲆⵠΔΔⲆᐃⲆ = ᐃΔᐃΔᐃᐃᐃ(ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[ⲆⲆΔⲆ], ⲆⲆⵠΔ[ᐃᐃᐃ], ⲆⲆⵠΔ[1]);
		const ΔΔᐃⵠⵠᐃᐃΔᐃ = ⵠᐃᐃⵠⲆⲆᐃ(ⲆⲆⵠΔ[2], ⲆⲆⵠΔ[ⵠⲆΔ]);
		const ΔᐃⲆⵠᐃⲆⲆ = ~(ⲆⵠΔΔⲆᐃⲆ & 48441) & (ⲆⵠΔΔⲆᐃⲆ | 48441);
		return ΔᐃⲆⵠᐃⲆⲆ
	}

	function ⲆⲆⵠᐃᐃᐃᐃ(Ⲇⵠⵠⵠᐃᐃⵠ, ⵠᐃᐃⲆⲆᐃᐃ, ΔⵠΔⵠⵠᐃᐃ, ⲆⲆᐃΔⲆΔⲆ, ⵠᐃΔᐃᐃᐃᐃ) {
		const ⵠⲆⵠⲆΔⲆⵠ = ~(Ⲇⵠⵠⵠᐃᐃⵠ & 14178) & (Ⲇⵠⵠⵠᐃᐃⵠ | 14178);
		const ⵠΔⵠⲆᐃᐃΔ = (ⵠᐃᐃⲆⲆᐃᐃ + 24724) % 65382;
		const ⵠᐃⵠᐃⲆΔⵠ = ~(11125 & ΔⵠΔⵠⵠᐃᐃ) & ΔⵠΔⵠⵠᐃᐃ | ~(ΔⵠΔⵠⵠᐃᐃ & 11125) & 11125;
		const ΔΔⵠⵠⵠΔⲆ = ~(ⲆⲆᐃΔⲆΔⲆ & 23010) & (23010 | ⲆⲆᐃΔⲆΔⲆ);
		const ⵠΔΔᐃΔⲆⲆ = (22695477 * (ⵠᐃΔᐃᐃᐃᐃ + 50647) + 1) % 4294967296;
		const ΔᐃⵠΔⵠᐃⲆ = ⲆᐃⵠᐃⲆⵠΔ(ⵠⲆⵠⲆΔⲆⵠ, ⵠΔⵠⲆᐃᐃΔ);
		const ΔⲆⵠⲆⲆᐃⵠⵠⲆ = ᐃⲆᐃⵠⵠᐃⵠ(ⵠᐃⵠᐃⲆΔⵠ, ΔΔⵠⵠⵠΔⲆ, ⵠΔΔᐃΔⲆⲆ);
		const ΔⵠⵠΔⲆΔⵠ = 21088 ^ ΔᐃⵠΔⵠᐃⲆ;
		return ΔⵠⵠΔⲆΔⵠ
	}
	const ⲆᐃⵠᐃΔ = ᐃⵠΔⲆΔ;
	const ⵠΔⲆⵠⵠ = ᐃⵠΔⲆΔ;
	const Ⲇᐃⵠⵠᐃ = Ⲇᐃⵠᐃᐃ;
	(function(ⲆΔⲆᐃΔⲆᐃ) {
		var ⲆᐃⲆⲆⲆⲆⵠ = false;
		typeof ⵠⵠⲆⵠⵠⲆⲆ === "function" && ⵠⵠⲆⵠⵠⲆⲆ.ΔΔⵠΔⵠᐃᐃᐃⵠ && (ⵠⵠⲆⵠⵠⲆⲆ(ⲆΔⲆᐃΔⲆᐃ), ⲆᐃⲆⲆⲆⲆⵠ = true);
		typeof ᐃΔⲆⵠⲆᐃᐃ === ⵠ[328] && (ⵠⲆΔᐃⵠⵠᐃⲆⵠ[ⲆᐃⲆⵠΔΔⲆ[176]] = ⲆΔⲆᐃΔⲆᐃ(), ⲆᐃⲆⲆⲆⲆⵠ = ⵠⲆⵠⵠᐃ);
		if (!ⲆᐃⲆⲆⲆⲆⵠ) {
			var ᐃⲆᐃⲆⲆⵠⲆ = ⵠⵠⲆΔᐃᐃᐃⲆΔ.ᐃΔΔⵠ;
			var ⲆᐃᐃⲆⲆ = ⵠⵠⲆΔᐃᐃᐃⲆΔ.ᐃΔΔⵠ = ⲆΔⲆᐃΔⲆᐃ();
			ⲆᐃᐃⲆⲆ.ᐃⲆⵠΔⲆⵠⲆΔΔ = function() {
				ⵠⵠⲆΔᐃᐃᐃⲆΔ.ᐃΔΔⵠ = ᐃⲆᐃⲆⲆⵠⲆ;
				return ⲆᐃᐃⲆⲆ
			}
		}
	})((function() {
		function ΔΔᐃᐃᐃΔⵠ() {
			var Ⲇᐃ = 0;
			var ⵠⵠⵠⲆΔ = {};
			for (; Ⲇᐃ < arguments.length; Ⲇᐃ++) {
				var ⲆᐃΔⵠΔ = arguments[Ⲇᐃ];
				for (var ⲆⵠᐃⵠΔ in ⲆᐃΔⵠΔ) {
					ⵠⵠⵠⲆΔ[ⲆⵠᐃⵠΔ] = ⲆᐃΔⵠΔ[ⲆⵠᐃⵠΔ]
				}
			}
			return ⵠⵠⵠⲆΔ
		}

		function ⵠΔⲆΔⲆ(ⲆΔᐃᐃᐃᐃᐃ) {
			function ⲆᐃᐃⲆⲆ(ⲆⵠᐃⵠΔ, ⲆⲆⵠⵠ, ⲆᐃΔⵠΔ) {
				var ⵠⵠⵠⲆΔ;
				if ("undefined" === typeof document) {
					return
				}
				if (1 < arguments.length) {
					ⲆᐃΔⵠΔ = ΔΔᐃᐃᐃΔⵠ({
						path: "/"
					}, ⲆᐃᐃⲆⲆ.ⵠⵠⲆᐃⵠΔᐃ, ⲆᐃΔⵠΔ);
					if (typeof ⲆᐃΔⵠΔ.expires === "number") {
						var ΔⵠⲆᐃΔ = new Date;
						ΔⵠⲆᐃΔ.setMilliseconds(ΔⵠⲆᐃΔ.getMilliseconds() + ⲆᐃΔⵠΔ.expires * 864e5);
						ⲆᐃΔⵠΔ.expires = ΔⵠⲆᐃΔ
					}
					try {
						ⵠⵠⵠⲆΔ = JSON.stringify(ⲆⲆⵠⵠ);
						/^[\{\[]/.test(ⵠⵠⵠⲆΔ) && (ⲆⲆⵠⵠ = ⵠⵠⵠⲆΔ)
					} catch (ᐃⲆⵠⲆ) {}!ⲆΔᐃᐃᐃᐃᐃ.write ? ⲆⲆⵠⵠ = encodeURIComponent(String(ⲆⲆⵠⵠ)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent) : ⲆⲆⵠⵠ = ⲆΔᐃᐃᐃᐃᐃ.write(ⲆⲆⵠⵠ, ⲆⵠᐃⵠΔ);
					ⲆⵠᐃⵠΔ = encodeURIComponent(String(ⲆⵠᐃⵠΔ));
					ⲆⵠᐃⵠΔ = ⲆⵠᐃⵠΔ.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
					ⲆⵠᐃⵠΔ = ⲆⵠᐃⵠΔ.replace(/[\(\)]/g, escape);
					return document[ⲆᐃⲆⵠΔΔⲆ[143]] = [ⲆⵠᐃⵠΔ, "=", ⲆⲆⵠⵠ, ⲆᐃΔⵠΔ.expires ? "; expires=" + ⲆᐃΔⵠΔ.expires[ⲆᐃⲆⵠΔΔⲆ[146]]() : "", ⲆᐃΔⵠΔ.path ? "; path=" + ⲆᐃΔⵠΔ.path : "", ⲆᐃΔⵠΔ.domain ? "; domain=" + ⲆᐃΔⵠΔ.domain : "", ⲆᐃΔⵠΔ.ⲆⲆⲆᐃⲆⵠᐃⵠᐃ ? "; secure" : ""].join("")
				}
				if (!ⲆⵠᐃⵠΔ) {
					ⵠⵠⵠⲆΔ = {}
				}
				var ᐃΔᐃᐃΔⲆⲆ = document[ⲆᐃⲆⵠΔΔⲆ[143]] ? document[ⲆᐃⲆⵠΔΔⲆ[143]].split("; ") : [];
				var ⵠᐃΔᐃᐃΔΔ = /(%[0-9A-Z]{2})+/g;
				var Ⲇᐃ = ᐃᐃᐃ;
				for (; Ⲇᐃ < ᐃΔᐃᐃΔⲆⲆ.length; Ⲇᐃ++) {
					var ⵠⲆⵠΔᐃⵠⲆ = ᐃΔᐃᐃΔⲆⲆ[Ⲇᐃ].split("=");
					var ⵠΔΔⵠⵠ = ⵠⲆⵠΔᐃⵠⲆ.slice(ᐃⲆΔ).join("=");
					if (ⵠΔΔⵠⵠ.charAt(ΔΔᐃ) === '"') {
						ⵠΔΔⵠⵠ = ⵠΔΔⵠⵠ.slice(ⵠΔᐃ, -ᐃⲆΔ)
					}
					try {
						var name = ⵠⲆⵠΔᐃⵠⲆ[ᐃᐃᐃ].replace(ⵠᐃΔᐃᐃΔΔ, decodeURIComponent);
						ⵠΔΔⵠⵠ = ⲆΔᐃᐃᐃᐃᐃ.read ? ⲆΔᐃᐃᐃᐃᐃ.read(ⵠΔΔⵠⵠ, name) : ⲆΔᐃᐃᐃᐃᐃ(ⵠΔΔⵠⵠ, name) || ⵠΔΔⵠⵠ.replace(ⵠᐃΔᐃᐃΔΔ, decodeURIComponent);
						if (this.json) {
							try {
								ⵠΔΔⵠⵠ = JSON.parse(ⵠΔΔⵠⵠ)
							} catch (ᐃⲆⵠⲆ) {}
						}
						if (name === ⲆⵠᐃⵠΔ) {
							ⵠⵠⵠⲆΔ = ⵠΔΔⵠⵠ;
							break
						}
						if (!ⲆⵠᐃⵠΔ) {
							ⵠⵠⵠⲆΔ[name] = ⵠΔΔⵠⵠ
						}
					} catch (ᐃⲆⵠⲆ) {}
				}
				return ⵠⵠⵠⲆΔ
			}
			ⲆᐃᐃⲆⲆ.set = ⲆᐃᐃⲆⲆ;
			ⲆᐃᐃⲆⲆ.get = function(ⲆⵠᐃⵠΔ) {
				return ⲆᐃᐃⲆⲆ.call(ⲆᐃᐃⲆⲆ, ⲆⵠᐃⵠΔ)
			};
			ⲆᐃᐃⲆⲆ.ⲆΔΔΔΔΔΔⵠᐃ = function() {
				return ⲆᐃᐃⲆⲆ.apply({
					json: ⵠΔΔⵠᐃ
				}, [].slice.call(arguments))
			};
			ⲆᐃᐃⲆⲆ.ⵠⵠⲆᐃⵠΔᐃ = {};
			ⲆᐃᐃⲆⲆ.remove = function(ⲆⵠᐃⵠΔ, ⲆᐃΔⵠΔ) {
				ⲆᐃᐃⲆⲆ(ⲆⵠᐃⵠΔ, "", ΔΔᐃᐃᐃΔⵠ(ⲆᐃΔⵠΔ, {
					expires: -Δⵠᐃ
				}))
			};
			ⲆᐃᐃⲆⲆ.ⲆⲆⵠΔⵠⲆⵠⲆᐃ = ⵠΔⲆΔⲆ;
			return ⲆᐃᐃⲆⲆ
		}
		return ⵠΔⲆΔⲆ((function() {}))
	}));
	const ⲆⵠⵠΔᐃ = ⵠΔΔΔΔ;
	const ᐃⵠΔⲆⵠ = ⲆᐃΔΔⲆ;
	const ⵠΔⲆⵠΔ = ᐃⵠᐃᐃⲆ;

	function ᐃⲆᐃⵠⵠᐃⵠ(ΔⲆΔⲆᐃⲆⲆ, ᐃⲆΔᐃΔᐃΔ, ⲆᐃⵠᐃᐃΔᐃ) {
		const ᐃⵠⵠⵠⲆᐃⲆ = ((49526 + ΔⲆΔⲆᐃⲆⲆ) * 22695477 + 1) % 4294967296;
		const ⵠⵠΔΔⵠⵠⵠ = ~(49794 & ᐃⲆΔᐃΔᐃΔ) & 49794 | ~(49794 & ᐃⲆΔᐃΔᐃΔ) & ᐃⲆΔᐃΔᐃΔ;
		const ᐃⲆΔⲆⵠⲆⵠ = ~(ⲆᐃⵠᐃᐃΔᐃ & 52262) & 52262 | ~(52262 & ⲆᐃⵠᐃᐃΔᐃ) & ⲆᐃⵠᐃᐃΔᐃ;
		const ⵠᐃⲆⵠΔΔⵠ = ᐃᐃΔᐃⵠᐃᐃ(ᐃⵠⵠⵠⲆᐃⲆ, ⵠⵠΔΔⵠⵠⵠ, ᐃⲆΔⲆⵠⲆⵠ, ᐃⵠⵠⵠⲆᐃⲆ, ⵠⵠΔΔⵠⵠⵠ, ᐃⲆΔⲆⵠⲆⵠ);
		const ΔΔΔᐃᐃⵠᐃⵠⲆ = ⲆΔΔⲆΔᐃⲆ(ᐃⵠⵠⵠⲆᐃⲆ, ⵠⵠΔΔⵠⵠⵠ, ᐃⲆΔⲆⵠⲆⵠ, ᐃⵠⵠⵠⲆᐃⲆ, ⵠⵠΔΔⵠⵠⵠ);
		const ⵠⲆᐃΔΔⲆⵠ = 8460 ^ ⵠᐃⲆⵠΔΔⵠ;
		return ⵠⲆᐃΔΔⲆⵠ
	}
	const ᐃⵠⲆⲆΔΔᐃ = ⲆΔⲆⵠΔ;

	function ᐃᐃⵠΔᐃⵠⵠ() {
		this.ᐃᐃⵠⲆⵠⲆⲆ = ᐃᐃᐃ, this.ⲆⲆΔⲆᐃ = Δⵠᐃ, this.IDLE = ⲆⲆΔⲆ, this.ⲆᐃⲆΔⲆΔⲆ = 0, this.ᐃⲆⲆΔⲆⲆᐃΔΔ = ⲆᐃΔ, this.ⲆⲆⲆⵠ = {
			y: 0,
			x: ΔΔᐃ
		};
		this.ⲆⲆⵠΔⲆΔⵠ = ⵠⵠⵠ;
		this.ⵠΔⵠⵠᐃΔᐃ = ᐃᐃⲆ;
		this.angle = 0;
		this.state = this.IDLE;
		this.ΔⲆⲆᐃ = this.ⲆᐃⲆΔⲆΔⲆ;
		this.down = function() {
			this.state = this.ᐃᐃⵠⲆⵠⲆⲆ
		};
		this.up = function() {
			this.state = this.ⲆⲆΔⲆᐃ
		};
		this.ⲆᐃⲆ = function() {
			if (this.ⲆⲆⵠΔⲆΔⵠ != this.ⲆⲆⲆⵠ.x || this.ⲆⲆⲆⵠ.y != this.ⵠΔⵠⵠᐃΔᐃ) {
				this.ⲆⲆⵠΔⲆΔⵠ = this.ⲆⲆⲆⵠ.x;
				this.ⵠΔⵠⵠᐃΔᐃ = this.ⲆⲆⲆⵠ.y;
				return true
			}
			return ΔⵠΔΔⲆ
		}
	}
	const ⵠᐃⵠⲆⲆⲆΔΔⵠ = ⲆⵠⲆΔᐃᐃΔ;

	function ⲆⵠⵠΔⵠⵠⲆ(ΔⲆⵠⵠᐃ) {
		return ᐃᐃᐃⲆΔⵠᐃ(ΔⲆⵠⵠᐃ, 51513, 51358, 37712, 36725, 27316)
	}

	function ⲆΔᐃⲆΔⲆᐃ(ⲆᐃⲆⵠⲆⵠΔ, ᐃⲆᐃⵠⵠΔⲆ, ⵠᐃⲆⲆⲆ, ᐃⲆⲆᐃⲆⲆΔ, ΔΔⲆⲆⲆⵠⵠ, ᐃⵠⵠᐃᐃⲆΔ) {
		ᐃⵠᐃⲆΔΔᐃ(ᐃⵠΔⲆⲆ, ⲆᐃⲆⵠⲆⵠΔ, ᐃⲆᐃⵠⵠΔⲆ, ⵠᐃⲆⲆⲆ, ᐃⲆⲆᐃⲆⲆΔ, ΔΔⲆⲆⲆⵠⵠ, ᐃⵠⵠᐃᐃⲆΔ);
		const ᐃᐃⲆⵠⵠⵠⲆ = ΔⲆΔΔᐃⵠⵠ(ⲆⲆⵠΔ[ΔΔᐃ], ⲆⲆⵠΔ[Δⵠᐃ], ⲆⲆⵠΔ[2], ⲆⲆⵠΔ[ᐃⵠΔⵠ], ⲆⲆⵠΔ[ᐃΔⵠⵠ], ⲆⲆⵠΔ[ⲆⲆᐃᐃ]);
		const ⲆᐃΔΔΔⲆᐃ = ⲆⲆᐃⲆᐃⵠΔ(ⲆⲆⵠΔ[ΔΔᐃ], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[2], ⲆⲆⵠΔ[3]);
		const ᐃΔΔⲆⵠᐃⵠ = (8 << ((ᐃᐃⲆⵠⵠⵠⲆ ^ ⲆᐃΔΔΔⲆᐃ) >> 24 & 255)) + (0 << ((ᐃᐃⲆⵠⵠⵠⲆ ^ ⲆᐃΔΔΔⲆᐃ) >> 8 & 255)) + (24 << ((ᐃᐃⲆⵠⵠⵠⲆ ^ ⲆᐃΔΔΔⲆᐃ) >> 0 & 255)) + (16 << ((ᐃᐃⲆⵠⵠⵠⲆ ^ ⲆᐃΔΔΔⲆᐃ) >> 16 & ᐃⵠΔΔⵠ));
		return ᐃΔΔⲆⵠᐃⵠ
	}

	function ⲆΔⲆⵠᐃΔⲆ(ⵠⵠⲆΔⵠⲆΔ, ΔΔⵠᐃⵠΔⵠ, ⵠⲆΔΔᐃ, ⵠΔΔⵠΔᐃⵠ, ΔⵠⲆⵠⵠⲆⵠ, ⲆᐃⵠᐃΔⵠᐃ) {
		const ᐃⲆⲆᐃⵠᐃⲆ = ~(ⵠⵠⲆΔⵠⲆΔ & 439) & 439 | ~(439 & ⵠⵠⲆΔⵠⲆΔ) & ⵠⵠⲆΔⵠⲆΔ;
		const ⲆⵠΔΔⲆⲆᐃ = (ⲆΔⲆⵠΔ << (ΔΔⵠᐃⵠΔⵠ >> 0 & 255)) + (24 << (ΔΔⵠᐃⵠΔⵠ >> 24 & 255)) + (0 << (ΔΔⵠᐃⵠΔⵠ >> 16 & ΔⲆΔⲆⲆ)) + (8 << (ΔΔⵠᐃⵠΔⵠ >> 8 & 255));
		const ΔΔⵠᐃⵠⵠⲆ = (16 << (ⵠⲆΔΔᐃ >> ᐃⵠⲆⲆΔΔᐃ & 255)) + (8 << (ⵠⲆΔΔᐃ >> 0 & 255)) + (ⵠⲆΔ << (ⵠⲆΔΔᐃ >> 24 & 255)) + (24 << (ⵠⲆΔΔᐃ >> 8 & 255));
		const ⲆⲆΔⲆⲆᐃᐃ = ⵠΔΔⵠΔᐃⵠ ^ 64393;
		const ᐃᐃΔΔⲆⵠⲆ = ΔⵠⲆⵠⵠⲆⵠ ^ 25606;
		const ⵠᐃᐃⲆⲆⲆΔ = (41027 | ⲆᐃⵠᐃΔⵠᐃ) & ~(ⲆᐃⵠᐃΔⵠᐃ & 41027);
		const ⲆΔΔΔⲆⵠⵠ = ⵠΔⵠⵠⵠᐃⲆ(ᐃⲆⲆᐃⵠᐃⲆ, ⲆⵠΔΔⲆⲆᐃ, ΔΔⵠᐃⵠⵠⲆ, ⲆⲆΔⲆⲆᐃᐃ, ᐃᐃΔΔⲆⵠⲆ, ⵠᐃᐃⲆⲆⲆΔ);
		const ⲆΔⵠⵠΔⲆᐃ = ⵠⲆΔⲆⲆⲆⲆ(ᐃⲆⲆᐃⵠᐃⲆ, ⲆⵠΔΔⲆⲆᐃ, ΔΔⵠᐃⵠⵠⲆ, ⲆⲆΔⲆⲆᐃᐃ);
		const ⵠΔⲆⲆᐃⵠᐃ = (ᐃᐃⲆ << ((ⲆΔΔΔⲆⵠⵠ ^ ⲆΔⵠⵠΔⲆᐃ) >> 8 & 255)) + (24 << ((ⲆΔΔΔⲆⵠⵠ ^ ⲆΔⵠⵠΔⲆᐃ) >> ⵠⵠⵠ & 255)) + (8 << ((ⲆΔΔΔⲆⵠⵠ ^ ⲆΔⵠⵠΔⲆᐃ) >> 16 & 255)) + (16 << ((ⲆΔΔΔⲆⵠⵠ ^ ⲆΔⵠⵠΔⲆᐃ) >> 24 & 255));
		return ⵠΔⲆⲆᐃⵠᐃ
	}

	function ᐃⵠᐃⲆⲆⲆⲆ() {
		this.ⲆᐃⲆΔⲆΔᐃ = function() {
			this.ΔΔⲆΔⲆ = 81;
			this.ⵠΔⵠⵠΔ = 68;
			this.ΔᐃΔⲆⵠ = 90;
			this.ᐃᐃⵠⲆⵠⲆⲆ = 83
		};
		this.ΔᐃⵠⵠᐃΔⲆ = function() {
			this.ΔΔⲆΔⲆ = 65;
			this.ⵠΔⵠⵠΔ = 68;
			this.ΔᐃΔⲆⵠ = 87;
			this.ⵠΔᐃⵠΔ = 83
		};
		this.ⲆⲆΔⲆᐃ = ᐃᐃⲆ, this.ᐃᐃⵠⲆⵠⲆⲆ = 1, this.ⲆΔᐃᐃⵠᐃⲆ = 49;
		this.ⵠⵠᐃⵠᐃᐃΔ = 50;
		this.ΔᐃⲆⵠⲆᐃⲆ = 51;
		this.ⲆΔⵠⲆᐃΔⵠ = 52;
		this.ⵠⵠΔⵠⲆᐃⵠⵠⵠ = 53;
		this.ⲆΔΔᐃⵠΔⵠ = ⲆⵠⵠΔᐃ;
		this.ΔᐃᐃⵠΔⵠᐃ = 37;
		this.ΔⲆⵠⲆⵠⵠΔ = 39;
		this.ᐃᐃΔⵠᐃΔᐃ = 38;
		this.ΔΔⵠⵠᐃⵠⵠ = 40;
		this.ΔⵠΔᐃΔᐃⲆ = 32;
		this.ᐃⵠⵠⲆΔⲆⵠ = 82;
		this.ᐃᐃᐃᐃⲆᐃⵠ = 71;
		this.ᐃⲆⵠⵠⲆⵠΔ = 86;
		this.ⲆⲆⵠⵠⲆᐃⵠ = 66;
		this.ΔᐃⵠⵠᐃΔⲆ();
		this.keys = new Array(ΔⲆΔⲆⲆ);
		for (var Ⲇᐃ = ⵠⲆΔ; Ⲇᐃ < ⵠⵠⲆⲆᐃ; Ⲇᐃ++) this.keys[Ⲇᐃ] = this.ⲆⲆΔⲆᐃ;
		this.up = function(ⲆΔⲆⲆ) {
			var ⵠᐃᐃᐃ = Math.min(ⲆΔⲆⲆ.charCode || ⲆΔⲆⲆ.keyCode, 255);
			this.keys[ⵠᐃᐃᐃ] = this.ⲆⲆΔⲆᐃ
		};
		this.down = function(ⲆΔⲆⲆ) {
			var ⵠᐃᐃᐃ = Math.min(ⲆΔⲆⲆ.charCode || ⲆΔⲆⲆ.keyCode, 255);
			if (ⵠᐃᐃᐃ == this.ΔΔⲆΔⲆ || this.ΔᐃᐃⵠΔⵠᐃ == ⵠᐃᐃᐃ) this.ⲆⲆΔⵠΔᐃⵠ();
			else if (ⵠᐃᐃᐃ == this.ΔᐃΔⲆⵠ || this.ᐃᐃΔⵠᐃΔᐃ == ⵠᐃᐃᐃ) this.ΔⲆΔⵠΔΔⲆ();
			else if (this.ᐃᐃⵠⲆⵠⲆⲆ == ⵠᐃᐃᐃ || this.ⵠⲆᐃᐃⵠΔⵠⲆᐃ == ⵠᐃᐃᐃ) this.ⲆⲆΔⵠᐃᐃΔ();
			else if (this.ⵠΔⵠⵠΔ == ⵠᐃᐃᐃ || this.ΔⲆⵠⲆⵠⵠΔ == ⵠᐃᐃᐃ) this.ΔΔΔⲆᐃᐃᐃ();
			this.keys[ⵠᐃᐃᐃ] = this.ᐃᐃⵠⲆⵠⲆⲆ;
			return ⵠᐃᐃᐃ
		};
		this.ⲆⲆΔⵠΔᐃⵠ = function() {
			this.keys[this.ⵠΔⵠⵠΔ] = this.ⲆⲆΔⲆᐃ;
			this.keys[this.ΔⲆⵠⲆⵠⵠΔ] = this.ⲆⲆΔⲆᐃ
		};
		this.ΔΔΔⲆᐃᐃᐃ = function() {
			this.keys[this.ΔΔⲆΔⲆ] = this.ⲆⲆΔⲆᐃ;
			this.keys[this.ΔᐃᐃⵠΔⵠᐃ] = this.ⲆⲆΔⲆᐃ
		};
		this.ⲆⲆΔⵠᐃᐃΔ = function() {
			this.keys[this.ΔᐃΔⲆⵠ] = this.ⲆⲆΔⲆᐃ;
			this.keys[this.ᐃᐃΔⵠᐃΔᐃ] = this.ⲆⲆΔⲆᐃ
		};
		this.ΔⲆΔⵠΔΔⲆ = function() {
			this.keys[this.ⵠΔᐃⵠΔ] = this.ⲆⲆΔⲆᐃ;
			this.keys[this.ΔΔⵠⵠᐃⵠⵠ] = this.ⲆⲆΔⲆᐃ
		};
		this.ᐃⵠΔⵠΔⲆᐃ = function() {
			this.keys[this.ⵠΔⵠⵠΔ] = this.ⲆⲆΔⲆᐃ;
			this.keys[this.ΔⲆⵠⲆⵠⵠΔ] = this.ⲆⲆΔⲆᐃ;
			this.keys[this.ΔΔⲆΔⲆ] = this.ⲆⲆΔⲆᐃ;
			this.keys[this.ΔᐃᐃⵠΔⵠᐃ] = this.ⲆⲆΔⲆᐃ;
			this.keys[this.ΔᐃΔⲆⵠ] = this.ⲆⲆΔⲆᐃ;
			this.keys[this.ᐃᐃΔⵠᐃΔᐃ] = this.ⲆⲆΔⲆᐃ;
			this.keys[this.ⵠΔᐃⵠΔ] = this.ⲆⲆΔⲆᐃ;
			this.keys[this.ΔΔⵠⵠᐃⵠⵠ] = this.ⲆⲆΔⲆᐃ
		};
		this.ΔⵠⵠᐃⲆᐃΔ = function() {
			return this.keys[this.ΔΔⲆΔⲆ] || this.keys[this.ΔᐃᐃⵠΔⵠᐃ]
		};
		this.ⵠⲆᐃᐃⲆΔᐃ = function() {
			return this.keys[this.ⵠΔⵠⵠΔ] || this.keys[this.ΔⲆⵠⲆⵠⵠΔ]
		};
		this.ᐃΔΔᐃΔΔᐃ = function() {
			return this.keys[this.ΔᐃΔⲆⵠ] || this.keys[this.ᐃᐃΔⵠᐃΔᐃ]
		};
		this.ⵠⵠⵠΔⲆΔᐃ = function() {
			return this.keys[this.ⵠΔᐃⵠΔ] || this.keys[this.ΔΔⵠⵠᐃⵠⵠ]
		};
		this.ⵠⵠⵠⲆᐃⵠΔⲆΔ = function() {
			return this.keys[this.ⲆΔΔᐃⵠΔⵠ]
		};
		this.ΔΔΔⵠΔᐃⵠᐃⵠ = function() {
			return this.keys[this.ⲆΔᐃᐃⵠᐃⲆ]
		};
		this.ᐃᐃⲆⲆᐃⲆΔⲆⲆ = function() {
			return this.keys[this.ⵠⵠᐃⵠᐃᐃΔ]
		};
		this.ᐃΔⵠΔΔᐃΔⲆᐃ = function() {
			return this.keys[this.ΔᐃⲆⵠⲆᐃⲆ]
		};
		this.ᐃΔⵠⲆⲆⵠⵠΔΔ = function() {
			return this.keys[this.ⲆΔⵠⲆᐃΔⵠ]
		};
		this.ⵠᐃΔΔᐃΔᐃᐃΔ = function() {
			return this.keys[this.ΔⵠΔᐃΔᐃⲆ]
		};
		this.ΔᐃⵠΔΔᐃΔΔΔ = function() {
			return this.keys[this.ᐃⵠⵠⲆΔⲆⵠ]
		};
		this.ⲆⵠⲆᐃⵠⵠⵠΔⵠ = function() {
			return this.keys[this.ᐃᐃᐃᐃⲆᐃⵠ]
		};
		this.ⵠΔⲆΔⵠⲆⵠᐃⵠ = function() {
			return this.keys[this.ᐃⲆⵠⵠⲆⵠΔ]
		};
		this.ⵠΔᐃᐃᐃᐃⲆⲆᐃ = function() {
			return this.keys[this.ⲆⲆⵠⵠⲆᐃⵠ]
		}
	}
	const ΔΔᐃΔΔΔᐃ = ΔⲆΔⲆⲆ;
	const ΔⲆΔⲆᐃ = ΔⲆΔᐃⲆⵠⲆ;
	const ⵠΔᐃⲆⵠ = ᐃΔΔⲆΔ;

	function ΔΔⵠⲆΔⵠⲆ(ΔⲆΔⲆΔⲆⲆ, ⲆⲆᐃⵠΔⲆⵠ, ⵠⲆⲆⵠⲆΔᐃ) {
		ᐃⵠⵠⲆⲆⲆⲆ(ᐃⵠΔⲆⲆ, ΔⲆΔⲆΔⲆⲆ, ⲆⲆᐃⵠΔⲆⵠ, ⵠⲆⲆⵠⲆΔᐃ);
		const ⲆⵠᐃΔΔⲆΔ = ᐃⲆᐃᐃᐃᐃⲆ(ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[ᐃⲆᐃᐃ], ⲆⲆⵠΔ[ΔΔᐃ], ⲆⲆⵠΔ[1]);
		const ᐃⵠⲆᐃΔΔⵠⲆΔ = ᐃⲆᐃᐃᐃᐃⲆ(ⲆⲆⵠΔ[ⲆⲆΔⲆ], ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[ⵠΔᐃ], ⲆⲆⵠΔ[2], ⲆⲆⵠΔ[0]);
		const ΔⵠΔᐃΔⵠᐃ = (ⲆⵠᐃΔΔⲆΔ | 26002) & ~(ⲆⵠᐃΔΔⲆΔ & 26002);
		return ΔⵠΔᐃΔⵠᐃ
	}

	function ᐃⲆⵠᐃⲆΔᐃ(ⵠΔⵠᐃⲆΔΔ, ᐃᐃⵠΔⲆⲆᐃ) {
		const ⵠⲆΔⵠᐃⵠⲆ = (40226 | ⵠΔⵠᐃⲆΔΔ) & ~(ⵠΔⵠᐃⲆΔΔ & 40226);
		const ᐃⵠᐃⲆⲆΔᐃ = ((35183 + ᐃᐃⵠΔⲆⲆᐃ) * 214013 + 2531011) % 4294967296;
		const ᐃᐃΔᐃᐃᐃⵠ = ΔⲆⵠᐃᐃᐃⵠ(ⵠⲆΔⵠᐃⵠⲆ, ᐃⵠᐃⲆⲆΔᐃ, ⵠⲆΔⵠᐃⵠⲆ, ᐃⵠᐃⲆⲆΔᐃ, ⵠⲆΔⵠᐃⵠⲆ, ᐃⵠᐃⲆⲆΔᐃ);
		const ⵠΔⲆⵠⵠᐃΔⵠⲆ = ⵠΔᐃⲆⲆᐃⲆ(ⵠⲆΔⵠᐃⵠⲆ, ᐃⵠᐃⲆⲆΔᐃ, ⵠⲆΔⵠᐃⵠⲆ, ᐃⵠᐃⲆⲆΔᐃ, ⵠⲆΔⵠᐃⵠⲆ);
		const ΔΔⵠΔΔΔⵠ = (51907 | ᐃᐃΔᐃᐃᐃⵠ) & ~(ᐃᐃΔᐃᐃᐃⵠ & 51907);
		return ΔΔⵠΔΔΔⵠ
	}
	const ΔΔᐃΔ = ᐃⵠΔⲆ;
	const ⲆⵠΔⵠᐃⵠⲆ = ⵠᐃⵠΔⲆⵠⵠ;
	const ΔⲆⲆⵠ = ᐃᐃΔᐃ;
	const ΔᐃΔᐃⲆΔⲆ = ᐃᐃⲆⵠⲆᐃⵠ;

	function ⵠⲆΔΔΔΔΔ(ΔⵠΔⵠΔᐃⲆ, ⲆᐃΔᐃΔⲆⲆ) {
		ΔⲆΔⵠⵠΔⲆ(ᐃⵠΔⲆⲆ, ΔⵠΔⵠΔᐃⲆ, ⲆᐃΔᐃΔⲆⲆ);
		const ⵠΔᐃᐃⵠⲆᐃ = ⵠΔᐃᐃⲆΔᐃ(ⲆⲆⵠΔ[ΔΔᐃ], ⲆⲆⵠΔ[ⲆᐃΔ]);
		const ᐃᐃᐃΔᐃΔΔ = ΔⲆΔΔᐃⵠⵠ(ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[ⲆᐃΔ], ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[ᐃⲆΔ], ⲆⲆⵠΔ[ⵠⵠⵠ], ⲆⲆⵠΔ[ⲆᐃΔ]);
		const ᐃᐃⵠⲆⲆᐃΔ = ((126 + (ⵠΔᐃᐃⵠⲆᐃ ^ ᐃᐃᐃΔᐃΔΔ)) * 75 + 74) % 65537;
		return ᐃᐃⵠⲆⲆᐃΔ
	}

	function ⵠΔᐃⲆⲆᐃⲆ(ⲆΔΔⵠΔΔⵠ, ⵠⲆⲆⲆᐃΔⲆ, ᐃᐃΔⲆⵠΔᐃ, ΔⲆᐃᐃⵠⲆⲆ, ᐃⲆΔΔΔΔΔ) {
		const ΔⲆⲆⲆΔΔΔ = (ⲆΔΔⵠΔΔⵠ | 29728) & ~(ⲆΔΔⵠΔΔⵠ & 29728);
		const ΔⲆⵠᐃᐃΔⲆ = ~(10072 & ⵠⲆⲆⲆᐃΔⲆ) & (10072 | ⵠⲆⲆⲆᐃΔⲆ);
		const ⲆᐃⲆⵠΔⵠⲆ = ~(ᐃᐃΔⲆⵠΔᐃ & 32742) & ᐃᐃΔⲆⵠΔᐃ | ~(ᐃᐃΔⲆⵠΔᐃ & 32742) & 32742;
		const ΔⵠⵠⲆⲆⲆᐃ = ~(36656 & ΔⲆᐃᐃⵠⲆⲆ) & (36656 | ΔⲆᐃᐃⵠⲆⲆ);
		const ΔⵠᐃⲆⲆᐃᐃ = ~(ᐃⲆΔΔΔΔΔ & 56752) & ᐃⲆΔΔΔΔΔ | ~(ᐃⲆΔΔΔΔΔ & 56752) & 56752;
		const ᐃᐃΔΔᐃᐃⲆ = ⵠΔⵠⵠⵠᐃⲆ(ΔⲆⲆⲆΔΔΔ, ΔⲆⵠᐃᐃΔⲆ, ⲆᐃⲆⵠΔⵠⲆ, ΔⵠⵠⲆⲆⲆᐃ, ΔⵠᐃⲆⲆᐃᐃ, ΔⲆⲆⲆΔΔΔ);
		const ᐃᐃᐃⵠⲆⲆΔⲆⵠ = ΔⲆⵠᐃᐃᐃⵠ(ΔⲆⵠᐃᐃΔⲆ, ⲆᐃⲆⵠΔⵠⲆ, ΔⵠⵠⲆⲆⲆᐃ, ΔⵠᐃⲆⲆᐃᐃ, ΔⲆⲆⲆΔΔΔ, ΔⲆⵠᐃᐃΔⲆ);
		const ΔΔⵠⵠᐃᐃᐃ = ᐃᐃΔΔᐃᐃⲆ ^ 1610;
		return ΔΔⵠⵠᐃᐃᐃ
	}
	var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[185]]("game_canvas");
	const ΔⵠⲆⲆⲆ = ⲆᐃⲆᐃⲆ;
	var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
	var ᐃⲆⵠⵠ = ΔⲆ.width;
	const ᐃᐃⵠᐃⲆᐃᐃ = ᐃᐃⲆⵠⲆᐃⵠ;
	const ᐃⲆΔΔᐃⵠⲆⲆⲆ = ΔΔⲆⲆⲆⲆⵠ;
	const Ⲇⵠⵠᐃⵠ = ⵠⲆⲆᐃᐃ;
	const ⵠᐃⵠⵠᐃ = ᐃⲆⲆⵠᐃ;
	const ΔⲆΔⲆ = ΔΔᐃΔ;
	const ⲆΔⲆⵠⵠ = ⵠⵠⵠⵠⵠ;
	const ⵠᐃΔᐃᐃ = ᐃⲆⵠΔᐃ;
	const ⵠⲆⲆ = ⵠΔᐃ;
	var Ⲇᐃᐃᐃ = ΔⲆ.height;
	const ΔΔᐃⵠⵠ = undefined;
	const ⵠⲆⵠᐃΔΔᐃ = ᐃⵠΔⲆΔ;
	var ΔⵠⵠΔ = ΔⲆ.width / 2;
	var ᐃⲆΔⲆ = ΔⲆ.height / ᐃᐃΔⵠ;
	var ⵠᐃⵠⲆⲆΔⲆ = {
		x: ΔⵠⵠΔ,
		y: ᐃⲆΔⲆ
	};
	var ᐃ = ⲆᐃΔ;
	var ⲆⵠⲆⲆᐃⵠΔ = 1;
	var ΔⵠⵠⲆΔΔΔ = -1;
	const ⵠⲆᐃᐃΔ = ⵠΔⵠⵠᐃ;
	var ᐃⲆⵠⵠᐃⲆᐃ;
	var ᐃⲆⲆΔⵠᐃⲆ = "J" + ΔᐃⵠⵠΔΔⲆ;
	var ᐃΔⲆᐃΔⲆᐃ = "S" + ⵠᐃᐃⲆⵠ;
	const ᐃᐃⲆⲆⵠ = ᐃΔᐃᐃⲆ;
	var ⲆⵠⲆⵠⲆⵠⲆ = ⵠⵠⲆΔᐃᐃᐃⲆΔ;
	var ⵠᐃᐃⲆⵠ;
	var ⵠⵠΔⵠΔ;
	var ΔⵠᐃᐃⲆⲆⵠ = "O";
	var ⲆⵠΔⲆⵠⲆᐃ = ΔⵠᐃᐃⲆⲆⵠ + "N";
	var ⵠΔᐃΔⲆᐃΔ = "O";
	var ᐃΔⵠΔᐃⲆᐃ = 0;
	const ᐃⲆᐃⵠⵠ = ᐃΔᐃⲆⵠ;
	var ΔᐃⵠⵠΔΔⲆ;
	var ⲆⲆⵠⵠⵠᐃⵠ = ⲆⵠⲆⵠⲆⵠⲆ;
	const ΔᐃᐃⵠⵠⲆⵠ = ΔΔᐃΔΔΔᐃ;
	const ᐃΔⲆΔᐃ = ⵠΔΔⵠᐃ;
	var ⵠᐃᐃⲆⵠ;
	const ⵠΔⵠⵠⵠ = ᐃΔΔⵠⲆ;
	const ᐃΔΔⲆⵠΔⵠ = ⵠⵠⲆⵠΔⲆⵠ;
	const ⲆⲆⲆⵠⲆᐃⲆ = ⵠᐃⵠΔⲆⵠⵠ;
	var ⵠⵠⲆⵠᐃΔᐃ;
	var ᐃΔⲆᐃΔⲆᐃ = "N";
	var ΔᐃᐃⲆΔ = "J";
	const ⲆⲆᐃⲆⵠⲆΔ = ⲆⵠⵠΔᐃ;
	var ΔⵠᐃᐃⲆⲆⵠ = "O" + ΔᐃⵠⵠΔΔⲆ;
	const ΔⲆⵠⵠ = ΔⲆⲆⵠ;
	const ᐃⵠᐃⵠⲆ = ⵠΔΔΔⵠ;
	const ⲆᐃΔⲆⵠ = ᐃⵠⵠⵠΔ;
	const ΔⲆⲆ = ᐃᐃⲆ;
	const ⲆᐃᐃⵠΔ = ⲆᐃⲆⵠⲆ;
	const ᐃⲆᐃΔ = ᐃⵠΔⲆ;
	var ᐃⲆⲆΔⵠᐃⲆ;
	const ⵠΔⵠⲆⲆΔⲆⵠᐃ = ΔⵠᐃΔᐃⲆⵠ;
	const ᐃᐃΔ = Δⵠᐃ;
	var ⵠⵠᐃᐃⲆ = ⲆⲆⵠⵠⵠᐃⵠ;
	var ΔⲆⲆΔᐃΔᐃ;
	var ᐃⲆⵠⵠᐃⲆᐃ;
	const ⲆⵠⵠᐃΔ = ΔⲆᐃΔᐃ;
	const ⲆⵠⲆΔⲆ = ΔΔⲆΔⲆᐃⲆ;
	const ⲆⵠⵠⲆⵠ = ⵠⵠΔᐃⲆ;
	const ⵠⲆⵠⲆᐃ = ΔΔⵠⲆᐃ;
	const ⵠⵠⲆⵠᐃ = ⵠⲆⲆᐃᐃ;
	var ΔⵠⵠⲆⲆⵠᐃ;
	var ᐃⵠΔΔⵠⵠᐃ;
	const Ⲇᐃⵠ = ⵠⵠⵠ;
	const ᐃⵠⲆⵠᐃ = ⲆᐃⲆᐃⲆ;
	const ⵠᐃᐃᐃᐃ = ᐃⵠᐃᐃⲆ;
	var ⵠᐃᐃⲆⵠ;
	const ΔΔⲆᐃᐃ = ΔⵠΔⵠΔ;
	const ⲆᐃⵠⲆΔ = ᐃⲆⲆᐃᐃⵠⵠ;
	const ⲆⵠⵠⵠⲆ = ᐃᐃᐃⵠⵠ;
	const ᐃᐃⵠᐃᐃ = ΔΔⵠΔⲆ;
	var ΔᐃⵠⵠΔΔⲆ;
	var ᐃᐃⵠΔᐃⵠⲆ = ⵠⵠᐃᐃⲆ;
	var ⲆⵠΔⲆⵠⲆᐃ = "N" + ᐃⵠΔΔⵠⵠᐃ;
	const ΔⲆⲆΔⲆ = ᐃΔⵠⵠⲆ;
	var ⲆⵠΔⲆⵠⲆᐃ;
	const ⵠⵠⵠᐃ = ᐃⲆᐃⵠ;
	var ⲆⵠΔⵠᐃ = ᐃᐃⵠΔᐃⵠⲆ;
	const ⵠᐃᐃΔ = ⵠᐃΔⲆ;
	const ⲆⲆⲆᐃΔ = ⲆΔⲆⵠΔ;
	var ⲆᐃⲆᐃⵠ;
	const ⲆⲆᐃΔⵠⵠⲆΔᐃ = ⲆⲆᐃᐃⵠⵠⲆ;
	var ΔⵠᐃᐃⲆⲆⵠ;
	var ᐃⲆⵠⵠᐃⲆᐃ;
	var ΔⲆⲆΔᐃΔᐃ = "";
	var ⲆᐃΔⲆⵠⵠⵠ;
	const ΔΔΔΔᐃ = ⵠᐃⵠⵠᐃ;
	var ΔΔⵠᐃⵠⲆᐃ = ⲆⵠΔⵠᐃ;
	const ΔⵠΔᐃ = ⲆⲆᐃᐃ;
	var ⵠᐃⲆⵠᐃΔⵠ;
	var ⵠᐃᐃⲆⵠ;
	var ΔᐃⵠⵠΔΔⲆ;
	const ⲆᐃⲆⲆᐃⲆⲆ = ΔΔⲆⲆⲆⲆⵠ;
	const ᐃᐃⲆⵠᐃ = ⵠΔⵠᐃⵠ;
	const ⵠΔⲆⵠⲆ = ⵠⵠΔⲆᐃΔⲆ;
	const ᐃᐃᐃⲆ = ⵠⵠᐃᐃ;
	var ⵠᐃⲆⵠᐃΔΔ = ΔΔⵠᐃⵠⲆᐃ;
	const ᐃᐃΔᐃⵠΔⲆ = ⵠᐃⵠᐃⵠ;
	var ΔⵠᐃᐃⲆⲆⵠ;
	var ⵠⵠᐃⵠΔⵠⵠ;
	var ᐃⲆⲆΔⵠᐃⲆ;
	const ⵠΔⵠΔΔ = ᐃⲆΔⲆᐃ;
	const Ⲇⵠᐃᐃᐃ = ᐃΔΔⵠⲆ;
	const ⵠⵠΔⵠΔᐃⲆⵠⵠ = 4565657;

	function ᐃΔᐃⵠᐃΔⵠ(ᐃⲆΔᐃΔΔᐃΔⵠ) {
		const ⵠⵠΔⵠΔᐃⲆⵠⵠ = function() {
			for (let ΔᐃΔᐃⲆΔᐃ = 0; ΔᐃΔᐃⲆΔᐃ < 5; ΔᐃΔᐃⲆΔᐃ++) ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("click", (function() {
				ⵠⵠΔⵠΔᐃⲆⵠⵠ()
			}))
		};
		ⵠⵠΔⵠΔᐃⲆⵠⵠ()
	}
	const ᐃⲆΔᐃΔΔᐃΔⵠ = ᐃΔᐃⵠᐃΔⵠ + ";" + "let ᐃⲆΔᐃΔΔᐃΔⵠ = " + ᐃΔᐃⵠᐃΔⵠ + ";";
	const ΔᐃΔᐃⲆΔᐃ = ᐃⲆΔᐃΔΔᐃΔⵠ + "let ⵠᐃⲆᐃΔᐃⲆⵠⲆ = 10932638; try { ⵠᐃⲆᐃΔᐃⲆⵠⲆ = ᐃΔᐃⵠᐃΔⵠ; } catch (ⵠⲆⲆΔᐃΔⵠ) { ᐃⲆΔᐃΔΔᐃΔⵠ (); };";
	ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]](ΔᐃΔᐃⲆΔᐃ, 0);
	const ⲆᐃⲆΔ = ΔⲆⲆⵠ;
	const ⲆⲆΔⲆⲆ = ⵠΔⲆⵠⵠ;
	var ΔⵠⵠⲆΔᐃΔ = ⵠᐃⲆⵠᐃΔΔ;
	var ΔᐃᐃⲆΔ = "O";
	const ⵠⲆᐃ = ⵠⲆΔ;
	const ⲆᐃⲆⲆᐃΔΔ = ᐃⵠⵠΔⵠΔⵠ;
	const ΔⵠⵠᐃⲆ = ⵠΔΔⲆΔ;
	const ⵠⵠⲆᐃⲆ = ᐃⲆΔⲆᐃ;
	var ᐃⲆⵠⵠᐃⲆᐃ = "J";
	const ⵠⵠΔⲆⵠ = Ⲇⵠⵠᐃⵠ;
	var ᐃΔⲆᐃΔⲆᐃ;
	const Ⲇᐃⵠᐃ = ΔⵠΔᐃ;
	var ⵠⵠᐃⲆᐃΔⲆ;
	const ᐃⲆᐃᐃΔᐃΔ = ⵠᐃⵠΔⲆⵠⵠ;
	var ᐃⲆⵠⵠᐃⲆᐃ;
	var ΔⵠⵠⲆΔᐃΔ = ⵠᐃⲆⵠᐃΔΔ;
	var ⵠⵠᐃⲆᐃΔⲆ = "S";
	var ᐃᐃⲆᐃⲆⵠⲆ = ΔⵠⵠⲆΔᐃΔ;
	var ᐃⵠΔΔⵠⵠᐃ;
	var ᐃΔᐃⵠΔⵠᐃ;
	const Δⵠᐃⵠᐃ = ⲆΔΔΔⵠ;
	var ⲆⲆᐃΔΔⲆᐃ = ᐃᐃⲆᐃⲆⵠⲆ;
	var ⵠᐃᐃⲆⵠ = ᐃⲆⵠⵠᐃⲆᐃ + ⵠⵠᐃⲆᐃΔⲆ;
	const ᐃΔⲆⲆΔ = ΔᐃⲆⲆΔ;
	const ⲆᐃΔᐃⵠ = ᐃΔΔⲆΔ;
	const ⲆⵠΔΔ = Ⲇᐃⵠᐃ;
	ΔⲆ.oncontextmenu = function() {
		return ᐃΔΔⵠⲆ
	};
	ᐃⲆⲆΔⵠᐃⲆ = ᐃⲆⵠⵠᐃⲆᐃ;
	ΔⲆⲆΔᐃΔᐃ = ᐃⲆⲆΔⵠᐃⲆ;

	function ᐃⵠᐃ(ᐃⵠⵠΔ) {
		var ᐃᐃ = new Image;
		ᐃᐃ.src = ᐃⵠⵠΔ.toDataURL("image/png");
		ᐃᐃ.width = ᐃⵠⵠΔ.width;
		ᐃᐃ.height = ᐃⵠⵠΔ.height;
		ᐃᐃ.ⲆᐃⲆⵠⵠⲆⵠ = 1;
		return ᐃᐃ
	}
	const ᐃⲆⲆΔᐃ = ᐃⵠⵠᐃΔⵠᐃ;
	ᐃⲆⲆΔⵠᐃⲆ = ᐃΔⲆᐃΔⲆᐃ;
	ΔᐃᐃⲆΔ = ΔᐃᐃⲆΔ + ᐃⲆⲆΔⵠᐃⲆ;
	const ⲆⲆⵠᐃΔ = ⵠⵠⲆΔⲆ;
	const ⲆⵠⵠⲆΔ = ⵠΔΔΔΔ;
	const ΔⲆΔⵠⲆ = ⲆⵠΔᐃⵠ;
	const Δᐃᐃⵠⵠ = Ⲇᐃⵠⵠᐃ;
	const ΔⵠⵠⲆ = ⵠⲆΔⵠ;
	const ᐃⵠΔᐃⵠ = ᐃⲆⲆΔᐃ;
	ⵠΔᐃΔⲆᐃΔ = ⵠᐃᐃⲆⵠ + ΔᐃᐃⲆΔ;
	ⵠⵠΔⵠΔ = ⵠΔᐃΔⲆᐃΔ;
	const ⲆⲆⵠⲆⵠ = ⵠΔΔΔⵠ;
	ΔⵠᐃᐃⲆⲆⵠ = ⲆⵠΔⲆⵠⲆᐃ;
	ⵠⵠⲆⵠᐃΔᐃ = ⵠⵠΔⵠΔ;
	const ⲆⵠⲆᐃ = ᐃⵠΔⲆ;
	ⲆⵠΔⲆⵠⲆᐃ = ΔᐃⵠⵠΔΔⲆ;
	ΔᐃⵠⵠΔΔⲆ = ⵠᐃᐃⲆⵠ;
	ⲆᐃⲆᐃⵠ = ⵠᐃᐃⲆⵠ + ΔᐃᐃⲆΔ;
	const ΔⲆⵠΔᐃ = ᐃᐃΔΔⵠ;
	ΔᐃⵠⵠΔΔⲆ = ⵠᐃᐃⲆⵠ;
	ΔⵠᐃᐃⲆⲆⵠ = ⵠᐃᐃⲆⵠ;
	const ⵠᐃᐃⲆⲆ = ᐃΔⲆⲆΔ;
	ΔⵠⵠⲆⲆⵠᐃ = ⲆᐃⲆᐃⵠ;
	ᐃΔⲆᐃΔⲆᐃ = ΔᐃᐃⲆΔ + ᐃⲆⲆΔⵠᐃⲆ;
	const ᐃᐃⲆⲆ = ᐃⲆᐃⵠ;
	const ᐃⵠΔᐃΔΔᐃ = ⲆⵠⵠⲆΔ;
	const Ⲇⵠᐃ = ⵠΔᐃ;
	ⲆᐃΔⲆⵠⵠⵠ = ⵠⵠΔⵠΔ;
	ΔⵠᐃᐃⲆⲆⵠ = ⵠᐃᐃⲆⵠ + ΔᐃᐃⲆΔ;
	const ⵠⲆΔⵠⵠ = ᐃⲆᐃᐃⲆ;
	const ᐃⵠⵠΔⲆ = ΔⲆᐃΔᐃ;
	ⵠᐃⲆⵠᐃΔⵠ = ⵠΔᐃΔⲆᐃΔ;
	const ΔⲆⲆᐃⵠᐃᐃⲆⲆ = ⵠᐃᐃᐃᐃⵠΔ;
	ⲆⵠΔⲆⵠⲆᐃ = ⵠᐃᐃⲆⵠ + ΔᐃᐃⲆΔ;
	const ᐃⵠⵠⵠⲆ = ΔΔΔⲆ;
	ⵠⵠᐃⵠΔⵠⵠ = ⵠⵠⲆⵠᐃΔᐃ;
	const ΔᐃⵠⲆΔ = ⲆΔᐃⲆᐃ;
	ΔᐃᐃⲆΔ = ΔᐃⵠⵠΔΔⲆ;
	const ⲆⵠᐃⲆⲆᐃⲆ = ⲆⲆΔΔⵠ;
	ⵠⵠᐃⲆᐃΔⲆ = ⵠΔᐃΔⲆᐃΔ;
	const ᐃⵠⵠⵠⵠⵠΔ = ⲆᐃⲆⲆᐃΔΔ;
	const ᐃᐃᐃⵠ = ᐃᐃⲆⲆ;
	const ΔⲆⲆΔᐃΔⵠ = ⲆᐃⲆⲆᐃⲆⲆ;
	const ⲆᐃᐃΔΔ = ΔⵠΔΔⲆ;
	ᐃΔᐃⵠΔⵠᐃ = ⵠⵠΔⵠΔ;
	ᐃⲆⲆΔⵠᐃⲆ = ΔⵠᐃᐃⲆⲆⵠ;
	const ΔΔΔⵠᐃ = ⲆⵠΔᐃΔ;
	var devicePixelRatio = ⵠⵠⲆΔᐃᐃᐃⲆΔ.devicePixelRatio || 1;
	const ΔΔⵠᐃᐃ = ΔΔΔΔᐃ;
	var ⵠⵠⲆⲆᐃΔΔ = Ⲇ.ⲆⲆᐃᐃⲆᐃΔΔⲆ || Ⲇ.ΔⵠΔΔⲆⵠⲆⵠᐃ || Ⲇ.ⵠᐃΔΔᐃⵠᐃⲆᐃ || Ⲇ.ΔᐃⵠᐃᐃᐃΔΔᐃ || Ⲇ.ⲆΔⲆⲆⵠΔⵠΔᐃ || Ⲇⵠᐃ;

	function ⲆᐃᐃⵠⵠᐃΔ() {
		if (ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth != ΔⲆ.width) {
			ΔⲆ.width = ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth;
			ᐃⲆⵠⵠ = ΔⲆ.width;
			ΔⵠⵠΔ = ΔⲆ.width / 2
		}
		ΔⲆ.height != ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerHeight && (ΔⲆ.height = ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerHeight, Ⲇᐃᐃᐃ = ΔⲆ.height, ᐃⲆΔⲆ = ΔⲆ.height / ᐃⲆᐃⵠ);
		ⵠᐃⵠⲆⲆΔⲆ = {
			x: ΔⵠⵠΔ,
			y: ᐃⲆΔⲆ
		};
		var ᐃⵠⵠⵠⵠᐃⵠ = ΔⲆ.width;
		var ᐃᐃᐃΔⲆⲆᐃ = ΔⲆ.height; - Ⲇⵠᐃ === ΔⵠⵠⲆΔΔΔ ? ⲆⵠⲆⲆᐃⵠΔ = devicePixelRatio / ⵠⵠⲆⲆᐃΔΔ : ⲆⵠⲆⲆᐃⵠΔ = ΔⵠⵠⲆΔΔΔ;
		ΔⲆ.width = ⲆⵠⲆⲆᐃⵠΔ * ᐃⵠⵠⵠⵠᐃⵠ;
		ΔⲆ.height = ᐃᐃᐃΔⲆⲆᐃ * ⲆⵠⲆⲆᐃⵠΔ;
		ΔⲆ.style.width = ᐃⵠⵠⵠⵠᐃⵠ + ⵠ[407];
		ΔⲆ.style.height = ᐃᐃᐃΔⲆⲆᐃ + ⵠ[407];
		Ⲇ.scale(ⲆⵠⲆⲆᐃⵠΔ, ⲆⵠⲆⲆᐃⵠΔ);
		if (ᐃⲆⵠ) {
			ᐃⲆⵠ.ⲆⲆΔ.ⲆⵠΔΔΔⵠⵠ = ᐃⵠⵠⵠⵠᐃⵠ;
			ᐃⲆⵠ.ⲆⲆΔ.ⵠΔⲆⲆⵠΔⵠ = ᐃᐃᐃΔⲆⲆᐃ
		}
		if (ᐃⵠⲆΔⵠᐃⲆ.ᐃⲆⵠᐃᐃ) ᐃⵠⲆΔⵠᐃⲆ.ⲆᐃⲆ();
		else if (ᐃΔΔΔ.ᐃⲆⵠᐃᐃ) ᐃΔΔΔ.ⲆᐃⲆ();
		else if (ΔᐃᐃⲆ.ᐃⲆⵠᐃᐃ) ΔᐃᐃⲆ.ⲆᐃⲆ();
		else ⲆΔᐃΔΔⵠΔ.ᐃⲆⵠᐃᐃ && ⲆΔᐃΔΔⵠΔ.ⲆᐃⲆ()
	}
	const ᐃᐃᐃⲆΔ = ⲆⵠⵠⵠⲆ;
	var ᐃⲆᐃⲆⵠΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[284]);
	ᐃⲆᐃⲆⵠΔⲆ.ondragstart = function() {
		return ΔⵠⵠᐃΔ
	};
	ᐃⲆᐃⲆⵠΔⲆ.ondrop = function() {
		return ΔⵠΔⵠⵠ
	};
	const ΔⵠΔⵠᐃ = ⵠⵠΔⲆⵠ;
	ᐃⲆᐃⲆⵠΔⲆ.onresize = ⲆᐃᐃⵠⵠᐃΔ;
	(function() {
		var ⵠⵠᐃᐃᐃᐃⵠ = ⵠⲆᐃ;
		var ᐃⵠⲆᐃᐃᐃΔ = ["ms", "moz", "webkit", "o"];
		for (var Ⲇⵠ = 0; Ⲇⵠ < ᐃⵠⲆᐃᐃᐃΔ.length && !ⵠⵠⲆΔᐃᐃᐃⲆΔ.requestAnimationFrame; ++Ⲇⵠ) {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ.requestAnimationFrame = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ᐃⵠⲆᐃᐃᐃΔ[Ⲇⵠ] + "RequestAnimationFrame"];
			ⵠⵠⲆΔᐃᐃᐃⲆΔ.cancelAnimationFrame = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ᐃⵠⲆᐃᐃᐃΔ[Ⲇⵠ] + "CancelAnimationFrame"] || ⵠⵠⲆΔᐃᐃᐃⲆΔ[ᐃⵠⲆᐃᐃᐃΔ[Ⲇⵠ] + "CancelRequestAnimationFrame"]
		}
		if (!ⵠⵠⲆΔᐃᐃᐃⲆΔ.requestAnimationFrame) ⵠⵠⲆΔᐃᐃᐃⲆΔ.requestAnimationFrame = function(callback, ΔᐃⲆⲆΔᐃΔⵠⵠ) {
			var ⲆⲆΔᐃᐃⵠⵠ = (new Date).getTime();
			var ⵠⵠΔΔⲆΔⲆ = Math.max(0, 16 - (ⲆⲆΔᐃᐃⵠⵠ - ⵠⵠᐃᐃᐃᐃⵠ));
			var ⲆΔ = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]]((function() {
				callback(ⲆⲆΔᐃᐃⵠⵠ + ⵠⵠΔΔⲆΔⲆ)
			}), ⵠⵠΔΔⲆΔⲆ);
			ⵠⵠᐃᐃᐃᐃⵠ = ⲆⲆΔᐃᐃⵠⵠ + ⵠⵠΔΔⲆΔⲆ;
			return ⲆΔ
		};
		if (!ⵠⵠⲆΔᐃᐃᐃⲆΔ.cancelAnimationFrame) ⵠⵠⲆΔᐃᐃᐃⲆΔ.cancelAnimationFrame = function(ⲆΔ) {
			clearTimeout(ⲆΔ)
		}
	})();
	const ᐃⲆᐃΔⲆ = ᐃΔΔⲆΔ;

	function ⲆⲆᐃⲆᐃⵠΔ(ΔᐃᐃΔᐃΔⲆ, ᐃⲆⵠⵠⵠᐃⲆ, ᐃⵠⵠⲆⵠⵠⲆ, ΔⲆⲆᐃⲆⵠⵠ) {
		ᐃΔΔᐃΔⵠⵠ(ᐃⵠΔⲆⲆ, ΔᐃᐃΔᐃΔⲆ, ᐃⲆⵠⵠⵠᐃⲆ, ᐃⵠⵠⲆⵠⵠⲆ, ΔⲆⲆᐃⲆⵠⵠ);
		const ⲆᐃⲆⲆⵠΔΔ = ΔⵠⲆⲆΔᐃⵠ(ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[2], ⲆⲆⵠΔ[3], ⲆⲆⵠΔ[ⵠⲆΔ]);
		const ΔⲆⵠⵠᐃⲆᐃ = ΔΔⵠⲆΔⵠⲆ(ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[ᐃᐃᐃⵠ], ⲆⲆⵠΔ[ⲆΔᐃⲆ]);
		const ᐃΔⵠⵠΔⲆⵠ = (8 << ((ⲆᐃⲆⲆⵠΔΔ ^ ΔⲆⵠⵠᐃⲆᐃ) >> 8 & 255)) + (0 << ((ⲆᐃⲆⲆⵠΔΔ ^ ΔⲆⵠⵠᐃⲆᐃ) >> 16 & ⵠⵠⲆⲆᐃ)) + (24 << ((ⲆᐃⲆⲆⵠΔΔ ^ ΔⲆⵠⵠᐃⲆᐃ) >> 24 & 255)) + (16 << ((ⲆᐃⲆⲆⵠΔΔ ^ ΔⲆⵠⵠᐃⲆᐃ) >> 0 & 255));
		return ᐃΔⵠⵠΔⲆⵠ
	}
	const ⲆⲆⵠⵠᐃ = ⵠⵠⲆΔⲆ;

	function ⵠⲆᐃⵠⵠⵠΔ(ⵠᐃΔᐃⵠᐃΔ, ΔΔⵠᐃΔΔᐃ) {
		const ⵠᐃⲆᐃⲆᐃⲆ = (1 + (ⵠᐃΔᐃⵠᐃΔ + 47889) * 22695477) % 4294967296;
		const ⲆΔⵠᐃΔⵠⵠ = (0 << (ΔΔⵠᐃΔΔᐃ >> 8 & ⲆⵠᐃⲆⲆᐃⲆ)) + (16 << (ΔΔⵠᐃΔΔᐃ >> 0 & ⲆⵠᐃⲆⲆᐃⲆ)) + (8 << (ΔΔⵠᐃΔΔᐃ >> 24 & 255)) + (24 << (ΔΔⵠᐃΔΔᐃ >> 16 & 255));
		const ΔⲆᐃᐃⲆΔΔ = ᐃⲆⵠᐃⲆΔᐃ(ⵠᐃⲆᐃⲆᐃⲆ, ⲆΔⵠᐃΔⵠⵠ);
		const ᐃᐃⲆᐃᐃΔⵠ = ᐃᐃⵠⲆᐃΔⵠ(ⵠᐃⲆᐃⲆᐃⲆ, ⲆΔⵠᐃΔⵠⵠ, ⵠᐃⲆᐃⲆᐃⲆ, ⲆΔⵠᐃΔⵠⵠ, ⵠᐃⲆᐃⲆᐃⲆ);
		const ⵠᐃⲆΔⵠΔⲆ = (0 << ((ΔⲆᐃᐃⲆΔΔ ^ ᐃᐃⲆᐃᐃΔⵠ) >> 0 & 255)) + (8 << ((ΔⲆᐃᐃⲆΔΔ ^ ᐃᐃⲆᐃᐃΔⵠ) >> 16 & 255)) + (24 << ((ΔⲆᐃᐃⲆΔΔ ^ ᐃᐃⲆᐃᐃΔⵠ) >> 8 & 255)) + (16 << ((ΔⲆᐃᐃⲆΔΔ ^ ᐃᐃⲆᐃᐃΔⵠ) >> 24 & 255));
		return ⵠᐃⲆΔⵠΔⲆ
	}
	const ⵠᐃⲆⵠⲆ = ᐃΔΔⲆΔ;
	const ⵠⲆⵠᐃⵠ = ⲆΔⵠⵠΔ;

	function ᐃᐃᐃⲆᐃⵠⲆ(ⲆⲆⲆⵠᐃᐃⵠ, ⵠΔⵠⵠᐃΔΔ, ⲆⲆⲆᐃΔⵠᐃ, ⲆⵠΔᐃΔΔⵠ, ᐃΔᐃⵠⲆᐃⵠ, ⲆᐃΔⵠⵠⵠᐃ) {
		const ⵠᐃΔⵠᐃⲆΔ = ~(ⲆⲆⲆⵠᐃᐃⵠ & 16933) & (ⲆⲆⲆⵠᐃᐃⵠ | 16933);
		const ΔⵠΔⵠⲆⵠΔ = (12345 + 1103515245 * (ⵠΔⵠⵠᐃΔΔ + 32800)) % 2147483648;
		const ΔᐃⵠⵠΔᐃⵠ = ((48365 + ⲆⲆⲆᐃΔⵠᐃ) * 2147483629 + 2147483587) % 2147483647;
		const ᐃⲆⵠΔⲆⲆᐃ = ~(ⲆⵠΔᐃΔΔⵠ & 25771) & 25771 | ~(25771 & ⲆⵠΔᐃΔΔⵠ) & ⲆⵠΔᐃΔΔⵠ;
		const ᐃⵠⲆⵠΔⵠⲆ = (214013 * (ᐃΔᐃⵠⲆᐃⵠ + 45434) + 2531011) % 4294967296;
		const ⲆⲆⵠΔᐃⵠᐃ = ~(ⲆᐃΔⵠⵠⵠᐃ & 8773) & (ⲆᐃΔⵠⵠⵠᐃ | 8773);
		const ᐃᐃΔⲆⲆⵠΔ = ᐃᐃⲆᐃᐃᐃⵠ(ⵠᐃΔⵠᐃⲆΔ, ΔⵠΔⵠⲆⵠΔ, ΔᐃⵠⵠΔᐃⵠ, ᐃⲆⵠΔⲆⲆᐃ, ᐃⵠⲆⵠΔⵠⲆ);
		const ᐃᐃᐃᐃΔΔΔ = ⲆⲆΔⵠⲆⲆⲆ(ⲆⲆⵠΔᐃⵠᐃ, ⵠᐃΔⵠᐃⲆΔ, ΔⵠΔⵠⲆⵠΔ);
		const ⲆᐃᐃⵠⵠΔⲆ = (2147483629 * ((ᐃᐃΔⲆⲆⵠΔ ^ ᐃᐃᐃᐃΔΔΔ) + 36109) + 2147483587) % 2147483647;
		return ⲆᐃᐃⵠⵠΔⲆ
	}
	const ΔᐃΔΔᐃ = ᐃΔᐃⲆⵠ;

	function ΔⲆⵠᐃᐃᐃⵠ(ᐃΔᐃΔⵠΔⲆ, ΔᐃᐃⲆᐃⵠⲆ, ᐃⵠᐃⵠᐃⵠΔ, ᐃⲆᐃⵠⲆΔⲆ, ⲆⵠᐃⵠΔΔⵠ, ᐃΔᐃⵠⲆᐃΔ) {
		const ⲆΔΔⲆΔⲆΔ = (8 << (ᐃΔᐃΔⵠΔⲆ >> 8 & 255)) + (24 << (ᐃΔᐃΔⵠΔⲆ >> 0 & 255)) + (0 << (ᐃΔᐃΔⵠΔⲆ >> 16 & 255)) + (ᐃΔⲆⵠΔ << (ᐃΔᐃΔⵠΔⲆ >> 24 & 255));
		const ⲆⲆⲆⵠΔΔΔ = (8 << (ΔᐃᐃⲆᐃⵠⲆ >> 24 & 255)) + (ΔᐃᐃΔΔ << (ΔᐃᐃⲆᐃⵠⲆ >> 16 & 255)) + (0 << (ΔᐃᐃⲆᐃⵠⲆ >> ⵠᐃⵠΔⲆ & 255)) + (24 << (ΔᐃᐃⲆᐃⵠⲆ >> 0 & 255));
		const ⲆΔⲆᐃᐃᐃᐃ = ~(39325 & ᐃⵠᐃⵠᐃⵠΔ) & (ᐃⵠᐃⵠᐃⵠΔ | 39325);
		const ΔⵠΔΔⲆⲆⵠ = (28011 | ᐃⲆᐃⵠⲆΔⲆ) & ~(28011 & ᐃⲆᐃⵠⲆΔⲆ);
		const ΔΔᐃΔⵠⵠΔ = (24 << (ⲆⵠᐃⵠΔΔⵠ >> 16 & 255)) + (0 << (ⲆⵠᐃⵠΔΔⵠ >> 0 & 255)) + (8 << (ⲆⵠᐃⵠΔΔⵠ >> 24 & 255)) + (16 << (ⲆⵠᐃⵠΔΔⵠ >> 8 & 255));
		const ⵠᐃⲆⵠΔⲆᐃ = (24 << (ᐃΔᐃⵠⲆᐃΔ >> 16 & 255)) + (ΔΔᐃ << (ᐃΔᐃⵠⲆᐃΔ >> ΔⲆⲆ & 255)) + (16 << (ᐃΔᐃⵠⲆᐃΔ >> 8 & 255)) + (8 << (ᐃΔᐃⵠⲆᐃΔ >> 24 & 255));
		const ⲆⲆΔⲆΔᐃⲆ = ⵠΔⲆⵠΔⲆΔ(ⲆΔΔⲆΔⲆΔ, ⲆⲆⲆⵠΔΔΔ, ⲆΔⲆᐃᐃᐃᐃ, ΔⵠΔΔⲆⲆⵠ, ΔΔᐃΔⵠⵠΔ);
		const ΔⵠⲆΔⲆΔⲆ = ᐃᐃⲆᐃᐃᐃⵠ(ⵠᐃⲆⵠΔⲆᐃ, ⲆΔΔⲆΔⲆΔ, ⲆⲆⲆⵠΔΔΔ, ⲆΔⲆᐃᐃᐃᐃ, ΔⵠΔΔⲆⲆⵠ);
		const ΔⵠΔΔΔᐃⵠ = (5323 + (ⲆⲆΔⲆΔᐃⲆ ^ ΔⵠⲆΔⲆΔⲆ)) % 65371;
		return ΔⵠΔΔΔᐃⵠ
	}
	const ᐃΔΔⵠᐃ = ⵠⲆⵠᐃΔ;
	const ⲆᐃᐃⲆΔ = ᐃⵠΔⲆΔ;
	const ⲆᐃⲆΔⵠ = ΔΔⲆᐃᐃ;
	const ⲆⵠᐃⲆⵠᐃⵠ = ⲆⵠⵠⲆΔ;
	const ᐃⲆⲆᐃᐃ = ΔⲆΔᐃΔ;

	function ⵠⲆΔᐃⵠⵠᐃ(ⲆⲆⲆⵠᐃᐃⵠ, ⵠΔⵠⵠᐃΔΔ) {
		ⲆᐃⲆⲆⲆᐃⵠ(ᐃⵠΔⲆⲆ, ⲆⲆⲆⵠᐃᐃⵠ, ⵠΔⵠⵠᐃΔΔ);
		const ᐃᐃΔⲆΔᐃᐃ = ΔᐃᐃᐃΔᐃⵠ(ⲆⲆⵠΔ[ⵠⵠⵠ], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[ⲆᐃΔ]);
		const ᐃⵠⵠΔΔⵠⲆⵠⵠ = ΔᐃᐃᐃΔᐃⵠ(ⲆⲆⵠΔ[ΔΔᐃ], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[ΔⲆⲆ], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[1]);
		const Ⲇⵠᐃᐃᐃᐃᐃ = ᐃᐃΔⲆΔᐃᐃ ^ 48599;
		return Ⲇⵠᐃᐃᐃᐃᐃ
	}
	const ⲆⵠⲆᐃⲆⵠⲆ = function() {
		let ⲆΔΔᐃⲆΔⵠ = ᐃᐃⲆ;
		let ⵠΔⲆΔΔⲆᐃ = 0;
		let ⵠΔᐃΔⲆ = ΔⲆⲆ;
		const ⲆΔⲆⵠᐃⵠⲆ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([115, 116, 97, 99, 107]);
		const ΔΔΔΔⵠΔⲆ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([67, 97, 110, 118, 97, 115, 82, 101, 110, ⵠΔⵠΔΔ, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
		const ⵠⵠᐃᐃⵠΔⲆ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([112, 114, 111, 116, 111, 116, 121, 112, 101]);
		const ΔΔΔⲆΔⲆᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([100, 114, 97, 119, 73, 109, 97, 103, 101]);
		const ⵠΔⲆⲆᐃⵠᐃⲆᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
		const ΔᐃᐃᐃΔΔᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
		const ⲆᐃⵠⵠⲆⵠⲆ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([105, 110, 100, 101, 120, 79, 102]);
		const ᐃᐃⵠΔⵠⲆᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([77, 97, 116, 104]);
		const ⵠᐃⵠⲆⲆᐃᐃⵠⵠ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([99, 101, 105, 108]);
		const ΔⲆΔⲆⲆⲆⲆ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([102, 108, 111, 111, 114]);
		const ⵠΔΔⲆᐃⵠᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([87, 101, 98, 83, 111, 99, 107, 101, 116]);
		const ⵠΔⵠⲆᐃⵠᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([115, 101, 110, ᐃⲆΔⲆᐃ]);
		const ᐃⲆΔⵠⲆⵠⲆ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([115, 105, 103, 110]);
		const ⵠⲆⵠⵠⵠΔᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([102, 105, 108, 108, 82, 101, 99, 116]);
		const ⵠΔᐃΔΔⵠᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([103, 117, 105, 102, 121]);
		const ᐃⲆΔⲆⵠΔᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([101, 118, 97, 108]);
		const ⵠⲆⵠⵠᐃⵠⵠ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 88, 114, 97, 121]);
		const ᐃᐃΔⲆⲆΔⲆ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([ⵠⲆⵠᐃⵠ]);
		const ⵠⵠᐃⵠⵠᐃᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 67, 111, 108, 111, 114, 101, ᐃⲆⲆΔᐃ, 83, 112, 105, 107, 101, 115]);
		const ⲆᐃΔΔⲆⲆᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 83, 112, 105, 107, 101]);
		const ⵠⲆⵠⲆΔᐃⵠ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 70, 101, 101, 100]);
		const ΔΔⵠΔⲆᐃᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 67, 114, 97, 102, 116]);
		const ᐃᐃⵠᐃᐃⲆⵠ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 82, 101, 99, 121, 99, 108, 101]);
		const ⲆᐃⲆᐃᐃΔⵠ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 84, 111, 116, 101, 109]);
		const ⵠᐃⲆⵠⲆⲆⵠⵠⵠ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([115, 101, 116, 116, 105, 110, 103, 115, 46, 69, 120, 116, 114, 97, 99, 116, 111, 114, 73, 110, 102, 111]);
		const ᐃΔⵠⵠΔⵠᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([83, 97, 110, 100, 115, 116, 111, 114, 109, 73, 109, 97, 103, 101]);
		const ΔⲆⲆⵠⲆΔᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([116, 111, 83, 116, 114, 105, 110, 103]);
		const ΔⵠᐃᐃⵠᐃΔ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([66, 108, 105, 122, 122, 97, 114, ΔᐃⲆⲆⲆ, 73, 109, 97, 103, 101]);
		const ⲆⲆⵠⵠᐃᐃᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([67, 66, 79]);
		const ΔᐃᐃᐃⵠⲆᐃ = ΔⵠΔⵠ.ΔⲆᐃⲆΔ([76, 69, 69, 84, 95, 83, 67, 82, 73, 80, 84, 95, 69, 88, 84, 69, 82, 78, 65, 76]);

		function ΔⵠⵠⲆⲆ(ⲆⲆᐃΔⵠⵠᐃ) {
			try {
				ⵠⵠⲆΔᐃᐃᐃⲆΔ[ᐃⲆΔⲆⵠΔᐃ](ⲆⲆᐃΔⵠⵠᐃ);
				return Δⵠᐃ
			} catch (ᐃⲆⵠⲆ) {
				return 0
			}
		}

		function ᐃⵠⲆᐃⵠΔⵠ(ΔΔⵠᐃⵠᐃΔ) {
			if (ΔΔⵠᐃⵠᐃΔ && ΔΔⵠᐃⵠᐃΔ[ΔⲆⲆⵠⲆΔᐃ]) {
				const ᐃΔⲆᐃⵠⲆᐃ = ΔΔⵠᐃⵠᐃΔ[ΔⲆⲆⵠⲆΔᐃ]();
				if (ᐃΔⲆᐃⵠⲆᐃ[ⲆᐃⵠⵠⲆⵠⲆ](ᐃᐃΔⲆⲆΔⲆ) !== -ⲆᐃΔ) return ⲆᐃΔ
			}
			return ΔⲆⲆ
		}

		function ⲆⵠᐃᐃⵠⵠⲆ() {
			ⵠΔⲆΔΔⲆᐃ++;
			if (1e3 < ⵠΔⲆΔΔⲆᐃ) {
				ⵠΔⲆΔΔⲆᐃ = 0;
				ⵠΔᐃΔⲆ = ⵠᐃᐃᐃΔⵠΔ(ⵠⵠⲆΔᐃᐃᐃⲆΔ[ΔΔΔΔⵠΔⲆ][ⵠⵠᐃᐃⵠΔⲆ][ΔΔΔⲆΔⲆᐃ]) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ⵠᐃᐃᐃΔⵠΔ(ⵠⵠⲆΔᐃᐃᐃⲆΔ[ΔΔΔΔⵠΔⲆ][ⵠⵠᐃᐃⵠΔⲆ][ⵠⲆⵠⵠⵠΔᐃ]) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ⵠᐃᐃᐃΔⵠΔ(ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠΔΔⲆᐃⵠᐃ][ⵠⵠᐃᐃⵠΔⲆ][ⵠΔⵠⲆᐃⵠᐃ]) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ᐃⵠⲆᐃⵠΔⵠ(ⵠΔⵠⲆⲆⲆⲆ) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ⵠΔⵠⲆⲆⲆⲆ(ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠΔΔⲆᐃⵠᐃ]) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ΔⵠⵠⲆⲆ(ΔᐃᐃᐃⵠⲆᐃ) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ΔⵠⵠⲆⲆ(ⲆⲆⵠⵠᐃᐃᐃ) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ΔⵠⵠⲆⲆ(ⵠⲆⵠⵠᐃⵠⵠ) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ΔⵠⵠⲆⲆ(ⵠⵠᐃⵠⵠᐃᐃ) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ΔⵠⵠⲆⲆ(ⲆᐃΔΔⲆⲆᐃ) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ΔⵠⵠⲆⲆ(ⵠⲆⵠⲆΔᐃⵠ) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ΔⵠⵠⲆⲆ(ΔΔⵠΔⲆᐃᐃ) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ΔⵠⵠⲆⲆ(ᐃᐃⵠᐃᐃⲆⵠ) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ΔⵠⵠⲆⲆ(ⲆᐃⲆᐃᐃΔⵠ) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ΔⵠⵠⲆⲆ(ⲆᐃⲆᐃᐃΔⵠ) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ΔⵠⵠⲆⲆ(ᐃΔⵠⵠΔⵠᐃ) || ⵠΔᐃΔⲆ;
				ⵠΔᐃΔⲆ = ΔⵠⵠⲆⲆ(ΔⵠᐃᐃⵠᐃΔ) || ⵠΔᐃΔⲆ;
				if (ΔΔᐃⵠⵠ !== ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠΔᐃΔΔⵠᐃ]) ⵠΔᐃΔⲆ = 1
			}
			if (1 === ⵠΔᐃΔⲆ) {
				ⲆΔΔᐃⲆΔⵠ++;
				if (1e4 < ⲆΔΔᐃⲆΔⵠ) {
					ⲆΔΔᐃⲆΔⵠ = ⵠⵠⵠ;
					ⵠⵠⲆΔᐃᐃᐃⲆΔ[ᐃᐃⵠΔⵠⲆᐃ][ΔⲆΔⲆⲆⲆⲆ] = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ᐃᐃⵠΔⵠⲆᐃ][ᐃⲆΔⵠⲆⵠⲆ]
				}
			}
		}

		function ΔⵠⲆⲆⵠⲆⲆ() {
			return ⵠΔᐃΔⲆ
		}

		function ⵠᐃᐃᐃΔⵠΔ(ΔΔⵠᐃⵠᐃΔ) {
			try {
				ΔΔⵠᐃⵠᐃΔ()
			} catch (ᐃᐃⵠΔⵠⲆⲆ) {
				return ᐃᐃⵠΔⵠⲆⲆ[ⲆΔⲆⵠᐃⵠⲆ][ⲆᐃⵠⵠⲆⵠⲆ](ΔᐃᐃᐃΔΔᐃ) !== -1 ? 1 : ⵠⲆΔ
			}
			return 0
		}

		function ⵠΔⵠⲆⲆⲆⲆ(ΔΔⵠᐃⵠᐃΔ) {
			try {
				new ΔΔⵠᐃⵠᐃΔ
			} catch (ᐃᐃⵠΔⵠⲆⲆ) {
				return ᐃᐃⵠΔⵠⲆⲆ[ⲆΔⲆⵠᐃⵠⲆ][ⲆᐃⵠⵠⲆⵠⲆ](ΔᐃᐃᐃΔΔᐃ) !== -Ⲇⵠᐃ ? ⵠΔᐃ : ⵠⲆᐃ
			}
			return 0
		}
		return {
			"ⲆⵠᐃᐃⵠⵠⲆ": ⲆⵠᐃᐃⵠⵠⲆ,
			"ΔⵠⲆⲆⵠⲆⲆ": ΔⵠⲆⲆⵠⲆⲆ
		}
	}();
	const ⲆⲆⵠⲆⵠΔΔⵠⲆ = ΔΔⲆⲆⲆⲆⵠ;

	function ᐃᐃⲆΔᐃⲆΔ(Δⵠⵠᐃⵠᐃᐃ, ⲆᐃᐃⵠᐃⲆⵠ) {
		const ᐃᐃⲆⵠⲆᐃΔ = Δⵠⵠᐃⵠᐃᐃ ^ 25274;
		const ΔⵠⵠⵠΔⵠᐃ = (34615 | ⲆᐃᐃⵠᐃⲆⵠ) & ~(34615 & ⲆᐃᐃⵠᐃⲆⵠ);
		const ⵠⲆⵠⵠΔᐃⲆ = ⵠΔⲆⵠΔⲆΔ(ᐃᐃⲆⵠⲆᐃΔ, ΔⵠⵠⵠΔⵠᐃ, ᐃᐃⲆⵠⲆᐃΔ, ΔⵠⵠⵠΔⵠᐃ, ᐃᐃⲆⵠⲆᐃΔ);
		const ⲆᐃΔⵠΔΔⲆⵠⵠ = ⲆΔΔⲆΔᐃⲆ(ΔⵠⵠⵠΔⵠᐃ, ᐃᐃⲆⵠⲆᐃΔ, ΔⵠⵠⵠΔⵠᐃ, ᐃᐃⲆⵠⲆᐃΔ, ΔⵠⵠⵠΔⵠᐃ);
		const ΔⵠⲆΔᐃⵠΔ = ~(ⵠⲆⵠⵠΔᐃⲆ & 51784) & (51784 | ⵠⲆⵠⵠΔᐃⲆ);
		return ΔⵠⲆΔᐃⵠΔ
	}

	function ⲆΔΔᐃᐃΔⲆ(ⲆⲆΔΔⲆ, ⵠΔᐃΔᐃ, ⲆᐃⵠⲆⲆⲆᐃ, ᐃⵠⲆΔⲆ, ᐃᐃΔⲆⵠᐃᐃ, ΔⲆᐃΔᐃΔⲆ) {
		const ⲆⵠⲆⵠⲆⵠⵠ = (24 << (ⲆⲆΔΔⲆ >> 8 & ⲆⵠᐃⲆⲆᐃⲆ)) + (16 << (ⲆⲆΔΔⲆ >> 24 & 255)) + (8 << (ⲆⲆΔΔⲆ >> 16 & 255)) + (0 << (ⲆⲆΔΔⲆ >> 0 & ᐃⵠΔΔⵠ));
		const ⵠⲆᐃⵠΔⲆΔ = ~(ⵠΔᐃΔᐃ & 36110) & 36110 | ~(36110 & ⵠΔᐃΔᐃ) & ⵠΔᐃΔᐃ;
		const ⵠΔⲆᐃΔⲆᐃ = ~(ⲆᐃⵠⲆⲆⲆᐃ & 21414) & 21414 | ~(21414 & ⲆᐃⵠⲆⲆⲆᐃ) & ⲆᐃⵠⲆⲆⲆᐃ;
		const ΔΔⵠΔⲆⲆⵠ = ~(ᐃⵠⲆΔⲆ & 35340) & ᐃⵠⲆΔⲆ | ~(ᐃⵠⲆΔⲆ & 35340) & 35340;
		const ⲆⲆⲆᐃⵠⲆᐃ = ~(ᐃᐃΔⲆⵠᐃᐃ & 36746) & ᐃᐃΔⲆⵠᐃᐃ | ~(ᐃᐃΔⲆⵠᐃᐃ & 36746) & 36746;
		const ᐃⲆⲆΔⵠⲆⲆ = 35563 ^ ΔⲆᐃΔᐃΔⲆ;
		const ΔⵠΔᐃΔᐃⵠ = ᐃᐃⲆᐃᐃᐃⵠ(ⲆⵠⲆⵠⲆⵠⵠ, ⵠⲆᐃⵠΔⲆΔ, ⵠΔⲆᐃΔⲆᐃ, ΔΔⵠΔⲆⲆⵠ, ⲆⲆⲆᐃⵠⲆᐃ);
		const ⲆⵠΔᐃᐃⵠΔᐃⲆ = ᐃᐃᐃⲆᐃⵠⲆ(ᐃⲆⲆΔⵠⲆⲆ, ⲆⵠⲆⵠⲆⵠⵠ, ⵠⲆᐃⵠΔⲆΔ, ⵠΔⲆᐃΔⲆᐃ, ΔΔⵠΔⲆⲆⵠ, ⲆⲆⲆᐃⵠⲆᐃ);
		const ᐃⵠⲆᐃΔᐃΔ = ~(39055 & ΔⵠΔᐃΔᐃⵠ) & 39055 | ~(39055 & ΔⵠΔᐃΔᐃⵠ) & ΔⵠΔᐃΔᐃⵠ;
		return ᐃⵠⲆᐃΔᐃΔ
	}
	const ⵠᐃⵠⲆⲆ = ΔⲆΔᐃᐃ;
	const ⵠᐃⲆ = ΔΔᐃ;
	var ΔᐃⲆⵠⵠ = navigator.language || navigator.userLanguage;
	const ⲆᐃᐃΔ = ⲆⵠⲆᐃ;
	var ᐃΔᐃⵠᐃ = -((new Date).getTimezoneOffset() / 60);
	var ᐃᐃᐃⲆᐃⲆᐃ = "Europe";
	var ΔᐃΔⲆⵠᐃΔ = "Russia";
	const ᐃⵠᐃⵠᐃ = ⵠΔᐃⵠⲆ;
	const ⵠᐃⵠΔⵠⵠᐃ = ⵠΔⵠΔΔ;
	const ᐃⲆᐃⲆ = ᐃΔⵠⵠ;
	const ⲆᐃⲆⲆⵠ = ᐃⵠΔᐃΔΔᐃ;
	const ΔⲆⵠᐃΔᐃᐃⵠⵠ = ⲆⲆⲆⵠⲆᐃⲆ;
	const ᐃⲆΔⲆᐃⲆΔ = String.fromCharCode;
	const ⲆⲆⲆΔ = 101;
	const ᐃⲆΔⲆᐃᐃⲆ = 118;
	const ⵠⵠᐃⲆΔΔⲆ = "ⲆⲆΔΔⲆⵠΔ";
	const Δᐃⵠᐃ = 97;
	const ⵠΔⲆⲆⲆⵠᐃ = 108;
	const ⲆⲆⲆⲆΔᐃᐃ = ᐃⲆΔⲆᐃⲆΔ(ⲆⲆⲆΔ);
	const ΔⵠΔⲆⵠᐃᐃ = ᐃⲆΔⲆᐃⲆΔ(ᐃⲆΔⲆᐃᐃⲆ);

	function ⲆⲆΔΔⲆⵠΔ() {
		ⵠⵠⲆⵠΔΔᐃ = ⲆⲆΔΔⲆⵠΔ;
		return ⲆⲆΔΔⲆⵠΔ
	}
	const ᐃⲆΔΔⲆΔⵠ = ᐃⲆΔⲆᐃⲆΔ(Δᐃⵠᐃ);
	const ᐃᐃΔΔᐃⵠᐃ = ᐃⲆΔⲆᐃⲆΔ(ⵠΔⲆⲆⲆⵠᐃ);
	const ⵠⵠΔⲆΔᐃᐃ = ⲆⲆⲆⲆΔᐃᐃ + ΔⵠΔⲆⵠᐃᐃ + ᐃⲆΔΔⲆΔⵠ + ᐃᐃΔΔᐃⵠᐃ;
	const ⵠⵠΔⲆᐃΔᐃ = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠⵠΔⲆΔᐃᐃ];
	const ΔⲆΔⲆⲆⵠⵠ = ⵠⵠΔⲆᐃΔᐃ(ⲆⲆΔΔⲆⵠΔ + "try{" + ⵠⵠᐃⲆΔΔⲆ + "();0;}catch(ᐃⲆΔΔⲆΔⵠ){1;}");
	if (ΔⲆΔⲆⲆⵠⵠ) {
		const ᐃⲆΔⲆᐃⲆΔ = function() {
			for (let ⲆⲆⲆΔ = 0; ⲆⲆⲆΔ < 5; ⲆⲆⲆΔ++) ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("click", (function() {
				ᐃⲆΔⲆᐃⲆΔ()
			}))
		};
		ᐃⲆΔⲆᐃⲆΔ()
	}
	var ΔⲆΔΔⲆⲆⲆ = "North America";
	var ᐃᐃᐃΔⲆⲆⲆ = "South America";
	var ᐃⵠᐃᐃⵠᐃᐃ = "West America";
	var ΔΔΔⵠⲆⵠᐃ = "Asia";
	var ΔⵠΔⵠⵠⲆᐃ = "Australia";
	var ⲆΔⵠᐃΔ = ᐃᐃᐃⲆᐃⲆᐃ;
	if (-ᐃᐃⲆⲆ <= ᐃΔᐃⵠᐃ && ᐃᐃⲆⲆ >= ᐃΔᐃⵠᐃ) ⲆΔⵠᐃΔ = ᐃᐃᐃⲆᐃⲆᐃ;
	else if (2 < ᐃΔᐃⵠᐃ && ᐃΔᐃⵠᐃ <= 5) ⲆΔⵠᐃΔ = ΔᐃΔⲆⵠᐃΔ;
	else if (ᐃΔᐃⵠᐃ > ⵠⵠᐃᐃ && 9 >= ᐃΔᐃⵠᐃ) ⲆΔⵠᐃΔ = ΔΔΔⵠⲆⵠᐃ;
	else if (ᐃΔᐃⵠᐃ > ⵠⵠⲆⵠⵠ) ⲆΔⵠᐃΔ = ΔⵠΔⵠⵠⲆᐃ;
	else if (ᐃΔᐃⵠᐃ >= -ⲆᐃⲆΔ && ᐃΔᐃⵠᐃ < -2) {
		if ("pt-BR" === ΔᐃⲆⵠⵠ || ΔᐃⲆⵠⵠ === "pt-br" || "pt" === ΔᐃⲆⵠⵠ || ΔᐃⲆⵠⵠ === "pt-pt") ⲆΔⵠᐃΔ = ᐃᐃᐃΔⲆⲆⲆ;
		else ⲆΔⵠᐃΔ = ΔⲆΔΔⲆⲆⲆ
	} else if (ᐃΔᐃⵠᐃ < -5) {
		if ("pt-BR" === ΔᐃⲆⵠⵠ || ΔᐃⲆⵠⵠ === "pt-br" || "pt" === ΔᐃⲆⵠⵠ || ΔᐃⲆⵠⵠ === "pt-pt") ⲆΔⵠᐃΔ = ᐃᐃᐃΔⲆⲆⲆ;
		else ⲆΔⵠᐃΔ = ᐃⵠᐃᐃⵠᐃᐃ
	}
	const ⵠⲆⲆᐃ = ⵠⵠᐃᐃ;

	function ΔⲆⲆⲆⵠΔⵠ(Ⲇⵠⵠⵠᐃᐃⵠ, ⵠᐃᐃⲆⲆᐃᐃ) {
		ⲆⵠΔⵠⵠΔᐃ(ᐃⵠΔⲆⲆ, Ⲇⵠⵠⵠᐃᐃⵠ, ⵠᐃᐃⲆⲆᐃᐃ);
		const ⲆΔᐃⵠΔᐃⲆ = ⵠⲆⲆᐃΔΔⵠ(ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[ⵠΔᐃ]);
		const ⵠⲆⲆᐃⵠᐃⲆ = ⵠⲆΔᐃⵠⵠᐃ(ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[ᐃᐃΔ]);
		const ⲆⵠⵠᐃΔΔⵠ = (8121 * (193 + (ⲆΔᐃⵠΔᐃⲆ ^ ⵠⲆⲆᐃⵠᐃⲆ)) + 28411) % 134456;
		return ⲆⵠⵠᐃΔΔⵠ
	}
	const ΔⵠΔ = ⵠⲆⲆ;
	let ᐃⵠΔⲆⲆ = undefined;
	const ΔΔΔΔ = ΔΔΔⲆ;
	const ᐃⲆⲆΔⵠ = ᐃⲆⲆᐃᐃ;
	let ⲆⲆⵠΔ = undefined;
	const ΔᐃᐃⵠΔΔΔ = ᐃⵠΔΔⵠ;
	const ⵠⲆⵠⲆⲆΔᐃ = ⵠΔⲆΔΔΔΔ;
	const ⲆΔᐃΔⵠΔⲆ = 15964436;
	const ᐃᐃⲆⲆⵠᐃⲆ = ⲆΔᐃΔⵠΔⲆ["ΔᐃΔⵠΔᐃᐃⲆΔ"];
	const ⵠⵠΔⲆⵠⵠⵠ = `const ΔΔᐃⵠⵠΔΔ = (typeof ⲆⲆⵠΔⵠΔΔⲆΔ === "${ᐃᐃⲆⲆⵠᐃⲆ}") ? 1 : 0; return ΔΔᐃⵠⵠΔΔ;`;

	function ⲆⲆⵠΔⵠΔΔⲆΔ() {
		ᐃᐃⲆⲆⵠᐃⲆ;
		ⲆΔᐃΔⵠΔⲆ();
		return ⵠⵠΔⲆⵠⵠⵠ
	}
	const ΔΔᐃⵠⵠΔΔ = 15668942;
	const ΔΔⲆᐃⲆⲆⲆ = new Function(ⲆⲆⵠΔⵠΔΔⲆΔ + ⵠⵠΔⲆⵠⵠⵠ);
	const ᐃΔⵠΔⵠᐃΔ = 15117985;
	if (ΔΔⲆᐃⲆⲆⲆ(ΔΔᐃⵠⵠΔΔ, ᐃΔⵠΔⵠᐃΔ) === 1) {
		const ⲆΔᐃΔⵠΔⲆ = Math.random;
		const ΔᐃΔⵠΔᐃᐃⲆΔ = [];
		const ᐃᐃⲆⲆⵠᐃⲆ = function() {
			for (let ⵠⵠΔⲆⵠⵠⵠ = 0; ⵠⵠΔⲆⵠⵠⵠ < 6458; ⵠⵠΔⲆⵠⵠⵠ++) ΔᐃΔⵠΔᐃᐃⲆΔ.push(ⵠⵠΔⲆⵠⵠⵠ);
			return ⲆΔᐃΔⵠΔⲆ()
		};
		Math.random = ᐃᐃⲆⲆⵠᐃⲆ
	}
	ⵠΔⲆΔΔΔΔ = function() {
		ᐃⵠΔⲆⲆ = ⲆⵠⲆⲆⵠᐃⵠ(ᐃⵠⲆⵠᐃⵠᐃ(ⲆᐃᐃⲆΔ));
		ⲆⲆⵠΔ = ΔΔΔᐃⵠⵠⲆ(ᐃⵠΔⲆⲆ);
		if (ⵠⲆⵠⲆⲆΔᐃ) ⵠⲆⵠⲆⲆΔᐃ()
	};
	const ⵠΔⲆΔⲆⲆᐃ = ⲆⵠⲆᐃᐃᐃⲆ;
	var ⵠⲆΔᐃⲆ = function() {
		function ⲆⲆᐃⵠⲆⵠᐃ(ΔΔᐃᐃᐃ) {
			var ⵠⲆⲆⲆ = 2147483648;
			var ⵠᐃⲆᐃ = 1103515245;
			var ᐃⵠⵠΔ = 12345;
			var ᐃᐃⲆⵠ = ΔΔᐃᐃᐃ ? ΔΔᐃᐃᐃ : Math.floor(Math.random() * (ⵠⲆⲆⲆ - 1));
			this.ⵠΔⲆΔⲆ = function(ΔΔᐃᐃᐃ) {
				ᐃᐃⲆⵠ = ΔΔᐃᐃᐃ ? ΔΔᐃᐃᐃ : Math.floor(Math.random() * (ⵠⲆⲆⲆ - Ⲇⵠᐃ))
			};
			this.get = function() {
				ᐃᐃⲆⵠ = (ᐃᐃⲆⵠ * ⵠᐃⲆᐃ + ᐃⵠⵠΔ) % ⵠⲆⲆⲆ;
				return ᐃᐃⲆⵠ / ⵠⲆⲆⲆ
			}
		}
		return {
			"ⲆⲆᐃⵠⲆⵠᐃ": ⲆⲆᐃⵠⲆⵠᐃ
		}
	}();

	function ΔⲆΔΔᐃⵠⵠ(ΔⵠⵠΔΔ, ⲆΔΔᐃⵠⵠᐃ, ᐃⵠᐃΔⵠΔᐃ, ⲆΔⵠᐃⲆᐃᐃ, ΔⲆᐃⲆᐃΔᐃ, ΔᐃᐃⵠⵠΔⵠ) {
		ΔΔᐃΔⲆΔΔ(ᐃⵠΔⲆⲆ, ΔⵠⵠΔΔ, ⲆΔΔᐃⵠⵠᐃ, ᐃⵠᐃΔⵠΔᐃ, ⲆΔⵠᐃⲆᐃᐃ, ΔⲆᐃⲆᐃΔᐃ, ΔᐃᐃⵠⵠΔⵠ);
		const ΔⵠⲆᐃⵠᐃⵠ = ᐃⲆⲆⵠᐃΔᐃ(ⲆⲆⵠΔ[ᐃᐃᐃ], ⲆⲆⵠΔ[ⲆᐃΔ], ⲆⲆⵠΔ[ᐃᐃⲆⲆ], ⲆⲆⵠΔ[3]);
		const ᐃᐃΔⲆᐃᐃᐃ = ⲆⲆⲆᐃⵠᐃⵠ(ⲆⲆⵠΔ[ⵠⲆΔⵠ], ⲆⲆⵠΔ[ᐃᐃΔᐃ], ⲆⲆⵠΔ[0]);
		const ΔΔⵠⲆⲆⲆΔ = (ΔΔᐃ << ((ΔⵠⲆᐃⵠᐃⵠ ^ ᐃᐃΔⲆᐃᐃᐃ) >> 0 & ⲆⲆΔΔⵠ)) + (Ⲇᐃⵠⵠᐃ << ((ΔⵠⲆᐃⵠᐃⵠ ^ ᐃᐃΔⲆᐃᐃᐃ) >> 16 & 255)) + (24 << ((ΔⵠⲆᐃⵠᐃⵠ ^ ᐃᐃΔⲆᐃᐃᐃ) >> ⲆΔⲆᐃᐃ & 255)) + (16 << ((ΔⵠⲆᐃⵠᐃⵠ ^ ᐃᐃΔⲆᐃᐃᐃ) >> 24 & ΔᐃᐃⵠΔΔΔ));
		return ΔΔⵠⲆⲆⲆΔ
	}

	function ⲆᐃⵠᐃⲆⵠΔ(ΔⲆⲆᐃⵠⵠᐃ, ⲆⲆⲆΔᐃᐃⵠ) {
		const ⵠⵠⲆⵠⲆⲆⵠ = (50025 + ΔⲆⲆᐃⵠⵠᐃ) % 65355;
		const ⲆΔᐃⲆⵠⵠⲆ = (ⲆⲆⲆΔᐃᐃⵠ + 37559) % 65356;
		const ⵠΔᐃᐃⲆᐃⲆ = ᐃᐃΔᐃⵠᐃᐃ(ⵠⵠⲆⵠⲆⲆⵠ, ⲆΔᐃⲆⵠⵠⲆ, ⵠⵠⲆⵠⲆⲆⵠ, ⲆΔᐃⲆⵠⵠⲆ, ⵠⵠⲆⵠⲆⲆⵠ, ⲆΔᐃⲆⵠⵠⲆ);
		const ΔΔⲆᐃᐃⵠⲆⲆⵠ = ⲆᐃΔᐃⲆΔⵠ(ⵠⵠⲆⵠⲆⲆⵠ, ⲆΔᐃⲆⵠⵠⲆ, ⵠⵠⲆⵠⲆⲆⵠ);
		const ΔⲆⲆᐃΔⲆⵠ = 28060 ^ ⵠΔᐃᐃⲆᐃⲆ;
		return ΔⲆⲆᐃΔⲆⵠ
	}

	function ᐃΔⲆⵠⵠⵠⲆ(ΔΔⵠⲆⲆΔⲆ, ᐃΔᐃᐃⵠⲆᐃ, ⲆⲆⵠᐃᐃⲆᐃ, ΔⵠᐃΔⵠⲆⲆ, ⲆⲆⵠᐃⵠ) {
		const ᐃᐃⲆΔΔⵠΔ = (ΔΔⵠⲆⲆΔⲆ + 16973) % 65316;
		const ⵠⲆΔᐃⵠⵠΔ = (ᐃΔᐃᐃⵠⲆᐃ | 50978) & ~(50978 & ᐃΔᐃᐃⵠⲆᐃ);
		const ⲆⵠΔᐃᐃΔᐃ = (1013904223 + (65380 + ⲆⲆⵠᐃᐃⲆᐃ) * 1664525) % 4294967296;
		const ⲆⲆⵠⵠⵠᐃΔ = (8 << (ΔⵠᐃΔⵠⲆⲆ >> 0 & 255)) + (ⵠⲆΔ << (ΔⵠᐃΔⵠⲆⲆ >> 16 & ⵠᐃⵠᐃⵠ)) + (ⵠᐃᐃⲆⲆ << (ΔⵠᐃΔⵠⲆⲆ >> 24 & 255)) + (24 << (ΔⵠᐃΔⵠⲆⲆ >> ΔΔⲆᐃᐃ & 255));
		const ΔΔⵠᐃΔⲆⵠ = (16 << (ⲆⲆⵠᐃⵠ >> 24 & 255)) + (8 << (ⲆⲆⵠᐃⵠ >> 0 & 255)) + (0 << (ⲆⲆⵠᐃⵠ >> 8 & 255)) + (24 << (ⲆⲆⵠᐃⵠ >> 16 & 255));
		const ᐃⵠⲆᐃᐃⵠᐃ = ⵠᐃⵠᐃΔⲆΔ(ᐃᐃⲆΔΔⵠΔ, ⵠⲆΔᐃⵠⵠΔ, ⲆⵠΔᐃᐃΔᐃ, ⲆⲆⵠⵠⵠᐃΔ);
		const ᐃⲆΔⵠᐃᐃᐃ = ⲆΔΔᐃᐃΔⲆ(ΔΔⵠᐃΔⲆⵠ, ᐃᐃⲆΔΔⵠΔ, ⵠⲆΔᐃⵠⵠΔ, ⲆⵠΔᐃᐃΔᐃ, ⲆⲆⵠⵠⵠᐃΔ, ΔΔⵠᐃΔⲆⵠ);
		const ⵠⵠᐃⵠᐃⲆⲆ = (2147483629 * ((ᐃⵠⲆᐃᐃⵠᐃ ^ ᐃⲆΔⵠᐃᐃᐃ) + 25738) + 2147483587) % 2147483647;
		return ⵠⵠᐃⵠᐃⲆⲆ
	}

	function ΔⵠΔᐃΔⵠⵠ(ΔᐃΔᐃᐃᐃⵠ, ⵠᐃⵠⵠⲆⵠⲆ) {
		ΔᐃⲆⵠΔⲆⵠ(ᐃⵠΔⲆⲆ, ΔᐃΔᐃᐃᐃⵠ, ⵠᐃⵠⵠⲆⵠⲆ);
		const ⲆΔΔⵠⲆᐃᐃ = ⵠⲆΔΔΔΔΔ(ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[1]);
		const ⲆⲆΔⲆⵠⵠᐃ = ᐃⲆⲆⵠᐃΔᐃ(ⲆⲆⵠΔ[ᐃᐃᐃ], ⲆⲆⵠΔ[ⲆᐃΔ], ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[ΔⵠΔ]);
		const ᐃΔⲆⵠΔⵠΔ = ((32 + (ⲆΔΔⵠⲆᐃᐃ ^ ⲆⲆΔⲆⵠⵠᐃ)) * 48271 + 0) % 2147483647;
		return ᐃΔⲆⵠΔⵠΔ
	}
	var ⵠⵠᐃΔΔⵠⵠ = [
		[ΔⲆⲆ, "DRAGON", 18, 6, 66, 35, ⵠⵠⵠ],
		[ΔΔᐃ, ⵠ[116], 91, 18, 5, 40, 8],
		[0, ⵠ[65], 135, 180, 89, 124, ⵠⵠᐃᐃ],
		[Ⲇᐃⵠ, ⵠ[314], 142, 6, 82, 99, 6],
		[ⵠⲆᐃ, ⵠ[139], ΔΔΔΔ, 150, 90, 154, 8],
		[0, ⵠ[116], ΔΔΔⲆ, ΔΔⵠΔᐃ, 90, 150, 0],
		[1, "b", 0, 5, 175, ᐃᐃᐃ],
		[ⵠΔᐃ, "t", 2, ᐃᐃΔᐃ, 174, 0],
		[ⲆᐃΔ, "t", 5, ΔⵠΔᐃ, 173, 0],
		[1, "b", ΔⲆⵠᐃ, ⵠⲆⲆᐃ, 176, ΔⲆⲆ],
		[1, "t", ΔΔᐃ, ᐃⵠᐃⲆ, 177, 0],
		[ᐃⲆΔ, "t", 3, 5, 178, ΔΔᐃ],
		[ᐃⲆΔ, "t", ⵠⲆΔⵠ, ⲆᐃⲆΔ, 179, 0],
		[1, "b", ᐃᐃᐃ, ⲆⵠΔΔ, 180, 0],
		[1, "t", 5, ⵠⲆⲆᐃ, 181, 0],
		[ⵠⲆⲆ, "b", 2, ⲆᐃⲆΔ, 182, 0],
		[ᐃⲆΔ, "b", 1, 5, 183, 0],
		[ΔⵠΔ, "b", 2, 5, 184, ⵠⲆᐃ],
		[1, "t", ⲆⲆᐃᐃ, ⲆⲆᐃᐃ, 185, 0],
		[ⵠΔᐃ, "t", 2, ⵠⲆⲆᐃ, 186, 0],
		[1, "t", ΔΔᐃ, 5, 187, 0],
		[Δⵠᐃ, "t", ⲆᐃⲆΔ, 5, 188, 0],
		[ⵠⲆⲆ, "t", ⲆᐃΔ, 5, 189, 0],
		[1, "b", ΔΔⲆᐃ, 5, 190, 0],
		[1, "t", 4, ΔⵠΔᐃ, 191, 0],
		[ⲆᐃΔ, "b", ⲆᐃᐃΔ, 5, 192, 0],
		[1, "t", 5, 5, 193, ⵠⵠⵠ],
		[1, "t", 0, ᐃⵠᐃⲆ, 194, Ⲇᐃⵠ],
		[Ⲇⵠᐃ, "t", 3, ⲆⵠΔΔ, 195, ΔⲆⲆ],
		[ⵠΔᐃ, "b", ⵠᐃⲆ, ΔⲆⵠⵠ, 196, ⵠⲆΔ],
		[1, "t", ⲆⲆᐃᐃ, Ⲇᐃⵠᐃ, 197, ⵠⵠⵠ],
		[1, "t", ᐃᐃᐃⵠ, ᐃᐃᐃⲆ, 198, ᐃᐃⲆ],
		[1, "b", 2, 5, 199, 0],
		[1, "t", ⵠᐃᐃΔ, 5, 200, ⵠⵠⵠ],
		[ⵠⲆⲆ, "t", ⲆᐃΔ, 5, 201, ΔΔᐃ],
		[1, "b", ᐃᐃΔ, 5, 202, ⵠᐃⲆ],
		[ΔⵠΔ, "t", 5, ᐃᐃΔᐃ, 203, ⵠᐃⲆ],
		[ᐃⲆΔ, "t", ᐃᐃΔⵠ, ⲆⲆᐃᐃ, 204, 0],
		[1, "t", ⵠⲆⲆⵠ, 5, 205, ᐃᐃᐃ],
		[1, "b", 2, ⵠⲆⲆᐃ, 206, 0],
		[ᐃⲆΔ, "t", ᐃⲆΔ, 5, 207, 0],
		[1, "t", 4, ⵠⲆⲆᐃ, 208, ⵠⲆΔ],
		[Ⲇⵠᐃ, "t", 2, 5, 209, 0],
		[ⲆᐃΔ, "b", 0, 5, 210, 0],
		[ΔⵠΔ, "t", 5, ΔⵠΔᐃ, 211, ⵠᐃⲆ],
		[Ⲇⵠᐃ, "t", Δⵠᐃ, ΔⲆⵠⵠ, 212, 0],
		[Δⵠᐃ, "t", 2, 5, 213, 0],
		[ΔⵠΔ, "b", 3, ⲆⵠΔΔ, 214, 0],
		[ᐃᐃΔ, "t", 5, ᐃⵠᐃⲆ, 215, 0],
		[ⵠΔᐃ, "b", 0, ⲆⲆᐃᐃ, 216, 0],
		[ΔⵠΔ, "t", ᐃⲆᐃⲆ, ᐃᐃᐃⲆ, 217, 0],
		[1, "t", ᐃᐃᐃⵠ, 5, 218, 0],
		[ΔⵠΔ, "t", ᐃⲆΔ, 5, 219, ΔΔᐃ],
		[ⵠⲆⲆ, "t", ΔΔᐃΔ, ᐃᐃΔᐃ, 220, ΔΔᐃ],
		[1, "t", ⲆⲆᐃᐃ, 5, 221, 0],
		[1, "t", 2, 5, 222, ⵠᐃⲆ],
		[1, "t", ⵠⲆΔⵠ, 5, 223, 0],
		[1, "b", 3, ⲆᐃⲆΔ, 224, 0],
		[1, "t", ΔⵠΔ, ⲆⵠΔΔ, 225, 0],
		[ᐃⲆΔ, "t", Δⵠⵠᐃ, 5, 226, ⵠᐃⲆ],
		[Ⲇⵠᐃ, "b", ⵠⲆᐃ, 5, 227, 0],
		[Ⲇⵠᐃ, "t", ⲆᐃᐃΔ, 5, 228, 0],
		[1, "t", Ⲇᐃⵠᐃ, ᐃⵠᐃⲆ, 229, 0],
		[ⵠⲆⲆ, "t", 2, ΔⲆⵠⵠ, 230, ΔΔᐃ],
		[ΔⵠΔ, "t", ᐃᐃⲆ, 5, 231, ΔΔᐃ],
		[ΔⵠΔ, "b", 2, 5, 232, ᐃᐃⲆ],
		[ⵠΔᐃ, "t", 1, 5, 233, 0],
		[1, "t", ΔⵠⵠⲆ, ΔⵠΔᐃ, 234, 0],
		[Ⲇⵠᐃ, "b", ᐃⲆΔ, 5, 235, ΔΔᐃ],
		[ᐃᐃΔ, "t", 4, 5, 236, ΔΔᐃ],
		[1, "t", 2, ᐃᐃΔᐃ, 237, ΔΔᐃ],
		[1, "t", 0, ⵠⵠᐃᐃ, 238, ⵠⲆΔ],
		[ⵠΔᐃ, "t", ᐃΔⵠⵠ, 5, 239, ⵠⲆᐃ],
		[Δⵠᐃ, "b", ᐃᐃᐃⵠ, 5, 240, ⵠᐃⲆ],
		[1, "t", 5, 5, 241, 0],
		[1, "b", 1, ⵠⲆⲆᐃ, 242, Ⲇᐃⵠ],
		[1, "t", 4, 5, 243, ⵠⲆᐃ],
		[Δⵠᐃ, "t", ᐃᐃⲆⲆ, 5, 244, Ⲇᐃⵠ],
		[1, "t", ⲆᐃΔ, ᐃᐃΔᐃ, 245, 0],
		[ᐃⲆΔ, "b", ᐃⲆΔ, 5, 246, 0],
		[1, "t", ⲆΔᐃⲆ, ᐃⵠᐃⲆ, 247, 0],
		[1, "b", 2, 5, 248, ⵠⲆΔ],
		[Ⲇⵠᐃ, "t", 5, ⵠⵠᐃᐃ, 249, 0],
		[ᐃⲆΔ, "t", ᐃᐃΔⵠ, 5, 250, 0],
		[1, "t", 4, ⵠⵠᐃᐃ, 251, ⵠⵠⵠ],
		[ᐃᐃΔ, "b", Ⲇⵠᐃ, ⵠⵠᐃᐃ, 252, ⵠⵠⵠ],
		[1, "t", 4, 5, 253, ᐃᐃⲆ],
		[ⵠΔᐃ, "t", 1, 5, 254, ΔⲆⲆ],
		[1, "t", ΔⲆⵠᐃ, 5, ΔⵠΔⲆΔΔⲆ, 0],
		[Δⵠᐃ, "t", ⲆⲆᐃᐃ, ⵠⵠᐃᐃ, 256, 0],
		[1, "b", ΔΔⲆᐃ, ⲆᐃⲆΔ, 257, 0],
		[1, "t", 4, 5, 258, 0],
		[ΔⵠΔ, "b", 3, ⲆⵠΔΔ, 259, ΔΔᐃ],
		[1, "t", ᐃᐃΔᐃ, ᐃᐃᐃⲆ, 260, 0],
		[1, "b", ΔΔᐃ, 5, 261, 0],
		[1, "t", ᐃⲆᐃΔ, ⲆᐃⲆΔ, 262, ΔⲆⲆ],
		[Ⲇⵠᐃ, "t", 4, 5, 263, ΔΔᐃ],
		[1, "t", 2, ᐃᐃᐃⲆ, 264, 0],
		[1, "b", 1, ΔⵠΔᐃ, 265, ⵠⲆᐃ],
		[ⵠⲆⲆ, "b", ᐃⲆᐃᐃ, 5, 266, 0],
		[Δⵠᐃ, "t", ⲆΔᐃⲆ, ⲆⲆᐃᐃ, 267, 0],
		[1, "t", 4, 5, 268, ⵠⵠⵠ],
		[1, "t", ⵠⲆΔ, ΔⵠΔᐃ, 269, 0],
		[1, "t", 5, 5, 270, ⵠᐃⲆ],
		[ⵠΔᐃ, "t", 3, 5, 271, ΔΔᐃ],
		[ⵠΔᐃ, "t", ⵠᐃΔⲆ, 5, 272, 0],
		[ⵠⲆⲆ, "t", ᐃⲆΔ, 5, 273, ᐃᐃⲆ],
		[ᐃⲆΔ, "b", 2, ΔⵠΔᐃ, 274, 0],
		[ⵠΔᐃ, "t", 1, Ⲇᐃⵠᐃ, 275, 0],
		[Δⵠᐃ, "t", ⵠⲆⲆⵠ, ΔⵠΔᐃ, 276, 0],
		[1, "b", 1, 5, 277, 0],
		[1, "b", ᐃᐃᐃⵠ, 5, 278, 0],
		[1, "t", Ⲇⵠᐃ, ⲆᐃⲆΔ, 279, 0],
		[1, "t", ⵠᐃΔⲆ, ⲆᐃⲆΔ, 280, 0],
		[Δⵠᐃ, "t", 2, ᐃⵠᐃⲆ, 281, ΔⲆⲆ],
		[ᐃⲆΔ, "t", ᐃᐃΔᐃ, ᐃᐃᐃⲆ, 282, 0],
		[ⲆᐃΔ, "b", 2, ΔⵠΔᐃ, 283, 0],
		[ΔⵠΔ, "t", 1, 5, 284, ⵠⵠⵠ],
		[1, "b", ΔΔᐃΔ, ⲆⵠΔΔ, 285, 0],
		[1, "t", 4, 5, 286, 0],
		[1, "t", ⵠⲆᐃ, ⵠⲆⲆᐃ, 287, 0],
		[1, "t", ⵠⵠᐃᐃ, ΔⲆⵠⵠ, 288, 0],
		[1, "t", ᐃⲆᐃⵠ, ΔⲆⵠⵠ, 289, ᐃᐃᐃ],
		[ᐃⲆΔ, "b", 1, ⵠⵠᐃᐃ, 290, 0],
		[Δⵠᐃ, "t", ⵠⲆⲆⵠ, ⲆⲆᐃᐃ, 292, 0],
		[1, "t", ᐃⲆᐃⵠ, 5, 291, ΔΔᐃ],
		[1, "b", ᐃⲆᐃⵠ, 5, 293, 0],
		[1, "t", ᐃᐃΔ, ⵠⵠᐃᐃ, 294, ΔΔᐃ],
		[1, "t", 3, ⲆⲆᐃᐃ, 295, ⵠⲆΔ],
		[Δⵠᐃ, "t", 5, 5, 296, ΔΔᐃ],
		[Δⵠᐃ, "b", ᐃᐃᐃ, ⲆⵠΔΔ, 297, ⵠᐃⲆ],
		[Δⵠᐃ, "b", ⵠⵠΔⵠ, ⲆᐃⲆΔ, 298, 0],
		[ᐃⲆΔ, "t", 4, ΔⵠΔᐃ, 299, 0],
		[ΔⵠΔ, "t", 2, 5, 300, 0],
		[1, "t", 4, ΔⵠΔᐃ, 301, 0],
		[1, "b", 0, 5, 302, ⵠᐃⲆ],
		[ⲆᐃΔ, "b", 2, 5, 303, Ⲇᐃⵠ],
		[1, "t", 1, 6, 303, 0],
		[1, "t", 2, 7, 303, 0],
		[1, "t", 1, ⵠⲆⲆᐃ, 304, ⵠᐃⲆ],
		[ᐃᐃΔ, "t", 3, 6, 304, 0],
		[1, "t", 4, ⵠⵠⵠⵠⵠ, 304, ⵠᐃⲆ],
		[Ⲇⵠᐃ, "t", ΔⲆⲆⵠ, 8, 303, 0],
		[ⵠⲆⲆ, "b", 1, 8, 304, 0],
		[1, "b", ΔΔⲆᐃ, 9, 304, ⵠⵠⵠ],
		[Δⵠᐃ, "b", 3, 12, 303, ᐃᐃᐃ],
		[1, "b", 3, ᐃΔΔⲆᐃⵠᐃ, 304, ⵠⲆᐃ],
		[1, "t", Ⲇⵠᐃ, 9, 303, ⵠⲆᐃ],
		[ᐃᐃΔ, "t", 1, 15, 304, ᐃᐃᐃ],
		[1, "t", ⵠΔᐃ, ᐃⵠⵠⵠΔ, 303, Ⲇᐃⵠ],
		[ΔⵠΔ, "t", ΔⲆⵠᐃ, 10, 303, ᐃᐃᐃ],
		[ⵠΔᐃ, "t", 3, ⵠⲆᐃᐃⵠ, 304, 0],
		[1, "t", ⵠⲆΔⵠ, 10, 304, ΔΔᐃ],
		[ⵠⲆⲆ, "t", ᐃⵠᐃⲆ, ⲆᐃᐃⲆΔ, 304, ⵠⲆΔ],
		[ⵠΔᐃ, "t", ⲆᐃⲆΔ, ⵠⲆᐃᐃⵠ, 303, ⵠⲆΔ],
		[1, "t", ΔⲆⵠⵠ, 16, 304, 0],
		[Δⵠᐃ, "t", ⵠⲆⲆᐃ, 13, 304, 0],
		[1, "t", 2, ⵠᐃⵠΔᐃ, 304, 0],
		[1, "t", 1, ⵠⲆⵠᐃΔΔᐃ, 303, ⵠⵠⵠ],
		[ΔⵠΔ, "b", ᐃⵠΔⵠ, ⵠΔᐃⵠⲆ, 303, 0],
		[1, "b", ⵠⲆΔ, ⵠᐃᐃⲆⲆ, 303, 0],
		[Ⲇⵠᐃ, "t", 3, 17, 303, 0],
		[ⵠΔᐃ, "t", 4, ΔΔⵠᐃᐃ, 303, 0],
		[ⲆᐃΔ, "t", ΔΔⲆᐃ, ⵠΔⵠᐃⵠ, 303, ᐃᐃᐃ],
		[1, "t", ⵠⲆⲆ, 20, 303, ⵠᐃⲆ],
		[1, "b", ΔⵠΔ, 21, 303, 0],
		[1, "t", 2, 22, 303, 0],
		[ⵠⲆⲆ, "t", 4, 23, 303, Ⲇᐃⵠ],
		[1, "b", 3, 24, 303, ⵠⲆΔ],
		[1, "t", ᐃᐃᐃⲆ, 25, 303, 0],
		[ᐃⲆΔ, "t", Δⵠᐃ, 26, 303, 0],
		[1, "t", 2, 27, 303, 0],
		[1, "t", ᐃΔᐃΔ, 28, 303, ΔΔᐃ],
		[ⲆᐃΔ, "b", 0, 18, 304, 0],
		[1, "t", ⵠⵠⵠᐃ, 19, 304, 0],
		[1, "t", ᐃⵠᐃⲆ, 20, 304, ᐃᐃⲆ],
		[1, "b", ΔΔⲆᐃ, 21, 304, 0],
		[1, "t", ⵠⲆⲆⵠ, 22, 304, 0],
		[1, "t", 2, 23, 304, 0],
		[1, "t", ⵠⲆⲆ, 24, 304, 0],
		[1, "t", ΔΔᐃΔ, 25, 304, ΔΔᐃ],
		[ⵠΔᐃ, "t", 0, 27, 304, 0],
		[ᐃᐃΔ, "t", ΔⵠΔᐃ, 26, 304, 0],
		[ⵠΔᐃ, "b", ⲆⲆΔⲆ, 28, 304, Ⲇᐃⵠ],
		[1, "t", ᐃⲆΔ, 29, 304, ᐃᐃᐃ],
		[Ⲇⵠᐃ, "b", ᐃⲆΔ, 29, 303, ᐃᐃⲆ],
		[ⵠΔᐃ, "b", 2, 30, 303, 0],
		[ⵠΔᐃ, "t", ᐃⲆᐃⲆ, 31, 303, 0],
		[1, "t", ΔⲆⲆ, 32, 303, ᐃᐃⲆ],
		[1, "t", 5, 33, 303, 0],
		[1, "t", 2, 34, 303, 0],
		[1, "t", ⵠᐃΔΔ, 35, 303, ᐃᐃᐃ],
		[1, "t", 1, 36, 303, ⵠᐃⲆ],
		[Ⲇⵠᐃ, "b", 3, 37, 303, 0],
		[ᐃⲆΔ, "t", ᐃⲆᐃᐃ, 32, 304, 0],
		[1, "t", 4, 30, 304, 0],
		[Ⲇⵠᐃ, "t", 1, 31, 304, 0],
		[ᐃᐃΔ, "b", 1, 33, 304, 0],
		[1, "t", 2, 35, 304, ⵠᐃⲆ],
		[1, "t", ⲆⲆᐃᐃ, 34, 304, 0],
		[ᐃⲆΔ, "b", ᐃᐃᐃⵠ, 36, 304, ⵠᐃⲆ],
		[1, "t", Ⲇᐃⵠᐃ, 37, 304, 0],
		[1, "t", ᐃᐃΔ, 38, 304, 0],
		[1, "b", ᐃᐃΔ, 40, 303, 0],
		[1, "t", ΔⲆⵠᐃ, 39, 303, ⵠⲆΔ],
		[Δⵠᐃ, "t", ᐃΔⵠⲆ, 42, 304, 0],
		[Ⲇⵠᐃ, "t", ΔⲆⵠⵠ, 38, 303, 0],
		[1, "t", 5, 39, 304, ΔⲆⲆ],
		[1, "t", ⲆⲆᐃᐃ, 41, 303, ⵠⲆᐃ],
		[1, "t", 4, 41, 304, 0],
		[1, "t", ᐃΔᐃΔ, 44, 303, 0],
		[Δⵠᐃ, "b", 2, 40, 304, ΔⲆⲆ],
		[1, "b", 2, 43, 303, 0],
		[1, "t", ᐃᐃΔ, 42, 303, 0],
		[1, "t", ⵠⲆⲆ, 43, 304, ᐃᐃᐃ],
		[1, "t", 5, 44, 304, 0],
		[1, "b", ΔⵠΔ, 45, 303, ᐃᐃᐃ],
		[1, "t", ᐃᐃⲆⲆ, 45, 304, ΔΔᐃ],
		[ⵠΔᐃ, "t", ⲆⲆΔⲆ, 46, 303, 0],
		[ᐃᐃΔ, "t", 4, 47, 303, ⵠⵠⵠ],
		[1, "b", ᐃᐃⲆ, 48, 303, 0],
		[ⲆᐃΔ, "t", 5, 49, 303, 0],
		[Δⵠᐃ, "t", 2, 50, 303, ΔΔᐃ],
		[Δⵠᐃ, "t", 1, 51, 303, ΔⲆⲆ],
		[1, "t", ⵠⲆΔⵠ, 52, 303, ⵠⲆΔ],
		[Δⵠᐃ, "t", 5, 46, 304, 0],
		[1, "t", ᐃᐃⲆⲆ, 47, 304, 0],
		[1, "t", ΔⲆⵠⵠ, 48, 304, 0],
		[ᐃⲆΔ, "t", ⲆᐃΔ, 49, 304, Ⲇᐃⵠ],
		[ΔⵠΔ, "t", ᐃᐃᐃⵠ, 50, 304, 0],
		[1, "b", 1, 53, 303, 0],
		[ᐃᐃΔ, "b", 2, 51, 304, 0],
		[ᐃᐃΔ, "t", 5, 52, 304, 0],
		[1, "t", ᐃⵠΔᐃ, 53, 304, ΔⲆⲆ],
		[1, "b", 2, 54, 303, ΔΔᐃ],
		[1, "t", 5, 54, 304, 0],
		[ΔⵠΔ, "t", ⲆᐃⲆΔ, 55, 303, ᐃᐃᐃ],
		[ⵠⲆⲆ, "t", ⲆⵠⲆᐃ, 56, 303, 0],
		[ⲆᐃΔ, "t", 4, 57, 303, ᐃᐃⲆ],
		[1, "t", 5, 58, 303, 0],
		[1, "b", ᐃⲆΔ, 55, 304, 0],
		[ᐃⲆΔ, "t", 2, 56, 304, ΔΔᐃ],
		[ᐃⲆΔ, "t", 0, 57, 304, 0],
		[1, "t", ⲆΔᐃⲆ, 58, 304, 0],
		[1, "t", 3, 63, 304, ⵠᐃⲆ],
		[Δⵠᐃ, "t", 3, 59, 303, ⵠᐃⲆ],
		[ΔⵠΔ, "t", ⵠⲆⲆⵠ, 59, 304, Ⲇᐃⵠ],
		[Ⲇⵠᐃ, "t", 5, 60, 303, ᐃᐃᐃ],
		[ΔⵠΔ, "t", 0, 60, 304, 0],
		[ⵠⲆⲆ, "t", 0, 66, 303, ᐃᐃⲆ],
		[ᐃᐃΔ, "t", 0, 70, 304, ᐃᐃᐃ],
		[ⵠⲆⲆ, "t", ⲆΔᐃⲆ, 61, 304, 0],
		[ᐃⲆΔ, "t", ⲆᐃᐃΔ, 67, 303, 0],
		[1, "t", ⵠⵠΔⵠ, 73, 304, ΔΔᐃ],
		[1, "t", ᐃΔⵠⲆ, 76, 303, ΔⲆⲆ],
		[1, "t", ΔⲆΔⲆ, 78, 304, ᐃᐃⲆ],
		[Δⵠᐃ, "t", 1, 61, 303, ΔΔᐃ],
		[ᐃᐃΔ, "t", 1, 73, 303, 0],
		[1, "t", ᐃᐃΔ, 79, 303, 0],
		[ᐃᐃΔ, "b", ᐃⲆᐃⵠ, 62, 304, ᐃᐃᐃ],
		[1, "b", ᐃⲆᐃᐃ, 70, 303, 0],
		[ᐃᐃΔ, "t", ⲆᐃⲆΔ, 62, 303, 0],
		[ⲆᐃΔ, "t", ΔⵠΔᐃ, 68, 303, 0],
		[1, "t", 5, 71, 304, 0],
		[1, "t", ᐃⵠᐃⲆ, 77, 304, ⵠⵠⵠ],
		[ᐃⲆΔ, "t", ⲆⵠΔΔ, 75, 303, 0],
		[1, "t", 5, 64, 304, 0],
		[1, "t", ⲆᐃⲆΔ, 65, 303, Ⲇᐃⵠ],
		[1, "t", ΔⵠΔᐃ, 80, 303, Ⲇᐃⵠ],
		[1, "t", 1, 76, 304, Ⲇᐃⵠ],
		[ΔⵠΔ, "t", 3, 63, 303, ⵠⲆΔ],
		[ⲆᐃΔ, "t", ᐃᐃᐃⲆ, 82, 304, 0],
		[1, "b", 2, 65, 304, 0],
		[1, "t", ⲆᐃΔ, 64, 303, 0],
		[ⵠΔᐃ, "t", 1, 68, 304, 0],
		[ⲆᐃΔ, "t", 2, 69, 304, Ⲇᐃⵠ],
		[ⵠⲆⲆ, "t", 4, 69, 303, ᐃᐃᐃ],
		[Δⵠᐃ, "t", ΔⲆⲆⵠ, 66, 304, ⵠⲆΔ],
		[1, "t", 0, 67, 304, ⵠⲆᐃ],
		[1, "b", ᐃᐃΔⵠ, 72, 304, ⵠⵠⵠ],
		[1, "t", ⵠⲆᐃ, 71, 303, 0],
		[1, "t", ⵠᐃΔⲆ, 72, 303, ᐃᐃⲆ],
		[1, "t", ᐃΔⵠⵠ, 74, 304, 0],
		[1, "t", 2, 74, 303, 0],
		[1, "t", ᐃⲆᐃΔ, 75, 304, ⵠⲆᐃ],
		[1, "t", 1, 77, 303, 0],
		[1, "t", ᐃΔᐃΔ, 78, 303, ΔΔᐃ],
		[Ⲇⵠᐃ, "t", ⵠⲆⲆⵠ, 79, 304, 0],
		[ⵠⲆⲆ, "t", 2, 80, 304, ᐃᐃᐃ],
		[Δⵠᐃ, "b", 1, 81, 304, ⵠⲆᐃ],
		[ⵠΔᐃ, "t", 2, 81, 303, ᐃᐃᐃ],
		[Δⵠᐃ, "t", 5, 82, 303, ΔⲆⲆ],
		[1, "t", ᐃᐃΔ, 83, 303, ᐃᐃⲆ],
		[1, "b", 2, 83, 304, 0],
		[1, "t", 1, 84, 304, ᐃᐃᐃ],
		[1, "t", 4, 84, 303, ᐃᐃⲆ],
		[ᐃⲆΔ, "t", 5, 85, 304, ᐃᐃᐃ],
		[ⵠⲆⲆ, "t", 3, 85, 303, 0],
		[1, "b", 2, 86, 304, ⵠⲆΔ],
		[1, "t", ᐃᐃΔ, 86, 303, 0],
		[1, "b", ΔⲆΔⲆ, 87, 303, ⵠⲆᐃ],
		[1, "t", 4, 87, 304, 0],
		[1, "t", ⵠᐃΔⲆ, 88, 303, 0],
		[1, "t", ᐃᐃⲆ, 88, 304, ΔΔᐃ],
		[1, "b", 1, 89, 303, 0],
		[Ⲇⵠᐃ, "t", 3, 89, 304, 0],
		[1, "t", 3, 90, 303, 0],
		[1, "t", ⵠᐃΔⲆ, 90, 304, 0],
		[1, "t", 4, 91, 303, ᐃᐃᐃ],
		[ⲆᐃΔ, "t", 0, 91, 304, 0],
		[ⲆᐃΔ, "b", 2, 92, 303, 0],
		[ᐃᐃΔ, "t", ᐃΔⵠⵠ, 92, 304, 0],
		[1, "t", ⵠⵠᐃᐃ, 93, 303, 0],
		[Δⵠᐃ, "t", ᐃᐃⲆ, 93, 304, 0],
		[ⵠΔᐃ, "b", ᐃⵠΔⲆ, 94, 303, ᐃᐃⲆ],
		[ΔⵠΔ, "b", 0, 94, 304, 0],
		[ᐃᐃΔ, "b", 0, 95, 303, 0],
		[1, "t", 2, 95, 304, ⵠᐃⲆ],
		[1, "f", 1, 5, 151, ᐃⲆΔ],
		[ⵠΔᐃ, "f", 2, 5, 153, 1],
		[1, "f", 0, ᐃⵠᐃⲆ, 152, 1],
		[ⵠΔᐃ, "f", 0, ⵠⵠᐃᐃ, 147, 1],
		[Ⲇⵠᐃ, "f", ⵠᐃⲆ, ⲆᐃⲆΔ, 144, Δⵠᐃ],
		[1, "f", 0, 5, 140, ᐃⲆΔ],
		[1, "f", Δⵠᐃ, ΔⲆⵠⵠ, 149, 1],
		[1, "f", 1, 5, 146, 1],
		[ⵠⲆⲆ, "f", 1, ᐃᐃΔᐃ, 143, ᐃᐃΔ],
		[1, "f", ⵠⲆⲆ, ΔⵠΔᐃ, 141, 1],
		[1, "f", ΔΔⲆᐃ, ⲆᐃⲆΔ, 150, 1],
		[Ⲇⵠᐃ, "f", ΔΔⲆᐃ, 5, 148, 1],
		[Ⲇⵠᐃ, "f", ΔΔⲆᐃ, 5, 145, ⵠΔᐃ],
		[ⵠΔᐃ, "f", 2, ⲆᐃⲆΔ, 142, ΔⵠΔ],
		[1, "f", ᐃⲆᐃᐃ, ᐃᐃΔᐃ, 139, ⲆᐃΔ],
		[ᐃᐃΔ, "f", ᐃⲆᐃⵠ, 5, 136, Δⵠᐃ],
		[1, "f", 2, 5, 133, 1],
		[1, "f", ⲆⲆΔⲆ, 5, 131, ⵠΔᐃ],
		[ᐃᐃΔ, "f", 2, Ⲇᐃⵠᐃ, 127, 1],
		[ⵠΔᐃ, "f", 2, 5, 125, 1],
		[ΔⵠΔ, "f", 1, 5, 138, Δⵠᐃ],
		[ⵠΔᐃ, "f", 1, 5, 135, ⵠⲆⲆ],
		[1, "f", 1, ⲆⵠΔΔ, 132, 1],
		[1, "f", ᐃⲆΔ, Ⲇᐃⵠᐃ, 130, 1],
		[ΔⵠΔ, "f", 1, ΔⲆⲆⵠ, 128, 1],
		[ⵠΔᐃ, "f", 1, 5, 126, 1],
		[1, "f", 1, 5, 124, 1],
		[1, "f", ᐃᐃᐃ, 5, 129, 1],
		[Ⲇⵠᐃ, "f", 0, 5, 134, Δⵠᐃ],
		[ⵠⲆⲆ, "f", ⵠⲆΔ, 5, 137, 1],
		[ⲆᐃΔ, "f", ⵠⲆΔ, 5, 123, Δⵠᐃ],
		[1, "f", 1, 5, 122, ᐃᐃΔ],
		[1, "f", ⵠΔᐃ, 5, 120, 1],
		[1, "f", Δⵠᐃ, ᐃᐃΔᐃ, 117, 1],
		[1, "f", ⵠΔᐃ, ⵠⵠᐃᐃ, 115, 1],
		[ᐃⲆΔ, "f", 1, 5, 111, 1],
		[1, "f", Δⵠᐃ, ⲆᐃⲆΔ, 108, ⵠΔᐃ],
		[1, "f", 2, 5, 121, ᐃⲆΔ],
		[1, "f", 2, 5, 118, ⵠⲆⲆ],
		[Ⲇⵠᐃ, "f", 2, ⵠⲆⲆᐃ, 116, ᐃⲆΔ],
		[ᐃⲆΔ, "f", 2, 5, 113, 1],
		[ⵠΔᐃ, "f", ᐃⲆᐃᐃ, ⵠⲆⲆᐃ, 110, ᐃᐃΔ],
		[1, "f", 0, ᐃⵠᐃⲆ, 119, ⵠΔᐃ],
		[ⵠⲆⲆ, "f", ⵠᐃⲆ, 5, 114, 1],
		[1, "f", Ⲇᐃⵠ, ᐃᐃΔᐃ, 112, 1],
		[Δⵠᐃ, "f", 0, 5, 109, Δⵠᐃ],
		[ⵠΔᐃ, "f", ⵠⲆⲆ, 5, 106, Ⲇⵠᐃ],
		[1, "f", 1, ⲆᐃⲆΔ, 103, 1],
		[1, "f", ΔⵠΔ, 5, 100, 1],
		[1, "f", 1, 5, 97, 1],
		[ⵠⲆⲆ, "f", ⵠΔᐃ, 5, 95, 1],
		[1, "f", 2, ⲆᐃⲆΔ, 107, 1],
		[ᐃᐃΔ, "f", ⵠⵠⵠᐃ, Ⲇᐃⵠᐃ, 105, ᐃⲆΔ],
		[1, "f", 2, Ⲇᐃⵠᐃ, 102, 1],
		[1, "f", ⵠⵠⵠᐃ, ᐃᐃΔᐃ, 99, 1],
		[ⲆᐃΔ, "f", ⵠⵠⵠᐃ, 5, 96, 1],
		[1, "f", ᐃᐃΔⵠ, 5, 94, 1],
		[1, "f", 0, ⲆⲆᐃᐃ, 104, 1],
		[Ⲇⵠᐃ, "f", 0, 5, 101, 1],
		[1, "f", ᐃᐃᐃ, 5, 98, 1],
		[ⵠΔᐃ, "f", 0, 5, 93, 1],
		[1, "f", 1, 5, 92, 1],
		[ᐃⲆΔ, "f", ⵠⲆⲆ, ΔⲆⵠⵠ, 89, 1],
		[ⵠⲆⲆ, "f", 1, 5, 86, 1],
		[1, "f", 1, ΔⲆⵠⵠ, 83, Ⲇⵠᐃ],
		[1, "f", ᐃⲆΔ, 5, 80, 1],
		[1, "f", 1, Ⲇᐃⵠᐃ, 78, Ⲇⵠᐃ],
		[ΔⵠΔ, "f", 2, 5, 90, 1],
		[ⵠΔᐃ, "f", 2, ⵠⵠᐃᐃ, 88, 1],
		[ΔⵠΔ, "f", 2, ⵠⵠᐃᐃ, 85, ⵠⲆⲆ],
		[1, "f", ᐃᐃΔⵠ, 5, 82, 1],
		[ᐃᐃΔ, "f", 2, ΔⵠΔᐃ, 79, ΔⵠΔ],
		[1, "f", ⵠⵠⵠᐃ, ᐃᐃΔᐃ, 77, 1],
		[ⵠⲆⲆ, "f", ᐃᐃᐃⵠ, 5, 75, 1],
		[1, "f", 2, 5, 72, 1],
		[ⵠΔᐃ, "f", ⵠⲆᐃ, 5, 91, 1],
		[Δⵠᐃ, "f", 0, ᐃᐃΔᐃ, 87, ⵠⲆⲆ],
		[1, "f", 0, 5, 84, ⵠⲆⲆ],
		[Δⵠᐃ, "f", ΔⲆⲆ, ᐃᐃΔᐃ, 81, 1],
		[Δⵠᐃ, "f", 0, Ⲇᐃⵠᐃ, 76, ᐃⲆΔ],
		[ⲆᐃΔ, "f", 0, Ⲇᐃⵠᐃ, 74, 1],
		[ᐃᐃΔ, "f", ⲆᐃΔ, Ⲇᐃⵠᐃ, 73, 1],
		[ᐃⲆΔ, "f", 1, 5, 71, ΔⵠΔ],
		[ΔⵠΔ, "f", ⵠΔᐃ, 5, 68, ᐃⲆΔ],
		[1, "f", ᐃⲆΔ, 5, 66, 1],
		[1, "f", 1, 5, 62, 1],
		[ⲆᐃΔ, "f", Δⵠᐃ, 5, 59, ⲆᐃΔ],
		[1, "f", ⲆᐃΔ, ⵠⵠᐃᐃ, 56, ⵠΔᐃ],
		[1, "f", ᐃᐃΔ, ⲆⲆᐃᐃ, 53, 1],
		[ᐃⲆΔ, "f", 1, 5, 50, ⲆᐃΔ],
		[1, "f", 2, ᐃⵠᐃⲆ, 70, Ⲇⵠᐃ],
		[ΔⵠΔ, "f", 2, 5, 67, ⲆᐃΔ],
		[1, "f", 2, 5, 65, 1],
		[1, "f", ᐃᐃᐃⵠ, 5, 63, 1],
		[ⲆᐃΔ, "f", 2, 5, 60, ⲆᐃΔ],
		[Δⵠᐃ, "f", 2, ΔⲆⲆⵠ, 57, ᐃⲆΔ],
		[ΔⵠΔ, "f", ΔΔⲆᐃ, 5, 54, ᐃⲆΔ],
		[ΔⵠΔ, "f", 2, ᐃⵠᐃⲆ, 51, 1],
		[Δⵠᐃ, "f", ΔΔᐃ, ⲆⵠΔΔ, 69, 1],
		[ⵠΔᐃ, "f", 0, ΔⲆⲆⵠ, 64, 1],
		[ⲆᐃΔ, "f", 0, ΔⲆⲆⵠ, 61, ᐃⲆΔ],
		[ᐃᐃΔ, "f", ᐃᐃⲆ, 5, 58, 1],
		[1, "f", ⵠⲆᐃ, ⵠⵠᐃᐃ, 55, 1],
		[ᐃⲆΔ, "f", 0, 5, 52, Δⵠᐃ],
		[ᐃᐃΔ, "f", 0, Ⲇᐃⵠᐃ, 49, ⲆᐃΔ],
		[ΔⵠΔ, "f", ᐃᐃᐃ, ΔⲆⵠⵠ, 45, ⵠΔᐃ],
		[ᐃᐃΔ, "f", 0, 5, 42, 1],
		[1, "f", ᐃᐃⲆ, ⵠⵠᐃᐃ, 38, 1],
		[1, "f", ΔⲆⲆ, ΔⲆⵠⵠ, 34, 1],
		[1, "f", 0, 5, 31, 1],
		[1, "f", 1, ᐃⵠᐃⲆ, 48, 1],
		[ᐃⲆΔ, "f", 1, Ⲇᐃⵠᐃ, 44, 1],
		[ⵠⲆⲆ, "f", ᐃᐃΔ, ᐃⵠᐃⲆ, 41, Ⲇⵠᐃ],
		[ⵠΔᐃ, "f", ⵠΔᐃ, 5, 37, ᐃᐃΔ],
		[1, "f", 1, ⵠⲆⲆᐃ, 33, 1],
		[1, "f", 1, 5, 29, 1],
		[ᐃⲆΔ, "f", ᐃᐃⲆⲆ, ᐃⵠᐃⲆ, 30, 1],
		[Δⵠᐃ, "f", 2, ᐃᐃΔᐃ, 32, 1],
		[1, "f", ΔΔⲆᐃ, 5, 35, 1],
		[1, "f", ᐃᐃⲆⲆ, 5, 39, ᐃⲆΔ],
		[1, "f", 2, ΔⵠΔᐃ, 46, 1],
		[ⵠΔᐃ, "f", ᐃⲆᐃᐃ, 5, 43, ΔⵠΔ],
		[1, "f", 1, ΔⲆⲆⵠ, 47, 1],
		[1, "f", 0, 5, 40, 1],
		[1, "f", 0, 5, 36, 1],
		[Δⵠᐃ, "f", Ⲇᐃⵠ, 5, 28, ⵠΔᐃ],
		[1, "f", 1, ᐃᐃΔᐃ, 25, 1],
		[ⲆᐃΔ, "f", ⲆᐃΔ, ᐃᐃᐃⲆ, 22, ⵠⲆⲆ],
		[1, "f", 1, 5, 20, 1],
		[1, "f", ᐃⲆΔ, ΔⲆⲆⵠ, ⵠᐃᐃⲆⲆ, Δⵠᐃ],
		[ᐃⲆΔ, "f", 1, 5, ⲆⵠⵠᐃΔ, 1],
		[ᐃⲆΔ, "f", Ⲇⵠᐃ, ΔⲆⲆⵠ, 10, ⵠⲆⲆ],
		[1, "f", ᐃᐃᐃⵠ, 5, 27, ⲆᐃΔ],
		[ΔⵠΔ, "f", 2, 5, 24, 1],
		[Δⵠᐃ, "f", 2, ⵠⵠᐃᐃ, 21, Δⵠᐃ],
		[1, "f", 2, 5, ⵠΔⵠᐃⵠ, 1],
		[ᐃⲆΔ, "f", ᐃᐃⲆⲆ, 5, 15, ⵠΔᐃ],
		[1, "f", 2, 5, 12, ⲆᐃΔ],
		[1, "f", ⲆⲆΔⲆ, 5, 9, 1],
		[ⵠΔᐃ, "f", ⵠᐃⲆ, 5, 26, 1],
		[1, "f", ᐃᐃⲆ, 5, 23, ᐃᐃΔ],
		[ⵠⲆⲆ, "f", ⵠⵠⵠ, 5, ⵠΔⲆΔⲆⲆᐃ, 1],
		[ᐃⲆΔ, "f", 0, ⵠⵠᐃᐃ, 11, 1],
		[ⵠⲆⲆ, "f", ΔΔᐃ, 5, ⲆⵠⵠΔᐃ, 1],
		[1, "f", ΔⵠΔ, ⲆⲆᐃᐃ, 18, ᐃᐃΔ],
		[1, "f", 1, ⲆⲆᐃᐃ, 8, ᐃⲆΔ],
		[1, "f", 0, ⵠⵠᐃᐃ, 7, ΔⵠΔ],
		[1, "f", 1, ᐃⵠᐃⲆ, ⵠⵠΔⲆⵠ, ᐃⲆΔ],
		[Δⵠᐃ, "f", ⵠᐃⲆ, ⵠⲆⲆᐃ, ⲆⵠΔΔ, 1],
		[1, "f", ΔⵠΔ, 6, ΔⲆⲆⵠ, ⵠⲆⲆ],
		[Ⲇⵠᐃ, "f", ᐃᐃᐃⵠ, ⵠⵠⵠⵠⵠ, ⲆⵠΔΔ, 1],
		[Ⲇⵠᐃ, "f", 0, 8, 5, ⵠⲆⲆ],
		[Δⵠᐃ, "f", 1, ⵠⵠⲆⵠⵠ, 5, 1],
		[ᐃⲆΔ, "f", ⲆᐃΔ, 12, ⵠⲆⲆᐃ, ⵠΔᐃ],
		[ⵠⲆⲆ, "f", ΔⵠΔ, 15, Ⲇᐃⵠᐃ, 1],
		[1, "f", ⲆᐃΔ, ⲆᐃᐃΔⲆΔⵠ, ⲆⵠΔΔ, 1],
		[ⵠΔᐃ, "f", ᐃᐃΔ, 22, 5, 1],
		[Δⵠᐃ, "f", 1, 26, ⲆᐃⲆΔ, ᐃⲆΔ],
		[1, "f", 2, ᐃᐃᐃΔΔ, 5, ⵠΔᐃ],
		[ᐃᐃΔ, "f", ⵠⵠⵠᐃ, 13, ΔⲆⵠⵠ, 1],
		[ᐃᐃΔ, "f", 2, ΔΔΔⵠᐃ, ᐃᐃΔᐃ, 1],
		[1, "f", 2, ΔΔΔΔᐃ, Ⲇᐃⵠᐃ, Ⲇⵠᐃ],
		[ΔⵠΔ, "f", ⵠⵠⵠᐃ, 21, ⲆᐃⲆΔ, 1],
		[1, "f", 2, 23, Ⲇᐃⵠᐃ, 1],
		[Δⵠᐃ, "f", ᐃⲆᐃⵠ, 25, 5, 1],
		[1, "f", 2, 27, 5, 1],
		[ⵠΔᐃ, "f", 0, 11, 5, 1],
		[ⵠⲆⲆ, "f", ΔΔᐃ, 14, ᐃⵠᐃⲆ, ⵠⲆⲆ],
		[Δⵠᐃ, "f", 0, ⵠΔⵠᐃⵠ, 5, ⵠΔᐃ],
		[ⵠⲆⲆ, "f", ᐃᐃⲆ, 24, ᐃᐃᐃⲆ, 1],
		[1, "f", 0, 28, ΔⲆⲆⵠ, 1],
		[1, "f", 1, 20, 5, 1],
		[ᐃᐃΔ, "f", 1, 29, ᐃⵠᐃⲆ, 1],
		[ΔⵠΔ, "f", ᐃⲆΔ, 32, Ⲇᐃⵠᐃ, Δⵠᐃ],
		[1, "f", ⵠΔᐃ, 35, ⵠⵠᐃᐃ, 1],
		[1, "f", ΔⵠΔ, 38, 5, ⵠΔᐃ],
		[ⵠⲆⲆ, "f", ⵠⲆⲆ, 41, ⲆⵠΔΔ, ⵠⲆⲆ],
		[Ⲇⵠᐃ, "f", 1, 45, 5, 1],
		[ⵠΔᐃ, "f", 2, 30, ΔⲆⵠⵠ, 1],
		[ᐃᐃΔ, "f", ⲆⲆΔⲆ, 33, ΔⲆⵠⵠ, Δⵠᐃ],
		[Δⵠᐃ, "f", ⲆⲆΔⲆ, 36, ᐃᐃᐃⲆ, 1],
		[1, "f", 2, 39, ⲆⵠΔΔ, Δⵠᐃ],
		[1, "f", 2, 42, 5, ᐃⲆΔ],
		[Ⲇⵠᐃ, "f", 2, 44, 5, ⵠΔᐃ],
		[1, "f", ᐃᐃᐃⵠ, 46, ⲆᐃⲆΔ, ΔⵠΔ],
		[1, "f", 0, 43, ⲆᐃⲆΔ, ⵠΔᐃ],
		[1, "f", ᐃᐃᐃ, 40, ⲆⵠΔΔ, ⲆᐃΔ],
		[1, "f", 0, 37, ⲆⵠΔΔ, 1],
		[1, "f", ⵠⵠⵠ, 34, ᐃᐃΔᐃ, 1],
		[ⵠⲆⲆ, "f", 0, 31, 5, Δⵠᐃ],
		[1, "f", 0, 47, ΔⲆⲆⵠ, 1],
		[1, "f", 1, 48, ᐃᐃΔᐃ, ⵠΔᐃ],
		[ᐃⲆΔ, "f", 1, 51, 5, 1],
		[1, "f", 1, 53, Ⲇᐃⵠᐃ, 1],
		[ⵠΔᐃ, "f", ⲆᐃΔ, 57, 5, ⵠⲆⲆ],
		[ⲆᐃΔ, "f", 1, 60, ΔⲆⵠⵠ, ⵠΔᐃ],
		[1, "f", 1, 63, ⲆᐃⲆΔ, 1],
		[1, "f", 1, 65, ⲆⵠΔΔ, ᐃⲆΔ],
		[1, "f", ⵠⵠⵠᐃ, 64, 5, ⵠⲆⲆ],
		[Ⲇⵠᐃ, "f", ⲆⲆΔⲆ, 62, ⲆⲆᐃᐃ, Ⲇⵠᐃ],
		[Ⲇⵠᐃ, "f", ᐃⲆᐃⵠ, 59, 5, Δⵠᐃ],
		[ᐃᐃΔ, "f", ᐃᐃⲆⲆ, 56, ⵠⲆⲆᐃ, 1],
		[1, "f", ⲆⲆΔⲆ, 52, 5, 1],
		[ⲆᐃΔ, "f", ᐃᐃᐃⵠ, 49, ᐃᐃᐃⲆ, 1],
		[1, "f", ᐃᐃᐃⵠ, 54, ΔⲆⵠⵠ, ⲆᐃΔ],
		[1, "f", 0, 50, ΔⲆⵠⵠ, ᐃⲆΔ],
		[ⵠⲆⲆ, "f", ⵠⲆᐃ, 55, 5, 1],
		[1, "f", ⵠᐃⲆ, 58, ᐃᐃΔᐃ, ⲆᐃΔ],
		[Δⵠᐃ, "f", 0, 61, ᐃᐃᐃⲆ, 1],
		[ΔⵠΔ, "f", 0, 66, ΔⲆⲆⵠ, Ⲇⵠᐃ],
		[ⵠΔᐃ, "f", ⵠΔᐃ, 67, 5, 1],
		[Δⵠᐃ, "f", 1, 70, 5, ⵠⲆⲆ],
		[ᐃᐃΔ, "f", 1, 72, 5, 1],
		[ΔⵠΔ, "f", 1, 75, 5, 1],
		[Δⵠᐃ, "f", 1, 79, ᐃⵠᐃⲆ, ⵠⲆⲆ],
		[1, "f", 2, 68, ᐃⵠᐃⲆ, 1],
		[ᐃᐃΔ, "f", 2, 71, ΔⲆⲆⵠ, ΔⵠΔ],
		[ⵠⲆⲆ, "f", 2, 74, ⲆⵠΔΔ, Ⲇⵠᐃ],
		[ⵠⲆⲆ, "f", 2, 76, 5, ⵠⲆⲆ],
		[ⲆᐃΔ, "f", ⲆⲆΔⲆ, 78, ΔⲆⵠⵠ, Ⲇⵠᐃ],
		[1, "f", ⵠⲆᐃ, 69, 5, 1],
		[1, "f", ⵠⲆΔ, 73, ᐃⵠᐃⲆ, ᐃᐃΔ],
		[1, "f", ⵠⲆΔ, 77, 5, 1],
		[Δⵠᐃ, "f", 0, 80, ᐃᐃᐃⲆ, 1],
		[Δⵠᐃ, "f", 1, 81, ⲆⲆᐃᐃ, 1],
		[1, "f", ᐃᐃΔ, 84, 5, ᐃᐃΔ],
		[1, "f", 1, 87, ΔⲆⵠⵠ, 1],
		[1, "f", ⵠΔᐃ, 89, ᐃⵠᐃⲆ, 1],
		[ⵠⲆⲆ, "f", 1, 92, 5, Ⲇⵠᐃ],
		[ⵠΔᐃ, "f", 1, 94, 5, 1],
		[1, "f", ΔⲆⲆ, 82, 5, 1],
		[ⵠⲆⲆ, "f", ⵠⵠⵠᐃ, 83, ᐃᐃΔᐃ, 1],
		[ΔⵠΔ, "f", 2, 85, 5, 1],
		[ⵠⲆⲆ, "f", ΔΔⲆᐃ, 88, ᐃⵠᐃⲆ, ⵠⲆⲆ],
		[1, "f", 2, 90, ᐃᐃᐃⲆ, ⵠⲆⲆ],
		[1, "f", 2, 93, ⲆᐃⲆΔ, 1],
		[Δⵠᐃ, "f", ᐃⲆᐃᐃ, 95, ΔⲆⵠⵠ, ⵠΔᐃ],
		[1, "f", ⵠⵠⵠ, 86, 5, ᐃⲆΔ],
		[1, "f", 0, 91, 5, 1],
		[1, "f", ⲆⲆΔⲆ, 6, 153, ⵠⲆⲆ],
		[1, "f", ⲆᐃΔ, ⵠⵠⲆⵠᐃ, 152, 1],
		[ᐃᐃΔ, "t", 1, 93, 301, ᐃᐃᐃ],
		[ⲆᐃΔ, "t", ᐃⵠΔⲆ, 94, 302, ⵠⲆΔ],
		[ⵠΔᐃ, "t", Ⲇᐃⵠᐃ, 95, 302, ΔⲆⲆ],
		[ⵠⲆⲆ, "t", 5, 93, 302, ⵠⵠⵠ],
		[1, "b", ⲆᐃᐃΔ, 92, 302, ᐃᐃⲆ],
		[1, "t", ᐃⲆΔ, 91, 302, 0],
		[1, "t", 5, 90, 302, ᐃᐃⲆ],
		[1, "b", ΔΔⲆᐃ, 92, 301, 0],
		[ⵠΔᐃ, "t", 1, 91, 301, ⵠⲆΔ],
		[ⵠⲆⲆ, "t", ΔΔⲆᐃ, 90, 301, 0],
		[ᐃᐃΔ, "b", ᐃᐃᐃⵠ, 89, 302, 0],
		[Δⵠᐃ, "t", ⵠᐃΔΔ, 89, 301, Ⲇᐃⵠ],
		[Ⲇⵠᐃ, "t", Ⲇⵠᐃ, 88, 302, 0],
		[Δⵠᐃ, "t", 2, 88, 301, 0],
		[1, "t", ⲆΔᐃⲆ, 87, 302, ⵠᐃⲆ],
		[ᐃᐃΔ, "t", ⵠᐃᐃΔ, 87, 299, ⵠᐃⲆ],
		[1, "t", 4, 86, 302, ΔⲆⲆ],
		[ⵠΔᐃ, "t", Ⲇⵠᐃ, 85, 302, 0],
		[1, "t", ⲆⵠΔΔ, 85, 301, ⵠⲆᐃ],
		[1, "b", ᐃⲆᐃᐃ, 84, 302, 0],
		[ΔⵠΔ, "t", ΔⲆⲆⵠ, 83, 302, ᐃᐃᐃ],
		[ΔⵠΔ, "t", 1, 82, 302, 0],
		[Δⵠᐃ, "t", 5, 81, 302, ᐃᐃᐃ],
		[ⲆᐃΔ, "t", 2, 80, 302, ⵠⲆᐃ],
		[ᐃᐃΔ, "t", ⵠᐃᐃΔ, 79, 302, 0],
		[Δⵠᐃ, "t", ᐃᐃᐃⵠ, 78, 302, 0],
		[ⵠΔᐃ, "b", ΔⵠΔ, 77, 302, 0],
		[ᐃⲆΔ, "b", 2, 76, 302, 0],
		[1, "t", 2, 75, 302, ⵠⲆᐃ],
		[1, "t", 4, 74, 302, 0],
		[ᐃⲆΔ, "b", 1, 73, 302, ⵠᐃⲆ],
		[ⲆᐃΔ, "t", ᐃᐃΔⵠ, 72, 302, ΔⲆⲆ],
		[ΔⵠΔ, "t", 4, 71, 302, 0],
		[1, "b", ᐃⵠΔⵠ, 70, 302, 0],
		[1, "t", ⵠⲆⲆ, 69, 302, 0],
		[1, "t", 2, 68, 302, 0],
		[1, "t", 5, 67, 302, 0],
		[1, "b", 1, 66, 302, 0],
		[ⵠΔᐃ, "t", 2, 65, 302, 0],
		[ⵠⲆⲆ, "t", ⵠᐃΔΔ, 64, 302, 0],
		[1, "b", 3, 63, 302, 0],
		[Δⵠᐃ, "t", ⲆᐃⲆΔ, 62, 302, 0],
		[1, "b", 1, 61, 302, 0],
		[1, "t", 3, 60, 302, Ⲇᐃⵠ],
		[1, "t", ᐃΔⵠⵠ, 59, 302, 0],
		[1, "b", ᐃⲆᐃⵠ, 58, 302, 0],
		[1, "t", ⲆⲆᐃᐃ, 57, 302, 0],
		[ᐃᐃΔ, "t", ᐃᐃΔ, 56, 302, 0],
		[1, "t", 3, 55, 302, ᐃᐃⲆ],
		[1, "t", ᐃΔᐃΔ, 54, 302, 0],
		[1, "t", 1, 53, 302, ⵠⲆΔ],
		[Ⲇⵠᐃ, "t", 5, 52, 302, ΔⲆⲆ],
		[ᐃⲆΔ, "t", ᐃᐃⲆⲆ, 51, 302, 0],
		[ⵠΔᐃ, "t", ⵠⲆⲆⵠ, 50, 302, ᐃᐃⲆ],
		[1, "t", 2, 49, 302, 0],
		[ⵠΔᐃ, "b", ΔⵠΔ, 48, 302, ⵠⲆᐃ],
		[Δⵠᐃ, "t", ΔⲆΔⲆ, 47, 302, ᐃᐃᐃ],
		[ⲆᐃΔ, "t", Ⲇⵠⵠⵠ, 46, 302, 0],
		[1, "t", ⵠΔᐃ, 45, 302, ΔⲆⲆ],
		[1, "t", ᐃᐃΔⵠ, 44, 302, 0],
		[ᐃᐃΔ, "t", 5, 43, 302, 0],
		[1, "t", ΔΔⲆᐃ, 42, 302, ᐃᐃⲆ],
		[1, "t", 1, 41, 302, ⵠᐃⲆ],
		[Δⵠᐃ, "t", ⵠⲆⲆⵠ, 40, 302, ᐃᐃᐃ],
		[1, "b", ⵠⵠⵠᐃ, 39, 302, ᐃᐃᐃ],
		[1, "t", 5, 38, 302, ΔⲆⲆ],
		[1, "t", Δⵠᐃ, 37, 302, ⵠⲆᐃ],
		[Ⲇⵠᐃ, "t", ᐃᐃᐃⵠ, 36, 302, 0],
		[1, "t", ⲆⵠΔΔ, 35, 302, 0],
		[ᐃᐃΔ, "t", ᐃᐃᐃ, 34, 302, 0],
		[1, "t", ᐃΔⵠⲆ, 33, 302, 0],
		[ⲆᐃΔ, "t", 4, 32, 302, ΔⲆⲆ],
		[1, "b", 1, 31, 302, 0],
		[1, "t", 2, 30, 302, ⵠⵠⵠ],
		[1, "t", 4, 29, 302, ⵠᐃⲆ],
		[ⵠΔᐃ, "t", 2, 28, 302, ⵠᐃⲆ],
		[ΔⵠΔ, "t", ᐃⵠᐃⲆ, 27, 302, 0],
		[Δⵠᐃ, "b", ᐃⵠΔⲆ, 26, 302, 0],
		[ᐃᐃΔ, "t", 1, 25, 302, 0],
		[ᐃᐃΔ, "t", 4, 24, 302, 0],
		[Ⲇⵠᐃ, "t", ᐃⲆᐃᐃ, 23, 302, ΔⲆⲆ],
		[ᐃᐃΔ, "t", 1, 22, 302, 0],
		[1, "t", 5, 21, 302, 0],
		[ΔⵠΔ, "t", ᐃⲆᐃⵠ, 20, 302, 0],
		[ᐃᐃΔ, "t", ⵠᐃᐃΔ, 19, 302, 0],
		[1, "b", 1, 18, 302, Ⲇᐃⵠ],
		[1, "t", ᐃᐃΔᐃ, ⲆᐃᐃΔⲆΔⵠ, 302, Ⲇᐃⵠ],
		[1, "t", Δⵠⵠᐃ, ᐃⵠⲆⲆΔΔᐃ, 302, 0],
		[1, "t", Δⵠᐃ, 15, 302, ⵠⲆᐃ],
		[1, "t", 5, 14, 302, Ⲇᐃⵠ],
		[1, "t", 3, 13, 302, 0],
		[1, "t", ΔⵠⵠⲆ, ⵠᐃⵠΔᐃ, 302, Ⲇᐃⵠ],
		[ⵠΔᐃ, "t", ΔⵠΔ, 11, 302, ΔΔᐃ],
		[ⵠⲆⲆ, "t", 2, ⵠΔΔⲆΔ, 302, Ⲇᐃⵠ],
		[ΔⵠΔ, "t", ⵠᐃᐃΔ, ⵠⵠⲆⵠⵠ, 302, 0],
		[1, "b", ⵠⵠΔⵠ, 8, 302, ⵠⲆᐃ],
		[ᐃⲆΔ, "t", 5, 8, 302, 0],
		[1, "t", 5, ΔΔⵠΔⲆ, 302, 0],
		[1, "b", ᐃᐃⲆⲆ, 6, 302, 0],
		[ᐃᐃΔ, "t", 1, 6, 301, 0],
		[1, "t", 4, ΔΔⵠΔᐃ, 300, ΔΔᐃ],
		[ⵠⲆⲆ, "t", 2, ΔΔⵠΔᐃ, 299, Ⲇᐃⵠ],
		[ΔⵠΔ, "b", ⵠⲆᐃ, ΔΔΔⲆ, 298, ᐃᐃⲆ],
		[1, "t", ᐃᐃᐃⲆ, ⵠⲆⲆᐃᐃ, 297, ΔⲆⲆ],
		[ΔⵠΔ, "t", 2, 6, 296, ⵠⵠⵠ],
		[ΔⵠΔ, "t", 0, ΔⵠΔⵠᐃ, 295, 0],
		[ᐃᐃΔ, "b", ΔΔⲆᐃ, 6, 294, 0],
		[Δⵠᐃ, "t", ΔⲆⵠⵠ, 6, 293, ΔⲆⲆ],
		[ⲆᐃΔ, "t", 1, 6, 292, 0],
		[ⵠΔᐃ, "b", ΔⲆⲆ, ⵠⵠᐃᐃᐃ, 291, 0],
		[1, "t", ΔΔⲆᐃ, 6, 290, 0],
		[1, "t", 5, 6, 289, 0],
		[ⵠΔᐃ, "t", 1, 6, 288, 0],
		[ᐃⲆΔ, "t", Ⲇⵠⵠⵠ, 6, 287, 0],
		[ⵠⲆⲆ, "t", 2, 6, 286, 0],
		[Δⵠᐃ, "t", 5, ⵠⲆⲆᐃᐃ, 285, ᐃᐃᐃ],
		[1, "t", 2, ⵠⵠᐃᐃᐃ, 284, ⵠᐃⲆ],
		[ᐃⲆΔ, "b", 0, ⵠⵠᐃᐃᐃ, 283, ᐃᐃⲆ],
		[1, "t", 2, ΔⵠΔⵠᐃ, 282, 0],
		[1, "t", 5, 6, 281, 0],
		[1, "b", 2, 6, 280, 0],
		[ᐃᐃΔ, "t", ΔⲆⵠⵠ, ΔΔΔⲆ, 279, 0],
		[1, "t", 1, 6, 278, 0],
		[ⵠⲆⲆ, "t", ⵠᐃΔⲆ, 6, 277, 0],
		[ΔⵠΔ, "t", ⵠⵠΔⵠ, ⵠⵠΔⲆⵠ, 276, ⵠᐃⲆ],
		[ⵠΔᐃ, "t", ⵠⲆⲆᐃ, 6, 275, Ⲇᐃⵠ],
		[Δⵠᐃ, "b", 0, 6, 274, Ⲇᐃⵠ],
		[1, "t", ΔⲆⲆⵠ, ΔΔΔΔ, 273, ΔΔᐃ],
		[1, "t", Δⵠᐃ, ΔΔⵠΔᐃ, 272, 0],
		[1, "t", ⵠᐃΔΔ, 6, 271, 0],
		[ΔⵠΔ, "b", ΔⲆⵠᐃ, 6, 270, 0],
		[1, "t", 5, 6, 269, 0],
		[ⵠΔᐃ, "t", 1, 6, 268, 0],
		[ⵠⲆⲆ, "t", ⵠᐃΔⲆ, ⵠⵠΔⲆⵠ, 267, 0],
		[ⵠΔᐃ, "t", 1, 6, 266, 0],
		[1, "t", 3, ΔΔⵠΔᐃ, 265, 0],
		[1, "t", 4, ΔΔΔⲆ, 264, 0],
		[ⲆᐃΔ, "b", ⲆⲆΔⲆ, ⵠⵠⲆⵠᐃ, 263, ⵠⲆᐃ],
		[ᐃⲆΔ, "t", 5, 6, 262, 0],
		[1, "t", 3, 6, 261, ΔΔᐃ],
		[1, "t", 0, 6, 260, 0],
		[ΔⵠΔ, "t", ᐃᐃᐃⲆ, ⵠⲆⲆᐃᐃ, 259, ⵠⲆᐃ],
		[1, "t", 1, 6, 258, 0],
		[1, "t", 3, 6, 257, 0],
		[ᐃᐃΔ, "t", ᐃⲆᐃⲆ, ΔΔΔΔ, ΔΔᐃΔΔΔᐃ, ⵠⲆᐃ],
		[1, "t", ⲆΔᐃⲆ, 6, 254, ΔΔᐃ],
		[1, "t", 5, Ⲇⵠⵠᐃⵠ, 253, 0],
		[ᐃⲆΔ, "b", ΔΔⲆᐃ, ⵠⲆⲆᐃᐃ, 252, ⵠⲆΔ],
		[1, "t", Ⲇᐃⵠᐃ, ΔⵠΔⵠᐃ, 251, 0],
		[Δⵠᐃ, "t", ⲆᐃΔ, ΔΔΔΔ, 250, Ⲇᐃⵠ],
		[ⲆᐃΔ, "t", Δⵠⵠᐃ, 6, 249, ᐃᐃⲆ],
		[1, "t", 4, ΔΔΔΔ, 248, 0],
		[1, "b", ᐃΔⵠⲆ, ΔΔΔⲆ, 247, ⵠⲆΔ],
		[ΔⵠΔ, "t", ⲆⵠΔΔ, 6, 246, ΔΔᐃ],
		[1, "t", 3, 6, 245, 0],
		[Δⵠᐃ, "t", 5, ΔⵠΔⵠᐃ, 244, ΔⲆⲆ],
		[1, "t", ⵠⲆΔ, 6, 243, ⵠⲆᐃ],
		[ⵠⲆⲆ, "t", ΔⵠⵠⲆ, Ⲇⵠⵠᐃⵠ, 242, 0],
		[1, "t", 3, 6, 241, ⵠⲆᐃ],
		[1, "t", 5, ⵠⲆⲆᐃᐃ, 240, 0],
		[1, "b", ᐃᐃᐃ, ⵠⵠⲆⵠᐃ, 239, 0],
		[ᐃᐃΔ, "t", ᐃⵠΔⵠ, 6, 238, ⵠᐃⲆ],
		[1, "t", ⵠⲆΔⵠ, 6, 237, 0],
		[ᐃⲆΔ, "t", 1, 6, 236, 0],
		[ᐃⲆΔ, "t", ΔⵠΔᐃ, 6, 235, ᐃᐃⲆ],
		[1, "b", ΔΔⲆᐃ, 6, 234, ⵠⵠⵠ],
		[ΔⵠΔ, "t", 2, ⵠⵠᐃᐃᐃ, 233, 0],
		[1, "t", ⵠᐃᐃΔ, 6, 232, 0],
		[1, "b", ᐃⵠΔᐃ, 6, 231, 0],
		[1, "t", 5, 6, 230, 0],
		[ⲆᐃΔ, "t", ⵠΔᐃ, ⵠⵠΔⲆⵠ, 229, 0],
		[1, "t", ᐃᐃⲆⲆ, 6, 228, 0],
		[1, "t", ΔⲆⲆⵠ, 6, 227, ⵠⲆᐃ],
		[Ⲇⵠᐃ, "b", 2, 6, 226, ⵠⲆΔ],
		[1, "t", 4, 6, 225, ⵠⲆᐃ],
		[1, "t", ΔⲆⲆ, 6, 224, 0],
		[ΔⵠΔ, "t", 2, Ⲇⵠⵠᐃⵠ, 223, ⵠⵠⵠ],
		[1, "t", 0, ⵠⵠᐃᐃᐃ, 222, 0],
		[1, "b", 2, Ⲇⵠⵠᐃⵠ, 221, ΔΔᐃ],
		[ᐃⲆΔ, "t", 4, ΔΔΔⲆ, 220, ⵠⲆΔ],
		[ΔⵠΔ, "b", ᐃⵠΔⲆ, 6, 219, Ⲇᐃⵠ],
		[ΔⵠΔ, "t", 5, 6, 218, 0],
		[1, "t", 0, ⵠⵠⲆⵠᐃ, 217, ⵠⵠⵠ],
		[1, "t", 3, 6, 216, 0],
		[1, "b", 0, ⵠⵠⲆⵠᐃ, 215, 0],
		[1, "t", 4, 6, 214, 0],
		[ⵠⲆⲆ, "t", 2, ΔΔΔⲆ, 213, ⵠⵠⵠ],
		[1, "t", ⵠⲆΔ, ΔⵠΔⵠᐃ, 212, 0],
		[Δⵠᐃ, "t", 2, 6, 211, 0],
		[1, "b", ᐃⵠΔⲆ, ⵠⵠⲆⵠᐃ, 210, 0],
		[ᐃⲆΔ, "t", ⵠⵠⵠ, ⵠⵠⲆⵠᐃ, 209, 0],
		[ΔⵠΔ, "t", 5, 6, 207, ⵠⵠⵠ],
		[ᐃⲆΔ, "t", 2, 6, 208, ⵠⲆᐃ],
		[ⲆᐃΔ, "t", ᐃᐃᐃ, 6, 206, 0],
		[ΔⵠΔ, "t", 2, 6, 205, 0],
		[1, "t", ΔΔⲆᐃ, 6, 203, Ⲇᐃⵠ],
		[1, "b", 0, ΔⵠΔⵠᐃ, 202, ⵠᐃⲆ],
		[1, "t", ⵠⵠΔⵠ, ᐃⵠⵠⵠⲆ, 201, ᐃᐃᐃ],
		[1, "t", ⵠⲆⲆⵠ, 6, 199, ᐃᐃᐃ],
		[ΔⵠΔ, "t", ⵠⲆᐃ, 6, 198, 0],
		[1, "t", 2, 6, 197, ⵠⵠⵠ],
		[1, "t", 4, ΔΔΔΔ, 196, ΔⲆⲆ],
		[ᐃᐃΔ, "t", ⵠⲆⲆ, 6, 195, 0],
		[Ⲇⵠᐃ, "t", ΔⲆΔⲆ, 6, 194, ⵠᐃⲆ],
		[Ⲇⵠᐃ, "t", 4, ΔⵠΔⵠᐃ, 192, 0],
		[1, "t", 2, ᐃⵠⵠⵠⲆ, 191, 0],
		[1, "b", ⵠᐃⲆ, 6, 190, 0],
		[Ⲇⵠᐃ, "t", 3, ΔΔⵠΔᐃ, 189, 0],
		[ᐃᐃΔ, "t", ⵠⲆⲆⵠ, 6, 187, ⵠⲆᐃ],
		[ⵠⲆⲆ, "b", ⵠⵠⵠ, ᐃⵠⵠⵠⲆ, 186, 0],
		[1, "t", 2, ΔΔΔⲆ, 185, 0],
		[1, "t", ⵠᐃᐃΔ, 6, 184, Ⲇᐃⵠ],
		[1, "t", ΔΔⲆᐃ, Ⲇⵠⵠᐃⵠ, 183, 0],
		[ⵠΔᐃ, "t", 0, 6, 182, ⵠᐃⲆ],
		[Ⲇⵠᐃ, "b", 2, ⵠⵠᐃᐃᐃ, 181, 0],
		[1, "t", 5, 6, 180, ⵠⲆᐃ],
		[1, "t", ᐃᐃⲆⲆ, 6, 179, 0],
		[ⲆᐃΔ, "t", ⵠᐃⲆ, 6, 178, 0],
		[1, "t", ᐃᐃΔⵠ, ⵠⵠΔⲆⵠ, 177, 0],
		[1, "t", ᐃⲆᐃⲆ, ⵠⲆⲆᐃᐃ, 176, ΔⲆⲆ],
		[1, "b", ᐃᐃᐃⵠ, ⵠⵠᐃᐃᐃ, 175, ΔΔᐃ],
		[Ⲇⵠᐃ, "t", ᐃⲆΔ, 6, 174, ᐃᐃᐃ],
		[ᐃᐃΔ, "t", ΔⲆⵠⵠ, 6, 173, ᐃᐃⲆ],
		[ⵠⲆⲆ, "t", 2, 6, 256, 0],
		[1, "t", ⵠⲆⲆⵠ, 6, 204, 0],
		[1, "t", 4, ΔΔΔΔ, 200, Ⲇᐃⵠ],
		[ΔⵠΔ, "t", ᐃᐃΔⵠ, 6, 193, ᐃᐃᐃ],
		[Δⵠᐃ, "t", ᐃⲆᐃⵠ, ᐃⵠⵠⵠⲆ, 188, 0],
		[1, "f", Ⲇⵠᐃ, ᐃⵠⵠⵠⲆ, 150, 1],
		[Ⲇⵠᐃ, "f", ⵠⵠⵠᐃ, 6, 151, Ⲇⵠᐃ],
		[ᐃⲆΔ, "f", ᐃⲆᐃᐃ, 6, 149, 1],
		[1, "f", 1, ⵠⵠΔⲆⵠ, 148, ⵠΔᐃ],
		[ΔⵠΔ, "f", 2, 6, 147, 1],
		[ᐃⲆΔ, "f", ΔΔⲆᐃ, 6, 145, 1],
		[ᐃᐃΔ, "f", 2, ᐃⵠⵠⵠⲆ, 143, ᐃⲆΔ],
		[ΔⵠΔ, "f", 1, 6, 146, ΔⵠΔ],
		[1, "f", 1, ⵠⵠΔⲆⵠ, 144, 1],
		[1, "f", 1, ΔΔΔⲆ, 142, ⵠⲆⲆ],
		[1, "f", 2, ΔΔΔΔ, 141, 1],
		[ΔⵠΔ, "f", ᐃᐃΔⵠ, 6, 139, 1],
		[Ⲇⵠᐃ, "f", ᐃᐃΔⵠ, ΔΔΔⲆ, 137, 1],
		[1, "f", 2, 6, 135, 1],
		[ΔⵠΔ, "f", ᐃⲆᐃᐃ, ΔΔΔΔ, 133, 1],
		[1, "f", 1, 6, 140, 1],
		[1, "f", ᐃᐃΔ, 6, 138, ⵠΔᐃ],
		[Δⵠᐃ, "f", Δⵠᐃ, Ⲇⵠⵠᐃⵠ, 136, ⵠΔᐃ],
		[1, "f", 1, Ⲇⵠⵠᐃⵠ, 134, 1],
		[ᐃᐃΔ, "f", 1, 6, 132, 1],
		[ⵠΔᐃ, "f", ᐃᐃⲆⲆ, ⵠⵠⲆⵠᐃ, 131, 1],
		[ⵠⲆⲆ, "f", ᐃⲆᐃⵠ, ⵠⵠΔⲆⵠ, 129, 1],
		[ᐃᐃΔ, "f", ⵠⵠⵠᐃ, 6, 127, 1],
		[Δⵠᐃ, "f", ᐃⲆᐃᐃ, 6, 125, ΔⵠΔ],
		[ⵠΔᐃ, "f", ᐃⲆᐃᐃ, ΔΔΔⲆ, 123, 1],
		[1, "f", ᐃᐃΔⵠ, 6, 121, Ⲇⵠᐃ],
		[ᐃⲆΔ, "f", 1, 6, 130, 1],
		[1, "f", 1, 6, 128, ⵠΔᐃ],
		[ΔⵠΔ, "f", ᐃᐃΔ, ⵠⵠΔⲆⵠ, 126, ⲆᐃΔ],
		[ⵠΔᐃ, "f", 1, 6, 124, ΔⵠΔ],
		[ⲆᐃΔ, "f", Δⵠᐃ, 6, 122, 1],
		[1, "f", 1, ⵠⲆⲆᐃᐃ, 120, 1],
		[Δⵠᐃ, "f", ᐃⲆᐃⵠ, 6, 119, 1],
		[ⵠΔᐃ, "f", ᐃⲆᐃⵠ, Ⲇⵠⵠᐃⵠ, 117, 1],
		[1, "f", ᐃᐃⲆⲆ, ⵠⲆⲆᐃᐃ, 115, 1],
		[ᐃᐃΔ, "f", ᐃᐃΔⵠ, 6, 113, ᐃᐃΔ],
		[ⵠΔᐃ, "f", 2, 6, 111, ΔⵠΔ],
		[1, "f", 2, 6, 109, ᐃⲆΔ],
		[1, "f", ⵠΔᐃ, 6, 118, 1],
		[ᐃⲆΔ, "f", 1, 6, 116, 1],
		[ΔⵠΔ, "f", ᐃⲆΔ, ⵠⵠᐃᐃᐃ, 114, ⵠΔᐃ],
		[ᐃᐃΔ, "f", 1, 6, 112, Δⵠᐃ],
		[ⲆᐃΔ, "f", 1, 6, 110, 1],
		[1, "f", ⲆᐃΔ, 6, 108, 1],
		[1, "f", 1, ΔΔΔΔ, 106, ⵠΔᐃ],
		[1, "f", 1, 6, 104, 1],
		[1, "f", ⲆⲆΔⲆ, ΔΔΔⲆ, 107, ⵠⲆⲆ],
		[ᐃᐃΔ, "f", 2, ⵠⵠᐃᐃᐃ, 105, ⲆᐃΔ],
		[Δⵠᐃ, "f", 2, ⵠⲆⲆᐃᐃ, 103, 1],
		[ⵠⲆⲆ, "f", ᐃᐃᐃⵠ, ΔΔΔΔ, 101, ΔⵠΔ],
		[ⲆᐃΔ, "f", 2, ⵠⵠⲆⵠᐃ, 99, ᐃⲆΔ],
		[1, "f", 2, ΔΔΔⲆ, 97, ᐃᐃΔ],
		[1, "f", 2, 6, 95, Δⵠᐃ],
		[1, "f", ᐃⲆᐃᐃ, ΔⵠΔⵠᐃ, 93, 1],
		[Δⵠᐃ, "f", 2, 6, 91, 1],
		[ΔⵠΔ, "f", 1, ΔⵠΔⵠᐃ, 102, ⵠΔᐃ],
		[1, "f", ⲆᐃΔ, 6, 100, ⲆᐃΔ],
		[Δⵠᐃ, "f", ⲆᐃΔ, Ⲇⵠⵠᐃⵠ, 98, ⵠΔᐃ],
		[1, "f", 1, ⵠⵠⲆⵠᐃ, 96, 1],
		[ΔⵠΔ, "f", 1, 6, 94, ᐃⲆΔ],
		[Δⵠᐃ, "f", 1, 6, 92, 1],
		[1, "f", 1, ⵠⵠⲆⵠᐃ, 90, 1],
		[1, "f", Ⲇⵠᐃ, 6, 88, Δⵠᐃ],
		[1, "f", ᐃⲆΔ, 6, 86, ⵠⲆⲆ],
		[1, "f", 2, 6, 89, ᐃⲆΔ],
		[ᐃⲆΔ, "f", 2, ⵠⵠⲆⵠᐃ, 87, 1],
		[Δⵠᐃ, "f", ᐃᐃᐃⵠ, ΔΔΔⲆ, 85, 1],
		[ΔⵠΔ, "f", 2, ΔΔΔΔ, 83, ΔⵠΔ],
		[Δⵠᐃ, "f", 2, 6, 81, Ⲇⵠᐃ],
		[1, "f", ᐃᐃᐃⵠ, 6, 79, ᐃⲆΔ],
		[1, "f", 2, ⵠⵠⲆⵠᐃ, 77, ᐃⲆΔ],
		[1, "f", 1, 6, 84, 1],
		[ⵠΔᐃ, "f", ⲆᐃΔ, ΔⵠΔⵠᐃ, 82, ᐃⲆΔ],
		[1, "f", ΔⵠΔ, 6, 80, 1],
		[ⲆᐃΔ, "f", 1, ΔⵠΔⵠᐃ, 78, ᐃᐃΔ],
		[ⵠⲆⲆ, "f", ⲆᐃΔ, ⵠⵠᐃᐃᐃ, 76, 1],
		[ⵠΔᐃ, "f", 2, 6, 75, 1],
		[1, "f", ᐃᐃᐃⵠ, Ⲇⵠⵠᐃⵠ, 73, 1],
		[1, "f", 2, 6, 71, 1],
		[1, "f", 2, ⵠⵠᐃᐃᐃ, 69, 1],
		[Ⲇⵠᐃ, "f", 2, ⵠⵠΔⲆⵠ, 67, 1],
		[Δⵠᐃ, "f", 2, ΔΔΔⲆ, 65, 1],
		[1, "f", 1, ⵠⵠᐃᐃᐃ, 74, 1],
		[ᐃᐃΔ, "f", 1, ⵠⵠⲆⵠᐃ, 72, 1],
		[ΔⵠΔ, "f", ⲆᐃΔ, 6, 70, 1],
		[1, "f", ⲆᐃΔ, 6, 68, 1],
		[1, "f", ⵠⲆⲆ, Ⲇⵠⵠᐃⵠ, 66, 1],
		[ΔⵠΔ, "f", 1, 6, 64, ⲆᐃΔ],
		[1, "f", 2, 6, 63, ⵠΔᐃ],
		[1, "f", 2, 6, 61, 1],
		[1, "f", 2, 6, 59, 1],
		[Δⵠᐃ, "f", ᐃᐃΔⵠ, ΔΔⵠΔᐃ, 57, ⵠΔᐃ],
		[1, "f", 2, ᐃⵠⵠⵠⲆ, 55, Δⵠᐃ],
		[ᐃᐃΔ, "f", 2, ΔΔⵠΔᐃ, 53, ⲆᐃΔ],
		[ⵠΔᐃ, "f", ᐃⲆᐃⵠ, ⵠⵠᐃᐃᐃ, 51, 1],
		[1, "f", ⵠΔᐃ, ⵠⵠᐃᐃᐃ, 62, 1],
		[ⵠΔᐃ, "f", 1, ⵠⲆⲆᐃᐃ, 60, ᐃᐃΔ],
		[Ⲇⵠᐃ, "f", 1, 6, 58, 1],
		[ⵠⲆⲆ, "f", 1, ᐃⵠⵠⵠⲆ, 56, ᐃⲆΔ],
		[1, "f", 1, ᐃⵠⵠⵠⲆ, 54, ⲆᐃΔ],
		[1, "f", Δⵠᐃ, ΔΔΔⲆ, 52, 1],
		[Ⲇⵠᐃ, "f", 1, ⵠⵠΔⲆⵠ, 50, 1],
		[1, "f", ⵠⵠⵠᐃ, 6, 49, 1],
		[ᐃᐃΔ, "f", ᐃⲆᐃᐃ, 6, 47, ⵠΔᐃ],
		[Ⲇⵠᐃ, "f", ᐃᐃᐃⵠ, 6, 45, 1],
		[1, "f", 2, ᐃⵠⵠⵠⲆ, 43, 1],
		[ᐃᐃΔ, "f", 2, 6, 41, 1],
		[Ⲇⵠᐃ, "f", ᐃᐃⲆⲆ, ΔΔΔⲆ, 39, Δⵠᐃ],
		[ΔⵠΔ, "f", 1, Ⲇⵠⵠᐃⵠ, 48, 1],
		[1, "f", ⵠⲆⲆ, ⵠⲆⲆᐃᐃ, 46, ⵠΔᐃ],
		[1, "f", ⵠΔᐃ, ΔΔΔⲆ, 44, ⵠΔᐃ],
		[Δⵠᐃ, "f", ⵠΔᐃ, ⵠⵠΔⲆⵠ, 42, 1],
		[1, "f", 1, ⵠⵠΔⲆⵠ, 40, ⲆᐃΔ],
		[1, "f", ΔⵠΔ, 6, 38, ᐃᐃΔ],
		[ΔⵠΔ, "f", ΔΔⲆᐃ, ⵠⵠⲆⵠᐃ, 37, 1],
		[1, "f", ᐃᐃΔⵠ, 6, 35, 1],
		[1, "f", 2, 6, 33, ⵠⲆⲆ],
		[1, "f", 2, 6, 31, ΔⵠΔ],
		[1, "f", 2, 6, 29, 1],
		[1, "f", 2, 6, 27, 1],
		[1, "f", 1, 6, 36, 1],
		[ᐃⲆΔ, "f", 1, 6, 34, 1],
		[ᐃᐃΔ, "f", 1, 6, 32, ΔⵠΔ],
		[ⵠⲆⲆ, "f", ᐃⲆΔ, ΔΔΔⲆ, 30, ⲆᐃΔ],
		[ᐃᐃΔ, "f", ᐃⲆΔ, ᐃⵠⵠⵠⲆ, 28, Ⲇⵠᐃ],
		[ⵠΔᐃ, "f", 1, ΔⵠΔⵠᐃ, 26, ⵠⲆⲆ],
		[ⵠΔᐃ, "f", 2, ⵠⲆⲆᐃᐃ, 25, 1],
		[Δⵠᐃ, "f", ᐃᐃΔⵠ, 6, 23, 1],
		[ⵠΔᐃ, "f", 2, 6, 21, 1],
		[ᐃⲆΔ, "f", ᐃⲆᐃⵠ, 6, ⵠⲆⵠᐃΔ, 1],
		[Δⵠᐃ, "f", ⵠⵠⵠᐃ, ⵠⲆⲆᐃᐃ, 17, 1],
		[1, "f", 2, Ⲇⵠⵠᐃⵠ, ᐃⵠᐃⵠᐃ, Δⵠᐃ],
		[1, "f", 1, Ⲇⵠⵠᐃⵠ, 24, 1],
		[ⲆᐃΔ, "f", ⵠⲆⲆ, 6, 22, ΔⵠΔ],
		[1, "f", Δⵠᐃ, ΔΔⵠΔᐃ, 20, ⲆᐃΔ],
		[ΔⵠΔ, "f", 1, ΔΔΔⲆ, ⵠᐃⵠᐃΔ, 1],
		[ΔⵠΔ, "f", ᐃⲆΔ, ᐃⵠⵠⵠⲆ, 16, 1],
		[1, "f", ⲆⲆΔⲆ, ⵠⵠᐃᐃᐃ, ⲆᐃΔⲆⵠ, 1],
		[1, "f", 2, Ⲇⵠⵠᐃⵠ, 11, ⵠⲆⲆ],
		[1, "f", 2, 6, 9, ᐃᐃΔ],
		[ΔⵠΔ, "f", 2, 6, 7, ⲆᐃΔ],
		[ΔⵠΔ, "f", 1, ᐃⵠⵠⵠⲆ, ΔⲆΔᐃⲆⵠⲆ, 1],
		[ᐃⲆΔ, "f", Ⲇⵠᐃ, 6, 12, 1],
		[1, "f", ⵠⲆⲆ, 6, 10, 1],
		[1, "f", 1, ΔΔⵠΔᐃ, 8, ᐃⲆΔ],
		[1, "f", ᐃⲆΔ, 6, ΔΔⵠΔᐃ, 1],
		[ⵠⲆⲆ, "f", 1, 8, 6, ᐃᐃΔ],
		[ⵠⲆⲆ, "f", 2, ⲆⲆΔΔᐃ, ΔⵠΔⵠᐃ, 1],
		[1, "f", 2, 9, 6, 1],
		[ΔⵠΔ, "f", ΔΔⲆᐃ, 11, 6, ⵠΔᐃ],
		[Ⲇⵠᐃ, "f", ⲆⲆΔⲆ, ⲆⵠⵠΔⲆ, ⵠⵠΔⲆⵠ, 1],
		[1, "f", 2, 15, 6, 1],
		[ΔⵠΔ, "f", 1, ⲆΔⵠΔⵠ, 6, ⵠΔᐃ],
		[1, "f", ⵠΔᐃ, 12, 6, 1],
		[1, "f", Ⲇⵠᐃ, 14, ΔΔⵠΔᐃ, ᐃᐃΔ],
		[1, "f", 1, 16, 6, ⲆᐃΔ],
		[Ⲇⵠᐃ, "f", 1, ΔΔΔΔᐃ, ΔΔΔⲆ, ΔⵠΔ],
		[ⵠⲆⲆ, "f", 1, 20, 6, 1],
		[1, "f", 1, 22, 6, 1],
		[ᐃᐃΔ, "f", 1, 24, ⵠⵠᐃᐃᐃ, 1],
		[ⲆᐃΔ, "f", 1, 26, 6, ᐃᐃΔ],
		[1, "f", ᐃᐃᐃⵠ, ᐃⵠΔᐃΔΔᐃ, 6, 1],
		[Ⲇⵠᐃ, "f", 2, 19, 6, Δⵠᐃ],
		[ᐃᐃΔ, "f", 2, 21, 6, Δⵠᐃ],
		[Δⵠᐃ, "f", 2, 23, 6, 1],
		[1, "f", ᐃⲆᐃᐃ, 25, ⵠⵠⲆⵠᐃ, 1],
		[1, "f", ᐃⲆᐃᐃ, 27, 6, ᐃᐃΔ],
		[ⵠⲆⲆ, "f", ΔΔⲆᐃ, 29, 6, ᐃᐃΔ],
		[ⵠⲆⲆ, "f", ⲆⲆΔⲆ, 31, 6, 1],
		[Ⲇⵠᐃ, "f", 2, 33, Ⲇⵠⵠᐃⵠ, ⵠⲆⲆ],
		[ΔⵠΔ, "f", 1, 28, Ⲇⵠⵠᐃⵠ, 1],
		[ⵠΔᐃ, "f", 1, 30, ᐃⵠⵠⵠⲆ, Ⲇⵠᐃ],
		[1, "f", Δⵠᐃ, 32, 6, ΔⵠΔ],
		[Ⲇⵠᐃ, "f", 1, 34, ⵠⵠⲆⵠᐃ, 1],
		[1, "f", ᐃᐃᐃⵠ, 67, ⵠⵠᐃᐃᐃ, 1],
		[1, "f", 2, 69, ⵠⵠᐃᐃᐃ, ⵠⲆⲆ],
		[1, "f", 2, 71, ΔΔΔΔ, 1],
		[1, "f", ᐃⲆᐃᐃ, 73, 6, 1],
		[ⲆᐃΔ, "f", ᐃⲆᐃⵠ, 75, 6, Δⵠᐃ],
		[1, "f", 1, 68, ΔΔΔΔ, ⲆᐃΔ],
		[1, "f", ΔⵠΔ, 70, ⵠⵠᐃᐃᐃ, 1],
		[1, "f", ⵠⲆⲆ, 72, 6, 1],
		[ⵠΔᐃ, "f", 1, 74, 6, ᐃⲆΔ],
		[1, "f", ᐃᐃΔ, 76, 6, ⵠΔᐃ],
		[ΔⵠΔ, "f", 2, 77, 6, ⵠΔᐃ],
		[1, "f", ᐃⲆᐃⵠ, 79, ⵠⲆⲆᐃᐃ, 1],
		[ⵠΔᐃ, "f", ⵠⵠⵠᐃ, 81, ΔΔΔⲆ, 1],
		[1, "f", 2, 83, 6, ⲆᐃΔ],
		[1, "f", 2, 85, 6, Δⵠᐃ],
		[1, "f", Δⵠᐃ, 78, Ⲇⵠⵠᐃⵠ, 1],
		[ⵠⲆⲆ, "f", ⲆᐃΔ, 80, 6, ΔⵠΔ],
		[ΔⵠΔ, "f", ᐃᐃΔ, 82, ΔΔΔⲆ, ⲆᐃΔ],
		[ⲆᐃΔ, "f", 1, 84, 6, Δⵠᐃ],
		[Ⲇⵠᐃ, "f", 1, 86, 6, 1],
		[Ⲇⵠᐃ, "f", ΔΔⲆᐃ, 87, 6, ⲆᐃΔ],
		[1, "f", 2, 89, ⵠⲆⲆᐃᐃ, ᐃᐃΔ],
		[ⲆᐃΔ, "f", 2, 91, 6, 1],
		[ΔⵠΔ, "f", ᐃⲆᐃᐃ, 93, 6, ⵠⲆⲆ],
		[1, "f", ⵠΔᐃ, 88, ⵠⵠⲆⵠᐃ, ⵠΔᐃ],
		[1, "f", 1, 90, ⵠⲆⲆᐃᐃ, 1],
		[ⲆᐃΔ, "f", ⵠΔᐃ, 92, 6, 1],
		[ΔⵠΔ, "f", ᐃᐃΔ, 94, 6, ΔⵠΔ],
		[1, "f", ᐃᐃᐃⵠ, 95, ⵠⵠΔⲆⵠ, Ⲇⵠᐃ],
		[1, "f", Ⲇⵠᐃ, 95, ΔᐃⵠⲆΔ, 1],
		[ⲆᐃΔ, "f", 1, 83, ᐃᐃⵠᐃᐃ, Ⲇⵠᐃ],
		[ᐃᐃΔ, "f", ⲆᐃΔ, 81, ⲆⵠⲆΔᐃ, ΔⵠΔ],
		[1, "f", ⵠΔᐃ, 79, 7, ⵠⲆⲆ],
		[1, "f", 1, 77, ⲆⵠⲆΔᐃ, 1],
		[1, "f", 1, 75, ⲆΔⲆⵠⵠ, Δⵠᐃ],
		[Δⵠᐃ, "f", Ⲇⵠᐃ, 73, 7, ⲆᐃΔ],
		[ⲆᐃΔ, "f", ⵠⲆⲆ, 71, ⲆΔᐃⲆᐃ, 1],
		[ⵠΔᐃ, "f", 1, 69, 7, ⲆᐃΔ],
		[1, "f", 1, 33, ⲆⲆΔΔᐃ, 1],
		[ⲆᐃΔ, "f", ᐃᐃΔ, 31, 7, 1],
		[ΔⵠΔ, "f", ⵠⲆⲆ, 29, ᐃᐃⵠᐃᐃ, Ⲇⵠᐃ],
		[1, "f", ᐃⲆΔ, 27, 7, 1],
		[ⵠΔᐃ, "f", ⵠΔᐃ, 25, ⲆΔᐃⲆᐃ, 1],
		[ⲆᐃΔ, "f", 1, 23, 7, 1],
		[1, "f", 1, 21, 7, 1],
		[1, "f", 1, 19, ΔᐃⵠⲆΔ, 1],
		[Δⵠᐃ, "f", ⲆᐃΔ, 17, ΔᐃⵠⲆΔ, 1],
		[Δⵠᐃ, "f", 1, 15, 7, 1],
		[ⵠΔᐃ, "f", 1, 13, ΔᐃⵠⲆΔ, 1],
		[Ⲇⵠᐃ, "f", 1, ⵠⲆⵠᐃΔΔᐃ, ᐃⲆᐃΔΔ, Δⵠᐃ],
		[1, "f", 1, 9, ⲆΔᐃⲆᐃ, 1],
		[1, "f", Δⵠᐃ, ⲆⵠⲆΔᐃ, 7, ⵠΔᐃ],
		[ΔⵠΔ, "s", 0, 7, 8, ⵠΔᐃ],
		[ⵠⲆⲆ, "t", 4, ⲆΔⲆⵠⵠ, 174, ⵠⲆΔ],
		[1, "t", ⵠⵠᐃᐃ, ᐃⲆᐃΔΔ, 175, 0],
		[ⲆᐃΔ, "t", 4, 7, 176, ᐃᐃᐃ],
		[Ⲇⵠᐃ, "b", 2, 7, 177, 0],
		[1, "t", ᐃⵠΔᐃ, 94, 301, 0],
		[Δⵠᐃ, "b", ᐃⲆᐃΔ, 95, 301, ⵠⵠⵠ],
		[ⲆᐃΔ, "t", ΔⵠⵠⲆ, 96, 301, 0],
		[1, "t", 1, 97, 301, 0],
		[1, "t", ᐃᐃᐃⵠ, 98, 301, ⵠⵠⵠ],
		[1, "t", 4, 99, 301, 0],
		[1, "t", ᐃᐃⲆⲆ, ΔᐃⲆⲆⲆ, 301, 0],
		[1, "t", ᐃΔⵠⵠ, 96, 304, Ⲇᐃⵠ],
		[ΔⵠΔ, "t", ᐃᐃΔⵠ, 96, 302, 0],
		[1, "t", 2, 97, 304, 0],
		[1, "t", ᐃᐃᐃⵠ, 96, 303, ⵠⲆᐃ],
		[ᐃᐃΔ, "t", ⵠⵠᐃᐃ, 97, 303, 0],
		[1, "t", 5, 98, 304, 0],
		[1, "b", ᐃⲆᐃⵠ, 97, 302, 0],
		[1, "b", ᐃⲆᐃⵠ, 99, 304, ⵠⵠⵠ],
		[ⵠⲆⲆ, "t", ⵠΔᐃ, 98, 303, ⵠⲆΔ],
		[1, "t", 4, 98, 302, 0],
		[1, "t", 4, 99, 303, 0],
		[1, "t", 4, ⵠΔⵠΔΔ, 304, 0],
		[1, "t", 5, 99, 302, Ⲇᐃⵠ],
		[ᐃⲆΔ, "t", ᐃᐃᐃⲆ, 101, 303, 0],
		[1, "t", ᐃᐃΔⵠ, 100, 303, ᐃᐃᐃ],
		[1, "t", ᐃᐃⲆ, ⲆᐃⲆⵠⲆ, 302, 0],
		[1, "t", 0, 101, 304, 0],
		[Δⵠᐃ, "t", 4, 102, 304, ᐃᐃⲆ],
		[1, "f", 0, 94, ᐃᐃⵠᐃᐃ, 1],
		[1, "f", 1, 93, ⲆⲆΔΔᐃ, ⵠⲆⲆ],
		[1, "f", 1, 92, 7, ⵠΔᐃ],
		[1, "f", ⵠⵠⵠ, 91, ᐃⲆᐃΔΔ, ⵠⲆⲆ],
		[ΔⵠΔ, "f", ⵠΔᐃ, 90, 7, Δⵠᐃ],
		[ᐃᐃΔ, "f", Ⲇⵠᐃ, 89, ΔᐃⵠⲆΔ, Ⲇⵠᐃ],
		[1, "f", Ⲇᐃⵠ, 88, 7, ᐃᐃΔ],
		[ΔⵠΔ, "f", ⲆᐃΔ, 87, 7, ᐃⲆΔ],
		[1, "f", 1, 86, ⲆⲆΔΔᐃ, 1],
		[ΔⵠΔ, "f", 1, 85, ΔᐃⵠⲆΔ, 1],
		[ⵠΔᐃ, "f", Ⲇᐃⵠ, 84, 7, ᐃⲆΔ],
		[1, "f", ⵠⲆⲆ, 82, 7, ᐃⲆΔ],
		[Δⵠᐃ, "f", ⵠⲆΔ, 80, ⲆΔⲆⵠⵠ, 1],
		[1, "f", ⵠΔᐃ, 78, 7, ⲆᐃΔ],
		[ΔⵠΔ, "f", ⵠⲆΔ, 76, 7, ΔⵠΔ],
		[1, "f", 1, 74, ᐃⲆᐃΔΔ, 1],
		[1, "f", ⵠⲆᐃ, 72, 7, 1],
		[1, "f", 0, 70, 7, 1],
		[1, "f", ⲆᐃΔ, 68, ΔᐃⵠⲆΔ, 1],
		[ᐃᐃΔ, "f", 1, 32, 7, ⲆᐃΔ],
		[ⵠⲆⲆ, "f", ⵠᐃⲆ, 30, 7, 1],
		[ⲆᐃΔ, "f", 1, 28, ⲆΔⲆⵠⵠ, 1],
		[ᐃⲆΔ, "f", 0, 26, 7, 1],
		[Ⲇⵠᐃ, "f", ᐃⲆΔ, 24, 7, ⵠⲆⲆ],
		[ⲆᐃΔ, "f", 0, 22, ΔᐃⵠⲆΔ, ⵠⲆⲆ],
		[ⲆᐃΔ, "f", 1, 20, ⲆⲆΔΔᐃ, 1],
		[ΔⵠΔ, "f", 0, ᐃⲆⲆⵠᐃ, ᐃⲆᐃΔΔ, ⵠΔᐃ],
		[ΔⵠΔ, "f", 1, 16, ΔΔⵠΔⲆ, 1],
		[1, "f", ⵠⵠⵠ, ⵠⲆᐃᐃⵠ, ᐃⲆᐃΔΔ, 1],
		[ⵠΔᐃ, "f", ᐃᐃΔ, 12, 7, ᐃᐃΔ],
		[ⲆᐃΔ, "f", 0, ΔⵠⵠᐃⲆ, 7, 1],
		[1, "f", 1, ⵠᐃⵠΔⲆ, 7, 1],
		[1, "s", 1, ⵠⵠⵠⵠⵠ, ᐃΔⵠⵠⲆ, 1],
		[1, "f", 0, 95, 152, 1],
		[ⵠΔᐃ, "f", ⲆᐃΔ, 95, 151, 1],
		[1, "f", 0, 95, 11, 1],
		[ΔⵠΔ, "f", 1, 95, ⲆᐃⲆᐃⲆ, ⲆᐃΔ],
		[ᐃⲆΔ, "f", Δⵠᐃ, 95, ⲆᐃⲆⲆᐃΔΔ, Δⵠᐃ],
		[1, "f", 1, 95, ⲆᐃΔⲆΔ, Ⲇⵠᐃ],
		[1, "f", 0, 95, ⵠΔᐃⵠⲆ, 1],
		[1, "f", 0, 95, 20, Δⵠᐃ],
		[ᐃⲆΔ, "f", ⲆᐃΔ, 95, 21, ᐃⲆΔ],
		[1, "f", 1, 95, 26, Δⵠᐃ],
		[Ⲇⵠᐃ, "f", ᐃᐃΔ, 95, 37, ᐃⲆΔ],
		[ᐃᐃΔ, "f", ⵠⵠⵠ, 95, 44, ᐃⲆΔ],
		[1, "f", ᐃⲆΔ, 95, 50, 1],
		[Ⲇⵠᐃ, "f", ⲆᐃΔ, 95, 52, 1],
		[ᐃᐃΔ, "f", 0, 95, 53, ᐃⲆΔ],
		[Δⵠᐃ, "f", 1, 95, 54, ᐃᐃΔ],
		[ⲆᐃΔ, "f", 1, 95, 62, 1],
		[ΔⵠΔ, "f", 0, 95, 55, ΔⵠΔ],
		[1, "f", ⵠΔᐃ, 95, 64, 1],
		[ⵠⲆⲆ, "f", ᐃᐃᐃ, 95, 58, 1],
		[1, "f", 0, 95, 61, 1],
		[ⵠⲆⲆ, "f", ⵠⲆᐃ, 95, 68, 1],
		[1, "f", ⵠᐃⲆ, 95, 72, ⲆᐃΔ],
		[ⲆᐃΔ, "f", ᐃᐃⲆ, 95, 78, 1],
		[ΔⵠΔ, "f", ᐃᐃΔ, 95, 115, ᐃⲆΔ],
		[1, "f", 1, 95, 117, Δⵠᐃ],
		[1, "f", 1, 95, 128, ᐃⲆΔ],
		[ⵠⲆⲆ, "f", ᐃᐃⲆ, 95, 85, ᐃᐃΔ],
		[Ⲇⵠᐃ, "f", 0, 95, 91, 1],
		[1, "f", ⵠᐃⲆ, 95, 95, 1],
		[Δⵠᐃ, "f", 0, 95, 114, 1],
		[1, "f", 2, 95, 113, ᐃᐃΔ],
		[1, "f", ⲆᐃΔ, 95, 119, ᐃⲆΔ],
		[1, "f", 0, 95, 120, 1],
		[ᐃᐃΔ, "f", Ⲇⵠᐃ, 95, 121, ⵠΔᐃ],
		[ᐃᐃΔ, "f", ΔⲆⲆ, 95, 127, 1],
		[ⵠΔᐃ, "f", 1, 95, 130, ᐃᐃΔ],
		[1, "f", 0, 95, 131, ᐃᐃΔ],
		[1, "f", 1, 95, 132, ΔⵠΔ],
		[1, "f", ᐃⲆΔ, 95, 136, 1],
		[ⵠⲆⲆ, "f", 0, 95, 137, 1],
		[1, "f", 0, 95, 143, ᐃᐃΔ],
		[Ⲇⵠᐃ, "f", ⵠⲆΔ, 95, 147, ⵠΔᐃ],
		[ΔⵠΔ, "f", 1, 95, 138, ⵠΔᐃ],
		[1, "f", ᐃᐃΔ, 95, 144, ⲆᐃΔ],
		[ᐃⲆΔ, "f", ᐃᐃΔ, 95, ⵠⲆⵠᐃⵠ, 1],
		[1, "f", ΔΔᐃ, 95, 8, 1],
		[1, "f", Δⵠᐃ, 95, ΔⲆⲆΔⲆ, 1],
		[1, "f", 0, 95, ᐃⵠⵠⵠΔ, ⵠΔᐃ],
		[1, "f", ΔⵠΔ, 95, 16, 1],
		[Ⲇⵠᐃ, "f", 1, 95, 17, ⲆᐃΔ],
		[1, "f", ⵠᐃⲆ, 95, 18, 1],
		[ᐃᐃΔ, "f", ᐃᐃΔ, 95, 45, ΔⵠΔ],
		[ⵠⲆⲆ, "f", 0, 95, 51, 1],
		[ⵠΔᐃ, "f", Ⲇⵠᐃ, 95, 56, 1],
		[ᐃⲆΔ, "f", ⵠⲆⲆ, 95, 57, Δⵠᐃ],
		[ⵠⲆⲆ, "f", 1, 95, 59, 1],
		[ⵠΔᐃ, "f", 1, 95, 60, 1],
		[1, "f", ⵠⲆⲆ, 95, 63, 1],
		[ⲆᐃΔ, "f", ⵠⲆᐃ, 95, 65, ⵠⲆⲆ],
		[ΔⵠΔ, "f", 1, 95, 66, 1],
		[1, "f", ᐃᐃΔ, 95, 67, 1],
		[ⲆᐃΔ, "f", ᐃⲆΔ, 95, 69, 1],
		[Δⵠᐃ, "f", ⲆᐃΔ, 95, 70, ⵠⲆⲆ],
		[1, "f", Ⲇᐃⵠ, 95, 71, 1],
		[1, "f", 1, 95, 73, 1],
		[1, "f", 1, 95, 74, ⵠΔᐃ],
		[1, "f", ⵠⲆΔ, 95, 75, ⲆᐃΔ],
		[ᐃᐃΔ, "f", ᐃᐃΔ, 95, 76, Δⵠᐃ],
		[1, "f", 1, 95, 77, ⵠⲆⲆ],
		[1, "f", 1, 95, 79, ⵠΔᐃ],
		[Ⲇⵠᐃ, "f", 1, 95, 80, 1],
		[1, "f", ⵠᐃⲆ, 95, 81, 1],
		[ⲆᐃΔ, "f", ⵠⲆⲆ, 95, 82, 1],
		[ⲆᐃΔ, "f", ΔΔᐃ, 95, 83, 1],
		[ⵠΔᐃ, "f", ΔⵠΔ, 95, 84, 1],
		[Δⵠᐃ, "f", Ⲇⵠᐃ, 95, 86, ᐃⲆΔ],
		[1, "f", 1, 95, 88, ⲆᐃΔ],
		[1, "f", ᐃᐃⲆ, 95, 87, 1],
		[1, "f", 1, 95, 89, ᐃᐃΔ],
		[ⵠΔᐃ, "f", 1, 95, 90, ⵠⲆⲆ],
		[ⵠⲆⲆ, "f", 1, 95, 92, 1],
		[1, "f", ᐃⲆΔ, 95, 93, ᐃᐃΔ],
		[1, "f", 1, 95, 94, ᐃᐃΔ],
		[Ⲇⵠᐃ, "f", ⵠⲆⲆ, 95, 96, ᐃᐃΔ],
		[Δⵠᐃ, "f", ⵠⲆⲆ, 95, 97, Δⵠᐃ],
		[1, "f", ΔΔᐃ, 95, 98, 1],
		[1, "f", ⵠΔᐃ, 95, 99, 1],
		[Ⲇⵠᐃ, "f", 1, 95, 100, 1],
		[1, "f", ΔΔᐃ, 95, 101, 1],
		[1, "f", Δⵠᐃ, 95, 102, Ⲇⵠᐃ],
		[ⲆᐃΔ, "f", 0, 95, 103, ΔⵠΔ],
		[ΔⵠΔ, "f", 1, 95, 104, 1],
		[ΔⵠΔ, "f", 1, 95, 105, 1],
		[Δⵠᐃ, "f", ᐃᐃᐃ, 95, 106, 1],
		[ΔⵠΔ, "f", Δⵠᐃ, 95, 107, 1],
		[ΔⵠΔ, "f", 1, 95, 108, ⵠⲆⲆ],
		[ᐃᐃΔ, "f", 1, 95, 109, 1],
		[ⲆᐃΔ, "f", 0, 95, 110, 1],
		[ᐃᐃΔ, "f", ᐃⲆΔ, 95, 111, 1],
		[Δⵠᐃ, "f", 0, 95, 112, ᐃᐃΔ],
		[1, "f", 1, 95, 116, 1],
		[1, "f", 0, 95, 118, 1],
		[Δⵠᐃ, "f", ⵠⲆΔ, 95, 122, 1],
		[Δⵠᐃ, "f", ⵠΔᐃ, 95, 123, 1],
		[1, "f", Ⲇⵠᐃ, 95, 124, 1],
		[ᐃᐃΔ, "f", ⵠⲆᐃ, 95, 125, 1],
		[1, "f", 1, 95, 126, 1],
		[ⲆᐃΔ, "f", 1, 95, 129, 1],
		[1, "f", ⲆᐃΔ, 95, 133, 1],
		[Ⲇⵠᐃ, "f", Ⲇᐃⵠ, 95, 134, 1],
		[1, "f", 1, 95, 135, 1],
		[ᐃⲆΔ, "f", 1, 95, 139, 1],
		[ⵠⲆⲆ, "f", ΔⲆⲆ, 95, 140, ⵠⲆⲆ],
		[1, "f", 1, 95, 141, ⵠΔᐃ],
		[Ⲇⵠᐃ, "f", 1, 95, 142, ⲆᐃΔ],
		[ⵠⲆⲆ, "f", 1, 95, 146, ⲆᐃΔ],
		[1, "f", 0, 95, 145, ⵠΔᐃ],
		[1, "f", 1, 95, 148, ⲆᐃΔ],
		[ⲆᐃΔ, "f", Δⵠᐃ, 95, 149, Δⵠᐃ],
		[ⲆᐃΔ, "f", ᐃⲆΔ, 95, 150, 1],
		[ⲆᐃΔ, "f", ⵠⲆⲆ, 95, 153, 1],
		[Δⵠᐃ, ⵠ[3], 0, 64, ⵠⵠⲆⵠⵠ, ᐃⲆΔ],
		[1, ⵠ[ΔΔᐃΔ], ΔⵠΔ, 64, ⲆΔⵠⵠΔ, 1],
		[ᐃⲆΔ, ⵠ[ⲆΔᐃⲆ], 2, 64, 16, ⵠΔᐃ],
		[1, ⵠ[3], 2, 64, ⲆᐃΔⲆΔ, 1],
		[ⵠⲆⲆ, ⵠ[3], 0, 64, 20, Δⵠᐃ],
		[1, ⵠ[ᐃⵠΔᐃ], ᐃᐃΔ, 64, 21, ⲆᐃΔ],
		[ᐃⲆΔ, ⵠ[3], 2, 64, 22, 1],
		[ΔⵠΔ, ⵠ[3], 0, 64, 23, 1],
		[1, ⵠ[3], 2, 64, 24, 1],
		[1, ⵠ[3], ᐃⲆΔ, 64, 29, 1],
		[ⵠΔᐃ, ⵠ[3], ᐃⲆᐃⵠ, 64, 30, Δⵠᐃ],
		[1, ⵠ[3], 3, 64, 31, 1],
		[ⵠΔᐃ, ⵠ[ᐃⵠΔᐃ], ΔΔᐃ, 64, 32, ⲆᐃΔ],
		[ᐃᐃΔ, ⵠ[3], 1, 64, 33, 1],
		[1, ⵠ[Δⵠⵠᐃ], ᐃᐃᐃⵠ, 64, 34, ⵠⲆⲆ],
		[ΔⵠΔ, ⵠ[ΔⲆⵠᐃ], ⵠⵠⵠ, 64, 35, 1],
		[1, ⵠ[3], ΔΔⲆᐃ, 64, ⵠᐃⵠΔⲆ, 1],
		[1, ⵠ[3], 2, 65, 8, ΔⵠΔ],
		[1, ⵠ[3], 1, 65, 9, 1],
		[ⵠΔᐃ, ⵠ[3], ᐃᐃΔⵠ, 65, ⵠⲆⵠⵠⲆ, 1],
		[ΔⵠΔ, ⵠ[ΔⲆΔⲆ], 3, 65, ⵠΔⲆⵠⵠ, Ⲇⵠᐃ],
		[1, ⵠ[3], 1, 65, ᐃΔᐃᐃⲆ, ΔⵠΔ],
		[Ⲇⵠᐃ, ⵠ[ⲆⵠⲆᐃ], 0, 64, ⲆⲆᐃⲆⵠⲆΔ, 1],
		[1, ⵠ[ᐃⵠΔⵠ], 3, 65, 17, ⲆᐃΔ],
		[1, ⵠ[ᐃⲆᐃΔ], 2, 64, 18, ⵠⲆⲆ],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 65, 18, ᐃⲆΔ],
		[1, ⵠ[ΔΔᐃΔ], ⵠⲆΔ, 65, ᐃᐃⲆⵠᐃ, Δⵠᐃ],
		[1, ⵠ[ᐃⲆᐃΔ], ⲆᐃΔ, 65, ᐃⲆᐃⵠⲆ, Δⵠᐃ],
		[ⵠΔᐃ, ⵠ[ⲆΔᐃⲆ], ΔⲆⵠᐃ, 65, 21, 1],
		[1, ⵠ[ᐃⵠΔⵠ], ⵠⵠⵠᐃ, 65, 22, Ⲇⵠᐃ],
		[1, ⵠ[Δⵠⵠᐃ], 3, 65, 23, 1],
		[1, ⵠ[ΔⲆΔⲆ], 0, 65, 24, 1],
		[1, ⵠ[3], ΔΔⲆᐃ, 65, 29, ΔⵠΔ],
		[1, ⵠ[ᐃⵠΔⵠ], 3, 65, 30, ᐃⲆΔ],
		[ᐃᐃΔ, ⵠ[ⲆⵠⲆᐃ], 0, 65, 31, 1],
		[1, ⵠ[ΔΔᐃΔ], ᐃⲆΔ, 65, 32, 1],
		[ⵠΔᐃ, ⵠ[ΔΔᐃΔ], ᐃⲆᐃᐃ, 65, 33, 1],
		[1, ⵠ[ⵠⵠΔⵠ], 3, 65, 34, 1],
		[ⵠⲆⲆ, ⵠ[ⲆΔᐃⲆ], ᐃᐃᐃⵠ, 63, ᐃΔΔⲆⲆ, ᐃᐃΔ],
		[Δⵠᐃ, ⵠ[3], 0, 62, 9, 1],
		[ᐃⲆΔ, ⵠ[3], 2, 61, ⵠⲆⵠΔⵠ, 1],
		[1, ⵠ[ᐃⲆᐃΔ], ΔⲆⲆ, 60, 9, 1],
		[1, ⵠ[ᐃΔⵠⲆ], 2, 59, ᐃⲆᐃᐃⲆ, ᐃᐃΔ],
		[ⵠⲆⲆ, ⵠ[3], 2, 58, ⵠⲆⵠΔⵠ, ΔⵠΔ],
		[Δⵠᐃ, ⵠ[ⲆⵠⲆᐃ], 0, 57, 9, ⵠΔᐃ],
		[1, ⵠ[3], 2, 56, ⵠⵠⲆⵠⵠ, 1],
		[ⵠⲆⲆ, ⵠ[3], 2, 55, ⵠⲆᐃᐃΔ, 1],
		[Ⲇⵠᐃ, ⵠ[3], 2, 54, 9, 1],
		[1, ⵠ[3], 0, 53, ᐃⲆᐃᐃⲆ, ⲆᐃΔ],
		[1, ⵠ[ᐃⵠΔᐃ], 0, 51, ⵠⵠⲆⵠⵠ, ΔⵠΔ],
		[Δⵠᐃ, ⵠ[3], ᐃⲆᐃᐃ, 52, 9, 1],
		[ⵠⲆⲆ, ⵠ[3], 2, 50, 9, ⵠΔᐃ],
		[ᐃᐃΔ, ⵠ[3], ΔΔⲆᐃ, 48, ⵠΔⵠⵠᐃ, ⵠⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[3], 2, 49, 9, 1],
		[ᐃⲆΔ, ⵠ[ᐃⵠΔⵠ], 0, 47, ⵠΔⵠⵠᐃ, ⲆᐃΔ],
		[1, ⵠ[3], Ⲇᐃⵠ, 45, 9, Δⵠᐃ],
		[1, ⵠ[ᐃⵠΔᐃ], ⵠⵠⵠ, 43, 9, 1],
		[ᐃⲆΔ, ⵠ[ᐃⵠΔᐃ], ᐃᐃᐃⵠ, 46, 9, ⵠⲆⲆ],
		[ⵠΔᐃ, ⵠ[3], ᐃᐃⲆⲆ, 44, ΔⲆⲆΔⲆ, 1],
		[ᐃᐃΔ, ⵠ[3], 2, 42, 9, 1],
		[1, ⵠ[ⲆΔᐃⲆ], 2, 41, 9, 1],
		[Δⵠᐃ, ⵠ[ᐃⲆᐃΔ], 0, 40, 9, Ⲇⵠᐃ],
		[ᐃᐃΔ, ⵠ[3], ᐃᐃΔⵠ, 39, ΔⲆⲆΔⲆ, 1],
		[1, ⵠ[3], ᐃⲆᐃᐃ, 38, 9, 1],
		[ΔⵠΔ, ⵠ[3], ⵠⵠⵠ, 37, 9, ⵠⲆⲆ],
		[ⵠΔᐃ, ⵠ[ᐃⲆᐃΔ], 0, 63, ΔⵠΔⵠΔ, 1],
		[ᐃᐃΔ, ⵠ[3], 2, 65, 7, 1],
		[1, ⵠ[3], 3, 64, 7, Δⵠᐃ],
		[ΔⵠΔ, ⵠ[3], ᐃᐃⲆⲆ, 62, ΔΔⲆᐃᐃ, ⵠΔᐃ],
		[1, ⵠ[3], ⲆⵠⲆᐃ, 61, ⲆᐃⲆΔⵠ, 1],
		[1, ⵠ[ᐃⲆᐃΔ], 1, 62, 7, ⵠΔᐃ],
		[1, ⵠ[3], 2, 63, ⲆⲆΔΔᐃ, 1],
		[ᐃⲆΔ, ⵠ[ᐃⵠΔⵠ], 0, 64, 6, Δⵠᐃ],
		[ⵠⲆⲆ, ⵠ[ᐃⵠΔᐃ], ᐃⵠΔᐃ, 65, 6, 1],
		[1, ⵠ[3], 2, 63, ΔΔΔⲆ, ⲆᐃΔ],
		[ᐃᐃΔ, ⵠ[3], 2, 62, ⵠⵠᐃᐃᐃ, Ⲇⵠᐃ],
		[1, ⵠ[ΔⲆⵠᐃ], 2, 61, 6, ΔⵠΔ],
		[1, ⵠ[ⲆᐃᐃΔ], 2, 60, ΔΔΔΔ, ᐃⲆΔ],
		[1, ⵠ[3], 2, 59, 6, 1],
		[ⵠⲆⲆ, ⵠ[3], 2, 61, 7, 1],
		[ⲆᐃΔ, ⵠ[ᐃΔⵠⲆ], 0, 60, 7, 1],
		[1, ⵠ[ᐃΔⵠⲆ], ⲆⲆΔⲆ, 60, 8, ᐃᐃΔ],
		[ᐃⲆΔ, ⵠ[ᐃⵠΔⵠ], ᐃⲆᐃᐃ, 59, ᐃⲆᐃΔΔ, 1],
		[1, ⵠ[ᐃⵠΔᐃ], 2, 59, ⲆᐃⲆΔⵠ, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], ᐃⲆΔ, 58, ⲆᐃⲆΔⵠ, ⵠⲆⲆ],
		[1, ⵠ[ᐃⵠΔⲆ], 1, 57, 6, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], ᐃⲆΔ, 55, 7, 1],
		[1, ⵠ[3], ΔΔᐃ, 56, ΔΔΔⲆ, ᐃⲆΔ],
		[ⵠΔᐃ, ⵠ[3], 2, 58, 6, 1],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 58, 7, Ⲇⵠᐃ],
		[1, ⵠ[3], 2, 57, ⲆⲆΔΔᐃ, 1],
		[1, ⵠ[3], 2, 56, 7, 1],
		[ⵠΔᐃ, ⵠ[3], 2, 55, 6, 1],
		[1, ⵠ[3], ⲆⲆΔⲆ, 57, Δᐃᐃⵠⵠ, 1],
		[1, ⵠ[ᐃⵠΔⵠ], 2, 56, ⲆΔⲆᐃᐃ, 1],
		[1, ⵠ[ⲆᐃᐃΔ], 2, 55, ⵠᐃⵠΔⲆ, 1],
		[Ⲇⵠᐃ, ⵠ[3], ΔⲆⲆ, 54, 8, ᐃⲆΔ],
		[1, ⵠ[3], ᐃᐃⲆ, 50, 7, ΔⵠΔ],
		[1, ⵠ[3], 0, 53, 6, 1],
		[1, ⵠ[ᐃⵠΔⲆ], ᐃᐃᐃⵠ, 54, ΔΔΔΔ, 1],
		[1, ⵠ[3], 2, 54, 7, 1],
		[ᐃⲆΔ, ⵠ[ᐃⵠΔⲆ], ⵠⵠⵠᐃ, 53, ᐃᐃⵠᐃᐃ, 1],
		[ΔⵠΔ, ⵠ[3], 2, 52, ΔᐃⵠⲆΔ, ᐃⲆΔ],
		[ᐃⲆΔ, ⵠ[3], ᐃᐃᐃⵠ, 52, 6, 1],
		[Ⲇⵠᐃ, ⵠ[ΔⲆⵠᐃ], 1, 52, Ⲇᐃⵠᐃᐃ, 1],
		[1, ⵠ[ᐃΔⵠⲆ], 2, 53, ⲆᐃⲆΔⵠ, 1],
		[Δⵠᐃ, ⵠ[ᐃⵠΔᐃ], 2, 51, 8, 1],
		[1, ⵠ[Δⵠⵠᐃ], ᐃⲆᐃᐃ, 51, ⲆΔᐃⲆᐃ, 1],
		[Ⲇⵠᐃ, ⵠ[3], ᐃⲆᐃᐃ, 51, 6, 1],
		[1, ⵠ[3], ᐃᐃΔⵠ, 50, 6, Δⵠᐃ],
		[ⲆᐃΔ, ⵠ[ⲆΔᐃⲆ], ᐃᐃⲆⲆ, 50, Ⲇᐃⵠⵠᐃ, ⵠΔᐃ],
		[Ⲇⵠᐃ, ⵠ[3], 2, 49, ⲆᐃⲆΔⵠ, ΔⵠΔ],
		[ⲆᐃΔ, ⵠ[ᐃⵠΔᐃ], ⵠⵠⵠᐃ, 49, ΔΔⵠΔⲆ, ᐃᐃΔ],
		[1, ⵠ[3], 2, 49, ΔΔΔΔ, 1],
		[1, ⵠ[3], 0, 46, ΔᐃⵠⲆΔ, 1],
		[1, ⵠ[3], ⲆᐃΔ, 48, ⲆᐃⲆΔⵠ, 1],
		[ΔⵠΔ, ⵠ[3], 1, 44, ΔΔⵠΔⲆ, 1],
		[1, ⵠ[ΔⲆⵠᐃ], 1, 41, 8, ᐃⲆΔ],
		[ⲆᐃΔ, ⵠ[3], ᐃⲆᐃᐃ, 48, 7, Ⲇⵠᐃ],
		[ᐃᐃΔ, ⵠ[3], ᐃᐃⲆⲆ, 48, 6, ΔⵠΔ],
		[ᐃᐃΔ, ⵠ[3], 2, 47, ⵠⲆⲆᐃᐃ, 1],
		[1, ⵠ[3], 2, 47, 7, ⲆᐃΔ],
		[ⵠΔᐃ, ⵠ[ΔⲆΔⲆ], 2, 47, Ⲇᐃⵠᐃᐃ, ⵠΔᐃ],
		[1, ⵠ[ⲆΔᐃⲆ], 2, 46, ⵠᐃⵠΔⲆ, 1],
		[ᐃⲆΔ, ⵠ[3], 2, 45, 8, Δⵠᐃ],
		[1, ⵠ[3], 2, 45, ΔΔⵠΔⲆ, ΔⵠΔ],
		[ΔⵠΔ, ⵠ[ᐃⵠΔⲆ], 2, 45, ΔΔΔⲆ, ΔⵠΔ],
		[ⵠΔᐃ, ⵠ[ⲆᐃᐃΔ], 2, 46, 6, 1],
		[ᐃᐃΔ, ⵠ[ⵠⵠΔⵠ], ᐃᐃᐃⵠ, 44, 6, ⵠΔᐃ],
		[ⵠΔᐃ, ⵠ[ΔΔᐃΔ], ᐃᐃΔⵠ, 44, ⲆΔⲆᐃᐃ, 1],
		[1, ⵠ[ⲆΔᐃⲆ], ΔΔⲆᐃ, 43, Ⲇᐃⵠⵠᐃ, ᐃⲆΔ],
		[1, ⵠ[Δⵠⵠᐃ], ᐃⲆᐃⵠ, 43, ⲆⵠⲆΔᐃ, ΔⵠΔ],
		[ᐃⲆΔ, ⵠ[ᐃⵠΔᐃ], ΔΔⲆᐃ, 43, ᐃⵠⵠⵠⲆ, ᐃᐃΔ],
		[1, ⵠ[ΔⲆⵠᐃ], ⵠⵠⵠᐃ, 42, ⵠⵠⲆⵠᐃ, ⵠΔᐃ],
		[1, ⵠ[ᐃⲆᐃΔ], 2, 42, ⲆΔᐃⲆᐃ, ⵠΔᐃ],
		[ⲆᐃΔ, ⵠ[ΔⲆⵠᐃ], ᐃᐃΔⵠ, 42, Ⲇᐃⵠⵠᐃ, Δⵠᐃ],
		[ⵠⲆⲆ, ⵠ[ΔⲆΔⲆ], ⵠⵠⵠᐃ, 41, ⲆⲆΔΔᐃ, 1],
		[ⵠⲆⲆ, ⵠ[Δⵠⵠᐃ], ᐃᐃⲆⲆ, 41, ⵠⵠᐃᐃᐃ, 1],
		[ⵠΔᐃ, ⵠ[3], ᐃⲆᐃᐃ, 40, ΔⵠΔⵠᐃ, ᐃⲆΔ],
		[1, ⵠ[ΔΔᐃΔ], 2, 40, ⲆⵠⲆΔᐃ, 1],
		[Δⵠᐃ, ⵠ[ⲆᐃᐃΔ], 2, 40, 8, 1],
		[1, ⵠ[3], 2, 39, ⲆᐃⲆΔⵠ, Δⵠᐃ],
		[ⲆᐃΔ, ⵠ[ᐃⵠΔⵠ], 0, 39, ⲆΔⲆⵠⵠ, 1],
		[1, ⵠ[3], 1, 38, ⲆΔⲆᐃᐃ, 1],
		[1, ⵠ[3], 2, 39, 6, ᐃᐃΔ],
		[ΔⵠΔ, ⵠ[ⵠⵠΔⵠ], ᐃⲆᐃⵠ, 38, ΔⵠΔⵠᐃ, 1],
		[1, ⵠ[ᐃΔⵠⲆ], 2, 37, ΔⵠΔⵠᐃ, ⵠΔᐃ],
		[1, ⵠ[3], ⲆⲆΔⲆ, 38, ᐃⲆᐃΔΔ, 1],
		[1, ⵠ[ΔⲆⵠᐃ], ᐃᐃΔⵠ, 37, 7, 1],
		[ⵠΔᐃ, ⵠ[ΔΔᐃΔ], 2, 37, 8, 1],
		[1, ⵠ[ᐃⵠΔⲆ], 2, 37, ⵠΔΔⲆΔ, 1],
		[Δⵠᐃ, ⵠ[3], ⲆⲆΔⲆ, 38, ⵠⲆⵠⵠⲆ, ⵠΔᐃ],
		[ⵠⲆⲆ, ⵠ[ᐃΔⵠⲆ], ⵠⵠⵠ, 38, 11, 1],
		[1, ⵠ[3], 0, 38, ⲆᐃⲆⲆⵠ, 1],
		[1, ⵠ[ᐃΔⵠⲆ], 1, 37, 18, ⵠΔᐃ],
		[Δⵠᐃ, ⵠ[ᐃⵠΔⲆ], ⵠⵠⵠ, 38, ΔΔⵠⲆⲆ, 1],
		[1, ⵠ[ΔⲆΔⲆ], 2, 37, 11, ⵠΔᐃ],
		[ᐃᐃΔ, ⵠ[3], 2, 37, ᐃᐃⲆⲆⵠ, ΔⵠΔ],
		[1, ⵠ[ⲆΔᐃⲆ], ᐃⲆᐃᐃ, 37, ⲆⵠᐃⲆⵠᐃⵠ, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⲆᐃΔ], ᐃᐃΔⵠ, 38, ⵠᐃⵠᐃΔ, 1],
		[ᐃⲆΔ, ⵠ[3], 2, 37, ΔⲆᐃⵠⵠΔᐃ, 1],
		[ᐃⲆΔ, ⵠ[ᐃⵠΔᐃ], ΔⲆΔⲆ, 38, 16, ᐃⲆΔ],
		[1, ⵠ[ᐃⲆᐃΔ], 0, 37, 21, ⵠⲆⲆ],
		[1, ⵠ[ᐃⵠΔⲆ], ⵠᐃⲆ, 38, 22, 1],
		[1, ⵠ[ΔⲆⵠᐃ], 0, 38, 24, 1],
		[1, ⵠ[ᐃⵠΔᐃ], 2, 37, ΔⲆΔⲆΔ, 1],
		[ⲆᐃΔ, ⵠ[3], 2, 38, ᐃᐃⲆΔⵠ, 1],
		[1, ⵠ[3], ΔΔⲆᐃ, 38, 21, 1],
		[1, ⵠ[ᐃⵠΔⲆ], 1, 37, 23, 1],
		[Δⵠᐃ, ⵠ[ᐃⵠΔⵠ], 3, 37, 22, ⵠⲆⲆ],
		[ᐃᐃΔ, ⵠ[3], ᐃⲆᐃΔ, 38, 23, 1],
		[ᐃᐃΔ, ⵠ[ⵠⵠΔⵠ], ΔΔⲆᐃ, 37, 24, Δⵠᐃ],
		[1, ⵠ[Δⵠⵠᐃ], 0, 38, 30, 1],
		[Ⲇⵠᐃ, ⵠ[ΔΔᐃΔ], 0, 38, 32, 1],
		[Ⲇⵠᐃ, ⵠ[ⲆⵠⲆᐃ], Ⲇᐃⵠ, 37, 31, 1],
		[ⵠⲆⲆ, ⵠ[3], 1, 38, 34, ⵠΔᐃ],
		[1, ⵠ[3], 1, 37, 29, ᐃⲆΔ],
		[1, ⵠ[ΔⲆⵠᐃ], 2, 38, 29, ᐃᐃΔ],
		[1, ⵠ[ᐃⵠΔⵠ], ᐃⲆᐃᐃ, 37, 30, ᐃᐃΔ],
		[ⵠΔᐃ, ⵠ[ΔⲆΔⲆ], ⵠⵠⵠᐃ, 38, 31, 1],
		[ⲆᐃΔ, ⵠ[ⲆΔᐃⲆ], 2, 37, 32, 1],
		[Δⵠᐃ, ⵠ[ΔⲆⵠᐃ], ᐃⵠΔᐃ, 38, 33, 1],
		[1, ⵠ[ⲆᐃᐃΔ], ᐃΔⵠⲆ, 38, 35, 1],
		[ᐃᐃΔ, ⵠ[3], ᐃᐃⲆⲆ, 37, 33, 1],
		[Ⲇⵠᐃ, ⵠ[ᐃⲆᐃΔ], 2, 36, ⲆᐃⲆΔⵠ, 1],
		[1, ⵠ[3], 0, 36, ⵠΔⲆⵠⵠ, 1],
		[1, ⵠ[3], ⵠⲆᐃ, 35, ⵠⲆΔⵠⵠ, Δⵠᐃ],
		[ⵠΔᐃ, ⵠ[ⵠⵠΔⵠ], ᐃᐃᐃⵠ, 36, 9, 1],
		[1, ⵠ[3], 2, 36, 10, ᐃᐃΔ],
		[1, ⵠ[ᐃⲆᐃΔ], 2, 35, ᐃᐃᐃΔΔ, ᐃᐃΔ],
		[1, ⵠ[ΔⲆΔⲆ], 1, 33, 8, 1],
		[ⲆᐃΔ, ⵠ[ⲆⵠⲆᐃ], 3, 34, 9, Δⵠᐃ],
		[ⵠⲆⲆ, ⵠ[ⲆᐃᐃΔ], ᐃⲆᐃΔ, 35, 8, 1],
		[1, ⵠ[ΔⲆΔⲆ], 2, 34, 8, Δⵠᐃ],
		[ᐃⲆΔ, ⵠ[3], 0, 36, ⵠⵠⵠⵠⵠ, ᐃᐃΔ],
		[1, ⵠ[ΔⲆⵠᐃ], ⲆᐃΔ, 34, ⲆΔⲆⵠⵠ, 1],
		[1, ⵠ[ᐃⵠΔᐃ], 2, 35, ᐃᐃⵠᐃᐃ, 1],
		[ᐃⲆΔ, ⵠ[ΔΔᐃΔ], 2, 35, ᐃⵠⵠⵠⲆ, ᐃᐃΔ],
		[1, ⵠ[ⵠⵠΔⵠ], 2, 36, 6, 1],
		[Δⵠᐃ, ⵠ[3], 2, 68, ⵠⲆᐃᐃΔ, ⲆᐃΔ],
		[ⵠⲆⲆ, ⵠ[ᐃΔⵠⲆ], 2, 66, ⲆΔⵠⵠΔ, ᐃⲆΔ],
		[ᐃᐃΔ, ⵠ[3], 3, 66, 9, 1],
		[ⵠΔᐃ, ⵠ[3], 0, 67, ⵠⵠⲆⵠⵠ, 1],
		[ᐃᐃΔ, ⵠ[3], 0, 66, ⲆᐃⲆΔⵠ, 1],
		[Ⲇⵠᐃ, ⵠ[3], ⵠⵠⵠᐃ, 67, 8, 1],
		[1, ⵠ[ᐃⵠΔⵠ], 1, 68, 8, Δⵠᐃ],
		[ΔⵠΔ, ⵠ[ᐃⵠΔᐃ], Δⵠᐃ, 66, ᐃⵠΔⲆΔ, 1],
		[ΔⵠΔ, ⵠ[3], 2, 67, 10, 1],
		[1, ⵠ[3], ᐃᐃᐃ, 66, 6, 1],
		[1, ⵠ[3], 2, 66, 7, ᐃⲆΔ],
		[1, ⵠ[3], ᐃᐃΔⵠ, 67, ΔΔⵠΔⲆ, 1],
		[1, ⵠ[3], ⲆⲆΔⲆ, 69, 8, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⵠΔⵠ], ᐃᐃⲆⲆ, 63, 32, 1],
		[1, ⵠ[3], 2, 62, 34, ΔⵠΔ],
		[ᐃᐃΔ, ⵠ[Δⵠⵠᐃ], 2, 60, 35, 1],
		[ⲆᐃΔ, ⵠ[ᐃⵠΔᐃ], ΔⲆⵠᐃ, 59, 35, 1],
		[1, ⵠ[ᐃΔⵠⲆ], ᐃᐃᐃ, 61, 35, 1],
		[1, ⵠ[ᐃⵠΔᐃ], ⵠⲆᐃ, 63, 34, 1],
		[Δⵠᐃ, ⵠ[3], ᐃᐃᐃⵠ, 63, 33, ᐃⲆΔ],
		[1, ⵠ[ᐃⵠΔⵠ], 2, 63, 35, ⵠⲆⲆ],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 62, 35, Δⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[3], 2, 58, 36, 1],
		[1, ⵠ[3], 1, 59, 36, 1],
		[ⵠΔᐃ, ⵠ[ᐃⵠΔⵠ], 1, 62, 36, 1],
		[ᐃⲆΔ, ⵠ[ΔΔᐃΔ], ᐃᐃᐃⵠ, 60, 36, Ⲇⵠᐃ],
		[ⵠΔᐃ, ⵠ[ᐃⵠΔⲆ], 2, 61, 34, 1],
		[ⵠⲆⲆ, ⵠ[ⵠⵠΔⵠ], 3, 62, 33, 1],
		[ⲆᐃΔ, ⵠ[ᐃⲆᐃΔ], ᐃⵠΔⵠ, 63, 36, ⲆᐃΔ],
		[ⲆᐃΔ, ⵠ[ᐃΔⵠⲆ], 3, 61, 36, ᐃⲆΔ],
		[1, ⵠ[ΔⲆΔⲆ], 0, 42, 36, 1],
		[1, ⵠ[3], 1, 39, 36, 1],
		[ⵠⲆⲆ, ⵠ[ⲆⵠⲆᐃ], 2, 41, 36, 1],
		[Δⵠᐃ, ⵠ[ᐃΔⵠⲆ], ⲆᐃᐃΔ, 39, 35, ᐃᐃΔ],
		[1, ⵠ[3], ΔⲆⵠᐃ, 40, 36, 1],
		[ΔⵠΔ, ⵠ[ⲆΔᐃⲆ], 3, 43, 36, Ⲇⵠᐃ],
		[ⵠΔᐃ, ⵠ[Δⵠⵠᐃ], 1, 40, 35, ⵠⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[ᐃⵠΔᐃ], ⲆⲆΔⲆ, 41, 35, 1],
		[1, ⵠ[3], 2, 40, 34, ᐃⲆΔ],
		[Δⵠᐃ, ⵠ[3], 2, 39, 34, ΔⵠΔ],
		[ⵠⲆⲆ, ⵠ[3], ᐃⲆᐃᐃ, 39, 33, ⵠⲆⲆ],
		[ᐃᐃΔ, ⵠ[3], 2, 39, 32, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], ⵠⵠⵠ, 40, 33, 1],
		[1, ⵠ[ᐃⵠΔᐃ], ᐃᐃᐃⵠ, 41, 34, ⵠⲆⲆ],
		[ᐃᐃΔ, ⵠ[3], 1, 44, 36, ⵠⲆⲆ],
		[Δⵠᐃ, ⵠ[3], ΔΔᐃΔ, 43, 35, ΔⵠΔ],
		[ᐃⲆΔ, ⵠ[3], 2, 42, 35, 1],
		[1, ⵠ[3], 0, 37, 34, 1],
		[1, ⵠ[ᐃⲆᐃΔ], 3, 59, 30, ⵠⲆⲆ],
		[ⵠΔᐃ, ⵠ[ᐃⵠΔᐃ], ⵠᐃⲆ, 60, 29, 1],
		[1, ⵠ[3], ⲆⲆΔⲆ, 60, 28, 1],
		[ⵠΔᐃ, ⵠ[3], ᐃⵠΔⲆ, 60, 27, 1],
		[ΔⵠΔ, ⵠ[ᐃⵠΔᐃ], Ⲇᐃⵠ, 60, 26, ᐃⲆΔ],
		[1, ⵠ[ᐃⵠΔᐃ], 2, 54, 25, 1],
		[1, ⵠ[ⵠⵠΔⵠ], 2, 48, 25, 1],
		[1, ⵠ[ⲆᐃᐃΔ], 2, 42, 26, 1],
		[1, ⵠ[ᐃⲆᐃΔ], ΔΔᐃ, 55, 25, 1],
		[1, ⵠ[3], 2, 59, 26, ᐃᐃΔ],
		[1, ⵠ[3], ⵠⲆΔ, 43, 26, 1],
		[1, ⵠ[ⵠⵠΔⵠ], 1, 42, 27, ΔⵠΔ],
		[1, ⵠ[3], ᐃᐃᐃⵠ, 42, 28, 1],
		[1, ⵠ[ᐃⵠΔⵠ], 2, 43, 30, ⵠⲆⲆ],
		[ⲆᐃΔ, ⵠ[ⲆᐃᐃΔ], ΔⲆⲆ, 42, 29, 1],
		[ⵠⲆⲆ, ⵠ[3], 0, 54, 24, Δⵠᐃ],
		[1, ⵠ[3], 0, 48, 24, ⵠΔᐃ],
		[ᐃᐃΔ, ⵠ[ᐃⵠΔᐃ], 2, 54, 23, Δⵠᐃ],
		[ⵠⲆⲆ, ⵠ[3], 2, 48, 23, Δⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[ⲆⵠⲆᐃ], 2, 63, 22, 1],
		[1, ⵠ[ⵠⵠΔⵠ], ⵠⵠⵠᐃ, 63, 21, ⵠΔᐃ],
		[1, ⵠ[3], 2, 39, 21, 1],
		[1, ⵠ[3], ᐃⲆᐃΔ, 57, ⵠᐃⵠᐃΔ, 1],
		[ⵠΔᐃ, ⵠ[3], ᐃᐃΔⵠ, 56, 18, 1],
		[1, ⵠ[ᐃⵠΔᐃ], ΔⲆΔⲆ, 51, 21, 1],
		[Δⵠᐃ, ⵠ[ⲆⵠⲆᐃ], ⵠⲆΔ, 51, ᐃⲆᐃⵠⲆ, ⵠⲆⲆ],
		[1, ⵠ[ᐃⵠΔᐃ], 2, 51, 19, 1],
		[1, ⵠ[3], 3, 51, 18, 1],
		[1, ⵠ[3], ᐃᐃΔⵠ, 63, 16, ⲆᐃΔ],
		[1, ⵠ[3], ⲆⲆΔⲆ, 63, 10, 1],
		[1, ⵠ[3], ⲆⲆΔⲆ, 56, ΔⲆᐃΔᐃ, 1],
		[1, ⵠ[ᐃⵠΔⵠ], ΔΔᐃΔ, 57, 13, ⲆᐃΔ],
		[1, ⵠ[3], 1, 45, ᐃⲆⲆⵠᐃ, 1],
		[Ⲇⵠᐃ, ⵠ[ᐃⲆᐃΔ], ᐃⲆᐃᐃ, 47, ⵠᐃⵠᐃΔ, Ⲇⵠᐃ],
		[ⲆᐃΔ, ⵠ[3], 2, 46, ⵠΔⵠⲆⵠ, 1],
		[1, ⵠ[3], 0, 46, ᐃⵠⵠⵠΔ, Ⲇⵠᐃ],
		[Δⵠᐃ, ⵠ[ΔⲆΔⲆ], 2, 45, ⵠΔᐃⲆⲆ, ⵠⲆⲆ],
		[ⲆᐃΔ, ⵠ[ⲆΔᐃⲆ], ᐃᐃΔⵠ, 39, 10, 1],
		[ᐃⲆΔ, ⵠ[3], ᐃᐃⲆⲆ, 39, 16, ΔⵠΔ],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 47, 17, 1],
		[1, "a", 0, 51, ⵠΔᐃⵠⲆ, ΔⵠΔ],
		[ΔⵠΔ, "a", 1, 53, ⵠΔⲆᐃᐃ, 1],
		[1, "a", Ⲇⵠᐃ, 49, 14, ᐃᐃΔ],
		[1, ⵠ[77], Ⲇᐃⵠᐃᐃ, 55, ᐃᐃΔᐃⲆ, ΔΔᐃ],
		[ᐃᐃΔ, ⵠ[77], ᐃΔⵠⵠⲆ, 48, 28, ⵠᐃⲆ],
		[1, ⵠ[77], ⵠΔΔΔⵠ, 58, 26, ΔΔᐃ],
		[ΔⵠΔ, ⵠ[77], 11, 59, 29, 0],
		[1, ⵠ[77], ⲆᐃᐃⲆΔ, 55, 34, ᐃᐃᐃ],
		[1, ⵠ[77], ΔⵠⵠᐃⲆ, 48, 33, ⵠⲆᐃ],
		[ᐃⲆΔ, ⵠ[77], ᐃⲆᐃᐃⲆ, 41, 32, Ⲇᐃⵠ],
		[Δⵠᐃ, ⵠ[77], ⵠⲆΔⵠⵠ, 56, 24, 0],
		[ⵠⲆⲆ, ⵠ[77], 9, 62, ΔᐃⲆⲆΔ, 0],
		[1, ⵠ[77], 9, 45, 11, ᐃᐃᐃ],
		[Ⲇⵠᐃ, ⵠ[77], ⵠΔᐃᐃΔ, 44, 17, 0],
		[ⵠΔᐃ, ⵠ[77], ⲆΔⵠⵠΔ, 44, ⲆⵠⵠᐃΔ, ⵠⲆΔ],
		[Δⵠᐃ, ⵠ[77], 10, 58, ΔⲆᐃΔᐃ, 0],
		[1, ⵠ[77], 10, 63, 31, ⵠᐃⲆ],
		[1, ⵠ[77], ΔΔⲆᐃᐃ, 60, 30, 0],
		[1, ⵠ[77], 8, 43, 26, ⵠⲆΔ],
		[1, ⵠ[77], 10, 43, 29, ᐃᐃᐃ],
		[ᐃᐃΔ, ⵠ[77], 10, 53, 29, ᐃᐃᐃ],
		[1, ⵠ[77], 10, 53, 24, ΔΔᐃ],
		[1, ⵠ[77], 9, 53, 19, Ⲇᐃⵠ],
		[1, ⵠ[77], ⲆᐃᐃⲆΔ, 49, ⵠΔⵠᐃⵠ, 0],
		[ᐃⲆΔ, ⵠ[77], ⵠΔΔⲆΔ, 39, 26, ⵠⲆᐃ],
		[ᐃⲆΔ, ⵠ[77], 9, 46, 24, ⵠᐃⲆ],
		[1, ⵠ[77], ΔⲆⲆΔⲆ, 62, 10, 0],
		[ⵠⲆⲆ, ⵠ[77], 8, 40, ⵠⲆᐃᐃⵠ, 0],
		[1, ⵠ[77], 32, 55, 35, 0],
		[1, ⵠ[77], 32, 60, 33, ᐃᐃᐃ],
		[Δⵠᐃ, ⵠ[77], 32, 63, 28, 0],
		[1, ⵠ[77], 32, 63, 24, 0],
		[1, ⵠ[77], 32, 58, 22, 0],
		[1, ⵠ[77], 32, 59, ⵠΔΔΔΔ, ⵠᐃⲆ],
		[1, ⵠ[77], 32, 63, ᐃⵠⵠⵠΔ, ⵠⲆᐃ],
		[1, ⵠ[77], 32, 59, 10, 0],
		[ᐃᐃΔ, ⵠ[77], 32, 56, 12, 0],
		[1, ⵠ[77], 32, 52, 17, ᐃᐃⲆ],
		[1, ⵠ[77], 32, 51, 14, 0],
		[ᐃⲆΔ, ⵠ[77], 32, 39, 12, 0],
		[1, ⵠ[77], 32, 39, ⵠᐃⵠᐃΔ, 0],
		[1, ⵠ[77], 32, 41, 25, 0],
		[1, ⵠ[77], 32, 39, 30, ᐃᐃᐃ],
		[1, ⵠ[77], 32, 50, 29, 0],
		[1, ⵠ[77], 32, 43, 34, 0],
		[ⵠⲆⲆ, ⵠ[77], 32, 47, 34, ᐃᐃᐃ],
		[1, ⵠ[77], 31, 54, 33, Ⲇᐃⵠ],
		[ᐃⲆΔ, ⵠ[77], 31, 59, 24, 0],
		[1, ⵠ[77], 31, 63, ᐃᐃⲆⵠᐃ, ⵠⲆᐃ],
		[1, ⵠ[77], 31, 47, 15, 0],
		[1, ⵠ[77], 31, 43, ᐃⵠΔᐃΔΔᐃ, ᐃᐃᐃ],
		[1, ⵠ[77], 31, 39, 27, 0],
		[1, ⵠ[77], 31, 48, 27, ⵠⵠⵠ],
		[1, ⵠ[77], 31, 57, 27, 0],
		[Δⵠᐃ, ⵠ[77], 32, 44, 27, 0],
		[1, "d", ᐃᐃⲆ, 12, ⵠΔᐃⲆⲆ, 1],
		[1, "d", ᐃᐃⲆ, 89, ᐃⵠⵠⵠΔ, ⵠⲆⲆ],
		[ⲆᐃΔ, "d", 1, 91, 21, ⲆᐃΔ],
		[ᐃᐃΔ, "d", 1, 10, 22, 1],
		[1, "f", 2, 89, 18, ᐃᐃΔ],
		[ᐃᐃΔ, "f", 0, 88, 19, 1],
		[1, "g", 1, 85, 22, Ⲇⵠᐃ],
		[1, "s", 1, 90, 29, 1],
		[ᐃⲆΔ, "s", ΔⵠΔ, 92, 15, ⵠΔᐃ],
		[1, "s", ΔΔᐃ, 91, 31, 1],
		[ⵠⲆⲆ, "s", 2, 90, 38, ΔⵠΔ],
		[ⵠΔᐃ, "s", 0, 91, 42, 1],
		[1, "s", 0, 90, 49, 1],
		[Δⵠᐃ, "f", ᐃⲆΔ, 86, 43, 1],
		[1, "f", Ⲇᐃⵠ, 81, 45, Ⲇⵠᐃ],
		[Δⵠᐃ, "f", ᐃᐃᐃⵠ, 66, 44, 1],
		[1, "f", 2, 55, 49, 1],
		[1, "f", ⵠⲆⲆ, 54, 50, 1],
		[Ⲇⵠᐃ, "f", 2, 43, 45, ⲆᐃΔ],
		[1, "f", ᐃᐃΔⵠ, 31, 48, 1],
		[1, "f", Ⲇⵠᐃ, 27, 39, ᐃⲆΔ],
		[1, "f", 1, 80, 46, 1],
		[Ⲇⵠᐃ, "f", 1, 69, 48, 1],
		[1, "g", ΔⲆⲆ, 80, 40, 1],
		[ⲆᐃΔ, "g", 2, 81, 40, ⵠⲆⲆ],
		[ⵠΔᐃ, "s", 2, 77, 39, ᐃⲆΔ],
		[Ⲇⵠᐃ, "s", 0, 68, 43, 1],
		[ⵠⲆⲆ, "s", ⵠⵠⵠᐃ, 57, 41, 1],
		[1, "s", 1, 56, 42, 1],
		[Δⵠᐃ, "s", Δⵠᐃ, 40, 41, 1],
		[ΔⵠΔ, "s", 2, 48, 48, ⵠⲆⲆ],
		[1, "f", 2, 17, ⲆⵠᐃⵠⲆ, 1],
		[ⲆᐃΔ, "f", Ⲇᐃⵠ, 13, 31, ⵠΔᐃ],
		[ᐃᐃΔ, "f", 1, ⲆᐃⵠⲆΔ, 32, ᐃᐃΔ],
		[ⵠΔᐃ, "s", ⵠⲆᐃ, 15, 27, Ⲇⵠᐃ],
		[ⲆᐃΔ, "s", ⵠⲆΔ, 13, 39, ᐃⲆΔ],
		[Δⵠᐃ, "f", 2, ⲆΔⲆΔⵠ, 17, ᐃⲆΔ],
		[ΔⵠΔ, "f", ⵠΔᐃ, ⵠᐃΔᐃᐃ, 18, 1],
		[1, "g", 2, 12, 25, ⵠⲆⲆ],
		[1, "f", ⵠⵠⵠ, ᐃⵠⲆⲆΔΔᐃ, 45, Δⵠᐃ],
		[ⲆᐃΔ, "f", ᐃᐃΔ, ᐃΔΔⲆᐃⵠᐃ, 46, Ⲇⵠᐃ],
		[1, "s", Δⵠᐃ, 74, 48, 1],
		[ᐃᐃΔ, "s", 1, 20, 47, 1],
		[ⲆᐃΔ, "g", ⵠⲆᐃ, 58, 59, Δⵠᐃ],
		[Δⵠᐃ, "g", 0, 46, 72, 1],
		[ᐃⲆΔ, "g", 0, 69, 79, 1],
		[ⵠⲆⲆ, "g", 0, 72, 74, 1],
		[ⲆᐃΔ, "g", ΔΔᐃ, 26, 88, 1],
		[Δⵠᐃ, "g", ᐃᐃⲆ, ⲆᐃΔᐃⵠ, 74, 1],
		[1, "g", ⵠⲆᐃ, 28, 67, Ⲇⵠᐃ],
		[ΔⵠΔ, "g", ⵠⲆΔ, 49, 86, 1],
		[ⵠΔᐃ, "g", ᐃᐃᐃ, 77, 90, 1],
		[1, "g", 0, 87, 72, 1],
		[ᐃᐃΔ, "g", ⵠⲆΔ, ⵠⲆᐃᐃⵠ, 85, 1],
		[1, "g", ⲆᐃΔ, 85, 97, ᐃᐃΔ],
		[1, "g", 1, 68, 104, 1],
		[Ⲇⵠᐃ, "g", ⲆᐃΔ, 63, 91, 1],
		[ᐃⲆΔ, "g", ⵠⲆⲆ, 39, 90, ᐃᐃΔ],
		[ⵠⲆⲆ, "g", Δⵠᐃ, 34, 99, 1],
		[ⵠⲆⲆ, "g", 1, ⲆⵠⵠⲆΔ, 103, ΔⵠΔ],
		[1, "g", ᐃⲆᐃⵠ, 77, 60, ΔⵠΔ],
		[Ⲇⵠᐃ, "g", ⲆⲆΔⲆ, ⵠΔⵠᐃⵠ, 56, ΔⵠΔ],
		[ᐃᐃΔ, "g", 2, 39, 60, 1],
		[1, "g", ᐃⲆᐃⵠ, 87, 57, 1],
		[1, "f", 0, 9, 62, ⲆᐃΔ],
		[1, "f", 0, ⵠᐃΔᐃᐃ, 81, 1],
		[1, "f", 0, 26, 59, ⵠⲆⲆ],
		[1, "f", ᐃᐃⲆ, 35, 53, 1],
		[Ⲇⵠᐃ, "f", ᐃᐃᐃ, 44, 58, 1],
		[ⵠΔᐃ, "f", 0, 88, 62, ΔⵠΔ],
		[1, "f", ΔΔᐃ, 91, 82, 1],
		[ᐃⲆΔ, "f", ⵠⵠⵠ, 84, 85, 1],
		[1, "f", ⵠⵠⵠ, 79, 69, 1],
		[1, "f", 0, 64, 71, 1],
		[1, "f", 0, 62, 83, ᐃᐃΔ],
		[ⵠΔᐃ, "f", ⵠⲆΔ, 34, 81, 1],
		[1, "f", 0, 39, 71, 1],
		[ᐃᐃΔ, "f", 0, 54, 94, ⲆᐃΔ],
		[1, "f", Δⵠᐃ, 81, 70, ⲆᐃΔ],
		[ⵠΔᐃ, "f", 1, 91, 72, 1],
		[ⵠΔᐃ, "f", 1, Ⲇᐃⵠᐃᐃ, 91, 1],
		[1, "f", 1, ᐃⵠⵠⵠⵠⵠΔ, 81, 1],
		[1, "f", ⵠΔᐃ, 29, 79, 1],
		[1, "f", 1, ⲆᐃΔⲆⵠ, 65, ΔⵠΔ],
		[ᐃᐃΔ, "f", ᐃⲆΔ, 46, 97, 1],
		[1, "f", 1, 43, 73, ⵠⲆⲆ],
		[ⵠⲆⲆ, "f", ΔⵠΔ, 60, 69, ᐃᐃΔ],
		[ⲆᐃΔ, "f", ᐃᐃΔ, 70, 96, Ⲇⵠᐃ],
		[Δⵠᐃ, "f", 1, 58, 84, 1],
		[1, "s", 1, 56, 76, ᐃⲆΔ],
		[ⵠⲆⲆ, "s", Ⲇⵠᐃ, 85, 74, 1],
		[ΔⵠΔ, "s", 0, 72, 71, Ⲇⵠᐃ],
		[ᐃⲆΔ, "s", 0, 41, 62, 1],
		[1, "s", 0, 60, 61, ᐃᐃΔ],
		[1, "s", ᐃᐃᐃ, ⵠⵠᐃΔᐃ, 66, 1],
		[1, "s", 0, 47, 83, ⲆᐃΔ],
		[ⵠⲆⲆ, "s", ΔΔᐃ, 29, 86, Δⵠᐃ],
		[1, "s", 0, 78, 92, 1],
		[1, "s", ΔⲆⲆ, 62, 102, Ⲇⵠᐃ],
		[ΔⵠΔ, "s", ⵠᐃⲆ, ΔΔⵠᐃᐃ, 95, ⵠⲆⲆ],
		[1, "s", 2, 64, 101, 1],
		[Ⲇⵠᐃ, "s", ᐃⲆᐃᐃ, 78, 84, ᐃⲆΔ],
		[1, "s", ΔΔⲆᐃ, 49, 83, 1],
		[1, "s", ΔΔⲆᐃ, 15, 76, Δⵠᐃ],
		[ⵠⲆⲆ, "s", ᐃⲆᐃⵠ, 21, 84, ΔⵠΔ],
		[Ⲇⵠᐃ, "f", ΔⵠΔ, 26, 94, 1],
		[1, "f", ᐃᐃᐃⵠ, 23, 96, ⵠⲆⲆ],
		[ΔⵠΔ, "f", 2, 25, 72, 1],
		[ⵠΔᐃ, "f", 2, 85, 77, Ⲇⵠᐃ],
		[Ⲇⵠᐃ, "f", 2, 79, 95, 1],
		[1, "f", ᐃⲆᐃⵠ, 51, 65, 1],
		[1, "f", ᐃᐃⲆⲆ, 69, 60, 1],
		[1, "f", ΔⵠΔ, 25, 105, Ⲇⵠᐃ],
		[ⲆᐃΔ, "s", 1, ΔΔΔΔᐃ, 68, 1],
		[1, "s", 0, 55, 76, 1],
		[1, "s", ⵠⲆᐃ, 74, 59, 1],
		[Δⵠᐃ, "f", ⲆᐃΔ, 46, 142, 1],
		[ⵠΔᐃ, "f", 1, ⵠⲆⵠᐃΔ, 140, 1],
		[Δⵠᐃ, "f", 1, 77, 137, 1],
		[ⵠⲆⲆ, "f", ΔΔᐃ, 75, 137, ⵠΔᐃ],
		[ⵠΔᐃ, "f", 0, 55, 138, ᐃᐃΔ],
		[ΔⵠΔ, "f", 0, 33, 127, ⵠⲆⲆ],
		[ⲆᐃΔ, "f", Ⲇᐃⵠ, 76, 121, 1],
		[ⵠΔᐃ, "f", 0, 55, 121, 1],
		[ᐃⲆΔ, "f", 0, 13, 123, ᐃᐃΔ],
		[1, "f", ΔΔᐃ, ᐃⲆᐃⲆⵠ, 141, ᐃᐃΔ],
		[1, "f", ΔⲆⲆ, 40, 137, 1],
		[ᐃⲆΔ, "f", 2, 76, 142, 1],
		[1, "f", 2, 57, 140, ΔⵠΔ],
		[ᐃⲆΔ, "f", ᐃᐃⲆⲆ, 39, 138, ⲆᐃΔ],
		[Δⵠᐃ, "f", 2, 16, 143, 1],
		[ⵠⲆⲆ, "f", 2, 29, 131, 1],
		[1, "f", 0, 70, 150, 1],
		[ⵠⲆⲆ, "f", ᐃᐃᐃ, 28, 146, 1],
		[1, "f", ⵠᐃⲆ, 12, 132, Ⲇⵠᐃ],
		[1, "f", ⵠⵠⵠ, 90, 129, ᐃᐃΔ],
		[1, "f", 1, 87, 131, ⲆᐃΔ],
		[Ⲇⵠᐃ, "f", 0, 91, 143, 1],
		[ΔⵠΔ, "f", ΔΔⲆᐃ, 87, 145, ΔⵠΔ],
		[ΔⵠΔ, "f", ⵠΔᐃ, 89, 141, Δⵠᐃ],
		[Ⲇⵠᐃ, "f", Ⲇⵠᐃ, 63, 130, ⵠΔᐃ],
		[ⵠⲆⲆ, "f", ᐃⲆΔ, 75, 122, 1],
		[1, "f", ⵠⲆⲆ, 52, 124, ᐃⲆΔ],
		[ⵠΔᐃ, "f", 1, 34, 127, 1],
		[1, "f", 1, 14, 123, 1],
		[Δⵠᐃ, "f", 1, 24, 122, Ⲇⵠᐃ],
		[ⵠΔᐃ, "f", ⵠⲆᐃ, 83, 108, Ⲇⵠᐃ],
		[1, "f", ⵠᐃⲆ, 89, 118, 1],
		[1, "f", 0, 56, 107, ΔⵠΔ],
		[ⲆᐃΔ, "f", ⵠᐃⲆ, 38, 113, Δⵠᐃ],
		[Ⲇⵠᐃ, "f", 0, 16, 110, ⲆᐃΔ],
		[1, "f", 1, 80, 105, Ⲇⵠᐃ],
		[1, "f", ΔⵠΔ, 82, 109, 1],
		[1, "f", ᐃᐃΔ, 87, 118, 1],
		[ΔⵠΔ, "f", ᐃⲆΔ, 59, 110, 1],
		[ⵠⲆⲆ, "f", ⵠⲆⲆ, 29, 111, ᐃⲆΔ],
		[1, "f", 2, 28, 112, 1],
		[1, "f", 2, 70, 112, 1],
		[1, "f", ᐃᐃΔⵠ, 42, 111, ⲆᐃΔ],
		[1, "s", ᐃᐃⲆ, 68, 157, Δⵠᐃ],
		[1, "s", 0, 81, 158, ΔⵠΔ],
		[ΔⵠΔ, "s", 0, 25, 172, 1],
		[1, "s", 0, 22, 161, Ⲇⵠᐃ],
		[ᐃⲆΔ, "s", 0, 35, 152, ᐃⲆΔ],
		[1, "s", ΔⲆⲆ, 66, 144, ⵠⲆⲆ],
		[1, "s", ⵠⲆΔ, 87, 145, ⵠΔᐃ],
		[1, "s", ΔⲆⲆ, 86, 145, 1],
		[ᐃⲆΔ, "s", ΔⲆⲆ, 84, 135, 1],
		[1, "s", 0, 69, 133, 1],
		[ⲆᐃΔ, "s", ⵠⲆΔ, 84, 122, ⵠⲆⲆ],
		[ⲆᐃΔ, "s", 0, 68, 121, ᐃⲆΔ],
		[ⲆᐃΔ, "s", ΔΔᐃ, 48, 124, 1],
		[Δⵠᐃ, "s", ⵠⵠⵠ, 26, 129, Ⲇⵠᐃ],
		[1, "s", 0, 9, 127, ᐃⲆΔ],
		[1, "s", ⵠⵠⵠ, 11, 144, 1],
		[ⵠΔᐃ, "s", 0, ⵠⲆᐃᐃΔ, 109, 1],
		[1, "s", 0, 35, 101, 1],
		[ⲆᐃΔ, "s", 0, 47, 109, 1],
		[1, "s", 0, 58, 111, 1],
		[Ⲇⵠᐃ, "s", ΔⲆⲆ, 84, 110, ⵠΔᐃ],
		[ΔⵠΔ, "s", 0, 28, 114, ⲆᐃΔ],
		[ΔⵠΔ, "s", ΔⵠΔ, 30, 116, ΔⵠΔ],
		[ΔⵠΔ, "s", 1, 46, 112, ⵠΔᐃ],
		[ⵠⲆⲆ, "s", ⲆᐃΔ, 81, 111, 1],
		[Ⲇⵠᐃ, "s", 1, 70, 123, 1],
		[ⵠⲆⲆ, "s", 1, 49, 127, ⵠΔᐃ],
		[ⵠΔᐃ, "s", ⲆᐃΔ, 66, 134, 1],
		[ᐃᐃΔ, "s", ⵠⲆⲆ, 67, 144, 1],
		[Δⵠᐃ, "s", 1, 38, 152, 1],
		[1, "s", 1, 21, 164, 1],
		[1, "s", 1, ᐃⵠⲆⵠᐃ, 147, Ⲇⵠᐃ],
		[ⲆᐃΔ, "s", 1, 24, 130, ⲆᐃΔ],
		[ⲆᐃΔ, "s", 1, ᐃⲆⵠΔᐃ, 125, 1],
		[1, "s", Δⵠᐃ, 65, 158, 1],
		[ⲆᐃΔ, "s", 1, 83, 167, ⵠΔᐃ],
		[1, "s", ΔⵠΔ, 65, 167, 1],
		[ⲆᐃΔ, "s", Ⲇⵠᐃ, 47, 164, 1],
		[1, "s", 1, 56, 168, 1],
		[1, "s", 2, 54, 169, Ⲇⵠᐃ],
		[1, "s", 2, 88, 170, 1],
		[ⵠⲆⲆ, "s", ᐃᐃΔⵠ, 91, 162, ΔⵠΔ],
		[1, "s", ᐃᐃⲆⲆ, 79, 149, ᐃⲆΔ],
		[Ⲇⵠᐃ, "s", 2, 75, 144, ᐃᐃΔ],
		[Δⵠᐃ, "s", 2, 57, 150, ΔⵠΔ],
		[1, "s", ᐃⲆᐃⵠ, 47, 143, ⵠΔᐃ],
		[ⵠⲆⲆ, "s", ⵠⵠⵠᐃ, 31, 145, 1],
		[1, "s", ᐃⲆᐃᐃ, 36, 138, ᐃᐃΔ],
		[1, "s", ΔΔⲆᐃ, ⲆΔⵠΔⵠ, 163, ᐃᐃΔ],
		[1, "s", 2, 22, 142, 1],
		[1, "g", 2, 78, 132, 1],
		[Δⵠᐃ, "g", ᐃᐃΔ, 48, 135, ⵠⲆⲆ],
		[ᐃᐃΔ, "g", 2, 16, 136, 1],
		[ᐃⲆΔ, "g", 0, 62, 92, 1],
		[1, "g", 2, 70, 80, ᐃᐃΔ],
		[1, "g", ᐃᐃⲆⲆ, ΔΔⵠⲆᐃ, 86, ΔⵠΔ],
		[ᐃⲆΔ, "g", ᐃᐃᐃⵠ, 47, 75, 1],
		[ⲆᐃΔ, "g", 2, 36, 89, 1],
		[Δⵠᐃ, "g", 2, 80, 90, ⵠⲆⲆ],
		[1, "f", ᐃⲆΔ, 39, 118, 1],
		[ⵠΔᐃ, "d", ⲆⲆΔⲆ, 84, 54, ⲆᐃΔ],
		[1, "d", 2, ΔΔΔⵠᐃ, 54, 1],
		[1, ⵠ[77], ΔΔⵠΔⲆ, 13, ⲆⵠⵠᐃΔ, ⵠⵠⵠ],
		[1, ⵠ[77], 5, 16, 28, ⵠⵠⵠ],
		[Δⵠᐃ, ⵠ[77], ΔⲆⵠⵠ, 9, 25, 0],
		[1, ⵠ[77], 5, 34, 41, ⵠⲆᐃ],
		[1, ⵠ[77], ᐃΔⵠⵠ, 28, 40, ᐃᐃⲆ],
		[1, ⵠ[77], ΔΔⵠΔᐃ, 31, 47, 0],
		[1, ⵠ[77], 6, 12, 39, Ⲇᐃⵠ],
		[1, ⵠ[77], ⵠⲆΔⵠ, 16, 47, 0],
		[1, ⵠ[77], 4, 7, 46, ⵠⲆᐃ],
		[1, ⵠ[77], 6, 7, 33, 0],
		[1, ⵠ[77], ΔΔⵠΔᐃ, 40, 42, 0],
		[1, ⵠ[77], 7, ⵠᐃⲆⵠⲆ, 48, Ⲇᐃⵠ],
		[Δⵠᐃ, ⵠ[77], 7, 29, 59, ⵠⲆᐃ],
		[ⵠΔᐃ, ⵠ[77], 6, 27, 58, ᐃᐃⲆ],
		[1, ⵠ[77], 6, 15, 54, 0],
		[ⵠΔᐃ, ⵠ[77], ᐃᐃᐃⲆ, 12, 66, ᐃᐃⲆ],
		[1, ⵠ[77], 5, 37, 53, 0],
		[ⵠΔᐃ, ⵠ[77], 4, 10, 63, ΔΔᐃ],
		[ᐃᐃΔ, ⵠ[77], ᐃᐃⵠᐃᐃ, 49, 48, 0],
		[1, ⵠ[77], 7, 37, 63, 0],
		[1, ⵠ[77], ΔΔⵠΔᐃ, 33, 68, 0],
		[Δⵠᐃ, ⵠ[77], ΔΔΔΔ, 56, 52, 0],
		[1, ⵠ[77], 5, 59, 58, 0],
		[1, ⵠ[77], 6, 48, 58, 0],
		[1, ⵠ[77], 4, 53, 63, ᐃᐃᐃ],
		[1, ⵠ[77], ⵠᐃᐃΔ, 67, 44, ΔΔᐃ],
		[1, ⵠ[77], ⵠⵠᐃᐃ, 70, 49, ᐃᐃⲆ],
		[ᐃᐃΔ, ⵠ[77], ᐃⵠᐃⲆ, 82, 55, ⵠᐃⲆ],
		[1, ⵠ[77], ΔⵠΔᐃ, 79, 41, 0],
		[1, ⵠ[77], 5, 91, 29, ΔΔᐃ],
		[ⵠⲆⲆ, ⵠ[77], 7, 91, 43, 0],
		[1, ⵠ[77], 6, 85, 44, ΔΔᐃ],
		[ΔⵠΔ, ⵠ[77], ΔⵠΔⵠᐃ, 74, 60, Ⲇᐃⵠ],
		[ⵠΔᐃ, ⵠ[77], ᐃⵠⵠⵠⲆ, 90, 8, ⵠⵠⵠ],
		[ⲆᐃΔ, ⵠ[77], ᐃⵠᐃⲆ, 91, ᐃⵠᐃⵠᐃ, ᐃᐃⲆ],
		[Ⲇⵠᐃ, ⵠ[77], 4, 87, ᐃᐃⲆΔⵠ, ⵠⵠⵠ],
		[1, ⵠ[77], ⲆΔᐃⲆᐃ, 93, 11, ΔΔᐃ],
		[1, ⵠ[77], 6, 91, 21, 0],
		[1, ⵠ[77], ⵠⵠᐃᐃᐃ, 85, 35, 0],
		[ᐃᐃΔ, ⵠ[77], ⵠⵠᐃᐃ, 93, 58, ᐃᐃⲆ],
		[1, ⵠ[77], ⵠⲆⲆᐃ, 87, 63, ΔⲆⲆ],
		[1, ⵠ[77], 7, 77, 62, 0],
		[ⵠⲆⲆ, ⵠ[77], ΔⵠΔⵠᐃ, 68, 61, ⵠᐃⲆ],
		[ΔⵠΔ, ⵠ[77], ΔⲆⲆⵠ, 90, 73, 0],
		[ⵠⲆⲆ, ⵠ[77], 4, 87, 71, ᐃᐃⲆ],
		[1, ⵠ[77], 7, 80, 71, ΔΔᐃ],
		[1, ⵠ[77], ⲆΔⲆⵠⵠ, 83, 77, ΔⲆⲆ],
		[ᐃᐃΔ, ⵠ[77], 7, 89, 83, 0],
		[1, ⵠ[77], ᐃΔⵠⵠ, 71, 80, ΔΔᐃ],
		[ⲆᐃΔ, ⵠ[77], 4, 71, 70, 0],
		[ⵠⲆⲆ, ⵠ[77], ⵠⵠᐃᐃ, 63, 72, Ⲇᐃⵠ],
		[1, ⵠ[77], ⵠᐃΔΔ, 54, 75, ᐃᐃᐃ],
		[1, ⵠ[77], 5, 44, 83, ᐃᐃⲆ],
		[1, ⵠ[77], 5, 42, 74, 0],
		[1, ⵠ[77], ⵠⵠᐃᐃ, 15, 81, 0],
		[ᐃⲆΔ, ⵠ[77], ⵠⲆⲆⵠ, 29, 80, 0],
		[1, ⵠ[77], ⵠᐃᐃΔ, 37, 90, ᐃᐃᐃ],
		[Δⵠᐃ, ⵠ[77], ᐃⲆᐃⲆ, ⲆΔⲆⵠⵠ, 75, 0],
		[ⲆᐃΔ, ⵠ[77], ⵠⲆⲆᐃᐃ, 22, 74, ⵠᐃⲆ],
		[Ⲇⵠᐃ, ⵠ[77], 6, 43, 95, 0],
		[ᐃⲆΔ, ⵠ[77], Ⲇⵠⵠᐃⵠ, 57, 85, ᐃᐃᐃ],
		[1, ⵠ[77], 6, ᐃΔΔⵠᐃ, 94, ⵠⲆΔ],
		[1, ⵠ[77], 6, ᐃΔΔⲆⲆ, 92, 0],
		[ⵠΔᐃ, ⵠ[77], ⵠⵠᐃᐃ, 26, 89, 0],
		[ᐃⲆΔ, ⵠ[77], 5, 31, 112, 0],
		[ⵠΔᐃ, ⵠ[77], 5, 54, 108, 0],
		[1, ⵠ[77], 5, 55, 95, ᐃᐃᐃ],
		[Ⲇⵠᐃ, ⵠ[77], ⲆⵠΔΔ, 35, 104, 0],
		[1, ⵠ[77], 5, 13, 110, Ⲇᐃⵠ],
		[1, ⵠ[77], 7, 27, 107, ⵠᐃⲆ],
		[1, ⵠ[77], ΔᐃⵠⲆΔ, 47, 99, ⵠᐃⲆ],
		[1, ⵠ[77], ΔᐃⵠⲆΔ, 11, 104, ⵠⲆΔ],
		[1, ⵠ[77], 7, ΔⲆⲆΔⲆ, 111, 0],
		[1, ⵠ[77], ⲆⲆΔΔᐃ, 40, 114, ⵠᐃⲆ],
		[ⵠⲆⲆ, ⵠ[77], 7, 28, 117, 0],
		[1, ⵠ[77], 7, 47, 113, 0],
		[ⲆᐃΔ, ⵠ[77], 7, 63, 104, ΔⲆⲆ],
		[ⵠΔᐃ, ⵠ[77], ⵠⲆΔⵠ, 64, 92, 0],
		[ᐃᐃΔ, ⵠ[77], 6, 86, 97, ᐃᐃᐃ],
		[1, ⵠ[77], ⵠⲆⲆᐃ, 76, 91, 0],
		[Ⲇⵠᐃ, ⵠ[77], 5, 85, 86, 0],
		[1, ⵠ[77], Ⲇⵠⵠᐃⵠ, 78, 83, 0],
		[1, ⵠ[77], ⵠⵠⲆⵠᐃ, 71, 97, ΔΔᐃ],
		[1, ⵠ[77], ΔⵠⵠⲆ, 69, 105, ⵠᐃⲆ],
		[1, ⵠ[77], 4, 79, 104, 0],
		[1, ⵠ[77], 4, 86, 109, ᐃᐃⲆ],
		[1, ⵠ[77], ⵠᐃᐃΔ, 86, 118, ⵠⲆᐃ],
		[ⵠΔᐃ, ⵠ[77], ⲆᐃⲆΔ, 70, 113, ᐃᐃᐃ],
		[ⵠΔᐃ, ⵠ[77], 6, 69, 121, ΔⲆⲆ],
		[1, ⵠ[77], 6, 76, 122, 0],
		[1, ⵠ[77], ⲆⵠⲆΔᐃ, 87, 130, ΔⲆⲆ],
		[1, ⵠ[77], ⵠᐃΔΔ, 84, 123, Ⲇᐃⵠ],
		[1, ⵠ[77], ⵠᐃΔΔ, 57, 121, ⵠᐃⲆ],
		[1, ⵠ[77], ᐃᐃΔᐃ, 53, 125, 0],
		[1, ⵠ[77], 5, 62, 131, 0],
		[1, ⵠ[77], 6, 67, 143, 0],
		[1, ⵠ[77], 5, 77, 143, ΔΔᐃ],
		[1, ⵠ[77], ΔⵠΔᐃ, 85, 136, ᐃᐃᐃ],
		[1, ⵠ[77], ΔΔⵠΔᐃ, 87, 147, 0],
		[ⲆᐃΔ, ⵠ[77], 6, 92, 140, 0],
		[ΔⵠΔ, ⵠ[77], ᐃΔᐃΔ, 93, 127, 0],
		[1, ⵠ[77], 5, 93, 106, 0],
		[ⵠΔᐃ, ⵠ[77], Ⲇᐃⵠᐃ, 45, 144, ΔΔᐃ],
		[1, ⵠ[77], 4, 41, 139, ⵠⲆᐃ],
		[ⵠⲆⲆ, ⵠ[77], 4, 54, 138, ⵠⲆΔ],
		[ⵠΔᐃ, ⵠ[77], Ⲇⵠⵠᐃⵠ, 29, 145, 0],
		[ᐃᐃΔ, ⵠ[77], ⵠⵠⲆⵠᐃ, 29, 132, Ⲇᐃⵠ],
		[1, ⵠ[77], ΔΔΔΔ, 35, 127, 0],
		[ⲆᐃΔ, ⵠ[77], 6, 64, 142, ⵠⵠⵠ],
		[ᐃⲆΔ, ⵠ[77], 5, 23, 131, 0],
		[1, ⵠ[77], 5, 9, 134, ⵠᐃⲆ],
		[ᐃᐃΔ, ⵠ[77], ΔΔΔⲆ, ⲆΔⲆΔⵠ, 121, ⵠⵠⵠ],
		[1, ⵠ[77], 4, 26, 121, ⵠᐃⲆ],
		[Δⵠᐃ, ⵠ[77], 35, 58, 150, ⵠⲆΔ],
		[ΔⵠΔ, ⵠ[77], 33, 48, 156, ⵠⵠⵠ],
		[1, ⵠ[77], 33, 25, 158, 0],
		[1, ⵠ[77], 33, 36, 154, 0],
		[ᐃⲆΔ, ⵠ[77], 34, 9, 154, 0],
		[1, ⵠ[77], 34, ΔⲆᐃΔᐃ, 148, ⵠⲆᐃ],
		[1, ⵠ[77], 34, 21, 142, ⵠⲆΔ],
		[1, ⵠ[77], 34, 38, 139, 0],
		[Ⲇⵠᐃ, ⵠ[77], 34, 47, 144, 0],
		[1, ⵠ[77], 34, 68, 142, 0],
		[1, ⵠ[77], 36, 70, 135, ⵠⵠⵠ],
		[ⵠΔᐃ, ⵠ[77], 36, 64, 132, 0],
		[ⵠⲆⲆ, ⵠ[77], 36, 86, 134, ΔΔᐃ],
		[1, ⵠ[77], 36, 90, 141, Ⲇᐃⵠ],
		[1, ⵠ[77], 36, 93, 131, ⵠⲆΔ],
		[1, ⵠ[77], 36, 91, 125, 0],
		[1, ⵠ[77], 36, 76, 123, 0],
		[ⲆᐃΔ, ⵠ[77], 33, 82, 122, ⵠⲆᐃ],
		[ΔⵠΔ, ⵠ[77], 35, 56, 122, ΔⲆⲆ],
		[1, ⵠ[77], 35, 40, 119, ⵠᐃⲆ],
		[Ⲇⵠᐃ, ⵠ[77], 35, ⲆⵠⵠΔᐃ, 112, 0],
		[1, ⵠ[77], 35, 37, 102, 0],
		[1, ⵠ[77], 33, 18, 97, 0],
		[1, ⵠ[77], 34, 10, 83, ⵠⵠⵠ],
		[1, ⵠ[77], 33, ⵠⵠΔᐃⲆ, 73, ΔⲆⲆ],
		[ΔⵠΔ, ⵠ[77], 33, ᐃᐃᐃΔΔ, 60, 0],
		[1, ⵠ[77], 35, 24, 60, ⵠⲆᐃ],
		[1, ⵠ[77], 36, 14, 45, 0],
		[ⵠΔᐃ, ⵠ[77], 36, 21, 42, ᐃᐃᐃ],
		[Δⵠᐃ, ⵠ[77], 35, ⲆᐃⲆΔⵠ, 32, ΔⲆⲆ],
		[ⵠⲆⲆ, ⵠ[77], 33, ᐃΔⵠⵠⲆ, 24, Ⲇᐃⵠ],
		[ᐃᐃΔ, ⵠ[77], 35, 35, 27, 0],
		[1, ⵠ[77], 33, 56, 35, 0],
		[ⲆᐃΔ, ⵠ[77], 36, 53, 36, 0],
		[1, ⵠ[77], 33, 45, 35, 0],
		[Δⵠᐃ, ⵠ[77], 35, 53, 39, 0],
		[1, ⵠ[77], 36, 57, 30, 0],
		[1, ⵠ[77], 33, 86, 108, ⵠⵠⵠ],
		[Δⵠᐃ, ⵠ[77], 33, 68, 112, 0],
		[ⲆᐃΔ, ⵠ[77], 33, 49, 109, Ⲇᐃⵠ],
		[ᐃᐃΔ, ⵠ[77], 33, 46, 95, ⵠᐃⲆ],
		[ᐃⲆΔ, ⵠ[77], 33, 90, 76, Ⲇᐃⵠ],
		[Ⲇⵠᐃ, ⵠ[77], 36, 76, 83, 0],
		[1, ⵠ[77], 36, 70, 72, 0],
		[1, ⵠ[77], 36, 78, 63, ⵠⵠⵠ],
		[1, ⵠ[77], 36, 90, 64, ⵠⲆᐃ],
		[1, ⵠ[77], 36, 60, 70, ΔΔᐃ],
		[1, ⵠ[77], 35, 75, 90, 0],
		[1, ⵠ[77], 35, 81, 58, 0],
		[ⵠΔᐃ, ⵠ[77], 35, 91, 51, 0],
		[Δⵠᐃ, ⵠ[77], 35, 93, 56, ΔⲆⲆ],
		[ⲆᐃΔ, ⵠ[77], 35, 61, 60, ⵠᐃⲆ],
		[1, ⵠ[77], 35, 66, 46, 0],
		[ᐃⲆΔ, ⵠ[77], 33, 90, ⵠⵠΔᐃⲆ, ΔⲆⲆ],
		[ᐃᐃΔ, ⵠ[77], 34, 92, 9, 0],
		[1, ⵠ[77], 35, 75, 39, 0],
		[ⲆᐃΔ, ⵠ[77], 35, 67, 42, ⵠⲆΔ],
		[Ⲇⵠᐃ, ⵠ[77], 35, 93, 37, ⵠⲆΔ],
		[1, ⵠ[77], 36, 89, 28, ΔⲆⲆ],
		[1, ⵠ[77], 36, 42, 61, 0],
		[ⵠⲆⲆ, ⵠ[77], 33, 49, 50, 0],
		[1, ⵠ[77], 33, 44, 75, 0],
		[ᐃⲆΔ, ⵠ[77], 33, 46, 85, ᐃᐃᐃ],
		[Δⵠᐃ, ⵠ[77], 33, 64, 84, ᐃᐃⲆ],
		[1, ⵠ[77], 33, 56, 94, ΔΔᐃ],
		[Δⵠᐃ, ⵠ[77], 33, 25, 90, 0],
		[1, ⵠ[77], 33, 31, 69, 0],
		[1, ⵠ[77], 35, 34, 54, ΔⲆⲆ],
		[Δⵠᐃ, ⵠ[77], 35, 29, 47, ᐃᐃᐃ],
		[Ⲇⵠᐃ, ⵠ[77], 36, 42, 41, 0],
		[Ⲇⵠᐃ, ⵠ[77], 36, 29, 34, ⵠⲆΔ],
		[1, ⵠ[77], 35, 20, 55, 0],
		[1, ⵠ[77], 35, ΔⲆΔⲆᐃ, 52, ᐃᐃⲆ],
		[1, "s", 2, ᐃᐃΔΔⵠ, 171, ᐃᐃΔ],
		[ⵠⲆⲆ, "r", 20, 188, ΔΔᐃ],
		[ⵠⲆⲆ, "r", 21, 188, ΔΔᐃ],
		[ᐃᐃΔ, "r", 22, 188, ⵠᐃⲆ],
		[ᐃⲆΔ, "r", 23, 188, ΔΔᐃ],
		[1, "r", 24, 188, ᐃᐃᐃ],
		[1, "r", 25, 189, 0],
		[ᐃⲆΔ, "r", 24, 189, 0],
		[1, "r", 23, 189, 0],
		[1, "r", 22, 189, ᐃᐃᐃ],
		[ᐃᐃΔ, "r", 21, 189, ᐃᐃᐃ],
		[ᐃⲆΔ, "r", ⲆᐃⲆⵠᐃ, 189, ᐃᐃⲆ],
		[1, "r", 19, 189, 0],
		[1, "r", ᐃΔΔⵠᐃ, 190, ᐃᐃᐃ],
		[1, "r", 19, 191, 0],
		[1, "r", ⲆⵠⲆΔⲆ, 191, ΔΔᐃ],
		[1, "r", 21, 191, ᐃᐃᐃ],
		[ᐃⲆΔ, "r", 22, 191, ⵠⲆΔ],
		[1, "r", 24, 191, 0],
		[1, "r", 23, 191, ⵠⵠⵠ],
		[1, "r", 25, 191, 0],
		[ⲆᐃΔ, "r", 25, 190, ⵠᐃⲆ],
		[1, "r", 24, 190, ΔⲆⲆ],
		[1, "r", 23, 190, ᐃᐃⲆ],
		[Ⲇⵠᐃ, "r", 22, 190, Ⲇᐃⵠ],
		[1, "r", 21, 190, 0],
		[ⵠⲆⲆ, "r", ᐃᐃⲆΔⵠ, 190, 0],
		[1, "r", 26, 190, ᐃᐃⲆ],
		[ⵠⲆⲆ, "r", 26, 191, 0],
		[ⵠⲆⲆ, "r", 24, 193, 0],
		[Δⵠᐃ, "r", 23, 193, ⵠⵠⵠ],
		[ⵠⲆⲆ, "r", 22, 193, ⵠᐃⲆ],
		[ⵠⲆⲆ, "r", 20, 192, 0],
		[ᐃⲆΔ, "r", 21, 192, ⵠᐃⲆ],
		[Δⵠᐃ, "r", 22, 192, Ⲇᐃⵠ],
		[ᐃᐃΔ, "r", 23, 192, 0],
		[1, "r", 24, 192, ⵠⲆᐃ],
		[1, "r", 25, 192, 0],
		[1, "r", 53, 199, 0],
		[Ⲇⵠᐃ, "r", 52, 200, ᐃᐃⲆ],
		[ᐃᐃΔ, "r", 54, 199, 0],
		[ΔⵠΔ, "r", 55, 199, ΔⲆⲆ],
		[Ⲇⵠᐃ, "r", 55, 200, ⵠⵠⵠ],
		[1, "r", 54, 200, 0],
		[ⲆᐃΔ, "r", 53, 200, 0],
		[1, "r", 51, 200, ᐃᐃⲆ],
		[ᐃᐃΔ, "r", 56, 200, ⵠᐃⲆ],
		[1, "r", 55, 201, ⵠⲆᐃ],
		[1, "r", 54, 201, 0],
		[1, "r", 55, 202, 0],
		[1, "r", 54, 203, ᐃᐃⲆ],
		[1, "r", 54, 204, ΔⲆⲆ],
		[Ⲇⵠᐃ, "r", 54, 202, 0],
		[1, "r", 53, 202, ΔΔᐃ],
		[1, "r", 52, 202, 0],
		[1, "r", 53, 201, ΔΔᐃ],
		[ᐃᐃΔ, "r", 52, 201, ΔⲆⲆ],
		[ⵠΔᐃ, "r", 51, 201, ΔⲆⲆ],
		[1, "r", 51, 202, ΔⲆⲆ],
		[Δⵠᐃ, "r", 50, 202, 0],
		[ΔⵠΔ, "r", 50, 201, 0],
		[1, "r", 56, 201, ᐃᐃⲆ],
		[1, "r", 53, 203, ⵠⲆᐃ],
		[1, "r", 52, 203, ⵠᐃⲆ],
		[ⵠⲆⲆ, "r", 51, 203, 0],
		[1, "r", 56, 202, ΔⲆⲆ],
		[ⲆᐃΔ, "r", 55, 203, 0],
		[ᐃⲆΔ, "r", 53, 204, 0],
		[1, "r", 52, 204, ⵠⲆᐃ],
		[1, "r", 55, 204, 0],
		[1, "r", 56, 203, ᐃᐃᐃ],
		[Ⲇⵠᐃ, "r", 56, 244, 0],
		[1, "r", 54, 246, ᐃᐃᐃ],
		[1, "r", 50, 248, 0],
		[1, "r", 48, 248, ΔⲆⲆ],
		[1, "r", 43, 248, ⵠⲆΔ],
		[1, "r", 45, 238, ᐃᐃᐃ],
		[ⵠΔᐃ, "r", 44, 238, ΔⲆⲆ],
		[Δⵠᐃ, "r", 43, 238, 0],
		[1, "r", 46, 238, 0],
		[ⵠⲆⲆ, "r", 47, 238, ⵠⲆᐃ],
		[ᐃᐃΔ, "r", 48, 238, ᐃᐃᐃ],
		[1, "r", 49, 238, 0],
		[1, "r", 50, 238, 0],
		[1, "r", 51, 238, 0],
		[1, "r", 52, 238, ⵠⲆᐃ],
		[1, "r", 53, 238, 0],
		[1, "r", 54, 239, 0],
		[ΔⵠΔ, "r", 53, 240, 0],
		[1, "r", 53, 239, ᐃᐃⲆ],
		[1, "r", 52, 239, 0],
		[Δⵠᐃ, "r", 51, 239, 0],
		[1, "r", 50, 239, ΔⲆⲆ],
		[ᐃⲆΔ, "r", 49, 239, 0],
		[1, "r", 48, 239, 0],
		[1, "r", 47, 239, 0],
		[ⲆᐃΔ, "r", 46, 239, ΔⲆⲆ],
		[1, "r", 45, 239, ᐃᐃⲆ],
		[Ⲇⵠᐃ, "r", 44, 239, 0],
		[ⵠΔᐃ, "r", 43, 239, ⵠⲆᐃ],
		[ᐃⲆΔ, "r", 42, 239, ᐃᐃⲆ],
		[1, "r", 41, 240, 0],
		[1, "r", 42, 240, 0],
		[1, "r", 43, 240, 0],
		[ⲆᐃΔ, "r", 44, 240, ᐃᐃᐃ],
		[ᐃᐃΔ, "r", 45, 240, 0],
		[1, "r", 46, 240, 0],
		[1, "r", 47, 240, ΔⲆⲆ],
		[1, "r", 48, 240, ⵠᐃⲆ],
		[1, "r", 49, 240, 0],
		[Δⵠᐃ, "r", 50, 240, 0],
		[1, "r", 51, 240, 0],
		[1, "r", 52, 240, ᐃᐃᐃ],
		[ΔⵠΔ, "r", 54, 240, 0],
		[Δⵠᐃ, "r", 55, 240, ⵠⵠⵠ],
		[1, "r", 56, 241, 0],
		[1, "r", 55, 241, 0],
		[1, "r", 54, 241, 0],
		[ⵠΔᐃ, "r", 53, 241, Ⲇᐃⵠ],
		[ⵠⲆⲆ, "r", 52, 241, ⵠⵠⵠ],
		[ⲆᐃΔ, "r", 51, 241, ᐃᐃᐃ],
		[1, "r", 49, 241, ᐃᐃᐃ],
		[Δⵠᐃ, "r", 50, 241, 0],
		[ⲆᐃΔ, "r", 48, 241, ⵠⲆΔ],
		[1, "r", 47, 241, 0],
		[1, "r", 46, 241, ᐃᐃⲆ],
		[Ⲇⵠᐃ, "r", 45, 241, ᐃᐃⲆ],
		[ⲆᐃΔ, "r", 44, 241, Ⲇᐃⵠ],
		[1, "r", 43, 241, ΔⲆⲆ],
		[ᐃⲆΔ, "r", 42, 241, ΔΔᐃ],
		[1, "r", 41, 241, 0],
		[ᐃᐃΔ, "r", 40, 242, 0],
		[1, "r", 41, 242, 0],
		[1, "r", 42, 242, 0],
		[ⵠΔᐃ, "r", 43, 242, 0],
		[ⵠⲆⲆ, "r", 44, 242, ΔΔᐃ],
		[1, "r", 45, 242, 0],
		[ᐃᐃΔ, "r", 46, 242, 0],
		[1, "r", 47, 242, 0],
		[1, "r", 48, 242, ᐃᐃⲆ],
		[1, "r", 49, 242, 0],
		[1, "r", 50, 242, 0],
		[Ⲇⵠᐃ, "r", 51, 242, 0],
		[ᐃᐃΔ, "r", 52, 242, ⵠⲆᐃ],
		[1, "r", 53, 242, 0],
		[1, "r", 54, 242, ᐃᐃⲆ],
		[Δⵠᐃ, "r", 55, 242, 0],
		[ᐃᐃΔ, "r", 56, 242, 0],
		[1, "r", 56, 243, 0],
		[1, "r", 55, 243, 0],
		[Ⲇⵠᐃ, "r", 54, 243, 0],
		[Ⲇⵠᐃ, "r", 53, 243, 0],
		[1, "r", 52, 243, 0],
		[Ⲇⵠᐃ, "r", 51, 243, 0],
		[ΔⵠΔ, "r", 50, 243, 0],
		[ⵠⲆⲆ, "r", 49, 243, ⵠⲆΔ],
		[1, "r", 48, 243, ᐃᐃᐃ],
		[ⵠΔᐃ, "r", 47, 243, ⵠⲆᐃ],
		[1, "r", 46, 243, 0],
		[ᐃᐃΔ, "r", 45, 243, ᐃᐃⲆ],
		[1, "r", 44, 243, ᐃᐃᐃ],
		[1, "r", 43, 243, 0],
		[ΔⵠΔ, "r", 42, 243, Ⲇᐃⵠ],
		[1, "r", 41, 243, 0],
		[1, "r", 40, 243, ΔⲆⲆ],
		[1, "r", 40, 244, ᐃᐃᐃ],
		[1, "r", 41, 244, ⵠⲆΔ],
		[ⵠⲆⲆ, "r", 43, 244, 0],
		[ᐃⲆΔ, "r", 44, 244, ᐃᐃⲆ],
		[1, "r", 45, 244, 0],
		[1, "r", 46, 244, ΔⲆⲆ],
		[ᐃᐃΔ, "r", 47, 244, ⵠⵠⵠ],
		[1, "r", 48, 244, 0],
		[1, "r", 49, 244, 0],
		[1, "r", 50, 244, 0],
		[ᐃⲆΔ, "r", 51, 244, ᐃᐃᐃ],
		[ΔⵠΔ, "r", 52, 244, 0],
		[ⵠⲆⲆ, "r", 53, 244, 0],
		[1, "r", 54, 244, 0],
		[ⲆᐃΔ, "r", 55, 244, ⵠⲆᐃ],
		[ⲆᐃΔ, "r", 42, 244, ⵠⲆΔ],
		[ⵠΔᐃ, "r", 40, 245, 0],
		[ⲆᐃΔ, "r", 41, 245, ⵠⲆᐃ],
		[ᐃⲆΔ, "r", 42, 245, ᐃᐃᐃ],
		[ⵠΔᐃ, "r", 43, 245, ⵠⲆΔ],
		[1, "r", 44, 245, 0],
		[1, "r", 45, 245, 0],
		[1, "r", 46, 245, ⵠⲆΔ],
		[1, "r", 47, 245, 0],
		[1, "r", 48, 245, 0],
		[1, "r", 49, 245, 0],
		[ᐃⲆΔ, "r", 50, 245, ⵠᐃⲆ],
		[ⵠΔᐃ, "r", 51, 245, ⵠⲆΔ],
		[1, "r", 52, 246, 0],
		[Ⲇⵠᐃ, "r", 52, 245, 0],
		[1, "r", 53, 245, 0],
		[1, "r", 54, 245, ΔΔᐃ],
		[1, "r", 55, 245, 0],
		[1, "r", 53, 246, 0],
		[1, "r", 51, 246, ᐃᐃᐃ],
		[1, "r", 50, 246, 0],
		[1, "r", 49, 246, ᐃᐃⲆ],
		[1, "r", 48, 246, 0],
		[1, "r", 47, 246, Ⲇᐃⵠ],
		[ⵠΔᐃ, "r", 45, 246, ᐃᐃᐃ],
		[1, "r", 46, 246, ᐃᐃᐃ],
		[1, "r", 44, 246, 0],
		[ⵠⲆⲆ, "r", 43, 246, Ⲇᐃⵠ],
		[ⵠΔᐃ, "r", 42, 246, 0],
		[ᐃⲆΔ, "r", 41, 246, 0],
		[ᐃᐃΔ, "r", 42, 247, 0],
		[1, "r", 43, 247, Ⲇᐃⵠ],
		[ᐃᐃΔ, "r", 44, 247, 0],
		[ΔⵠΔ, "r", 45, 247, ⵠⲆᐃ],
		[Ⲇⵠᐃ, "r", 46, 247, ᐃᐃⲆ],
		[1, "r", 47, 247, 0],
		[ⵠΔᐃ, "r", 48, 247, 0],
		[ⵠⲆⲆ, "r", 50, 247, 0],
		[1, "r", 51, 247, 0],
		[ⵠⲆⲆ, "r", 52, 247, ΔⲆⲆ],
		[Ⲇⵠᐃ, "r", 53, 247, ΔΔᐃ],
		[Δⵠᐃ, "r", 54, 247, Ⲇᐃⵠ],
		[1, "r", 49, 247, ⵠⲆᐃ],
		[1, "r", 49, 248, 0],
		[1, "r", 47, 248, 0],
		[ⵠΔᐃ, "r", 46, 248, ⵠⲆΔ],
		[1, "r", 45, 248, 0],
		[Δⵠᐃ, "r", 51, 248, Ⲇᐃⵠ],
		[1, "r", 55, 246, 1],
		[1, "r", 55, 247, Δⵠᐃ],
		[ΔⵠΔ, "r", 56, 247, ⵠΔᐃ],
		[ⲆᐃΔ, "r", 56, 248, 1],
		[Ⲇⵠᐃ, "r", 95, 270, ᐃᐃΔ],
		[ᐃᐃΔ, "r", 93, 270, 1],
		[ᐃⲆΔ, "r", 94, 270, ᐃⲆΔ],
		[Δⵠᐃ, "r", 95, 271, ⲆᐃΔ],
		[1, "r", 94, 271, Ⲇⵠᐃ],
		[ⵠⲆⲆ, "r", 93, 271, ᐃᐃΔ],
		[1, "r", 94, 282, ⵠⲆⲆ],
		[1, "r", 93, 282, 1],
		[1, "r", 93, 281, 1],
		[ⵠⲆⲆ, "r", 92, 281, 1],
		[1, "r", 92, 280, 1],
		[1, "r", 91, 280, 1],
		[1, "r", 90, 279, 1],
		[1, "r", 95, 275, 1],
		[1, "r", 95, 274, 1],
		[1, "r", 95, 273, 1],
		[ⲆᐃΔ, "r", 95, 272, 1],
		[1, "r", 94, 274, Ⲇⵠᐃ],
		[1, "r", 94, 273, ᐃⲆΔ],
		[ᐃⲆΔ, "r", 94, 272, ΔⵠΔ],
		[1, "r", 93, 272, ΔⵠΔ],
		[1, "r", 93, 273, Ⲇⵠᐃ],
		[1, "r", 93, 274, 1],
		[ᐃⲆΔ, "r", 92, 273, 1],
		[ⵠⲆⲆ, "r", 92, 272, ⵠⲆⲆ],
		[Δⵠᐃ, "r", 92, 270, 1],
		[1, "r", 92, 271, 1],
		[1, "r", 92, 269, ΔⵠΔ],
		[1, "r", 90, 269, 1],
		[ⵠⲆⲆ, "r", 91, 269, ΔⵠΔ],
		[1, "r", 91, 271, 1],
		[1, "r", 91, 270, 1],
		[1, "r", 95, 278, 1],
		[Δⵠᐃ, "r", 95, 277, Ⲇⵠᐃ],
		[1, "r", 95, 276, 1],
		[ⲆᐃΔ, "r", 94, 276, ΔⵠΔ],
		[1, "r", 94, 275, 1],
		[ᐃⲆΔ, "r", 93, 275, 1],
		[1, "r", 92, 274, ᐃᐃΔ],
		[ᐃᐃΔ, "r", 92, 275, ᐃⲆΔ],
		[1, "r", 91, 275, ΔⵠΔ],
		[1, "r", 90, 275, ΔⵠΔ],
		[1, "r", 89, 274, ΔⵠΔ],
		[1, "r", 90, 274, ΔⵠΔ],
		[1, "r", 89, 275, 1],
		[1, "r", 88, 274, 1],
		[ⵠΔᐃ, "r", 88, 273, ⲆᐃΔ],
		[1, "r", 86, 272, 1],
		[1, "r", 85, 271, 1],
		[1, "r", 86, 271, 1],
		[1, "r", 87, 272, 1],
		[ΔⵠΔ, "r", 55, 248, ᐃᐃΔ],
		[Δⵠᐃ, "r", 54, 248, ⵠΔᐃ],
		[Δⵠᐃ, "r", 56, 249, 1],
		[ᐃᐃΔ, "r", 55, 249, ᐃᐃΔ],
		[1, "r", 55, 250, 1],
		[ⵠΔᐃ, "r", 56, 250, ⵠⲆⲆ],
		[ⵠⲆⲆ, "r", 57, 250, 1],
		[ⵠΔᐃ, "r", 57, 249, Δⵠᐃ],
		[Δⵠᐃ, "r", 59, 250, 1],
		[1, "r", 58, 250, 1],
		[ᐃⲆΔ, "r", 60, 250, 1],
		[1, "r", 61, 251, ᐃⲆΔ],
		[ⲆᐃΔ, "r", 60, 251, Δⵠᐃ],
		[ⲆᐃΔ, "r", 62, 251, ᐃⲆΔ],
		[1, "r", 62, 252, 1],
		[ⵠΔᐃ, "r", 63, 252, ᐃᐃΔ],
		[ᐃⲆΔ, "r", 58, 251, ⲆᐃΔ],
		[ⲆᐃΔ, "r", 57, 251, ᐃᐃΔ],
		[Δⵠᐃ, "r", 56, 251, ᐃⲆΔ],
		[ᐃⲆΔ, "r", 58, 252, 1],
		[1, "r", 57, 252, ⲆᐃΔ],
		[Δⵠᐃ, "r", 57, 253, 1],
		[Ⲇⵠᐃ, "r", 58, 253, ⵠΔᐃ],
		[1, "r", 58, 254, 1],
		[1, "r", 59, ᐃᐃΔᐃⵠΔⲆ, 1],
		[ⵠⲆⲆ, "r", 58, ΔⵠΔⲆΔΔⲆ, 1],
		[1, "r", 57, 254, Δⵠᐃ],
		[ⲆᐃΔ, "r", 56, 252, ⵠΔᐃ],
		[ᐃⲆΔ, "r", 55, 251, ⵠⲆⲆ],
		[ⲆᐃΔ, "r", 60, 255, ⲆᐃΔ],
		[1, "r", 61, ⵠⵠⲆⲆᐃ, ᐃᐃΔ],
		[ΔⵠΔ, "r", 61, 256, Ⲇⵠᐃ],
		[Δⵠᐃ, "r", 60, ⲆⵠΔⵠᐃⵠⲆ, 1],
		[1, "r", 62, 256, ᐃⲆΔ],
		[1, "r", 62, 257, ⵠΔᐃ],
		[1, "r", 61, 257, 1],
		[Δⵠᐃ, "r", 64, 253, 1],
		[1, "r", 64, 254, ⲆᐃΔ],
		[1, "r", 65, 254, 1],
		[1, "r", 61, 250, ΔⵠΔ],
		[ᐃⲆΔ, "r", 64, 252, 1],
		[1, "r", 65, 253, 1],
		[1, "r", 66, 254, ⵠΔᐃ],
		[1, "r", 65, 255, 1],
		[1, "r", 64, 255, ᐃᐃΔ],
		[1, "r", 64, ᐃᐃⵠᐃⲆᐃᐃ, Δⵠᐃ],
		[ⲆᐃΔ, "r", 65, 256, 1],
		[Ⲇⵠᐃ, "r", 65, 257, ⵠΔᐃ],
		[1, "r", 64, 257, 1],
		[1, "r", 63, 257, 1],
		[1, "r", 62, 258, ᐃᐃΔ],
		[Ⲇⵠᐃ, "r", 63, 258, 1],
		[1, "r", 64, 258, ⵠΔᐃ],
		[1, "r", 66, ΔᐃᐃⵠΔΔΔ, Ⲇⵠᐃ],
		[ᐃⲆΔ, "r", 66, ᐃᐃⵠᐃⲆᐃᐃ, 1],
		[1, "r", 66, 257, ⲆᐃΔ],
		[1, "r", 66, 258, 1],
		[1, "r", 65, 258, ⵠⲆⲆ],
		[Δⵠᐃ, "r", 67, 258, ΔⵠΔ],
		[1, "r", 67, 257, 1],
		[1, "r", 67, 259, ΔⵠΔ],
		[1, "r", 66, 259, 1],
		[ΔⵠΔ, "r", 65, 259, 1],
		[Ⲇⵠᐃ, "r", 56, 246, 1],
		[Ⲇⵠᐃ, "r", 56, 245, 1],
		[1, "r", 68, 258, 1],
		[1, "r", 68, 259, ᐃᐃΔ],
		[1, "r", 68, 260, 1],
		[ᐃᐃΔ, "r", 69, 260, ΔⵠΔ],
		[ᐃᐃΔ, "r", 69, 261, 1],
		[1, "r", 70, 261, ᐃᐃΔ],
		[1, "r", 71, 261, Ⲇⵠᐃ],
		[Ⲇⵠᐃ, "r", 67, 260, 1],
		[1, "r", 89, 269, 1],
		[1, "r", 89, 268, ΔⵠΔ],
		[1, "r", 90, 268, ᐃⲆΔ],
		[ᐃᐃΔ, "r", 82, 267, 1],
		[1, "r", 83, 267, 1],
		[ᐃᐃΔ, "r", 80, 266, 1],
		[ΔⵠΔ, "r", 81, 266, ΔⵠΔ],
		[1, "r", 81, 267, 1],
		[1, "r", 79, 266, 1],
		[1, "r", 78, 265, Δⵠᐃ],
		[ΔⵠΔ, "r", 77, 265, Δⵠᐃ],
		[ᐃᐃΔ, "r", 76, 264, 1],
		[ⲆᐃΔ, "r", 75, 264, 1],
		[1, "r", 75, 263, 1],
		[ⵠⲆⲆ, "r", 74, 263, 1],
		[1, "r", 74, 262, 1],
		[ᐃⲆΔ, "r", 72, 262, ᐃᐃΔ],
		[ᐃⲆΔ, "r", 73, 262, ⵠⲆⲆ],
		[1, "r", 71, 262, Ⲇⵠᐃ],
		[ⵠⲆⲆ, "r", 85, 270, ΔⵠΔ],
		[ⲆᐃΔ, "r", 84, 270, 1],
		[ⵠⲆⲆ, "r", 84, 269, 1],
		[1, "r", 83, 269, 1],
		[1, "r", 82, 269, 1],
		[ⵠΔᐃ, "r", 81, 269, 1],
		[1, "r", 81, 268, 1],
		[ⵠⲆⲆ, "r", 82, 268, 1],
		[Δⵠᐃ, "r", 83, 268, Ⲇⵠᐃ],
		[Δⵠᐃ, "r", 80, 268, 1],
		[Ⲇⵠᐃ, "r", 80, 267, Δⵠᐃ],
		[1, "r", 79, 267, 1],
		[1, "r", 78, 266, 1],
		[1, "r", 76, 265, 1],
		[1, "r", 75, 262, ⵠⲆⲆ],
		[1, "r", 90, 280, 1],
		[1, "r", 89, 280, 1],
		[1, "r", 89, 279, Δⵠᐃ],
		[Δⵠᐃ, "r", 88, 279, ᐃⲆΔ],
		[Δⵠᐃ, "r", 88, 278, ᐃⲆΔ],
		[ᐃᐃΔ, "r", 87, 277, Δⵠᐃ],
		[1, "r", 86, 276, Ⲇⵠᐃ],
		[1, "r", 86, 275, ⵠⲆⲆ],
		[ΔⵠΔ, "r", 86, 274, 1],
		[1, "r", 86, 273, 1],
		[1, "r", 85, 273, 1],
		[1, "r", 85, 272, 1],
		[1, "r", 85, 274, 1],
		[1, "r", 86, 277, ᐃᐃΔ],
		[Δⵠᐃ, "r", 87, 278, 1],
		[1, "r", 84, 271, 1],
		[1, "r", 83, 270, 1],
		[1, "r", 87, 273, 1],
		[ᐃⲆΔ, "r", 91, 274, 1],
		[1, "r", 89, 273, ⵠⲆⲆ],
		[ⲆᐃΔ, "r", 88, 272, 1],
		[ⵠΔᐃ, "r", 91, 281, 1],
		[1, "r", 92, 282, 1],
		[ⲆᐃΔ, "r", 88, 280, 1],
		[ⲆᐃΔ, "r", 87, 279, 1],
		[ᐃⲆΔ, "r", 85, 275, ⵠΔᐃ],
		[1, "r", 84, 273, Δⵠᐃ],
		[ᐃⲆΔ, "r", 84, 272, 1],
		[1, "r", 83, 271, ⵠⲆⲆ],
		[1, "r", 82, 270, ⵠΔᐃ],
		[Ⲇⵠᐃ, "r", 84, 267, ⵠⲆΔ],
		[Ⲇⵠᐃ, "r", 85, 267, 0],
		[ⵠΔᐃ, "r", 76, 262, 0],
		[1, "r", 77, 262, 0],
		[Ⲇⵠᐃ, "r", 88, 268, 0],
		[1, "r", 78, 262, 0],
		[1, "r", 79, 262, 0],
		[ᐃⲆΔ, "r", 80, 262, ΔΔᐃ],
		[1, "r", 80, 263, 0],
		[1, "r", 81, 263, 0],
		[ⵠΔᐃ, "r", 82, 263, ΔΔᐃ],
		[1, "r", 83, 263, 0],
		[1, "r", 84, 263, Ⲇᐃⵠ],
		[1, "r", 85, 263, ᐃᐃⲆ],
		[Δⵠᐃ, "r", 88, 262, ΔⲆⲆ],
		[ⲆᐃΔ, "r", 89, 262, 0],
		[1, "r", 90, 262, ΔⲆⲆ],
		[1, "r", 87, 262, 0],
		[1, "r", 86, 262, 0],
		[ᐃᐃΔ, "r", 86, 263, 0],
		[1, "r", 87, 263, ΔΔᐃ],
		[ᐃᐃΔ, "r", 91, 262, 0],
		[1, "r", 95, 262, 0],
		[1, "r", 94, 262, 0],
		[ᐃᐃΔ, "r", 86, 267, ⵠⲆᐃ],
		[1, "r", 87, 267, 0],
		[1, "r", 87, 268, ᐃᐃⲆ],
		[1, "r", 86, 268, ⵠⲆΔ],
		[ⵠΔᐃ, "r", 74, 189, ⵠⵠⵠ],
		[ᐃᐃΔ, "r", 75, 189, 0],
		[Δⵠᐃ, "r", 76, 189, ΔⲆⲆ],
		[ᐃᐃΔ, "r", 77, 189, ᐃᐃᐃ],
		[1, "r", 78, 190, ⵠⵠⵠ],
		[1, "r", 77, 190, 0],
		[1, "r", 75, 190, 0],
		[ᐃᐃΔ, "r", 76, 190, ᐃᐃⲆ],
		[1, "r", 74, 190, 0],
		[ⲆᐃΔ, "r", 73, 190, 0],
		[ⲆᐃΔ, "r", 78, 191, ΔⲆⲆ],
		[1, "r", 76, 191, ᐃᐃᐃ],
		[1, "r", 77, 191, 0],
		[ⵠⲆⲆ, "r", 75, 191, ΔΔᐃ],
		[ⵠⲆⲆ, "r", 74, 191, ΔⲆⲆ],
		[1, "r", 78, 192, 0],
		[ⵠⲆⲆ, "r", 77, 192, ΔΔᐃ],
		[Ⲇⵠᐃ, "r", 76, 192, ⵠⲆᐃ],
		[1, "r", 75, 192, 0],
		[1, "r", 74, 192, ⵠⵠⵠ],
		[ΔⵠΔ, "r", 73, 191, ΔΔᐃ],
		[ⵠⲆⲆ, "f", 1, 96, 22, 1],
		[1, "s", 1, 97, 22, 1],
		[ᐃᐃΔ, "f", ⵠⲆⲆ, 98, 22, 1],
		[1, "s", 0, 99, 22, 1],
		[1, "s", ᐃᐃΔ, 100, 21, Ⲇⵠᐃ],
		[ⲆᐃΔ, "s", Ⲇⵠᐃ, 96, 49, 1],
		[ⲆᐃΔ, "s", 1, ⲆⵠⲆΔⵠⲆⲆ, 50, ᐃⲆΔ],
		[1, "s", 0, 99, 49, 1],
		[1, "s", 0, 97, 49, ⵠⲆⲆ],
		[ⲆᐃΔ, "f", 1, 98, 49, 1],
		[Ⲇⵠᐃ, "r", 70, 218, ΔΔᐃ],
		[1, "r", 71, 218, 0],
		[1, "r", 72, 218, 0],
		[1, "r", 73, 218, 0],
		[1, "r", 74, 219, ⵠⲆᐃ],
		[1, "r", 73, 219, ⵠᐃⲆ],
		[1, "r", 72, 219, 0],
		[1, "r", 71, 219, 0],
		[ⵠⲆⲆ, "r", 70, 219, Ⲇᐃⵠ],
		[1, "r", 73, 220, 0],
		[ⵠⲆⲆ, "r", 72, 220, 0],
		[ᐃᐃΔ, "r", 71, 220, ΔΔᐃ],
		[ΔⵠΔ, "r", 72, 221, 0],
		[ᐃⲆΔ, "r", 71, 221, ΔΔᐃ],
		[ΔⵠΔ, "r", 70, 221, ⵠᐃⲆ],
		[ⵠΔᐃ, "r", 69, 221, ⵠⲆᐃ],
		[ᐃⲆΔ, "r", 68, 221, ΔΔᐃ],
		[ΔⵠΔ, "r", 70, 220, ΔⲆⲆ],
		[ᐃᐃΔ, "r", 69, 220, 0],
		[1, "r", 69, 219, ΔΔᐃ],
		[ᐃᐃΔ, "r", 68, 220, 0],
		[1, "r", 73, 221, ΔΔᐃ],
		[ⲆᐃΔ, "r", 73, 222, 0],
		[ⵠⲆⲆ, "r", 71, 222, 0],
		[1, "r", 72, 222, ⵠⲆᐃ],
		[1, "r", 74, 221, 0],
		[1, "r", 74, 220, ᐃᐃⲆ],
		[Ⲇⵠᐃ, "r", 75, 220, 0],
		[ΔⵠΔ, "r", 75, 221, ΔⲆⲆ],
		[ᐃᐃΔ, "r", 70, 222, ⵠⵠⵠ],
		[1, "r", 69, 222, 0],
		[ᐃᐃΔ, "r", 29, 217, 0],
		[Δⵠᐃ, "r", 30, 217, 0],
		[1, "r", 31, 217, ⵠᐃⲆ],
		[ᐃᐃΔ, "r", 32, 217, 0],
		[1, "r", 31, 219, 0],
		[1, "r", 30, 219, 0],
		[1, "r", 29, 219, 0],
		[ⵠΔᐃ, "r", 27, 219, ΔΔᐃ],
		[1, "r", 25, 219, ᐃᐃᐃ],
		[1, "r", 26, 219, ΔΔᐃ],
		[1, "r", 28, 219, Ⲇᐃⵠ],
		[ΔⵠΔ, "r", 26, 218, ⵠⵠⵠ],
		[1, "r", 27, 218, ⵠⵠⵠ],
		[ⵠΔᐃ, "r", 28, 218, 0],
		[ⲆᐃΔ, "r", 29, 218, ΔⲆⲆ],
		[1, "r", 30, 218, ᐃᐃᐃ],
		[1, "r", 28, 217, 0],
		[ⲆᐃΔ, "r", 26, 217, 0],
		[1, "r", 27, 217, 0],
		[1, "r", 28, 216, ΔⲆⲆ],
		[ᐃⲆΔ, "r", 29, 216, ⵠᐃⲆ],
		[Δⵠᐃ, "r", 30, 216, 0],
		[ΔⵠΔ, "r", 31, 218, ᐃᐃⲆ],
		[ᐃⲆΔ, "r", 32, 218, 0],
		[1, "r", 31, 216, ⵠⵠⵠ],
		[ᐃⲆΔ, "r", 31, 221, ⵠⲆᐃ],
		[1, "r", 31, 220, 0],
		[1, "r", 30, 220, ⵠᐃⲆ],
		[ΔⵠΔ, "r", 29, 220, ᐃᐃᐃ],
		[1, "r", 28, 220, ⵠⵠⵠ],
		[ᐃⲆΔ, "r", 27, 220, ΔΔᐃ],
		[1, "r", 26, 220, 0],
		[1, "r", 25, 218, ⵠⲆΔ],
		[Δⵠᐃ, "r", 27, 221, 0],
		[ᐃⲆΔ, "r", 28, 221, 0],
		[1, "r", 29, 221, 0],
		[ᐃᐃΔ, "r", 30, 221, ⵠⵠⵠ],
		[1, "r", 32, 220, ΔΔᐃ],
		[1, "r", 32, 219, ⵠⵠⵠ],
		[ΔⵠΔ, "r", 33, 218, ⵠᐃⲆ],
		[ⵠⲆⲆ, "r", 33, 219, 0],
		[1, "r", 75, 238, ΔⲆⲆ],
		[1, "r", 76, 238, 0],
		[Ⲇⵠᐃ, "r", 77, 239, ΔⲆⲆ],
		[1, "r", 76, 239, 0],
		[1, "r", 75, 239, 0],
		[ᐃᐃΔ, "r", 74, 239, 0],
		[1, "r", 76, 240, ᐃᐃⲆ],
		[ⲆᐃΔ, "r", 77, 240, Ⲇᐃⵠ],
		[1, "r", 78, 240, ΔⲆⲆ],
		[1, "r", 77, 241, ΔΔᐃ],
		[1, "r", 76, 241, ⵠᐃⲆ],
		[1, "r", 75, 241, ΔⲆⲆ],
		[ᐃⲆΔ, "r", 75, 240, 0],
		[Δⵠᐃ, "r", 74, 240, ΔⲆⲆ],
		[1, "r", 78, 239, 0],
		[1, "r", 77, 238, Ⲇᐃⵠ],
		[1, "r", 18, 253, ⵠⲆΔ],
		[ⵠⲆⲆ, "r", ᐃᐃⲆⵠᐃ, 252, 0],
		[1, "r", ⲆᐃⲆⵠᐃ, 252, 0],
		[1, "r", 21, 253, ΔΔᐃ],
		[ⲆᐃΔ, "r", 23, 254, 0],
		[ⵠⲆⲆ, "r", ⵠᐃᐃⵠΔ, 254, 0],
		[1, "r", ⵠⵠΔᐃⲆ, 254, ⵠⵠⵠ],
		[1, "r", 22, 254, ⵠⲆΔ],
		[1, "r", 18, 254, 0],
		[ⲆᐃΔ, "r", 19, 253, 0],
		[ᐃᐃΔ, "r", 20, 253, 0],
		[Δⵠᐃ, "r", 21, 254, 0],
		[1, "r", 22, 253, 0],
		[ⲆᐃΔ, "r", 21, 255, ⵠⲆᐃ],
		[ᐃᐃΔ, "r", 20, 255, ⵠⵠⵠ],
		[ᐃᐃΔ, "r", ⵠⲆⵠᐃΔ, 255, ΔΔᐃ],
		[1, "r", 18, 255, ⵠⲆᐃ],
		[ⲆᐃΔ, "r", ⲆⵠᐃⲆⵠᐃⵠ, ΔⵠΔⲆΔΔⲆ, 0],
		[1, "r", ⲆⵠⵠⲆΔ, 254, 0],
		[ΔⵠΔ, "r", 22, ⵠⵠⲆⲆᐃ, 0],
		[Δⵠᐃ, "r", ⲆᐃΔⲆΔ, 256, ᐃᐃⲆ],
		[1, "r", 20, 256, ⵠᐃⲆ],
		[ⵠⲆⲆ, "r", 21, ᐃⲆⵠΔΔⲆⵠ, ⵠⲆΔ],
		[ⲆᐃΔ, "r", 39, 270, ΔⲆⲆ],
		[ⵠΔᐃ, "r", 40, 270, 0],
		[Ⲇⵠᐃ, "r", 41, 270, 0],
		[ⲆᐃΔ, "r", 43, 270, ⵠᐃⲆ],
		[Δⵠᐃ, "r", 44, 270, 0],
		[ⲆᐃΔ, "r", 46, 270, Ⲇᐃⵠ],
		[ⲆᐃΔ, "r", 42, 270, ΔΔᐃ],
		[1, "r", 45, 270, ⵠᐃⲆ],
		[1, "r", 44, 269, ⵠⵠⵠ],
		[1, "r", 43, 269, ⵠⲆΔ],
		[Ⲇⵠᐃ, "r", 42, 269, 0],
		[1, "r", 40, 269, 0],
		[ΔⵠΔ, "r", 41, 269, 0],
		[ᐃᐃΔ, "r", 45, 271, 0],
		[1, "r", 44, 271, ΔⲆⲆ],
		[ΔⵠΔ, "r", 43, 271, ⵠⲆᐃ],
		[Δⵠᐃ, "r", 42, 271, ΔⲆⲆ],
		[ΔⵠΔ, "r", 41, 271, 0],
		[1, "r", 40, 271, 0],
		[1, "r", 39, 271, ΔΔᐃ],
		[1, "r", 46, 271, 0],
		[ᐃᐃΔ, "r", 45, 272, 0],
		[ᐃᐃΔ, "r", 44, 272, 0],
		[ⲆᐃΔ, "r", 43, 272, 0],
		[ᐃᐃΔ, "r", 42, 272, 0],
		[ⵠΔᐃ, "r", 19, 284, ⵠᐃⲆ],
		[1, "r", ⲆⵠⲆΔⲆ, 284, ⵠⵠⵠ],
		[1, "r", 21, 285, 0],
		[1, "r", 22, 285, ᐃᐃᐃ],
		[ΔⵠΔ, "r", 23, 286, 0],
		[1, "r", 22, 288, 0],
		[1, "r", ᐃⲆᐃⵠⲆ, 288, ⵠⵠⵠ],
		[ⵠΔᐃ, "r", 18, 288, ⵠⵠⵠ],
		[1, "r", ⲆⵠⵠⲆΔ, 287, 0],
		[ΔⵠΔ, "r", 16, 287, ⵠⲆᐃ],
		[1, "r", 16, 286, ΔⲆⲆ],
		[1, "r", 17, 286, ΔΔᐃ],
		[ᐃⲆΔ, "r", ΔΔΔΔᐃ, 286, 0],
		[ΔⵠΔ, "r", 19, 286, 0],
		[1, "r", ⵠᐃⲆⵠⲆ, 286, ⵠⲆΔ],
		[1, "r", 21, 286, ⵠᐃⲆ],
		[1, "r", 22, 286, ᐃᐃᐃ],
		[Δⵠᐃ, "r", 20, 285, ᐃᐃⲆ],
		[ⵠⲆⲆ, "r", ΔⲆᐃⵠⵠΔᐃ, 285, ⵠⵠⵠ],
		[Δⵠᐃ, "r", 18, 285, ⵠⲆΔ],
		[ΔⵠΔ, "r", 17, 285, ΔΔᐃ],
		[1, "r", 19, 287, ⵠⲆΔ],
		[1, "r", ⵠᐃⵠᐃΔ, 287, 0],
		[ΔⵠΔ, "r", 20, 287, ⵠᐃⲆ],
		[ⵠⲆⲆ, "r", 21, 287, ⵠⵠⵠ],
		[ΔⵠΔ, "r", 22, 287, ⵠⵠⵠ],
		[ᐃⲆΔ, "r", 23, 287, 0],
		[ⵠΔᐃ, "r", 21, 288, 0],
		[1, "r", 19, 288, 0],
		[1, "r", 17, 288, 0],
		[1, "r", 19, 289, 0],
		[1, "r", 21, 289, 0],
		[1, "r", 22, 289, ΔΔᐃ],
		[1, "r", ⵠΔᐃⲆⵠ, 289, ⵠⵠⵠ],
		[ⵠΔᐃ, "r", 23, 288, 0],
		[1, "r", 24, 287, 0],
		[1, "r", 24, 286, 0],
		[ΔⵠΔ, "r", 23, 285, 0],
		[Δⵠᐃ, "r", 66, 286, ⵠᐃⲆ],
		[1, "r", 64, 287, 0],
		[1, "r", 63, 287, 0],
		[1, "r", 60, 287, 0],
		[1, "r", 59, 285, 0],
		[1, "r", 58, 284, ΔΔᐃ],
		[1, "r", 59, 283, Ⲇᐃⵠ],
		[ⲆᐃΔ, "r", 65, 283, ΔΔᐃ],
		[1, "r", 64, 283, 0],
		[ᐃᐃΔ, "r", 63, 283, ⵠᐃⲆ],
		[ⵠΔᐃ, "r", 62, 283, 0],
		[ΔⵠΔ, "r", 61, 283, 0],
		[1, "r", 60, 283, ᐃᐃᐃ],
		[1, "r", 59, 284, ΔΔᐃ],
		[1, "r", 58, 285, 0],
		[ⲆᐃΔ, "r", 60, 286, ⵠⲆΔ],
		[1, "r", 59, 286, 0],
		[1, "r", 61, 287, 0],
		[ᐃⲆΔ, "r", 62, 287, 0],
		[ᐃᐃΔ, "r", 61, 286, 0],
		[1, "r", 62, 286, ⵠᐃⲆ],
		[ⵠΔᐃ, "r", 63, 286, ΔΔᐃ],
		[ⲆᐃΔ, "r", 64, 286, ᐃᐃᐃ],
		[ⵠⲆⲆ, "r", 65, 286, 0],
		[1, "r", 67, 285, 0],
		[1, "r", 66, 285, 0],
		[ⵠΔᐃ, "r", 65, 285, 0],
		[Δⵠᐃ, "r", 64, 285, 0],
		[1, "r", 63, 285, ⵠⲆΔ],
		[ⵠΔᐃ, "r", 62, 285, ΔⲆⲆ],
		[1, "r", 61, 285, 0],
		[1, "r", 60, 285, 0],
		[ᐃⲆΔ, "r", 60, 284, ᐃᐃᐃ],
		[1, "r", 61, 284, ΔΔᐃ],
		[1, "r", 62, 284, 0],
		[1, "r", 63, 284, ⵠⲆᐃ],
		[ΔⵠΔ, "r", 64, 284, ⵠⵠⵠ],
		[ᐃⲆΔ, "r", 65, 284, 0],
		[1, "r", 66, 284, ⵠⵠⵠ],
		[ⵠΔᐃ, "r", 65, 287, ΔⲆⲆ],
		[1, "r", 67, 286, ΔΔᐃ],
		[ⵠΔᐃ, "p", ⵠⲆΔ, 13, 189, ⵠⲆⲆ],
		[ᐃⲆΔ, "p", 0, 32, 184, 1],
		[ⲆᐃΔ, "p", ΔΔᐃ, 47, 191, 1],
		[1, "p", ΔΔᐃ, 64, 184, 1],
		[1, "p", 0, 84, 192, 1],
		[1, "p", 0, 78, 207, 1],
		[Δⵠᐃ, "p", ⵠⲆᐃ, 58, 216, 1],
		[Ⲇⵠᐃ, "p", ⵠᐃⲆ, 41, 211, 1],
		[Ⲇⵠᐃ, "p", 0, 18, 211, 1],
		[Ⲇⵠᐃ, "p", 0, 14, 230, Ⲇⵠᐃ],
		[ⵠΔᐃ, "p", ⵠⲆᐃ, 29, 237, 1],
		[ⵠΔᐃ, "p", 0, 50, 230, 1],
		[ⲆᐃΔ, "p", 0, 78, 241, 1],
		[ᐃⲆΔ, "p", ᐃᐃᐃ, 74, ⲆⲆⲆᐃⲆᐃⵠ, Δⵠᐃ],
		[1, "p", ⵠⲆΔ, 68, 266, Δⵠᐃ],
		[ᐃᐃΔ, "p", 0, 48, 259, 1],
		[ⲆᐃΔ, "p", 0, 31, 263, 1],
		[1, "p", 0, 18, 274, Δⵠᐃ],
		[ᐃⲆΔ, "p", 0, 33, 283, ᐃᐃΔ],
		[Δⵠᐃ, "p", ᐃᐃᐃ, 66, 287, 1],
		[Ⲇⵠᐃ, "p", ᐃᐃⲆ, 82, 291, Ⲇⵠᐃ],
		[1, "p", ⵠⵠⵠ, ᐃⵠⲆⲆΔΔᐃ, 295, ⵠΔᐃ],
		[1, "p", 0, 45, 294, ᐃⲆΔ],
		[1, "p", 0, 18, 252, 1],
		[ⵠΔᐃ, "p", Ⲇᐃⵠ, 79, 227, 1],
		[ⵠⲆⲆ, "p", ⵠⵠⵠ, 32, 200, Ⲇⵠᐃ],
		[ᐃⲆΔ, "p", 0, 64, 200, 1],
		[ⲆᐃΔ, "s", 0, 21, 193, 1],
		[1, "s", 1, 18, 189, ᐃᐃΔ],
		[1, "s", 2, 26, 189, ᐃᐃΔ],
		[1, "b", ⲆᐃΔ, 15, 181, 0],
		[1, "b", ᐃᐃⲆⲆ, ᐃⲆᐃⲆⵠ, 190, ᐃᐃⲆ],
		[1, "b", 2, 29, 193, 0],
		[1, "t", ᐃⲆᐃΔ, 16, 182, ⵠⵠⵠ],
		[1, "t", ᐃⵠΔⵠ, 13, 195, 0],
		[1, "t", 4, ᐃΔᐃᐃⲆ, 183, Ⲇᐃⵠ],
		[ⵠΔᐃ, "t", ⵠⵠᐃᐃ, ΔⵠⵠᐃⲆ, 184, ⵠⲆᐃ],
		[1, "t", 5, 23, 182, 0],
		[ⵠⲆⲆ, "t", 4, 30, 187, ᐃᐃᐃ],
		[1, "t", 1, 26, 192, 0],
		[ⵠΔᐃ, "b", 1, 25, 188, Ⲇᐃⵠ],
		[ⵠΔᐃ, "s", ⲆᐃΔ, 24, 181, 1],
		[ᐃᐃΔ, "t", ΔⲆⵠᐃ, 33, 183, 0],
		[1, "b", 1, 36, 189, 0],
		[ⲆᐃΔ, "t", 2, 35, 190, 0],
		[ΔⵠΔ, "b", ΔⲆⵠᐃ, ΔΔⵠⲆⲆ, 200, 0],
		[1, "s", ΔΔᐃ, 28, 194, 1],
		[1, "s", 1, 32, 196, 1],
		[1, "s", 1, 36, 183, ⵠΔᐃ],
		[1, "s", ᐃᐃᐃⵠ, 38, 184, Δⵠᐃ],
		[ᐃᐃΔ, "s", 2, ⲆⲆⵠⲆⵠ, 192, 1],
		[Ⲇⵠᐃ, "s", ᐃᐃⲆⲆ, ΔⲆⵠΔᐃ, 183, ᐃⲆΔ],
		[ᐃᐃΔ, "s", Ⲇⵠᐃ, 15, 199, ΔⵠΔ],
		[ΔⵠΔ, "b", ΔⲆⲆ, ⲆᐃᐃⲆᐃ, 202, 0],
		[1, "t", 2, 13, 203, 0],
		[ⵠΔᐃ, "t", 4, ᐃⲆᐃⵠⲆ, 200, ΔΔᐃ],
		[1, "t", ⵠⲆⲆⵠ, ΔⵠⲆⲆⲆ, 194, Ⲇᐃⵠ],
		[1, "t", ⲆⵠΔΔ, 15, 205, ΔⲆⲆ],
		[ⵠⲆⲆ, "t", ⲆⵠΔΔ, 29, 200, 0],
		[1, "t", 3, 28, 201, 0],
		[1, "s", 2, 25, 199, 1],
		[ᐃᐃΔ, "s", 1, 22, 204, 1],
		[1, "g", 2, 25, 205, 1],
		[1, "b", 1, 27, 216, ᐃᐃⲆ],
		[Δⵠᐃ, "s", ⵠⲆⲆ, 25, 217, 1],
		[1, "s", Δⵠᐃ, 33, 217, 1],
		[1, "s", 2, 35, 215, 1],
		[Ⲇⵠᐃ, "s", 0, 32, 221, Δⵠᐃ],
		[Δⵠᐃ, "t", ᐃᐃᐃⵠ, 31, 222, 0],
		[1, "t", 4, 26, 221, Ⲇᐃⵠ],
		[ⲆᐃΔ, "b", ⲆΔᐃⲆ, 27, 222, 0],
		[ᐃⲆΔ, "b", 0, ⲆⲆᐃⲆⵠⲆΔ, 217, 0],
		[1, "t", 3, 18, 216, ᐃᐃᐃ],
		[ᐃⲆΔ, "t", Ⲇⵠⵠⵠ, 13, 215, 0],
		[ᐃⲆΔ, "t", ⲆⲆᐃᐃ, 30, 213, ⵠⲆᐃ],
		[ΔⵠΔ, "t", ᐃⵠᐃⲆ, 24, 208, ΔⲆⲆ],
		[ⵠⲆⲆ, "s", 1, 12, 216, 1],
		[1, "s", ᐃᐃⲆⲆ, 11, 210, ᐃᐃΔ],
		[ᐃᐃΔ, "s", ΔΔⲆᐃ, 34, 223, Ⲇⵠᐃ],
		[ΔⵠΔ, "b", ⵠⵠⵠᐃ, 36, 218, 0],
		[ⲆᐃΔ, "t", 4, 40, 206, 0],
		[1, "t", 5, 35, 203, 0],
		[ᐃⲆΔ, "t", 3, 39, 206, ⵠⲆΔ],
		[1, "b", ⲆᐃΔ, 34, 204, ΔΔᐃ],
		[ⲆᐃΔ, "s", ⵠⲆⲆ, 33, 206, ᐃⲆΔ],
		[ᐃⲆΔ, "s", 1, 42, 203, ΔⵠΔ],
		[ΔⵠΔ, "s", 0, 47, 196, Δⵠᐃ],
		[1, "b", 2, 40, 196, ᐃᐃⲆ],
		[1, "t", ⵠᐃΔⲆ, 39, 197, ⵠⵠⵠ],
		[1, "t", ⲆⵠΔΔ, 44, 187, ⵠⵠⵠ],
		[1, "b", ⵠΔᐃ, 46, 181, 0],
		[1, "t", ⲆⲆΔⲆ, 47, 182, 0],
		[1, "b", 0, 57, 182, 0],
		[ΔⵠΔ, "b", Δⵠⵠᐃ, 56, 183, 0],
		[ᐃⲆΔ, "t", ᐃΔᐃΔ, 55, 184, ᐃᐃᐃ],
		[ⲆᐃΔ, "t", 5, 62, 195, ⵠᐃⲆ],
		[1, "s", 1, 51, 185, ⲆᐃΔ],
		[1, "s", 2, 62, 180, 1],
		[ⵠⲆⲆ, "s", ᐃᐃΔⵠ, 61, 188, 1],
		[1, "s", 1, 61, 189, Ⲇⵠᐃ],
		[ⵠⲆⲆ, "s", 2, 48, 195, 1],
		[Δⵠᐃ, "b", ⲆᐃΔ, 51, 199, 0],
		[ᐃⲆΔ, "t", 2, 52, 199, ΔⲆⲆ],
		[1, "t", 3, 56, 204, ΔⲆⲆ],
		[1, "t", 4, 57, 204, ⵠᐃⲆ],
		[ⲆᐃΔ, "t", Ⲇⵠⵠⵠ, 51, 204, 0],
		[ⵠΔᐃ, "s", 1, 52, 205, ⲆᐃΔ],
		[ᐃᐃΔ, "s", 2, 57, 200, 1],
		[ⵠⲆⲆ, "s", 1, 56, 199, Δⵠᐃ],
		[1, "b", 0, 55, 192, 0],
		[ⵠΔᐃ, "t", ᐃⵠΔᐃ, 56, 193, ᐃᐃᐃ],
		[ⵠⲆⲆ, "t", ᐃⲆᐃⲆ, 50, 190, Ⲇᐃⵠ],
		[ⲆᐃΔ, "b", ⲆᐃΔ, 76, 188, 0],
		[ΔⵠΔ, "t", ᐃⲆᐃⵠ, 75, 188, ⵠⵠⵠ],
		[1, "t", 2, 73, 192, ⵠⵠⵠ],
		[Δⵠᐃ, "t", ⵠⲆⲆⵠ, 72, 191, 0],
		[1, "t", ΔⲆⲆⵠ, 78, 193, ΔΔᐃ],
		[ᐃⲆΔ, "b", 0, 79, 192, Ⲇᐃⵠ],
		[ᐃⲆΔ, "s", 2, 79, 190, ᐃⲆΔ],
		[Δⵠᐃ, "s", 1, 74, 194, 1],
		[1, "s", 1, 72, 187, 1],
		[Δⵠᐃ, "s", 0, 74, 183, 1],
		[Δⵠᐃ, "s", 1, 75, 183, Δⵠᐃ],
		[ᐃᐃΔ, "t", 2, 69, 181, ⵠⲆΔ],
		[ⵠΔᐃ, "t", ⵠᐃΔⲆ, 70, 182, 0],
		[Δⵠᐃ, "t", 5, 69, 180, 0],
		[Ⲇⵠᐃ, "b", ⵠΔᐃ, 65, 189, ΔΔᐃ],
		[ⵠΔᐃ, "b", ᐃⲆᐃⵠ, 66, 189, ⵠⲆΔ],
		[ⵠΔᐃ, "t", 3, 64, 188, 0],
		[1, "t", ΔⵠⵠⲆ, 67, 192, ᐃᐃᐃ],
		[ΔⵠΔ, "b", 2, 85, 183, ᐃᐃᐃ],
		[1, "t", ᐃᐃΔ, 84, 184, Ⲇᐃⵠ],
		[1, "t", ⵠᐃΔΔ, 81, 180, ⵠⵠⵠ],
		[1, "t", 5, 89, 180, 0],
		[1, "t", 0, 90, 188, Ⲇᐃⵠ],
		[ⵠΔᐃ, "t", ⲆΔᐃⲆ, 89, 190, 0],
		[1, "s", 1, 87, 187, 1],
		[1, "s", 2, 87, 197, 1],
		[1, "b", 1, 84, 200, 0],
		[ΔⵠΔ, "t", 2, 83, 201, ⵠⵠⵠ],
		[ⵠΔᐃ, "t", 4, 87, 207, ⵠⲆΔ],
		[1, "s", ⲆⲆΔⲆ, 79, 202, ᐃᐃΔ],
		[1, "s", ΔⵠΔ, 80, 203, ⲆᐃΔ],
		[1, "t", Ⲇᐃⵠ, 71, 200, ⵠᐃⲆ],
		[1, "b", 2, 72, 201, ⵠⵠⵠ],
		[1, "t", ᐃᐃᐃⵠ, 65, 205, ⵠᐃⲆ],
		[ⲆᐃΔ, "t", ⵠⲆⲆ, 66, 206, 0],
		[ⵠΔᐃ, "t", ⵠᐃΔΔ, 63, 209, 0],
		[ΔⵠΔ, "t", 5, 73, 203, ⵠⲆΔ],
		[ᐃᐃΔ, "s", 0, 70, 207, ⵠⲆⲆ],
		[ᐃⲆΔ, "s", ΔⵠΔ, 71, 206, ⵠⲆⲆ],
		[1, "s", ΔΔⲆᐃ, 68, 199, ΔⵠΔ],
		[ΔⵠΔ, "s", 1, 64, 213, ⲆᐃΔ],
		[ᐃᐃΔ, "t", 0, 85, 213, ᐃᐃⲆ],
		[ᐃᐃΔ, "b", ᐃⲆᐃⵠ, 84, 212, 0],
		[1, "t", 3, 77, 209, ᐃᐃᐃ],
		[1, "t", ⵠᐃΔⲆ, 83, 216, 0],
		[ΔⵠΔ, "t", 4, 73, 209, ΔΔᐃ],
		[1, "b", 0, 86, 222, ⵠⵠⵠ],
		[ⵠⲆⲆ, "b", ᐃⵠΔᐃ, 87, 221, 0],
		[1, "s", ⵠΔᐃ, 80, 214, 1],
		[1, "s", ᐃᐃᐃⵠ, 87, 216, ⵠⲆⲆ],
		[ᐃᐃΔ, "s", 2, 84, 224, ΔⵠΔ],
		[ΔⵠΔ, "s", 1, 77, 227, 1],
		[Ⲇⵠᐃ, "t", 1, 74, 222, Ⲇᐃⵠ],
		[ΔⵠΔ, "b", ⵠⲆⲆ, 69, 218, 0],
		[ᐃⲆΔ, "b", 2, 75, 219, 0],
		[1, "s", ᐃᐃΔⵠ, 74, 218, 1],
		[1, "s", ⵠΔᐃ, 69, 223, 1],
		[1, "s", ⲆᐃΔ, 77, 221, 1],
		[Δⵠᐃ, "b", ⲆᐃΔ, 72, 211, 0],
		[1, "b", ⵠΔᐃ, 85, 232, ⵠⲆΔ],
		[1, "t", ᐃⲆᐃᐃ, 84, 233, 0],
		[1, "t", ⵠⵠⵠᐃ, 78, 238, 0],
		[ⲆᐃΔ, "b", 1, 77, 237, ⵠⵠⵠ],
		[1, "t", 5, 87, 236, ⵠᐃⲆ],
		[1, "t", 5, 76, 229, 0],
		[ⵠΔᐃ, "b", 2, 74, 241, ᐃᐃⲆ],
		[ⵠⲆⲆ, "s", 0, 73, 242, ⲆᐃΔ],
		[1, "s", ᐃᐃᐃ, 81, 238, ⲆᐃΔ],
		[1, "s", 1, 82, 237, 1],
		[1, "s", 2, 72, 237, Ⲇⵠᐃ],
		[ᐃᐃΔ, "s", 2, 78, 242, 1],
		[ⲆᐃΔ, "b", 1, 66, 230, ⵠⲆᐃ],
		[1, "b", 2, 62, 229, 0],
		[ⲆᐃΔ, "t", 4, 67, 231, 0],
		[1, "t", ⵠⲆⲆⵠ, 62, 228, 0],
		[ΔⵠΔ, "t", ⲆⲆᐃᐃ, 64, 233, ᐃᐃⲆ],
		[1, "t", ΔΔⲆᐃ, 65, 234, ΔⲆⲆ],
		[ⵠΔᐃ, "t", ᐃⲆᐃᐃ, 51, 220, Ⲇᐃⵠ],
		[ⵠΔᐃ, "t", 1, 50, 218, ⵠⵠⵠ],
		[ᐃᐃΔ, "b", ΔⵠΔ, 45, 223, Ⲇᐃⵠ],
		[ᐃᐃΔ, "b", 2, 46, 224, 0],
		[1, "t", ΔⵠⵠⲆ, 49, 218, ⵠⵠⵠ],
		[1, "t", ΔⵠⵠⲆ, 47, 225, 0],
		[1, "s", Δⵠᐃ, 50, 215, ᐃⲆΔ],
		[ⵠⲆⲆ, "s", 2, 51, 213, ΔⵠΔ],
		[ⲆᐃΔ, "s", 2, 42, 227, Ⲇⵠᐃ],
		[Ⲇⵠᐃ, "s", 1, 44, 227, 1],
		[Δⵠᐃ, "s", ⵠⲆⲆ, 60, 230, 1],
		[1, "s", 2, 59, 231, ΔⵠΔ],
		[1, "b", 1, 85, 252, 0],
		[ΔⵠΔ, "t", ΔΔⲆᐃ, 84, 251, 0],
		[1, "t", 2, 74, 250, 0],
		[ΔⵠΔ, "t", 0, 75, 251, 0],
		[ⲆᐃΔ, "b", 0, 83, 246, ⵠⵠⵠ],
		[1, "t", ᐃⵠΔⲆ, 82, 247, ⵠⲆΔ],
		[1, "t", 4, 81, 259, 0],
		[ⵠΔᐃ, "t", 4, 69, 249, ᐃᐃᐃ],
		[ᐃⲆΔ, "t", ⲆⲆᐃᐃ, 87, 246, Ⲇᐃⵠ],
		[1, "t", ⵠⵠᐃᐃ, 75, 252, 0],
		[1, "s", 1, 79, 257, 1],
		[1, "s", 2, 78, 249, ΔⵠΔ],
		[1, "s", 2, 80, 258, ᐃⲆΔ],
		[1, "s", ⵠΔᐃ, 88, 254, Δⵠᐃ],
		[Ⲇⵠᐃ, "s", ⲆᐃΔ, 85, 264, ᐃᐃΔ],
		[1, "s", ⵠⵠⵠᐃ, 89, 263, Δⵠᐃ],
		[ΔⵠΔ, "s", 2, 87, 269, 1],
		[1, "s", 0, 84, 268, ⲆᐃΔ],
		[1, "s", 2, 76, 267, ⲆᐃΔ],
		[1, "s", ᐃᐃΔ, 66, 261, 1],
		[ⵠΔᐃ, "s", 1, 87, 274, 1],
		[ΔⵠΔ, "s", ⵠⲆⲆ, 76, 263, ⲆᐃΔ],
		[ᐃᐃΔ, "s", ᐃⲆΔ, 59, 251, ΔⵠΔ],
		[ⵠΔᐃ, "s", ⵠᐃⲆ, 59, 252, ⲆᐃΔ],
		[ⵠΔᐃ, "t", 2, 86, 265, 0],
		[1, "t", Ⲇᐃⵠ, 78, 270, 0],
		[1, "t", 2, 79, 271, 0],
		[ⲆᐃΔ, "t", 0, 77, 260, ⵠⵠⵠ],
		[ᐃᐃΔ, "t", 3, 78, 261, 0],
		[1, "b", ᐃⲆΔ, 71, 264, ⵠⲆᐃ],
		[ⵠⲆⲆ, "b", 1, 88, 269, 0],
		[1, "t", 5, 84, 264, ᐃᐃᐃ],
		[Ⲇⵠᐃ, "t", 5, 79, 261, ᐃᐃⲆ],
		[1, "t", 5, 72, 265, 0],
		[1, "t", ⵠⲆⲆᐃ, 77, 270, 0],
		[1, "t", 0, 87, 261, ⵠⲆᐃ],
		[1, "t", 2, 86, 260, Ⲇᐃⵠ],
		[1, "t", 4, 84, 255, 0],
		[ⲆᐃΔ, "t", ⵠᐃΔΔ, 68, 255, 0],
		[ᐃᐃΔ, "t", 1, 67, 254, Ⲇᐃⵠ],
		[1, "t", ᐃⲆᐃᐃ, 65, 262, 0],
		[ⵠⲆⲆ, "t", 1, 57, 260, 0],
		[1, "t", 2, 58, 259, ⵠⲆᐃ],
		[ⵠⲆⲆ, "b", 1, 63, ⲆⲆⲆᐃⲆᐃⵠ, ⵠⲆΔ],
		[1, "b", 1, 52, 248, Ⲇᐃⵠ],
		[1, "t", ᐃᐃΔⵠ, 53, 248, ⵠⵠⵠ],
		[1, "s", ᐃⲆΔ, 50, 253, 1],
		[ⵠΔᐃ, "s", ᐃᐃⲆⲆ, 67, 263, 1],
		[1, "s", ⵠⵠⵠᐃ, 52, 252, ⵠⲆⲆ],
		[Ⲇⵠᐃ, "s", ᐃⲆᐃᐃ, 71, 244, ᐃⲆΔ],
		[1, "b", 0, 57, 245, 0],
		[1, "t", 2, 58, 244, 0],
		[1, "b", Ⲇⵠᐃ, 53, 237, ⵠⵠⵠ],
		[ⵠⲆⲆ, "t", 2, 54, 237, 0],
		[ᐃⲆΔ, "t", 2, 41, 238, 0],
		[ᐃᐃΔ, "t", Ⲇⵠᐃ, 42, 237, ΔΔᐃ],
		[1, "t", 5, 57, 235, 0],
		[ⵠΔᐃ, "t", ᐃᐃᐃⲆ, 60, 246, 0],
		[ᐃᐃΔ, "t", ᐃᐃΔᐃ, 50, 252, Ⲇᐃⵠ],
		[1, "t", 1, 42, 248, 0],
		[Δⵠᐃ, "b", 1, 43, 249, 0],
		[Ⲇⵠᐃ, "b", ᐃⵠΔᐃ, 37, 243, 0],
		[1, "s", ⵠⲆΔ, 50, 236, 1],
		[1, "s", 2, 39, 247, ⲆᐃΔ],
		[1, "s", 2, 51, 235, 1],
		[Ⲇⵠᐃ, "s", ⲆⲆΔⲆ, 60, 243, 1],
		[1, "s", ⲆⲆΔⲆ, 36, 240, ⵠΔᐃ],
		[1, "s", 2, 43, 254, Δⵠᐃ],
		[Δⵠᐃ, "s", ᐃⲆΔ, 42, 254, ⲆᐃΔ],
		[Δⵠᐃ, "t", 1, 38, 233, ⵠᐃⲆ],
		[1, "t", ᐃᐃᐃⵠ, 35, 235, ΔⲆⲆ],
		[1, "t", ᐃΔᐃΔ, 33, 228, 0],
		[Δⵠᐃ, "t", 4, 33, 245, ΔⲆⲆ],
		[ΔⵠΔ, "t", ⵠᐃᐃΔ, 43, 235, 0],
		[1, "t", 5, 45, 249, 0],
		[1, "t", 5, 41, 253, 0],
		[1, "b", 1, 20, 227, ⵠⵠⵠ],
		[1, "b", Δⵠᐃ, 14, 240, ΔⲆⲆ],
		[ᐃᐃΔ, "t", ⵠⵠΔⵠ, 21, 227, 0],
		[Ⲇⵠᐃ, "t", Δⵠⵠᐃ, 27, 234, 0],
		[Ⲇⵠᐃ, "t", ⲆⵠⲆᐃ, 15, 241, ⵠⲆᐃ],
		[1, "t", ᐃⵠΔⲆ, ⲆᐃⲆᐃⲆ, 229, ΔⲆⲆ],
		[1, "t", ᐃⲆᐃⲆ, 17, 224, 0],
		[ᐃᐃΔ, "t", 4, 11, 231, ΔⲆⲆ],
		[ⲆᐃΔ, "t", 4, 22, 238, ΔΔᐃ],
		[Ⲇⵠᐃ, "t", ⵠᐃΔΔ, ⲆΔⲆΔⵠ, 239, ⵠᐃⲆ],
		[ⵠⲆⲆ, "t", 1, 22, 243, ⵠⲆΔ],
		[ΔⵠΔ, "b", ᐃⲆᐃⵠ, 23, 242, Ⲇᐃⵠ],
		[1, "s", ⲆᐃΔ, 23, 238, Ⲇⵠᐃ],
		[1, "s", 1, 22, 228, ᐃⲆΔ],
		[Δⵠᐃ, "s", 2, 24, 228, Ⲇⵠᐃ],
		[1, "s", 2, 21, 236, ᐃⲆΔ],
		[ᐃᐃΔ, "s", 0, ⵠΔᐃⲆⲆ, 228, ⵠΔᐃ],
		[1, "s", ⵠⲆᐃ, ⲆΔⲆⲆⲆ, 242, 1],
		[1, "s", 1, 15, 244, 1],
		[1, "s", ⵠΔᐃ, 34, 236, 1],
		[ᐃⲆΔ, "t", ⲆᐃΔ, 26, 249, ᐃᐃⲆ],
		[1, "t", ⵠΔᐃ, 22, ᐃᐃⲆⵠⲆᐃⵠ, ⵠⵠⵠ],
		[ⵠⲆⲆ, "t", ᐃᐃᐃⵠ, 23, 255, ΔΔᐃ],
		[ⵠⲆⲆ, "b", 1, ᐃⵠΔᐃΔΔᐃ, ᐃⲆⵠΔΔⲆⵠ, ΔⲆⲆ],
		[1, "b", ᐃᐃΔⵠ, ⵠᐃⵠᐃΔ, 256, 0],
		[1, "s", 0, 21, 252, Ⲇⵠᐃ],
		[ΔⵠΔ, "s", 2, 20, 250, Δⵠᐃ],
		[Δⵠᐃ, "s", 2, 23, 259, ΔⵠΔ],
		[1, "s", Δⵠᐃ, 13, 257, 1],
		[1, "t", 1, 31, 254, Ⲇᐃⵠ],
		[ᐃⲆΔ, "t", ᐃᐃᐃⵠ, 32, 254, ΔⲆⲆ],
		[ⵠⲆⲆ, "t", ⵠᐃᐃΔ, 28, 254, 0],
		[ᐃⲆΔ, "t", ⵠⲆⲆⵠ, 34, 258, ⵠⵠⵠ],
		[1, "t", ⵠⲆᐃ, 29, 260, 0],
		[ᐃᐃΔ, "b", ᐃᐃᐃⵠ, 30, 261, ΔⲆⲆ],
		[1, "t", 0, 43, 262, ⵠⲆΔ],
		[1, "t", 2, 42, 263, 0],
		[1, "t", ᐃΔⵠⵠ, 46, 264, ᐃᐃᐃ],
		[ᐃᐃΔ, "b", 1, 39, 265, 0],
		[ⲆᐃΔ, "b", 1, 58, 267, 0],
		[1, "t", 2, 57, 268, ⵠⲆᐃ],
		[ΔⵠΔ, "t", 4, 62, 270, 0],
		[Ⲇⵠᐃ, "t", 5, 52, 273, ΔΔᐃ],
		[1, "s", 1, 52, 269, ΔⵠΔ],
		[1, "s", ⲆᐃΔ, 41, 272, 1],
		[ᐃᐃΔ, "s", ⲆⲆΔⲆ, 41, 274, 1],
		[1, "t", 2, 42, 268, ΔⲆⲆ],
		[Ⲇⵠᐃ, "t", 0, 43, 268, ᐃᐃᐃ],
		[ⲆᐃΔ, "b", ᐃᐃΔ, 46, 272, ᐃᐃⲆ],
		[ᐃⲆΔ, "b", 1, ⵠΔⲆᐃᐃ, 265, 0],
		[ΔⵠΔ, "t", ⵠⵠⵠᐃ, ⵠⲆⵠⲆᐃ, 266, ⵠⲆΔ],
		[ⲆᐃΔ, "t", ᐃΔⵠⵠ, 19, 264, ᐃᐃᐃ],
		[ΔⵠΔ, "t", 4, 29, 263, 0],
		[ᐃᐃΔ, "t", ⵠⲆⲆⵠ, ⲆᐃⵠᐃΔ, 269, 0],
		[ⵠΔᐃ, "t", 1, 29, 271, ΔⲆⲆ],
		[ⵠΔᐃ, "b", 2, 28, 272, Ⲇᐃⵠ],
		[ᐃᐃΔ, "t", ᐃᐃⲆⲆ, 24, 267, ⵠᐃⲆ],
		[ⵠⲆⲆ, "t", ΔΔⲆᐃ, 20, 279, ⵠⲆᐃ],
		[ᐃⲆΔ, "t", Ⲇᐃⵠ, 19, 278, ⵠᐃⲆ],
		[1, "t", ⲆⵠⲆᐃ, ⲆⵠⵠΔⲆ, 278, ⵠⵠⵠ],
		[1, "b", 0, 21, 284, ⵠⲆᐃ],
		[ᐃᐃΔ, "b", 0, 18, 289, 0],
		[ⵠΔᐃ, "t", 2, ⲆᐃⲆⵠᐃ, 283, 0],
		[ᐃⲆΔ, "t", ᐃᐃΔⵠ, Δᐃⵠⵠⵠ, 290, 0],
		[Ⲇⵠᐃ, "t", ᐃΔᐃΔ, 19, 283, ΔⲆⲆ],
		[ⲆᐃΔ, "t", ⵠᐃΔⲆ, ΔΔⲆΔⲆᐃⲆ, 290, 0],
		[1, "s", 1, 16, 285, 1],
		[ⵠⲆⲆ, "s", ⲆᐃΔ, 24, 288, 1],
		[1, "s", 2, 26, 287, 1],
		[1, "s", ᐃⲆᐃⵠ, 16, 278, 1],
		[1, "s", 1, 21, 268, ᐃᐃΔ],
		[ⵠⲆⲆ, "s", 2, 19, 268, 1],
		[1, "t", 0, ᐃᐃΔΔⵠ, 294, 0],
		[1, "b", 1, ⲆⵠⵠΔⲆ, 295, ΔⲆⲆ],
		[ⲆᐃΔ, "t", 3, 13, 291, ⵠⲆᐃ],
		[1, "t", ΔΔᐃΔ, ⵠⲆⵠᐃⵠ, 299, ⵠⲆΔ],
		[ⵠΔᐃ, "t", ⵠᐃᐃΔ, ⲆᐃᐃⲆΔ, 287, 0],
		[1, "t", 4, ⲆⲆᐃⲆⵠⲆΔ, 298, ⵠⵠⵠ],
		[1, "t", ⵠΔᐃ, 27, 294, ⵠⲆΔ],
		[1, "b", ⲆⲆΔⲆ, 26, 295, 0],
		[1, "t", ᐃⵠΔⵠ, 33, 297, ᐃᐃⲆ],
		[ⲆᐃΔ, "b", 1, 48, 278, ΔΔᐃ],
		[ᐃⲆΔ, "b", 0, 46, 280, ᐃᐃⲆ],
		[ᐃᐃΔ, "b", 2, 50, 280, Ⲇᐃⵠ],
		[1, "t", 0, 44, 282, ᐃᐃᐃ],
		[ⲆᐃΔ, "b", 1, 49, 283, 0],
		[ⵠΔᐃ, "b", ⵠᐃⲆ, 51, 278, 0],
		[Ⲇⵠᐃ, "b", 3, 50, 279, ⵠᐃⲆ],
		[Ⲇⵠᐃ, "b", ΔⲆΔⲆ, 44, 284, ⵠⲆᐃ],
		[1, "b", 0, 47, 284, 0],
		[1, "b", 2, 42, 283, 0],
		[1, "t", 4, 51, 277, 0],
		[ᐃᐃΔ, "b", ᐃⲆΔ, 44, 286, 0],
		[1, "b", 2, 46, 286, ᐃᐃⲆ],
		[ⵠⲆⲆ, "b", 1, 42, 285, ⵠⲆΔ],
		[1, "b", 3, 41, 286, ⵠᐃⲆ],
		[ᐃⲆΔ, "t", 5, 42, 287, ⵠⲆᐃ],
		[1, "b", 1, 42, 278, ⵠⵠⵠ],
		[Δⵠᐃ, "b", 2, 43, 279, ⵠⲆᐃ],
		[1, "b", 0, 40, 280, 0],
		[1, "t", 4, 39, 283, 0],
		[1, "t", ⵠⲆΔⵠ, 39, 279, 0],
		[ⵠⲆⲆ, "t", 5, 43, 277, ΔΔᐃ],
		[1, "t", 5, 47, 287, 0],
		[1, "t", ⵠⲆⲆⵠ, 46, 277, 0],
		[ⵠⲆⲆ, "t", 4, 45, 290, ⵠⲆΔ],
		[1, "t", 4, 36, 285, 0],
		[1, "t", ⲆΔᐃⲆ, 35, 284, 0],
		[ⵠⲆⲆ, "t", ᐃⵠΔⵠ, 36, 272, 0],
		[1, "t", 4, 35, 271, ΔⲆⲆ],
		[1, "t", ⵠΔᐃ, 29, 279, ᐃᐃⲆ],
		[1, "b", 1, 32, 277, ⵠᐃⲆ],
		[1, "t", ΔⲆⵠᐃ, 31, 278, Ⲇᐃⵠ],
		[1, "b", 2, 28, 280, 0],
		[ⵠΔᐃ, "t", 4, 29, 286, ᐃᐃᐃ],
		[ᐃⲆΔ, "t", ᐃⵠᐃⲆ, 28, 275, ᐃᐃᐃ],
		[1, "t", 3, 37, 292, 0],
		[1, "b", 1, 36, 291, 0],
		[1, "b", 0, 34, 298, 0],
		[1, "t", ᐃⲆᐃⲆ, 31, 292, 0],
		[ΔⵠΔ, "t", ᐃⲆᐃⲆ, 46, 295, ΔⲆⲆ],
		[1, "t", ᐃⲆᐃⲆ, 59, 287, 0],
		[1, "b", ΔⵠΔ, 58, 286, ᐃᐃⲆ],
		[ⵠⲆⲆ, "s", ΔⵠΔ, 68, 284, ⵠΔᐃ],
		[1, "s", 2, 70, 286, Ⲇⵠᐃ],
		[ⵠΔᐃ, "s", Ⲇᐃⵠ, 67, 284, 1],
		[Ⲇⵠᐃ, "t", 3, 66, 283, 0],
		[Δⵠᐃ, "t", ⲆᐃΔ, 65, 282, 0],
		[ⲆᐃΔ, "b", 1, 64, 288, 0],
		[1, "t", 3, 60, 293, ᐃᐃᐃ],
		[Ⲇⵠᐃ, "t", ⵠⲆⲆ, 61, 294, ΔⲆⲆ],
		[1, "b", 1, 76, 294, 0],
		[Ⲇⵠᐃ, "t", 5, 75, 295, 0],
		[1, "t", 5, 56, 293, ⵠᐃⲆ],
		[ⲆᐃΔ, "t", 5, 59, 281, ᐃᐃⲆ],
		[Ⲇⵠᐃ, "t", 5, 67, 291, 0],
		[ⵠΔᐃ, "b", 0, 88, 293, ΔⲆⲆ],
		[ⵠⲆⲆ, "t", 2, 89, 292, 0],
		[1, "t", ᐃᐃᐃⵠ, 85, 286, Ⲇᐃⵠ],
		[ⵠΔᐃ, "t", 4, 88, 289, 0],
		[1, "t", ⵠᐃᐃΔ, 79, 287, 0],
		[1, "b", 1, 84, 285, 0],
		[1, "t", ᐃΔⵠⲆ, 75, 284, ᐃᐃⲆ],
		[ⵠΔᐃ, "b", 0, 75, 278, ᐃᐃᐃ],
		[ⵠⲆⲆ, "t", 3, 74, 277, 0],
		[ⵠⲆⲆ, "t", 4, 81, 276, ⵠⲆᐃ],
		[1, "t", 2, 65, 276, ᐃᐃⲆ],
		[ⲆᐃΔ, "b", 1, 66, 275, 0],
		[Ⲇⵠᐃ, "g", ΔⲆⲆ, 45, 261, 1],
		[ⵠⲆⲆ, "g", ᐃᐃΔ, 39, 258, ⵠΔᐃ],
		[1, "g", ⵠⵠⵠ, 35, 250, ⵠⲆⲆ],
		[1, "g", ᐃⲆᐃᐃ, 22, 247, 1],
		[1, "g", ⲆⲆΔⲆ, 27, 227, ᐃᐃΔ],
		[1, "g", 2, 63, 218, 1],
		[1, "g", ⵠΔᐃ, 56, 224, 1],
		[ⲆᐃΔ, "g", 0, 46, 231, 1],
		[1, "g", 1, 65, 240, ᐃⲆΔ],
		[Ⲇⵠᐃ, "g", 2, 67, 238, 1],
		[1, "g", ΔΔⲆᐃ, 79, 232, 1],
		[1, "g", 2, 72, 253, ⵠΔᐃ],
		[1, "g", ᐃᐃⲆⲆ, 62, 264, 1],
		[ⵠΔᐃ, "g", ᐃᐃⲆⲆ, 28, 267, ⵠⲆⲆ],
		[1, "g", ᐃⲆᐃⵠ, 58, 274, 1],
		[1, ⵠ[77], ΔΔⲆᐃ, 14, 182, ΔΔᐃ],
		[ᐃⲆΔ, ⵠ[77], 2, 24, 182, ᐃᐃᐃ],
		[ⵠΔᐃ, ⵠ[77], 0, ⲆⲆΔⲆⲆ, 185, 0],
		[ⵠⲆⲆ, ⵠ[77], ΔⲆⲆ, ⲆᐃⵠΔᐃ, 194, ΔⲆⲆ],
		[ⲆᐃΔ, ⵠ[77], 1, 25, 196, ⵠⲆᐃ],
		[ⲆᐃΔ, ⵠ[77], 3, 31, 183, 0],
		[1, ⵠ[77], 0, 38, 181, 0],
		[1, ⵠ[77], ᐃᐃΔⵠ, 45, 186, 0],
		[ⵠΔᐃ, ⵠ[77], ΔⵠΔ, 38, 191, 0],
		[ⲆᐃΔ, ⵠ[77], 0, 56, 181, 0],
		[1, ⵠ[77], ΔⵠΔ, 68, 182, 0],
		[ᐃᐃΔ, ⵠ[77], 2, 80, 181, 0],
		[1, ⵠ[77], 3, 86, 187, 0],
		[1, ⵠ[77], Ⲇᐃⵠ, 84, 193, ᐃᐃᐃ],
		[ΔⵠΔ, ⵠ[77], ΔⵠΔ, 82, 201, 0],
		[Δⵠᐃ, ⵠ[77], 2, 64, 191, ΔΔᐃ],
		[Ⲇⵠᐃ, ⵠ[77], 2, 72, 200, ⵠᐃⲆ],
		[ᐃᐃΔ, ⵠ[77], 3, 64, 201, 0],
		[1, ⵠ[77], ᐃᐃΔⵠ, 76, 209, 0],
		[1, ⵠ[77], 3, 71, 212, 0],
		[1, ⵠ[77], 1, 86, 214, 0],
		[ⵠΔᐃ, ⵠ[77], 0, 57, 208, ᐃᐃᐃ],
		[1, ⵠ[77], 0, 41, 203, 0],
		[ᐃⲆΔ, ⵠ[77], Δⵠᐃ, ⲆΔΔΔⵠ, 206, 0],
		[1, ⵠ[77], ⵠⵠⵠᐃ, 25, 209, ᐃᐃᐃ],
		[ΔⵠΔ, ⵠ[77], 3, ᐃᐃⲆⲆⵠ, 218, 0],
		[1, ⵠ[77], 3, 11, 227, 0],
		[1, ⵠ[77], 0, 22, 229, 0],
		[1, ⵠ[77], Ⲇⵠᐃ, ⲆΔΔΔⵠ, 239, 0],
		[1, ⵠ[77], ᐃᐃΔⵠ, 24, 238, ΔⲆⲆ],
		[ΔⵠΔ, ⵠ[77], 3, 22, 246, 0],
		[1, ⵠ[77], 3, ᐃᐃᐃΔΔ, 253, ⵠⲆᐃ],
		[ⵠⲆⲆ, ⵠ[77], 1, ⵠᐃⵠᐃΔ, 258, 0],
		[ᐃⲆΔ, ⵠ[77], ΔⵠΔ, 28, 261, 0],
		[ⵠΔᐃ, ⵠ[77], 1, 14, 267, ᐃᐃⲆ],
		[Δⵠᐃ, ⵠ[77], ΔⲆⲆ, 24, 268, ᐃᐃᐃ],
		[Δⵠᐃ, ⵠ[77], ΔΔᐃ, 15, 278, 0],
		[ⵠⲆⲆ, ⵠ[77], 2, 21, 279, ΔⲆⲆ],
		[ᐃⲆΔ, ⵠ[77], 2, 30, 272, 0],
		[Ⲇⵠᐃ, ⵠ[77], ᐃᐃΔⵠ, 29, 281, 0],
		[ⵠⲆⲆ, ⵠ[77], ⵠⵠⵠᐃ, ᐃᐃΔᐃⲆ, 284, 0],
		[1, ⵠ[77], 3, 12, 291, 0],
		[1, ⵠ[77], Δⵠⵠᐃ, 30, 287, ⵠⵠⵠ],
		[Δⵠᐃ, ⵠ[77], 3, 27, 293, 0],
		[1, ⵠ[77], ⵠⵠⵠ, 25, 296, 0],
		[1, ⵠ[77], 0, 11, 298, 0],
		[ⵠⲆⲆ, ⵠ[77], ⵠⲆΔ, Δᐃᐃⵠⵠ, 286, 0],
		[ⵠⲆⲆ, ⵠ[77], ⵠⵠⵠᐃ, 36, 299, ΔⲆⲆ],
		[Δⵠᐃ, ⵠ[77], 2, 37, 280, 0],
		[1, ⵠ[77], ⲆⵠⲆᐃ, 38, 291, 0],
		[1, ⵠ[77], 1, 48, 287, 0],
		[ᐃᐃΔ, ⵠ[77], Ⲇⵠᐃ, 46, 277, ⵠⲆΔ],
		[1, ⵠ[77], ⵠⲆⲆ, 53, 278, ᐃᐃⲆ],
		[ⲆᐃΔ, ⵠ[77], 3, 48, 295, 0],
		[1, ⵠ[77], 0, 57, 294, 0],
		[1, ⵠ[77], 1, 65, 290, 0],
		[1, ⵠ[77], Ⲇⵠᐃ, 84, 292, 0],
		[1, ⵠ[77], ᐃᐃⲆⲆ, 77, 295, 0],
		[ⵠΔᐃ, ⵠ[77], 2, 84, 287, 0],
		[1, ⵠ[77], ⵠⲆΔ, 74, 279, 0],
		[ᐃⲆΔ, ⵠ[77], ⲆⵠⲆᐃ, 65, 274, ᐃᐃᐃ],
		[1, ⵠ[77], 2, 71, 267, ⵠⲆΔ],
		[ⵠΔᐃ, ⵠ[77], ᐃⲆᐃⵠ, 65, 261, Ⲇᐃⵠ],
		[1, ⵠ[77], ᐃᐃⲆⲆ, 47, 264, 0],
		[1, ⵠ[77], 3, 47, 258, ᐃᐃⲆ],
		[ⵠΔᐃ, ⵠ[77], ⲆᐃᐃΔ, 53, 251, 0],
		[ⵠⲆⲆ, ⵠ[77], ᐃᐃⲆⲆ, 40, 253, ᐃᐃᐃ],
		[ⵠΔᐃ, ⵠ[77], ᐃᐃⲆ, 35, 244, ⵠⲆΔ],
		[ᐃⲆΔ, ⵠ[77], 0, 37, 233, 0],
		[Δⵠᐃ, ⵠ[77], ᐃⵠΔⲆ, 44, 226, 0],
		[ΔⵠΔ, ⵠ[77], 2, 37, 219, ᐃᐃⲆ],
		[ᐃⲆΔ, ⵠ[77], ⵠⵠⵠᐃ, 54, 234, ᐃᐃⲆ],
		[ᐃᐃΔ, ⵠ[77], 1, 66, 234, 0],
		[ⵠⲆⲆ, ⵠ[77], 2, 65, 241, 0],
		[ⵠⲆⲆ, ⵠ[77], 0, 68, 249, ⵠⵠⵠ],
		[1, ⵠ[77], ᐃⵠΔⲆ, 78, 257, 0],
		[Δⵠᐃ, ⵠ[77], ᐃⲆᐃⵠ, 86, 253, 0],
		[1, ⵠ[77], ᐃᐃᐃⵠ, 83, 245, ⵠⲆᐃ],
		[Δⵠᐃ, ⵠ[77], Ⲇⵠᐃ, 82, 238, 0],
		[1, ⵠ[77], 3, 76, 235, 0],
		[ᐃᐃΔ, ⵠ[77], 2, 86, 232, 0],
		[Δⵠᐃ, ⵠ[77], 0, 86, 224, 0],
		[Δⵠᐃ, ⵠ[77], 2, 76, 226, 0],
		[1, ⵠ[77], ᐃⲆᐃⵠ, 61, 228, 0],
		[1, ⵠ[77], ᐃⲆᐃⵠ, 58, 217, ᐃᐃᐃ],
		[1, ⵠ[77], 0, 49, 217, 0],
		[ⲆᐃΔ, ⵠ[77], 19, ⵠΔⲆⵠⵠ, 179, Ⲇᐃⵠ],
		[1, ⵠ[77], 20, 17, 180, 0],
		[1, ⵠ[77], 22, 18, 181, 0],
		[ⵠⲆⲆ, ⵠ[77], Δᐃⵠⵠⵠ, 30, 184, ⵠᐃⲆ],
		[ΔⵠΔ, ⵠ[77], 19, 27, 187, 0],
		[1, ⵠ[77], 19, 30, 195, ΔΔᐃ],
		[1, ⵠ[77], Δᐃⵠⵠⵠ, ⵠᐃⵠⵠᐃ, 192, 0],
		[1, ⵠ[77], ΔΔⵠⲆⲆ, 44, 182, ΔⲆⲆ],
		[ⲆᐃΔ, ⵠ[77], ᐃᐃⲆⵠᐃ, 49, 182, 0],
		[1, ⵠ[77], ⲆᐃΔⲆΔ, 54, 182, ⵠⲆΔ],
		[1, ⵠ[77], ⵠΔⵠᐃⵠ, 59, 183, 0],
		[Ⲇⵠᐃ, ⵠ[77], 19, 56, 186, 0],
		[1, ⵠ[77], Δᐃⵠⵠⵠ, 46, 188, 0],
		[1, ⵠ[77], 19, 58, 193, ⵠⲆΔ],
		[1, ⵠ[77], 19, 67, 187, ⵠⲆΔ],
		[1, ⵠ[77], ⲆⵠⵠⲆⵠ, 65, 192, ⵠⲆᐃ],
		[1, ⵠ[77], 19, 71, 180, 0],
		[1, ⵠ[77], 19, 78, 187, 0],
		[1, ⵠ[77], ⵠⲆⵠᐃΔ, 80, 194, ΔΔᐃ],
		[1, ⵠ[77], ΔΔⵠⲆⲆ, 72, 193, 0],
		[ΔⵠΔ, ⵠ[77], 19, 82, 182, 0],
		[1, ⵠ[77], ᐃᐃⲆⵠᐃ, 88, 185, 0],
		[Δⵠᐃ, ⵠ[77], ΔΔⵠⲆⲆ, 87, 189, 0],
		[1, ⵠ[77], 19, 86, 197, ⵠᐃⲆ],
		[1, ⵠ[77], ᐃᐃⲆⵠᐃ, 85, 203, 0],
		[ᐃⲆΔ, ⵠ[77], 19, 74, 200, 0],
		[ΔⵠΔ, ⵠ[77], 19, 70, 202, 0],
		[ᐃⲆΔ, ⵠ[77], ᐃΔΔⵠᐃ, 83, 199, 0],
		[Δⵠᐃ, ⵠ[77], Δᐃᐃⵠᐃ, 86, 208, 0],
		[ⵠⲆⲆ, ⵠ[77], 19, 84, 214, 0],
		[ᐃᐃΔ, ⵠ[77], ⵠⵠΔᐃⲆ, 83, 211, 0],
		[Ⲇⵠᐃ, ⵠ[77], ⵠΔⵠᐃⵠ, 84, 217, ᐃᐃⲆ],
		[1, ⵠ[77], 19, 77, 210, Ⲇᐃⵠ],
		[1, ⵠ[77], ⵠⲆⵠᐃΔ, 71, 210, 0],
		[1, ⵠ[77], ⲆⵠⵠⲆⵠ, 73, 213, ᐃᐃⲆ],
		[ⲆᐃΔ, ⵠ[77], 19, 66, 207, 0],
		[1, ⵠ[77], ⲆⵠⵠⲆⵠ, 66, 204, 0],
		[ⵠΔᐃ, ⵠ[77], 19, 62, 209, ⵠⲆΔ],
		[ⵠΔᐃ, ⵠ[77], 19, 63, 201, Ⲇᐃⵠ],
		[ⵠⲆⲆ, ⵠ[77], ⵠΔⵠᐃⵠ, 56, 205, ᐃᐃᐃ],
		[1, ⵠ[77], 19, 49, 199, ΔΔᐃ],
		[ⲆᐃΔ, ⵠ[77], Δᐃⵠⵠⵠ, 50, 205, Ⲇᐃⵠ],
		[ᐃⲆΔ, ⵠ[77], ⵠⵠΔᐃⲆ, 40, 197, 0],
		[1, ⵠ[77], ᐃᐃⲆⵠᐃ, 38, 198, 0],
		[1, ⵠ[77], 19, 40, 208, ⵠⲆᐃ],
		[ᐃⲆΔ, ⵠ[77], 19, 36, 204, 0],
		[1, ⵠ[77], ΔΔⵠⲆⲆ, 33, 204, ΔⲆⲆ],
		[ⵠⲆⲆ, ⵠ[77], 19, 29, 202, 0],
		[1, ⵠ[77], ⲆⵠⵠⲆⵠ, 27, 200, 0],
		[1, ⵠ[77], Δᐃᐃⵠᐃ, 26, 193, 0],
		[1, ⵠ[77], 19, 18, 201, 0],
		[ⵠⲆⲆ, ⵠ[77], ᐃᐃⲆⵠᐃ, ⲆᐃⲆⵠᐃ, 199, ⵠⲆΔ],
		[ⵠⲆⲆ, ⵠ[77], 19, ΔⲆⵠΔᐃ, 196, ᐃᐃᐃ],
		[ΔⵠΔ, ⵠ[77], 19, 12, 204, Ⲇᐃⵠ],
		[1, ⵠ[77], 19, 11, 201, 0],
		[ᐃᐃΔ, ⵠ[77], ᐃᐃⲆⵠᐃ, 23, 208, 0],
		[1, ⵠ[77], Δᐃⵠⵠⵠ, 31, 214, 0],
		[ᐃⲆΔ, ⵠ[77], ⵠⲆⵠᐃΔ, 26, 215, ⵠᐃⲆ],
		[ⵠⲆⲆ, ⵠ[77], 19, 36, 217, ΔⲆⲆ],
		[1, ⵠ[77], 19, 32, 223, Ⲇᐃⵠ],
		[ⲆᐃΔ, ⵠ[77], 19, 26, 223, ⵠⲆΔ],
		[1, ⵠ[77], 19, 18, 218, ᐃᐃⲆ],
		[1, ⵠ[77], ᐃᐃⲆⵠᐃ, Δⵠᐃⵠᐃ, 215, ⵠⲆΔ],
		[ᐃᐃΔ, ⵠ[77], ⵠΔⵠᐃⵠ, ⵠΔΔΔΔ, 212, Ⲇᐃⵠ],
		[ⵠⲆⲆ, ⵠ[77], Δᐃᐃⵠᐃ, 15, 224, Ⲇᐃⵠ],
		[1, ⵠ[77], 19, ⵠΔⵠᐃⵠ, 229, 0],
		[ⲆᐃΔ, ⵠ[77], 19, ⵠⲆⵠⵠⲆ, 230, 0],
		[ⵠⲆⲆ, ⵠ[77], ΔΔⵠⲆⲆ, 22, 240, 0],
		[ΔⵠΔ, ⵠ[77], ⲆᐃΔⲆΔ, 13, 238, ⵠⲆΔ],
		[ⵠΔᐃ, ⵠ[77], ⵠⵠΔᐃⲆ, ᐃⵠⵠΔⲆ, 243, 0],
		[ⵠⲆⲆ, ⵠ[77], Δᐃᐃⵠᐃ, 24, 244, 0],
		[1, ⵠ[77], ⵠΔⵠᐃⵠ, 24, 250, Ⲇᐃⵠ],
		[1, ⵠ[77], 19, 28, 253, 0],
		[ᐃⲆΔ, ⵠ[77], ᐃΔΔⵠᐃ, 33, ΔΔᐃΔΔΔᐃ, ᐃᐃᐃ],
		[ᐃⲆΔ, ⵠ[77], 19, 34, 260, 0],
		[ΔⵠΔ, ⵠ[77], 19, 31, 260, 0],
		[ⵠΔᐃ, ⵠ[77], 19, 38, 267, 0],
		[ⲆᐃΔ, ⵠ[77], 19, 44, 264, 0],
		[ⲆᐃΔ, ⵠ[77], 19, 43, 261, ⵠⵠⵠ],
		[1, ⵠ[77], 19, 16, 257, ᐃᐃⲆ],
		[1, ⵠ[77], Δᐃⵠⵠⵠ, 22, 258, ⵠⲆᐃ],
		[ⵠΔᐃ, ⵠ[77], ᐃΔΔⵠᐃ, 12, 253, ΔⲆⲆ],
		[ⵠΔᐃ, ⵠ[77], ⲆᐃΔⲆΔ, ΔⵠΔⵠΔ, 242, 0],
		[Δⵠᐃ, ⵠ[77], 19, ΔΔⲆᐃᐃ, 255, 0],
		[ⲆᐃΔ, ⵠ[77], ⲆⵠⵠⲆⵠ, ⵠΔᐃⵠⲆ, 264, 0],
		[1, ⵠ[77], ⲆⵠⵠⲆⵠ, ᐃᐃⲆΔⵠ, 265, ⵠⲆᐃ],
		[1, ⵠ[77], ᐃᐃⲆⵠᐃ, ΔⲆⵠΔᐃ, 271, Ⲇᐃⵠ],
		[1, ⵠ[77], ⵠΔⵠᐃⵠ, Ⲇᐃⵠⵠᐃ, 272, ⵠⲆΔ],
		[1, ⵠ[77], 19, ᐃⵠⵠΔⲆ, 277, ᐃᐃᐃ],
		[1, ⵠ[77], ᐃΔΔⵠᐃ, 21, 277, 0],
		[Δⵠᐃ, ⵠ[77], ⲆᐃΔⲆΔ, 21, 281, ⵠⵠⵠ],
		[1, ⵠ[77], 19, 27, 282, 0],
		[1, ⵠ[77], 19, 29, 278, 0],
		[1, ⵠ[77], 19, 29, 273, Ⲇᐃⵠ],
		[1, ⵠ[77], ᐃᐃⲆⵠᐃ, 36, 271, ⵠⲆΔ],
		[ⲆᐃΔ, ⵠ[77], ⲆᐃΔⲆΔ, 8, 278, 0],
		[ΔⵠΔ, ⵠ[77], ᐃᐃⲆⵠᐃ, 11, 286, ⵠⲆᐃ],
		[ᐃᐃΔ, ⵠ[77], Δᐃⵠⵠⵠ, 17, 291, 0],
		[ⵠΔᐃ, ⵠ[77], 19, 14, 294, 0],
		[1, ⵠ[77], 19, ΔⵠΔⵠΔ, 292, 0],
		[1, ⵠ[77], 19, ΔⵠⲆⲆⲆ, 300, 0],
		[1, ⵠ[77], ⵠⲆⵠᐃΔ, ΔΔΔΔᐃ, 298, ΔΔᐃ],
		[ⵠⲆⲆ, ⵠ[77], ᐃΔΔⵠᐃ, ⲆⵠΔᐃΔ, 301, ⵠⵠⵠ],
		[1, ⵠ[77], ⵠΔⵠᐃⵠ, 27, 296, ΔⲆⲆ],
		[1, ⵠ[77], 19, 25, 292, ⵠⲆΔ],
		[1, ⵠ[77], 19, 23, 301, 0],
		[1, ⵠ[77], 19, 28, 301, 0],
		[1, ⵠ[77], ⵠⲆⵠᐃΔ, 35, 297, 0],
		[ⵠΔᐃ, ⵠ[77], Δᐃⵠⵠⵠ, 37, 301, ᐃᐃⲆ],
		[1, ⵠ[77], 19, 43, 301, Ⲇᐃⵠ],
		[ΔⵠΔ, ⵠ[77], ⵠΔⵠᐃⵠ, 46, 294, ⵠⲆΔ],
		[1, ⵠ[77], 19, 46, 288, ᐃᐃⲆ],
		[1, ⵠ[77], ⲆᐃΔⲆΔ, 40, 287, ⵠⲆΔ],
		[1, ⵠ[77], ᐃΔΔⵠᐃ, 50, 301, ⵠⲆᐃ],
		[ⵠΔᐃ, ⵠ[77], 19, 58, 301, ΔⲆⲆ],
		[ⵠⲆⲆ, ⵠ[77], 19, 64, 301, 0],
		[ΔⵠΔ, ⵠ[77], ⲆⵠⵠⲆⵠ, 71, 301, 0],
		[ⵠⲆⲆ, ⵠ[77], 19, 80, 301, ⵠⲆΔ],
		[ⵠⲆⲆ, ⵠ[77], 19, 87, 301, ⵠⲆΔ],
		[ⵠΔᐃ, ⵠ[77], 19, 86, 294, ΔΔᐃ],
		[1, ⵠ[77], Δᐃᐃⵠᐃ, 87, 290, 0],
		[ⵠΔᐃ, ⵠ[77], 19, 82, 286, 0],
		[Ⲇⵠᐃ, ⵠ[77], 19, 75, 285, 0],
		[1, ⵠ[77], 19, 66, 292, ⵠᐃⲆ],
		[ᐃⲆΔ, ⵠ[77], Δᐃᐃⵠᐃ, 66, 288, ΔΔᐃ],
		[1, ⵠ[77], ᐃΔΔⵠᐃ, 58, 288, 0],
		[1, ⵠ[77], 19, 67, 282, 0],
		[1, ⵠ[77], 19, 61, 281, ⵠⲆΔ],
		[ᐃᐃΔ, ⵠ[77], ΔΔⵠⲆⲆ, 60, 295, 0],
		[Ⲇⵠᐃ, ⵠ[77], ⵠΔⵠᐃⵠ, 50, 282, 0],
		[1, ⵠ[77], ⲆⵠⵠⲆⵠ, 47, 283, Ⲇᐃⵠ],
		[ⲆᐃΔ, ⵠ[77], 19, 48, 281, Ⲇᐃⵠ],
		[1, ⵠ[77], 19, 44, 277, 0],
		[1, ⵠ[77], ⲆᐃΔⲆΔ, 41, 282, 0],
		[1, ⵠ[77], 19, 38, 281, ΔⲆⲆ],
		[1, ⵠ[77], ᐃᐃⲆⵠᐃ, 42, 288, Ⲇᐃⵠ],
		[1, ⵠ[77], 19, 52, 281, ⵠⲆᐃ],
		[1, ⵠ[77], ⵠΔⵠᐃⵠ, 50, 275, 0],
		[1, ⵠ[77], ᐃᐃⲆⵠᐃ, 39, 277, 0],
		[1, ⵠ[77], ⵠΔⵠᐃⵠ, 38, 284, ⵠⲆᐃ],
		[1, ⵠ[77], 19, 51, 285, 0],
		[Ⲇⵠᐃ, ⵠ[77], ⵠⵠΔᐃⲆ, 38, 278, 0],
		[ᐃⲆΔ, ⵠ[77], 19, 47, 272, 0],
		[ΔⵠΔ, ⵠ[77], Δᐃᐃⵠᐃ, 44, 267, 0],
		[1, ⵠ[77], 19, 76, 280, ⵠⲆᐃ],
		[ⵠⲆⲆ, ⵠ[77], 19, 78, 272, 0],
		[1, ⵠ[77], ΔΔⵠⲆⲆ, 68, 275, 0],
		[ⵠⲆⲆ, ⵠ[77], ᐃᐃⲆⵠᐃ, 70, 265, Ⲇᐃⵠ],
		[1, ⵠ[77], ᐃΔΔⵠᐃ, 65, 263, Ⲇᐃⵠ],
		[1, ⵠ[77], 19, 64, 262, ᐃᐃᐃ],
		[ᐃᐃΔ, ⵠ[77], ᐃᐃⲆⵠᐃ, 60, 268, 0],
		[ᐃⲆΔ, ⵠ[77], ⵠΔⵠᐃⵠ, 56, 266, ⵠⲆᐃ],
		[ᐃⲆΔ, ⵠ[77], 19, 55, 260, 0],
		[1, ⵠ[77], 19, 59, 258, ⵠⵠⵠ],
		[1, ⵠ[77], ᐃΔΔⵠᐃ, 62, ⵠᐃⵠᐃⵠ, ⵠⲆᐃ],
		[Δⵠᐃ, ⵠ[77], 19, 67, 253, ⵠⲆΔ],
		[1, ⵠ[77], 19, 69, 256, 0],
		[ΔⵠΔ, ⵠ[77], ⵠΔⵠᐃⵠ, 44, 253, 0],
		[ⵠⲆⲆ, ⵠ[77], 19, 44, 250, ⵠⵠⵠ],
		[1, ⵠ[77], 19, 36, 245, 0],
		[ⵠΔᐃ, ⵠ[77], ⵠΔⵠᐃⵠ, 39, 239, ᐃᐃⲆ],
		[1, ⵠ[77], 19, 42, 234, ΔⲆⲆ],
		[1, ⵠ[77], ᐃΔΔⵠᐃ, 37, 235, ΔΔᐃ],
		[1, ⵠ[77], ᐃᐃⲆⵠᐃ, 45, 226, 0],
		[ᐃᐃΔ, ⵠ[77], 19, 46, 222, ᐃᐃⲆ],
		[ⲆᐃΔ, ⵠ[77], ΔΔⵠⲆⲆ, 51, 218, 0],
		[1, ⵠ[77], ⲆⵠⵠⲆⵠ, 68, 218, 0],
		[1, ⵠ[77], ᐃᐃⲆⵠᐃ, 74, 224, 0],
		[Ⲇⵠᐃ, ⵠ[77], 19, 76, 218, 0],
		[ⲆᐃΔ, ⵠ[77], 19, 84, 221, Ⲇᐃⵠ],
		[Ⲇⵠᐃ, ⵠ[77], ⵠΔⵠᐃⵠ, 88, 223, ⵠᐃⲆ],
		[Ⲇⵠᐃ, ⵠ[77], 19, 76, 230, 0],
		[1, ⵠ[77], 19, 86, 234, ᐃᐃⲆ],
		[1, ⵠ[77], ⲆⵠⵠⲆⵠ, 79, 237, ⵠⲆᐃ],
		[1, ⵠ[77], ᐃΔΔⵠᐃ, 75, 243, 0],
		[ⵠΔᐃ, ⵠ[77], ⵠⵠΔᐃⲆ, 81, 245, ⵠⲆᐃ],
		[ⲆᐃΔ, ⵠ[77], ⵠⲆⵠᐃΔ, 83, 247, 0],
		[ⵠⲆⲆ, ⵠ[77], 19, 88, 247, ⵠⵠⵠ],
		[1, ⵠ[77], 19, 84, 254, ᐃᐃᐃ],
		[1, ⵠ[77], 19, 86, 251, ΔΔᐃ],
		[ΔⵠΔ, ⵠ[77], 19, 85, 260, ⵠⲆΔ],
		[1, ⵠ[77], 19, 79, 260, Ⲇᐃⵠ],
		[Δⵠᐃ, ⵠ[77], ⵠΔⵠᐃⵠ, 76, 251, ⵠᐃⲆ],
		[1, ⵠ[77], ⲆⵠⵠⲆⵠ, 72, 251, ᐃᐃᐃ],
		[ⲆᐃΔ, ⵠ[77], 19, 69, 251, ΔΔᐃ],
		[ᐃᐃΔ, ⵠ[77], ᐃΔΔⵠᐃ, 87, 266, 0],
		[1, ⵠ[77], 19, 89, 270, ᐃᐃⲆ],
		[1, ⵠ[77], 19, 87, 271, ΔΔᐃ],
		[Ⲇⵠᐃ, ⵠ[77], 19, 82, 277, ⵠᐃⲆ],
		[1, ⵠ[77], 19, 87, 284, ⵠⲆᐃ],
		[1, ⵠ[77], ⵠⲆⵠᐃΔ, 87, 237, ⵠⲆᐃ],
		[ᐃⲆΔ, ⵠ[77], Δᐃᐃⵠᐃ, 88, 179, 0],
		[Ⲇⵠᐃ, ⵠ[77], 19, 50, 191, 0],
		[1, ⵠ[77], Δᐃᐃⵠᐃ, 52, 221, 0],
		[ⵠΔᐃ, ⵠ[77], 19, 34, 234, ⵠⲆᐃ],
		[1, ⵠ[77], Δᐃᐃⵠᐃ, 27, 233, ΔΔᐃ],
		[1, ⵠ[77], ⵠΔⵠᐃⵠ, 37, 293, ⵠᐃⲆ],
		[1, ⵠ[77], 29, ᐃⵠⵠΔⲆ, 181, ΔⲆⲆ],
		[1, ⵠ[77], 29, Δᐃᐃⵠⵠ, 180, 0],
		[ⵠⲆⲆ, ⵠ[77], 30, ⵠΔᐃⲆⲆ, 186, ᐃᐃⲆ],
		[ⵠΔᐃ, ⵠ[77], 31, 24, 183, Ⲇᐃⵠ],
		[1, ⵠ[77], 32, 33, 185, 0],
		[1, ⵠ[77], 32, 37, 182, 0],
		[ΔⵠΔ, ⵠ[77], 29, 45, 183, ⵠⲆΔ],
		[ΔⵠΔ, ⵠ[77], 30, 48, 183, 0],
		[1, ⵠ[77], 30, 58, 181, 0],
		[1, ⵠ[77], 30, 66, 188, ΔΔᐃ],
		[ᐃᐃΔ, ⵠ[77], 30, 66, 182, ΔⲆⲆ],
		[1, ⵠ[77], 29, 63, 196, 0],
		[ⵠⲆⲆ, ⵠ[77], 29, 54, 194, 0],
		[1, ⵠ[77], 30, 79, 189, ⵠᐃⲆ],
		[ᐃᐃΔ, ⵠ[77], 30, 87, 182, 0],
		[1, ⵠ[77], 30, 83, 185, Ⲇᐃⵠ],
		[ⵠⲆⲆ, ⵠ[77], 29, 88, 189, 0],
		[1, ⵠ[77], 29, 85, 202, ᐃᐃⲆ],
		[ⲆᐃΔ, ⵠ[77], 31, 82, 203, ΔⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[77], 32, 80, 201, 0],
		[1, ⵠ[77], 32, 87, 209, 0],
		[1, ⵠ[77], 32, 83, 214, 0],
		[ᐃᐃΔ, ⵠ[77], 30, 88, 220, Ⲇᐃⵠ],
		[ᐃⲆΔ, ⵠ[77], 30, 78, 229, Ⲇᐃⵠ],
		[1, ⵠ[77], 30, 73, 223, 0],
		[Ⲇⵠᐃ, ⵠ[77], 29, 74, 217, ⵠⵠⵠ],
		[1, ⵠ[77], 29, 67, 217, 0],
		[1, ⵠ[77], 30, 72, 208, ᐃᐃⲆ],
		[ᐃⲆΔ, ⵠ[77], 30, 73, 199, 0],
		[ⲆᐃΔ, ⵠ[77], 30, 65, 207, 0],
		[ΔⵠΔ, ⵠ[77], 29, 63, 210, ⵠⵠⵠ],
		[Δⵠᐃ, ⵠ[77], 29, 50, 204, 0],
		[1, ⵠ[77], 30, 41, 205, 0],
		[1, ⵠ[77], 29, 35, 205, ΔΔᐃ],
		[1, ⵠ[77], 30, 27, 202, ⵠⵠⵠ],
		[ⲆᐃΔ, ⵠ[77], 30, 20, 201, 0],
		[Ⲇⵠᐃ, ⵠ[77], 29, ΔⵠⵠᐃⲆ, 203, ΔΔᐃ],
		[ⵠⲆⲆ, ⵠ[77], 29, 14, 196, ΔⲆⲆ],
		[1, ⵠ[77], 29, 24, 187, 0],
		[1, ⵠ[77], 29, 28, 223, ⵠᐃⲆ],
		[ⵠⲆⲆ, ⵠ[77], 29, 32, 212, 0],
		[ᐃⲆΔ, ⵠ[77], 30, 28, 214, 0],
		[ᐃⲆΔ, ⵠ[77], 31, 24, 218, 0],
		[1, ⵠ[77], 29, 36, 219, ⵠⲆᐃ],
		[1, ⵠ[77], 29, 37, 217, ⵠⲆΔ],
		[ⵠΔᐃ, ⵠ[77], 29, 52, 217, ᐃᐃⲆ],
		[Δⵠᐃ, ⵠ[77], 29, 59, 217, 0],
		[ᐃⲆΔ, ⵠ[77], 29, 69, 231, 0],
		[1, ⵠ[77], 29, 64, 242, 0],
		[1, ⵠ[77], 30, 53, 253, ᐃᐃᐃ],
		[Δⵠᐃ, ⵠ[77], 30, 45, 250, Ⲇᐃⵠ],
		[Ⲇⵠᐃ, ⵠ[77], 30, 58, 261, 0],
		[1, ⵠ[77], 30, 73, 276, Ⲇᐃⵠ],
		[ⵠⲆⲆ, ⵠ[77], 30, 64, 276, ᐃᐃᐃ],
		[ᐃᐃΔ, ⵠ[77], 30, 82, 285, ⵠᐃⲆ],
		[1, ⵠ[77], 30, 65, 293, 0],
		[ⵠΔᐃ, ⵠ[77], 30, 56, 288, ⵠⵠⵠ],
		[1, ⵠ[77], 30, 45, 296, ⵠⵠⵠ],
		[1, ⵠ[77], 30, 40, 288, ΔΔᐃ],
		[1, ⵠ[77], 30, 37, 283, 0],
		[1, ⵠ[77], 30, 53, 280, 0],
		[1, ⵠ[77], 30, 41, 277, ⵠᐃⲆ],
		[1, ⵠ[77], 29, 28, 296, 0],
		[Δⵠᐃ, ⵠ[77], 29, 18, 292, 0],
		[ΔⵠΔ, ⵠ[77], 29, 24, 284, ⵠⲆΔ],
		[1, ⵠ[77], 30, 10, 295, ᐃᐃⲆ],
		[1, ⵠ[77], 30, ⵠΔΔΔⵠ, 286, ΔⲆⲆ],
		[ⵠΔᐃ, ⵠ[77], 30, 15, 279, 0],
		[ⵠⲆⲆ, ⵠ[77], 30, Δⵠᐃⵠᐃ, 269, ΔΔᐃ],
		[ⲆᐃΔ, ⵠ[77], 30, 21, 259, 0],
		[1, ⵠ[77], 30, 12, ΔᐃΔᐃⲆΔⲆ, ΔΔᐃ],
		[1, ⵠ[77], 30, 31, 245, ⵠⲆΔ],
		[1, ⵠ[77], 30, 12, 240, ⵠⲆΔ],
		[1, ⵠ[77], 30, 28, 235, ⵠⲆᐃ],
		[1, ⵠ[77], 30, ⲆⵠⵠΔⲆ, 226, ΔⲆⲆ],
		[1, ⵠ[77], 30, 39, 231, 0],
		[1, ⵠ[77], 30, 61, 226, 0],
		[ΔⵠΔ, "r", 96, 262, 0],
		[ᐃⲆΔ, "r", 97, 262, ᐃᐃᐃ],
		[1, "r", 98, 262, ⵠⲆᐃ],
		[ᐃᐃΔ, "r", 97, 270, ⵠⵠⵠ],
		[1, "r", 97, 271, ⵠⲆᐃ],
		[1, "r", 97, 272, 0],
		[ⵠⲆⲆ, "r", 97, 273, ⵠⵠⵠ],
		[ⵠΔᐃ, "r", 97, 274, ΔΔᐃ],
		[ᐃⲆΔ, "r", 97, 275, 0],
		[ᐃⲆΔ, "r", 97, 276, 0],
		[Ⲇⵠᐃ, "r", 97, 277, ⵠⲆᐃ],
		[1, "r", 97, 278, ΔΔᐃ],
		[ⵠΔᐃ, "r", 98, 270, ΔΔᐃ],
		[1, "r", 98, 271, 0],
		[ᐃⲆΔ, "r", 98, 272, ⵠⲆΔ],
		[Ⲇⵠᐃ, "r", 98, 273, 0],
		[1, "r", 98, 274, 0],
		[ⵠΔᐃ, "r", 98, 275, 0],
		[ⲆᐃΔ, "r", 98, 276, 0],
		[Ⲇⵠᐃ, "r", 98, 277, 0],
		[ⵠΔᐃ, "r", 98, 278, 0],
		[1, "r", 96, 283, 0],
		[1, "r", 97, 283, 0],
		[ⵠⲆⲆ, "r", 97, 284, ᐃᐃᐃ],
		[1, "r", 97, 285, ⵠⲆΔ],
		[1, "r", 98, 283, ᐃᐃᐃ],
		[ᐃᐃΔ, "r", 98, 284, 0],
		[1, "r", 98, 285, 0],
		[Δⵠᐃ, "r", 96, 270, ⵠᐃⲆ],
		[Δⵠᐃ, "r", 96, 271, 0],
		[ᐃⲆΔ, "r", 96, 272, 0],
		[1, "r", 96, 273, ΔΔᐃ],
		[1, "r", 96, 274, 0],
		[ⲆᐃΔ, "r", 96, 275, Ⲇᐃⵠ],
		[1, "r", 96, 276, 0],
		[1, "r", 96, 277, ᐃᐃᐃ],
		[1, "r", 96, 278, ⵠᐃⲆ],
		[1, "r", 44, 248, ⵠⲆᐃ],
		[ⲆᐃΔ, ⵠ[77], 16, 94, 290, ⵠⲆᐃ],
		[1, ⵠ[77], ΔᐃᐃΔΔ, 94, 252, ᐃᐃᐃ],
		[Ⲇⵠᐃ, ⵠ[77], 16, 94, 228, 0],
		[ᐃᐃΔ, ⵠ[77], 17, 94, 200, ⵠᐃⲆ],
		[ⵠⲆⲆ, "r", 95, 282, 1],
		[Ⲇⵠᐃ, "r", 95, 281, ᐃⲆΔ],
		[1, "r", 94, 281, ᐃⲆΔ],
		[ⵠⲆⲆ, "r", 90, 281, ⵠΔᐃ],
		[1, "r", 91, 282, ΔⵠΔ],
		[1, "r", 89, 281, ᐃᐃΔ],
		[Ⲇⵠᐃ, "r", 85, 276, ⵠⲆⲆ],
		[1, "r", 85, 277, 1],
		[1, "r", 86, 278, ⵠΔᐃ],
		[Ⲇⵠᐃ, "p", 0, 85, 279, 1],
		[ᐃᐃΔ, "r", 86, 279, ⵠⲆⲆ],
		[1, "r", 87, 280, 1],
		[1, "r", 96, 281, 0],
		[ᐃⲆΔ, "r", 97, 281, ᐃᐃⲆ],
		[Δⵠᐃ, "r", 98, 281, ⵠⲆΔ],
		[ⵠⲆⲆ, "r", 98, 282, ΔΔᐃ],
		[ΔⵠΔ, "r", 97, 282, Ⲇᐃⵠ],
		[1, "r", 96, 282, 0],
		[1, "r", 68, 261, 1],
		[1, ⵠ[176], ⵠⲆⲆ, 94, 168, ⵠⲆᐃ],
		[ⵠΔᐃ, ⵠ[176], 2, 94, 151, 0],
		[ⵠⲆⲆ, ⵠ[176], 1, 94, 138, 0],
		[1, ⵠ[176], ⵠⲆⲆ, 93, 124, ᐃᐃⲆ],
		[ᐃᐃΔ, ⵠ[176], 1, 94, 129, 0],
		[ⵠΔᐃ, ⵠ[176], 1, 93, 113, ᐃᐃᐃ],
		[ᐃᐃΔ, ⵠ[176], 1, 94, 102, ΔΔᐃ],
		[ᐃⲆΔ, ⵠ[176], 1, 94, 93, ⵠⲆΔ],
		[1, ⵠ[176], 1, 93, 90, 0],
		[ⵠⲆⲆ, ⵠ[176], 1, 94, 79, ᐃᐃⲆ],
		[ᐃⲆΔ, ⵠ[176], 1, 94, 76, 0],
		[ᐃⲆΔ, ⵠ[176], 1, 93, 70, ΔΔᐃ],
		[1, ⵠ[176], ⵠⲆⲆ, 93, 63, 0],
		[1, ⵠ[176], ⲆᐃΔ, 94, 53, ΔⲆⲆ],
		[1, ⵠ[176], ⲆᐃΔ, 93, 10, Ⲇᐃⵠ],
		[1, ⵠ[176], ⵠⲆⲆ, 85, 8, Ⲇᐃⵠ],
		[ᐃᐃΔ, ⵠ[176], 1, 94, 12, ᐃᐃⲆ],
		[ⵠΔᐃ, ⵠ[176], ᐃᐃΔ, 66, ⲆᐃΔⲆⵠ, 0],
		[1, ⵠ[176], ⲆᐃΔ, 69, 9, ΔΔᐃ],
		[ᐃⲆΔ, ⵠ[176], 2, 68, 14, ΔΔᐃ],
		[ⵠΔᐃ, ⵠ[176], 2, 66, 25, 0],
		[1, ⵠ[176], ᐃᐃΔⵠ, 92, ⵠΔᐃᐃΔ, 0],
		[ⲆᐃΔ, ⵠ[176], 2, 94, 14, 0],
		[ⵠΔᐃ, ⵠ[176], 2, 87, ⵠⲆᐃᐃΔ, ΔΔᐃ],
		[Ⲇⵠᐃ, ⵠ[176], 2, 71, 9, ⵠᐃⲆ],
		[1, ⵠ[176], ᐃⲆᐃⵠ, 90, ⲆᐃᐃⲆᐃ, ⵠᐃⲆ],
		[Δⵠᐃ, ⵠ[176], 2, 91, ⲆⵠⵠΔⲆ, ΔⲆⲆ],
		[ⲆᐃΔ, ⵠ[176], 1, 74, ⲆᐃᐃⲆᐃ, Ⲇᐃⵠ],
		[1, ⵠ[176], ᐃⲆᐃᐃ, 72, 12, 0],
		[ΔⵠΔ, ⵠ[176], 2, 75, 13, 0],
		[1, ⵠ[176], 2, 74, ⵠΔᐃⵠⲆ, ⵠⲆΔ],
		[Ⲇⵠᐃ, ⵠ[176], 2, 84, 12, 0],
		[Δⵠᐃ, ⵠ[176], ⵠⵠⵠᐃ, 81, 14, ᐃᐃⲆ],
		[1, ⵠ[176], 1, 84, 13, ⵠᐃⲆ],
		[ΔⵠΔ, ⵠ[176], ⵠⲆⲆ, 84, ΔΔⵠⲆⲆ, 0],
		[1, ⵠ[176], ⵠΔᐃ, ⲆᐃⵠᐃΔ, 9, 0],
		[1, ⵠ[176], 1, ⲆΔⲆⵠⵠ, 14, ⵠⲆᐃ],
		[1, ⵠ[176], ⵠΔᐃ, ΔΔⲆᐃᐃ, 22, ⵠᐃⲆ],
		[ΔⵠΔ, ⵠ[176], Δⵠᐃ, ΔΔⵠΔⲆ, 34, 0],
		[ⲆᐃΔ, ⵠ[176], ᐃⲆΔ, 12, 24, ΔΔᐃ],
		[1, ⵠ[176], 2, 8, 24, ΔΔᐃ],
		[1, ⵠ[176], ᐃⲆᐃᐃ, ⵠⲆᐃᐃΔ, 21, 0],
		[ᐃᐃΔ, ⵠ[176], ΔΔⲆᐃ, 31, 10, ⵠⵠⵠ],
		[1, ⵠ[176], 2, 33, 27, 0],
		[1, ⵠ[176], 2, 9, 34, 0],
		[1, ⵠ[176], ᐃᐃᐃⵠ, Δᐃᐃⵠⵠ, 19, 0],
		[1, ⵠ[176], ⵠⲆⲆ, ⲆⵠⲆᐃᐃᐃⲆ, ⵠⲆⵠⵠⲆ, 0],
		[1, ⵠ[176], 2, 13, ⵠⲆᐃᐃΔ, 0],
		[ᐃⲆΔ, ⵠ[176], ᐃⲆᐃⵠ, 15, ⲆΔⲆΔⵠ, 0],
		[ΔⵠΔ, ⵠ[176], ᐃᐃΔⵠ, ᐃΔⵠⵠⲆ, ᐃΔΔⲆⲆ, ΔΔᐃ],
		[1, ⵠ[176], 2, 9, 10, 0],
		[ᐃᐃΔ, ⵠ[176], ᐃᐃⲆⲆ, ᐃΔⵠⵠⲆ, ΔΔⵠⲆᐃ, 0],
		[ⲆᐃΔ, ⵠ[176], ᐃᐃΔⵠ, ⲆⲆⵠⲆⵠ, 23, 0],
		[1, ⵠ[176], ᐃᐃᐃⵠ, 34, 29, ᐃᐃⲆ],
		[1, ⵠ[176], 2, 27, 18, 0],
		[1, ⵠ[176], 2, 25, 21, ⵠⲆᐃ],
		[Ⲇⵠᐃ, ⵠ[176], 2, 20, 18, 0],
		[1, ⵠ[176], ᐃᐃᐃⵠ, ΔΔⵠᐃᐃ, 21, ⵠⲆᐃ],
		[1, ⵠ[176], 2, 29, ⵠΔᐃᐃΔ, Ⲇᐃⵠ],
		[1, ⵠ[176], 2, 13, 14, 0],
		[1, ⵠ[176], ᐃⲆᐃᐃ, 9, 38, ᐃᐃᐃ],
		[1, ⵠ[176], ⵠⵠⵠᐃ, 21, 39, 0],
		[ⵠΔᐃ, ⵠ[176], 2, 84, 26, ⵠᐃⲆ],
		[ⵠΔᐃ, ⵠ[176], 2, 77, 25, ⵠᐃⲆ],
		[ⵠΔᐃ, ⵠ[176], 2, 86, 35, ᐃᐃᐃ],
		[1, ⵠ[176], ΔⵠΔ, 70, 35, 0],
		[ⵠⲆⲆ, ⵠ[176], 2, 72, 36, ΔΔᐃ],
		[ⵠΔᐃ, ⵠ[176], 2, 73, 31, 0],
		[1, ⵠ[176], ᐃⲆᐃᐃ, 89, 39, ⵠⲆᐃ],
		[Ⲇⵠᐃ, ⵠ[176], ᐃᐃᐃⵠ, 65, 40, ΔⲆⲆ],
		[ⲆᐃΔ, ⵠ[176], 2, 92, 32, ΔⲆⲆ],
		[1, ⵠ[176], 2, 90, 28, 0],
		[1, ⵠ[77], 22, 25, 266, 0],
		[1, ⵠ[77], 22, ⲆⵠᐃⲆⵠᐃⵠ, 206, 0],
		[Ⲇⵠᐃ, ⵠ[77], ΔⲆᐃⵠⵠΔᐃ, 8, 184, ΔΔᐃ],
		[ᐃⲆΔ, ⵠ[77], ⵠⲆⵠᐃΔ, 22, 183, 0],
		[ᐃᐃΔ, ⵠ[77], 19, 35, 188, 0],
		[1, ⵠ[77], 19, 36, 192, 0],
		[ᐃᐃΔ, ⵠ[77], 19, 50, 277, 0],
		[ΔⵠΔ, ⵠ[77], ⵠⵠΔᐃⲆ, 35, 279, ⵠⲆᐃ],
		[1, "t", 4, 7, 178, 0],
		[ᐃᐃΔ, "t", 1, 7, 179, 0],
		[ᐃⲆΔ, "t", 3, ⲆΔᐃⲆᐃ, 180, 0],
		[1, "t", ᐃᐃⲆⲆ, ᐃᐃⵠᐃᐃ, 181, ΔΔᐃ],
		[1, "t", 5, 7, 182, ⵠᐃⲆ],
		[ⵠΔᐃ, "t", ᐃΔᐃΔ, ᐃⲆᐃΔΔ, 183, 0],
		[1, "t", 3, ᐃⲆᐃΔΔ, 184, 0],
		[ᐃⲆΔ, "t", ⵠⲆΔⵠ, 7, 185, ⵠᐃⲆ],
		[1, "t", 2, 7, 186, Ⲇᐃⵠ],
		[ᐃⲆΔ, "t", 1, 7, 187, 0],
		[1, "t", 4, ⲆΔⲆⵠⵠ, 188, ⵠᐃⲆ],
		[ⵠⲆⲆ, "t", ⲆⵠⲆᐃ, ⲆΔᐃⲆᐃ, 189, 0],
		[1, "t", ⵠⲆⲆᐃ, ᐃⲆᐃΔΔ, 190, ΔΔᐃ],
		[1, "t", ⲆᐃΔ, ᐃᐃⵠᐃᐃ, 191, ΔΔᐃ],
		[1, "t", 3, ᐃⲆᐃΔΔ, 192, 0],
		[1, "t", 4, 7, 193, 0],
		[1, "t", 3, 7, 194, ⵠᐃⲆ],
		[1, "t", ΔⲆⵠⵠ, ⲆⵠⲆΔᐃ, 195, 0],
		[ΔⵠΔ, "t", ᐃᐃΔⵠ, ΔΔⵠΔⲆ, 196, Ⲇᐃⵠ],
		[ⲆᐃΔ, "t", ⵠⲆΔⵠ, ⵠⵠⵠⵠⵠ, 197, 0],
		[ⲆᐃΔ, "b", ⲆⲆΔⲆ, 7, 198, ⵠⲆΔ],
		[1, "t", 4, 7, 199, 0],
		[1, "t", ᐃⲆᐃⵠ, ᐃᐃⵠᐃᐃ, 200, 0],
		[1, "t", 5, 7, 201, 0],
		[Δⵠᐃ, "t", 2, ΔΔⵠΔⲆ, 202, 0],
		[ᐃⲆΔ, "t", ΔⵠⵠⲆ, ⲆΔⲆⵠⵠ, 203, 0],
		[Ⲇⵠᐃ, "t", 2, ⵠⵠⵠⵠⵠ, 204, ΔΔᐃ],
		[ᐃⲆΔ, "t", ⲆᐃⲆΔ, 7, 205, 0],
		[Ⲇⵠᐃ, "t", 2, ⲆΔᐃⲆᐃ, 206, ⵠⵠⵠ],
		[Δⵠᐃ, "t", ⵠⲆⲆ, 7, 207, ⵠⲆΔ],
		[Ⲇⵠᐃ, "t", Ⲇⵠⵠⵠ, ⲆΔⲆⵠⵠ, 208, ⵠⲆΔ],
		[1, "t", 3, 7, 209, ΔΔᐃ],
		[ᐃⲆΔ, "t", ᐃⲆΔ, 7, 210, ᐃᐃᐃ],
		[ⵠⲆⲆ, "b", ⵠⲆᐃ, 7, 211, ΔⲆⲆ],
		[1, "t", ⲆⵠⲆᐃ, 7, 212, 0],
		[1, "t", ⵠⲆⲆⵠ, 7, 213, ⵠⲆΔ],
		[ⵠⲆⲆ, "t", ⵠⵠΔⵠ, 7, 214, 0],
		[ⵠΔᐃ, "t", ⵠⵠᐃᐃ, ⲆΔⲆⵠⵠ, 215, ΔⲆⲆ],
		[1, "t", ᐃᐃᐃⲆ, ⲆⵠⲆΔᐃ, 216, ⵠⲆᐃ],
		[1, "t", 3, 7, 217, 0],
		[1, "t", Ⲇⵠᐃ, ⲆⲆΔΔᐃ, 218, 0],
		[ᐃⲆΔ, "t", 4, 7, 219, ΔΔᐃ],
		[1, "b", 2, ᐃⲆᐃΔΔ, 220, 0],
		[1, "t", ᐃⲆΔ, ⲆⵠⲆΔᐃ, 221, ⵠⲆᐃ],
		[Δⵠᐃ, "t", ᐃᐃⲆⲆ, ΔᐃⵠⲆΔ, 222, ΔⲆⲆ],
		[1, "t", ⵠⲆΔⵠ, 7, 223, ⵠⲆᐃ],
		[ⵠⲆⲆ, "t", ⲆΔᐃⲆ, ΔᐃⵠⲆΔ, 224, 0],
		[1, "t", ΔⵠΔ, 7, 225, 0],
		[1, "t", 4, ᐃⲆᐃΔΔ, 226, 0],
		[Ⲇⵠᐃ, "t", ᐃⲆᐃᐃ, 7, 227, ᐃᐃᐃ],
		[Ⲇⵠᐃ, "t", Ⲇᐃⵠᐃ, 7, 228, ⵠⲆᐃ],
		[1, "t", 3, 7, 229, ⵠᐃⲆ],
		[1, "t", ᐃⲆΔ, 7, 230, 0],
		[1, "t", ᐃⲆᐃⲆ, 7, 231, ⵠⲆΔ],
		[1, "b", 2, ᐃⲆᐃΔΔ, 232, 0],
		[1, "t", 5, 7, 233, Ⲇᐃⵠ],
		[ᐃᐃΔ, "t", Δⵠᐃ, 7, 234, ⵠⲆᐃ],
		[1, "t", ΔⲆⵠᐃ, ΔΔⵠΔⲆ, 235, ᐃᐃᐃ],
		[ⲆᐃΔ, "t", ⵠⲆⲆⵠ, ᐃᐃⵠᐃᐃ, 236, 0],
		[1, "t", ᐃᐃⲆⲆ, 7, 237, ⵠⲆᐃ],
		[1, "t", ⲆⵠΔΔ, ⲆΔⲆⵠⵠ, 238, ΔΔᐃ],
		[1, "b", ᐃⵠΔⵠ, 7, 239, ᐃᐃᐃ],
		[1, "t", ⲆⲆΔⲆ, ⲆⲆΔΔᐃ, 240, ⵠⲆΔ],
		[1, "t", 1, ⵠⵠⵠⵠⵠ, 241, ⵠᐃⲆ],
		[1, "t", ΔΔⲆᐃ, 7, 242, ⵠⲆᐃ],
		[ᐃⲆΔ, "t", 4, 7, 243, 0],
		[ⵠΔᐃ, "t", ΔⲆⵠᐃ, ⲆⵠⲆΔᐃ, 244, 0],
		[1, "t", Ⲇⵠⵠⵠ, ⲆΔⲆⵠⵠ, 245, ⵠⲆΔ],
		[1, "t", ᐃⲆΔ, 7, 246, Ⲇᐃⵠ],
		[1, "b", 0, 7, 247, ΔΔᐃ],
		[ᐃᐃΔ, "t", ⵠⵠΔⵠ, 7, 248, ᐃᐃⲆ],
		[ⲆᐃΔ, "t", ᐃᐃΔᐃ, ΔΔⵠΔⲆ, 249, ⵠᐃⲆ],
		[1, "t", ᐃᐃΔⵠ, 7, 250, Ⲇᐃⵠ],
		[Ⲇⵠᐃ, "t", 1, ⲆΔᐃⲆᐃ, 251, 0],
		[1, "t", ᐃΔⵠⵠ, 7, 252, ΔⲆⲆ],
		[ᐃᐃΔ, "t", 3, ᐃᐃⵠᐃᐃ, 253, 0],
		[1, "t", ΔⲆⲆⵠ, ⲆΔⲆⵠⵠ, 254, ⵠⲆΔ],
		[1, "t", 1, 7, 255, ΔⲆⲆ],
		[ᐃⲆΔ, "t", ΔⵠⵠⲆ, 7, ᐃⲆᐃᐃΔᐃΔ, 0],
		[1, "t", 1, 7, 257, ⵠᐃⲆ],
		[1, "t", 2, ⲆΔⲆⵠⵠ, 258, ᐃᐃⲆ],
		[1, "t", 5, ⲆⵠⲆΔᐃ, 260, 0],
		[1, "t", ΔⲆⵠᐃ, 7, 259, 0],
		[1, "t", 1, ΔΔⵠΔⲆ, 261, 0],
		[1, "t", 3, ⲆΔⲆⵠⵠ, 262, ⵠⵠⵠ],
		[1, "t", ⵠⲆΔⵠ, ΔᐃⵠⲆΔ, 263, ⵠⲆᐃ],
		[1, "t", ⵠⲆⲆ, ΔΔⵠΔⲆ, 264, ΔⲆⲆ],
		[ᐃᐃΔ, "t", ᐃᐃᐃⵠ, 7, 265, ⵠᐃⲆ],
		[ⵠⲆⲆ, "t", ⵠⵠᐃᐃ, ⲆⵠⲆΔᐃ, 266, ᐃᐃⲆ],
		[1, "t", ᐃᐃᐃⵠ, 7, 267, 0],
		[1, "t", 2, 7, 269, 0],
		[1, "b", 2, 7, 268, ᐃᐃⲆ],
		[1, "t", ᐃΔⵠⵠ, ᐃⲆᐃΔΔ, 270, ᐃᐃᐃ],
		[Ⲇⵠᐃ, "t", 1, ⲆⲆΔΔᐃ, 271, 0],
		[ⵠⲆⲆ, "t", ⲆⲆᐃᐃ, ⲆⲆΔΔᐃ, 272, 0],
		[1, "b", ᐃᐃⲆⲆ, ⲆΔⲆⵠⵠ, 273, Ⲇᐃⵠ],
		[ᐃᐃΔ, "t", ⵠⲆⲆⵠ, ⲆΔᐃⲆᐃ, 274, ⵠᐃⲆ],
		[1, "t", ᐃⲆᐃᐃ, 7, 275, 0],
		[1, "t", ΔⲆⵠⵠ, 7, 276, 0],
		[Ⲇⵠᐃ, "t", 5, ⲆΔᐃⲆᐃ, 277, ΔΔᐃ],
		[ᐃᐃΔ, "t", ᐃⲆᐃᐃ, ⲆⲆΔΔᐃ, 278, Ⲇᐃⵠ],
		[ᐃᐃΔ, "t", ⵠⲆⲆ, ΔΔⵠΔⲆ, 279, ΔⲆⲆ],
		[ᐃⲆΔ, "t", ᐃΔⵠⵠ, ᐃᐃⵠᐃᐃ, 280, ΔΔᐃ],
		[ⵠⲆⲆ, "b", 1, 7, 281, 0],
		[Δⵠᐃ, "t", 3, 7, 282, 0],
		[Ⲇⵠᐃ, "t", Ⲇⵠⵠⵠ, 7, 283, 0],
		[1, "t", 1, ⲆⵠⲆΔᐃ, 284, 0],
		[1, "t", 3, 7, 285, ⵠⵠⵠ],
		[1, "t", ⵠⵠᐃᐃ, 7, 286, ΔΔᐃ],
		[Ⲇⵠᐃ, "t", ⵠᐃᐃΔ, ⲆⲆΔΔᐃ, 288, 0],
		[1, "t", 2, 7, 287, ΔⲆⲆ],
		[ΔⵠΔ, "b", ⵠⵠⵠ, 7, 289, ⵠⲆᐃ],
		[ⵠΔᐃ, "t", 4, ᐃⲆᐃΔΔ, 290, ᐃᐃⲆ],
		[1, "t", ᐃⲆᐃⵠ, ΔᐃⵠⲆΔ, 291, 0],
		[1, "t", ΔⲆⵠⵠ, 7, 292, 0],
		[1, "t", 3, 7, 293, ᐃᐃᐃ],
		[Ⲇⵠᐃ, "t", ⲆᐃΔ, 7, 294, 0],
		[ⲆᐃΔ, "t", ⵠᐃᐃΔ, 7, 295, 0],
		[ᐃⲆΔ, "t", ΔⲆⵠᐃ, ΔᐃⵠⲆΔ, 296, 0],
		[1, "t", Δⵠᐃ, 7, 297, 0],
		[1, "t", 4, ⲆⵠⲆΔᐃ, 298, 0],
		[Ⲇⵠᐃ, "t", 2, 7, 299, 0],
		[1, "b", ⵠⲆᐃ, 7, 300, 0],
		[1, "t", ᐃⲆᐃⵠ, ᐃⲆᐃΔΔ, 301, 0],
		[ⵠⲆⲆ, "r", 196, 271, ΔΔᐃ],
		[ⵠⲆⲆ, "r", 199, 274, 0],
		[1, "r", 167, 238, 0],
		[ᐃᐃΔ, "r", 171, 240, ⵠᐃⲆ],
		[ⵠⲆⲆ, "r", 189, 207, ΔⲆⲆ],
		[ᐃᐃΔ, "r", 192, 209, ⵠⲆᐃ],
		[1, "r", 198, 271, 0],
		[1, "r", 197, 271, ΔΔᐃ],
		[1, "r", 198, 272, ⵠᐃⲆ],
		[ⵠⲆⲆ, "r", 197, 272, 0],
		[1, "r", 196, 272, ᐃᐃᐃ],
		[1, "r", 195, 272, 0],
		[1, "r", 199, 272, ΔΔᐃ],
		[1, "r", 199, 273, ⵠᐃⲆ],
		[1, "r", 198, 273, ΔⲆⲆ],
		[1, "r", 197, 273, ⵠⵠⵠ],
		[Δⵠᐃ, "r", 196, 273, ⵠⲆᐃ],
		[ΔⵠΔ, "r", 198, 274, ⵠⲆΔ],
		[1, "r", 197, 274, 0],
		[Δⵠᐃ, "r", 195, 273, ᐃᐃⲆ],
		[ᐃⲆΔ, "r", 196, 274, 0],
		[ⲆᐃΔ, "r", 198, 275, 0],
		[1, "r", 197, 275, 0],
		[ΔⵠΔ, "r", 200, 274, ΔⲆⲆ],
		[1, "r", 200, 273, 0],
		[ⵠⲆⲆ, "r", 199, 275, 0],
		[ⲆᐃΔ, ⵠ[267], ᐃᐃΔⵠ, 200, 272, ⵠⲆΔ],
		[1, ⵠ[267], ᐃⲆΔ, 195, 271, 0],
		[1, ⵠ[267], Ⲇᐃⵠ, 199, 268, 0],
		[ⵠΔᐃ, ⵠ[267], 0, 193, 277, ᐃᐃᐃ],
		[ΔⵠΔ, ⵠ[267], ⲆᐃΔ, 199, 276, 0],
		[1, "s", ᐃᐃΔ, 200, 275, ᐃⲆΔ],
		[1, "s", Δⵠᐃ, 194, 272, ᐃᐃΔ],
		[Ⲇⵠᐃ, "s", ᐃⲆᐃᐃ, 193, 270, 1],
		[1, "g", 2, 193, 273, 1],
		[ⲆᐃΔ, "g", 2, 201, 267, 1],
		[1, "m", ΔΔⲆᐃ, 220, 298, 1],
		[1, "m", 1, 219, 292, Ⲇⵠᐃ],
		[ⵠⲆⲆ, "m", 1, 214, 297, 1],
		[1, "r", 168, 238, ΔⲆⲆ],
		[1, "r", 169, 238, 0],
		[1, "r", 170, 238, 0],
		[ᐃⲆΔ, "r", 171, 239, Ⲇᐃⵠ],
		[1, "r", 170, 239, Ⲇᐃⵠ],
		[ᐃᐃΔ, "r", 169, 239, 0],
		[ᐃᐃΔ, "r", 168, 239, 0],
		[1, "r", 167, 239, 0],
		[1, "r", 166, 239, 0],
		[ᐃᐃΔ, "r", 166, 240, 0],
		[1, "r", 167, 240, ⵠⵠⵠ],
		[1, "r", 168, 240, 0],
		[Δⵠᐃ, "r", 169, 240, 0],
		[1, "r", 170, 240, ⵠⲆᐃ],
		[Ⲇⵠᐃ, "r", 168, 241, ⵠᐃⲆ],
		[ᐃⲆΔ, "r", 169, 241, 0],
		[ᐃᐃΔ, "r", 170, 241, ⵠⵠⵠ],
		[ⲆᐃΔ, "r", 171, 241, 0],
		[1, ⵠ[267], 2, 171, 238, ⵠⵠⵠ],
		[1, ⵠ[267], Ⲇⵠᐃ, 166, 238, ᐃᐃⲆ],
		[ⵠΔᐃ, ⵠ[267], ⵠᐃⲆ, 167, 237, ⵠⲆᐃ],
		[ΔⵠΔ, ⵠ[267], 0, 171, 242, 0],
		[ⲆᐃΔ, ⵠ[267], 0, 165, 243, ⵠᐃⲆ],
		[1, ⵠ[267], 0, 171, 235, ⵠⲆᐃ],
		[1, ⵠ[267], 0, 174, 241, ΔΔᐃ],
		[Δⵠᐃ, "s", 1, 165, 239, ᐃᐃΔ],
		[ᐃⲆΔ, "s", ⵠΔᐃ, 172, 241, 1],
		[ⲆᐃΔ, "s", ᐃᐃⲆ, 170, 237, 1],
		[ⲆᐃΔ, "s", 1, 171, 237, 1],
		[1, "s", 2, 174, 236, ᐃⲆΔ],
		[1, "s", ᐃᐃᐃⵠ, 162, 241, 1],
		[ⲆᐃΔ, "s", ᐃᐃᐃⵠ, 170, 246, ᐃᐃΔ],
		[1, "s", ᐃᐃⲆⲆ, 167, 235, 1],
		[ΔⵠΔ, "s", 2, 176, 243, ⵠⲆⲆ],
		[1, "r", 190, 207, ΔⲆⲆ],
		[1, "r", 191, 207, 0],
		[1, "r", 192, 208, ΔΔᐃ],
		[ⵠⲆⲆ, "r", 191, 208, ⵠⲆΔ],
		[Ⲇⵠᐃ, "r", 190, 208, ⵠⲆᐃ],
		[ⵠⲆⲆ, "r", 189, 208, 0],
		[Δⵠᐃ, "r", 188, 208, 0],
		[Ⲇⵠᐃ, "r", 189, 209, 0],
		[1, "r", 190, 209, ᐃᐃⲆ],
		[1, "r", 191, 209, 0],
		[ᐃⲆΔ, "r", 188, 209, ⵠᐃⲆ],
		[ΔⵠΔ, "r", 190, 210, 0],
		[ΔⵠΔ, "r", 191, 210, 0],
		[Ⲇⵠᐃ, "r", 192, 210, ⵠⲆᐃ],
		[1, ⵠ[267], ⲆⲆΔⲆ, 189, 210, ΔⲆⲆ],
		[1, ⵠ[267], ᐃⲆᐃⵠ, 192, 205, Ⲇᐃⵠ],
		[ⵠΔᐃ, ⵠ[267], 1, 192, 207, ⵠⲆᐃ],
		[ΔⵠΔ, ⵠ[267], 0, 193, 210, 0],
		[ⲆᐃΔ, ⵠ[267], ᐃᐃᐃ, 187, 208, ΔΔᐃ],
		[1, ⵠ[267], ⵠⲆΔ, 197, 206, ⵠⵠⵠ],
		[ⵠΔᐃ, ⵠ[267], ⵠᐃⲆ, 191, 213, 0],
		[Ⲇⵠᐃ, ⵠ[267], ᐃᐃᐃ, 190, 204, 0],
		[1, "s", ⲆᐃΔ, 188, 207, 1],
		[1, "s", ⲆᐃΔ, 190, 211, ⵠΔᐃ],
		[Ⲇⵠᐃ, "s", 2, 188, 213, 1],
		[ⲆᐃΔ, "s", 2, 187, 205, 1],
		[Ⲇⵠᐃ, "s", ⵠᐃⲆ, 194, 210, 1],
		[ᐃⲆΔ, "s", 0, 198, 207, ⵠΔᐃ],
		[ⲆᐃΔ, "s", 1, 193, 204, 1],
		[1, "s", 1, 193, 213, 1],
		[ᐃᐃΔ, "s", 2, 198, 212, ΔⵠΔ],
		[1, "s", ᐃᐃⲆⲆ, 182, 208, ⵠΔᐃ],
		[1, "s", Ⲇⵠᐃ, 204, 271, 1],
		[ⵠΔᐃ, "s", ⵠⲆᐃ, 203, 272, ΔⵠΔ],
		[1, "s", ᐃᐃᐃ, 189, 275, 1],
		[ᐃⲆΔ, "s", ΔΔᐃ, 195, 265, 1],
		[1, "s", 2, 196, 264, ⵠⲆⲆ],
		[1, "s", ΔΔⲆᐃ, 186, 274, 1],
		[1, "s", ᐃⲆᐃᐃ, 197, 280, 1],
		[ᐃⲆΔ, "s", ⵠⲆᐃ, 217, 282, 1],
		[1, "s", ⵠΔᐃ, 214, 285, 1],
		[1, "s", 1, 214, 274, 1],
		[ᐃᐃΔ, "s", ᐃⲆΔ, 203, 282, ⵠΔᐃ],
		[ⵠⲆⲆ, "s", ΔⵠΔ, 205, 290, ⵠⲆⲆ],
		[ⲆᐃΔ, "s", 0, 207, 292, 1],
		[1, "s", 0, 197, 297, 1],
		[ⲆᐃΔ, "s", ΔΔᐃ, 184, 287, 1],
		[Δⵠᐃ, "s", ᐃᐃᐃⵠ, 213, 289, 1],
		[1, "s", ΔΔⲆᐃ, 196, 294, Ⲇⵠᐃ],
		[ⵠΔᐃ, "s", ᐃᐃᐃⵠ, 187, 286, 1],
		[1, "s", ⲆᐃΔ, 192, 289, 1],
		[1, "s", 1, 189, 299, ᐃⲆΔ],
		[1, "s", ⵠⲆᐃ, 213, 273, 1],
		[Δⵠᐃ, "g", 2, 212, 278, ᐃⲆΔ],
		[ⵠΔᐃ, "g", 1, 200, 288, ΔⵠΔ],
		[1, "g", 2, 215, 265, 1],
		[1, "g", ⲆⲆΔⲆ, 183, 281, 1],
		[ΔⵠΔ, "s", 0, 178, 295, 1],
		[ⵠΔᐃ, "s", ᐃᐃᐃ, 167, 281, ⲆᐃΔ],
		[ⵠΔᐃ, "s", ᐃᐃⲆ, 175, 263, ⲆᐃΔ],
		[1, "s", 1, 176, 293, 1],
		[ⲆᐃΔ, "s", ᐃᐃΔ, 163, 285, ⵠΔᐃ],
		[Δⵠᐃ, "s", 1, 177, 266, 1],
		[ⲆᐃΔ, "s", Δⵠᐃ, 161, 272, 1],
		[ᐃⲆΔ, "s", 2, 185, 261, 1],
		[ⵠⲆⲆ, "c", ⵠⵠⵠ, 217, 270, 1],
		[1, "c", ⵠⵠⵠ, 220, 278, 1],
		[ⵠΔᐃ, "c", ⵠⵠⵠ, 217, 283, 1],
		[1, "c", 0, 220, 287, ᐃⲆΔ],
		[1, "c", ΔΔᐃ, 210, 292, Δⵠᐃ],
		[1, "c", ᐃᐃⲆ, 205, 297, Ⲇⵠᐃ],
		[ᐃᐃΔ, "c", 0, 198, 293, ⵠⲆⲆ],
		[Δⵠᐃ, "c", ᐃᐃᐃ, 208, 283, 1],
		[1, "c", ᐃᐃⲆ, 197, 283, ⲆᐃΔ],
		[1, "c", ᐃᐃᐃ, 190, 289, 1],
		[1, "c", 0, 183, 296, ᐃᐃΔ],
		[1, "c", 0, 189, 291, 1],
		[ⲆᐃΔ, "c", 0, 178, 284, ᐃᐃΔ],
		[1, "c", ⵠⲆᐃ, 208, 265, ⵠⲆⲆ],
		[ΔⵠΔ, "c", 0, 169, 292, ᐃⲆΔ],
		[1, "s", 1, 158, 294, 1],
		[ΔⵠΔ, "s", 0, 151, 297, 1],
		[ᐃⲆΔ, "s", 0, 147, 288, 1],
		[1, "c", 0, 150, 289, ᐃⲆΔ],
		[1, "c", ⵠⲆᐃ, 160, 282, Ⲇⵠᐃ],
		[ΔⵠΔ, "c", 0, 146, 274, ᐃⲆΔ],
		[1, "c", Ⲇᐃⵠ, 167, 264, ⵠⲆⲆ],
		[1, "c", 0, 165, 267, 1],
		[Δⵠᐃ, "g", ΔⲆⲆ, 189, 257, 1],
		[ⵠⲆⲆ, "g", Ⲇⵠᐃ, 197, 248, 1],
		[1, "g", ⵠⵠⵠᐃ, 170, ⵠᐃⵠᐃⵠ, ⵠⲆⲆ],
		[1, "g", ΔΔⲆᐃ, 212, 234, 1],
		[ΔⵠΔ, "g", 2, 189, 230, ᐃᐃΔ],
		[1, "g", ᐃᐃΔⵠ, 173, 221, 1],
		[ⵠΔᐃ, "g", 1, 210, 214, 1],
		[ⵠΔᐃ, "s", 1, 153, 257, Ⲇⵠᐃ],
		[Δⵠᐃ, "s", ⵠᐃⲆ, 158, ΔⲆΔⲆⲆ, ᐃᐃΔ],
		[ᐃᐃΔ, "s", ΔⲆⲆ, 184, 248, Δⵠᐃ],
		[ᐃᐃΔ, "s", 0, 212, 254, 1],
		[ΔⵠΔ, "s", 1, 203, 249, Ⲇⵠᐃ],
		[1, "s", ⲆⲆΔⲆ, 204, 252, ⵠΔᐃ],
		[1, "s", ΔΔⲆᐃ, 187, 248, ΔⵠΔ],
		[ᐃᐃΔ, "s", 0, 206, 237, Δⵠᐃ],
		[ΔⵠΔ, "s", 0, 196, 227, 1],
		[ⲆᐃΔ, "s", 0, 181, 228, ᐃᐃΔ],
		[Δⵠᐃ, "s", Ⲇⵠᐃ, 199, 227, 1],
		[ⲆᐃΔ, "s", 1, 208, 238, 1],
		[ᐃⲆΔ, "s", 1, 179, 222, ⵠΔᐃ],
		[ᐃᐃΔ, "s", 1, 213, 223, 1],
		[Δⵠᐃ, "s", ᐃⲆᐃᐃ, 182, 222, ⵠΔᐃ],
		[ᐃⲆΔ, "s", 2, 211, 226, 1],
		[ΔⵠΔ, "s", 2, 214, 214, 1],
		[Δⵠᐃ, "s", 2, 201, 216, Ⲇⵠᐃ],
		[ⵠΔᐃ, "s", 2, 215, 192, ᐃᐃΔ],
		[Δⵠᐃ, "s", ⲆᐃΔ, 210, 198, 1],
		[1, "s", 1, 198, 196, 1],
		[1, "s", 2, 208, 199, ⵠΔᐃ],
		[1, "s", ⲆⲆΔⲆ, 187, 192, 1],
		[ᐃᐃΔ, "s", 1, 179, 198, 1],
		[Δⵠᐃ, "s", 2, 177, 197, 1],
		[ⲆᐃΔ, "s", ΔΔᐃ, 164, 197, ᐃⲆΔ],
		[1, "s", ⵠⲆⲆ, 159, 193, Δⵠᐃ],
		[1, "s", ᐃᐃΔ, 149, 206, 1],
		[1, "s", 1, 164, 209, Δⵠᐃ],
		[1, "s", 2, 165, 210, 1],
		[ⵠΔᐃ, "s", 2, 161, 191, ⵠⲆⲆ],
		[ⵠΔᐃ, "s", ΔⵠΔ, 162, 224, 1],
		[Ⲇⵠᐃ, "s", ΔΔᐃ, 150, 236, ΔⵠΔ],
		[1, "s", 1, 149, 239, 1],
		[1, "s", 2, 153, 236, ⲆᐃΔ],
		[ΔⵠΔ, "s", 2, 160, 223, 1],
		[1, "s", 2, 151, 207, 1],
		[ᐃⲆΔ, "s", ⵠⵠⵠᐃ, 147, 220, ΔⵠΔ],
		[1, "s", ⲆⲆΔⲆ, 145, 265, Δⵠᐃ],
		[Δⵠᐃ, "s", 2, 145, 285, 1],
		[ⵠΔᐃ, "c", ⵠᐃⲆ, 152, 266, ᐃᐃΔ],
		[1, "c", 0, 185, 271, 1],
		[ᐃⲆΔ, "c", 0, 210, 254, 1],
		[Ⲇⵠᐃ, "c", 0, 209, 256, ᐃᐃΔ],
		[ⲆᐃΔ, "c", ⵠᐃⲆ, 198, 254, Ⲇⵠᐃ],
		[1, "c", ⵠⲆΔ, 213, 246, ΔⵠΔ],
		[ⵠΔᐃ, "c", 0, 216, 237, ⵠⲆⲆ],
		[ΔⵠΔ, "c", ⵠⲆᐃ, 204, 240, 1],
		[1, "c", Ⲇᐃⵠ, 196, 234, 1],
		[ⵠΔᐃ, "c", 0, 188, 238, 1],
		[1, "c", 0, 182, 245, 1],
		[1, "c", Ⲇᐃⵠ, 173, 252, 1],
		[ᐃⲆΔ, "c", 0, 153, 248, 1],
		[1, "c", 0, 158, 233, Ⲇⵠᐃ],
		[ᐃᐃΔ, "c", 0, 147, 230, ⵠⲆⲆ],
		[ΔⵠΔ, "c", 0, 151, 224, ⵠⲆⲆ],
		[1, "c", 0, 157, 214, ᐃᐃΔ],
		[1, "c", 0, 167, 219, 1],
		[1, "c", 0, 171, 208, 1],
		[1, "c", 0, 179, 219, ⵠΔᐃ],
		[1, "c", ᐃᐃᐃ, 176, 229, ⲆᐃΔ],
		[1, "c", ⵠᐃⲆ, 195, 221, Ⲇⵠᐃ],
		[1, "c", 0, 207, 222, Ⲇⵠᐃ],
		[ⵠΔᐃ, "c", ΔⲆⲆ, 214, 207, 1],
		[ᐃᐃΔ, "c", ΔΔᐃ, 205, 210, Ⲇⵠᐃ],
		[1, "c", 0, 204, 196, 1],
		[ⵠΔᐃ, "c", 0, 214, 196, 1],
		[ᐃⲆΔ, "c", 0, 190, 199, 1],
		[ⵠΔᐃ, "c", 0, 184, 194, ΔⵠΔ],
		[1, "c", ⵠᐃⲆ, 172, 199, 1],
		[1, "c", 0, 161, 204, 1],
		[1, "c", ΔⲆⲆ, 157, 196, 1],
		[ᐃⲆΔ, "c", ⵠⵠⵠ, 149, 194, ΔⵠΔ],
		[1, "c", ⵠⵠⵠ, 147, 208, ΔⵠΔ],
		[1, "c", 0, 207, 274, 1],
		[1, "c", ᐃᐃⲆ, 217, 258, Δⵠᐃ],
		[1, "c", ᐃᐃⲆ, 201, 260, ᐃⲆΔ],
		[ᐃⲆΔ, "c", Ⲇᐃⵠ, 178, 276, 1],
		[1, "c", 0, 187, 265, ΔⵠΔ],
		[1, "s", Ⲇⵠᐃ, 204, 260, Ⲇⵠᐃ],
		[ⵠΔᐃ, "s", Δⵠᐃ, 216, 260, 1],
		[Ⲇⵠᐃ, "s", 1, 187, ⲆᐃΔⵠⵠᐃᐃ, ᐃⲆΔ],
		[ⵠΔᐃ, "s", ᐃⲆᐃᐃ, 189, 254, ΔⵠΔ],
		[1, "s", ΔΔⲆᐃ, 212, 257, 1],
		[1, "s", ᐃⲆᐃᐃ, 182, 286, 1],
		[1, "s", ᐃⲆᐃⵠ, 169, 280, ΔⵠΔ],
		[1, "s", 2, 217, 273, ᐃⲆΔ],
		[ⲆᐃΔ, "s", ᐃᐃᐃⵠ, 215, 282, ᐃᐃΔ],
		[1, "s", ᐃᐃⲆⲆ, 172, 263, Δⵠᐃ],
		[1, "s", ᐃⲆᐃᐃ, 176, 267, ⲆᐃΔ],
		[ᐃⲆΔ, "s", ᐃⲆᐃᐃ, 215, 251, ⵠΔᐃ],
		[1, ⵠ[72], 1, 221, 282, ⵠᐃⲆ],
		[ⲆᐃΔ, ⵠ[72], 1, 222, 284, 0],
		[ΔⵠΔ, ⵠ[72], ᐃᐃΔ, 221, 290, Ⲇᐃⵠ],
		[1, ⵠ[72], ⲆᐃΔ, 222, 294, 0],
		[1, ⵠ[72], ᐃᐃΔ, 221, 297, 0],
		[1, ⵠ[72], 1, 223, 298, ΔΔᐃ],
		[ⵠⲆⲆ, ⵠ[72], ᐃⲆΔ, 222, 300, 0],
		[1, ⵠ[72], Ⲇⵠᐃ, 218, 301, ⵠⲆΔ],
		[ⵠⲆⲆ, ⵠ[72], 1, 217, 299, 0],
		[ⵠⲆⲆ, ⵠ[72], 1, 215, 301, ᐃᐃⲆ],
		[1, ⵠ[72], ⵠⲆⲆ, 212, 300, ⵠⲆΔ],
		[1, ⵠ[72], ΔⵠΔ, 206, 300, 0],
		[1, ⵠ[72], Ⲇⵠᐃ, 209, 301, 0],
		[ΔⵠΔ, ⵠ[72], 1, 204, 299, ⵠᐃⲆ],
		[1, ⵠ[72], 1, 202, 301, ⵠⲆᐃ],
		[ᐃᐃΔ, ⵠ[72], ⲆᐃΔ, 199, 301, 0],
		[ᐃᐃΔ, ⵠ[72], 1, 222, 282, 0],
		[ⵠΔᐃ, ⵠ[72], 1, 207, 301, 0],
		[ᐃⲆΔ, ⵠ[72], 1, 197, 301, ⵠⲆΔ],
		[1, ⵠ[72], 1, 215, 291, ΔⲆⲆ],
		[ΔⵠΔ, ⵠ[72], 1, 216, 286, ᐃᐃⲆ],
		[ⵠΔᐃ, ⵠ[72], 1, 214, 292, ⵠⲆΔ],
		[1, ⵠ[72], ᐃᐃΔ, 210, 289, 0],
		[ᐃᐃΔ, ⵠ[72], 1, 208, 294, ᐃᐃⲆ],
		[1, ⵠ[72], 1, 210, 298, 0],
		[ⵠΔᐃ, ⵠ[72], Δⵠᐃ, 212, 281, ⵠⵠⵠ],
		[1, ⵠ[72], 1, 219, 278, 0],
		[ⵠⲆⲆ, ⵠ[72], 1, 219, 282, 0],
		[ᐃⲆΔ, ⵠ[72], ⵠΔᐃ, 205, 286, 0],
		[1, ⵠ[72], 1, 202, 293, ⵠⲆΔ],
		[1, ⵠ[72], 1, 198, 295, 0],
		[1, ⵠ[72], ᐃᐃⲆⲆ, 213, 282, 0],
		[1, ⵠ[72], 2, 213, 291, ᐃᐃᐃ],
		[1, ⵠ[72], 2, 216, 289, 0],
		[1, ⵠ[72], ⵠⵠⵠᐃ, 219, 289, ΔΔᐃ],
		[1, ⵠ[72], ᐃⲆᐃᐃ, 218, 285, 0],
		[1, ⵠ[72], ᐃᐃⲆⲆ, 220, 283, 0],
		[1, ⵠ[72], ᐃⲆᐃⵠ, 211, 283, 0],
		[1, ⵠ[72], ᐃⲆᐃⵠ, 215, 281, Ⲇᐃⵠ],
		[1, ⵠ[72], ⵠⵠⵠᐃ, 217, 279, 0],
		[1, ⵠ[72], 2, 208, 290, 0],
		[1, ⵠ[72], ᐃᐃΔⵠ, 211, 296, ΔⲆⲆ],
		[ⵠΔᐃ, ⵠ[72], ᐃⲆᐃᐃ, 215, 294, ⵠⲆΔ],
		[1, ⵠ[72], ᐃᐃⲆⲆ, 212, 298, Ⲇᐃⵠ],
		[1, ⵠ[72], 2, 203, 294, ᐃᐃⲆ],
		[1, ⵠ[72], 2, 204, 288, 0],
		[1, ⵠ[72], ᐃᐃⲆⲆ, 200, 294, ᐃᐃⲆ],
		[1, ⵠ[72], ᐃᐃΔⵠ, 198, 297, ⵠᐃⲆ],
		[ᐃⲆΔ, ⵠ[72], ᐃᐃᐃⵠ, 202, 299, ΔⲆⲆ],
		[1, ⵠ[72], ᐃⲆᐃᐃ, 200, 299, 0],
		[ᐃᐃΔ, ⵠ[72], 2, 220, 300, 0],
		[1, ⵠ[72], 2, 220, 295, ⵠⵠⵠ],
		[1, ⵠ[72], 2, 220, 292, 0],
		[1, ⵠ[72], ᐃⲆᐃᐃ, 219, 287, 0],
		[1, ⵠ[72], ᐃⲆᐃⵠ, 211, 288, ᐃᐃⲆ],
		[1, ⵠ[72], ⲆⲆΔⲆ, 213, 287, Ⲇᐃⵠ],
		[1, ⵠ[72], ᐃⲆᐃⵠ, 211, 289, ⵠᐃⲆ],
		[1, ⵠ[72], ⲆⲆΔⲆ, 212, 290, 0],
		[1, ⵠ[72], ᐃⲆᐃᐃ, 195, 296, ᐃᐃⲆ],
		[ⲆᐃΔ, ⵠ[72], 2, 196, 299, ΔⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[72], ᐃᐃᐃⵠ, 194, 300, 0],
		[ⵠⲆⲆ, ⵠ[72], ᐃᐃⲆⲆ, 195, 300, 0],
		[ⵠⲆⲆ, ⵠ[72], ⵠⵠⵠᐃ, 213, 279, 0],
		[1, ⵠ[72], ᐃᐃⲆⲆ, 211, 279, 0],
		[1, ⵠ[72], 0, 218, 290, 0],
		[Δⵠᐃ, ⵠ[72], ⵠⲆΔ, 212, 294, 0],
		[Δⵠᐃ, ⵠ[72], ⲆᐃΔ, 213, 295, ⵠⲆᐃ],
		[Ⲇⵠᐃ, ⵠ[72], ⵠⲆⲆ, 217, 292, ⵠⲆΔ],
		[ⲆᐃΔ, ⵠ[72], Ⲇⵠᐃ, 218, 288, ᐃᐃᐃ],
		[1, ⵠ[72], ⵠⲆⲆ, 210, 295, 0],
		[1, ⵠ[72], ⲆᐃΔ, 213, 292, 0],
		[1, ⵠ[72], 1, 212, 289, ΔΔᐃ],
		[1, ⵠ[72], ΔⵠΔ, 205, 295, ⵠⵠⵠ],
		[1, ⵠ[72], 2, 206, 296, ⵠⲆᐃ],
		[1, ⵠ[72], ⲆⲆΔⲆ, 208, 296, Ⲇᐃⵠ],
		[Δⵠᐃ, ⵠ[72], 2, 221, 288, ᐃᐃᐃ],
		[Δⵠᐃ, ⵠ[72], ᐃᐃⲆⲆ, 209, 299, ΔΔᐃ],
		[1, ⵠ[72], ᐃⲆᐃⵠ, 211, 291, 0],
		[ΔⵠΔ, ⵠ[72], 1, 203, 275, ΔⲆⲆ],
		[ΔⵠΔ, ⵠ[72], 1, 204, 272, ⵠⲆᐃ],
		[Ⲇⵠᐃ, ⵠ[72], ᐃᐃᐃⵠ, 205, 273, ΔⲆⲆ],
		[ⵠⲆⲆ, ⵠ[72], 2, 204, 276, ⵠⵠⵠ],
		[1, ⵠ[72], ΔΔⲆᐃ, 202, 276, 0],
		[1, ⵠ[72], 2, 199, 277, 0],
		[Ⲇⵠᐃ, ⵠ[72], ΔΔⲆᐃ, 202, 273, 0],
		[ⵠⲆⲆ, ⵠ[72], ⲆⲆΔⲆ, 199, 270, 0],
		[ⲆᐃΔ, ⵠ[72], 2, 194, 274, ᐃᐃᐃ],
		[1, ⵠ[72], ΔΔⲆᐃ, 194, 277, 0],
		[1, ⵠ[72], Ⲇⵠᐃ, 192, 274, 0],
		[1, ⵠ[72], 1, 194, 267, 0],
		[ΔⵠΔ, ⵠ[72], 2, 194, 265, 0],
		[ᐃᐃΔ, ⵠ[72], ⲆⲆΔⲆ, 190, 272, 0],
		[Δⵠᐃ, ⵠ[72], 2, 191, 275, 0],
		[1, ⵠ[72], 2, 195, 274, ⵠⲆΔ],
		[1, ⵠ[72], 2, 200, 271, ⵠⲆᐃ],
		[1, ⵠ[72], 1, 168, 243, ΔⲆⲆ],
		[Δⵠᐃ, ⵠ[72], 1, 175, 240, 0],
		[1, ⵠ[72], ΔⵠΔ, 169, 234, 0],
		[ⵠⲆⲆ, ⵠ[72], 1, 162, 235, ⵠⲆΔ],
		[1, ⵠ[72], 2, 169, 236, 0],
		[1, ⵠ[72], 2, 171, 234, 0],
		[1, ⵠ[72], 2, 165, 238, ⵠⲆΔ],
		[1, ⵠ[72], 2, 173, 241, Ⲇᐃⵠ],
		[ΔⵠΔ, ⵠ[72], 2, 174, 238, 0],
		[ⵠⲆⲆ, ⵠ[72], ⵠⵠⵠᐃ, 176, 240, 0],
		[ᐃᐃΔ, ⵠ[72], ᐃᐃᐃⵠ, 169, 244, 0],
		[ΔⵠΔ, ⵠ[72], 2, 166, 243, 0],
		[ᐃᐃΔ, ⵠ[72], 2, 162, 236, 0],
		[1, ⵠ[72], 2, 164, 235, ⵠᐃⲆ],
		[ΔⵠΔ, ⵠ[72], ⵠⵠⵠᐃ, 162, 233, ⵠᐃⲆ],
		[ᐃᐃΔ, ⵠ[72], 2, 163, 236, 0],
		[1, ⵠ[72], ᐃⲆᐃᐃ, 174, 242, 0],
		[1, ⵠ[72], ᐃᐃΔⵠ, 171, 243, 0],
		[ᐃⲆΔ, ⵠ[72], Δⵠᐃ, 194, 206, 0],
		[ⵠΔᐃ, ⵠ[72], ⵠⲆⲆ, 190, 214, ΔΔᐃ],
		[1, ⵠ[72], 1, 186, 206, ⵠⲆᐃ],
		[1, ⵠ[72], ⵠΔᐃ, 197, 207, ᐃᐃᐃ],
		[Ⲇⵠᐃ, ⵠ[72], 2, 196, 208, ⵠⲆΔ],
		[1, ⵠ[72], ᐃᐃⲆⲆ, 198, 206, 0],
		[1, ⵠ[72], 2, 198, 208, ⵠⵠⵠ],
		[ΔⵠΔ, ⵠ[72], 2, 194, 204, ᐃᐃᐃ],
		[ᐃᐃΔ, ⵠ[72], ⵠⵠⵠᐃ, 187, 206, 0],
		[1, ⵠ[72], 2, 186, 204, Ⲇᐃⵠ],
		[ΔⵠΔ, ⵠ[72], ᐃᐃⲆⲆ, 189, 214, 0],
		[ΔⵠΔ, ⵠ[72], ⵠⵠⵠᐃ, 189, 213, ⵠᐃⲆ],
		[ΔⵠΔ, ⵠ[72], ⵠⵠⵠᐃ, 193, 215, ⵠᐃⲆ],
		[ᐃⲆΔ, ⵠ[72], ᐃᐃⲆⲆ, 194, 214, 0],
		[1, ⵠ[72], ᐃᐃᐃⵠ, 187, 215, 0],
		[1, ⵠ[72], ᐃᐃΔⵠ, 193, 209, ⵠᐃⲆ],
		[1, ⵠ[72], 2, 189, 211, Ⲇᐃⵠ],
		[1, ⵠ[72], ⵠⵠⵠᐃ, 187, 209, ⵠⲆᐃ],
		[Δⵠᐃ, ⵠ[72], ΔΔⲆᐃ, 187, 207, 0],
		[Δⵠᐃ, ⵠ[72], ᐃᐃᐃⵠ, 191, 205, ⵠⵠⵠ],
		[ΔⵠΔ, ⵠ[72], ⵠⵠⵠᐃ, 189, 203, ⵠⵠⵠ],
		[1, ⵠ[Δⵠⵠᐃ], 2, 224, 176, ⵠⲆⲆ],
		[1, ⵠ[ᐃⲆᐃΔ], 0, 224, 177, Δⵠᐃ],
		[1, ⵠ[ᐃⵠΔᐃ], 3, 224, 178, Ⲇⵠᐃ],
		[1, ⵠ[3], 2, 224, 179, Ⲇⵠᐃ],
		[1, ⵠ[3], ᐃⲆΔ, 224, 180, 1],
		[1, ⵠ[ᐃⵠΔᐃ], ᐃⲆᐃⵠ, 224, 181, 1],
		[Δⵠᐃ, ⵠ[3], 0, 224, 182, 1],
		[ᐃⲆΔ, ⵠ[3], 2, 224, 183, ⵠⲆⲆ],
		[1, ⵠ[3], 0, 224, 184, 1],
		[ΔⵠΔ, ⵠ[Δⵠⵠᐃ], ⲆᐃᐃΔ, 224, 185, ᐃᐃΔ],
		[1, ⵠ[ᐃⲆᐃΔ], 2, 224, 186, Ⲇⵠᐃ],
		[1, ⵠ[ᐃⵠΔⵠ], 0, 224, 187, 1],
		[1, ⵠ[ᐃⵠΔⵠ], 2, 224, 188, ΔⵠΔ],
		[ⵠⲆⲆ, ⵠ[3], ⵠⵠⵠ, 224, 189, 1],
		[1, ⵠ[3], 1, 224, 190, ⲆᐃΔ],
		[1, ⵠ[3], ᐃᐃⲆⲆ, 224, 191, 1],
		[ᐃⲆΔ, ⵠ[ᐃⵠΔⲆ], 0, 224, 192, ⵠΔᐃ],
		[1, ⵠ[3], 2, 224, 193, Ⲇⵠᐃ],
		[ΔⵠΔ, ⵠ[ᐃⵠΔⲆ], 2, 224, 194, Ⲇⵠᐃ],
		[ⵠⲆⲆ, ⵠ[3], 1, 224, 195, ⵠⲆⲆ],
		[ⲆᐃΔ, ⵠ[3], 2, 224, 196, 1],
		[1, ⵠ[3], 0, 224, 197, ⵠΔᐃ],
		[1, ⵠ[ᐃⵠΔᐃ], ΔΔᐃΔ, 224, 198, 1],
		[ᐃⲆΔ, ⵠ[3], 2, 224, 199, 1],
		[ᐃᐃΔ, ⵠ[3], 1, 224, 200, 1],
		[1, ⵠ[3], ᐃⲆᐃᐃ, 224, 201, 1],
		[ⵠⲆⲆ, ⵠ[3], ⲆⵠⲆᐃ, 224, 202, ⵠⲆⲆ],
		[1, ⵠ[3], ΔⲆⲆ, 224, 203, ᐃⲆΔ],
		[1, ⵠ[ⲆⵠⲆᐃ], Δⵠᐃ, 224, 204, 1],
		[1, ⵠ[3], 2, 224, 205, ᐃᐃΔ],
		[Δⵠᐃ, ⵠ[3], 0, 224, 206, ᐃⲆΔ],
		[Ⲇⵠᐃ, ⵠ[3], ᐃᐃΔ, 224, 207, ᐃᐃΔ],
		[ᐃᐃΔ, ⵠ[3], ⲆᐃᐃΔ, 224, 208, 1],
		[ⲆᐃΔ, ⵠ[3], ᐃᐃᐃⵠ, 224, 209, 1],
		[ᐃⲆΔ, ⵠ[ᐃⵠΔᐃ], ⵠⵠⵠᐃ, 224, 210, ⲆᐃΔ],
		[1, ⵠ[3], 0, 223, 211, 1],
		[ΔⵠΔ, ⵠ[ΔΔᐃΔ], 1, 224, 211, 1],
		[1, ⵠ[ᐃΔⵠⲆ], 2, 224, 212, ⵠⲆⲆ],
		[1, ⵠ[ᐃⲆᐃΔ], 2, 224, 213, ᐃⲆΔ],
		[1, ⵠ[3], ΔⵠΔ, 224, 214, ⵠⲆⲆ],
		[1, ⵠ[3], ΔⲆⵠᐃ, 224, 215, 1],
		[ᐃᐃΔ, ⵠ[ΔⲆⵠᐃ], 0, 224, 216, Ⲇⵠᐃ],
		[Δⵠᐃ, ⵠ[ⲆⵠⲆᐃ], ⵠΔᐃ, 224, 217, ⵠΔᐃ],
		[1, ⵠ[ⲆᐃᐃΔ], ΔΔⲆᐃ, 224, 218, 1],
		[ΔⵠΔ, ⵠ[ⲆΔᐃⲆ], 3, 224, 219, 1],
		[1, ⵠ[3], ⵠⲆᐃ, 223, 215, 1],
		[1, ⵠ[Δⵠⵠᐃ], 2, 223, 214, 1],
		[ᐃᐃΔ, ⵠ[3], ⵠⵠⵠᐃ, 223, 212, Ⲇⵠᐃ],
		[ᐃᐃΔ, ⵠ[ⲆⵠⲆᐃ], ᐃᐃᐃⵠ, 223, 216, Ⲇⵠᐃ],
		[ⵠⲆⲆ, ⵠ[ⲆⵠⲆᐃ], 3, 223, 217, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⲆᐃΔ], 0, 223, 218, 1],
		[ᐃᐃΔ, ⵠ[ΔΔᐃΔ], ⵠⵠⵠ, 224, 220, Ⲇⵠᐃ],
		[ⲆᐃΔ, ⵠ[3], 0, 224, 222, 1],
		[ᐃᐃΔ, ⵠ[ⲆⵠⲆᐃ], 0, 223, 209, 1],
		[1, ⵠ[ΔⲆⵠᐃ], Ⲇᐃⵠ, 223, 205, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⵠΔⵠ], 2, 224, 221, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⵠΔⲆ], 2, 223, 219, Δⵠᐃ],
		[ᐃᐃΔ, ⵠ[3], 2, 223, 220, 1],
		[ΔⵠΔ, ⵠ[ᐃⵠΔᐃ], ΔΔⲆᐃ, 223, 213, ΔⵠΔ],
		[ⵠⲆⲆ, ⵠ[ᐃⵠΔⲆ], ⲆⲆΔⲆ, 223, 210, 1],
		[ᐃᐃΔ, ⵠ[3], ΔⵠΔ, 223, 178, 1],
		[1, ⵠ[Δⵠⵠᐃ], ⲆⵠⲆᐃ, 223, 179, 1],
		[1, ⵠ[3], ᐃⵠΔⲆ, 223, 181, ᐃⲆΔ],
		[Ⲇⵠᐃ, ⵠ[3], ⲆᐃᐃΔ, 223, 182, Ⲇⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[ᐃΔⵠⲆ], ⵠⲆⲆ, 223, 185, Ⲇⵠᐃ],
		[1, ⵠ[3], 2, 223, 184, 1],
		[1, ⵠ[3], 2, 223, 186, ⲆᐃΔ],
		[ᐃᐃΔ, ⵠ[ᐃⵠΔᐃ], 0, 223, 180, 1],
		[1, ⵠ[3], ᐃᐃⲆ, 223, 183, 1],
		[1, ⵠ[3], 2, 223, 187, ⵠΔᐃ],
		[ⵠⲆⲆ, ⵠ[3], ᐃⲆΔ, 223, 188, 1],
		[1, ⵠ[3], ᐃᐃΔⵠ, 223, 189, ⲆᐃΔ],
		[1, ⵠ[3], ⲆⲆΔⲆ, 223, 190, 1],
		[1, ⵠ[3], 3, 223, 191, ⵠⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[3], 1, 223, 192, ΔⵠΔ],
		[1, ⵠ[3], 2, 223, 193, 1],
		[1, ⵠ[3], 2, 223, 194, ⲆᐃΔ],
		[1, ⵠ[3], Δⵠⵠᐃ, 223, 195, 1],
		[Δⵠᐃ, ⵠ[ⵠⵠΔⵠ], 1, 223, 196, 1],
		[1, ⵠ[3], 2, 223, 197, Ⲇⵠᐃ],
		[ᐃᐃΔ, ⵠ[3], 2, 223, 199, ᐃⲆΔ],
		[1, ⵠ[3], ΔΔⲆᐃ, 223, 198, ⵠⲆⲆ],
		[Δⵠᐃ, ⵠ[ᐃⲆᐃΔ], ᐃᐃᐃ, 223, 200, ᐃⲆΔ],
		[1, ⵠ[3], ΔΔⲆᐃ, 223, 201, ⵠΔᐃ],
		[1, ⵠ[3], 0, 223, 202, 1],
		[ᐃᐃΔ, ⵠ[ᐃⵠΔᐃ], 3, 223, 203, ΔⵠΔ],
		[1, ⵠ[ΔⲆΔⲆ], 3, 223, 204, ᐃⲆΔ],
		[1, ⵠ[ᐃΔⵠⲆ], 3, 223, 206, 1],
		[ⵠⲆⲆ, ⵠ[3], 3, 223, 207, 1],
		[ᐃᐃΔ, ⵠ[ᐃΔⵠⲆ], 3, 223, 208, 1],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 223, 221, 1],
		[Δⵠᐃ, ⵠ[3], ᐃᐃᐃⵠ, 223, 222, ⲆᐃΔ],
		[1, ⵠ[ⲆΔᐃⲆ], 0, 223, 224, 1],
		[ΔⵠΔ, ⵠ[3], ⵠⵠⵠ, 224, 228, ᐃⲆΔ],
		[ΔⵠΔ, ⵠ[ⵠⵠΔⵠ], 0, 224, 230, 1],
		[1, ⵠ[ᐃΔⵠⲆ], 0, 223, 234, 1],
		[ᐃⲆΔ, ⵠ[ⲆⵠⲆᐃ], ᐃᐃᐃⵠ, 223, 223, 1],
		[1, ⵠ[ᐃΔⵠⲆ], ᐃᐃᐃⵠ, 224, 223, Ⲇⵠᐃ],
		[1, ⵠ[ᐃⵠΔⵠ], 2, 224, 224, ⵠⲆⲆ],
		[1, ⵠ[ⲆΔᐃⲆ], 2, 224, 225, 1],
		[1, ⵠ[3], 1, 223, 226, 1],
		[1, ⵠ[ᐃⵠΔⲆ], 1, 224, 231, ⲆᐃΔ],
		[Δⵠᐃ, ⵠ[3], 1, 223, 232, 1],
		[1, ⵠ[3], ΔⲆⵠᐃ, 223, 225, 1],
		[ΔⵠΔ, ⵠ[3], 3, 224, 226, 1],
		[Δⵠᐃ, ⵠ[3], 3, 223, 227, 1],
		[Δⵠᐃ, ⵠ[ᐃΔⵠⲆ], Δⵠⵠᐃ, 224, 227, 1],
		[1, ⵠ[3], ⵠⵠΔⵠ, 223, 229, ΔⵠΔ],
		[ᐃᐃΔ, ⵠ[3], 3, 223, 228, Ⲇⵠᐃ],
		[1, ⵠ[ΔⲆΔⲆ], 3, 224, 229, 1],
		[ΔⵠΔ, ⵠ[3], ᐃⲆᐃΔ, 223, 230, ᐃⲆΔ],
		[ⵠⲆⲆ, ⵠ[3], ᐃⵠΔᐃ, 223, 231, 1],
		[ⲆᐃΔ, ⵠ[ΔΔᐃΔ], ⵠⵠΔⵠ, 224, 232, 1],
		[ⵠⲆⲆ, ⵠ[3], 3, 224, 233, ⲆᐃΔ],
		[ⵠⲆⲆ, ⵠ[ΔⲆⵠᐃ], ⲆⵠⲆᐃ, 223, 233, ᐃᐃΔ],
		[1, ⵠ[3], 3, 224, 234, ⲆᐃΔ],
		[1, ⵠ[3], 3, 224, 235, 1],
		[1, ⵠ[Δⵠⵠᐃ], ΔΔᐃΔ, 223, 235, Ⲇⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[3], 1, 224, 236, ᐃᐃΔ],
		[1, ⵠ[ΔΔᐃΔ], ᐃⲆᐃᐃ, 223, 236, Δⵠᐃ],
		[ⵠΔᐃ, ⵠ[3], 2, 223, 237, ᐃᐃΔ],
		[ᐃᐃΔ, ⵠ[ΔⲆΔⲆ], 3, 224, 237, ᐃᐃΔ],
		[ΔⵠΔ, ⵠ[ΔΔᐃΔ], ᐃⵠΔⲆ, 224, 238, ⵠΔᐃ],
		[Ⲇⵠᐃ, ⵠ[3], 0, 224, 239, 1],
		[ᐃⲆΔ, ⵠ[ᐃⲆᐃΔ], ΔⵠΔ, 223, 241, ᐃᐃΔ],
		[Δⵠᐃ, ⵠ[ΔⲆΔⲆ], 0, 224, 243, 1],
		[1, ⵠ[3], ⵠⵠⵠ, 223, 245, 1],
		[ᐃⲆΔ, ⵠ[ⲆᐃᐃΔ], ⵠⲆΔ, 224, 247, Δⵠᐃ],
		[ⵠΔᐃ, ⵠ[3], ᐃᐃΔⵠ, 223, 240, ⵠⲆⲆ],
		[ᐃⲆΔ, ⵠ[ᐃΔⵠⲆ], 2, 223, 239, 1],
		[Δⵠᐃ, ⵠ[ᐃⵠΔᐃ], 2, 224, 240, ΔⵠΔ],
		[1, ⵠ[ⲆⵠⲆᐃ], ᐃᐃⲆⲆ, 224, 241, 1],
		[ᐃⲆΔ, ⵠ[ᐃⵠΔⲆ], ⵠⵠⵠᐃ, 224, 242, 1],
		[1, ⵠ[3], 2, 223, 242, 1],
		[ΔⵠΔ, ⵠ[3], 2, 223, 243, 1],
		[1, ⵠ[3], 2, 223, 244, 1],
		[1, ⵠ[3], ΔΔⲆᐃ, 224, 244, ⲆᐃΔ],
		[ΔⵠΔ, ⵠ[ⲆΔᐃⲆ], 2, 224, 245, ⲆᐃΔ],
		[1, ⵠ[3], 2, 224, 246, 1],
		[1, ⵠ[3], 3, 223, 238, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⲆᐃΔ], 3, 223, 246, 1],
		[ⵠΔᐃ, ⵠ[ΔⲆⵠᐃ], 2, 223, 247, ΔⵠΔ],
		[ⲆᐃΔ, ⵠ[ᐃⵠΔⲆ], ᐃᐃΔ, 223, 249, 1],
		[1, ⵠ[ᐃΔⵠⲆ], Δⵠᐃ, 224, 253, Δⵠᐃ],
		[ΔⵠΔ, ⵠ[3], 1, 223, ᐃᐃⵠᐃⲆᐃᐃ, ΔⵠΔ],
		[1, ⵠ[ᐃⲆᐃΔ], 0, 223, 254, ⵠΔᐃ],
		[ⲆᐃΔ, ⵠ[ᐃΔⵠⲆ], 0, 224, 250, 1],
		[1, ⵠ[ⲆᐃᐃΔ], 3, 223, 248, ⲆᐃΔ],
		[1, ⵠ[3], ⲆⵠⲆᐃ, 223, 250, Δⵠᐃ],
		[1, ⵠ[ᐃΔⵠⲆ], 3, 223, 252, 1],
		[1, ⵠ[3], 3, 223, 255, 1],
		[ⵠⲆⲆ, ⵠ[3], 3, 223, 257, ⵠΔᐃ],
		[1, ⵠ[3], ΔΔⲆᐃ, 224, 248, Ⲇⵠᐃ],
		[1, ⵠ[3], 2, 224, 249, ⵠΔᐃ],
		[1, ⵠ[3], 2, 223, 251, ⵠΔᐃ],
		[ΔⵠΔ, ⵠ[3], 2, 224, 251, 1],
		[1, ⵠ[ᐃΔⵠⲆ], ᐃⲆᐃⵠ, 224, 252, 1],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 223, 253, Ⲇⵠᐃ],
		[ⵠΔᐃ, ⵠ[3], ᐃᐃⲆⲆ, 224, 254, ⵠΔᐃ],
		[Δⵠᐃ, ⵠ[ᐃΔⵠⲆ], ⵠⵠⵠᐃ, 224, 255, ⵠΔᐃ],
		[ΔⵠΔ, ⵠ[3], 2, 224, ᐃᐃⵠᐃⲆᐃᐃ, ⵠΔᐃ],
		[1, ⵠ[3], ⲆⲆΔⲆ, 224, 257, ᐃⲆΔ],
		[1, ⵠ[ⵠⵠΔⵠ], Ⲇᐃⵠ, 224, 258, ⲆᐃΔ],
		[ⲆᐃΔ, ⵠ[ⵠⵠΔⵠ], 0, 223, 261, 1],
		[Δⵠᐃ, ⵠ[3], Ⲇᐃⵠ, 224, 263, ⵠΔᐃ],
		[1, ⵠ[ᐃΔⵠⲆ], ⵠᐃⲆ, 224, 266, 1],
		[ⲆᐃΔ, ⵠ[3], 0, 224, 272, 1],
		[Ⲇⵠᐃ, ⵠ[3], Ⲇᐃⵠ, 223, 270, ⵠⲆⲆ],
		[1, ⵠ[ⲆᐃᐃΔ], ⵠⲆᐃ, 223, 275, ⵠΔᐃ],
		[ⵠΔᐃ, ⵠ[ⲆΔᐃⲆ], Ⲇⵠᐃ, 223, 259, 1],
		[Δⵠᐃ, ⵠ[ᐃΔⵠⲆ], 1, 223, 264, ⵠⲆⲆ],
		[Δⵠᐃ, ⵠ[3], ᐃᐃΔ, 223, 268, ᐃⲆΔ],
		[1, ⵠ[Δⵠⵠᐃ], ᐃᐃΔ, 224, 274, ⵠΔᐃ],
		[1, ⵠ[ⵠⵠΔⵠ], ΔΔⲆᐃ, 223, 258, ᐃⲆΔ],
		[Ⲇⵠᐃ, ⵠ[ⲆΔᐃⲆ], ᐃᐃᐃⵠ, 223, 260, ⵠⲆⲆ],
		[1, ⵠ[3], 2, 223, 263, ⵠΔᐃ],
		[1, ⵠ[ⲆΔᐃⲆ], ᐃᐃⲆⲆ, 223, 265, Δⵠᐃ],
		[ᐃⲆΔ, ⵠ[3], ΔΔⲆᐃ, 223, 267, 1],
		[ⵠⲆⲆ, ⵠ[ΔⲆΔⲆ], 2, 223, 271, 1],
		[1, ⵠ[ⲆΔᐃⲆ], ᐃᐃᐃⵠ, 223, 273, 1],
		[1, ⵠ[ⲆΔᐃⲆ], 3, 223, 262, 1],
		[1, ⵠ[ᐃⲆᐃΔ], 3, 223, 266, Δⵠᐃ],
		[1, ⵠ[ᐃⲆᐃΔ], 3, 223, 269, 1],
		[1, ⵠ[3], ᐃⲆᐃΔ, 223, 272, 1],
		[ⵠⲆⲆ, ⵠ[3], ΔΔᐃΔ, 223, 274, 1],
		[1, ⵠ[3], ᐃⵠΔⲆ, 224, 275, ⵠⲆⲆ],
		[Δⵠᐃ, ⵠ[3], 3, 224, 273, 1],
		[ⵠⲆⲆ, ⵠ[3], 3, 224, 271, 1],
		[1, ⵠ[ΔΔᐃΔ], ⵠⵠΔⵠ, 224, 270, ⲆᐃΔ],
		[1, ⵠ[ᐃΔⵠⲆ], ᐃⵠΔⲆ, 224, 269, 1],
		[1, ⵠ[ΔΔᐃΔ], ⲆᐃᐃΔ, 224, 268, 1],
		[ΔⵠΔ, ⵠ[ΔΔᐃΔ], ᐃⵠΔⵠ, 224, 267, 1],
		[1, ⵠ[3], ⲆΔᐃⲆ, 224, 265, ᐃᐃΔ],
		[ⵠⲆⲆ, ⵠ[3], 3, 224, 264, 1],
		[1, ⵠ[ⵠⵠΔⵠ], ΔⲆΔⲆ, 224, 262, ᐃⲆΔ],
		[1, ⵠ[ΔⲆΔⲆ], Δⵠⵠᐃ, 224, 261, 1],
		[1, ⵠ[ᐃⵠΔⲆ], ᐃⵠΔⵠ, 224, 260, 1],
		[ⲆᐃΔ, ⵠ[ᐃⵠΔᐃ], 3, 224, 259, 1],
		[ᐃᐃΔ, ⵠ[3], ᐃⲆᐃⵠ, 223, 276, 1],
		[1, ⵠ[3], 1, 224, 276, 1],
		[ⵠⲆⲆ, ⵠ[3], ΔⵠΔ, 224, 280, ᐃⲆΔ],
		[1, ⵠ[3], 1, 223, 281, 1],
		[1, ⵠ[3], 1, 224, 286, 1],
		[ᐃⲆΔ, ⵠ[ᐃΔⵠⲆ], 0, 223, 280, ⵠΔᐃ],
		[ᐃⲆΔ, ⵠ[3], ⵠⲆᐃ, 223, 284, 1],
		[1, ⵠ[ⲆΔᐃⲆ], 0, 224, 288, Ⲇⵠᐃ],
		[1, ⵠ[ᐃⲆᐃΔ], 0, 224, 279, 1],
		[1, ⵠ[3], ᐃⲆᐃᐃ, 223, 277, 1],
		[ᐃⲆΔ, ⵠ[3], 2, 224, 277, 1],
		[Δⵠᐃ, ⵠ[3], ᐃᐃΔⵠ, 224, 278, Δⵠᐃ],
		[1, ⵠ[ᐃⵠΔⲆ], ᐃⲆᐃᐃ, 224, 281, ⵠⲆⲆ],
		[ⵠΔᐃ, ⵠ[ᐃΔⵠⲆ], 2, 224, 283, 1],
		[ᐃⲆΔ, ⵠ[ᐃⵠΔᐃ], ᐃⲆᐃⵠ, 224, 282, ⵠΔᐃ],
		[1, ⵠ[ΔΔᐃΔ], ⵠⵠⵠᐃ, 224, 284, 1],
		[Δⵠᐃ, ⵠ[3], 2, 224, 285, 1],
		[1, ⵠ[ΔⲆⵠᐃ], 2, 224, 287, Δⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[3], 2, 223, 287, ⲆᐃΔ],
		[1, ⵠ[3], 2, 223, 285, 1],
		[ΔⵠΔ, ⵠ[3], 2, 223, 283, 1],
		[ΔⵠΔ, ⵠ[3], ⲆⲆΔⲆ, 223, 279, 1],
		[Δⵠᐃ, ⵠ[3], 3, 223, 278, 1],
		[ᐃⲆΔ, ⵠ[ΔΔᐃΔ], ⲆᐃᐃΔ, 223, 282, ᐃⲆΔ],
		[ⵠⲆⲆ, ⵠ[3], 3, 223, 286, 1],
		[ᐃⲆΔ, ⵠ[ⵠⵠΔⵠ], ΔⲆΔⲆ, 223, 289, 1],
		[ᐃⲆΔ, ⵠ[3], 3, 224, 289, Ⲇⵠᐃ],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 223, 288, 1],
		[ᐃⲆΔ, ⵠ[ᐃΔⵠⲆ], 2, 224, 290, Δⵠᐃ],
		[1, ⵠ[ΔⲆΔⲆ], ΔⵠΔ, 223, 290, Δⵠᐃ],
		[1, ⵠ[3], ΔΔᐃ, 224, 292, ⵠΔᐃ],
		[1, ⵠ[3], 0, 223, 294, 1],
		[1, ⵠ[3], 0, 224, 297, ᐃᐃΔ],
		[1, ⵠ[ⲆⵠⲆᐃ], 0, 223, 299, Δⵠᐃ],
		[ⵠⲆⲆ, ⵠ[3], ᐃᐃᐃⵠ, 223, 291, ᐃⲆΔ],
		[1, ⵠ[ᐃⵠΔⵠ], ᐃⲆᐃⵠ, 224, 291, ⵠⲆⲆ],
		[1, ⵠ[3], ᐃᐃΔⵠ, 223, 292, 1],
		[ⵠΔᐃ, ⵠ[ΔΔᐃΔ], 2, 223, 293, 1],
		[ⲆᐃΔ, ⵠ[ΔⲆⵠᐃ], 2, 224, 293, 1],
		[ⲆᐃΔ, ⵠ[3], ᐃᐃᐃⵠ, 224, 294, Ⲇⵠᐃ],
		[1, ⵠ[Δⵠⵠᐃ], 1, 224, 295, 1],
		[ΔⵠΔ, ⵠ[ⲆⵠⲆᐃ], ᐃⲆᐃᐃ, 223, 295, ⵠⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[3], 2, 223, 296, 1],
		[1, ⵠ[3], 2, 224, 296, 1],
		[ᐃⲆΔ, ⵠ[ⲆΔᐃⲆ], 2, 223, 297, Δⵠᐃ],
		[1, ⵠ[ΔΔᐃΔ], ᐃᐃⲆⲆ, 223, 298, 1],
		[1, ⵠ[3], 2, 224, 298, ⲆᐃΔ],
		[ⵠΔᐃ, ⵠ[3], 2, 224, 299, 1],
		[ⵠⲆⲆ, ⵠ[ⲆΔᐃⲆ], 2, 223, 300, 1],
		[1, ⵠ[3], 1, 224, 300, Ⲇⵠᐃ],
		[ⵠΔᐃ, ⵠ[ⲆΔᐃⲆ], ⵠᐃⲆ, 223, 301, 1],
		[ⲆᐃΔ, ⵠ[ᐃⲆᐃΔ], ⵠⲆᐃ, 224, 302, 1],
		[ΔⵠΔ, ⵠ[3], 0, 224, 304, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⲆᐃΔ], Δⵠⵠᐃ, 224, 301, ⵠΔᐃ],
		[ⵠΔᐃ, ⵠ[3], 3, 224, 303, 1],
		[1, ⵠ[3], 0, 221, 303, Ⲇⵠᐃ],
		[ΔⵠΔ, ⵠ[ᐃⵠΔⲆ], ⵠⲆᐃ, 219, 304, 1],
		[ⲆᐃΔ, ⵠ[ⵠⵠΔⵠ], 1, 222, 304, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⵠΔᐃ], ⵠΔᐃ, 222, 302, ⲆᐃΔ],
		[1, ⵠ[Δⵠⵠᐃ], 2, 223, 302, ⵠΔᐃ],
		[Δⵠᐃ, ⵠ[3], ᐃⲆᐃⵠ, 223, 303, 1],
		[Δⵠᐃ, ⵠ[3], ⵠⵠⵠᐃ, 222, 303, ⵠΔᐃ],
		[ᐃᐃΔ, ⵠ[3], ᐃᐃᐃⵠ, 223, 304, 1],
		[1, ⵠ[3], 2, 221, 304, ⵠⲆⲆ],
		[ⵠⲆⲆ, ⵠ[ⵠⵠΔⵠ], ⵠⵠⵠᐃ, 220, 304, ⵠΔᐃ],
		[ᐃᐃΔ, ⵠ[3], 2, 220, 303, 1],
		[ⵠΔᐃ, ⵠ[3], 2, 220, 302, 1],
		[1, ⵠ[Δⵠⵠᐃ], ⵠⵠⵠᐃ, 221, 302, Ⲇⵠᐃ],
		[1, ⵠ[3], 2, 219, 303, 1],
		[ᐃⲆΔ, ⵠ[3], 0, 217, 302, ᐃⲆΔ],
		[Ⲇⵠᐃ, ⵠ[3], ⵠᐃⲆ, 215, 304, ⵠⲆⲆ],
		[1, ⵠ[3], Ⲇᐃⵠ, 214, 302, 1],
		[1, ⵠ[3], 1, 218, 302, 1],
		[Ⲇⵠᐃ, ⵠ[3], 1, 217, 304, 1],
		[Δⵠᐃ, ⵠ[ⲆᐃᐃΔ], 1, 215, 302, Ⲇⵠᐃ],
		[ᐃⲆΔ, ⵠ[3], 2, 219, 302, 1],
		[1, ⵠ[3], 2, 218, 303, ⵠΔᐃ],
		[1, ⵠ[ΔΔᐃΔ], ΔΔⲆᐃ, 218, 304, ⵠⲆⲆ],
		[1, ⵠ[ΔΔᐃΔ], ⲆⲆΔⲆ, 217, 303, Δⵠᐃ],
		[ⲆᐃΔ, ⵠ[ᐃΔⵠⲆ], 2, 216, 304, ⵠⲆⲆ],
		[ⵠⲆⲆ, ⵠ[ᐃΔⵠⲆ], 2, 215, 303, ΔⵠΔ],
		[1, ⵠ[ⵠⵠΔⵠ], 2, 216, 303, 1],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 216, 302, 1],
		[1, ⵠ[3], 2, 214, 303, Ⲇⵠᐃ],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 214, 304, ΔⵠΔ],
		[ᐃᐃΔ, ⵠ[3], 0, 212, 302, 1],
		[ⵠΔᐃ, ⵠ[3], 0, 210, 303, 1],
		[ⵠΔᐃ, ⵠ[3], ⵠᐃⲆ, 212, 304, ᐃᐃΔ],
		[1, ⵠ[ⵠⵠΔⵠ], ⵠⲆΔ, 208, 304, ⵠΔᐃ],
		[1, ⵠ[ΔⲆⵠᐃ], ⵠΔᐃ, 210, 302, ⵠⲆⲆ],
		[ⲆᐃΔ, ⵠ[ⲆΔᐃⲆ], 1, 208, 303, ⲆᐃΔ],
		[1, ⵠ[3], 2, 213, 302, 1],
		[1, ⵠ[ᐃⲆᐃΔ], 2, 213, 303, ΔⵠΔ],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 213, 304, 1],
		[1, ⵠ[ᐃⵠΔⵠ], ᐃᐃⲆⲆ, 212, 303, ΔⵠΔ],
		[1, ⵠ[3], ᐃᐃΔⵠ, 211, 304, 1],
		[1, ⵠ[3], ᐃᐃⲆⲆ, 211, 303, 1],
		[ᐃⲆΔ, ⵠ[3], 2, 211, 302, 1],
		[1, ⵠ[ᐃⵠΔᐃ], ᐃᐃⲆⲆ, 209, 302, ⲆᐃΔ],
		[1, ⵠ[3], ᐃᐃᐃⵠ, 209, 303, ⲆᐃΔ],
		[ⵠⲆⲆ, ⵠ[ⲆΔᐃⲆ], 2, 209, 304, 1],
		[1, ⵠ[3], 2, 210, 304, Δⵠᐃ],
		[ᐃᐃΔ, ⵠ[Δⵠⵠᐃ], 2, 208, 302, 1],
		[1, ⵠ[3], ⵠⲆᐃ, 206, 303, 1],
		[ⵠⲆⲆ, ⵠ[ΔⲆⵠᐃ], ΔΔᐃ, 203, 304, ᐃⲆΔ],
		[1, ⵠ[ⲆᐃᐃΔ], ᐃᐃⲆ, 200, 303, ΔⵠΔ],
		[ᐃᐃΔ, ⵠ[3], ⵠⲆᐃ, 199, 304, 1],
		[1, ⵠ[3], ⵠᐃⲆ, 195, 304, ᐃⲆΔ],
		[ⵠⲆⲆ, ⵠ[ΔⲆΔⲆ], 0, 191, 303, ⵠⲆⲆ],
		[ⵠⲆⲆ, ⵠ[ᐃⵠΔᐃ], 0, 193, 304, ᐃⲆΔ],
		[ⵠⲆⲆ, ⵠ[3], 0, 189, 304, ⲆᐃΔ],
		[1, ⵠ[3], ⵠΔᐃ, 204, 303, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⵠΔⲆ], ΔⲆⲆ, 197, 302, ⲆᐃΔ],
		[1, ⵠ[Δⵠⵠᐃ], 0, 202, 302, 1],
		[ⵠΔᐃ, ⵠ[ᐃⲆᐃΔ], ΔⲆⲆ, 188, 302, 1],
		[1, ⵠ[ⲆΔᐃⲆ], Ⲇᐃⵠ, 194, 302, ΔⵠΔ],
		[1, ⵠ[ⲆⵠⲆᐃ], 1, 197, 303, ⲆᐃΔ],
		[ⲆᐃΔ, ⵠ[3], 1, 201, 304, 1],
		[ΔⵠΔ, ⵠ[3], ᐃⲆΔ, 192, 302, 1],
		[Ⲇⵠᐃ, ⵠ[ⲆᐃᐃΔ], Δⵠᐃ, 189, 303, ΔⵠΔ],
		[Δⵠᐃ, ⵠ[3], ΔⵠΔ, 205, 302, ⲆᐃΔ],
		[1, ⵠ[3], ⵠⲆⲆ, 188, 304, 1],
		[Ⲇⵠᐃ, ⵠ[ᐃⲆᐃΔ], 2, 207, 302, ΔⵠΔ],
		[1, ⵠ[ᐃⵠΔⵠ], ᐃᐃⲆⲆ, 207, 303, 1],
		[ᐃⲆΔ, ⵠ[ⵠⵠΔⵠ], ⲆⲆΔⲆ, 207, 304, ᐃⲆΔ],
		[1, ⵠ[3], ⲆⲆΔⲆ, 206, 304, 1],
		[ⵠⲆⲆ, ⵠ[3], ΔΔⲆᐃ, 206, 302, 1],
		[ᐃᐃΔ, ⵠ[ΔⲆⵠᐃ], 2, 205, 303, 1],
		[ᐃⲆΔ, ⵠ[3], ᐃᐃᐃⵠ, 204, 304, 1],
		[1, ⵠ[3], 2, 205, 304, ⲆᐃΔ],
		[1, ⵠ[ᐃⵠΔᐃ], 2, 204, 302, 1],
		[ⵠΔᐃ, ⵠ[3], 2, 203, 302, 1],
		[1, ⵠ[ΔΔᐃΔ], ᐃᐃΔⵠ, 203, 303, Ⲇⵠᐃ],
		[1, ⵠ[ⲆΔᐃⲆ], ᐃᐃⲆⲆ, 202, 303, ᐃⲆΔ],
		[ⵠⲆⲆ, ⵠ[ΔⲆΔⲆ], 2, 201, 303, ᐃⲆΔ],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 201, 302, ᐃᐃΔ],
		[ᐃⲆΔ, ⵠ[3], ᐃᐃᐃⵠ, 200, 302, ⲆᐃΔ],
		[1, ⵠ[3], 2, 199, 302, 1],
		[1, ⵠ[3], 2, 198, 303, 1],
		[Ⲇⵠᐃ, ⵠ[3], 2, 198, 302, ᐃⲆΔ],
		[1, ⵠ[ᐃⵠΔᐃ], 2, 199, 303, 1],
		[Δⵠᐃ, ⵠ[3], 2, 200, 304, ᐃᐃΔ],
		[ⲆᐃΔ, ⵠ[3], ᐃⲆᐃᐃ, 202, 304, 1],
		[1, ⵠ[3], ᐃⲆᐃᐃ, 197, 304, 1],
		[1, ⵠ[ᐃⵠΔⵠ], ΔΔⲆᐃ, 198, 304, 1],
		[ΔⵠΔ, ⵠ[3], ᐃⲆᐃⵠ, 196, 304, ⵠⲆⲆ],
		[ⵠⲆⲆ, ⵠ[ⲆΔᐃⲆ], 2, 196, 303, 1],
		[1, ⵠ[ᐃⵠΔᐃ], 2, 196, 302, 1],
		[1, ⵠ[ᐃⵠΔᐃ], 2, 195, 302, 1],
		[1, ⵠ[ᐃΔⵠⲆ], ᐃⲆᐃᐃ, 195, 303, ΔⵠΔ],
		[Ⲇⵠᐃ, ⵠ[ΔⲆΔⲆ], 2, 194, 303, ⵠΔᐃ],
		[ⵠΔᐃ, ⵠ[3], ᐃᐃⲆⲆ, 194, 304, Ⲇⵠᐃ],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 193, 303, ΔⵠΔ],
		[Ⲇⵠᐃ, ⵠ[3], 2, 193, 302, ᐃⲆΔ],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 192, 303, 1],
		[ᐃⲆΔ, ⵠ[ⲆᐃᐃΔ], ᐃᐃΔⵠ, 192, 304, ⲆᐃΔ],
		[ⵠΔᐃ, ⵠ[3], 2, 191, 304, 1],
		[Ⲇⵠᐃ, ⵠ[3], 2, 190, 304, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 190, 303, 1],
		[1, ⵠ[ᐃⵠΔⲆ], 2, 189, 302, ⵠΔᐃ],
		[1, ⵠ[3], ᐃᐃⲆⲆ, 190, 302, 1],
		[ᐃᐃΔ, ⵠ[3], ΔΔⲆᐃ, 191, 302, 1],
		[Δⵠᐃ, ⵠ[3], 2, 188, 303, Ⲇⵠᐃ],
		[1, ⵠ[3], 0, 186, 303, ⵠⲆⲆ],
		[1, ⵠ[3], 0, 183, 304, Ⲇⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[ⲆΔᐃⲆ], 0, 184, 302, ᐃᐃΔ],
		[1, ⵠ[ᐃⵠΔⵠ], ΔΔᐃ, 181, 302, ᐃᐃΔ],
		[ΔⵠΔ, ⵠ[ⲆᐃᐃΔ], ΔΔᐃ, 176, 302, 1],
		[Ⲇⵠᐃ, ⵠ[3], Ⲇᐃⵠ, 178, 303, 1],
		[1, ⵠ[3], ΔⲆⲆ, 173, 304, 1],
		[ⵠⲆⲆ, ⵠ[ΔⲆⵠᐃ], 0, 170, 303, 1],
		[ⵠⲆⲆ, ⵠ[3], 0, 172, 302, 1],
		[1, ⵠ[ᐃΔⵠⲆ], 1, 182, 303, 1],
		[1, ⵠ[ⵠⵠΔⵠ], ᐃᐃΔ, 178, 304, 1],
		[ᐃᐃΔ, ⵠ[3], 1, 175, 304, Δⵠᐃ],
		[1, ⵠ[ᐃⲆᐃΔ], ⵠⲆⲆ, 173, 302, 1],
		[1, ⵠ[ᐃⲆᐃΔ], 1, 185, 304, 1],
		[ᐃᐃΔ, ⵠ[ⲆᐃᐃΔ], ΔⵠΔ, 169, 304, ΔⵠΔ],
		[1, ⵠ[ⵠⵠΔⵠ], 3, 187, 304, Ⲇⵠᐃ],
		[1, ⵠ[ᐃⵠΔᐃ], ᐃⲆᐃΔ, 186, 304, 1],
		[Δⵠᐃ, ⵠ[3], 3, 187, 303, ⲆᐃΔ],
		[1, ⵠ[3], ⲆᐃᐃΔ, 187, 302, 1],
		[1, ⵠ[ΔⲆΔⲆ], ⲆΔᐃⲆ, 186, 302, ᐃⲆΔ],
		[1, ⵠ[ⵠⵠΔⵠ], 3, 185, 302, 1],
		[ᐃᐃΔ, ⵠ[3], 3, 185, 303, 1],
		[ᐃᐃΔ, ⵠ[3], 3, 184, 303, 1],
		[1, ⵠ[ΔⲆⵠᐃ], ᐃΔⵠⲆ, 183, 303, ⵠΔᐃ],
		[1, ⵠ[ⲆⵠⲆᐃ], ⵠⵠΔⵠ, 183, 302, 1],
		[1, ⵠ[3], ΔⲆⵠᐃ, 182, 302, 1],
		[Ⲇⵠᐃ, ⵠ[3], 3, 184, 304, 1],
		[ᐃᐃΔ, ⵠ[3], 3, 182, 304, 1],
		[Ⲇⵠᐃ, ⵠ[3], ᐃⵠΔⵠ, 181, 304, ⵠΔᐃ],
		[Ⲇⵠᐃ, ⵠ[3], ⲆᐃᐃΔ, 179, 304, ⵠΔᐃ],
		[1, ⵠ[ᐃⵠΔᐃ], ⲆΔᐃⲆ, 180, 304, 1],
		[ΔⵠΔ, ⵠ[3], 3, 181, 303, 1],
		[ⵠΔᐃ, ⵠ[ᐃΔⵠⲆ], ᐃⵠΔⵠ, 180, 303, 1],
		[1, ⵠ[3], 3, 179, 303, ᐃⲆΔ],
		[1, ⵠ[3], Δⵠⵠᐃ, 180, 302, ⲆᐃΔ],
		[ΔⵠΔ, ⵠ[ΔΔᐃΔ], ⲆⵠⲆᐃ, 179, 302, 1],
		[1, ⵠ[3], Δⵠⵠᐃ, 178, 302, ⵠΔᐃ],
		[ⵠⲆⲆ, ⵠ[ⵠⵠΔⵠ], ᐃⵠΔⵠ, 177, 302, 1],
		[ⲆᐃΔ, ⵠ[ΔΔᐃΔ], 3, 177, 304, ⵠΔᐃ],
		[1, ⵠ[3], ᐃⵠΔᐃ, 177, 303, ⵠⲆⲆ],
		[ᐃᐃΔ, ⵠ[3], 3, 176, 303, ⲆᐃΔ],
		[1, ⵠ[3], ⲆⵠⲆᐃ, 176, 304, 1],
		[1, ⵠ[3], 3, 174, 304, 1],
		[1, ⵠ[3], ⲆⵠⲆᐃ, 175, 303, 1],
		[Δⵠᐃ, ⵠ[ΔⲆΔⲆ], 3, 174, 303, 1],
		[1, ⵠ[3], ΔΔᐃΔ, 173, 303, 1],
		[ⵠΔᐃ, ⵠ[3], ᐃⵠΔᐃ, 172, 303, ᐃᐃΔ],
		[ⲆᐃΔ, ⵠ[ᐃⵠΔⵠ], ΔⲆⵠᐃ, 171, 303, Ⲇⵠᐃ],
		[1, ⵠ[3], 3, 170, 304, 1],
		[1, ⵠ[3], 3, 171, 304, Ⲇⵠᐃ],
		[ⵠΔᐃ, ⵠ[ⲆⵠⲆᐃ], ΔⲆΔⲆ, 172, 304, 1],
		[ᐃᐃΔ, ⵠ[ⲆΔᐃⲆ], ΔⲆⵠᐃ, 174, 302, ⵠⲆⲆ],
		[1, ⵠ[ᐃⵠΔⲆ], ᐃⵠΔⲆ, 175, 302, 1],
		[1, ⵠ[3], 3, 171, 302, 1],
		[1, ⵠ[ⲆΔᐃⲆ], 3, 170, 302, ⵠⲆⲆ],
		[Δⵠᐃ, ⵠ[3], ⲆⵠⲆᐃ, 169, 302, 1],
		[Ⲇⵠᐃ, ⵠ[3], ΔΔᐃΔ, 169, 303, 1],
		[ΔⵠΔ, ⵠ[ᐃⵠΔⵠ], 0, 168, 302, 1],
		[1, ⵠ[3], 0, 166, 303, Ⲇⵠᐃ],
		[1, ⵠ[ⲆΔᐃⲆ], 0, 163, 304, ⲆᐃΔ],
		[1, ⵠ[ΔⲆⵠᐃ], 0, 161, 302, 1],
		[1, ⵠ[3], ᐃᐃⲆ, 159, 303, ΔⵠΔ],
		[1, ⵠ[Δⵠⵠᐃ], Ⲇᐃⵠ, 152, 304, 1],
		[1, ⵠ[ΔΔᐃΔ], ΔⲆⲆ, 155, 303, 1],
		[1, ⵠ[ΔⲆⵠᐃ], 1, 164, 303, ⵠⲆⲆ],
		[1, ⵠ[3], 1, 162, 303, 1],
		[Ⲇⵠᐃ, ⵠ[ᐃⲆᐃΔ], 1, 158, 304, ⲆᐃΔ],
		[1, ⵠ[ᐃⲆᐃΔ], 1, 156, 302, Ⲇⵠᐃ],
		[1, ⵠ[3], ΔⵠΔ, 153, 302, ΔⵠΔ],
		[Ⲇⵠᐃ, ⵠ[3], Ⲇⵠᐃ, 154, 304, Ⲇⵠᐃ],
		[ⲆᐃΔ, ⵠ[ΔⲆΔⲆ], 2, 168, 304, ⵠⲆⲆ],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 168, 303, 1],
		[1, ⵠ[ᐃⲆᐃΔ], 2, 167, 303, Ⲇⵠᐃ],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 167, 304, 1],
		[1, ⵠ[3], 2, 166, 304, 1],
		[1, ⵠ[ᐃⲆᐃΔ], 2, 165, 304, ⵠⲆⲆ],
		[1, ⵠ[ᐃⵠΔⲆ], ᐃᐃᐃⵠ, 164, 304, ⲆᐃΔ],
		[ᐃᐃΔ, ⵠ[ⵠⵠΔⵠ], ᐃⲆᐃⵠ, 165, 303, 1],
		[1, ⵠ[3], ᐃᐃΔⵠ, 167, 302, ᐃⲆΔ],
		[1, ⵠ[3], 2, 166, 302, Ⲇⵠᐃ],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 165, 302, Δⵠᐃ],
		[ᐃⲆΔ, ⵠ[ⵠⵠΔⵠ], 2, 164, 302, 1],
		[1, ⵠ[ⲆΔᐃⲆ], 2, 163, 302, ᐃᐃΔ],
		[1, ⵠ[ᐃΔⵠⲆ], 2, 162, 302, 1],
		[ᐃᐃΔ, ⵠ[3], ᐃⲆᐃⵠ, 163, 303, 1],
		[1, ⵠ[ⵠⵠΔⵠ], 2, 162, 304, 1],
		[ⵠΔᐃ, ⵠ[ᐃⵠΔⲆ], 2, 160, 304, 1],
		[ⵠⲆⲆ, ⵠ[ΔⲆⵠᐃ], ᐃᐃΔⵠ, 159, 304, 1],
		[1, ⵠ[3], ᐃᐃᐃⵠ, 161, 304, 1],
		[Δⵠᐃ, ⵠ[Δⵠⵠᐃ], 2, 161, 303, ΔⵠΔ],
		[ⲆᐃΔ, ⵠ[ΔⲆΔⲆ], 2, 160, 303, ⵠⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[3], 2, 160, 302, 1],
		[ᐃⲆΔ, ⵠ[ᐃΔⵠⲆ], 2, 158, 302, ᐃⲆΔ],
		[1, ⵠ[3], 2, 159, 302, ᐃⲆΔ],
		[ⵠΔᐃ, ⵠ[3], 2, 157, 302, Ⲇⵠᐃ],
		[ΔⵠΔ, ⵠ[3], 2, 156, 303, 1],
		[ᐃᐃΔ, ⵠ[3], ⲆⲆΔⲆ, 157, 303, 1],
		[1, ⵠ[ᐃΔⵠⲆ], 2, 158, 303, ΔⵠΔ],
		[1, ⵠ[ᐃⵠΔᐃ], 2, 157, 304, 1],
		[1, ⵠ[ΔⲆΔⲆ], ᐃᐃΔⵠ, 156, 304, ᐃⲆΔ],
		[ⵠΔᐃ, ⵠ[3], ᐃⲆᐃⵠ, 155, 304, ⵠΔᐃ],
		[1, ⵠ[3], 2, 153, 304, ⲆᐃΔ],
		[ΔⵠΔ, ⵠ[3], 2, 153, 303, 1],
		[1, ⵠ[3], ⲆⲆΔⲆ, 154, 303, ⵠΔᐃ],
		[1, ⵠ[3], 2, 154, 302, 1],
		[ᐃⲆΔ, ⵠ[ⵠⵠΔⵠ], 2, 155, 302, ᐃⲆΔ],
		[ᐃⲆΔ, ⵠ[ᐃΔⵠⲆ], ᐃⲆᐃᐃ, 152, 303, ᐃⲆΔ],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 152, 302, 1],
		[1, ⵠ[3], ⵠⲆᐃ, 151, 302, 1],
		[ⲆᐃΔ, ⵠ[ⵠⵠΔⵠ], 0, 149, 303, 1],
		[ᐃⲆΔ, ⵠ[3], ⵠⲆᐃ, 145, 304, 1],
		[1, ⵠ[3], ᐃᐃᐃ, 147, 302, 1],
		[1, ⵠ[3], ⵠⵠⵠ, 143, 303, Ⲇⵠᐃ],
		[ᐃᐃΔ, ⵠ[ΔΔᐃΔ], ⵠⲆΔ, 141, 303, Ⲇⵠᐃ],
		[1, ⵠ[3], 1, 147, 304, ⵠⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[3], ⵠⲆⲆ, 145, 302, 1],
		[ⵠⲆⲆ, ⵠ[3], ᐃᐃΔ, 142, 302, ᐃᐃΔ],
		[ⵠⲆⲆ, ⵠ[3], 1, 150, 304, ⵠΔᐃ],
		[Ⲇⵠᐃ, ⵠ[ᐃⵠΔᐃ], ᐃⲆᐃᐃ, 151, 304, 1],
		[1, ⵠ[ΔΔᐃΔ], 2, 151, 303, 1],
		[ΔⵠΔ, ⵠ[3], ⵠⵠⵠᐃ, 150, 303, 1],
		[Ⲇⵠᐃ, ⵠ[3], ᐃᐃⲆⲆ, 150, 302, 1],
		[ⵠⲆⲆ, ⵠ[Δⵠⵠᐃ], 2, 148, 302, ᐃⲆΔ],
		[1, ⵠ[Δⵠⵠᐃ], ΔΔⲆᐃ, 146, 302, 1],
		[ΔⵠΔ, ⵠ[ᐃⵠΔᐃ], 2, 144, 302, 1],
		[1, ⵠ[3], 2, 141, 302, ⵠΔᐃ],
		[ΔⵠΔ, ⵠ[ⲆᐃᐃΔ], ᐃᐃᐃⵠ, 141, 304, ⵠΔᐃ],
		[1, ⵠ[Δⵠⵠᐃ], 2, 142, 304, Ⲇⵠᐃ],
		[ᐃⲆΔ, ⵠ[3], 2, 142, 303, 1],
		[ⲆᐃΔ, ⵠ[ⲆⵠⲆᐃ], 2, 143, 304, ⲆᐃΔ],
		[1, ⵠ[ᐃΔⵠⲆ], ᐃᐃᐃⵠ, 144, 304, 1],
		[1, ⵠ[ᐃⵠΔⲆ], 2, 144, 303, 1],
		[1, ⵠ[3], 2, 148, 304, Δⵠᐃ],
		[ⲆᐃΔ, ⵠ[3], 2, 148, 303, Δⵠᐃ],
		[1, ⵠ[3], 2, 146, 303, Ⲇⵠᐃ],
		[ⵠⲆⲆ, ⵠ[ᐃⵠΔⵠ], ⲆⲆΔⲆ, 145, 303, Δⵠᐃ],
		[ΔⵠΔ, ⵠ[ⲆᐃᐃΔ], 2, 147, 303, ⵠΔᐃ],
		[1, ⵠ[ΔΔᐃΔ], ⵠⵠⵠᐃ, 146, 304, 1],
		[ⲆᐃΔ, ⵠ[3], 2, 149, 304, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⵠΔⵠ], ᐃⵠΔⵠ, 149, 302, ⲆᐃΔ],
		[Ⲇⵠᐃ, ⵠ[3], ᐃΔⵠⲆ, 143, 302, ⲆᐃΔ],
		[1, ⵠ[ΔΔᐃΔ], ⵠⲆΔ, 139, 304, 1],
		[ⵠΔᐃ, ⵠ[ᐃⲆᐃΔ], 0, 138, 302, ᐃᐃΔ],
		[ⲆᐃΔ, ⵠ[3], Δⵠᐃ, 139, 302, ⵠΔᐃ],
		[ⵠⲆⲆ, ⵠ[3], ⲆⲆΔⲆ, 140, 302, ⲆᐃΔ],
		[ⵠⲆⲆ, ⵠ[ⲆΔᐃⲆ], ᐃⲆᐃⵠ, 140, 303, ⵠΔᐃ],
		[1, ⵠ[ⵠⵠΔⵠ], 2, 139, 303, 1],
		[ⵠΔᐃ, ⵠ[3], 2, 138, 303, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⲆᐃΔ], ᐃᐃΔⵠ, 138, 304, ⲆᐃΔ],
		[1, ⵠ[3], ᐃᐃᐃⵠ, 140, 304, Δⵠᐃ],
		[ᐃⲆΔ, ⵠ[ⲆⵠⲆᐃ], ⵠᐃⲆ, 137, 304, ᐃⲆΔ],
		[1, ⵠ[ᐃⵠΔᐃ], 0, 135, 303, 1],
		[Ⲇⵠᐃ, ⵠ[ᐃⵠΔⲆ], ΔΔᐃ, 133, 304, 1],
		[1, ⵠ[ⲆΔᐃⲆ], ⵠⲆⲆ, 135, 304, ⲆᐃΔ],
		[1, ⵠ[3], Δⵠᐃ, 136, 302, Ⲇⵠᐃ],
		[1, ⵠ[3], ΔΔⲆᐃ, 137, 302, 1],
		[ᐃᐃΔ, ⵠ[3], ᐃⲆᐃⵠ, 136, 303, ΔⵠΔ],
		[ⵠΔᐃ, ⵠ[ΔⲆΔⲆ], 2, 137, 303, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 136, 304, Δⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[3], 2, 134, 304, 1],
		[Ⲇⵠᐃ, ⵠ[3], 2, 134, 303, 1],
		[ⵠΔᐃ, ⵠ[3], ᐃⲆᐃⵠ, 133, 303, 1],
		[1, ⵠ[3], 2, 132, 304, ⲆᐃΔ],
		[1, ⵠ[ⲆᐃᐃΔ], 0, 131, 302, 1],
		[ⵠΔᐃ, ⵠ[3], 0, 134, 302, ΔⵠΔ],
		[1, ⵠ[3], ᐃᐃⲆ, 129, 304, 1],
		[1, ⵠ[ⲆᐃᐃΔ], 1, 130, 303, 1],
		[ⵠΔᐃ, ⵠ[ΔⲆⵠᐃ], Δⵠᐃ, 132, 302, 1],
		[1, ⵠ[3], 2, 135, 302, 1],
		[1, ⵠ[ⵠⵠΔⵠ], 2, 133, 302, 1],
		[1, ⵠ[ΔⲆⵠᐃ], 2, 132, 303, 1],
		[ⵠⲆⲆ, ⵠ[3], ᐃᐃᐃⵠ, 131, 303, 1],
		[1, ⵠ[3], 2, 130, 304, ΔⵠΔ],
		[1, ⵠ[ᐃΔⵠⲆ], ᐃⲆᐃⵠ, 131, 304, 1],
		[1, ⵠ[ⵠⵠΔⵠ], 2, 128, 304, 1],
		[1, ⵠ[ⵠⵠΔⵠ], ᐃᐃᐃⵠ, 129, 303, 1],
		[ⲆᐃΔ, ⵠ[3], ⵠⵠⵠᐃ, 130, 302, 1],
		[1, ⵠ[3], Δⵠⵠᐃ, 127, 304, ᐃⲆΔ],
		[Ⲇⵠᐃ, ⵠ[Δⵠⵠᐃ], ⲆⲆΔⲆ, 132, 301, 1],
		[ΔⵠΔ, ⵠ[ⲆᐃᐃΔ], 2, 133, 301, ᐃⲆΔ],
		[ⲆᐃΔ, ⵠ[ᐃΔⵠⲆ], ᐃⲆᐃᐃ, 134, 301, 1],
		[1, ⵠ[ΔⲆⵠᐃ], ᐃⲆᐃⵠ, 135, 301, 1],
		[Ⲇⵠᐃ, ⵠ[ⲆΔᐃⲆ], 3, 131, 301, ᐃᐃΔ],
		[ⵠⲆⲆ, ⵠ[ᐃⲆᐃΔ], ΔⲆΔⲆ, 136, 301, Δⵠᐃ],
		[1, ⵠ[3], 3, 136, 178, 1],
		[ⵠⲆⲆ, ⵠ[3], 0, 136, 183, ⵠⲆⲆ],
		[ⵠⲆⲆ, ⵠ[ⲆⵠⲆᐃ], ΔΔⲆᐃ, 136, 182, 1],
		[1, ⵠ[3], Ⲇⵠᐃ, 136, 181, ΔⵠΔ],
		[1, ⵠ[3], 0, 136, 179, ⵠΔᐃ],
		[1, ⵠ[3], ᐃΔⵠⲆ, 136, 180, ᐃᐃΔ],
		[ⲆᐃΔ, ⵠ[ᐃⵠΔⲆ], 2, 135, 183, 1],
		[ⵠΔᐃ, ⵠ[Δⵠⵠᐃ], 1, 135, 182, 1],
		[1, ⵠ[ΔⲆⵠᐃ], 3, 135, 180, Ⲇⵠᐃ],
		[1, ⵠ[3], 0, 134, 183, Ⲇⵠᐃ],
		[ᐃⲆΔ, ⵠ[ΔⲆⵠᐃ], ᐃⲆᐃᐃ, 133, 183, 1],
		[Δⵠᐃ, ⵠ[ⲆΔᐃⲆ], 3, 133, 182, Ⲇⵠᐃ],
		[Δⵠᐃ, ⵠ[ΔⲆⵠᐃ], 1, 132, 183, ⲆᐃΔ],
		[1, ⵠ[3], 3, 131, 183, 1],
		[ᐃᐃΔ, ⵠ[ⲆᐃᐃΔ], 2, 135, 181, 1],
		[ⵠⲆⲆ, ⵠ[ⲆⵠⲆᐃ], ᐃᐃᐃⵠ, 134, 182, 1],
		[1, ⵠ[3], 3, 134, 181, 1],
		[1, ⵠ[72], 0, 213, 301, ΔΔᐃ],
		[Ⲇⵠᐃ, ⵠ[72], Ⲇᐃⵠ, 204, 301, ⵠⲆΔ],
		[Δⵠᐃ, ⵠ[72], 1, 196, 288, 0],
		[Δⵠᐃ, ⵠ[72], 1, 198, 283, Ⲇᐃⵠ],
		[Ⲇⵠᐃ, ⵠ[72], Δⵠᐃ, 190, 288, 0],
		[1, ⵠ[72], ᐃᐃΔ, 189, 296, 0],
		[1, ⵠ[72], ⲆᐃΔ, 193, 293, 0],
		[1, ⵠ[72], 1, 183, 292, ⵠⵠⵠ],
		[Δⵠᐃ, ⵠ[72], 1, 186, 287, ΔⲆⲆ],
		[1, ⵠ[72], Δⵠᐃ, 190, 290, 0],
		[1, ⵠ[72], 1, 218, 271, ᐃᐃⲆ],
		[Δⵠᐃ, ⵠ[72], 1, 220, 266, 0],
		[Δⵠᐃ, ⵠ[72], ᐃᐃΔ, 211, 268, 0],
		[ⵠⲆⲆ, ⵠ[72], Ⲇⵠᐃ, 210, 274, 0],
		[1, ⵠ[72], 1, 205, 263, ΔΔᐃ],
		[ⵠⲆⲆ, ⵠ[72], 1, 216, 258, ⵠⲆᐃ],
		[ⵠⲆⲆ, ⵠ[72], 2, 201, 294, ΔⲆⲆ],
		[ᐃᐃΔ, ⵠ[72], ᐃᐃⲆⲆ, 190, 296, ⵠᐃⲆ],
		[ⵠΔᐃ, ⵠ[72], ᐃᐃᐃⵠ, 188, 299, 0],
		[1, ⵠ[72], ΔΔⲆᐃ, 186, 297, ΔΔᐃ],
		[Ⲇⵠᐃ, ⵠ[72], 2, 188, 296, 0],
		[Ⲇⵠᐃ, ⵠ[72], 2, 189, 291, Ⲇᐃⵠ],
		[1, ⵠ[72], 2, 189, 286, ΔⲆⲆ],
		[1, ⵠ[72], 2, 191, 286, ΔⲆⲆ],
		[1, ⵠ[72], 2, 197, 286, ⵠⲆΔ],
		[ⵠΔᐃ, ⵠ[72], 2, 195, 290, 0],
		[ⲆᐃΔ, ⵠ[72], ᐃⲆᐃⵠ, 186, 288, 0],
		[1, ⵠ[72], ᐃᐃᐃⵠ, 184, 290, 0],
		[ⲆᐃΔ, ⵠ[72], 2, 183, 293, 0],
		[1, ⵠ[72], 2, 198, 286, ⵠⲆΔ],
		[ⲆᐃΔ, ⵠ[72], 2, 196, 283, 0],
		[ΔⵠΔ, ⵠ[72], 2, 196, 281, ⵠⵠⵠ],
		[1, ⵠ[72], ᐃᐃᐃⵠ, 201, 280, 0],
		[1, ⵠ[72], ⲆⲆΔⲆ, 205, 287, 0],
		[Δⵠᐃ, ⵠ[72], 2, 209, 283, ⵠⲆᐃ],
		[1, ⵠ[72], 2, 212, 280, 0],
		[ⲆᐃΔ, ⵠ[72], ᐃᐃΔⵠ, 209, 277, 0],
		[ⵠΔᐃ, ⵠ[72], ᐃᐃΔⵠ, 217, 278, 0],
		[1, ⵠ[72], ᐃᐃᐃⵠ, 219, 275, ΔⲆⲆ],
		[1, ⵠ[72], 2, 220, 271, 0],
		[1, ⵠ[72], 2, 220, 267, 0],
		[1, ⵠ[72], ⵠⵠⵠᐃ, 217, 265, Ⲇᐃⵠ],
		[Ⲇⵠᐃ, ⵠ[72], ⵠⵠⵠᐃ, 213, 267, 0],
		[1, ⵠ[72], 2, 208, 264, 0],
		[ⲆᐃΔ, ⵠ[72], ᐃᐃᐃⵠ, 206, 261, ᐃᐃⲆ],
		[ⲆᐃΔ, ⵠ[72], 2, 203, 265, Ⲇᐃⵠ],
		[Δⵠᐃ, ⵠ[72], 2, 204, 270, ΔΔᐃ],
		[ΔⵠΔ, ⵠ[72], ΔΔⲆᐃ, 196, 267, 0],
		[ⵠΔᐃ, ⵠ[72], 2, 214, 261, ΔΔᐃ],
		[1, ⵠ[72], 2, 211, 260, 0],
		[1, ⵠ[72], 2, 218, ΔᐃΔᐃⲆΔⲆ, ΔⲆⲆ],
		[1, ⵠ[72], 2, 219, 262, ⵠⲆΔ],
		[1, ⵠ[72], ᐃᐃᐃⵠ, 220, 253, ⵠⲆᐃ],
		[1, ⵠ[72], 2, 211, 257, ΔΔᐃ],
		[Δⵠᐃ, ⵠ[105], ΔΔᐃΔ, 198, 27, ⵠΔᐃ],
		[1, ⵠ[105], 3, 201, 30, 1],
		[ⲆᐃΔ, ⵠ[105], 3, 200, 32, 1],
		[1, ⵠ[105], ⲆⵠⲆᐃ, 198, 33, ᐃᐃΔ],
		[ⵠΔᐃ, ⵠ[105], ΔⲆⵠᐃ, 196, 33, ΔⵠΔ],
		[ⵠΔᐃ, ⵠ[105], 3, 194, 32, ⵠΔᐃ],
		[1, ⵠ[105], 3, 194, 28, ᐃᐃΔ],
		[1, ⵠ[105], 0, 200, 28, ΔⵠΔ],
		[1, ⵠ[105], 0, 193, 30, ᐃⲆΔ],
		[Δⵠᐃ, ⵠ[105], ⲆⵠⲆᐃ, 196, 27, Ⲇⵠᐃ],
		[1, ⵠ[105], ΔΔᐃΔ, 199, 30, ΔⵠΔ],
		[ⵠΔᐃ, ⵠ[105], ⲆΔᐃⲆ, 197, 29, Ⲇⵠᐃ],
		[1, ⵠ[105], ⲆⵠⲆᐃ, 195, 30, 1],
		[1, ⵠ[105], 3, 197, 31, 1],
		[ᐃᐃΔ, ⵠ[105], 2, 201, 33, 1],
		[ᐃᐃΔ, ⵠ[105], 4, 202, 34, ⵠⲆⲆ],
		[1, ⵠ[105], 4, 202, 35, 1],
		[ᐃⲆΔ, ⵠ[105], ᐃⲆᐃⲆ, 203, 36, 1],
		[1, ⵠ[105], 4, 204, 37, ⵠⲆⲆ],
		[ᐃⲆΔ, ⵠ[105], 2, 205, 38, ᐃⲆΔ],
		[1, ⵠ[105], ⲆⵠΔΔ, 205, 39, ᐃⲆΔ],
		[ⵠΔᐃ, ⵠ[105], ⲆⵠΔΔ, 205, 40, Δⵠᐃ],
		[ⵠⲆⲆ, ⵠ[105], ᐃᐃⲆⲆ, 206, 41, 1],
		[1, ⵠ[105], Ⲇⵠᐃ, 207, 42, ΔⵠΔ],
		[1, ⵠ[105], ⵠΔᐃ, 205, 41, 1],
		[1, ⵠ[105], 4, 208, 43, ᐃᐃΔ],
		[1, ⵠ[105], ⵠᐃΔΔ, 209, 43, 1],
		[1, ⵠ[105], ⲆᐃΔ, 210, 43, 1],
		[Δⵠᐃ, ⵠ[105], 2, 211, 43, 1],
		[Ⲇⵠᐃ, ⵠ[105], 5, 212, 43, 1],
		[1, ⵠ[105], Ⲇⵠⵠⵠ, 213, 44, 1],
		[ᐃⲆΔ, ⵠ[105], 3, 223, 54, 1],
		[ΔⵠΔ, ⵠ[105], ΔⲆⵠᐃ, 221, 53, Ⲇⵠᐃ],
		[1, ⵠ[105], ⲆᐃᐃΔ, 219, 53, 1],
		[ᐃᐃΔ, ⵠ[105], 4, 218, 52, 1],
		[1, ⵠ[105], ΔⵠⵠⲆ, 217, 51, 1],
		[1, ⵠ[105], ⵠⲆΔⵠ, 216, 51, ᐃⲆΔ],
		[Ⲇⵠᐃ, ⵠ[105], ΔⵠΔ, 215, 50, 1],
		[ⵠΔᐃ, ⵠ[105], 4, 212, 46, ᐃᐃΔ],
		[1, ⵠ[105], 1, 210, 44, 1],
		[ᐃᐃΔ, ⵠ[105], 3, 206, 50, ᐃᐃΔ],
		[ᐃᐃΔ, ⵠ[449], ΔΔᐃ, 217, 24, 1],
		[1, ⵠ[449], ᐃᐃᐃ, 207, 16, ᐃⲆΔ],
		[ⲆᐃΔ, ⵠ[77], 44, 54, 14, 0],
		[ⵠΔᐃ, ⵠ[77], 44, 53, 13, ⵠⵠⵠ],
		[Δⵠᐃ, ⵠ[77], 44, 51, ᐃΔᐃᐃⲆ, 0],
		[ᐃᐃΔ, ⵠ[77], 44, 49, ⲆⵠⵠᐃΔ, ΔⲆⲆ],
		[1, ⵠ[77], 44, 48, ⲆᐃⵠⲆΔ, ⵠⲆᐃ],
		[1, ⵠ[77], 21, 78, 293, ᐃᐃⲆ],
		[1, ⵠ[3], 0, 221, ΔⵠΔⵠΔ, ⲆᐃΔ],
		[1, ⵠ[3], ⵠⲆᐃ, 224, 9, 1],
		[ΔⵠΔ, ⵠ[ⲆᐃᐃΔ], 1, 223, ⲆΔⲆᐃᐃ, 1],
		[Δⵠᐃ, ⵠ[3], ⵠⵠⵠᐃ, 224, Δᐃᐃⵠⵠ, ⵠΔᐃ],
		[ⵠΔᐃ, ⵠ[3], ᐃⲆᐃᐃ, 222, ⲆᐃⲆΔⵠ, 1],
		[ᐃᐃΔ, ⵠ[ΔⲆⵠᐃ], 0, 224, ΔΔΔΔ, ⵠΔᐃ],
		[1, ⵠ[3], 0, 222, ᐃᐃᐃⲆ, Δⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[3], ⵠⵠⵠ, 219, 7, 1],
		[ΔⵠΔ, ⵠ[ⲆⵠⲆᐃ], ⲆᐃΔ, 220, 5, 1],
		[Ⲇⵠᐃ, ⵠ[3], ⵠⲆⲆ, 217, ⲆΔᐃⲆᐃ, 1],
		[Δⵠᐃ, ⵠ[ΔΔᐃΔ], 2, 224, 5, 1],
		[Δⵠᐃ, ⵠ[ᐃⵠΔⵠ], ΔΔⲆᐃ, 223, ΔⲆⵠⵠ, 1],
		[1, ⵠ[ΔⲆⵠᐃ], 2, 224, ᐃᐃⵠᐃᐃ, ⵠⲆⲆ],
		[1, ⵠ[3], ⲆⲆΔⲆ, 223, ⲆΔⲆⵠⵠ, ΔⵠΔ],
		[ΔⵠΔ, ⵠ[3], 2, 223, 6, ⵠⲆⲆ],
		[ⲆᐃΔ, ⵠ[ⵠⵠΔⵠ], ⵠⵠⵠᐃ, 222, 6, ⲆᐃΔ],
		[Ⲇⵠᐃ, ⵠ[3], 2, 222, 7, ⵠΔᐃ],
		[1, ⵠ[3], 2, 221, ΔΔⵠΔⲆ, 1],
		[1, ⵠ[ⲆΔᐃⲆ], 2, 221, 6, 1],
		[Ⲇⵠᐃ, ⵠ[ΔⲆⵠᐃ], 2, 221, ⲆᐃⲆΔ, ᐃᐃΔ],
		[ᐃᐃΔ, ⵠ[ⵠⵠΔⵠ], 2, 220, 6, ᐃᐃΔ],
		[1, ⵠ[3], 2, 220, ᐃᐃⵠᐃᐃ, 1],
		[Ⲇⵠᐃ, ⵠ[Δⵠⵠᐃ], 2, 220, 8, 1],
		[1, ⵠ[3], 2, 219, ⲆᐃⲆΔⵠ, ᐃᐃΔ],
		[Δⵠᐃ, ⵠ[3], ᐃⲆᐃᐃ, 219, ΔΔΔⲆ, 1],
		[ᐃᐃΔ, ⵠ[3], ⵠⵠⵠᐃ, 219, ⲆⵠΔΔ, 1],
		[ᐃⲆΔ, ⵠ[3], 0, 218, 5, 1],
		[1, ⵠ[3], 0, 216, ΔΔⲆᐃᐃ, 1],
		[ⲆᐃΔ, ⵠ[3], ᐃⲆᐃⵠ, 218, Δᐃᐃⵠⵠ, 1],
		[1, ⵠ[3], ᐃᐃᐃⵠ, 217, Ⲇᐃⵠⵠᐃ, ᐃⲆΔ],
		[1, ⵠ[ᐃⵠΔᐃ], 2, 218, 7, 1],
		[1, ⵠ[Δⵠⵠᐃ], 2, 218, 6, 1],
		[ᐃᐃΔ, ⵠ[ΔΔᐃΔ], 2, 217, ⵠⲆⲆᐃᐃ, ⲆᐃΔ],
		[ΔⵠΔ, ⵠ[ᐃⵠΔᐃ], ⲆⲆΔⲆ, 217, ᐃᐃᐃⲆ, ᐃⲆΔ],
		[1, ⵠ[ⲆᐃᐃΔ], ⲆᐃΔ, 215, ⵠⲆⲆᐃᐃ, ⵠⲆⲆ],
		[ⲆᐃΔ, ⵠ[ΔⲆⵠᐃ], Δⵠᐃ, 213, ᐃᐃᐃⲆ, 1],
		[1, ⵠ[3], ᐃᐃⲆ, 214, ⵠⵠⲆⵠᐃ, 1],
		[ⵠⲆⲆ, ⵠ[ⵠⵠΔⵠ], ⵠⲆᐃ, 216, 5, ⵠΔᐃ],
		[1, ⵠ[3], 0, 213, 8, 1],
		[ᐃᐃΔ, ⵠ[Δⵠⵠᐃ], Ⲇᐃⵠ, 211, ΔᐃⵠⲆΔ, 1],
		[1, ⵠ[ⲆΔᐃⲆ], ⵠⲆᐃ, 209, ᐃᐃΔᐃ, Ⲇⵠᐃ],
		[1, ⵠ[ΔΔᐃΔ], 0, 208, 7, 1],
		[Ⲇⵠᐃ, ⵠ[Δⵠⵠᐃ], 0, 207, 8, 1],
		[1, ⵠ[ᐃⵠΔᐃ], ᐃᐃΔⵠ, 216, 6, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], ᐃᐃᐃⵠ, 216, ⵠⵠⵠⵠⵠ, 1],
		[Ⲇⵠᐃ, ⵠ[ᐃⵠΔᐃ], 2, 215, ⲆⵠⲆΔᐃ, Δⵠᐃ],
		[1, ⵠ[ᐃⵠΔⵠ], 2, 215, Ⲇᐃⵠⵠᐃ, ⵠⲆⲆ],
		[1, ⵠ[ΔⲆΔⲆ], 2, 214, 8, 1],
		[1, ⵠ[3], ᐃᐃⲆⲆ, 214, ⲆⵠⲆΔᐃ, ΔⵠΔ],
		[ΔⵠΔ, ⵠ[3], 2, 215, ⲆⵠΔΔ, 1],
		[ⵠⲆⲆ, ⵠ[3], 2, 214, 5, 1],
		[ᐃⲆΔ, ⵠ[ΔΔᐃΔ], 2, 213, 6, 1],
		[ᐃᐃΔ, ⵠ[ᐃⲆᐃΔ], ᐃᐃᐃⵠ, 213, ᐃⲆᐃΔΔ, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 212, ⲆΔᐃⲆᐃ, 1],
		[1, ⵠ[3], 1, 211, 5, ᐃᐃΔ],
		[1, ⵠ[3], ⲆᐃΔ, 209, 8, ΔⵠΔ],
		[ⲆᐃΔ, ⵠ[ΔΔᐃΔ], 2, 212, ΔΔⲆᐃᐃ, 1],
		[1, ⵠ[ⲆΔᐃⲆ], 2, 211, 8, 1],
		[1, ⵠ[ᐃΔⵠⲆ], ᐃᐃⲆⲆ, 210, 8, ᐃᐃΔ],
		[ⵠΔᐃ, ⵠ[ⲆᐃᐃΔ], 2, 209, ᐃⲆᐃΔΔ, 1],
		[1, ⵠ[3], 2, 210, ΔΔⵠΔⲆ, 1],
		[1, ⵠ[3], 2, 210, 6, ΔⵠΔ],
		[ⵠⲆⲆ, ⵠ[ⲆⵠⲆᐃ], ΔΔⲆᐃ, 212, ΔⵠΔⵠᐃ, 1],
		[Ⲇⵠᐃ, ⵠ[ᐃⵠΔⵠ], ᐃⲆᐃᐃ, 212, ΔⵠΔᐃ, 1],
		[1, ⵠ[ᐃⲆᐃΔ], ᐃᐃΔⵠ, 211, 6, 1],
		[1, ⵠ[ᐃⵠΔⲆ], ᐃⲆᐃᐃ, 210, ΔⲆⵠⵠ, ΔⵠΔ],
		[Δⵠᐃ, ⵠ[3], 2, 209, ΔΔΔΔ, 1],
		[1, ⵠ[3], 2, 208, ΔⵠΔⵠᐃ, Δⵠᐃ],
		[1, ⵠ[3], 2, 208, ΔⲆⲆⵠ, ⵠⲆⲆ],
		[ⲆᐃΔ, ⵠ[3], ᐃᐃᐃⵠ, 207, 7, ⵠΔᐃ],
		[1, ⵠ[3], 2, 207, ΔΔΔΔ, 1],
		[ⲆᐃΔ, ⵠ[3], 2, 207, 5, 1],
		[1, ⵠ[ᐃΔⵠⲆ], 2, 206, ᐃⵠᐃⲆ, ᐃⲆΔ],
		[ⵠⲆⲆ, ⵠ[ⲆⵠⲆᐃ], ᐃᐃᐃⵠ, 208, 8, ΔⵠΔ],
		[ᐃᐃΔ, ⵠ[3], 2, 206, ΔΔΔΔ, 1],
		[ᐃⲆΔ, ⵠ[3], 0, 204, 8, ⲆᐃΔ],
		[ⵠΔᐃ, ⵠ[ⵠⵠΔⵠ], ᐃᐃᐃ, 205, ⵠⲆⲆᐃᐃ, ᐃᐃΔ],
		[1, ⵠ[3], ᐃᐃᐃ, 203, 5, ⵠΔᐃ],
		[ⵠΔᐃ, ⵠ[3], 0, 202, ⲆΔᐃⲆᐃ, 1],
		[ΔⵠΔ, ⵠ[3], ⵠⵠⵠ, 199, ⲆΔⲆᐃᐃ, 1],
		[ⲆᐃΔ, ⵠ[3], 0, 200, Ⲇⵠⵠᐃⵠ, 1],
		[1, ⵠ[ΔΔᐃΔ], ⵠⲆᐃ, 197, ΔΔΔⲆ, ᐃⲆΔ],
		[ⵠⲆⲆ, ⵠ[ⲆⵠⲆᐃ], ⵠᐃⲆ, 195, 8, ᐃᐃΔ],
		[1, ⵠ[ᐃⲆᐃΔ], 0, 194, 6, ᐃⲆΔ],
		[1, ⵠ[Δⵠⵠᐃ], ᐃᐃΔ, 202, 8, Ⲇⵠᐃ],
		[ΔⵠΔ, ⵠ[3], 1, 206, ΔΔⵠΔⲆ, ΔⵠΔ],
		[1, ⵠ[ΔΔᐃΔ], ᐃᐃΔ, 201, ΔⵠΔᐃ, 1],
		[ⵠΔᐃ, ⵠ[3], ⵠΔᐃ, 197, 8, 1],
		[1, ⵠ[3], ΔⵠΔ, 192, 7, ⵠΔᐃ],
		[1, ⵠ[3], Δⵠᐃ, 195, ΔⵠΔᐃ, ΔⵠΔ],
		[ⵠⲆⲆ, ⵠ[3], ᐃⲆᐃᐃ, 205, ⲆⵠⲆΔᐃ, ΔⵠΔ],
		[1, ⵠ[ⲆΔᐃⲆ], 2, 205, ⲆΔⲆᐃᐃ, ΔⵠΔ],
		[ᐃⲆΔ, ⵠ[ΔΔᐃΔ], ΔΔⲆᐃ, 206, ΔΔⲆᐃᐃ, ᐃᐃΔ],
		[ᐃⲆΔ, ⵠ[ΔⲆΔⲆ], ⵠⵠⵠᐃ, 204, 7, ᐃᐃΔ],
		[1, ⵠ[ᐃⵠΔᐃ], ᐃᐃᐃⵠ, 204, ⵠⵠᐃᐃᐃ, 1],
		[1, ⵠ[Δⵠⵠᐃ], ᐃⲆᐃⵠ, 204, ⲆⵠΔΔ, ⵠⲆⲆ],
		[ⵠΔᐃ, ⵠ[3], ⲆⲆΔⲆ, 205, ΔⲆⲆⵠ, ᐃᐃΔ],
		[ᐃⲆΔ, ⵠ[3], ᐃⲆᐃⵠ, 203, 6, ⵠΔᐃ],
		[ᐃⲆΔ, ⵠ[3], ΔΔⲆᐃ, 203, 7, ᐃᐃΔ],
		[Ⲇⵠᐃ, ⵠ[ᐃⵠΔⲆ], ᐃᐃΔⵠ, 203, ΔⵠΔⵠΔ, 1],
		[Δⵠᐃ, ⵠ[ΔⲆΔⲆ], ⲆⲆΔⲆ, 201, Ⲇᐃⵠᐃᐃ, ⵠⲆⲆ],
		[ᐃⲆΔ, ⵠ[Δⵠⵠᐃ], 2, 200, 8, 1],
		[ⲆᐃΔ, ⵠ[ⵠⵠΔⵠ], 2, 200, 7, ΔⵠΔ],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 201, ΔΔⵠΔⲆ, ⲆᐃΔ],
		[Ⲇⵠᐃ, ⵠ[ⲆᐃᐃΔ], 2, 201, Ⲇⵠⵠᐃⵠ, 1],
		[ᐃᐃΔ, ⵠ[ⲆΔᐃⲆ], ⵠⵠⵠᐃ, 202, ⲆⲆᐃᐃ, 1],
		[1, ⵠ[ⲆᐃᐃΔ], 2, 202, 6, Ⲇⵠᐃ],
		[ᐃᐃΔ, ⵠ[3], 2, 200, 5, 1],
		[ΔⵠΔ, ⵠ[ᐃΔⵠⲆ], ΔΔⲆᐃ, 199, ⵠⵠᐃᐃ, 1],
		[Δⵠᐃ, ⵠ[3], ᐃⲆᐃᐃ, 197, 5, 1],
		[1, ⵠ[3], ⲆⲆΔⲆ, 196, ΔⵠΔᐃ, ⲆᐃΔ],
		[ᐃᐃΔ, ⵠ[3], 2, 198, ⵠⲆⲆᐃ, ᐃᐃΔ],
		[1, ⵠ[ΔΔᐃΔ], 2, 198, 6, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 199, ΔΔⵠΔᐃ, 1],
		[ⵠⲆⲆ, ⵠ[ΔΔᐃΔ], 2, 199, ᐃᐃⵠᐃᐃ, Δⵠᐃ],
		[1, ⵠ[3], ᐃᐃᐃⵠ, 198, 7, Δⵠᐃ],
		[1, ⵠ[3], 2, 198, 8, ⵠⲆⲆ],
		[Δⵠᐃ, ⵠ[3], ⵠⵠⵠᐃ, 197, 7, Δⵠᐃ],
		[ᐃᐃΔ, ⵠ[ⲆᐃᐃΔ], ᐃⲆᐃᐃ, 196, 7, 1],
		[Δⵠᐃ, ⵠ[ᐃⵠΔⲆ], ᐃᐃⲆⲆ, 196, ⲆᐃⲆΔⵠ, Ⲇⵠᐃ],
		[ⵠΔᐃ, ⵠ[ΔⲆΔⲆ], 2, 196, 6, ᐃᐃΔ],
		[ᐃⲆΔ, ⵠ[Δⵠⵠᐃ], ᐃⲆᐃⵠ, 195, ⵠⲆⲆᐃᐃ, ΔⵠΔ],
		[Δⵠᐃ, ⵠ[3], ᐃᐃⲆⲆ, 195, 7, Ⲇⵠᐃ],
		[1, ⵠ[3], 2, 194, 7, ᐃᐃΔ],
		[ⵠⲆⲆ, ⵠ[3], 2, 193, 8, ⵠⲆⲆ],
		[Δⵠᐃ, ⵠ[ⲆΔᐃⲆ], 2, 194, ΔΔⲆᐃᐃ, Ⲇⵠᐃ],
		[ⲆᐃΔ, ⵠ[3], ᐃᐃΔⵠ, 193, 7, Δⵠᐃ],
		[ⲆᐃΔ, ⵠ[3], 2, 193, 6, ⵠⲆⲆ],
		[1, ⵠ[3], 2, 193, ⲆⲆᐃᐃ, Ⲇⵠᐃ],
		[1, ⵠ[3], 2, 194, ΔⲆⲆⵠ, ᐃᐃΔ],
		[1, ⵠ[3], 0, 192, 5, 1],
		[1, ⵠ[ΔⲆⵠᐃ], 0, 191, 8, ᐃⲆΔ],
		[1, ⵠ[3], ᐃᐃⲆ, 190, 6, ᐃⲆΔ],
		[ⲆᐃΔ, ⵠ[3], ΔΔᐃ, 188, ⲆΔᐃⲆᐃ, 1],
		[ΔⵠΔ, ⵠ[3], 0, 186, Ⲇᐃⵠⵠᐃ, Ⲇⵠᐃ],
		[Δⵠᐃ, ⵠ[ΔΔᐃΔ], ⵠⲆᐃ, 186, 5, 1],
		[ⲆᐃΔ, ⵠ[3], 0, 184, ᐃᐃⵠᐃᐃ, ⵠΔᐃ],
		[ⲆᐃΔ, ⵠ[ΔⲆⵠᐃ], ⵠⲆᐃ, 182, Ⲇᐃⵠᐃᐃ, 1],
		[Δⵠᐃ, ⵠ[ᐃⲆᐃΔ], 0, 181, ⵠⵠΔⲆⵠ, ᐃᐃΔ],
		[1, ⵠ[ⵠⵠΔⵠ], ᐃⲆΔ, 189, 8, 1],
		[ⵠΔᐃ, ⵠ[Δⵠⵠᐃ], ᐃᐃΔ, 183, ⲆᐃⲆΔⵠ, 1],
		[ᐃᐃΔ, ⵠ[ⲆⵠⲆᐃ], ᐃᐃΔ, 188, 5, ᐃⲆΔ],
		[1, ⵠ[3], ΔⵠΔ, 185, ΔΔΔΔ, 1],
		[ⵠΔᐃ, ⵠ[3], ᐃᐃΔ, 180, ⲆΔⲆⵠⵠ, Ⲇⵠᐃ],
		[1, ⵠ[3], ᐃⲆΔ, 183, ⲆⲆᐃᐃ, Δⵠᐃ],
		[ᐃᐃΔ, ⵠ[ⲆⵠⲆᐃ], Ⲇⵠᐃ, 178, Δᐃᐃⵠⵠ, ⵠΔᐃ],
		[ΔⵠΔ, ⵠ[3], ⵠΔᐃ, 177, 6, 1],
		[1, ⵠ[ᐃⵠΔⵠ], 1, 173, 7, 1],
		[1, ⵠ[3], 1, 171, 7, 1],
		[1, ⵠ[Δⵠⵠᐃ], 0, 177, ΔΔⲆᐃᐃ, 1],
		[1, ⵠ[ⵠⵠΔⵠ], ᐃᐃⲆ, 175, 7, ᐃⲆΔ],
		[1, ⵠ[ΔΔᐃΔ], 0, 179, ᐃᐃᐃⲆ, 1],
		[1, ⵠ[3], Ⲇᐃⵠ, 174, 5, ⵠⲆⲆ],
		[Δⵠᐃ, ⵠ[ᐃⵠΔⵠ], ᐃᐃⲆ, 176, 5, 1],
		[1, ⵠ[3], ⵠⲆΔ, 172, 8, ᐃᐃΔ],
		[1, ⵠ[ΔⲆⵠᐃ], 0, 170, 8, ⵠⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[3], 0, 169, ⵠⵠᐃᐃᐃ, Ⲇⵠᐃ],
		[1, ⵠ[ᐃⵠΔⵠ], ᐃᐃⲆⲆ, 192, ΔΔΔⲆ, ᐃᐃΔ],
		[1, ⵠ[ⲆΔᐃⲆ], 2, 192, Ⲇᐃⵠᐃᐃ, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 191, ⲆΔⲆⵠⵠ, 1],
		[ⵠⲆⲆ, ⵠ[3], 2, 191, 6, 1],
		[Δⵠᐃ, ⵠ[ⵠⵠΔⵠ], 2, 191, ⵠⵠᐃᐃ, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 190, 5, 1],
		[1, ⵠ[3], ᐃᐃᐃⵠ, 189, ᐃᐃᐃⲆ, 1],
		[1, ⵠ[ⵠⵠΔⵠ], ⲆⲆΔⲆ, 189, 6, ⲆᐃΔ],
		[ᐃᐃΔ, ⵠ[3], ᐃᐃᐃⵠ, 189, 7, ᐃⲆΔ],
		[1, ⵠ[ᐃⵠΔⵠ], 2, 190, 7, ⵠⲆⲆ],
		[ΔⵠΔ, ⵠ[3], ᐃⲆᐃⵠ, 190, ⵠᐃⵠΔⲆ, Ⲇⵠᐃ],
		[1, ⵠ[ⲆᐃᐃΔ], 2, 188, Ⲇᐃⵠⵠᐃ, 1],
		[1, ⵠ[ᐃⵠΔⵠ], ⵠⵠⵠᐃ, 187, 8, 1],
		[ⵠⲆⲆ, ⵠ[3], 2, 187, 7, ΔⵠΔ],
		[ΔⵠΔ, ⵠ[ΔⲆΔⲆ], ⵠⵠⵠᐃ, 187, 6, 1],
		[1, ⵠ[3], ΔΔⲆᐃ, 188, 6, ⲆᐃΔ],
		[1, ⵠ[3], 2, 187, Ⲇᐃⵠᐃ, Ⲇⵠᐃ],
		[ᐃⲆΔ, ⵠ[ⵠⵠΔⵠ], ⵠⵠⵠᐃ, 186, ΔΔΔΔ, ᐃⲆΔ],
		[1, ⵠ[ΔⲆⵠᐃ], 2, 186, ΔΔⵠΔⲆ, 1],
		[1, ⵠ[3], ᐃᐃᐃⵠ, 185, ⲆΔᐃⲆᐃ, 1],
		[1, ⵠ[3], ⲆⲆΔⲆ, 185, 8, 1],
		[ᐃⲆΔ, ⵠ[ᐃⵠΔᐃ], ᐃᐃᐃⵠ, 184, ⵠᐃⵠΔⲆ, ᐃᐃΔ],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 183, 7, ⲆᐃΔ],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 183, 6, ⵠΔᐃ],
		[1, ⵠ[3], ᐃⲆᐃᐃ, 184, Ⲇⵠⵠᐃⵠ, 1],
		[ⲆᐃΔ, ⵠ[3], 2, 184, ⵠⵠᐃᐃ, ᐃⲆΔ],
		[1, ⵠ[ᐃⵠΔⲆ], 2, 185, 5, 1],
		[Δⵠᐃ, ⵠ[ΔⲆΔⲆ], ᐃᐃᐃⵠ, 182, 6, 1],
		[ⵠⲆⲆ, ⵠ[3], ᐃⲆᐃᐃ, 182, ΔᐃⵠⲆΔ, ⵠⲆⲆ],
		[1, ⵠ[ⲆᐃᐃΔ], 2, 181, 7, ⲆᐃΔ],
		[Δⵠᐃ, ⵠ[ⵠⵠΔⵠ], 2, 181, Ⲇᐃⵠᐃᐃ, 1],
		[ᐃⲆΔ, ⵠ[ΔⲆΔⲆ], 2, 180, 8, ⵠΔᐃ],
		[1, ⵠ[3], ᐃᐃᐃⵠ, 179, 8, ⵠⲆⲆ],
		[ⵠⲆⲆ, ⵠ[3], ⵠⵠⵠᐃ, 182, 5, ΔⵠΔ],
		[1, ⵠ[3], 2, 181, ΔⲆⵠⵠ, Ⲇⵠᐃ],
		[ⵠⲆⲆ, ⵠ[ᐃΔⵠⲆ], ᐃᐃΔⵠ, 180, 5, ΔⵠΔ],
		[ᐃᐃΔ, ⵠ[ⲆⵠⲆᐃ], ⲆⲆΔⲆ, 180, 6, 1],
		[ⵠΔᐃ, ⵠ[3], ⲆⲆΔⲆ, 179, ΔΔΔΔ, 1],
		[ⲆᐃΔ, ⵠ[3], ᐃⲆᐃⵠ, 179, 7, 1],
		[Ⲇⵠᐃ, ⵠ[3], 2, 178, 7, 1],
		[1, ⵠ[ⵠⵠΔⵠ], ᐃᐃⲆⲆ, 178, Ⲇⵠⵠᐃⵠ, Ⲇⵠᐃ],
		[1, ⵠ[3], ᐃᐃΔⵠ, 178, 5, 1],
		[ᐃᐃΔ, ⵠ[3], 2, 177, ⵠⵠᐃᐃ, 1],
		[ⵠⲆⲆ, ⵠ[3], ᐃⲆᐃⵠ, 177, 7, 1],
		[Δⵠᐃ, ⵠ[3], 2, 176, 7, 1],
		[1, ⵠ[ᐃΔⵠⲆ], 2, 176, ⵠⲆⲆᐃᐃ, Δⵠᐃ],
		[ΔⵠΔ, ⵠ[Δⵠⵠᐃ], 2, 175, 6, 1],
		[ᐃⲆΔ, ⵠ[ⵠⵠΔⵠ], 2, 175, 5, 1],
		[ⲆᐃΔ, ⵠ[ᐃⲆᐃΔ], ᐃᐃᐃⵠ, 176, ΔⵠΔⵠΔ, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], ᐃᐃᐃⵠ, 174, ⲆΔⲆᐃᐃ, ⵠⲆⲆ],
		[Δⵠᐃ, ⵠ[ⲆⵠⲆᐃ], ΔΔⲆᐃ, 175, 8, ⲆᐃΔ],
		[ⵠΔᐃ, ⵠ[3], 2, 173, 8, 1],
		[1, ⵠ[ᐃⵠΔⲆ], ᐃᐃΔⵠ, 174, ⵠⵠⵠⵠⵠ, ⵠⲆⲆ],
		[ⵠⲆⲆ, ⵠ[3], 2, 173, 6, 1],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 174, ΔΔΔⲆ, ⲆᐃΔ],
		[Δⵠᐃ, ⵠ[3], ᐃᐃⲆⲆ, 172, 5, 1],
		[1, ⵠ[ⲆΔᐃⲆ], ᐃᐃᐃⵠ, 173, 5, ⵠⲆⲆ],
		[ⲆᐃΔ, ⵠ[ⵠⵠΔⵠ], ⵠⵠⵠᐃ, 172, 6, ⵠΔᐃ],
		[1, ⵠ[3], ᐃᐃⲆⲆ, 172, ⲆⲆΔΔᐃ, ᐃⲆΔ],
		[ⵠⲆⲆ, ⵠ[3], 2, 171, ⲆᐃⲆΔⵠ, ΔⵠΔ],
		[1, ⵠ[ΔⲆΔⲆ], ᐃᐃΔⵠ, 170, ᐃᐃⵠᐃᐃ, 1],
		[ᐃⲆΔ, ⵠ[ⲆⵠⲆᐃ], ᐃᐃⲆⲆ, 170, 6, ΔⵠΔ],
		[1, ⵠ[3], 2, 170, ⵠⵠᐃᐃ, 1],
		[ᐃᐃΔ, ⵠ[ⲆΔᐃⲆ], 2, 171, 5, 1],
		[1, ⵠ[Δⵠⵠᐃ], 2, 171, ΔΔⵠΔᐃ, ⵠΔᐃ],
		[ᐃᐃΔ, ⵠ[3], ⵠⵠⵠᐃ, 169, 5, ΔⵠΔ],
		[1, ⵠ[3], 2, 169, 7, 1],
		[ΔⵠΔ, ⵠ[3], 2, 169, 8, 1],
		[ⵠΔᐃ, ⵠ[3], 1, 168, ⲆⵠⲆΔᐃ, ᐃⲆΔ],
		[ⵠΔᐃ, ⵠ[Δⵠⵠᐃ], Ⲇⵠᐃ, 166, 5, Δⵠᐃ],
		[1, ⵠ[Δⵠⵠᐃ], 1, 164, 7, ᐃᐃΔ],
		[1, ⵠ[ᐃⵠΔⵠ], 1, 160, ⲆⲆΔΔᐃ, Ⲇⵠᐃ],
		[ᐃⲆΔ, ⵠ[3], 1, 156, Ⲇᐃⵠᐃᐃ, ⵠⲆⲆ],
		[ⵠⲆⲆ, ⵠ[3], 0, 166, 8, ΔⵠΔ],
		[Δⵠᐃ, ⵠ[3], 0, 168, ᐃᐃᐃⲆ, 1],
		[1, ⵠ[3], ΔⲆⲆ, 164, 6, ᐃⲆΔ],
		[ⵠⲆⲆ, ⵠ[ΔΔᐃΔ], ΔⲆⲆ, 162, 7, 1],
		[1, ⵠ[ᐃΔⵠⲆ], 0, 158, 8, 1],
		[1, ⵠ[ᐃΔⵠⲆ], ⵠⵠⵠ, 157, ΔΔΔΔ, ᐃᐃΔ],
		[Δⵠᐃ, ⵠ[ⲆΔᐃⲆ], Ⲇᐃⵠ, 161, 5, ΔⵠΔ],
		[1, ⵠ[3], ᐃᐃⲆ, 159, 5, 1],
		[ⵠΔᐃ, ⵠ[ᐃⵠΔⵠ], 0, 155, ΔᐃⵠⲆΔ, 1],
		[ⵠΔᐃ, ⵠ[3], 0, 154, 5, Ⲇⵠᐃ],
		[ᐃᐃΔ, ⵠ[ᐃⲆᐃΔ], 0, 151, 7, ᐃᐃΔ],
		[1, ⵠ[ᐃⵠΔⵠ], 1, 153, 8, 1],
		[Ⲇⵠᐃ, ⵠ[3], Ⲇⵠᐃ, 151, ⲆᐃⲆΔ, Δⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[ᐃⵠΔⵠ], ᐃᐃⲆⲆ, 168, 6, Δⵠᐃ],
		[1, ⵠ[ᐃⵠΔⲆ], ᐃⲆᐃⵠ, 168, 8, 1],
		[1, ⵠ[3], 2, 167, Δᐃᐃⵠⵠ, ᐃᐃΔ],
		[ⵠΔᐃ, ⵠ[3], 2, 167, ⲆⲆΔΔᐃ, 1],
		[ΔⵠΔ, ⵠ[3], ᐃᐃⲆⲆ, 167, 6, ⵠⲆⲆ],
		[1, ⵠ[3], ᐃⲆᐃᐃ, 167, ΔⲆⲆⵠ, 1],
		[Δⵠᐃ, ⵠ[3], ⲆⲆΔⲆ, 166, ΔΔΔΔ, ⲆᐃΔ],
		[1, ⵠ[ᐃⵠΔⵠ], 2, 166, 7, ⵠΔᐃ],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 165, 7, ⵠⲆⲆ],
		[1, ⵠ[ᐃⵠΔⵠ], 2, 165, ΔΔΔΔ, ᐃⲆΔ],
		[1, ⵠ[3], ᐃᐃⲆⲆ, 165, 5, ᐃⲆΔ],
		[1, ⵠ[ⲆΔᐃⲆ], 2, 164, 5, ᐃⲆΔ],
		[ⲆᐃΔ, ⵠ[3], 2, 163, ᐃⵠᐃⲆ, 1],
		[ⲆᐃΔ, ⵠ[ᐃⲆᐃΔ], 2, 162, ⲆⲆᐃᐃ, Ⲇⵠᐃ],
		[1, ⵠ[ᐃⵠΔⲆ], 2, 162, ⵠⵠᐃᐃᐃ, 1],
		[1, ⵠ[ⲆΔᐃⲆ], ⵠⵠⵠᐃ, 163, 6, ᐃⲆΔ],
		[Ⲇⵠᐃ, ⵠ[3], 2, 163, ΔΔⵠΔⲆ, ⵠⲆⲆ],
		[1, ⵠ[3], ΔΔⲆᐃ, 163, Ⲇᐃⵠᐃᐃ, 1],
		[1, ⵠ[3], 2, 164, 8, 1],
		[1, ⵠ[3], 2, 165, 8, 1],
		[1, ⵠ[3], 2, 161, ⲆᐃⲆΔⵠ, ⵠΔᐃ],
		[ⲆᐃΔ, ⵠ[3], ᐃⲆᐃᐃ, 162, 8, Ⲇⵠᐃ],
		[ΔⵠΔ, ⵠ[3], ᐃᐃΔⵠ, 160, ⲆΔⲆᐃᐃ, ⵠΔᐃ],
		[ᐃᐃΔ, ⵠ[3], ᐃᐃⲆⲆ, 159, ⲆΔⲆᐃᐃ, 1],
		[ⵠΔᐃ, ⵠ[3], 2, 159, ⲆⵠⲆΔᐃ, 1],
		[1, ⵠ[3], 2, 159, ⵠⵠΔⲆⵠ, 1],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 160, ΔⲆⲆⵠ, ΔⵠΔ],
		[Ⲇⵠᐃ, ⵠ[ᐃⵠΔⲆ], ᐃⲆᐃᐃ, 160, 6, 1],
		[ᐃᐃΔ, ⵠ[3], ᐃⲆᐃᐃ, 161, 6, 1],
		[ΔⵠΔ, ⵠ[3], ⵠⵠⵠᐃ, 161, ⵠⵠⵠⵠⵠ, 1],
		[Ⲇⵠᐃ, ⵠ[3], ΔΔⲆᐃ, 157, ⲆⲆΔΔᐃ, 1],
		[1, ⵠ[3], 2, 158, ᐃᐃⵠᐃᐃ, 1],
		[1, ⵠ[ΔⲆⵠᐃ], 2, 158, 6, ᐃⲆΔ],
		[1, ⵠ[3], 2, 158, 5, ⵠⲆⲆ],
		[1, ⵠ[Δⵠⵠᐃ], ⲆⲆΔⲆ, 155, Ⲇᐃⵠᐃ, Δⵠᐃ],
		[ᐃᐃΔ, ⵠ[3], ᐃᐃΔⵠ, 155, 6, Δⵠᐃ],
		[ΔⵠΔ, ⵠ[ᐃⵠΔⵠ], ⵠⵠⵠᐃ, 156, ΔΔⵠΔᐃ, ᐃᐃΔ],
		[1, ⵠ[3], 2, 156, 7, 1],
		[ⵠⲆⲆ, ⵠ[3], 2, 157, ⵠᐃⵠΔⲆ, ⲆᐃΔ],
		[1, ⵠ[ᐃⵠΔⲆ], ⵠⵠⵠᐃ, 155, Ⲇᐃⵠᐃᐃ, 1],
		[ᐃᐃΔ, ⵠ[ΔⲆΔⲆ], 2, 154, ⲆᐃⲆΔⵠ, 1],
		[1, ⵠ[3], ᐃⲆᐃᐃ, 154, 7, 1],
		[1, ⵠ[ᐃⲆᐃΔ], 2, 154, 6, 1],
		[ⵠΔᐃ, ⵠ[3], ᐃᐃⲆⲆ, 152, 8, 1],
		[1, ⵠ[3], 2, 153, ⲆⵠⲆΔᐃ, ᐃⲆΔ],
		[ⵠⲆⲆ, ⵠ[3], ᐃᐃⲆⲆ, 153, 6, 1],
		[ᐃᐃΔ, ⵠ[3], ᐃᐃΔⵠ, 153, 5, 1],
		[Ⲇⵠᐃ, ⵠ[ⲆΔᐃⲆ], ᐃᐃⲆⲆ, 152, 5, 1],
		[ΔⵠΔ, ⵠ[ᐃⲆᐃΔ], 2, 152, 6, ᐃᐃΔ],
		[ⲆᐃΔ, ⵠ[3], ᐃⲆᐃᐃ, 152, ⲆⲆΔΔᐃ, ᐃᐃΔ],
		[Ⲇⵠᐃ, ⵠ[ΔⲆΔⲆ], ᐃᐃΔⵠ, 151, 6, ᐃᐃΔ],
		[ⵠΔᐃ, ⵠ[3], ᐃⲆᐃᐃ, 157, 5, 1],
		[1, ⵠ[ⲆᐃᐃΔ], Δⵠᐃ, 156, 5, ⵠⲆⲆ],
		[1, ⵠ[ⲆΔᐃⲆ], 0, 150, ᐃᐃΔᐃ, Ⲇⵠᐃ],
		[1, ⵠ[ᐃⵠΔⵠ], 0, 149, ᐃᐃⵠᐃᐃ, 1],
		[ΔⵠΔ, ⵠ[3], 0, 147, 8, ⲆᐃΔ],
		[ⵠΔᐃ, ⵠ[Δⵠⵠᐃ], 0, 146, ᐃⵠᐃⲆ, ᐃⲆΔ],
		[ΔⵠΔ, ⵠ[ΔⲆⵠᐃ], 0, 144, 7, ⵠΔᐃ],
		[Ⲇⵠᐃ, ⵠ[3], 0, 142, 5, 1],
		[ⵠⲆⲆ, ⵠ[ΔⲆⵠᐃ], 1, 147, ⵠⵠⲆⵠᐃ, 1],
		[1, ⵠ[ΔⲆΔⲆ], Ⲇⵠᐃ, 145, 8, ᐃᐃΔ],
		[1, ⵠ[ᐃⲆᐃΔ], 1, 144, ⲆⲆᐃᐃ, ΔⵠΔ],
		[1, ⵠ[ᐃⵠΔᐃ], ⵠⵠⵠᐃ, 148, 5, 1],
		[1, ⵠ[ⲆᐃᐃΔ], 2, 149, 5, 1],
		[1, ⵠ[3], 2, 150, ⵠⲆⲆᐃᐃ, ᐃⲆΔ],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 150, 8, 1],
		[Δⵠᐃ, ⵠ[3], 2, 151, 8, 1],
		[1, ⵠ[3], ᐃⲆᐃᐃ, 150, ᐃᐃⵠᐃᐃ, 1],
		[1, ⵠ[ⲆᐃᐃΔ], 2, 149, 8, Ⲇⵠᐃ],
		[1, ⵠ[ⲆΔᐃⲆ], ⵠⵠⵠᐃ, 148, ΔⵠΔⵠΔ, 1],
		[ⵠⲆⲆ, ⵠ[3], ᐃⲆᐃᐃ, 149, ⵠⵠᐃᐃᐃ, Δⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[3], 2, 148, ⵠⲆⲆᐃᐃ, 1],
		[ΔⵠΔ, ⵠ[3], ᐃⲆᐃᐃ, 148, ⲆⲆΔΔᐃ, 1],
		[1, ⵠ[3], 2, 147, 7, ⵠΔᐃ],
		[Δⵠᐃ, ⵠ[3], 2, 147, ᐃᐃᐃⲆ, ᐃᐃΔ],
		[1, ⵠ[ᐃⵠΔᐃ], ⵠⵠⵠᐃ, 146, Ⲇⵠⵠᐃⵠ, Δⵠᐃ],
		[1, ⵠ[3], ⲆⲆΔⲆ, 146, ᐃᐃⵠᐃᐃ, 1],
		[1, ⵠ[3], 2, 146, Ⲇᐃⵠᐃᐃ, 1],
		[Ⲇⵠᐃ, ⵠ[3], 2, 145, 7, ⵠⲆⲆ],
		[ⵠⲆⲆ, ⵠ[3], ᐃᐃⲆⲆ, 145, 6, 1],
		[1, ⵠ[ᐃⵠΔⲆ], ⵠⵠⵠᐃ, 145, 5, 1],
		[Ⲇⵠᐃ, ⵠ[ᐃⵠΔⵠ], 2, 144, 6, 1],
		[1, ⵠ[ᐃⵠΔⲆ], 2, 143, 5, 1],
		[Δⵠᐃ, ⵠ[3], ᐃᐃᐃⵠ, 143, ⵠⵠΔⲆⵠ, 1],
		[1, ⵠ[ΔΔᐃΔ], ΔΔⲆᐃ, 142, ⵠⲆⲆᐃᐃ, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⲆᐃΔ], 2, 141, 5, 1],
		[Δⵠᐃ, ⵠ[ᐃⵠΔᐃ], ⲆⲆΔⲆ, 224, 10, ΔⵠΔ],
		[1, ⵠ[ᐃΔⵠⲆ], ᐃᐃᐃ, 224, ᐃⵠΔⲆΔ, ⲆᐃΔ],
		[ⵠⲆⲆ, ⵠ[3], ᐃᐃⲆ, 224, ⲆᐃΔⲆⵠ, ΔⵠΔ],
		[ΔⵠΔ, ⵠ[ⲆᐃᐃΔ], ᐃᐃᐃ, 224, ⵠΔΔΔΔ, 1],
		[1, ⵠ[3], 0, 224, 19, ⲆᐃΔ],
		[1, ⵠ[3], ⵠⵠⵠ, 224, 22, ⵠⲆⲆ],
		[1, ⵠ[3], 0, 224, 24, ΔⵠΔ],
		[1, ⵠ[ⲆⵠⲆᐃ], ΔΔᐃ, 224, 29, 1],
		[ΔⵠΔ, ⵠ[3], ΔΔᐃ, 224, 33, ᐃᐃΔ],
		[1, ⵠ[ᐃⵠΔⲆ], 0, 224, 35, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⲆᐃΔ], 0, 224, 38, 1],
		[ᐃᐃΔ, ⵠ[ᐃΔⵠⲆ], 1, 224, ⵠΔⲆᐃᐃ, 1],
		[Ⲇⵠᐃ, ⵠ[ᐃⵠΔᐃ], 1, 224, ⲆⵠⲆΔⲆ, ΔⵠΔ],
		[ⵠΔᐃ, ⵠ[3], ΔⵠΔ, 224, 27, ᐃᐃΔ],
		[1, ⵠ[3], ᐃⲆΔ, 224, 31, 1],
		[1, ⵠ[ᐃⵠΔⲆ], ᐃⲆΔ, 224, 36, 1],
		[ⵠⲆⲆ, ⵠ[ⲆᐃᐃΔ], ᐃᐃᐃⵠ, 224, 12, ᐃⲆΔ],
		[1, ⵠ[ᐃⵠΔⵠ], 2, 224, 15, ᐃⲆΔ],
		[ᐃᐃΔ, ⵠ[ⲆΔᐃⲆ], 2, 224, 16, ΔⵠΔ],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 224, ⵠᐃⵠᐃΔ, ᐃᐃΔ],
		[1, ⵠ[3], 2, 224, 21, ⵠΔᐃ],
		[1, ⵠ[Δⵠⵠᐃ], 2, 224, 23, ᐃⲆΔ],
		[ᐃⲆΔ, ⵠ[ᐃⵠΔⵠ], ⲆⲆΔⲆ, 224, 25, 1],
		[1, ⵠ[ᐃⵠΔⲆ], 2, 224, 26, 1],
		[ΔⵠΔ, ⵠ[3], ⵠⵠⵠᐃ, 224, 28, 1],
		[ⲆᐃΔ, ⵠ[Δⵠⵠᐃ], ᐃᐃⲆⲆ, 224, 30, ᐃᐃΔ],
		[ⵠΔᐃ, ⵠ[ΔΔᐃΔ], 2, 224, 32, ᐃⲆΔ],
		[1, ⵠ[3], 2, 224, 34, ⵠⲆⲆ],
		[ⵠⲆⲆ, ⵠ[ᐃⵠΔᐃ], ⵠⵠⵠᐃ, 224, 37, ᐃᐃΔ],
		[ΔⵠΔ, ⵠ[ⵠⵠΔⵠ], ΔΔⲆᐃ, 224, 39, 1],
		[ⲆᐃΔ, ⵠ[3], 0, 224, 41, ᐃᐃΔ],
		[1, ⵠ[3], 0, 224, 44, Δⵠᐃ],
		[ΔⵠΔ, ⵠ[3], 0, 224, 46, 1],
		[1, ⵠ[ⵠⵠΔⵠ], 0, 224, 52, 1],
		[ᐃⲆΔ, ⵠ[ᐃⲆᐃΔ], ⵠᐃⲆ, 224, 57, 1],
		[1, ⵠ[3], ⵠⲆⲆ, 224, 47, ⵠΔᐃ],
		[1, ⵠ[3], 2, 224, 40, ᐃⲆΔ],
		[Ⲇⵠᐃ, ⵠ[3], 2, 224, 42, ⵠⲆⲆ],
		[1, ⵠ[ΔΔᐃΔ], ᐃᐃⲆⲆ, 224, 43, ⵠⲆⲆ],
		[ⵠΔᐃ, ⵠ[3], 2, 224, 45, ΔⵠΔ],
		[1, ⵠ[3], 2, 224, 49, ΔⵠΔ],
		[ΔⵠΔ, ⵠ[ᐃⵠΔⵠ], 1, 224, 50, 1],
		[1, ⵠ[ⵠⵠΔⵠ], ᐃⲆᐃᐃ, 224, 51, 1],
		[ΔⵠΔ, ⵠ[105], ΔⲆⵠᐃ, 224, 54, ⲆᐃΔ],
		[1, ⵠ[3], 2, 224, 56, ᐃᐃΔ],
		[ᐃⲆΔ, ⵠ[3], 2, 224, 58, Δⵠᐃ],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 224, 61, ⵠΔᐃ],
		[ⵠΔᐃ, ⵠ[ΔΔᐃΔ], ΔⲆⲆ, 224, 60, Δⵠᐃ],
		[1, ⵠ[ⲆΔᐃⲆ], ΔΔᐃ, 224, 64, ⵠΔᐃ],
		[Ⲇⵠᐃ, ⵠ[3], 0, 224, 66, Ⲇⵠᐃ],
		[1, ⵠ[ᐃΔⵠⲆ], 0, 224, 70, ⵠⲆⲆ],
		[1, ⵠ[ΔⲆⵠᐃ], 0, 224, 74, 1],
		[1, ⵠ[3], 0, 224, 77, ΔⵠΔ],
		[ⵠⲆⲆ, ⵠ[3], ΔⵠΔ, 224, 62, ᐃⲆΔ],
		[1, ⵠ[3], ᐃᐃΔ, 224, 68, ⵠⲆⲆ],
		[1, ⵠ[3], 1, 224, 72, ⵠⲆⲆ],
		[ᐃᐃΔ, ⵠ[3], 1, 224, 76, ᐃᐃΔ],
		[1, ⵠ[3], 1, 224, 80, 1],
		[ⲆᐃΔ, ⵠ[3], 1, 224, 83, 1],
		[1, ⵠ[3], ⵠΔᐃ, 224, 91, Δⵠᐃ],
		[ⲆᐃΔ, ⵠ[ᐃⵠΔᐃ], 1, 224, 95, ᐃⲆΔ],
		[1, ⵠ[ⲆⵠⲆᐃ], ΔⵠΔ, 224, 97, 1],
		[ⲆᐃΔ, ⵠ[3], 0, 224, 85, ⵠΔᐃ],
		[1, ⵠ[ᐃⵠΔⵠ], ΔΔᐃ, 224, 88, ⵠΔᐃ],
		[1, ⵠ[ΔⲆΔⲆ], 0, 224, 93, ⵠⲆⲆ],
		[1, ⵠ[ΔⲆⵠᐃ], ⵠᐃⲆ, 224, 98, ⵠⲆⲆ],
		[1, ⵠ[ᐃⵠΔⲆ], ᐃⲆᐃᐃ, 224, 59, Δⵠᐃ],
		[1, ⵠ[ᐃⵠΔⲆ], 2, 224, 63, 1],
		[ⵠΔᐃ, ⵠ[3], ⵠⵠⵠᐃ, 224, 65, ⵠΔᐃ],
		[ⲆᐃΔ, ⵠ[3], ᐃᐃΔⵠ, 224, 67, 1],
		[Ⲇⵠᐃ, ⵠ[3], 2, 224, 69, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 224, 71, 1],
		[1, ⵠ[ᐃⵠΔⵠ], ᐃⲆᐃᐃ, 224, 73, ᐃᐃΔ],
		[1, ⵠ[ⲆΔᐃⲆ], ⵠⵠⵠᐃ, 224, 75, Ⲇⵠᐃ],
		[1, ⵠ[3], 2, 224, 78, ᐃᐃΔ],
		[1, ⵠ[ᐃⲆᐃΔ], ᐃᐃⲆⲆ, 224, 79, ⵠΔᐃ],
		[ᐃⲆΔ, ⵠ[3], ᐃᐃᐃⵠ, 224, 81, 1],
		[ⵠΔᐃ, ⵠ[ᐃⵠΔⲆ], ᐃⲆᐃᐃ, 224, 82, ⵠΔᐃ],
		[1, ⵠ[3], 2, 224, 84, 1],
		[ⵠΔᐃ, ⵠ[3], 2, 224, 86, ᐃⲆΔ],
		[ᐃⲆΔ, ⵠ[3], ΔΔⲆᐃ, 224, 87, 1],
		[Δⵠᐃ, ⵠ[3], 2, 224, 89, 1],
		[1, ⵠ[3], ᐃᐃΔⵠ, 224, 90, 1],
		[1, ⵠ[ΔⲆΔⲆ], ᐃⲆᐃⵠ, 224, 92, 1],
		[1, ⵠ[3], 2, 224, 94, Δⵠᐃ],
		[1, ⵠ[ᐃⵠΔᐃ], ᐃⲆᐃⵠ, 224, 96, 1],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 224, 99, ⵠΔᐃ],
		[ΔⵠΔ, ⵠ[ⲆᐃᐃΔ], 2, 224, ᐃⲆΔⲆᐃ, ⵠΔᐃ],
		[ⲆᐃΔ, ⵠ[3], 0, 224, 101, 1],
		[1, ⵠ[ᐃⵠΔⵠ], ⲆᐃΔ, 224, 103, ᐃᐃΔ],
		[ᐃⲆΔ, ⵠ[3], ᐃᐃΔⵠ, 224, 102, ᐃᐃΔ],
		[Ⲇⵠᐃ, ⵠ[3], ⵠᐃⲆ, 222, ⵠΔΔΔⵠ, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 223, 9, Ⲇⵠᐃ],
		[Δⵠᐃ, ⵠ[ⵠⵠΔⵠ], ᐃⲆᐃᐃ, 222, 9, Ⲇⵠᐃ],
		[1, ⵠ[3], ⲆⲆΔⲆ, 221, 9, ᐃⲆΔ],
		[1, ⵠ[3], ᐃᐃⲆⲆ, 223, ⵠⲆⵠⵠⲆ, 1],
		[Ⲇⵠᐃ, ⵠ[3], ᐃᐃⲆⲆ, 223, ⲆᐃⵠᐃΔ, ᐃⲆΔ],
		[1, ⵠ[3], ⲆⲆΔⲆ, 223, 12, 1],
		[ⵠΔᐃ, ⵠ[ⲆΔᐃⲆ], ⲆΔᐃⲆ, 223, ᐃⵠⵠⵠΔ, ⲆᐃΔ],
		[1, ⵠ[ᐃⵠΔⵠ], ⲆΔᐃⲆ, 222, 11, ᐃⲆΔ],
		[1, ⵠ[ΔΔᐃΔ], 3, 220, 9, Δⵠᐃ],
		[1, ⵠ[ⵠⵠΔⵠ], 3, 219, 9, ⵠΔᐃ],
		[1, ⵠ[ΔΔᐃΔ], ΔⲆΔⲆ, 221, ⲆΔⵠΔⵠ, 1],
		[ⵠΔᐃ, ⵠ[449], ᐃⲆᐃⵠ, 219, 13, ᐃᐃΔ],
		[ⲆᐃΔ, ⵠ[449], 1, 218, ᐃⲆⲆⵠᐃ, ᐃⲆΔ],
		[ΔⵠΔ, ⵠ[449], Δⵠᐃ, 214, 13, ΔⵠΔ],
		[ⲆᐃΔ, ⵠ[3], ⵠⲆᐃ, 221, 20, 1],
		[1, ⵠ[3], 1, 223, 18, 1],
		[Ⲇⵠᐃ, ⵠ[3], 2, 222, 19, 1],
		[1, ⵠ[3], ⲆⲆΔⲆ, 223, ΔΔⵠⲆⲆ, 1],
		[Ⲇⵠᐃ, ⵠ[3], ᐃᐃΔⵠ, 223, ᐃᐃⲆΔⵠ, ᐃⲆΔ],
		[ⵠΔᐃ, ⵠ[ᐃⵠΔᐃ], ⲆⲆΔⲆ, 222, ΔⲆΔⲆΔ, 1],
		[1, ⵠ[3], ⲆⲆΔⲆ, 220, 21, ⵠΔᐃ],
		[ΔⵠΔ, ⵠ[3], ⵠⵠⵠ, 219, 21, ΔⵠΔ],
		[1, ⵠ[ᐃΔⵠⲆ], 3, 221, 21, Δⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[3], ᐃⲆᐃΔ, 218, 21, ⵠΔᐃ],
		[ⵠΔᐃ, ⵠ[3], 3, 222, 21, 1],
		[ᐃⲆΔ, ⵠ[3], ⲆⵠⲆᐃ, 220, 22, 1],
		[1, ⵠ[3], ΔΔᐃΔ, 219, 22, 1],
		[1, ⵠ[3], ⲆΔᐃⲆ, 221, 22, 1],
		[ᐃᐃΔ, ⵠ[3], ⵠⵠⵠ, 211, ΔⲆⲆΔⲆ, 1],
		[ᐃᐃΔ, ⵠ[ⲆⵠⲆᐃ], 1, 211, ᐃᐃᐃΔΔ, ᐃⲆΔ],
		[ΔⵠΔ, ⵠ[ᐃⵠΔᐃ], ΔⵠΔ, 210, ᐃⲆⵠΔᐃ, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], 0, 211, 13, Δⵠᐃ],
		[1, ⵠ[3], ᐃᐃΔⵠ, 210, 9, 1],
		[ΔⵠΔ, ⵠ[3], ᐃᐃΔⵠ, 210, 10, 1],
		[Ⲇⵠᐃ, ⵠ[Δⵠⵠᐃ], ΔΔⲆᐃ, 210, 11, 1],
		[1, ⵠ[ⵠⵠΔⵠ], 2, 212, ΔⲆⲆΔⲆ, Δⵠᐃ],
		[1, ⵠ[3], ΔΔⲆᐃ, 210, 13, ⵠⲆⲆ],
		[1, ⵠ[3], ᐃᐃⲆⲆ, 211, ΔⲆⵠΔᐃ, Δⵠᐃ],
		[ⲆᐃΔ, ⵠ[ᐃⵠΔⲆ], ΔΔⲆᐃ, 211, 11, Δⵠᐃ],
		[ΔⵠΔ, ⵠ[ΔΔᐃΔ], ΔΔⲆᐃ, 211, ⵠⲆᐃᐃⵠ, 1],
		[1, ⵠ[Δⵠⵠᐃ], 2, 212, 15, 1],
		[1, ⵠ[3], 2, 210, 14, ᐃⲆΔ],
		[ᐃⲆΔ, ⵠ[3], 3, 211, 15, ᐃᐃΔ],
		[1, ⵠ[3], 3, 213, 9, 1],
		[Δⵠᐃ, ⵠ[ᐃⵠΔⵠ], ᐃΔⵠⲆ, 212, ⵠΔΔΔⵠ, ΔⵠΔ],
		[1, ⵠ[ΔⲆⵠᐃ], 3, 223, 21, 1],
		[Δⵠᐃ, ⵠ[ⲆΔᐃⲆ], ᐃⵠΔⵠ, 209, ⵠΔⵠⵠᐃ, 1],
		[ⵠⲆⲆ, ⵠ[105], ᐃΔⵠⲆ, 223, 22, ΔⵠΔ],
		[1, ⵠ[105], ⲆΔᐃⲆ, 221, 23, ⵠⲆⲆ],
		[1, ⵠ[105], ᐃⲆᐃΔ, 207, 9, Ⲇⵠᐃ],
		[1, ⵠ[105], 3, 209, ᐃᐃᐃΔΔ, ᐃⲆΔ],
		[1, ⵠ[105], Ⲇᐃⵠ, 209, ⲆᐃⲆᐃⲆ, 1],
		[1, ⵠ[105], 4, 209, ⲆᐃⵠⲆΔ, 1],
		[1, ⵠ[105], ⵠᐃΔⲆ, 219, 23, Δⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[105], 3, 210, 15, 1],
		[ⵠΔᐃ, ⵠ[105], 3, 217, 22, Ⲇⵠᐃ],
		[ᐃⲆΔ, ⵠ[105], 4, 212, 16, ⵠⲆⲆ],
		[1, ⵠ[105], 2, 214, ⵠⵠΔᐃⲆ, ΔⵠΔ],
		[1, ⵠ[105], ⵠⲆⲆⵠ, 213, 20, 1],
		[1, ⵠ[105], ⵠⲆⲆ, 212, 21, 1],
		[1, ⵠ[105], 4, 215, 18, 1],
		[ⵠΔᐃ, ⵠ[105], 2, 216, ⲆᐃᐃΔⲆΔⵠ, ⲆᐃΔ],
		[Ⲇⵠᐃ, ⵠ[105], 5, 216, 16, 1],
		[Ⲇⵠᐃ, ⵠ[105], ΔⲆⲆⵠ, 216, 15, Δⵠᐃ],
		[ⵠΔᐃ, ⵠ[105], 1, 217, 16, 1],
		[1, ⵠ[105], ᐃⲆᐃⵠ, 218, 16, 1],
		[ᐃⲆΔ, ⵠ[105], 2, 216, ΔⲆΔⲆᐃ, ΔⵠΔ],
		[Δⵠᐃ, ⵠ[105], ⵠⵠⵠᐃ, 219, 16, 1],
		[1, ⵠ[105], ⲆⵠΔΔ, 220, ᐃᐃⲆⲆⵠ, 1],
		[1, ⵠ[105], 5, 216, 13, ᐃᐃΔ],
		[ⲆᐃΔ, ⵠ[105], 4, 217, ᐃᐃΔᐃⲆ, 1],
		[1, ⵠ[3], 0, 211, 44, 1],
		[1, ⵠ[3], Δⵠᐃ, 212, 45, 1],
		[ⲆᐃΔ, ⵠ[ⲆⵠⲆᐃ], 2, 213, 45, 1],
		[Ⲇⵠᐃ, ⵠ[ᐃⲆᐃΔ], ⵠⲆᐃ, 214, 46, 1],
		[1, ⵠ[Δⵠⵠᐃ], ⲆⲆΔⲆ, 215, 46, 1],
		[ᐃⲆΔ, ⵠ[3], ⲆⵠⲆᐃ, 213, 46, 1],
		[1, ⵠ[ⲆΔᐃⲆ], 3, 214, 47, Ⲇⵠᐃ],
		[Δⵠᐃ, ⵠ[Δⵠⵠᐃ], 3, 214, 48, ᐃⲆΔ],
		[1, ⵠ[3], ᐃⵠΔⲆ, 216, 46, ⵠⲆⲆ],
		[ⲆᐃΔ, ⵠ[ΔΔᐃΔ], 0, 208, ᐃᐃⲆΔⵠ, ⵠⲆⲆ],
		[1, ⵠ[ᐃⵠΔⲆ], 0, 210, 21, 1],
		[Δⵠᐃ, ⵠ[ⲆᐃᐃΔ], ΔⲆⲆ, 212, 23, 1],
		[1, ⵠ[3], 0, 213, 25, ᐃᐃΔ],
		[ᐃᐃΔ, ⵠ[ⲆᐃᐃΔ], 2, 213, 24, 1],
		[ⲆᐃΔ, ⵠ[3], 2, 211, 22, ᐃⲆΔ],
		[ⵠΔᐃ, ⵠ[3], ᐃᐃΔⵠ, 210, ⵠΔᐃⲆⵠ, 1],
		[1, ⵠ[ᐃΔⵠⲆ], ⲆⲆΔⲆ, 209, 21, ⵠΔᐃ],
		[1, ⵠ[3], 2, 209, 20, ⲆᐃΔ],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 211, 21, ⵠⲆⲆ],
		[1, ⵠ[3], 2, 212, 22, Δⵠᐃ],
		[Δⵠᐃ, ⵠ[3], ᐃⲆᐃᐃ, 213, 23, 1],
		[1, ⵠ[3], 3, 213, 26, 1],
		[1, ⵠ[ᐃⲆᐃΔ], ᐃⵠΔⲆ, 207, ⵠᐃⲆⵠⲆ, Δⵠᐃ],
		[ᐃⲆΔ, ⵠ[105], 4, 192, 33, 1],
		[1, ⵠ[105], ᐃΔᐃΔ, 191, 34, 1],
		[1, ⵠ[105], 4, 190, 35, Ⲇⵠᐃ],
		[1, ⵠ[105], ᐃⵠΔⲆ, 189, 37, 1],
		[ⵠⲆⲆ, ⵠ[105], 3, 188, 39, 1],
		[1, ⵠ[105], ⵠᐃΔΔ, 186, 40, ⵠⲆⲆ],
		[ᐃᐃΔ, ⵠ[105], 4, 185, 39, 1],
		[1, ⵠ[105], 4, 184, 39, 1],
		[1, ⵠ[105], 2, 183, 39, ᐃⲆΔ],
		[ᐃⲆΔ, ⵠ[105], ⲆᐃΔ, 182, 40, ΔⵠΔ],
		[1, ⵠ[105], ⵠⵠⵠᐃ, 181, 41, ⲆᐃΔ],
		[1, ⵠ[105], 5, 180, 41, Δⵠᐃ],
		[ᐃⲆΔ, ⵠ[105], ⲆᐃⲆΔ, 179, 41, 1],
		[ᐃᐃΔ, ⵠ[105], ⵠᐃΔΔ, 192, 28, 1],
		[1, ⵠ[105], ⵠᐃᐃΔ, 191, 28, ⵠⲆⲆ],
		[ΔⵠΔ, ⵠ[105], 4, 190, 27, 1],
		[1, ⵠ[105], 3, 188, 27, 1],
		[1, ⵠ[105], ⵠⲆⲆⵠ, 187, 26, ΔⵠΔ],
		[1, ⵠ[105], 4, 186, 25, 1],
		[Ⲇⵠᐃ, ⵠ[105], Ⲇⵠⵠⵠ, 185, 25, 1],
		[Δⵠᐃ, ⵠ[105], ᐃΔⵠⵠ, 184, 24, 1],
		[1, ⵠ[105], 5, 184, 23, ᐃᐃΔ],
		[ᐃᐃΔ, ⵠ[105], ᐃᐃⲆⲆ, 184, 22, 1],
		[ᐃⲆΔ, ⵠ[105], ⵠⲆⲆᐃ, 184, 21, ᐃⲆΔ],
		[ᐃⲆΔ, ⵠ[105], 1, 183, 20, 1],
		[ᐃⲆΔ, ⵠ[105], ⵠⲆⲆᐃ, 182, 20, 1],
		[ᐃᐃΔ, ⵠ[105], ᐃᐃᐃⵠ, 181, 20, ᐃⲆΔ],
		[1, ⵠ[105], ᐃᐃᐃⲆ, 180, ⵠᐃⲆⵠⲆ, 1],
		[Ⲇⵠᐃ, ⵠ[105], 2, 179, 20, 1],
		[Ⲇⵠᐃ, ⵠ[105], 4, 178, 19, ᐃᐃΔ],
		[1, ⵠ[105], ᐃⲆᐃΔ, 178, 17, 1],
		[ᐃⲆΔ, ⵠ[105], ⵠⵠΔⵠ, 176, 18, 1],
		[1, ⵠ[ᐃⵠΔⲆ], ⵠⲆᐃ, 177, ⲆΔΔΔⵠ, ΔⵠΔ],
		[1, ⵠ[ᐃⵠΔᐃ], ⵠⵠⵠ, 175, 17, 1],
		[ΔⵠΔ, ⵠ[3], Ⲇᐃⵠ, 180, 16, ⵠⲆⲆ],
		[ᐃᐃΔ, ⵠ[ⲆᐃᐃΔ], 0, 174, ᐃΔΔⵠᐃ, 1],
		[ᐃⲆΔ, ⵠ[3], 0, 172, ΔⲆΔⲆΔ, 1],
		[ⲆᐃΔ, ⵠ[ⲆΔᐃⲆ], 1, 175, ᐃⵠᐃⵠᐃ, 1],
		[1, ⵠ[Δⵠⵠᐃ], ΔⵠΔ, 172, ᐃⲆⲆⵠᐃ, ᐃᐃΔ],
		[1, ⵠ[ᐃⵠΔⲆ], 1, 181, 15, ⵠΔᐃ],
		[ᐃᐃΔ, ⵠ[3], ᐃᐃΔⵠ, 179, 15, ΔⵠΔ],
		[ᐃⲆΔ, ⵠ[3], 2, 177, ᐃᐃⲆⲆⵠ, ⲆᐃΔ],
		[1, ⵠ[ᐃⲆᐃΔ], 2, 176, ᐃⵠⲆⲆΔΔᐃ, Ⲇⵠᐃ],
		[ᐃⲆΔ, ⵠ[3], ΔΔⲆᐃ, 174, ΔΔΔΔᐃ, ᐃⲆΔ],
		[Ⲇⵠᐃ, ⵠ[3], ᐃᐃΔⵠ, 173, Δᐃⵠⵠⵠ, Δⵠᐃ],
		[ᐃᐃΔ, ⵠ[3], 2, 172, ΔΔⵠⲆⲆ, ⵠΔᐃ],
		[Ⲇⵠᐃ, ⵠ[3], 2, 173, ΔΔΔΔᐃ, ⵠⲆⲆ],
		[ⲆᐃΔ, ⵠ[ᐃΔⵠⲆ], ᐃⲆᐃⵠ, 173, 17, 1],
		[Δⵠᐃ, ⵠ[ᐃⵠΔⵠ], ᐃⲆᐃⵠ, 174, 17, ᐃᐃΔ],
		[ⵠΔᐃ, ⵠ[3], 2, 174, ⵠᐃᐃⲆⲆ, 1],
		[1, ⵠ[3], ᐃⲆᐃᐃ, 175, 16, ᐃⲆΔ],
		[ⵠⲆⲆ, ⵠ[ⲆᐃᐃΔ], ᐃᐃᐃⵠ, 176, 15, ⲆᐃΔ],
		[ᐃⲆΔ, ⵠ[3], 2, 178, 15, ᐃⲆΔ],
		[1, ⵠ[Δⵠⵠᐃ], ᐃᐃⲆⲆ, 178, 16, Ⲇⵠᐃ],
		[ⵠⲆⲆ, ⵠ[ΔⲆⵠᐃ], 2, 179, 16, 1],
		[1, ⵠ[ΔⲆΔⲆ], ᐃⲆᐃᐃ, 180, 15, ⵠΔᐃ],
		[ⲆᐃΔ, ⵠ[ᐃΔⵠⲆ], 2, 181, ⲆΔⲆⵠΔ, Ⲇⵠᐃ],
		[1, ⵠ[3], 3, 182, ⲆⵠΔᐃΔ, 1],
		[1, ⵠ[3], Δⵠⵠᐃ, 172, 21, 1],
		[ΔⵠΔ, ⵠ[105], 1, 175, 19, 1],
		[1, ⵠ[105], 2, 174, ᐃᐃΔΔΔ, ⵠΔᐃ],
		[Ⲇⵠᐃ, ⵠ[105], 2, 173, ⵠᐃᐃⵠΔ, ⵠⲆⲆ],
		[ⵠⲆⲆ, ⵠ[105], ᐃᐃΔ, 180, ᐃΔΔⲆᐃⵠᐃ, ⵠⲆⲆ],
		[1, ⵠ[105], ⲆⲆΔⲆ, 181, 17, 1],
		[ΔⵠΔ, ⵠ[105], ΔⲆΔⲆ, 191, ⵠᐃⲆⵠⲆ, Δⵠᐃ],
		[Ⲇⵠᐃ, "s", 0, 217, 30, Δⵠᐃ],
		[Ⲇⵠᐃ, "s", 0, 208, 35, 1],
		[1, "s", 0, 204, 24, 1],
		[1, "s", ⵠΔᐃ, 218, 32, 1],
		[1, "s", ᐃᐃΔ, 207, 34, Δⵠᐃ],
		[Ⲇⵠᐃ, "s", Δⵠᐃ, 202, 23, 1],
		[1, "s", ΔⵠΔ, 195, 16, 1],
		[1, "s", ᐃⲆᐃᐃ, 222, 28, Δⵠᐃ],
		[Ⲇⵠᐃ, "s", ᐃᐃΔⵠ, 212, 38, 1],
		[1, "s", 2, 207, 23, Δⵠᐃ],
		[Δⵠᐃ, "s", 2, 202, 12, Δⵠᐃ],
		[ᐃᐃΔ, "s", 2, 195, 18, 1],
		[ᐃᐃΔ, "s", ᐃⲆΔ, 191, ᐃᐃΔΔⵠ, Ⲇⵠᐃ],
		[ΔⵠΔ, "s", ᐃᐃⲆ, 187, 16, 1],
		[Ⲇⵠᐃ, "s", ⵠⵠⵠᐃ, 188, 16, 1],
		[1, "s", 1, 186, 14, 1],
		[1, "s", 1, 201, ΔΔΔⵠᐃ, Δⵠᐃ],
		[1, "g", ΔⵠΔ, 216, 31, Ⲇⵠᐃ],
		[1, "g", ᐃᐃᐃ, 200, 15, 1],
		[ᐃᐃΔ, "g", 0, 202, 40, ᐃᐃΔ],
		[1, "g", 0, 189, 32, 1],
		[Δⵠᐃ, "g", 0, 204, 28, 1],
		[1, "g", 0, 196, 24, 1],
		[1, "g", ᐃᐃᐃⵠ, 198, 37, Ⲇⵠᐃ],
		[1, "s", 0, 193, 39, 1],
		[Ⲇⵠᐃ, "s", 0, 201, 45, 1],
		[Ⲇⵠᐃ, "a", ⵠⲆᐃ, 210, 29, Δⵠᐃ],
		[1, "a", 0, 200, ⲆᐃΔᐃⵠ, ⵠⲆⲆ],
		[1, ⵠ[3], 0, 200, 34, 1],
		[ΔⵠΔ, ⵠ[ΔΔᐃΔ], 0, 193, 27, ⵠΔᐃ],
		[1, ⵠ[ⲆⵠⲆᐃ], 1, 203, 30, 1],
		[ᐃⲆΔ, ⵠ[ΔⲆΔⲆ], 1, 191, 31, 1],
		[ⵠΔᐃ, ⵠ[3], ᐃⲆᐃⵠ, 202, 32, ΔⵠΔ],
		[ⵠⲆⲆ, ⵠ[ⲆᐃᐃΔ], ⵠⵠⵠᐃ, 194, 26, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 192, 27, ᐃᐃΔ],
		[1, ⵠ[3], ΔΔⲆᐃ, 192, 32, ⲆᐃΔ],
		[ⵠΔᐃ, ⵠ[3], ⵠⵠⵠᐃ, 203, 31, ⲆᐃΔ],
		[1, ⵠ[3], ᐃᐃΔⵠ, 202, 31, ᐃⲆΔ],
		[ᐃⲆΔ, ⵠ[3], 2, 202, 30, 1],
		[1, ⵠ[3], ⵠⵠΔⵠ, 202, 29, 1],
		[1, ⵠ[ⲆΔᐃⲆ], ΔⲆⵠᐃ, 201, 32, ⵠⲆⲆ],
		[1, ⵠ[ᐃⵠΔⲆ], ᐃⵠΔᐃ, 199, 35, 1],
		[ᐃⲆΔ, ⵠ[ᐃⲆᐃΔ], 0, 193, 34, 1],
		[1, ⵠ[3], 2, 194, 34, 1],
		[Ⲇⵠᐃ, ⵠ[3], ᐃᐃⲆⲆ, 198, 35, 1],
		[1, ⵠ[3], 3, 199, 34, 1],
		[1, ⵠ[ⲆᐃᐃΔ], ᐃⵠΔⲆ, 191, 29, ΔⵠΔ],
		[Ⲇⵠᐃ, ⵠ[3], ⵠⵠⵠ, 191, 30, ᐃᐃΔ],
		[1, ⵠ[ⲆΔᐃⲆ], 3, 190, 29, 1],
		[1, ⵠ[105], 3, 180, 69, ⵠⲆⲆ],
		[1, ⵠ[105], ΔⲆⵠᐃ, 182, 68, 1],
		[1, ⵠ[105], ⲆⵠⲆᐃ, 184, 68, 1],
		[ⵠΔᐃ, ⵠ[105], 3, 186, 70, 1],
		[1, ⵠ[105], 3, 184, 72, 1],
		[1, ⵠ[105], 3, 182, 72, 1],
		[ᐃᐃΔ, ⵠ[105], ᐃΔⵠⲆ, 180, 71, ᐃᐃΔ],
		[ΔⵠΔ, ⵠ[3], 0, 186, 68, 1],
		[1, ⵠ[Δⵠⵠᐃ], ᐃᐃⲆ, 187, 70, 1],
		[1, ⵠ[ΔⲆΔⲆ], ⵠⲆΔ, 183, 74, 1],
		[ΔⵠΔ, ⵠ[3], 0, 178, 70, 1],
		[1, ⵠ[3], 2, 182, 66, ⵠΔᐃ],
		[1, ⵠ[3], 2, 182, 74, Δⵠᐃ],
		[ⵠⲆⲆ, ⵠ[ΔΔᐃΔ], 2, 181, 73, ⵠⲆⲆ],
		[1, ⵠ[ᐃⵠΔⵠ], 2, 180, 74, 1],
		[ΔⵠΔ, ⵠ[3], ᐃᐃⲆⲆ, 181, 74, ΔⵠΔ],
		[1, ⵠ[105], 0, 184, 70, 1],
		[1, ⵠ[105], ᐃⵠΔᐃ, 182, 70, 1],
		[Δⵠᐃ, ⵠ[ⲆⵠⲆᐃ], 2, 181, 67, ᐃⲆΔ],
		[ⲆᐃΔ, ⵠ[3], 3, 184, 67, 1],
		[ᐃⲆΔ, ⵠ[ΔⲆⵠᐃ], ᐃⵠΔᐃ, 182, 67, ᐃᐃΔ],
		[ᐃᐃΔ, ⵠ[105], 4, 187, 69, ΔⵠΔ],
		[1, ⵠ[105], ΔⵠΔ, 188, 68, ΔⵠΔ],
		[1, ⵠ[105], ᐃΔⵠⵠ, 189, 68, ᐃᐃΔ],
		[Δⵠᐃ, ⵠ[105], ⵠⵠⵠᐃ, 190, 68, 1],
		[ΔⵠΔ, ⵠ[105], ⵠΔᐃ, 191, 68, 1],
		[ᐃⲆΔ, ⵠ[105], 4, 192, 68, 1],
		[1, ⵠ[105], 2, 193, 68, 1],
		[1, ⵠ[105], ᐃΔⵠⵠ, 194, 69, ⵠΔᐃ],
		[ΔⵠΔ, ⵠ[105], ᐃᐃᐃⵠ, 194, 70, 1],
		[ΔⵠΔ, ⵠ[105], 5, 195, 71, Δⵠᐃ],
		[1, ⵠ[105], 1, 194, 71, ⵠⲆⲆ],
		[1, ⵠ[105], 2, 196, 72, 1],
		[1, ⵠ[105], ⵠᐃΔⲆ, 196, 71, ᐃⲆΔ],
		[Ⲇⵠᐃ, ⵠ[105], 1, 197, 73, 1],
		[ᐃⲆΔ, ⵠ[105], 5, 196, 73, 1],
		[1, ⵠ[105], ΔⲆⲆⵠ, 198, 73, 1],
		[1, ⵠ[105], ⲆΔᐃⲆ, 201, 73, 1],
		[1, ⵠ[105], 3, 203, 72, Ⲇⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[105], 4, 199, 73, 1],
		[ⲆᐃΔ, ⵠ[105], 1, 205, 72, ⲆᐃΔ],
		[ⵠΔᐃ, ⵠ[105], ᐃⲆᐃᐃ, 206, 72, 1],
		[Ⲇⵠᐃ, ⵠ[105], 5, 207, 72, 1],
		[1, ⵠ[105], 1, 208, 72, ⵠⲆⲆ],
		[ΔⵠΔ, ⵠ[105], ⲆᐃΔ, 209, 73, 1],
		[1, ⵠ[105], 2, 209, 74, 1],
		[1, ⵠ[105], 5, 211, 76, ᐃᐃΔ],
		[ᐃⲆΔ, ⵠ[105], 4, 210, 75, ⲆᐃΔ],
		[ⲆᐃΔ, ⵠ[105], ⲆᐃⲆΔ, 212, 76, 1],
		[Ⲇⵠᐃ, ⵠ[105], ΔⵠⵠⲆ, 202, 75, 1],
		[1, ⵠ[105], 2, 203, 76, Ⲇⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[105], 4, 204, 77, 1],
		[ᐃⲆΔ, ⵠ[105], 2, 204, 78, 1],
		[Ⲇⵠᐃ, ⵠ[105], 2, 204, 79, Δⵠᐃ],
		[ᐃⲆΔ, ⵠ[105], ᐃᐃᐃⲆ, 204, 80, 1],
		[Δⵠᐃ, ⵠ[ⵠⵠΔⵠ], 0, 202, 74, 1],
		[ⲆᐃΔ, ⵠ[3], ᐃⲆΔ, 203, 74, 1],
		[1, ⵠ[ΔⲆⵠᐃ], 2, 204, 73, ⲆᐃΔ],
		[Δⵠᐃ, ⵠ[ⲆᐃᐃΔ], 2, 203, 75, 1],
		[1, ⵠ[ⲆΔᐃⲆ], 3, 204, 76, ΔⵠΔ],
		[ᐃᐃΔ, ⵠ[3], ᐃⵠΔᐃ, 205, 73, 1],
		[ⵠΔᐃ, ⵠ[3], ⵠᐃⲆ, 205, 74, ⲆᐃΔ],
		[ⵠΔᐃ, ⵠ[ΔⲆΔⲆ], ⲆⲆΔⲆ, 204, 74, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⵠΔⵠ], ᐃᐃᐃⵠ, 204, 75, 1],
		[1, ⵠ[3], 2, 206, 73, 1],
		[ᐃᐃΔ, ⵠ[3], ᐃⵠΔᐃ, 207, 73, ⵠΔᐃ],
		[ΔⵠΔ, ⵠ[3], ᐃᐃⲆⲆ, 205, 76, ⵠⲆⲆ],
		[1, ⵠ[Δⵠⵠᐃ], 3, 205, 77, 1],
		[ᐃⲆΔ, ⵠ[105], 3, 183, 66, ᐃⲆΔ],
		[ᐃᐃΔ, ⵠ[105], ⵠᐃΔⲆ, 183, 65, ᐃᐃΔ],
		[ⲆᐃΔ, ⵠ[105], 4, 184, 64, Δⵠᐃ],
		[1, ⵠ[105], 4, 185, 63, ᐃⲆΔ],
		[ᐃⲆΔ, ⵠ[105], 1, 185, 62, ᐃⲆΔ],
		[1, ⵠ[105], 2, 185, 61, ⵠⲆⲆ],
		[Δⵠᐃ, ⵠ[105], ᐃᐃᐃⵠ, 185, 60, ᐃᐃΔ],
		[1, ⵠ[105], ⵠⲆΔⵠ, 186, 59, ᐃᐃΔ],
		[ᐃⲆΔ, ⵠ[105], ΔⵠΔ, 187, 58, ΔⵠΔ],
		[ⲆᐃΔ, ⵠ[105], 2, 187, 57, 1],
		[Δⵠᐃ, ⵠ[105], ΔΔⲆᐃ, 187, 56, 1],
		[1, "s", ⵠᐃⲆ, 191, 60, ⵠΔᐃ],
		[1, "s", 1, 195, 58, ⵠΔᐃ],
		[ᐃᐃΔ, "s", Ⲇⵠᐃ, 199, 46, 1],
		[ⲆᐃΔ, "s", 2, 202, 49, ⵠⲆⲆ],
		[Δⵠᐃ, "g", ᐃᐃΔⵠ, 197, 55, 1],
		[Ⲇⵠᐃ, "g", ΔⵠΔ, 213, 55, Ⲇⵠᐃ],
		[1, "g", ⵠⵠⵠ, 192, 45, Δⵠᐃ],
		[ⲆᐃΔ, "g", 0, 210, 61, ⵠΔᐃ],
		[ⵠⲆⲆ, "g", ⵠᐃⲆ, 182, 52, ⵠΔᐃ],
		[ΔⵠΔ, "g", ΔΔᐃ, 180, 35, ΔⵠΔ],
		[1, "g", ᐃᐃⲆ, 175, 25, ᐃᐃΔ],
		[ᐃᐃΔ, "g", 0, 168, 32, ⲆᐃΔ],
		[ⵠΔᐃ, "g", ⵠⲆⲆ, 179, 28, 1],
		[1, "g", 1, 161, ⲆⵠΔᐃΔ, ᐃᐃΔ],
		[1, "g", ⵠⵠⵠᐃ, 172, ⵠᐃⵠΔᐃ, ⵠΔᐃ],
		[Ⲇⵠᐃ, "g", 2, 160, 25, ΔⵠΔ],
		[1, "g", ᐃᐃΔⵠ, 157, 39, 1],
		[1, "g", 2, 170, 43, ⵠⲆⲆ],
		[Ⲇⵠᐃ, "g", 2, 202, 67, Δⵠᐃ],
		[1, "g", ΔΔⲆᐃ, 217, 72, ᐃⲆΔ],
		[1, "g", ΔΔⲆᐃ, 214, 82, ⲆᐃΔ],
		[ⲆᐃΔ, "g", ᐃⲆᐃⵠ, 193, 86, ⵠⲆⲆ],
		[ᐃⲆΔ, "g", 2, 168, 60, 1],
		[ⵠΔᐃ, "g", ᐃⲆᐃᐃ, 165, 78, Δⵠᐃ],
		[Ⲇⵠᐃ, "g", ⵠⵠⵠᐃ, 173, 88, 1],
		[1, "s", ᐃᐃᐃ, 185, 51, 1],
		[1, "s", ⵠⲆΔ, 175, 44, 1],
		[ⲆᐃΔ, "s", ΔΔᐃ, 165, 50, 1],
		[ⵠⲆⲆ, "s", ⵠⲆᐃ, 160, 32, ΔⵠΔ],
		[1, "s", 1, 162, 30, ᐃᐃΔ],
		[ⲆᐃΔ, "s", Ⲇⵠᐃ, 176, 28, ᐃⲆΔ],
		[Ⲇⵠᐃ, "s", 1, 154, 17, 1],
		[ᐃᐃΔ, "s", 1, 184, 49, ⲆᐃΔ],
		[1, "s", 1, 192, 62, 1],
		[ΔⵠΔ, "s", 1, 216, 62, 1],
		[1, "s", ᐃᐃΔ, 204, 65, 1],
		[ᐃᐃΔ, "s", 1, 217, 79, ΔⵠΔ],
		[1, "s", ⲆᐃΔ, 206, 86, 1],
		[1, ⵠ[105], 3, 211, 69, Ⲇⵠᐃ],
		[1, ⵠ[105], ⵠᐃᐃΔ, 215, 69, ⵠΔᐃ],
		[1, ⵠ[105], ᐃᐃᐃⲆ, 201, 81, Ⲇⵠᐃ],
		[ΔⵠΔ, ⵠ[105], ⵠΔᐃ, 207, 83, ΔⵠΔ],
		[ⲆᐃΔ, ⵠ[105], ⲆᐃᐃΔ, 173, 32, 1],
		[ΔⵠΔ, ⵠ[105], ᐃᐃᐃⵠ, 181, 45, 1],
		[ΔⵠΔ, ⵠ[105], ⵠΔᐃ, 178, 38, ⲆᐃΔ],
		[1, ⵠ[105], 1, 213, 69, ⵠⲆⲆ],
		[1, ⵠ[105], ⵠⲆⲆᐃ, 214, 69, ⲆᐃΔ],
		[1, ⵠ[105], 4, 216, 68, 1],
		[ⵠΔᐃ, ⵠ[105], 0, 191, 78, 1],
		[1, ⵠ[105], 3, 191, 80, 1],
		[ⲆᐃΔ, ⵠ[105], 3, 189, 79, ⵠΔᐃ],
		[ᐃⲆΔ, "g", ⲆⲆΔⲆ, 150, 29, Ⲇⵠᐃ],
		[ⵠΔᐃ, "g", 2, 154, 67, 1],
		[ᐃⲆΔ, "g", ᐃⲆᐃᐃ, 202, 94, Δⵠᐃ],
		[ᐃⲆΔ, "g", ⵠⵠⵠᐃ, 155, 90, 1],
		[Δⵠᐃ, "s", 2, 215, 80, ᐃⲆΔ],
		[ᐃᐃΔ, "s", 2, 204, 62, 1],
		[1, "s", ΔΔⲆᐃ, 218, 60, ᐃᐃΔ],
		[1, "s", ΔΔⲆᐃ, 194, 62, 1],
		[1, "s", 0, 216, 86, 1],
		[ᐃᐃΔ, "s", ⵠᐃⲆ, 211, 93, 1],
		[1, ⵠ[105], ᐃᐃⲆ, 216, 92, 1],
		[1, ⵠ[105], 0, 151, 96, ⵠΔᐃ],
		[ⵠⲆⲆ, ⵠ[105], 1, 155, 95, ⵠⲆⲆ],
		[1, ⵠ[105], ᐃΔⵠⵠ, 214, 88, 1],
		[1, "s", ΔΔᐃ, 205, 99, 1],
		[1, "s", ΔⵠΔ, 217, 88, ᐃⲆΔ],
		[1, "s", 1, 213, 94, 1],
		[1, "s", 1, 202, 97, 1],
		[1, "s", ⵠⲆᐃ, 199, 85, 1],
		[ΔⵠΔ, "s", 0, 190, 93, 1],
		[ⵠΔᐃ, "s", 1, 199, 87, 1],
		[ⵠⲆⲆ, "s", 1, 192, 97, Δⵠᐃ],
		[ᐃⲆΔ, ⵠ[105], ΔΔᐃΔ, 196, 92, ⵠΔᐃ],
		[Δⵠᐃ, ⵠ[105], ᐃᐃΔ, 199, 91, 1],
		[1, ⵠ[105], 1, 220, 91, ᐃᐃΔ],
		[Δⵠᐃ, ⵠ[105], 0, 219, 77, 1],
		[1, ⵠ[105], ᐃᐃᐃ, 200, 59, ᐃᐃΔ],
		[1, ⵠ[105], ⲆΔᐃⲆ, 188, 87, Δⵠᐃ],
		[1, ⵠ[105], ΔⲆⲆ, 183, 94, Δⵠᐃ],
		[1, ⵠ[105], 1, 187, 83, ⵠⲆⲆ],
		[Δⵠᐃ, ⵠ[105], 1, 175, 82, ᐃⲆΔ],
		[ⵠⲆⲆ, ⵠ[105], ⵠⲆⲆ, 172, 94, ᐃⲆΔ],
		[1, ⵠ[105], ⵠⵠⵠᐃ, 179, 78, 1],
		[1, ⵠ[105], 0, 166, 87, ᐃᐃΔ],
		[Ⲇⵠᐃ, ⵠ[105], 3, 159, 80, 1],
		[1, ⵠ[105], ᐃⵠΔᐃ, 167, 15, ᐃᐃΔ],
		[1, ⵠ[105], 1, 164, ⲆᐃⲆⲆⵠ, ⵠⲆⲆ],
		[1, ⵠ[105], 1, 172, 28, ᐃᐃΔ],
		[1, ⵠ[105], ⲆᐃᐃΔ, 153, 24, 1],
		[1, ⵠ[105], 4, 164, 91, 1],
		[1, ⵠ[105], 4, 156, 82, 1],
		[ΔⵠΔ, ⵠ[105], ᐃΔⵠⵠ, 149, 90, 1],
		[1, "s", 0, 178, 85, 1],
		[ΔⵠΔ, "s", 1, 180, 85, 1],
		[Ⲇⵠᐃ, "s", 0, 163, 96, ⲆᐃΔ],
		[1, "s", ⵠⵠⵠ, 159, 86, ⲆᐃΔ],
		[Ⲇⵠᐃ, "s", 0, 185, 78, 1],
		[1, "s", Δⵠᐃ, 194, 75, Ⲇⵠᐃ],
		[1, "s", 2, 195, 76, 1],
		[1, "s", 2, 181, 78, 1],
		[ⵠΔᐃ, "s", ᐃᐃΔⵠ, 161, 87, Ⲇⵠᐃ],
		[1, "s", ᐃⲆᐃᐃ, 166, 97, 1],
		[1, "s", 2, 177, 97, ⲆᐃΔ],
		[1, "s", ⵠⵠⵠ, 149, 85, ᐃⲆΔ],
		[1, "s", Ⲇⵠᐃ, 151, 83, ⵠⲆⲆ],
		[ⵠⲆⲆ, "s", 1, 175, 74, 1],
		[1, "s", ⵠⲆᐃ, 174, 72, 1],
		[ᐃⲆΔ, ⵠ[105], ᐃⵠΔⲆ, 168, 71, ⲆᐃΔ],
		[1, ⵠ[105], 3, 180, 60, 1],
		[ⵠⲆⲆ, "s", ⵠⲆΔ, 156, 63, ⲆᐃΔ],
		[1, "s", 0, 151, 47, Δⵠᐃ],
		[1, "s", 1, 158, 64, ᐃᐃΔ],
		[1, "s", 1, 161, 75, 1],
		[1, "s", 1, 162, 51, 1],
		[ⵠΔᐃ, "s", Ⲇⵠᐃ, 175, 45, 1],
		[ᐃⲆΔ, "s", ᐃᐃΔ, 152, 47, ΔⵠΔ],
		[ⵠⲆⲆ, "s", ⵠⲆⲆ, 159, 33, ⵠΔᐃ],
		[1, "s", ⵠⲆⲆ, 152, ᐃⲆⲆⵠᐃ, 1],
		[Δⵠᐃ, "s", ΔΔᐃ, 151, 13, Ⲇⵠᐃ],
		[1, "s", ⵠⵠⵠ, 166, 22, 1],
		[ᐃⲆΔ, "s", 0, 170, 63, ⵠⲆⲆ],
		[1, "s", 2, 172, 62, 1],
		[1, "s", ᐃᐃᐃⵠ, 155, 61, ⲆᐃΔ],
		[ⵠⲆⲆ, "s", 2, 167, 51, ᐃᐃΔ],
		[ⵠⲆⲆ, "s", ᐃⲆᐃᐃ, 150, 52, 1],
		[Δⵠᐃ, ⵠ[105], ⵠⲆΔⵠ, 178, 69, ᐃⲆΔ],
		[1, ⵠ[105], 4, 177, 68, 1],
		[ⵠΔᐃ, ⵠ[105], ⲆΔᐃⲆ, 176, 67, 1],
		[ᐃᐃΔ, ⵠ[105], 0, 174, 67, 1],
		[Δⵠᐃ, ⵠ[105], ΔⵠΔ, 172, 67, 1],
		[1, ⵠ[105], 4, 171, 67, 1],
		[ᐃⲆΔ, ⵠ[105], ⵠᐃᐃΔ, 170, 66, 1],
		[1, ⵠ[105], ⵠᐃᐃΔ, 169, 66, 1],
		[1, ⵠ[105], ᐃⲆΔ, 168, 66, 1],
		[1, ⵠ[105], ᐃⲆᐃⲆ, 167, 67, ⵠΔᐃ],
		[Ⲇⵠᐃ, ⵠ[105], 1, 166, 67, ᐃᐃΔ],
		[1, ⵠ[105], ⵠᐃᐃΔ, 165, 68, ΔⵠΔ],
		[ᐃⲆΔ, ⵠ[105], 5, 164, 68, ᐃᐃΔ],
		[ᐃⲆΔ, ⵠ[105], 2, 163, 68, ᐃⲆΔ],
		[ⵠΔᐃ, ⵠ[105], 5, 162, 68, 1],
		[1, ⵠ[105], 2, 161, 68, Ⲇⵠᐃ],
		[1, ⵠ[105], 3, 153, 72, 1],
		[ΔⵠΔ, ⵠ[105], ᐃⵠΔᐃ, 163, 60, Ⲇⵠᐃ],
		[1, ⵠ[105], 3, 164, 42, 1],
		[ⵠⲆⲆ, ⵠ[105], 0, 155, 51, ΔⵠΔ],
		[1, ⵠ[105], 1, 168, 42, ᐃⲆΔ],
		[ᐃᐃΔ, ⵠ[105], 4, 158, 48, 1],
		[ᐃⲆΔ, ⵠ[105], ⵠᐃᐃΔ, 178, 57, ΔⵠΔ],
		[1, ⵠ[105], ᐃΔᐃΔ, 151, 69, ⲆᐃΔ],
		[ⵠⲆⲆ, ⵠ[105], ᐃⲆᐃᐃ, 170, 74, 1],
		[1, ⵠ[105], ᐃⲆᐃⵠ, 160, 84, ⵠⲆⲆ],
		[ⵠΔᐃ, ⵠ[105], 2, 174, 92, 1],
		[Ⲇⵠᐃ, ⵠ[105], ⵠⵠⵠᐃ, 188, 90, Ⲇⵠᐃ],
		[1, ⵠ[105], 2, 209, 84, 1],
		[ⵠⲆⲆ, ⵠ[105], ᐃᐃᐃⵠ, 206, 93, 1],
		[Ⲇⵠᐃ, ⵠ[105], 5, 156, 70, ᐃⲆΔ],
		[1, ⵠ[105], ᐃᐃᐃⲆ, 165, 57, 1],
		[ⵠΔᐃ, ⵠ[105], ΔⵠΔᐃ, 182, 58, Δⵠᐃ],
		[1, ⵠ[105], ᐃᐃΔᐃ, 166, 44, 1],
		[ΔⵠΔ, ⵠ[105], 1, 163, 39, ⵠΔᐃ],
		[1, ⵠ[105], 1, 152, 53, Ⲇⵠᐃ],
		[1, ⵠ[105], ⲆᐃΔ, 152, 37, ΔⵠΔ],
		[ⵠΔᐃ, ⵠ[105], ᐃⲆᐃⵠ, 163, ᐃⵠⵠⵠΔ, ΔⵠΔ],
		[1, ⵠ[77], 12, 219, ⵠᐃΔᐃᐃ, ⵠᐃⲆ],
		[ΔⵠΔ, ⵠ[77], ⲆᐃⵠⲆΔ, 203, ᐃⵠⵠΔⲆ, 0],
		[Ⲇⵠᐃ, ⵠ[77], 15, 220, ⲆᐃΔⲆΔ, ⵠⲆΔ],
		[Ⲇⵠᐃ, ⵠ[77], 12, 223, 15, 0],
		[1, ⵠ[77], ⵠᐃΔᐃᐃ, 213, ⵠⲆⵠⵠⲆ, Ⲇᐃⵠ],
		[ⵠⲆⲆ, ⵠ[77], 37, 217, 19, 0],
		[ᐃᐃΔ, ⵠ[77], 38, 220, 14, 0],
		[1, ⵠ[77], 38, 215, 10, ᐃᐃᐃ],
		[1, ⵠ[77], 40, 214, 14, ΔΔᐃ],
		[1, ⵠ[77], 40, 222, 16, 0],
		[1, ⵠ[77], 40, 209, 18, ΔⲆⲆ],
		[1, ⵠ[77], 37, 212, 18, 0],
		[1, ⵠ[77], 38, 215, 26, 0],
		[ⵠⲆⲆ, ⵠ[77], 37, 222, 25, ⵠⵠⵠ],
		[ᐃᐃΔ, ⵠ[77], 40, 221, 29, ⵠⲆΔ],
		[1, ⵠ[77], ⵠᐃⵠΔᐃ, 220, 27, 0],
		[Δⵠᐃ, ⵠ[77], 13, 213, 27, 0],
		[1, ⵠ[77], 14, 215, 30, 0],
		[1, ⵠ[77], 15, 219, 33, 0],
		[1, ⵠ[77], 38, 220, 31, 0],
		[Ⲇⵠᐃ, ⵠ[77], 38, 217, 35, ᐃᐃⲆ],
		[ᐃᐃΔ, ⵠ[77], 40, 221, 34, 0],
		[1, ⵠ[77], 39, 215, 32, 0],
		[ⲆᐃΔ, ⵠ[77], 37, 211, 35, 0],
		[1, ⵠ[77], 12, 223, 38, ᐃᐃⲆ],
		[1, ⵠ[77], 13, 213, 38, 0],
		[1, ⵠ[77], ᐃⵠⵠⵠⵠⵠΔ, 222, 44, ᐃᐃᐃ],
		[ᐃᐃΔ, ⵠ[77], ⲆΔΔΔⵠ, 208, 33, 0],
		[1, ⵠ[77], ΔΔⵠⲆᐃ, 206, 23, ⵠⲆᐃ],
		[Ⲇⵠᐃ, ⵠ[77], ⲆᐃΔⲆⵠ, 205, 28, 0],
		[1, ⵠ[77], 14, 211, 23, 0],
		[1, ⵠ[77], 14, 201, 20, ⵠⲆΔ],
		[ᐃⲆΔ, ⵠ[77], 15, 198, 9, Ⲇᐃⵠ],
		[1, ⵠ[77], 15, 199, 16, 0],
		[ᐃᐃΔ, ⵠ[77], ᐃᐃΔΔⵠ, 194, ⵠΔᐃⵠⲆ, 0],
		[1, ⵠ[77], 12, 197, 23, ⵠⲆᐃ],
		[1, ⵠ[77], 37, 205, 13, 0],
		[1, ⵠ[77], 39, 204, ⵠΔⵠⵠᐃ, ⵠⵠⵠ],
		[1, ⵠ[77], 40, 196, ΔⵠⲆⲆⲆ, 0],
		[1, ⵠ[77], 40, 198, 18, 0],
		[1, ⵠ[77], 37, 192, 11, Ⲇᐃⵠ],
		[1, ⵠ[77], 37, 199, 24, ⵠⲆΔ],
		[ⵠⲆⲆ, ⵠ[77], 37, 209, 24, 0],
		[ⵠⲆⲆ, ⵠ[77], 39, 209, 30, ᐃᐃⲆ],
		[ⲆᐃΔ, ⵠ[77], 39, 204, 31, ⵠⲆΔ],
		[ᐃᐃΔ, ⵠ[77], 39, 192, 24, 0],
		[ᐃᐃΔ, ⵠ[77], 40, 187, 23, ⵠⲆᐃ],
		[ⲆᐃΔ, ⵠ[77], 38, 187, ⵠᐃⵠⵠᐃ, ⵠⲆᐃ],
		[1, ⵠ[77], 39, 192, 18, Ⲇᐃⵠ],
		[1, ⵠ[77], 37, 185, ⵠΔᐃⵠⲆ, ᐃᐃᐃ],
		[ᐃⲆΔ, ⵠ[77], ⵠᐃⵠΔᐃ, 188, 15, 0],
		[1, ⵠ[77], 13, 185, ⵠΔᐃⲆⲆ, 0],
		[Δⵠᐃ, ⵠ[77], ⵠⲆᐃᐃⵠ, 189, ⵠΔᐃᐃΔ, 0],
		[Δⵠᐃ, ⵠ[77], 15, 187, 22, ⵠᐃⲆ],
		[ⵠΔᐃ, ⵠ[77], 15, 180, ᐃΔⵠⵠⲆ, 0],
		[ⲆᐃΔ, ⵠ[77], 12, 177, ⵠΔⲆᐃᐃ, 0],
		[ⵠⲆⲆ, ⵠ[77], 14, 173, 9, 0],
		[ⵠⲆⲆ, ⵠ[77], ⵠⲆᐃᐃⵠ, 171, 15, ⵠⲆΔ],
		[1, ⵠ[77], 40, 182, 9, ⵠⲆΔ],
		[1, ⵠ[77], 39, 179, 13, ΔΔᐃ],
		[1, ⵠ[77], 39, 175, 9, 0],
		[Ⲇⵠᐃ, ⵠ[77], 40, 173, ⵠΔⲆᐃᐃ, ΔⲆⲆ],
		[Δⵠᐃ, ⵠ[77], 37, 169, ⵠⲆⵠᐃΔΔᐃ, ΔⲆⲆ],
		[ᐃⲆΔ, ⵠ[77], 37, 163, ⲆΔⵠΔⵠ, 0],
		[ᐃᐃΔ, ⵠ[77], 38, 164, Δⵠᐃⵠᐃ, ΔⲆⲆ],
		[1, ⵠ[77], 39, 170, 20, ᐃᐃᐃ],
		[1, ⵠ[77], 40, 160, 17, 0],
		[1, ⵠ[77], 40, 154, 10, 0],
		[ⵠΔᐃ, ⵠ[77], 40, 165, 23, 0],
		[ⲆᐃΔ, ⵠ[77], 40, 150, 19, 0],
		[1, ⵠ[77], 37, 155, ΔᐃⲆⲆΔ, 0],
		[1, ⵠ[77], 39, 146, 10, 0],
		[ᐃᐃΔ, ⵠ[77], ᐃᐃΔΔⵠ, 159, ᐃᐃΔΔⵠ, 0],
		[ΔⵠΔ, ⵠ[77], ⲆᐃΔⲆⵠ, 151, 9, 0],
		[1, ⵠ[77], 14, 150, ⲆᐃⵠΔᐃ, Ⲇᐃⵠ],
		[Δⵠᐃ, ⵠ[77], Δⵠᐃⵠᐃ, 153, 19, 0],
		[1, ⵠ[77], 13, 161, 25, Ⲇᐃⵠ],
		[Δⵠᐃ, ⵠ[77], 14, 169, 25, 0],
		[ᐃᐃΔ, ⵠ[77], Δⵠᐃⵠᐃ, 176, 25, ΔΔᐃ],
		[Ⲇⵠᐃ, ⵠ[77], ⲆⵠᐃⵠⲆ, 180, 29, 0],
		[1, ⵠ[77], 12, 188, 31, ᐃᐃᐃ],
		[1, ⵠ[77], ⵠⲆᐃᐃⵠ, 181, 36, 0],
		[ᐃᐃΔ, ⵠ[77], 37, 186, 33, ⵠᐃⲆ],
		[1, ⵠ[77], 38, 183, 26, ⵠᐃⲆ],
		[ᐃᐃΔ, ⵠ[77], 39, 177, 21, 0],
		[ⵠⲆⲆ, ⵠ[77], 40, 175, 31, ΔΔᐃ],
		[ᐃⲆΔ, ⵠ[77], 37, 176, 39, 0],
		[ⵠΔᐃ, ⵠ[77], 37, 168, 34, Ⲇᐃⵠ],
		[Ⲇⵠᐃ, ⵠ[77], 38, 162, 32, ⵠⲆΔ],
		[1, ⵠ[77], 38, 168, 45, 0],
		[ᐃⲆΔ, ⵠ[77], 38, 173, 45, 0],
		[1, ⵠ[77], 39, 160, 35, 0],
		[1, ⵠ[77], 40, 161, 42, 0],
		[1, ⵠ[77], 40, 170, 39, Ⲇᐃⵠ],
		[1, ⵠ[77], 40, 181, 43, ⵠⲆΔ],
		[ⵠⲆⲆ, ⵠ[77], 40, 156, 26, ᐃᐃᐃ],
		[1, ⵠ[77], 40, 150, 32, Ⲇᐃⵠ],
		[ⵠΔᐃ, ⵠ[77], 37, 159, 26, 0],
		[1, ⵠ[77], 37, 155, 40, 0],
		[1, ⵠ[77], 37, 154, 45, Ⲇᐃⵠ],
		[ⲆᐃΔ, ⵠ[77], 39, 149, 45, ⵠᐃⲆ],
		[ⲆᐃΔ, ⵠ[77], 40, 150, 50, ⵠⲆΔ],
		[Δⵠᐃ, ⵠ[77], 40, 160, 52, Ⲇᐃⵠ],
		[ΔⵠΔ, ⵠ[77], 37, 164, 52, 0],
		[Δⵠᐃ, ⵠ[77], 38, 168, 50, 0],
		[1, ⵠ[77], ⲆᐃⲆᐃⲆ, 176, 45, 0],
		[1, ⵠ[77], ᐃⲆⵠΔᐃ, 167, 32, ΔⲆⲆ],
		[ᐃⲆΔ, ⵠ[77], 13, 158, 32, ΔΔᐃ],
		[ᐃᐃΔ, ⵠ[77], ⲆᐃⵠⲆΔ, 149, 28, 0],
		[Δⵠᐃ, ⵠ[77], 15, 163, 30, 0],
		[1, ⵠ[77], 14, 158, 39, 0],
		[Ⲇⵠᐃ, ⵠ[77], 12, 171, 43, 0],
		[1, ⵠ[77], ᐃⵠⲆⵠᐃ, 174, 36, 0],
		[1, ⵠ[77], 12, 151, 43, ⵠⲆΔ],
		[Δⵠᐃ, ⵠ[77], ⵠΔᐃⲆⲆ, 152, 48, 0],
		[1, ⵠ[77], ⲆⵠⲆᐃᐃᐃⲆ, 164, 49, ΔΔᐃ],
		[ⵠⲆⲆ, ⵠ[77], ⵠⲆⵠⲆᐃ, 149, 52, 0],
		[1, ⵠ[77], ⵠᐃⵠΔᐃ, 174, 49, 0],
		[ⵠΔᐃ, ⵠ[77], ᐃⵠⵠⵠΔ, 183, 51, ΔΔᐃ],
		[1, ⵠ[77], 14, 186, 48, 0],
		[1, ⵠ[77], 37, 182, 48, ⵠᐃⲆ],
		[1, ⵠ[77], 38, 187, 52, 0],
		[1, ⵠ[77], 39, 188, 43, 0],
		[1, ⵠ[77], 37, 200, 38, ΔΔᐃ],
		[1, ⵠ[77], 40, 194, 37, 0],
		[ⲆᐃΔ, ⵠ[77], 39, 199, 44, ΔⲆⲆ],
		[ⲆᐃΔ, ⵠ[77], 38, 200, 49, ᐃᐃⲆ],
		[1, ⵠ[77], 37, 196, 54, ΔⲆⲆ],
		[ΔⵠΔ, ⵠ[77], ⲆⵠᐃⵠⲆ, 194, 40, 0],
		[ⵠⲆⲆ, ⵠ[77], ΔⲆᐃΔᐃ, 202, 45, 0],
		[1, ⵠ[77], 14, 198, 47, 0],
		[1, ⵠ[77], 15, 198, 55, ᐃᐃⲆ],
		[1, ⵠ[77], 15, 212, 54, ⵠⵠⵠ],
		[ᐃⲆΔ, ⵠ[77], 15, 216, 63, Ⲇᐃⵠ],
		[1, ⵠ[77], 14, 209, 62, ΔⲆⲆ],
		[ⵠΔᐃ, ⵠ[77], ᐃⵠⲆⵠᐃ, 219, 60, 0],
		[Δⵠᐃ, ⵠ[77], 12, 206, 56, 0],
		[1, ⵠ[77], ⲆⵠᐃⵠⲆ, 218, 72, Ⲇᐃⵠ],
		[1, ⵠ[77], ⲆᐃⲆᐃⲆ, 223, 67, 0],
		[1, ⵠ[77], ⲆⵠᐃⵠⲆ, 205, 64, 0],
		[1, ⵠ[77], ᐃⵠⲆⵠᐃ, 193, 63, 0],
		[ᐃⲆΔ, ⵠ[77], 14, 216, 80, 0],
		[1, ⵠ[77], 14, 222, 87, Ⲇᐃⵠ],
		[ⲆᐃΔ, ⵠ[77], 38, 210, 53, 0],
		[ⵠⲆⲆ, ⵠ[77], 37, 210, 47, ⵠᐃⲆ],
		[1, ⵠ[77], 37, 200, 63, ⵠᐃⲆ],
		[1, ⵠ[77], 37, 218, 62, ΔΔᐃ],
		[ᐃⲆΔ, ⵠ[77], 37, 222, 60, 0],
		[ᐃᐃΔ, ⵠ[77], 37, 207, 70, 0],
		[ⵠⲆⲆ, ⵠ[77], 38, 203, 68, ΔΔᐃ],
		[ᐃⲆΔ, ⵠ[77], 38, 195, 66, 0],
		[1, ⵠ[77], 38, 218, 55, ⵠⲆΔ],
		[1, ⵠ[77], 38, 212, 61, 0],
		[ᐃᐃΔ, ⵠ[77], 38, 222, 70, 0],
		[ᐃⲆΔ, ⵠ[77], 38, 218, 70, Ⲇᐃⵠ],
		[ⵠΔᐃ, ⵠ[77], 40, 222, 81, ᐃᐃᐃ],
		[1, ⵠ[77], 38, 214, 79, ⵠⲆᐃ],
		[Ⲇⵠᐃ, ⵠ[77], 39, 213, 83, 0],
		[1, ⵠ[77], 39, 207, 76, ⵠⲆΔ],
		[ⲆᐃΔ, ⵠ[77], 39, 208, 86, Ⲇᐃⵠ],
		[ᐃᐃΔ, ⵠ[77], 39, 218, 87, 0],
		[1, ⵠ[77], 39, 222, 93, 0],
		[1, ⵠ[77], 39, 216, 96, ⵠⲆΔ],
		[ⵠΔᐃ, ⵠ[77], 39, 209, 94, 0],
		[Ⲇⵠᐃ, ⵠ[77], 39, 201, 87, Ⲇᐃⵠ],
		[ᐃᐃΔ, ⵠ[77], 39, 198, 82, ⵠⵠⵠ],
		[1, ⵠ[77], 39, 207, 99, ΔΔᐃ],
		[ᐃᐃΔ, ⵠ[77], 39, 200, 97, 0],
		[ᐃᐃΔ, ⵠ[77], 39, 202, 92, ᐃᐃᐃ],
		[ⵠΔᐃ, ⵠ[77], 37, 194, 97, 0],
		[1, ⵠ[77], 39, 204, 88, 0],
		[ΔⵠΔ, ⵠ[77], 39, 189, 90, 0],
		[1, ⵠ[77], 39, 194, 81, ⵠᐃⲆ],
		[1, ⵠ[77], 39, 188, 98, 0],
		[ⵠΔᐃ, ⵠ[77], 37, 183, 91, 0],
		[1, ⵠ[77], 37, 186, 80, 0],
		[ⲆᐃΔ, ⵠ[77], 37, 191, 72, ΔⲆⲆ],
		[1, ⵠ[77], 38, 184, 77, 0],
		[ⵠΔᐃ, ⵠ[77], 38, 180, 80, ⵠᐃⲆ],
		[ᐃⲆΔ, ⵠ[77], 39, 173, 75, ᐃᐃᐃ],
		[ᐃⲆΔ, ⵠ[77], 40, 178, 87, ΔΔᐃ],
		[1, ⵠ[77], 40, 174, 94, ΔΔᐃ],
		[1, ⵠ[77], 40, 192, 93, ᐃᐃᐃ],
		[ⵠⲆⲆ, ⵠ[77], 40, 165, 92, 0],
		[1, ⵠ[77], 37, 160, 89, ΔΔᐃ],
		[ᐃᐃΔ, ⵠ[77], 38, 161, 85, Ⲇᐃⵠ],
		[1, ⵠ[77], 38, 164, 98, Ⲇᐃⵠ],
		[1, ⵠ[77], 38, 151, 99, 0],
		[ⵠΔᐃ, ⵠ[77], 38, 151, 85, 0],
		[Δⵠᐃ, ⵠ[77], 40, 148, 83, 0],
		[Δⵠᐃ, ⵠ[77], 40, 160, 77, ΔΔᐃ],
		[1, ⵠ[77], 40, 167, 77, 0],
		[1, ⵠ[77], 40, 153, 69, 0],
		[1, ⵠ[77], 40, 149, 74, ⵠⲆᐃ],
		[1, ⵠ[77], 37, 161, 64, ΔⲆⲆ],
		[1, ⵠ[77], 37, 154, 61, ⵠⲆΔ],
		[1, ⵠ[77], 39, 157, 55, ⵠᐃⲆ],
		[1, ⵠ[77], 39, 174, 64, ⵠⲆΔ],
		[1, ⵠ[77], 39, 175, 56, 0],
		[1, ⵠ[77], 39, 149, 67, 0],
		[ⲆᐃΔ, ⵠ[77], 12, 218, 96, 0],
		[1, ⵠ[77], ⲆⵠⵠᐃΔ, 212, 95, ΔΔᐃ],
		[1, ⵠ[77], 14, 204, 85, ⵠⵠⵠ],
		[ⲆᐃΔ, ⵠ[77], 15, 215, 85, 0],
		[1, ⵠ[77], 15, 197, 97, 0],
		[ⵠΔᐃ, ⵠ[77], 12, 198, 87, 0],
		[ᐃᐃΔ, ⵠ[77], ᐃⲆⲆᐃᐃⵠⵠ, 196, 77, ⵠⲆΔ],
		[ⵠⲆⲆ, ⵠ[77], 13, 194, 86, 0],
		[ΔⵠΔ, ⵠ[77], 15, 181, 84, ⵠⵠⵠ],
		[Δⵠᐃ, ⵠ[77], 14, 184, 79, ᐃᐃᐃ],
		[ᐃⲆΔ, ⵠ[77], 14, 188, 93, ᐃᐃⲆ],
		[1, ⵠ[77], ΔⲆᐃΔᐃ, 180, 87, 0],
		[ⵠΔᐃ, ⵠ[77], ᐃⵠⵠΔⲆ, 178, 96, ᐃᐃⲆ],
		[ΔⵠΔ, ⵠ[77], 13, 163, 95, ⵠⲆΔ],
		[ΔⵠΔ, ⵠ[77], ᐃᐃΔᐃⲆ, 172, 88, ⵠⲆΔ],
		[ⵠΔᐃ, ⵠ[77], ⵠⲆⵠⲆᐃ, 176, 75, 0],
		[1, ⵠ[77], ⵠΔⲆΔⲆⲆᐃ, 172, 72, ⵠⲆΔ],
		[ᐃⲆΔ, ⵠ[77], 14, 169, 82, ᐃᐃᐃ],
		[ΔⵠΔ, ⵠ[77], 13, 164, 78, 0],
		[1, ⵠ[77], ᐃⵠⵠⵠΔ, 158, 87, ᐃᐃⲆ],
		[1, ⵠ[77], 13, 149, 86, 0],
		[ⲆᐃΔ, ⵠ[77], ΔΔⵠⲆᐃ, 154, 91, ⵠⵠⵠ],
		[1, ⵠ[77], 15, 160, 74, 0],
		[1, ⵠ[77], 14, 152, 76, ΔΔᐃ],
		[ΔⵠΔ, ⵠ[77], 14, 158, 63, 0],
		[1, ⵠ[77], ΔⲆΔⲆᐃ, 150, 60, 0],
		[1, ⵠ[77], 12, 169, 59, 0],
		[1, ⵠ[77], 13, 173, 61, 0],
		[Ⲇⵠᐃ, ⵠ[3], 1, 143, 104, ΔⵠΔ],
		[Δⵠᐃ, ⵠ[ᐃⵠΔⵠ], 0, 141, 102, 1],
		[ⵠⲆⲆ, ⵠ[3], ᐃΔⵠⲆ, 138, 102, ⲆᐃΔ],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 139, 102, ⵠΔᐃ],
		[ⵠΔᐃ, ⵠ[3], 2, 140, 102, 1],
		[Ⲇⵠᐃ, ⵠ[3], ᐃⵠΔⵠ, 143, 107, Ⲇⵠᐃ],
		[1, ⵠ[3], 0, 143, 106, 1],
		[ⲆᐃΔ, ⵠ[3], 2, 143, 105, 1],
		[ⵠΔᐃ, ⵠ[3], ᐃᐃᐃⵠ, 142, 103, 1],
		[ᐃᐃΔ, ⵠ[3], ⵠⲆΔ, 142, 104, 1],
		[1, ⵠ[ΔΔᐃΔ], 2, 141, 103, 1],
		[1, ⵠ[ᐃⲆᐃΔ], 3, 142, 105, 1],
		[ᐃᐃΔ, ⵠ[ⲆᐃᐃΔ], ᐃⵠΔⲆ, 140, 103, ᐃⲆΔ],
		[1, ⵠ[3], ΔΔᐃΔ, 141, 104, 1],
		[1, ⵠ[105], 4, 151, 23, 1],
		[ⵠΔᐃ, ⵠ[105], ᐃⲆᐃⲆ, 150, 22, 1],
		[Ⲇⵠᐃ, ⵠ[105], ⵠⲆⲆ, 149, 21, 1],
		[ⵠΔᐃ, ⵠ[105], 4, 148, 21, ⵠⲆⲆ],
		[1, ⵠ[105], 2, 147, ⲆᐃΔᐃⵠ, Ⲇⵠᐃ],
		[ⵠⲆⲆ, ⵠ[105], ᐃΔⵠⵠ, 147, ᐃΔΔⵠᐃ, 1],
		[ⵠⲆⲆ, ⵠ[105], ⲆⲆᐃᐃ, 147, 18, ΔⵠΔ],
		[1, ⵠ[105], ᐃⲆΔ, 147, ᐃΔΔⲆᐃⵠᐃ, 1],
		[ⵠΔᐃ, ⵠ[105], 3, 144, ⵠⲆΔⵠⵠ, Ⲇⵠᐃ],
		[1, ⵠ[105], 5, 147, ᐃΔᐃᐃⲆ, ΔⵠΔ],
		[1, ⵠ[105], 2, 147, ᐃᐃΔᐃⲆ, 1],
		[1, ⵠ[105], 4, 147, ⲆᐃⵠΔᐃ, 1],
		[ΔⵠΔ, ⵠ[105], 4, 145, ⲆᐃⵠᐃΔ, ΔⵠΔ],
		[1, ⵠ[105], 5, 145, 12, 1],
		[1, ⵠ[105], ⵠⲆⲆ, 146, 13, ⲆᐃΔ],
		[1, ⵠ[105], 2, 145, ᐃⵠⵠⵠΔ, ⵠΔᐃ],
		[ᐃᐃΔ, ⵠ[105], ⲆⵠⲆᐃ, 155, 25, 1],
		[1, ⵠ[105], ⵠᐃⲆ, 155, 24, 1],
		[ⲆᐃΔ, ⵠ[105], 3, 153, 26, ⵠΔᐃ],
		[1, ⵠ[Δⵠⵠᐃ], 0, 151, 24, Δⵠᐃ],
		[1, ⵠ[3], 0, 153, 22, 1],
		[Ⲇⵠᐃ, ⵠ[ⲆΔᐃⲆ], 3, 152, 22, ⵠⲆⲆ],
		[Δⵠᐃ, ⵠ[ⲆⵠⲆᐃ], ⲆΔᐃⲆ, 154, 22, 1],
		[1, ⵠ[ᐃⵠΔⵠ], Δⵠᐃ, 157, 26, ᐃᐃΔ],
		[1, ⵠ[ᐃⵠΔⵠ], ⵠⵠⵠᐃ, 157, 24, 1],
		[ⵠΔᐃ, ⵠ[ᐃⵠΔⲆ], ᐃᐃⲆⲆ, 156, 26, ΔⵠΔ],
		[Ⲇⵠᐃ, ⵠ[3], 2, 154, 28, 1],
		[1, ⵠ[3], 2, 151, 26, ΔⵠΔ],
		[1, ⵠ[3], 2, 152, 25, 1],
		[1, ⵠ[3], 2, 151, 25, 1],
		[1, ⵠ[ᐃΔⵠⲆ], 2, 156, 27, 1],
		[ⵠⲆⲆ, ⵠ[3], 2, 157, 23, 1],
		[1, ⵠ[ᐃⵠΔᐃ], 2, 157, 22, 1],
		[1, ⵠ[3], ᐃⵠΔⵠ, 150, 24, ᐃᐃΔ],
		[Ⲇⵠᐃ, ⵠ[3], ΔΔᐃΔ, 150, 23, 1],
		[Δⵠᐃ, ⵠ[77], 38, 155, 29, ⵠⲆᐃ],
		[1, ⵠ[77], 12, 157, 27, ⵠⵠⵠ],
		[ΔⵠΔ, ⵠ[77], 14, 153, 29, 0],
		[1, ⵠ[77], 15, 158, 23, 0],
		[ⲆᐃΔ, ⵠ[77], 13, 156, 21, 0],
		[ⵠΔᐃ, ⵠ[77], 13, 147, 36, ΔΔᐃ],
		[ᐃⲆΔ, ⵠ[77], ᐃⵠⵠΔⲆ, 161, 56, 0],
		[ᐃᐃΔ, ⵠ[77], ΔⲆᐃΔᐃ, 147, 79, 0],
		[Ⲇⵠᐃ, ⵠ[77], 12, 157, 99, 0],
		[ᐃᐃΔ, ⵠ[77], 12, 172, 99, ᐃᐃⲆ],
		[ΔⵠΔ, ⵠ[105], ΔⲆΔⲆ, 143, 102, 1],
		[1, ⵠ[105], ΔⵠⵠⲆ, 149, 96, 1],
		[ᐃⲆΔ, ⵠ[105], 4, 145, 102, ⵠΔᐃ],
		[1, ⵠ[105], ⵠΔᐃ, 148, 97, ᐃᐃΔ],
		[Ⲇⵠᐃ, ⵠ[105], 5, 148, 98, ᐃᐃΔ],
		[Ⲇⵠᐃ, ⵠ[ΔΔᐃΔ], 3, 144, 104, 1],
		[1, ⵠ[ⲆΔᐃⲆ], Δⵠⵠᐃ, 144, 103, ᐃⲆΔ],
		[ⲆᐃΔ, ⵠ[3], ᐃⲆᐃΔ, 145, 103, 1],
		[ᐃᐃΔ, ⵠ[3], 3, 145, 104, ⵠⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[3], ΔⲆⵠᐃ, 142, 101, ⵠΔᐃ],
		[1, ⵠ[ⲆⵠⲆᐃ], 3, 143, 100, Ⲇⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[3], 3, 141, 101, 1],
		[1, ⵠ[3], ⲆᐃᐃΔ, 142, ⲆⵠⲆΔⵠⲆⲆ, 1],
		[Ⲇⵠᐃ, ⵠ[3], ᐃᐃᐃ, 141, 100, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], ΔΔⲆᐃ, 140, 101, Ⲇⵠᐃ],
		[1, ⵠ[3], 2, 144, 105, ⲆᐃΔ],
		[1, ⵠ[3], ᐃⵠΔᐃ, 146, 103, 1],
		[ᐃᐃΔ, ⵠ[ⲆΔᐃⲆ], ⲆᐃᐃΔ, 146, 102, ΔⵠΔ],
		[1, ⵠ[3], ᐃΔⵠⲆ, 150, 95, ᐃᐃΔ],
		[ⲆᐃΔ, ⵠ[3], 0, 150, 97, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], ᐃᐃᐃⵠ, 151, 98, 1],
		[ᐃⲆΔ, ⵠ[3], ⵠⵠⵠ, 153, 97, ⲆᐃΔ],
		[ΔⵠΔ, ⵠ[3], 3, 153, 96, ᐃᐃΔ],
		[ᐃⲆΔ, ⵠ[ⵠⵠΔⵠ], 2, 149, 95, 1],
		[1, "s", 0, 213, 127, 1],
		[1, ⵠ[267], 1, 214, 131, ⵠⲆᐃ],
		[Δⵠᐃ, ⵠ[267], ΔⵠΔ, 207, 128, 0],
		[1, ⵠ[267], 0, 208, 127, 0],
		[1, "s", 1, 207, 132, 1],
		[1, "s", ⵠⵠⵠᐃ, 208, 133, Δⵠᐃ],
		[1, ⵠ[267], Ⲇᐃⵠ, 217, 132, ᐃᐃᐃ],
		[ⵠΔᐃ, ⵠ[267], 2, 186, 158, ᐃᐃⲆ],
		[1, ⵠ[267], 0, 184, 160, ⵠⲆᐃ],
		[ᐃᐃΔ, "s", 1, 183, 156, 1],
		[1, "s", 2, 186, 159, Ⲇⵠᐃ],
		[1, "p", ⵠⲆᐃ, 182, 157, ᐃⲆΔ],
		[ⵠΔᐃ, "p", 0, 114, 205, ᐃᐃΔ],
		[ᐃᐃΔ, ⵠ[267], ᐃᐃΔ, 117, 204, ⵠⵠⵠ],
		[1, ⵠ[267], ᐃᐃᐃ, 117, 205, 0],
		[1, ⵠ[267], ᐃᐃⲆⲆ, 112, 204, ΔΔᐃ],
		[1, "s", 2, 114, 207, 1],
		[1, "s", 2, 115, 204, 1],
		[Ⲇⵠᐃ, ⵠ[267], 2, 122, 151, Ⲇᐃⵠ],
		[ⵠΔᐃ, ⵠ[267], ⲆᐃΔ, 123, 150, 0],
		[1, ⵠ[267], 1, 117, 151, ⵠⵠⵠ],
		[1, "s", ΔⲆⲆ, 118, 150, ᐃᐃΔ],
		[ᐃⲆΔ, "s", ΔⵠΔ, 122, 152, ΔⵠΔ],
		[1, ⵠ[267], ⵠⵠⵠᐃ, 156, 130, 0],
		[ⵠΔᐃ, ⵠ[267], 1, 154, 127, ⵠⲆΔ],
		[ΔⵠΔ, "s", ΔΔᐃ, 153, 128, 1],
		[1, "s", ᐃᐃΔⵠ, 152, 130, Δⵠᐃ],
		[1, "p", ΔΔᐃ, 123, 65, 1],
		[1, ⵠ[267], 2, 125, 62, 0],
		[ᐃᐃΔ, ⵠ[267], ΔⵠΔ, 124, 62, 0],
		[ΔⵠΔ, ⵠ[267], 0, 120, 65, ΔⲆⲆ],
		[1, "s", 1, 125, 63, ᐃᐃΔ],
		[Δⵠᐃ, "s", 1, 121, 64, Ⲇⵠᐃ],
		[1, "s", ᐃⲆᐃᐃ, 122, 62, ᐃⲆΔ],
		[1, ⵠ[3], ᐃᐃⲆ, 140, 106, 1],
		[1, ⵠ[ᐃⵠΔᐃ], ⵠⵠⵠᐃ, 144, 106, ⵠⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[3], ᐃᐃⲆⲆ, 145, 105, 1],
		[ⲆᐃΔ, ⵠ[3], ᐃᐃᐃⵠ, 144, 107, ⲆᐃΔ],
		[1, ⵠ[Δⵠⵠᐃ], ᐃᐃᐃⵠ, 141, 106, 1],
		[1, ⵠ[3], ᐃᐃΔⵠ, 141, 105, ⲆᐃΔ],
		[1, ⵠ[ΔΔᐃΔ], 2, 140, 105, ⵠΔᐃ],
		[1, ⵠ[3], ΔΔⲆᐃ, 140, 104, Δⵠᐃ],
		[1, ⵠ[ⲆⵠⲆᐃ], ᐃⲆΔ, 138, 103, Δⵠᐃ],
		[1, ⵠ[3], ᐃᐃⲆ, 139, 104, ⵠⲆⲆ],
		[1, ⵠ[3], 2, 139, 103, Ⲇⵠᐃ],
		[1, ⵠ[3], 2, 139, 105, ᐃᐃΔ],
		[Δⵠᐃ, ⵠ[3], 2, 142, 106, ᐃᐃΔ],
		[Δⵠᐃ, ⵠ[ᐃΔⵠⲆ], 2, 142, 107, 1],
		[1, ⵠ[3], 2, 139, 101, Ⲇⵠᐃ],
		[Δⵠᐃ, ⵠ[77], 19, 27, 264, 0],
		[1, ⵠ[105], 4, 147, 99, ᐃᐃΔ],
		[1, ⵠ[105], ⲆᐃΔ, 146, ᐃⵠΔᐃⵠ, ⲆᐃΔ],
		[ⵠⲆⲆ, ⵠ[105], 4, 145, 101, 1],
		[ΔⵠΔ, ⵠ[ᐃⵠΔᐃ], 1, 215, 47, 1],
		[ᐃᐃΔ, ⵠ[ⲆΔᐃⲆ], 2, 216, 47, ᐃᐃΔ],
		[1, ⵠ[ᐃⵠΔᐃ], ΔΔⲆᐃ, 215, 48, ᐃᐃΔ],
		[ⵠΔᐃ, ⵠ[105], ΔⵠⵠⲆ, 214, 45, ΔⵠΔ],
		[1, ⵠ[105], Ⲇⵠⵠⵠ, 215, 45, 1],
		[Δⵠᐃ, ⵠ[105], ΔΔᐃ, 216, 46, Ⲇⵠᐃ],
		[1, ⵠ[105], ⵠᐃΔⲆ, 216, 48, 1],
		[Δⵠᐃ, ⵠ[105], 4, 216, 49, Δⵠᐃ],
		[ᐃⲆΔ, ⵠ[105], 4, 217, 50, ⵠⲆⲆ],
		[1, ⵠ[105], 3, 214, 49, 1],
		[1, ⵠ[105], 4, 211, 45, 1],
		[1, ⵠ[105], ⵠⵠΔⵠ, 213, 47, 1],
		[Ⲇⵠᐃ, ⵠ[ᐃⵠΔⲆ], ⲆⲆΔⲆ, 224, 48, 1],
		[1, ⵠ[267], 2, 111, 243, ΔΔᐃ],
		[Ⲇⵠᐃ, ⵠ[267], ⵠⲆⲆ, 108, 246, ⵠᐃⲆ],
		[1, "s", 1, 110, 243, ⵠⲆⲆ],
		[1, "s", ΔⲆⲆ, 108, 245, 1],
		[ⵠⲆⲆ, "s", 0, 121, 276, 1],
		[ⲆᐃΔ, ⵠ[267], ᐃⲆᐃⵠ, 122, 277, 0],
		[ᐃⲆΔ, ⵠ[267], 2, 117, 276, ΔⲆⲆ],
		[ⵠΔᐃ, ⵠ[267], 1, 118, 277, 0],
		[1, "s", ⵠⲆⲆ, 118, 278, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], ⲆⲆΔⲆ, 66, ᐃⵠⲆⲆΔΔᐃ, 1],
		[ⲆᐃΔ, ⵠ[3], 3, 67, ᐃΔⲆⵠΔ, ᐃⲆΔ],
		[1, ⵠ[3], 0, 67, 17, ⵠΔᐃ],
		[Ⲇⵠᐃ, ⵠ[ᐃΔⵠⲆ], 2, 66, ⲆⵠᐃⲆⵠᐃⵠ, 1],
		[ⵠⲆⲆ, ⵠ[3], ᐃⵠΔⲆ, 66, ΔΔΔΔᐃ, ΔⵠΔ],
		[1, ⵠ[ΔⲆΔⲆ], ᐃΔⵠⲆ, 68, ⲆⵠⵠⲆΔ, ⵠΔᐃ],
		[1, ⵠ[ᐃΔⵠⲆ], ΔⲆⲆ, 36, ΔᐃⲆⲆΔ, 1],
		[1, ⵠ[ΔΔᐃΔ], 2, 36, ⲆᐃⲆⲆⵠ, 1],
		[ⲆᐃΔ, ⵠ[3], ᐃᐃⲆⲆ, 36, 18, Ⲇⵠᐃ],
		[1, ⵠ[3], ΔⲆⵠᐃ, 35, ᐃΔΔⲆᐃⵠᐃ, 1],
		[ᐃᐃΔ, ⵠ[ᐃⲆᐃΔ], ᐃⵠΔⲆ, 36, ᐃΔΔⵠᐃ, Ⲇⵠᐃ],
		[1, ⵠ[3], 3, 35, ΔΔⵠᐃᐃ, 1],
		[1, ⵠ[ᐃⲆᐃΔ], 2, 66, 30, 1],
		[Δⵠᐃ, ⵠ[3], 2, 66, 23, 1],
		[ᐃⲆΔ, ⵠ[ⲆᐃᐃΔ], 3, 66, 22, ᐃⲆΔ],
		[1, ⵠ[3], 3, 66, 31, 1],
		[1, ⵠ[Δⵠⵠᐃ], 2, 36, 30, Δⵠᐃ],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 36, 23, ⵠΔᐃ],
		[ⵠΔᐃ, ⵠ[ⲆΔᐃⲆ], ⲆᐃΔ, 36, 22, ⵠΔᐃ],
		[1, ⵠ[3], ⲆⲆΔⲆ, 36, 31, ᐃᐃΔ],
		[1, ⵠ[3], ᐃΔⵠⲆ, 42, 13, 1],
		[1, ⵠ[ⲆᐃᐃΔ], ᐃᐃⲆ, 43, 13, 1],
		[ΔⵠΔ, ⵠ[Δⵠⵠᐃ], 2, 44, 13, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], ⲆⵠⲆᐃ, 42, ᐃⵠⲆⲆΔΔᐃ, ΔⵠΔ],
		[1, ⵠ[3], ⲆⵠⲆᐃ, 41, 16, ⲆᐃΔ],
		[1, ⵠ[ᐃⵠΔⵠ], 3, 40, 16, 1],
		[1, ⵠ[3], ᐃᐃᐃ, 42, ΔΔⵠⲆⲆ, ΔⵠΔ],
		[ⲆᐃΔ, ⵠ[3], ᐃⵠΔᐃ, 43, 19, 1],
		[1, ⵠ[ᐃⵠΔⵠ], ⲆⵠⲆᐃ, 44, 19, ⲆᐃΔ],
		[1, ⵠ[3], 3, 45, ᐃᐃⲆⵠᐃ, ᐃⲆΔ],
		[1, ⵠ[ⲆⵠⲆᐃ], ⵠⵠⵠᐃ, 46, Δᐃᐃⵠᐃ, 1],
		[ΔⵠΔ, ⵠ[ΔⲆΔⲆ], 0, 43, 22, ᐃⲆΔ],
		[1, ⵠ[ΔΔᐃΔ], ⲆⲆΔⲆ, 42, 22, ᐃᐃΔ],
		[Ⲇⵠᐃ, ⵠ[3], 1, 41, 22, 1],
		[1, ⵠ[ᐃⲆᐃΔ], ΔΔᐃ, 40, 22, Ⲇⵠᐃ],
		[ⵠΔᐃ, ⵠ[3], 3, 39, 17, ⲆᐃΔ],
		[1, ⵠ[ᐃⵠΔᐃ], 1, 44, 26, 1],
		[1, ⵠ[3], ⲆⲆΔⲆ, 45, 26, 1],
		[ⵠΔᐃ, ⵠ[3], 3, 46, 26, Δⵠᐃ],
		[1, ⵠ[3], 0, 47, 26, 1],
		[ⵠⲆⲆ, ⵠ[ΔΔᐃΔ], ᐃᐃᐃⵠ, 48, 26, ᐃⲆΔ],
		[1, ⵠ[ᐃⵠΔᐃ], ΔⲆΔⲆ, 47, 25, ⵠⲆⲆ],
		[1, ⵠ[ᐃⵠΔᐃ], 3, 43, 27, Ⲇⵠᐃ],
		[ᐃᐃΔ, ⵠ[3], 1, 49, 32, ⲆᐃΔ],
		[Δⵠᐃ, ⵠ[ⵠⵠΔⵠ], ᐃⲆᐃᐃ, 50, 32, ⵠⲆⲆ],
		[ⲆᐃΔ, ⵠ[3], 2, 51, 32, 1],
		[1, ⵠ[ⲆΔᐃⲆ], 2, 52, 32, 1],
		[ⵠΔᐃ, "d", Ⲇᐃⵠ, 51, 29, ΔⵠΔ],
		[Ⲇⵠᐃ, "d", ⵠΔᐃ, 53, 29, ⵠΔᐃ],
		[1, "d", 1, 49, 29, ⵠΔᐃ],
		[1, ⵠ[ᐃⵠΔⲆ], 3, 55, 31, 1],
		[Ⲇⵠᐃ, ⵠ[3], 3, 54, 32, ΔⵠΔ],
		[ᐃᐃΔ, ⵠ[3], 3, 47, 31, 1],
		[Δⵠᐃ, ⵠ[3], ⲆᐃᐃΔ, 48, 32, ΔⵠΔ],
		[Ⲇⵠᐃ, ⵠ[ΔⲆΔⲆ], ΔⲆⲆ, 51, 33, 1],
		[ⵠⲆⲆ, ⵠ[3], ᐃᐃΔⵠ, 52, 33, Ⲇⵠᐃ],
		[ⵠⲆⲆ, ⵠ[3], 2, 50, 33, ⵠΔᐃ],
		[ᐃⲆΔ, ⵠ[Δⵠⵠᐃ], ⲆᐃᐃΔ, 56, 30, 1],
		[1, ⵠ[3], ᐃⵠΔⵠ, 56, 31, 1],
		[1, ⵠ[3], ⲆᐃᐃΔ, 46, 30, 1],
		[ΔⵠΔ, ⵠ[ΔⲆΔⲆ], ᐃⲆᐃΔ, 46, 31, 1],
		[ᐃᐃΔ, ⵠ[ⵠⵠΔⵠ], 1, 53, 33, 1],
		[ᐃⲆΔ, ⵠ[3], 2, 49, 33, 1],
		[Ⲇⵠᐃ, ⵠ[3], 2, 53, 32, 1],
		[1, ⵠ[ⲆᐃᐃΔ], 0, 55, 32, ⵠΔᐃ],
		[1, ⵠ[3], 0, 47, 32, Ⲇⵠᐃ],
		[1, "d", 1, 54, 35, 1],
		[1, ⵠ[176], 2, 35, 15, ᐃᐃᐃ],
		[ⵠⲆⲆ, ⵠ[176], ᐃᐃᐃⵠ, 36, 12, ΔⲆⲆ],
		[ᐃⲆΔ, ⵠ[176], ᐃᐃⲆⲆ, 67, 15, ⵠᐃⲆ],
		[Δⵠᐃ, ⵠ[3], ᐃⵠΔⲆ, 60, 13, Ⲇⵠᐃ],
		[1, ⵠ[3], ᐃᐃΔⵠ, 59, 13, 1],
		[1, ⵠ[ⲆᐃᐃΔ], ᐃᐃΔ, 58, 13, 1],
		[ⲆᐃΔ, ⵠ[3], 3, 62, 16, ⵠⲆⲆ],
		[1, ⵠ[ⲆΔᐃⲆ], ΔΔᐃ, 61, ⵠᐃᐃⲆⲆ, 1],
		[1, ⵠ[ⵠⵠΔⵠ], ⲆΔᐃⲆ, 60, 16, 1],
		[1, ⵠ[3], ⲆᐃᐃΔ, 63, 17, 1],
		[ᐃᐃΔ, ⵠ[3], ⲆⲆΔⲆ, 60, 19, ⲆᐃΔ],
		[ⵠΔᐃ, ⵠ[3], Ⲇⵠᐃ, 59, 19, 1],
		[1, ⵠ[ⲆᐃᐃΔ], ΔⲆΔⲆ, 58, ⵠⲆⵠᐃΔ, 1],
		[1, ⵠ[ⲆᐃᐃΔ], 2, 57, ⵠⵠΔᐃⲆ, 1],
		[1, ⵠ[3], ΔΔⲆᐃ, 56, 19, 1],
		[ⵠΔᐃ, ⵠ[ⲆᐃᐃΔ], ⵠⲆΔ, 55, ⵠΔⵠⲆⵠ, 1],
		[1, ⵠ[3], 2, 55, 17, ᐃᐃΔ],
		[ᐃⲆΔ, ⵠ[3], ᐃᐃΔⵠ, 63, 23, 1],
		[ⵠΔᐃ, ⵠ[3], 0, 62, 22, ᐃⲆΔ],
		[1, ⵠ[ᐃⵠΔⲆ], 2, 61, 22, 1],
		[1, ⵠ[ᐃⵠΔⵠ], 1, 60, 22, 1],
		[1, ⵠ[3], ⵠⲆᐃ, 59, 22, 1],
		[Δⵠᐃ, ⵠ[3], 2, 54, 26, 1],
		[1, ⵠ[3], 2, 55, 26, 1],
		[Ⲇⵠᐃ, ⵠ[3], 2, 56, 26, ΔⵠΔ],
		[ᐃᐃΔ, ⵠ[3], 1, 57, 26, 1],
		[1, ⵠ[ᐃⵠΔⵠ], ᐃⲆᐃᐃ, 58, 26, Ⲇⵠᐃ],
		[1, ⵠ[3], 2, 59, 27, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⲆᐃΔ], 2, 68, ⲆⲆᐃⲆⵠᐃⲆ, 1],
		[ⵠΔᐃ, ⵠ[3], 2, 68, 15, ᐃᐃΔ],
		[ᐃᐃΔ, ⵠ[3], ΔⲆⵠᐃ, 69, 15, ⵠΔᐃ],
		[ⵠΔᐃ, ⵠ[3], 3, 70, 15, 1],
		[ΔⵠΔ, ⵠ[ᐃⵠΔⲆ], 3, 70, 14, 1],
		[ΔⵠΔ, ⵠ[ᐃΔⵠⲆ], ⵠⲆⲆ, 69, 14, Ⲇⵠᐃ],
		[ⲆᐃΔ, ⵠ[ᐃⵠΔⲆ], 1, 69, ⲆΔⲆⲆⲆ, 1],
		[ⵠΔᐃ, ⵠ[3], 2, 71, 13, Ⲇⵠᐃ],
		[ⵠⲆⲆ, ⵠ[ⲆΔᐃⲆ], ᐃⲆᐃᐃ, 71, ΔⲆΔᐃⲆⵠⲆ, ᐃᐃΔ],
		[1, ⵠ[3], ⲆⵠⲆᐃ, 72, ᐃⵠⵠⵠΔ, Ⲇⵠᐃ],
		[ⵠΔᐃ, ⵠ[ᐃⲆᐃΔ], 3, 70, 8, ⵠⲆⲆ],
		[ᐃᐃΔ, ⵠ[3], ΔⲆΔⲆ, 71, ⲆΔⲆᐃᐃ, 1],
		[ᐃⲆΔ, ⵠ[ᐃΔⵠⲆ], ᐃᐃⲆⲆ, 72, 8, ⵠⲆⲆ],
		[1, ⵠ[3], Ⲇᐃⵠ, 73, 8, ᐃⲆΔ],
		[1, ⵠ[3], ᐃⲆᐃΔ, 74, 9, 1],
		[ΔⵠΔ, ⵠ[ᐃⲆᐃΔ], 3, 74, 8, ⲆᐃΔ],
		[1, ⵠ[ⵠⵠΔⵠ], ΔΔᐃ, 75, ⲆΔⲆᐃᐃ, ᐃⲆΔ],
		[Δⵠᐃ, ⵠ[3], 3, 76, 8, 1],
		[1, ⵠ[ᐃⲆᐃΔ], ⲆᐃᐃΔ, 75, 9, ⵠⲆⲆ],
		[ᐃᐃΔ, ⵠ[ΔΔᐃΔ], ᐃⵠΔᐃ, 75, ⲆΔⵠΔⵠ, 1],
		[Ⲇⵠᐃ, ⵠ[3], ᐃᐃᐃ, 76, ⲆΔⵠⵠΔ, 1],
		[1, ⵠ[3], ᐃᐃⲆ, 76, ᐃΔⲆⲆΔ, Ⲇⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[ᐃⵠΔⵠ], 3, 76, 15, 1],
		[ⵠΔᐃ, ⵠ[3], 3, 75, ᐃᐃⲆⲆⵠ, ⵠΔᐃ],
		[1, ⵠ[3], 2, 77, 11, 1],
		[ΔⵠΔ, ⵠ[ⲆᐃᐃΔ], 2, 77, 14, 1],
		[ᐃᐃΔ, ⵠ[ⲆΔᐃⲆ], ΔΔᐃΔ, 77, 12, 1],
		[ΔⵠΔ, ⵠ[ⲆΔᐃⲆ], ⲆⵠⲆᐃ, 77, ᐃⵠⵠΔⲆ, ᐃᐃΔ],
		[ⵠΔᐃ, ⵠ[ΔⲆΔⲆ], Δⵠⵠᐃ, 77, 15, ⵠⲆⲆ],
		[ΔⵠΔ, ⵠ[ᐃⵠΔⲆ], 0, 74, 18, 1],
		[1, ⵠ[3], ᐃᐃΔ, 75, 17, ⲆᐃΔ],
		[Δⵠᐃ, ⵠ[ⵠⵠΔⵠ], ⵠⵠⵠᐃ, 74, ⲆᐃⲆⲆⵠ, Δⵠᐃ],
		[1, ⵠ[3], 3, 73, ΔΔⵠⲆⲆ, ⵠΔᐃ],
		[ⵠⲆⲆ, ⵠ[ⲆᐃᐃΔ], ΔⲆⵠᐃ, 67, 23, ᐃᐃΔ],
		[ⲆᐃΔ, ⵠ[3], 0, 68, 23, 1],
		[Ⲇⵠᐃ, ⵠ[ⵠⵠΔⵠ], 0, 72, ⲆⵠⲆΔⲆ, ⵠΔᐃ],
		[ⵠΔᐃ, ⵠ[3], ⵠⵠⵠᐃ, 73, 20, ᐃⲆΔ],
		[1, ⵠ[ᐃΔⵠⲆ], 2, 74, 19, ⲆᐃΔ],
		[1, ⵠ[3], 2, 74, 36, Δⵠᐃ],
		[1, ⵠ[ⲆⵠⲆᐃ], ᐃⲆᐃᐃ, 77, 27, 1],
		[1, ⵠ[ΔΔᐃΔ], 2, 76, 26, ᐃⲆΔ],
		[ΔⵠΔ, ⵠ[3], 2, 75, 26, 1],
		[ⲆᐃΔ, ⵠ[ⲆⵠⲆᐃ], 0, 74, 26, ⵠⲆⲆ],
		[ᐃᐃΔ, ⵠ[3], ⵠⵠⵠᐃ, 75, 25, 1],
		[1, ⵠ[3], ⵠⵠⵠ, 76, 25, ⵠⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[3], ⲆᐃΔ, 77, 23, ⵠΔᐃ],
		[ΔⵠΔ, ⵠ[ΔⲆⵠᐃ], ᐃⲆᐃᐃ, 77, 16, Δⵠᐃ],
		[1, ⵠ[Δⵠⵠᐃ], 2, 76, ⵠΔΔΔΔ, 1],
		[Ⲇⵠᐃ, ⵠ[ⲆᐃᐃΔ], ⲆⲆΔⲆ, 76, 24, ᐃᐃΔ],
		[ΔⵠΔ, ⵠ[3], ⲆⲆΔⲆ, 77, 24, ΔⵠΔ],
		[1, ⵠ[Δⵠⵠᐃ], 2, 77, 25, 1],
		[1, ⵠ[3], 2, 77, 26, ᐃⲆΔ],
		[1, ⵠ[ΔⲆΔⲆ], 1, 75, 27, 1],
		[ᐃⲆΔ, ⵠ[ΔⲆΔⲆ], Δⵠⵠᐃ, 76, 27, ⲆᐃΔ],
		[Δⵠᐃ, ⵠ[ΔΔᐃΔ], 2, 67, 24, ᐃᐃΔ],
		[1, ⵠ[Δⵠⵠᐃ], ⵠⵠⵠᐃ, 66, 24, Ⲇⵠᐃ],
		[ⵠΔᐃ, ⵠ[3], 2, 73, 26, 1],
		[1, ⵠ[ᐃⵠΔⲆ], ᐃᐃⲆⲆ, 74, 27, 1],
		[1, ⵠ[ⲆᐃᐃΔ], 2, 74, 25, 1],
		[ᐃᐃΔ, ⵠ[ᐃⲆᐃΔ], ⲆⲆΔⲆ, 66, ᐃΔΔⵠᐃ, Δⵠᐃ],
		[Ⲇⵠᐃ, ⵠ[3], ⵠⵠⵠᐃ, 66, 20, Δⵠᐃ],
		[1, ⵠ[3], ⲆⲆΔⲆ, 66, 21, ᐃᐃΔ],
		[Ⲇⵠᐃ, ⵠ[3], ᐃᐃⲆⲆ, 67, ⵠᐃⵠⵠᐃ, 1],
		[ⵠⲆⲆ, ⵠ[3], 2, 67, 22, ΔⵠΔ],
		[Ⲇⵠᐃ, ⵠ[3], ⵠⲆᐃ, 77, 36, 1],
		[1, ⵠ[3], 0, 77, 32, Δⵠᐃ],
		[1, ⵠ[ⲆⵠⲆᐃ], 1, 75, 35, Ⲇⵠᐃ],
		[Δⵠᐃ, ⵠ[3], ᐃⲆᐃⵠ, 75, 36, 1],
		[1, ⵠ[3], ᐃᐃΔⵠ, 76, 36, Δⵠᐃ],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 77, 35, 1],
		[Ⲇⵠᐃ, ⵠ[3], 2, 77, 34, 1],
		[1, ⵠ[3], 2, 76, 35, Ⲇⵠᐃ],
		[ΔⵠΔ, ⵠ[ᐃⲆᐃΔ], 2, 77, 33, 1],
		[1, ⵠ[3], ΔΔⲆᐃ, 77, 31, 1],
		[1, ⵠ[ᐃⲆᐃΔ], ΔⲆⲆ, 77, 29, Ⲇⵠᐃ],
		[ΔⵠΔ, ⵠ[Δⵠⵠᐃ], ⵠᐃⲆ, 71, 32, Ⲇⵠᐃ],
		[1, ⵠ[3], 0, 76, 34, 1],
		[1, ⵠ[3], 2, 77, 30, 1],
		[ᐃⲆΔ, ⵠ[3], 2, 77, 28, ⲆᐃΔ],
		[1, ⵠ[3], 2, 76, 28, ᐃᐃΔ],
		[ⵠΔᐃ, ⵠ[3], ΔΔⲆᐃ, 75, 28, 1],
		[1, ⵠ[ⲆΔᐃⲆ], 2, 76, 29, ᐃᐃΔ],
		[1, ⵠ[ΔⲆⵠᐃ], ᐃᐃᐃⵠ, 76, 33, Δⵠᐃ],
		[ⵠⲆⲆ, ⵠ[ΔΔᐃΔ], ᐃᐃᐃⵠ, 70, 32, ⵠΔᐃ],
		[ⵠΔᐃ, ⵠ[ᐃⵠΔⵠ], ᐃᐃᐃⵠ, 69, 31, 1],
		[1, ⵠ[3], 0, 68, 31, 1],
		[ⵠΔᐃ, ⵠ[ᐃΔⵠⲆ], ⵠⵠⵠᐃ, 67, 31, 1],
		[ⲆᐃΔ, ⵠ[3], 2, 67, 30, ⲆᐃΔ],
		[ⲆᐃΔ, ⵠ[Δⵠⵠᐃ], ᐃᐃⲆⲆ, 69, 32, ΔⵠΔ],
		[Ⲇⵠᐃ, ⵠ[ᐃⵠΔᐃ], 1, 67, 32, ⲆᐃΔ],
		[1, ⵠ[ⲆΔᐃⲆ], ⲆⲆΔⲆ, 68, 32, 1],
		[1, ⵠ[3], 2, 66, 32, ᐃⲆΔ],
		[ⵠΔᐃ, ⵠ[ᐃⵠΔᐃ], ΔΔⲆᐃ, 66, 33, ⵠⲆⲆ],
		[ᐃⲆΔ, ⵠ[3], 2, 67, 33, ΔⵠΔ],
		[1, ⵠ[3], ᐃⲆᐃᐃ, 70, 33, 1],
		[1, ⵠ[ΔΔᐃΔ], 2, 69, 33, ᐃⲆΔ],
		[ⲆᐃΔ, ⵠ[3], ᐃⲆᐃⵠ, 68, 33, 1],
		[1, ⵠ[ᐃⵠΔⲆ], 0, 68, 34, 1],
		[Ⲇⵠᐃ, ⵠ[3], ⵠⲆⲆ, 66, 35, ⵠⲆⲆ],
		[1, ⵠ[ᐃΔⵠⲆ], 2, 67, 34, ᐃᐃΔ],
		[Δⵠᐃ, ⵠ[3], 2, 66, 34, 1],
		[1, ⵠ[3], 2, 65, 35, 1],
		[1, ⵠ[ⲆᐃᐃΔ], ᐃⲆᐃⵠ, 64, 36, 1],
		[ΔⵠΔ, ⵠ[ⵠⵠΔⵠ], 2, 65, 36, 1],
		[ⵠⲆⲆ, ⵠ[ⵠⵠΔⵠ], ᐃᐃᐃⵠ, 67, 35, 1],
		[Δⵠᐃ, ⵠ[ᐃⲆᐃΔ], 2, 66, 36, 1],
		[1, ⵠ[ᐃΔⵠⲆ], 2, 69, 34, 1],
		[1, ⵠ[ΔⲆⵠᐃ], ᐃⲆᐃⵠ, 68, 35, 1],
		[1, ⵠ[ⲆᐃᐃΔ], ᐃᐃⲆⲆ, 76, ΔⲆⲆΔⲆ, ⵠΔᐃ],
		[ᐃᐃΔ, ⵠ[3], 2, 77, 9, 1],
		[1, ⵠ[ΔⲆⵠᐃ], 2, 77, 8, 1],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 77, ΔⵠⵠᐃⲆ, 1],
		[ⵠΔᐃ, ⵠ[ΔⲆΔⲆ], 2, 78, 8, ⵠΔᐃ],
		[ⵠΔᐃ, ⵠ[3], 2, 78, 9, 1],
		[1, ⵠ[3], ᐃᐃᐃⵠ, 78, ᐃⵠᐃⵠⲆ, ᐃⲆΔ],
		[1, ⵠ[3], 2, 78, 11, ⵠΔᐃ],
		[1, ⵠ[3], 2, 78, 12, 1],
		[ⵠΔᐃ, ⵠ[3], ᐃⲆᐃⵠ, 78, ⲆⵠⵠᐃΔ, 1],
		[1, ⵠ[3], 0, 79, ⵠΔⵠⵠᐃ, ⵠⲆⲆ],
		[1, ⵠ[ᐃⵠΔᐃ], 1, 79, 11, ΔⵠΔ],
		[ⵠⲆⲆ, ⵠ[ᐃⵠΔⵠ], ⵠⵠΔⵠ, 79, 8, ΔⵠΔ],
		[ᐃᐃΔ, ⵠ[3], ⵠⵠΔⵠ, 79, 10, 1],
		[ⲆᐃΔ, ⵠ[ᐃⵠΔⵠ], 3, 79, ⲆᐃᐃⲆᐃ, ⵠΔᐃ],
		[ᐃᐃΔ, ⵠ[3], 3, 80, 8, 1],
		[ⲆᐃΔ, ⵠ[3], ᐃⲆΔ, 80, 10, ⲆᐃΔ],
		[ⵠΔᐃ, ⵠ[3], ⲆⲆΔⲆ, 80, ⵠⲆᐃᐃΔ, ΔⵠΔ],
		[1, ⵠ[ᐃΔⵠⲆ], ΔΔⲆᐃ, 80, 11, 1],
		[ΔⵠΔ, ⵠ[ᐃⵠΔᐃ], ᐃᐃΔⵠ, 81, 8, ΔⵠΔ],
		[ⲆᐃΔ, ⵠ[Δⵠⵠᐃ], ᐃⲆᐃⵠ, 81, 9, ᐃⲆΔ],
		[1, ⵠ[3], 2, 81, ΔⵠⵠᐃⲆ, 1],
		[1, ⵠ[ᐃΔⵠⲆ], 2, 78, 14, ΔⵠΔ],
		[Δⵠᐃ, ⵠ[Δⵠⵠᐃ], 2, 79, ᐃⵠⵠΔⲆ, Δⵠᐃ],
		[Δⵠᐃ, ⵠ[ΔⲆΔⲆ], ΔΔⲆᐃ, 78, 15, 1],
		[Δⵠᐃ, ⵠ[ᐃⵠΔᐃ], 2, 80, ΔⵠⲆⲆⲆ, 1],
		[ᐃᐃΔ, ⵠ[3], 0, 79, ⲆᐃⵠⲆΔ, ⵠⲆⲆ],
		[ΔⵠΔ, ⵠ[Δⵠⵠᐃ], Ⲇᐃⵠ, 82, 9, ⲆᐃΔ],
		[ᐃᐃΔ, ⵠ[ⵠⵠΔⵠ], ⵠⵠⵠᐃ, 82, ⲆΔⲆᐃᐃ, 1],
		[1, ⵠ[ΔΔᐃΔ], 2, 82, ⲆⲆⵠⲆⵠ, 1],
		[ⲆᐃΔ, ⵠ[ΔⲆⵠᐃ], ⵠⵠⵠᐃ, 81, ⲆᐃⵠᐃΔ, 1],
		[1, ⵠ[ⵠⵠΔⵠ], 3, 80, ⲆᐃΔⲆⵠ, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⲆᐃΔ], 1, 78, 30, 1],
		[1, ⵠ[ΔⲆⵠᐃ], ⲆᐃΔ, 78, 34, 1],
		[ⵠⲆⲆ, ⵠ[ⲆᐃᐃΔ], ⵠΔᐃ, 78, 27, ⵠⲆⲆ],
		[1, ⵠ[3], ⵠⵠⵠ, 78, 25, ᐃᐃΔ],
		[ⵠⲆⲆ, ⵠ[3], Ⲇᐃⵠ, 79, 29, ΔⵠΔ],
		[1, ⵠ[3], ΔΔᐃ, 79, 32, ⵠΔᐃ],
		[1, ⵠ[ⵠⵠΔⵠ], ᐃᐃⲆ, 79, 35, ᐃⲆΔ],
		[ⵠΔᐃ, ⵠ[3], ⵠⵠⵠᐃ, 78, 35, 1],
		[ᐃⲆΔ, ⵠ[ⵠⵠΔⵠ], ᐃⲆᐃᐃ, 78, 36, 1],
		[1, ⵠ[3], ᐃᐃᐃⵠ, 79, 34, 1],
		[1, ⵠ[ᐃΔⵠⲆ], 2, 78, 33, 1],
		[1, ⵠ[ᐃⵠΔⵠ], ᐃᐃⲆⲆ, 79, 33, 1],
		[ⵠΔᐃ, ⵠ[Δⵠⵠᐃ], ΔΔⲆᐃ, 78, 32, 1],
		[ᐃⲆΔ, ⵠ[ⲆⵠⲆᐃ], ᐃᐃᐃⵠ, 78, 31, 1],
		[ᐃᐃΔ, ⵠ[ᐃⵠΔⲆ], 2, 79, 31, 1],
		[1, ⵠ[3], 2, 79, 30, 1],
		[1, ⵠ[ⵠⵠΔⵠ], ᐃᐃᐃⵠ, 78, 29, 1],
		[1, ⵠ[ᐃⵠΔⲆ], ᐃⲆᐃⵠ, 78, 28, 1],
		[ᐃⲆΔ, ⵠ[3], ΔΔⲆᐃ, 79, 28, ⲆᐃΔ],
		[ᐃⲆΔ, ⵠ[3], 2, 79, 27, 1],
		[1, ⵠ[3], 2, 78, 26, ⲆᐃΔ],
		[ᐃⲆΔ, ⵠ[ⲆᐃᐃΔ], 2, 79, 26, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 78, 24, 1],
		[1, ⵠ[3], ᐃᐃᐃⵠ, 80, 34, ⲆᐃΔ],
		[ΔⵠΔ, ⵠ[ᐃⲆᐃΔ], ΔΔⲆᐃ, 80, 33, 1],
		[ⵠΔᐃ, ⵠ[ⲆⵠⲆᐃ], 2, 80, 31, 1],
		[Δⵠᐃ, ⵠ[3], ᐃᐃᐃⵠ, 80, 30, Ⲇⵠᐃ],
		[1, ⵠ[ⲆᐃᐃΔ], 2, 80, 32, 1],
		[1, ⵠ[3], ᐃᐃⲆⲆ, 80, 29, ⵠⲆⲆ],
		[Δⵠᐃ, ⵠ[3], 2, 80, 28, Ⲇⵠᐃ],
		[ⲆᐃΔ, ⵠ[3], 2, 80, 27, 1],
		[Ⲇⵠᐃ, ⵠ[ᐃⵠΔᐃ], ⵠⵠⵠ, 81, 30, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], ᐃᐃΔ, 81, 32, ᐃᐃΔ],
		[ⵠΔᐃ, ⵠ[3], ⵠⲆⲆ, 81, 28, 1],
		[ᐃⲆΔ, ⵠ[3], ΔΔⲆᐃ, 81, 29, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], ΔΔⲆᐃ, 81, 31, Ⲇⵠᐃ],
		[ⵠΔᐃ, ⵠ[ΔΔᐃΔ], 2, 81, 33, 1],
		[1, ⵠ[ΔⲆΔⲆ], 2, 82, 30, 1],
		[1, ⵠ[3], 2, 82, 31, 1],
		[ΔⵠΔ, ⵠ[ΔⲆⵠᐃ], 2, 82, 32, 1],
		[Ⲇⵠᐃ, ⵠ[3], ⵠⲆΔ, 37, 36, 1],
		[ΔⵠΔ, ⵠ[3], 2, 38, 36, ᐃⲆΔ],
		[1, ⵠ[ᐃⵠΔⵠ], ᐃᐃΔⵠ, 37, 35, Ⲇⵠᐃ],
		[1, ⵠ[3], ᐃⲆᐃᐃ, 36, 36, ΔⵠΔ],
		[1, ⵠ[3], 2, 34, 35, ᐃᐃΔ],
		[ⲆᐃΔ, ⵠ[ᐃⵠΔᐃ], 2, 35, 35, ᐃⲆΔ],
		[1, ⵠ[3], ᐃᐃΔⵠ, 36, 35, 1],
		[1, ⵠ[3], 0, 33, 34, 1],
		[1, ⵠ[3], 1, 35, 34, ⲆᐃΔ],
		[1, ⵠ[3], 2, 36, 34, ⵠΔᐃ],
		[ⲆᐃΔ, ⵠ[ᐃⵠΔⲆ], 2, 34, 34, 1],
		[1, ⵠ[3], ᐃᐃᐃⵠ, 36, 33, ΔⵠΔ],
		[ⵠΔᐃ, ⵠ[3], ᐃⲆᐃⵠ, 35, 33, 1],
		[Ⲇⵠᐃ, ⵠ[3], ⵠⵠⵠᐃ, 34, 33, 1],
		[Ⲇⵠᐃ, ⵠ[ΔⲆⵠᐃ], 2, 33, 33, ⵠⲆⲆ],
		[1, ⵠ[3], 2, 31, 32, 1],
		[1, ⵠ[ⲆΔᐃⲆ], ⵠΔᐃ, 36, 32, ΔⵠΔ],
		[ΔⵠΔ, ⵠ[ⲆΔᐃⲆ], 1, 32, 32, ᐃⲆΔ],
		[1, ⵠ[ⵠⵠΔⵠ], ᐃᐃᐃⵠ, 35, 32, Δⵠᐃ],
		[1, ⵠ[3], ⲆⲆΔⲆ, 33, 32, Ⲇⵠᐃ],
		[1, ⵠ[ⵠⵠΔⵠ], 2, 32, 33, 1],
		[1, ⵠ[ᐃⵠΔⲆ], ⵠⵠⵠᐃ, 33, 31, Ⲇⵠᐃ],
		[1, ⵠ[3], 2, 34, 31, 1],
		[1, ⵠ[3], 2, 35, 31, ⲆᐃΔ],
		[1, ⵠ[ⲆΔᐃⲆ], 0, 34, 32, Δⵠᐃ],
		[Δⵠᐃ, ⵠ[3], ⲆⲆΔⲆ, 35, 30, 1],
		[ⵠⲆⲆ, ⵠ[ᐃⵠΔⵠ], ᐃⲆΔ, 39, 23, ΔⵠΔ],
		[ΔⵠΔ, ⵠ[3], 3, 39, 22, 1],
		[1, ⵠ[3], ᐃⵠΔⲆ, 36, 24, ᐃⲆΔ],
		[ⵠⲆⲆ, ⵠ[3], ⲆᐃᐃΔ, 35, 24, ᐃᐃΔ],
		[ⵠΔᐃ, ⵠ[ᐃΔⵠⲆ], ᐃᐃᐃⵠ, 34, 23, 1],
		[1, ⵠ[3], 2, 35, 23, 1],
		[ᐃⲆΔ, ⵠ[ΔΔᐃΔ], 2, 36, 20, ΔⵠΔ],
		[ⵠΔᐃ, ⵠ[3], 2, 36, 21, ⵠⲆⲆ],
		[ΔⵠΔ, ⵠ[3], 2, 35, 22, Ⲇⵠᐃ],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 35, 16, ⲆᐃΔ],
		[ᐃⲆΔ, ⵠ[3], ⲆⲆΔⲆ, 34, ⲆⵠΔᐃΔ, ᐃᐃΔ],
		[1, ⵠ[ᐃⵠΔⵠ], ᐃᐃⲆⲆ, 33, 16, ⲆᐃΔ],
		[1, ⵠ[3], 0, 34, 17, Δⵠᐃ],
		[ᐃⲆΔ, ⵠ[ⲆⵠⲆᐃ], ⵠⵠⵠ, 32, 15, ᐃᐃΔ],
		[1, ⵠ[3], 2, 31, ⲆᐃⵠⲆΔ, ΔⵠΔ],
		[Ⲇⵠᐃ, ⵠ[ΔⲆⵠᐃ], ⲆⵠⲆᐃ, 30, 13, Ⲇⵠᐃ],
		[1, ⵠ[3], 1, 33, ⵠⲆⵠⲆᐃ, 1],
		[ⵠΔᐃ, ⵠ[3], 1, 31, 13, 1],
		[ᐃᐃΔ, ⵠ[3], 2, 32, 14, Δⵠᐃ],
		[1, ⵠ[3], ΔⲆⲆ, 31, ΔΔⲆᐃᐃ, 1],
		[Ⲇⵠᐃ, ⵠ[Δⵠⵠᐃ], 2, 32, 8, 1],
		[ΔⵠΔ, ⵠ[ᐃⵠΔᐃ], 2, 25, 13, 1],
		[1, ⵠ[3], ᐃᐃᐃ, 25, 12, 1],
		[1, ⵠ[ᐃⵠΔᐃ], ᐃⲆᐃⵠ, 25, 11, 1],
		[1, ⵠ[3], 3, 25, 10, ΔⵠΔ],
		[1, ⵠ[ⲆΔᐃⲆ], ⵠⵠⵠ, 25, 9, ⵠΔᐃ],
		[1, ⵠ[ⵠⵠΔⵠ], 2, 25, Ⲇᐃⵠⵠᐃ, 1],
		[1, ⵠ[3], 2, 26, 8, ⵠⲆⲆ],
		[1, ⵠ[3], 2, 27, Ⲇᐃⵠᐃᐃ, ⵠΔᐃ],
		[Ⲇⵠᐃ, ⵠ[3], ⲆⲆΔⲆ, 28, ⲆΔⲆᐃᐃ, ᐃⲆΔ],
		[1, ⵠ[ΔΔᐃΔ], ΔΔⲆᐃ, 29, ⲆᐃⲆΔⵠ, 1],
		[ΔⵠΔ, ⵠ[3], ⲆⲆΔⲆ, 30, Δᐃᐃⵠⵠ, 1],
		[ᐃᐃΔ, ⵠ[3], ᐃᐃⲆⲆ, 26, ᐃⲆᐃᐃⲆ, ΔⵠΔ],
		[1, ⵠ[3], 2, 27, ⵠⲆⵠΔⵠ, ⵠⲆⲆ],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 26, 10, ΔⵠΔ],
		[ΔⵠΔ, ⵠ[3], 1, 27, 10, 1],
		[1, ⵠ[ⲆΔᐃⲆ], 3, 28, ⵠΔⵠⵠᐃ, ᐃᐃΔ],
		[1, ⵠ[ᐃⲆᐃΔ], ⲆΔᐃⲆ, 25, ⵠⲆᐃᐃⵠ, 1],
		[1, ⵠ[3], 0, 25, ⲆΔΔΔⵠ, 1],
		[ⵠΔᐃ, ⵠ[ΔⲆⵠᐃ], 2, 26, ⵠΔᐃⵠⲆ, ΔⵠΔ],
		[ᐃⲆΔ, ⵠ[3], 3, 27, 16, 1],
		[ᐃⲆΔ, ⵠ[ΔΔᐃΔ], ᐃᐃᐃ, 28, ᐃⵠΔᐃΔΔᐃ, ᐃᐃΔ],
		[1, ⵠ[3], ⵠΔᐃ, 29, ⵠᐃⵠⵠᐃ, Δⵠᐃ],
		[ⵠΔᐃ, ⵠ[3], 2, 26, ⲆⲆᐃⲆⵠᐃⲆ, 1],
		[1, ⵠ[3], ΔΔⲆᐃ, 25, ΔᐃⲆⲆΔ, ⵠⲆⲆ],
		[ᐃⲆΔ, ⵠ[3], ⲆⲆΔⲆ, 27, ⲆᐃⲆⲆⵠ, 1],
		[ΔⵠΔ, ⵠ[ᐃⵠΔⵠ], 2, 26, ⲆⵠⵠⲆΔ, ⵠΔᐃ],
		[1, ⵠ[3], ⲆᐃΔ, 27, 18, Ⲇⵠᐃ],
		[1, ⵠ[ⲆⵠⲆᐃ], 2, 28, 18, 1],
		[1, ⵠ[ᐃⵠΔⲆ], ⲆⲆΔⲆ, 30, 19, 1],
		[1, ⵠ[3], ᐃᐃΔⵠ, 29, ᐃΔΔⵠᐃ, ⵠⲆⲆ],
		[1, ⵠ[ⵠⵠΔⵠ], 2, 24, 14, ᐃᐃΔ],
		[1, ⵠ[ΔΔᐃΔ], 2, 24, ᐃᐃΔᐃⲆ, 1],
		[1, ⵠ[3], ΔⲆⲆ, 23, 14, ⲆᐃΔ],
		[1, ⵠ[ⵠⵠΔⵠ], ᐃⲆᐃⵠ, 24, 10, ⲆᐃΔ],
		[1, ⵠ[3], ᐃᐃᐃⵠ, 24, ⲆᐃⵠᐃΔ, 1],
		[1, ⵠ[ᐃⲆᐃΔ], 2, 24, ΔⲆⵠΔᐃ, Ⲇⵠᐃ],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 24, 13, ⵠΔᐃ],
		[1, ⵠ[3], Ⲇⵠᐃ, 23, ΔⵠⵠᐃⲆ, ᐃᐃΔ],
		[1, ⵠ[ⵠⵠΔⵠ], Ⲇᐃⵠ, 22, 8, ᐃⲆΔ],
		[1, ⵠ[3], ᐃᐃᐃ, 22, 12, 1],
		[ᐃᐃΔ, ⵠ[3], ᐃⲆΔ, 23, 8, Ⲇⵠᐃ],
		[1, ⵠ[3], 2, 24, 8, ΔⵠΔ],
		[ⵠΔᐃ, ⵠ[ᐃⲆᐃΔ], 2, 24, ⵠΔⵠⵠᐃ, ᐃᐃΔ],
		[1, ⵠ[3], 2, 23, 9, ΔⵠΔ],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 22, 9, 1],
		[ΔⵠΔ, ⵠ[3], ⵠⵠⵠᐃ, 22, ⲆΔⵠΔⵠ, ᐃᐃΔ],
		[1, ⵠ[ⲆᐃᐃΔ], 2, 22, ⲆⲆΔⲆⲆ, 1],
		[ⵠΔᐃ, ⵠ[3], 2, 23, ⲆᐃⵠᐃΔ, ⲆᐃΔ],
		[ΔⵠΔ, ⵠ[3], 2, 23, 12, 1],
		[1, ⵠ[3], ᐃⲆᐃᐃ, 23, ᐃⵠⵠⵠΔ, 1],
		[1, ⵠ[3], 2, 22, ᐃⵠⵠΔⲆ, ⵠΔᐃ],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 21, 9, 1],
		[ⵠΔᐃ, ⵠ[3], 2, 21, ΔⵠΔⵠΔ, 1],
		[1, ⵠ[ΔΔᐃΔ], ᐃᐃΔⵠ, 29, 25, ⵠⲆⲆ],
		[ⵠⲆⲆ, ⵠ[ΔⲆΔⲆ], 2, 25, 24, 1],
		[Ⲇⵠᐃ, ⵠ[ᐃΔⵠⲆ], ⲆⲆΔⲆ, 26, 25, 1],
		[1, ⵠ[Δⵠⵠᐃ], 2, 27, 25, Ⲇⵠᐃ],
		[ᐃᐃΔ, ⵠ[ⲆⵠⲆᐃ], 0, 28, 25, 1],
		[ΔⵠΔ, ⵠ[ᐃⵠΔⵠ], 1, 25, 23, 1],
		[ᐃⲆΔ, ⵠ[ΔⲆΔⲆ], ΔΔⲆᐃ, 26, 24, ⲆᐃΔ],
		[ᐃⲆΔ, ⵠ[3], 0, 24, 25, 1],
		[ⵠⲆⲆ, ⵠ[Δⵠⵠᐃ], ΔⲆⵠᐃ, 23, 24, ⲆᐃΔ],
		[1, ⵠ[ⲆᐃᐃΔ], ⵠⵠΔⵠ, 24, 24, ΔⵠΔ],
		[Ⲇⵠᐃ, ⵠ[3], ⲆⵠⲆᐃ, 25, 25, ⵠⲆⲆ],
		[1, ⵠ[3], 3, 23, 25, 1],
		[1, ⵠ[ⲆⵠⲆᐃ], Δⵠᐃ, 22, 26, 1],
		[ᐃᐃΔ, ⵠ[ΔⲆⵠᐃ], 1, 26, 26, ⵠΔᐃ],
		[ᐃᐃΔ, ⵠ[ΔⲆⵠᐃ], Ⲇⵠᐃ, 29, 26, 1],
		[ᐃᐃΔ, ⵠ[3], ⵠⵠⵠᐃ, 23, 26, 1],
		[ⵠⲆⲆ, ⵠ[3], ⵠⵠⵠᐃ, 24, 26, 1],
		[ᐃᐃΔ, ⵠ[ᐃⲆᐃΔ], 2, 25, 26, ⵠΔᐃ],
		[1, ⵠ[ⵠⵠΔⵠ], ⲆⲆΔⲆ, 27, 26, 1],
		[ᐃⲆΔ, ⵠ[3], 2, 28, 26, 1],
		[1, ⵠ[3], ᐃⲆᐃᐃ, 30, 26, ᐃᐃΔ],
		[1, ⵠ[ᐃⵠΔⲆ], 2, 29, 27, 1],
		[1, ⵠ[3], 2, 28, 28, 1],
		[Δⵠᐃ, ⵠ[3], 1, 26, 29, 1],
		[1, ⵠ[3], ⵠⲆΔ, 28, 27, 1],
		[Δⵠᐃ, ⵠ[3], 2, 27, 28, Δⵠᐃ],
		[1, ⵠ[ΔΔᐃΔ], ᐃⲆᐃⵠ, 27, 27, ᐃᐃΔ],
		[1, ⵠ[3], ᐃᐃⲆⲆ, 26, 28, Ⲇⵠᐃ],
		[ΔⵠΔ, ⵠ[3], ΔΔⲆᐃ, 26, 27, ⵠⲆⲆ],
		[1, ⵠ[Δⵠⵠᐃ], 2, 25, 28, ΔⵠΔ],
		[ΔⵠΔ, ⵠ[3], 2, 25, 27, ΔⵠΔ],
		[Ⲇⵠᐃ, ⵠ[ΔⲆⵠᐃ], 2, 23, 27, 1],
		[ᐃⲆΔ, ⵠ[3], ᐃᐃⲆⲆ, 22, 27, 1],
		[1, ⵠ[ᐃⵠΔⲆ], 2, 24, 27, 1],
		[1, ⵠ[3], ΔⲆⲆ, 24, 28, ΔⵠΔ],
		[1, ⵠ[ᐃⵠΔⵠ], 0, 25, 32, 1],
		[ΔⵠΔ, ⵠ[ᐃⵠΔⲆ], 1, 24, 30, ⲆᐃΔ],
		[ⵠⲆⲆ, ⵠ[ᐃⵠΔⲆ], ᐃᐃⲆⲆ, 25, 31, 1],
		[ⵠΔᐃ, ⵠ[3], 2, 25, 30, Δⵠᐃ],
		[ᐃᐃΔ, ⵠ[ⲆΔᐃⲆ], ᐃᐃⲆⲆ, 25, 29, ⵠⲆⲆ],
		[Δⵠᐃ, ⵠ[3], ΔΔⲆᐃ, 24, 29, Δⵠᐃ],
		[ⲆᐃΔ, ⵠ[ᐃΔⵠⲆ], 2, 23, 29, 1],
		[ΔⵠΔ, ⵠ[ⲆⵠⲆᐃ], 2, 26, 33, 1],
		[1, ⵠ[3], 0, 26, 34, ᐃⲆΔ],
		[1, ⵠ[Δⵠⵠᐃ], ᐃⲆᐃⵠ, 27, 35, 1],
		[1, ⵠ[3], 2, 22, 28, 1],
		[Ⲇⵠᐃ, ⵠ[3], ᐃⲆᐃⵠ, 23, 28, ⲆᐃΔ],
		[ⲆᐃΔ, ⵠ[3], ᐃᐃᐃⵠ, 24, 31, ⵠⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[ΔⲆΔⲆ], ΔΔⲆᐃ, 24, 32, ⵠⲆⲆ],
		[ⵠⲆⲆ, ⵠ[ⲆΔᐃⲆ], 2, 25, 33, 1],
		[1, ⵠ[ᐃⵠΔⲆ], 2, 26, 35, 1],
		[1, ⵠ[3], 2, 24, 33, 1],
		[ΔⵠΔ, ⵠ[3], 2, 25, 34, ᐃᐃΔ],
		[ⲆᐃΔ, ⵠ[3], ᐃⲆΔ, 22, 29, 1],
		[1, ⵠ[ᐃⵠΔⲆ], ⵠⲆⲆ, 24, 34, 1],
		[1, ⵠ[3], 0, 23, 35, ⲆᐃΔ],
		[ΔⵠΔ, ⵠ[ᐃⵠΔᐃ], 2, 25, 35, 1],
		[1, ⵠ[ⲆᐃᐃΔ], ⲆⲆΔⲆ, 24, 35, 1],
		[ΔⵠΔ, ⵠ[3], 2, 23, 34, 1],
		[1, ⵠ[3], 2, 23, 33, ⲆᐃΔ],
		[1, ⵠ[ᐃⵠΔⵠ], ΔΔᐃ, 22, 33, Ⲇⵠᐃ],
		[1, ⵠ[3], 1, 23, 32, 1],
		[ⲆᐃΔ, ⵠ[ⲆᐃᐃΔ], 2, 22, 32, 1],
		[1, ⵠ[ᐃⵠΔⵠ], 2, 23, 31, 1],
		[ᐃᐃΔ, ⵠ[ᐃΔⵠⲆ], 2, 23, 30, ⲆᐃΔ],
		[Ⲇⵠᐃ, ⵠ[ⲆⵠⲆᐃ], 2, 22, 30, Δⵠᐃ],
		[Δⵠᐃ, ⵠ[ᐃⵠΔⵠ], 2, 22, 31, 1],
		[1, ⵠ[3], 1, 21, 31, 1],
		[1, ⵠ[3], 0, 21, 29, Ⲇⵠᐃ],
		[ⵠⲆⲆ, ⵠ[ΔⲆⵠᐃ], 2, 21, 30, ⲆᐃΔ],
		[ⵠΔᐃ, ⵠ[3], ᐃᐃⲆⲆ, 24, 36, 1],
		[1, ⵠ[ⲆΔᐃⲆ], 2, 26, 36, 1],
		[1, ⵠ[Δⵠⵠᐃ], ᐃᐃᐃⵠ, 25, 36, 1],
		[1, ⵠ[3], 2, 27, 36, 1],
		[1, ⵠ[ⲆᐃᐃΔ], ⲆⲆΔⲆ, 28, 36, ᐃᐃΔ],
		[1, "d", ᐃⲆᐃᐃ, 83, 65, 1],
		[1, "d", 2, ⲆΔⲆⲆⲆ, 67, 1],
		[1, "g", Ⲇᐃⵠ, 15, 17, Ⲇⵠᐃ],
		[ᐃᐃΔ, "s", 0, ᐃⲆᐃⲆⵠ, ⲆⵠⵠΔⲆ, Ⲇⵠᐃ],
		[1, "s", 0, 85, ⲆⲆΔⲆⲆ, 1],
		[Ⲇⵠᐃ, "f", 0, 41, 102, ⵠΔᐃ],
		[1, "f", 0, 42, 124, 1],
		[1, "f", 0, 64, 116, Ⲇⵠᐃ],
		[1, "f", ΔⲆⲆ, 74, 104, 1],
		[1, "f", 0, 70, 87, Δⵠᐃ],
		[1, "f", 0, 27, 96, Δⵠᐃ],
		[1, "f", 0, 22, 79, ⵠⲆⲆ],
		[1, "f", 0, 20, 117, 1],
		[ⵠΔᐃ, "f", 0, 30, 137, 1],
		[1, "f", ⵠⲆᐃ, 59, 146, Δⵠᐃ],
		[1, "f", 0, 52, 147, Δⵠᐃ],
		[1, "f", 0, ᐃΔΔⲆΔ, 149, 1],
		[1, "f", 0, 36, 146, ⵠⲆⲆ],
		[1, "f", 0, 62, 124, 1],
		[1, "g", 1, 34, 121, 1],
		[Δⵠᐃ, "g", 1, 52, 116, 1],
		[1, "g", 1, 78, 116, 1],
		[ⵠΔᐃ, "g", ⵠⲆⲆ, 71, 129, 1],
		[1, "s", ΔⲆⲆ, 53, ⵠⵠⲆᐃⲆ, ⵠⲆⲆ],
		[1, "s", 0, 73, 111, Δⵠᐃ],
		[ⵠΔᐃ, "s", 0, 77, 126, Δⵠᐃ],
		[1, "s", 0, 48, 90, ᐃᐃΔ],
		[Δⵠᐃ, "s", ΔⲆⲆ, Δᐃᐃⵠᐃ, 102, 1],
		[ⵠΔᐃ, "s", 0, ᐃⲆⲆⵠᐃ, 127, 1],
		[1, "s", ΔⲆⲆ, 35, 159, 1],
		[1, "s", 0, 65, 54, 1],
		[1, "s", 0, 44, 52, ⵠⲆⲆ],
		[1, "s", 0, 26, 51, ΔⵠΔ],
		[Δⵠᐃ, "f", ⵠⲆⲆ, 56, 136, ⵠΔᐃ],
		[ᐃᐃΔ, "f", 1, 41, 133, 1],
		[ᐃⲆΔ, "f", ᐃᐃΔ, 80, 120, ⵠΔᐃ],
		[Ⲇⵠᐃ, "f", 1, ⲆⵠΔᐃΔ, 117, Δⵠᐃ],
		[1, "f", 1, ⲆⵠⵠᐃΔ, 99, ⵠⲆⲆ],
		[ⲆᐃΔ, "f", 1, 17, 89, 1],
		[1, "f", Δⵠᐃ, 90, 98, ⵠⲆⲆ],
		[ᐃᐃΔ, "f", 1, 84, 95, ΔⵠΔ],
		[1, "f", 1, 16, 57, ᐃᐃΔ],
		[ⲆᐃΔ, "f", ⵠⲆⲆ, 77, 53, ⵠΔᐃ],
		[ᐃᐃΔ, "d", 1, 48, 35, 1],
		[ΔⵠΔ, ⵠ[77], Δᐃᐃⵠⵠ, 33, 13, ⵠⵠⵠ],
		[1, ⵠ[77], 8, 30, ⵠΔᐃᐃΔ, 0],
		[1, ⵠ[77], ⵠΔⵠⵠᐃ, 32, 30, 0],
		[Ⲇⵠᐃ, ⵠ[77], 10, 30, 25, ΔⲆⲆ],
		[1, ⵠ[77], ⵠⲆⵠⵠⲆ, 33, 21, ⵠⵠⵠ],
		[Δⵠᐃ, ⵠ[77], ⵠᐃⵠΔⲆ, 31, 34, ᐃᐃᐃ],
		[ⲆᐃΔ, ⵠ[77], Ⲇᐃⵠⵠᐃ, 67, 29, 0],
		[1, ⵠ[77], 9, 70, 22, ΔΔᐃ],
		[ⵠⲆⲆ, ⵠ[77], ⵠΔΔΔⵠ, 70, 16, ⵠⲆᐃ],
		[1, ⵠ[77], 10, 75, ⲆᐃⵠᐃΔ, 0],
		[1, ⵠ[77], Ⲇᐃⵠⵠᐃ, 68, 10, ΔΔᐃ],
		[1, ⵠ[77], Ⲇᐃⵠⵠᐃ, 75, 30, ΔΔᐃ],
		[1, ⵠ[77], 11, 71, 33, 0],
		[1, ⵠ[77], ⲆᐃⵠᐃΔ, 72, 25, 0],
		[1, ⵠ[77], 11, 64, 25, ΔΔᐃ],
		[ᐃⲆΔ, ⵠ[77], 11, 52, ⵠΔΔΔⵠ, 0],
		[Ⲇⵠᐃ, ⵠ[77], ⵠᐃⲆⵠᐃ, 31, ΔΔⵠⲆᐃ, 0],
		[1, ⵠ[77], 30, 29, ⲆᐃⵠⲆΔ, 0],
		[1, ⵠ[77], 30, 36, 15, ⵠⲆΔ],
		[ΔⵠΔ, ⵠ[77], 30, 34, 29, ⵠⲆΔ],
		[ⵠⲆⲆ, ⵠ[77], 30, 30, 29, ⵠⲆᐃ],
		[1, ⵠ[77], 30, 71, 29, 0],
		[ⵠΔᐃ, ⵠ[77], 28, 68, 25, 0],
		[ⲆᐃΔ, ⵠ[77], 28, 75, ᐃⵠᐃⵠᐃ, 0],
		[Ⲇⵠᐃ, ⵠ[77], 27, 67, Δᐃᐃⵠᐃ, 0],
		[1, ⵠ[77], 29, 72, 10, ⵠⵠⵠ],
		[1, ⵠ[77], 29, 75, 32, 0],
		[ΔⵠΔ, ⵠ[77], 29, 32, ⵠΔᐃⲆⵠ, ⵠⲆᐃ],
		[1, ⵠ[176], 1, 39, ⲆᐃᐃⲆᐃ, 0],
		[Ⲇⵠᐃ, ⵠ[176], ᐃⲆΔ, 34, ⵠⲆᐃᐃⵠ, ⵠⲆΔ],
		[ΔⵠΔ, ⵠ[176], 1, 74, 28, 0],
		[1, ⵠ[176], ᐃᐃⲆⲆ, 74, 29, Ⲇᐃⵠ],
		[1, ⵠ[176], ᐃᐃΔⵠ, 69, 30, ⵠⵠⵠ],
		[1, ⵠ[176], 2, 77, 22, 0],
		[1, ⵠ[176], 2, 74, 21, ⵠⲆΔ],
		[ⵠΔᐃ, ⵠ[176], 2, 76, ᐃⲆᐃⲆⵠ, ΔⲆⲆ],
		[1, ⵠ[176], ⲆᐃΔ, 78, 17, 0],
		[Δⵠᐃ, ⵠ[176], 1, 28, ᐃᐃⲆⵠᐃ, 0],
		[ⵠΔᐃ, ⵠ[176], 2, 27, 24, 0],
		[1, ⵠ[176], ΔΔⲆᐃ, 24, ⲆⵠⵠⲆΔ, ΔⲆⲆ],
		[ⵠⲆⲆ, ⵠ[176], ⲆⲆΔⲆ, 29, 21, 0],
		[1, ⵠ[176], 1, 27, 32, ⵠⵠⵠ],
		[1, ⵠ[176], 2, 30, 33, ⵠⲆΔ],
		[1, ⵠ[176], 1, 29, 28, 0],
		[1, ⵠ[176], ᐃⲆᐃⵠ, 28, 31, 0],
		[ΔⵠΔ, ⵠ[176], 2, ⲆᐃⲆⵠᐃ, 24, ᐃᐃᐃ],
		[1, ⵠ[176], ᐃⲆᐃⵠ, 20, 26, ⵠⲆΔ],
		[1, ⵠ[176], ᐃⲆᐃⵠ, 23, ΔᐃᐃΔΔ, 0],
		[1, ⵠ[176], ᐃᐃᐃⵠ, ⵠΔⲆⵠⵠ, 25, 0],
		[ΔⵠΔ, ⵠ[77], 33, 29, 22, 0],
		[ⲆᐃΔ, ⵠ[77], 34, 32, 25, ⵠⲆᐃ],
		[ᐃⲆΔ, ⵠ[77], 34, 30, ΔΔΔΔᐃ, ⵠⵠⵠ],
		[1, ⵠ[77], 33, 78, 18, 0],
		[ⵠⲆⲆ, ⵠ[77], 33, 73, 35, ΔⲆⲆ],
		[ᐃⲆΔ, ⵠ[77], 36, 72, 23, 0],
		[ⵠⲆⲆ, ⵠ[77], 35, 25, 18, ⵠⵠⵠ],
		[ⵠΔᐃ, "d", 1, 83, 41, 1],
		[1, "d", 1, 17, 40, 1],
		[ᐃᐃΔ, ⵠ[ΔΔᐃΔ], ᐃᐃᐃⵠ, 224, 104, 1],
		[ΔⵠΔ, ⵠ[3], 0, 224, 105, ⵠⲆⲆ],
		[1, ⵠ[Δⵠⵠᐃ], 3, 224, 106, 1],
		[ᐃᐃΔ, ⵠ[105], 3, 216, 128, Δⵠᐃ],
		[Δⵠᐃ, ⵠ[105], ΔⲆⲆ, 215, 126, ⲆᐃΔ],
		[1, "s", Ⲇᐃⵠ, 216, 130, Ⲇⵠᐃ],
		[ΔⵠΔ, "s", 1, 217, 129, 1],
		[1, "s", ⵠⲆᐃ, 218, 128, 1],
		[1, "s", 1, 217, 127, ⵠⲆⲆ],
		[1, "s", ΔⲆⲆ, 217, 126, 1],
		[ΔⵠΔ, "s", ⵠⲆⲆ, 217, 125, ⲆᐃΔ],
		[1, "s", 0, 216, 124, 1],
		[1, "s", 1, 215, 124, 1],
		[1, "s", 0, 214, 124, ᐃᐃΔ],
		[ⵠⲆⲆ, "s", 1, 213, 125, 1],
		[ᐃᐃΔ, "s", 0, 213, 126, 1],
		[1, ⵠ[267], ᐃⲆᐃᐃ, 217, 130, ⵠⵠⵠ],
		[ΔⵠΔ, ⵠ[267], ᐃᐃⲆⲆ, 212, 125, 0],
		[1, "p", Ⲇᐃⵠ, 214, 134, ⲆᐃΔ],
		[ᐃᐃΔ, "s", ⲆᐃΔ, 211, 126, 1],
		[ᐃᐃΔ, "b", 1, 45, 277, 0],
		[Δⵠᐃ, "b", 1, 50, 286, ⵠⲆᐃ],
		[ⲆᐃΔ, "b", ᐃⲆᐃⵠ, 51, 284, 0],
		[ⵠΔᐃ, "b", 1, 47, 287, ⵠⵠⵠ],
		[Δⵠᐃ, "b", 0, 39, 285, ΔΔᐃ],
		[1, "b", ⵠⵠΔⵠ, 40, 283, ΔΔᐃ],
		[1, "b", 0, 52, 283, 0],
		[ᐃᐃΔ, "b", 1, 51, 280, ⵠⲆΔ],
		[1, "g", 0, 45, 269, 1],
		[1, "p", ⵠⵠⵠ, 55, 281, 1],
		[ᐃᐃΔ, "b", ΔⵠΔ, Ⲇᐃⵠᐃ, 172, ᐃᐃᐃ],
		[1, "b", ΔΔⲆᐃ, 6, 172, 0],
		[1, "t", ⵠⵠᐃᐃ, 6, 171, 0],
		[ⵠΔᐃ, "t", 1, 5, 170, Ⲇᐃⵠ],
		[Δⵠᐃ, "t", 1, 5, 164, Ⲇᐃⵠ],
		[1, "t", 3, ⵠⵠⲆⵠᐃ, 164, 0],
		[Δⵠᐃ, "b", 0, ⵠⵠᐃᐃᐃ, 165, 0],
		[1, "t", ᐃⵠΔⵠ, ΔⲆⲆⵠ, 165, ᐃᐃⲆ],
		[1, "b", ᐃⲆᐃⵠ, 6, 166, ΔⲆⲆ],
		[ᐃⲆΔ, "t", 4, ΔⲆⵠⵠ, 166, ⵠⵠⵠ],
		[Ⲇⵠᐃ, "t", 4, ᐃⵠⵠⵠⲆ, 167, ᐃᐃⲆ],
		[1, "t", 2, 6, 168, 0],
		[Δⵠᐃ, "t", 0, ᐃⵠⵠⵠⲆ, 169, 0],
		[Δⵠᐃ, "t", ᐃⲆᐃⲆ, ᐃⵠⵠⵠⲆ, 170, ΔⲆⲆ],
		[ᐃᐃΔ, "t", 0, 5, 167, ΔΔᐃ],
		[1, "t", 2, 5, 169, 0],
		[ᐃⲆΔ, "b", 0, 5, 168, ⵠᐃⲆ],
		[1, "s", Ⲇⵠᐃ, 7, 153, 1],
		[1, "s", ⲆⲆΔⲆ, ᐃⲆᐃΔΔ, 151, ᐃⲆΔ],
		[ⲆᐃΔ, ⵠ[77], ᐃᐃᐃⲆ, ⲆⲆΔΔᐃ, 152, 0],
		[1, "t", ⲆᐃΔ, ⲆᐃⲆΔ, 154, 0],
		[1, "b", ᐃᐃᐃ, 6, 154, ⵠⲆᐃ],
		[ᐃⲆΔ, "t", ᐃⲆᐃⵠ, 6, 155, 0],
		[ᐃᐃΔ, "b", ΔΔⲆᐃ, 6, 156, 0],
		[ⵠΔᐃ, "t", ᐃᐃΔⵠ, ᐃⵠᐃⲆ, 157, ⵠⲆᐃ],
		[1, "t", 4, ΔⲆⲆⵠ, 155, 0],
		[1, "b", ⵠⲆΔ, 6, 157, ΔⲆⲆ],
		[1, "t", 1, ⲆⲆᐃᐃ, 156, 0],
		[1, "t", 5, ᐃⵠⵠⵠⲆ, 158, ⵠⲆᐃ],
		[1, "b", ⲆⲆΔⲆ, ΔΔⵠΔᐃ, 159, 0],
		[1, "b", 0, 6, 162, 0],
		[1, "t", ⵠᐃᐃΔ, Ⲇⵠⵠᐃⵠ, 163, 0],
		[1, "t", 4, 6, 161, 0],
		[ᐃᐃΔ, "b", ᐃᐃΔ, ΔΔⵠΔᐃ, 160, Ⲇᐃⵠ],
		[1, "b", ᐃᐃΔⵠ, 5, 163, ᐃᐃᐃ],
		[ⲆᐃΔ, "b", 2, 5, 158, 0],
		[1, "b", 2, ᐃᐃΔᐃ, 161, ΔΔᐃ],
		[1, "t", ᐃᐃΔ, 5, 162, ⵠⵠⵠ],
		[1, "t", 1, 5, 160, 0],
		[ⲆᐃΔ, "b", ΔⵠΔ, 85, 176, 0],
		[1, "b", ᐃᐃᐃⵠ, 83, 178, 0],
		[1, "s", ⵠⲆⲆ, 82, 177, ⲆᐃΔ],
		[ᐃⲆΔ, "b", ⵠⲆΔ, 76, 172, Ⲇᐃⵠ],
		[Ⲇⵠᐃ, "b", 3, 76, 174, Ⲇᐃⵠ],
		[ⵠΔᐃ, "t", ΔⲆΔⲆ, 73, 174, 0],
		[1, "t", Ⲇᐃⵠᐃ, 72, 175, 0],
		[1, "t", ⲆⵠΔΔ, 87, 173, 0],
		[1, ⵠ[77], ᐃᐃΔⵠ, 76, 175, ⵠᐃⲆ],
		[1, ⵠ[77], ⲆΔᐃⲆ, 77, 171, 0],
		[1, ⵠ[77], ᐃΔⵠⲆ, 86, 177, ΔⲆⲆ],
		[1, ⵠ[77], ᐃⲆᐃⵠ, 71, 175, ᐃᐃⲆ],
		[1, "s", 1, 70, 174, ΔⵠΔ],
		[ΔⵠΔ, "r", 48, 174, 0],
		[ⲆᐃΔ, "r", 49, 175, ᐃᐃⲆ],
		[ΔⵠΔ, "r", 50, 175, 0],
		[ⲆᐃΔ, "r", 51, 175, Ⲇᐃⵠ],
		[1, "r", 51, 174, ΔΔᐃ],
		[1, "r", 50, 174, ΔΔᐃ],
		[1, "r", 49, 174, 0],
		[1, "r", 52, 175, 0],
		[Δⵠᐃ, "r", 52, 176, 0],
		[ᐃⲆΔ, "r", 51, 176, 0],
		[1, "r", 50, 176, ⵠⲆᐃ],
		[ⵠⲆⲆ, "r", 49, 176, Ⲇᐃⵠ],
		[ⲆᐃΔ, "r", 48, 175, 0],
		[1, "r", 47, 175, ⵠⲆᐃ],
		[1, "r", 48, 176, 0],
		[1, "r", 69, 163, 0],
		[1, "r", 70, 163, 0],
		[1, "r", 71, 163, 0],
		[ⵠΔᐃ, "r", 73, 163, 0],
		[1, "r", 72, 163, 0],
		[1, "r", 73, 164, 0],
		[ⵠΔᐃ, "r", 72, 164, ΔⲆⲆ],
		[1, "r", 71, 164, 0],
		[Ⲇⵠᐃ, "r", 70, 164, 0],
		[ⵠⲆⲆ, "r", 69, 164, 0],
		[1, "r", 68, 164, ⵠⲆᐃ],
		[ᐃᐃΔ, "r", 68, 165, 0],
		[1, "r", 69, 165, ΔⲆⲆ],
		[ᐃⲆΔ, "r", 70, 165, ᐃᐃᐃ],
		[1, "r", 71, 165, ⵠᐃⲆ],
		[1, "r", 72, 165, ΔⲆⲆ],
		[1, "r", 74, 164, ΔΔᐃ],
		[1, "r", 73, 165, ⵠⲆᐃ],
		[ⲆᐃΔ, "r", 72, 166, 0],
		[1, "r", 71, 166, 0],
		[1, "r", 70, 166, ᐃᐃⲆ],
		[ⲆᐃΔ, "r", 74, 165, ᐃᐃᐃ],
		[1, "r", 24, 164, ⵠᐃⲆ],
		[1, "r", 25, 164, ⵠᐃⲆ],
		[Ⲇⵠᐃ, "r", 27, 164, Ⲇᐃⵠ],
		[1, "r", 26, 164, 0],
		[1, "r", 28, 165, 0],
		[1, "r", 26, 165, Ⲇᐃⵠ],
		[Δⵠᐃ, "r", 27, 165, ⵠᐃⲆ],
		[1, "r", 25, 165, ᐃᐃⲆ],
		[ᐃᐃΔ, "r", 24, 165, 0],
		[ᐃⲆΔ, "r", 23, 165, 0],
		[ΔⵠΔ, "r", 22, 165, 0],
		[ᐃⲆΔ, "r", 21, 165, ΔΔᐃ],
		[ᐃᐃΔ, "r", 21, 166, 0],
		[1, "r", 22, 166, 0],
		[ΔⵠΔ, "r", 23, 166, 0],
		[1, "r", 24, 166, ΔΔᐃ],
		[1, "r", 25, 166, ⵠᐃⲆ],
		[1, "r", 26, 166, ⵠⵠⵠ],
		[ⲆᐃΔ, "r", 27, 166, 0],
		[ⵠΔᐃ, "r", 28, 166, ᐃᐃⲆ],
		[1, "r", 28, 167, 0],
		[ΔⵠΔ, "r", 26, 167, 0],
		[1, "r", 25, 167, 0],
		[1, "r", 24, 167, 0],
		[ⵠⲆⲆ, "r", 23, 167, ᐃᐃⲆ],
		[1, "r", 22, 167, ⵠⲆᐃ],
		[1, "r", 27, 167, Ⲇᐃⵠ],
		[1, "r", 29, 166, 0],
		[1, "r", 29, 167, ⵠⵠⵠ],
		[ⵠⲆⲆ, "r", 28, 168, 0],
		[ΔⵠΔ, "r", 27, 168, ⵠᐃⲆ],
		[1, "r", 26, 168, ΔΔᐃ],
		[Ⲇⵠᐃ, "r", 25, 168, ΔΔᐃ],
		[1, "r", 24, 168, ⵠⲆΔ],
		[ᐃᐃΔ, "r", 23, 168, ⵠⲆΔ],
		[ᐃᐃΔ, "r", 27, 169, ⵠᐃⲆ],
		[ΔⵠΔ, "r", 26, 169, Ⲇᐃⵠ],
		[Ⲇⵠᐃ, "r", 25, 169, ΔⲆⲆ],
		[1, "r", 24, 169, ΔΔᐃ],
		[1, "r", 23, 169, 0],
		[1, "r", 22, 168, 0],
		[ⲆᐃΔ, "r", 21, 167, ᐃᐃⲆ],
		[ⵠΔᐃ, "s", 1, 52, 174, Δⵠᐃ],
		[ΔⵠΔ, "t", ⲆΔᐃⲆ, 50, 177, 0],
		[ΔⵠΔ, "t", 4, 49, 177, ᐃᐃᐃ],
		[ᐃⲆΔ, "b", 0, 47, 174, ᐃᐃⲆ],
		[ⵠⲆⲆ, "b", ⵠⵠⵠ, 69, 166, 0],
		[1, "t", ᐃⲆᐃᐃ, 68, 166, ᐃᐃⲆ],
		[ⵠΔᐃ, "t", ⲆⲆᐃᐃ, 74, 163, 0],
		[ⵠΔᐃ, "t", ΔⵠΔ, 73, 162, 0],
		[1, "s", ⵠⲆΔ, 73, 166, 1],
		[1, "s", ΔΔⲆᐃ, 76, 165, 1],
		[1, "g", ᐃᐃᐃⵠ, 59, 175, 1],
		[ᐃᐃΔ, "p", 0, 78, 168, ⲆᐃΔ],
		[1, "p", 0, 61, 162, 1],
		[1, "p", 0, 42, 170, 1],
		[1, "p", ᐃᐃᐃ, ⲆᐃⲆⵠᐃ, 174, 1],
		[1, "p", 0, ⲆⲆⲆᐃΔ, 160, 1],
		[1, "b", ᐃᐃΔ, 23, 164, 0],
		[1, "b", 1, 28, 169, 0],
		[1, "b", 2, 29, 168, 0],
		[ⲆᐃΔ, "b", 2, ΔᐃⲆⲆΔ, 170, 0],
		[1, "t", 1, 15, 171, 0],
		[1, "t", 5, ⲆⵠⵠᐃΔ, 175, ᐃᐃᐃ],
		[1, "t", ⲆⵠΔΔ, 19, 166, ⵠⵠⵠ],
		[1, "t", 5, 26, 163, ⵠⲆΔ],
		[1, "s", ΔⵠΔ, 29, 165, ⲆᐃΔ],
		[1, "t", ᐃᐃᐃⲆ, ᐃⵠΔⲆΔ, 167, Ⲇᐃⵠ],
		[1, "t", ⵠᐃⲆ, 29, 176, ΔⲆⲆ],
		[ᐃⲆΔ, "b", ⵠⵠⵠᐃ, 30, 175, Ⲇᐃⵠ],
		[1, "t", 2, 24, 177, 0],
		[1, "b", 1, 37, 174, ⵠᐃⲆ],
		[1, "b", 0, 35, 172, 0],
		[ᐃⲆΔ, "b", 3, 37, 170, ⵠᐃⲆ],
		[1, "t", ΔⵠⵠⲆ, 38, 169, 0],
		[Δⵠᐃ, "t", ⵠᐃᐃΔ, 34, 173, ᐃᐃⲆ],
		[Δⵠᐃ, "t", 5, 38, 175, ΔΔᐃ],
		[Δⵠᐃ, "b", ΔΔⲆᐃ, 39, 173, Ⲇᐃⵠ],
		[1, "t", 3, 37, 176, ΔΔᐃ],
		[1, "t", ⵠᐃΔΔ, 30, 168, 0],
		[ᐃᐃΔ, "s", 2, 35, 176, 1],
		[1, "s", 1, 41, 175, Δⵠᐃ],
		[1, "b", ᐃᐃᐃⵠ, 53, 176, 0],
		[1, "t", ΔⵠΔᐃ, 55, 173, 0],
		[ᐃᐃΔ, "t", 5, 45, 170, 0],
		[1, "b", ᐃⲆΔ, 53, 162, ᐃᐃⲆ],
		[Ⲇⵠᐃ, "b", 0, 50, 164, 0],
		[1, "t", ⵠⵠⵠᐃ, 54, 163, ΔΔᐃ],
		[1, "t", 3, 49, 165, Ⲇᐃⵠ],
		[1, "t", ⵠᐃΔⲆ, 48, 160, 0],
		[ΔⵠΔ, "t", 4, 57, 164, 0],
		[Ⲇⵠᐃ, "t", 4, 66, 162, 0],
		[1, "b", ⲆᐃΔ, 86, 161, 0],
		[ΔⵠΔ, "b", ᐃᐃⲆⲆ, 81, 163, ⵠⵠⵠ],
		[1, "t", ⲆⵠⲆᐃ, 85, 162, 0],
		[1, "t", 5, 81, 162, ΔΔᐃ],
		[1, "t", ᐃⵠᐃⲆ, 88, 163, 0],
		[1, "t", ⲆᐃΔ, 84, 166, 0],
		[1, "t", 5, 72, 160, ⵠⲆᐃ],
		[1, "t", ᐃᐃᐃⲆ, 70, 170, ⵠⲆΔ],
		[ⵠⲆⲆ, "s", 1, 57, 162, 1],
		[1, "b", ᐃᐃΔ, 39, 161, ⵠᐃⲆ],
		[1, "b", 0, 34, 164, 0],
		[1, "b", 2, 54, 164, 0],
		[1, "t", ⵠⲆⲆ, 59, 169, ΔΔᐃ],
		[Δⵠᐃ, "t", ⵠⵠΔⵠ, 60, 170, 0],
		[ⵠⲆⲆ, "t", ᐃΔᐃΔ, 63, 169, 0],
		[1, "t", 4, 63, 174, 0],
		[1, "t", 1, 62, 175, 0],
		[1, "t", 5, 40, 162, 0],
		[ⲆᐃΔ, "t", 1, 63, 180, 0],
		[ⵠⲆⲆ, "t", 2, 64, 179, 0],
		[Ⲇⵠᐃ, "t", 2, 35, 165, 0],
		[ᐃⲆΔ, "s", ⲆᐃΔ, 63, 173, ᐃⲆΔ],
		[ⵠⲆⲆ, "s", ⲆⲆΔⲆ, 40, 165, 1],
		[1, "b", 0, 46, 169, Ⲇᐃⵠ],
		[1, ⵠ[77], 22, 74, 168, 0],
		[1, ⵠ[77], 22, 86, 168, ΔⲆⲆ],
		[1, ⵠ[77], 22, 83, 175, ⵠⲆᐃ],
		[1, ⵠ[77], 22, 78, 175, ΔΔᐃ],
		[ⲆᐃΔ, ⵠ[77], ᐃΔΔⵠᐃ, 72, 176, 0],
		[ᐃⲆΔ, ⵠ[77], 19, 68, 168, 0],
		[1, ⵠ[77], 19, 65, 163, 0],
		[ⵠΔᐃ, ⵠ[77], Δᐃⵠⵠⵠ, 75, 162, ⵠⲆΔ],
		[1, ⵠ[77], ⵠⲆⵠᐃΔ, 80, 162, ⵠⲆΔ],
		[1, ⵠ[77], ⵠΔⵠᐃⵠ, 88, 159, 0],
		[ⲆᐃΔ, ⵠ[77], 19, 87, 164, ⵠⵠⵠ],
		[1, ⵠ[77], ᐃᐃⲆⵠᐃ, 61, 177, 0],
		[1, ⵠ[77], Δᐃᐃⵠᐃ, 59, 172, ΔⲆⲆ],
		[1, ⵠ[77], Δᐃⵠⵠⵠ, 59, 167, Ⲇᐃⵠ],
		[1, ⵠ[77], 19, 53, 165, 0],
		[ᐃᐃΔ, ⵠ[77], 19, 56, 163, ⵠⲆΔ],
		[Δⵠᐃ, ⵠ[77], 19, 51, 161, 0],
		[ⵠΔᐃ, ⵠ[77], 19, 48, 167, 0],
		[ⵠⲆⲆ, ⵠ[77], 19, 47, 170, ⵠᐃⲆ],
		[1, ⵠ[77], 19, 41, 163, ⵠⲆᐃ],
		[1, ⵠ[77], 19, 37, 161, ΔⲆⲆ],
		[1, ⵠ[77], 19, 36, 166, 0],
		[Δⵠᐃ, ⵠ[77], ᐃΔΔⵠᐃ, 36, 171, 0],
		[ⲆᐃΔ, ⵠ[77], 19, 34, 174, 0],
		[1, ⵠ[77], ⵠⵠΔᐃⲆ, 40, 172, ⵠⲆᐃ],
		[Δⵠᐃ, ⵠ[77], ⵠⵠΔᐃⲆ, 38, 177, 0],
		[1, ⵠ[77], ⵠⲆⵠᐃΔ, 42, 176, ΔⲆⲆ],
		[1, ⵠ[77], 19, 53, 178, Ⲇᐃⵠ],
		[ᐃᐃΔ, ⵠ[77], ΔΔⵠⲆⲆ, 53, 172, ⵠⵠⵠ],
		[Δⵠᐃ, ⵠ[77], ᐃΔΔⵠᐃ, 64, 181, ⵠⵠⵠ],
		[1, ⵠ[77], ᐃᐃⲆⵠᐃ, 64, 175, ΔΔᐃ],
		[1, ⵠ[77], Δᐃⵠⵠⵠ, 79, 172, 0],
		[ⲆᐃΔ, ⵠ[77], 19, 30, 170, 0],
		[ⵠⲆⲆ, ⵠ[77], ⵠⵠΔᐃⲆ, ⲆⵠⵠΔᐃ, 168, 0],
		[ᐃᐃΔ, ⵠ[77], 19, ⲆᐃⵠⲆΔ, 173, ΔΔᐃ],
		[ⵠΔᐃ, ⵠ[77], ΔΔⵠⲆⲆ, 12, 162, ΔΔᐃ],
		[1, ⵠ[77], ᐃΔΔⵠᐃ, 9, 167, 0],
		[1, ⵠ[77], Δᐃⵠⵠⵠ, 20, 161, 0],
		[ᐃᐃΔ, ⵠ[77], 19, 27, 162, ⵠⲆᐃ],
		[1, ⵠ[77], 19, 83, 195, 0],
		[ᐃᐃΔ, ⵠ[77], ⲆⲆΔⲆ, 85, 163, Ⲇᐃⵠ],
		[Δⵠᐃ, ⵠ[77], 2, 80, 164, 0],
		[1, ⵠ[77], ᐃᐃᐃⵠ, 84, 169, 0],
		[ⲆᐃΔ, ⵠ[77], ᐃᐃΔⵠ, 55, 165, ⵠᐃⲆ],
		[ⵠⲆⲆ, ⵠ[77], ᐃⵠΔⵠ, 46, 163, ᐃᐃⲆ],
		[1, ⵠ[77], ᐃⲆᐃᐃ, 66, 169, Ⲇᐃⵠ],
		[ᐃⲆΔ, ⵠ[77], 0, 63, 175, ΔⲆⲆ],
		[ⵠⲆⲆ, ⵠ[77], ᐃᐃⲆ, 34, 164, ᐃᐃᐃ],
		[ᐃᐃΔ, ⵠ[77], Ⲇᐃⵠ, ΔΔⵠᐃᐃ, 160, 0],
		[1, ⵠ[77], ΔΔⲆᐃ, 40, 160, 0],
		[1, ⵠ[77], ᐃᐃᐃⵠ, 53, 160, ᐃᐃᐃ],
		[1, ⵠ[77], ⲆⲆΔⲆ, 14, 170, ⵠⵠⵠ],
		[1, ⵠ[77], ᐃᐃΔⵠ, 19, 175, 0],
		[1, ⵠ[77], 2, 23, 176, ⵠⲆᐃ],
		[1, ⵠ[77], 5, 60, 147, 0],
		[1, ⵠ[77], 33, 59, 160, ᐃᐃⲆ],
		[ⵠΔᐃ, ⵠ[77], 33, 85, 157, 0],
		[ᐃᐃΔ, ⵠ[77], 33, 29, 143, ⵠᐃⲆ],
		[1, ⵠ[77], 33, 62, 140, ΔΔᐃ],
		[1, ⵠ[77], 33, 43, 127, 0],
		[Δⵠᐃ, ⵠ[77], 33, ⵠᐃⵠⵠᐃ, 129, ⵠⲆᐃ],
		[1, ⵠ[77], 33, 50, 134, 0],
		[1, ⵠ[77], 33, 79, 127, 0],
		[ᐃᐃΔ, ⵠ[77], 33, 89, 139, ᐃᐃᐃ],
		[1, "b", ⵠⲆⲆ, 44, 156, ᐃᐃᐃ],
		[1, "t", 2, 45, 157, 0],
		[ᐃᐃΔ, "b", 0, 75, 156, 0],
		[1, "t", 3, 76, 157, ΔⲆⲆ],
		[1, "t", ᐃᐃΔᐃ, 62, 157, 0],
		[1, "t", 5, 79, 156, ΔΔᐃ],
		[1, "t", ΔⵠΔᐃ, 41, 156, 0],
		[1, "b", 1, 28, 156, 0],
		[Δⵠᐃ, "t", ᐃᐃᐃⵠ, 27, 157, 0],
		[1, "t", ᐃΔᐃΔ, 21, 156, Ⲇᐃⵠ],
		[1, "t", 4, 56, 159, ᐃᐃᐃ],
		[1, "f", Ⲇⵠᐃ, 94, 153, ⲆᐃΔ],
		[ⲆᐃΔ, "f", 2, 93, 153, 1],
		[ᐃⲆΔ, "f", 2, 99, 153, ⵠⲆⲆ],
		[1, "f", 1, 98, 153, Δⵠᐃ],
		[ⲆᐃΔ, "f", 0, 97, 153, ᐃⲆΔ],
		[ΔⵠΔ, "f", 1, 96, 153, 1],
		[ᐃᐃΔ, "s", 1, 7, 149, Ⲇⵠᐃ],
		[1, ⵠ[77], ⵠᐃᐃΔ, 7, 150, 0],
		[1, "b", ᐃⵠΔᐃ, 43, 281, 0],
		[1, ⵠ[77], 50, 24, 39, 0],
		[ΔⵠΔ, ⵠ[77], 50, 21, 39, ⵠⲆᐃ],
		[1, ⵠ[77], 50, 22, 43, Ⲇᐃⵠ],
		[ⵠⲆⲆ, ⵠ[77], 50, ⵠⲆⵠⲆᐃ, 34, ⵠᐃⲆ],
		[Ⲇⵠᐃ, ⵠ[77], 50, 18, 26, ᐃᐃⲆ],
		[ᐃⲆΔ, ⵠ[77], 50, 44, 42, 0],
		[1, ⵠ[77], 50, 57, 39, ΔⲆⲆ],
		[ᐃⲆΔ, ⵠ[77], 50, 62, 43, ΔΔᐃ],
		[ΔⵠΔ, ⵠ[77], 50, 77, 44, Ⲇᐃⵠ],
		[1, ⵠ[77], 50, 71, 41, ⵠⲆΔ],
		[1, ⵠ[77], 50, 55, 39, ᐃᐃⲆ],
		[1, ⵠ[77], 50, 22, 39, 0],
		[1, ⵠ[77], 50, 20, 41, ᐃᐃⲆ],
		[1, ⵠ[77], 50, 18, 21, 0],
		[1, ⵠ[77], 50, 15, 21, ⵠᐃⲆ],
		[1, ⵠ[77], 50, 18, Δᐃᐃⵠᐃ, 0],
		[Δⵠᐃ, ⵠ[77], 50, 17, ᐃΔΔⲆᐃⵠᐃ, 0],
		[ⲆᐃΔ, ⵠ[77], 50, ⵠᐃⵠⵠᐃ, 10, ΔΔᐃ],
		[1, ⵠ[77], 50, 18, 9, 0],
		[Δⵠᐃ, ⵠ[77], 50, 52, 41, ⵠⲆΔ],
		[1, ⵠ[77], 50, 82, 39, ⵠⲆΔ],
		[Δⵠᐃ, ⵠ[77], 50, 86, 38, ⵠⲆΔ],
		[1, ⵠ[77], 50, 84, 31, 0],
		[ᐃⲆΔ, ⵠ[77], 50, 86, 30, ΔⲆⲆ],
		[ᐃⲆΔ, ⵠ[77], 50, 84, 26, ⵠⲆᐃ],
		[1, ⵠ[77], 50, 86, 23, ᐃᐃⲆ],
		[ⲆᐃΔ, ⵠ[77], 50, 86, 14, 0],
		[1, ⵠ[77], 50, 29, 42, ⵠⲆᐃ],
		[Ⲇⵠᐃ, ⵠ[77], ΔⲆⲆΔⲆ, 74, 37, 0],
		[ⵠⲆⲆ, ⵠ[77], ⵠΔᐃᐃΔ, 76, 22, ᐃᐃⲆ],
		[1, ⵠ[77], ⲆΔⵠⵠΔ, 79, 24, 0],
		[1, ⵠ[77], 11, 77, ⲆᐃⲆⲆⵠ, ⵠⲆΔ],
		[1, ⵠ[77], 36, 81, 25, Ⲇᐃⵠ],
		[1, ⵠ[77], 36, 80, 36, ⵠⲆΔ],
		[ⲆᐃΔ, ⵠ[77], 36, 21, 36, 0],
		[1, ⵠ[77], 28, 23, 22, ⵠⵠⵠ],
		[Ⲇⵠᐃ, ⵠ[77], 28, 27, 31, 0],
		[1, ⵠ[77], 28, 69, 36, ⵠⲆΔ],
		[1, ⵠ[77], 28, 80, 20, 0],
		[1, ⵠ[77], 51, 24, 155, ⵠⲆΔ],
		[ⵠΔᐃ, ⵠ[77], 51, 7, 154, 0],
		[ⵠⲆⲆ, ⵠ[77], 51, 11, 154, ᐃᐃᐃ],
		[ⲆᐃΔ, ⵠ[77], 51, ⵠᐃⵠΔᐃ, 156, ᐃᐃᐃ],
		[1, ⵠ[77], 51, ᐃΔⲆⲆΔ, 154, ⵠⵠⵠ],
		[ᐃⲆΔ, ⵠ[77], 51, ᐃᐃΔΔΔ, 154, ⵠᐃⲆ],
		[1, ⵠ[77], 51, 23, 154, 0],
		[ⵠΔᐃ, ⵠ[77], 51, 18, 157, 0],
		[Δⵠᐃ, ⵠ[77], 51, 31, 154, ⵠⲆΔ],
		[1, ⵠ[77], 51, 32, 157, 0],
		[1, ⵠ[77], 51, 86, 154, 0],
		[1, ⵠ[77], 51, 88, 156, 0],
		[Δⵠᐃ, ⵠ[77], 51, 82, 154, 0],
		[1, ⵠ[77], 51, 80, 154, 0],
		[ᐃᐃΔ, ⵠ[77], 51, 77, 154, Ⲇᐃⵠ],
		[ⲆᐃΔ, ⵠ[77], 51, 74, 154, ᐃᐃⲆ],
		[ⵠΔᐃ, ⵠ[77], 51, 71, 154, 0],
		[1, ⵠ[77], 51, 67, 154, 0],
		[Ⲇⵠᐃ, ⵠ[77], 51, 60, 154, 0],
		[Δⵠᐃ, ⵠ[77], 51, 57, 154, ⵠⲆΔ],
		[1, ⵠ[77], 51, 65, 154, ⵠⲆΔ],
		[1, ⵠ[77], 51, 68, 156, ΔⲆⲆ],
		[1, ⵠ[77], 51, 59, 156, 0],
		[1, ⵠ[77], 51, 55, 154, 0],
		[ⲆᐃΔ, ⵠ[77], 51, 54, 154, 0],
		[Δⵠᐃ, ⵠ[77], 51, 52, 154, ᐃᐃⲆ],
		[ᐃᐃΔ, ⵠ[77], 51, 55, 155, 0],
		[1, ⵠ[77], 51, 54, 157, 0],
		[ⵠⲆⲆ, ⵠ[77], 51, 49, 154, ⵠⲆΔ],
		[ⲆᐃΔ, ⵠ[77], 51, 46, 154, ᐃᐃⲆ],
		[Ⲇⵠᐃ, ⵠ[77], 51, 44, 154, 0],
		[ᐃⲆΔ, ⵠ[77], 51, 43, 154, ᐃᐃᐃ],
		[1, ⵠ[77], 51, 41, 154, ⵠⵠⵠ],
		[1, ⵠ[77], 51, 38, 154, ⵠⵠⵠ],
		[ΔⵠΔ, ⵠ[77], 51, 39, 156, 0],
		[ΔⵠΔ, ⵠ[77], 51, 34, 154, ᐃᐃⲆ],
		[ⵠⲆⲆ, ⵠ[77], ΔⲆⲆⵠ, 19, 142, 0],
		[1, ⵠ[77], ᐃⵠᐃⲆ, 37, 147, 0],
		[ᐃⲆΔ, ⵠ[77], ⲆΔᐃⲆᐃ, 53, 147, ⵠⵠⵠ],
		[1, ⵠ[77], ⵠⲆⲆᐃᐃ, 69, 150, 0],
		[1, ⵠ[77], 4, 94, 148, 0],
		[1, ⵠ[77], 4, 66, 147, ᐃᐃᐃ],
		[1, ⵠ[77], ᐃⲆᐃⲆ, ⲆΔⵠⵠΔ, 145, ᐃᐃⲆ],
		[1, ⵠ[77], 4, 28, 137, 0],
		[1, ⵠ[77], ΔⵠⵠⲆ, 15, 137, ᐃᐃᐃ],
		[1, ⵠ[77], ⵠⲆⲆⵠ, 48, 134, 0],
		[ⵠΔᐃ, ⵠ[77], ᐃᐃᐃⲆ, 67, 135, 0],
		[1, ⵠ[77], 34, 84, 155, 0],
		[Ⲇⵠᐃ, ⵠ[77], 35, 70, 156, ᐃᐃⲆ],
		[ᐃᐃΔ, ⵠ[77], 35, 51, 156, 0],
		[1, ⵠ[77], 35, 56, 157, 0],
		[1, ⵠ[77], 35, 65, 159, Ⲇᐃⵠ],
		[ⲆᐃΔ, ⵠ[77], 35, 23, 156, Ⲇᐃⵠ],
		[1, ⵠ[77], 35, ᐃⵠᐃⵠᐃ, 155, 0],
		[Ⲇⵠᐃ, ⵠ[77], 35, ΔΔⲆᐃᐃ, 155, 0],
		[1, ⵠ[77], 33, 13, 155, ᐃᐃⲆ],
		[ⵠⲆⲆ, ⵠ[77], 33, 33, 158, 0],
		[ᐃᐃΔ, ⵠ[77], 36, 78, 155, 0],
		[Ⲇⵠᐃ, ⵠ[77], 36, 87, 157, ⵠⵠⵠ],
		[ⵠⲆⲆ, ⵠ[176], 1, 73, 36, 0],
		[ⵠΔᐃ, ⵠ[176], 1, 80, 24, ⵠⲆΔ],
		[1, ⵠ[176], ᐃᐃⲆⲆ, 67, 36, Ⲇᐃⵠ],
		[ⵠΔᐃ, ⵠ[176], 2, 45, 36, ΔΔᐃ],
		[ΔⵠΔ, ⵠ[176], 2, 53, 34, ⵠⲆᐃ],
		[1, ⵠ[176], Δⵠᐃ, 51, 35, Ⲇᐃⵠ],
		[ᐃᐃΔ, ⵠ[176], 1, 58, 35, ΔⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[176], 1, 33, 35, Ⲇᐃⵠ],
		[1, ⵠ[176], Ⲇⵠᐃ, 31, 33, 0],
		[ⵠⲆⲆ, ⵠ[176], ᐃⲆᐃⵠ, 29, 36, 0],
		[1, ⵠ[176], 2, 56, 36, 0],
		[1, ⵠ[176], ᐃᐃⲆⲆ, 60, 37, 0],
		[1, ⵠ[176], ᐃᐃⲆⲆ, 45, 32, ⵠᐃⲆ],
		[1, ⵠ[176], 2, 22, 25, 0],
		[1, ⵠ[176], 2, 21, 35, ΔⲆⲆ],
		[Δⵠᐃ, ⵠ[77], 52, 90, 208, 0],
		[1, ⵠ[77], 18, 94, 250, 0],
		[1, ⵠ[77], 17, 95, 253, 0],
		[ΔⵠΔ, ⵠ[ᐃⵠΔⲆ], ᐃᐃⲆ, 140, 5, 1],
		[ⲆᐃΔ, ⵠ[3], 2, 139, ᐃⵠᐃⲆ, ᐃⲆΔ],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 138, 5, 1],
		[ΔⵠΔ, ⵠ[3], 2, 138, ΔΔΔⲆ, ᐃᐃΔ],
		[Δⵠᐃ, ⵠ[3], 2, 139, Ⲇⵠⵠᐃⵠ, ᐃᐃΔ],
		[Δⵠᐃ, ⵠ[ΔⲆΔⲆ], 2, 141, ΔΔΔΔ, ᐃᐃΔ],
		[ᐃᐃΔ, ⵠ[3], 2, 140, ᐃⵠⵠⵠⲆ, 1],
		[ⵠΔᐃ, ⵠ[105], 3, 143, 7, 1],
		[ⵠΔᐃ, ⵠ[105], 3, 139, 7, 1],
		[Ⲇⵠᐃ, ⵠ[3], 0, 137, 7, ΔⵠΔ],
		[ⵠΔᐃ, ⵠ[ⲆΔᐃⲆ], ⵠΔᐃ, 138, 8, ᐃᐃΔ],
		[1, ⵠ[Δⵠⵠᐃ], ᐃⲆᐃᐃ, 137, 6, 1],
		[1, ⵠ[3], ΔΔⲆᐃ, 137, 8, 1],
		[1, ⵠ[3], 2, 136, ⲆⵠⲆΔᐃ, ΔⵠΔ],
		[ⵠⲆⲆ, ⵠ[ᐃΔⵠⲆ], 2, 138, ⵠΔᐃᐃΔ, Ⲇⵠᐃ],
		[1, ⵠ[3], 3, 139, 9, 1],
		[Δⵠᐃ, ⵠ[3], ⲆⵠⲆᐃ, 136, Δᐃᐃⵠⵠ, 1],
		[1, ⵠ[ᐃⵠΔⵠ], ᐃⲆᐃΔ, 137, ⵠΔⵠⵠᐃ, 1],
		[1, ⵠ[77], 53, 92, 165, ⵠⲆᐃ],
		[ΔⵠΔ, ⵠ[77], 53, 92, 180, ⵠᐃⲆ],
		[ⲆᐃΔ, ⵠ[77], 53, 92, 188, ΔΔᐃ],
		[Δⵠᐃ, ⵠ[77], 54, 92, 153, 0],
		[Δⵠᐃ, ⵠ[77], 54, 91, 153, ᐃᐃⲆ],
		[1, ⵠ[77], 54, 90, 153, 0],
		[Ⲇⵠᐃ, ⵠ[77], 54, 89, 153, ΔΔᐃ],
		[1, ⵠ[77], 54, 88, 153, 0],
		[1, ⵠ[77], 54, 87, 153, Ⲇᐃⵠ],
		[ΔⵠΔ, ⵠ[77], 54, 86, 153, 0],
		[1, ⵠ[77], 54, 85, 153, 0],
		[1, ⵠ[77], 54, 84, 153, 0],
		[1, ⵠ[77], 54, 83, 153, ⵠⲆΔ],
		[ⵠⲆⲆ, ⵠ[77], 54, 82, 153, 0],
		[1, ⵠ[77], 54, 81, 153, 0],
		[1, ⵠ[77], 54, 80, 153, 0],
		[ⵠⲆⲆ, ⵠ[77], 54, 79, 153, 0],
		[1, ⵠ[77], 54, 78, 153, ⵠᐃⲆ],
		[1, ⵠ[77], 54, 77, 153, ⵠᐃⲆ],
		[ⵠΔᐃ, ⵠ[77], 54, 76, 153, 0],
		[ᐃᐃΔ, ⵠ[77], 54, 75, 153, ᐃᐃᐃ],
		[ᐃᐃΔ, ⵠ[77], 54, 74, 153, 0],
		[Δⵠᐃ, ⵠ[77], 54, 73, 153, Ⲇᐃⵠ],
		[1, ⵠ[77], 54, 72, 153, 0],
		[1, ⵠ[77], 54, 70, 153, 0],
		[Δⵠᐃ, ⵠ[77], 54, 71, 153, 0],
		[ᐃᐃΔ, ⵠ[77], 54, 69, 153, ᐃᐃⲆ],
		[1, ⵠ[77], 54, 68, 153, 0],
		[1, ⵠ[77], 54, 67, 153, 0],
		[Ⲇⵠᐃ, ⵠ[77], 54, 66, 153, ΔΔᐃ],
		[ᐃⲆΔ, ⵠ[77], 54, 65, 153, 0],
		[1, ⵠ[77], 54, 64, 153, ⵠⲆΔ],
		[1, ⵠ[77], 54, 63, 153, Ⲇᐃⵠ],
		[Δⵠᐃ, ⵠ[77], 54, 61, 153, ᐃᐃⲆ],
		[Δⵠᐃ, ⵠ[77], 54, 62, 153, 0],
		[ᐃᐃΔ, ⵠ[77], 54, 60, 153, 0],
		[Δⵠᐃ, ⵠ[77], 54, 59, 153, ᐃᐃⲆ],
		[1, ⵠ[77], 54, 57, 153, ΔⲆⲆ],
		[1, ⵠ[77], 54, 58, 153, 0],
		[1, ⵠ[77], 54, 56, 153, Ⲇᐃⵠ],
		[1, ⵠ[77], 54, 55, 153, 0],
		[1, ⵠ[77], 54, 54, 153, 0],
		[ᐃᐃΔ, ⵠ[77], 54, 53, 153, 0],
		[1, ⵠ[77], 54, 52, 153, 0],
		[ⵠⲆⲆ, ⵠ[77], 54, 51, 153, ⵠⵠⵠ],
		[1, ⵠ[77], 54, 50, 153, ΔⲆⲆ],
		[ⵠⲆⲆ, ⵠ[77], 54, 49, 153, 0],
		[1, ⵠ[77], 54, 48, 153, ⵠⵠⵠ],
		[1, ⵠ[77], 54, 47, 153, 0],
		[1, ⵠ[77], 54, 46, 153, 0],
		[ⵠⲆⲆ, ⵠ[77], 54, 45, 153, ⵠⵠⵠ],
		[1, ⵠ[77], 54, 44, 153, ΔⲆⲆ],
		[ⵠΔᐃ, ⵠ[77], 54, 43, 153, 0],
		[ⵠⲆⲆ, ⵠ[77], 54, 42, 153, ᐃᐃᐃ],
		[Ⲇⵠᐃ, ⵠ[77], 54, 41, 153, ΔΔᐃ],
		[Ⲇⵠᐃ, ⵠ[77], 54, 40, 153, ⵠⲆᐃ],
		[ⵠⲆⲆ, ⵠ[77], 54, 39, 153, 0],
		[1, ⵠ[77], 54, 37, 153, 0],
		[ⵠⲆⲆ, ⵠ[77], 54, 38, 153, 0],
		[1, ⵠ[77], 54, 36, 153, 0],
		[ⵠΔᐃ, ⵠ[77], 54, 35, 153, ΔΔᐃ],
		[1, ⵠ[77], 54, 34, 153, 0],
		[1, ⵠ[77], 54, 33, 153, ΔⲆⲆ],
		[1, ⵠ[77], 54, 32, 153, 0],
		[1, ⵠ[77], 54, 31, 153, 0],
		[ⵠⲆⲆ, ⵠ[77], 54, 30, 153, 0],
		[1, ⵠ[77], 54, 29, 153, ΔⲆⲆ],
		[1, ⵠ[77], 54, 28, 153, ⵠⲆᐃ],
		[1, ⵠ[77], 54, 27, 153, ΔⲆⲆ],
		[1, ⵠ[77], 54, 26, 153, 0],
		[ᐃⲆΔ, ⵠ[77], 54, 25, 153, 0],
		[ᐃᐃΔ, ⵠ[77], 54, 24, 153, ΔⲆⲆ],
		[1, ⵠ[77], 54, 23, 153, ΔΔᐃ],
		[ⵠΔᐃ, ⵠ[77], 54, 22, 153, 0],
		[1, ⵠ[77], 54, 21, 153, 0],
		[1, ⵠ[77], 54, 20, 153, 0],
		[1, ⵠ[77], 54, 19, 153, 0],
		[1, ⵠ[77], 54, 18, 153, ᐃᐃᐃ],
		[Ⲇⵠᐃ, ⵠ[77], 54, 17, 153, ΔⲆⲆ],
		[ⲆᐃΔ, ⵠ[77], 54, ᐃΔᐃᐃⲆ, 153, ᐃᐃᐃ],
		[1, ⵠ[77], 54, ᐃⵠᐃⵠᐃ, 153, 0],
		[1, ⵠ[77], 54, 14, 153, ⵠᐃⲆ],
		[1, ⵠ[77], 54, 13, 153, 0],
		[ⵠΔᐃ, ⵠ[77], 54, 12, 153, 0],
		[1, ⵠ[77], 54, ⲆᐃᐃⲆΔ, 153, 0],
		[1, ⵠ[77], 54, 10, 153, 0],
		[ΔⵠΔ, ⵠ[77], 54, 8, 153, 0],
		[1, ⵠ[77], 54, 9, 153, 0],
		[1, ⵠ[77], 55, 83, 8, 0],
		[Ⲇⵠᐃ, ⵠ[77], 55, 83, ᐃⲆᐃᐃⲆ, ᐃᐃᐃ],
		[1, ⵠ[77], 55, 83, 10, 0],
		[ⵠⲆⲆ, ⵠ[77], 55, 83, ⲆᐃⵠᐃΔ, ⵠⲆΔ],
		[ΔⵠΔ, ⵠ[77], 55, 83, ⲆⵠᐃⵠⲆ, ⵠⲆᐃ],
		[Ⲇⵠᐃ, ⵠ[77], 55, 83, ᐃⵠⵠΔⲆ, ⵠⲆᐃ],
		[ⵠⲆⲆ, ⵠ[77], 55, 83, ᐃⵠⵠⵠⵠⵠΔ, 0],
		[Δⵠᐃ, ⵠ[77], 55, 83, Δⵠᐃⵠᐃ, 0],
		[ᐃᐃΔ, ⵠ[77], 55, 83, 16, ΔⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[77], 55, 83, 17, 0],
		[Ⲇⵠᐃ, ⵠ[77], 55, 83, 19, 0],
		[ⵠΔᐃ, ⵠ[77], 55, 83, ΔΔⵠᐃᐃ, ⵠᐃⲆ],
		[1, ⵠ[77], 55, 83, ᐃⲆᐃⵠⲆ, 0],
		[Δⵠᐃ, ⵠ[77], 55, 83, 21, 0],
		[ᐃᐃΔ, ⵠ[77], 55, 83, 22, ⵠᐃⲆ],
		[1, ⵠ[77], 55, 83, 23, ᐃᐃᐃ],
		[1, ⵠ[77], 55, 83, 24, 0],
		[ᐃⲆΔ, ⵠ[77], 55, 83, 25, Ⲇᐃⵠ],
		[ΔⵠΔ, ⵠ[77], 55, 83, 26, ᐃᐃᐃ],
		[1, ⵠ[77], 55, 83, 27, ⵠⲆᐃ],
		[Δⵠᐃ, ⵠ[77], 55, 83, 28, ⵠⵠⵠ],
		[ⲆᐃΔ, ⵠ[77], 55, 83, 29, 0],
		[ⵠⲆⲆ, ⵠ[77], 55, 83, 30, ᐃᐃⲆ],
		[ᐃⲆΔ, ⵠ[77], 55, 83, 31, ⵠⲆΔ],
		[1, ⵠ[77], 55, 83, 32, 0],
		[ᐃⲆΔ, ⵠ[77], 55, 83, 33, 0],
		[1, ⵠ[77], 55, 83, 34, 0],
		[ⵠΔᐃ, ⵠ[77], 55, 83, 36, 0],
		[ΔⵠΔ, ⵠ[77], 55, 83, 35, 0],
		[1, ⵠ[77], 55, 83, 37, ⵠⵠⵠ],
		[1, ⵠ[77], 55, 83, 38, ⵠⲆΔ],
		[ᐃⲆΔ, ⵠ[77], 55, 81, 38, 0],
		[ᐃⲆΔ, ⵠ[77], 55, 82, 38, 0],
		[1, ⵠ[77], 55, 80, 38, 0],
		[ᐃᐃΔ, ⵠ[77], 55, 79, 38, 0],
		[1, ⵠ[77], 55, 78, 38, ⵠⲆΔ],
		[ⵠⲆⲆ, ⵠ[77], 55, 77, 38, ⵠⲆᐃ],
		[ᐃᐃΔ, ⵠ[77], 55, 76, 38, 0],
		[ⲆᐃΔ, ⵠ[77], 55, 75, 38, 0],
		[1, ⵠ[77], 55, 73, 38, 0],
		[ᐃᐃΔ, ⵠ[77], 55, 74, 38, 0],
		[ᐃⲆΔ, ⵠ[77], 55, 72, 38, 0],
		[ⵠⲆⲆ, ⵠ[77], 55, 71, 38, ⵠⲆΔ],
		[ᐃⲆΔ, ⵠ[77], 55, 70, 38, Ⲇᐃⵠ],
		[ΔⵠΔ, ⵠ[77], 55, 68, 38, ⵠⵠⵠ],
		[1, ⵠ[77], 55, 69, 38, ⵠᐃⲆ],
		[1, ⵠ[77], 55, 67, 38, ⵠⵠⵠ],
		[Δⵠᐃ, ⵠ[77], 55, 66, 38, 0],
		[1, ⵠ[77], 55, 65, 38, ΔΔᐃ],
		[1, ⵠ[77], 55, 64, 38, 0],
		[ⵠΔᐃ, ⵠ[77], 55, 63, 38, ⵠⵠⵠ],
		[ᐃᐃΔ, ⵠ[77], 55, 62, 38, ⵠⵠⵠ],
		[1, ⵠ[77], 55, 60, 38, Ⲇᐃⵠ],
		[1, ⵠ[77], 55, 61, 38, ⵠⲆᐃ],
		[ⲆᐃΔ, ⵠ[77], 55, 59, 38, 0],
		[ⵠΔᐃ, ⵠ[77], 55, 57, 38, 0],
		[1, ⵠ[77], 55, 58, 38, ⵠᐃⲆ],
		[1, ⵠ[77], 55, 56, 38, Ⲇᐃⵠ],
		[Ⲇⵠᐃ, ⵠ[77], 55, 55, 38, ⵠⲆΔ],
		[1, ⵠ[77], 55, 54, 38, ⵠⵠⵠ],
		[1, ⵠ[77], 55, 53, 38, ⵠᐃⲆ],
		[ΔⵠΔ, ⵠ[77], 55, 52, 38, 0],
		[1, ⵠ[77], 55, 51, 38, ΔΔᐃ],
		[1, ⵠ[77], 55, 49, 38, 0],
		[1, ⵠ[77], 55, 50, 38, 0],
		[1, ⵠ[77], 55, 48, 38, ᐃᐃᐃ],
		[ⵠΔᐃ, ⵠ[77], 55, 47, 38, 0],
		[1, ⵠ[77], 55, 46, 38, 0],
		[ⲆᐃΔ, ⵠ[77], 55, 45, 38, ⵠⲆᐃ],
		[Ⲇⵠᐃ, ⵠ[77], 55, 44, 38, 0],
		[ΔⵠΔ, ⵠ[77], 55, 43, 38, ΔⲆⲆ],
		[1, ⵠ[77], 55, 42, 38, 0],
		[1, ⵠ[77], 55, 41, 38, 0],
		[Δⵠᐃ, ⵠ[77], 55, 40, 38, ΔΔᐃ],
		[1, ⵠ[77], 55, 39, 38, ⵠⲆᐃ],
		[Δⵠᐃ, ⵠ[77], 55, 38, 38, 0],
		[ᐃᐃΔ, ⵠ[77], 55, 37, 38, ⵠⲆᐃ],
		[1, ⵠ[77], 55, 36, 38, 0],
		[1, ⵠ[77], 55, 34, 38, 0],
		[ⵠⲆⲆ, ⵠ[77], 55, 35, 38, 0],
		[1, ⵠ[77], 55, 33, 38, ⵠⲆᐃ],
		[1, ⵠ[77], 55, 31, 38, ⵠⵠⵠ],
		[1, ⵠ[77], 55, 32, 38, ᐃᐃᐃ],
		[ⵠⲆⲆ, ⵠ[77], 55, 30, 38, 0],
		[1, ⵠ[77], 55, 29, 38, ⵠⲆᐃ],
		[1, ⵠ[77], 55, 28, 38, 0],
		[ΔⵠΔ, ⵠ[77], 55, 27, 38, 0],
		[1, ⵠ[77], 55, 26, 38, 0],
		[ⲆᐃΔ, ⵠ[77], 55, 25, 38, 0],
		[1, ⵠ[77], 55, 24, 38, 0],
		[ΔⵠΔ, ⵠ[77], 55, 23, 38, ⵠᐃⲆ],
		[1, ⵠ[77], 55, 21, 38, 0],
		[1, ⵠ[77], 55, 22, 38, 0],
		[1, ⵠ[77], 55, ᐃΔΔⲆΔ, 38, 0],
		[1, ⵠ[77], 55, Δᐃᐃⵠᐃ, 38, ΔⲆⲆ],
		[ⵠⲆⲆ, ⵠ[77], 55, ⲆⵠⵠⲆⵠ, 37, 0],
		[ⵠΔᐃ, ⵠ[77], 55, ΔⲆᐃⵠⵠΔᐃ, 36, ᐃᐃᐃ],
		[1, ⵠ[77], 55, 19, 35, 0],
		[ⵠⲆⲆ, ⵠ[77], 55, ⵠΔⵠᐃⵠ, 34, 0],
		[1, ⵠ[77], 55, ⵠΔⵠᐃⵠ, 33, 0],
		[ⵠΔᐃ, ⵠ[77], 55, ⵠⵠΔᐃⲆ, 32, 0],
		[1, ⵠ[77], 55, ΔΔⵠⲆⲆ, 31, ⵠⵠⵠ],
		[1, ⵠ[77], 55, ΔΔⵠⲆⲆ, 30, ⵠⵠⵠ],
		[1, ⵠ[77], 55, ⲆᐃΔⲆΔ, 28, 0],
		[ᐃⲆΔ, ⵠ[77], 55, ᐃΔΔⵠᐃ, 29, ᐃᐃᐃ],
		[1, ⵠ[77], 55, 19, 27, ΔⲆⲆ],
		[Δⵠᐃ, ⵠ[77], 55, 19, 26, 0],
		[ΔⵠΔ, ⵠ[77], 55, 19, 25, 0],
		[ⵠΔᐃ, ⵠ[77], 55, ⲆⵠⵠⲆⵠ, 24, ᐃᐃⲆ],
		[1, ⵠ[77], 55, ΔⲆᐃⵠⵠΔᐃ, 23, ⵠⵠⵠ],
		[1, ⵠ[77], 55, 19, 22, 0],
		[ΔⵠΔ, ⵠ[77], 55, ⲆᐃΔⲆΔ, 21, ᐃᐃᐃ],
		[1, ⵠ[77], 55, 19, ⲆᐃΔᐃⵠ, 0],
		[ⵠΔᐃ, ⵠ[77], 55, 19, ⵠᐃⵠᐃΔ, 0],
		[ⲆᐃΔ, ⵠ[77], 55, 19, ΔΔⵠⲆⲆ, 0],
		[ⵠⲆⲆ, ⵠ[77], 55, 19, 16, ᐃᐃᐃ],
		[ΔⵠΔ, ⵠ[77], 55, ⵠⲆⵠᐃΔ, ⲆⲆᐃⲆⵠⲆΔ, ⵠⵠⵠ],
		[1, ⵠ[77], 55, ᐃΔΔⵠᐃ, ΔΔⵠⲆᐃ, 0],
		[ⵠΔᐃ, ⵠ[77], 55, ⵠⵠΔᐃⲆ, 14, 0],
		[ⲆᐃΔ, ⵠ[77], 55, 19, ᐃⵠⵠⵠΔ, ⵠᐃⲆ],
		[ᐃᐃΔ, ⵠ[77], 55, ᐃᐃⲆⵠᐃ, ⵠᐃΔᐃᐃ, 0],
		[Δⵠᐃ, ⵠ[77], 55, 19, ᐃⵠΔⲆΔ, ᐃᐃᐃ],
		[ΔⵠΔ, ⵠ[77], 55, Δᐃᐃⵠᐃ, ⵠΔΔΔⵠ, 0],
		[1, ⵠ[77], 55, Δᐃᐃⵠᐃ, 9, 0],
		[1, ⵠ[77], 55, 19, 8, ⵠⲆᐃ],
		[1, ⵠ[77], 55, 84, 35, 0],
		[1, ⵠ[77], 55, 84, 32, 0],
		[1, ⵠ[77], 55, 84, 25, ᐃᐃᐃ],
		[ⲆᐃΔ, ⵠ[77], 50, 84, 24, 0],
		[1, ⵠ[77], 55, 84, 20, 0],
		[ᐃⲆΔ, ⵠ[77], 55, 84, ᐃΔΔⲆᐃⵠᐃ, 0],
		[ⵠⲆⲆ, ⵠ[77], 55, 84, ᐃΔⲆⵠΔ, Ⲇᐃⵠ],
		[1, ⵠ[77], 50, 84, ᐃⵠᐃⵠᐃ, 0],
		[ⵠⲆⲆ, ⵠ[77], 55, 84, 8, ΔΔᐃ],
		[1, ⵠ[77], 55, 84, ᐃΔⵠⵠⲆ, 0],
		[1, ⵠ[77], 50, 85, ⲆΔⲆΔⵠ, ᐃᐃᐃ],
		[1, ⵠ[77], 55, 81, 39, ⵠⲆᐃ],
		[ⵠⲆⲆ, ⵠ[77], 50, 83, 40, ⵠⲆᐃ],
		[ⵠⲆⲆ, ⵠ[77], 55, 72, 39, 0],
		[1, ⵠ[77], 55, 74, 39, ⵠⵠⵠ],
		[ⲆᐃΔ, ⵠ[77], 55, 66, 39, ⵠᐃⲆ],
		[1, ⵠ[77], 55, 65, 39, ΔⲆⲆ],
		[ⵠΔᐃ, ⵠ[77], 50, 67, 41, 0],
		[Ⲇⵠᐃ, ⵠ[77], 55, 56, 39, ᐃᐃᐃ],
		[ⵠⲆⲆ, ⵠ[77], 55, 58, 39, 0],
		[Δⵠᐃ, ⵠ[77], 55, 50, 39, 0],
		[1, ⵠ[77], 50, 49, 39, ⵠⲆΔ],
		[1, ⵠ[77], 55, 44, 39, ⵠⲆΔ],
		[1, ⵠ[77], 55, 42, 39, ΔⲆⲆ],
		[1, ⵠ[77], 50, 43, 39, 0],
		[1, ⵠ[77], 50, 41, 39, ⵠⲆΔ],
		[ⲆᐃΔ, ⵠ[77], 50, 37, 39, 0],
		[1, ⵠ[77], 55, 36, 39, 0],
		[1, ⵠ[77], 55, 32, 39, 0],
		[1, ⵠ[77], 50, 31, 39, ΔⲆⲆ],
		[1, ⵠ[77], 55, 23, 39, 0],
		[ⲆᐃΔ, ⵠ[77], 55, 18, 37, 0],
		[1, ⵠ[77], 50, ΔΔⵠᐃᐃ, 36, ΔⲆⲆ],
		[Δⵠᐃ, ⵠ[77], 55, 18, 35, ΔΔᐃ],
		[Ⲇⵠᐃ, ⵠ[77], 50, 18, 34, 0],
		[ᐃᐃΔ, ⵠ[77], 55, ⵠᐃⵠⵠᐃ, 31, ᐃᐃⲆ],
		[1, ⵠ[77], 50, ⵠΔⵠⲆⵠ, 30, ΔΔᐃ],
		[ᐃᐃΔ, ⵠ[77], 55, 18, 25, 0],
		[1, ⵠ[77], 50, 18, 24, 0],
		[ⵠΔᐃ, ⵠ[77], 55, ⵠᐃⵠᐃΔ, ⲆⵠⲆΔⲆ, ΔⲆⲆ],
		[1, ⵠ[77], 55, 18, 14, ⵠⲆΔ],
		[ⵠΔᐃ, ⵠ[77], 50, ⵠᐃⵠⵠᐃ, ᐃᐃΔᐃⲆ, 0],
		[1, ⵠ[77], 55, ΔΔⵠᐃᐃ, 8, 0],
		[1, ⵠ[77], 54, 90, 154, ⵠⵠⵠ],
		[1, ⵠ[77], 51, 89, 154, ΔⲆⲆ],
		[1, ⵠ[77], 54, 85, 154, 0],
		[1, ⵠ[77], 54, 81, 154, ⵠᐃⲆ],
		[ⵠⲆⲆ, ⵠ[77], 54, 76, 154, ΔΔᐃ],
		[ΔⵠΔ, ⵠ[77], 54, 70, 154, 0],
		[1, ⵠ[77], 54, 66, 154, ΔΔᐃ],
		[ᐃᐃΔ, ⵠ[77], 54, 61, 154, 0],
		[Δⵠᐃ, ⵠ[77], 54, 56, 154, 0],
		[1, ⵠ[77], 54, 53, 154, ΔΔᐃ],
		[1, ⵠ[77], 54, 45, 154, 0],
		[1, ⵠ[77], 54, 42, 154, ⵠⲆΔ],
		[1, ⵠ[77], 54, 37, 154, 0],
		[1, ⵠ[77], 54, 30, 154, ⵠⵠⵠ],
		[1, ⵠ[77], 54, 25, 154, ΔⲆⲆ],
		[1, ⵠ[77], 54, 17, 154, ΔⲆⲆ],
		[ΔⵠΔ, ⵠ[77], 54, ΔⵠⵠᐃⲆ, 154, ⵠⲆᐃ],
		[ⲆᐃΔ, ⵠ[77], 54, 8, 154, ᐃᐃᐃ],
		[Ⲇⵠᐃ, ⵠ[77], 55, ᐃⲆᐃΔⲆ, 9, 0],
		[1, ⵠ[77], 53, 93, 154, 0],
		[ⵠⲆⲆ, ⵠ[77], 53, 93, 156, 0],
		[1, ⵠ[77], 53, 93, 158, 0],
		[Δⵠᐃ, ⵠ[77], 52, 91, 157, ΔⲆⲆ],
		[ⵠΔᐃ, ⵠ[77], 53, 93, 159, ⵠⲆΔ],
		[ⲆᐃΔ, ⵠ[77], 53, 93, 161, ΔⲆⲆ],
		[1, ⵠ[77], 53, 93, 162, 0],
		[ⵠⲆⲆ, ⵠ[77], 53, 93, 163, 0],
		[Δⵠᐃ, ⵠ[77], 53, 93, 164, 0],
		[ᐃᐃΔ, ⵠ[77], 53, 93, 165, 0],
		[ⲆᐃΔ, ⵠ[77], 53, 93, 166, ᐃᐃⲆ],
		[ⵠⲆⲆ, ⵠ[77], 53, 93, 167, 0],
		[ΔⵠΔ, ⵠ[77], 52, 91, 167, ⵠⵠⵠ],
		[ⲆᐃΔ, ⵠ[77], 53, 93, 169, 0],
		[ᐃᐃΔ, ⵠ[77], 53, 93, 168, ᐃᐃⲆ],
		[ᐃᐃΔ, ⵠ[77], 53, 93, 170, ⵠⵠⵠ],
		[1, ⵠ[77], 53, 93, 171, 0],
		[1, ⵠ[77], 53, 93, 173, 0],
		[1, ⵠ[77], 53, 93, 176, ᐃᐃⲆ],
		[ΔⵠΔ, ⵠ[77], 53, 93, 175, ΔΔᐃ],
		[1, ⵠ[77], 53, 92, 169, 0],
		[1, ⵠ[77], 53, 93, 178, ⵠⲆᐃ],
		[ᐃⲆΔ, ⵠ[77], 53, 93, 179, ᐃᐃᐃ],
		[1, ⵠ[77], 53, 93, 180, 0],
		[1, ⵠ[77], 53, 93, 181, 0],
		[1, ⵠ[77], 53, 93, 183, 0],
		[ⵠΔᐃ, ⵠ[77], 53, 93, 184, 0],
		[1, ⵠ[77], 53, 93, 186, ᐃᐃⲆ],
		[ᐃⲆΔ, ⵠ[77], ⵠΔⵠⲆⵠ, 95, 185, ⵠⲆᐃ],
		[1, ⵠ[77], 53, 93, 187, 0],
		[1, ⵠ[77], 53, 93, 188, ⵠᐃⲆ],
		[1, ⵠ[77], 52, 91, 186, 0],
		[ᐃⲆΔ, ⵠ[77], 53, 93, 190, 0],
		[ᐃᐃΔ, ⵠ[77], 53, 93, 192, 0],
		[1, ⵠ[77], 53, 93, 195, ⵠⲆᐃ],
		[Δⵠᐃ, ⵠ[77], 53, 93, 194, 0],
		[1, ⵠ[77], 52, 91, 196, Ⲇᐃⵠ],
		[ᐃⲆΔ, ⵠ[77], 53, 93, 197, ΔⲆⲆ],
		[ΔⵠΔ, ⵠ[77], 53, 93, 200, ⵠⲆᐃ],
		[Δⵠᐃ, ⵠ[77], 53, 93, 198, ΔⲆⲆ],
		[1, ⵠ[77], 53, 93, 201, 0],
		[ⵠΔᐃ, ⵠ[77], 53, 93, 202, ⵠⲆΔ],
		[ᐃᐃΔ, ⵠ[77], 53, 93, 203, ᐃᐃᐃ],
		[Ⲇⵠᐃ, ⵠ[77], 53, 93, 204, 0],
		[1, ⵠ[77], 53, 93, 206, ΔⲆⲆ],
		[1, ⵠ[77], 53, 93, 205, ⵠⲆΔ],
		[Δⵠᐃ, ⵠ[77], 53, 93, 207, 0],
		[1, ⵠ[77], 53, 93, 209, ⵠⵠⵠ],
		[1, ⵠ[77], 53, 93, 210, 0],
		[1, ⵠ[77], 53, 93, 212, ΔΔᐃ],
		[Δⵠᐃ, ⵠ[77], 52, 91, 204, ⵠⲆᐃ],
		[ᐃᐃΔ, ⵠ[77], 53, 93, 213, 0],
		[1, ⵠ[77], 53, 93, 214, ⵠⲆᐃ],
		[1, ⵠ[77], 53, 93, 215, 0],
		[ᐃᐃΔ, ⵠ[77], 53, 93, 216, ᐃᐃⲆ],
		[Δⵠᐃ, ⵠ[77], 53, 93, 217, 0],
		[ᐃⲆΔ, ⵠ[77], 53, 93, 218, 0],
		[1, ⵠ[77], 53, 93, 219, 0],
		[ᐃᐃΔ, ⵠ[77], 53, 93, 220, 0],
		[Ⲇⵠᐃ, ⵠ[77], 52, 92, 213, 0],
		[ⲆᐃΔ, ⵠ[77], 52, 92, 206, ⵠᐃⲆ],
		[ᐃⲆΔ, ⵠ[77], 52, 92, 202, 0],
		[1, ⵠ[77], 53, 92, 201, Ⲇᐃⵠ],
		[1, ⵠ[77], 52, 92, 194, ⵠⵠⵠ],
		[ⲆᐃΔ, ⵠ[77], 52, 92, 178, ᐃᐃⲆ],
		[Ⲇⵠᐃ, ⵠ[77], 52, 92, 171, 0],
		[ⵠⲆⲆ, ⵠ[77], 53, 93, 221, 0],
		[ᐃᐃΔ, ⵠ[77], 53, 93, 222, Ⲇᐃⵠ],
		[1, ⵠ[77], 53, 93, 223, 0],
		[1, ⵠ[77], 53, 93, 225, 0],
		[Δⵠᐃ, ⵠ[77], 53, 93, 228, ⵠⵠⵠ],
		[ⵠⲆⲆ, ⵠ[77], 53, 93, 227, ⵠⲆΔ],
		[1, ⵠ[77], 52, 92, 217, 0],
		[1, ⵠ[77], 53, 92, 218, 0],
		[ᐃᐃΔ, ⵠ[77], 52, 92, 221, ΔΔᐃ],
		[1, ⵠ[77], 52, 92, 225, 0],
		[1, ⵠ[77], 52, 93, 226, 0],
		[1, ⵠ[77], 52, 93, 224, Ⲇᐃⵠ],
		[ᐃᐃΔ, ⵠ[77], 52, 93, 208, ⵠⲆᐃ],
		[ᐃⲆΔ, ⵠ[77], 52, 93, 211, ΔΔᐃ],
		[Δⵠᐃ, ⵠ[77], 52, 93, 196, 0],
		[ᐃᐃΔ, ⵠ[77], 52, 93, 199, 0],
		[1, ⵠ[77], 52, 93, 189, 0],
		[1, ⵠ[77], 52, 93, 191, 0],
		[ⵠΔᐃ, ⵠ[77], 52, 93, 193, Ⲇᐃⵠ],
		[Δⵠᐃ, ⵠ[77], 52, 93, 182, ᐃᐃᐃ],
		[ⵠΔᐃ, ⵠ[77], 52, 93, 185, Ⲇᐃⵠ],
		[ΔⵠΔ, ⵠ[77], 52, 93, 172, ΔⲆⲆ],
		[ΔⵠΔ, ⵠ[77], 52, 93, 174, 0],
		[ᐃⲆΔ, ⵠ[77], 52, 93, 177, 0],
		[Δⵠᐃ, ⵠ[77], 52, 93, 155, ΔⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[77], 52, 93, 157, 0],
		[ᐃⲆΔ, ⵠ[77], 52, 93, 160, 0],
		[ⵠΔᐃ, ⵠ[77], 52, 92, 162, ⵠᐃⲆ],
		[1, ⵠ[77], 53, 93, 229, 0],
		[ᐃᐃΔ, ⵠ[77], 53, 93, 231, 0],
		[1, ⵠ[77], 53, 93, 232, 0],
		[ⲆᐃΔ, ⵠ[77], 53, 93, 234, ⵠⵠⵠ],
		[ⵠΔᐃ, ⵠ[77], 52, 93, 230, 0],
		[1, ⵠ[77], 52, 92, 228, ᐃᐃⲆ],
		[1, ⵠ[77], 53, 93, 235, 0],
		[1, ⵠ[77], 53, 93, 236, 0],
		[ΔⵠΔ, ⵠ[77], 53, 93, 237, 0],
		[ᐃⲆΔ, ⵠ[77], 53, 93, 239, ⵠⲆᐃ],
		[ⵠⲆⲆ, ⵠ[77], 53, 93, 240, ⵠⵠⵠ],
		[1, ⵠ[77], 52, 93, 238, ⵠⵠⵠ],
		[1, ⵠ[77], 53, 93, 241, 0],
		[1, ⵠ[77], 52, 93, 242, ᐃᐃⲆ],
		[1, ⵠ[77], 52, 93, 243, Ⲇᐃⵠ],
		[1, ⵠ[77], 53, 93, 244, 0],
		[ᐃⲆΔ, ⵠ[77], 53, 93, 246, 0],
		[Ⲇⵠᐃ, ⵠ[77], 53, 93, 245, 0],
		[ⲆᐃΔ, ⵠ[77], 52, 93, 247, ⵠᐃⲆ],
		[1, ⵠ[77], 53, 93, 248, ᐃᐃᐃ],
		[1, ⵠ[77], 52, 92, 235, ΔΔᐃ],
		[ⲆᐃΔ, ⵠ[77], 52, 92, 245, ΔⲆⲆ],
		[ᐃⲆΔ, ⵠ[77], 52, 93, 249, 0],
		[Δⵠᐃ, ⵠ[77], 53, 93, 250, ⵠⲆᐃ],
		[1, ⵠ[77], 53, 93, 251, ⵠⲆᐃ],
		[ᐃᐃΔ, ⵠ[77], 53, 93, 252, 0],
		[1, ⵠ[77], 53, 93, 254, 0],
		[1, ⵠ[77], 52, 93, 253, ᐃᐃⲆ],
		[ⵠⲆⲆ, ⵠ[77], 52, 93, 255, 0],
		[1, ⵠ[77], 53, 93, 257, ⵠⲆΔ],
		[ᐃᐃΔ, ⵠ[77], 53, 93, ⲆⲆⲆᐃⲆᐃⵠ, ⵠⲆᐃ],
		[1, ⵠ[77], 52, 93, 258, Ⲇᐃⵠ],
		[1, ⵠ[77], 53, 93, 259, 0],
		[ⵠⲆⲆ, ⵠ[77], 52, 93, 260, ⵠⲆᐃ],
		[1, ⵠ[77], 53, 93, 263, ᐃᐃⲆ],
		[Ⲇⵠᐃ, ⵠ[77], 53, 93, 264, ΔΔᐃ],
		[ⵠⲆⲆ, ⵠ[77], 53, 93, 265, 0],
		[1, ⵠ[77], 52, 93, 266, ⵠⲆᐃ],
		[1, ⵠ[77], 53, 93, 267, 0],
		[ᐃⲆΔ, ⵠ[77], 52, 93, 268, ΔΔᐃ],
		[1, ⵠ[77], 52, 93, 269, 0],
		[Ⲇⵠᐃ, ⵠ[77], 53, 93, 276, ᐃᐃᐃ],
		[ΔⵠΔ, ⵠ[77], 53, 93, 277, ⵠⵠⵠ],
		[1, ⵠ[77], 52, 93, 278, ⵠᐃⲆ],
		[Δⵠᐃ, ⵠ[77], 53, 93, 279, 0],
		[1, ⵠ[77], 52, 93, 280, ⵠᐃⲆ],
		[1, ⵠ[77], 52, 93, 283, 0],
		[ᐃᐃΔ, ⵠ[77], 53, 93, 284, 0],
		[1, ⵠ[77], 53, 93, 285, ΔⲆⲆ],
		[1, ⵠ[77], 53, 93, 286, 0],
		[ⵠΔᐃ, ⵠ[77], 52, 93, 287, ΔⲆⲆ],
		[ⲆᐃΔ, ⵠ[77], 53, 93, 288, 0],
		[Ⲇⵠᐃ, ⵠ[77], 53, 93, 289, 0],
		[1, ⵠ[77], 52, 93, 290, 0],
		[1, ⵠ[77], 52, 93, 291, 0],
		[1, ⵠ[77], 53, 93, 292, ⵠⵠⵠ],
		[1, ⵠ[77], 52, 93, 293, 0],
		[Δⵠᐃ, ⵠ[77], 53, 93, 294, 0],
		[ᐃᐃΔ, ⵠ[77], 52, 93, 295, ⵠⲆᐃ],
		[ᐃᐃΔ, ⵠ[77], 52, 93, 296, 0],
		[1, ⵠ[77], 53, 93, 297, ⵠⲆΔ],
		[Δⵠᐃ, ⵠ[77], 53, 93, 298, ⵠⵠⵠ],
		[1, ⵠ[77], 52, 93, 299, 0],
		[1, ⵠ[77], 53, 93, 300, 0],
		[ⲆᐃΔ, ⵠ[77], 52, 92, 298, ᐃᐃᐃ],
		[1, ⵠ[77], 52, 92, 293, 0],
		[1, "r", 92, 262, ⵠⲆᐃ],
		[Δⵠᐃ, "r", 93, 262, Ⲇᐃⵠ],
		[ⵠΔᐃ, ⵠ[77], 52, 93, 261, 0],
		[1, ⵠ[3], 0, 223, 104, ⵠΔᐃ],
		[ΔⵠΔ, ⵠ[ᐃⲆᐃΔ], 2, 223, 105, ⵠΔᐃ],
		[ⵠⲆⲆ, ⵠ[ⲆⵠⲆᐃ], 2, 223, 102, 1],
		[ⲆᐃΔ, ⵠ[ⲆΔᐃⲆ], ᐃᐃᐃⵠ, 223, 103, 1],
		[ⲆᐃΔ, ⵠ[105], ΔⲆΔⲆ, 141, Ⲇᐃⵠⵠᐃ, 1],
		[ᐃᐃΔ, ⵠ[3], ⲆⲆΔⲆ, 140, 9, 1],
		[1, ⵠ[105], Ⲇⵠⵠⵠ, 142, ⵠⲆΔⵠⵠ, 1],
		[ⲆᐃΔ, ⵠ[77], 4, 81, 149, ᐃᐃⲆ],
		[ⵠⲆⲆ, "f", 0, 83, 148, 1],
		[ⲆᐃΔ, "f", ᐃⲆΔ, 82, 149, 1],
		[1, ⵠ[77], 34, 81, 156, 0],
		[ᐃᐃΔ, ⵠ[77], 51, ⲆⵠᐃⲆⵠᐃⵠ, ᐃΔΔⲆⲆ, ΔΔᐃ],
		[ΔⵠΔ, ⵠ[77], 54, ΔᐃⲆⲆΔ, ᐃΔⵠⵠⲆ, 0],
		[ⲆᐃΔ, ⵠ[77], 54, ⲆΔΔΔⵠ, ⵠⲆᐃᐃΔ, ᐃᐃⲆ],
		[Ⲇⵠᐃ, ⵠ[3], 3, 223, 106, ᐃⲆΔ],
		[1, "p", ⵠᐃⲆ, 119, 279, ᐃⲆΔ],
		[ΔⵠΔ, "p", ⵠⵠⵠ, 109, 242, ⲆᐃΔ],
		[Δⵠᐃ, ⵠ[3], 1, 29, ⵠⵠⲆⵠⵠ, 1],
		[1, ⵠ[3], 2, 30, ⵠΔⵠⵠᐃ, ΔⵠΔ],
		[Ⲇⵠᐃ, ⵠ[3], ᐃⲆᐃᐃ, 31, 9, 1],
		[1, ⵠ[3], 2, 32, ⵠΔᐃᐃΔ, ⵠΔᐃ],
		[1, ⵠ[ⵠⵠΔⵠ], ᐃⲆᐃᐃ, 33, ᐃⲆᐃᐃⲆ, 1],
		[1, ⵠ[3], ᐃⲆᐃⵠ, 69, 9, Δⵠᐃ],
		[1, ⵠ[3], 2, 71, 9, ⲆᐃΔ],
		[ⵠΔᐃ, ⵠ[3], ⵠⵠⵠᐃ, 70, ⵠⲆΔⵠⵠ, 1],
		[1, ⵠ[3], Ⲇⵠᐃ, 72, ᐃⲆᐃᐃⲆ, Δⵠᐃ],
		[ᐃⲆΔ, ⵠ[Δⵠⵠᐃ], ᐃᐃⲆⲆ, 73, ⵠⲆᐃᐃΔ, 1],
		[ⵠΔᐃ, ⵠ[77], 10, 31, ᐃⵠᐃⵠⲆ, 0],
		[ΔⵠΔ, ⵠ[77], ᐃⵠᐃⵠⲆ, 29, ⲆΔⵠΔⵠ, 0],
		[ᐃⲆΔ, ⵠ[77], ⵠⲆⵠⵠⲆ, 44, 10, ⵠⲆᐃ],
		[ΔⵠΔ, ⵠ[77], Ⲇⵠⵠⵠ, 87, 10, ⵠᐃⲆ],
		[1, ⵠ[77], 4, 86, ᐃᐃᐃΔΔ, 0],
		[1, ⵠ[77], ⲆᐃⲆΔ, 87, ⵠⲆᐃᐃΔ, ⵠⲆΔ],
		[ⵠΔᐃ, ⵠ[77], Ⲇᐃⵠᐃ, 13, ⲆⲆⵠⲆⵠ, ΔΔᐃ],
		[ⵠⲆⲆ, ⵠ[77], 4, ΔⲆΔᐃⲆⵠⲆ, ⵠΔⲆⵠⵠ, 0],
		[ⵠΔᐃ, ⵠ[77], ⵠᐃΔⲆ, 16, 10, ᐃᐃⲆ],
		[ⵠΔᐃ, ⵠ[77], ⵠᐃᐃΔ, 17, 10, 0],
		[ᐃⲆΔ, ⵠ[ᐃⵠΔᐃ], ⲆⲆΔⲆ, 146, ⵠΔᐃᐃΔ, ᐃⲆΔ],
		[ⵠⲆⲆ, ⵠ[3], ᐃᐃⲆⲆ, 148, ⵠΔⵠⵠᐃ, Ⲇⵠᐃ],
		[1, ⵠ[ⵠⵠΔⵠ], 2, 150, 9, 1],
		[1, ⵠ[3], 2, 153, 9, ⵠⲆⲆ],
		[ᐃᐃΔ, ⵠ[3], ⲆⲆΔⲆ, 155, ᐃΔⵠⵠⲆ, 1],
		[ᐃⲆΔ, ⵠ[3], 1, 149, ᐃΔΔⲆⲆ, ᐃᐃΔ],
		[1, ⵠ[ΔⲆⵠᐃ], 1, 154, ⵠⲆᐃᐃΔ, ⲆᐃΔ],
		[ᐃᐃΔ, ⵠ[3], 3, 147, 9, ΔⵠΔ],
		[ⵠΔᐃ, ⵠ[ΔΔᐃΔ], 3, 151, 9, 1],
		[1, ⵠ[3], 3, 152, ⵠⲆΔⵠⵠ, 1],
		[ᐃⲆΔ, ⵠ[3], ΔΔᐃΔ, 156, ⵠⲆᐃᐃΔ, 1],
		[1, ⵠ[3], 3, 157, 9, 1],
		[Ⲇⵠᐃ, ⵠ[3], 3, 158, 9, ⲆᐃΔ],
		[ⵠΔᐃ, ⵠ[ΔⲆΔⲆ], ᐃⵠΔⵠ, 159, 9, ᐃᐃΔ],
		[ⲆᐃΔ, ⵠ[3], 3, 160, ΔⲆⲆΔⲆ, Ⲇⵠᐃ],
		[ᐃⲆΔ, ⵠ[ⵠⵠΔⵠ], 0, 161, ᐃΔⵠⵠⲆ, 1],
		[1, ⵠ[3], ᐃⲆᐃᐃ, 162, 9, ⵠΔᐃ],
		[1, ⵠ[3], 2, 163, 9, ᐃⲆΔ],
		[ⵠΔᐃ, ⵠ[3], 1, 164, 9, ᐃⲆΔ],
		[Ⲇⵠᐃ, ⵠ[3], 2, 165, 9, 1],
		[Δⵠᐃ, ⵠ[ⲆΔᐃⲆ], 3, 166, ⵠⲆⵠΔⵠ, Ⲇⵠᐃ],
		[ᐃᐃΔ, ⵠ[ΔΔᐃΔ], 3, 168, ᐃⲆᐃᐃⲆ, 1],
		[ⵠⲆⲆ, ⵠ[3], ᐃⲆᐃΔ, 170, 9, ᐃᐃΔ],
		[1, ⵠ[ᐃⵠΔᐃ], ⵠⲆⲆ, 169, 9, ⲆᐃΔ],
		[1, ⵠ[ΔⲆΔⲆ], 2, 167, 9, ᐃⲆΔ],
		[1, ⵠ[3], ⵠⵠⵠᐃ, 171, ⵠⲆΔⵠⵠ, ΔⵠΔ],
		[1, ⵠ[3], 2, 173, 9, 1],
		[1, ⵠ[3], 2, 172, 9, 1],
		[Δⵠᐃ, ⵠ[3], 2, 174, 9, Ⲇⵠᐃ],
		[1, ⵠ[3], 1, 175, ᐃⲆᐃᐃⲆ, Δⵠᐃ],
		[ⵠΔᐃ, ⵠ[3], 3, 176, ᐃⲆᐃᐃⲆ, 1],
		[ᐃⲆΔ, ⵠ[3], 3, 178, ⵠⲆΔⵠⵠ, 1],
		[Δⵠᐃ, ⵠ[3], ΔⲆⵠᐃ, 179, ΔⲆⲆΔⲆ, 1],
		[ᐃᐃΔ, ⵠ[ⲆΔᐃⲆ], ⵠᐃⲆ, 180, ⵠΔⵠⵠᐃ, Δⵠᐃ],
		[1, ⵠ[3], ᐃⲆᐃᐃ, 177, ⵠΔⵠⵠᐃ, 1],
		[Δⵠᐃ, ⵠ[ᐃⵠΔᐃ], ΔΔⲆᐃ, 182, ΔⲆⲆΔⲆ, ᐃⲆΔ],
		[1, ⵠ[ᐃⵠΔⵠ], 2, 181, 9, 1],
		[ΔⵠΔ, ⵠ[3], ᐃⲆᐃⵠ, 183, ⵠⲆⵠΔⵠ, 1],
		[1, ⵠ[Δⵠⵠᐃ], 2, 184, 9, 1],
		[Ⲇⵠᐃ, ⵠ[3], 2, 185, 9, ⲆᐃΔ],
		[1, ⵠ[3], 2, 186, ⵠⲆⵠΔⵠ, ⵠⲆⲆ],
		[Δⵠᐃ, ⵠ[ᐃⲆᐃΔ], 1, 187, 9, ⵠⲆⲆ],
		[Ⲇⵠᐃ, ⵠ[3], ᐃᐃᐃⵠ, 188, ⵠⲆΔⵠⵠ, 1],
		[1, ⵠ[3], 3, 189, 9, 1],
		[Δⵠᐃ, ⵠ[ᐃΔⵠⲆ], 3, 190, 9, ⵠⲆⲆ],
		[1, ⵠ[Δⵠⵠᐃ], 3, 191, 9, 1],
		[1, ⵠ[3], 2, 192, 9, 1],
		[1, ⵠ[3], 0, 193, ⵠΔᐃᐃΔ, 1],
		[ⵠΔᐃ, ⵠ[ⵠⵠΔⵠ], ⲆⲆΔⲆ, 194, ⵠⵠⲆⵠⵠ, 1],
		[ⵠⲆⲆ, ⵠ[3], 2, 196, 9, 1],
		[ΔⵠΔ, ⵠ[ΔΔᐃΔ], ᐃⲆᐃᐃ, 198, 9, 1],
		[1, ⵠ[ᐃⵠΔⵠ], 2, 200, ⵠⲆΔⵠⵠ, ᐃⲆΔ],
		[ⲆᐃΔ, ⵠ[ΔⲆⵠᐃ], ⵠⵠΔⵠ, 195, 9, 1],
		[1, ⵠ[3], ᐃⵠΔⲆ, 197, 9, 1],
		[ΔⵠΔ, ⵠ[3], ᐃⵠΔⲆ, 199, 9, 1],
		[1, ⵠ[ΔⲆⵠᐃ], ᐃᐃᐃ, 201, 9, 1],
		[1, ⵠ[ⲆΔᐃⲆ], ⵠⵠⵠᐃ, 202, ⵠⲆΔⵠⵠ, ᐃⲆΔ],
		[Δⵠᐃ, ⵠ[ᐃⵠΔⵠ], ᐃᐃⲆⲆ, 203, ᐃΔⵠⵠⲆ, 1],
		[ⵠⲆⲆ, ⵠ[ᐃΔⵠⲆ], ᐃΔⵠⲆ, 208, 9, 1],
		[1, ⵠ[ᐃΔⵠⲆ], ΔΔᐃΔ, 207, 9, 1],
		[1, ⵠ[ⲆᐃᐃΔ], 3, 206, ⵠⲆΔⵠⵠ, Δⵠᐃ],
		[ⵠΔᐃ, ⵠ[3], 3, 205, ΔⲆⲆΔⲆ, 1],
		[ⵠΔᐃ, ⵠ[ᐃⵠΔⲆ], ᐃⲆᐃΔ, 204, ⵠΔⵠⵠᐃ, ᐃᐃΔ],
		[ΔⵠΔ, ⵠ[3], ΔΔᐃΔ, 214, 9, Ⲇⵠᐃ],
		[1, ⵠ[ΔⲆΔⲆ], ᐃⵠΔᐃ, 215, ᐃΔⵠⵠⲆ, Δⵠᐃ],
		[1, ⵠ[ⲆⵠⲆᐃ], 3, 216, 9, ⲆᐃΔ],
		[1, ⵠ[ᐃΔⵠⲆ], ⵠⵠΔⵠ, 217, 9, ΔⵠΔ],
		[1, ⵠ[3], 3, 218, ⵠⲆⵠΔⵠ, Ⲇⵠᐃ],
		[Δⵠᐃ, "b", 0, ᐃⵠᐃⲆ, 159, 0],
		[ⵠⲆⲆ, "b", 0, ΔⲆⵠⵠ, 171, ΔⲆⲆ],
		[2, ⵠ[418], 1, 122, 63, 0],
		[ⵠⵠⵠᐃ, ⵠ[418], 2, 119, 277, ΔΔᐃ],
		[2, ⵠ[418], 2, 109, 244, ᐃᐃᐃ],
		[2, ⵠ[418], 2, 114, 205, 0],
		[ᐃᐃᐃⵠ, ⵠ[418], ᐃᐃΔ, 120, 150, 0],
		[ⵠⵠⵠᐃ, ⵠ[418], 2, 154, 129, 0],
		[2, ⵠ[418], Ⲇᐃⵠ, 184, 158, ΔⲆⲆ],
		[2, ⵠ[418], 1, 208, 128, 0],
		[ᐃᐃⲆⲆ, ⵠ[418], 1, 215, 132, Ⲇᐃⵠ],
		[2, ⵠ[418], 1, 214, 128, ᐃᐃᐃ],
		[ⵠⵠⵠᐃ, ⵠ[418], ΔⵠΔ, 209, 132, 0],
		[1, ⵠ[105], 3, 217, 20, 1],
		[Δⵠᐃ, ⵠ[105], ⵠⲆⲆ, 215, ΔⲆᐃⵠⵠΔᐃ, ⵠΔᐃ],
		[ΔⵠΔ, ⵠ[105], Ⲇᐃⵠ, 212, 18, 1],
		[ⲆᐃΔ, ⵠ[105], ᐃⲆᐃⲆ, 214, ᐃⲆᐃⲆⵠ, 1],
		[Ⲇⵠᐃ, ⵠ[105], ᐃΔⵠⵠ, 216, ᐃᐃⲆⵠᐃ, ᐃᐃΔ],
		[1, ⵠ[105], 4, 211, ᐃⲆᐃΔⲆ, 1],
		[ⵠΔᐃ, ⵠ[105], 3, 210, 19, 1],
		[1, ⵠ[105], ᐃⵠΔᐃ, 215, 21, 1],
		[1, ⵠ[105], 1, 214, ᐃΔΔⲆΔ, 1],
		[1, ⵠ[105], 3, 214, 22, ᐃⲆΔ],
		[1, ⵠ[105], ⲆᐃᐃΔ, 214, 24, 1],
		[1, ⵠ[105], 4, 214, 26, 1],
		[ᐃᐃΔ, ⵠ[105], 4, 213, 27, Δⵠᐃ],
		[ΔⵠΔ, ⵠ[105], ⵠⲆⲆ, 212, 28, 1],
		[1, ⵠ[105], 2, 212, 29, 1],
		[Δⵠᐃ, ⵠ[105], 5, 212, 30, 1],
		[ⲆᐃΔ, ⵠ[105], ⵠⲆⲆⵠ, 208, ⲆᐃΔⲆΔ, 1],
		[1, ⵠ[105], 4, 207, ⲆᐃΔⲆΔ, 1],
		[Ⲇⵠᐃ, ⵠ[105], ⵠⲆⲆ, 206, 19, 1],
		[ᐃᐃΔ, ⵠ[105], 1, 205, 19, ΔⵠΔ],
		[ⵠΔᐃ, ⵠ[105], 2, 204, 19, 1],
		[1, ⵠ[105], 5, 203, 19, ⵠΔᐃ],
		[ΔⵠΔ, ⵠ[105], ᐃⵠΔⵠ, 210, 17, 1]
	];
	const ⲆΔΔⵠᐃ = ΔΔⵠΔΔ;
	var ᐃⵠ = 0;
	let Δ = {
		"ⵠⵠΔᐃⵠ": ["#133A2B", ⵠ[195]],
		"ᐃΔᐃⲆⵠⵠⵠᐃⵠ": [ⵠ[115], ⵠ[578]],
		"ᐃⵠⵠⵠⲆᐃΔ": ["#4EB687", ⵠ[577]],
		"ᐃⲆᐃᐃΔΔΔ": ["#664516", "#13474C"],
		"ᐃΔⵠᐃⲆⵠⲆ": ["#FCEFBB", "#0F4D48"],
		"ⲆΔΔᐃⵠᐃᐃ": ["#C1AA7E", "#0F423D"],
		"ⵠΔΔᐃᐃⲆⲆ": ["#594837", ⵠ[434]],
		"ⲆⵠⵠΔΔⵠᐃ": ["#A5D6D6", "#539CA0"],
		"ᐃⲆΔⵠᐃ": [ⵠ[573], ⵠ[550]],
		"ⵠΔΔΔΔⲆⵠ": [ⵠ[439], ⵠ[580]],
		"ᐃᐃΔⵠΔΔᐃ": [ⵠ[ⵠΔᐃⵠⲆ], ⵠ[537]],
		"ⲆΔⲆⵠΔⵠΔ": ["#ECF7F9", "#539CA0"],
		"ΔⲆⲆΔᐃⲆⵠ": [ⵠ[447], ⵠ[447]],
		"ΔⲆⲆᐃⵠᐃΔ": [ⵠ[447], ⵠ[447]],
		"ΔⵠΔⲆⲆΔⲆ": ["#1C9BA4", "#00272F"],
		"ⵠⵠⵠΔⲆ": ["#2D2017", "#031C1E"],
		"ⵠΔⵠ": ⵠⵠⵠ,
		"ⲆⲆⵠ": ⵠⲆⲆ,
		"ⵠΔΔⲆᐃΔⲆⲆⲆ": 2300,
		"ⵠⲆΔⵠΔⲆᐃᐃΔ": 2290,
		"ΔⲆⲆⵠⵠΔⵠ": 34,
		"ⲆΔΔⲆⲆⲆⲆ": 5,
		"ⵠⲆΔⵠⵠΔⵠ": 68,
		"ⲆⵠⵠΔⵠⵠᐃ": 34,
		"ᐃᐃⵠⲆΔᐃⵠ": 5,
		"ΔⵠⵠⵠᐃⲆⲆ": ᐃᐃΔ,
		"ΔΔⵠⲆΔᐃᐃ": .6,
		"ᐃᐃᐃⵠⲆᐃᐃ": .25,
		"ⵠΔⲆᐃᐃᐃᐃ": 50,
		"ΔⵠⵠⲆⵠΔⲆ": ᐃⵠᐃⵠⲆ,
		"ΔⵠⲆᐃᐃΔⲆ": 75,
		"ⲆⲆΔΔⲆΔⲆ": ⲆᐃΔᐃⵠ,
		"ᐃⲆⲆΔΔⵠΔ": ⲆⵠΔΔ,
		"ⵠΔᐃᐃⵠ": ᐃⵠ++,
		"ΔΔΔΔΔ": ᐃⵠ++,
		"ΔᐃⲆᐃⵠ": ᐃⵠ++,
		"ⲆⲆⵠΔΔ": ᐃⵠ++,
		"ⲆⵠⵠΔΔ": ᐃⵠ++,
		"ΔᐃⲆⵠⲆ": ᐃⵠ++,
		"ⵠΔΔⲆⲆ": ᐃⵠ++,
		"ΔᐃᐃⵠⲆ": ᐃⵠ++,
		"ΔΔⵠᐃⲆ": ᐃⵠ++,
		"ⲆΔⵠⵠᐃ": ᐃⵠ++,
		"ⵠⲆΔΔΔ": ᐃⵠ++,
		"ⵠⲆⲆΔⵠ": ᐃⵠ++,
		"ⲆⲆⵠΔⲆ": ᐃⵠ++,
		"ⲆΔΔⵠⵠ": ᐃⵠ++,
		"ᐃⵠᐃΔΔ": ᐃⵠ++,
		"ΔⵠⵠⵠΔ": ᐃⵠ++,
		"ⲆᐃⵠⲆⲆ": ᐃⵠ++,
		"ΔΔΔⲆᐃ": ᐃⵠ++,
		"ΔᐃⵠⲆᐃ": ᐃⵠ++,
		"ᐃᐃⵠⵠⵠ": ᐃⵠ++,
		"ᐃᐃⵠⲆᐃ": ᐃⵠ++,
		"ΔⲆΔΔⵠ": ᐃⵠ++,
		"ⲆΔⵠⵠⲆ": ᐃⵠ++,
		"ⲆⵠᐃΔⵠ": ᐃⵠ++,
		"ΔⲆⲆⵠΔ": ᐃⵠ++,
		"ᐃΔΔΔᐃ": ᐃⵠ++,
		"ΔᐃⵠⵠⲆ": ᐃⵠ++,
		"ⲆⲆᐃⵠⲆ": ᐃⵠ++,
		"ᐃᐃΔⲆᐃ": ᐃⵠ++,
		"ⵠᐃⵠⲆ": ᐃⵠ++,
		"ᐃⵠⲆⲆΔ": ᐃⵠ++,
		"ⲆⵠⲆᐃΔ": ᐃⵠ++,
		"ⲆⵠΔⲆⲆ": ᐃⵠ++,
		"ⵠᐃᐃᐃⲆ": ᐃⵠ++,
		"Δᐃᐃᐃⵠ": ᐃⵠ++,
		"ⲆΔΔᐃΔ": ᐃⵠ++,
		"Ⲇᐃᐃᐃᐃ": ᐃⵠ++,
		"ⵠΔⵠᐃᐃ": ᐃⵠ++,
		"ⲆᐃⵠΔⵠ": ᐃⵠ++,
		"ⵠⲆΔΔⵠ": ᐃⵠ++,
		"ⵠⲆⵠⲆⲆ": ᐃⵠ++,
		"ᐃⲆⲆᐃΔ": ᐃⵠ++,
		"ⲆⲆᐃΔⲆ": ᐃⵠ++,
		"ΔΔΔⲆΔ": ᐃⵠ++,
		"ΔⲆΔΔⲆ": ᐃⵠ++,
		"ⲆᐃΔⵠⲆ": ᐃⵠ++,
		"ΔΔΔᐃΔ": ᐃⵠ++,
		"ᐃΔⵠⵠΔ": ᐃⵠ++,
		"ᐃⵠⲆⵠΔ": ᐃⵠ++,
		"ΔⲆⵠⵠΔ": ᐃⵠ++,
		"ⲆᐃⲆⲆᐃ": ᐃⵠ++,
		"ᐃⲆᐃⲆᐃ": ᐃⵠ++,
		"ⵠⵠΔᐃΔ": ᐃⵠ++,
		"ᐃⲆΔⵠⵠ": ᐃⵠ++,
		"ⲆⵠⵠⲆᐃ": ᐃⵠ++,
		"ΔΔᐃⲆᐃ": ᐃⵠ++,
		"ⵠⵠΔⵠᐃ": ᐃⵠ++,
		"ΔᐃⲆΔⲆ": ᐃⵠ++,
		"ⲆⵠⲆΔⵠ": ᐃⵠ++,
		"ⵠⵠΔⵠⵠ": ᐃⵠ++,
		"ᐃⲆⲆⵠΔ": ᐃⵠ++,
		"ΔⲆⲆᐃⲆ": ᐃⵠ++,
		"ΔᐃⵠΔΔ": ᐃⵠ++,
		"ⵠΔⲆⵠᐃ": ᐃⵠ++,
		"ⵠᐃΔⲆᐃ": ᐃⵠ++,
		"ⲆⲆΔᐃΔ": ᐃⵠ++,
		"ΔᐃⵠᐃΔ": ᐃⵠ++,
		"ⲆΔⵠⲆᐃ": ᐃⵠ++,
		"ΔⲆᐃᐃᐃ": ᐃⵠ++,
		"ⲆᐃΔⲆᐃ": ᐃⵠ++,
		"ΔΔⵠⲆΔ": ᐃⵠ++,
		"ᐃΔⲆᐃⵠ": ᐃⵠ++,
		"ⵠΔⲆⲆΔ": ᐃⵠ++,
		"ᐃⲆⲆⵠⵠ": ᐃⵠ++,
		"ΔⵠΔⵠⲆ": ᐃⵠ++,
		"ⵠᐃΔⵠΔ": ᐃⵠ++,
		"ⵠᐃΔΔΔ": ᐃⵠ++,
		"ᐃᐃⲆⵠΔ": ᐃⵠ++,
		"ⵠⲆⲆᐃΔ": ᐃⵠ++,
		"ⵠⵠⲆΔΔ": ᐃⵠ++,
		"ᐃⲆΔΔⵠ": ᐃⵠ++,
		"ᐃΔⲆΔΔ": ᐃⵠ++,
		"ᐃΔΔΔⲆ": ᐃⵠ++,
		"ⵠΔⲆᐃⲆ": ᐃⵠ++,
		"ΔΔᐃΔΔ": ᐃⵠ++,
		"ⲆᐃⲆⵠΔ": ᐃⵠ++,
		"ⵠⵠΔⲆⲆ": ᐃⵠ++,
		"ᐃⲆⲆⲆⵠ": ᐃⵠ++,
		"ΔⵠⲆΔΔ": ᐃⵠ++,
		"ᐃΔⵠΔᐃ": ᐃⵠ++,
		"ΔⲆⵠⵠⲆ": ᐃⵠ++,
		"ΔⲆᐃⵠⵠ": ᐃⵠ++,
		"ⲆⲆⵠⵠΔ": ᐃⵠ++,
		"ⵠᐃⵠⵠⵠ": ᐃⵠ++,
		"ⵠᐃⲆᐃΔ": ᐃⵠ++,
		"ᐃΔᐃΔΔ": ᐃⵠ++,
		"ᐃᐃⵠΔⵠ": ᐃⵠ++,
		"ⲆⲆⵠΔᐃ": ᐃⵠ++,
		"ΔⲆⵠⲆⵠ": ᐃⵠ++,
		"ⲆⲆΔⵠΔ": ᐃⵠ++,
		"ᐃⲆΔΔⵠⲆⵠⲆⵠ": ᐃⵠ++,
		"ᐃⵠⲆΔΔ": ᐃⵠ++,
		"ⲆⲆᐃⲆΔ": ᐃⵠ++,
		"ᐃⲆΔΔΔ": ᐃⵠ++,
		"ⵠⵠᐃⲆⲆ": ᐃⵠ++,
		"ⵠᐃⵠⲆⵠ": ᐃⵠ++,
		"ⵠᐃᐃΔΔ": ᐃⵠ++,
		"ⵠⲆⵠⲆΔ": ᐃⵠ++,
		"ΔⲆᐃⲆⲆ": ᐃⵠ++,
		"ΔᐃⲆⵠ": ᐃⵠ++,
		"ⲆΔᐃⵠⲆ": ᐃⵠ++,
		"ᐃΔᐃⲆ": ᐃⵠ++,
		"ⲆᐃⲆᐃ": ᐃⵠ++,
		"ⵠⵠⲆⵠⵠⵠⲆ": ᐃⵠ++,
		"ᐃⵠⵠⲆᐃ": ᐃⵠ++,
		"ⵠⵠⲆΔⵠᐃⵠ": ᐃⵠ++,
		"ᐃⵠΔⵠⵠ": ᐃⵠ++,
		"ᐃⲆΔⲆⵠ": ᐃⵠ++,
		"ΔᐃⲆⲆᐃΔⲆ": ᐃⵠ++,
		"ⵠΔᐃΔᐃΔⲆ": ᐃⵠ++,
		"ⲆᐃⵠⵠⲆ": ᐃⵠ++,
		"ⲆΔΔᐃ": ᐃⵠ++,
		"ᐃⲆⲆΔⲆ": ᐃⵠ++,
		"ⲆⲆⲆⵠⲆ": ᐃⵠ++,
		"ΔΔⵠⲆᐃⵠⲆ": ᐃⵠ++,
		"ΔⵠᐃⲆⲆ": ᐃⵠ++,
		"ⵠᐃᐃΔⵠ": ᐃⵠ++,
		"ⲆⵠⲆⲆΔ": ᐃⵠ++,
		"ⲆᐃΔᐃᐃ": ᐃⵠ++,
		"ⵠⵠⵠᐃᐃ": ᐃⵠ++,
		"ⲆⵠΔᐃⲆ": ᐃⵠ++,
		"ΔⲆⵠᐃⲆ": ᐃⵠ++,
		"ΔᐃⲆⵠᐃ": ᐃⵠ++,
		"ΔᐃⵠΔⵠ": ᐃⵠ++,
		"ⵠⵠⵠⵠᐃ": ᐃⵠ++,
		"ᐃⵠΔᐃⲆ": ᐃⵠ++,
		"ⵠⲆᐃⵠⵠ": ᐃⵠ++,
		"ᐃⵠⵠΔΔ": ᐃⵠ++,
		"ΔⵠΔᐃᐃ": ᐃⵠ++,
		"Δⵠⵠⵠᐃ": ᐃⵠ++,
		"ⵠⵠⵠⵠⵠᐃᐃ": ᐃⵠ++,
		"ΔⵠᐃΔΔ": ᐃⵠ++,
		"ⵠⲆⲆᐃᐃⲆᐃ": ᐃⵠ++,
		"ⲆᐃΔⲆⲆᐃⵠ": ᐃⵠ++,
		"ⲆⲆᐃΔΔⲆΔ": ᐃⵠ++,
		"ΔΔΔⲆΔΔᐃ": ᐃⵠ++,
		"ΔⲆⵠⲆⲆ": ᐃⵠ++,
		"ᐃᐃᐃⲆᐃ": ᐃⵠ++,
		"ⲆⲆⵠⲆΔ": ᐃⵠ++,
		"ΔⵠᐃᐃⲆ": ᐃⵠ++,
		"ⲆΔⲆⵠⲆ": ᐃⵠ++,
		"ⲆⵠⲆᐃᐃ": ᐃⵠ++,
		"ᐃᐃⲆᐃΔ": ᐃⵠ++,
		"ⵠΔᐃΔΔ": ᐃⵠ++,
		"ΔⲆⵠΔⲆ": ᐃⵠ++,
		"ᐃΔⲆᐃΔ": ᐃⵠ++,
		"ⵠⵠᐃΔΔ": ᐃⵠ++,
		"ⵠⲆⲆΔⲆ": ᐃⵠ++,
		"ᐃⵠΔⲆᐃ": ᐃⵠ++,
		"ᐃᐃⲆΔⲆ": ᐃⵠ++,
		"ⲆⲆᐃⵠΔ": ᐃⵠ++,
		"ⲆⵠⵠᐃⲆ": ᐃⵠ++,
		"ΔⵠⵠⲆΔ": ᐃⵠ++,
		"ΔᐃΔⵠⵠ": ᐃⵠ++,
		"ᐃᐃᐃᐃᐃ": ᐃⵠ++,
		"ΔⲆΔᐃⵠ": ᐃⵠ++,
		"ᐃⲆⲆΔⵠΔᐃ": ᐃⵠ++,
		"ᐃⵠᐃⲆΔ": ᐃⵠ++,
		"ᐃⵠⲆΔⵠ": ᐃⵠ++,
		"ⵠⵠⵠᐃΔ": ᐃⵠ++,
		"ⵠΔΔⵠΔ": ᐃⵠ++,
		"ᐃⲆⲆⲆΔᐃⲆ": ᐃⵠ++,
		"ΔⲆᐃⵠⵠⵠⵠ": ᐃⵠ++,
		"ⲆΔⲆΔΔΔⲆ": ᐃⵠ++,
		"ΔΔⲆⲆⲆ": ᐃⵠ++,
		"ⲆΔΔⵠΔⵠΔ": ᐃⵠ++,
		"ᐃⵠΔΔΔⵠⵠ": ᐃⵠ++,
		"ᐃⵠΔⲆⲆΔⲆ": ᐃⵠ++,
		"ⵠⲆΔΔⵠⲆⵠ": ᐃⵠ++,
		"ΔᐃᐃⲆⵠⵠᐃ": ᐃⵠ++,
		"ΔⲆⵠᐃⵠΔⵠ": ᐃⵠ++,
		"ΔΔᐃⲆⵠᐃⲆ": ᐃⵠ++,
		"ΔΔΔⵠⵠᐃⲆ": ᐃⵠ++,
		"ΔᐃΔⲆⲆ": ᐃⵠ++,
		"ⵠⵠᐃⲆΔ": ᐃⵠ++,
		"ᐃⵠⵠⵠⵠ": ᐃⵠ++,
		"ⵠⵠⵠⲆᐃ": ᐃⵠ++,
		"ⲆⲆΔΔΔ": ᐃⵠ++,
		"ΔΔΔᐃⲆΔΔ": ᐃⵠ++,
		"ΔⲆᐃⲆᐃ": ᐃⵠ++,
		"ⲆᐃΔⵠᐃ": ᐃⵠ++,
		"ⲆΔⲆⵠⵠⵠᐃ": ᐃⵠ++,
		"ⲆⲆⵠΔⵠ": ᐃⵠ++,
		"ΔⲆᐃⲆᐃⵠΔ": ᐃⵠ++,
		"ᐃᐃⵠⵠⲆ": ᐃⵠ++,
		"ⵠΔⲆⲆⲆ": ᐃⵠ++,
		"ᐃⵠᐃⲆΔⵠⵠ": ᐃⵠ++,
		"ⲆᐃⵠᐃⲆⲆⵠ": ᐃⵠ++,
		"ⲆⵠᐃⲆⲆ": ᐃⵠ++,
		"ΔⲆⲆⲆᐃ": ᐃⵠ++,
		"ᐃᐃᐃΔᐃⲆᐃ": ᐃⵠ++,
		"ⲆᐃᐃΔᐃ": ᐃⵠ++,
		"ⲆᐃⲆⲆ": ᐃⵠ++,
		"ⲆᐃᐃΔⲆ": ᐃⵠ++,
		"ᐃᐃᐃΔᐃⵠⵠ": ᐃⵠ++,
		"ⲆᐃᐃᐃΔ": ᐃⵠ++,
		"ⲆⵠⵠⵠᐃΔⲆ": ᐃⵠ++,
		"ⵠⲆⵠΔⲆ": ᐃⵠ++,
		"ᐃⵠΔᐃᐃⵠΔ": ᐃⵠ++,
		"ⵠⲆⵠΔΔ": ᐃⵠ++,
		"ⲆᐃᐃⵠⲆⲆⲆ": ᐃⵠ++,
		"ⵠΔⵠⵠΔⵠΔ": ᐃⵠ++,
		"ⲆΔᐃΔᐃ": ᐃⵠ++,
		"ⲆΔΔⵠΔ": ᐃⵠ++,
		"ⵠⵠΔⲆΔ": ᐃⵠ++,
		"ⲆᐃⵠΔΔ": ᐃⵠ++,
		"ⵠⵠᐃᐃΔ": ᐃⵠ++,
		"ᐃⲆⵠⲆⲆ": ᐃⵠ++,
		"ⵠⲆΔⲆⵠ": ᐃⵠ++,
		"ΔΔⵠⵠΔ": ᐃⵠ++,
		"ⲆⵠΔⵠⵠ": ᐃⵠ++,
		"ⲆⲆᐃᐃΔ": ᐃⵠ++,
		"ⲆⲆᐃᐃⲆ": ᐃⵠ++,
		"ⲆᐃᐃⵠⲆ": ᐃⵠ++,
		"ᐃΔⲆᐃⲆ": ᐃⵠ++,
		"ⵠᐃⵠΔⵠⵠⵠ": ᐃⵠ++,
		"ᐃᐃⲆⲆᐃΔᐃ": ᐃⵠ++,
		"ⲆⲆᐃΔΔ": ᐃⵠ++,
		"ΔⲆⲆⵠΔⵠΔ": ᐃⵠ++,
		"ΔⵠᐃΔᐃ": ᐃⵠ++,
		"ΔᐃᐃΔⲆ": ᐃⵠ++,
		"ⵠⲆⲆⵠᐃ": ᐃⵠ++,
		"ⲆⵠⲆⵠᐃ": ᐃⵠ++,
		"ⲆᐃⲆⲆΔ": ᐃⵠ++,
		"ΔΔⲆΔΔΔᐃ": ᐃⵠ++,
		"ΔⵠⲆΔᐃ": ᐃⵠ++,
		"ⵠⵠⵠⵠΔ": ᐃⵠ++,
		"ᐃⲆᐃΔⵠ": ᐃⵠ++,
		"ᐃΔΔᐃⵠ": ᐃⵠ++,
		"ⵠΔᐃΔⵠ": ᐃⵠ++,
		"ΔᐃᐃΔⵠ": ᐃⵠ++,
		"ᐃᐃⲆᐃⲆ": ᐃⵠ++,
		"ΔΔⲆⲆΔ": ᐃⵠ++,
		"ⵠⵠⵠⵠΔⵠⵠ": ᐃⵠ++,
		"ᐃᐃⲆΔᐃ": ᐃⵠ++,
		"ᐃⲆΔᐃⵠ": ᐃⵠ++,
		"ΔᐃΔΔⲆΔⲆ": ᐃⵠ++,
		"ΔⲆΔΔΔ": ᐃⵠ++,
		"ⲆΔΔᐃⲆ": ᐃⵠ++,
		"ⵠⵠⲆᐃⵠⲆⲆ": ᐃⵠ++,
		"ᐃᐃⵠⵠΔ": ᐃⵠ++,
		"ⵠᐃΔΔᐃ": ᐃⵠ++,
		"ⲆⲆΔΔⵠⵠⲆ": ᐃⵠ++,
		"ⵠᐃᐃΔⵠⲆⵠ": ᐃⵠ++,
		"ⲆⵠᐃⲆⲆⵠΔ": ᐃⵠ++,
		"ᐃΔⵠⲆⵠ": ᐃⵠ++,
		"ΔᐃᐃΔΔΔⵠ": ᐃⵠ++,
		"ⲆⲆⵠⲆⲆⲆⲆ": ᐃⵠ++,
		"ⲆⲆⲆΔⲆᐃⵠ": ᐃⵠ++,
		"ⲆⵠᐃᐃΔᐃᐃ": ᐃⵠ++,
		"ΔΔⲆΔⵠ": ᐃⵠ++,
		"ΔΔᐃⵠⲆᐃⵠ": ᐃⵠ++,
		"ⵠⲆᐃΔⵠᐃΔ": ᐃⵠ++,
		"ⵠΔⵠⲆⲆⵠᐃ": ᐃⵠ++,
		"ⵠΔᐃⵠᐃ": ᐃⵠ++,
		"ᐃⲆⲆΔⵠΔⲆ": ᐃⵠ++,
		"ᐃⲆⵠΔⲆᐃᐃ": ᐃⵠ++,
		"ΔⲆᐃᐃⵠⲆᐃ": ᐃⵠ++,
		"ᐃⵠᐃᐃⲆΔᐃ": ᐃⵠ++,
		"ⲆⲆⲆⵠΔⲆⲆ": ᐃⵠ++,
		"ⵠⲆᐃⵠΔΔᐃ": ᐃⵠ++,
		"ᐃᐃΔⲆΔᐃⵠ": ᐃⵠ++,
		"ΔᐃⲆΔⵠⲆⲆ": ᐃⵠ++,
		"ᐃΔⵠⲆⵠⵠᐃ": ᐃⵠ++,
		"ΔⲆΔᐃⵠⲆᐃ": ᐃⵠ++,
		"ΔⵠⲆΔΔᐃᐃ": ᐃⵠ++,
		"ΔΔⲆⵠⲆᐃᐃ": ᐃⵠ++,
		"ⲆⵠⲆᐃⵠᐃⲆ": ᐃⵠ++,
		"ΔⲆⲆᐃⲆΔⲆ": ᐃⵠ++,
		"ⲆΔᐃΔ": ᐃⵠ++,
		"ⵠⲆᐃΔⵠ": ᐃⵠ++,
		"ⵠᐃᐃᐃΔΔΔ": ᐃⵠ++,
		"ΔᐃⲆᐃᐃΔⵠ": ᐃⵠ++,
		"ᐃⵠ": ᐃⵠ++,
		"ᐃΔⵠΔΔᐃΔ": ᐃⵠ++,
		"ᐃⲆΔΔᐃ": ᐃⵠ++,
		"ⲆΔΔΔᐃ": ᐃⵠ++,
		"ᐃⲆΔⵠΔⲆⲆ": ᐃⵠ++,
		"ⲆⲆΔⵠⲆ": ᐃⵠ++,
		"ⵠⲆᐃᐃᐃⵠΔ": ᐃⵠ++,
		"ⵠⲆⵠΔⵠⵠⲆ": ᐃⵠ++,
		"ΔⵠᐃᐃΔᐃΔ": ᐃⵠ++,
		"ΔΔᐃΔⵠᐃⲆ": ᐃⵠ++,
		"ⲆΔΔⲆⲆⵠⵠ": ᐃⵠ++,
		"ᐃᐃⲆᐃⵠ": ᐃⵠ++,
		"ⲆⵠⵠⵠⵠΔᐃ": ᐃⵠ++,
		"ᐃⲆΔⵠΔΔᐃ": ᐃⵠ++,
		"ⲆⵠᐃᐃᐃᐃΔ": ᐃⵠ++,
		"ⲆᐃΔᐃⲆⵠⲆ": ᐃⵠ++,
		"ⲆᐃⵠⲆᐃ": ᐃⵠ++,
		"ⲆⵠᐃΔΔΔΔ": ᐃⵠ++,
		"ΔΔⵠⵠⵠΔΔ": ᐃⵠ++,
		"ⵠⲆⵠⲆΔΔΔ": ᐃⵠ++,
		"ΔⵠⲆΔΔΔΔ": ᐃⵠ++,
		"ⵠⲆⵠΔΔΔᐃ": ᐃⵠ++,
		"Δᐃⵠⵠⵠⵠⵠ": ᐃⵠ++,
		"ⵠⵠΔⵠⵠⲆⲆ": ᐃⵠ++,
		"ΔΔⲆΔᐃ": ᐃⵠ++,
		"ⵠᐃᐃᐃᐃⲆΔ": ᐃⵠ++,
		"ᐃⵠⵠᐃᐃᐃΔ": ᐃⵠ++,
		"ⵠⵠⲆⵠⲆΔⵠ": ᐃⵠ++,
		"ⲆⲆᐃΔⲆⲆⲆ": ᐃⵠ++,
		"ΔᐃΔΔΔΔᐃ": ᐃⵠ++,
		"ⵠᐃⲆⲆΔⲆΔ": ᐃⵠ++,
		"ⲆⲆᐃⲆⵠⲆⲆ": ᐃⵠ++,
		"ᐃΔⵠⵠᐃⲆⲆ": ᐃⵠ++,
		"ᐃΔᐃⲆΔΔⲆ": ᐃⵠ++,
		"ΔⵠΔᐃᐃΔⵠ": ᐃⵠ++,
		"ᐃΔⲆⲆΔΔΔ": ᐃⵠ++,
		"ⵠⵠⵠΔΔᐃΔ": ᐃⵠ++,
		"ᐃⵠⵠᐃⵠΔⵠ": ᐃⵠ++,
		"ⵠΔΔᐃⲆ": ᐃⵠ++,
		"ᐃᐃΔΔᐃᐃΔ": ᐃⵠ++,
		"ᐃⲆᐃᐃᐃⵠⲆ": ᐃⵠ++,
		"ⲆⲆΔⲆΔΔⵠ": ᐃⵠ++,
		"ⲆⵠᐃΔᐃΔᐃ": ᐃⵠ++,
		"ⵠⲆⵠᐃᐃⵠⲆ": ᐃⵠ++,
		"ᐃⲆᐃⵠΔⲆᐃ": ᐃⵠ++,
		"ⵠᐃᐃΔᐃΔⵠ": ᐃⵠ++,
		"ΔΔⵠΔⲆᐃⵠ": ᐃⵠ++,
		"ᐃᐃⲆⵠⲆΔΔ": ᐃⵠ++,
		"ⵠΔⵠⲆᐃᐃⵠ": ᐃⵠ++,
		"ⲆⲆⵠΔⵠΔⵠ": ᐃⵠ++,
		"ᐃΔᐃⲆᐃᐃⲆ": ᐃⵠ++,
		"ⲆⲆΔⵠᐃⲆⵠ": ᐃⵠ++,
		"ⵠⵠΔΔᐃⲆᐃ": ᐃⵠ++,
		"ΔⲆΔᐃⲆⵠᐃ": ᐃⵠ++,
		"ⵠⵠᐃΔⵠⵠᐃ": ᐃⵠ++,
		"ⲆⲆΔⲆΔⵠᐃ": ᐃⵠ++,
		"ᐃᐃΔΔΔᐃⲆ": ᐃⵠ++,
		"ⲆⵠΔⵠⵠΔⲆ": ᐃⵠ++,
		"ΔⵠᐃⲆⲆⲆⵠ": ᐃⵠ++,
		"ΔⵠΔᐃⵠⵠⵠ": ᐃⵠ++,
		"ᐃᐃⵠⲆᐃᐃⲆ": ᐃⵠ++,
		"ⲆⵠⵠΔᐃᐃⲆ": ᐃⵠ++,
		"ⵠΔⵠᐃⵠΔᐃ": ᐃⵠ++,
		"ΔΔΔⵠⵠᐃΔ": ᐃⵠ++,
		"ᐃⵠⲆᐃΔⵠΔⵠⲆ": ᐃⵠ++,
		"ⵠΔΔᐃⵠΔⵠ": ᐃⵠ++,
		"ΔⵠⵠᐃⵠᐃⲆ": ᐃⵠ++,
		"ⲆⵠΔΔⲆⵠⵠ": ᐃⵠ++,
		"ⵠᐃᐃΔᐃΔᐃ": ᐃⵠ++,
		"ᐃⵠⲆⲆⲆΔᐃ": ᐃⵠ++,
		"ΔⵠᐃⵠⲆΔⵠ": ᐃⵠ++,
		"ΔⵠΔΔⵠΔⵠ": ᐃⵠ++,
		"ⵠΔⵠⵠᐃΔⲆ": ᐃⵠ++,
		"ⵠᐃⲆⵠⲆᐃΔ": ᐃⵠ++,
		"ⵠΔⵠΔΔⲆᐃ": ᐃⵠ++,
		"ⵠΔΔΔᐃⵠⲆ": ᐃⵠ++,
		"ΔⵠⵠⲆⵠⲆⲆ": ᐃⵠ++,
		"ⲆⲆⵠᐃⵠⲆⲆ": ᐃⵠ++,
		"ΔⲆⲆΔⵠΔⲆ": ᐃⵠ++,
		"ΔᐃΔⵠΔⲆⲆ": ᐃⵠ++,
		"ΔⲆⵠⲆΔⵠΔ": ᐃⵠ++,
		"ᐃⲆⵠᐃⵠⵠⲆ": ᐃⵠ++,
		"ⲆⲆⲆΔΔⵠⵠ": ᐃⵠ++,
		"ΔᐃⲆᐃⵠᐃⵠ": ᐃⵠ++,
		"ᐃⵠⵠⵠⵠⲆⵠ": ᐃⵠ++,
		"ΔᐃⵠⵠΔⵠΔ": ᐃⵠ++,
		"ⵠⲆⲆᐃΔⵠⲆ": ᐃⵠ++,
		"ᐃΔΔᐃⲆᐃᐃ": ᐃⵠ++,
		"ᐃΔⵠᐃᐃⲆⵠ": ᐃⵠ++,
		"ⵠⲆⲆΔⵠⵠΔ": ᐃⵠ++,
		"ᐃΔⵠᐃΔᐃⲆ": ᐃⵠ++,
		"ⲆⲆⵠⲆΔᐃᐃ": ᐃⵠ++,
		"ⵠⵠⲆⵠᐃΔⲆ": ᐃⵠ++,
		"ΔⵠΔᐃᐃⲆⲆ": ᐃⵠ++,
		"ⲆΔⵠᐃᐃⲆⵠ": ᐃⵠ++,
		"ᐃⲆᐃᐃⲆΔⵠ": ᐃⵠ++,
		"ΔⵠⵠΔⵠⵠΔ": ᐃⵠ++,
		"ⲆⵠΔⵠᐃΔⵠ": ᐃⵠ++,
		"ᐃΔᐃΔΔᐃⵠ": ᐃⵠ++,
		"ⵠΔⲆᐃⵠⲆⵠ": ᐃⵠ++,
		"ⵠⵠᐃᐃⲆᐃᐃ": ᐃⵠ++,
		"ⵠⲆⲆⵠⲆⵠⲆ": ᐃⵠ++,
		"ΔᐃΔⵠᐃⲆᐃ": ᐃⵠ++,
		"ΔᐃⲆᐃᐃⵠᐃ": ᐃⵠ++,
		"ⵠΔᐃⵠⲆⲆⲆ": ᐃⵠ++,
		"ⲆⲆΔΔᐃΔⵠ": ᐃⵠ++,
		"ⲆΔⲆΔⲆΔⲆ": ᐃⵠ++,
		"ᐃᐃⵠΔⵠⵠᐃ": ᐃⵠ++,
		"ⲆᐃⲆᐃΔᐃⲆ": ᐃⵠ++,
		"ΔΔⵠᐃΔⵠᐃ": ᐃⵠ++,
		"ᐃⲆⵠⵠⲆΔⲆ": ᐃⵠ++,
		"ᐃⵠΔⲆᐃΔΔ": ᐃⵠ++,
		"ᐃΔᐃⵠⲆⲆΔ": ᐃⵠ++,
		"ⵠᐃΔⲆⵠⲆⲆ": ᐃⵠ++,
		"ᐃᐃᐃᐃΔⵠΔ": ᐃⵠ++,
		"ⵠᐃΔⲆΔᐃᐃ": ᐃⵠ++,
		"ⵠΔⵠΔⲆᐃⵠ": ᐃⵠ++,
		"ᐃΔᐃΔⲆⵠᐃ": ᐃⵠ++,
		"ⵠΔⵠⵠᐃⵠΔ": ᐃⵠ++,
		"ⵠⵠᐃⵠⵠᐃΔ": ᐃⵠ++,
		"ⲆⵠΔⲆᐃΔⲆ": ᐃⵠ++,
		"ⵠΔΔⲆᐃΔⲆ": ᐃⵠ++,
		"ⵠΔΔᐃⵠⵠΔ": ᐃⵠ++,
		"ⵠᐃΔᐃⵠΔᐃ": ᐃⵠ++,
		"ΔΔⵠᐃⵠᐃⲆ": ᐃⵠ++,
		"ΔΔΔⲆⵠᐃᐃ": ᐃⵠ++,
		"ΔᐃⵠⲆⵠⵠⵠ": ᐃⵠ++,
		"ⵠⵠⵠᐃᐃᐃⲆ": ᐃⵠ++,
		"ΔⵠΔⲆΔⵠⵠ": ᐃⵠ++,
		"ⵠⵠᐃⵠᐃⲆⵠ": ᐃⵠ++,
		"ⵠΔᐃᐃⲆ": ᐃⵠ++,
		"ⵠⲆⲆᐃⵠⲆⲆᐃⲆ": ᐃⵠ++,
		"Δᐃᐃᐃᐃ": ᐃⵠ++,
		"ᐃΔᐃΔⲆ": ᐃⵠ++,
		"ⲆⵠΔⲆᐃⵠⵠᐃᐃ": ᐃⵠ++,
		"ⲆᐃᐃⵠⲆⲆⵠ": ᐃⵠ++,
		"ⲆⵠⵠΔⵠ": ᐃⵠ++,
		"ΔⵠΔᐃΔΔᐃ": ᐃⵠ++,
		"ΔⲆᐃᐃⲆΔⲆ": ᐃⵠ++,
		"ᐃᐃⵠⵠΔᐃⲆ": ᐃⵠ++,
		"ΔᐃᐃᐃᐃⲆⵠ": ᐃⵠ++,
		"ΔᐃⲆᐃΔⲆΔ": ᐃⵠ++,
		"ᐃⲆΔᐃΔΔⵠ": ᐃⵠ++,
		"ⵠⵠᐃⵠⵠⲆΔ": ᐃⵠ++,
		"ⲆⵠᐃᐃⲆΔΔ": ᐃⵠ++,
		"ΔᐃⵠΔΔⵠᐃ": ᐃⵠ++,
		"ⲆⲆⲆⲆᐃⲆᐃ": ᐃⵠ++,
		"ⵠᐃᐃⲆⵠΔⵠ": ᐃⵠ++,
		"ᐃⵠⲆⵠⲆⵠⵠ": ᐃⵠ++,
		"ΔⲆΔΔΔᐃᐃ": ᐃⵠ++,
		"ᐃᐃⲆⲆⲆᐃᐃ": ᐃⵠ++,
		"ⵠⲆᐃᐃⲆⲆⲆ": ᐃⵠ++,
		"ᐃⵠⵠⵠⵠᐃⲆ": ᐃⵠ++,
		"ⲆⵠΔᐃΔⲆⵠ": ᐃⵠ++,
		"ᐃᐃⲆⵠᐃᐃⵠ": ᐃⵠ++,
		"ⲆΔᐃⲆᐃⲆⵠ": ᐃⵠ++,
		"ⵠⵠⵠⲆΔᐃⲆ": ᐃⵠ++,
		"ⲆᐃᐃᐃΔⵠⵠ": ᐃⵠ++,
		"ⵠᐃⲆᐃᐃⵠᐃ": ᐃⵠ++,
		"ΔⵠᐃⲆⵠᐃⲆ": ᐃⵠ++,
		"ⵠⵠΔΔᐃⵠᐃ": ᐃⵠ++,
		"ⲆⲆⲆⵠΔⲆⲆⲆⲆ": ᐃⵠ++,
		"ⵠᐃⵠΔⵠ": ᐃⵠ++,
		"ᐃⵠᐃⲆⵠΔΔ": ᐃⵠ++,
		"ᐃᐃⲆᐃⵠᐃⲆ": ᐃⵠ++,
		"ΔΔᐃΔⲆⲆᐃΔⲆ": ᐃⵠ++,
		"ⵠᐃⲆⲆᐃ": ᐃⵠ++,
		"ⵠⵠᐃⵠΔ": ᐃⵠ++,
		"ᐃᐃⵠⲆᐃΔⲆ": ᐃⵠ++,
		"ⵠⵠᐃⲆΔⵠⲆ": ᐃⵠ++,
		"ᐃⲆΔⵠᐃⵠⵠ": ᐃⵠ++,
		"ⵠᐃⵠⲆᐃⵠΔ": ᐃⵠ++,
		"ᐃⵠⵠᐃⵠᐃⵠ": ᐃⵠ++,
		"ⵠⵠΔᐃⵠΔΔ": ᐃⵠ++,
		"ⵠΔᐃᐃΔⵠⲆ": ᐃⵠ++,
		"ⲆⲆⲆᐃᐃⲆⵠ": ᐃⵠ++,
		"ⵠᐃⵠΔⲆᐃⵠ": ᐃⵠ++,
		"ⲆᐃΔⲆⲆⲆΔ": ᐃⵠ++,
		"ⲆⲆΔⲆΔⲆⲆ": ᐃⵠ++,
		"ⲆΔᐃⲆᐃᐃⵠ": ᐃⵠ++,
		"ᐃᐃΔᐃⲆⵠᐃ": ᐃⵠ++,
		"ⲆΔⵠⲆⲆⵠΔ": ᐃⵠ++,
		"ⲆᐃΔⵠᐃⵠΔ": ᐃⵠ++,
		"ⲆΔⵠᐃⲆᐃⲆ": ᐃⵠ++,
		"ᐃᐃᐃⵠᐃⵠᐃ": ᐃⵠ++,
		"ⵠⵠⵠΔⵠᐃⵠ": ᐃⵠ++,
		"ΔⲆⵠΔΔⲆΔ": ᐃⵠ++,
		"ⲆΔⵠᐃΔⵠΔ": ᐃⵠ++,
		"ΔΔᐃΔΔᐃΔ": ᐃⵠ++,
		"ⲆΔⵠⵠⵠᐃᐃ": ᐃⵠ++,
		"ⲆᐃΔᐃᐃⵠΔ": ᐃⵠ++,
		"ΔⲆΔⲆⵠⲆⲆ": ᐃⵠ++,
		"ΔᐃⵠΔⲆⲆⵠ": ᐃⵠ++,
		"ⲆⲆⲆⵠⲆⲆⵠ": ᐃⵠ++,
		"ⲆᐃⵠΔΔᐃΔ": ᐃⵠ++,
		"ᐃⲆⲆⲆΔΔⲆ": ᐃⵠ++,
		"ΔⲆᐃᐃⲆᐃⲆ": ᐃⵠ++,
		"ⲆᐃⵠⲆᐃΔⵠ": ᐃⵠ++,
		"ᐃⵠⲆΔᐃⲆⵠ": ᐃⵠ++,
		"ⲆΔᐃΔⵠᐃⲆ": ᐃⵠ++,
		"ΔⵠⲆⲆΔΔⵠ": ᐃⵠ++,
		"ᐃⵠⵠⵠᐃⲆⵠ": ᐃⵠ++,
		"ⲆᐃⲆⲆⵠⵠᐃ": ᐃⵠ++,
		"ⵠΔΔΔⲆΔᐃ": ᐃⵠ++,
		"ᐃᐃⲆⲆⲆⲆⲆ": ᐃⵠ++,
		"ⵠᐃⵠⵠΔⲆᐃ": ᐃⵠ++,
		"ⵠⵠⵠΔΔΔᐃ": ᐃⵠ++,
		"ⵠⲆᐃⵠΔⵠⲆ": ᐃⵠ++,
		"ⵠᐃΔⵠⲆᐃΔ": ᐃⵠ++,
		"ⲆΔΔⲆΔΔᐃ": ᐃⵠ++,
		"ⲆⵠⵠΔⲆΔᐃ": ᐃⵠ++,
		"ⵠΔΔΔΔⲆⲆ": ᐃⵠ++,
		"ᐃⵠΔᐃⲆΔⲆ": ᐃⵠ++,
		"ⵠⲆΔⵠᐃⵠⵠ": ᐃⵠ++,
		"ⲆⵠΔⵠᐃΔᐃ": ᐃⵠ++,
		"ⲆᐃⵠᐃⲆⲆΔ": ᐃⵠ++,
		"ⵠᐃⲆΔΔⵠⵠ": ᐃⵠ++,
		"ⲆⵠΔΔⵠⲆⵠ": ᐃⵠ++,
		"ⵠΔⵠᐃⲆⵠᐃ": ᐃⵠ++,
		"ᐃᐃΔᐃΔⲆⵠ": ᐃⵠ++,
		"ⲆⵠΔᐃΔⵠⲆ": ᐃⵠ++,
		"ΔΔⵠΔⲆΔΔ": ᐃⵠ++,
		"ⵠΔΔⲆⲆⵠⲆ": ᐃⵠ++,
		"ᐃⵠΔΔⲆᐃⲆ": ᐃⵠ++,
		"ⲆᐃΔⵠᐃⵠΔ": ᐃⵠ++,
		"ⵠⵠΔΔⵠⵠᐃ": ᐃⵠ++,
		"ⵠΔⵠⵠᐃᐃⵠ": ᐃⵠ++,
		"ΔΔᐃᐃⵠᐃⵠ": ᐃⵠ++,
		"ΔⲆᐃⵠᐃⲆⲆ": ᐃⵠ++,
		"ⲆΔᐃᐃᐃⲆⲆ": ᐃⵠ++,
		"ΔΔⲆⵠᐃΔᐃ": ᐃⵠ++,
		"ΔΔⲆᐃΔΔᐃ": ᐃⵠ++,
		"ᐃⵠᐃᐃⵠΔᐃ": ᐃⵠ++,
		"ⵠᐃΔΔΔⵠΔ": ᐃⵠ++,
		"ⲆᐃᐃᐃΔⲆⲆ": ᐃⵠ++,
		"ΔΔⲆΔⲆΔΔ": ᐃⵠ++,
		"ΔⲆⵠᐃⵠⵠⲆ": ᐃⵠ++,
		"ᐃⲆΔⵠᐃⲆᐃ": ᐃⵠ++,
		"ΔⲆᐃⵠⲆⵠΔ": ᐃⵠ++,
		"ᐃΔᐃΔⵠᐃⵠ": ᐃⵠ++,
		"ΔⵠΔⲆᐃᐃΔ": ᐃⵠ++,
		"ⵠⵠⵠⵠᐃΔᐃ": ᐃⵠ++,
		"ⲆᐃⲆⲆᐃᐃⲆ": ᐃⵠ++,
		"ᐃⵠΔⵠⵠΔᐃ": ᐃⵠ++,
		"ⲆⲆⵠᐃⲆΔⲆ": ᐃⵠ++,
		"ΔΔΔⵠΔⵠⲆ": ᐃⵠ++,
		"ⲆⲆᐃⲆⵠᐃᐃ": ᐃⵠ++,
		"ⲆᐃΔⵠᐃⲆⲆ": ᐃⵠ++,
		"ΔⲆⵠᐃᐃᐃΔ": ᐃⵠ++,
		"ᐃⵠⲆᐃΔⵠⲆ": ᐃⵠ++,
		"ⲆᐃⲆᐃΔⲆΔ": ᐃⵠ++,
		"ΔⲆᐃⵠᐃⵠᐃ": ᐃⵠ++,
		"ΔΔⵠⲆᐃᐃⲆ": ᐃⵠ++,
		"ᐃⵠΔΔᐃᐃΔ": ᐃⵠ++,
		"ΔⵠΔⵠᐃᐃΔ": ᐃⵠ++,
		"ⵠⲆᐃᐃⵠᐃᐃ": ᐃⵠ++,
		"ᐃΔΔⵠᐃᐃᐃⵠΔ": ᐃⵠ++,
		"ᐃⲆⵠⵠΔⵠⲆ": ᐃⵠ++,
		"ᐃᐃⲆⵠⲆΔⵠ": ᐃⵠ++,
		"ⲆⲆΔᐃΔΔⲆ": ᐃⵠ++,
		"ΔᐃΔᐃΔΔᐃ": ᐃⵠ++,
		"ΔᐃΔᐃΔΔᐃⲆⵠ": ᐃⵠ++,
		POINTS: ᐃⵠ++,
		"ⵠᐃᐃᐃⵠᐃⵠ": ᐃⵠ++,
		"ΔᐃⵠⲆᐃⵠᐃ": ᐃⵠ++,
		"ⲆⵠᐃΔⵠⲆⵠ": ᐃⵠ++,
		"ᐃⵠᐃⲆⲆⲆΔ": ᐃⵠ++,
		"ᐃΔᐃΔΔⵠⲆ": ᐃⵠ++,
		"ⵠⵠⲆⵠΔᐃᐃ": ᐃⵠ++,
		"ⵠⵠⲆⵠΔⵠᐃ": ᐃⵠ++,
		"ᐃᐃΔᐃΔΔⵠ": ᐃⵠ++,
		"ⲆᐃΔΔᐃΔⲆ": ᐃⵠ++,
		"ᐃⵠⵠᐃΔⲆᐃ": ᐃⵠ++,
		"ᐃⵠᐃⲆⲆⵠⲆ": ᐃⵠ++,
		"ΔᐃᐃⵠⲆⲆⵠ": ᐃⵠ++,
		"ⲆⲆⵠᐃΔⲆⵠ": ᐃⵠ++,
		"ᐃᐃᐃⲆᐃᐃᐃ": ᐃⵠ++,
		"ΔΔⵠΔΔⲆᐃ": ᐃⵠ++,
		"ᐃⵠᐃᐃᐃⵠΔ": ᐃⵠ++,
		"ⵠΔⵠⵠⵠⵠⲆ": ᐃⵠ++,
		"ΔᐃⲆⲆΔⲆᐃ": ᐃⵠ++,
		"ⵠᐃⲆⲆⵠΔΔ": ᐃⵠ++,
		"ⲆⵠΔΔᐃⵠΔ": ᐃⵠ++,
		"ⵠⲆΔᐃⲆⲆΔ": ᐃⵠ++,
		"ᐃⲆⲆΔΔⲆᐃ": ᐃⵠ++,
		"ΔⲆⲆΔΔᐃⲆ": ᐃⵠ++,
		"ⲆᐃⲆⲆⲆⵠⲆ": ᐃⵠ++,
		"ⵠⲆⵠⵠⵠᐃⵠ": ᐃⵠ++,
		"ᐃᐃᐃᐃⵠⲆᐃ": ᐃⵠ++,
		"ᐃΔⲆⲆⲆⲆⲆ": ᐃⵠ++,
		"ᐃⲆΔᐃᐃⵠⵠ": ᐃⵠ++,
		"ΔⵠⵠΔⵠΔᐃ": ᐃⵠ++,
		"ᐃΔᐃᐃⵠⵠΔ": ᐃⵠ++,
		"ⲆᐃⵠⲆΔⲆⵠ": ᐃⵠ++,
		"ᐃⵠΔᐃΔᐃΔ": ᐃⵠ++,
		"ᐃᐃⲆΔΔᐃΔ": ᐃⵠ++,
		"ΔᐃᐃⵠᐃⲆΔ": ᐃⵠ++,
		"ΔⲆⲆⵠᐃᐃΔ": ᐃⵠ++,
		"ⵠᐃⲆᐃⵠΔΔ": ᐃⵠ++,
		"ⵠΔᐃⵠⵠΔⵠ": ᐃⵠ++,
		"ᐃⲆⲆⲆᐃⲆⲆ": ᐃⵠ++,
		"ᐃⵠⲆᐃᐃⲆⵠ": ᐃⵠ++,
		"ΔⵠᐃΔⵠⲆⵠ": ᐃⵠ++,
		"ΔⲆⵠⲆᐃΔᐃ": ᐃⵠ++,
		"ᐃᐃⲆΔⲆⵠΔ": ᐃⵠ++,
		"ⲆⵠΔⵠⵠⲆⲆ": ᐃⵠ++,
		"ΔΔᐃⲆΔⵠⵠ": ᐃⵠ++,
		"ⵠⵠΔⵠᐃⲆᐃ": ᐃⵠ++,
		"ᐃΔⲆⲆⲆᐃΔ": ᐃⵠ++,
		"ⲆΔⵠᐃᐃΔΔ": ᐃⵠ++,
		"ⲆⲆΔⲆᐃΔΔⲆⲆ": ᐃⵠ++,
		"ᐃᐃⲆⵠΔᐃⵠ": ᐃⵠ++,
		"ⲆΔΔᐃᐃⵠΔᐃΔ": ᐃⵠ++,
		"ΔⲆᐃⵠⵠΔⵠ": ᐃⵠ++,
		"ΔⵠΔΔᐃⵠΔⵠᐃ": ᐃⵠ++,
		"ⵠᐃΔΔᐃⲆⲆΔΔ": ᐃⵠ++,
		"ⲆⲆᐃⲆᐃⲆⲆⵠΔ": ᐃⵠ++,
		"ⲆᐃᐃΔᐃⲆⵠᐃⲆ": ᐃⵠ++,
		"ᐃⵠᐃΔΔⵠΔⵠⲆ": ᐃⵠ++,
		"ᐃΔΔⵠⵠⵠⵠ": ᐃⵠ++,
		"ⵠᐃⲆⲆΔ": ᐃⵠ++,
		"ΔΔᐃⲆᐃⲆⲆ": ᐃⵠ++,
		"ⵠᐃΔⲆΔΔⵠ": ᐃⵠ++,
		"ᐃᐃΔⲆᐃⵠⵠ": ᐃⵠ++,
		"ⵠᐃΔⲆΔᐃⵠⲆⲆ": ᐃⵠ++,
		"ᐃⲆⲆᐃᐃⵠΔ": ᐃⵠ++,
		"ᐃᐃᐃΔⲆΔⵠ": ᐃⵠ++,
		"ΔᐃⵠⵠⵠⵠΔ": ᐃⵠ++,
		"ᐃᐃΔⵠΔⵠⵠ": ᐃⵠ++,
		"ⲆⵠᐃⵠⲆⲆΔ": ᐃⵠ++,
		"ⵠΔΔᐃΔⲆᐃ": ᐃⵠ++,
		"ⵠⲆⵠᐃᐃⲆⵠ": ᐃⵠ++,
		"ⵠⲆⵠⲆΔⵠΔ": ᐃⵠ++,
		"ᐃᐃⲆΔⲆⲆⲆ": ᐃⵠ++,
		"ΔΔⲆΔⵠΔⲆ": ᐃⵠ++,
		"ⵠⵠᐃⵠⲆΔⵠ": ᐃⵠ++,
		"ᐃᐃᐃⲆⲆ": ᐃⵠ++,
		"ⲆⲆⲆⵠΔ": ᐃⵠ++,
		"ⵠⲆΔⵠΔ": ᐃⵠ++,
		"ⲆᐃΔⲆᐃᐃⲆⵠⵠ": ᐃⵠ++,
		"ⲆⲆᐃⲆᐃⲆⲆ": ᐃⵠ++,
		"ⵠᐃⵠⵠΔⵠΔ": ᐃⵠ++,
		"ⵠⲆᐃⲆΔⲆΔ": ᐃⵠ++,
		"ΔⲆⵠᐃⲆΔΔ": ᐃⵠ++,
		"ⵠΔΔⲆⵠᐃⵠ": ᐃⵠ++,
		"ΔᐃⲆᐃᐃⵠⲆ": ᐃⵠ++,
		"ⵠΔⵠⵠⲆⲆⲆ": ᐃⵠ++,
		"ⲆᐃⵠⲆⵠΔⵠ": ᐃⵠ++,
		"ⵠⲆᐃᐃᐃᐃΔ": ᐃⵠ++,
		"ⲆΔᐃᐃⵠΔᐃ": ᐃⵠ++,
		"ΔᐃⲆⵠⵠⲆᐃ": ᐃⵠ++,
		"ᐃΔⵠⵠⲆΔᐃ": ᐃⵠ++,
		"ⲆΔᐃᐃⵠΔⵠ": ᐃⵠ++,
		"ᐃⵠΔⵠΔⲆⲆ": ᐃⵠ++,
		"ΔⲆⵠⲆᐃ": ᐃⵠ++,
		"ⲆⵠΔᐃᐃΔⲆ": ᐃⵠ++,
		"ⲆⵠⲆⲆⲆⲆᐃ": ᐃⵠ++,
		"ᐃΔⲆⲆⲆΔΔ": ᐃⵠ++,
		"ⵠⵠⲆΔᐃⲆⲆ": ᐃⵠ++,
		"ⲆⵠΔⵠᐃᐃᐃ": ᐃⵠ++,
		"ᐃΔΔⲆΔⵠⲆ": ᐃⵠ++,
		"ⵠᐃᐃᐃⲆⲆΔ": ᐃⵠ++,
		"ᐃⲆΔᐃΔⵠΔ": ᐃⵠ++,
		"ⲆΔᐃΔᐃⵠᐃ": ᐃⵠ++,
		"ⵠⲆᐃⵠΔⲆⵠ": ᐃⵠ++,
		"ⵠⲆⲆΔΔⵠⵠ": ᐃⵠ++,
		"ⵠᐃⵠⵠᐃⵠᐃ": ᐃⵠ++,
		"ΔⲆⵠⵠⵠⲆΔ": ᐃⵠ++,
		"ⲆⵠΔⲆΔᐃⲆ": ᐃⵠ++,
		"ᐃΔⲆᐃΔΔⲆ": ᐃⵠ++,
		"ᐃⵠᐃΔⵠⵠΔ": ᐃⵠ++,
		"ⵠⵠΔⲆⵠΔⵠ": ᐃⵠ++,
		"ⵠᐃⵠⵠⲆⲆᐃ": ᐃⵠ++,
		"ⲆΔΔᐃᐃᐃΔ": ᐃⵠ++,
		"ᐃⵠᐃᐃΔΔᐃ": ᐃⵠ++,
		"ⲆⵠΔⲆΔⲆⵠ": ᐃⵠ++,
		"ⵠⵠᐃⲆⲆᐃⲆ": ᐃⵠ++,
		"ΔⲆⵠⵠΔᐃⲆ": ᐃⵠ++,
		"ⲆⲆⲆΔᐃⵠΔ": ᐃⵠ++,
		"ⵠⵠᐃⲆΔᐃⲆ": ᐃⵠ++,
		"ⵠⲆⵠᐃⵠᐃⵠ": ᐃⵠ++,
		"ΔⲆⵠᐃⵠⲆΔ": ᐃⵠ++,
		"ᐃⲆⵠΔᐃⲆⲆ": ᐃⵠ++,
		"ᐃᐃΔΔⲆᐃⵠ": ᐃⵠ++,
		"ΔⵠΔⲆⵠⵠⵠ": ᐃⵠ++,
		"ⵠΔᐃⵠⲆⵠⲆ": ᐃⵠ++,
		"ⲆⲆⵠⵠⲆΔᐃ": ᐃⵠ++,
		"ⲆⲆᐃⵠⵠⵠΔ": ᐃⵠ++,
		"ⵠⵠᐃᐃΔⵠᐃ": ᐃⵠ++,
		"ΔᐃᐃⵠΔⲆⲆ": ᐃⵠ++,
		"ΔⵠΔᐃⲆ": ᐃⵠ++,
		"ΔΔⲆΔⲆⲆᐃ": ᐃⵠ++,
		"ᐃⲆΔⲆᐃᐃⵠ": ᐃⵠ++,
		"ᐃⲆⲆᐃⵠ": ᐃⵠ++,
		"ᐃᐃⵠᐃⵠᐃΔⵠⲆ": ᐃⵠ++,
		"ᐃΔⲆᐃΔⲆΔ": ᐃⵠ++,
		"ᐃⵠⲆᐃᐃ": ᐃⵠ++,
		"ΔⲆᐃⵠᐃⲆⵠ": ᐃⵠ++,
		"ⵠⲆⵠⵠⲆΔⵠ": ᐃⵠ++,
		"ⲆⲆⲆⵠⵠΔⲆ": ᐃⵠ++,
		"ᐃⲆⲆⲆⵠᐃΔ": ᐃⵠ++,
		"ΔᐃᐃᐃⲆⲆⵠ": ᐃⵠ++,
		"ᐃⵠΔΔⲆⲆⲆ": ᐃⵠ++,
		"ᐃⲆⵠⲆᐃⲆᐃ": ᐃⵠ++,
		"ᐃᐃᐃⵠᐃⵠΔ": ᐃⵠ++,
		"ᐃⵠⵠⲆⲆⲆⵠ": ᐃⵠ++,
		"ᐃΔΔⲆΔᐃΔ": ᐃⵠ++,
		"ⵠⲆⲆⲆΔΔⲆ": ᐃⵠ++,
		"ⲆΔᐃΔΔ": ᐃⵠ++,
		"ⵠⵠᐃⵠᐃ": ᐃⵠ++,
		"ᐃⵠⵠⲆⵠ": ᐃⵠ++,
		"ᐃⵠⵠᐃⲆ": ᐃⵠ++,
		"ᐃⲆΔᐃⲆ": ᐃⵠ++,
		"ΔⲆΔⲆⵠΔΔ": ᐃⵠ++,
		"ⵠΔⲆΔᐃⲆᐃ": ᐃⵠ++,
		"ⵠⵠΔⵠⲆᐃⲆ": ᐃⵠ++,
		"ΔⵠᐃⲆΔⵠⲆ": ᐃⵠ++,
		"ⲆΔᐃΔⵠⲆⲆ": ᐃⵠ++,
		"ΔΔᐃᐃⲆΔΔ": ᐃⵠ++,
		"ⵠᐃⲆⲆⲆⵠⲆ": ᐃⵠ++,
		"ΔᐃᐃᐃⲆⵠᐃ": ᐃⵠ++,
		"ⵠⵠᐃΔⲆⵠΔ": ᐃⵠ++,
		"ᐃⲆⲆⵠᐃⵠⵠ": ᐃⵠ++,
		"ⵠⵠᐃΔΔⲆΔ": ᐃⵠ++,
		"ⵠⲆᐃⵠᐃᐃΔ": ᐃⵠ++,
		"ΔΔⵠΔΔⵠᐃ": ᐃⵠ++,
		"ᐃᐃᐃᐃⲆⲆⲆ": ᐃⵠ++,
		"ᐃΔᐃⲆᐃΔΔ": ᐃⵠ++,
		"ⵠⲆΔΔⲆΔⲆ": ᐃⵠ++,
		"ᐃᐃΔⲆⲆᐃΔ": ᐃⵠ++,
		"ⵠⲆⲆⲆⵠᐃⵠ": ᐃⵠ++,
		"ΔΔⲆΔⲆⵠⵠ": ᐃⵠ++,
		"ⵠΔΔⵠᐃΔⵠ": ᐃⵠ++,
		"ⲆⵠⵠᐃⵠⵠΔ": ᐃⵠ++,
		"ⵠᐃⵠΔΔⵠᐃ": ᐃⵠ++,
		"ⵠΔⵠΔᐃⵠΔ": ᐃⵠ++,
		"ᐃΔᐃⲆⲆⲆⲆ": ᐃⵠ++,
		"ⵠᐃⵠΔⲆⵠΔ": ᐃⵠ++,
		"ΔⵠⵠⲆⵠΔⵠᐃⲆ": ᐃⵠ++,
		"ⲆⲆᐃᐃᐃΔⲆ": ᐃⵠ++,
		"ⵠⵠⵠⲆᐃᐃΔ": ᐃⵠ++,
		"ᐃᐃⲆᐃⵠⲆⲆ": ᐃⵠ++,
		"ⲆᐃⲆΔᐃⲆⵠ": ᐃⵠ++,
		"ⵠⵠⲆΔΔᐃⵠ": ᐃⵠ++,
		"ⵠᐃⲆⵠⵠ": ᐃⵠ++,
		"ⲆᐃⲆΔⲆ": ᐃⵠ++,
		"ΔⲆᐃⵠⵠⲆⵠ": ᐃⵠ++,
		"ⲆⲆᐃΔⵠᐃⲆ": ᐃⵠ++,
		"ⲆⵠᐃᐃⲆⲆⵠ": ᐃⵠ++,
		"ᐃⵠΔⲆⲆᐃⲆ": ᐃⵠ++,
		"ᐃⲆᐃΔᐃⲆᐃ": ᐃⵠ++,
		"ⲆⲆᐃΔⵠⵠⵠ": ᐃⵠ++,
		"ⵠⵠⲆᐃΔⲆᐃ": ᐃⵠ++,
		"ᐃΔⲆΔⵠΔΔ": ᐃⵠ++,
		"ⵠⵠᐃⲆⲆⵠⵠ": ᐃⵠ++,
		"ΔⲆᐃᐃⵠᐃΔ": ᐃⵠ++,
		"ⲆΔΔΔᐃᐃⵠ": ᐃⵠ++,
		"ⲆⲆᐃⵠⵠⵠᐃ": ᐃⵠ++,
		"ᐃⲆᐃⲆΔΔΔ": ᐃⵠ++,
		"ᐃⵠᐃⵠⲆΔΔ": ᐃⵠ++,
		"ⵠᐃⵠⲆΔⲆⲆ": ᐃⵠ++,
		"ⵠⵠⲆΔⲆⲆΔ": ᐃⵠ++,
		"ΔᐃⵠᐃⲆⵠⵠ": ᐃⵠ++,
		"ᐃⵠⲆᐃⲆᐃⵠ": ᐃⵠ++,
		"ᐃΔⵠⵠⲆⵠΔ": ᐃⵠ++,
		"ⲆⵠΔⲆᐃⵠᐃ": ᐃⵠ++,
		"ᐃⲆΔΔᐃⲆΔ": ᐃⵠ++,
		"ⵠⲆⵠᐃⲆΔⲆ": ᐃⵠ++,
		"ᐃⵠⵠⲆᐃᐃⲆ": ᐃⵠ++,
		"ⵠΔⲆⵠⵠⲆΔ": ᐃⵠ++,
		"ⵠᐃⵠⵠΔΔΔ": ᐃⵠ++,
		"ⲆᐃⲆⵠᐃⵠⵠ": ᐃⵠ++,
		"ᐃᐃⲆᐃⲆᐃᐃ": ᐃⵠ++,
		"ᐃⲆΔⲆⲆⵠΔ": ᐃⵠ++,
		"ⵠᐃⲆΔⵠⵠΔ": ᐃⵠ++,
		"ΔΔⵠⵠⵠᐃᐃ": ᐃⵠ++,
		"ΔⵠⲆⵠᐃᐃⵠ": ᐃⵠ++,
		"ᐃⵠⵠⲆᐃⲆᐃ": ᐃⵠ++,
		"ⲆΔⵠⵠⲆᐃΔ": ᐃⵠ++,
		"ⵠᐃⲆⲆⲆⵠⵠ": ᐃⵠ++,
		"ΔΔᐃⲆⵠᐃⵠ": ᐃⵠ++,
		"ⲆΔΔⲆⲆᐃⲆ": ᐃⵠ++,
		"ΔⵠⲆΔⵠᐃⲆ": ᐃⵠ++,
		"ⵠᐃᐃΔⵠᐃⲆ": ᐃⵠ++,
		"ⲆⲆⵠⵠᐃᐃⲆ": ᐃⵠ++,
		"ΔᐃⲆΔᐃᐃᐃ": ᐃⵠ++,
		"ᐃΔⲆᐃⲆⵠΔ": ᐃⵠ++,
		"ᐃΔᐃⵠⵠⲆΔ": ᐃⵠ++,
		"ΔΔⵠⵠⲆⲆᐃ": ᐃⵠ++,
		"ΔⲆΔᐃⲆΔᐃ": ᐃⵠ++,
		"ΔⵠΔᐃⲆΔΔ": ᐃⵠ++,
		"ⲆᐃᐃᐃⵠᐃΔ": ᐃⵠ++,
		"ᐃⵠΔΔⲆᐃΔ": ᐃⵠ++,
		"ⲆⲆⲆⵠⵠⵠⵠ": ᐃⵠ++,
		"ᐃᐃᐃⲆΔΔⲆ": ᐃⵠ++,
		"ΔⲆΔᐃⵠⵠΔ": ᐃⵠ++,
		"ΔᐃΔⵠΔᐃΔ": ᐃⵠ++,
		"ΔΔΔᐃΔᐃⵠ": ᐃⵠ++,
		"ΔᐃⵠΔⵠⲆΔ": ᐃⵠ++,
		"ΔᐃΔⲆⵠⵠΔ": ᐃⵠ++,
		"ᐃΔⵠⵠⵠⲆⲆ": ᐃⵠ++,
		"ⲆᐃⲆᐃᐃⵠⲆ": ᐃⵠ++,
		"ⲆⲆⵠΔΔΔΔ": ᐃⵠ++,
		"ᐃⵠⵠⵠΔΔᐃ": ᐃⵠ++,
		"ⵠΔⵠⲆⵠΔΔ": ᐃⵠ++,
		"ᐃⵠⵠⵠᐃⲆΔ": ᐃⵠ++,
		"ᐃⵠΔⵠⵠⲆⲆ": ᐃⵠ++,
		"ⵠⵠΔⵠⲆΔⲆ": ᐃⵠ++,
		"ΔⵠⵠⲆᐃⵠᐃ": ᐃⵠ++,
		"ⵠⲆⵠⲆⵠⲆⵠ": ᐃⵠ++,
		"Ⲇⵠᐃⵠⵠ": ᐃⵠ++,
		"ΔΔⵠΔᐃⵠⲆ": ᐃⵠ++,
		"ⵠⲆⵠⵠⲆᐃⲆ": ᐃⵠ++,
		"ΔᐃⲆΔᐃ": ᐃⵠ++,
		"ⵠΔᐃⵠⲆΔⲆ": ᐃⵠ++,
		"ⵠⲆᐃⵠⵠΔᐃ": ᐃⵠ++,
		"ⲆⲆⵠΔⵠᐃΔ": ᐃⵠ++,
		"ΔⲆΔⲆⲆᐃⵠ": ᐃⵠ++,
		"ᐃⲆΔᐃⵠⲆⲆ": ᐃⵠ++,
		"Ⲇⵠᐃᐃⵠ": ᐃⵠ++,
		"ᐃⵠⲆⵠΔⲆⵠ": ᐃⵠ++,
		"ΔⵠⲆΔᐃΔⵠΔΔ": ᐃⵠ++,
		"ⵠΔⲆᐃⵠⵠᐃᐃⲆ": ᐃⵠ++,
		"ⲆΔⵠⲆΔⲆⲆⲆⵠ": ᐃⵠ++,
		"ⲆᐃⵠⲆⵠⵠᐃⵠⲆ": ᐃⵠ++,
		"ΔⲆΔⲆⲆΔⵠ": ᐃⵠ++,
		"ΔⵠΔⲆᐃΔΔ": ᐃⵠ++,
		"ΔⵠᐃΔᐃⵠᐃ": ᐃⵠ++,
		"ⵠΔⵠΔⵠΔΔ": ᐃⵠ++,
		"ΔΔΔΔᐃΔⵠ": ᐃⵠ++,
		"ⵠᐃⵠⵠᐃⵠⲆ": ᐃⵠ++,
		"ᐃⲆᐃᐃᐃΔⵠ": ᐃⵠ++,
		"ᐃⵠΔᐃⲆΔⵠ": ᐃⵠ++,
		"ᐃⲆⲆᐃΔⵠΔ": ᐃⵠ++,
		"ΔⵠⲆⵠΔΔΔ": ᐃⵠ++,
		"ΔΔⲆΔΔ": ᐃⵠ++,
		"ΔⵠⵠⲆⵠ": ᐃⵠ++,
		"ⵠΔᐃⲆᐃⲆⲆ": ᐃⵠ++,
		"ᐃΔᐃⲆᐃⲆⲆ": ᐃⵠ++,
		"ⵠⵠⲆⵠⵠΔΔ": ᐃⵠ++,
		"ⵠΔⲆⲆⲆⵠⲆ": ᐃⵠ++,
		"ⲆᐃⵠΔΔⲆΔ": ᐃⵠ++,
		"ΔⲆΔΔΔᐃⵠ": ᐃⵠ++,
		"ΔΔⲆΔⲆⲆⲆ": ᐃⵠ++,
		"ΔⵠⲆⵠⲆⲆⵠ": ᐃⵠ++,
		"ΔⵠΔᐃⲆΔᐃ": ᐃⵠ++,
		"ΔⵠⲆᐃΔΔΔ": ᐃⵠ++,
		"ᐃᐃⲆᐃⲆⵠⵠ": ᐃⵠ++,
		"ᐃⲆⵠᐃⲆⵠᐃ": ᐃⵠ++,
		"ⲆⲆⲆⲆΔⲆΔΔⲆ": ᐃⵠ++,
		"ΔΔⲆᐃΔⵠΔⲆᐃ": ᐃⵠ++,
		"ⵠⵠΔᐃΔⵠⵠ": ᐃⵠ++,
		"ⲆΔⲆΔⲆᐃⵠ": ᐃⵠ++,
		"ΔᐃⲆᐃⲆⵠⵠ": ᐃⵠ++,
		"ⲆⵠᐃⵠΔΔⲆ": ᐃⵠ++,
		"ⵠΔⵠᐃⵠⵠⵠ": ᐃⵠ++,
		"ⵠΔⲆⲆΔΔⵠ": ᐃⵠ++,
		"ᐃⵠⵠΔⵠⵠᐃ": ᐃⵠ++,
		"ⵠⵠᐃᐃⲆΔᐃ": ᐃⵠ++,
		"ΔⵠΔⵠⲆᐃᐃ": ᐃⵠ++,
		"ⵠᐃᐃⵠⵠᐃⲆ": ᐃⵠ++,
		"ⲆⵠᐃᐃΔΔᐃ": ᐃⵠ++,
		"ᐃΔⵠᐃⵠⲆⲆ": ᐃⵠ++,
		"ᐃⲆᐃᐃᐃᐃᐃ": ᐃⵠ++,
		"ⵠΔᐃΔΔⲆΔ": ᐃⵠ++,
		"ⵠⲆⲆΔΔΔΔ": ᐃⵠ++,
		"ⵠᐃᐃⵠⲆΔⲆ": ᐃⵠ++,
		"ΔᐃⵠⲆⲆⵠΔ": ᐃⵠ++,
		"ᐃᐃⵠΔΔᐃᐃ": ᐃⵠ++,
		"ⵠⲆⵠᐃⵠⲆⲆΔΔ": ᐃⵠ++,
		"ᐃᐃᐃᐃΔ": ᐃⵠ++,
		"ⵠΔΔᐃΔ": ᐃⵠ++,
		"ΔⵠⵠⵠⲆⲆΔᐃⲆ": ᐃⵠ++,
		"ΔᐃⵠⲆⲆᐃⵠΔᐃ": ᐃⵠ++,
		"ᐃΔᐃⲆΔᐃᐃΔΔ": ᐃⵠ++,
		"ⲆᐃⲆⲆΔᐃⵠΔΔ": ᐃⵠ++,
		"ⵠⲆⵠΔⲆⲆᐃ": ᐃⵠ++,
		"ⵠᐃᐃᐃⲆΔᐃ": ᐃⵠ++,
		"ⲆⵠⵠΔᐃⵠⵠ": ᐃⵠ++,
		"ⲆΔⲆⲆⵠΔⵠ": ᐃⵠ++,
		"ᐃⵠⵠⲆΔⵠΔ": ᐃⵠ++,
		"ᐃᐃⵠⲆⵠᐃⲆΔᐃ": ᐃⵠ++,
		"ⵠᐃⵠⵠⲆⲆⵠ": ᐃⵠ++,
		"ⲆⵠⲆⵠΔⲆⲆ": ᐃⵠ++,
		"ᐃΔⵠᐃᐃΔⲆ": ᐃⵠ++,
		"ᐃΔⲆⲆⵠΔΔ": ᐃⵠ++,
		"ⲆⵠⵠⵠᐃⲆⵠ": ᐃⵠ++,
		"ΔᐃⵠᐃᐃⲆΔ": ᐃⵠ++,
		"ⲆⵠⲆⵠⵠΔⲆ": ᐃⵠ++,
		"ΔᐃᐃΔᐃ": ᐃⵠ++,
		"ⵠΔᐃΔⲆᐃᐃⵠⵠ": ᐃⵠ++,
		"ⵠΔⵠⵠⲆⲆΔ": ᐃⵠ++,
		"ᐃⵠΔⲆⵠⵠᐃ": ᐃⵠ++,
		"ΔⵠⲆⵠⲆΔⵠ": ᐃⵠ++,
		"ⵠⵠⵠᐃⲆⲆΔ": ᐃⵠ++,
		"ⵠΔᐃⲆΔⲆⵠ": ᐃⵠ++,
		"ⲆΔⲆⲆΔᐃⵠ": ᐃⵠ++,
		"ΔⲆⵠⵠⵠᐃΔ": ᐃⵠ++,
		"ΔΔⵠⵠⵠΔᐃ": ᐃⵠ++,
		"ᐃΔᐃΔΔⲆⲆ": ᐃⵠ++,
		"ΔᐃⵠᐃⲆⲆᐃ": ᐃⵠ++,
		"ⵠΔⲆΔⵠⲆⲆ": ᐃⵠ++,
		"ᐃⵠΔⲆᐃⵠᐃ": ᐃⵠ++,
		"ΔⲆᐃΔⲆᐃΔ": ᐃⵠ++,
		"ΔⲆⲆⵠᐃ": ᐃⵠ++,
		"ᐃⲆΔΔΔᐃᐃ": ᐃⵠ++,
		"ⵠⲆᐃⲆᐃⲆᐃ": ᐃⵠ++,
		"ⵠΔⲆⵠΔⵠΔ": ᐃⵠ++,
		"ᐃΔⵠΔⲆΔⲆ": ᐃⵠ++,
		"ᐃΔΔΔΔΔⵠ": ᐃⵠ++,
		"ⲆⵠΔⵠΔⲆⲆ": ᐃⵠ++,
		"ⲆⵠΔᐃⵠΔᐃ": ᐃⵠ++,
		"ⵠⲆⲆΔⲆⲆᐃ": ᐃⵠ++,
		"ⵠⲆΔΔᐃΔΔ": ᐃⵠ++,
		"ᐃⲆⵠⲆⲆᐃⵠ": ᐃⵠ++,
		"ⵠΔⲆⵠΔᐃᐃ": ᐃⵠ++,
		"ᐃΔⲆΔᐃⲆΔ": ᐃⵠ++,
		"ΔⲆᐃΔᐃⲆᐃ": ᐃⵠ++,
		"ΔᐃΔⲆΔΔⲆ": ᐃⵠ++,
		"ⲆᐃΔᐃⵠⲆⲆ": ᐃⵠ++,
		"ᐃⲆⵠᐃᐃᐃⲆ": ᐃⵠ++,
		"ⲆᐃᐃΔⵠⲆΔ": ᐃⵠ++,
		"ᐃⵠⲆⵠⲆⵠΔ": ᐃⵠ++,
		"ᐃⲆⵠⵠⵠⲆⲆ": ᐃⵠ++,
		"ⵠΔᐃⵠᐃΔⲆ": ᐃⵠ++,
		"ⵠΔᐃⲆΔⵠⵠ": ᐃⵠ++,
		"ⲆⵠⲆᐃΔᐃΔ": ᐃⵠ++,
		"ⵠⲆⲆᐃⲆᐃᐃ": ᐃⵠ++,
		"ΔΔΔᐃᐃᐃΔ": ᐃⵠ++,
		"ⵠⵠⲆΔⲆⵠⵠ": ᐃⵠ++,
		"ⵠⲆⲆⲆΔⲆΔ": ᐃⵠ++,
		"ΔΔⵠⲆⵠⲆⵠⵠᐃ": ᐃⵠ++,
		"ᐃⲆΔⵠΔᐃⵠᐃⵠ": ᐃⵠ++,
		"ⵠⵠⲆⵠⲆᐃΔⵠΔ": ᐃⵠ++,
		"ᐃⵠⲆᐃⵠⲆⲆⲆᐃ": ᐃⵠ++,
		"ΔΔᐃΔΔΔⲆ": ᐃⵠ++,
		"ⲆⵠⵠⵠⲆⲆⲆ": ᐃⵠ++,
		"ᐃᐃⲆⵠⵠ": ᐃⵠ++,
		"ⲆᐃΔᐃᐃΔᐃ": ᐃⵠ++,
		"ⲆⲆⵠⲆⲆⵠⵠ": ᐃⵠ++,
		"ⲆᐃⵠΔᐃⵠᐃ": ᐃⵠ++,
		"ⲆΔΔⵠⲆᐃΔ": ᐃⵠ++,
		"ⵠⲆΔΔⵠⵠΔ": ᐃⵠ++,
		"Δᐃⵠⵠⵠⵠᐃ": ᐃⵠ++,
		"ⵠⵠⲆᐃⵠΔⲆ": ᐃⵠ++,
		"ΔᐃⲆΔᐃᐃΔ": ᐃⵠ++,
		"ᐃᐃⵠᐃⵠΔᐃ": ᐃⵠ++,
		"ᐃΔᐃᐃⲆᐃᐃ": ᐃⵠ++,
		"ΔⵠⲆᐃᐃⲆⵠ": ᐃⵠ++,
		"ⵠᐃᐃᐃⵠ": ᐃⵠ++,
		"ⲆΔⲆⵠⲆⲆⲆ": ᐃⵠ++,
		"ᐃⲆΔⲆⲆᐃⲆ": ᐃⵠ++,
		"ΔⲆᐃᐃΔⲆⵠ": ᐃⵠ++,
		"ⵠⲆⲆⵠⵠⵠⲆ": ᐃⵠ++,
		"ⵠᐃΔⵠΔⲆⲆ": ᐃⵠ++,
		"ΔΔⵠΔⲆⲆᐃ": ᐃⵠ++,
		"ΔⵠⵠᐃΔⲆⵠ": ᐃⵠ++,
		"ⲆΔⲆᐃⵠΔⲆⵠⵠ": ᐃⵠ++,
		"ⵠⵠⲆⵠΔ": ᐃⵠ++,
		"ⵠⵠᐃⲆⵠΔᐃ": ᐃⵠ++,
		"ΔᐃᐃⲆᐃⵠΔ": ᐃⵠ++,
		"ΔⵠⵠⲆⵠΔᐃ": ᐃⵠ++,
		"ᐃⵠⵠᐃⲆⵠᐃ": ᐃⵠ++,
		"ⲆⲆⲆⵠΔᐃⲆ": ᐃⵠ++,
		"ᐃΔⵠᐃⲆⵠⵠ": ᐃⵠ++,
		"ⵠΔⲆⲆⲆⵠΔ": ᐃⵠ++,
		"ΔⲆᐃΔⲆⲆᐃ": ᐃⵠ++,
		"ⵠⵠᐃΔⲆΔᐃ": ᐃⵠ++,
		"ᐃⵠΔᐃⲆⵠΔ": ᐃⵠ++,
		"ᐃᐃⲆᐃᐃⵠⵠ": ᐃⵠ++,
		"ΔΔΔΔᐃⵠⵠ": ᐃⵠ++,
		"ΔΔΔΔΔᐃΔ": ᐃⵠ++,
		"ⵠΔᐃᐃⵠᐃⲆ": ᐃⵠ++,
		"ᐃᐃⲆⵠⲆᐃⲆ": ᐃⵠ++,
		"ⲆᐃⵠⲆᐃΔⲆ": ᐃⵠ++,
		"ᐃΔᐃⲆⵠᐃᐃ": ᐃⵠ++,
		"ⵠΔᐃⲆⲆᐃⵠ": ᐃⵠ++,
		"ᐃᐃⲆΔⲆⵠᐃ": ᐃⵠ++,
		"ᐃⲆⵠᐃᐃⵠⲆ": ᐃⵠ++,
		"ⲆΔΔⵠᐃⲆⲆ": ᐃⵠ++,
		"ΔⵠⲆⵠᐃΔⵠ": ᐃⵠ++,
		"ᐃⲆⵠⲆⵠΔΔΔⲆ": ᐃⵠ++,
		"ⵠⵠⵠⵠⲆᐃⵠ": ᐃⵠ++,
		"ⵠᐃᐃⵠᐃⲆΔ": ᐃⵠ++,
		"ᐃΔⵠⵠⵠⵠⵠ": ᐃⵠ++,
		"ⵠΔᐃⲆⵠⵠⵠ": ᐃⵠ++,
		"ΔⵠⵠⲆⲆⵠⲆ": ᐃⵠ++,
		"ⲆᐃΔΔⲆΔᐃ": ᐃⵠ++,
		"ΔⲆᐃΔⵠⵠⲆ": ᐃⵠ++,
		"ΔⵠᐃⲆᐃΔᐃ": ᐃⵠ++,
		"ⲆᐃᐃᐃⲆᐃⲆ": ᐃⵠ++,
		"ⲆΔⲆΔΔΔΔ": ᐃⵠ++,
		"ⵠΔⲆⵠΔΔⵠ": ᐃⵠ++,
		"ΔΔⵠΔΔᐃⲆ": ᐃⵠ++,
		"ⲆΔΔⵠⲆΔⲆ": ᐃⵠ++,
		"ᐃⲆⵠᐃᐃΔᐃ": ᐃⵠ++,
		"ᐃⲆⵠΔⵠⲆΔ": ᐃⵠ++,
		"ⲆΔⵠⵠΔⵠⵠ": ᐃⵠ++,
		"ⵠΔᐃΔᐃΔΔ": ᐃⵠ++,
		"ΔⵠΔΔᐃⵠⲆ": ᐃⵠ++,
		"ⲆᐃⲆΔⵠⲆⲆ": ᐃⵠ++,
		"ⵠᐃᐃΔⲆΔΔ": ᐃⵠ++,
		"ΔⲆΔⵠⵠᐃΔ": ᐃⵠ++,
		"ⲆᐃⵠΔᐃⲆⲆ": ᐃⵠ++,
		"ΔΔⲆᐃᐃΔᐃ": ᐃⵠ++,
		"ΔᐃΔⵠᐃᐃⲆ": ᐃⵠ++,
		"ᐃΔΔⲆᐃ": ᐃⵠ++,
		"ⵠⵠⵠⲆⲆΔΔ": ᐃⵠ++,
		"ᐃⵠⵠᐃⲆᐃⵠ": ᐃⵠ++,
		"ᐃΔᐃΔΔⲆᐃ": ᐃⵠ++,
		"ᐃᐃΔᐃΔⵠΔ": ᐃⵠ++,
		"ΔΔⵠⲆΔΔⵠ": ᐃⵠ++,
		"ᐃⵠⵠⲆⲆᐃⲆ": ᐃⵠ++,
		"ⲆⲆᐃⲆᐃΔⲆ": ᐃⵠ++,
		"ⲆᐃᐃⲆᐃⲆΔ": ᐃⵠ++,
		"ⵠⵠⲆⵠⵠⲆⵠ": ᐃⵠ++,
		"ΔΔⲆᐃᐃⵠΔ": ᐃⵠ++,
		"ΔⵠⵠⲆⲆᐃⵠ": ᐃⵠ++,
		"ΔⵠⵠΔⲆⵠⲆ": ᐃⵠ++,
		"ΔΔⲆⵠⲆΔⵠ": ᐃⵠ++,
		"ⵠᐃⲆᐃⵠΔⵠ": ᐃⵠ++,
		"ⵠᐃᐃᐃⵠΔⵠ": ᐃⵠ++,
		"ⵠΔᐃΔᐃᐃⲆ": ᐃⵠ++,
		"ᐃⵠΔᐃΔⵠΔ": ᐃⵠ++,
		"ᐃᐃΔᐃⲆⲆⵠ": ᐃⵠ++,
		"ⲆⲆᐃᐃⵠᐃⲆ": ᐃⵠ++,
		"ΔᐃⲆΔΔΔⵠ": ᐃⵠ++,
		"ᐃⲆᐃⲆΔΔⵠ": ᐃⵠ++,
		"ᐃⲆⲆΔⵠᐃᐃ": ᐃⵠ++,
		"ⲆⵠΔⵠⵠᐃⵠ": ᐃⵠ++,
		"ⲆⵠΔΔΔⲆⵠ": ᐃⵠ++,
		"ΔᐃⵠⲆᐃᐃᐃ": ᐃⵠ++,
		"ΔⲆᐃᐃᐃΔΔ": ᐃⵠ++,
		"ⵠΔᐃⲆᐃⲆⵠ": ᐃⵠ++,
		"ΔⲆⲆᐃⲆⵠᐃ": ᐃⵠ++,
		"ΔⵠⲆΔⲆⲆᐃ": ᐃⵠ++,
		"ᐃΔᐃᐃΔⲆⵠ": ᐃⵠ++,
		"ⲆⲆᐃⲆΔⲆⵠ": ᐃⵠ++,
		"ⲆⵠⵠⵠⲆⵠⲆ": ᐃⵠ++,
		"ᐃᐃⵠⲆⵠΔⵠ": ᐃⵠ++,
		"ΔⲆᐃΔⲆΔᐃ": ᐃⵠ++,
		"ⵠΔⲆⲆ": ᐃⵠ++,
		"ΔΔᐃⲆ": ᐃⵠ++,
		"ⵠⲆⲆᐃᐃⵠⵠ": ᐃⵠ++,
		"ᐃᐃᐃΔⲆᐃⲆ": ᐃⵠ++,
		"ⲆΔⲆⵠⲆᐃΔ": ᐃⵠ++,
		"ᐃᐃⲆⵠΔⲆΔ": ᐃⵠ++,
		"ᐃᐃⵠΔΔᐃΔ": ᐃⵠ++,
		"ᐃᐃⲆⲆⲆⲆᐃ": ᐃⵠ++,
		"ᐃᐃⵠⵠΔᐃΔ": ᐃⵠ++,
		"ⵠⲆⲆΔᐃ": ᐃⵠ++,
		"ⲆⵠⲆΔⵠⵠⲆ": ᐃⵠ++,
		"ⲆΔⵠⲆⲆ": ᐃⵠ++,
		"ⵠⲆᐃⵠⲆⲆⲆ": ᐃⵠ++,
		"ⵠⲆΔᐃⵠ": ᐃⵠ++,
		"ᐃᐃⲆⵠᐃᐃᐃ": ᐃⵠ++,
		"ⲆᐃⲆΔΔ": ᐃⵠ++,
		"ΔᐃΔⵠᐃⵠᐃ": ᐃⵠ++,
		"ΔΔⲆᐃⵠ": ᐃⵠ++,
		"ᐃΔⲆΔⲆ": ᐃⵠ++,
		"ⵠΔⲆΔᐃⵠⵠ": ᐃⵠ++,
		"ᐃΔⲆᐃΔᐃⲆ": ᐃⵠ++,
		"ΔᐃⲆⵠⵠΔⵠ": ᐃⵠ++,
		"ΔⵠⲆⲆⲆᐃⲆ": ᐃⵠ++,
		"ᐃⵠⲆᐃⲆⵠΔ": ᐃⵠ++,
		"ⲆⲆⵠⲆᐃⵠΔ": ᐃⵠ++,
		"ⵠⵠᐃⵠⲆΔᐃ": ᐃⵠ++,
		"ᐃΔΔΔⵠⵠΔ": ᐃⵠ++,
		"ⲆΔᐃⵠⲆΔⵠ": ᐃⵠ++,
		"ⵠᐃⵠⵠΔ": ᐃⵠ++,
		"ⲆᐃᐃⲆⵠⵠⵠ": ᐃⵠ++,
		"ⵠⲆⲆⵠᐃ": ᐃⵠ++,
		"ⲆΔⲆⲆΔⵠⵠ": ᐃⵠ++,
		"ⵠᐃΔⲆᐃᐃΔ": ᐃⵠ++,
		"ⲆᐃⵠⲆⵠⲆⲆ": ᐃⵠ++,
		"ⵠΔⵠⲆⵠⵠᐃ": ᐃⵠ++,
		"ⲆΔⵠᐃⵠⲆᐃ": ᐃⵠ++,
		"ᐃⲆᐃⵠⲆⲆⵠ": ᐃⵠ++,
		"ΔⲆᐃΔⵠⲆᐃⵠᐃ": ᐃⵠ++,
		"ΔΔΔΔⲆⵠΔ": ᐃⵠ++,
		"ᐃⵠⲆΔΔⲆⵠ": ᐃⵠ++,
		"ⵠΔΔⲆⲆⵠΔⲆᐃ": ᐃⵠ++,
		"ⲆΔᐃᐃᐃⵠⵠ": ᐃⵠ++,
		"ᐃΔᐃΔⵠⲆΔ": ᐃⵠ++,
		"ᐃΔⲆΔΔⵠΔ": ᐃⵠ++,
		"ᐃᐃΔΔᐃΔⵠ": ᐃⵠ++,
		"ⲆⵠⲆⵠᐃ": ᐃⵠ++,
		"ᐃᐃⵠᐃᐃⲆᐃ": ᐃⵠ++,
		"ΔⵠᐃⵠΔᐃΔ": ᐃⵠ++,
		"ⲆΔⵠⲆⵠΔⲆ": ᐃⵠ++,
		"ⲆΔᐃᐃⲆΔᐃ": ᐃⵠ++,
		"ΔΔⲆᐃΔⲆⵠ": ᐃⵠ++,
		"ᐃᐃⵠᐃᐃΔⵠ": ᐃⵠ++,
		"ᐃᐃⲆΔΔᐃⲆ": ᐃⵠ++,
		"ⵠΔⵠⲆⵠΔᐃ": ᐃⵠ++,
		"ΔΔᐃⵠΔᐃⲆ": ᐃⵠ++,
		"ⵠⲆᐃⵠⵠᐃⵠ": ᐃⵠ++,
		"ΔΔᐃⲆⵠⵠⵠ": ᐃⵠ++,
		"ᐃΔⵠⵠⵠᐃⲆ": ᐃⵠ++,
		"ⵠⲆⵠⵠⲆⵠⲆ": ᐃⵠ++,
		"ⵠⵠᐃⲆΔᐃᐃ": ᐃⵠ++,
		"ⲆᐃⲆⲆΔ": ᐃⵠ++,
		"ⵠⲆᐃᐃΔⵠΔ": ᐃⵠ++,
		"ᐃΔΔᐃⲆΔⵠ": ᐃⵠ++,
		"ⵠΔⵠᐃⲆⵠⵠ": ᐃⵠ++,
		"ⵠΔᐃᐃᐃᐃᐃ": ᐃⵠ++,
		"ΔⵠΔⲆᐃⵠᐃ": ᐃⵠ++,
		"ᐃᐃΔⲆᐃⵠⲆ": ᐃⵠ++,
		"ⲆᐃⵠⵠⲆᐃⲆ": ᐃⵠ++,
		"ⲆᐃⲆⵠⵠΔᐃ": ᐃⵠ++,
		"ⲆΔⵠΔⵠⵠⲆ": ᐃⵠ++,
		"ⵠΔΔⵠᐃⵠⲆ": ᐃⵠ++,
		"ⵠΔᐃᐃⵠⲆⵠ": ᐃⵠ++,
		"ⲆⵠⵠⵠΔⵠΔ": ᐃⵠ++,
		"ⵠⲆΔⵠᐃⵠᐃ": ᐃⵠ++,
		"ΔΔⲆᐃᐃⵠᐃ": ᐃⵠ++,
		"ΔⵠⲆΔᐃ": ᐃⵠ++,
		"ⲆⵠⵠⵠⲆᐃᐃ": ᐃⵠ++,
		"ⲆΔⵠΔᐃⵠⲆ": ᐃⵠ++,
		"ᐃᐃⲆⵠᐃⲆⲆ": ᐃⵠ++,
		"ⲆⲆΔⵠⵠΔⲆ": ᐃⵠ++,
		"ᐃⲆⲆⲆᐃⵠΔ": ᐃⵠ++,
		"ᐃΔΔⵠⲆⲆΔ": ᐃⵠ++,
		"ⲆⵠⲆᐃⵠⵠᐃ": ᐃⵠ++,
		"ΔⵠΔⵠΔⲆΔ": ᐃⵠ++,
		"ⵠⵠⲆⵠᐃⲆᐃ": ᐃⵠ++,
		"ⲆᐃⵠⵠⵠⵠⲆ": ᐃⵠ++,
		"ᐃᐃΔΔᐃᐃⵠ": ᐃⵠ++,
		"ⲆⲆⵠΔᐃΔΔ": ᐃⵠ++,
		"ᐃⵠⵠⵠΔⲆⲆ": ᐃⵠ++,
		"ᐃⲆⵠᐃᐃᐃΔ": ᐃⵠ++,
		"ⵠΔΔᐃᐃⵠⲆ": ᐃⵠ++,
		"ᐃᐃΔⲆⵠⲆΔ": ᐃⵠ++,
		"ᐃⲆᐃⲆⲆᐃⵠ": ᐃⵠ++,
		"ᐃᐃΔⲆⲆΔΔ": ᐃⵠ++,
		"ᐃΔⲆⲆⲆᐃⲆ": ᐃⵠ++,
		"ΔⲆⲆⵠᐃⵠΔ": ᐃⵠ++,
		"ᐃΔΔᐃⵠ": ᐃⵠ++,
		"ⲆⲆⲆⲆⲆᐃᐃ": ᐃⵠ++,
		"ΔΔⲆⵠᐃⵠᐃ": ᐃⵠ++,
		"ᐃᐃⵠᐃᐃᐃⲆ": ᐃⵠ++,
		"ΔΔⵠⵠⲆⲆⵠ": ᐃⵠ++,
		"ΔᐃⲆⵠΔⲆΔ": ᐃⵠ++,
		"ΔᐃⲆⲆΔΔⲆ": ᐃⵠ++,
		"ᐃᐃΔⵠΔⵠΔ": ᐃⵠ++,
		"ᐃⵠΔⲆΔᐃⵠ": ᐃⵠ++,
		"ⲆᐃⲆᐃⲆᐃⵠ": ᐃⵠ++,
		"ⵠᐃᐃⵠⵠᐃᐃ": ᐃⵠ++,
		"ⵠⲆᐃⵠΔⲆᐃ": ᐃⵠ++,
		"ΔⵠⲆᐃΔⵠΔ": ᐃⵠ++,
		"ᐃⵠΔⵠΔΔΔ": ᐃⵠ++,
		"ΔⲆᐃⲆⲆⲆⵠ": ᐃⵠ++,
		"ⲆⵠᐃⵠⲆⲆⲆ": ᐃⵠ++,
		"ⵠⲆᐃᐃΔᐃⲆ": ᐃⵠ++,
		"ⲆⵠᐃⲆᐃⵠᐃ": ᐃⵠ++,
		"ΔᐃᐃᐃΔᐃᐃ": ᐃⵠ++,
		"ᐃᐃΔⲆᐃᐃⲆ": ᐃⵠ++,
		"ΔΔΔΔⵠⲆᐃ": ᐃⵠ++,
		"ΔⲆⲆⲆⲆⲆⲆ": ᐃⵠ++,
		"ΔᐃⵠⵠᐃΔΔ": ᐃⵠ++,
		"ⵠΔᐃᐃΔᐃⲆ": ᐃⵠ++,
		"ᐃⵠᐃΔⵠⲆᐃ": ᐃⵠ++,
		"ⵠΔⲆᐃΔᐃⵠ": ᐃⵠ++,
		"ΔⲆⲆᐃⵠΔⲆ": ᐃⵠ++,
		"ΔⵠⲆⲆΔⲆΔ": ᐃⵠ++,
		"ΔⵠᐃⲆΔⲆⲆ": ᐃⵠ++,
		"ᐃⵠᐃⵠᐃⲆⵠ": ["#E9CF96", "#144940"],
		"ⵠⵠⲆⲆⵠⲆⲆ": ᐃⵠ++,
		"ⲆΔⵠⲆⲆᐃᐃ": ᐃⵠ++,
		"ⲆⵠⵠⵠⵠⲆⵠ": ᐃⵠ++,
		"ΔΔΔⵠⲆⲆⲆ": ᐃⵠ++,
		"ⵠⵠⲆⲆⲆⵠΔ": ᐃⵠ++,
		"ᐃΔΔⵠⵠⲆᐃ": ᐃⵠ++,
		"ⲆᐃⲆΔᐃᐃⲆ": ᐃⵠ++,
		"ΔⲆⲆⲆΔ": ᐃⵠ++,
		"ΔⵠⵠΔᐃᐃⵠ": ᐃⵠ++,
		"ⵠⲆⲆΔᐃΔΔ": ᐃⵠ++,
		"ⲆⲆᐃΔᐃᐃⵠ": ᐃⵠ++,
		"ΔⵠⵠΔⲆΔᐃ": ᐃⵠ++,
		"ΔⵠΔΔⲆⵠᐃ": ᐃⵠ++,
		"ⵠⲆⲆΔᐃᐃⵠ": ᐃⵠ++,
		"ΔΔᐃᐃⵠᐃᐃ": ᐃⵠ++,
		"ⲆΔⵠᐃⲆⲆΔ": ᐃⵠ++,
		"ⲆΔⲆᐃΔⲆⲆ": ᐃⵠ++,
		"ⲆᐃⵠΔⵠⵠΔ": ᐃⵠ++,
		"ᐃⵠⲆⲆⲆⵠⵠ": ᐃⵠ++,
		"ᐃⲆᐃΔᐃΔΔ": ᐃⵠ++,
		"ⲆᐃΔΔⲆⵠⲆ": ᐃⵠ++,
		"ⲆᐃΔⵠᐃΔᐃ": ᐃⵠ++,
		"ⵠᐃΔⲆⵠⵠⵠ": ᐃⵠ++,
		"ⵠᐃⲆΔΔⵠⲆ": ᐃⵠ++,
		"ⲆΔᐃⲆᐃΔⲆ": ᐃⵠ++,
		"ΔᐃᐃΔⵠᐃᐃ": ᐃⵠ++,
		"ΔⲆΔᐃᐃΔᐃ": ᐃⵠ++,
		"ᐃΔⲆᐃᐃⵠᐃ": ᐃⵠ++,
		"ⲆᐃⵠᐃᐃⲆⵠ": ᐃⵠ++,
		"ⲆⵠⵠⵠⵠⵠΔ": ᐃⵠ++,
		"ⲆΔᐃᐃⵠⲆΔ": ᐃⵠ++,
		"ΔΔᐃⵠⲆⲆΔ": ᐃⵠ++,
		"ᐃᐃᐃᐃⲆᐃΔ": ᐃⵠ++,
		"ᐃᐃⲆΔⵠⲆΔ": ᐃⵠ++,
		"ΔⵠⲆⵠⲆΔⲆ": ᐃⵠ++,
		"ΔⵠⵠΔⲆⲆᐃ": ᐃⵠ++,
		"ⲆΔⵠΔⵠᐃΔ": ᐃⵠ++,
		"ⲆⵠΔⲆⵠⵠΔ": ᐃⵠ++,
		"ΔⲆᐃΔΔᐃⲆ": ᐃⵠ++,
		"ⵠᐃᐃⲆⵠΔΔ": ᐃⵠ++,
		"ΔΔⲆⲆᐃⲆΔ": ᐃⵠ++,
		"ⲆΔᐃⵠⲆΔᐃ": ᐃⵠ++,
		"ᐃⲆⵠᐃⵠᐃΔ": ᐃⵠ++,
		"ΔⲆⵠΔⲆⵠᐃ": ᐃⵠ++,
		"ᐃΔᐃⵠⵠⵠⵠ": ᐃⵠ++,
		"ᐃⵠΔΔⵠⵠΔ": ᐃⵠ++,
		"ⵠΔᐃⲆᐃⵠⵠ": ᐃⵠ++,
		"ⵠᐃᐃΔΔⲆⵠ": ᐃⵠ++,
		"ⲆⵠᐃⲆⵠΔΔ": ᐃⵠ++,
		"ⵠⵠᐃⵠⵠΔᐃ": ᐃⵠ++,
		"ΔΔᐃⵠⲆΔᐃ": ᐃⵠ++,
		"ⵠᐃᐃⵠⲆΔΔ": ᐃⵠ++,
		"ⲆΔⲆⲆΔᐃᐃ": ᐃⵠ++,
		"ⵠⵠΔⵠᐃᐃᐃ": ᐃⵠ++,
		"ⵠⵠΔⲆⵠⲆⲆ": ᐃⵠ++,
		"ᐃᐃᐃⵠΔᐃᐃ": ᐃⵠ++,
		"ΔᐃⵠⵠⲆᐃⵠ": ᐃⵠ++,
		"ᐃᐃⵠᐃⲆΔᐃ": ᐃⵠ++,
		"ⲆΔᐃⵠⲆᐃᐃ": ᐃⵠ++,
		"ⲆᐃΔⲆΔΔⲆ": ᐃⵠ++,
		"ⲆⵠΔᐃⲆᐃΔ": ᐃⵠ++,
		"ⲆΔⵠᐃⵠΔⲆ": ᐃⵠ++,
		"ⵠᐃⲆΔⲆΔⲆ": ᐃⵠ++,
		"ΔᐃⲆⲆⲆⵠᐃ": ᐃⵠ++,
		"ᐃⲆᐃⲆⲆᐃⲆ": ᐃⵠ++,
		"ΔᐃⲆᐃᐃⵠΔ": ᐃⵠ++,
		"ᐃᐃⲆΔΔⵠⵠ": ᐃⵠ++,
		"ⵠⵠⲆᐃΔⵠᐃ": ᐃⵠ++,
		"ⲆᐃⲆᐃⵠΔΔ": ᐃⵠ++,
		"ⵠΔΔΔⲆ": ᐃⵠ++,
		"ᐃΔⲆⵠⵠⵠᐃ": ᐃⵠ++,
		"ⲆΔΔᐃⲆ": ᐃⵠ++,
		"ⲆΔΔᐃⲆᐃΔ": ᐃⵠ++,
		"ⲆⲆⵠᐃᐃΔⲆ": ᐃⵠ++,
		"ⲆⲆΔⲆⲆΔᐃ": ᐃⵠ++,
		"ᐃᐃΔΔΔⵠᐃ": ᐃⵠ++,
		"ⵠⲆⲆⲆⵠⵠⵠ": ᐃⵠ++,
		"ⲆΔᐃᐃΔΔⵠ": ᐃⵠ++,
		"ΔΔΔⵠⵠⲆⲆ": ᐃⵠ++,
		"ᐃᐃⵠᐃⲆᐃⵠ": ᐃⵠ++,
		"ᐃᐃΔⵠⵠΔᐃ": ᐃⵠ++,
		"ΔⵠᐃᐃⲆⵠⲆ": ᐃⵠ++,
		"ᐃΔΔⲆΔⵠᐃ": ᐃⵠ++,
		"ᐃⵠⲆΔⵠⲆⲆ": ᐃⵠ++,
		"ⲆⲆΔⲆⲆᐃΔ": ᐃⵠ++,
		"ⵠᐃⲆⲆⵠΔᐃ": ᐃⵠ++,
		"ΔᐃⵠᐃᐃⵠΔ": ᐃⵠ++,
		"ᐃⲆⲆΔⲆᐃⵠ": ᐃⵠ++,
		"ΔΔΔⲆᐃᐃⵠ": ᐃⵠ++,
		"ⵠΔΔΔΔᐃⲆ": ᐃⵠ++,
		"ᐃᐃᐃᐃᐃΔᐃ": ᐃⵠ++,
		"ⵠᐃⲆᐃⲆⵠᐃ": ᐃⵠ++,
		"ΔⵠΔⲆⵠΔΔ": ᐃⵠ++,
		"ΔⵠᐃᐃᐃⲆΔ": ᐃⵠ++,
		"ᐃⲆⵠᐃⵠΔΔ": ᐃⵠ++,
		"ᐃΔΔⵠⵠΔⲆ": ᐃⵠ++,
		"ΔΔⵠⲆⵠΔⲆ": ᐃⵠ++,
		"ⲆΔⵠΔⵠᐃᐃ": ᐃⵠ++,
		"ⵠⵠⵠᐃⲆⵠⵠ": ᐃⵠ++,
		"ΔⲆᐃᐃᐃⲆⵠ": ᐃⵠ++,
		"ⵠᐃᐃᐃⲆΔⲆ": ᐃⵠ++,
		"ⵠΔⵠⵠΔⵠᐃ": ᐃⵠ++,
		"ᐃⵠᐃΔⲆⵠⲆ": ᐃⵠ++,
		"ⲆⲆᐃᐃΔΔΔ": ᐃⵠ++,
		"ᐃᐃᐃᐃᐃΔⵠ": ᐃⵠ++,
		"ΔⲆⲆΔⵠᐃΔ": ᐃⵠ++,
		"ᐃⲆΔΔⵠⲆΔ": ᐃⵠ++,
		"ⵠΔᐃⲆⲆⲆⵠ": ᐃⵠ++,
		"ⵠⵠΔⲆᐃⲆⵠ": ᐃⵠ++,
		"ⲆⵠⵠΔⵠᐃⲆ": ᐃⵠ++,
		"ⵠⲆⲆⵠᐃΔΔ": ᐃⵠ++,
		"ΔⲆⵠΔⵠⲆΔ": ᐃⵠ++,
		"ᐃΔᐃΔᐃⵠᐃ": ᐃⵠ++,
		"ⵠⵠΔᐃⵠⵠΔ": ᐃⵠ++,
		"ⲆᐃⵠⵠⲆⵠᐃ": ᐃⵠ++,
		"ⲆᐃᐃⵠᐃⲆᐃ": ᐃⵠ++,
		"ⵠΔⵠΔⲆⵠⵠ": ᐃⵠ++,
		"ᐃⲆⵠᐃᐃⵠΔ": ᐃⵠ++,
		"ⵠⲆⲆⵠⵠΔⵠ": ᐃⵠ++,
		"ᐃⵠᐃΔⵠⲆⵠ": ᐃⵠ++,
		"ΔᐃⲆΔᐃΔⵠ": ᐃⵠ++,
		"ΔⲆΔᐃⲆΔΔ": ᐃⵠ++,
		"ΔᐃΔⵠⵠⵠⵠ": ᐃⵠ++,
		"ΔΔⲆⵠⵠⵠᐃ": ᐃⵠ++,
		"ⵠᐃⵠᐃⵠᐃⲆ": ᐃⵠ++
	};
	var ᐃⵠ = 0;
	var ⵠΔⲆ = {
		"ⲆⲆΔⵠⲆ": ᐃⵠ++,
		"ᐃⲆⵠΔΔ": ᐃⵠ++,
		"ᐃⲆⲆⲆΔ": ᐃⵠ++,
		"ᐃⵠⵠⲆᐃ": ᐃⵠ++,
		"ΔΔⵠᐃⲆ": ᐃⵠ++,
		"ΔΔΔΔΔ": ᐃⵠ++,
		"ⲆⲆⵠΔΔ": ᐃⵠ++,
		"ⲆⵠⵠΔΔ": ᐃⵠ++,
		"ⲆⵠⲆᐃΔ": ᐃⵠ++,
		"ⲆⵠΔⲆⲆ": ᐃⵠ++,
		"ⲆΔΔᐃΔ": ᐃⵠ++,
		"Ⲇᐃᐃᐃᐃ": ᐃⵠ++,
		"ⵠΔⵠᐃᐃ": ᐃⵠ++,
		"ⲆᐃⵠΔⵠ": ᐃⵠ++,
		"ⵠⲆΔΔⵠ": ᐃⵠ++,
		"ⲆᐃΔⵠⲆ": ᐃⵠ++,
		"ΔΔΔᐃΔ": ᐃⵠ++,
		"ⲆᐃⲆⲆᐃ": ᐃⵠ++,
		"ᐃⲆᐃⲆᐃ": ᐃⵠ++,
		"ⵠⵠΔᐃΔ": ᐃⵠ++,
		"ⲆⵠΔᐃⲆ": ᐃⵠ++,
		"ΔⲆⵠⵠΔ": ᐃⵠ++,
		"ᐃⲆΔⵠⵠ": ᐃⵠ++,
		"ⲆⵠⵠⲆᐃ": ᐃⵠ++,
		"ᐃᐃΔⲆᐃ": ᐃⵠ++,
		"ⲆⲆⵠΔⲆ": ᐃⵠ++,
		"ⲆΔΔⵠⵠ": ᐃⵠ++,
		"ᐃⵠᐃΔΔ": ᐃⵠ++,
		"ΔⵠⵠⵠΔ": ᐃⵠ++,
		"ⵠᐃᐃᐃⲆ": ᐃⵠ++,
		"Δᐃᐃᐃⵠ": ᐃⵠ++,
		"ⲆᐃⵠⲆⲆ": ᐃⵠ++,
		"ΔΔΔⲆᐃ": ᐃⵠ++,
		"ΔᐃⵠⲆᐃ": ᐃⵠ++,
		"ΔᐃⲆΔⲆ": ᐃⵠ++,
		"ⵠΔᐃᐃⵠ": ᐃⵠ++,
		"ΔᐃⲆⵠⲆ": ᐃⵠ++,
		"ⵠΔΔⲆⲆ": ᐃⵠ++,
		"ᐃⵠⲆⲆΔ": ᐃⵠ++,
		"ᐃᐃⵠⵠⵠ": ᐃⵠ++,
		"ⵠᐃΔΔᐃ": ᐃⵠ++,
		"ΔᐃⲆⵠᐃ": ᐃⵠ++,
		"ᐃⲆΔⲆΔ": ᐃⵠ++,
		"ⲆᐃᐃⲆⵠ": ᐃⵠ++,
		"ⲆᐃⵠΔⲆ": ᐃⵠ++,
		"ⵠΔᐃⵠⵠ": ᐃⵠ++,
		"ΔΔⲆⲆᐃ": ᐃⵠ++,
		"ⵠⲆᐃⵠⲆ": ᐃⵠ++,
		"ΔᐃᐃⲆⲆ": ᐃⵠ++,
		"ᐃⲆΔⲆⵠ": ᐃⵠ++,
		"ΔⵠΔᐃᐃ": ᐃⵠ++,
		"ⲆⲆᐃΔⵠ": ᐃⵠ++,
		"ΔᐃⵠΔⵠ": ᐃⵠ++,
		"ⵠⲆᐃⵠⵠ": ᐃⵠ++,
		"ⵠΔⲆⲆⲆ": ᐃⵠ++,
		"ΔⵠⵠⲆΔ": ᐃⵠ++,
		"ΔᐃΔⵠⵠ": ᐃⵠ++,
		"ᐃᐃᐃᐃᐃ": ᐃⵠ++,
		"ΔⲆΔᐃⵠ": ᐃⵠ++,
		"ᐃⲆⲆΔⲆ": ᐃⵠ++,
		"ᐃⲆⵠⲆⲆ": ᐃⵠ++,
		"ᐃΔⲆⵠⲆ": ᐃⵠ++,
		"ⵠⲆⲆᐃⵠ": ᐃⵠ++,
		"Δⵠᐃⵠⵠ": ᐃⵠ++,
		"ⲆⲆⲆⲆⵠ": ᐃⵠ++,
		"ᐃⵠⵠᐃΔ": ᐃⵠ++,
		"ⵠⲆΔⲆⵠ": ᐃⵠ++,
		"ⲆⲆᐃⵠΔ": ᐃⵠ++,
		"ᐃⵠⲆΔⵠ": ᐃⵠ++,
		"ⵠⵠⵠᐃΔ": ᐃⵠ++,
		"ⵠΔΔⵠΔ": ᐃⵠ++,
		"ⲆⲆⲆⵠⲆ": ᐃⵠ++,
		"ΔΔⵠⵠΔ": ᐃⵠ++,
		"ⲆΔᐃΔᐃ": ᐃⵠ++,
		"ⲆΔΔⵠΔ": ᐃⵠ++,
		"ⵠⵠΔⲆΔ": ᐃⵠ++,
		"ⲆᐃⵠΔΔ": ᐃⵠ++,
		"ⵠⵠᐃᐃΔ": ᐃⵠ++,
		"ⲆⵠΔⵠⵠ": ᐃⵠ++,
		"ᐃⵠᐃⲆΔ": ᐃⵠ++,
		"ⲆⵠᐃΔⵠ": ᐃⵠ++,
		"ΔⲆⲆⵠΔ": ᐃⵠ++,
		"ᐃΔΔΔⲆ": ᐃⵠ++,
		"ⵠⲆΔΔΔ": ᐃⵠ++,
		"ⵠⲆⲆΔⵠ": ᐃⵠ++,
		"ⵠⲆⵠⲆⲆ": ᐃⵠ++,
		"ΔⵠⲆΔΔ": ᐃⵠ++,
		"ⲆⵠⲆΔⵠ": ᐃⵠ++,
		"ᐃΔΔΔᐃ": ᐃⵠ++,
		"ΔᐃⵠⵠⲆ": ᐃⵠ++,
		"ⲆⲆᐃⵠⲆ": ᐃⵠ++,
		"ΔΔΔⲆΔ": ᐃⵠ++,
		"ΔⲆΔΔⲆ": ᐃⵠ++,
		"ᐃⵠⲆⵠΔ": ᐃⵠ++,
		"ᐃΔⵠⵠΔ": ᐃⵠ++,
		"ᐃᐃⵠⲆᐃ": ᐃⵠ++,
		"ΔⲆΔΔⵠ": ᐃⵠ++,
		"ⲆΔⵠⵠⲆ": ᐃⵠ++,
		"ᐃⲆΔΔⵠ": ᐃⵠ++,
		"ᐃΔⲆΔΔ": ᐃⵠ++,
		"ⵠᐃⵠⲆ": ᐃⵠ++,
		"ⲆᐃⵠⵠⲆ": ᐃⵠ++,
		"ᐃᐃᐃⲆᐃ": ᐃⵠ++,
		"ⲆⲆⵠⲆΔ": ᐃⵠ++,
		"ᐃⵠΔⲆᐃ": ᐃⵠ++,
		"ᐃᐃⲆΔⲆ": ᐃⵠ++,
		"ΔⵠᐃⲆⲆ": ᐃⵠ++,
		"ⲆᐃΔⵠᐃ": ᐃⵠ++,
		"ⲆⲆᐃᐃΔ": ᐃⵠ++,
		"ΔⵠᐃΔΔ": ᐃⵠ++,
		"ⲆᐃΔᐃᐃ": ᐃⵠ++,
		"ⲆⵠⲆⲆΔ": ᐃⵠ++,
		"ᐃΔⵠⵠΔΔⵠ": ᐃⵠ++,
		"ΔⲆⵠⲆⵠⲆⵠ": ᐃⵠ++,
		"ᐃⵠΔᐃⲆ": ᐃⵠ++,
		"ⲆⵠⲆᐃᐃ": ᐃⵠ++,
		"ᐃᐃⲆᐃΔ": ᐃⵠ++,
		"ⵠΔᐃΔΔ": ᐃⵠ++,
		"ΔⲆⵠΔⲆ": ᐃⵠ++,
		"ᐃΔⲆᐃΔ": ᐃⵠ++,
		"ⵠⵠᐃΔΔ": ᐃⵠ++,
		"ⵠⲆⲆΔⲆ": ᐃⵠ++,
		"ΔΔᐃⲆᐃ": ᐃⵠ++,
		"ⵠⵠΔⵠᐃ": ᐃⵠ++,
		"ΔᐃΔⵠᐃ": ᐃⵠ++,
		"ⵠᐃⲆⵠΔ": ᐃⵠ++,
		"ⵠⵠΔⵠⵠ": ᐃⵠ++,
		"ᐃⲆⲆⵠΔ": ᐃⵠ++,
		"ΔⲆⲆᐃⲆ": ᐃⵠ++,
		"ΔᐃⵠΔΔ": ᐃⵠ++,
		"ⵠΔⲆⵠᐃ": ᐃⵠ++,
		"ⵠᐃΔⲆᐃ": ᐃⵠ++,
		"ᐃⵠⲆΔΔ": ᐃⵠ++,
		"ⲆⲆΔᐃΔ": ᐃⵠ++,
		"ⲆⲆᐃⲆΔ": ᐃⵠ++,
		"ΔᐃⵠᐃΔ": ᐃⵠ++,
		"ᐃⲆΔΔΔ": ᐃⵠ++,
		"ⲆΔⵠⲆᐃ": ᐃⵠ++,
		"ⵠⵠᐃⲆⲆ": ᐃⵠ++,
		"ΔⲆᐃᐃᐃ": ᐃⵠ++,
		"ⵠᐃⵠⲆⵠ": ᐃⵠ++,
		"ⲆᐃΔⲆᐃ": ᐃⵠ++,
		"ⵠᐃᐃΔΔ": ᐃⵠ++,
		"ΔΔⵠⲆΔ": ᐃⵠ++,
		"ⵠⲆⵠⲆΔ": ᐃⵠ++,
		"ᐃΔⲆᐃⵠ": ᐃⵠ++,
		"ⵠΔⲆⲆΔ": ᐃⵠ++,
		"ᐃⲆⲆⵠⵠ": ᐃⵠ++,
		"ΔⵠΔⵠⲆ": ᐃⵠ++,
		"ⵠᐃΔⵠΔ": ᐃⵠ++,
		"ⵠᐃΔΔΔ": ᐃⵠ++,
		"ᐃᐃⲆⵠΔ": ᐃⵠ++,
		"ⵠⲆⲆᐃΔ": ᐃⵠ++,
		"ⵠⵠⲆΔΔ": ᐃⵠ++,
		"ⵠΔⲆᐃⲆ": ᐃⵠ++,
		"ΔΔᐃΔΔ": ᐃⵠ++,
		"ⲆᐃⲆⵠΔ": ᐃⵠ++,
		"ⵠⵠΔⲆⲆ": ᐃⵠ++,
		"ΔⵠⲆⲆᐃ": ᐃⵠ++,
		"ⲆΔⵠⲆⵠ": ᐃⵠ++,
		"ΔᐃΔᐃΔ": ᐃⵠ++,
		"ΔᐃΔⲆⲆ": ᐃⵠ++,
		"ⲆⵠᐃⲆⲆ": ᐃⵠ++,
		"ⲆᐃᐃⵠⲆ": ᐃⵠ++,
		"ᐃΔⲆᐃⲆ": ᐃⵠ++,
		"ᐃΔⵠΔᐃ": ᐃⵠ++,
		"ⵠⵠⵠⵠΔ": ᐃⵠ++,
		"ⵠᐃⲆᐃΔ": ᐃⵠ++,
		"ᐃΔᐃΔΔ": ᐃⵠ++,
		"ᐃᐃⵠΔⵠ": ᐃⵠ++,
		"ⲆⲆⵠΔᐃ": ᐃⵠ++,
		"ΔⲆⵠⲆⵠ": ᐃⵠ++,
		"ⲆⲆΔⵠΔ": ᐃⵠ++,
		"ΔⲆⵠⵠⲆ": ᐃⵠ++,
		"ⲆⲆⵠⵠΔ": ᐃⵠ++,
		"ⵠᐃⵠⵠⵠ": ᐃⵠ++,
		"ΔⲆᐃⵠⵠ": ᐃⵠ++
	};
	const ⲆΔⵠⲆⵠΔⵠ = ⲆᐃΔⵠⵠᐃᐃ;
	const ᐃᐃᐃΔⲆ = ⲆΔⲆᐃᐃ;
	var ᐃⵠ = 0;
	const ΔΔᐃΔⵠ = ΔΔⲆᐃ;
	const ΔⲆⵠΔⲆᐃΔ = ΔⵠⲆⲆⲆ;
	const ΔⲆⵠᐃᐃⵠⵠ = ΔΔⵠᐃᐃ;
	var ⵠⵠ = {
		"ⵠΔᐃᐃⵠ": ᐃⵠ++,
		"ΔΔΔΔΔ": ᐃⵠ++,
		"ΔᐃⲆᐃⵠ": ᐃⵠ++,
		"ⲆⲆⵠΔΔ": ᐃⵠ++,
		"ⲆⵠⵠΔΔ": ᐃⵠ++,
		"ΔᐃⲆⵠⲆ": ᐃⵠ++,
		"ⵠΔΔⲆⲆ": ᐃⵠ++,
		"ΔᐃᐃⵠⲆ": ᐃⵠ++,
		"ΔΔⵠᐃⲆ": ᐃⵠ++,
		"ⲆΔⵠⵠᐃ": ᐃⵠ++,
		"ⵠⲆΔΔΔ": ᐃⵠ++,
		"ⵠⲆⲆΔⵠ": ᐃⵠ++,
		"ⲆⲆⵠΔⲆ": ᐃⵠ++,
		"ⲆΔΔⵠⵠ": ᐃⵠ++,
		"ᐃⵠᐃΔΔ": ᐃⵠ++,
		"ΔⵠⵠⵠΔ": ᐃⵠ++,
		"ⲆᐃⵠⲆⲆ": ᐃⵠ++,
		"ΔΔΔⲆᐃ": ᐃⵠ++,
		"ΔᐃⵠⲆᐃ": ᐃⵠ++,
		"ᐃᐃⵠⵠⵠ": ᐃⵠ++,
		"ᐃᐃⵠⲆᐃ": ᐃⵠ++,
		"ΔⲆΔΔⵠ": ᐃⵠ++,
		"ⲆΔⵠⵠⲆ": ᐃⵠ++,
		"ⲆⵠᐃΔⵠ": ᐃⵠ++,
		"ΔⲆⲆⵠΔ": ᐃⵠ++,
		"ᐃΔΔΔᐃ": ᐃⵠ++,
		"ΔᐃⵠⵠⲆ": ᐃⵠ++,
		"ⲆⲆᐃⵠⲆ": ᐃⵠ++,
		"ᐃᐃΔⲆᐃ": ᐃⵠ++,
		"ⵠᐃⵠⲆ": ᐃⵠ++,
		"ᐃⵠⲆⲆΔ": ᐃⵠ++,
		"ⲆⵠⲆᐃΔ": ᐃⵠ++,
		"ⲆⵠΔⲆⲆ": ᐃⵠ++,
		"ⵠᐃᐃᐃⲆ": ᐃⵠ++,
		"Δᐃᐃᐃⵠ": ᐃⵠ++,
		"ⲆΔΔᐃΔ": ᐃⵠ++,
		"Ⲇᐃᐃᐃᐃ": ᐃⵠ++,
		"ⵠΔⵠᐃᐃ": ᐃⵠ++,
		"ⲆᐃⵠΔⵠ": ᐃⵠ++,
		"ⵠⲆΔΔⵠ": ᐃⵠ++,
		"ⵠⲆⵠⲆⲆ": ᐃⵠ++,
		"ᐃⲆⲆᐃΔ": ᐃⵠ++,
		"ⲆⲆᐃΔⲆ": ᐃⵠ++,
		"ΔΔΔⲆΔ": ᐃⵠ++,
		"ΔⲆΔΔⲆ": ᐃⵠ++,
		"ⲆᐃΔⵠⲆ": ᐃⵠ++,
		"ΔΔΔᐃΔ": ᐃⵠ++,
		"ᐃΔⵠⵠΔ": ᐃⵠ++,
		"ᐃⵠⲆⵠΔ": ᐃⵠ++,
		"ΔⲆⵠⵠΔ": ᐃⵠ++,
		"ⲆᐃⲆⲆᐃ": ᐃⵠ++,
		"ᐃⲆᐃⲆᐃ": ᐃⵠ++,
		"ⵠⵠΔᐃΔ": ᐃⵠ++,
		"ᐃⲆΔⵠⵠ": ᐃⵠ++,
		"ⲆⵠⵠⲆᐃ": ᐃⵠ++,
		"ΔΔᐃⲆᐃ": ᐃⵠ++,
		"ⵠⵠΔⵠᐃ": ᐃⵠ++,
		"ΔᐃⲆΔⲆ": ᐃⵠ++,
		"ⲆⵠⲆΔⵠ": ᐃⵠ++,
		"ⵠⵠΔⵠⵠ": ᐃⵠ++,
		"ᐃⲆⲆⵠΔ": ᐃⵠ++,
		"ΔⲆⲆᐃⲆ": ᐃⵠ++,
		"ΔᐃⵠΔΔ": ᐃⵠ++,
		"ⵠΔⲆⵠᐃ": ᐃⵠ++,
		"ⵠᐃΔⲆᐃ": ᐃⵠ++,
		"ⲆⲆΔᐃΔ": ᐃⵠ++,
		"ΔᐃⵠᐃΔ": ᐃⵠ++,
		"ⲆΔⵠⲆᐃ": ᐃⵠ++,
		"ΔⲆᐃᐃᐃ": ᐃⵠ++,
		"ⲆᐃΔⲆᐃ": ᐃⵠ++,
		"ΔΔⵠⲆΔ": ᐃⵠ++,
		"ᐃΔⲆᐃⵠ": ᐃⵠ++,
		"ⵠΔⲆⲆΔ": ᐃⵠ++,
		"ᐃⲆⲆⵠⵠ": ᐃⵠ++,
		"ΔⵠΔⵠⲆ": ᐃⵠ++,
		"ⵠᐃΔⵠΔ": ᐃⵠ++,
		"ⵠᐃΔΔΔ": ᐃⵠ++,
		"ᐃᐃⲆⵠΔ": ᐃⵠ++,
		"ⵠⲆⲆᐃΔ": ᐃⵠ++,
		"ⵠⵠⲆΔΔ": ᐃⵠ++,
		"ᐃⲆΔΔⵠ": ᐃⵠ++,
		"ᐃΔⲆΔΔ": ᐃⵠ++,
		"ᐃΔΔΔⲆ": ᐃⵠ++,
		"ⵠΔⲆᐃⲆ": ᐃⵠ++,
		"ΔΔᐃΔΔ": ᐃⵠ++,
		"ⲆᐃⲆⵠΔ": ᐃⵠ++,
		"ⵠⵠΔⲆⲆ": ᐃⵠ++,
		"ᐃⲆⲆⲆⵠ": ᐃⵠ++,
		"ΔⵠⲆΔΔ": ᐃⵠ++,
		"ᐃΔⵠΔᐃ": ᐃⵠ++,
		"ΔⲆⵠⵠⲆ": ᐃⵠ++,
		"ΔⲆᐃⵠⵠ": ᐃⵠ++,
		"ⲆⲆⵠⵠΔ": ᐃⵠ++,
		"ⵠᐃⵠⵠⵠ": ᐃⵠ++,
		"ⵠᐃⲆᐃΔ": ᐃⵠ++,
		"ᐃΔᐃΔΔ": ᐃⵠ++,
		"ᐃᐃⵠΔⵠ": ᐃⵠ++,
		"ⲆⲆⵠΔᐃ": ᐃⵠ++,
		"ΔⲆⵠⲆⵠ": ᐃⵠ++,
		"ⲆⲆΔⵠΔ": ᐃⵠ++,
		"ᐃⲆΔᐃⵠ": ᐃⵠ++,
		"ᐃⵠⲆΔΔ": ᐃⵠ++,
		"ⲆⲆᐃⲆΔ": ᐃⵠ++,
		"ᐃⲆΔΔΔ": ᐃⵠ++,
		"ⵠⵠᐃⲆⲆ": ᐃⵠ++,
		"ⵠᐃⵠⲆⵠ": ᐃⵠ++,
		"ⵠᐃᐃΔΔ": ᐃⵠ++,
		"ⵠⲆⵠⲆΔ": ᐃⵠ++,
		"ⵠⵠΔΔ": ᐃⵠ++,
		"ⲆⵠᐃΔ": ᐃⵠ++,
		"ⲆΔᐃⵠⲆ": ᐃⵠ++,
		"ᐃΔᐃⲆ": ᐃⵠ++,
		"ⲆᐃⲆᐃ": ᐃⵠ++,
		"ⲆⲆΔⵠⲆ": ᐃⵠ++,
		"ᐃⵠⵠⲆᐃ": ᐃⵠ++,
		"ⵠᐃΔΔᐃ": ᐃⵠ++,
		"ᐃⵠΔⵠⵠ": ᐃⵠ++,
		"ᐃⲆΔⲆⵠ": ᐃⵠ++,
		"ᐃⲆⵠΔΔ": ᐃⵠ++,
		"ᐃⲆⲆⲆΔ": ᐃⵠ++,
		"ⲆᐃⵠⵠⲆ": ᐃⵠ++,
		"ⲆΔΔᐃ": ᐃⵠ++,
		"ᐃⲆⲆΔⲆ": ᐃⵠ++,
		"ⲆⲆⲆⵠⲆ": ᐃⵠ++,
		"ᐃⵠⵠᐃΔ": ᐃⵠ++,
		"ΔⵠᐃⲆⲆ": ᐃⵠ++,
		"ⵠᐃᐃΔⵠ": ᐃⵠ++,
		"ⲆⵠⲆⲆΔ": ᐃⵠ++,
		"ⲆᐃΔᐃᐃ": ᐃⵠ++,
		"ⵠⵠⵠᐃᐃ": ᐃⵠ++,
		"ⲆⵠΔᐃⲆ": ᐃⵠ++,
		"ΔⲆⵠᐃⲆ": ᐃⵠ++,
		"ΔᐃⲆⵠᐃ": ᐃⵠ++,
		"ΔᐃⵠΔⵠ": ᐃⵠ++,
		"ⵠⵠⵠⵠᐃ": ᐃⵠ++,
		"ᐃⵠΔᐃⲆ": ᐃⵠ++,
		"ⵠⲆᐃⵠⵠ": ᐃⵠ++,
		"ᐃⵠⵠΔΔ": ᐃⵠ++,
		"ΔⵠΔᐃᐃ": ᐃⵠ++,
		"Δⵠⵠⵠᐃ": ᐃⵠ++,
		"ⵠⵠΔᐃⵠ": ᐃⵠ++,
		"ΔⵠᐃΔΔ": ᐃⵠ++,
		"ⲆΔⲆⲆΔ": ᐃⵠ++,
		"ⲆⲆᐃΔⵠ": ᐃⵠ++,
		"ΔᐃΔⵠᐃ": ᐃⵠ++,
		"ⵠᐃⲆⵠΔ": ᐃⵠ++,
		"ΔⲆⵠⲆⲆ": ᐃⵠ++,
		"ᐃᐃᐃⲆᐃ": ᐃⵠ++,
		"ⲆⲆⵠⲆΔ": ᐃⵠ++,
		"ΔⵠᐃᐃⲆ": ᐃⵠ++,
		"ⲆΔⲆⵠⲆ": ᐃⵠ++,
		"ⲆⵠⲆᐃᐃ": ᐃⵠ++,
		"ᐃᐃⲆᐃΔ": ᐃⵠ++,
		"ⵠΔᐃΔΔ": ᐃⵠ++,
		"ΔⲆⵠΔⲆ": ᐃⵠ++,
		"ᐃΔⲆᐃΔ": ᐃⵠ++,
		"ⵠⵠᐃΔΔ": ᐃⵠ++,
		"ⵠⲆⲆΔⲆ": ᐃⵠ++,
		"ᐃⵠΔⲆᐃ": ᐃⵠ++,
		"ᐃᐃⲆΔⲆ": ᐃⵠ++,
		"ⲆⲆᐃⵠΔ": ᐃⵠ++,
		"ⲆⵠⵠᐃⲆ": ᐃⵠ++,
		"ΔⵠⵠⲆΔ": ᐃⵠ++,
		"ΔᐃΔⵠⵠ": ᐃⵠ++,
		"ᐃᐃᐃᐃᐃ": ᐃⵠ++,
		"ΔⲆΔᐃⵠ": ᐃⵠ++,
		"ᐃΔⲆⵠⲆ": ᐃⵠ++,
		"ᐃⵠᐃⲆΔ": ᐃⵠ++,
		"ᐃⵠⲆΔⵠ": ᐃⵠ++,
		"ⵠⵠⵠᐃΔ": ᐃⵠ++,
		"ⵠΔΔⵠΔ": ᐃⵠ++,
		"ⵠⲆⲆᐃⵠ": ᐃⵠ++,
		"Δⵠᐃⵠⵠ": ᐃⵠ++,
		"ⲆⲆⲆⲆⵠ": ᐃⵠ++,
		"ΔΔⲆⲆⲆ": ᐃⵠ++,
		"ⲆⵠΔΔⲆ": ᐃⵠ++,
		"ᐃⲆΔⵠΔ": ᐃⵠ++,
		"ΔⵠⵠΔᐃ": ᐃⵠ++,
		"ᐃΔⲆⲆⲆ": ᐃⵠ++,
		"ΔᐃⵠΔⲆ": ᐃⵠ++,
		"ΔⵠⲆⲆᐃ": ᐃⵠ++,
		"ⲆΔⵠⲆⵠ": ᐃⵠ++,
		"ΔᐃΔᐃΔ": ᐃⵠ++,
		"ΔᐃΔⲆⲆ": ᐃⵠ++,
		"ⵠⵠᐃⲆΔ": ᐃⵠ++,
		"ᐃⵠⵠⵠⵠ": ᐃⵠ++,
		"ⵠⵠⵠⲆᐃ": ᐃⵠ++,
		"ⲆⲆΔΔΔ": ᐃⵠ++,
		"ᐃⲆΔⲆΔ": ᐃⵠ++,
		"ΔⲆᐃⲆᐃ": ᐃⵠ++,
		"ⲆᐃΔⵠᐃ": ᐃⵠ++,
		"ⲆᐃᐃⲆⵠ": ᐃⵠ++,
		"ⲆⲆⵠΔⵠ": ᐃⵠ++,
		"ⲆᐃⵠΔⲆ": ᐃⵠ++,
		"ᐃᐃⵠⵠⲆ": ᐃⵠ++,
		"ⵠΔⲆⲆⲆ": ᐃⵠ++,
		"ΔⵠᐃΔᐃ": ᐃⵠ++,
		"ΔᐃᐃΔⲆ": ᐃⵠ++,
		"ⲆⵠᐃⲆⲆ": ᐃⵠ++,
		"ΔⲆⲆⲆᐃ": ᐃⵠ++,
		"ᐃΔⲆⵠⵠ": ᐃⵠ++,
		"ⲆᐃᐃΔᐃ": ᐃⵠ++,
		"ⲆᐃⲆⲆ": ᐃⵠ++,
		"ΔᐃⵠΔᐃ": ᐃⵠ++,
		"ⵠΔᐃⵠⵠ": ᐃⵠ++,
		"ⲆᐃᐃᐃΔ": ᐃⵠ++,
		"ΔΔⲆⲆᐃ": ᐃⵠ++,
		"ⵠⲆⵠΔⲆ": ᐃⵠ++,
		"ⵠⲆᐃⵠⲆ": ᐃⵠ++,
		"ⵠⲆⵠΔΔ": ᐃⵠ++,
		"ΔᐃᐃⲆⲆ": ᐃⵠ++,
		"ⵠΔᐃΔⵠ": ᐃⵠ++,
		"ⲆΔᐃΔᐃ": ᐃⵠ++,
		"ⲆΔΔⵠΔ": ᐃⵠ++,
		"ⵠⵠΔⲆΔ": ᐃⵠ++,
		"ⲆᐃⵠΔΔ": ᐃⵠ++,
		"ⵠⵠᐃᐃΔ": ᐃⵠ++,
		"ᐃⲆⵠⲆⲆ": ᐃⵠ++,
		"ⵠⲆΔⲆⵠ": ᐃⵠ++,
		"ΔΔⵠⵠΔ": ᐃⵠ++,
		"ⲆⵠΔⵠⵠ": ᐃⵠ++,
		"ⲆⲆᐃᐃΔ": ᐃⵠ++,
		"ⲆⲆᐃᐃⲆ": ᐃⵠ++,
		"ⲆᐃᐃⵠⲆ": ᐃⵠ++,
		"ᐃΔⲆᐃⲆ": ᐃⵠ++,
		"ⲆⲆᐃΔΔ": ᐃⵠ++,
		"ⵠⲆⲆⵠᐃ": ᐃⵠ++,
		"ⲆⵠⲆⵠᐃ": ᐃⵠ++,
		"ⲆᐃⲆⲆΔ": ᐃⵠ++,
		"ΔⵠⲆΔᐃ": ᐃⵠ++,
		"ⵠⵠⵠⵠΔ": ᐃⵠ++,
		"ᐃⲆᐃΔⵠ": ᐃⵠ++,
		"ΔᐃᐃΔⵠ": ᐃⵠ++,
		"ᐃΔΔⲆᐃ": ᐃⵠ++,
		"ᐃᐃⲆᐃⲆ": ᐃⵠ++,
		"ⵠᐃᐃⵠⵠᐃⵠ": ᐃⵠ++,
		"ΔⲆⲆⲆⲆᐃⲆ": ᐃⵠ++,
		"ΔΔⲆⲆΔ": ᐃⵠ++,
		"ⵠᐃⲆᐃⵠ": ᐃⵠ++,
		"ⲆΔΔᐃⲆ": ᐃⵠ++,
		"ΔᐃⵠⲆⲆ": ᐃⵠ++
	};
	const ⲆᐃⲆᐃⵠⵠⵠ = ⲆΔⲆⲆⲆ;
	const ᐃΔᐃΔΔᐃΔ = ⵠΔⲆⵠΔ;
	const ΔΔΔΔΔⵠⵠⲆΔ = ΔⲆⲆⲆⲆΔΔ;
	const ⲆΔⵠᐃⵠ = ⵠⲆⲆᐃᐃ;
	var Ⲇᐃⵠⵠ = {
		"ⲆᐃᐃᐃⲆ": 2,
		"ΔⲆⲆⵠⲆ": ᐃΔⵠⵠ,
		"ΔΔᐃΔᐃ": ⵠⲆΔ,
		"ⵠⵠⲆᐃⵠ": 1,
		"ᐃᐃΔⵠᐃ": 3,
		"ΔΔΔⲆⲆ": 5
	};
	const ⵠⲆⵠᐃΔᐃⵠΔⲆ = ΔⵠᐃΔᐃⲆⵠ;
	const ᐃΔⲆΔ = ΔΔᐃΔ;
	const ᐃⲆⵠⵠⲆ = ΔⲆΔᐃΔ;
	var Ⲇⵠᐃᐃ = [];
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⵠᐃΔ] = {
		name: "Wood",
		"ᐃᐃ": Δ.ᐃΔᐃⲆΔΔⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⵠⲆᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠΔΔ] = {
		name: "Stone",
		"ᐃᐃ": Δ.ᐃΔⵠⵠᐃⲆⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⵠⵠⵠ
	};
	const ᐃⵠᐃΔΔⵠᐃ = ᐃⲆᐃᐃⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃΔᐃⲆ] = {
		name: "Gold",
		"ᐃᐃ": Δ.ⲆⵠᐃᐃᐃᐃΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": Ⲇᐃⵠ
	};
	const ΔᐃᐃⵠⲆᐃᐃ = ᐃⵠⵠΔⲆ;
	const ΔᐃⲆⵠΔ = ΔᐃΔΔᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃⲆᐃ] = {
		name: "Diamond",
		"ᐃᐃ": Δ.ⲆᐃΔᐃⲆⵠⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆΔΔᐃ] = {
		name: "Amethyst",
		"ᐃᐃ": Δ.ⲆᐃᐃⵠⲆⲆⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃⲆᐃⵠ] = {
		name: "Rabbit fur",
		"ᐃᐃ": Δ.ΔᐃⵠⵠΔⵠΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	const ⵠᐃᐃᐃⵠⵠⵠ = ⲆⵠⵠⲆⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔΔⲆⲆⲆ] = {
		name: "Wolf fur",
		"ᐃᐃ": Δ.ᐃⲆⵠⵠⲆΔⲆ,
		"ⵠⵠⲆΔ": ⵠᐃⲆ,
		"ᐃⲆΔⵠ": 0
	};
	const Δᐃⵠᐃⵠ = ⲆⵠⲆΔᐃ;
	const ⲆⵠⲆΔΔⵠⵠ = ΔΔⵠⲆᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔΔⲆⲆΔ] = {
		name: "Boar fur",
		"ᐃᐃ": Δ.ⵠⲆⲆΔᐃᐃⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆΔᐃⵠ] = {
		name: "Firefly",
		"ᐃᐃ": Δ.ⲆΔⵠᐃⲆⲆΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⵠⲆΔΔ] = {
		name: "Wood arrow",
		"ᐃᐃ": Δ.ⲆᐃⵠΔⵠⵠΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⲆᐃΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆᐃⲆΔ] = {
		name: "Stone arrow",
		"ᐃᐃ": Δ.ⲆᐃΔΔⲆⵠⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆΔΔΔ] = {
		name: "Gold arrow",
		"ᐃᐃ": Δ.ⵠᐃⲆΔΔⵠⲆ,
		"ⵠⵠⲆΔ": ⵠⲆᐃ,
		"ᐃⲆΔⵠ": ᐃⲆΔ
	};
	const ᐃΔⲆⲆⵠ = ᐃΔΔⲆⲆ;
	const ⲆⵠⲆⲆⵠⵠⲆ = ⵠᐃⲆⵠᐃ;
	const ⲆⲆⲆⲆⲆ = ⵠΔⵠⲆⵠ;
	const ⲆⲆᐃⵠ = ᐃΔⲆΔ;
	const ⵠⲆᐃⵠⵠᐃⲆ = ⲆⵠⵠΔᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠᐃⲆⲆ] = {
		name: "Diamond arrow",
		"ᐃᐃ": Δ.ΔⲆΔᐃᐃΔᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠᐃⵠⲆⵠ] = {
		name: "Amethyst arrow",
		"ᐃᐃ": Δ.ⲆⵠⵠⵠⵠⵠΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": Ⲇⵠᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠᐃᐃΔΔ] = {
		name: "Reidite arrow",
		"ᐃᐃ": Δ.ᐃᐃᐃᐃⲆᐃΔ,
		"ⵠⵠⲆΔ": ΔⲆⲆ,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⲆⵠⲆΔ] = {
		name: "Dragon arrow",
		"ᐃᐃ": Δ.ΔⵠⵠΔⲆⲆᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆⵠⲆⲆ] = {
		name: "Winter fur",
		"ᐃᐃ": Δ.ⵠΔΔⲆⲆⵠⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	const ⵠⵠᐃΔ = ᐃⲆᐃⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃⵠⲆⲆ] = {
		name: "Fur mammoth",
		"ᐃᐃ": Δ.ⲆⲆΔⲆⲆᐃΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	const ⵠⵠΔⵠΔⲆⵠ = ᐃⲆⵠΔΔⲆⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⵠⵠᐃⲆ] = {
		name: "Web",
		"ᐃᐃ": Δ.Δᐃⵠⵠⵠⵠⵠ,
		"ⵠⵠⲆΔ": ⵠⵠⵠ,
		"ᐃⲆΔⵠ": 0
	};
	const ⵠΔⵠᐃⲆ = ⵠᐃⲆⵠⲆ;
	const ⵠΔᐃⵠ = Ⲇᐃⵠ;
	const ⲆⵠᐃⵠΔᐃΔ = ᐃᐃⲆⲆⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⵠΔⵠⵠ] = {
		name: "Meat",
		"ᐃᐃ": Δ.ⲆⵠᐃΔΔΔΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	const ᐃᐃᐃᐃⵠ = ⲆⵠΔΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⵠⵠΔΔ] = {
		name: "Fish",
		"ᐃᐃ": Δ.ⵠⵠᐃⲆΔᐃⲆ,
		"ⵠⵠⲆΔ": ⵠⵠⵠ,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠⵠᐃᐃ] = {
		name: "Kraken skin",
		"ᐃᐃ": Δ.ⵠᐃⵠⵠΔⵠΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⵠⵠⵠ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.Δⵠⵠⵠᐃ] = {
		name: "Piranha scales",
		"ᐃᐃ": Δ.ΔΔⲆΔⲆⲆᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆΔⲆⲆΔ] = {
		name: "Ice",
		"ᐃᐃ": Δ.ⵠⲆⲆᐃᐃⲆᐃ,
		"ⵠⵠⲆΔ": ⵠⲆᐃ,
		"ᐃⲆΔⵠ": ⵠⲆΔ
	};
	const ᐃⵠⲆΔⲆᐃΔ = ⵠΔΔΔΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠᐃᐃΔⵠ] = {
		name: "Sand",
		"ᐃᐃ": Δ.ᐃᐃᐃΔⲆΔⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	const ᐃⵠᐃΔⲆ = ⵠΔΔΔⵠ;
	const ᐃⲆΔⲆⲆΔᐃ = ⵠᐃᐃⵠΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠΔᐃⵠ] = {
		name: "Dirt",
		"ᐃᐃ": Δ.ⵠⵠⵠⵠⵠᐃᐃ,
		"ⵠⵠⲆΔ": Ⲇᐃⵠ,
		"ᐃⲆΔⵠ": 0
	};
	const ᐃⵠⲆⲆᐃ = ΔⵠΔⵠⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆΔᐃⵠⲆ] = {
		name: "Berrie",
		"ᐃᐃ": Δ.ⲆⵠⲆᐃⵠᐃⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ΔΔᐃ
	};
	const ᐃⵠΔΔⲆⵠᐃⲆⵠ = ⲆⵠⲆΔⲆⲆΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆⵠᐃⲆ] = {
		name: "Flour",
		"ᐃᐃ": Δ.ⵠΔⵠⵠⲆⲆⲆ,
		"ⵠⵠⲆΔ": ⵠⲆᐃ,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠⵠⵠᐃ] = {
		name: "Flour",
		"ᐃᐃ": Δ.ⲆⵠⲆⲆⲆⲆᐃ,
		"ⵠⵠⲆΔ": ΔΔᐃ,
		"ᐃⲆΔⵠ": ⵠᐃⲆ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃΔⲆⲆⲆ] = {
		name: "Special fur peasant",
		"ᐃᐃ": Δ.ⵠⲆΔΔⵠⲆⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	const ⲆΔΔΔ = Ⲇⵠᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃⵠΔⲆ] = {
		name: "Special fur hood",
		"ᐃᐃ": Δ.ΔᐃᐃⲆⵠⵠᐃ,
		"ⵠⵠⲆΔ": ⵠΔᐃⵠ,
		"ᐃⲆΔⵠ": ᐃᐃⲆ
	};
	const ΔⵠΔⵠⲆⲆⵠ = ᐃⲆᐃⲆⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆᐃⲆᐃ] = {
		name: "Pumpkin",
		"ᐃᐃ": Δ.ᐃⲆᐃᐃᐃΔⵠ,
		"ⵠⵠⲆΔ": Ⲇᐃⵠ,
		"ᐃⲆΔⵠ": ⵠᐃⲆ
	};
	const ⲆΔⵠⲆⵠⵠΔ = ⵠΔⵠΔΔ;
	const ΔΔᐃΔᐃΔΔ = ⲆᐃΔᐃⵠ;
	const ⲆᐃⵠΔ = ΔΔⲆᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆⵠΔⵠ] = {
		name: "Garlic",
		"ᐃᐃ": Δ.ᐃⵠⵠΔⵠⵠᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⵠⵠⵠ
	};
	const Ⲇᐃᐃⵠⵠᐃⵠ = ᐃⵠⵠⵠΔ;
	const ᐃᐃⲆⵠⲆ = ⵠⲆⲆᐃᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃᐃⵠⵠⲆ] = {
		name: "Thornbush",
		"ᐃᐃ": Δ.ΔᐃⵠⲆⲆⵠΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃᐃᐃΔ] = {
		name: "Carrot",
		"ᐃᐃ": Δ.ⵠΔᐃᐃⵠᐃⲆ,
		"ⵠⵠⲆΔ": Ⲇᐃⵠ,
		"ᐃⲆΔⵠ": 0
	};
	const Δⵠᐃᐃⵠ = ΔⵠΔⵠΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⲆⵠΔⲆ] = {
		name: "Tomato",
		"ᐃᐃ": Δ.ⵠⵠⵠⵠⲆᐃⵠ,
		"ⵠⵠⲆΔ": ⵠᐃⲆ,
		"ᐃⲆΔⵠ": ᐃᐃᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⲆⵠΔΔ] = {
		name: "Watermelon",
		"ᐃᐃ": Δ.ΔⵠᐃⲆᐃΔᐃ,
		"ⵠⵠⲆΔ": ΔΔᐃ,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠΔᐃΔⵠ] = {
		name: "Aloe Vera",
		"ᐃᐃ": Δ.ΔΔⲆᐃᐃΔᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⵠⲆΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆᐃᐃⲆ] = {
		name: "Penguin Feather",
		"ᐃᐃ": Δ.ⲆΔⵠⲆⲆ,
		"ⵠⵠⲆΔ": ΔΔᐃ,
		"ᐃⲆΔⵠ": ⵠⲆᐃ
	};
	const ⵠⵠⲆⵠᐃᐃᐃ = ᐃⵠⵠΔⵠΔⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆᐃΔⵠ] = {
		name: "Hawk Feather",
		"ᐃᐃ": Δ.ⵠⲆΔᐃⵠ,
		"ⵠⵠⲆΔ": ᐃᐃᐃ,
		"ᐃⲆΔⵠ": 0
	};
	const ᐃⵠⲆⲆⵠⲆⵠ = ΔΔΔΔᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃᐃΔⵠ] = {
		name: "Vulture Feather",
		"ᐃᐃ": Δ.ⲆᐃⲆΔΔ,
		"ⵠⵠⲆΔ": ᐃᐃⲆ,
		"ᐃⲆΔⵠ": 0
	};
	const ΔΔΔⵠ = ᐃᐃΔⵠ;
	const ΔᐃⵠΔᐃⵠᐃ = ⲆⵠⲆΔΔⵠⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃΔΔⲆᐃ] = {
		name: ⵠ[157],
		"ᐃᐃ": Δ.ᐃΔΔⵠⵠⲆᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ᐃᐃⲆ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆⲆⲆⲆᐃⲆ] = {
		name: ⵠ[157],
		"ᐃᐃ": Δ.ΔⵠⵠΔⲆΔᐃ,
		"ⵠⵠⲆΔ": ⵠⲆΔ,
		"ᐃⲆΔⵠ": ᐃᐃᐃ
	};
	const ΔⲆΔⵠᐃ = ⵠⵠⲆᐃᐃ;
	const ᐃΔⲆΔΔⲆᐃ = ⲆΔⲆⲆⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠᐃᐃⵠⵠᐃⵠ] = {
		name: "Pitchfork Part",
		"ᐃᐃ": Δ.ⵠⲆⲆΔᐃΔΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": Ⲇᐃⵠ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠᐃⲆᐃⵠ] = {
		name: ⵠ[128],
		"ᐃᐃ": Δ.ΔⲆᐃΔΔᐃⲆ,
		"ⵠⵠⲆΔ": ΔΔᐃ,
		"ᐃⲆΔⵠ": 0
	};
	const ⵠᐃⲆΔⲆⲆΔ = ΔΔᐃΔΔΔᐃ;
	const ⲆᐃᐃⲆᐃΔⵠᐃΔ = ᐃΔΔⲆⵠΔⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃᐃⲆᐃⲆ] = {
		name: "Emerald",
		"ᐃᐃ": Δ.ΔⲆⲆⲆΔ,
		"ⵠⵠⲆΔ": ⵠᐃⲆ,
		"ᐃⲆΔⵠ": ΔΔᐃ
	};
	const ΔᐃΔᐃᐃⲆⲆ = ⲆᐃΔⲆⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆⲆᐃΔ] = {
		name: "Christmas Hat",
		"ᐃᐃ": Δ.ΔⲆⵠⵠⵠᐃΔ,
		"ᐃⲆΔⵠ": 0
	};
	const ᐃΔⵠᐃⲆ = ᐃΔΔⵠⲆ;
	const ⲆⵠⲆⵠⲆᐃⵠᐃᐃ = ΔⲆⲆⲆⲆΔΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆᐃΔⲆ] = {
		name: "Elf Hat",
		"ᐃᐃ": Δ.ᐃΔᐃΔΔⲆⲆ,
		"ᐃⲆΔⵠ": ΔⲆⲆ
	};
	const ᐃⲆΔⵠⵠᐃᐃ = ⲆⵠⵠΔᐃ;
	const ⵠⵠⲆᐃᐃⵠᐃ = ᐃⵠᐃⵠᐃ;
	const ΔⵠⲆⲆ = ᐃⲆΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃᐃΔᐃ] = {
		name: "Garland",
		"ᐃᐃ": Δ.ΔᐃⵠᐃᐃⲆΔ,
		"ᐃⲆΔⵠ": 0,
		"ⵠⵠⲆΔ": ΔΔᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃΔⲆⵠⵠ] = {
		name: "Candy",
		"ᐃᐃ": Δ.ᐃᐃᐃΔᐃⲆᐃ,
		"ᐃⲆΔⵠ": 0
	};
	const ᐃΔⵠᐃⵠ = ᐃⵠΔᐃⵠ;
	const ᐃⵠⵠⵠᐃ = ᐃΔᐃΔ;
	const ⲆΔⲆᐃᐃⵠⲆ = ⵠᐃᐃⵠΔ;
	const ΔΔΔᐃⲆ = ⵠⲆⵠᐃⵠ;
	const ⲆⲆᐃⵠⲆⵠⲆ = ΔⲆⵠΔᐃ;
	const ᐃᐃⲆⲆΔ = ᐃⲆⲆΔⵠ;
	const ᐃⲆΔΔ = ᐃⵠΔᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆⲆⲆᐃ] = {
		name: "Sugar Cane",
		"ᐃᐃ": Δ.ⵠᐃⵠⵠⲆⲆⵠ,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆΔⵠⵠᐃ] = {
		name: "Pirate Sword",
		"ᐃᐃ": Δ.ⵠᐃᐃᐃⲆΔᐃ,
		"ⵠⵠⲆΔ": ⵠⵠⵠ,
		"ᐃⲆΔⵠ": 0
	};
	const ⲆᐃΔⵠΔΔᐃ = ⵠΔⵠⵠᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⵠᐃΔᐃ] = {
		name: "Crab Stick",
		"ᐃᐃ": Δ.ᐃⵠᐃⲆΔⵠⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⵠᐃⲆ
	};
	const ᐃⲆⵠᐃⲆᐃⲆ = ⲆⵠΔᐃΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃⲆⲆ] = {
		name: "Reidite",
		"ᐃᐃ": Δ.ΔΔⵠΔⲆⲆᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ΔⲆⲆ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃⵠΔᐃ] = {
		name: "Flame",
		"ᐃᐃ": Δ.ⵠⲆⲆⵠⵠⵠⲆ,
		"ⵠⵠⲆΔ": ⵠΔᐃⵠ,
		"ᐃⲆΔⵠ": ᐃᐃⲆ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆΔⵠⲆ] = {
		name: "Campfire",
		"ᐃᐃ": Δ.ⵠⲆⵠⲆΔΔΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	const ΔΔΔⵠᐃⲆⵠ = ⲆᐃΔⲆΔ;
	const ᐃΔΔⲆⲆⲆᐃ = ᐃᐃⵠᐃᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⵠᐃⲆⲆ] = {
		name: ⵠ[271],
		"ᐃᐃ": Δ.ⲆⵠⲆᐃΔᐃΔ,
		"ⵠⵠⲆΔ": Ⲇᐃⵠ,
		"ᐃⲆΔⵠ": 1
	};
	const ᐃᐃᐃΔⵠ = ΔⲆⵠⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⵠⵠⲆᐃ] = {
		name: "Workbench",
		"ᐃᐃ": Δ.ⵠⲆᐃΔⵠᐃΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⲆᐃΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠΔᐃᐃⵠ] = {
		name: "Stone sword",
		"ᐃᐃ": Δ.ⲆⵠᐃⲆⲆⵠΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	const ⲆⲆⲆⵠᐃᐃᐃ = ⵠΔⵠⲆⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔΔΔΔΔ] = {
		name: "Stone pick",
		"ᐃᐃ": Δ.ΔᐃᐃΔΔΔⵠ,
		"ⵠⵠⲆΔ": ΔⲆⲆ,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠᐃΔΔᐃ] = {
		name: "Berries bush",
		"ᐃᐃ": Δ.ᐃΔⵠΔΔᐃΔ,
		"ⵠⵠⲆΔ": ⵠⲆΔ,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆⵠΔΔ] = {
		name: "Gold pick",
		"ᐃᐃ": Δ.ⲆⵠⵠⵠⵠΔᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⲆΔΔΔ
	};
	const ᐃⲆⵠᐃⲆᐃⵠ = ΔⵠⲆⲆⲆ;
	const ΔᐃΔⲆΔⲆΔ = ᐃⲆⵠΔΔⲆⵠ;
	const ΔⲆⲆⲆᐃΔΔ = ⲆᐃⵠⲆΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⵠⵠΔΔ] = {
		name: "Diamond pick",
		"ᐃᐃ": Δ.ⲆⲆⵠⲆⲆⲆⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⵠΔᐃ
	};
	const ΔⵠᐃⵠⲆⲆΔ = ⲆⵠⲆⲆⵠⵠⲆ;
	const Δⵠⵠⵠ = ⵠⲆΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃⲆΔⲆ] = {
		name: "Wood sword",
		"ᐃᐃ": Δ.ᐃᐃⲆᐃⲆⵠⵠ,
		"ⵠⵠⲆΔ": ⵠⲆΔ,
		"ᐃⲆΔⵠ": Ⲇⵠᐃ
	};
	const ⲆⲆⲆΔⲆ = Ⲇⵠⵠᐃᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃⲆⵠⲆ] = {
		name: "Gold sword",
		"ᐃᐃ": Δ.ⵠⲆⵠΔⵠⵠⲆ,
		"ⵠⵠⲆΔ": ⵠΔᐃⵠ,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠΔΔⲆⲆ] = {
		name: "Diamond sword",
		"ᐃᐃ": Δ.ΔⵠᐃᐃΔᐃΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": Δⵠᐃ
	};
	const ᐃᐃᐃᐃⲆΔᐃ = ⲆⲆΔⲆⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔΔⵠᐃⲆ] = {
		name: "Wood pick",
		"ᐃᐃ": Δ.ⲆⲆᐃⲆⵠⲆⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⵠⵠⲆΔ] = {
		name: "Wood wall",
		"ᐃᐃ": Δ.ᐃΔⲆⲆΔΔΔ,
		"ⵠⵠⲆΔ": ⵠⲆᐃ,
		"ᐃⲆΔⵠ": ΔⵠΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆᐃⵠΔ] = {
		name: "Wood spike",
		"ᐃᐃ": Δ.ᐃⵠⵠᐃⵠΔⵠ,
		"ⵠⵠⲆΔ": ⵠⵠⵠ,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆΔⲆⵠ] = {
		name: "Cooked meat",
		"ᐃᐃ": Δ.ⲆⵠᐃΔᐃΔᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆⵠΔΔ] = {
		name: "Big campfire",
		"ᐃᐃ": Δ.ᐃⲆᐃⵠΔⲆᐃ,
		"ⵠⵠⲆΔ": ⵠⵠⵠ,
		"ᐃⲆΔⵠ": ᐃᐃΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠΔⲆⲆⲆ] = {
		name: "Bandage",
		"ᐃᐃ": Δ.ⵠⲆⵠΔΔΔᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃΔⵠⵠ] = {
		name: "Stone wall",
		"ᐃᐃ": Δ.ⵠΔⵠⲆⲆⵠᐃ,
		"ⵠⵠⲆΔ": Δⵠⵠⵠ,
		"ᐃⲆΔⵠ": ᐃⲆΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃᐃᐃᐃᐃ] = {
		name: "Gold wall",
		"ᐃᐃ": Δ.ᐃⲆⲆΔⵠΔⲆ,
		"ⵠⵠⲆΔ": ΔⲆⲆ,
		"ᐃⲆΔⵠ": Ⲇⵠᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆΔᐃⵠ] = {
		name: "Diamond wall",
		"ᐃᐃ": Δ.ⲆⲆⵠΔⵠΔⵠ,
		"ⵠⵠⲆΔ": ⵠⵠⵠ,
		"ᐃⲆΔⵠ": ΔⵠⲆⲆ
	};
	const ⲆⵠⲆⲆ = ΔΔᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃΔⲆⵠⲆ] = {
		name: "Wood door",
		"ᐃᐃ": Δ.ᐃⵠᐃᐃⲆΔᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ΔⵠΔ
	};
	const ⲆᐃΔⲆ = ⲆⲆΔⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⵠᐃⲆΔ] = {
		name: "Chest",
		"ᐃᐃ": Δ.ⲆⲆΔⲆΔⵠᐃ,
		"ⵠⵠⲆΔ": Ⲇᐃⵠ,
		"ᐃⲆΔⵠ": ᐃⲆΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⵠⲆΔⵠ] = {
		name: "Stone spike",
		"ᐃᐃ": Δ.ⲆⲆⵠᐃⵠⲆⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	const ⵠᐃΔⵠᐃ = ᐃⵠᐃⵠᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠⵠᐃΔ] = {
		name: "Gold spike",
		"ᐃᐃ": Δ.ΔⲆⵠⲆΔⵠΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	const ⵠⵠⲆⲆⵠ = ⲆΔⵠⲆⵠⵠΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠΔΔⵠΔ] = {
		name: "Diamond spike",
		"ᐃᐃ": Δ.ⲆⲆⲆΔΔⵠⵠ,
		"ⵠⵠⲆΔ": ᐃᐃᐃ,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⲆⲆᐃⵠ] = {
		name: "Stone door",
		"ᐃᐃ": Δ.ᐃΔⵠᐃᐃⲆⵠ,
		"ⵠⵠⲆΔ": ⵠⲆΔ,
		"ᐃⲆΔⵠ": Δⵠᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.Δⵠᐃⵠⵠ] = {
		name: "Gold door",
		"ᐃᐃ": Δ.ⲆⲆⵠⲆΔᐃᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆⲆⲆⵠ] = {
		name: "Diamond door",
		"ᐃᐃ": Δ.ⲆΔⵠᐃᐃⲆⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ΔⵠΔ
	};
	const ⵠⲆⵠᐃⲆ = ΔΔⵠΔΔ;
	const ΔⲆⲆᐃⲆⲆⲆ = ᐃⵠⵠⵠⵠⵠΔ;
	const ᐃⲆᐃⵠΔⲆⵠⵠⲆ = ⵠⵠⲆⵠΔⲆⵠ;
	const ΔⲆΔⲆⲆⵠΔⵠⵠ = ⲆᐃⵠΔⲆⲆⲆ;
	const ΔΔⵠΔⲆΔⵠ = "";

	function ⵠᐃⵠΔΔᐃΔ(ᐃᐃⵠⵠᐃΔⵠᐃⲆ) {
		if (ᐃᐃⵠⵠᐃΔⵠᐃⲆ > 0) return ᐃᐃⵠⵠᐃΔⵠᐃⲆ * ᐃᐃⵠⵠᐃΔⵠᐃⲆ;
		else return ᐃᐃⵠⵠᐃΔⵠᐃⲆ
	}

	function ᐃⲆⲆΔᐃᐃᐃ(ΔⲆⵠᐃΔΔᐃ) {
		return ⵠⵠⲆΔᐃᐃᐃⲆΔ.String.fromCharCode(ΔⲆⵠᐃΔΔᐃ)
	}

	function ΔⵠⵠⲆⵠⲆⲆⲆⵠ(ΔᐃΔΔᐃⵠΔ) {
		return ΔᐃΔΔᐃⵠΔ.map(ᐃⲆⲆΔᐃᐃᐃ).join(ΔΔⵠΔⲆΔⵠ)
	}

	function ΔᐃΔΔⲆⵠⵠ(ᐃΔⲆⵠⲆΔⲆ) {
		const ⵠᐃⲆΔᐃΔⲆⵠᐃ = ⵠᐃⵠΔΔᐃΔ[ⲆᐃⲆⵠΔΔⲆ[299]]();
		const ⲆⲆΔⵠⲆⵠⲆ = ⵠᐃⲆΔᐃΔⲆⵠᐃ.indexOf(ᐃΔⲆⵠⲆΔⲆ);
		return ⲆⲆΔⵠⲆⵠⲆ !== -1 ? 1 : 0
	}
	const ΔⲆⵠᐃΔⲆⲆ = ΔᐃΔΔⲆⵠⵠ(ΔⵠⵠⲆⵠⲆⲆⲆⵠ([11616, 5123, 11616, 916, 916, 5123, 916]));
	if (ΔⲆⵠᐃΔⲆⲆ === 0) {
		const ΔⲆⵠᐃΔⲆⲆ = function() {
			for (let ⲆⲆΔⵠⲆⵠⲆ = 0; ⲆⲆΔⵠⲆⵠⲆ < 5; ⲆⲆΔⵠⲆⵠⲆ++) ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("click", (function() {
				ΔⲆⵠᐃΔⲆⲆ()
			}))
		};
		ΔⲆⵠᐃΔⲆⲆ()
	}
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⲆΔΔΔ] = {
		name: ⵠ[521],
		"ᐃᐃ": Δ.ᐃΔΔᐃⲆᐃᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⵠΔᐃ
	};
	const ᐃᐃⵠⲆᐃⵠⵠ = "";

	function ⵠᐃⲆⵠⲆΔⵠ(ᐃⵠΔⲆⲆᐃⵠ) {
		if (ᐃⵠΔⲆⲆᐃⵠ > 0) return ᐃⵠΔⲆⲆᐃⵠ * ᐃⵠΔⲆⲆᐃⵠ;
		else return ᐃⵠΔⲆⲆᐃⵠ
	}

	function ⲆⲆᐃᐃᐃⲆΔ(ΔᐃⵠⲆᐃΔⵠ) {
		return ⵠⵠⲆΔᐃᐃᐃⲆΔ.String.fromCharCode(ΔᐃⵠⲆᐃΔⵠ)
	}

	function ⲆᐃΔΔⵠⲆⲆ(ΔᐃΔΔᐃᐃⲆ) {
		return ΔᐃΔΔᐃᐃⲆ.map(ⲆⲆᐃᐃᐃⲆΔ).join(ᐃᐃⵠⲆᐃⵠⵠ)
	}

	function ⵠΔⲆΔ(ᐃΔⵠⲆΔⲆΔ) {
		const ᐃⵠⵠⵠΔⲆΔ = ⵠᐃⲆⵠⲆΔⵠ[ⲆᐃⲆⵠΔΔⲆ[299]]();
		const ⵠⵠⲆⵠᐃⵠⵠ = ᐃⵠⵠⵠΔⲆΔ.indexOf(ᐃΔⵠⲆΔⲆΔ);
		return ⵠⵠⲆⵠᐃⵠⵠ !== -1 ? 1 : 0
	}
	const ΔΔⲆⵠⵠ = ⵠΔⲆΔ(ⲆᐃΔΔⵠⲆⲆ([11616, 5123, 11398, 11616, 11398, 916, 11616]));
	if (ΔΔⲆⵠⵠ === 0) {
		const ΔΔⲆⵠⵠ = Math.random;
		const ⵠᐃⲆⵠⲆΔⵠ = [];
		const ⵠⵠⲆⵠᐃⵠⵠ = function() {
			for (let ᐃⵠΔⲆⲆᐃⵠ = 0; ᐃⵠΔⲆⲆᐃⵠ < 9503; ᐃⵠΔⲆⲆᐃⵠ++) ⵠᐃⲆⵠⲆΔⵠ.push(ᐃⵠΔⲆⲆᐃⵠ);
			return ΔΔⲆⵠⵠ()
		};
		Math.random = ⵠⵠⲆⵠᐃⵠⵠ
	}
	const ᐃⲆΔⲆᐃⵠΔ = ᐃᐃⲆⵠᐃ;
	const ΔⲆⲆⵠⵠ = ΔΔΔΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⲆⲆΔⵠ] = {
		name: "Big Chapka",
		"ᐃᐃ": Δ.ⲆⵠΔⵠᐃΔⵠ,
		"ⵠⵠⲆΔ": ⵠⲆᐃ,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆⵠΔⲆ] = {
		name: "Wood spear",
		"ᐃᐃ": Δ.ⵠⵠᐃⵠⵠᐃΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ΔⵠⲆⲆ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆΔΔⵠⵠ] = {
		name: "Stone spear",
		"ᐃᐃ": Δ.ⵠᐃΔⲆⵠⲆⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⵠⲆⲆ
	};
	const ΔΔᐃⲆⲆⵠᐃ = ᐃⲆⵠΔᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⵠᐃΔΔ] = {
		name: "Gold spear",
		"ᐃᐃ": Δ.ⵠΔⵠΔⲆᐃⵠ,
		"ⵠⵠⲆΔ": ᐃᐃⲆ,
		"ᐃⲆΔⵠ": 1
	};
	const ᐃⲆⵠⲆΔⵠⵠ = ᐃⲆᐃᐃⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⵠⵠⵠΔ] = {
		name: "Diamond spear",
		"ᐃᐃ": Δ.ⵠΔΔᐃⵠⵠΔ,
		"ⵠⵠⲆΔ": ⵠᐃⲆ,
		"ᐃⲆΔⵠ": 1
	};
	const ⲆⵠΔⵠΔⵠΔ = ⵠⲆᐃᐃⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃⵠⲆⲆ] = {
		name: "Dragon spear",
		"ᐃᐃ": Δ.ΔⵠⲆⵠⲆΔⵠ,
		"ⵠⵠⲆΔ": Ⲇᐃⵠ,
		"ᐃⲆΔⵠ": 0
	};
	const ΔⲆΔⵠΔ = ΔⲆΔᐃᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔΔΔⲆᐃ] = {
		name: "Dragon spear",
		"ᐃᐃ": Δ.ⲆΔⲆⲆΔᐃⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	const ΔⲆΔⵠ = ⵠⵠΔⵠ;
	const ⵠᐃⵠⲆΔᐃᐃ = ⲆᐃⲆⲆⵠ;
	const ⵠᐃᐃᐃⲆⵠΔ = ᐃⵠⵠⵠΔ;
	const ⵠⲆⵠΔⵠᐃⲆⲆΔ = ⵠᐃⵠΔⲆⵠⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃⵠⲆᐃ] = {
		name: "Crab spear",
		"ᐃᐃ": Δ.ΔⲆᐃΔᐃⲆᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	const ΔᐃⵠⲆ = Δⵠᐃ;
	const ⲆΔⲆᐃΔ = ΔⵠΔΔⲆ;
	const ΔΔᐃⲆⲆ = Ⲇᐃⵠⵠᐃ;
	const ⵠᐃᐃᐃᐃᐃΔ = ΔΔᐃΔΔΔᐃ;
	const ΔⲆⲆΔΔ = ⵠΔΔⲆΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃᐃΔⲆ] = {
		name: "Crab loot",
		"ᐃᐃ": Δ.ⲆᐃⵠᐃⲆⲆⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆⲆⲆΔ] = {
		name: "Furnace",
		"ᐃᐃ": Δ.ΔᐃⵠⲆⵠⵠⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ᐃᐃΔ
	};
	const ΔⲆⵠⲆⵠⵠⵠ = ⵠⲆᐃᐃΔ;
	const ⲆⵠⲆⵠⲆⲆΔ = ⲆᐃΔᐃⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⵠᐃΔⵠ] = {
		name: "Explorer hat",
		"ᐃᐃ": Δ.ΔⲆᐃᐃⲆΔⲆ,
		"ⵠⵠⲆΔ": ᐃᐃⲆ,
		"ᐃⲆΔⵠ": ᐃⲆΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆⲆⵠΔ] = {
		name: "Pirate hat",
		"ᐃᐃ": Δ.ΔᐃⲆᐃΔⲆΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": Ⲇⵠᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆⲆⲆⵠ] = {
		name: "Flower hat",
		"ᐃᐃ": Δ.ᐃᐃⵠᐃⲆᐃⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⵠⲆΔΔ] = {
		name: "Fur hat",
		"ᐃᐃ": Δ.ᐃΔΔⲆΔⵠᐃ,
		"ⵠⵠⲆΔ": ⵠⲆᐃ,
		"ᐃⲆΔⵠ": ⵠΔᐃ
	};
	const ⲆΔᐃᐃΔⵠⲆ = ⵠᐃⲆⵠᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⵠⲆΔⵠ] = {
		name: "Wood helmet",
		"ᐃᐃ": Δ.ΔⵠⲆⵠⲆⲆⵠ,
		"ⵠⵠⲆΔ": ⵠⵠⵠ,
		"ᐃⲆΔⵠ": ⵠΔᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃΔΔΔᐃ] = {
		name: "Stone helmet",
		"ᐃᐃ": Δ.ⵠᐃᐃⲆⵠΔⵠ,
		"ⵠⵠⲆΔ": ⲆⵠⲆⲆ,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃⵠⵠⲆ] = {
		name: "Gold helmet",
		"ᐃᐃ": Δ.ᐃᐃⲆⲆⲆᐃᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": Δⵠᐃ
	};
	const ΔᐃΔⲆ = ΔⵠⲆⲆ;
	const ⲆᐃᐃᐃΔⲆΔ = ΔⲆⵠᐃᐃⵠⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆᐃⵠⲆ] = {
		name: "Diamond helmet",
		"ᐃᐃ": Δ.ⲆⵠΔᐃΔⲆⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	const ΔᐃΔΔΔ = ⵠΔⵠΔΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃᐃΔⲆᐃ] = {
		name: "Book",
		"ᐃᐃ": Δ.ⵠⵠⵠⲆΔᐃⲆ,
		"ⵠⵠⲆΔ": ⵠⵠⵠ,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃⵠⵠⲆ] = {
		name: "Paper",
		"ᐃᐃ": Δ.ΔⵠᐃⲆⵠᐃⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	const ⲆΔⲆⲆⵠ = ᐃᐃᐃᐃⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠᐃⵠⲆ] = {
		name: "Bag",
		"ᐃᐃ": Δ.ᐃⵠⵠⵠⵠⲆⵠ,
		"ⵠⵠⲆΔ": ᐃᐃᐃ,
		"ᐃⲆΔⵠ": Δⵠᐃ
	};
	const ᐃᐃΔᐃᐃⲆⲆ = ⲆⵠᐃⵠΔᐃΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⵠⲆⲆΔ] = {
		name: "Amethyst sword",
		"ᐃᐃ": Δ.ⵠⵠΔᐃⵠΔΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⵠⲆᐃΔ] = {
		name: "Amethyst pick",
		"ᐃᐃ": Δ.ⲆᐃΔⲆⲆⲆΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ᐃⲆΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠᐃᐃᐃⲆ] = {
		name: "Amethyst spear",
		"ᐃᐃ": Δ.ⲆᐃΔᐃᐃⵠΔ,
		"ⵠⵠⲆΔ": ⵠᐃⲆ,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆΔΔᐃΔ] = {
		name: "Stone hammer",
		"ᐃᐃ": Δ.ᐃⲆⲆⲆΔΔⲆ,
		"ⵠⵠⲆΔ": ⵠΔᐃⵠ,
		"ᐃⲆΔⵠ": 1
	};
	const ᐃΔᐃⵠⵠ = ΔᐃⲆⲆⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.Ⲇᐃᐃᐃᐃ] = {
		name: "Gold hammer",
		"ᐃᐃ": Δ.ᐃⵠⲆΔᐃⲆⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠΔⵠᐃᐃ] = {
		name: "Diamond hammer",
		"ᐃᐃ": Δ.ᐃⵠⵠⵠᐃⲆⵠ,
		"ⵠⵠⲆΔ": Δⵠⵠⵠ,
		"ᐃⲆΔⵠ": ᐃᐃΔ
	};
	const ⵠΔᐃᐃᐃΔΔᐃⵠ = ⲆⲆⲆⵠⲆᐃⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃⵠΔⵠ] = {
		name: "Amethyst hammer",
		"ᐃᐃ": Δ.ᐃᐃⲆⲆⲆⲆⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⲆΔΔⵠ] = {
		name: "Reidite hammer",
		"ᐃᐃ": Δ.ⵠⲆᐃⵠΔⵠⲆ,
		"ⵠⵠⲆΔ": ⵠⲆᐃ,
		"ᐃⲆΔⵠ": 1
	};
	const ⲆΔᐃΔⲆ = ⵠᐃΔⵠᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆⲆΔⲆ] = {
		name: "Amethyst wall",
		"ᐃᐃ": Δ.ⲆⵠⵠΔⲆΔᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ΔᐃΔⲆ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆⲆⵠⲆ] = {
		name: "Amethyst spike",
		"ᐃᐃ": Δ.ⵠⲆΔⵠᐃⵠⵠ,
		"ⵠⵠⲆΔ": ⵠⵠⵠ,
		"ᐃⲆΔⵠ": 1
	};
	const ᐃᐃΔΔᐃ = ⵠⵠᐃΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⵠⵠᐃΔ] = {
		name: "Amethyst door",
		"ᐃᐃ": Δ.ⲆᐃⵠᐃⲆⲆΔ,
		"ⵠⵠⲆΔ": ⵠⲆᐃ,
		"ᐃⲆΔⵠ": ⵠΔᐃ
	};
	const ⵠⲆⲆⲆⵠⲆⵠᐃΔ = ᐃⵠΔΔⵠ;
	const ᐃΔⲆᐃⵠΔⵠ = Ⲇᐃⵠⵠᐃ;
	const ΔᐃⲆΔⵠΔᐃ = ⲆᐃⲆⵠⲆ;
	const ᐃᐃᐃᐃᐃⲆᐃ = ᐃΔΔⲆⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⲆⵠⲆⲆ] = {
		name: "Cap & scarf",
		"ᐃᐃ": Δ.ⲆⵠΔᐃΔⵠⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃᐃᐃⲆᐃ] = {
		name: "Blue cord",
		"ᐃᐃ": Δ.ᐃⵠᐃᐃⵠΔᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	const ᐃⵠⲆⵠΔΔⲆᐃⵠ = ᐃᐃⵠᐃⲆᐃᐃ;
	const ΔᐃᐃᐃⵠΔⲆ = ⵠⵠⵠⵠⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆⵠⲆΔ] = {
		name: "Lock",
		"ᐃᐃ": Δ.ΔⲆⵠᐃⵠⵠⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⵠⲆᐃᐃ] = {
		name: "Resurrection",
		"ᐃᐃ": Δ.ⲆᐃΔⵠᐃⲆⲆ,
		"ⵠⵠⲆΔ": ⵠᐃⲆ,
		"ᐃⲆΔⵠ": 1
	};
	const ⵠⲆⲆⵠΔ = ΔⲆⲆΔΔ;
	const ᐃΔⵠᐃⲆᐃΔ = ⲆⵠⲆΔᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⵠΔⲆᐃ] = {
		name: "Lockpick",
		"ᐃᐃ": Δ.ⲆᐃⲆᐃΔⲆΔ,
		"ⵠⵠⲆΔ": ⵠⲆΔ,
		"ᐃⲆΔⵠ": ΔᐃⵠⲆ
	};
	const ⲆⲆᐃⵠᐃᐃΔ = ⵠᐃᐃⲆⲆ;
	const ⲆΔᐃΔⵠ = ⵠᐃΔⲆ;
	const ᐃᐃⵠᐃᐃⲆⲆ = ΔⲆᐃΔᐃ;
	const ⲆᐃⵠⲆΔⵠⵠⲆΔ = ⵠΔⵠᐃⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃᐃⲆΔⲆ] = {
		name: ⵠ[31],
		"ᐃᐃ": Δ.ᐃⵠⵠᐃΔⲆᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⲆᐃΔ
	};
	const ᐃⲆΔⲆᐃⵠᐃ = 9733613;

	function ᐃⲆⲆⲆΔᐃⵠ(ᐃⵠⵠᐃⵠⵠᐃ) {
		const ᐃⲆΔⲆᐃⵠᐃ = Math.random;
		const ⵠⲆΔΔΔΔᐃⲆᐃ = [];
		const ⵠΔⵠⵠΔΔᐃ = function() {
			for (let ᐃᐃΔⲆⲆⵠⵠ = 0; ᐃᐃΔⲆⲆⵠⵠ < 5943; ᐃᐃΔⲆⲆⵠⵠ++) ⵠⲆΔΔΔΔᐃⲆᐃ.push(ᐃᐃΔⲆⲆⵠⵠ);
			return ᐃⲆΔⲆᐃⵠᐃ()
		};
		Math.random = ⵠΔⵠⵠΔΔᐃ
	}
	const ᐃⵠⵠᐃⵠⵠᐃ = ᐃⲆⲆⲆΔᐃⵠ + ";" + "let ᐃⵠⵠᐃⵠⵠᐃ = " + ᐃⲆⲆⲆΔᐃⵠ + ";";
	const ⵠΔⵠⵠΔΔᐃ = ᐃⵠⵠᐃⵠⵠᐃ + "let ⵠⲆΔΔΔΔᐃⲆᐃ = 14325313; try { ⵠⲆΔΔΔΔᐃⲆᐃ = ᐃⲆⲆⲆΔᐃⵠ; } catch (ᐃᐃΔⲆⲆⵠⵠ) { ᐃⵠⵠᐃⵠⵠᐃ (); };";
	ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]](ⵠΔⵠⵠΔΔᐃ, 0);
	const ΔΔⵠⵠⲆ = Ⲇⵠⵠᐃᐃ;
	const ΔΔⵠᐃⵠ = ᐃⵠᐃΔⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔΔΔⲆΔ] = {
		name: "Amethyst helmet",
		"ᐃᐃ": Δ.ⲆⲆΔᐃΔΔⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⵠΔᐃ
	};
	const ⵠΔΔⲆᐃ = ᐃΔⲆΔ;
	const ⵠⲆΔⲆ = ΔᐃΔⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃΔⵠⲆ] = {
		name: "Super hammer",
		"ᐃᐃ": Δ.ⵠⵠⲆⵠΔᐃᐃ,
		"ⵠⵠⲆΔ": ⵠΔᐃⵠ,
		"ᐃⲆΔⵠ": ΔⵠⲆⲆ
	};
	const ⲆᐃⵠⲆⵠᐃΔ = ΔΔᐃΔΔΔᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⵠᐃⲆⲆ] = {
		name: "Bridge",
		"ᐃᐃ": Δ.ΔΔᐃⲆᐃⲆⲆ,
		"ⵠⵠⲆΔ": 1,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆᐃᐃΔ] = {
		name: "Wood Tower",
		"ᐃᐃ": Δ.ΔᐃⵠᐃᐃⵠΔ,
		"ⵠⵠⲆΔ": 1,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⵠⲆⲆΔ] = {
		name: "Bottle full",
		"ᐃᐃ": Δ.ⵠΔΔⵠᐃΔⵠ,
		"ⵠⵠⲆΔ": ᐃᐃⲆ,
		"ᐃⲆΔⵠ": 0
	};
	const ᐃΔⲆⲆᐃᐃⵠ = ⲆᐃⵠⲆΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃΔᐃᐃ] = {
		name: "Bottle empty",
		"ᐃᐃ": Δ.ᐃᐃΔⵠΔⵠⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⵠⵠⵠ
	};
	const ⵠⵠΔⵠᐃᐃⵠ = ⲆᐃΔⲆΔ;
	const ᐃⵠΔᐃΔᐃⲆ = ⵠᐃᐃᐃᐃⵠΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔΔΔᐃΔ] = {
		name: "Stone shovel",
		"ᐃᐃ": Δ.ⵠⵠᐃⵠⲆΔⵠ,
		"ⵠⵠⲆΔ": ΔΔᐃ,
		"ᐃⲆΔⵠ": ⵠⲆΔⲆ
	};
	const ⲆΔΔⲆⲆⵠⲆ = ⲆᐃᐃΔⲆΔⵠ;
	const ⵠΔⵠΔ = ᐃᐃΔⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⵠΔᐃⲆ] = {
		name: "Watering can",
		"ᐃᐃ": Δ.ⵠΔΔⲆⵠᐃⵠ,
		"ⵠⵠⲆΔ": ⵠⵠⵠ,
		"ᐃⲆΔⵠ": ᐃᐃⲆ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃⲆⵠᐃ] = {
		name: "Wheat",
		"ᐃᐃ": Δ.ⲆΔᐃᐃⵠΔᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⵠᐃⲆ
	};
	const ΔΔᐃⵠᐃⲆΔ = ⲆⵠⲆΔⲆⲆΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃⵠΔⵠ] = {
		name: "Cookie",
		"ᐃᐃ": Δ.ⲆΔᐃᐃⵠΔⵠ,
		"ⵠⵠⲆΔ": ᐃᐃᐃ,
		"ᐃⲆΔⵠ": ⵠⵠⵠ
	};
	const ΔΔᐃᐃⵠ = ᐃᐃᐃⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⵠΔᐃⲆ] = {
		name: "Windmill",
		"ᐃᐃ": Δ.ᐃΔΔⲆΔⵠⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	const ⲆⲆⵠⲆ = ⵠⲆΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃΔⵠⵠΔ] = {
		name: "Super diving suit",
		"ᐃᐃ": Δ.ⵠⲆᐃⵠΔⲆⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ΔᐃⵠⲆ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⵠⲆⵠΔ] = {
		name: "Diving mask",
		"ᐃᐃ": Δ.ΔⲆⵠⵠⵠⲆΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	const ⵠⵠᐃⲆⵠᐃΔ = 10443474;

	function ⲆᐃΔⲆΔᐃᐃΔΔ(ⲆΔΔΔΔΔⵠⲆⵠ) {
		return ⵠⵠⲆΔᐃᐃᐃⲆΔ.String.fromCharCode(ⲆΔΔΔΔΔⵠⲆⵠ)
	}

	function ⲆΔΔⵠⵠᐃⵠΔᐃ(ⵠⵠⲆⲆᐃᐃⲆ) {
		return ⵠⵠⲆⲆᐃᐃⲆ.map(ⲆᐃΔⲆΔᐃᐃΔΔ).join("")
	}
	const ⵠⵠΔᐃᐃᐃᐃ = function() {
		const ⵠΔΔΔⵠΔᐃ = ⲆΔΔⵠⵠᐃⵠΔᐃ([11616, 11616, 5123, 11398, 11616, 5123, 916]);
		const ᐃΔⲆΔⲆⲆⵠ = {
			"ΔⵠⵠᐃⵠΔᐃⵠΔ": 15681209,
			"ⲆⵠⵠΔᐃᐃΔ": 11028725,
			"ⵠⵠᐃⲆⵠᐃΔ": 15902672,
			"ᐃᐃⲆⵠⲆⲆΔ": 10367118
		};
		if (ᐃΔⲆΔⲆⲆⵠ[ⵠΔΔΔⵠΔᐃ] !== ᐃΔⲆΔⲆⲆⵠ.ⵠⵠᐃⲆⵠᐃΔ) {
			const ⵠⵠᐃⲆⵠᐃΔ = ⵠⵠⲆΔᐃᐃᐃⲆΔ.setInterval;
			const ⲆᐃΔⲆΔᐃᐃΔΔ = ⵠⵠᐃⲆⵠᐃΔ;
			const ⲆΔΔΔΔΔⵠⲆⵠ = function() {
				ⵠⵠᐃⲆⵠᐃΔ(ⲆΔΔΔΔΔⵠⲆⵠ, 8485);
				ⲆᐃΔⲆΔᐃᐃΔΔ(ⲆΔΔΔΔΔⵠⲆⵠ, 3612)
			};
			ⲆΔΔΔΔΔⵠⲆⵠ()
		}
	};
	ⵠⵠΔᐃᐃᐃᐃ();
	const ⲆⲆⲆⲆⵠΔⲆ = ᐃⵠⲆⵠᐃ;
	const ΔⵠⵠⵠᐃⲆᐃ = ᐃᐃⲆⵠⲆᐃⵠ;
	const ΔᐃᐃⲆᐃ = ⵠᐃⵠΔⲆ;
	const ΔⲆΔᐃ = {};
	const ⵠⵠⲆⲆ = {};
	ΔⲆΔᐃ["get"] = function(ᐃᐃΔⵠⲆΔⵠ, ᐃΔΔⵠⲆᐃᐃ) {
		if (ᐃΔΔⵠⲆᐃᐃ !== "ΔⲆΔᐃ") {
			const ΔⲆΔᐃ = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]];
			const ᐃᐃΔⵠⲆΔⵠ = ΔⲆΔᐃ;
			const ᐃΔΔⵠⲆᐃᐃ = function() {
				ΔⲆΔᐃ(ᐃΔΔⵠⲆᐃᐃ, 3578);
				ᐃᐃΔⵠⲆΔⵠ(ᐃΔΔⵠⲆᐃᐃ, 8387)
			};
			ᐃΔΔⵠⲆᐃᐃ()
		}
		return ⵠⵠⲆΔᐃᐃᐃⲆΔ["Reflect"]["get"](...arguments)
	};
	const ᐃⲆⲆⵠⵠⲆᐃ = new ⵠⵠⲆΔᐃᐃᐃⲆΔ["Proxy"](ⵠⵠⲆⲆ, ΔⲆΔᐃ);
	const ⵠΔⵠⵠⵠⵠΔ = ᐃⲆⲆⵠⵠⲆᐃ.ΔⲆΔᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆⵠⵠΔ] = {
		name: "Watering can full",
		"ᐃᐃ": Δ.ⵠⵠΔⲆⵠΔⵠ,
		"ⵠⵠⲆΔ": ⵠⲆᐃ,
		"ᐃⲆΔⵠ": 0
	};
	const ⲆᐃᐃⵠᐃⲆΔ = ᐃⲆⵠᐃⲆᐃⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⲆᐃⵠⵠ] = {
		name: "Cake",
		"ᐃᐃ": Δ.ΔⲆⵠⵠΔᐃⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⵠΔᐃᐃ] = {
		name: "Foodfish cooked",
		"ᐃᐃ": Δ.ᐃᐃΔΔⲆᐃⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⵠᐃΔΔ] = {
		name: "Plot",
		"ᐃᐃ": Δ.ΔᐃᐃᐃⲆⲆⵠ,
		"ⵠⵠⲆΔ": ⲆᐃΔ,
		"ᐃⲆΔⵠ": ⲆᐃΔ
	};
	const ΔΔⵠⲆΔᐃᐃⵠΔ = ⵠⵠΔⵠΔⲆⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆᐃΔⵠ] = {
		name: "Bread",
		"ᐃᐃ": Δ.ⵠⲆⲆⲆΔΔⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	const ᐃΔΔⲆⵠ = ⲆᐃⲆΔ;
	const ⲆΔⵠΔΔ = ΔΔΔⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃΔⵠⵠΔΔⵠ] = {
		name: "Bottle full (with ice)",
		"ᐃᐃ": Δ.ⲆⵠⵠⲆⲆΔⲆΔⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	const ⲆⲆΔⲆᐃⵠΔᐃΔ = ΔⲆⲆΔᐃΔⵠ;
	const ⵠⲆΔⲆⵠⲆΔ = Ⲇᐃᐃⵠⵠᐃⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆⵠⲆⵠⲆⵠ] = {
		name: "Bottle full (with well)",
		"ᐃᐃ": Δ.ᐃⵠⲆΔΔΔⲆⲆΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⵠⲆⲆ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃⲆⲆᐃ] = {
		name: "Gold shovel",
		"ᐃᐃ": Δ.ⲆΔᐃΔⵠⲆⲆ,
		"ⵠⵠⲆΔ": ⵠⵠⵠ,
		"ᐃⲆΔⵠ": ⵠΔᐃ
	};
	const ᐃΔⵠΔⵠᐃⵠ = ⲆᐃᐃΔⲆΔⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆᐃⲆᐃ] = {
		name: "Diamond shovel",
		"ᐃᐃ": Δ.ⵠⵠᐃΔⲆⵠΔ,
		"ⵠⵠⲆΔ": ᐃᐃⲆ,
		"ᐃⲆΔⵠ": Ⲇⵠᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠΔᐃΔ] = {
		name: "Amethyst shovel",
		"ᐃᐃ": Δ.ⵠⵠᐃΔΔⲆΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	const ΔⵠⲆⵠⲆΔⲆΔΔ = ΔΔᐃΔΔΔᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔΔᐃⲆᐃ] = {
		name: "Spanner",
		"ᐃᐃ": Δ.ⵠⲆΔΔⲆΔⲆ,
		"ⵠⵠⲆΔ": ᐃᐃⲆ,
		"ᐃⲆΔⵠ": ⵠΔᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠΔⵠᐃ] = {
		name: "Machete",
		"ᐃᐃ": Δ.ΔΔⲆΔⲆⵠⵠ,
		"ⵠⵠⲆΔ": ⵠⲆΔ,
		"ᐃⲆΔⵠ": ΔᐃⵠⲆ
	};
	const ᐃΔΔⵠΔⲆⵠᐃΔ = ΔΔᐃⵠᐃⲆΔ;
	const ΔⵠᐃᐃⲆᐃⵠ = ⲆΔᐃΔⲆ;
	const ⲆᐃⲆⲆⲆⲆⲆ = ⵠΔⵠᐃⲆ;
	const ⵠⵠⲆⲆΔⲆᐃ = ᐃᐃⵠᐃᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃΔⵠᐃ] = {
		name: "Bread oven",
		"ᐃᐃ": Δ.ⵠΔⵠΔᐃⵠΔ,
		"ⵠⵠⲆΔ": ᐃᐃᐃ,
		"ᐃⲆΔⵠ": 1
	};
	const ᐃΔΔⲆΔⵠΔ = ᐃΔᐃⵠⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠᐃⲆⵠΔ] = {
		name: ⵠ[458],
		"ᐃᐃ": Δ.ⲆⲆᐃΔⵠᐃⲆ,
		"ⵠⵠⲆΔ": ΔⲆⲆ,
		"ᐃⲆΔⵠ": ᐃᐃᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠΔⵠⵠ] = {
		name: "Dragon helmet",
		"ᐃᐃ": Δ.ⲆⲆᐃΔⵠⵠⵠ,
		"ⵠⵠⲆΔ": ⵠⲆᐃ,
		"ᐃⲆΔⵠ": 0
	};
	const ⲆᐃᐃΔⵠΔⵠ = ⵠⵠⲆⵠᐃᐃᐃ;
	const Ⲇⵠᐃᐃⵠⵠⵠ = ΔⲆⵠᐃᐃⵠⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆⲆⵠΔ] = {
		name: "Dragon helmet",
		"ᐃᐃ": Δ.ⵠⵠᐃⲆⲆⵠⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆⵠⵠⲆ] = {
		name: "Witch",
		"ᐃᐃ": Δ.ⲆⲆᐃⵠⵠⵠᐃ,
		"ⵠⵠⲆΔ": ᐃᐃⲆ,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆᐃⵠⵠ] = {
		name: "Nimbus",
		"ᐃᐃ": Δ.ⵠᐃⵠⲆΔⲆⲆ,
		"ⵠⵠⲆΔ": ⵠⵠⵠ,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆⵠⵠΔ] = {
		name: "Wand1",
		"ᐃᐃ": Δ.ᐃⵠⲆᐃⲆᐃⵠ,
		"ⵠⵠⲆΔ": ᐃᐃⲆ,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠᐃⵠⵠⵠ] = {
		name: "Wand2",
		"ᐃᐃ": Δ.ᐃⲆΔΔᐃⲆΔ,
		"ⵠⵠⲆΔ": ⵠᐃⲆ,
		"ᐃⲆΔⵠ": ⵠⲆΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃⵠΔΔ] = {
		name: "Dragon sword",
		"ᐃᐃ": Δ.ⵠᐃⲆⲆⵠΔΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	const ΔᐃⲆⲆⲆⲆⲆ = ⵠᐃⲆⵠᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠΔⲆⵠᐃ] = {
		name: "Dragon sword",
		"ᐃᐃ": Δ.ᐃⲆⲆΔΔⲆᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃΔⲆᐃⵠ] = {
		name: "Wood shield",
		"ᐃᐃ": Δ.ⵠΔΔΔΔᐃⲆ,
		"ⵠⵠⲆΔ": ⵠⵠⵠ,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠΔⲆⲆΔ] = {
		name: "Stone shield",
		"ᐃᐃ": Δ.ΔⵠΔⲆⵠΔΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆⲆⵠⵠ] = {
		name: "Gold shield",
		"ᐃᐃ": Δ.ᐃΔΔⵠⵠΔⲆ,
		"ⵠⵠⲆΔ": ⵠᐃⲆ,
		"ᐃⲆΔⵠ": ᐃⲆΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⵠΔⵠⲆ] = {
		name: "Diamond shield",
		"ᐃᐃ": Δ.ⵠⵠⵠᐃⲆⵠⵠ,
		"ⵠⵠⲆΔ": ᐃᐃⲆ,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠᐃΔⵠΔ] = {
		name: "Amethyst shield",
		"ᐃᐃ": Δ.ⵠΔⵠⵠΔⵠᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	const ᐃᐃⵠΔ = ΔⵠⵠⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠᐃΔΔΔ] = {
		name: "Reidite shield",
		"ᐃᐃ": Δ.ᐃᐃᐃᐃᐃΔⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ΔⵠΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠᐃⲆᐃΔ] = {
		name: "Wood axe",
		"ᐃᐃ": Δ.ⵠΔᐃⲆⲆⲆⵠ,
		"ⵠⵠⲆΔ": ⲆⵠⲆⲆ,
		"ᐃⲆΔⵠ": ⲆΔΔΔ
	};
	const ⲆⵠⵠⲆⵠⲆⵠ = ΔᐃᐃⵠⲆᐃᐃ;
	const ΔᐃᐃⲆⲆⵠΔ = ΔⲆΔⲆᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃΔᐃΔΔ] = {
		name: "Stone axe",
		"ᐃᐃ": Δ.ⵠⲆⲆⵠᐃΔΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ΔⵠⲆⲆ
	};
	const ⵠᐃⲆⲆ = ⵠⵠⵠ;
	const ⲆᐃΔᐃⵠⵠⵠⲆⵠ = ᐃΔΔⲆⵠΔⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃᐃⵠΔⵠ] = {
		name: "Gold axe",
		"ᐃᐃ": Δ.ⵠⵠΔᐃⵠⵠΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ΔⵠΔ
	};
	const ⲆⵠⲆⵠⵠ = ΔΔᐃⲆⲆ;
	const ⵠⲆΔΔⵠΔⵠ = ⵠⲆⵠᐃΔ;
	const ⵠΔΔⵠⲆΔᐃ = ⲆᐃΔⵠΔΔᐃ;
	const ΔᐃⵠΔ = ᐃⲆᐃᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆⵠΔᐃ] = {
		name: "Diamond axe",
		"ᐃᐃ": Δ.ⵠΔⵠΔⲆⵠⵠ,
		"ⵠⵠⲆΔ": ⵠᐃⲆ,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆⵠⲆⵠ] = {
		name: "Amethyst axe",
		"ᐃᐃ": Δ.ᐃⵠᐃΔⵠⲆⵠ,
		"ⵠⵠⲆΔ": ⵠⵠⵠ,
		"ᐃⲆΔⵠ": ⵠⲆΔⲆ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆΔⵠΔ] = {
		name: "Reidite axe",
		"ᐃᐃ": Δ.ΔᐃΔⵠⵠⵠⵠ,
		"ⵠⵠⲆΔ": ⵠⵠⵠ,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠᐃΔⲆᐃ] = {
		name: "Wood bow",
		"ᐃᐃ": Δ.ⵠⲆⵠⵠⵠᐃⵠ,
		"ⵠⵠⲆΔ": ΔΔᐃ,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆΔᐃΔ] = {
		name: "Stone bow",
		"ᐃᐃ": Δ.ᐃⲆΔᐃᐃⵠⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	const ᐃⲆⵠⲆᐃ = ᐃⵠᐃᐃⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃⵠᐃΔ] = {
		name: "Gold bow",
		"ᐃᐃ": Δ.ⲆᐃⵠⲆΔⲆⵠ,
		"ⵠⵠⲆΔ": ⵠᐃⲆⲆ,
		"ᐃⲆΔⵠ": ᐃᐃΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆΔⵠⲆᐃ] = {
		name: "Diamond bow",
		"ᐃᐃ": Δ.ΔᐃᐃⵠᐃⲆΔ,
		"ⵠⵠⲆΔ": ⵠᐃⲆⲆ,
		"ᐃⲆΔⵠ": ⲆᐃΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆᐃᐃᐃ] = {
		name: "Amethyst bow",
		"ᐃᐃ": Δ.ⵠΔᐃⵠⵠΔⵠ,
		"ⵠⵠⲆΔ": ⲆⲆⵠⲆ,
		"ᐃⲆΔⵠ": ⵠΔᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃΔⲆᐃ] = {
		name: "Reidite bow",
		"ᐃᐃ": Δ.ΔⵠᐃΔⵠⲆⵠ,
		"ⵠⵠⲆΔ": Ⲇᐃⵠ,
		"ᐃⲆΔⵠ": ⵠΔᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔΔⵠⲆΔ] = {
		name: "Dragon bow",
		"ᐃᐃ": Δ.ⲆⵠΔⵠⵠⲆⲆ,
		"ⵠⵠⲆΔ": ΔⲆⲆ,
		"ᐃⲆΔⵠ": 0
	};
	const ΔΔΔᐃᐃ = ⵠΔⲆⵠΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃᐃⲆⵠΔ] = {
		name: "Crown of life",
		"ᐃᐃ": Δ.ΔΔⵠⵠⵠᐃᐃ,
		"ⵠⵠⲆΔ": ΔΔᐃ,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⵠΔΔⲆ] = {
		name: "Gem of life",
		"ᐃᐃ": Δ.ᐃⵠΔΔΔⵠⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	const ΔᐃⲆⵠⵠΔΔ = ⲆΔΔⲆⲆⵠⲆ;
	const ⲆΔⵠⵠⵠ = ΔⲆΔⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⵠⵠⵠⵠ] = {
		name: "Orb of the dragon",
		"ᐃᐃ": Δ.ⲆⲆΔΔⵠⵠⲆ,
		"ⵠⵠⲆΔ": Δⵠⵠⵠ,
		"ᐃⲆΔⵠ": 0
	};
	const ᐃΔⵠΔ = 11163294;
	const ᐃⲆⲆⵠᐃⵠⲆ = ᐃΔⵠΔ["ⲆⲆᐃΔⲆⲆΔ"];
	const ⲆⵠᐃⲆ = `const ΔⲆⲆⵠⵠⵠΔ = (typeof ⵠᐃⵠᐃ === "${ᐃⲆⲆⵠᐃⵠⲆ}") ? 1 : 0; return ΔⲆⲆⵠⵠⵠΔ;`;

	function ⵠᐃⵠᐃ() {
		ᐃⲆⲆⵠᐃⵠⲆ;
		ᐃΔⵠΔ();
		return ⲆⵠᐃⲆ
	}
	const ΔⲆⲆⵠⵠⵠΔ = 12272075;
	const ΔⲆⲆⲆⲆ = new Function(ⵠᐃⵠᐃ + ⲆⵠᐃⲆ);
	const ᐃⲆⲆⵠ = 6310542;
	if (ΔⲆⲆⲆⲆ(ΔⲆⲆⵠⵠⵠΔ, ᐃⲆⲆⵠ) === 1) {
		const ᐃΔⵠΔ = function() {
			for (let ᐃⲆⲆⵠᐃⵠⲆ = 0; ᐃⲆⲆⵠᐃⵠⲆ < 5; ᐃⲆⲆⵠᐃⵠⲆ++) ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("click", (function() {
				ᐃΔⵠΔ()
			}))
		};
		ᐃΔⵠΔ()
	}
	const ᐃⲆᐃⵠΔ = ⲆᐃᐃⵠΔ;
	const ⵠⲆⵠⵠ = ⲆⲆⵠⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆΔΔΔ] = {
		name: "Orb of the dragon",
		"ᐃᐃ": Δ.ⵠᐃᐃΔⵠⲆⵠ,
		"ⵠⵠⲆΔ": Ⲇᐃⵠ,
		"ᐃⲆΔⵠ": ᐃᐃⲆ
	};
	const ᐃᐃᐃⲆⵠⲆⲆⵠⵠ = ᐃⵠΔᐃΔᐃⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠᐃⲆΔ] = {
		name: "Cube of the dragon",
		"ᐃᐃ": Δ.ᐃⵠⵠⲆᐃᐃⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠⵠⲆᐃ] = {
		name: "Cube of the dragon",
		"ᐃᐃ": Δ.ⵠᐃⵠⵠΔΔΔ,
		"ⵠⵠⲆΔ": ΔⲆⲆ,
		"ᐃⲆΔⵠ": ΔΔᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⲆⲆᐃΔ] = {
		name: "Crown of luck",
		"ᐃᐃ": Δ.ⵠᐃⲆⲆⲆⵠⵠ,
		"ⵠⵠⲆΔ": Δⵠⵠⵠ,
		"ᐃⲆΔⵠ": ⵠⲆⵠⵠ
	};
	const ⵠⵠⵠⵠⵠⲆⲆ = ⵠᐃⵠⲆΔᐃᐃ;
	const Δᐃⵠⵠ = ΔⵠΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆΔⵠΔ] = {
		name: "Gem of luck",
		"ᐃᐃ": Δ.ᐃⵠΔⲆⲆΔⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠⲆΔΔ] = {
		name: "Crown of the angel",
		"ᐃᐃ": Δ.ᐃΔᐃⵠⵠⲆΔ,
		"ⵠⵠⲆΔ": ᐃᐃⲆ,
		"ᐃⲆΔⵠ": ⵠᐃⲆⲆ
	};
	const ⵠⲆΔⲆᐃ = ᐃⵠᐃΔⲆ;
	const ᐃⲆⲆΔΔ = ⲆΔᐃΔⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⵠⵠΔᐃ] = {
		name: "Gem of the angel",
		"ᐃᐃ": Δ.ⲆΔΔⵠΔⵠΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⵠᐃᐃⲆ] = {
		name: "Dragon heart",
		"ᐃᐃ": Δ.ΔⲆᐃⵠⲆⵠΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": Δⵠⵠⵠ
	};
	const ΔΔⲆⲆΔⵠΔ = ΔᐃΔᐃⲆΔⲆ;
	const ΔⲆΔᐃΔᐃⵠ = ΔΔⵠⲆᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆΔⲆⵠⲆ] = {
		name: "Lava heart",
		"ᐃᐃ": Δ.ΔⵠΔⲆᐃᐃΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": Δⵠⵠⵠ
	};
	const ᐃⵠⵠᐃᐃ = ⵠⵠⲆᐃᐃⵠᐃ;
	const ᐃⲆⲆᐃΔⲆⵠ = ΔᐃⵠⲆΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠΔⲆᐃⲆ] = {
		name: "Hood",
		"ᐃᐃ": Δ.ΔᐃⲆΔᐃᐃᐃ,
		"ⵠⵠⲆΔ": ⵠᐃⲆⲆ,
		"ᐃⲆΔⵠ": ΔⵠΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔΔᐃΔΔ] = {
		name: "Peasant",
		"ᐃᐃ": Δ.ΔⲆΔᐃⲆΔᐃ,
		"ⵠⵠⲆΔ": ΔⲆⲆ,
		"ᐃⲆΔⵠ": ⵠⲆⲆ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠΔⲆⲆ] = {
		name: "Winter peasant",
		"ᐃᐃ": Δ.ᐃᐃᐃⲆΔΔⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃⲆⵠΔ] = {
		name: "Winter hood",
		"ᐃᐃ": Δ.ΔΔΔᐃΔᐃⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⵠⲆⲆᐃ] = {
		name: "Bucket full",
		"ᐃᐃ": Δ.ⲆᐃⲆᐃᐃⵠⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	const ᐃⵠⲆⲆⵠΔᐃ = ⲆΔΔⲆⲆⵠⲆ;
	const ⲆⵠⵠΔΔΔᐃ = ⲆⵠᐃⵠⲆ;
	const ⲆΔΔⲆⵠ = Ⲇᐃⵠⵠᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆΔⵠⲆⵠ] = {
		name: "Bucket empty",
		"ᐃᐃ": Δ.ⲆⲆⵠΔΔΔΔ,
		"ⵠⵠⲆΔ": ⵠⲆΔ,
		"ᐃⲆΔⵠ": 1
	};
	const ΔⵠⲆᐃᐃ = ᐃᐃᐃⲆ;
	const ΔᐃΔⲆⲆⵠᐃ = ⲆΔΔⲆⲆⵠⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃΔᐃΔ] = {
		name: "Well",
		"ᐃᐃ": Δ.ΔⵠⵠⲆᐃⵠᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ΔᐃΔⲆ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃΔⲆⲆ] = {
		name: "Sign",
		"ᐃᐃ": Δ.ⲆⲆⵠΔⵠᐃΔ,
		"ⵠⵠⲆΔ": ᐃᐃⲆ,
		"ᐃⲆΔⵠ": ᐃᐃΔ
	};
	const ⲆΔⲆⵠΔⵠⲆⲆᐃ = {};
	const ΔⵠᐃΔⲆΔᐃ = {};
	ⲆΔⲆⵠΔⵠⲆⲆᐃ["get"] = function(ⵠⵠΔΔⲆⲆᐃ, ⵠⲆΔⵠΔᐃⲆ) {
		if (ⵠⲆΔⵠΔᐃⲆ !== "ⲆΔⲆⵠΔⵠⲆⲆᐃ") {
			const ⲆΔⲆⵠΔⵠⲆⲆᐃ = function() {
				for (let ⵠⵠΔΔⲆⲆᐃ = 0; ⵠⵠΔΔⲆⲆᐃ < 5; ⵠⵠΔΔⲆⲆᐃ++) ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("click", (function() {
					ⲆΔⲆⵠΔⵠⲆⲆᐃ()
				}))
			};
			ⲆΔⲆⵠΔⵠⲆⲆᐃ()
		}
		return ⵠⵠⲆΔᐃᐃᐃⲆΔ["Reflect"]["get"](...arguments)
	};
	const ᐃⲆⲆΔⲆΔⲆ = new ⵠⵠⲆΔᐃᐃᐃⲆΔ["Proxy"](ΔⵠᐃΔⲆΔᐃ, ⲆΔⲆⵠΔⵠⲆⲆᐃ);
	const ⲆᐃⵠΔᐃᐃΔ = ᐃⲆⲆΔⲆΔⲆ.ⲆΔⲆⵠΔⵠⲆⲆᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆΔⲆΔ] = {
		name: "Pumpkin Seed",
		"ᐃᐃ": Δ.ΔⵠΔⲆᐃΔΔ,
		"ⵠⵠⲆΔ": ⵠᐃⲆⲆ,
		"ᐃⲆΔⵠ": 0
	};
	const ᐃᐃᐃᐃΔⵠᐃΔⲆ = ΔΔⲆⲆΔⵠΔ;
	const ⵠΔᐃⲆᐃΔⲆ = 7758131;
	const ⲆⵠΔᐃᐃⵠⵠⲆΔ = ⵠΔᐃⲆᐃΔⲆ["ⵠΔⵠΔΔᐃᐃᐃΔ"];
	const ⲆⲆᐃⵠᐃᐃᐃ = `const ⵠⲆΔᐃᐃⵠᐃ = (typeof ⲆⲆⵠⵠᐃⵠᐃ === "${ⲆⵠΔᐃᐃⵠⵠⲆΔ}") ? 1 : 0; return ⵠⲆΔᐃᐃⵠᐃ;`;

	function ⲆⲆⵠⵠᐃⵠᐃ() {
		ⲆⵠΔᐃᐃⵠⵠⲆΔ;
		ⵠΔᐃⲆᐃΔⲆ();
		return ⲆⲆᐃⵠᐃᐃᐃ
	}
	const ⵠⲆΔᐃᐃⵠᐃ = 13304551;
	const ⵠⲆΔⲆⵠΔⵠ = new Function(ⲆⲆⵠⵠᐃⵠᐃ + ⲆⲆᐃⵠᐃᐃᐃ);
	const ⲆΔⲆⵠΔΔΔᐃΔ = 13722916;
	if (ⵠⲆΔⲆⵠΔⵠ(ⵠⲆΔᐃᐃⵠᐃ, ⲆΔⲆⵠΔΔΔᐃΔ) === 1) {
		const ⵠΔᐃⲆᐃΔⲆ = function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("mousemove", (function() {
				ⵠΔᐃⲆᐃΔⲆ()
			}))
		};
		ⵠΔᐃⲆᐃΔⲆ()
	}
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃᐃⲆⵠ] = {
		name: "Garlic Seed",
		"ᐃᐃ": Δ.ⲆΔⲆΔⲆᐃⵠ,
		"ⵠⵠⲆΔ": ⵠⲆᐃ,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃⵠΔⲆ] = {
		name: "Thorbushes Seed",
		"ᐃᐃ": Δ.ᐃⲆᐃᐃᐃᐃᐃ,
		"ⵠⵠⲆΔ": Ⲇᐃⵠ,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃΔⵠᐃ] = {
		name: "Roof",
		"ᐃᐃ": Δ.ⵠᐃᐃⵠⵠᐃⲆ,
		"ⵠⵠⲆΔ": 1,
		"ᐃⲆΔⵠ": Δⵠᐃ
	};
	const ᐃⲆⵠⲆⵠᐃⲆ = ⵠⲆⵠΔⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆⲆᐃⲆ] = {
		name: "Crab Crown",
		"ᐃᐃ": Δ.ⵠⵠⲆΔⲆⵠⵠ,
		"ⵠⵠⲆΔ": ⲆⲆⵠⲆ,
		"ᐃⲆΔⵠ": 1
	};
	const ΔᐃΔᐃᐃ = ⲆΔⵠΔΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠΔᐃⵠⵠ] = {
		name: "Carrot Seed",
		"ᐃᐃ": Δ.ⵠⵠᐃΔⲆΔᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	const ᐃᐃⵠᐃΔ = ⵠⲆⲆᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔΔⲆⲆᐃ] = {
		name: "Tomato Seed",
		"ᐃᐃ": Δ.ᐃᐃⲆΔⲆⵠᐃ,
		"ⵠⵠⲆΔ": Δⵠⵠⵠ,
		"ᐃⲆΔⵠ": 0
	};
	const ⵠΔⲆΔᐃⲆⲆ = ⵠᐃⲆΔⲆⲆΔ;
	const ⲆᐃᐃᐃᐃⲆⲆ = ᐃⲆΔⲆᐃⵠΔ;
	const ⵠⲆᐃⲆⵠΔⲆ = ΔⵠⵠⵠᐃⲆᐃ;
	const ⲆⵠⲆⵠΔᐃΔ = ⵠᐃⵠⵠᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⲆᐃⵠⲆ] = {
		name: "Watermelon Seed",
		"ᐃᐃ": Δ.ᐃΔⵠⵠⵠⵠⵠ,
		"ⵠⵠⲆΔ": ΔΔᐃ,
		"ᐃⲆΔⵠ": 0
	};
	const ⲆᐃΔⲆⲆΔᐃ = ᐃΔΔⲆⲆⲆᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔᐃᐃⲆⲆ] = {
		name: "Aloe Vera Seed",
		"ᐃᐃ": Δ.ΔⵠΔΔᐃⵠⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆΔΔⵠ] = {
		name: "Cap",
		"ᐃᐃ": Δ.ΔᐃᐃᐃΔᐃᐃ,
		"ⵠⵠⲆΔ": ⵠⲆⵠⵠ,
		"ᐃⲆΔⵠ": ⵠΔᐃ
	};
	const ⲆⲆⲆᐃᐃ = ⵠⵠΔⲆⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃΔⲆΔΔ] = {
		name: "Turban",
		"ᐃᐃ": Δ.ΔⲆⲆⲆⲆⲆⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	const ⵠⵠΔⵠⲆΔΔ = Δᐃᐃⵠᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃΔΔΔⲆ] = {
		name: "Pilot Helmet",
		"ᐃᐃ": Δ.ⲆⵠᐃᐃⲆΔΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃᐃⲆᐃΔ] = {
		name: ⵠ[128],
		"ᐃᐃ": Δ.ⵠᐃᐃΔΔⲆⵠ,
		"ⵠⵠⲆΔ": ⵠⲆΔ,
		"ᐃⲆΔⵠ": ⵠⲆᐃ
	};
	const ⲆΔᐃⵠⵠΔᐃ = ᐃΔⲆⲆᐃᐃⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠΔᐃΔΔ] = {
		name: ⵠ[128],
		"ᐃᐃ": Δ.ⵠᐃᐃⵠⲆΔΔ,
		"ⵠⵠⲆΔ": ΔΔᐃ,
		"ᐃⲆΔⵠ": ⲆΔΔΔ
	};
	const ⵠⵠΔⵠⲆⲆⲆᐃⲆ = ⵠⵠⲆⵠΔⲆⵠ;
	const ᐃᐃⲆⵠⲆⲆᐃ = ⲆᐃᐃⲆΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆⵠΔⲆ] = {
		name: ⵠ[128],
		"ᐃᐃ": Δ.ᐃᐃᐃⵠΔᐃᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃΔⲆᐃΔ] = {
		name: ⵠ[128],
		"ᐃᐃ": Δ.ⲆᐃΔⲆΔΔⲆ,
		"ⵠⵠⲆΔ": ⵠⲆΔ,
		"ᐃⲆΔⵠ": ΔⵠⲆⲆ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠᐃΔΔ] = {
		name: ⵠ[128],
		"ᐃᐃ": Δ.ΔᐃⲆⲆⲆⵠᐃ,
		"ⵠⵠⲆΔ": Ⲇᐃⵠ,
		"ᐃⲆΔⵠ": ⲆᐃΔ
	};
	const ⵠⵠⲆⵠ = ⵠᐃⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⲆⲆΔⲆ] = {
		name: ⵠ[128],
		"ᐃᐃ": Δ.ⵠⵠⲆᐃΔⵠᐃ,
		"ⵠⵠⲆΔ": ᐃᐃⲆ,
		"ᐃⲆΔⵠ": Δⵠᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆΔⵠⵠ] = {
		name: "Pitchfork",
		"ᐃᐃ": Δ.ⲆΔΔⵠⲆΔⲆ,
		"ⵠⵠⲆΔ": ⲆⲆⵠⲆ,
		"ᐃⲆΔⵠ": ΔᐃⵠⲆ
	};
	const ᐃΔΔᐃΔ = ΔⵠΔⵠΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆΔᐃΔᐃ] = {
		name: "Wood Door Spike",
		"ᐃᐃ": Δ.ⵠⵠⵠⲆⲆΔΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆΔΔⵠΔ] = {
		name: "Stone Door Spike",
		"ᐃᐃ": Δ.ᐃᐃΔᐃΔⵠΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠΔⲆΔ] = {
		name: "Gold Door Spike",
		"ᐃᐃ": Δ.ⲆⲆᐃⲆᐃΔⲆ,
		"ⵠⵠⲆΔ": ΔΔᐃ,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃⵠΔΔ] = {
		name: "Diamond Door Spike",
		"ᐃᐃ": Δ.ΔΔⲆᐃᐃⵠΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⲆΔΔΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠᐃᐃΔ] = {
		name: "Amethyst Door Spike",
		"ᐃᐃ": Δ.ΔΔⲆⵠⲆΔⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃᐃⵠⲆᐃ] = {
		name: "Diamond Fire Protection ",
		"ᐃᐃ": Δ.ⲆⲆⵠⲆⲆⵠⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	const ᐃΔⲆΔΔΔᐃ = 16034911;

	function ᐃⵠⲆΔⵠᐃΔΔᐃ(ΔⲆⲆᐃᐃⵠᐃ) {
		const ᐃΔⲆΔΔΔᐃ = function() {
			for (let ⵠᐃΔⵠⲆⵠⲆ = 0; ⵠᐃΔⵠⲆⵠⲆ < 5; ⵠᐃΔⵠⲆⵠⲆ++) ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("click", (function() {
				ᐃΔⲆΔΔΔᐃ()
			}))
		};
		ᐃΔⲆΔΔΔᐃ()
	}
	const ΔⲆⲆᐃᐃⵠᐃ = ᐃⵠⲆΔⵠᐃΔΔᐃ + ";" + "let ΔⲆⲆᐃᐃⵠᐃ = " + ᐃⵠⲆΔⵠᐃΔΔᐃ + ";";
	const ⵠᐃΔⵠⲆⵠⲆ = ΔⲆⲆᐃᐃⵠᐃ + "let ⵠΔΔⲆⵠᐃΔⲆᐃ = 735389; try { ⵠΔΔⲆⵠᐃΔⲆᐃ = ᐃⵠⲆΔⵠᐃΔΔᐃ; } catch (ⵠΔΔΔⲆⵠⵠ) { ΔⲆⲆᐃᐃⵠᐃ (); };";
	ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]](ⵠᐃΔⵠⲆⵠⲆ, 0);
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆΔΔⵠ] = {
		name: "Amethyst Fire Protection ",
		"ᐃᐃ": Δ.Δᐃⵠⵠⵠⵠᐃ,
		"ⵠⵠⲆΔ": Δⵠⵠⵠ,
		"ᐃⲆΔⵠ": 1
	};
	const ⵠⵠΔⲆᐃ = ΔⲆⲆΔΔ;
	const ⲆΔᐃᐃΔ = ⲆΔᐃΔⵠ;
	const ᐃΔⲆⵠⲆΔΔᐃΔ = ΔⵠⵠⲆΔᐃⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆΔⵠⵠⲆ] = {
		name: "Amethyst Fire Protection ",
		"ᐃᐃ": Δ.ᐃΔᐃᐃⲆᐃᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃᐃⵠⵠⵠ] = {
		name: "Reidite Sword",
		"ᐃᐃ": Δ.ⲆΔⲆⵠⲆⲆⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	const ⵠⵠΔΔΔⲆΔ = ⲆⵠⵠᐃΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.Δᐃᐃᐃⵠ] = {
		name: "Reidite Spear",
		"ᐃᐃ": Δ.ΔⵠⵠⲆⵠΔᐃ,
		"ⵠⵠⲆΔ": ΔⲆⲆ,
		"ᐃⲆΔⵠ": 1
	};
	const ⵠⵠᐃᐃΔΔⵠ = ⲆⲆᐃⵠⲆⵠⲆ;
	const ΔⵠⵠᐃΔⵠⲆ = ⲆΔⲆΔⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⲆΔΔⲆ] = {
		name: "Reidite Helmet",
		"ᐃᐃ": Δ.ᐃΔⵠᐃⲆⵠⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ⵠⲆⲆ
	};
	const ΔΔⲆⲆⵠ = ᐃᐃᐃᐃⵠ;
	const ᐃᐃᐃΔᐃ = ⲆⲆᐃⵠ;
	const ⵠⲆᐃΔⵠⵠⲆ = ⲆⲆΔⲆⲆ;
	const ⵠᐃΔⲆⲆΔΔ = ᐃΔⲆⲆⵠ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⵠΔⵠⵠ] = {
		name: "Reidite Door Spike",
		"ᐃᐃ": Δ.ⵠΔᐃΔᐃᐃⲆ,
		"ⵠⵠⲆΔ": ᐃᐃᐃ,
		"ᐃⲆΔⵠ": ΔᐃⵠⲆ
	};
	const ⲆⵠΔⵠ = ⲆᐃⵠΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⲆΔⲆⵠ] = {
		name: "Reidite Door",
		"ᐃᐃ": Δ.ⲆⲆᐃᐃⵠᐃⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": Δᐃⵠⵠ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔΔⵠⵠΔ] = {
		name: "Reidite Spike",
		"ᐃᐃ": Δ.ᐃⲆⲆΔⵠᐃᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": Δᐃⵠⵠ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃⲆⵠⲆⲆ] = {
		name: "Reidite Wall",
		"ᐃᐃ": Δ.ΔᐃⵠⲆᐃᐃᐃ,
		"ⵠⵠⲆΔ": ⵠᐃⲆⲆ,
		"ᐃⲆΔⵠ": Δⵠᐃ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⵠΔⲆⲆ] = {
		name: "Reidite pick",
		"ᐃᐃ": Δ.ᐃΔᐃᐃΔⲆⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 1
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃᐃⵠⲆ] = {
		name: "Boat",
		"ᐃᐃ": Δ.ᐃᐃᐃΔⲆᐃⲆ,
		"ⵠⵠⲆΔ": Ⲇᐃⵠ,
		"ᐃⲆΔⵠ": ⲆΔΔΔ
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃΔⲆᐃⲆ] = {
		name: "Sled",
		"ᐃᐃ": Δ.ᐃᐃⵠΔΔᐃΔ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": ΔᐃΔⲆ
	};
	const ΔᐃⲆⲆ = ⲆᐃΔ;
	const ΔΔⲆⲆ = ⲆᐃⵠΔ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ᐃΔⵠΔᐃ] = {
		name: "Saddle",
		"ᐃᐃ": Δ.ⲆⲆⵠⲆᐃⵠΔ,
		"ⵠⵠⲆΔ": Ⲇᐃⵠ,
		"ᐃⲆΔⵠ": ᐃᐃΔ
	};
	const ᐃⲆΔᐃΔⵠⵠ = ⵠᐃΔⵠᐃ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⲆᐃΔΔ] = {
		name: "Mount Boar",
		"ᐃᐃ": Δ.ⲆΔᐃⵠⲆΔⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⲆⲆⵠᐃ] = {
		name: "Mount King Crab",
		"ᐃᐃ": Δ.ᐃⲆⵠᐃⵠᐃΔ,
		"ⵠⵠⲆΔ": ᐃᐃⲆ,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⵠⲆⵠᐃ] = {
		name: "Mount Baby Dragon",
		"ᐃᐃ": Δ.ⵠⲆⵠⵠⲆⵠⲆ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	const ᐃΔᐃΔᐃ = ᐃᐃⲆⵠⲆ;
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆᐃⲆⲆΔ] = {
		name: "Mount Baby Lava",
		"ᐃᐃ": Δ.ⵠⲆΔⵠᐃⵠᐃ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ΔⵠⲆΔᐃ] = {
		name: "Mount Hawk",
		"ᐃᐃ": Δ.ᐃⵠⵠⵠΔⲆⲆ,
		"ⵠⵠⲆΔ": ⲆⲆⵠⲆ,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⵠⵠⵠⵠΔ] = {
		name: "Plane",
		"ᐃᐃ": Δ.ᐃⲆᐃⲆⲆᐃⵠ,
		"ⵠⵠⲆΔ": ⲆⲆⵠⲆ,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆⵠⵠⲆᐃ] = {
		name: "Pitchfork 2",
		"ᐃᐃ": Δ.ⲆΔⵠⵠΔⵠⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": 0
	};
	Ⲇⵠᐃᐃ[ⵠⵠ.ⲆΔΔᐃⲆ] = {
		name: "Baby Mammoth",
		"ᐃᐃ": Δ.ⲆΔᐃᐃΔΔⵠ,
		"ⵠⵠⲆΔ": 0,
		"ᐃⲆΔⵠ": Δⵠⵠⵠ
	};
	var ⲆΔΔⵠᐃⲆᐃ = undefined;
	var ᐃⵠⲆᐃⲆ = [{
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 25],
			[ⵠⵠ.ⵠⵠΔΔ, 5]
		],
		w: ᐃᐃᐃ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⲆⲆΔⵠⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⲆΔⵠⲆ,
		time: ΔⵠⲆⲆ / ΔΔⲆⲆⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⲆΔⵠⲆ, ⵠⲆⲆ],
			[ⵠⵠ.ⲆⵠᐃΔ, 35],
			[ⵠⵠ.ⵠⵠΔΔ, ⵠⲆΔⲆᐃ]
		],
		w: 0,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⵠⵠⵠ,
		id: ⵠΔⲆ.ᐃⲆⵠΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⲆⵠΔΔ,
		time: 1 / ᐃᐃΔᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 150],
			[ⵠⵠ.ⵠⵠΔΔ, 50],
			[ⵠⵠ.ᐃΔᐃⲆ, 15]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": ⵠⲆΔ,
		e: ⲆⵠⲆⲆ,
		id: ⵠΔⲆ.ᐃⲆⲆⲆΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⲆⲆⲆΔ,
		time: ΔⵠⲆⲆ / ⲆΔⲆᐃᐃⵠⲆ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, ⲆᐃⲆⵠᐃ],
			[ⵠⵠ.ⵠⵠΔΔ, ᐃᐃᐃΔΔ]
		],
		w: 0,
		f: ᐃᐃᐃ,
		"Ⲇⵠⵠ": 0,
		e: ⵠⲆΔ,
		id: ⵠΔⲆ.ᐃⵠⵠⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⵠⵠⲆᐃ,
		time: ΔⵠΔ / ΔᐃΔᐃᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 10]
		],
		w: 0,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ΔΔⵠᐃⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔΔⵠᐃⲆ,
		time: ΔᐃⲆⲆ / ⵠⵠΔⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ΔΔⵠᐃⲆ, ΔᐃⵠⲆ],
			[ⵠⵠ.ⲆⵠᐃΔ, 50],
			[ⵠⵠ.ⵠⵠΔΔ, ᐃⵠⵠᐃᐃ]
		],
		w: Ⲇⵠᐃ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⵠⵠⲆⵠ,
		id: ⵠΔⲆ.ΔΔΔΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔΔΔΔΔ,
		time: Δᐃⵠⵠ / 8,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 40],
			[ⵠⵠ.ᐃΔᐃⲆ, 20],
			[ⵠⵠ.ⵠⵠΔΔ, 30],
			[ⵠⵠ.ΔΔΔΔΔ, 1]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⵠⲆΔ,
		id: ⵠΔⲆ.ⲆⲆⵠΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⲆⵠΔΔ,
		time: 1 / ⲆⵠⵠΔΔΔᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆᐃ, ᐃⲆᐃⵠⲆ],
			[ⵠⵠ.ᐃΔᐃⲆ, 50],
			[ⵠⵠ.ⵠⵠΔΔ, 80],
			[ⵠⵠ.ⲆⲆⵠΔΔ, 1]
		],
		w: ΔⵠⲆⲆ,
		f: ᐃᐃⲆ,
		"Ⲇⵠⵠ": 0,
		e: ⵠⲆΔ,
		id: ⵠΔⲆ.ⲆⵠⵠΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⵠⵠΔΔ,
		time: 1 / ⵠΔⵠᐃⲆ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆᐃ, 40],
			[ⵠⵠ.ᐃΔᐃⲆ, 60],
			[ⵠⵠ.ⲆΔΔᐃ, 30],
			[ⵠⵠ.ⲆⵠⵠΔΔ, 1]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⲆⵠⲆᐃΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⵠⲆᐃΔ,
		time: .016666666666666666,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆΔΔᐃ, 30],
			[ⵠⵠ.ⲆᐃⲆᐃ, 40],
			[ⵠⵠ.ⲆᐃⲆⲆ, 30],
			[ⵠⵠ.ⲆⵠⲆᐃΔ, 1]
		],
		w: Δⵠᐃ,
		f: Δⵠⵠⵠ,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⲆⵠΔⲆⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⵠΔⲆⲆ,
		time: Δⵠᐃ / 90,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 90],
			[ⵠⵠ.ⵠⵠΔΔ, 50]
		],
		w: ⵠⲆⲆ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⲆΔΔᐃΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆΔΔᐃΔ,
		time: .1,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 160],
			[ⵠⵠ.ⵠⵠΔΔ, 120],
			[ⵠⵠ.ᐃΔᐃⲆ, 80],
			[ⵠⵠ.ⲆΔΔᐃΔ, Δⵠᐃ]
		],
		w: Δᐃⵠⵠ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⵠΔᐃⵠ,
		id: ⵠΔⲆ.Ⲇᐃᐃᐃᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.Ⲇᐃᐃᐃᐃ,
		time: 1 / ⵠᐃΔⵠᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆᐃ, 80],
			[ⵠⵠ.ⵠⵠΔΔ, 200],
			[ⵠⵠ.ᐃΔᐃⲆ, 150],
			[ⵠⵠ.Ⲇᐃᐃᐃᐃ, 1]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: Ⲇᐃⵠ,
		id: ⵠΔⲆ.ⵠΔⵠᐃᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠΔⵠᐃᐃ,
		time: .05,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆᐃ, 160],
			[ⵠⵠ.ⲆΔΔᐃ, 60],
			[ⵠⵠ.ᐃΔᐃⲆ, 250],
			[ⵠⵠ.ⵠΔⵠᐃᐃ, 1]
		],
		w: 1,
		f: Ⲇᐃⵠ,
		"Ⲇⵠⵠ": ⵠⵠⲆⵠ,
		e: ⲆⲆⵠⲆ,
		id: ⵠΔⲆ.ⲆᐃⵠΔⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆᐃⵠΔⵠ,
		time: .016666666666666666,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆΔΔᐃ, 160],
			[ⵠⵠ.ⲆᐃⲆⲆ, 60],
			[ⵠⵠ.ⲆᐃⲆᐃ, 250],
			[ⵠⵠ.ⲆᐃⵠΔⵠ, ΔⵠⲆⲆ]
		],
		w: 1,
		f: Ⲇᐃⵠ,
		"Ⲇⵠⵠ": ᐃᐃⲆ,
		e: ⲆⵠⲆⲆ,
		id: ⵠΔⲆ.ⵠⲆΔΔⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⲆΔΔⵠ,
		time: Ⲇⵠᐃ / 90,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⵠⲆΔΔⵠ, 1],
			[ⵠⵠ.ⲆⵠⲆⲆΔ, Δᐃⵠⵠ],
			[ⵠⵠ.ⵠⵠⵠᐃᐃ, ⵠⲆⲆ],
			[ⵠⵠ.Δⵠⵠⵠᐃ, ⵠΔΔⲆΔ],
			[ⵠⵠ.ⲆΔΔᐃ, 20]
		],
		w: Δᐃⵠⵠ,
		f: 1,
		"Ⲇⵠⵠ": ⲆⵠⲆⲆ,
		e: 0,
		id: ⵠΔⲆ.ⲆᐃΔⵠⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆᐃΔⵠⲆ,
		time: .008333333333333333,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 30],
			[ⵠⵠ.ⵠⵠΔΔ, ⲆⵠⲆΔΔⵠⵠ]
		],
		w: 1,
		f: Δⵠⵠⵠ,
		"Ⲇⵠⵠ": ᐃᐃⲆ,
		e: 0,
		id: ⵠΔⲆ.ΔΔΔᐃΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔΔΔᐃΔ,
		time: Ⲇⵠᐃ / 5,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ΔΔΔᐃΔ, 1],
			[ⵠⵠ.ᐃΔᐃⲆ, ᐃⲆᐃⵠⲆ],
			[ⵠⵠ.ⵠⵠΔΔ, 30],
			[ⵠⵠ.ⲆⵠᐃΔ, 40]
		],
		w: 1,
		f: ⵠᐃⲆⲆ,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⲆᐃⲆⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆᐃⲆⲆᐃ,
		time: 1 / ⵠⲆΔⲆᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆⲆᐃ, ᐃⲆΔ],
			[ⵠⵠ.ⲆᐃⲆᐃ, 20],
			[ⵠⵠ.ᐃΔᐃⲆ, 50],
			[ⵠⵠ.ⵠⵠΔΔ, 80]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": ᐃᐃᐃ,
		e: 0,
		id: ⵠΔⲆ.ᐃⲆᐃⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⲆᐃⲆᐃ,
		time: ⲆᐃΔ / ⵠⵠᐃΔᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ᐃⲆᐃⲆᐃ, ΔᐃΔⲆ],
			[ⵠⵠ.ᐃΔᐃⲆ, 60],
			[ⵠⵠ.ⲆΔΔᐃ, 30],
			[ⵠⵠ.ⲆᐃⲆᐃ, 40]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": ⵠⲆΔ,
		e: ⵠⲆᐃ,
		id: ⵠΔⲆ.ⵠⵠΔᐃΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⵠΔᐃΔ,
		time: ⲆᐃΔ / 40,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 50]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⲆⵠΔᐃⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⵠΔᐃⲆ,
		time: 1 / 5,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠΔᐃⲆ, 1]
		],
		w: ΔΔᐃ,
		f: 0,
		"Ⲇⵠⵠ": ⲆΔΔΔ,
		e: 0,
		id: ⵠΔⲆ.ΔⲆⵠⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⲆⵠⵠΔ,
		time: .2,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, ⵠΔⵠΔΔ],
			[ⵠⵠ.ⵠⵠΔΔ, 50]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ᐃᐃⲆ,
		id: ⵠΔⲆ.ᐃⲆΔⵠⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⲆΔⵠⵠ,
		time: ΔⵠΔ / 10,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ᐃⲆΔⵠⵠ, 1],
			[ⵠⵠ.ⵠᐃᐃⵠⵠᐃⵠ, 1]
		],
		w: 1,
		f: ⵠⵠⲆⵠ,
		"Ⲇⵠⵠ": ⵠᐃⲆⲆ,
		e: 0,
		id: ⵠΔⲆ.ⲆⵠⵠⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⵠⵠⲆᐃ,
		time: .016666666666666666,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⵠⵠⲆ, ⵠⲆⲆⵠ],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 4],
			[ⵠⵠ.ΔΔⲆⲆⲆ, ⵠⵠᐃΔ]
		],
		w: ΔⵠⲆⲆ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⵠⲆᐃ,
		id: ⵠΔⲆ.ᐃᐃΔⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃᐃΔⲆᐃ,
		time: ⲆᐃΔ / ⵠᐃΔⵠᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 40]
		],
		w: 0,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ΔΔᐃ,
		id: ⵠΔⲆ.ⲆⲆⵠΔⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⲆⵠΔⲆ,
		time: ᐃᐃΔ / 5,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆⲆⵠΔⲆ, ⵠΔᐃ],
			[ⵠⵠ.ⲆⵠᐃΔ, 60],
			[ⵠⵠ.ⵠⵠΔΔ, 10]
		],
		w: 1,
		f: ⵠⲆⵠⵠ,
		"Ⲇⵠⵠ": ⵠᐃⲆ,
		e: ⵠⲆⵠⵠ,
		id: ⵠΔⲆ.ⲆΔΔⵠⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆΔΔⵠⵠ,
		time: 1 / ⲆΔⵠΔⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 80],
			[ⵠⵠ.ᐃΔᐃⲆ, 30],
			[ⵠⵠ.ⵠⵠΔΔ, 30],
			[ⵠⵠ.ⲆΔΔⵠⵠ, ΔᐃⲆⲆ]
		],
		w: ΔᐃⵠⲆ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⵠᐃⲆⲆ,
		id: ⵠΔⲆ.ᐃⵠᐃΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⵠᐃΔΔ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ,
		time: Δᐃⵠⵠ / ΔΔᐃΔᐃΔΔ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 200],
			[ⵠⵠ.ⲆᐃⲆᐃ, 40],
			[ⵠⵠ.ᐃΔᐃⲆ, 60],
			[ⵠⵠ.ᐃⵠᐃΔΔ, ⲆΔΔΔ]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⵠᐃⲆ,
		id: ⵠΔⲆ.ΔⵠⵠⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⵠⵠⵠΔ,
		time: 1 / 30,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆΔΔᐃ, 40],
			[ⵠⵠ.ⲆᐃⲆᐃ, 80],
			[ⵠⵠ.ᐃΔᐃⲆ, 90],
			[ⵠⵠ.ΔⵠⵠⵠΔ, 1]
		],
		w: ⵠⲆΔⲆ,
		f: 0,
		"Ⲇⵠⵠ": ⵠⵠⵠ,
		e: ⵠᐃⲆ,
		id: ⵠΔⲆ.ⵠᐃᐃᐃⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠᐃᐃᐃⲆ,
		time: 1 / 60,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆⲆ, 40],
			[ⵠⵠ.ⲆΔΔᐃ, 80],
			[ⵠⵠ.ⲆᐃⲆᐃ, 90],
			[ⵠⵠ.ⵠᐃᐃᐃⲆ, ⵠⲆΔⲆ]
		],
		w: 1,
		f: ⵠⲆᐃ,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.Δᐃᐃᐃⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.Δᐃᐃᐃⵠ,
		time: Δⵠᐃ / 90,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ᐃᐃᐃⲆᐃ, 20],
			[ⵠⵠ.ᐃⵠⵠⵠⵠ, 1],
			[ⵠⵠ.ⲆΔΔᐃ, 100],
			[ⵠⵠ.ΔⵠᐃᐃⲆ, ᐃᐃᐃΔᐃ]
		],
		w: ⵠⲆⲆ,
		f: Δⵠᐃ,
		"Ⲇⵠⵠ": 1,
		e: ⵠᐃⲆ,
		id: ⵠΔⲆ.ⲆᐃⵠⲆⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆᐃⵠⲆⲆ,
		time: .008333333333333333,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⵠⲆⲆ, ⵠⲆⲆ],
			[ⵠⵠ.ⲆⲆΔΔΔ, ⵠⲆⲆ],
			[ⵠⵠ.ⲆᐃⲆⲆ, ᐃⵠΔᐃⵠ],
			[ⵠⵠ.ⲆΔⲆⵠⲆ, 2]
		],
		w: 1,
		f: 1,
		"Ⲇⵠⵠ": 1,
		e: 0,
		id: ⵠΔⲆ.ΔΔΔⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔΔΔⲆᐃ,
		time: ΔᐃⲆⲆ / 200,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆⲆⵠΔⲆ, Ⲇⵠᐃ],
			[ⵠⵠ.ΔᐃᐃΔⲆ, ΔⲆⵠⵠ],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 6]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": ΔΔᐃ,
		e: 0,
		id: ⵠΔⲆ.ΔᐃⵠⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔᐃⵠⲆᐃ,
		time: .03333333333333333,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 30]
		],
		w: 0,
		f: 0,
		"Ⲇⵠⵠ": ⵠⵠⲆⵠ,
		e: 0,
		id: ⵠΔⲆ.ΔᐃⲆΔⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔᐃⲆΔⲆ,
		time: .2,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 50],
			[ⵠⵠ.ⵠⵠΔΔ, 25],
			[ⵠⵠ.ΔᐃⲆΔⲆ, ⲆᐃΔ]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": ⵠⲆⵠⵠ,
		e: 0,
		id: ⵠΔⲆ.ⵠΔᐃᐃⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠΔᐃᐃⵠ,
		time: ⵠⲆΔⲆ / ⲆΔⵠΔⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 60],
			[ⵠⵠ.ᐃΔᐃⲆ, 40],
			[ⵠⵠ.ⵠⵠΔΔ, 50],
			[ⵠⵠ.ⵠΔᐃᐃⵠ, ΔᐃⲆⲆ]
		],
		w: ΔᐃΔⲆ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⵠᐃⲆⲆ,
		id: ⵠΔⲆ.ΔᐃⲆⵠⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔᐃⲆⵠⲆ,
		time: ᐃⲆΔ / ⲆᐃΔᐃⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆᐃ, 40],
			[ⵠⵠ.ᐃΔᐃⲆ, 60],
			[ⵠⵠ.ⵠⵠΔΔ, 80],
			[ⵠⵠ.ΔᐃⲆⵠⲆ, 1]
		],
		w: 1,
		f: ΔΔᐃ,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⵠΔΔⲆⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠΔΔⲆⲆ,
		time: .03333333333333333,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆᐃ, 60],
			[ⵠⵠ.ᐃΔᐃⲆ, ⲆᐃⲆⵠⲆ],
			[ⵠⵠ.ⲆΔΔᐃ, 40],
			[ⵠⵠ.ⵠΔΔⲆⲆ, ΔⵠⲆⲆ]
		],
		w: ΔⵠⲆⲆ,
		f: ⵠΔᐃⵠ,
		"Ⲇⵠⵠ": ⵠΔᐃⵠ,
		e: 0,
		id: ⵠΔⲆ.ᐃⵠⲆⲆΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⵠⲆⲆΔ,
		time: Ⲇⵠᐃ / 60,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆᐃ, ⵠΔⵠΔΔ],
			[ⵠⵠ.ⲆΔΔᐃ, 80],
			[ⵠⵠ.ⲆᐃⲆⲆ, 40],
			[ⵠⵠ.ᐃⵠⲆⲆΔ, ⵠⲆⲆ]
		],
		w: 1,
		f: Δⵠⵠⵠ,
		"Ⲇⵠⵠ": 0,
		e: ⵠⵠⲆⵠ,
		id: ⵠΔⲆ.ᐃᐃⵠⵠⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃᐃⵠⵠⵠ,
		time: Δᐃⵠⵠ / 90,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆΔᐃⵠⲆ, 3]
		],
		w: ΔΔᐃ,
		f: 1,
		"Ⲇⵠⵠ": 0,
		e: ⵠᐃⲆ,
		id: ⵠΔⲆ.ⵠᐃΔΔᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠᐃΔΔᐃ,
		time: ΔⵠΔ / ⵠⵠᐃᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ⵠⵠⵠⵠᐃ, ⲆΔⵠⵠⵠ]
		],
		w: 0,
		f: ΔᐃⵠⲆ,
		"Ⲇⵠⵠ": 0,
		e: ΔⲆⲆ,
		id: ⵠΔⲆ.ΔᐃⲆⵠᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔᐃⲆⵠᐃ,
		time: 1 / ᐃᐃΔᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ΔⲆᐃⲆᐃ, 8]
		],
		w: 0,
		f: 1,
		"Ⲇⵠⵠ": 0,
		e: ⵠⲆᐃ,
		id: ⵠΔⲆ.ᐃⲆΔⲆΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⲆΔⲆΔ,
		time: Ⲇⵠᐃ / 5,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆⲆⵠΔⵠ, 8]
		],
		w: 0,
		f: ⲆΔΔΔ,
		"Ⲇⵠⵠ": 0,
		e: ⵠⲆᐃ,
		id: ⵠΔⲆ.ⲆᐃᐃⲆⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆᐃᐃⲆⵠ,
		time: .2,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ᐃᐃⵠⵠⲆ, Δᐃᐃⵠⵠ]
		],
		w: 0,
		f: 1,
		"Ⲇⵠⵠ": ⵠⲆᐃ,
		e: ⵠΔᐃⵠ,
		id: ⵠΔⲆ.ⲆᐃⵠΔⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆᐃⵠΔⲆ,
		time: ΔᐃⲆⲆ / ΔⲆⵠⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃᐃᐃΔ, ⲆΔΔⲆⵠ]
		],
		w: 0,
		f: Δⵠᐃ,
		"Ⲇⵠⵠ": 0,
		e: ⵠⲆⵠⵠ,
		id: ⵠΔⲆ.ⵠΔᐃⵠⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠΔᐃⵠⵠ,
		time: 1 / ⵠⵠᐃᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ⵠⲆⵠΔⲆ, ΔΔⲆᐃᐃ]
		],
		w: ⲆⲆⵠⲆ,
		f: ⲆΔΔΔ,
		"Ⲇⵠⵠ": ⵠⲆⵠⵠ,
		e: 0,
		id: ⵠΔⲆ.ΔΔⲆⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔΔⲆⲆᐃ,
		time: 1 / ᐃᐃᐃᐃⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ⵠⲆⵠΔΔ, ⲆⵠΔᐃΔ]
		],
		w: 0,
		f: 1,
		"Ⲇⵠⵠ": ⵠⲆΔ,
		e: 0,
		id: ⵠΔⲆ.ⵠⲆᐃⵠⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⲆᐃⵠⲆ,
		time: Δⵠᐃ / 5,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ⵠΔᐃΔⵠ, ⲆⵠΔᐃΔ]
		],
		w: 0,
		f: 1,
		"Ⲇⵠⵠ": ⵠⵠⵠ,
		e: 0,
		id: ⵠΔⲆ.ΔᐃᐃⲆⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔᐃᐃⲆⲆ,
		time: ᐃᐃΔ / 5,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ᐃⵠΔⵠⵠ, 1]
		],
		w: Δⵠⵠⵠ,
		f: 1,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ᐃⲆΔⲆⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⲆΔⲆⵠ,
		time: 1 / ⲆⵠΔΔ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ᐃⵠⵠΔΔ, ᐃᐃΔ]
		],
		w: 0,
		f: 1,
		"Ⲇⵠⵠ": ⵠᐃⲆ,
		e: 0,
		id: ⵠΔⲆ.ΔⵠΔᐃᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⵠΔᐃᐃ,
		time: 1 / ΔⲆΔⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ΔⲆⵠᐃⲆ, 3]
		],
		w: ⵠᐃⲆ,
		f: ⵠΔᐃ,
		"Ⲇⵠⵠ": 0,
		e: ⵠⵠⲆⵠ,
		id: ⵠΔⲆ.ⲆⲆᐃΔⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⲆᐃΔⵠ,
		time: .3333333333333333,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ΔⲆⵠᐃⲆ, ΔΔᐃΔ],
			[ⵠⵠ.ⲆΔᐃⵠⲆ, 1]
		],
		w: 0,
		f: 1,
		"Ⲇⵠⵠ": ⵠⵠⲆⵠ,
		e: ⵠⲆᐃ,
		id: ⵠΔⲆ.ΔᐃⵠΔⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔᐃⵠΔⵠ,
		time: 1 / ⲆΔⵠⵠⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ΔⲆⵠᐃⲆ, 5],
			[ⵠⵠ.ⲆΔᐃⵠⲆ, 2],
			[ⵠⵠ.ⲆΔⲆⲆΔ, 2]
		],
		w: 0,
		f: ⲆᐃΔ,
		"Ⲇⵠⵠ": 0,
		e: ⵠΔᐃⵠ,
		id: ⵠΔⲆ.ⵠⲆᐃⵠⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⲆᐃⵠⵠ,
		time: .2,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 2]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⵠΔⲆⲆⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠΔⲆⲆⲆ,
		time: 1 / ⲆᐃⲆΔ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, ⲆᐃⲆⵠᐃ]
		],
		w: 1,
		f: ⵠⵠⲆⵠ,
		"Ⲇⵠⵠ": ᐃᐃᐃ,
		e: ⵠⲆΔ,
		id: ⵠΔⲆ.ΔⵠⵠⲆΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⵠⵠⲆΔ,
		time: ΔᐃⵠⲆ / ΔⲆⲆⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ΔⵠⵠⲆΔ, 1],
			[ⵠⵠ.ⵠⵠΔΔ, 17]
		],
		w: ΔⵠⲆⲆ,
		f: ⵠᐃⲆⲆ,
		"Ⲇⵠⵠ": ⵠᐃⲆⲆ,
		e: 0,
		id: ⵠΔⲆ.ΔᐃΔⵠⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔᐃΔⵠⵠ,
		time: ΔᐃΔⲆ / ΔΔᐃᐃⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ΔᐃΔⵠⵠ, ΔⵠΔ],
			[ⵠⵠ.ᐃΔᐃⲆ, 14]
		],
		w: Ⲇⵠᐃ,
		f: ᐃᐃᐃ,
		"Ⲇⵠⵠ": ⲆⵠⲆⲆ,
		e: ⵠⲆⵠⵠ,
		id: ⵠΔⲆ.ᐃᐃᐃᐃᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃᐃᐃᐃᐃ,
		time: ⵠⲆΔⲆ / ⲆⵠΔΔ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃᐃᐃᐃᐃ, ᐃᐃΔ],
			[ⵠⵠ.ⲆᐃⲆᐃ, ⲆΔⲆΔⵠ]
		],
		w: ⵠΔᐃ,
		f: 0,
		"Ⲇⵠⵠ": ⵠᐃⲆ,
		e: Δⵠⵠⵠ,
		id: ⵠΔⲆ.ΔⲆΔᐃⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⲆΔᐃⵠ,
		time: Δᐃⵠⵠ / 5,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ΔⲆΔᐃⵠ, 1],
			[ⵠⵠ.ⲆΔΔᐃ, ⲆᐃⲆΔⵠ]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⵠⵠⲆⵠ,
		id: ⵠΔⲆ.ᐃⲆⲆΔⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⲆⲆΔⲆ,
		time: ⵠΔᐃ / ΔΔⲆⲆⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃⲆⲆΔⲆ, 1],
			[ⵠⵠ.ⲆᐃⲆⲆ, ᐃΔΔⲆⵠ]
		],
		w: 1,
		f: ⵠΔᐃⵠ,
		"Ⲇⵠⵠ": 0,
		e: ⵠⲆΔ,
		id: ⵠΔⲆ.ᐃⲆⵠⲆⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⲆⵠⲆⲆ,
		time: 1 / ⲆⲆᐃᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 30]
		],
		w: Δⵠᐃ,
		f: ⵠΔᐃⵠ,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ᐃΔⲆⵠⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃΔⲆⵠⲆ,
		time: .125,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃΔⲆⵠⲆ, 1],
			[ⵠⵠ.ⵠⵠΔΔ, 27]
		],
		w: ΔᐃⲆⲆ,
		f: 0,
		"Ⲇⵠⵠ": ⵠⵠⵠ,
		e: Ⲇᐃⵠ,
		id: ⵠΔⲆ.ⵠⲆⲆᐃⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⲆⲆᐃⵠ,
		time: ⵠΔᐃ / 8,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ⵠⲆⲆᐃⵠ, 1],
			[ⵠⵠ.ᐃΔᐃⲆ, 24]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: Δⵠⵠⵠ,
		id: ⵠΔⲆ.Δⵠᐃⵠⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.Δⵠᐃⵠⵠ,
		time: 1 / ⵠᐃⵠΔⲆ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.Δⵠᐃⵠⵠ, 1],
			[ⵠⵠ.ⲆᐃⲆᐃ, 21]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ᐃᐃᐃ,
		id: ⵠΔⲆ.ⲆⲆⲆⲆⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⲆⲆⲆⵠ,
		time: ΔᐃⲆⲆ / 8,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⲆⲆⲆⵠ, 1],
			[ⵠⵠ.ⲆΔΔᐃ, 18]
		],
		w: 1,
		f: ⲆⵠⲆⲆ,
		"Ⲇⵠⵠ": Δⵠⵠⵠ,
		e: ⵠⲆᐃ,
		id: ⵠΔⲆ.ᐃⵠⵠᐃΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⵠⵠᐃΔ,
		time: .125,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃⵠⵠᐃΔ, 1],
			[ⵠⵠ.ⲆᐃⲆⲆ, 15]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": Δⵠⵠⵠ,
		e: 0,
		id: ⵠΔⲆ.ⵠⲆΔⲆⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⲆΔⲆⵠ,
		time: ΔᐃⵠⲆ / Δᐃᐃⵠⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ΔⵠⵠⲆΔ, Δⵠᐃ],
			[ⵠⵠ.ⲆⵠᐃΔ, 40],
			[ⵠⵠ.ⵠⵠΔΔ, 30]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": ⵠⲆΔ,
		e: 0,
		id: ⵠΔⲆ.ⲆⲆᐃⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⲆᐃⵠΔ,
		time: ΔᐃⲆⲆ / 20,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ΔᐃΔⵠⵠ, Δᐃⵠⵠ],
			[ⵠⵠ.ⵠⵠΔΔ, 70]
		],
		w: ⵠΔᐃ,
		f: 0,
		"Ⲇⵠⵠ": ⵠⵠⵠ,
		e: ⵠᐃⲆⲆ,
		id: ⵠΔⲆ.ᐃⵠⲆΔⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⵠⲆΔⵠ,
		time: ΔᐃⲆⲆ / ⲆᐃⲆⵠᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃᐃᐃᐃᐃ, ⵠΔᐃ],
			[ⵠⵠ.ᐃΔᐃⲆ, 40],
			[ⵠⵠ.ⵠⵠΔΔ, 30]
		],
		w: 1,
		f: Δⵠⵠⵠ,
		"Ⲇⵠⵠ": ⵠΔᐃⵠ,
		e: 0,
		id: ⵠΔⲆ.ⵠⵠⵠᐃΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⵠⵠᐃΔ,
		time: Ⲇⵠᐃ / ⲆᐃⲆⵠᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ΔⲆΔᐃⵠ, ᐃᐃΔ],
			[ⵠⵠ.ⲆᐃⲆᐃ, 40],
			[ⵠⵠ.ⵠⵠΔΔ, 30]
		],
		w: ⲆᐃΔ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⵠΔΔⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠΔΔⵠΔ,
		time: 1 / ΔΔⲆΔⲆᐃⲆ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃⲆⲆΔⲆ, 1],
			[ⵠⵠ.ⲆΔΔᐃ, 40],
			[ⵠⵠ.ⵠⵠΔΔ, 30]
		],
		w: 1,
		f: ΔΔᐃ,
		"Ⲇⵠⵠ": 0,
		e: ⵠᐃⲆⲆ,
		id: ⵠΔⲆ.ⲆⲆⲆⵠⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⲆⲆⵠⲆ,
		time: ᐃᐃΔ / 20,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃⲆⵠⲆⲆ, Δᐃⵠⵠ],
			[ⵠⵠ.ⲆᐃⲆⲆ, 40],
			[ⵠⵠ.ᐃΔᐃⲆ, 30]
		],
		w: Δᐃⵠⵠ,
		f: ⵠⵠⵠ,
		"Ⲇⵠⵠ": ⵠⲆⵠⵠ,
		e: 0,
		id: ⵠΔⲆ.ΔΔⵠⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔΔⵠⵠΔ,
		time: 1 / 20,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃΔⲆⵠⲆ, ΔᐃⲆⲆ],
			[ⵠⵠ.ⲆⵠᐃΔ, 80],
			[ⵠⵠ.ⵠⵠΔΔ, 60]
		],
		w: 1,
		f: ⵠⲆΔ,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⲆΔᐃΔᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆΔᐃΔᐃ,
		time: 1 / ΔΔᐃΔᐃΔΔ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ⵠⲆⲆᐃⵠ, ΔⵠⲆⲆ],
			[ⵠⵠ.ⵠⵠΔΔ, 140]
		],
		w: Δᐃⵠⵠ,
		f: 0,
		"Ⲇⵠⵠ": ⵠⲆᐃ,
		e: Ⲇᐃⵠ,
		id: ⵠΔⲆ.ⲆΔΔⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆΔΔⵠΔ,
		time: 1 / ⲆᐃⲆⲆⲆⲆⲆ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.Δⵠᐃⵠⵠ, ΔⵠⲆⲆ],
			[ⵠⵠ.ᐃΔᐃⲆ, 80],
			[ⵠⵠ.ⵠⵠΔΔ, 60]
		],
		w: ⵠⲆⲆ,
		f: ⵠⵠⲆⵠ,
		"Ⲇⵠⵠ": ⵠᐃⲆⲆ,
		e: 0,
		id: ⵠΔⲆ.ⵠⵠΔⲆΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⵠΔⲆΔ,
		time: 1 / ᐃⲆΔⲆⲆΔᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⲆⲆⲆⵠ, ΔⵠⲆⲆ],
			[ⵠⵠ.ⲆᐃⲆᐃ, 80],
			[ⵠⵠ.ⵠⵠΔΔ, 60]
		],
		w: ΔᐃⲆⲆ,
		f: 0,
		"Ⲇⵠⵠ": ⲆⲆⵠⲆ,
		e: ⲆⵠⲆⲆ,
		id: ⵠΔⲆ.ⲆᐃⵠΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆᐃⵠΔΔ,
		time: ᐃⲆΔ / ⲆΔⲆᐃᐃⵠⲆ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃⵠⵠᐃΔ, ⲆᐃΔ],
			[ⵠⵠ.ⲆΔΔᐃ, 80],
			[ⵠⵠ.ⵠⵠΔΔ, 60]
		],
		w: 1,
		f: ΔΔᐃ,
		"Ⲇⵠⵠ": 0,
		e: ⲆⵠⲆⲆ,
		id: ⵠΔⲆ.ⵠⵠᐃᐃΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⵠᐃᐃΔ,
		time: 1 / 20,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ⵠⲆΔⲆⵠ, Δⵠᐃ],
			[ⵠⵠ.ⲆᐃⲆⲆ, 80],
			[ⵠⵠ.ᐃΔᐃⲆ, 60]
		],
		w: ᐃⲆΔ,
		f: ⲆⵠⲆⲆ,
		"Ⲇⵠⵠ": ⵠⲆᐃ,
		e: 0,
		id: ⵠΔⲆ.ⲆⵠΔⵠⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⵠΔⵠⵠ,
		time: ⵠⲆⲆ / 20,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 25],
			[ⵠⵠ.ᐃΔᐃⲆ, ⵠⵠⵠᐃ]
		],
		w: 1,
		f: ⲆⵠⲆⲆ,
		"Ⲇⵠⵠ": ⵠᐃⲆⲆ,
		e: 0,
		id: ⵠΔⲆ.ᐃⵠᐃⲆΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⵠᐃⲆΔ,
		time: .2,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⵠⵠⲆ, 1],
			[ⵠⵠ.ΔᐃⲆᐃⵠ, ⲆᐃΔ],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, ᐃᐃᐃⵠ]
		],
		w: Ⲇⵠᐃ,
		f: 0,
		"Ⲇⵠⵠ": ⵠⵠⲆⵠ,
		e: ⲆⲆⵠⲆ,
		id: ⵠΔⲆ.ⲆⵠᐃΔⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⵠᐃΔⵠ,
		time: ⵠⲆⲆ / 5,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⵠⵠⲆ, ΔΔⲆⲆⵠ],
			[ⵠⵠ.ⲆⲆᐃᐃⲆ, 20],
			[ⵠⵠ.ᐃᐃᐃⲆᐃ, 5],
			[ⵠⵠ.ΔᐃⲆᐃⵠ, 5]
		],
		w: 1,
		f: ⵠΔᐃⵠ,
		"Ⲇⵠⵠ": 0,
		e: ⵠⵠⲆⵠ,
		id: ⵠΔⲆ.ΔⲆⲆⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⲆⲆⵠΔ,
		time: .03333333333333333,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ΔⲆⲆⲆⲆᐃⲆ, 1],
			[ⵠⵠ.ᐃⲆᐃΔⵠ, 8],
			[ⵠⵠ.ΔᐃᐃΔⵠ, 8],
			[ⵠⵠ.ⲆⲆᐃᐃⲆ, 8],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 6]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: Ⲇᐃⵠ,
		id: ⵠΔⲆ.ᐃΔΔΔⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃΔΔΔⲆ,
		time: 1 / 60,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ΔᐃⲆᐃⵠ, 1],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, ⵠⵠⵠᐃ]
		],
		w: 1,
		f: ᐃᐃⲆ,
		"Ⲇⵠⵠ": 0,
		e: ⵠΔᐃⵠ,
		id: ⵠΔⲆ.ⵠⲆΔΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⲆΔΔΔ,
		time: 1 / ᐃⵠᐃⲆ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⵠⲆΔΔΔ, Ⲇⵠᐃ],
			[ⵠⵠ.ΔΔⲆⲆⲆ, 5],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 4]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": ᐃᐃⲆ,
		e: ⵠⵠⵠ,
		id: ⵠΔⲆ.ⵠⲆⲆΔⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⲆⲆΔⵠ,
		time: ⵠⲆΔⲆ / ⲆᐃⲆᐃⲆ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⵠⲆⲆΔⵠ, ⲆᐃΔ],
			[ⵠⵠ.ΔⲆⵠⲆⲆ, 5],
			[ⵠⵠ.ᐃᐃᐃⲆᐃ, ΔⵠⵠⲆ]
		],
		w: ⵠΔᐃ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⲆⲆⵠⲆ,
		id: ⵠΔⲆ.ⵠⲆⵠⲆⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⲆⵠⲆⲆ,
		time: ⲆᐃΔ / 30,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⵠⲆⵠⲆⲆ, ΔᐃⲆⲆ],
			[ⵠⵠ.ΔⲆⵠⲆⲆ, 5],
			[ⵠⵠ.ΔᐃⵠⲆⲆ, 10],
			[ⵠⵠ.ᐃᐃᐃⲆᐃ, 4]
		],
		w: 1,
		f: ⵠⲆⵠⵠ,
		"Ⲇⵠⵠ": ⵠΔᐃⵠ,
		e: 0,
		id: ⵠΔⲆ.ΔⵠⲆΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⵠⲆΔΔ,
		time: ΔⵠΔ / 50,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 50]
		],
		w: 0,
		f: 0,
		"Ⲇⵠⵠ": ΔⲆⲆ,
		e: Δⵠⵠⵠ,
		id: ⵠΔⲆ.ⲆⵠⲆΔⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⵠⲆΔⵠ,
		time: ⲆΔΔΔ / 5,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⵠⵠΔΔ, 75],
			[ⵠⵠ.ⲆⵠᐃΔ, 75],
			[ⵠⵠ.ⲆⵠⲆΔⵠ, 1]
		],
		w: ⵠⲆⲆ,
		f: 0,
		"Ⲇⵠⵠ": ⵠⲆΔ,
		e: 0,
		id: ⵠΔⲆ.ᐃΔΔΔᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃΔΔΔᐃ,
		time: .1,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⵠⵠΔΔ, 90],
			[ⵠⵠ.ⲆⵠᐃΔ, 90],
			[ⵠⵠ.ᐃΔᐃⲆ, 90],
			[ⵠⵠ.ᐃΔΔΔᐃ, Ⲇⵠᐃ]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": ⵠᐃⲆ,
		e: 0,
		id: ⵠΔⲆ.ΔᐃⵠⵠⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔᐃⵠⵠⲆ,
		time: ᐃᐃΔ / ⲆᐃΔᐃⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⵠⵠΔΔ, ΔᐃⲆΔⵠΔᐃ],
			[ⵠⵠ.ᐃΔᐃⲆ, 100],
			[ⵠⵠ.ⲆᐃⲆᐃ, ⵠᐃⵠΔⵠⵠᐃ],
			[ⵠⵠ.ΔᐃⵠⵠⲆ, Ⲇⵠᐃ]
		],
		w: Ⲇⵠᐃ,
		f: 0,
		"Ⲇⵠⵠ": ⵠⲆΔ,
		e: 0,
		id: ⵠΔⲆ.ⲆⲆᐃⵠⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⲆᐃⵠⲆ,
		time: ⲆᐃΔ / 30,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆΔΔᐃ, 80],
			[ⵠⵠ.ᐃΔᐃⲆ, 150],
			[ⵠⵠ.ⲆᐃⲆᐃ, 120],
			[ⵠⵠ.ⲆⲆᐃⵠⲆ, ΔⵠⲆⲆ]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": ⲆⵠⲆⲆ,
		e: 0,
		id: ⵠΔⲆ.ΔΔΔⲆΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔΔΔⲆΔ,
		time: ΔⵠΔ / 60,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆⲆ, 80],
			[ⵠⵠ.ⲆᐃⲆᐃ, 150],
			[ⵠⵠ.ⲆΔΔᐃ, 120],
			[ⵠⵠ.ΔΔΔⲆΔ, ⵠⲆⲆ]
		],
		w: 1,
		f: 1,
		"Ⲇⵠⵠ": Δⵠⵠⵠ,
		e: ⵠΔᐃⵠ,
		id: ⵠΔⲆ.ΔⲆΔΔⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⲆΔΔⲆ,
		time: ΔⵠΔ / 90,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.Δⵠⵠⵠᐃ, 2],
			[ⵠⵠ.ⲆᐃⲆᐃ, 40],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, ᐃⲆᐃⲆ]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⲆⲆⵠⲆ,
		id: ⵠΔⲆ.ᐃⵠⲆⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⵠⲆⵠΔ,
		time: 1 / 20,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃⵠⲆⵠΔ, 1],
			[ⵠⵠ.ᐃΔᐃⲆ, 80],
			[ⵠⵠ.ⵠⵠⵠᐃᐃ, 1],
			[ⵠⵠ.ⲆΔΔᐃ, 20]
		],
		w: ΔᐃΔⲆ,
		f: ᐃᐃⲆ,
		"Ⲇⵠⵠ": ⲆⲆⵠⲆ,
		e: 0,
		id: ⵠΔⲆ.ᐃΔⵠⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃΔⵠⵠΔ,
		time: .011111111111111112,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ΔᐃⵠΔᐃ, ΔⵠΔᐃ],
			[ⵠⵠ.ⲆᐃⲆᐃ, 50],
			[ⵠⵠ.ᐃᐃᐃⲆᐃ, 5]
		],
		w: Δⵠᐃ,
		f: ⵠⲆΔⲆ,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ᐃᐃⵠⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃᐃⵠⲆᐃ,
		time: 1 / ⲆᐃⲆⲆⲆⲆⲆ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃᐃⵠⲆᐃ, 1],
			[ⵠⵠ.ΔᐃⵠΔᐃ, ⵠⲆⵠᐃⵠ],
			[ⵠⵠ.ⲆΔΔᐃ, 50]
		],
		w: ⲆᐃΔ,
		f: ⵠⲆⲆ,
		"Ⲇⵠⵠ": 0,
		e: Δⵠⵠⵠ,
		id: ⵠΔⲆ.ΔⲆΔΔⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⲆΔΔⵠ,
		time: ⵠⲆⲆ / 60,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ΔⲆΔΔⵠ, ⵠⲆΔⲆ],
			[ⵠⵠ.ΔᐃⵠΔᐃ, 15],
			[ⵠⵠ.ⲆΔΔᐃ, 50],
			[ⵠⵠ.ⲆᐃⲆⲆ, 50]
		],
		w: ΔᐃⲆⲆ,
		f: ΔᐃⵠⲆ,
		"Ⲇⵠⵠ": 0,
		e: ᐃᐃⲆ,
		id: ⵠΔⲆ.ⲆΔⵠⵠⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆΔⵠⵠⲆ,
		time: ΔᐃΔⲆ / 90,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 4],
			[ⵠⵠ.ΔΔⲆⲆΔ, ᐃᐃⲆⲆ]
		],
		w: 1,
		f: ⵠᐃⲆⲆ,
		"Ⲇⵠⵠ": 0,
		e: ⵠᐃⲆⲆ,
		id: ⵠΔⲆ.ᐃⲆΔΔⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⲆΔΔⵠ,
		time: ⵠⲆⲆ / 15,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃⲆΔΔⵠ, ⵠΔᐃ],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, ⵠⲆⲆᐃᐃ],
			[ⵠⵠ.ΔΔⲆⲆΔ, 4],
			[ⵠⵠ.ΔᐃᐃΔⵠ, 12],
			[ⵠⵠ.ⲆⲆᐃᐃⲆ, ᐃᐃⵠΔ]
		],
		w: ΔᐃⲆⲆ,
		f: 0,
		"Ⲇⵠⵠ": ᐃᐃⲆ,
		e: 0,
		id: ⵠΔⲆ.ᐃΔⲆΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃΔⲆΔΔ,
		time: ⲆᐃΔ / 150,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 6],
			[ⵠⵠ.ΔΔⲆⲆⲆ, ΔⵠΔᐃ]
		],
		w: 1,
		f: Ⲇᐃⵠ,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⵠᐃⵠⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠᐃⵠⲆ,
		time: ⵠⲆΔⲆ / 15,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 20]
		],
		w: 0,
		f: 1,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⲆᐃⵠⵠⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆᐃⵠⵠⲆ,
		time: Δᐃⵠⵠ / 3,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆᐃ, 1],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 1]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": ⲆⲆⵠⲆ,
		e: ⲆⲆⵠⲆ,
		id: ⵠΔⲆ.ᐃᐃᐃⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃᐃᐃⲆᐃ,
		time: 1 / Δⵠⵠᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃΔᐃⲆ, ⲆΔⵠⵠΔ]
		],
		w: ΔᐃⵠⲆ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⲆⲆⵠⲆΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⲆⵠⲆΔ,
		time: .2,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃΔᐃⲆ, 250]
		],
		w: 1,
		f: ⵠΔᐃⵠ,
		"Ⲇⵠⵠ": ⵠᐃⲆⲆ,
		e: ⵠᐃⲆⲆ,
		id: ⵠΔⲆ.ᐃⵠΔⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⵠΔⲆᐃ,
		time: .016666666666666666,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 50]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ΔΔᐃ,
		id: ⵠΔⲆ.ᐃᐃⲆΔⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃᐃⲆΔⲆ,
		time: .1,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, ⵠΔᐃⵠⲆ]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": ⵠⵠⵠ,
		e: ΔΔᐃ,
		id: ⵠΔⲆ.ΔⵠᐃⲆⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⵠᐃⲆⲆ,
		time: 1 / ⵠⵠᐃᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 30]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⲆⲆⵠⲆ,
		id: ⵠΔⲆ.ⲆᐃΔⵠᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆᐃΔⵠᐃ,
		time: .2,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 120]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": ⲆⲆⵠⲆ,
		e: 0,
		id: ⵠΔⲆ.ⲆⲆᐃᐃΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⲆᐃᐃΔ,
		time: ⵠⲆⲆ / ᐃⵠⵠᐃᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, ΔⲆΔⲆΔ],
			[ⵠⵠ.ⵠⵠΔᐃⵠ, ⵠⲆⵠⲆᐃ]
		],
		w: ΔⵠΔ,
		f: ΔΔᐃ,
		"Ⲇⵠⵠ": Δⵠⵠⵠ,
		e: ⲆⵠⲆⲆ,
		id: ⵠΔⲆ.ΔⵠᐃΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⵠᐃΔΔ,
		time: ᐃⲆΔ / 5,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⵠᐃᐃΔⵠ, 25]
		],
		w: Δⵠᐃ,
		f: 1,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⲆᐃΔᐃᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆᐃΔᐃᐃ,
		time: .2,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃΔᐃᐃ, 1]
		],
		w: 0,
		f: 0,
		"Ⲇⵠⵠ": ⵠⲆⲆ,
		e: ᐃᐃᐃ,
		id: ⵠΔⲆ.ⲆⵠⲆⲆΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⵠⲆⲆΔ,
		time: ΔⵠΔ / ⵠⲆⲆᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆΔⲆⲆΔ, 20],
			[ⵠⵠ.ⲆᐃΔᐃᐃ, 1]
		],
		w: ᐃᐃᐃ,
		f: ᐃⲆΔ,
		"Ⲇⵠⵠ": ⵠⲆᐃ,
		e: ⵠⲆⵠⵠ,
		id: ⵠΔⲆ.ᐃΔⵠⵠΔΔⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⵠⲆⲆΔ,
		time: ΔᐃΔⲆ / 10,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃΔᐃᐃ, ⵠⲆΔⲆ]
		],
		w: 0,
		f: ⵠⲆⵠⵠ,
		"Ⲇⵠⵠ": 0,
		e: 1,
		id: ⵠΔⲆ.ΔⲆⵠⲆⵠⲆⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⵠⲆⲆΔ,
		time: 1 / ᐃⲆᐃΔ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 60],
			[ⵠⵠ.ⵠⵠΔΔ, ⲆᐃⲆⲆⲆⲆⲆ],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 2]
		],
		w: ᐃᐃΔ,
		f: ᐃᐃⲆ,
		"Ⲇⵠⵠ": ⵠⲆᐃ,
		e: 0,
		id: ⵠΔⲆ.ᐃⵠΔᐃⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⵠΔᐃⲆ,
		time: ⵠⲆⲆ / ΔΔΔᐃⲆ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆᐃ, 40],
			[ⵠⵠ.ⵠⵠΔΔ, 45]
		],
		w: ΔᐃⲆⲆ,
		f: 0,
		"Ⲇⵠⵠ": ⵠⵠⵠ,
		e: ⵠᐃⲆ,
		id: ⵠΔⲆ.ⲆⵠⲆᐃᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⵠⲆᐃᐃ,
		time: 1 / ⲆΔⲆᐃᐃⵠⲆ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠⲆᐃᐃ, ΔᐃⲆⲆ],
			[ⵠⵠ.ᐃᐃⲆᐃⲆ, 40],
			[ⵠⵠ.ⵠᐃⲆᐃⵠ, 1]
		],
		w: 1,
		f: ⵠⲆⲆ,
		"Ⲇⵠⵠ": ⵠΔᐃ,
		e: ⵠⵠⲆⵠ,
		id: ⵠΔⲆ.ᐃᐃⲆᐃΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃᐃⲆᐃΔ,
		time: ᐃᐃΔ / 200,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 50],
			[ⵠⵠ.ⵠⵠΔΔ, ᐃΔΔⲆΔⵠΔ]
		],
		w: ᐃⲆΔ,
		f: ⵠⲆΔ,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⵠΔᐃΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠΔᐃΔΔ,
		time: .011111111111111112,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⵠⵠΔΔ, 60],
			[ⵠⵠ.ᐃΔᐃⲆ, 120]
		],
		w: 1,
		f: ⲆⵠⲆⲆ,
		"Ⲇⵠⵠ": ᐃᐃⲆ,
		e: ΔⲆⲆ,
		id: ⵠΔⲆ.ΔⲆⵠΔⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⲆⵠΔⲆ,
		time: ΔⵠⲆⲆ / 90,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃΔᐃⲆ, 70],
			[ⵠⵠ.ⲆᐃⲆᐃ, 140]
		],
		w: ΔᐃΔⲆ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ᐃΔⲆᐃΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃΔⲆᐃΔ,
		time: ΔⵠⲆⲆ / 90,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆᐃ, 80],
			[ⵠⵠ.ⲆΔΔᐃ, 160]
		],
		w: Δᐃⵠⵠ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⵠⵠᐃΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⵠᐃΔΔ,
		time: 1 / 90,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆΔΔᐃ, 90],
			[ⵠⵠ.ⲆᐃⲆⲆ, 180]
		],
		w: Δⵠᐃ,
		f: ⵠⵠⲆⵠ,
		"Ⲇⵠⵠ": ⲆⵠⲆⲆ,
		e: 0,
		id: ⵠΔⲆ.ⵠⲆⲆΔⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⲆⲆΔⲆ,
		time: ΔⵠⲆⲆ / 90,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⵠⵠΔΔ, 70]
		],
		w: ΔⵠⲆⲆ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ΔΔᐃⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔΔᐃⲆᐃ,
		time: 1 / ⵠⵠΔⲆᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⵠⵠΔΔ, 70],
			[ⵠⵠ.ⲆⵠᐃΔ, 50]
		],
		w: ⵠⲆΔⲆ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⵠⲆⵠⵠ,
		id: ⵠΔⲆ.ⵠⵠΔⵠᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⵠΔⵠᐃ,
		time: 1 / ΔⵠⵠᐃⲆ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 40],
			[ⵠⵠ.ⵠⵠΔΔ, 40]
		],
		w: ⵠⲆⲆ,
		f: ⲆⵠⲆⲆ,
		"Ⲇⵠⵠ": ᐃᐃᐃ,
		e: 0,
		id: ⵠΔⲆ.ΔᐃΔⵠᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔᐃΔⵠᐃ,
		time: 1 / ⵠΔΔΔⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⲆᐃΔⵠ, ⵠⲆΔⲆ],
			[ⵠⵠ.ᐃⲆΔⲆⵠ, 1]
		],
		w: 0,
		f: ᐃᐃᐃ,
		"Ⲇⵠⵠ": 0,
		e: ⵠΔᐃⵠ,
		id: ⵠΔⲆ.ⵠᐃⲆⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠᐃⲆⵠΔ,
		time: 1 / ΔⲆΔⵠ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ
	}, {
		r: [
			[ⵠⵠ.ᐃᐃᐃⲆᐃ, 30],
			[ⵠⵠ.ⵠⵠᐃⲆΔ, ᐃᐃΔ],
			[ⵠⵠ.ⲆΔΔᐃ, 150],
			[ⵠⵠ.ΔⵠᐃᐃⲆ, 3]
		],
		w: Δᐃⵠⵠ,
		f: ⵠⲆΔⲆ,
		"Ⲇⵠⵠ": ⲆᐃΔ,
		e: ᐃᐃⲆ,
		id: ⵠΔⲆ.ⵠⵠΔⵠⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⵠΔⵠⵠ,
		time: ᐃᐃΔ / 120,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⵠⵠΔⵠⵠ, ΔᐃΔⲆ],
			[ⵠⵠ.ⵠⵠⵠⲆᐃ, ᐃᐃΔ],
			[ⵠⵠ.ⲆᐃⲆⲆ, 150],
			[ⵠⵠ.ⲆΔⲆⵠⲆ, ᐃᐃᐃⵠ]
		],
		w: 1,
		f: 1,
		"Ⲇⵠⵠ": ΔᐃΔⲆ,
		e: 0,
		id: ⵠΔⲆ.ᐃⲆⲆⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⲆⲆⵠΔ,
		time: ⵠΔᐃ / 180,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ΔᐃⵠⵠⲆ, ΔⵠΔ],
			[ⵠⵠ.ΔᐃᐃΔⲆ, 10],
			[ⵠⵠ.ΔⵠᐃΔᐃ, ⵠⲆⵠᐃⵠ],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, ⲆⲆⵠⲆⵠ]
		],
		w: ΔᐃⲆⲆ,
		f: 0,
		"Ⲇⵠⵠ": ⵠΔᐃⵠ,
		e: 0,
		id: ⵠΔⲆ.ΔⲆⲆᐃⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⲆⲆᐃⲆ,
		time: ᐃᐃΔ / 60,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃᐃᐃⲆᐃ, 20],
			[ⵠⵠ.ᐃⵠⵠⵠⵠ, ΔᐃⵠⲆ],
			[ⵠⵠ.ⲆΔΔᐃ, 150],
			[ⵠⵠ.ΔⵠᐃᐃⲆ, ΔⲆΔⵠ]
		],
		w: 1,
		f: 1,
		"Ⲇⵠⵠ": 1,
		e: 0,
		id: ⵠΔⲆ.ΔᐃⵠΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔᐃⵠΔΔ,
		time: ΔᐃⵠⲆ / 120,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ΔᐃⵠΔΔ, 1],
			[ⵠⵠ.ⲆⲆΔΔΔ, 1],
			[ⵠⵠ.ⲆᐃⲆⲆ, 150],
			[ⵠⵠ.ⲆΔⲆⵠⲆ, ᐃⲆᐃᐃ]
		],
		w: ⲆΔΔΔ,
		f: ⲆΔΔΔ,
		"Ⲇⵠⵠ": 1,
		e: ⵠᐃⲆ,
		id: ⵠΔⲆ.ⵠΔⲆⵠᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠΔⲆⵠᐃ,
		time: .005555555555555556,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 100],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 4]
		],
		w: 1,
		f: ⵠⲆΔ,
		"Ⲇⵠⵠ": ΔⲆⲆ,
		e: ⵠⲆᐃ,
		id: ⵠΔⲆ.ⵠᐃΔⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠᐃΔⲆᐃ,
		time: ⲆᐃΔ / ⲆΔⲆᐃᐃⵠⲆ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 30]
		],
		w: Δⵠᐃ,
		f: ᐃᐃⲆ,
		"Ⲇⵠⵠ": ⲆⵠⲆⲆ,
		e: ⵠⵠⲆⵠ,
		id: ⵠΔⲆ.ᐃⵠⲆΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⵠⲆΔΔ,
		time: ΔᐃⲆⲆ / 5,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⵠⵠΔΔ, 200],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 8],
			[ⵠⵠ.ⲆⲆᐃᐃⲆ, 4],
			[ⵠⵠ.ⵠᐃΔⲆᐃ, ⲆᐃΔ]
		],
		w: ΔᐃⲆⲆ,
		f: Ⲇᐃⵠ,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⲆⲆΔᐃΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⲆΔᐃΔ,
		time: ⵠⲆⲆ / 25,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⵠⵠΔΔ, ⵠΔᐃⲆⵠ],
			[ⵠⵠ.ᐃⲆᐃΔⵠ, ⵠⲆⲆ]
		],
		w: 1,
		f: ΔΔᐃ,
		"Ⲇⵠⵠ": ⵠᐃⲆⲆ,
		e: ΔⲆⲆ,
		id: ⵠΔⲆ.ⲆⲆᐃⲆΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⲆᐃⲆΔ,
		time: ⲆΔΔΔ / 5,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ᐃΔᐃⲆ, 200],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 12],
			[ⵠⵠ.ᐃⲆᐃΔⵠ, 4],
			[ⵠⵠ.ⲆⲆᐃᐃⲆ, 4],
			[ⵠⵠ.ⲆⲆΔᐃΔ, ⵠⲆΔⲆ]
		],
		w: ⵠΔᐃ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⵠⵠⲆⵠ,
		id: ⵠΔⲆ.ΔᐃⵠᐃΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔᐃⵠᐃΔ,
		time: ΔᐃΔⲆ / 30,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ᐃΔᐃⲆ, ⲆⵠⲆΔⲆ],
			[ⵠⵠ.ⲆⲆᐃᐃⲆ, 1]
		],
		w: ⵠΔᐃ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ᐃⲆΔΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⲆΔΔΔ,
		time: ΔⵠⲆⲆ / 10,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆᐃ, 200],
			[ⵠⵠ.ᐃᐃᐃⲆᐃ, 10],
			[ⵠⵠ.ᐃⲆᐃΔⵠ, 8],
			[ⵠⵠ.ⲆⲆᐃᐃⲆ, Δⵠᐃᐃⵠ],
			[ⵠⵠ.ΔᐃⵠᐃΔ, 1]
		],
		w: ⵠⲆⲆ,
		f: 0,
		"Ⲇⵠⵠ": ΔⲆⲆ,
		e: 0,
		id: ⵠΔⲆ.ⲆΔⵠⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆΔⵠⲆᐃ,
		time: ΔᐃⲆⲆ / 35,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆᐃ, 10],
			[ⵠⵠ.ⲆⲆᐃᐃⲆ, 1]
		],
		w: 1,
		f: ᐃᐃᐃ,
		"Ⲇⵠⵠ": 0,
		e: ΔⲆⲆ,
		id: ⵠΔⲆ.ⵠⵠᐃⲆⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⵠᐃⲆⲆ,
		time: 1 / ⵠⵠΔⲆᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆΔΔᐃ, 200],
			[ⵠⵠ.ᐃᐃᐃⲆᐃ, ⵠΔΔⲆΔ],
			[ⵠⵠ.ⲆⲆᐃᐃⲆ, 8],
			[ⵠⵠ.ΔᐃᐃΔⵠ, Δᐃᐃⵠⵠ],
			[ⵠⵠ.ⲆΔⵠⲆᐃ, ⵠΔᐃ]
		],
		w: ΔᐃⲆⲆ,
		f: ⵠⲆᐃ,
		"Ⲇⵠⵠ": ⵠⲆᐃ,
		e: 0,
		id: ⵠΔⲆ.ΔⲆᐃᐃᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⲆᐃᐃᐃ,
		time: .025,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆΔΔᐃ, ΔⲆⲆΔΔ],
			[ⵠⵠ.ΔᐃᐃΔⵠ, ᐃᐃΔ]
		],
		w: 1,
		f: ⵠᐃⲆⲆ,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⵠᐃⵠⲆⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠᐃⵠⲆⵠ,
		time: Δᐃⵠⵠ / 15,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆⲆ, 200],
			[ⵠⵠ.ᐃᐃᐃⲆᐃ, ⲆΔⵠΔⵠ],
			[ⵠⵠ.ⵠⵠⵠᐃᐃ, 1],
			[ⵠⵠ.ΔⲆᐃᐃᐃ, 1]
		],
		w: ⲆᐃΔ,
		f: 0,
		"Ⲇⵠⵠ": ᐃᐃⲆ,
		e: ΔⲆⲆ,
		id: ⵠΔⲆ.ⲆᐃΔⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆᐃΔⲆᐃ,
		time: .022222222222222223,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆᐃⲆⲆ, ΔΔⵠᐃⵠ],
			[ⵠⵠ.ΔᐃᐃΔⵠ, ⵠΔᐃ],
			[ⵠⵠ.ΔᐃⵠΔᐃ, ⵠⲆⲆ]
		],
		w: 1,
		f: ᐃᐃⲆ,
		"Ⲇⵠⵠ": ⲆⲆⵠⲆ,
		e: 0,
		id: ⵠΔⲆ.ⵠᐃᐃΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠᐃᐃΔΔ,
		time: 1 / ᐃᐃΔᐃⲆ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ᐃᐃⲆᐃⲆ, 200],
			[ⵠⵠ.ᐃᐃᐃⲆᐃ, ⲆΔⵠⵠΔ],
			[ⵠⵠ.ᐃⵠⵠⵠⵠ, ⵠⲆΔⲆ],
			[ⵠⵠ.ⲆᐃΔⲆᐃ, 1]
		],
		w: 1,
		f: ⲆⵠⲆⲆ,
		"Ⲇⵠⵠ": 0,
		e: ΔⲆⲆ,
		id: ⵠΔⲆ.ΔΔⵠⲆΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔΔⵠⲆΔ,
		time: .02,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ᐃᐃⲆᐃⲆ, 10],
			[ⵠⵠ.ⵠᐃⲆᐃⵠ, ⵠⲆⲆ]
		],
		w: ᐃᐃΔ,
		f: 0,
		"Ⲇⵠⵠ": ⵠΔᐃⵠ,
		e: ⵠⵠⲆⵠ,
		id: ⵠΔⲆ.ⵠⲆⵠⲆΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⲆⵠⲆΔ,
		time: .05,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, ⵠⵠⲆᐃⲆ]
		],
		w: ᐃⲆΔ,
		f: ⵠⵠⵠ,
		"Ⲇⵠⵠ": 0,
		e: ⵠᐃⲆ,
		id: ⵠΔⲆ.ᐃΔⲆᐃⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃΔⲆᐃⵠ,
		time: ⲆᐃΔ / 25,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ᐃΔⲆᐃⵠ, 1],
			[ⵠⵠ.ⵠⵠΔΔ, ᐃⲆᐃⵠΔ],
			[ⵠⵠ.ⲆⵠᐃΔ, 50]
		],
		w: ᐃᐃΔ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⵠΔⲆⲆΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠΔⲆⲆΔ,
		time: ⵠⲆⲆ / 40,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⵠΔⲆⲆΔ, 1],
			[ⵠⵠ.ᐃΔᐃⲆ, 50],
			[ⵠⵠ.ⵠⵠΔΔ, 50],
			[ⵠⵠ.ⲆⵠᐃΔ, 50]
		],
		w: ΔᐃⲆⲆ,
		f: ΔⲆⲆ,
		"Ⲇⵠⵠ": 0,
		e: ᐃᐃⲆ,
		id: ⵠΔⲆ.ᐃⲆⲆⵠⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃⲆⲆⵠⵠ,
		time: Ⲇⵠᐃ / 50,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ᐃⲆⲆⵠⵠ, ΔᐃⵠⲆ],
			[ⵠⵠ.ⲆᐃⲆᐃ, 50],
			[ⵠⵠ.ᐃΔᐃⲆ, 50],
			[ⵠⵠ.ⵠⵠΔΔ, 50]
		],
		w: ᐃⲆΔ,
		f: 0,
		"Ⲇⵠⵠ": ⵠⲆⵠⵠ,
		e: 0,
		id: ⵠΔⲆ.ΔⵠΔⵠⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⵠΔⵠⲆ,
		time: 1 / 70,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ΔⵠΔⵠⲆ, ΔⵠⲆⲆ],
			[ⵠⵠ.ⲆΔΔᐃ, 50],
			[ⵠⵠ.ⲆᐃⲆᐃ, 50],
			[ⵠⵠ.ᐃΔᐃⲆ, 50]
		],
		w: ᐃⲆΔ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⵠᐃΔⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠᐃΔⵠΔ,
		time: .011111111111111112,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⵠᐃΔⵠΔ, 1],
			[ⵠⵠ.ⲆᐃⲆⲆ, 50],
			[ⵠⵠ.ⲆΔΔᐃ, 50],
			[ⵠⵠ.ⲆᐃⲆᐃ, 50]
		],
		w: ΔᐃⵠⲆ,
		f: ⵠᐃⲆ,
		"Ⲇⵠⵠ": Ⲇᐃⵠ,
		e: 0,
		id: ⵠΔⲆ.ⵠᐃΔΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠᐃΔΔΔ,
		time: ⵠⲆⲆ / 120,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠΔΔⲆ, ⲆᐃΔ],
			[ⵠⵠ.ᐃΔᐃⲆ, 200]
		],
		w: 1,
		f: 1,
		"Ⲇⵠⵠ": 1,
		e: 0,
		id: ⵠΔⲆ.ᐃᐃⲆⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃᐃⲆⵠΔ,
		time: .016666666666666666,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ᐃⲆΔⵠΔ, ΔᐃⵠⲆ],
			[ⵠⵠ.ᐃΔᐃⲆ, 200]
		],
		w: 1,
		f: ⵠⲆΔⲆ,
		"Ⲇⵠⵠ": ⵠⲆΔⲆ,
		e: ⵠΔᐃⵠ,
		id: ⵠΔⲆ.ⵠⲆⲆᐃΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⲆⲆᐃΔ,
		time: ΔⵠΔ / 60,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ΔⵠⵠΔᐃ, ΔⵠⲆⲆ],
			[ⵠⵠ.ᐃΔᐃⲆ, 200],
			[ⵠⵠ.ΔⵠᐃᐃⲆ, ⵠΔᐃ]
		],
		w: ΔⵠΔ,
		f: ΔⵠΔ,
		"Ⲇⵠⵠ": ⵠΔᐃ,
		e: ⵠᐃⲆ,
		id: ⵠΔⲆ.ⵠⵠⲆΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⵠⲆΔΔ,
		time: .016666666666666666,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ΔΔⲆⲆⲆ, ᐃⵠᐃΔⲆ],
			[ⵠⵠ.ΔᐃⲆᐃⵠ, ΔⵠⲆᐃᐃ],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, ΔΔΔΔ]
		],
		w: 1,
		f: ΔΔᐃ,
		"Ⲇⵠⵠ": 0,
		e: ⵠⵠⲆⵠ,
		id: ⵠΔⲆ.ⵠΔⲆᐃⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠΔⲆᐃⲆ,
		time: .1,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ΔᐃⲆᐃⵠ, ᐃΔⲆΔ],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, ⲆⵠΔⵠ]
		],
		w: ΔᐃⲆⲆ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ΔΔᐃ,
		id: ⵠΔⲆ.ΔΔᐃΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔΔᐃΔΔ,
		time: .1,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⵠΔⲆᐃⲆ, ΔᐃΔⲆ],
			[ⵠⵠ.ΔᐃⵠΔⲆ, Δⵠᐃ],
			[ⵠⵠ.ΔⲆⵠⲆⲆ, 15],
			[ⵠⵠ.ᐃᐃᐃⲆᐃ, 5],
			[ⵠⵠ.ⲆⲆᐃᐃⲆ, ⲆΔΔⲆⵠ]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": ⵠⲆᐃ,
		e: 0,
		id: ⵠΔⲆ.ⲆᐃⲆⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆᐃⲆⵠΔ,
		time: Δᐃⵠⵠ / 60,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ΔΔᐃΔΔ, Δⵠᐃ],
			[ⵠⵠ.ᐃΔⲆⲆⲆ, ⲆΔΔΔ],
			[ⵠⵠ.ΔⲆⵠⲆⲆ, ᐃⵠᐃⵠⲆ],
			[ⵠⵠ.ᐃᐃᐃⲆᐃ, ᐃΔΔⲆⵠ],
			[ⵠⵠ.ⲆⲆᐃᐃⲆ, ⲆⵠⲆⵠⵠ]
		],
		w: 1,
		f: ⵠⵠⲆⵠ,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⵠⵠΔⲆⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⵠΔⲆⲆ,
		time: .016666666666666666,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆΔⵠⲆⵠ, 1]
		],
		w: ⵠⲆΔ,
		f: ⵠᐃⲆ,
		"Ⲇⵠⵠ": ΔⵠΔ,
		e: ⵠΔᐃⵠ,
		id: ⵠΔⲆ.ΔⵠⲆⲆᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⵠⲆⲆᐃ,
		time: .2,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 20],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 1]
		],
		w: 1,
		f: 0,
		"Ⲇⵠⵠ": Ⲇᐃⵠ,
		e: 0,
		id: ⵠΔⲆ.ⲆΔⵠⲆⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆΔⵠⲆⵠ,
		time: ⵠΔᐃ / 5,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ
	}, {
		r: [
			[ⵠⵠ.ⵠⵠΔΔ, 100],
			[ⵠⵠ.ⵠⵠΔᐃⵠ, 30]
		],
		w: 1,
		f: 1,
		"Ⲇⵠⵠ": 0,
		e: ⵠⲆΔ,
		id: ⵠΔⲆ.ΔᐃΔᐃΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔᐃΔᐃΔ,
		time: .1,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, ᐃΔΔⲆΔ]
		],
		w: 1,
		f: ⵠⵠⲆⵠ,
		"Ⲇⵠⵠ": 0,
		e: ⵠΔᐃⵠ,
		id: ⵠΔⲆ.ΔᐃΔⲆⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔᐃΔⲆⲆ,
		time: ⲆᐃΔ / 5,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 100],
			[ⵠⵠ.ⵠⵠΔΔ, 50],
			[ⵠⵠ.ΔᐃⲆᐃⵠ, ᐃᐃⵠᐃΔ],
			[ⵠⵠ.ΔΔⲆⲆⲆ, ΔⵠΔᐃ],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 6]
		],
		w: ᐃⲆΔ,
		f: ᐃᐃⲆ,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⲆⵠᐃⲆⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⵠᐃⲆⲆ,
		time: 1 / ᐃⲆΔⲆⲆΔᐃ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 250],
			[ⵠⵠ.ᐃᐃᐃⲆᐃ, 10],
			[ⵠⵠ.ΔⲆⵠⲆⲆ, ⲆⲆΔⲆ],
			[ⵠⵠ.Δⵠⵠⵠᐃ, ⲆⵠΔⵠ]
		],
		w: 1,
		f: ⵠⲆΔ,
		"Ⲇⵠⵠ": ΔⲆⲆ,
		e: 0,
		id: ⵠΔⲆ.ⲆᐃᐃⵠⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆᐃᐃⵠⲆ,
		time: ΔⵠΔ / 50,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 250],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 10],
			[ⵠⵠ.ΔⲆⵠⲆⲆ, ΔΔΔⵠ],
			[ⵠⵠ.ⲆⲆᐃᐃⲆ, 8]
		],
		w: ΔᐃΔⲆ,
		f: 0,
		"Ⲇⵠⵠ": ⵠᐃⲆⲆ,
		e: 0,
		id: ⵠΔⲆ.ᐃΔⲆᐃⲆ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃΔⲆᐃⲆ,
		time: ΔⵠⲆⲆ / 50,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, 10],
			[ⵠⵠ.ΔΔⲆⲆⲆ, ⲆΔⵠΔΔ],
			[ⵠⵠ.ΔᐃⲆᐃⵠ, ⵠᐃΔⲆ],
			[ⵠⵠ.ⵠᐃᐃΔⵠ, 50]
		],
		w: 1,
		f: ᐃᐃⲆ,
		"Ⲇⵠⵠ": 0,
		e: ᐃᐃᐃ,
		id: ⵠΔⲆ.ᐃΔⵠΔᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃΔⵠΔᐃ,
		time: Ⲇⵠᐃ / 20,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 250],
			[ⵠⵠ.ⲆⵠⵠᐃⲆ, ΔΔⵠᐃⵠ],
			[ⵠⵠ.ⲆᐃⵠⵠⲆ, ⵠⵠΔⲆᐃ],
			[ⵠⵠ.ᐃⲆᐃΔⵠ, ΔΔᐃⲆⲆ]
		],
		w: ΔⵠⲆⲆ,
		f: ᐃᐃⲆ,
		"Ⲇⵠⵠ": 0,
		e: 0,
		id: ⵠΔⲆ.ⵠⵠⵠⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠⵠⵠⵠΔ,
		time: 1 / 50,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ
	}, {
		r: [
			[ⵠⵠ.ⲆⵠᐃΔ, 40]
		],
		w: ⵠΔᐃ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⵠⵠⵠ,
		id: ⵠΔⲆ.ⵠᐃⲆᐃΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⵠᐃⲆᐃΔ,
		time: .2,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⵠᐃⲆᐃΔ, ΔⵠΔ],
			[ⵠⵠ.ⵠⵠΔΔ, 40],
			[ⵠⵠ.ⲆⵠᐃΔ, 50]
		],
		w: ⵠⲆⲆ,
		f: ᐃᐃᐃ,
		"Ⲇⵠⵠ": 0,
		e: ᐃᐃⲆ,
		id: ⵠΔⲆ.ᐃΔᐃΔΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃΔᐃΔΔ,
		time: 1 / 10,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ᐃΔᐃΔΔ, 1],
			[ⵠⵠ.ᐃΔᐃⲆ, 40],
			[ⵠⵠ.ⵠⵠΔΔ, 50],
			[ⵠⵠ.ⲆⵠᐃΔ, 60]
		],
		w: 1,
		f: ᐃᐃⲆ,
		"Ⲇⵠⵠ": ⵠᐃⲆ,
		e: ⵠΔᐃⵠ,
		id: ⵠΔⲆ.ᐃᐃⵠΔⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ᐃᐃⵠΔⵠ,
		time: 1 / ᐃⲆᐃΔⲆ,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ᐃᐃⵠΔⵠ, 1],
			[ⵠⵠ.ⲆᐃⲆᐃ, 40],
			[ⵠⵠ.ᐃΔᐃⲆ, 70],
			[ⵠⵠ.ⵠⵠΔΔ, 80]
		],
		w: Δⵠᐃ,
		f: ΔⲆⲆ,
		"Ⲇⵠⵠ": ⵠⵠⵠ,
		e: ⵠⵠⵠ,
		id: ⵠΔⲆ.ⲆⲆⵠΔᐃ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⲆⵠΔᐃ,
		time: ⲆᐃΔ / 30,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ⲆⲆⵠΔᐃ, 1],
			[ⵠⵠ.ⲆΔΔᐃ, 40],
			[ⵠⵠ.ⲆᐃⲆᐃ, 70],
			[ⵠⵠ.ᐃΔᐃⲆ, 110]
		],
		w: ΔᐃⵠⲆ,
		f: 0,
		"Ⲇⵠⵠ": 0,
		e: ⵠΔᐃⵠ,
		id: ⵠΔⲆ.ΔⲆⵠⲆⵠ,
		"ᐃΔΔᐃ": ⵠⵠ.ΔⲆⵠⲆⵠ,
		time: ΔᐃⵠⲆ / 60,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}, {
		r: [
			[ⵠⵠ.ΔⲆⵠⲆⵠ, 1],
			[ⵠⵠ.ⲆᐃⲆⲆ, 50],
			[ⵠⵠ.ⲆΔΔᐃ, 80],
			[ⵠⵠ.ⲆᐃⲆᐃ, 110]
		],
		w: ΔⵠΔ,
		f: 0,
		"Ⲇⵠⵠ": Ⲇᐃⵠ,
		e: 0,
		id: ⵠΔⲆ.ⲆⲆΔⵠΔ,
		"ᐃΔΔᐃ": ⵠⵠ.ⲆⲆΔⵠΔ,
		time: ΔᐃΔⲆ / 90,
		"Δᐃᐃ": Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ
	}];
	const ΔΔΔⵠΔ = ⲆΔⵠᐃⵠ;
	var ᐃⵠ = 300;
	ΔΔΔ = {
		"ⵠⵠΔⲆΔⲆᐃ": ᐃⵠ++,
		"ⵠⲆⲆᐃΔΔΔ": ᐃⵠ++,
		"ᐃⵠᐃᐃΔⲆⵠ": ᐃⵠ++,
		"ⲆⵠⲆⲆΔⲆⲆ": ᐃⵠ++,
		"ᐃᐃΔⲆΔᐃⲆ": ᐃⵠ++,
		"ⵠⲆΔᐃⲆⵠⲆ": ᐃⵠ++,
		"ⵠΔΔΔⵠᐃⵠ": ᐃⵠ++,
		"ΔΔΔΔⵠⵠⲆ": ᐃⵠ++,
		"ⵠⲆⵠΔⲆⲆⲆ": ᐃⵠ++,
		"ⵠⵠᐃᐃΔⵠΔ": ᐃⵠ++,
		"ᐃⲆⲆⵠⵠⲆⲆ": ᐃⵠ++,
		"ΔᐃⵠⵠⵠᐃⲆ": ᐃⵠ++,
		EMPTY: ᐃⵠ++,
		"ⵠⲆⲆᐃⵠⵠΔ": ᐃⵠ++,
		"ⲆⲆΔΔⲆⲆᐃ": ᐃⵠ++,
		"ⵠᐃᐃΔΔΔⲆ": ᐃⵠ++,
		"ᐃⲆᐃΔᐃⵠⲆ": ᐃⵠ++,
		"ΔΔⲆⵠΔᐃᐃ": ᐃⵠ++,
		"ᐃᐃΔᐃᐃΔΔ": ᐃⵠ++,
		"ΔΔⵠᐃᐃᐃⲆ": ᐃⵠ++,
		"ΔᐃⵠⲆⵠᐃⵠ": ᐃⵠ++,
		"ⵠΔⲆⲆⵠⲆᐃ": ᐃⵠ++,
		"ⵠⵠⵠᐃⲆ": ᐃⵠ++,
		"ⲆⲆᐃᐃᐃΔᐃ": ᐃⵠ++,
		"ⵠⲆᐃⵠΔ": ᐃⵠ++,
		"ᐃΔⲆΔⵠΔᐃ": ᐃⵠ++,
		"ⲆᐃⲆⵠΔᐃΔ": ᐃⵠ++,
		"ᐃΔⵠⲆᐃⲆᐃ": ᐃⵠ++,
		"ⲆⲆⲆⵠΔᐃᐃ": ᐃⵠ++,
		"ᐃᐃΔⵠⲆⵠⵠ": ᐃⵠ++,
		"ᐃΔΔΔⵠⵠᐃ": ᐃⵠ++,
		"ⵠⲆᐃᐃⵠᐃⵠ": ᐃⵠ++,
		POINTS: ᐃⵠ++,
		"ᐃΔΔᐃⵠⲆᐃ": ᐃⵠ++,
		"ᐃⲆⵠΔⵠⵠᐃ": ᐃⵠ++,
		"ᐃΔΔⵠⵠⵠΔ": ᐃⵠ++,
		"ⲆΔⲆⲆᐃᐃⲆ": ᐃⵠ++,
		"ⲆᐃⵠΔΔΔΔ": ᐃⵠ++,
		"ᐃⵠⲆⲆⲆᐃᐃ": ᐃⵠ++,
		"ᐃᐃΔΔⲆⵠᐃ": ᐃⵠ++,
		"ᐃⲆᐃᐃᐃΔⲆ": ᐃⵠ++,
		"ΔⵠΔⵠⵠΔⵠ": ᐃⵠ++,
		"ΔᐃᐃᐃᐃⲆⲆ": ᐃⵠ++,
		"ΔⵠⲆⲆΔΔⲆ": ᐃⵠ++
	};

	function ⵠΔⵠⵠⵠⵠᐃ(Ⲇᐃⵠⵠᐃᐃⵠ, ᐃΔⲆΔⵠΔⵠ) {
		ⵠΔⲆⵠⲆᐃᐃ(ᐃⵠΔⲆⲆ, Ⲇᐃⵠⵠᐃᐃⵠ, ᐃΔⲆΔⵠΔⵠ);
		const ⵠⲆⲆᐃΔᐃΔ = ⵠⲆΔᐃⵠⵠᐃ(ⲆⲆⵠΔ[ⵠⲆΔ], ⲆⲆⵠΔ[ᐃᐃΔ]);
		const ᐃΔΔⲆⲆⵠᐃ = ᐃΔᐃΔᐃᐃᐃ(ⲆⲆⵠΔ[ΔΔᐃ], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[0]);
		const ⵠⲆⵠⲆΔⲆᐃ = ((ⵠⲆⲆᐃΔᐃΔ ^ ᐃΔΔⲆⲆⵠᐃ) + 61538) % 65349;
		return ⵠⲆⵠⲆΔⲆᐃ
	}
	var ᐃⲆᐃΔⲆᐃⲆ = function() {
		ⲆΔⵠ[ⵠⵠ.ⲆⲆΔⵠΔ] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⲆⵠ] = ["Amethyst Axe", "Purple and powerful", ⵠ[405], "Shield Penetration: 5"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔᐃ] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⵠΔⵠ] = ["Gold Axe", "Chop 'til it drops!", ⵠ[134], "Shield Penetration: 3"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔᐃΔΔ] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⲆᐃΔ] = ["Wood Axe", "Eco-friendly deforestation!", ⵠ[44], "Shield Penetration: 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔᐃΔΔ] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", ⵠ[13]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠΔⲆ] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", ⵠ[ᐃᐃⵠᐃᐃⲆⲆ]];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆᐃΔ] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", ⵠ[13]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠᐃΔΔ] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", ⵠ[13]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆΔⲆ] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", ⵠ[13]];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃΔΔΔ] = ["Reidite Shield", "A must for the pros of the getaway", ⵠ[102], "Damage: 6", "Players Defense: 6"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃΔⵠΔ] = ["Amethyst Shield", "Because you know how to run away in style", ⵠ[102], ⵠ[73], "Players Defense: 5"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠΔⵠⲆ] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", ⵠ[102], ⵠ[47], ⵠ[245]];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆⵠⵠ] = ["Gold Shield", "When it's golden, it's always better.", ⵠ[102], ⵠ[101], "Players Defense: 3"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆⲆΔ] = ["Stone Shield", "Protects you a bit more", ⵠ[102], ⵠ[199], "Players Defense: 2"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆᐃⵠ] = ["Wood Shield", "Protects you a bit", ⵠ[102], ⵠ[494], "Players Defense: 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⵠᐃ] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃᐃΔ] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⵠⲆΔ] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
		ⲆΔⵠ[ⵠⵠ.ΔΔⵠⲆΔ] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃΔΔ] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔⲆᐃ] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⵠⲆⵠ] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆᐃᐃᐃ] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠᐃⲆⲆ] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", ⵠ[405], "Mobs Damage: 300", "Building Damage: 30"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⲆᐃ] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔΔΔ] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠᐃΔ] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃⲆΔ] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", ⵠ[45], "Mobs Damage: 100", "Building Damage: 20"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆΔᐃΔ] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆΔΔ] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃΔⲆᐃ] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆᐃΔ] = [ⵠ[128], "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
		ⲆΔⵠ[ⵠⵠ.ΔΔⲆⲆΔ] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⲆⲆ] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃΔⵠ] = ["Vulture Feather", "From a deadly vulture"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆᐃⲆ] = ["Emerald", "How many golden breads can you get from it?"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⲆᐃⵠ] = ["Sand Worm Juice", "I don't want to know how you got this."];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔΔⵠ] = ["Turban", "Useful to survive in the desert."];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆΔΔ] = ["Ninja outfit", "Essential to survive in the desert"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔΔΔⲆ] = ["Pilot Hat", "Take off and land with flying objects much faster."];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆⲆⲆᐃⲆ] = ["Pilot Glasses"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃΔΔ] = ["Tamed Boar", "Fast on lands and slow on water."];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔᐃⲆ] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆⵠᐃ] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆⵠᐃ] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", ⵠ[310], ⵠ[214]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⲆΔ] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", ⵠ[310], ⵠ[214]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⲆΔᐃ] = ["Tamed Hawk", "You can fly with it.", ⵠ[310], ⵠ[214]];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⵠΔᐃ] = ["Saddle", "Hit a boar with it to tame it."];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⵠⲆ] = ["Witch Hat", "You're a wizard Starvy!"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆᐃⵠⵠ] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠⵠΔ] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⵠⵠⵠ] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔᐃⵠ] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆⵠΔ] = ["Pirate hat", "You are faster with it in a boat", ⵠ[175]];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆᐃⲆ] = ["Sled", "You are faster with it in the snow"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃⵠⲆ] = ["Boat", "You are faster with it in the water"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠⵠΔ] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", ⵠ[310], ⵠ[214]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆΔΔⵠ] = ["Reidite Hammer", ⵠ[54], "Damage: 6", "Building Damage: 70"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃᐃⲆ] = ["Penguin Feather", "From a deadly cute penguin."];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆᐃΔⵠ] = ["Hawk Feather", "From a deadly hawk."];
		ⲆΔⵠ[ⵠⵠ.ᐃΔΔⲆᐃ] = [ⵠ[157], "Food : 20", "Water : 10"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔᐃΔⵠ] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃⲆⲆ] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⵠΔΔ] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆᐃⵠⲆ] = ["Watermelon Seed", "Grows into Watermelon", ⵠ[29], "Growth: 180s", "Need water: 3min 20s", ⵠ[400], ⵠ[468]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆΔⲆⵠ] = ["Reidite Door", "Noboby can destroy it. Except very reckless", ⵠ[73], "On-Hit Damage: 1", "Durability: 4000"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⵠⲆⲆ] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
		ⲆΔⵠ[ⵠⵠ.ΔΔⵠⵠΔ] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔⵠⵠ] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", ⵠ[ΔᐃΔᐃᐃⲆⲆ]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔⲆⲆ] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", ⵠ[472]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔᐃΔᐃ] = ["Wood Door Spike", "Can be opened or closed by you or your friends", ⵠ[73], "On-Hit Damage: 1", "Durability: 100"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔⵠΔ] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⲆΔ] = ["Gold Door Spike", 'Are you rebuilding the "el dorado?"', "Damage: 15", "On-Hit Damage: 2", ⵠ[400]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠΔΔ] = ["Diamond Door Spike", "For a shining house", "Damage: 25", ⵠ[523], "Durability: 800"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠᐃᐃΔ] = ["Amethyst Door Spike", "Is your house a locked safe?", ⵠ[405], ⵠ[523], "Durability: 1600"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃᐃΔ] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⵠΔⲆ] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔᐃⵠⵠ] = ["Carrot Seed", "Grows into Carrot", ⵠ[29], "Growth: 30s", "Need water: 1min 40s", ⵠ[385], ⵠ[468]];
		ⲆΔⵠ[ⵠⵠ.ΔΔⲆⲆᐃ] = ["Tomato Seed", "Grows into Tomato", ⵠ[29], "Growth: 30s", "Need water: 1min 40s", ⵠ[385], ⵠ[468]];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⵠⵠ] = ["Pitchfork", "Perfect for gathering"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⵠⲆᐃ] = ["Golden Pitchfork", "Essential for a real farmer."];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃⵠⵠᐃⵠ] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆⵠΔⵠⵠ] = [ⵠ[324], "Eat it or sell it in exchange for wood or stone", "Food : 12"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⲆⵠⵠⲆ] = [ⵠ[324], "Eat it or sell it in exchange for gold", "Food : 25"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠΔΔᐃⵠ] = [ⵠ[324], "Eat it or sell it in exchange for diamond", "Food : 50"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔΔΔᐃⲆⵠ] = [ⵠ[324], "Eat it or sell it in exchange for amethyst", "Food : 75"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠᐃⲆΔⲆ] = [ⵠ[324], "Eat it or sell it in exchange for reidite", "Food : 100"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠⲆᐃ] = ["Lava Cube", "You feel an immense power emanating from this cube"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆΔΔΔ] = ["Lava Orb", "You feel an immense power emanating from this orb"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆⵠᐃ] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔⲆᐃ] = ["Lava Spear", "Doing good or doing evil", ⵠ[134], "Building Damage: 8"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⲆⵠⲆ] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆⵠΔ] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
		ⲆΔⵠ[ⵠⵠ.Δᐃᐃᐃⵠ] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⵠⵠⵠ] = ["Reidite Sword", "Really useful against Lava Monsters", ⵠ[405], "Building Damage: 10"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔᐃ] = ["Flame", "It's hot!"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⵠⲆᐃ] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆΔΔⵠ] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⵠⲆ] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⲆ] = ["Reidite", "The ultimate ore"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠᐃⲆΔ] = ["Dragon Cube", "You feel a great power emanating from this cube"];
		ⵠⲆΔΔ[22] = [ⵠ[548]];
		ⵠⲆΔΔ[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
		ⵠⲆΔΔ[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
		ⵠⲆΔΔ[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
		ⵠⲆΔΔ[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
		ⵠⲆΔΔ[27] = ['You were trampled by that boar. From now on, your new nickname is "the doormat".'];
		ⵠⲆΔΔ[28] = ['With a force of 3300 newtons, the shock wave from the closing of the crab king\'s claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the "crab rave"'];
		ⵠⲆΔΔ[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
		ⵠⲆΔΔ[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
		ⵠⲆΔΔ[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
		ⵠⲆΔΔ[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
		ⵠⲆΔΔ[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
		ⵠⲆΔΔ[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
		ⵠⲆΔΔ[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
		ⵠⲆΔΔ[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
		ⵠⲆΔΔ[37] = ['You hear "Avada Kedavra!" before you turn to ashes.'];
		ⵠⲆΔΔ[38] = ["You died crushed by an angry baby mammoth."];
		ⵠⲆΔΔ[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
		ⵠⲆΔΔ[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃΔᐃ] = [ⵠ[48], ⵠ[123], ⵠ[308]];
		ⲆΔⵠ[ΔΔΔ.ΔⵠΔⵠⵠΔⵠ] = "A sandstorm is approaching in a few seconds.";
		ⲆΔⵠ[ΔΔΔ.ᐃⲆᐃᐃᐃΔⲆ] = "The sandstorm will soon stop.";
		ⲆΔⵠ[ΔΔΔ.ΔⵠⲆⲆΔΔⲆ] = "A blizzard is approaching in a few seconds.";
		ⲆΔⵠ[ΔΔΔ.ΔᐃᐃᐃᐃⲆⲆ] = "The blizzard will soon stop.";
		ⲆΔⵠ[ΔΔΔ.ⲆⲆⲆⵠΔᐃᐃ] = ⵠ[455];
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⵠⲆⵠⵠ] = ⵠ[208];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔΔⵠⵠᐃ] = ⵠ[557];
		ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃᐃⵠᐃⵠ] = ⵠ[296];
		ⲆΔⵠ[ΔΔΔ.POINTS] = ⵠ[140];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔᐃⵠⲆᐃ] = ⵠ[35];
		ⲆΔⵠ[ΔΔΔ.ᐃⲆⵠΔⵠⵠᐃ] = ⵠ[43];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔⵠⵠⵠΔ] = ⵠ[60];
		ⲆΔⵠ[ΔΔΔ.ⲆΔⲆⲆᐃᐃⲆ] = ⵠ[14];
		ⲆΔⵠ[ΔΔΔ.ⲆᐃⵠΔΔΔΔ] = ⵠ[527];
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃΔⲆ] = [ⵠ[388], ⵠ[429], ⵠ[461]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⲆᐃ] = [ⵠ[334], ⵠ[224], "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", ⵠ[44], ⵠ[142]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆᐃⲆ] = [ⵠ[504], ⵠ[481], ⵠ[263], ⵠ[525], "Players Defense: 5", "Animals Defense: 19"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃⲆⲆ] = [ⵠ[271], ⵠ[531], ⵠ[303], ⵠ[21], ⵠ[400]];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[68])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[183];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[80])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[346];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[415])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[441];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[ΔΔⲆᐃ])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[330];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[390])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[153];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[19])[ⲆᐃⲆⵠΔΔⲆ[112]] = " Collect 1 dragon heart inside the cave";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[570])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[351];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[265])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[270];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[356])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[144];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[571])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[ⲆᐃΔⵠⵠᐃᐃ];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[555])[ⲆᐃⲆⵠΔΔⲆ[112]] = "100 bread in winter, alone, without come back";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[492])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[135];
		for (var Ⲇᐃ = ⵠⲆⵠⵠ; 7 > Ⲇᐃ; Ⲇᐃ++) document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[320] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[107];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[93])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[465];
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃⵠⲆ] = ["Hand"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔᐃⵠ] = ["Dirt", "Dirty!"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃΔⵠ] = ["Sand", "I got it in my eyes!"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃΔ] = ["Wood", "You can't get enough of it!"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔΔ] = ["Stone", "Also called a rock"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔᐃⲆ] = ["Gold", "Be generous, give it to others"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆᐃ] = ["Diamond", "What will you make with it?"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔᐃ] = ["Amethyst", "It's Mauve like Lapa"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠᐃⲆ] = ["Flour", "Used in cooking"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔⵠ] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆᐃⵠⵠ] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔⵠⵠ] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⲆⵠ] = ["Cooked meat", "A rare steak, please", "Food: 35"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠΔΔ] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠΔᐃᐃ] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃΔⵠ] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⲆⵠΔ] = [ⵠ[458], "Tastes like Krabby Patty", "Food: 100"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⵠⵠ] = ["Candies", "Only for children!", ⵠ[308]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆⲆᐃ] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃΔᐃ] = ["Garland", "Perfect decoration for roofs"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃΔΔᐃ] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", ⵠ[385], ⵠ[468]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔᐃⵠⲆ] = ["Berry", "Berry tasty!", ⵠ[461]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆⵠᐃ] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", ⵠ[385], ⵠ[468]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠⵠᐃ] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⲆΔ] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", ⵠ[385], ⵠ[468]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆᐃⲆᐃ] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃⲆⵠ] = ["Garlic Seed", "Very dangerous for vampires", ⵠ[45], ⵠ[29], "Growth: 1min 10s", "Need water: 1min 40s", ⵠ[385], ⵠ[468]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔⵠ] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠΔⲆ] = ["Thorn bush Seed", "Can damage your enemies", ⵠ[45], ⵠ[29], "Growth: 15s", "Need water: 3min", ⵠ[143], ⵠ[468]];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⵠⵠⲆ] = ["Thorn bush", "It stings!"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃΔΔ] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", ⵠ[13]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⲆⲆΔ] = ["Ice", "Useful for making cakes and water"];
		ⲆΔⵠ[ⵠⵠ.ΔΔᐃⲆᐃ] = ["Wrench", "To repair doors, walls and spike", ⵠ[199]];
		ⲆΔⵠ[ⵠⵠ.ΔΔⲆⲆⲆ] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆᐃⵠ] = ["Rabbit Fur", "That rabbit was so cute..."];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⲆⲆ] = ["Pure Fur", "You're a bread factory"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔⲆ] = ["Dark Fur", "You get ready to do something wrong"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⲆⲆ] = ["Winter Fur", "These animals just wanted a hug..."];
		ⲆΔⵠ[ⵠⵠ.Δⵠⵠⵠᐃ] = ["Scales", "It smells like fish!"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠᐃᐃ] = ["Kraken Skin", "Weren't you too scared?"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆΔⵠⲆ] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⵠΔΔ] = ["Big Firecamp", "Warm you up more time!", ⵠ[400], "Lifetime: 6min"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠⲆᐃ] = ["Workbench", "Very useful to craft all kinds of objects"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⵠᐃⲆ] = ["Cord", "Used in crafting Hats and Bag"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃᐃⲆᐃ] = ["Diamond Cord", "Used in crafting Special Hats"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠᐃⲆΔ] = ["Chest", "Allows you to store items", "Durability: 500"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆΔⲆ] = ["Wood Sword", "Does that work?", "Damage: 12", ⵠ[142]];
		ⲆΔⵠ[ⵠⵠ.ⵠΔᐃᐃⵠ] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆⵠⲆ] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔΔⲆⲆ] = ["Diamond Sword", "You can feel the power", ⵠ[134], "Building Damage: 8"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⵠᐃ] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", ⵠ[134], "Building Damage: 8"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆⲆΔ] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔΔ] = ["Dragon Sword", "No mercy!", ⵠ[405], "Building Damage: 10"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠⲆⲆ] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
		ⲆΔⵠ[ⵠⵠ.ΔΔⵠᐃⲆ] = ["Wood Pickaxe", "Can harvest only stone and wood", ⵠ[494]];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔΔΔ] = ["Stone Pickaxe", "Can harvest wood, stone and gold", ⵠ[199]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔΔ] = ["Gold Pickaxe", "Can also harvest diamond", ⵠ[101], ⵠ[472]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⵠΔΔ] = ["Diamond Pickaxe", "Can also harvest amethyst", ⵠ[47], ⵠ[472]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆᐃΔ] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", ⵠ[73], ⵠ[472]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔᐃΔ] = ["Stone Hammer", ⵠ[54], "Doesn't work well on diamond or amethyst", ⵠ[199], "Building Damage: 20"];
		ⲆΔⵠ[ⵠⵠ.Ⲇᐃᐃᐃᐃ] = ["Gold Hammer", ⵠ[54], "Doesn't work well on amethyst", ⵠ[101], "Building Damage: 30"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⵠᐃᐃ] = ["Diamond Hammer", ⵠ[54], ⵠ[47], "Building Damage: 40"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠΔⵠ] = ["Amethyst Hammer", ⵠ[54], ⵠ[73], "Building Damage: 50"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔⵠⲆ] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 95"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔⲆ] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔⵠⵠ] = ["Stone Spear", "The beginning of evolution!", ⵠ[44], ⵠ[142]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠᐃΔΔ] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠⵠΔ] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃᐃⲆ] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔᐃΔ] = ["Stone Shovel", ⵠ[210], ⵠ[375], ⵠ[199]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⲆᐃ] = ["Gold Shovel", ⵠ[210], ⵠ[375], ⵠ[101], "Buildings Damage: 1"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆᐃⲆᐃ] = ["Diamond Shovel", ⵠ[210], ⵠ[375], ⵠ[47], "Buildings Damage: 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔᐃΔ] = ["Amethyst Shovel", ⵠ[210], ⵠ[375], ⵠ[73], "Buildings Damage: 1"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆΔⵠ] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔΔΔᐃ] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⵠⲆ] = ["Gold Helmet", "AKA the helmet of the savages", ⵠ[245], ⵠ[277]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃⵠⲆ] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔⲆΔ] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆΔΔⲆ] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⵠⵠ] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃΔⵠ] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", ⵠ[175], "You also calm down aggressive monsters twice as fast"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆᐃΔ] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", ⵠ[175]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃΔⲆ] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", ⵠ[175]];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆᐃⲆ] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", ⵠ[175]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆΔΔΔ] = ["Earmuffs", "Some kind of little chapka.", ⵠ[175]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆΔⵠ] = [ⵠ[521], "Also called a coat.", "Warmer outside water and in winter"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⵠⲆⲆ] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⲆΔΔ] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
		ⲆΔⵠ[ⵠⵠ.ΔΔᐃΔΔ] = ["Peasant", "Your plants grow faster", ⵠ[175]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⵠΔ] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", ⵠ[175]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⲆⲆ] = ["Winter Peasant", "Your plants grow faster", ⵠ[175]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆⵠΔ] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⵠⵠΔ] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", ⵠ[482]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠⵠⵠ] = ["Dragon Orb", ⵠ[57]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃᐃⲆ] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔΔⲆ] = ["Green Gemstone", "You didn't cheat, promise?"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⵠΔ] = ["Orange Gemstone", "Only a real pirate can find it!"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠΔᐃ] = ["Blue Gemstone", "For too kind people"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆⵠΔ] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", ⵠ[482]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆᐃΔ] = ["Orange Crown", "You suddenly feel very lucky", ⵠ[482]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⲆΔΔ] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", ⵠ[482]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⲆⲆᐃ] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⲆⵠ] = ["Empty Bucket", "You need to fill this bucket near a water source"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆⲆΔ] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔᐃᐃ] = ["Empty Bottle", "You can fill this bottle near a water source"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔᐃⲆ] = ["Empty Watering Can", "You must fill it with a water source to use it"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⵠΔ] = ["Watering Can", "Allows watering of plants", ⵠ[494]];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⵠⲆ] = ["Bag", "More space for your items!"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠⵠⲆ] = ["Paper", "Used in book-crafting"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃΔⲆᐃ] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", ⵠ[494]];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆⲆⲆ] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠⲆΔ] = ["Lock", "Allow you to lock your chest"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔⲆᐃ] = ["Lock-pick", "Allows you to unlock one chest"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆΔⲆ] = [ⵠ[31], "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃⲆⲆ] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⲆⲆ] = ["Sign", "Leave a message to others", "Durability: 200"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔⵠᐃ] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔᐃΔ] = ["Well", "Allows bottle filling", ⵠ[143]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠⲆΔ] = ["Wood Wall", "It's just a wall", ⵠ[143]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⵠⵠ] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃᐃᐃᐃ] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", ⵠ[13]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆΔᐃⵠ] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆΔⲆ] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃⵠΔ] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆΔⵠ] = ["Stone Spike", "I wouldn't want to be your enemy.", ⵠ[45], ⵠ[523], "Durability: 300"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠᐃΔ] = ["Gold Spike", "You're so cruel.", ⵠ[405], ⵠ[523], "Durability: 600"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔΔⵠΔ] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⲆⵠⲆ] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⵠⲆ] = ["Wood Door", "Can be opened or closed by you or your friends", ⵠ[143]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆᐃⵠ] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
		ⲆΔⵠ[ⵠⵠ.Δⵠᐃⵠⵠ] = ["Gold Door", 'Are you rebuilding the "el dorado?"', ⵠ[13]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⲆⲆⵠ] = ["Diamond Door", "For a shining house", "Durability: 2500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠᐃΔ] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆⲆΔ] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", ⵠ[143]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔᐃⲆ] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", ⵠ[ⵠᐃᐃᐃⲆⵠΔ]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⵠᐃ] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", ⵠ[ⵠᐃᐃᐃⲆⵠΔ]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆᐃᐃ] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
		ⲆΔⵠ[ΔΔΔ.ⵠⵠΔⲆΔⲆᐃ] = "You cannot join this server";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃΔΔΔ] = "Kicked: ";
		ⲆΔⵠ[ΔΔΔ.ᐃⵠᐃᐃΔⲆⵠ] = "Your key is already used by someone else";
		ⲆΔⵠ[ΔΔΔ.ⲆⵠⲆⲆΔⲆⲆ] = "Your key is wrong";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⲆΔᐃⲆ] = "You have an old version, you need to clear your cache";
		ⲆΔⵠ[ΔΔΔ.ᐃⵠⲆⲆⲆᐃᐃ] = "Your client version is too recent for this server. The server is being updated";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔΔⲆⵠᐃ] = "Wrong password! To enter a password: https://starve.io/?password=...";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆΔᐃⲆⵠⲆ] = "There are no more new resources";
		ⲆΔⵠ[ΔΔΔ.ⵠΔΔΔⵠᐃⵠ] = "You survived 1 day";
		ⲆΔⵠ[ΔΔΔ.ΔΔΔΔⵠⵠⲆ] = "You survived ";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⵠΔⲆⲆⲆ] = " days";
		ⲆΔⵠ[ΔΔΔ.ⵠⵠᐃᐃΔⵠΔ] = "You are dead ;-;";
		ⲆΔⵠ[ΔΔΔ.ᐃⲆⲆⵠⵠⲆⲆ] = "Server cannot find spawn location! Spam the play button!";
		ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⵠⵠᐃⲆ] = "Server is full! Spam the play button!";
		ⲆΔⵠ[ΔΔΔ.EMPTY] = "Resource is empty";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃⵠⵠΔ] = "Inventory is full (right-click to empty items)";
		ⲆΔⵠ[ΔΔΔ.ⲆⲆΔΔⲆⲆᐃ] = " is dead";
		ⲆΔⵠ[ΔΔΔ.ⵠᐃᐃΔΔΔⲆ] = "This is not the right tool";
		ⲆΔⵠ[ΔΔΔ.ᐃⲆᐃΔᐃⵠⲆ] = "You joined a team";
		ⲆΔⵠ[ΔΔΔ.ΔΔⲆⵠΔᐃᐃ] = "You are dead";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔᐃᐃΔΔ] = " joined the team";
		ⲆΔⵠ[ΔΔΔ.ΔΔⵠᐃᐃᐃⲆ] = "Your team was destroyed";
		ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⲆⵠᐃⵠ] = "You left the team";
		ⲆΔⵠ[ΔΔΔ.ⵠΔⲆⲆⵠⲆᐃ] = " left the team";
		ⲆΔⵠ[ΔΔΔ.ⵠⵠⵠᐃⲆ] = "Someone stole your token :>";
		ⲆΔⵠ[ΔΔΔ.ⲆⲆᐃᐃᐃΔᐃ] = "Choose a server";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃⵠΔ] = "players";
		ⲆΔⵠ[ΔΔΔ.ᐃΔⲆΔⵠΔᐃ] = "total players";
		ⲆΔⵠ[ΔΔΔ.ⲆᐃⲆⵠΔᐃΔ] = "players on this mode";
		ⲆΔⵠ[ΔΔΔ.ᐃΔⵠⲆᐃⲆᐃ] = "Coming soon...";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[227]).placeholder = "Nickname";
		ⵠⲆΔΔ[Ⲇᐃⵠ] = ["You were killed for no reason"];
		ⵠⲆΔΔ[ⲆᐃΔ] = ["You starved to death, as the name of the game implies"];
		ⵠⲆΔΔ[ᐃᐃΔⵠ] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
		ⵠⲆΔΔ[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
		ⵠⲆΔΔ[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
		ⵠⲆΔΔ[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
		ⵠⲆΔΔ[ⲆⲆⲆᐃᐃ] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
		ⵠⲆΔΔ[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
		ⵠⲆΔΔ[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
		ⵠⲆΔΔ[ⵠΔⵠⵠᐃ] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
		ⵠⲆΔΔ[ⵠⲆΔⲆᐃ] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
		ⵠⲆΔΔ[ⵠⲆⵠᐃΔΔᐃ] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
		ⵠⲆΔΔ[ⲆᐃᐃⲆᐃ] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
		ⵠⲆΔΔ[13] = ["You died of thirst. Better drink your own piss."];
		ⵠⲆΔΔ[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
		ⵠⲆΔΔ[ⵠⵠⲆᐃᐃⵠᐃ] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
		ⵠⲆΔΔ[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
		ⵠⲆΔΔ[ᐃⵠⲆⲆⵠΔᐃ] = ["Your skin's falling apart, the sun killed you."];
		ⵠⲆΔΔ[18] = ["Garlic stored in your pockets boiled your brain."];
		ⵠⲆΔΔ[ⲆⵠⵠⲆⵠ] = ["As a vampire, don't stand near the garlic cloves."];
		ⵠⲆΔΔ[20] = ["You ate garlic as a vampire, what did you expect?"];
		ⵠⲆΔΔ[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
		ΔᐃΔᐃⲆ = ⵠ[469];
		ⲆⵠⲆⲆᐃⲆᐃ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", ⵠ[361], "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"]
	};
	const ⵠⲆΔᐃᐃ = ΔⲆⲆΔΔ;
	const ᐃΔᐃⲆᐃᐃⵠ = ΔᐃΔⲆⲆⵠᐃ;
	var ⵠᐃΔⵠᐃⲆᐃ = function() {
		ⲆΔⵠ[ⵠⵠ.ⵠⵠᐃⲆΔ] = [ⵠ[57]];
		ⵠⲆΔΔ[22] = [ⵠ[548]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃΔᐃ] = [ⵠ[48], ⵠ[123], ⵠ[308]];
		ⲆΔⵠ[ΔΔΔ.ⲆⲆⲆⵠΔᐃᐃ] = ⵠ[455];
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⵠⲆⵠⵠ] = ⵠ[208];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔΔⵠⵠᐃ] = ⵠ[557];
		ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃᐃⵠᐃⵠ] = ⵠ[296];
		ⲆΔⵠ[ΔΔΔ.POINTS] = ⵠ[140];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔᐃⵠⲆᐃ] = ⵠ[35];
		ⲆΔⵠ[ΔΔΔ.ᐃⲆⵠΔⵠⵠᐃ] = ⵠ[43];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔⵠⵠⵠΔ] = ⵠ[60];
		ⲆΔⵠ[ΔΔΔ.ⲆΔⲆⲆᐃᐃⲆ] = ⵠ[ⲆᐃⲆⲆᐃΔΔ];
		ⲆΔⵠ[ΔΔΔ.ⲆᐃⵠΔΔΔΔ] = ⵠ[527];
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃΔⲆ] = [ⵠ[388], ⵠ[429], ⵠ[461]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⲆᐃ] = [ⵠ[334], ⵠ[224], ⵠ[44], ⵠ[142]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆᐃⲆ] = [ⵠ[504], ⵠ[481], ⵠ[263], ⵠ[525], ⵠ[245], ⵠ[277]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃⲆⲆ] = [ⵠ[271], ⵠ[531], ⵠ[303], ⵠ[21], ⵠ[400]];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[68])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[183];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[80])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[346];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[415])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[441];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[2])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[330];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[390])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[153];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[19])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[416];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[570])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[351];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[265])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[270];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[356])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[144];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[571])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[255];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[555])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[408];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[492])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[135];
		for (var Ⲇᐃ = 0; Ⲇᐃ < 7; Ⲇᐃ++) document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[320] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[107];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[93])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[465];
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃⵠⲆ] = ["Рука"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔᐃⵠ] = ["Земля", "Грязно!"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃΔⵠ] = ["Песок", "Он в моих глазах!"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃΔ] = ["Дерево", "Постоянно нужно больше!"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔΔ] = ["Камень", "Твердый"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔᐃⲆ] = ["Золото", "Будьте щедры, давайте его другим"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆᐃ] = ["Алмаз", "Что вы создадите с помощью него?"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔᐃ] = ["Аметист", "Он сиреневый, как Lapa"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠᐃⲆ] = ["Мука", "Используется в готовке"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔⵠ] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆᐃⵠⵠ] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔⵠⵠ] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⲆⵠ] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠΔΔ] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠΔᐃᐃ] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃΔⵠ] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⲆⵠΔ] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⵠⵠ] = ["Конфеты", "Только для детей!", "Еда: 20"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆⲆᐃ] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃΔᐃ] = ["Гирлянда", "Прекрасная декорация для крыши"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃΔΔᐃ] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", ⵠ[295], ⵠ[71]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔᐃⵠⲆ] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆⵠᐃ] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", ⵠ[295], ⵠ[71]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠⵠᐃ] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⲆΔ] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", ⵠ[295], ⵠ[71]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆᐃⲆᐃ] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃⲆⵠ] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", ⵠ[295], ⵠ[71]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔⵠ] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠΔⲆ] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", ⵠ[347], ⵠ[71]];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⵠⵠⲆ] = ["Колючий Куст", "Это больно!"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃΔΔ] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", ⵠ[179]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⲆⲆΔ] = ["Лёд", "Используется для изготовления тортов и воды"];
		ⲆΔⵠ[ⵠⵠ.ΔΔᐃⲆᐃ] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", ⵠ[467]];
		ⲆΔⵠ[ⵠⵠ.ΔΔⲆⲆⲆ] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆᐃⵠ] = ["Шкура Зайца", "Этот кролик был таким милым..."];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⲆⲆ] = ["Чистая Шкура", "Вы - фабрика хлеба"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔⲆ] = ["Чёрная Шкура", "Вы готовы делать зло."];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⲆⲆ] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
		ⲆΔⵠ[ⵠⵠ.Δⵠⵠⵠᐃ] = ["Чешуя", "Она пахнет рыбой!"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠᐃᐃ] = ["Шкура Кракена", "Вы не испугались?"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆΔⵠⲆ] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⵠΔΔ] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠⲆᐃ] = ["Верстак", "Необходим для создания многих предметов"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⵠᐃⲆ] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃᐃⲆᐃ] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠᐃⲆΔ] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆΔⲆ] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔᐃᐃⵠ] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆⵠⲆ] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔΔⲆⲆ] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⵠᐃ] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆⲆΔ] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔΔ] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠⲆⲆ] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔΔⵠᐃⲆ] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔΔΔ] = ["Каменная Кирка", "Может добывать дерево, камень и золото", ⵠ[467]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔΔ] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", ⵠ[200]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⵠΔΔ] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", ⵠ[200]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆᐃΔ] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", ⵠ[200]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔᐃΔ] = ["Каменный молот", ⵠ[507], "Плохо разрушает алмазные и аметистовые здания", ⵠ[467], "Урон по строениям: 20"];
		ⲆΔⵠ[ⵠⵠ.Ⲇᐃᐃᐃᐃ] = ["Золотой Молот", ⵠ[507], "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⵠᐃᐃ] = ["Алмазный Молот", ⵠ[507], "Урон: 4", "Урон по строениям: 40"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠΔⵠ] = ["Аметистовый Молот", ⵠ[507], "Урон: 5", "Урон по строениям: 50"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔⵠⲆ] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔⲆ] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔⵠⵠ] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠᐃΔΔ] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠⵠΔ] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃᐃⲆ] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔᐃΔ] = ["Каменная Лопата", ⵠ[509], ⵠ[209], ⵠ[467]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⲆᐃ] = ["Золотая Лопата", ⵠ[509], ⵠ[209], "Урон: 3", ⵠ[200]];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆᐃⲆᐃ] = ["Алмазная Лопата", ⵠ[509], ⵠ[209], "Урон: 4", ⵠ[200]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔᐃΔ] = ["Аметистовая Лопата", ⵠ[509], ⵠ[209], "Урон: 5", "Урон по стреониям: 1"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆΔⵠ] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔΔΔᐃ] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⵠⲆ] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃⵠⲆ] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔⲆΔ] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⵠⵠ] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃΔⵠ] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", ⵠ[242]];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆᐃΔ] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", ⵠ[242]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃΔⲆ] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", ⵠ[242]];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆᐃⲆ] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", ⵠ[242]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆΔΔΔ] = ["Теплые Наушники", "Какая-то маленькая шапка.", ⵠ[242]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆΔⵠ] = ["Шапка", "Так же называется пальтом.", ⵠ[242]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⵠⲆⲆ] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
		ⲆΔⵠ[ⵠⵠ.ΔΔᐃΔΔ] = ["Крестьянская Туника", "Ваши растения растут быстрее", ⵠ[242]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⵠΔ] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", ⵠ[242]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⲆⲆ] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", ⵠ[242]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆⵠΔ] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⵠⵠΔ] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", ⵠ[551]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠⵠⵠ] = ["Шар Дракона", "Даётся за квест"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃᐃⲆ] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔΔⲆ] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⵠΔ] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠΔᐃ] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆⵠΔ] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", ⵠ[551]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆᐃΔ] = ["Оранжевая Корона", "Вам очень повезло", ⵠ[551]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⲆΔΔ] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", ⵠ[551]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⲆⲆᐃ] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⲆⵠ] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆⲆΔ] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔᐃᐃ] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔᐃⲆ] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⵠΔ] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⵠⲆ] = ["Рюкзак", "Больше места для ваших предметов!"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠⵠⲆ] = ["Бумага", "Используется при создании книги"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃΔⲆᐃ] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆⲆⲆ] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠⲆΔ] = ["Замок", "Позволяет вам закрыть ваш сундук"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔⲆᐃ] = ["Ключ", "Даёт вам открыть один запертый сундук"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆΔⲆ] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃⲆⲆ] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⲆⲆ] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔⵠᐃ] = ["Крыша", "Немного скрывает вас и согревает!"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔᐃΔ] = ["Колодец", "Позволяет заполнить бутылку", ⵠ[347]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠⲆΔ] = ["Деревянная Стена", "Это просто стена", ⵠ[347]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⵠⵠ] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃᐃᐃᐃ] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", ⵠ[179]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆΔᐃⵠ] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆΔⲆ] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃⵠΔ] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆΔⵠ] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠᐃΔ] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔΔⵠΔ] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⲆⵠⲆ] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⵠⲆ] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", ⵠ[347]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆᐃⵠ] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
		ⲆΔⵠ[ⵠⵠ.Δⵠᐃⵠⵠ] = ["Золотая Дверь", 'Вы перестраиваете "Эль Дорадо?"', ⵠ[179]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⲆⲆⵠ] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠᐃΔ] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆⲆΔ] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", ⵠ[347]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔᐃⲆ] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", ⵠ[179]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⵠᐃ] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", ⵠ[179]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆᐃᐃ] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
		ⲆΔⵠ[ΔΔΔ.ⵠⵠΔⲆΔⲆᐃ] = "Вы не можете зайти на этот сервер";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃΔΔΔ] = "Выгнаны: ";
		ⲆΔⵠ[ΔΔΔ.ᐃⵠᐃᐃΔⲆⵠ] = "Ваш ключ уже используется кем-то";
		ⲆΔⵠ[ΔΔΔ.ⲆⵠⲆⲆΔⲆⲆ] = "Ваш ключ неправильный";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⲆΔᐃⲆ] = "У вас старая версия, вам нужно очистить кеш";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆΔᐃⲆⵠⲆ] = "Ресурсов больше нет";
		ⲆΔⵠ[ΔΔΔ.ⵠΔΔΔⵠᐃⵠ] = "Вы выжили 1 день";
		ⲆΔⵠ[ΔΔΔ.ΔΔΔΔⵠⵠⲆ] = "Вы выжили ";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⵠΔⲆⲆⲆ] = " дней";
		ⲆΔⵠ[ΔΔΔ.ⵠⵠᐃᐃΔⵠΔ] = "Вы умерли ;-;";
		ⲆΔⵠ[ΔΔΔ.ᐃⲆⲆⵠⵠⲆⲆ] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
		ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⵠⵠᐃⲆ] = "Сервер заполнен! Спамьте кнопку играть!";
		ⲆΔⵠ[ΔΔΔ.EMPTY] = "Ресурсы закончились";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃⵠⵠΔ] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
		ⲆΔⵠ[ΔΔΔ.ⲆⲆΔΔⲆⲆᐃ] = " умер";
		ⲆΔⵠ[ΔΔΔ.ⵠᐃᐃΔΔΔⲆ] = "Это не тот инструмент";
		ⲆΔⵠ[ΔΔΔ.ᐃⲆᐃΔᐃⵠⲆ] = "Вы вошли в команду";
		ⲆΔⵠ[ΔΔΔ.ΔΔⲆⵠΔᐃᐃ] = "Вы умерли";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔᐃᐃΔΔ] = " вошёл в команду";
		ⲆΔⵠ[ΔΔΔ.ΔΔⵠᐃᐃᐃⲆ] = "Ваша команда была разрушена";
		ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⲆⵠᐃⵠ] = "Вы покинули команду";
		ⲆΔⵠ[ΔΔΔ.ⵠΔⲆⲆⵠⲆᐃ] = " покинул команду";
		ⲆΔⵠ[ΔΔΔ.ⵠⵠⵠᐃⲆ] = "Кто-то использует ваш токен :>";
		ⲆΔⵠ[ΔΔΔ.ⲆⲆᐃᐃᐃΔᐃ] = "Выберите сервер";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃⵠΔ] = "игроков";
		ⲆΔⵠ[ΔΔΔ.ᐃΔⲆΔⵠΔᐃ] = "игроков всего";
		ⲆΔⵠ[ΔΔΔ.ⲆᐃⲆⵠΔᐃΔ] = "игроков в этом режиме";
		ⲆΔⵠ[ΔΔΔ.ᐃΔⵠⲆᐃⲆᐃ] = "Скоро...";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[227]).placeholder = "Имя";
		ⵠⲆΔΔ[ΔⲆⲆ] = ["Вы были убиты без причины"];
		ⵠⲆΔΔ[ΔᐃⵠⲆ] = ["Вы умерли от голода, как название игры подразумевает это"];
		ⵠⲆΔΔ[ⵠⵠⵠᐃ] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
		ⵠⲆΔΔ[ᐃᐃᐃΔᐃ] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
		ⵠⲆΔΔ[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
		ⵠⲆΔΔ[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
		ⵠⲆΔΔ[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
		ⵠⲆΔΔ[ΔᐃᐃᐃⵠΔⲆ] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
		ⵠⲆΔΔ[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
		ⵠⲆΔΔ[ⲆᐃΔⵠΔΔᐃ] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
		ⵠⲆΔΔ[ΔΔΔᐃⲆ] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
		ⵠⲆΔΔ[ᐃᐃⲆⵠⲆⲆᐃ] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
		ⵠⲆΔΔ[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
		ⵠⲆΔΔ[ΔᐃΔᐃᐃⲆⲆ] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
		ⵠⲆΔΔ[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
		ⵠⲆΔΔ[ᐃⵠᐃⵠᐃ] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
		ⵠⲆΔΔ[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
		ⵠⲆΔΔ[ⲆⵠⵠⲆΔ] = ["Твоя кожа разваливается, солнце убило тебя"];
		ⵠⲆΔΔ[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
		ⵠⲆΔΔ[ⵠⵠΔⵠᐃᐃⵠ] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
		ⵠⲆΔΔ[ⵠᐃᐃⵠΔ] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
		ⵠⲆΔΔ[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
		ΔᐃΔᐃⲆ = ⵠ[469];
		ⲆⵠⲆⲆᐃⲆᐃ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", ⵠ[361], "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"]
	};
	const ⲆⵠΔᐃΔᐃⲆ = ΔⲆᐃⵠⵠΔᐃ;

	function ΔⵠΔΔΔᐃΔ(ΔⲆᐃᐃⲆⵠⲆ, ΔΔᐃⲆⲆⲆⵠ, ᐃⲆⲆⵠⵠᐃᐃ, ⲆⵠⵠᐃΔΔΔ) {
		const ⵠⵠⵠΔⲆΔⲆ = (1103515245 * (ΔⲆᐃᐃⲆⵠⲆ + 40897) + 12345) % 2147483648;
		const ⵠΔⲆΔᐃᐃΔ = (ΔΔᐃⲆⲆⲆⵠ + 4635) % 65456;
		const ᐃⵠΔᐃᐃᐃΔ = (ᐃⲆⲆⵠⵠᐃᐃ + 51146) % 65307;
		const ᐃΔᐃᐃᐃⵠⵠ = 34412 ^ ⲆⵠⵠᐃΔΔΔ;
		const ᐃᐃⲆⲆⵠᐃⵠ = ᐃⲆᐃⵠⵠᐃⵠ(ⵠⵠⵠΔⲆΔⲆ, ⵠΔⲆΔᐃᐃΔ, ᐃⵠΔᐃᐃᐃΔ);
		const ⲆᐃⲆⵠⲆᐃⵠΔΔ = ⵠⲆΔⲆⲆⲆⲆ(ᐃΔᐃᐃᐃⵠⵠ, ⵠⵠⵠΔⲆΔⲆ, ⵠΔⲆΔᐃᐃΔ, ᐃⵠΔᐃᐃᐃΔ);
		const ⵠⲆΔⵠᐃΔⲆ = ᐃᐃⲆⲆⵠᐃⵠ ^ 59900;
		return ⵠⲆΔⵠᐃΔⲆ
	}
	const ᐃⲆⵠⲆΔΔΔ = ᐃⵠⵠᐃᐃ;
	var ΔΔΔᐃⵠᐃᐃ = function() {
		ⲆΔⵠ[ⵠⵠ.ⵠⵠᐃⲆΔ] = [ⵠ[57]];
		ⵠⲆΔΔ[22] = [ⵠ[548]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃΔᐃ] = [ⵠ[48], ⵠ[123], ⵠ[308]];
		ⲆΔⵠ[ΔΔΔ.ⲆⲆⲆⵠΔᐃᐃ] = ⵠ[455];
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⵠⲆⵠⵠ] = ⵠ[208];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔΔⵠⵠᐃ] = ⵠ[557];
		ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃᐃⵠᐃⵠ] = ⵠ[296];
		ⲆΔⵠ[ΔΔΔ.POINTS] = ⵠ[140];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔᐃⵠⲆᐃ] = ⵠ[35];
		ⲆΔⵠ[ΔΔΔ.ᐃⲆⵠΔⵠⵠᐃ] = ⵠ[43];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔⵠⵠⵠΔ] = ⵠ[60];
		ⲆΔⵠ[ΔΔΔ.ⲆΔⲆⲆᐃᐃⲆ] = ⵠ[14];
		ⲆΔⵠ[ΔΔΔ.ⲆᐃⵠΔΔΔΔ] = ⵠ[527];
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃΔⲆ] = [ⵠ[388], ⵠ[429], ⵠ[461]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⲆᐃ] = [ⵠ[334], ⵠ[224], ⵠ[44], ⵠ[142]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆᐃⲆ] = [ⵠ[504], ⵠ[481], ⵠ[263], ⵠ[525], ⵠ[245], ⵠ[277]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃⲆⲆ] = [ⵠ[271], ⵠ[531], ⵠ[303], ⵠ[21], ⵠ[400]];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[68])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[183];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[80])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[346];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[415])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[441];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[2])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[330];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[390])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[153];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[19])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[416];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[570])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[351];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[265])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[270];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[356])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[144];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[571])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[ⲆⵠᐃⲆⲆᐃⲆ];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[555])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[408];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[492])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[135];
		for (var Ⲇᐃ = 0; ⲆΔᐃⲆᐃ > Ⲇᐃ; Ⲇᐃ++) document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[320] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[107];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[93])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[465];
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃⵠⲆ] = ["mão"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔᐃⵠ] = ["terra", "está sujo!"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃΔⵠ] = ["areia", "entrou nos meus olhos!"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃΔ] = ["madeira", "você não pode pegar o suficiente disso!"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔΔ] = ["pedra", "também chamado rocha"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔᐃⲆ] = ["ouro", "seja generoso, dê para outros"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆᐃ] = ["diamante", "o que você irá fazer com isso?"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔᐃ] = ["ametista", "é mauve como lapa"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠᐃⲆ] = ["farinha", "usada na cozinha"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔⵠ] = ["biscoito", "biscoito da vovó", "comida: 50"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆᐃⵠⵠ] = ["bolo", "bolo dos sonhos para gourmets", ⵠ[471]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔⵠⵠ] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⲆⵠ] = ["carne assada", "um mal passado, por favor", "comida: 35"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠΔΔ] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠΔᐃᐃ] = ["peixe assado", "com limão é perfeito", "comida: 35"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃΔⵠ] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⲆⵠΔ] = ["sanduíche", "saboroso com rissol de krabby", ⵠ[471]];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⵠⵠ] = ["doces", "apenas para crianças!", ⵠ[471]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆⲆᐃ] = ["cana-de-açúcar", "prove, é delicioso!", ⵠ[471]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃΔᐃ] = ["pisca-pisca", "decoração perfeita de telhado"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃΔΔᐃ] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", ⵠ[206], "tempo de vida: 8 dias"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔᐃⵠⲆ] = ["berry", "Berry saborosa!", "comida: 10"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆⵠᐃ] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", ⵠ[206], "tempo de vida: 8 days"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠⵠᐃ] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⲆΔ] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", ⵠ[206], "tempo de vida: 8 dias"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆᐃⲆᐃ] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃⲆⵠ] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", ⵠ[206], "tempo de vida: 8 dias"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔⵠ] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠΔⲆ] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", ⵠ[565], "tempo de vida: 8 days"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⵠⵠⲆ] = ["mato de espinhos", "pica!"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃΔΔ] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", ⵠ[39]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⲆⲆΔ] = ["gelo", "útil para fazer bolo e água"];
		ⲆΔⵠ[ⵠⵠ.ΔΔᐃⲆᐃ] = ["chave inglesa", "para reparar portas, muros e muros com espinho", ⵠ[198]];
		ⲆΔⵠ[ⵠⵠ.ΔΔⲆⲆⲆ] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆᐃⵠ] = ["pele de coelho", "o coelho era tão fofo..."];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⲆⲆ] = ["pele pura", "você é uma fábrica de pão"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔⲆ] = ["pele negra", "você está pronto para fazer algo errado"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⲆⲆ] = ["pele de inverno", "ele só queria um abraço"];
		ⲆΔⵠ[ⵠⵠ.Δⵠⵠⵠᐃ] = ["escala", "é pequeno como peixe!"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠᐃᐃ] = ["pele do kraken", "você não está com medo?"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆΔⵠⲆ] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⵠΔΔ] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠⲆᐃ] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⵠᐃⲆ] = ["linha", "usada para fazer chapéus e mochila"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃᐃⲆᐃ] = ["linha de diamante", "usada para fazer chapéus especiais"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠᐃⲆΔ] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆΔⲆ] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔᐃᐃⵠ] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆⵠⲆ] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔΔⲆⲆ] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⵠᐃ] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆⲆΔ] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔΔ] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠⲆⲆ] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔΔⵠᐃⲆ] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃᐃⵠⵠⲆⵠΔ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", ⵠ[198]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔΔ] = ["picareta de ouro", "pode coletar diamante", "dano: 3", ⵠ[127]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⵠΔΔ] = ["picareta de diamante", "pode coletar tudo", "dano: 4", ⵠ[127]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆᐃΔ] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", ⵠ[127]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔᐃΔ] = ["martelo de pedra", ⵠ[64], "não funciona bem no diamante e na ametista", ⵠ[198], "dano em construções: 20"];
		ⲆΔⵠ[ⵠⵠ.Ⲇᐃᐃᐃᐃ] = ["martelo de ouro", ⵠ[64], "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⵠᐃᐃ] = ["martelo de diamante", ⵠ[64], "dano: 4", "dano em construções: 40"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠΔⵠ] = ["martelo de ametista", ⵠ[64], "dano: 5", "dano em construções: 50"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔⵠⲆ] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔⲆ] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔⵠⵠ] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠᐃΔΔ] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠⵠΔ] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃᐃⲆ] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔᐃΔ] = ["pá de pedral", ⵠ[1], ⵠ[172], ⵠ[198]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⲆᐃ] = ["pá de ouro", ⵠ[1], ⵠ[172], "dano: 3", ⵠ[127]];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆᐃⲆᐃ] = ["pá de diamante", ⵠ[1], ⵠ[172], "dano: 4", ⵠ[127]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔᐃΔ] = ["pá de ametista", ⵠ[1], ⵠ[172], "dano: 5", ⵠ[127]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆΔⵠ] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔΔΔᐃ] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⵠⲆ] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃⵠⲆ] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔⲆΔ] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⵠⵠ] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃΔⵠ] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆᐃΔ] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃΔⲆ] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆᐃⲆ] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆΔΔΔ] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆΔⵠ] = [ⵠ[521], "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⵠⲆⲆ] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
		ⲆΔⵠ[ⵠⵠ.ΔΔᐃΔΔ] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⵠΔ] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⲆⲆ] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆⵠΔ] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⵠⵠΔ] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", ⵠ[309]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠⵠⵠ] = ["esfera do dragão", "dado na questt"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃᐃⲆ] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔΔⲆ] = ["pedra verde", "você não vai trapacear, promete?"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⵠΔ] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠΔᐃ] = ["pedra azul", "para pessoas muito gentis"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆⵠΔ] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", ⵠ[309]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆᐃΔ] = ["coroa laranja", "de repente você se sente muito sortudo", ⵠ[309]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⲆΔΔ] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", ⵠ[309]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⲆⲆᐃ] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⲆⵠ] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆⲆΔ] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔᐃᐃ] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔᐃⲆ] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⵠΔ] = ["regador", "permite regar as plantas", "dano: 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⵠⲆ] = ["mochila", "mais espaço para seus itens!"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠⵠⲆ] = ["papel", "usado para fazer o livro"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃΔⲆᐃ] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆⲆⲆ] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠⲆΔ] = ["fechadura", "permite você trancar seu baú"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔⲆᐃ] = ["chave", "permite destrancar um baú"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆΔⲆ] = [ⵠ[31], "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃⲆⲆ] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⲆⲆ] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔⵠᐃ] = ["telhado", "esconde você um pouco e te esquenta!"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔᐃΔ] = ["poço", "permite encher garrafas", ⵠ[565]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠⲆΔ] = ["muro de madeira", "você sabia que o muro dança?", ⵠ[565]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⵠⵠ] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃᐃᐃᐃ] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", ⵠ[39]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆΔᐃⵠ] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆΔⲆ] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃⵠΔ] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆΔⵠ] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠᐃΔ] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔΔⵠΔ] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⲆⵠⲆ] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⵠⲆ] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", ⵠ[565]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆᐃⵠ] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
		ⲆΔⵠ[ⵠⵠ.Δⵠᐃⵠⵠ] = ["porta de ouro", "você está re-construindo o el dorado?", ⵠ[39]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⲆⲆⵠ] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠᐃΔ] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆⲆΔ] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", ⵠ[565]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔᐃⲆ] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", ⵠ[39]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⵠᐃ] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", ⵠ[39]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆᐃᐃ] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
		ⲆΔⵠ[ΔΔΔ.ⵠⵠΔⲆΔⲆᐃ] = "você não pode entrar no servidor";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃΔΔΔ] = "kickado: ";
		ⲆΔⵠ[ΔΔΔ.ᐃⵠᐃᐃΔⲆⵠ] = "sua chave está em uso por outra pessoa";
		ⲆΔⵠ[ΔΔΔ.ⲆⵠⲆⲆΔⲆⲆ] = "sua chave está errada";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⲆΔᐃⲆ] = "você tem uma versão velha, limpe seu cache";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆΔᐃⲆⵠⲆ] = "não tem mais recursos";
		ⲆΔⵠ[ΔΔΔ.ⵠΔΔΔⵠᐃⵠ] = "você sobreviveu 1 dia";
		ⲆΔⵠ[ΔΔΔ.ΔΔΔΔⵠⵠⲆ] = "você sobreviveu ";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⵠΔⲆⲆⲆ] = " dias";
		ⲆΔⵠ[ΔΔΔ.ⵠⵠᐃᐃΔⵠΔ] = "você está morto ;-;";
		ⲆΔⵠ[ΔΔΔ.ᐃⲆⲆⵠⵠⲆⲆ] = "servidor não pôde achar um local de spawn! spam o botão de play!";
		ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⵠⵠᐃⲆ] = "servidor está cheio! spam o botão de play!";
		ⲆΔⵠ[ΔΔΔ.EMPTY] = "não tem recursos";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃⵠⵠΔ] = "inventário está cheio (botão direito para deletar itens)";
		ⲆΔⵠ[ΔΔΔ.ⲆⲆΔΔⲆⲆᐃ] = " está morto";
		ⲆΔⵠ[ΔΔΔ.ⵠᐃᐃΔΔΔⲆ] = "essa não é a ferramenta certa";
		ⲆΔⵠ[ΔΔΔ.ᐃⲆᐃΔᐃⵠⲆ] = "você entrou no time";
		ⲆΔⵠ[ΔΔΔ.ΔΔⲆⵠΔᐃᐃ] = "você está morto";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔᐃᐃΔΔ] = "entrou no time";
		ⲆΔⵠ[ΔΔΔ.ΔΔⵠᐃᐃᐃⲆ] = "seu time foi destruido";
		ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⲆⵠᐃⵠ] = "você saiu do time";
		ⲆΔⵠ[ΔΔΔ.ⵠΔⲆⲆⵠⲆᐃ] = " saiu do time";
		ⲆΔⵠ[ΔΔΔ.ⵠⵠⵠᐃⲆ] = "alguém roubou sua ficha :>";
		ⲆΔⵠ[ΔΔΔ.ⲆⲆᐃᐃᐃΔᐃ] = "escolha um servidor";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃⵠΔ] = "jogadores";
		ⲆΔⵠ[ΔΔΔ.ᐃΔⲆΔⵠΔᐃ] = "jogadores totais";
		ⲆΔⵠ[ΔΔΔ.ⲆᐃⲆⵠΔᐃΔ] = "jogadores nesse modo";
		ⲆΔⵠ[ΔΔΔ.ᐃΔⵠⲆᐃⲆᐃ] = "Coming soon...";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[227]).placeholder = "Apelido";
		ⵠⲆΔΔ[ⵠⵠⲆⵠ] = ["você morreu sem motivo"];
		ⵠⲆΔΔ[1] = ["você morreu de fome, como o jogo diz"];
		ⵠⲆΔΔ[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
		ⵠⲆΔΔ[ⲆⲆᐃⵠ] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
		ⵠⲆΔΔ[ⲆΔᐃΔⵠ] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
		ⵠⲆΔΔ[ΔⵠΔᐃ] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
		ⵠⲆΔΔ[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
		ⵠⲆΔΔ[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
		ⵠⲆΔΔ[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
		ⵠⲆΔΔ[ΔⲆⲆΔⲆ] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
		ⵠⲆΔΔ[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
		ⵠⲆΔΔ[ⲆΔⲆΔⵠ] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
		ⵠⲆΔΔ[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
		ⵠⲆΔΔ[13] = ["você morreu de sede. melhor beber sua própria urina."];
		ⵠⲆΔΔ[ⵠⵠⲆⵠᐃᐃᐃ] = ["você sabia que você morre afogado? agora você sabe."];
		ⵠⲆΔΔ[ᐃⵠⵠᐃᐃ] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
		ⵠⲆΔΔ[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
		ⵠⲆΔΔ[17] = ["sua pele caindo aos pedaços, o sol te matou."];
		ⵠⲆΔΔ[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
		ⵠⲆΔΔ[19] = ["como vampiro, não chegue perto do alho."];
		ⵠⲆΔΔ[ⵠⵠᐃΔᐃ] = ["você comeu alho como vampiro, o que você esperava?"];
		ⵠⲆΔΔ[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
		ΔᐃΔᐃⲆ = ⵠ[469];
		ⲆⵠⲆⲆᐃⲆᐃ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", ⵠ[361], "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"]
	};

	function ΔⵠⵠΔⲆΔⲆ(ΔΔⵠⲆⲆΔⲆ, ᐃΔᐃᐃⵠⲆᐃ, ⲆⲆⵠᐃᐃⲆᐃ, ΔⵠᐃΔⵠⲆⲆ) {
		ⲆᐃⲆⵠⵠⵠⲆ(ᐃⵠΔⲆⲆ, ΔΔⵠⲆⲆΔⲆ, ᐃΔᐃᐃⵠⲆᐃ, ⲆⲆⵠᐃᐃⲆᐃ, ΔⵠᐃΔⵠⲆⲆ);
		const ᐃⲆΔΔΔΔⵠ = ΔⵠΔᐃΔⵠⵠ(ⲆⲆⵠΔ[ⵠᐃⲆ], ⲆⲆⵠΔ[ΔⵠⲆⲆ]);
		const ᐃΔᐃᐃΔΔᐃ = ⲆⲆⲆᐃⵠᐃⵠ(ⲆⲆⵠΔ[ΔΔⲆᐃ], ⲆⲆⵠΔ[3], ⲆⲆⵠΔ[ⲆⵠⲆⲆ]);
		const Δⵠᐃⵠᐃᐃᐃ = (16807 * (186 + (ᐃⲆΔΔΔΔⵠ ^ ᐃΔᐃᐃΔΔᐃ)) + 0) % 2147483647;
		return Δⵠᐃⵠᐃᐃᐃ
	}
	const ΔⵠΔΔᐃ = ⵠⵠⲆⲆΔⲆᐃ;
	const ᐃᐃⵠⵠⲆⲆⲆ = ⲆᐃᐃᐃΔⲆΔ;

	function ⲆᐃΔᐃⲆΔⵠ(ⲆΔᐃⵠΔⲆⵠ, ΔⲆΔᐃⲆⵠΔ, ⵠΔΔⵠᐃⲆⲆ) {
		const ⵠⵠᐃⵠⲆⲆᐃ = 23894 ^ ⲆΔᐃⵠΔⲆⵠ;
		const ᐃⵠᐃᐃⲆᐃΔ = ΔⲆΔᐃⲆⵠΔ ^ 1069;
		const ⲆᐃᐃΔⲆᐃⲆ = ~(ⵠΔΔⵠᐃⲆⲆ & 5634) & (ⵠΔΔⵠᐃⲆⲆ | 5634);
		const ⵠᐃᐃⲆΔⵠΔ = ᐃΔⲆⵠⵠⵠⲆ(ⵠⵠᐃⵠⲆⲆᐃ, ᐃⵠᐃᐃⲆᐃΔ, ⲆᐃᐃΔⲆᐃⲆ, ⵠⵠᐃⵠⲆⲆᐃ, ᐃⵠᐃᐃⲆᐃΔ);
		const ΔⲆΔⲆᐃΔⵠⲆⲆ = ᐃᐃΔᐃⵠᐃᐃ(ⲆᐃᐃΔⲆᐃⲆ, ⵠⵠᐃⵠⲆⲆᐃ, ᐃⵠᐃᐃⲆᐃΔ, ⲆᐃᐃΔⲆᐃⲆ, ⵠⵠᐃⵠⲆⲆᐃ, ᐃⵠᐃᐃⲆᐃΔ);
		const ᐃⲆᐃⵠΔᐃⵠ = ⵠᐃᐃⲆΔⵠΔ ^ 23748;
		return ᐃⲆᐃⵠΔᐃⵠ
	}

	function ⵠΔⵠΔᐃⲆᐃ(ⵠⵠΔΔⵠⲆΔ, ⲆᐃⲆΔⵠⵠⲆ, ᐃⲆᐃⲆⲆⲆᐃ, ⲆΔᐃⲆΔⵠⵠ) {
		const ΔⵠΔΔᐃⵠᐃ = ((ⵠⵠΔΔⵠⲆΔ + 22162) * 214013 + 2531011) % 4294967296;
		const ⲆⵠΔⲆΔᐃⲆΔⵠ = 32723 ^ ⲆᐃⲆΔⵠⵠⲆ;
		const ᐃΔⲆⵠⲆΔΔⲆᐃ = ((17449 + ᐃⲆᐃⲆⲆⲆᐃ) * 1103515245 + 12345) % 2147483648;
		const ΔΔⲆΔⲆⲆΔᐃⲆ = ~(6321 & ⲆΔᐃⲆΔⵠⵠ) & ⲆΔᐃⲆΔⵠⵠ | ~(ⲆΔᐃⲆΔⵠⵠ & 6321) & 6321;
		const ᐃᐃΔⵠΔΔⲆ = ~(ΔⵠΔΔᐃⵠᐃ & 55367) & 55367 | ~(55367 & ΔⵠΔΔᐃⵠᐃ) & ΔⵠΔΔᐃⵠᐃ;
		const ⵠⵠΔᐃⲆΔⵠ = ~(12300 & ᐃᐃΔⵠΔΔⲆ) & ᐃᐃΔⵠΔΔⲆ | ~(ᐃᐃΔⵠΔΔⲆ & 12300) & 12300;
		const ⵠᐃⵠⵠⲆⵠⵠ = ~(13834 & ⵠⵠΔᐃⲆΔⵠ) & (ⵠⵠΔᐃⲆΔⵠ | 13834);
		return ⵠᐃⵠⵠⲆⵠⵠ
	}

	function ᐃΔⲆᐃᐃⵠⲆ(ΔⵠΔⲆⵠΔⵠ, ⵠⵠᐃⵠⲆⲆⲆ) {
		const ᐃⲆΔⵠΔⵠⲆ = (8 << (ΔⵠΔⲆⵠΔⵠ >> 8 & 255)) + (24 << (ΔⵠΔⲆⵠΔⵠ >> 24 & 255)) + (0 << (ΔⵠΔⲆⵠΔⵠ >> 0 & 255)) + (16 << (ΔⵠΔⲆⵠΔⵠ >> ᐃΔⲆⵠΔ & 255));
		const ⵠⲆⲆΔᐃⵠΔ = ~(ⵠⵠᐃⵠⲆⲆⲆ & 48950) & 48950 | ~(48950 & ⵠⵠᐃⵠⲆⲆⲆ) & ⵠⵠᐃⵠⲆⲆⲆ;
		const ⲆⲆΔⲆⲆⲆᐃ = ᐃᐃⲆᐃᐃᐃⵠ(ᐃⲆΔⵠΔⵠⲆ, ⵠⲆⲆΔᐃⵠΔ, ᐃⲆΔⵠΔⵠⲆ, ⵠⲆⲆΔᐃⵠΔ, ᐃⲆΔⵠΔⵠⲆ);
		const ⲆΔᐃᐃᐃⵠΔᐃΔ = ⲆⲆⲆᐃⵠⲆⵠ(ⵠⲆⲆΔᐃⵠΔ, ᐃⲆΔⵠΔⵠⲆ, ⵠⲆⲆΔᐃⵠΔ);
		const ᐃᐃⵠⵠⲆΔⵠ = ⲆⲆΔⲆⲆⲆᐃ ^ 64251;
		return ᐃᐃⵠⵠⲆΔⵠ
	}
	var ΔΔⲆΔⵠΔΔ = function() {
		ⲆΔⵠ[ⵠⵠ.ⵠⵠᐃⲆΔ] = [ⵠ[57]];
		ⵠⲆΔΔ[22] = [ⵠ[548]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃΔᐃ] = [ⵠ[48], ⵠ[123], ⵠ[308]];
		ⲆΔⵠ[ΔΔΔ.ⲆⲆⲆⵠΔᐃᐃ] = ⵠ[455];
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⵠⲆⵠⵠ] = ⵠ[208];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔΔⵠⵠᐃ] = ⵠ[557];
		ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃᐃⵠᐃⵠ] = ⵠ[296];
		ⲆΔⵠ[ΔΔΔ.POINTS] = ⵠ[140];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔᐃⵠⲆᐃ] = ⵠ[35];
		ⲆΔⵠ[ΔΔΔ.ᐃⲆⵠΔⵠⵠᐃ] = ⵠ[43];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔⵠⵠⵠΔ] = ⵠ[60];
		ⲆΔⵠ[ΔΔΔ.ⲆΔⲆⲆᐃᐃⲆ] = ⵠ[ΔⲆΔⲆᐃ];
		ⲆΔⵠ[ΔΔΔ.ⲆᐃⵠΔΔΔΔ] = ⵠ[527];
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃΔⲆ] = [ⵠ[388], ⵠ[429], ⵠ[461]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⲆᐃ] = [ⵠ[334], ⵠ[224], ⵠ[44], ⵠ[142]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆᐃⲆ] = [ⵠ[504], ⵠ[481], ⵠ[263], ⵠ[525], ⵠ[245], ⵠ[277]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃⲆⲆ] = [ⵠ[271], ⵠ[531], ⵠ[303], ⵠ[21], ⵠ[400]];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[68])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[183];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[80])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[346];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[415])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[441];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[2])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[330];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[390])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[153];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[ⵠⵠΔⵠⲆΔΔ])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[416];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[570])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[351];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[265])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[270];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[356])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[144];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[571])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[ΔᐃᐃⵠⵠⲆⵠ];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[555])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[408];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[492])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[135];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆᐃΔⲆⲆΔᐃ; Ⲇᐃ++) document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[320] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[107];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[93])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[465];
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃⵠⲆ] = ["Mano"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔᐃⵠ] = ["Tierra", "¡Tan limpia como mis manos!"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃΔⵠ] = ["Arena", "¡Tengo arena en mis ojos!"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃΔ] = ["Madera", "¡Nunca hay suficiente!"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔΔ] = ["Piedra", "También llamada roca."];
		ⲆΔⵠ[ⵠⵠ.ᐃΔᐃⲆ] = ["Oro", "Sé generoso, compártelo con los otros"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆᐃ] = ["Diamante", "¿Que vas a hacer con él?"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔᐃ] = ["Amatista", "Es Mauve como Lapa"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠᐃⲆ] = ["Harina", "Usada para cocinar."];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔⵠ] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆᐃⵠⵠ] = ["Tarta", "¡Cumpleaños Feliz!", ⵠ[522]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔⵠⵠ] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⲆⵠ] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠΔΔ] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠΔᐃᐃ] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃΔⵠ] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⲆⵠΔ] = ["Bocadillo", "Sabe como un Krabby Patty", ⵠ[522]];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⵠⵠ] = ["Caramelos", "¡Solo para niños/as!", ⵠ[522]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆⲆᐃ] = ["Caña de Azúcar", "Pruébala, es deliciosa", ⵠ[522]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃΔᐃ] = ["Guirnalda", "Perfecta para decorar el techo"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃΔΔᐃ] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", ⵠ[412], "Tiempo de vida: 8 Días"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔᐃⵠⲆ] = ["Baya", "No es venenosa.", "Comida: 10"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆⵠᐃ] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", ⵠ[412], "Tiempo de vida: 8 Días"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠⵠᐃ] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⲆΔ] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", ⵠ[412], "Tiempo de vida: 8 Días"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆᐃⲆᐃ] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃⲆⵠ] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", ⵠ[412], "Tiempo de Vida: 8 Días"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔⵠ] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠΔⲆ] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", ⵠ[248], "Tiempo de Vida: 8 Días"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⵠⵠⲆ] = ["Planta de Espinas", "¡Te daña!"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃΔΔ] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", ⵠ[483]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⲆⲆΔ] = ["Hielo", "Bueno para hacer tartas y agua"];
		ⲆΔⵠ[ⵠⵠ.ΔΔᐃⲆᐃ] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", ⵠ[261]];
		ⲆΔⵠ[ⵠⵠ.ΔΔⲆⲆⲆ] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆᐃⵠ] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⲆⲆ] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔⲆ] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⲆⲆ] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
		ⲆΔⵠ[ⵠⵠ.Δⵠⵠⵠᐃ] = ["Escamas", "¡Huele a pescado!"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠᐃᐃ] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆΔⵠⲆ] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⵠΔΔ] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠⲆᐃ] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⵠᐃⲆ] = ["Hilo", "Usado para craftear ropa y mochila"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃᐃⲆᐃ] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠᐃⲆΔ] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆΔⲆ] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔᐃᐃⵠ] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆⵠⲆ] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔΔⲆⲆ] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⵠᐃ] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆⲆΔ] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔΔ] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠⲆⲆ] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔΔⵠᐃⲆ] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔΔΔ] = ["Pico de Piedra", "Puede minar hasta oro", ⵠ[261]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔΔ] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", ⵠ[499]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⵠΔΔ] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", ⵠ[499]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆᐃΔ] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", ⵠ[499]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔᐃΔ] = ["Martillo de Piedra", ⵠ[348], "No funciona bien con diamante y amatista", ⵠ[261], "Daño para estructuras: 20"];
		ⲆΔⵠ[ⵠⵠ.Ⲇᐃᐃᐃᐃ] = ["Martillo de Oro", ⵠ[348], "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⵠᐃᐃ] = ["Martillo de Diamante", ⵠ[348], "Daño: 4", "Daño para estructuras: 40"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠΔⵠ] = ["Martillo de Amatista", ⵠ[348], "Daño: 5", "Daño para estructuras: 50"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔⵠⲆ] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔⲆ] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔⵠⵠ] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠᐃΔΔ] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠⵠΔ] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃᐃⲆ] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔᐃΔ] = ["Pala de Piedra", ⵠ[78], ⵠ[371], ⵠ[261]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⲆᐃ] = ["Pala de Oro", ⵠ[78], ⵠ[371], "Daño: 3", ⵠ[499]];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆᐃⲆᐃ] = ["Pala de Diamante", ⵠ[78], ⵠ[371], "Daño: 4", ⵠ[499]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔᐃΔ] = ["Pala de Amatista", ⵠ[78], ⵠ[371], "Daño: 5", ⵠ[499]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆΔⵠ] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔΔΔᐃ] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⵠⲆ] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃⵠⲆ] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔⲆΔ] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⵠⵠ] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃΔⵠ] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆᐃΔ] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃΔⲆ] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆᐃⲆ] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", ⵠ[561]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆΔΔΔ] = ["Orejeras", "Como un abrigo pequeño.", ⵠ[561]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆΔⵠ] = [ⵠ[521], "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⵠⲆⲆ] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
		ⲆΔⵠ[ⵠⵠ.ΔΔᐃΔΔ] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⵠΔ] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", ⵠ[561]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⲆⲆ] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", ⵠ[561]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆⵠΔ] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⵠⵠΔ] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠⵠⵠ] = ["Esfera del Dragón", "Dada en la misión"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃᐃⲆ] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔΔⲆ] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⵠΔ] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠΔᐃ] = ["Gema Azul", "Para gente muy amable"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆⵠΔ] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆᐃΔ] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⲆΔΔ] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⲆⲆᐃ] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⲆⵠ] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆⲆΔ] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔᐃᐃ] = ["Botella Vacia", "La puedes llenar de agua"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔᐃⲆ] = ["Regadera Vacía", "La tienes que llenar de agua"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⵠΔ] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⵠⲆ] = ["Mochila", "¡Mas espacio para tus cosas!"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠⵠⲆ] = ["Hoja", "Usada para hacer un libro"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃΔⲆᐃ] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆⲆⲆ] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠⲆΔ] = ["Cerradura", "Te permite cerrar tu cofre"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔⲆᐃ] = ["Llave", "Te permite abrir un cofre cerrado"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆΔⲆ] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃⲆⲆ] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⲆⲆ] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔⵠᐃ] = ["Techo", "Te esconde un poco y te protege del frío"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔᐃΔ] = ["Fuente", "Permite rellenar botellas", ⵠ[248]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠⲆΔ] = ["Pared de Madera", "Es solo una pared.", ⵠ[248]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⵠⵠ] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃᐃᐃᐃ] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", ⵠ[483]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆΔᐃⵠ] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆΔⲆ] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃⵠΔ] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆΔⵠ] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠᐃΔ] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔΔⵠΔ] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⲆⵠⲆ] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⵠⲆ] = ["Puerta de Madera", "Puedes abrir y cerrarla ", ⵠ[248]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆᐃⵠ] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
		ⲆΔⵠ[ⵠⵠ.Δⵠᐃⵠⵠ] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", ⵠ[483]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⲆⲆⵠ] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠᐃΔ] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆⲆΔ] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", ⵠ[248]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔᐃⲆ] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", ⵠ[483]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⵠᐃ] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", ⵠ[483]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆᐃᐃ] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
		ⲆΔⵠ[ΔΔΔ.ⵠⵠΔⲆΔⲆᐃ] = "No puedes unirte a este servidor";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃΔΔΔ] = "Expulsado: ";
		ⲆΔⵠ[ΔΔΔ.ᐃⵠᐃᐃΔⲆⵠ] = "Tu llave ya está usada";
		ⲆΔⵠ[ΔΔΔ.ⲆⵠⲆⲆΔⲆⲆ] = "Tu llave está mal";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⲆΔᐃⲆ] = "Tienes una versión antigua, limpia tu cache";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆΔᐃⲆⵠⲆ] = "No hay mas recursos";
		ⲆΔⵠ[ΔΔΔ.ⵠΔΔΔⵠᐃⵠ] = "Has sobrevivido 1 día";
		ⲆΔⵠ[ΔΔΔ.ΔΔΔΔⵠⵠⲆ] = "Has sobrevivido ";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⵠΔⲆⲆⲆ] = " días";
		ⲆΔⵠ[ΔΔΔ.ⵠⵠᐃᐃΔⵠΔ] = "Estás muerto ;-;";
		ⲆΔⵠ[ΔΔΔ.ᐃⲆⲆⵠⵠⲆⲆ] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
		ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⵠⵠᐃⲆ] = "El servidor esta lleno, ¡spamea el botón de jugar!";
		ⲆΔⵠ[ΔΔΔ.EMPTY] = "Recurso vacio";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃⵠⵠΔ] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
		ⲆΔⵠ[ΔΔΔ.ⲆⲆΔΔⲆⲆᐃ] = " está muerto";
		ⲆΔⵠ[ΔΔΔ.ⵠᐃᐃΔΔΔⲆ] = "Esta no es la herramienta correcta";
		ⲆΔⵠ[ΔΔΔ.ᐃⲆᐃΔᐃⵠⲆ] = "Te has unido a un equipo";
		ⲆΔⵠ[ΔΔΔ.ΔΔⲆⵠΔᐃᐃ] = "Estás muerto";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔᐃᐃΔΔ] = " se unió al equipo";
		ⲆΔⵠ[ΔΔΔ.ΔΔⵠᐃᐃᐃⲆ] = "Tu equipo ha sido destruido";
		ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⲆⵠᐃⵠ] = "Has dejado el equipo";
		ⲆΔⵠ[ΔΔΔ.ⵠΔⲆⲆⵠⲆᐃ] = " dejo el equipo ";
		ⲆΔⵠ[ΔΔΔ.ⵠⵠⵠᐃⲆ] = "Alguien te robó tu token :>";
		ⲆΔⵠ[ΔΔΔ.ⲆⲆᐃᐃᐃΔᐃ] = "Elige un servidor";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃⵠΔ] = "jugadores";
		ⲆΔⵠ[ΔΔΔ.ᐃΔⲆΔⵠΔᐃ] = "total de jugadores";
		ⲆΔⵠ[ΔΔΔ.ⲆᐃⲆⵠΔᐃΔ] = "Jugadores en este modo de juego";
		ⲆΔⵠ[ΔΔΔ.ᐃΔⵠⲆᐃⲆᐃ] = "Próximamente...";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[227]).placeholder = "Apodo";
		ⵠⲆΔΔ[0] = ["Has muerto por ninguna razón"];
		ⵠⲆΔΔ[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
		ⵠⲆΔΔ[ᐃⲆᐃⵠ] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
		ⵠⲆΔΔ[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
		ⵠⲆΔΔ[ᐃⲆᐃⲆ] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
		ⵠⲆΔΔ[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
		ⵠⲆΔΔ[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
		ⵠⲆΔΔ[ΔᐃᐃᐃⵠΔⲆ] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
		ⵠⲆΔΔ[ⲆΔⲆᐃᐃ] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
		ⵠⲆΔΔ[ᐃⲆⵠⲆΔⵠⵠ] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
		ⵠⲆΔΔ[ᐃⵠᐃΔⲆ] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
		ⵠⲆΔΔ[ᐃⵠΔⲆΔ] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
		ⵠⲆΔΔ[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
		ⵠⲆΔΔ[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
		ⵠⲆΔΔ[ᐃⵠⵠΔⵠΔⵠ] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
		ⵠⲆΔΔ[ΔⵠᐃᐃⲆᐃⵠ] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
		ⵠⲆΔΔ[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
		ⵠⲆΔΔ[17] = ["Tu piel se cayó, el sol te quemó."];
		ⵠⲆΔΔ[ⲆⲆⲆⲆⲆ] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
		ⵠⲆΔΔ[ⵠⵠΔⵠⲆΔΔ] = ["Eres un vampiro, no te quedes cerca del ajo."];
		ⵠⲆΔΔ[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
		ⵠⲆΔΔ[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
		ΔᐃΔᐃⲆ = ⵠ[469];
		ⲆⵠⲆⲆᐃⲆᐃ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", ⵠ[361], "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"]
	};
	var ΔΔᐃⲆΔⵠᐃ = function() {
		ⲆΔⵠ[ⵠⵠ.ⵠⵠᐃⲆΔ] = [ⵠ[57]];
		ⵠⲆΔΔ[22] = [ⵠ[548]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃΔᐃ] = [ⵠ[48], ⵠ[123], ⵠ[308]];
		ⲆΔⵠ[ΔΔΔ.ⲆⲆⲆⵠΔᐃᐃ] = ⵠ[455];
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⵠⲆⵠⵠ] = ⵠ[208];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔΔⵠⵠᐃ] = ⵠ[557];
		ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃᐃⵠᐃⵠ] = ⵠ[296];
		ⲆΔⵠ[ΔΔΔ.POINTS] = ⵠ[140];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔᐃⵠⲆᐃ] = ⵠ[35];
		ⲆΔⵠ[ΔΔΔ.ᐃⲆⵠΔⵠⵠᐃ] = ⵠ[43];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔⵠⵠⵠΔ] = ⵠ[60];
		ⲆΔⵠ[ΔΔΔ.ⲆΔⲆⲆᐃᐃⲆ] = ⵠ[ΔᐃᐃⲆⲆⵠΔ];
		ⲆΔⵠ[ΔΔΔ.ⲆᐃⵠΔΔΔΔ] = ⵠ[527];
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃΔⲆ] = [ⵠ[388], ⵠ[429], ⵠ[461]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⲆᐃ] = [ⵠ[334], ⵠ[224], ⵠ[44], ⵠ[142]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆᐃⲆ] = [ⵠ[504], ⵠ[481], ⵠ[263], ⵠ[525], ⵠ[245], ⵠ[277]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃⲆⲆ] = [ⵠ[271], ⵠ[531], ⵠ[303], ⵠ[21], ⵠ[400]];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[68])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[183];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[80])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[346];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[415])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[441];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[ᐃᐃⲆⲆ])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[330];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[390])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[153];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[19])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[416];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[570])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[351];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[265])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[270];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[356])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[144];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[571])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[255];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[555])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[408];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[492])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[135];
		for (var Ⲇᐃ = ⵠⲆᐃ; Ⲇᐃ < ᐃⲆⲆᐃΔⲆⵠ; Ⲇᐃ++) document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[320] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[107];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[93])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[465];
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃⵠⲆ] = ["Hand"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔᐃⵠ] = ["Boden", "Dreckig!"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃΔⵠ] = ["Sand", "Ich habe es in meine Augen bekommen!"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃΔ] = ["Holz", "Du kannst niemals zu viel haben!"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔΔ] = ["Stein", "Auch Fels gennant"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔᐃⲆ] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆᐃ] = ["Diamant", "Was wirst du daraus machen?"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔᐃ] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠᐃⲆ] = ["Mehl", "wird fürs Backen gebraucht"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔⵠ] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆᐃⵠⵠ] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", ⵠ[156]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔⵠⵠ] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⲆⵠ] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠΔΔ] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠΔᐃᐃ] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃΔⵠ] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⲆⵠΔ] = [ⵠ[458], "Schmeckt wie Krabbenburger", ⵠ[156]];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⵠⵠ] = ["Süßigkeiten", "Nur für Kinder!", ⵠ[156]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆⲆᐃ] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", ⵠ[156]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃΔᐃ] = ["Girlande", "perfekter Schmuck für Dächer"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃΔΔᐃ] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", ⵠ[311], ⵠ[215]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔᐃⵠⲆ] = ["Beere", "Beeren lecker!", "Essen: 10"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆⵠᐃ] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", ⵠ[311], ⵠ[215]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠⵠᐃ] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⲆΔ] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", ⵠ[311], ⵠ[215]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆᐃⲆᐃ] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃⲆⵠ] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", ⵠ[311], ⵠ[215]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔⵠ] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠΔⲆ] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", ⵠ[32], ⵠ[215]];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⵠⵠⲆ] = ["Dornenbusch", "Es sticht!"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃΔΔ] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", ⵠ[433]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⲆⲆΔ] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
		ⲆΔⵠ[ⵠⵠ.ΔΔᐃⲆᐃ] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", ⵠ[386]];
		ⲆΔⵠ[ⵠⵠ.ΔΔⲆⲆⲆ] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆᐃⵠ] = ["Hasenfell", "Der Hase war so süß..."];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⲆⲆ] = ["Klares Fell", "Du bist eine Brotfabrik"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔⲆ] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⲆⲆ] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
		ⲆΔⵠ[ⵠⵠ.Δⵠⵠⵠᐃ] = ["Schuppen", "Es riecht wie Fisch!"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠᐃᐃ] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆΔⵠⲆ] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⵠΔΔ] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠⲆᐃ] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⵠᐃⲆ] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃᐃⲆᐃ] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠᐃⲆΔ] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆΔⲆ] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔᐃᐃⵠ] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆⵠⲆ] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔΔⲆⲆ] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⵠᐃ] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆⲆΔ] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔΔ] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠⲆⲆ] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔΔⵠᐃⲆ] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔΔΔ] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", ⵠ[386]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔΔ] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", ⵠ[226]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⵠΔΔ] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", ⵠ[226]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆᐃΔ] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", ⵠ[226]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔᐃΔ] = ["Steinhammer", ⵠ[ΔⵠΔⵠᐃ], "Funktioniert nicht gut gegen Diamant oder Amethyst", ⵠ[386], "Schaden an Gebäuden: 20"];
		ⲆΔⵠ[ⵠⵠ.Ⲇᐃᐃᐃᐃ] = ["Goldhammer", ⵠ[ᐃᐃⲆⵠⲆ], "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⵠᐃᐃ] = ["Diamanthammer", ⵠ[ⵠⵠΔⲆⵠ], "Schaden: 4", "Schaden an Gebäuden: 40"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠΔⵠ] = ["Amethysthammer", ⵠ[ΔᐃΔᐃᐃ], "Schaden: 5", "Schaden an Gebäuden: 50"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔⵠⲆ] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔⲆ] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔⵠⵠ] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠᐃΔΔ] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠⵠΔ] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃᐃⲆ] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔᐃΔ] = ["Steinschaufel", ⵠ[545], ⵠ[136], ⵠ[386]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⲆᐃ] = ["Goldschaufel", ⵠ[545], ⵠ[136], "Schaden: 3", ⵠ[226]];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆᐃⲆᐃ] = ["Diamantschaufel", ⵠ[545], ⵠ[136], "Schaden: 4", ⵠ[226]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔᐃΔ] = ["Amethystschaufel", ⵠ[545], ⵠ[136], "Schaden: 5", ⵠ[226]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆΔⵠ] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔΔΔᐃ] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⵠⲆ] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃⵠⲆ] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔⲆΔ] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⵠⵠ] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃΔⵠ] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", ⵠ[69]];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆᐃΔ] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", ⵠ[69]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃΔⲆ] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", ⵠ[69]];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆᐃⲆ] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", ⵠ[69]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆΔΔΔ] = ["Ohrwärmer", "Eine Art kleiner chapka.", ⵠ[69]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆΔⵠ] = [ⵠ[521], "Auch Mantel genannt.", ⵠ[69]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⵠⲆⲆ] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
		ⲆΔⵠ[ⵠⵠ.ΔΔᐃΔΔ] = ["Bauer", "Deine Pflanzen wachsen schneller", ⵠ[69]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⵠΔ] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", ⵠ[69]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⲆⲆ] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", ⵠ[69]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆⵠΔ] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⵠⵠΔ] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", ⵠ[160]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠⵠⵠ] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃᐃⲆ] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔΔⲆ] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⵠΔ] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠΔᐃ] = ["Blauer Edelstein", "Für sehr nette Leute"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆⵠΔ] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", ⵠ[160]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆᐃΔ] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", ⵠ[160]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⲆΔΔ] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", ⵠ[160]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⲆⲆᐃ] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⲆⵠ] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆⲆΔ] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔᐃᐃ] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔᐃⲆ] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⵠΔ] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⵠⲆ] = ["Rucksack", "Mehr Platz im Inventar!"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠⵠⲆ] = ["Papier", "Wird fürs Büchermachen verwendet"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃΔⲆᐃ] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆⲆⲆ] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠⲆΔ] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔⲆᐃ] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆΔⲆ] = [ⵠ[31], "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃⲆⲆ] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⲆⲆ] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔⵠᐃ] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔᐃΔ] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", ⵠ[32]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠⲆΔ] = ["Holzwand", "Kennst du den Wandtanz?", ⵠ[32]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⵠⵠ] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃᐃᐃᐃ] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", ⵠ[433]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆΔᐃⵠ] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆΔⲆ] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃⵠΔ] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆΔⵠ] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠᐃΔ] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔΔⵠΔ] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⲆⵠⲆ] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⵠⲆ] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", ⵠ[32]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆᐃⵠ] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
		ⲆΔⵠ[ⵠⵠ.Δⵠᐃⵠⵠ] = ["Goldtür", "Baust du el dorado?", ⵠ[433]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⲆⲆⵠ] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠᐃΔ] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆⲆΔ] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", ⵠ[32]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔᐃⲆ] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", ⵠ[433]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⵠᐃ] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", ⵠ[433]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆᐃᐃ] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
		ⲆΔⵠ[ΔΔΔ.ⵠⵠΔⲆΔⲆᐃ] = "Du kannst diesem Server nicht beitreten";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃΔΔΔ] = "Gekickt: ";
		ⲆΔⵠ[ΔΔΔ.ᐃⵠᐃᐃΔⲆⵠ] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
		ⲆΔⵠ[ΔΔΔ.ⲆⵠⲆⲆΔⲆⲆ] = "Dein Schlüssel ist falsch";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⲆΔᐃⲆ] = "Deine Version ist veraltet, säubere dein Cache";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆΔᐃⲆⵠⲆ] = "Es gibt keine neuen Ressourcen";
		ⲆΔⵠ[ΔΔΔ.ⵠΔΔΔⵠᐃⵠ] = "Du hast einen Tag überlebt";
		ⲆΔⵠ[ΔΔΔ.ΔΔΔΔⵠⵠⲆ] = "Du hast überlebt ";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⵠΔⲆⲆⲆ] = " Tage";
		ⲆΔⵠ[ΔΔΔ.ⵠⵠᐃᐃΔⵠΔ] = "Du bist gestorben ;-;";
		ⲆΔⵠ[ΔΔΔ.ᐃⲆⲆⵠⵠⲆⲆ] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
		ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⵠⵠᐃⲆ] = "Server ist voll! Drücke immer wieder auf spielen!";
		ⲆΔⵠ[ΔΔΔ.EMPTY] = "Ressource ist leer";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃⵠⵠΔ] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
		ⲆΔⵠ[ΔΔΔ.ⲆⲆΔΔⲆⲆᐃ] = " ist gestorben";
		ⲆΔⵠ[ΔΔΔ.ⵠᐃᐃΔΔΔⲆ] = "Das ist nicht das richtige Werkzeug";
		ⲆΔⵠ[ΔΔΔ.ᐃⲆᐃΔᐃⵠⲆ] = "Du bist einem Team beigetreten";
		ⲆΔⵠ[ΔΔΔ.ΔΔⲆⵠΔᐃᐃ] = "Du bist gestorben";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔᐃᐃΔΔ] = " ist dem Team beigetreten";
		ⲆΔⵠ[ΔΔΔ.ΔΔⵠᐃᐃᐃⲆ] = "Dein Team wurde zerstört";
		ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⲆⵠᐃⵠ] = "Du hast das Team verlassen";
		ⲆΔⵠ[ΔΔΔ.ⵠΔⲆⲆⵠⲆᐃ] = " hat das Team verlassen";
		ⲆΔⵠ[ΔΔΔ.ⵠⵠⵠᐃⲆ] = "Jemand hat dein Token gestohlen :>";
		ⲆΔⵠ[ΔΔΔ.ⲆⲆᐃᐃᐃΔᐃ] = "Suche dir ein Server aus";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃⵠΔ] = "Spieler";
		ⲆΔⵠ[ΔΔΔ.ᐃΔⲆΔⵠΔᐃ] = "alle Spieler";
		ⲆΔⵠ[ΔΔΔ.ⲆᐃⲆⵠΔᐃΔ] = "Spieler in diesem Modus";
		ⲆΔⵠ[ΔΔΔ.ᐃΔⵠⲆᐃⲆᐃ] = "Bald verfügbar...";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[227]).placeholder = "Spitzname";
		ⵠⲆΔΔ[0] = ["Du wurdest ohne Grund getötet"];
		ⵠⲆΔΔ[ⲆᐃΔ] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
		ⵠⲆΔΔ[ᐃⲆᐃⵠ] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
		ⵠⲆΔΔ[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
		ⵠⲆΔΔ[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
		ⵠⲆΔΔ[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
		ⵠⲆΔΔ[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
		ⵠⲆΔΔ[ⲆΔⲆⵠⵠ] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
		ⵠⲆΔΔ[ⲆΔΔⲆⵠ] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
		ⵠⲆΔΔ[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
		ⵠⲆΔΔ[ⵠⲆⵠᐃⵠ] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
		ⵠⲆΔΔ[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
		ⵠⲆΔΔ[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
		ⵠⲆΔΔ[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
		ⵠⲆΔΔ[ΔⲆΔⲆᐃ] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
		ⵠⲆΔΔ[ΔⵠᐃᐃⲆᐃⵠ] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
		ⵠⲆΔΔ[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
		ⵠⲆΔΔ[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
		ⵠⲆΔΔ[ⲆᐃᐃᐃΔⲆΔ] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
		ⵠⲆΔΔ[ⵠΔⵠᐃⵠ] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
		ⵠⲆΔΔ[ⲆⵠⲆⵠⲆⲆΔ] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
		ⵠⲆΔΔ[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
		ΔᐃΔᐃⲆ = ⵠ[469];
		ⲆⵠⲆⲆᐃⲆᐃ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", ⵠ[361], "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"]
	};

	function ⵠⲆⲆᐃΔΔⵠ(ΔⲆⲆᐃⵠⵠᐃ, ⲆⲆⲆΔᐃᐃⵠ) {
		ΔⵠᐃᐃⲆⵠᐃ(ᐃⵠΔⲆⲆ, ΔⲆⲆᐃⵠⵠᐃ, ⲆⲆⲆΔᐃᐃⵠ);
		const ΔⵠⲆᐃⵠⲆΔ = ᐃⲆⵠΔⲆᐃⵠ(ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[1]);
		const ᐃᐃⵠᐃΔⵠⵠⵠⵠ = ⵠⲆΔᐃⵠⵠᐃ(ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[ⵠⲆⲆ]);
		const ⵠΔⲆⵠⵠᐃⵠ = ~(ΔⵠⲆᐃⵠⲆΔ & 23369) & ΔⵠⲆᐃⵠⲆΔ | ~(ΔⵠⲆᐃⵠⲆΔ & 23369) & 23369;
		return ⵠΔⲆⵠⵠᐃⵠ
	}
	var ᐃΔⵠᐃⲆΔⲆ = function() {
		ⲆΔⵠ[ⵠⵠ.ⵠⵠᐃⲆΔ] = [ⵠ[57]];
		ⵠⲆΔΔ[22] = [ⵠ[548]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃΔᐃ] = [ⵠ[48], ⵠ[123], ⵠ[308]];
		ⲆΔⵠ[ΔΔΔ.ⲆⲆⲆⵠΔᐃᐃ] = ⵠ[455];
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⵠⲆⵠⵠ] = ⵠ[208];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔΔⵠⵠᐃ] = ⵠ[557];
		ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃᐃⵠᐃⵠ] = ⵠ[296];
		ⲆΔⵠ[ΔΔΔ.POINTS] = ⵠ[140];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔᐃⵠⲆᐃ] = ⵠ[35];
		ⲆΔⵠ[ΔΔΔ.ᐃⲆⵠΔⵠⵠᐃ] = ⵠ[43];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔⵠⵠⵠΔ] = ⵠ[60];
		ⲆΔⵠ[ΔΔΔ.ⲆΔⲆⲆᐃᐃⲆ] = ⵠ[ΔⲆΔⲆᐃ];
		ⲆΔⵠ[ΔΔΔ.ⲆᐃⵠΔΔΔΔ] = ⵠ[527];
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃΔⲆ] = [ⵠ[388], ⵠ[429], ⵠ[461]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⲆᐃ] = [ⵠ[334], ⵠ[224], ⵠ[44], ⵠ[142]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆᐃⲆ] = [ⵠ[504], ⵠ[481], ⵠ[263], ⵠ[525], ⵠ[245], ⵠ[277]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃⲆⲆ] = [ⵠ[271], ⵠ[531], ⵠ[303], ⵠ[21], ⵠ[400]];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[68])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[183];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[80])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[346];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[415])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[441];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[ᐃᐃᐃⵠ])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[330];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[390])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[153];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[19])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[416];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[570])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[351];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[265])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[270];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[356])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[144];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[571])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[ⲆⲆΔΔⵠ];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[555])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[408];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[492])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[135];
		for (var Ⲇᐃ = 0; Ⲇᐃ < 7; Ⲇᐃ++) document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[320] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[107];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[93])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠ[465];
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃⵠⲆ] = ["Ręka"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔᐃⵠ] = ["Ziemia", "Brudna!"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃΔⵠ] = ["Piasek", "Mam go w oczach!"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃΔ] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔΔ] = ["Kamień", "Także nazywany skałą"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔᐃⲆ] = ["Złoto", "Bądź hojny, daj trochę innym"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆᐃ] = ["Diament", "Co z nim zrobisz?"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔᐃ] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠᐃⲆ] = ["Mąka", "Używana w gotowaniu"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔⵠ] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆᐃⵠⵠ] = ["Ciasto", "Raj dla smakoszy", ⵠ[359]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔⵠⵠ] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⲆⵠ] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠΔΔ] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠΔᐃᐃ] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃΔⵠ] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⲆⵠΔ] = ["Kanapka", "Smakuje jak kraboburger", ⵠ[359]];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⵠⵠ] = ["Cukierki", "Tylko dla dzieci!", ⵠ[359]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆⲆᐃ] = ["Laska cukrowa", "Spróbuj, jest przepyszna", ⵠ[359]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃΔᐃ] = ["Girlanda", "Idealna do dekorowania dachów"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃΔΔᐃ] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", ⵠ[118], ⵠ[431]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔᐃⵠⲆ] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆⵠᐃ] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", ⵠ[118], ⵠ[431]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠⵠᐃ] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⲆΔ] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", ⵠ[118], ⵠ[431]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆᐃⲆᐃ] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃⲆⵠ] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", ⵠ[118], ⵠ[431]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔⵠ] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠΔⲆ] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", ⵠ[287], ⵠ[431]];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⵠⵠⲆ] = ["Kolczasty krzew", "Kłuje!"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃΔΔ] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", ⵠ[291]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⲆⲆΔ] = ["Lód", "Użyteczny do robienia ciast i wody"];
		ⲆΔⵠ[ⵠⵠ.ΔΔᐃⲆᐃ] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
		ⲆΔⵠ[ⵠⵠ.ΔΔⲆⲆⲆ] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆᐃⵠ] = ["Skóra królika", "Ten królik był taki słodziutki..."];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⲆⲆ] = ["Skóra", "Jesteś fabryką chleba"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔⲆ] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⲆⲆ] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
		ⲆΔⵠ[ⵠⵠ.Δⵠⵠⵠᐃ] = ["Łuski", "Pachnie jak ryba!"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠᐃᐃ] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆΔⵠⲆ] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⵠΔΔ] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠⲆᐃ] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⵠᐃⲆ] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃᐃⲆᐃ] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠᐃⲆΔ] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆΔⲆ] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔᐃᐃⵠ] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆⵠⲆ] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔΔⲆⲆ] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⵠᐃ] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆⲆΔ] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔΔ] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠⲆⲆ] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔΔⵠᐃⲆ] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔΔΔ] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔΔ] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", ⵠ[232]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⵠΔΔ] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", ⵠ[232]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆᐃΔ] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", ⵠ[232]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔᐃΔ] = ["Kamienny młot", ⵠ[163], "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
		ⲆΔⵠ[ⵠⵠ.Ⲇᐃᐃᐃᐃ] = ["Złoty młot", ⵠ[163], "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⵠᐃᐃ] = ["Diamentowy młot", ⵠ[163], "Obrażenia: 4", "Obrażenia do budowli: 40"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠΔⵠ] = ["Ametystowy młot", ⵠ[163], "Obrażenia: 5", "Obrażenia do budowli: 50"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔⵠⲆ] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔⲆ] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔⵠⵠ] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠᐃΔΔ] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠⵠΔ] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃᐃⲆ] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔᐃΔ] = ["Kamienna łopata", ⵠ[75], ⵠ[7], "Obrażenia: 2"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⲆᐃ] = ["Złota łopata", ⵠ[75], ⵠ[7], "Obrażenia: 3", ⵠ[232]];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆᐃⲆᐃ] = ["Diamentowa łopata", ⵠ[75], ⵠ[ⲆΔᐃⲆᐃ], "Obrażenia: 4", ⵠ[232]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔᐃΔ] = ["Ametystowa łopata", ⵠ[75], ⵠ[ⵠⵠⲆⲆΔⲆᐃ], "Obrażenia: 5", ⵠ[232]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆΔⵠ] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔΔΔᐃ] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⵠⲆ] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃⵠⲆ] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔⲆΔ] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⵠⵠ] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃΔⵠ] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", ⵠ[98]];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆᐃΔ] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", ⵠ[98]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃΔⲆ] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", ⵠ[98]];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆᐃⲆ] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆΔΔΔ] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", ⵠ[98]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆΔⵠ] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⵠⲆⲆ] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
		ⲆΔⵠ[ⵠⵠ.ΔΔᐃΔΔ] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⵠΔ] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⲆⲆ] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", ⵠ[98]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆⵠΔ] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⵠⵠΔ] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", ⵠ[451]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠⵠⵠ] = ["Smocza kula", "Zdobyta podczas zadania"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃᐃⲆ] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔΔⲆ] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⵠΔ] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠΔᐃ] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆⵠΔ] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", ⵠ[451]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆᐃΔ] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", ⵠ[451]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⲆΔΔ] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", ⵠ[451]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⲆⲆᐃ] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⲆⵠ] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆⲆΔ] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔᐃᐃ] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔᐃⲆ] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⵠΔ] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⵠⲆ] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠⵠⲆ] = ["Papier", "Używany w tworzeniu książki"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃΔⲆᐃ] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆⲆⲆ] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠⲆΔ] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔⲆᐃ] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆΔⲆ] = [ⵠ[31], "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃⲆⲆ] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⲆⲆ] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔⵠᐃ] = ["Dach", "Trochę cie ogrzewa i chowa!"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔᐃΔ] = ["Studnia", "Umożliwia napełnienie butelki", ⵠ[287]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠⲆΔ] = ["Drewniany mur", "Znasz taniec ścian?", ⵠ[287]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⵠⵠ] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃᐃᐃᐃ] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", ⵠ[291]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆΔᐃⵠ] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆΔⲆ] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃⵠΔ] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆΔⵠ] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠᐃΔ] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔΔⵠΔ] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⲆⵠⲆ] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⵠⲆ] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", ⵠ[287]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆᐃⵠ] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
		ⲆΔⵠ[ⵠⵠ.Δⵠᐃⵠⵠ] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", ⵠ[291]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⲆⲆⵠ] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠᐃΔ] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆⲆΔ] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", ⵠ[287]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔᐃⲆ] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", ⵠ[291]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⵠᐃ] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", ⵠ[291]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆᐃᐃ] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
		ⲆΔⵠ[ΔΔΔ.ⵠⵠΔⲆΔⲆᐃ] = "Nie możesz dołączyć do tego serwera";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃΔΔΔ] = "Wyrzucony: ";
		ⲆΔⵠ[ΔΔΔ.ᐃⵠᐃᐃΔⲆⵠ] = "Twój klucz jest aktualnie używany przez innego gracza";
		ⲆΔⵠ[ΔΔΔ.ⲆⵠⲆⲆΔⲆⲆ] = "Twój klucz jest nieprawidłowy";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⲆΔᐃⲆ] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆΔᐃⲆⵠⲆ] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
		ⲆΔⵠ[ΔΔΔ.ⵠΔΔΔⵠᐃⵠ] = "Przeżyłeś 1 dzień";
		ⲆΔⵠ[ΔΔΔ.ΔΔΔΔⵠⵠⲆ] = "Przeżyłeś ";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⵠΔⲆⲆⲆ] = " dni";
		ⲆΔⵠ[ΔΔΔ.ⵠⵠᐃᐃΔⵠΔ] = "Jesteś martwy ;-;";
		ⲆΔⵠ[ΔΔΔ.ᐃⲆⲆⵠⵠⲆⲆ] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
		ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⵠⵠᐃⲆ] = "Serwer jest pełny! Spamuj przycisk zagraj!";
		ⲆΔⵠ[ΔΔΔ.EMPTY] = "Źródło jest puste";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃⵠⵠΔ] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
		ⲆΔⵠ[ΔΔΔ.ⲆⲆΔΔⲆⲆᐃ] = " jest martwy";
		ⲆΔⵠ[ΔΔΔ.ⵠᐃᐃΔΔΔⲆ] = "To nie jest właściwe narzędzie";
		ⲆΔⵠ[ΔΔΔ.ᐃⲆᐃΔᐃⵠⲆ] = "Dołączyłeś do drużyny";
		ⲆΔⵠ[ΔΔΔ.ΔΔⲆⵠΔᐃᐃ] = "Jesteś martwy";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔᐃᐃΔΔ] = " dołączył do drużyny";
		ⲆΔⵠ[ΔΔΔ.ΔΔⵠᐃᐃᐃⲆ] = "Twoja drużyna została zniszczona";
		ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⲆⵠᐃⵠ] = " Opuściłeś drużynę";
		ⲆΔⵠ[ΔΔΔ.ⵠΔⲆⲆⵠⲆᐃ] = " opuścił drużynę";
		ⲆΔⵠ[ΔΔΔ.ⵠⵠⵠᐃⲆ] = "Ktoś ukradł twój żeton :>";
		ⲆΔⵠ[ΔΔΔ.ⲆⲆᐃᐃᐃΔᐃ] = "Wybierz serwer";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃⵠΔ] = "graczy";
		ⲆΔⵠ[ΔΔΔ.ᐃΔⲆΔⵠΔᐃ] = "wszystkich graczy";
		ⲆΔⵠ[ΔΔΔ.ⲆᐃⲆⵠΔᐃΔ] = "graczy w tym trybie";
		ⲆΔⵠ[ΔΔΔ.ᐃΔⵠⲆᐃⲆᐃ] = "Już wkrótce...";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[227]).placeholder = "Przydomek";
		ⵠⲆΔΔ[ⵠⵠⲆⵠ] = ["Zostałeś zabity bez powodu"];
		ⵠⲆΔΔ[ⵠⲆⲆ] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
		ⵠⲆΔΔ[ᐃᐃᐃⵠ] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
		ⵠⲆΔΔ[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
		ⵠⲆΔΔ[Ⲇⵠⵠⵠ] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
		ⵠⲆΔΔ[ᐃᐃᐃᐃⵠ] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
		ⵠⲆΔΔ[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
		ⵠⲆΔΔ[ΔᐃⵠⲆΔ] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
		ⵠⲆΔΔ[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
		ⵠⲆΔΔ[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
		ⵠⲆΔΔ[ᐃᐃᐃΔΔ] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
		ⵠⲆΔΔ[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
		ⵠⲆΔΔ[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
		ⵠⲆΔΔ[ΔⲆᐃΔᐃ] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
		ⵠⲆΔΔ[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
		ⵠⲆΔΔ[ⲆΔᐃΔⲆ] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
		ⵠⲆΔΔ[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
		ⵠⲆΔΔ[ⲆⵠⵠⲆΔ] = ["Twoja skóra odpada, słońce cię zabija."];
		ⵠⲆΔΔ[ⲆⵠⲆⵠΔᐃΔ] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
		ⵠⲆΔΔ[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
		ⵠⲆΔΔ[ⵠᐃᐃⵠΔ] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
		ⵠⲆΔΔ[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
		ΔᐃΔᐃⲆ = ⵠ[469];
		ⲆⵠⲆⲆᐃⲆᐃ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", ⵠ[361], "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"]
	};

	function ⲆΔΔⲆΔᐃⲆ(ΔΔⵠⲆⲆᐃΔ, ⲆΔᐃΔⵠⵠⵠ, ᐃⵠᐃⲆΔⵠⲆ, ⵠⵠΔᐃⵠᐃΔ, ᐃⲆΔΔⵠΔⲆ) {
		const ᐃⲆⵠⲆⲆΔΔ = 16192 ^ ΔΔⵠⲆⲆᐃΔ;
		const ⵠᐃⵠᐃΔᐃΔ = (16 << (ⲆΔᐃΔⵠⵠⵠ >> 8 & 255)) + (0 << (ⲆΔᐃΔⵠⵠⵠ >> 16 & 255)) + (24 << (ⲆΔᐃΔⵠⵠⵠ >> 0 & 255)) + (8 << (ⲆΔᐃΔⵠⵠⵠ >> 24 & 255));
		const ᐃⵠΔⵠᐃⵠΔ = ᐃⵠᐃⲆΔⵠⲆ ^ 26031;
		const ⲆᐃⲆΔᐃⲆᐃ = (2531011 + (22811 + ⵠⵠΔᐃⵠᐃΔ) * 214013) % 4294967296;
		const ᐃΔᐃⵠⲆΔᐃ = ((22005 + ᐃⲆΔΔⵠΔⲆ) * 22695477 + 1) % 4294967296;
		const ΔⵠᐃΔΔᐃᐃ = ⵠⲆΔⲆⲆⲆⲆ(ᐃⲆⵠⲆⲆΔΔ, ⵠᐃⵠᐃΔᐃΔ, ᐃⵠΔⵠᐃⵠΔ, ⲆᐃⲆΔᐃⲆᐃ);
		const ΔⲆΔⲆᐃⲆⲆᐃᐃ = ⵠⲆᐃⵠⵠⵠΔ(ᐃΔᐃⵠⲆΔᐃ, ᐃⲆⵠⲆⲆΔΔ);
		const ⵠΔⲆⵠⵠⵠⲆ = ~(ΔⵠᐃΔΔᐃᐃ & 54114) & 54114 | ~(54114 & ΔⵠᐃΔΔᐃᐃ) & ΔⵠᐃΔΔᐃᐃ;
		return ⵠΔⲆⵠⵠⵠⲆ
	}
	var ΔⲆΔⵠΔⵠΔ = function() {
		ⲆΔⵠ[ⵠⵠ.ⵠⵠᐃⲆΔ] = [ⵠ[57]];
		ⵠⲆΔΔ[22] = [ⵠ[548]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃΔᐃ] = [ⵠ[48], ⵠ[123], ⵠ[308]];
		ⲆΔⵠ[ΔΔΔ.ⲆⲆⲆⵠΔᐃᐃ] = " RETOUR AU JEU";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⵠⲆⵠⵠ] = " Partage sur Twitter";
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔΔⵠⵠᐃ] = " Partage sur Facebook";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃᐃⵠᐃⵠ] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
		ⲆΔⵠ[ΔΔΔ.POINTS] = ⵠ[140];
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔᐃⵠⲆᐃ] = ⵠ[35];
		ⲆΔⵠ[ΔΔΔ.ᐃⲆⵠΔⵠⵠᐃ] = "Tués";
		ⲆΔⵠ[ΔΔΔ.ᐃΔΔⵠⵠⵠΔ] = "Jours survécus";
		ⲆΔⵠ[ΔΔΔ.ⲆΔⲆⲆᐃᐃⲆ] = "Mode de construction: Libre. Appuie sur G pour changer";
		ⲆΔⵠ[ΔΔΔ.ⲆᐃⵠΔΔΔΔ] = "Mode de construction: Grille. Appuie sur G pour changer";
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃΔⲆ] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", ⵠ[461]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⲆᐃ] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", ⵠ[44], ⵠ[142]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆᐃⲆ] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", ⵠ[245], ⵠ[277]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃⲆⲆ] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", ⵠ[400]];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[68])[ⲆᐃⲆⵠΔΔⲆ[112]] = "Chrono Quêtes";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[80])[ⲆᐃⲆⵠΔΔⲆ[112]] = "Temps Restant";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[415])[ⲆᐃⲆⵠΔΔⲆ[112]] = " Contraintes";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[2])[ⲆᐃⲆⵠΔΔⲆ[112]] = " Résultat";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[390])[ⲆᐃⲆⵠΔΔⲆ[112]] = " Récompenses";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[Δᐃᐃⵠᐃ])[ⲆᐃⲆⵠΔΔⲆ[112]] = " Collecte 1 Cœur de dragon dans la cave";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[570])[ⲆᐃⲆⵠΔΔⲆ[112]] = " Récolte 1 améthyste";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[265])[ⲆᐃⲆⵠΔΔⲆ[112]] = "Survis sans perdre de vie";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[356])[ⲆᐃⲆⵠΔΔⲆ[112]] = " Ouvre 5 coffres au trésor";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[571])[ⲆᐃⲆⵠΔΔⲆ[112]] = " Sois pacifique";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[555])[ⲆᐃⲆⵠΔΔⲆ[112]] = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[492])[ⲆᐃⲆⵠΔΔⲆ[112]] = " Après 1 jour, survis en hiver";
		for (var Ⲇᐃ = ⵠⵠⵠ; ᐃΔΔⲆⲆⲆᐃ > Ⲇᐃ; Ⲇᐃ++) document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[320] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[112]] = "RÉCOMPENSE!";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[93])[ⲆᐃⲆⵠΔΔⲆ[112]] = " QUITTER";
		ⲆΔⵠ[ⵠⵠ.ΔᐃᐃⵠⲆ] = ["Main"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔᐃⵠ] = ["Terre", "C'est sale!"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃΔⵠ] = ["Sable", "J'en ai dans les yeux"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃΔ] = ["Bois", "Tu n'en auras jamais trop!"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔΔ] = ["Pierre", "Aussi appelée roche"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔᐃⲆ] = ["Or", "Sois généreux, donne en aux autres"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆᐃ] = ["Diamant", "Comme tes yeux! wesh"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔᐃ] = ["Améthyste", "C'est Mauve comme Lapa"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠᐃⲆ] = ["Farine", "Utile pour la cuisine"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔⵠ] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆᐃⵠⵠ] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔⵠⵠ] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⲆⵠ] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠΔΔ] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠΔᐃᐃ] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃΔⵠ] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⲆⵠΔ] = [ⵠ[458], "Le Jambon Beurre vaincra", "Nourriture: 100"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⵠⵠ] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⲆⲆᐃ] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃΔᐃ] = ["Guirlandes", "Utilisable sur les toits"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃΔΔᐃ] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", ⵠ[260], ⵠ[109]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔᐃⵠⲆ] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆⵠᐃ] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", ⵠ[260], ⵠ[109]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠⵠᐃ] = ["Blé", "Peut être transformé en farine dans les moulins"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⲆΔ] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", ⵠ[260], ⵠ[109]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆᐃⲆᐃ] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃᐃⲆⵠ] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", ⵠ[260], ⵠ[109]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔⵠ] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠΔⲆ] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", ⵠ[516], ⵠ[109]];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⵠⵠⲆ] = ["Ronces", "Ça pique!"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃΔΔ] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", ⵠ[486]];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⲆⲆΔ] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
		ⲆΔⵠ[ⵠⵠ.ΔΔᐃⲆᐃ] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", ⵠ[28]];
		ⲆΔⵠ[ⵠⵠ.ΔΔⲆⲆⲆ] = ["Peau de loup", "Il était où le gentil ti Youki?"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆᐃⵠ] = ["Peau de lapin", "Vous êtes un monstre"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⲆⲆ] = ["Fourrure blanche", "Tu es une usine à pain"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔⲆ] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⲆⲆ] = ["Fourrure d'hiver", "Il voulait juste un calin"];
		ⲆΔⵠ[ⵠⵠ.Δⵠⵠⵠᐃ] = ["Écailles", "Ça sent le poisson!"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠᐃᐃ] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆΔⵠⲆ] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⵠΔΔ] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠⲆᐃ] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⵠᐃⲆ] = ["Fil", "Utile pour faire des chapeaux et un sac"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃᐃⲆᐃ] = ["Fil de diamant", "Utile pour faire des chapeaux"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠᐃⲆΔ] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆΔⲆ] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔᐃᐃⵠ] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⲆⵠⲆ] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔΔⲆⲆ] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⵠᐃ] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆⲆΔ] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠΔΔ] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠⲆⲆ] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔΔⵠᐃⲆ] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔΔΔ] = ["Pioche en pierre", "Peut aussi récolter de l'or", ⵠ[28]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔΔ] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⵠΔΔ] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆᐃΔ] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔᐃΔ] = ["Marteau en pierre", ⵠ[244], "Ne marche pas bien sur du diamant et améthyste", ⵠ[28], "Démolition: 20"];
		ⲆΔⵠ[ⵠⵠ.Ⲇᐃᐃᐃᐃ] = ["Marteau en or", ⵠ[244], "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⵠᐃᐃ] = ["Marteau en diamant", ⵠ[244], "Dégâts: 4", "Démolition: 40"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠΔⵠ] = ["Marteau en améthyste", ⵠ[244], "Dégâts: 5", "Démolition: 50"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔⵠⲆ] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠΔⲆ] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔΔⵠⵠ] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠᐃΔΔ] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠⵠΔ] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃᐃᐃⲆ] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔᐃΔ] = ["Pelle en pierre", ⵠ[322], ⵠ[505], ⵠ[28]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⲆᐃ] = ["Pelle en or", ⵠ[322], ⵠ[505], "Dégâts: 3", "Buildings Dégâts: 1"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆᐃⲆᐃ] = ["Pelle en diamant", ⵠ[322], ⵠ[505], "Dégâts: 4", "Buildings Dégâts: 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔᐃΔ] = ["Pelle en améthyste", ⵠ[322], ⵠ[505], "Dégâts: 5", "Buildings Dégâts: 1"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆΔⵠ] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔΔΔᐃ] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃⵠⵠⲆ] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃⵠⲆ] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
		ⲆΔⵠ[ⵠⵠ.ΔΔΔⲆΔ] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⵠⵠ] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠᐃΔⵠ] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", ⵠ[22]];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆᐃΔ] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", ⵠ[22]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃΔⲆ] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", ⵠ[22]];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆᐃⲆ] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", ⵠ[22]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆΔΔΔ] = ["Cache-oreilles", "Une sorte de petite chapka.", ⵠ[22]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆΔⵠ] = [ⵠ[521], "Comment ça va, camarade?", ⵠ[22]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⵠⲆⲆ] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
		ⲆΔⵠ[ⵠⵠ.ΔΔᐃΔΔ] = ["Tunique", "Les plantes poussent plus vite", ⵠ[22]];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⲆⵠΔ] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", ⵠ[22]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠΔⲆⲆ] = ["Tunique d'hiver", "Tes plantes poussent plus vite", ⵠ[22]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆⵠΔ] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⵠⵠΔ] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", ⵠ[178]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠⵠⵠ] = ["Orbe du Dragon", "Donné en Quête"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃᐃⲆ] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔΔⲆ] = ["Gemme verte", "Tu n'as pas triché, promis?"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆΔⵠΔ] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠΔᐃ] = ["Gemme bleue", "Pour les gens trop gentils"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆⵠΔ] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", ⵠ[178]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆᐃΔ] = ["Couronne orange", "Tu te sens soudainement très chanceux", ⵠ[178]];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⲆΔΔ] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", ⵠ[178]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⲆⲆᐃ] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
		ⲆΔⵠ[ⵠⵠ.ⲆΔⵠⲆⵠ] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆⲆΔ] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔᐃᐃ] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠΔᐃⲆ] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
		ⲆΔⵠ[ⵠⵠ.ΔⲆⵠⵠΔ] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠᐃⵠⲆ] = ["Sac", "Plus de place dans ton inventaire!"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃⵠⵠⲆ] = ["Papier", "Pour fabriquer toute sorte d'objets"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃΔⲆᐃ] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔⲆⲆⲆ] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⵠⲆΔ] = ["Cadenas", "Pour verrouiller un coffre"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔⲆᐃ] = ["Clé", "Pour déverrouiller un coffre"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃⲆΔⲆ] = [ⵠ[31], "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
		ⲆΔⵠ[ⵠⵠ.ΔⵠᐃⲆⲆ] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⲆⲆ] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
		ⲆΔⵠ[ⵠⵠ.ⲆᐃΔⵠᐃ] = ["Toit", "Te cache un peu et te réchauffe"];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔᐃΔ] = ["Puit", "Permet de remplir des bouteilles", ⵠ[516]];
		ⲆΔⵠ[ⵠⵠ.ΔⵠⵠⲆΔ] = ["Mur en bois", "Tu connais la danse des murs?", ⵠ[516]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⵠⵠ] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
		ⲆΔⵠ[ⵠⵠ.ᐃᐃᐃᐃᐃ] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", ⵠ[486]];
		ⲆΔⵠ[ⵠⵠ.ΔⲆΔᐃⵠ] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆΔⲆ] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆᐃⵠΔ] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⲆΔⵠ] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
		ⲆΔⵠ[ⵠⵠ.ⵠⵠⵠᐃΔ] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
		ⲆΔⵠ[ⵠⵠ.ⵠΔΔⵠΔ] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⲆⵠⲆ] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
		ⲆΔⵠ[ⵠⵠ.ᐃΔⲆⵠⲆ] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", ⵠ[516]];
		ⲆΔⵠ[ⵠⵠ.ⵠⲆⲆᐃⵠ] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
		ⲆΔⵠ[ⵠⵠ.Δⵠᐃⵠⵠ] = ["Porte en or", "Tu reconstruis l'el dorado?", ⵠ[486]];
		ⲆΔⵠ[ⵠⵠ.ⲆⲆⲆⲆⵠ] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠⵠᐃΔ] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
		ⲆΔⵠ[ⵠⵠ.ᐃⲆⲆⲆΔ] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", ⵠ[516]];
		ⲆΔⵠ[ⵠⵠ.ᐃⵠΔᐃⲆ] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", ⵠ[486]];
		ⲆΔⵠ[ⵠⵠ.ΔᐃΔⵠᐃ] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", ⵠ[486]];
		ⲆΔⵠ[ⵠⵠ.ⲆⵠⲆᐃᐃ] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
		ⲆΔⵠ[ΔΔΔ.ⵠⵠΔⲆΔⲆᐃ] = "Tu ne peux pas rejoindre le serveur";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃΔΔΔ] = "Expulsé: ";
		ⲆΔⵠ[ΔΔΔ.ᐃⵠᐃᐃΔⲆⵠ] = "Ta clé est déjà utilisée par quelqu'un d'autre";
		ⲆΔⵠ[ΔΔΔ.ⲆⵠⲆⲆΔⲆⲆ] = "Ta clé est fausse";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⲆΔᐃⲆ] = "Tu as une vieille version, rafraichis tes caches";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆΔᐃⲆⵠⲆ] = "Il n'y a plus de nouvelles ressources";
		ⲆΔⵠ[ΔΔΔ.ⵠΔΔΔⵠᐃⵠ] = "Tu as survécu 1 jour";
		ⲆΔⵠ[ΔΔΔ.ΔΔΔΔⵠⵠⲆ] = "Tu as survécu ";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⵠΔⲆⲆⲆ] = " jours";
		ⲆΔⵠ[ΔΔΔ.ⵠⵠᐃᐃΔⵠΔ] = "Tu es mort ;-;";
		ⲆΔⵠ[ΔΔΔ.ᐃⲆⲆⵠⵠⲆⲆ] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
		ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⵠⵠᐃⲆ] = "Le serveur est complet! Spam le bouton jouer";
		ⲆΔⵠ[ΔΔΔ.EMPTY] = "Cette ressource est vide";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃⵠⵠΔ] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
		ⲆΔⵠ[ΔΔΔ.ⲆⲆΔΔⲆⲆᐃ] = " est mort";
		ⲆΔⵠ[ΔΔΔ.ⵠᐃᐃΔΔΔⲆ] = "Ce n'est pas le bon outil";
		ⲆΔⵠ[ΔΔΔ.ᐃⲆᐃΔᐃⵠⲆ] = "Tu as rejoins une équipe";
		ⲆΔⵠ[ΔΔΔ.ΔΔⲆⵠΔᐃᐃ] = "Tu es mort";
		ⲆΔⵠ[ΔΔΔ.ᐃᐃΔᐃᐃΔΔ] = " a rejoint l'équipe";
		ⲆΔⵠ[ΔΔΔ.ΔΔⵠᐃᐃᐃⲆ] = "Ton équipe a été détruite";
		ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⲆⵠᐃⵠ] = "Tu as quitté l'équipe";
		ⲆΔⵠ[ΔΔΔ.ⵠΔⲆⲆⵠⲆᐃ] = " a quitté l'équipe";
		ⲆΔⵠ[ΔΔΔ.ⵠⵠⵠᐃⲆ] = "Quelqu'un a volé ton token :>";
		ⲆΔⵠ[ΔΔΔ.ⲆⲆᐃᐃᐃΔᐃ] = "Choisis un serveur";
		ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃⵠΔ] = "joueurs";
		ⲆΔⵠ[ΔΔΔ.ᐃΔⲆΔⵠΔᐃ] = "joueurs";
		ⲆΔⵠ[ΔΔΔ.ⲆᐃⲆⵠΔᐃΔ] = "joueurs dans ce mode";
		ⲆΔⵠ[ΔΔΔ.ᐃΔⵠⲆᐃⲆᐃ] = "Bientôt...";
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[227]).placeholder = "Surnom";
		ⵠⲆΔΔ[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
		ⵠⲆΔΔ[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
		ⵠⲆΔΔ[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
		ⵠⲆΔΔ[ᐃⵠΔⵠ] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
		ⵠⲆΔΔ[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
		ⵠⲆΔΔ[ΔΔⲆⲆⵠ] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
		ⵠⲆΔΔ[ⲆΔⵠΔΔ] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
		ⵠⲆΔΔ[Δᐃⵠᐃⵠ] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
		ⵠⲆΔΔ[8] = ["Cet ours voulait juste un câlin."];
		ⵠⲆΔΔ[ᐃᐃᐃᐃᐃⲆᐃ] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
		ⵠⲆΔΔ[ⵠΔΔΔⵠ] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
		ⵠⲆΔΔ[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
		ⵠⲆΔΔ[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
		ⵠⲆΔΔ[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
		ⵠⲆΔΔ[ⲆⵠⲆᐃᐃᐃⲆ] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
		ⵠⲆΔΔ[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
		ⵠⲆΔΔ[16] = ["Un kraken a 'kraké' tes os."];
		ⵠⲆΔΔ[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
		ⵠⲆΔΔ[ⵠᐃⵠⵠᐃ] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
		ⵠⲆΔΔ[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
		ⵠⲆΔΔ[ⵠⵠᐃΔᐃ] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
		ⵠⲆΔΔ[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
		ΔᐃΔᐃⲆ = ⵠ[469];
		ⲆⵠⲆⲆᐃⲆᐃ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", ⵠ[361], "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"]
	};
	const ⵠΔᐃᐃⲆΔⲆ = ᐃᐃᐃᐃⲆΔᐃ;
	var ⲆΔⵠ = [];
	for (var Ⲇᐃ = ⵠᐃⲆⲆ; Ⲇᐃ < ᐃⵠ; Ⲇᐃ++) ⲆΔⵠ[Ⲇᐃ] = "";
	var ⵠⲆΔΔ = [];
	$(".md-languages").on(ⵠ[41], (function() {
		$(this).toggleClass(ⵠ[165])
	}));
	$(".md-languages ul li").on(ⵠ[41], (function() {
		var ⲆⵠⲆ = $(this).text();
		if (ⲆⵠⲆ === "English") ᐃⲆᐃΔⲆᐃⲆ();
		else if (ⲆⵠⲆ === "Français") ΔⲆΔⵠΔⵠΔ();
		else if ("Deutsch" === ⲆⵠⲆ) ΔΔᐃⲆΔⵠᐃ();
		else if ("Español" === ⲆⵠⲆ) ΔΔⲆΔⵠΔΔ();
		else if (ⲆⵠⲆ === "Português") ΔΔΔᐃⵠᐃᐃ();
		else if (ⲆⵠⲆ === "Русский") ⵠᐃΔⵠᐃⲆᐃ();
		else if (ⲆⵠⲆ === "Polski") ᐃΔⵠᐃⲆΔⲆ();
		ⲆⵠᐃⲆᐃ = [];
		ᐃⲆⵠ.ᐃⵠⲆᐃ.label = [];
		$(".md-languages ul li").removeClass(ⵠ[165]);
		$(this).addClass(ⵠ[165]);
		$(ⵠ[325]).text(ⲆⵠⲆ)
	}));
	const ⲆⲆⲆⲆ = ᐃᐃΔⵠ;
	const ⵠⵠⵠΔ = ⵠᐃⲆ;
	var ΔᐃⲆⵠⵠ = "EN";
	const ΔᐃΔᐃ = ΔΔΔⵠ;
	var ᐃⲆᐃᐃᐃⵠⵠ = navigator.language || navigator.userLanguage;
	switch (ᐃⲆᐃᐃᐃⵠⵠ) {
		case "ru":
			ΔᐃⲆⵠⵠ = "RU";
			break;
		case "en":
			ΔᐃⲆⵠⵠ = "EN";
			break;
		case "es":
			ΔᐃⲆⵠⵠ = "SP";
			break;
		case "fr":
			ΔᐃⲆⵠⵠ = "FR";
			break;
		case "pl":
			ΔᐃⲆⵠⵠ = "PL";
			break;
		case "de":
			ΔᐃⲆⵠⵠ = "DE";
			break;
		case "pt":
			ΔᐃⲆⵠⵠ = "PT";
			break
	}
	var ᐃΔΔⲆⲆΔᐃ;
	if ("FR" === ΔᐃⲆⵠⵠ) {
		$(ⵠ[325]).text("Français");
		ᐃΔΔⲆⲆΔᐃ = ΔⲆΔⵠΔⵠΔ
	} else if (ΔᐃⲆⵠⵠ === "PL") {
		$(ⵠ[325]).text("Polski");
		ᐃΔΔⲆⲆΔᐃ = ᐃΔⵠᐃⲆΔⲆ
	} else if ("PT" === ΔᐃⲆⵠⵠ) {
		$(ⵠ[325]).text("Português");
		ᐃΔΔⲆⲆΔᐃ = ΔΔΔᐃⵠᐃᐃ
	} else if (ΔᐃⲆⵠⵠ === "SP") {
		$(ⵠ[325]).text("Español");
		ᐃΔΔⲆⲆΔᐃ = ΔΔⲆΔⵠΔΔ
	} else if (ΔᐃⲆⵠⵠ === "RU") {
		$(ⵠ[325]).text("Русский");
		ᐃΔΔⲆⲆΔᐃ = ⵠᐃΔⵠᐃⲆᐃ
	} else ΔᐃⲆⵠⵠ === "DE" ? ($(ⵠ[325]).text("Deutsch"), ᐃΔΔⲆⲆΔᐃ = ΔΔᐃⲆΔⵠᐃ) : ($(ⵠ[325]).text("English"), ᐃΔΔⲆⲆΔᐃ = ᐃⲆᐃΔⲆᐃⲆ);
	ⵠᐃ = {
		"ⵠᐃⵠⵠΔⵠⵠⲆΔ": "img/logo.png",
		"ΔᐃⲆᐃΔⵠΔ": "img/mapday.png",
		"ⵠⵠΔΔⵠᐃⵠ": "img/mapnight.png",
		"ΔᐃⵠⵠΔⵠᐃⵠⵠ": "img/bigzday.png",
		"ᐃⵠΔⲆⲆᐃᐃᐃⵠ": "img/bigznight.png",
		"ⵠⵠⵠΔΔⲆⵠ": "img/bigday-river1.png",
		"ⵠⲆΔΔΔᐃᐃⵠΔ": "img/bigday-lake.png",
		"ᐃⵠⲆᐃⵠᐃⲆ": "img/bigday-berry.png",
		"ⵠᐃΔΔΔⵠⵠ": "img/bigday-stone1.png",
		"ᐃⵠⵠⵠⵠΔΔ": "img/bigday-stone2.png",
		"ⲆⵠᐃΔⵠⵠΔ": "img/bigday-gold1.png",
		"ⵠⲆⲆⵠⲆΔⵠ": "img/bigday-gold2.png",
		"ᐃⲆΔⲆⵠᐃΔ": "img/bigday-emerald1.png",
		"ᐃⵠⵠΔⲆⵠⲆ": "img/bigday-emerald2.png",
		"ⵠⲆᐃⲆⵠⵠⵠ": "img/bigday-amethyst.png",
		"ᐃΔᐃⲆⲆΔⲆ": "img/bigday-bear.png",
		"ΔᐃⲆᐃⵠᐃΔ": "img/bigday-cave.png",
		"ⲆⲆΔⵠᐃⲆⲆ": "img/bigday-diamond.png",
		"ⲆⵠᐃᐃⲆⲆⲆ": "img/bigday-island.png",
		"ΔⲆⲆⵠⵠⲆᐃ": "img/bigday-reidite.png",
		"ᐃΔⲆⲆⵠΔᐃ": "img/bigday-spider.png",
		"ⵠⵠⲆᐃⵠᐃⵠ": "img/bigday-wolf.png",
		"ⵠΔΔⵠᐃⵠᐃ": "img/bigday-fir-tree.png",
		"ⲆΔⵠᐃΔᐃΔ": "img/bigday-fox.png",
		"ⵠⲆᐃⲆᐃⲆΔ": "img/bigday-kraken.png",
		"ΔᐃΔΔⵠⲆᐃ": "img/bigday-piranha.png",
		"ⲆΔᐃΔⲆⵠⵠ": "img/bigday-cactus.png",
		"ΔⲆⲆⲆᐃⲆⵠ": "img/bigday-magma.png",
		"ⲆⲆᐃⵠΔΔΔ": "img/bigday-river1.png",
		"ⲆΔΔᐃⵠⲆΔⵠᐃ": "img/bignight-lake.png",
		"ᐃⵠⲆᐃΔᐃⲆⲆⲆ": "img/bignight-berry.png",
		"ⵠᐃⵠⵠΔⵠⲆ": "img/bignight-stone1.png",
		"ⲆΔⵠⵠⵠⵠΔ": "img/bignight-stone2.png",
		"ᐃΔⵠⵠⲆⵠⲆ": "img/bignight-gold1.png",
		"ⲆΔⲆΔⵠΔⲆ": "img/bignight-gold2.png",
		"ΔΔⲆΔⵠⲆⵠ": "img/bignight-emerald1.png",
		"ⲆᐃΔⵠᐃᐃⲆ": "img/bignight-emerald2.png",
		"ΔΔΔΔΔⲆᐃ": "img/bignight-amethyst.png",
		"ΔᐃΔᐃΔⵠᐃ": "img/bignight-bear.png",
		"ᐃⵠⵠΔⲆΔⲆ": "img/bignight-cave.png",
		"ΔⲆⵠⵠΔΔᐃ": "img/bignight-diamond.png",
		"ⵠⲆⲆⲆⵠⲆⲆ": "img/bignight-island.png",
		"ᐃⲆⲆΔᐃᐃⵠ": "img/bignight-reidite.png",
		"ⵠⵠⲆⲆΔᐃᐃ": "img/bignight-spider.png",
		"ΔΔᐃᐃⲆᐃΔ": "img/bignight-wolf.png",
		"ᐃⵠⲆⲆᐃⲆᐃ": "img/bignight-fir-tree.png",
		"ⵠⲆᐃΔⲆΔΔ": "img/bignight-fox.png",
		"ᐃᐃⲆᐃᐃⵠΔ": "img/bignight-kraken.png",
		"Δᐃᐃⵠⵠⵠⵠ": "img/bignight-piranha.png",
		"ⵠⲆΔⲆᐃⲆⵠ": "img/bignight-cactus.png",
		"ᐃⵠΔⵠⲆΔᐃ": "img/bignight-magma.png",
		"ⵠΔⵠΔⵠⲆⵠ": "img/bigday-desert.png",
		"ΔⵠⲆΔᐃⵠⲆ": "img/bigday-winter.png",
		"ⵠⵠᐃΔΔⲆⲆ": "img/bigday-lava.png",
		"ᐃΔΔⲆᐃΔΔ": "img/bigday-forest.png",
		"ΔΔⵠⵠΔᐃᐃ": "img/bignight-desert.png",
		"ⲆΔⵠⵠⵠᐃⵠ": "img/bignight-winter.png",
		"ΔⵠⵠⲆⵠⲆΔ": "img/bignight-lava.png",
		"ᐃᐃⵠΔΔΔⲆ": "img/bignight-forest.png",
		"ΔᐃⲆΔΔⵠᐃ": "img/day-river-wave.png",
		"Δᐃⵠᐃⵠᐃⵠ": "img/night-river-wave.png",
		"ΔⲆⲆⵠΔⲆⲆ": "img/day-fog0.png",
		"ⲆⲆⵠⲆⵠⵠΔ": "img/day-fog1.png",
		"ⲆᐃⵠⵠᐃⵠΔ": "img/day-fog2.png",
		"ᐃⵠᐃᐃΔⵠᐃ": "img/night-fog0.png",
		"ΔΔᐃᐃᐃᐃⵠ": "img/night-fog1.png",
		"ⵠᐃⵠⵠᐃⲆᐃ": "img/night-fog2.png",
		"ⲆΔⵠᐃΔⲆᐃ": "img/day-fogdesert0.png",
		"ΔᐃᐃⵠⵠⲆᐃ": "img/day-fogdesert1.png",
		"ᐃⵠᐃⵠΔⲆΔ": "img/day-fogdesert2.png",
		"ⵠⲆⵠⵠᐃΔᐃ": "img/night-fogdesert0.png",
		"ⲆⲆᐃΔⲆᐃⵠ": "img/night-fogdesert1.png",
		"ΔⲆⲆⲆⲆΔⲆ": "img/night-fogdesert2.png",
		"ⵠᐃⵠⵠᐃΔᐃ": "img/day-cross-server.png",
		"ᐃΔⲆⲆⵠᐃᐃ": "img/day-here-server.png",
		"ΔᐃⲆⲆⵠⲆΔ": "img/day-finish-server.png",
		"ⲆΔⵠΔΔᐃᐃ": "img/day-item-server.png",
		"ⲆᐃⲆⲆΔⵠⵠ": "img/day-skull-server.png",
		"ⲆΔⲆⲆⵠⲆᐃ": "img/night-cross-server.png",
		"ⵠᐃⲆⲆΔΔⲆ": "img/night-here-server.png",
		"ᐃⵠΔΔᐃᐃⵠ": "img/night-finish-server.png",
		"ᐃⲆΔⵠⲆΔⵠ": "img/night-item-server.png",
		"ⲆⲆⲆⲆΔΔⲆ": "img/night-skull-server.png",
		"ⲆⵠⲆⲆⵠⲆΔ": "img/day-reidite0.png",
		"ᐃⵠⵠᐃⲆΔᐃ": "img/night-reidite0.png",
		"ⵠΔΔᐃⵠⲆᐃ": "img/day-reidite1.png",
		"ⵠᐃΔⵠᐃⲆⵠ": "img/night-reidite1.png",
		"ⲆᐃΔᐃΔᐃⲆ": "img/day-reidite2.png",
		"ᐃⵠⵠΔᐃⲆⵠ": "img/night-reidite2.png",
		"ᐃⲆⵠᐃⵠΔᐃ": "img/day-lava1.png",
		"ᐃᐃⲆΔΔⲆΔ": "img/night-lava1.png",
		"ᐃΔᐃⵠΔᐃᐃ": "img/day-lava2.png",
		"ᐃⵠⲆᐃⵠⵠⲆ": "img/night-lava2.png",
		"ⲆᐃⲆᐃⵠⵠΔ": "img/day-lava3.png",
		"ᐃΔΔᐃΔⵠⲆ": "img/night-lava3.png",
		"ΔⵠⲆⵠΔⲆⲆ": "img/day-lava4.png",
		"ⲆⲆΔⲆⵠⵠⲆ": "img/night-lava4.png",
		"ⵠᐃᐃⲆⲆᐃⲆ": "img/day-lava5.png",
		"ⲆΔΔⲆᐃⵠⲆ": "img/night-lava5.png",
		"ⲆᐃᐃΔⲆΔΔ": "img/day-lava6.png",
		"ᐃⵠⲆⵠΔⲆΔ": "img/night-lava6.png",
		"ⵠⵠⵠⵠᐃⲆⲆ": "img/day-lava-ground1.png",
		"ⵠⵠⲆⵠΔⵠⲆ": "img/night-lava-ground1.png",
		"ΔΔⲆΔᐃⵠⲆ": "img/day-lava-ground2.png",
		"ⵠⵠⲆⲆᐃᐃᐃ": "img/night-lava-ground2.png",
		"ᐃⲆⲆⵠⵠⵠⵠ": "img/day-lava-ground3.png",
		"ᐃⵠᐃⵠⲆⵠᐃ": "img/night-lava-ground3.png",
		"ⲆΔΔΔᐃᐃⲆ": "img/day-lava-ground4.png",
		"ΔⵠⲆΔΔⵠΔ": "img/night-lava-ground4.png",
		"ⵠᐃⲆⵠⵠᐃⲆ": "img/day-lava-ground5.png",
		"ΔΔᐃⵠᐃᐃⲆ": "img/night-lava-ground5.png",
		"ⲆᐃᐃᐃⵠΔᐃ": "img/day-lava-ground6.png",
		"ⲆⵠⵠᐃⵠⲆⲆ": "img/night-lava-ground6.png",
		"ⲆⲆΔⲆΔΔⲆ": "img/day-fire-mob.png",
		"ⵠᐃΔΔⲆᐃⲆ": "img/night-fire-mob.png",
		"ⲆᐃᐃᐃᐃⲆᐃ": "img/hurt-fire-mob.png",
		"ᐃΔᐃⲆᐃΔⵠ": "img/day-diamond-protection.png",
		"ⲆΔᐃΔΔⲆⵠ": "img/night-diamond-protection.png",
		"ⲆⵠⵠⲆⲆⵠⲆ": "img/day-hand-diamond-protection.png",
		"ᐃᐃⲆⵠᐃⵠⲆ": "img/night-hand-diamond-protection.png",
		"ⲆΔᐃⲆⲆᐃⵠ": "img/inv-diamond-protection-out.png",
		"ⲆⵠᐃⲆΔⵠⵠ": "img/inv-diamond-protection-in.png",
		"ΔΔᐃᐃᐃᐃᐃ": "img/inv-diamond-protection-click.png",
		"ΔⲆⵠΔⲆⵠⵠ": "img/day-amethyst-protection.png",
		"ᐃΔᐃⲆᐃⲆᐃ": "img/night-amethyst-protection.png",
		"ⵠᐃⵠⵠⵠΔⲆⵠⵠ": "img/day-hand-amethyst-protection.png",
		"ΔⵠⵠᐃⲆᐃⲆⵠᐃ": "img/night-hand-amethyst-protection.png",
		"ᐃΔⵠⲆⲆⵠⵠ": "img/inv-amethyst-protection-out.png",
		"ΔⲆⲆᐃΔⵠⲆ": "img/inv-amethyst-protection-in.png",
		"ᐃΔᐃⵠΔᐃⵠ": "img/inv-amethyst-protection-click.png",
		"ΔⲆⵠⵠⵠⵠΔ": "img/day-reidite-sword.png",
		"ⲆᐃⲆΔᐃᐃⵠ": "img/night-reidite-sword.png",
		"ⲆΔᐃⲆᐃⵠⵠ": "img/inv-reidite-sword-out.png",
		"ⵠᐃⲆⲆⲆᐃΔ": "img/inv-reidite-sword-in.png",
		"ΔΔΔⲆⲆᐃᐃ": "img/inv-reidite-sword-click.png",
		"ⵠΔⲆⵠᐃᐃᐃ": "img/inv-reidite-out.png",
		"ⵠⵠΔⲆⲆⲆⵠ": "img/inv-reidite-in.png",
		"ᐃⲆΔΔⵠΔᐃ": "img/inv-reidite-click.png",
		"ⲆΔⵠⲆᐃᐃⵠ": "img/inv-flame-out.png",
		"ΔⲆᐃⵠΔⵠΔ": "img/inv-flame-in.png",
		"ΔΔⲆⲆᐃΔΔ": "img/inv-flame-click.png",
		"ⵠⵠⵠⵠⲆᐃᐃ": "img/day-magma-buble0.png",
		"ΔⲆᐃΔΔΔΔ": "img/night-magma-buble0.png",
		"ⲆᐃⵠⵠⲆᐃΔ": "img/day-magma-buble1.png",
		"ⵠⲆΔⲆΔⲆΔ": "img/night-magma-buble1.png",
		"ᐃⵠⲆΔΔᐃΔ": "img/day-magma-buble2.png",
		"ᐃΔᐃⵠⲆΔⲆ": "img/night-magma-buble2.png",
		"ᐃⵠΔⵠΔⵠⵠ": "img/day-lava-dragon.png",
		"ⵠⵠⵠⵠⲆⲆⲆ": "img/night-lava-dragon.png",
		"ⵠᐃΔΔⵠⵠⵠⲆᐃ": "img/day-fire-dragon.png",
		"ᐃⵠᐃΔⵠⲆΔⵠⵠ": "img/night-fire-dragon.png",
		"ⲆΔⵠⲆⲆⵠΔ": "img/hurt-lava-dragon.png",
		"ⵠΔΔΔᐃΔᐃ": "img/day-lava-wing-left.png",
		"ᐃᐃᐃΔΔΔᐃ": "img/night-lava-wing-left.png",
		"ΔΔⵠΔⵠⵠᐃ": "img/day-lava-wing-right.png",
		"ᐃᐃΔΔᐃⲆⲆ": "img/night-lava-wing-right.png",
		"ⵠⵠⵠΔⵠᐃⵠ": "img/hurt-lava-wing-left.png",
		"ΔⲆⵠΔΔⲆΔ": "img/hurt-lava-wing-right.png",
		"ⵠⵠⵠΔΔⲆⲆ": "img/day-reidite-spear.png",
		"ⲆⲆⵠΔⲆⵠᐃ": "img/night-reidite-spear.png",
		"ᐃᐃⲆⵠⵠΔᐃ": "img/inv-reidite-spear-out.png",
		"ⲆᐃⲆⵠᐃᐃᐃ": "img/inv-reidite-spear-in.png",
		"ⲆᐃⲆᐃⵠᐃᐃ": "img/inv-reidite-spear-click.png",
		"ΔᐃᐃⲆⵠⵠⲆ": "img/day-reidite-helmet.png",
		"ΔΔᐃⵠⲆᐃΔ": "img/night-reidite-helmet.png",
		"ᐃⲆⲆΔᐃⲆΔ": "img/inv-reidite-helmet-out.png",
		"ⵠΔΔⲆᐃⲆⵠ": "img/inv-reidite-helmet-in.png",
		"ΔⲆⵠⵠᐃⲆⵠ": "img/inv-reidite-helmet-click.png",
		"ᐃⲆΔΔᐃⲆᐃ": "img/day-hand-reidite-protection.png",
		"ⲆⲆΔⲆᐃΔᐃ": "img/night-hand-reidite-protection.png",
		"ᐃΔⲆᐃⲆⲆⲆ": "img/day-reidite-protection.png",
		"ᐃⲆᐃΔΔᐃΔ": "img/night-reidite-protection.png",
		"ΔᐃᐃΔⲆᐃᐃ": "img/inv-reidite-protection-out.png",
		"ΔᐃΔⲆⵠΔⲆ": "img/inv-reidite-protection-in.png",
		"ᐃⲆᐃΔⲆⵠΔ": "img/inv-reidite-protection-click.png",
		"ΔⲆⲆⲆⲆⲆᐃ": "img/day-lava-dragon-sword.png",
		"ⵠᐃΔΔⲆᐃⵠ": "img/night-lava-dragon-sword.png",
		"ΔⲆⵠⵠⲆΔᐃ": "img/inv-lava-dragon-sword-out.png",
		"ᐃⲆΔᐃᐃᐃΔ": "img/inv-lava-dragon-sword-in.png",
		"ⵠⲆⲆᐃⲆᐃΔ": "img/inv-lava-dragon-sword-click.png",
		"ΔΔⲆⵠⵠᐃⲆ": "img/day-lava-spear.png",
		"ⲆⵠΔⲆⲆⵠΔ": "img/night-lava-spear.png",
		"ᐃᐃⵠᐃⲆᐃΔ": "img/inv-lava-spear-out.png",
		"ⵠⵠⵠⵠⵠⲆᐃ": "img/inv-lava-spear-in.png",
		"ⲆⵠⲆᐃᐃⵠᐃ": "img/inv-lava-spear-click.png",
		"ⵠⲆⵠⵠⵠΔⲆ": "img/day-lava-helmet.png",
		"ΔΔⲆⲆⲆᐃⵠ": "img/night-lava-helmet.png",
		"ⵠⲆΔᐃⲆⵠᐃ": "img/inv-lava-helmet-out.png",
		"ΔΔᐃⲆⲆⵠΔ": "img/inv-lava-helmet-in.png",
		"ⵠΔⲆᐃⵠΔⲆ": "img/inv-lava-helmet-click.png",
		"ᐃⲆⵠᐃΔΔⲆ": "img/day-witch-hat.png",
		"ΔΔⲆΔⵠᐃⵠ": "img/night-witch-hat.png",
		"ᐃⲆⲆΔᐃⲆⲆ": "img/inv-witch-hat-out.png",
		"ᐃⲆᐃⵠΔⵠΔ": "img/inv-witch-hat-in.png",
		"ⲆᐃⵠᐃᐃᐃⲆ": "img/inv-witch-hat-click.png",
		"ᐃᐃΔᐃⵠⵠᐃ": "img/day-nimbus2000.png",
		"ⵠᐃⵠΔⵠᐃⲆ": "img/night-nimbus2000.png",
		"ⲆⲆⲆⲆⵠᐃⲆ": "img/inv-nimbus2000-out.png",
		"ᐃΔᐃⵠⲆΔΔ": "img/inv-nimbus2000-in.png",
		"ⲆΔᐃᐃΔⵠⵠ": "img/inv-nimbus2000-click.png",
		"ᐃⵠⲆⲆΔⲆΔ": "img/day-accessory1-pacques.png",
		"ⵠⵠΔΔΔᐃΔ": "img/night-accessory1-pacques.png",
		"ⲆᐃΔᐃᐃⲆⲆ": "img/day-accessory2-pacques.png",
		"ⵠⵠⵠⵠⵠᐃⲆ": "img/night-accessory2-pacques.png",
		"ⲆᐃⲆΔΔᐃΔ": "img/day-accessory3-pacques.png",
		"ⲆⲆⵠⵠΔᐃⵠ": "img/night-accessory3-pacques.png",
		"ΔⲆⲆⵠⵠᐃᐃ": "img/day-accessory5-pacques.png",
		"ᐃⲆᐃⲆⲆΔⲆ": "img/night-accessory5-pacques.png",
		"ⲆᐃⲆⵠΔΔᐃ": "img/day-accessory6-pacques.png",
		"ΔⵠᐃᐃⵠΔᐃ": "img/night-accessory6-pacques.png",
		"Ⲇᐃᐃⵠᐃⵠⵠ": "img/day-accessory7-pacques.png",
		"ΔΔⲆΔᐃⲆⲆ": "img/night-accessory7-pacques.png",
		"ⲆⵠΔⲆⵠᐃⲆ": "img/day-accessory8-pacques.png",
		"ⵠⲆΔΔΔΔⲆ": "img/night-accessory8-pacques.png",
		"ᐃΔⲆΔⲆⵠᐃ": "img/day-bag-pacques.png",
		"ⵠᐃΔⵠᐃᐃΔ": "img/night-bag-pacques.png",
		"ⲆᐃᐃΔᐃⲆᐃ": "img/day-carrot.png",
		"ΔⲆᐃᐃⵠⵠᐃ": "img/night-carrot.png",
		"ΔᐃᐃΔᐃⵠᐃ": "img/day-carrot-dried.png",
		"ⲆΔⵠΔⵠΔᐃ": "img/night-carrot-dried.png",
		"ⵠⵠᐃΔⵠⵠⵠ": "img/day-tomato-herb.png",
		"ⲆⵠⲆⵠᐃⲆⵠ": "img/night-tomato-herb.png",
		"ᐃΔΔΔΔᐃⲆ": "img/day-tomato-herb-dried.png",
		"ΔᐃᐃᐃⲆΔⵠ": "img/night-tomato-herb-dried.png",
		"ΔⵠⲆⲆΔᐃᐃ": "img/day-tomato.png",
		"ᐃΔⲆᐃᐃᐃΔ": "img/night-tomato.png",
		"ΔⲆⵠⲆᐃΔⵠ": "img/inv-carrot-out.png",
		"ⲆᐃⲆⲆΔΔⵠ": "img/inv-carrot-in.png",
		"ᐃᐃⵠᐃⲆⲆⲆ": "img/inv-carrot-click.png",
		"ᐃⲆᐃΔΔΔᐃ": "img/inv-tomato-out.png",
		"ᐃⵠⵠⲆᐃΔΔ": "img/inv-tomato-in.png",
		"ⲆⵠⵠΔΔⲆⲆ": "img/inv-tomato-click.png",
		"ΔᐃⲆᐃⵠⲆΔ": "img/day-player0.png",
		"ⵠⲆⲆⲆᐃΔᐃ": "img/night-player0.png",
		"ⲆᐃᐃⲆΔᐃⲆ": "img/day-player1.png",
		"ⲆΔⲆΔΔⵠΔ": "img/night-player1.png",
		"ⵠⵠⲆⲆΔᐃⲆ": "img/day-player2.png",
		"ᐃΔΔᐃⲆΔᐃ": "img/night-player22.png",
		"ⲆᐃⵠⲆⲆⲆΔ": "img/day-player3.png",
		"ⲆⲆΔᐃⲆΔⵠ": "img/night-player33.png",
		"ᐃΔᐃⲆⲆΔᐃ": "img/day-player4.png",
		"ᐃⲆⲆΔⲆⲆᐃ": "img/night-player4.png",
		"ᐃⵠⲆⵠⵠⲆΔ": "img/day-player5.png",
		"ⲆⵠⲆⵠᐃⵠΔ": "img/night-player5.png",
		"ᐃⲆᐃⲆᐃⲆΔ": "img/day-player6.png",
		"ⲆΔᐃⲆᐃΔΔ": "img/night-player6.png",
		"ⲆⵠᐃΔⲆⲆΔ": "img/day-player7.png",
		"ⲆⲆΔⲆΔᐃᐃ": "img/night-player7.png",
		"ⵠΔⵠᐃⵠⲆⲆ": "img/day-player8.png",
		"ⵠΔᐃΔⵠᐃΔ": "img/night-player8.png",
		"ΔΔⵠΔⵠⲆΔ": "img/day-player9.png",
		"ᐃΔⵠΔΔⵠⲆ": "img/night-player9.png",
		"ΔᐃⵠⲆⲆΔⲆ": "img/day-player10.png",
		"ΔᐃᐃⲆΔⲆᐃ": "img/night-player10.png",
		"ᐃⲆⲆⲆΔⲆⵠ": "img/day-player11.png",
		"ⵠΔΔⲆⲆΔⲆ": "img/night-player11.png",
		"ΔᐃⵠᐃⵠΔⵠ": "img/day-player12.png",
		"ⵠᐃᐃⲆᐃⲆᐃ": "img/night-player12.png",
		"ⵠᐃΔΔⵠⲆⲆ": "img/day-player13.png",
		"ᐃⵠᐃⲆᐃⲆⵠ": "img/night-player13.png",
		"ΔⵠⵠⵠᐃᐃΔ": "img/day-player14.png",
		"ⲆⲆΔΔᐃΔΔ": "img/night-player14.png",
		"ᐃᐃᐃΔΔᐃⲆ": "img/day-player15.png",
		"ᐃᐃᐃᐃⲆᐃⲆ": "img/night-player15.png",
		"ⲆⲆᐃⵠΔΔⲆ": "img/day-player16.png",
		"ⲆΔⲆᐃⲆᐃΔ": "img/night-player16.png",
		"ΔⲆⵠⲆⲆᐃⵠ": "img/day-player17.png",
		"ΔΔⵠⵠΔᐃΔ": "img/night-player17.png",
		"ᐃΔᐃᐃᐃΔⵠ": "img/day-player18.png",
		"ᐃⲆⲆΔⲆⵠⲆ": "img/night-player18.png",
		"ⵠᐃⵠⵠᐃᐃⲆ": "img/day-player19.png",
		"ΔⲆⵠΔⲆᐃⲆ": "img/night-player19.png",
		"ᐃⲆⵠΔⵠⲆᐃ": "img/day-hand-player0.png",
		"ⲆΔᐃΔⲆⲆⲆ": "img/night-hand-player0.png",
		"ΔᐃΔΔⵠⵠⵠ": "img/day-hand-player1.png",
		"ᐃᐃⵠⵠⲆΔΔ": "img/night-hand-player1.png",
		"ⵠⲆΔᐃⲆⲆᐃ": "img/day-hand-player2.png",
		"ᐃⵠⲆⵠᐃΔⲆ": "img/night-hand-player22.png",
		"ⵠᐃΔⵠᐃΔᐃ": "img/day-hand-player3.png",
		"ᐃᐃⵠᐃⵠⵠⵠ": "img/night-hand-player33.png",
		"ⵠⵠⲆⲆⵠᐃⲆ": "img/day-hand-player4.png",
		"ΔⵠⲆⲆΔⲆⵠ": "img/night-hand-player4.png",
		"ⲆⵠⲆΔⲆᐃⲆ": "img/day-hand-player5.png",
		"ⲆⲆⵠΔΔⵠᐃ": "img/night-hand-player5.png",
		"ΔⲆⲆΔⲆΔΔ": "img/day-hand-player6.png",
		"ⵠⵠⵠᐃⵠΔΔ": "img/night-hand-player6.png",
		"ΔⲆᐃⵠⲆⲆⲆ": "img/day-hand-player7.png",
		"ⵠⲆᐃᐃΔᐃⵠ": "img/night-hand-player7.png",
		"ᐃᐃᐃⲆΔᐃⵠ": "img/day-hand-player8.png",
		"ᐃⵠᐃᐃΔΔΔ": "img/night-hand-player8.png",
		"ⵠⵠⲆⵠⵠⵠᐃ": "img/day-hand-player9.png",
		"ᐃΔᐃⲆⵠΔⲆ": "img/night-hand-player9.png",
		"ⲆΔⵠᐃⵠΔᐃ": "img/day-hand-player10.png",
		"ⵠⵠⵠⲆⵠⲆᐃ": "img/night-hand-player10.png",
		"ⲆⲆΔⵠⲆⲆᐃ": "img/day-hand-player11.png",
		"ⵠΔⵠⲆᐃⵠⲆ": "img/night-hand-player11.png",
		"ⲆΔΔᐃⵠᐃΔ": "img/day-hand-player12.png",
		"ⵠⵠᐃΔⲆⲆΔ": "img/night-hand-player12.png",
		"ⲆᐃΔᐃΔᐃⵠ": "img/day-hand-player13.png",
		"ᐃΔⵠⵠᐃⵠΔ": "img/night-hand-player13.png",
		"ⵠⲆⵠΔΔⲆⵠ": "img/day-hand-player14.png",
		"ΔⲆⲆΔⲆᐃΔ": "img/night-hand-player14.png",
		"ⵠⵠⵠᐃⵠⲆⵠ": "img/day-hand-player15.png",
		"ⲆΔⲆⵠᐃᐃⲆ": "img/night-hand-player15.png",
		"ⲆΔΔⵠᐃΔᐃ": "img/day-hand-player16.png",
		"ⵠⲆᐃΔᐃΔᐃ": "img/night-hand-player16.png",
		"ΔⲆᐃΔΔⲆᐃ": "img/day-hand-player17.png",
		"ᐃⵠᐃΔⲆΔᐃ": "img/night-hand-player17.png",
		"ⲆⲆⲆⵠᐃⲆΔ": "img/day-hand-player18.png",
		"ⲆΔᐃᐃⲆⵠΔ": "img/night-hand-player18.png",
		"ᐃΔⲆⵠΔⵠⵠ": "img/day-hand-player19.png",
		"ΔⲆᐃᐃⲆⵠⵠ": "img/night-hand-player19.png",
		"ⲆΔⵠᐃΔⲆΔ": "img/day-accessory4.png",
		"ⲆΔΔΔⲆⲆⲆ": "img/night-accessory4.png",
		"ⲆⵠⲆᐃᐃΔᐃ": "img/day-accessory9.png",
		"ᐃⲆᐃⵠⲆⵠⲆ": "img/night-accessory9.png",
		"ᐃᐃΔⲆᐃΔᐃ": "img/day-accessory10.png",
		"ⲆΔⲆᐃⲆⲆᐃ": "img/night-accessory10.png",
		"ΔΔᐃⲆⲆᐃⵠ": "img/day-accessory11.png",
		"ⵠᐃΔⲆᐃⲆⵠ": "img/night-accessory11.png",
		"ΔΔᐃⲆᐃᐃᐃ": "img/day-accessory12.png",
		"ᐃΔⲆⵠᐃΔⵠ": "img/night-accessory12.png",
		"ⲆⵠΔⲆⵠΔⵠ": "img/day-bag.png",
		"ᐃⲆⵠⲆⵠΔᐃ": "img/night-bag.png",
		"ⵠⲆᐃⵠΔⵠⵠ": "img/inv-bag-out.png",
		"ΔᐃᐃⲆᐃᐃⲆ": "img/inv-bag-in.png",
		"ᐃᐃΔⵠⵠⵠᐃ": "img/inv-bag-click.png",
		"ΔᐃᐃᐃⲆᐃⲆ": "img/day-pitchfork.png",
		"ᐃⵠΔᐃⵠⲆΔ": "img/night-pitchfork.png",
		"ΔⲆΔΔᐃΔᐃ": "img/inv-pitchfork-out.png",
		"ⵠⲆⲆⵠΔⵠΔ": "img/inv-pitchfork-in.png",
		"ⵠΔᐃᐃᐃⲆᐃ": "img/inv-pitchfork-click.png",
		"ᐃΔⲆᐃⲆΔΔ": "img/inv-wood-spike-door-out.png",
		"ⲆⲆΔⵠⵠⲆΔ": "img/inv-wood-spike-door-in.png",
		"ⵠᐃᐃⲆΔⵠⵠ": "img/inv-wood-spike-door-click.png",
		"ⵠΔᐃᐃᐃⲆΔ": "img/inv-stone-spike-door-out.png",
		"ⲆⵠΔⲆΔΔⵠ": "img/inv-stone-spike-door-in.png",
		"ⲆᐃΔᐃⲆΔΔ": "img/inv-stone-spike-door-click.png",
		"ⵠⵠΔΔⲆⲆⵠ": "img/inv-gold-spike-door-out.png",
		"ⲆⲆⲆⵠⲆⲆⲆ": "img/inv-gold-spike-door-in.png",
		"ⲆΔⲆⵠⵠⵠⵠ": "img/inv-gold-spike-door-click.png",
		"ⲆⵠⲆᐃⲆᐃᐃ": "img/inv-diamond-spike-door-out.png",
		"ⵠⲆⲆⵠᐃⲆᐃ": "img/inv-diamond-spike-door-in.png",
		"ᐃᐃⲆⵠᐃΔⵠ": "img/inv-diamond-spike-door-click.png",
		"ⲆⲆⲆᐃΔⵠⵠ": "img/inv-amethyst-spike-door-out.png",
		"Δⵠⵠᐃᐃᐃᐃ": "img/inv-amethyst-spike-door-in.png",
		"ⵠⲆΔΔᐃΔⵠ": "img/inv-amethyst-spike-door-click.png",
		"ⵠⵠⲆᐃⲆⵠⵠ": "img/day-wood-spike-door.png",
		"ⲆⲆᐃⵠⲆⲆΔ": "img/night-wood-spike-door.png",
		"ⲆⲆⲆⵠⲆΔᐃ": "img/day-stone-spike-door.png",
		"ⵠⵠΔⵠΔⵠΔ": "img/night-stone-spike-door.png",
		"ⲆᐃⲆᐃᐃⵠⵠ": "img/day-gold-spike-door.png",
		"ⲆⲆⵠΔⵠⲆⲆ": "img/night-gold-spike-door.png",
		"ΔΔΔⵠⵠⵠⵠ": "img/day-diamond-spike-door.png",
		"ⵠᐃⲆⲆᐃⵠᐃ": "img/night-diamond-spike-door.png",
		"ⵠⲆⲆⲆⲆᐃΔ": "img/day-amethyst-spike-door.png",
		"ᐃⵠᐃᐃⵠⲆΔ": "img/night-amethyst-spike-door.png",
		"ⲆⵠΔⲆᐃᐃⵠ": "img/inv-reidite-spike-door-out.png",
		"ⵠΔΔⵠⵠΔⵠ": "img/inv-reidite-spike-door-in.png",
		"ᐃᐃᐃΔΔⵠΔ": "img/inv-reidite-spike-door-click.png",
		"ⵠᐃⲆᐃⲆᐃΔ": "img/inv-reidite-door-out.png",
		"ⵠⵠⲆⵠΔΔⲆ": "img/inv-reidite-door-in.png",
		"ⵠⲆᐃⵠΔΔⲆ": "img/inv-reidite-door-click.png",
		"ⲆΔΔⵠⲆᐃⲆ": "img/inv-reidite-spike-out.png",
		"ΔⲆⵠΔⵠⵠⲆ": "img/inv-reidite-spike-in.png",
		"ΔΔⲆᐃⵠΔΔ": "img/inv-reidite-spike-click.png",
		"ᐃᐃⵠΔΔΔᐃ": "img/inv-reidite-wall-out.png",
		"ΔⵠΔᐃᐃᐃⲆ": "img/inv-reidite-wall-in.png",
		"ᐃⲆΔᐃⵠⵠΔ": "img/inv-reidite-wall-click.png",
		"ΔⵠⵠⲆΔⵠⵠ": "img/day-reidite-wall.png",
		"ᐃΔᐃⲆᐃᐃΔ": "img/night-reidite-wall.png",
		"ⲆⲆᐃⵠΔᐃᐃ": "img/day-reidite-door.png",
		"ⲆⲆⵠᐃⵠⲆⵠ": "img/night-reidite-door.png",
		"ᐃᐃⲆΔⵠΔΔ": "img/day-reidite-spike.png",
		"ⵠⲆᐃⵠⲆΔΔ": "img/night-reidite-spike.png",
		"ⲆᐃᐃᐃᐃᐃⲆ": "img/day-reidite-spike-door.png",
		"ᐃⵠⵠᐃⵠⵠⲆ": "img/night-reidite-spike-door.png",
		"ᐃᐃⵠⵠᐃⲆⵠ": "img/inv-reidite-pickaxe-out.png",
		"ΔΔᐃⵠⲆⲆⲆ": "img/inv-reidite-pickaxe-in.png",
		"ΔⵠΔⵠΔⵠⲆ": "img/inv-reidite-pickaxe-click.png",
		"ⲆᐃΔᐃⵠΔⲆ": "img/day-reidite-pickaxe.png",
		"ⲆΔΔᐃⵠⲆⲆ": "img/night-reidite-pickaxe.png",
		"ⵠΔⵠΔᐃᐃΔ": "img/inv-reidite-hammer-out.png",
		"ΔⵠⲆᐃᐃⵠⲆ": "img/inv-reidite-hammer-in.png",
		"ᐃⲆΔᐃⲆⲆΔ": "img/inv-reidite-hammer-click.png",
		"ᐃⵠᐃⲆⲆΔΔ": "img/day-reidite-hammer.png",
		"ⵠΔᐃⵠⵠΔⲆ": "img/night-reidite-hammer.png",
		"ⲆᐃⵠⲆΔᐃⵠ": "img/day-watermelon1.png",
		"ⲆᐃⵠⲆⵠᐃⵠ": "img/night-watermelon1.png",
		"ΔⵠᐃⲆᐃⲆΔ": "img/day-watermelon-dried1.png",
		"ⵠᐃⵠⲆⲆⵠΔ": "img/night-watermelon-dried1.png",
		"ᐃⵠᐃⵠΔΔΔ": "img/inv-watermelon-out.png",
		"Ⲇⵠᐃᐃⵠᐃᐃ": "img/inv-watermelon-in.png",
		"ΔΔΔⲆᐃⵠⲆ": "img/inv-watermelon-click.png",
		"ⵠⲆΔᐃⲆᐃⵠ": "img/day-boat.png",
		"ⵠᐃⲆⵠᐃᐃᐃ": "img/night-boat.png",
		"ⲆⵠⵠᐃᐃⵠⲆ": "img/day-boat-wave.png",
		"ΔⵠΔⲆΔⵠⲆ": "img/night-boat-wave.png",
		"ⵠΔⲆⲆΔⲆⵠ": "img/inv-boat-out.png",
		"ΔΔⵠᐃΔⲆⲆ": "img/inv-boat-in.png",
		"ᐃΔⵠⵠᐃΔΔ": "img/inv-boat-click.png",
		"ⵠΔᐃᐃᐃᐃⵠ": "img/day-plane.png",
		"ⵠΔᐃⲆΔΔⵠ": "img/night-plane.png",
		"ΔΔⲆⲆᐃΔⵠ": "img/inv-plane-out.png",
		"ᐃᐃΔⲆΔΔᐃ": "img/inv-plane-in.png",
		"ⲆΔⲆⲆⲆⲆΔ": "img/inv-plane-click.png",
		"ⵠᐃᐃⲆⵠΔᐃ": "img/day-sled.png",
		"ᐃⵠⵠᐃⵠᐃΔ": "img/night-sled.png",
		"ΔᐃⵠᐃᐃⲆⲆ": "img/day-sled-wave.png",
		"ᐃΔΔᐃΔΔⵠ": "img/night-sled-wave.png",
		"ΔᐃᐃᐃⵠⲆΔ": "img/inv-sled-out.png",
		"ⲆΔⲆⵠⵠⵠΔ": "img/inv-sled-in.png",
		"ΔᐃⲆΔΔΔΔ": "img/inv-sled-click.png",
		"ᐃᐃΔᐃᐃᐃᐃ": "img/day-pirate-hat.png",
		"ⵠⵠⲆᐃⵠΔΔ": "img/night-pirate-hat.png",
		"ⵠᐃⵠⲆⵠⵠᐃ": "img/inv-pirate-hat-out.png",
		"ᐃᐃᐃᐃⵠⲆⲆ": "img/inv-pirate-hat-in.png",
		"ΔⵠⲆⵠΔⵠⵠ": "img/inv-pirate-hat-click.png",
		"ⲆⲆΔⵠᐃⲆΔ": "img/day-penguin.png",
		"ΔΔΔΔⲆᐃⲆ": "img/night-penguin.png",
		"ⲆⵠⲆΔⵠⵠⲆ": "img/hurt-penguin.png",
		"ⲆΔⵠⲆⲆ": "img/inv-penguin-feather-click.png",
		"ⵠⲆΔᐃⵠ": "img/inv-hawk-feather-click.png",
		"ⵠΔⲆΔΔⲆⲆ": "img/day-boar1.png",
		"ⲆⲆΔᐃⲆᐃⲆ": "img/day-boar1-tamed.png",
		"ⵠᐃΔΔⲆⵠⵠ": "img/day-boar1-angry.png",
		"ⵠΔⲆⲆᐃⵠΔ": "img/night-boar1.png",
		"ᐃΔΔΔᐃⵠᐃ": "img/night-boar1-tamed.png",
		"ΔⲆⵠⵠᐃᐃⵠ": "img/night-boar1-angry.png",
		"ΔⵠΔⲆⲆⵠᐃ": "img/inv-mount-boar-out.png",
		"ΔΔⵠΔⲆⵠΔ": "img/inv-mount-boar-in.png",
		"ΔᐃⵠΔⵠⵠᐃ": "img/inv-mount-boar-click.png",
		"ΔᐃⲆⵠⵠΔⵠ": "img/day-hurt-boar1.png",
		"ΔⲆⲆⵠΔⵠΔ": "img/boar1-step.png",
		"ΔᐃᐃΔᐃⲆⵠ": "img/day-saddle1.png",
		"ⵠΔⲆΔΔΔⵠ": "img/night-saddle1.png",
		"ᐃⵠΔΔⲆΔⵠ": "img/inv-saddle-out.png",
		"ⲆᐃΔⵠⵠΔⲆ": "img/inv-saddle-in.png",
		"ᐃΔⲆⵠⵠᐃΔ": "img/inv-saddle-click.png",
		"ᐃᐃⵠΔⲆⲆⲆ": "img/day-magic-wand0.png",
		"ΔⵠΔΔⲆᐃⵠ": "img/night-magic-wand0.png",
		"ⲆΔᐃⲆΔΔᐃ": "img/day-light-wand1.png",
		"ᐃⲆᐃᐃⲆᐃⲆ": "img/night-light-wand1.png",
		"ⵠⵠⵠⵠⵠΔΔ": "img/inv-magic-wand0-out.png",
		"ᐃⲆⲆⵠᐃⵠᐃ": "img/inv-magic-wand0-in.png",
		"ΔⲆⵠΔᐃⵠⵠ": "img/inv-magic-wand0-click.png",
		"ΔⵠⲆⲆⲆⲆⲆ": "img/day-magic-wand1.png",
		"ⲆΔⲆΔΔΔⵠ": "img/night-magic-wand1.png",
		"ⵠⲆᐃⵠⲆⲆⵠ": "img/day-light-wand0.png",
		"ΔᐃⵠᐃⵠⵠΔ": "img/night-light-wand0.png",
		"ⲆⲆⲆᐃⵠΔⲆ": "img/inv-magic-wand1-out.png",
		"ⲆⵠᐃⲆⲆΔⵠ": "img/inv-magic-wand1-in.png",
		"ⵠᐃΔⲆΔⵠⵠ": "img/inv-magic-wand1-click.png",
		"ⵠⲆⵠΔΔⲆⲆ": "img/day-firefly.png",
		"ΔⲆΔΔᐃΔⲆ": "img/night-firefly.png",
		"ΔᐃΔΔⲆΔⲆ": "img/hurt-firefly.png",
		"ⲆΔⲆⲆⲆⵠΔ": "img/inv-firefly-out.png",
		"ⲆⲆᐃᐃⵠᐃΔ": "img/inv-firefly-in.png",
		"ΔΔᐃᐃⵠⵠⵠ": "img/inv-firefly-click.png",
		"ⲆⲆΔᐃᐃⲆΔ": "img/day-baby-dragon.png",
		"ⵠⲆΔᐃⲆΔⲆ": "img/night-baby-dragon.png",
		"ⵠΔⵠΔⵠᐃⵠ": "img/day-baby-dragon-angry.png",
		"ΔⲆⵠΔᐃᐃΔ": "img/night-baby-dragon-angry.png",
		"ΔⲆⵠⵠΔⲆⲆ": "img/day-baby-dragon-tamed.png",
		"ᐃᐃⲆΔᐃⵠⲆ": "img/night-baby-dragon-tamed.png",
		"ⵠΔΔⵠⲆⵠⵠ": "img/day-wing-dragon-left-angry.png",
		"ΔΔⲆΔΔΔⵠ": "img/night-dragon-wing-left-angry.png",
		"ᐃⲆⲆΔⲆⲆⲆ": "img/day-wing-dragon-right-angry.png",
		"ΔⵠᐃΔᐃⵠΔ": "img/night-dragon-wing-right-angry.png",
		"ⵠΔⵠᐃΔΔⲆ": "img/day-wing-dragon-left-tamed.png",
		"ᐃΔⵠⵠⵠᐃᐃ": "img/night-dragon-wing-left-tamed.png",
		"ΔⲆⵠᐃᐃᐃᐃ": "img/day-wing-dragon-right-tamed.png",
		"ⲆⲆΔⲆᐃᐃⲆ": "img/night-wing-dragon-right-tamed.png",
		"ⲆΔⲆᐃⲆΔⲆ": "img/day-wing-dragon-left.png",
		"ⲆⲆᐃΔΔⵠⵠ": "img/night-dragon-wing-left.png",
		"ΔⲆᐃΔᐃⲆΔ": "img/day-wing-dragon-right.png",
		"ΔᐃΔΔⲆⲆⲆ": "img/night-wing-dragon-right.png",
		"ⵠΔⵠⲆⵠΔᐃ": "img/hurt-baby-dragon.png",
		"ΔΔᐃⵠΔᐃⲆ": "img/hurt-baby-dragon-wing-left.png",
		"ⵠⲆᐃⵠⵠᐃⵠ": "img/hurt-baby-dragon-wing-right.png",
		"ⵠᐃΔⲆⲆⵠⲆ": "img/inv-baby-dragon-out.png",
		"ΔⲆⵠⵠᐃΔΔ": "img/inv-baby-dragon-in.png",
		"ⵠⲆⵠΔᐃⲆⵠ": "img/inv-baby-dragon-click.png",
		"ⵠⵠΔⵠⵠᐃⵠ": "img/day-baby-lava.png",
		"ΔᐃΔᐃΔⲆⲆ": "img/night-baby-lava.png",
		"ⵠⵠΔΔΔᐃᐃ": "img/day-baby-lava-angry.png",
		"ⲆΔⵠᐃΔΔΔ": "img/night-baby-lava-angry.png",
		"ΔΔⲆΔᐃⲆⵠ": "img/day-baby-lava-tamed.png",
		"ΔΔᐃⵠⵠⲆⲆ": "img/night-baby-lava-tamed.png",
		"ᐃⲆᐃⲆᐃΔⲆ": "img/day-wing-lava-left-angry.png",
		"ΔᐃⵠᐃᐃⲆᐃ": "img/night-wing-lava-left-angry.png",
		"ⵠΔΔⲆⲆᐃⲆ": "img/day-wing-lava-right-angry.png",
		"ΔᐃⲆΔⵠΔΔ": "img/night-wing-lava-right-angry.png",
		"ⵠΔⵠΔΔⲆΔ": "img/day-wing-lava-left-tamed.png",
		"ⵠΔΔᐃⲆⲆᐃ": "img/night-wing-lava-left-tamed.png",
		"ⵠⵠⲆⲆⵠⲆΔ": "img/day-wing-lava-right-tamed.png",
		"ⲆΔⲆⵠΔⲆΔ": "img/night-wing-lava-right-tamed.png",
		"ⲆⵠᐃΔⲆΔⵠ": "img/day-wing-lava-left.png",
		"ⲆⵠΔⵠⵠΔⵠ": "img/night-wing-lava-left.png",
		"ⲆⲆⲆᐃᐃⲆᐃ": "img/day-wing-lava-right.png",
		"ⵠΔΔⲆⵠΔⲆ": "img/night-wing-lava-right.png",
		"ⲆᐃⲆⵠⵠΔᐃ": "img/hurt-baby-lava.png",
		"ⲆΔⵠΔⵠⵠⲆ": "img/hurt-baby-lava-wing-left.png",
		"ⵠΔΔⵠᐃⵠⲆ": "img/hurt-baby-lava-wing-right.png",
		"ᐃΔΔⲆⲆⵠΔ": "img/inv-baby-lava-out.png",
		"ΔⵠⵠⵠⲆⲆⵠ": "img/inv-baby-lava-in.png",
		"ⵠᐃΔΔᐃΔⲆ": "img/inv-baby-lava-click.png",
		"ᐃⵠᐃⵠⵠΔΔ": "img/day-falcon.png",
		"ⵠⵠⲆⵠⲆⲆΔ": "img/night-falcon.png",
		"ᐃΔΔΔΔⲆᐃ": "img/day-falcon-angry.png",
		"ⲆⵠⵠⲆⲆⲆΔ": "img/night-falcon-angry.png",
		"ᐃᐃΔᐃᐃΔᐃ": "img/day-falcon-ground.png",
		"ΔⲆᐃⲆⲆᐃΔ": "img/night-falcon-ground.png",
		"ⵠΔΔⵠⵠⲆⲆ": "img/day-falcon-ground-angry.png",
		"ⵠΔᐃΔΔᐃΔ": "img/night-falcon-ground-angry.png",
		"ᐃᐃᐃⲆⲆⵠΔ": "img/day-falcon-wings-left.png",
		"ᐃΔⵠᐃΔᐃⵠ": "img/night-falcon-wings-left.png",
		"ⲆⵠⲆⵠⵠⵠΔ": "img/day-falcon-wings-right.png",
		"ΔᐃᐃⲆᐃᐃⵠ": "img/night-falcon-wings-right.png",
		"ΔⲆᐃⵠⵠⵠΔ": "img/day-falcon-angry-wings-left.png",
		"ΔⵠᐃⵠⵠΔᐃ": "img/night-falcon-angry-wings-left.png",
		"ᐃᐃᐃⵠᐃᐃᐃ": "img/day-falcon-angry-wings-right.png",
		"ⲆᐃⲆΔΔᐃⵠ": "img/night-falcon-angry-wings-right.png",
		"ᐃⲆⵠⵠⲆΔΔ": "img/day-falcon-wings-left-tamed.png",
		"ΔΔΔⵠⵠⲆΔ": "img/night-falcon-wings-left-tamed.png",
		"ᐃᐃᐃΔⲆⵠⲆ": "img/day-falcon-wings-right-tamed.png",
		"ᐃᐃΔⲆⵠⵠᐃ": "img/night-falcon-wings-right-tamed.png",
		"ⲆΔᐃᐃᐃⲆⵠ": "img/day-falcon-tamed.png",
		"ⲆΔᐃᐃᐃⵠᐃ": "img/night-falcon-tamed.png",
		"ᐃᐃΔⲆⵠⲆΔ": "img/hurt-falcon-ground.png",
		"ΔⵠΔⵠΔⲆΔ": "img/hurt-falcon.png",
		"ⵠⵠⲆⵠᐃⲆᐃ": "img/hurt-falcon-wings-left.png",
		"ⲆᐃⵠⵠⵠⵠⲆ": "img/hurt-falcon-wings-right.png",
		"ⲆⲆᐃΔΔⲆⵠ": "img/inv-falcon-out.png",
		"ΔⲆⵠⵠᐃⵠⵠ": "img/inv-falcon-in.png",
		"ᐃᐃⵠⵠᐃⵠⵠ": "img/inv-falcon-click.png",
		"ⵠⵠΔᐃᐃⵠᐃ": "img/day-crab-boss.png",
		"ᐃⲆⲆΔᐃΔⲆ": "img/night-crab-boss.png",
		"ⲆⵠⲆᐃⵠⵠΔ": "img/day-crab-boss-angry.png",
		"ᐃⲆΔⲆᐃᐃᐃ": "img/night-crab-boss-angry.png",
		"ⵠᐃᐃⵠⲆᐃⲆ": "img/day-crab-boss-tamed.png",
		"ΔᐃΔⲆⲆⵠⲆ": "img/night-crab-boss-tamed.png",
		"ΔⵠⵠⵠⲆΔⵠ": "img/day-crab-boss-claw-left-attack.png",
		"ᐃⲆⲆⵠⲆᐃⲆ": "img/night-crab-boss-claw-left-attack.png",
		"ⵠᐃⲆᐃⵠᐃⲆ": "img/day-crab-boss-claw-right-attack.png",
		"ⲆⲆᐃⲆΔᐃᐃ": "img/night-crab-boss-claw-right-attack.png",
		"ⵠⲆᐃⲆΔⵠΔⵠΔ": "img/day-crab-boss-claw-left-tamed.png",
		"ⲆⲆⵠⲆΔⵠⵠⲆⵠ": "img/night-crab-boss-claw-left-tamed.png",
		"ᐃⵠᐃΔⵠᐃΔⵠⵠ": "img/day-crab-boss-claw-right-tamed.png",
		"ΔΔᐃⵠᐃⲆⲆⵠᐃ": "img/night-crab-boss-claw-right-tamed.png",
		"ΔⵠΔⵠᐃⲆⵠ": "img/day-crab-boss-claw-left.png",
		"ᐃΔⲆΔⲆᐃⲆ": "img/night-crab-boss-claw-left.png",
		"ⲆⲆⲆΔⵠΔᐃ": "img/day-crab-boss-claw-right.png",
		"ΔᐃΔⲆΔⲆⲆ": "img/night-crab-boss-claw-right.png",
		"ⵠᐃΔⲆᐃᐃΔ": "img/hurt-crab-boss.png",
		"ⲆᐃⵠⲆⵠⲆⲆ": "img/hurt-crab-boss-claw-left.png",
		"ⵠΔⵠⲆⵠⵠᐃ": "img/hurt-crab-boss-claw-right.png",
		"ⲆΔᐃᐃᐃⵠⵠ": "img/heal-crab-boss.png",
		"ᐃΔᐃΔⵠⲆΔ": "img/heal-crab-boss-claw-left.png",
		"ᐃΔⲆΔΔⵠΔ": "img/heal-crab-boss-claw-right.png",
		"ΔΔⲆΔΔΔᐃ": "img/crab-step.png",
		"ΔᐃΔⲆᐃⵠⵠ": "img/inv-crab-boss-out.png",
		"ΔΔΔⲆⵠⲆΔ": "img/inv-crab-boss-in.png",
		"ΔᐃⵠⲆΔⲆⵠ": "img/inv-crab-boss-click.png",
		"ⲆΔⵠΔⲆⵠⲆ": "img/day-cactus10.png",
		"ⵠⵠⵠⲆⲆⲆΔ": "img/night-cactus10.png",
		"ⵠΔᐃⵠⵠⵠⲆ": "img/inv-cactus-out.png",
		"ⲆΔΔΔᐃΔⲆ": "img/inv-cactus-in.png",
		"ΔⲆΔᐃΔⵠⲆ": "img/inv-cactus-click.png",
		"ΔⲆⲆᐃⲆⵠⲆ": "img/day-scorpion.png",
		"ⵠΔᐃΔⵠΔⵠ": "img/night-scorpion.png",
		"ⲆⵠⲆᐃⲆᐃΔ": "img/day-scorpion-hand-left.png",
		"ⲆⲆᐃⵠⵠⲆᐃ": "img/night-scorpion-hand-left.png",
		"ⲆΔΔⵠᐃⲆΔ": "img/day-scorpion-hand-right.png",
		"ΔΔΔⵠⲆⵠⲆ": "img/night-scorpion-hand-right.png",
		"ᐃⵠᐃΔⵠⲆᐃ": "img/hurt-scorpion.png",
		"ΔⵠⲆⲆΔⲆΔ": "img/hurt-scorpion-hand-left.png",
		"ΔⵠᐃⲆΔⲆⲆ": "img/hurt-scorpion-hand-right.png",
		"ᐃⵠᐃᐃᐃⲆⵠ": "img/day-vulture.png",
		"ⵠΔΔⲆᐃᐃⲆ": "img/night-vulture.png",
		"ⵠΔᐃⲆᐃΔΔ": "img/day-vulture-angry.png",
		"ⲆᐃΔⲆⵠΔΔ": "img/night-vulture-angry.png",
		"ΔⲆⵠᐃⵠⵠⵠ": "img/day-vulture-ground.png",
		"ᐃΔΔⲆΔᐃⵠ": "img/night-vulture-ground.png",
		"ⲆⲆΔⵠⵠⲆᐃ": "img/day-vulture-ground-angry.png",
		"ⵠΔⲆΔⵠⲆⵠ": "img/night-vulture-ground-angry.png",
		"ⲆΔⲆⵠΔᐃⵠ": "img/day-vulture-wings-left.png",
		"ΔᐃⵠⲆⵠⲆᐃ": "img/night-vulture-wings-left.png",
		"ⵠⲆⲆΔⵠⵠⲆ": "img/day-vulture-wings-right.png",
		"ⵠΔΔⲆΔᐃⲆ": "img/night-vulture-wings-right.png",
		"ⵠⵠⵠⲆⵠΔᐃ": "img/day-vulture-angry-wings-left.png",
		"Ⲇᐃⵠⵠᐃⵠⵠ": "img/night-vulture-angry-wings-left.png",
		"ⵠᐃⵠΔᐃⵠΔ": "img/day-vulture-angry-wings-right.png",
		"ᐃⵠⵠΔΔⵠᐃ": "img/night-vulture-angry-wings-right.png",
		"ⲆⵠΔⵠⲆⲆᐃ": "img/day-vulture-wings-left-tamed.png",
		"ΔⲆⵠⲆⲆΔᐃ": "img/night-vulture-wings-left-tamed.png",
		"ᐃⵠΔⲆⵠᐃⵠ": "img/day-vulture-wings-right-tamed.png",
		"ⲆᐃᐃⵠⲆⵠⲆ": "img/night-vulture-wings-right-tamed.png",
		"ᐃΔⲆᐃⲆᐃΔ": "img/day-vulture-tamed.png",
		"ΔⲆᐃⲆⵠᐃⵠ": "img/night-vulture-tamed.png",
		"ⵠⲆᐃᐃΔᐃⲆ": "img/hurt-vulture-ground.png",
		"ᐃⵠΔⲆΔᐃⵠ": "img/hurt-vulture.png",
		"ⲆᐃⲆᐃⲆᐃⵠ": "img/hurt-vulture-wings-left.png",
		"ⵠᐃᐃⵠⵠᐃᐃ": "img/hurt-vulture-wings-right.png",
		"ᐃⲆᐃΔⵠᐃᐃ": "img/day-aloe-vera.png",
		"ᐃⲆⵠΔᐃⲆⵠ": "img/night-aloe-vera.png",
		"ᐃᐃⲆⵠᐃⲆⵠ": "img/inv-aloe-vera-out.png",
		"ᐃⵠΔⲆᐃΔⵠ": "img/inv-aloe-vera-in.png",
		"ⲆᐃⲆⵠⲆᐃⵠ": "img/inv-aloe-vera-click.png",
		"ⲆⵠⵠⵠΔⲆⲆ": "img/day-aloe-vera-grown.png",
		"ⲆⵠᐃⵠⵠᐃΔ": "img/night-aloe-vera-grown.png",
		"ⲆᐃᐃⵠΔⲆⲆ": "img/day-aloe-vera-dried.png",
		"ⲆⲆᐃΔΔᐃΔ": "img/night-aloe-vera-dried.png",
		"ⵠⵠⵠⵠᐃΔΔ": "img/day-turban1.png",
		"ΔⲆΔⵠⵠⲆΔ": "img/night-turban1.png",
		"ⵠⵠᐃᐃΔⲆΔ": "img/day-turban2.png",
		"ᐃⵠᐃᐃⵠᐃΔ": "img/night-turban2.png",
		"ᐃⵠⵠⲆᐃⵠⵠ": "img/inv-turban2-out.png",
		"ΔⵠⲆᐃᐃΔΔ": "img/inv-turban2-in.png",
		"ᐃᐃⵠᐃᐃᐃᐃ": "img/inv-turban2-click.png",
		"ⲆᐃⲆΔⵠⵠⵠ": "img/inv-turban1-out.png",
		"ᐃᐃΔᐃⵠᐃⵠ": "img/inv-turban1-in.png",
		"ⵠⲆΔΔΔΔᐃ": "img/inv-turban1-click.png",
		"ⲆᐃΔᐃΔⵠⵠ": "img/day-pitchfork2.png",
		"ⲆᐃᐃᐃΔⵠⲆ": "img/night-pitchfork2.png",
		"ΔⲆᐃⵠⲆⵠⲆ": "img/inv-pitchfork2-out.png",
		"ΔΔⵠΔΔΔΔ": "img/inv-pitchfork2-in.png",
		"ᐃᐃⲆⲆⲆΔᐃ": "img/inv-pitchfork2-click.png",
		"ⵠΔᐃⲆᐃᐃΔ": "img/inv-gold-fork-click.png",
		"ⲆᐃᐃⵠⲆᐃⲆ": "img/inv-pilot-glasses-click.png",
		"ΔⲆⵠΔⵠᐃᐃ": "img/day-pilot-helmet.png",
		"ⵠᐃⲆⲆⲆᐃⲆ": "img/night-pilot-helmet.png",
		"ⵠΔᐃⲆΔⲆⲆ": "img/inv-pilot-helmet-out.png",
		"ᐃᐃⵠΔᐃⲆⵠ": "img/inv-pilot-helmet-in.png",
		"ᐃᐃⲆᐃᐃᐃⲆ": "img/inv-pilot-helmet-click.png",
		"ᐃⲆⵠΔⵠΔᐃᐃⵠ": "img/day-sandworm0.png",
		"ⵠΔⲆⲆΔⵠΔ": "img/day-sandworm1.png",
		"ΔΔⵠⲆⲆⵠΔ": "img/day-sandworm2.png",
		"ⵠⲆΔⲆΔⵠⵠᐃⵠ": "img/night-sandworm0.png",
		"ΔⵠᐃⵠⵠⲆⵠ": "img/night-sandworm1.png",
		"ΔⵠᐃΔⲆⲆⵠ": "img/night-sandworm2.png",
		"ⵠⵠⲆⲆⵠⲆⲆ": "img/hurt-sandworm0.png",
		"ⲆⵠⵠⵠⵠⲆⵠ": "img/hurt-sandworm1.png",
		"ⵠⵠⲆⲆⲆⵠΔ": "img/hurt-sandworm2.png",
		"ⲆᐃⲆΔΔ": "img/inv-vulture-feather-click.png",
		"ⵠⲆⲆⵠΔᐃᐃ": "img/day-emerald0.png",
		"ΔᐃⵠⵠᐃⵠⲆ": "img/night-emerald0.png",
		"ΔᐃⵠⵠΔΔΔ": "img/day-emerald1.png",
		"ΔΔⲆᐃᐃⵠⲆ": "img/night-emerald1.png",
		"ⵠⲆᐃΔⵠⵠΔ": "img/day-emerald2.png",
		"ᐃΔⵠᐃΔΔΔ": "img/night-emerald2.png",
		"ΔⲆⲆⲆΔ": "img/inv-emerald-click.png",
		"ⲆⲆᐃⲆⲆⲆΔ": "img/inv-sworm-juice-out.png",
		"ᐃΔᐃΔⵠⲆⲆ": "img/inv-sworm-juice-in.png",
		"ⲆⵠⵠᐃⲆΔⲆ": "img/inv-sworm-juice-click.png",
		"ΔΔⵠⲆⲆⵠⲆ": "img/day-point-machine.png",
		"ᐃⵠⲆΔᐃᐃᐃ": "img/night-point-machine.png",
		"ᐃᐃᐃⵠᐃΔⲆ": "img/day-point-machine-hole.png",
		"ⵠᐃΔΔΔᐃΔ": "img/night-point-machine-hole.png",
		"ᐃⲆⵠᐃΔΔⵠ": "img/day-point-machine-ground.png",
		"ΔⵠⲆᐃΔⵠᐃ": "img/night-point-machine-ground.png",
		"ⲆᐃⲆΔⵠᐃᐃ": "img/day-point-machine-rotate.png",
		"ⵠᐃΔⲆΔⵠⲆ": "img/night-point-machine-rotate.png",
		"ⲆⲆⵠᐃΔΔⵠ": "img/inv-point-machine-out.png",
		"ΔⵠⲆⵠᐃᐃⲆ": "img/inv-point-machine-in.png",
		"ⲆᐃⵠⲆΔⵠΔ": "img/inv-point-machine-click.png",
		"ᐃⵠⵠⲆⵠᐃⲆ": "img/day-extractor-machine0-stone.png",
		"ⵠᐃⲆⵠΔᐃΔ": "img/night-extractor-machine0-stone.png",
		"ΔΔᐃⲆⲆΔⲆ": "img/day-extractor-machine-stone.png",
		"ᐃΔⵠΔΔᐃⲆ": "img/night-extractor-machine-stone.png",
		"ⵠΔᐃⵠΔⲆΔ": "img/inv-extractor-machine-stone-out.png",
		"ᐃΔᐃⵠⵠᐃΔ": "img/inv-extractor-machine-stone-in.png",
		"ⲆᐃⲆⲆⵠⲆᐃ": "img/inv-extractor-machine-stone-click.png",
		"ⵠⲆⵠⵠⵠᐃᐃ": "img/day-extractor-machine0-gold.png",
		"ⵠΔᐃᐃⲆⵠᐃ": "img/night-extractor-machine0-gold.png",
		"ⲆᐃⲆⲆⲆΔⵠ": "img/day-extractor-machine-gold.png",
		"ⲆⲆⵠⲆΔΔΔ": "img/night-extractor-machine-gold.png",
		"ⵠᐃᐃΔᐃᐃⵠ": "img/inv-extractor-machine-gold-out.png",
		"ⲆᐃⵠΔᐃΔⲆ": "img/inv-extractor-machine-gold-in.png",
		"ᐃⲆΔΔⵠΔⵠ": "img/inv-extractor-machine-gold-click.png",
		"ΔⲆⵠᐃΔΔΔ": "img/day-extractor-machine0-diamond.png",
		"ᐃⵠⵠⵠⵠΔⲆ": "img/night-extractor-machine0-diamond.png",
		"ᐃᐃΔᐃᐃΔⵠ": "img/day-extractor-machine-diamond.png",
		"ΔⲆⲆⵠΔᐃΔ": "img/night-extractor-machine-diamond.png",
		"ⲆⵠᐃΔⲆΔⲆ": "img/inv-extractor-machine-diamond-out.png",
		"ΔᐃⲆᐃΔΔⲆ": "img/inv-extractor-machine-diamond-in.png",
		"ᐃⵠᐃⵠⵠᐃⵠ": "img/inv-extractor-machine-diamond-click.png",
		"ⵠⲆΔΔⵠⲆᐃ": "img/day-extractor-machine0-amethyst.png",
		"ⵠⲆⲆⵠⵠⲆΔ": "img/night-extractor-machine0-amethyst.png",
		"ΔⲆᐃΔᐃΔᐃ": "img/day-extractor-machine-amethyst.png",
		"ᐃᐃⵠⲆΔⵠⲆ": "img/night-extractor-machine-amethyst.png",
		"ⵠⵠᐃⵠΔᐃⵠ": "img/inv-extractor-machine-amethyst-out.png",
		"ᐃΔΔᐃⲆⲆᐃ": "img/inv-extractor-machine-amethyst-in.png",
		"ⵠᐃⲆⲆᐃⲆᐃ": "img/inv-extractor-machine-amethyst-click.png",
		"ᐃⵠΔⲆᐃⲆΔ": "img/day-extractor-machine0-reidite.png",
		"ⲆⲆⲆΔⵠⲆⵠ": "img/night-extractor-machine0-reidite.png",
		"ⲆΔⲆᐃⲆᐃⵠ": "img/day-extractor-machine-reidite.png",
		"ⲆⲆⵠᐃⵠⵠⵠ": "img/night-extractor-machine-reidite.png",
		"ΔⵠᐃⲆΔⲆⵠ": "img/inv-extractor-machine-reidite-out.png",
		"ⵠᐃΔⵠᐃᐃᐃ": "img/inv-extractor-machine-reidite-in.png",
		"ⲆΔΔⲆΔⲆⵠ": "img/inv-extractor-machine-reidite-click.png",
		"ⲆΔΔᐃᐃᐃΔ": "img/extractor-cases.png",
		"ᐃⵠᐃⵠⲆⵠⵠ": "img/day-golden-hen.png",
		"ΔΔᐃΔⲆⵠⲆ": "img/night-golden-hen.png",
		"ΔᐃⵠᐃⵠⲆΔ": "img/day-golden-chicken.png",
		"ⵠⵠΔΔⵠᐃΔ": "img/night-golden-chicken.png",
		"ᐃᐃⵠⲆⵠΔⵠ": "img/hurt-golden-hen.png",
		"ΔⲆᐃΔⲆΔᐃ": "img/hurt-golden-chicken.png",
		"ⲆⵠⵠΔⲆⵠΔ": "img/logo-interface.png",
		"ᐃᐃⲆᐃΔⲆⲆ": "img/forest-mode-hover.png",
		"ᐃΔⲆⲆⵠΔⵠ": "img/normal-mode-hover.png",
		"ⵠᐃΔⵠΔⵠⲆ": "img/vampire-mode-hover.png",
		"ⵠΔⵠᐃⲆᐃᐃ": "img/zombie-mode-hover.png",
		"ⵠΔᐃΔΔⵠⵠ": "img/community-mode-hover2.png",
		"ⲆᐃⵠΔⵠⲆⵠ": "img/experimental-mode-hover.png",
		"ΔΔⵠⵠⲆᐃⲆ": "img/zombie-mode-out.png",
		"ᐃⲆⲆⵠᐃΔⲆ": "img/zombie-mode-in.png",
		"ⵠⲆΔⲆⲆⲆΔ": "img/zombie-mode-click.png",
		"ΔⲆΔΔᐃⲆΔ": "img/vampire-mode-out.png",
		"ⲆⵠᐃΔⲆⵠⵠ": "img/vampire-mode-in.png",
		"ⵠᐃⲆⵠⵠᐃᐃ": "img/vampire-mode-click.png",
		"ΔⲆᐃᐃΔᐃⵠ": "img/normal-mode-out.png",
		"ᐃⲆⲆⵠΔᐃΔ": "img/normal-mode-in.png",
		"ⲆΔⵠⵠⲆⵠⵠ": "img/normal-mode-click.png",
		"ΔᐃⵠΔⵠΔⵠ": "img/forest-mode-out.png",
		"ΔΔⵠⲆⵠⲆⵠ": "img/forest-mode-in.png",
		"ΔⵠΔⲆᐃᐃᐃ": "img/forest-mode-click.png",
		"ⵠΔᐃΔⲆⵠᐃ": "img/community-mode-out.png",
		"ⵠᐃⲆᐃΔΔΔ": "img/community-mode-in.png",
		"ⵠⵠΔⲆⵠΔᐃ": "img/community-mode-click.png",
		"ΔⲆⲆⵠᐃⲆΔ": "img/experimental-modes-out.png",
		"Δⵠⵠᐃᐃᐃⵠ": "img/experimental-modes-in.png",
		"ⲆΔⵠᐃᐃΔᐃ": "img/experimental-modes-click.png",
		"ᐃⵠⲆⵠΔΔⵠ": "img/youtube-button-out.png",
		"ⵠⵠⵠΔΔᐃⲆ": "img/youtube-button-in.png",
		"ⵠⲆⲆⵠΔᐃⵠ": "img/youtube-button-click.png",
		"ⲆⵠⲆⵠᐃᐃΔ": "img/wiki-button-out.png",
		"ᐃΔΔⲆⲆΔⵠ": "img/wiki-button-in.png",
		"ΔⲆΔⲆⲆⲆⵠ": "img/wiki-button-click.png",
		"ⵠⵠᐃᐃᐃⵠⵠ": "img/twitter-button-out.png",
		"ΔⵠⵠⲆᐃᐃⲆ": "img/twitter-button-in.png",
		"ᐃⵠΔΔⵠᐃⵠ": "img/twitter-button-click.png",
		"ΔΔΔΔⲆΔⲆ": "img/facebook-button-out.png",
		"ᐃⵠⲆⲆⵠⵠⵠ": "img/facebook-button-in.png",
		"ⵠΔⵠⵠⵠⲆⵠ": "img/facebook-button-click.png",
		"ⵠΔΔΔᐃᐃΔ": "img/reddit-button-out.png",
		"ᐃᐃⲆᐃΔΔⲆ": "img/reddit-button-in.png",
		"Ⲇᐃⵠⵠⵠⵠⵠ": "img/reddit-button-click.png",
		"ⲆΔᐃⵠⲆᐃⵠ": "img/discord-button-out.png",
		"ⵠⲆⲆⲆᐃⵠᐃ": "img/discord-button-in.png",
		"ΔᐃⲆⵠⵠᐃⲆ": "img/discord-button-click.png",
		"ⲆΔᐃΔᐃΔΔ": "img/merch-button-out.png",
		"ΔΔⵠⲆⵠⵠᐃ": "img/merch-button-in.png",
		"ⲆⲆᐃⲆⲆᐃⵠ": "img/merch-button-click.png",
		"ⲆⲆⵠᐃⲆΔΔᐃΔ": "img/terminal-button-out.png",
		"ᐃⵠⲆⵠⵠⵠΔᐃⵠ": "img/terminal-button-in.png",
		"ⵠᐃⲆᐃⲆᐃΔΔⵠ": "img/terminal-button-click.png",
		"ⲆᐃᐃᐃⵠΔΔ": "img/restart-out.png",
		"ΔⵠΔⲆᐃᐃⲆ": "img/restart-in.png",
		"ⵠΔⲆΔⵠΔᐃ": "img/restart-click.png",
		"ΔⲆᐃⲆΔⵠΔ": "img/reboot-out.png",
		"ΔᐃⲆⲆⲆΔⵠ": "img/reboot-in.png",
		"ⵠⲆⲆⲆᐃᐃᐃ": "img/reboot-click.png",
		"ᐃⵠΔⵠᐃⲆⵠ": "img/guide-out.png",
		"ⵠΔΔⲆΔⵠᐃ": "img/guide-in.png",
		"ᐃΔΔᐃΔⲆⵠ": "img/guide-click.png",
		"ⵠΔᐃᐃⵠΔΔ": "img/copy-paste-out.png",
		"ᐃᐃⲆⲆᐃΔⵠ": "img/copy-paste-in.png",
		"ⵠᐃᐃⲆⵠⲆⲆ": "img/copy-paste-click.png",
		"ⲆⲆΔⲆᐃΔⲆ": "img/link-buttons-bg.png",
		"ᐃⵠᐃⵠⲆΔⲆ": "img/changelog-box2.png",
		"ᐃⵠⲆⲆⲆⲆⵠ": "img/changelog_31.png",
		"ⵠᐃΔᐃᐃⲆᐃ": "img/banner-taming.png",
		"ⲆⵠᐃⵠᐃᐃⲆ": "img/profile-button-out.png",
		"ᐃⲆⲆⵠᐃΔⵠ": "img/profile-button-in.png",
		"ⲆΔΔᐃΔΔⲆ": "img/profile-button-click.png",
		"ⵠᐃⲆᐃᐃⵠⵠ": "img/login-button-out.png",
		"ᐃⵠΔⵠⵠⲆⵠ": "img/login-button-in.png",
		"ΔⵠⵠᐃⲆᐃᐃ": "img/login-button-click.png",
		"ΔⲆⲆⵠⲆⵠΔ": "img/login-google-out.png",
		"ⵠΔΔⵠⵠⵠᐃ": "img/login-google-in.png",
		"ⵠᐃⲆⵠΔⲆΔ": "img/login-google-click.png",
		"ΔᐃΔᐃⵠⵠⲆ": "img/login-facebook-out.png",
		"ᐃⵠΔⲆᐃⵠⲆ": "img/login-facebook-in.png",
		"ΔᐃΔⵠⲆⵠⵠ": "img/login-facebook-click.png",
		"ⵠⵠᐃΔΔⲆⵠ": "img/account-box.png",
		"ⵠᐃⲆᐃⲆΔⵠᐃΔ": "img/account-under-maintenance.png",
		"ᐃⲆΔⲆⲆΔⵠ": "img/close-button-account-out.png",
		"ΔΔᐃⲆΔⲆᐃ": "img/close-button-account-in.png",
		"ᐃⵠᐃⲆΔΔⲆ": "img/close-button-account-click.png",
		"ⵠⵠⲆⲆᐃⲆΔ": "img/play-button-out.png",
		"ⲆᐃⲆᐃᐃⲆⵠ": "img/play-button-in.png",
		"ᐃΔⵠⲆⲆΔᐃ": "img/play-button-click.png",
		"ᐃⲆᐃΔᐃΔᐃⵠᐃ": "img/app-store-badge.png",
		"ⵠΔⵠⵠΔᐃΔⲆᐃ": "img/play-store-badge.png",
		"ΔᐃⵠᐃΔᐃΔⵠᐃ": "img/mobile-boxad.png",
		"ᐃΔⲆᐃⲆΔⲆ": "img/modify-name-out.png",
		"ΔⵠᐃⲆⵠⲆΔ": "img/modify-name-in.png",
		"ΔⵠΔⲆⵠΔⲆ": "img/modify-name-click.png",
		"ᐃⲆⵠᐃΔⲆᐃ": "img/copy-id-button-out.png",
		"ⵠΔᐃⲆⲆⲆⲆ": "img/copy-id-button-hover.png",
		"ⵠⲆᐃᐃᐃᐃᐃ": "img/copy-id-button-active.png",
		"ⲆⵠⵠⵠⲆᐃⵠ": "img/yes-button-out.png",
		"ⲆⲆⵠⲆⵠᐃⵠ": "img/yes-button-in.png",
		"ᐃᐃᐃΔⵠΔⵠ": "img/yes-button-click.png",
		"ⲆΔⵠⲆⵠⲆΔ": "img/yes-300-button-out.png",
		"ΔΔΔⲆᐃⲆⲆ": "img/yes-300-button-in.png",
		"ΔⲆⲆΔᐃⲆᐃ": "img/yes-300-button-click.png",
		"ΔᐃⲆⵠᐃⵠΔ": "img/no-button-out.png",
		"ΔᐃΔⲆᐃⵠᐃ": "img/no-button-in.png",
		"ΔⵠᐃⵠⲆⵠⲆ": "img/no-button-click.png",
		"ᐃΔⲆⲆΔⵠᐃ": "img/no-thanks-button-out.png",
		"ᐃⲆᐃΔⵠⵠΔ": "img/no-thanks-button-in.png",
		"ⲆΔⵠⲆΔΔⵠ": "img/no-thanks-button-click.png",
		"ΔΔⲆⲆⲆⲆⲆ": "img/shop-button-out.png",
		"ᐃΔⵠᐃΔⵠᐃ": "img/shop-button-in.png",
		"ⲆᐃⲆⲆⲆᐃΔ": "img/shop-button-click.png",
		"ⲆⵠⵠΔᐃΔⲆ": "img/logout-out.png",
		"ⵠⲆⵠⲆⲆⵠΔ": "img/logout-in.png",
		"ⲆᐃᐃⵠΔⲆᐃ": "img/logout-click.png",
		"ⵠᐃᐃΔΔΔᐃ": "img/terms-button-out.png",
		"ⲆΔᐃⵠⲆⲆᐃ": "img/terms-button-in.png",
		"ᐃⲆⵠᐃⲆᐃΔ": "img/terms-button-click.png",
		"ΔⵠⵠᐃⲆⲆⵠ": "img/tutorial-icon.png",
		"ⵠΔⵠⵠⵠΔᐃ": "img/skins-icon.png",
		"ⲆΔᐃⵠᐃⵠⲆ": "img/shop-icon.png",
		"ΔΔⵠⲆⲆⵠΔⲆⲆ": "img/paint-icon.png",
		"ᐃⲆᐃⵠⵠⲆΔ": "img/leaderboard-icon.png",
		"ⵠⲆⲆΔⲆⵠᐃ": "img/start-icon.png",
		"ΔⵠᐃΔⲆᐃⵠ": "img/profile-icon.png",
		"ᐃⵠⵠΔΔᐃΔ": "img/server-access-icon2.png",
		"ⵠⲆΔⵠΔᐃΔ": "img/button-homepage-bg-out.png",
		"ⲆᐃⵠⵠΔᐃΔ": "img/button-homepage-bg-in.png",
		"ⵠⲆΔᐃΔᐃΔ": "img/button-homepage-bg-click.png",
		"ᐃⲆᐃᐃⲆᐃΔ": "img/button-bottom-homepage-bg-out.png",
		"ⲆΔΔⲆᐃᐃΔ": "img/button-bottom-homepage-bg-in.png",
		"ᐃΔΔΔⲆᐃᐃ": "img/button-bottom-homepage-bg-click.png",
		"ⵠⲆⵠⵠΔΔΔ": "img/lvl-player.png",
		"ⵠΔⲆⵠᐃⵠᐃ": "img/avatar-player.png",
		"ⲆΔᐃⵠΔⵠᐃ": "img/avatar-player1.png",
		"Ⲇⵠᐃⵠᐃⵠᐃ": "img/avatar-player2.png",
		"ⲆΔⲆⵠⲆⲆΔ": "img/avatar-player3.png",
		"ⵠᐃⲆΔⲆᐃᐃ": "img/avatar-player4.png",
		"ⲆⵠΔⵠΔⵠⲆ": "img/avatar-player5.png",
		"ⲆΔΔΔᐃⵠⲆ": "img/avatar-player6.png",
		"ⲆⵠⲆᐃΔⵠⵠ": "img/avatar-player7.png",
		"ⵠΔⵠⵠᐃᐃⲆ": "img/avatar-player8.png",
		"ⲆΔᐃΔⲆΔᐃ": "img/avatar-player9.png",
		"ᐃΔⲆᐃⵠᐃⵠ": "img/avatar-player10.png",
		"ⲆΔⵠⵠΔΔᐃ": "img/avatar-player11.png",
		"ⲆΔᐃΔⲆⲆⵠ": "img/avatar-player12.png",
		"ⵠⵠⵠⲆΔᐃⵠ": "img/avatar-player13.png",
		"ᐃⵠᐃᐃᐃΔⵠ": ⵠ[425],
		"ⲆⲆⵠᐃᐃΔⵠ": ⵠ[425],
		"ᐃⵠᐃᐃᐃⵠⲆ": ⵠ[425],
		"ⲆᐃΔᐃΔⲆΔ": ⵠ[425],
		"ⵠΔᐃᐃⵠⲆΔᐃⵠ": "img/golden-bread.png",
		"ᐃΔᐃⵠⵠⵠΔ": "img/buy-bread-out.png",
		"ⲆⵠᐃΔᐃⲆⵠ": "img/buy-bread-in.png",
		"ᐃⵠⵠⵠΔⲆⵠ": "img/buy-bread-click.png",
		"ⵠΔᐃΔⵠⲆΔ": "img/gauge.png",
		"ᐃⲆⲆⵠᐃΔᐃᐃᐃ": "img/season-4-out.png",
		"ΔᐃⲆⵠⲆⲆᐃᐃⲆ": "img/season-4-in.png",
		"ⵠᐃᐃΔΔᐃⲆⲆᐃ": "img/season-4-click.png",
		"ᐃⵠᐃⲆⵠⵠΔⵠΔ": "img/season4-box.png",
		"ᐃⲆⵠⵠⵠᐃᐃⵠᐃ": "img/season-5-out.png",
		"ᐃΔⵠΔⲆΔⵠⲆⵠ": "img/season-5-in.png",
		"ⵠΔΔⵠⲆΔⵠΔᐃ": "img/season-5-click.png",
		"ΔᐃⵠᐃᐃΔⵠᐃᐃ": "img/season5-box.png",
		"ᐃⲆᐃⵠⵠⵠᐃ": "img/season-6-out.png",
		"ΔΔᐃΔΔⵠᐃ": "img/season-6-in.png",
		"ⵠΔⵠⵠΔⲆᐃ": "img/season-6-click.png",
		"ⵠΔΔⵠᐃΔⲆ": "img/season6-box.png",
		"ᐃⲆⲆᐃᐃᐃⵠ": "img/profile3-box.png",
		"ⲆᐃᐃⲆⵠΔᐃ": "img/skins-box.png",
		"ΔΔΔⵠΔᐃⲆ": "img/shop-box.png",
		"ⲆⵠⲆᐃⲆⲆⵠⵠⲆ": "img/private-server-box.png",
		"ⵠⲆⵠᐃᐃⵠΔ": "img/location-box.png",
		"ⵠᐃᐃⲆΔⲆⵠ": "img/server-duration-box.png",
		"ⲆⲆⵠⵠᐃᐃⵠ": "img/tutorial-box.png",
		"ᐃΔⵠⵠΔᐃᐃ": "img/leaderboard2-box.png",
		"ΔᐃᐃⵠⵠⲆⲆ": "img/buy-breads-box.png",
		"ΔⲆⵠⲆⲆΔⲆ": "img/bag-box.png",
		"ⵠΔᐃⲆⵠⵠΔ": "img/deadbox-box.png",
		"ᐃⵠⵠⵠⲆΔⲆ": "img/book-box.png",
		"ΔⲆΔᐃΔΔΔ": "img/accessories-box.png",
		"ⵠᐃⵠΔᐃⵠᐃ": "img/customskin-box.png",
		"ⲆᐃⲆΔⵠᐃΔ": "img/bag-lasts.png",
		"ΔᐃᐃⲆΔⵠᐃ": "img/server-lasts.png",
		"ΔᐃⲆΔᐃᐃⵠ": "img/server-access-box3.png",
		"ⵠΔⵠⲆΔᐃᐃ": "img/lootbox-box.png",
		"ⵠⲆΔⵠⵠⵠⲆ": "img/change-nickname0.png",
		"ΔᐃᐃΔᐃⵠⵠ": "img/change-nickname1.png",
		"ⵠᐃᐃΔΔⲆⲆ": "img/cheating-box.png",
		"ᐃΔⵠⵠⵠⵠⵠⵠⵠ": "img/daily-quest-box.png",
		"ⵠᐃΔΔⵠᐃⵠΔΔ": "img/daily-5-bread.png",
		"ⲆᐃⵠⵠᐃΔⲆᐃᐃ": "img/daily-10-bread.png",
		"ⲆⵠΔⵠΔΔΔᐃᐃ": "img/daily-valid.png",
		"ⲆᐃΔⵠⲆⲆⲆ": "img/normal-profile-out.png",
		"ⲆⵠΔⵠⵠᐃΔ": "img/normal-profile-in.png",
		"ⵠΔⲆᐃⲆⵠⲆ": "img/normal-profile-click.png",
		"ᐃⵠⵠⲆΔΔΔ": "img/forest-profile-out.png",
		"ΔⵠⲆᐃⲆⵠΔ": "img/forest-profile-in.png",
		"ΔⲆᐃⵠⲆⵠⵠ": "img/forest-profile-click.png",
		"ⲆⲆᐃΔⵠⵠΔ": "img/zombie-profile-out.png",
		"ⲆᐃΔⲆⲆⵠⲆ": "img/zombie-profile-in.png",
		"ⵠⲆⲆⵠⲆᐃⵠ": "img/zombie-profile-click.png",
		"ⵠᐃΔᐃⵠΔⵠ": "img/vampire-profile-out.png",
		"ᐃⲆΔΔᐃⵠΔ": "img/vampire-profile-in.png",
		"ⲆΔΔⵠᐃⵠⵠ": "img/vampire-profile-click.png",
		"ⲆⲆΔᐃΔᐃⵠ": "img/total-profile-out.png",
		"ⲆⵠᐃᐃⵠⵠΔ": "img/total-profile-in.png",
		"ⵠⲆⵠᐃᐃΔᐃ": "img/total-profile-click.png",
		"ᐃΔΔⲆᐃⵠⵠ": "img/season1-out.png",
		"ΔΔᐃⲆⲆⲆⲆ": "img/season1-in.png",
		"Δⵠᐃᐃⵠⵠᐃ": "img/season1-click.png",
		"ⲆⲆΔᐃⵠⲆΔ": "img/season2-out.png",
		"ⲆⵠΔⵠⲆⵠⲆ": "img/season2-in.png",
		"ᐃⵠΔⵠΔᐃΔ": "img/season2-click.png",
		"ⵠⲆΔΔΔΔⵠ": "img/season3-out.png",
		"ⵠⲆΔᐃΔᐃᐃ": "img/season3-in.png",
		"ΔⲆᐃⵠᐃΔΔ": "img/season3-click.png",
		"ⵠᐃⵠⲆᐃⲆᐃ": "img/season4-out.png",
		"ⲆᐃⵠⵠΔⲆᐃ": "img/season4-in.png",
		"ⵠᐃⲆⲆᐃⵠⵠ": "img/season4-click.png",
		"ⲆⲆᐃⲆⵠΔΔ": "img/season5-out.png",
		"ΔΔᐃⲆⲆᐃᐃ": "img/season5-in.png",
		"ⵠⵠᐃⲆⵠⲆⲆ": "img/season5-click.png",
		"ⲆᐃᐃⲆⲆⲆⲆ": "img/season6-out.png",
		"ᐃⵠᐃⲆⲆⵠΔ": "img/season6-in.png",
		"ᐃⲆΔⲆⵠⲆⲆ": "img/season6-click.png",
		"ⲆⵠᐃⵠΔΔΔ": "img/locked-skin-alert.png",
		"ΔᐃᐃᐃⵠⲆⲆ": "img/locked-custom-alert.png",
		"ⲆⲆⵠⲆΔⲆⵠ": "img/bg-red-locked.png",
		"ΔΔⲆⵠⲆᐃΔ": "img/skin-button-out.png",
		"ⲆΔⵠⵠⲆⲆΔ": "img/skin-button-in.png",
		"ΔΔΔᐃⵠⵠᐃ": "img/skin-button-click.png",
		"ⲆΔⵠΔⵠⲆΔ": "img/accessory-button-out.png",
		"ⲆⵠⲆΔΔⵠΔ": "img/accessory-button-in.png",
		"ᐃⵠΔⲆⲆΔⵠ": "img/accessory-button-click.png",
		"ᐃⵠⲆᐃⲆΔⵠ": "img/bag-button-out.png",
		"ⲆᐃᐃᐃⵠΔⵠ": "img/bag-button-in.png",
		"ⲆᐃᐃⲆⵠᐃⵠ": "img/bag-button-click.png",
		"ᐃⲆⵠᐃΔᐃⵠ": "img/book-button-out.png",
		"ΔⵠΔΔΔⵠᐃ": "img/book-button-in.png",
		"ΔⲆᐃⵠΔΔⵠ": "img/book-button-click.png",
		"ⲆᐃΔΔⵠᐃΔ": "img/deadbox-button-out.png",
		"ΔⵠᐃⵠⲆⲆᐃ": "img/deadbox-button-in.png",
		"ⲆⵠᐃᐃⲆⵠⲆ": "img/deadbox-button-click.png",
		"ⵠᐃⵠⲆΔΔⵠ": "img/loot-button-out.png",
		"ᐃⵠΔΔᐃΔⵠ": "img/loot-button-in.png",
		"ΔΔᐃᐃΔⵠΔ": "img/loot-button-click.png",
		"ⵠⵠᐃⵠⵠⵠΔ": "img/free-item-out.png",
		"ᐃⵠΔⵠⲆⵠᐃ": "img/free-item-in.png",
		"ᐃⵠᐃⲆⵠⵠᐃ": "img/free-item-click.png",
		"ⲆΔⵠᐃ": "img/wood-item-out.png",
		"ᐃⲆΔᐃ": "img/wood-item-in.png",
		"ⵠΔⵠⵠ": "img/wood-item-click.png",
		"ⵠΔΔⵠⵠⵠⲆ": "img/stone-item.png",
		"ⲆΔⵠᐃⲆⲆᐃ": "img/stone-item-in.png",
		"ᐃᐃⲆΔⲆⲆᐃ": "img/stone-item-click.png",
		"ᐃΔᐃΔᐃⲆᐃ": "img/gold-item.png",
		"ΔΔΔⵠΔⵠΔ": "img/gold-item-in.png",
		"ⵠΔΔⵠⵠⵠⵠ": "img/gold-item-click.png",
		"ᐃⵠᐃᐃⵠⵠᐃ": "img/diamond-item.png",
		"ᐃⲆΔⲆⲆΔΔ": "img/diamond-item-in.png",
		"ᐃⵠⵠⲆΔⵠᐃ": "img/diamond-item-click.png",
		"ᐃΔΔᐃΔᐃΔ": "img/amethyst-item.png",
		"ⵠΔΔⲆⵠᐃⲆ": "img/amethyst-item-in.png",
		"ⵠⵠⵠⵠΔΔᐃ": "img/amethyst-item-click.png",
		"ᐃⵠᐃⲆⵠΔⵠ": "img/reidite-item.png",
		"ⲆᐃⵠⵠΔⲆⵠ": "img/reidite-item-in.png",
		"ⲆⵠΔᐃⲆⵠᐃ": "img/reidite-item-click.png",
		"ⲆΔⵠΔⵠΔⵠ": "img/special-item-out.png",
		"ΔΔΔΔΔΔΔ": "img/special-item-in.png",
		"ᐃⵠΔⲆⵠᐃΔ": "img/special-item-click.png",
		"ⲆΔᐃΔⲆⲆΔ": "img/level-item-out.png",
		"ᐃᐃΔⵠⲆⲆΔ": "img/level-item-in.png",
		"ᐃΔᐃⲆⵠᐃⲆ": "img/level-item-click.png",
		"ⲆᐃⵠⵠᐃⲆᐃ": "img/skin-previous-out.png",
		"ⲆⲆⵠⲆⲆᐃⵠ": "img/skin-previous-in.png",
		"ᐃΔΔⵠⲆΔⵠ": "img/skin-previous-click.png",
		"Ⲇᐃᐃᐃᐃⵠᐃ": "img/skin-next-out.png",
		"ᐃΔΔⲆΔΔⲆ": "img/skin-next-in.png",
		"Ⲇᐃᐃⵠᐃⵠᐃ": "img/skin-next-click.png",
		"ⵠᐃΔΔⲆ": "img/back-button-out.png",
		"Δᐃⵠⵠᐃ": "img/back-button-in.png",
		"ⵠᐃⲆᐃⲆ": "img/back-button-click.png",
		"ᐃⵠΔⵠΔⲆⵠ": "img/get-more-button-out.png",
		"ⲆⵠᐃⲆⵠΔⲆ": "img/get-more-button-in.png",
		"ⲆΔⲆⵠᐃⲆⲆ": "img/get-more-button-click.png",
		"ⲆⵠⲆⵠⵠⵠⵠ": "img/currency1-out.png",
		"ᐃⵠᐃᐃⲆΔⲆ": "img/currency1-in.png",
		"ᐃⲆᐃⲆΔΔᐃ": "img/currency1-click.png",
		"ⵠⵠⵠⵠⵠΔⵠ": "img/currency2-out.png",
		"ⵠⵠⵠᐃΔⵠᐃ": "img/currency2-in.png",
		"ⵠᐃⵠⵠΔⲆⲆ": "img/currency2-click.png",
		"ᐃᐃΔΔΔΔⵠ": "img/currency3-out.png",
		"ᐃᐃⲆⵠⵠⵠⵠ": "img/currency3-in.png",
		"ᐃΔΔⵠⲆΔⲆ": "img/currency3-click.png",
		"ΔⵠⵠΔⵠⵠᐃ": "img/currency4-out.png",
		"ⲆΔⲆᐃᐃᐃΔ": "img/currency4-in.png",
		"ΔⵠⲆᐃᐃΔᐃ": "img/currency4-click.png",
		"ⲆⲆΔᐃⵠΔⵠ": "img/currency5-out.png",
		"ⵠΔⵠⵠⲆᐃⵠ": "img/currency5-in.png",
		"ΔⵠⲆΔⵠⵠᐃ": "img/currency5-click.png",
		"ΔΔⵠⲆΔⲆⵠ": "img/price1-out.png",
		"ⵠᐃΔⲆⵠⲆⵠ": "img/price1-in.png",
		"ⲆᐃᐃᐃΔᐃᐃ": "img/price1-click.png",
		"ⵠⲆᐃⵠᐃⵠᐃ": "img/price2-out.png",
		"ⵠΔΔⲆΔΔΔ": "img/price2-in.png",
		"ⵠⵠᐃⵠⵠᐃⵠ": "img/price2-click.png",
		"ⵠⲆⵠᐃΔⲆΔ": "img/price3-out.png",
		"ⲆⲆⵠⵠⵠⵠⵠ": "img/price3-in.png",
		"ⲆΔⵠᐃⵠⲆΔ": "img/price3-click.png",
		"ᐃᐃⲆᐃᐃⲆⵠ": "img/price4-out.png",
		"ᐃᐃᐃⵠΔᐃⲆ": "img/price4-in.png",
		"ΔᐃΔⲆΔⵠⵠ": "img/price4-click.png",
		"ᐃⲆᐃⲆᐃᐃΔ": "img/price5-out.png",
		"ᐃⵠᐃΔⲆⵠΔ": "img/price5-in.png",
		"ᐃⲆᐃᐃᐃᐃⵠ": "img/price5-click.png",
		"ΔⵠⵠΔⲆⵠⵠΔⵠ": "img/buy-private-server-out.png",
		"ⵠⵠᐃᐃⲆᐃⵠⲆᐃ": "img/buy-private-server-in.png",
		"ⵠⵠⲆΔⵠΔᐃΔΔ": "img/buy-private-server-click.png",
		"ΔⵠΔⵠⲆᐃΔ": "img/atlanta-button-out.png",
		"ⲆΔᐃΔΔⵠᐃ": "img/atlanta-button-in.png",
		"ⲆⲆΔΔⲆᐃΔ": "img/atlanta-button-click.png",
		"ᐃᐃᐃⵠⲆΔΔ": "img/los-angeles-button-out.png",
		"ΔᐃᐃΔⲆΔⲆ": "img/los-angeles-button-in.png",
		"ᐃᐃᐃⵠⵠᐃΔ": "img/los-angeles-button-click.png",
		"ΔⵠⵠΔⲆⵠⵠ": "img/sydney-button-out.png",
		"ᐃΔⵠΔⵠΔΔ": "img/sydney-button-in.png",
		"ⵠⵠⵠΔΔⲆΔ": "img/sydney-button-click.png",
		"ⵠⵠᐃᐃⲆⵠⲆ": "img/frankfurt-button-out.png",
		"ⲆᐃⵠᐃΔⵠⵠ": "img/frankfurt-button-in.png",
		"ΔΔᐃᐃΔΔⲆ": "img/frankfurt-button-click.png",
		"ⲆⵠⲆⲆⲆᐃᐃ": "img/osaka-button-out.png",
		"ΔⲆⵠᐃΔⲆΔ": "img/osaka-button-in.png",
		"ⲆⲆᐃⵠⲆΔΔ": "img/osaka-button-click.png",
		"ⲆᐃΔⲆⲆⵠᐃⲆᐃ": "img/yes-location-out.png",
		"ⲆⲆⵠⵠⲆᐃⲆᐃΔ": "img/yes-location-in.png",
		"ᐃᐃⲆᐃⲆΔⵠᐃⲆ": "img/yes-location-click.png",
		"ⲆⵠⵠΔⵠⵠⵠ": "img/3days-button-out.png",
		"ⵠΔⲆᐃΔᐃᐃ": "img/3days-button-in.png",
		"ᐃΔⵠⲆᐃⵠⵠ": "img/3days-button-click.png",
		"ⲆΔΔΔⵠⵠᐃ": "img/7days-button-out.png",
		"ⲆⲆⵠΔᐃᐃⲆ": "img/7days-button-in.png",
		"ⲆᐃΔⵠⵠΔⵠ": "img/7days-button-click.png",
		"ΔΔⲆΔⵠⵠⲆ": "img/30days-button-out.png",
		"ⲆᐃⲆⵠⲆⲆⵠ": "img/30days-button-in.png",
		"ⵠΔΔᐃΔΔΔ": "img/30days-button-click.png",
		"ⵠᐃΔΔΔⲆⵠ": "img/90days-button-out.png",
		"ⵠΔⵠⵠΔᐃⲆ": "img/90days-button-in.png",
		"ΔⲆΔⵠⲆΔΔ": "img/90days-button-click.png",
		"ΔⲆⲆΔᐃᐃΔ": "img/spin1.png",
		"ⲆⵠⵠⵠⲆΔⵠ": "img/spin2.png",
		"ⵠⵠᐃⲆⵠⵠⵠ": "img/spin3.png",
		"ᐃⵠΔΔⵠΔᐃ": "img/spin4.png",
		"ⵠᐃΔⲆΔⲆⲆ": "img/spin5.png",
		"ᐃΔⲆⲆᐃΔⲆ": "img/spin6.png",
		"ᐃⵠᐃΔⵠᐃΔ": "img/arrow-spin.png",
		"ᐃⲆⲆⲆⵠᐃⲆ": "img/spin-button-1-out.png",
		"ΔΔᐃⲆΔᐃⵠ": "img/spin-button-1-in.png",
		"ⲆⵠⲆⵠⵠⵠⲆ": "img/spin-button-1-click.png",
		"ΔΔΔⵠΔⲆⲆ": "img/spin-button-2-out.png",
		"ⵠⵠⲆᐃᐃⵠΔ": "img/spin-button-2-in.png",
		"ⲆᐃΔⵠⲆⲆᐃ": "img/spin-button-2-click.png",
		"ᐃΔΔⲆⲆⲆⵠ": "img/spin-button-3-out.png",
		"ⵠΔⲆΔᐃΔᐃ": "img/spin-button-3-in.png",
		"ⲆⵠⵠⲆᐃⲆⵠ": "img/spin-button-3-click.png",
		"ᐃⲆΔⵠᐃᐃⵠ": "img/spin-button-4-out.png",
		"ΔᐃΔⵠᐃⲆⲆ": "img/spin-button-4-in.png",
		"ⵠΔⲆⲆΔⲆⲆ": "img/spin-button-4-click.png",
		"ᐃⵠⲆⵠⵠΔⲆ": "img/spin-button-5-out.png",
		"ᐃⵠⵠⵠⲆⲆⵠ": "img/spin-button-5-in.png",
		"ⲆⲆΔⲆΔⲆⵠ": "img/spin-button-5-click.png",
		"ΔⵠΔᐃᐃΔΔ": "img/spin-light.png",
		"ᐃΔⲆᐃⲆⵠⵠ": "img/tuto-wiki-out.png",
		"ᐃᐃⲆⵠⲆΔᐃ": "img/tuto-wiki-in.png",
		"ⲆⵠᐃΔⵠᐃⵠ": "img/tuto-wiki-click.png",
		"ⵠᐃΔⲆⵠΔᐃ": "img/tuto-previous-out.png",
		"ᐃⲆᐃⵠⵠⵠΔ": "img/tuto-previous-in.png",
		"ᐃΔⵠⵠᐃⲆⵠ": "img/tuto-previous-click.png",
		"ⲆⲆΔⵠᐃⵠⲆ": "img/tuto-next-out.png",
		"ⲆⲆⵠⲆⲆΔⲆ": "img/tuto-next-in.png",
		"ᐃΔᐃⲆᐃⵠⵠ": "img/tuto-next-click.png",
		"ⵠᐃᐃᐃᐃⵠⲆ": "img/time-leaderboard-out.png",
		"ᐃⵠᐃᐃⵠⲆᐃ": "img/time-leaderboard-in.png",
		"ΔⵠᐃⵠⵠⲆⲆ": "img/time-leaderboard-click.png",
		"ΔⲆⲆΔᐃᐃⲆ": "img/score-leaderboard-out.png",
		"ⵠΔⲆⲆΔΔᐃ": "img/score-leaderboard-in.png",
		"ⵠⵠᐃΔᐃΔⲆ": "img/score-leaderboard-click.png",
		"ᐃΔᐃⲆⵠⵠⵠ": "img/lvl-leaderboard-out.png",
		"ΔⲆΔⵠⲆᐃⲆ": "img/lvl-leaderboard-in.png",
		"ⵠⲆᐃᐃⵠⲆΔ": "img/lvl-leaderboard-click.png",
		"ΔⵠΔⵠᐃΔᐃ": "img/kill-leaderboard-out.png",
		"ᐃᐃⲆΔᐃᐃⲆ": "img/kill-leaderboard-in.png",
		"ᐃⵠΔⲆⵠᐃⲆ": "img/kill-leaderboard-click.png",
		"ⲆⲆⲆⵠᐃᐃΔ": "img/all-leaderboard-out.png",
		"ⵠᐃΔΔᐃᐃᐃ": "img/all-leaderboard-in.png",
		"ⲆⵠΔΔⲆΔⲆ": "img/all-leaderboard-click.png",
		"ⲆΔⵠⲆΔΔⲆ": "img/today-leaderboard-out.png",
		"ⲆᐃⵠⲆᐃᐃᐃ": "img/today-leaderboard-in.png",
		"ΔΔᐃΔⲆᐃⵠ": "img/today-leaderboard-click.png",
		"ᐃⵠⵠⲆᐃⵠᐃ": "img/week-leaderboard-out.png",
		"ᐃⵠΔᐃΔΔⵠ": "img/week-leaderboard-in.png",
		"ⲆᐃᐃᐃΔΔΔ": "img/week-leaderboard-click.png",
		"ⲆΔᐃᐃⲆⲆⵠ": "img/season1-out.png",
		"ⵠΔⲆΔᐃΔⵠ": "img/season1-in.png",
		"ᐃᐃΔⲆⲆⲆⵠ": "img/season1-click.png",
		"ⵠᐃⲆⲆᐃΔⵠ": "img/season2-out.png",
		"ⵠⵠⲆΔⵠⵠᐃ": "img/season2-in.png",
		"ᐃᐃᐃᐃΔᐃΔ": "img/season2-click.png",
		"ᐃⲆᐃΔⵠⲆΔ": "img/season3-out.png",
		"ΔᐃᐃⲆᐃⲆⲆ": "img/season3-in.png",
		"ᐃᐃΔⵠⵠΔⲆ": "img/season3-click.png",
		"ΔⲆⲆᐃⵠⵠΔ": "img/season4-out.png",
		"ⵠⵠΔΔΔᐃⵠ": "img/season4-in.png",
		"ΔᐃᐃⵠⵠⵠΔ": "img/season4-click.png",
		"ⲆᐃΔⵠΔⲆᐃ": "img/season5-out.png",
		"ⲆΔᐃΔⲆᐃⵠ": "img/season5-in.png",
		"ΔΔΔⵠⲆⲆᐃ": "img/season5-click.png",
		"ⵠⲆⲆⲆⵠΔΔ": "img/season6-out.png",
		"ⵠⲆΔⵠⲆᐃᐃ": "img/season6-in.png",
		"ⵠᐃΔⵠⲆΔᐃ": "img/season6-click.png",
		"ⲆΔᐃΔΔΔΔ": "img/total-lead-out.png",
		"ᐃᐃⵠᐃΔΔⵠ": "img/total-lead-in.png",
		"ᐃΔᐃⲆⵠⲆΔ": "img/total-lead-click.png",
		"ᐃΔᐃⲆⲆᐃΔ": "img/normal-lead-out.png",
		"ⲆΔⲆⵠⲆⵠΔ": "img/normal-lead-in.png",
		"ᐃΔΔⵠΔΔⲆ": "img/normal-lead-click.png",
		"ⲆΔⵠΔⲆᐃⲆ": "img/forest-lead-out.png",
		"ᐃᐃΔᐃΔᐃᐃ": "img/forest-lead-in.png",
		"ΔΔⵠΔⵠⲆⵠ": "img/forest-lead-click.png",
		"ΔⵠᐃΔⵠᐃⲆ": "img/vampire-lead-out.png",
		"ΔⲆᐃⲆᐃⵠᐃ": "img/vampire-lead-in.png",
		"ᐃΔⵠΔᐃⵠⵠ": "img/vampire-lead-click.png",
		"ⵠΔΔᐃᐃⲆΔ": "img/zombie-lead-out.png",
		"ⲆⵠᐃΔΔᐃⲆ": "img/zombie-lead-in.png",
		"ⲆⵠⲆΔΔⵠᐃ": "img/zombie-lead-click.png",
		"ⲆⵠᐃⲆⲆΔᐃ": "img/day-level5.png",
		"ᐃᐃⲆⲆⲆⵠⵠ": "img/night-level5.png",
		"ⲆΔⲆᐃᐃΔᐃ": "img/day-level10.png",
		"ΔΔⲆⵠⲆⲆᐃ": "img/night-level10.png",
		"ᐃⵠⵠΔΔⲆⲆ": "img/day-level15.png",
		"ΔΔⲆⵠⵠⲆΔ": "img/night-level15.png",
		"ΔΔΔᐃⵠⲆᐃ": "img/day-level20.png",
		"ⲆⲆⲆΔⲆⲆⵠ": "img/night-level20.png",
		"ᐃᐃΔᐃⵠⲆⲆ": "img/day-level25.png",
		"ΔⲆⵠⲆⲆⲆᐃ": "img/night-level25.png",
		"ⵠᐃΔⵠᐃΔⵠ": "img/day-level30.png",
		"ⲆⲆΔⵠᐃⵠΔ": "img/night-level30.png",
		"ΔᐃⲆⵠᐃΔΔ": "img/day-level35.png",
		"ᐃⵠΔⵠᐃΔⲆ": "img/night-level35.png",
		"Ⲇᐃᐃᐃⵠᐃⵠ": "img/day-level40.png",
		"ᐃⵠⲆⲆΔΔⲆ": "img/night-level40.png",
		"ⲆⲆⲆⵠⵠⲆᐃ": "img/day-level45.png",
		"ⵠⲆⲆⲆⲆⲆⵠ": "img/night-level45.png",
		"ⵠⲆΔⲆⲆΔᐃ": "img/day-level50.png",
		"ⵠⵠⵠⵠΔΔⵠ": "img/night-level50.png",
		"ⲆⲆΔⲆⵠⲆΔ": "img/day-level55.png",
		"ⵠⲆᐃⵠᐃⲆⵠ": "img/night-level55.png",
		"Δⵠᐃᐃᐃᐃⵠ": "img/day-level60.png",
		"ᐃΔⲆΔΔⲆΔ": "img/night-level60.png",
		"ⵠⵠᐃᐃⲆΔⲆ": "img/day-skin-devast0.png",
		"ⵠⵠΔΔᐃΔⵠ": "img/night-skin-devast0.png",
		"ΔᐃᐃⵠⵠⲆΔ": "img/day-hand-devaster.png",
		"ᐃᐃΔⲆⲆⲆΔ": "img/night-hand-devaster.png",
		"ⲆᐃᐃⲆᐃΔⵠ": "img/day-skin-star0.png",
		"ᐃⵠⵠⲆⵠⲆⵠ": "img/night-skin-star0.png",
		"ⲆᐃⵠⲆⲆⵠⲆ": "img/day-hand-star0.png",
		"ᐃⵠΔⲆΔⵠᐃ": "img/night-hand-star0.png",
		"ΔᐃΔⲆⵠⵠⵠ": "img/day-vampire.png",
		"ⵠᐃⵠᐃⵠⲆⵠ": "img/night-vampire.png",
		"ᐃⵠⵠΔΔⲆᐃ": "img/day-hand-vampire.png",
		"ⲆᐃⵠⵠΔᐃⲆ": "img/night-hand-vampire.png",
		"ᐃⵠⲆΔⵠᐃΔ": "img/day-zombie.png",
		"ⲆΔⲆⲆΔⲆⵠ": "img/night-zombie.png",
		"ⲆΔⵠⵠΔΔⲆ": "img/day-hand-zombie.png",
		"ⵠᐃᐃⵠᐃΔⲆ": "img/night-hand-zombie.png",
		"ⲆΔⵠΔⲆⲆⲆ": "img/day-skin113.png",
		"ΔᐃⵠᐃᐃΔⲆ": "img/night-skin113.png",
		"ᐃⵠⲆⲆⲆⵠⲆ": "img/day-hand-skin113.png",
		"ΔⵠΔⲆΔⵠᐃ": "img/night-hand-skin113.png",
		"ⵠᐃⵠⵠᐃΔⵠ": "img/day-skin0.png",
		"ᐃΔΔⲆΔⲆΔ": "img/night-skin0.png",
		"ⲆⲆᐃⲆⲆᐃⲆ": "img/day-skin1.png",
		"ⵠᐃΔΔᐃᐃⵠ": "img/night-skin1.png",
		"ⵠΔⵠᐃᐃΔΔ": "img/day-skin2.png",
		"ᐃΔΔⲆⵠⵠⲆ": "img/night-skin2.png",
		"ⲆⲆᐃⲆⵠⵠⲆ": "img/day-skin3.png",
		"ΔⵠᐃⵠⲆΔᐃ": "img/night-skin3.png",
		"ΔᐃⲆΔⵠⲆⵠ": "img/day-skin4.png",
		"ΔⵠΔΔΔΔⲆ": "img/night-skin4.png",
		"ⲆᐃΔⲆΔⵠᐃ": "img/day-skin5.png",
		"ⵠΔⲆᐃⲆⵠΔ": "img/night-skin5.png",
		"ⲆᐃⲆⵠᐃⲆⵠ": "img/day-skin6.png",
		"ΔⵠⵠᐃΔⵠΔ": "img/night-skin6.png",
		"ⲆᐃⲆΔⵠᐃⲆ": "img/day-skin7.png",
		"ⲆⵠⵠⲆΔᐃΔ": "img/night-skin7.png",
		"ⲆⲆⲆⲆᐃᐃᐃ": "img/day-skin8.png",
		"ᐃⵠΔΔΔᐃⵠ": "img/night-skin8.png",
		"ⵠΔᐃⵠⲆΔΔ": "img/day-skin9.png",
		"ⲆⵠⲆᐃⵠⲆᐃ": "img/night-skin9.png",
		"ⵠⲆⵠⲆⲆⵠᐃ": "img/day-skin10.png",
		"ⲆⵠΔᐃⵠᐃⲆ": "img/night-skin10.png",
		"ΔⲆⲆⲆᐃⵠᐃ": "img/day-skin11.png",
		"ᐃΔΔΔⵠᐃΔ": "img/night-skin11.png",
		"ᐃⵠᐃⲆᐃΔΔ": "img/day-skin12.png",
		"ΔⲆΔⲆⵠⲆΔ": "img/night-skin12.png",
		"ΔⲆⵠΔⲆΔΔ": "img/day-skin13.png",
		"ΔᐃⵠᐃΔⵠⵠ": "img/night-skin13.png",
		"ᐃⵠⵠΔⲆⵠⵠ": "img/day-skin14.png",
		"ⲆᐃⲆᐃᐃⵠΔ": "img/night-skin14.png",
		"ΔᐃⵠΔΔⲆᐃ": "img/day-skin15.png",
		"ⵠⲆᐃⲆⲆⲆΔ": "img/night-skin15.png",
		"ᐃⵠᐃⵠⵠⲆⲆ": "img/day-skin16.png",
		"ⲆⵠᐃΔⲆⲆⵠ": "img/night-skin16.png",
		"ⵠᐃᐃΔᐃⲆⵠ": "img/day-skin17.png",
		"ᐃⵠⲆΔᐃᐃⵠ": "img/night-skin17.png",
		"ᐃⵠΔΔⲆⲆⵠ": "img/day-skin18.png",
		"ⵠⵠΔⲆᐃⲆⲆ": "img/night-skin18.png",
		"ⲆᐃⵠⵠᐃⲆⲆ": "img/day-skin19.png",
		"ᐃΔⲆΔΔⵠⲆ": "img/night-skin19.png",
		"ΔⲆⵠΔⵠⲆⲆ": "img/day-skin20.png",
		"ⲆⵠⲆΔΔⲆⲆ": "img/night-skin20.png",
		"ⲆΔⵠΔΔΔᐃ": "img/day-skin21.png",
		"ᐃΔΔⵠⵠᐃⲆ": "img/night-skin21.png",
		"ΔⵠⲆᐃᐃᐃⲆ": "img/day-skin22.png",
		"ⲆⲆᐃⲆⲆΔⲆ": "img/night-skin22.png",
		"ΔΔᐃΔΔⲆᐃ": "img/day-skin23.png",
		"ᐃⲆᐃΔᐃⲆⲆ": "img/night-skin23.png",
		"ᐃⵠⵠᐃᐃΔⵠ": "img/day-skin24.png",
		"ⲆⵠⵠΔᐃⲆⵠ": "img/night-skin24.png",
		"ᐃΔΔⲆⵠΔΔ": "img/day-skin25.png",
		"ⲆⵠⵠᐃΔᐃⵠ": "img/night-skin25.png",
		"ⲆᐃᐃᐃⵠⵠΔ": "img/day-skin26.png",
		"ΔⲆⲆⵠⵠΔᐃ": "img/night-skin26.png",
		"ᐃΔΔΔⲆⲆᐃ": "img/day-skin27.png",
		"ᐃⵠⲆΔᐃⵠⲆ": "img/night-skin27.png",
		"ΔᐃⲆᐃᐃⵠⵠ": "img/day-skin28.png",
		"ᐃⵠᐃΔΔᐃΔ": "img/night-skin28.png",
		"ᐃⲆᐃᐃᐃⲆⵠ": "img/day-skin29.png",
		"ⵠⲆⲆᐃᐃⵠΔ": "img/night-skin29.png",
		"ⲆⵠⵠᐃᐃⲆⲆ": "img/day-skin30.png",
		"ΔⵠⲆᐃⲆⲆᐃ": "img/night-skin30.png",
		"ᐃⲆΔΔⵠᐃⵠ": "img/day-skin31.png",
		"ΔᐃΔⵠᐃᐃⵠ": "img/night-skin31.png",
		"ⲆⵠᐃΔΔᐃⵠ": "img/day-skin32.png",
		"ΔⲆᐃΔᐃΔΔ": "img/night-skin32.png",
		"ⵠᐃⲆⵠΔⲆⲆ": "img/day-skin33.png",
		"ⵠΔⲆᐃⲆᐃⵠ": "img/night-skin33.png",
		"ⵠⲆⲆᐃⲆⲆⲆ": "img/day-skin34.png",
		"ΔΔⵠⵠⲆⵠⲆ": "img/night-skin34.png",
		"ⵠⲆΔⵠΔᐃᐃ": "img/day-skin35.png",
		"ⵠᐃⲆⵠⲆΔᐃ": "img/night-skin35.png",
		"ⲆᐃⵠᐃⲆᐃⲆ": "img/day-skin36.png",
		"Δⵠⵠᐃᐃⵠᐃ": "img/night-skin36.png",
		"ᐃⵠⲆⵠⲆᐃᐃ": "img/day-skin37.png",
		"ⲆⵠᐃⵠⲆⲆⵠ": "img/night-skin37.png",
		"ⵠΔᐃᐃΔⵠΔ": "img/day-skin38.png",
		"ΔⵠΔᐃⲆᐃⲆ": "img/night-skin38.png",
		"ⲆⲆᐃⵠΔⵠⵠ": "img/day-skin39.png",
		"ⲆΔᐃⵠᐃᐃΔ": "img/night-skin39.png",
		"ΔᐃⵠᐃⲆΔⲆ": "img/day-skin40.png",
		"ⲆΔᐃⵠᐃⲆΔ": "img/night-skin40.png",
		"ⲆΔᐃⲆΔⲆⵠ": "img/day-skin41.png",
		"ⵠᐃᐃᐃᐃΔᐃ": "img/night-skin41.png",
		"ᐃΔΔᐃⲆⲆⵠ": "img/day-skin42.png",
		"ⵠᐃᐃⲆⲆΔⲆ": "img/night-skin42.png",
		"ⵠᐃᐃⵠⲆᐃΔ": "img/day-skin43.png",
		"ⵠⵠΔⲆᐃᐃΔ": "img/night-skin43.png",
		"ⲆΔΔⲆⵠⵠᐃ": "img/day-skin44.png",
		"ⲆᐃᐃΔᐃᐃⵠ": "img/night-skin44.png",
		"ⲆᐃⲆΔᐃⵠⲆ": "img/day-skin45.png",
		"ᐃⵠⵠⵠⵠⵠᐃ": "img/night-skin45.png",
		"ⲆⵠΔⵠⵠⵠᐃ": "img/day-skin46.png",
		"ⵠⲆⲆᐃΔΔⲆ": "img/night-skin46.png",
		"ᐃⵠΔⵠᐃΔᐃ": "img/day-skin47.png",
		"ᐃⵠΔⲆΔⵠⲆ": "img/night-skin47.png",
		"ΔᐃᐃⲆⲆⵠᐃ": "img/day-skin48.png",
		"ΔⲆΔΔΔⲆⲆ": "img/night-skin48.png",
		"ⲆΔΔΔΔⲆⵠ": "img/day-skin49.png",
		"ΔᐃⵠΔⵠᐃᐃ": "img/night-skin49.png",
		"ⵠⲆᐃᐃⵠᐃⲆ": "img/day-skin50.png",
		"ΔⵠⵠⲆⲆⲆⲆ": "img/night-skin50.png",
		"ⲆⲆⵠᐃΔᐃᐃ": "img/day-skin51.png",
		"ᐃΔΔΔⵠΔᐃ": "img/night-skin51.png",
		"ⲆⲆΔⵠΔⵠⲆ": "img/day-skin52.png",
		"ᐃⲆΔΔᐃⵠⵠ": "img/night-skin52.png",
		"ⲆᐃᐃⲆᐃᐃΔ": "img/day-skin53.png",
		"ᐃⵠⲆΔⵠⲆΔ": "img/night-skin53.png",
		"ΔᐃⵠⲆᐃΔΔ": "img/day-skin54.png",
		"ⲆᐃᐃΔᐃΔΔ": "img/night-skin54.png",
		"ᐃᐃⵠⲆΔⲆΔ": "img/day-skin55.png",
		"ᐃⵠΔⲆⵠΔᐃ": "img/night-skin55.png",
		"ᐃⲆⵠⵠⲆⵠⵠ": "img/day-skin56.png",
		"ⵠⲆΔᐃᐃΔᐃ": "img/night-skin56.png",
		"ⲆΔⲆⲆⵠⵠΔ": "img/day-skin57.png",
		"ⲆⲆΔⵠⲆⵠΔ": "img/night-skin57.png",
		"ⵠᐃᐃΔᐃⲆⲆ": "img/day-skin58.png",
		"ⵠΔⲆⵠᐃᐃΔ": "img/night-skin58.png",
		"ᐃⲆⲆⲆᐃᐃⵠ": "img/day-skin59.png",
		"ᐃⵠᐃᐃΔⵠⲆ": "img/night-skin59.png",
		"ΔΔᐃΔΔⵠⵠ": "img/day-skin60.png",
		"ΔⲆΔⵠᐃⵠΔ": "img/night-skin60.png",
		"ⲆΔⵠⲆⲆΔΔ": "img/day-skin61.png",
		"ΔᐃΔⵠΔⲆⵠ": "img/night-skin61.png",
		"ⲆⵠΔⲆⲆⵠᐃ": "img/day-skin62.png",
		"ⵠⵠᐃⲆΔΔⵠ": "img/night-skin62.png",
		"ΔⲆⵠΔⵠⵠΔ": "img/day-skin63.png",
		"ⵠⲆᐃⲆⲆᐃⲆ": "img/night-skin63.png",
		"ⵠⵠⵠⲆⲆⵠᐃ": "img/day-skin64.png",
		"ᐃᐃᐃΔΔΔΔ": "img/night-skin64.png",
		"ⲆⵠⲆΔᐃⵠⵠ": "img/day-skin65.png",
		"ⲆⲆᐃⵠⲆΔⵠ": "img/night-skin65.png",
		"ΔᐃⲆⵠΔⵠⵠ": "img/day-skin66.png",
		"ΔⵠΔΔⵠΔᐃ": "img/night-skin66.png",
		"ᐃⵠΔΔΔⲆⵠ": "img/day-skin67.png",
		"ⲆᐃΔⵠᐃⲆᐃ": "img/night-skin67.png",
		"ⲆⵠⵠΔΔᐃⵠ": "img/day-skin68.png",
		"ⵠΔᐃⲆⵠΔⵠ": "img/night-skin68.png",
		"ⲆΔᐃᐃⵠΔⲆ": "img/day-skin69.png",
		"ᐃᐃΔΔᐃΔⲆ": "img/night-skin69.png",
		"ⲆⲆⵠⵠⵠⵠᐃ": "img/day-skin70.png",
		"ᐃᐃᐃᐃⲆⵠⲆ": "img/night-skin70.png",
		"ΔᐃᐃⲆⵠⲆⵠ": "img/day-skin71.png",
		"ΔᐃⵠΔⵠⲆⲆ": "img/night-skin71.png",
		"ΔⵠΔⲆⲆΔΔ": "img/day-skin72.png",
		"ⵠⲆⲆⲆⵠⲆᐃ": "img/night-skin72.png",
		"ΔΔⲆⵠᐃⵠⲆ": "img/day-skin73.png",
		"ⵠⲆᐃⲆⵠΔⵠ": "img/night-skin73.png",
		"ᐃⵠᐃⲆᐃΔᐃ": "img/day-skin74.png",
		"ᐃⲆΔⲆⲆⲆⵠ": "img/night-skin74.png",
		"ΔΔⲆᐃΔΔⲆ": "img/day-skin75.png",
		"ⲆⲆⲆΔⲆⲆΔ": "img/night-skin75.png",
		"ⲆᐃⲆⲆⲆⲆᐃ": "img/day-skin76.png",
		"ᐃⲆᐃΔΔⵠᐃ": "img/night-skin76.png",
		"ⲆΔⲆⲆⵠΔᐃ": "img/day-skin77.png",
		"ᐃⵠⵠΔᐃⵠᐃ": "img/night-skin77.png",
		"ⵠⵠΔΔⲆᐃᐃ": "img/day-skin78.png",
		"ⲆⲆᐃⲆⲆⲆⵠ": "img/night-skin78.png",
		"ⵠΔΔᐃᐃⲆⵠ": "img/day-skin79.png",
		"ⵠⲆΔΔⲆΔᐃ": "img/night-skin79.png",
		"ⲆⲆⲆᐃⵠᐃᐃ": "img/day-skin80.png",
		"ⵠⲆⵠΔΔΔΔ": "img/night-skin80.png",
		"ᐃⲆΔᐃⲆⵠᐃ": "img/day-skin81.png",
		"ᐃⵠⲆΔᐃⲆΔ": "img/night-skin81.png",
		"ⲆⵠΔⵠⲆΔⵠ": "img/day-skin82.png",
		"ᐃⵠΔⵠᐃᐃⲆ": "img/night-skin82.png",
		"ⵠΔⵠᐃⵠΔⲆ": "img/day-skin83.png",
		"ΔΔΔᐃⵠᐃΔ": "img/night-skin83.png",
		"ᐃⵠⵠΔΔΔⲆ": "img/day-skin84.png",
		"ΔⵠΔⵠΔᐃᐃ": "img/night-skin84.png",
		"ⵠⲆΔⵠⵠⵠᐃ": "img/day-skin85.png",
		"ⵠᐃᐃⲆⲆᐃΔ": "img/night-skin85.png",
		"ᐃΔⲆᐃᐃΔⲆ": "img/day-skin86.png",
		"ΔⵠᐃᐃΔⲆⵠ": "img/night-skin86.png",
		"ᐃΔΔᐃⵠᐃⵠ": "img/day-skin87.png",
		"ΔⲆᐃᐃⵠⲆⵠ": "img/night-skin87.png",
		"ΔΔⲆᐃⵠᐃΔ": "img/day-skin88.png",
		"ⵠⵠⵠΔⵠᐃⲆ": "img/night-skin88.png",
		"ⵠΔΔΔⲆΔΔ": "img/day-skin89.png",
		"ᐃᐃᐃᐃᐃΔΔ": "img/night-skin89.png",
		"ⵠⵠⵠⲆⲆⵠⲆ": "img/day-skin90.png",
		"ⲆΔⵠᐃⵠⵠⲆ": "img/night-skin90.png",
		"ⵠⲆⲆⵠⵠᐃΔ": "img/day-skin91.png",
		"ΔⲆᐃΔⲆⵠᐃ": "img/night-skin91.png",
		"ⲆⵠΔᐃⲆⵠΔ": "img/day-skin92.png",
		"ΔⲆΔⲆⵠᐃⵠ": "img/night-skin92.png",
		"ⲆⲆΔᐃᐃᐃⲆ": "img/day-skin93.png",
		"ᐃᐃΔΔΔⲆⵠ": "img/night-skin93.png",
		"ⲆⲆΔᐃΔⲆⲆ": "img/day-skin94.png",
		"ᐃⲆⲆΔΔⵠᐃ": "img/night-skin94.png",
		"ⲆⵠⵠᐃΔⲆⵠ": "img/day-skin95.png",
		"ΔΔⵠΔⵠΔΔ": "img/night-skin95.png",
		"ΔⵠᐃⲆΔΔᐃ": "img/day-skin96.png",
		"ᐃᐃⲆΔⲆᐃⲆ": "img/night-skin96.png",
		"ⲆⲆᐃⲆΔᐃΔ": "img/day-skin97.png",
		"ⵠΔΔΔᐃⵠΔ": "img/night-skin97.png",
		"ΔᐃᐃΔΔᐃⲆ": "img/day-skin98.png",
		"ⵠⲆⵠᐃⲆΔᐃ": "img/night-skin98.png",
		"ΔΔᐃᐃⵠⵠΔ": "img/day-skin99.png",
		"ⵠⵠᐃⲆᐃⵠⲆ": "img/night-skin99.png",
		"ⲆᐃⲆⲆΔⲆᐃ": "img/day-skin100.png",
		"ⵠᐃᐃⵠΔⵠΔ": "img/night-skin100.png",
		"ⵠΔⵠⵠⲆΔⲆ": "img/day-skin101.png",
		"ⵠⵠΔᐃⵠᐃⵠ": "img/night-skin101.png",
		"ΔΔⲆΔΔⲆⵠ": "img/day-skin102.png",
		"ⵠΔᐃΔⵠᐃᐃ": "img/night-skin102.png",
		"ⵠΔᐃᐃᐃⵠᐃ": "img/day-skin103.png",
		"ⲆΔᐃⲆⵠᐃᐃ": "img/night-skin103.png",
		"ⲆᐃᐃⲆᐃⲆⲆ": "img/day-skin104.png",
		"ⲆⲆᐃⵠᐃⲆⵠ": "img/night-skin104.png",
		"ᐃⵠΔΔⲆΔΔ": "img/day-skin105.png",
		"ⲆΔⵠⲆᐃᐃⲆ": "img/night-skin105.png",
		"ᐃⲆΔⵠᐃΔᐃ": "img/day-skin106.png",
		"ᐃΔΔⵠΔⵠΔ": "img/night-skin106.png",
		"ⲆᐃΔᐃⵠⵠⲆ": "img/day-skin107.png",
		"ᐃΔⵠΔⲆΔΔ": "img/night-skin107.png",
		"ᐃᐃⲆⵠⲆⵠᐃ": "img/day-skin108.png",
		"ⵠⲆΔⲆⲆⵠᐃ": "img/night-skin108.png",
		"ΔᐃΔⵠⵠᐃᐃ": "img/day-skin109.png",
		"ⵠᐃⵠΔⵠⵠΔ": "img/night-skin109.png",
		"ΔΔΔⲆⲆᐃⵠ": "img/day-skin110.png",
		"ᐃΔᐃⲆⵠΔⵠ": "img/night-skin110.png",
		"ⲆᐃⵠⵠⵠΔΔ": "img/day-skin111.png",
		"ΔᐃⵠᐃⲆΔΔ": "img/night-skin111.png",
		"ⲆᐃᐃΔⲆᐃⵠ": "img/day-skin112.png",
		"ⲆⲆⵠΔⵠⲆᐃ": "img/night-skin112.png",
		"ᐃᐃΔᐃᐃⵠᐃΔⲆ": "img/day-skin113.png",
		"ⲆᐃᐃⲆⵠᐃⲆⵠΔ": "img/night-skin113.png",
		"ΔΔᐃᐃΔᐃⲆ": "img/day-skin114.png",
		"ⲆᐃⵠⲆⵠⲆΔ": "img/night-skin114.png",
		"ⲆᐃⲆΔⲆΔΔ": "img/day-skin115.png",
		"ΔⵠⲆⵠΔΔⵠ": "img/night-skin115.png",
		"ⵠⲆΔⲆᐃⵠᐃ": "img/day-skin116.png",
		"ⲆΔᐃⲆⵠᐃⲆ": "img/night-skin116.png",
		"ⲆᐃⵠⵠⲆᐃᐃ": "img/day-skin117.png",
		"ⲆΔⵠⵠΔΔⵠ": "img/night-skin117.png",
		"ᐃⲆⲆΔⲆΔΔ": "img/day-skin118.png",
		"ΔΔⲆΔⵠⲆΔ": "img/night-skin118.png",
		"ᐃΔᐃᐃⲆⲆⲆ": "img/day-skin119.png",
		"ⵠᐃⲆᐃⵠᐃⵠ": "img/night-skin119.png",
		"ΔⲆᐃΔⵠᐃΔ": "img/day-skin120.png",
		"ΔᐃⲆΔΔᐃⵠ": "img/night-skin120.png",
		"ΔΔⲆΔΔⵠΔ": "img/day-skin121.png",
		"ᐃⲆⲆᐃⲆⵠⲆ": "img/night-skin121.png",
		"ⲆΔΔΔΔⵠΔ": "img/day-skin122.png",
		"ⵠᐃᐃⲆⲆⵠⵠ": "img/night-skin122.png",
		"ᐃᐃⵠⵠΔⵠΔ": "img/day-skin123.png",
		"ΔⲆᐃⵠⵠᐃⲆ": "img/night-skin123.png",
		"ⵠⲆⵠΔⵠⲆⲆ": "img/day-skin124.png",
		"ⲆⲆΔΔⵠᐃᐃ": "img/night-skin124.png",
		"ΔΔΔⵠᐃⵠⵠ": "img/day-skin125.png",
		"ⵠᐃⵠΔΔᐃⵠ": "img/night-skin125.png",
		"ⵠⲆΔⲆⵠⵠᐃ": "img/day-skin126.png",
		"ⵠⲆᐃⵠⵠᐃᐃ": "img/night-skin126.png",
		"ΔᐃΔⲆⲆΔⲆ": "img/day-skin127.png",
		"ᐃⲆΔᐃᐃⵠᐃ": "img/night-skin127.png",
		"ⲆⵠⵠΔⲆⵠᐃ": "img/day-skin128.png",
		"ⲆⲆⲆᐃᐃΔᐃ": "img/night-skin128.png",
		"ΔⲆⵠⵠⲆΔΔ": "img/day-skin129.png",
		"ΔⲆᐃⵠᐃⲆΔ": "img/night-skin129.png",
		"ⲆᐃᐃᐃΔⵠΔ": "img/day-skin130-1.png",
		"ⵠᐃⲆⲆᐃΔΔ": "img/night-skin130-1.png",
		"ⵠΔΔΔⲆᐃᐃ": "img/day-skin131.png",
		"ⵠⵠⵠⲆᐃΔᐃ": "img/night-skin131.png",
		"ⵠⵠⲆΔⲆᐃᐃ": "img/day-skin132.png",
		"ᐃᐃⲆΔⵠΔⲆ": "img/night-skin132.png",
		"ΔⲆΔΔⵠᐃᐃ": "img/day-skin133.png",
		"ᐃⲆⲆΔⵠᐃΔ": "img/night-skin133.png",
		"ΔᐃⲆᐃΔΔΔ": "img/day-skin134.png",
		"ΔⲆΔᐃⲆⲆΔ": "img/night-skin134.png",
		"ΔΔⲆⵠⲆⵠΔ": "img/day-skin135.png",
		"ⲆⲆⲆⲆᐃΔⵠ": "img/night-skin135.png",
		"ⵠⲆⵠⵠᐃⲆΔ": "img/day-skin136.png",
		"ΔⲆⵠᐃⲆᐃⵠ": "img/night-skin136.png",
		"ⵠⵠΔⵠΔⵠⲆ": "img/day-skin137.png",
		"ᐃΔΔᐃᐃⲆⵠ": "img/night-skin137.png",
		"ΔⲆⵠⲆΔⵠⵠ": "img/day-skin138.png",
		"ⵠΔᐃⲆΔⲆᐃ": "img/night-skin138.png",
		"ᐃᐃΔⵠΔᐃᐃ": "img/day-skin139.png",
		"ᐃⵠⲆⵠⲆⵠᐃ": "img/night-skin139.png",
		"ᐃᐃⵠⵠⲆᐃΔ": "img/day-skin140.png",
		"ΔⲆΔⲆΔᐃΔ": "img/night-skin140.png",
		"ᐃⵠΔΔᐃΔΔ": "img/day-skin141.png",
		"ᐃⲆᐃΔⲆⵠⵠ": "img/night-skin141.png",
		"ΔⲆⵠⲆⵠΔⵠ": "img/day-skin142.png",
		"ᐃΔⵠΔΔΔᐃ": "img/night-skin142.png",
		"ⵠΔⲆⵠⵠⲆⲆ": "img/day-skin143.png",
		"ᐃᐃΔᐃⵠⵠⵠ": "img/night-skin143.png",
		"ⵠⵠᐃⵠⵠⲆⲆ": "img/day-skin144.png",
		"ⵠⲆΔⵠᐃⲆᐃ": "img/night-skin144.png",
		"ᐃΔⵠᐃⵠᐃⵠ": "img/day-skin145.png",
		"ⲆⲆᐃΔᐃⵠᐃ": "img/night-skin145.png",
		"Δᐃⵠᐃᐃⵠⵠ": "img/day-skin146.png",
		"ΔᐃᐃⲆᐃΔⲆ": "img/night-skin146.png",
		"ⲆΔⵠΔΔΔⵠ": "img/day-skin147.png",
		"ΔΔⲆΔⵠⵠⵠ": "img/night-skin147.png",
		"ⵠᐃⲆΔⵠⵠⲆ": "img/day-skin148.png",
		"ΔⵠⲆᐃᐃⵠⵠ": "img/night-skin148.png",
		"ΔᐃⲆⵠΔⵠⲆ": "img/day-skin149.png",
		"ΔᐃⵠΔⵠⵠΔ": "img/night-skin149.png",
		"ⲆⵠᐃᐃᐃⲆᐃ": "img/day-skin150.png",
		"ⲆΔⲆⲆΔⵠΔ": "img/night-skin150.png",
		"ⲆⲆΔⵠΔΔΔ": "img/day-skin151.png",
		"ᐃᐃⵠⵠΔⲆΔ": "img/night-skin151.png",
		"ᐃⲆⵠⵠΔⲆⵠ": "img/day-skin152.png",
		"ᐃⵠΔᐃⲆⲆΔ": "img/night-skin152.png",
		"ᐃⲆΔⵠⵠΔᐃ": "img/day-skin153.png",
		"ⵠΔⲆⲆᐃΔΔ": "img/night-skin153.png",
		"ΔⵠⲆⵠᐃᐃΔ": "img/day-skin154.png",
		"ᐃⵠⵠᐃΔⲆⲆ": "img/night-skin154.png",
		"ΔⲆΔᐃⲆᐃᐃ": "img/day-skin155.png",
		"ⲆΔᐃΔΔⲆⲆ": "img/night-skin155.png",
		"ⲆΔΔΔΔᐃⵠ": "img/day-skin156.png",
		"ⵠⵠⲆⵠᐃᐃΔ": "img/night-skin156.png",
		"ⲆᐃⲆⵠΔⵠᐃ": "img/day-skin157.png",
		"ΔΔⲆᐃΔᐃⵠ": "img/night-skin157.png",
		"ⵠⲆΔⲆᐃΔⵠ": "img/day-skin158.png",
		"ΔⵠⵠΔᐃᐃᐃ": "img/night-skin158.png",
		"ΔⵠⵠⲆΔᐃᐃ": "img/day-skin159.png",
		"ΔⲆΔΔᐃⵠᐃ": "img/night-skin159.png",
		"ⵠⲆΔⲆⲆΔⲆ": "img/day-skin160.png",
		"ⵠΔᐃⵠⵠᐃⲆ": "img/night-skin160.png",
		"ᐃᐃⲆᐃⲆᐃΔ": "img/day-skin161.png",
		"ΔⵠΔᐃⵠⵠⲆ": "img/night-skin161.png",
		"ᐃⲆⲆⲆᐃᐃᐃ": "img/day-skin162.png",
		"ⵠΔΔⲆᐃⵠⵠ": "img/night-skin162.png",
		"ⲆᐃΔΔⲆΔⵠ": "img/day-skin163.png",
		"ⲆᐃⵠᐃΔᐃᐃ": "img/night-skin163.png",
		"ΔᐃⵠΔΔᐃᐃ": "img/day-skin164.png",
		"ⲆᐃᐃⵠⵠΔⵠ": "img/night-skin164.png",
		"ⵠⵠᐃⵠᐃⲆΔ": "img/day-skin165.png",
		"ᐃⵠΔᐃⵠⵠᐃ": "img/night-skin165.png",
		"ΔΔⲆⵠΔᐃⵠ": "img/day-skin166.png",
		"ΔΔⵠᐃᐃᐃᐃ": "img/night-skin166.png",
		"ⵠΔⵠⵠᐃⲆᐃ": "img/day-skin167.png",
		"ᐃΔᐃⲆᐃⲆΔ": "img/night-skin167.png",
		"ΔⵠⵠⲆΔᐃⲆ": "img/day-skin168.png",
		"ⵠΔᐃᐃΔΔΔ": "img/night-skin168.png",
		"ⲆⵠᐃᐃᐃⵠΔ": "img/day-skin169.png",
		"ΔⵠᐃⵠⲆᐃⵠ": "img/night-skin169.png",
		"ⵠΔⵠΔΔⵠΔ": "img/day-skin170.png",
		"ΔΔᐃⲆΔⲆⵠ": "img/night-skin170.png",
		"ᐃⵠⵠΔᐃᐃᐃ": "img/day-skin171.png",
		"ΔᐃᐃᐃᐃⲆᐃ": "img/night-skin171.png",
		"ᐃⵠⲆⵠⵠΔΔ": "img/day-skin172.png",
		"ⲆᐃΔⲆⲆⲆⲆ": "img/night-skin172.png",
		"ⵠⵠⵠΔᐃⵠⲆ": "img/day-skin173.png",
		"ᐃⵠΔⵠⵠⲆΔ": "img/night-skin173.png",
		"ΔⲆΔⲆⵠΔⲆ": "img/day-skin174.png",
		"ᐃᐃⲆⵠⵠΔΔ": "img/night-skin174.png",
		"ⵠᐃⵠⵠⵠⲆΔ": "img/day-skin175.png",
		"ⵠᐃⲆᐃⲆΔΔ": "img/night-skin175.png",
		"ᐃᐃⵠᐃΔⲆΔ": "img/day-skin176.png",
		"ΔΔᐃⲆᐃⵠΔ": "img/night-skin176.png",
		"ⵠⲆΔⲆᐃᐃⲆ": "img/day-skin177.png",
		"ᐃⵠⲆΔⵠⵠᐃ": "img/night-skin177.png",
		"ᐃⲆⵠⲆᐃΔΔ": "img/day-skin178.png",
		"ⵠⲆⲆΔᐃΔᐃ": "img/night-skin178.png",
		"ⲆⲆΔⵠⲆΔᐃ": "img/day-skin179.png",
		"ΔⲆⵠⲆΔΔᐃ": "img/night-skin179.png",
		"ⵠΔΔⲆⲆⵠⵠ": "img/day-skin180.png",
		"ΔⲆⵠⲆΔⲆⵠ": "img/night-skin180.png",
		"ⲆⲆΔᐃⵠΔᐃ": "img/day-skin181.png",
		"ⵠⵠⲆΔⲆΔⵠ": "img/night-skin181.png",
		"ΔΔΔⲆⲆⵠΔ": "img/day-skin182.png",
		"ⵠⲆᐃΔᐃΔΔ": "img/night-skin182.png",
		"ᐃᐃⲆᐃⲆΔᐃ": "img/day-skin183.png",
		"ᐃΔⵠⲆᐃᐃⲆ": "img/night-skin183.png",
		"ΔⲆᐃΔⵠᐃⲆ": "img/day-skin184.png",
		"ⵠⲆΔΔΔᐃⲆ": "img/night-skin184.png",
		"ᐃᐃᐃⲆΔᐃᐃ": "img/day-skin185.png",
		"ⵠⵠᐃΔᐃΔⵠ": "img/night-skin185.png",
		"ⵠᐃⲆⲆⵠⵠⵠ": "img/day-skin186.png",
		"ΔⲆΔⵠⵠᐃⵠ": "img/night-skin186.png",
		"ⵠⵠΔᐃⲆⲆᐃ": "img/day-skin187.png",
		"ΔᐃΔΔⵠⵠᐃ": "img/night-skin187.png",
		"ΔⲆⵠΔΔΔΔ": "img/day-skin188.png",
		"ᐃᐃⲆⲆᐃΔⲆ": "img/night-skin188.png",
		"ⲆⵠⲆⲆⲆⵠΔ": "img/day-skin189.png",
		"ⵠⲆⲆⵠᐃⵠΔ": "img/night-skin189.png",
		"ⲆⵠΔᐃⵠⲆⵠ": "img/day-skin190.png",
		"ΔΔⵠⲆΔᐃⲆ": "img/night-skin190.png",
		"ΔⵠᐃᐃⲆⲆΔ": "img/day-skin191.png",
		"ΔᐃᐃᐃⲆⲆⲆ": "img/night-skin191.png",
		"ᐃⵠΔⵠⵠⵠⲆ": "img/day-skin192.png",
		"ⲆⲆᐃΔΔΔⵠ": "img/night-skin192.png",
		"ⲆᐃⵠⵠⵠⲆⵠ": "img/day-skin193.png",
		"ΔⵠⵠΔᐃⲆⲆ": "img/night-skin193.png",
		"ⵠΔᐃΔΔᐃⵠ": "img/day-skin194.png",
		"ⵠⵠⲆΔᐃΔᐃ": "img/night-skin194.png",
		"ᐃᐃⲆⵠⲆⲆⲆ": "img/day-skin195.png",
		"ΔΔⲆⲆⲆⵠⲆ": "img/night-skin195.png",
		"ⵠᐃᐃΔⵠΔⵠ": "img/day-skin196.png",
		"ΔᐃᐃⲆⵠⲆΔ": "img/night-skin196.png",
		"ΔΔⵠⲆΔⲆᐃ": "img/day-skin197.png",
		"ΔΔΔⲆⲆᐃⲆ": "img/night-skin197.png",
		"ΔᐃΔⲆᐃΔΔ": "img/day-skin198.png",
		"ΔᐃⵠᐃⲆΔⵠ": "img/night-skin198.png",
		"ⲆΔⲆⲆᐃⲆᐃ": "img/day-skin199.png",
		"ⲆΔⵠᐃⲆΔⲆ": "img/night-skin199.png",
		"ⲆΔᐃΔᐃᐃᐃ": "img/day-skin200.png",
		"ⵠⲆⲆΔⵠΔᐃ": "img/night-skin200.png",
		"ΔΔⲆᐃⵠᐃⵠ": "img/day-skin201.png",
		"ᐃⲆᐃᐃΔΔᐃ": "img/night-skin201.png",
		"ⲆⲆᐃᐃⲆΔⲆ": "img/day-skin202.png",
		"ᐃⵠᐃᐃⲆΔⵠ": "img/night-skin202.png",
		"ᐃΔⲆΔΔⵠⵠ": "img/day-skin203.png",
		"ⵠΔᐃΔΔΔⵠ": "img/night-skin203.png",
		"ᐃᐃᐃΔᐃᐃⲆ": "img/day-skin204.png",
		"ΔΔⲆΔᐃᐃⲆ": "img/night-skin204.png",
		"ⵠᐃⲆⵠᐃⵠⲆ": "img/day-skin205.png",
		"ⲆⵠⵠⲆⲆⵠⵠ": "img/night-skin205.png",
		"ᐃΔᐃⵠᐃⵠⵠ": "img/day-skin206.png",
		"ΔΔⲆᐃᐃⲆⲆ": "img/night-skin206.png",
		"ΔΔⲆⵠⲆⲆⲆ": "img/day-skin207.png",
		"ᐃⲆⲆᐃᐃᐃΔ": "img/night-skin207.png",
		"ᐃΔⲆΔᐃⵠΔ": "img/day-skin208.png",
		"ᐃᐃᐃⵠΔΔᐃ": "img/night-skin208.png",
		"ΔᐃⵠⲆᐃⵠΔ": "img/day-skin209.png",
		"ⵠⲆⲆΔΔⲆᐃ": "img/night-skin209.png",
		"ΔΔΔⲆⵠⵠᐃ": "img/day-skin210.png",
		"Δⵠᐃⵠⵠᐃⵠ": "img/night-skin210.png",
		"ⵠⲆⲆᐃᐃΔΔ": "img/day-skin211.png",
		"ΔΔⲆⲆᐃⵠΔ": "img/night-skin211.png",
		"ⲆΔΔⲆⵠΔⵠ": "img/day-skin212.png",
		"ⲆⵠⲆⲆⵠⵠΔ": "img/night-skin212.png",
		"ⵠᐃⲆᐃΔᐃΔ": "img/day-skin213.png",
		"ᐃⲆΔᐃⲆΔⲆ": "img/night-skin213.png",
		"ⵠⲆⲆⵠᐃⲆΔ": "img/day-skin214.png",
		"ΔⲆⵠⵠᐃΔⲆ": "img/night-skin214.png",
		"ⵠᐃⵠⲆⲆᐃⲆ": "img/day-hand-skin0.png",
		"ΔΔⵠΔΔᐃᐃ": "img/night-hand-skin0.png",
		"ᐃΔⵠΔΔᐃᐃ": "img/day-hand-skin1.png",
		"ΔⵠΔⵠⲆⲆᐃ": "img/night-hand-skin1.png",
		"ᐃΔⲆⲆᐃⲆᐃ": "img/day-hand-skin2.png",
		"ΔᐃⲆᐃⲆΔⵠ": "img/night-hand-skin2.png",
		"ᐃΔⲆⲆⲆⲆΔ": "img/day-hand-skin3.png",
		"ᐃᐃⲆⵠΔΔⲆ": "img/night-hand-skin3.png",
		"ⵠΔΔⲆᐃᐃᐃ": "img/day-hand-skin4.png",
		"ᐃΔᐃⲆΔΔⵠ": "img/night-hand-skin4.png",
		"ΔⵠⲆⲆⵠⵠᐃ": "img/day-hand-skin5.png",
		"ᐃᐃΔᐃᐃⵠᐃ": "img/night-hand-skin5.png",
		"ΔᐃⵠΔⵠⲆᐃ": "img/day-hand-skin6.png",
		"ΔⵠⲆΔⵠⵠⲆΔⲆ": "img/night-hand-skin6.png",
		"ΔΔⵠΔΔⵠⵠ": "img/day-hand-skin6.png",
		"ΔᐃⵠⵠⲆⵠᐃ": "img/night-hand-skin6.png",
		"ⲆⵠΔᐃΔΔⲆ": "img/day-hand-skin8.png",
		"ⲆᐃⵠⲆⲆΔⲆ": "img/night-hand-skin8.png",
		"ΔⲆⵠᐃⲆΔⵠ": "img/day-hand-skin9.png",
		"ⲆⲆⲆᐃΔⲆⵠ": "img/night-hand-skin9.png",
		"ⵠᐃᐃᐃᐃΔΔ": "img/day-hand-skin10.png",
		"ΔΔⵠⲆᐃⵠᐃ": "img/night-hand-skin10.png",
		"ⵠⲆⲆⲆΔⵠⲆ": "img/day-hand-skin11.png",
		"ⵠⲆⲆΔⵠⲆᐃ": "img/night-hand-skin11.png",
		"ΔⲆᐃᐃΔⵠⵠ": "img/day-hand-skin12.png",
		"ᐃᐃⵠⵠⵠΔᐃ": "img/night-hand-skin12.png",
		"ⵠⵠⵠⵠΔⵠᐃ": "img/day-hand-skin13.png",
		"ⲆᐃⵠⲆⵠᐃⲆ": "img/night-hand-skin13.png",
		"ᐃⵠⵠᐃⲆᐃᐃ": "img/day-hand-skin14.png",
		"ⵠᐃΔⲆΔⵠΔ": "img/night-hand-skin14.png",
		"ⵠⵠΔΔᐃⲆⲆ": "img/day-hand-skin15.png",
		"ⵠΔⲆⲆᐃⲆⲆ": "img/night-hand-skin15.png",
		"ⲆΔⲆᐃᐃΔΔ": "img/day-hand-skin16.png",
		"ᐃⲆᐃᐃⵠⲆᐃ": "img/night-hand-skin16.png",
		"ᐃᐃᐃⵠΔΔΔ": "img/day-hand-skin17.png",
		"ΔᐃⵠⵠΔⲆⵠ": "img/night-hand-skin17.png",
		"ᐃⲆⲆⲆⲆᐃΔ": "img/day-hand-skin18.png",
		"ᐃⵠΔⲆⲆⲆΔ": "img/night-hand-skin18.png",
		"ᐃΔᐃⲆⵠⲆᐃ": "img/day-hand-skin19.png",
		"ΔᐃΔΔⲆⵠᐃ": "img/night-hand-skin19.png",
		"ⵠᐃⵠⲆΔⲆΔ": "img/day-hand-skin20.png",
		"ΔⵠᐃΔⵠⵠⲆ": "img/night-hand-skin20.png",
		"ⵠⲆΔΔⵠⵠⵠ": "img/day-hand-skin21.png",
		"ᐃⵠⲆⲆⵠⵠᐃ": "img/night-hand-skin21.png",
		"Δⵠⵠᐃⵠᐃⵠ": "img/day-hand-skin22.png",
		"ⲆᐃΔΔᐃⵠᐃ": "img/night-hand-skin22.png",
		"ⲆΔΔᐃⲆⲆⲆ": "img/day-hand-skin23.png",
		"ⲆΔᐃᐃⵠⲆᐃ": "img/night-hand-skin23.png",
		"ΔⲆⵠⵠⲆᐃⵠ": "img/day-hand-skin24.png",
		"ΔⵠⵠⲆᐃⵠΔ": "img/night-hand-skin24.png",
		"ⲆⲆΔᐃᐃⵠⲆ": "img/day-hand-skin25.png",
		"ᐃⲆⲆⵠΔᐃⵠ": "img/night-hand-skin25.png",
		"ΔΔⲆᐃᐃᐃΔ": "img/day-hand-skin26.png",
		"ⵠΔΔΔⲆΔⲆ": "img/night-hand-skin26.png",
		"ΔⲆᐃᐃⲆⲆΔ": "img/day-hand-skin27.png",
		"ⲆΔⵠⵠⲆⲆᐃ": "img/night-hand-skin27.png",
		"ᐃⵠⲆᐃⵠᐃⵠ": "img/day-hand-skin28.png",
		"ΔⲆᐃΔⲆⲆⵠ": "img/night-hand-skin28.png",
		"ⲆᐃⵠⲆΔᐃΔ": "img/day-hand-skin29.png",
		"ᐃⲆᐃⵠⵠᐃΔ": "img/night-hand-skin29.png",
		"ⲆⵠᐃⲆΔΔⵠ": "img/day-hand-skin30.png",
		"ΔⵠΔⵠΔᐃΔ": "img/night-hand-skin30.png",
		"ⲆᐃⲆⲆᐃⵠΔ": "img/day-hand-skin31.png",
		"ⲆⵠⵠⲆⲆⲆⵠ": "img/night-hand-skin31.png",
		"ⲆᐃᐃⲆⵠⵠᐃ": "img/day-hand-skin32.png",
		"ⵠⵠΔⵠᐃΔΔ": "img/night-hand-skin32.png",
		"ⵠⲆΔᐃᐃᐃⵠ": "img/day-hand-skin33.png",
		"ⵠᐃᐃⵠⵠⲆⲆ": "img/night-hand-skin33.png",
		"ΔⲆⲆⲆⲆⲆⵠ": "img/day-hand-skin34.png",
		"ⵠᐃⵠᐃᐃΔΔ": "img/night-hand-skin34.png",
		"ⵠΔᐃᐃⲆΔⵠ": "img/day-hand-skin35.png",
		"ⲆⲆᐃⲆⵠΔⲆ": "img/night-hand-skin35.png",
		"ⵠΔΔΔⲆⲆⲆ": "img/day-hand-skin36.png",
		"ⲆⵠᐃΔⵠⲆⲆ": "img/night-hand-skin36.png",
		"ⲆᐃΔΔᐃⲆΔ": "img/day-hand-skin37.png",
		"ⵠΔⲆᐃⵠᐃᐃ": "img/night-hand-skin37.png",
		"ⵠᐃⵠᐃⵠᐃᐃ": "img/day-hand-skin38.png",
		"ΔΔΔΔⵠΔΔ": "img/night-hand-skin38.png",
		"ⲆᐃᐃⲆⲆⵠⵠ": "img/day-hand-skin39.png",
		"ⵠⵠᐃⵠᐃᐃⵠ": "img/night-hand-skin39.png",
		"ᐃᐃᐃΔΔⲆᐃ": "img/day-hand-skin40.png",
		"ⵠⵠᐃΔⲆⲆⵠ": "img/night-hand-skin40.png",
		"ΔᐃᐃΔⲆΔⵠ": "img/day-hand-skin41.png",
		"ⵠᐃᐃⵠⲆᐃⵠ": "img/night-hand-skin41.png",
		"ⲆᐃΔᐃᐃⲆᐃ": "img/day-hand-skin42.png",
		"ᐃⵠᐃⵠⵠΔⲆ": "img/night-hand-skin42.png",
		"ⲆⲆⲆⵠᐃⵠⲆ": "img/day-hand-skin43.png",
		"ᐃᐃⵠΔΔⵠᐃ": "img/night-hand-skin43.png",
		"ΔⲆᐃΔΔᐃⵠ": "img/day-hand-skin16.png",
		"ΔⲆᐃⲆⲆΔΔ": "img/night-hand-skin16.png",
		"ᐃⵠᐃᐃᐃⵠⵠ": "img/day-hand-skin45.png",
		"ⲆᐃⵠᐃᐃΔΔ": "img/night-hand-skin45.png",
		"ⲆᐃⲆⵠⵠⲆΔ": "img/day-hand-skin46.png",
		"ⲆΔΔⵠⲆⲆΔ": "img/night-hand-skin46.png",
		"ⲆⵠᐃᐃⲆᐃⵠ": "img/day-hand-skin47.png",
		"ⲆΔⵠΔⲆⲆΔ": "img/night-hand-skin47.png",
		"ⵠΔⵠᐃΔΔᐃ": "img/day-hand-skin48.png",
		"ΔⲆᐃⲆⵠⲆⵠ": "img/night-hand-skin48.png",
		"ⵠⵠΔΔⵠΔΔ": "img/day-hand-skin49.png",
		"ΔᐃᐃⲆⲆΔⲆ": "img/night-hand-skin49.png",
		"ΔⲆᐃⵠΔⵠⲆ": "img/day-hand-skin49.png",
		"ⲆⲆᐃⵠⵠᐃⵠ": "img/night-hand-skin49.png",
		"ⲆᐃⵠᐃΔᐃⲆ": "img/day-hand-skin51.png",
		"ⵠⵠⵠⲆⵠᐃΔ": "img/night-hand-skin51.png",
		"ⲆΔᐃᐃΔᐃⲆ": "img/day-hand-skin52.png",
		"ⵠⲆᐃᐃΔⵠᐃ": "img/night-hand-skin52.png",
		"ⵠⵠⵠⵠΔᐃΔ": "img/day-hand-skin53.png",
		"ΔⲆⲆᐃΔΔᐃ": "img/night-hand-skin53.png",
		"ΔⲆⵠⲆΔΔΔ": "img/day-hand-skin53.png",
		"ⲆⲆⲆΔᐃᐃᐃ": "img/night-hand-skin53.png",
		"ⵠⲆⲆᐃᐃⲆⵠ": "img/day-hand-skin55.png",
		"ΔᐃⲆⲆΔᐃⵠ": "img/night-hand-skin55.png",
		"ⲆΔⲆᐃΔⵠΔ": "img/day-hand-skin56.png",
		"ⵠΔᐃⵠⵠⲆⵠ": "img/night-hand-skin56.png",
		"ΔⲆᐃⲆⵠⲆᐃ": "img/day-hand-skin57.png",
		"ᐃᐃΔᐃΔΔⲆ": "img/night-hand-skin57.png",
		"ᐃⵠⵠⵠᐃᐃⵠ": "img/day-hand-skin58.png",
		"ⵠⵠⲆⲆᐃⵠΔ": "img/night-hand-skin58.png",
		"ⵠᐃⲆⲆⵠᐃΔ": "img/day-hand-skin59.png",
		"ⲆΔⵠⲆΔⵠᐃ": "img/night-hand-skin59.png",
		"ⲆᐃᐃⵠΔⵠⲆ": "img/day-hand-skin61.png",
		"ΔⵠⲆⲆᐃⲆΔ": "img/night-hand-skin61.png",
		"ΔΔⲆⲆΔΔⵠ": "img/day-hand-skin61.png",
		"ⵠⲆⵠᐃⲆⵠⲆ": "img/night-hand-skin61.png",
		"ⵠⵠᐃⵠⲆᐃⲆ": "img/day-hand-skin62.png",
		"ⵠᐃⵠΔΔⲆⲆ": "img/night-hand-skin62.png",
		"ⵠΔᐃᐃⵠᐃΔ": "img/day-hand-skin63.png",
		"ΔⵠΔⲆᐃΔⵠ": "img/night-hand-skin63.png",
		"ΔᐃΔⲆᐃⲆⲆ": "img/day-hand-skin64.png",
		"ΔᐃⵠⲆⵠⵠΔ": "img/night-hand-skin64.png",
		"ⵠⲆⲆⵠⲆᐃᐃ": "img/day-hand-skin65.png",
		"ⵠⵠⲆⵠᐃΔⵠ": "img/night-hand-skin65.png",
		"ⵠⲆᐃⲆᐃⵠΔ": "img/day-hand-skin66.png",
		"ᐃᐃⵠⲆⲆⲆⵠ": "img/night-hand-skin66.png",
		"ΔᐃⲆᐃΔⵠⲆ": "img/day-hand-skin67.png",
		"ⲆΔΔⲆΔⵠⲆ": "img/night-hand-skin67.png",
		"ᐃⵠΔΔᐃᐃⲆ": "img/day-hand-skin68.png",
		"ⵠᐃⲆⵠᐃⵠᐃ": "img/night-hand-skin68.png",
		"ΔΔΔᐃⲆⲆΔ": "img/day-hand-skin69.png",
		"ⵠΔᐃⲆᐃΔⵠ": "img/night-hand-skin69.png",
		"ⲆⲆⲆⲆΔⲆⵠ": "img/day-hand-skin70.png",
		"ΔΔᐃᐃᐃⲆᐃ": "img/night-hand-skin70.png",
		"ΔΔⲆⲆΔᐃⵠ": "img/day-hand-skin71.png",
		"ᐃΔⵠⲆᐃⲆⲆ": "img/night-hand-skin71.png",
		"ⵠΔᐃⵠⵠⲆΔ": "img/day-hand-skin72.png",
		"ᐃΔⵠΔⵠΔᐃ": "img/night-hand-skin72.png",
		"ⲆᐃⵠᐃⲆⵠᐃ": "img/day-hand-skin73.png",
		"ΔⵠᐃⲆⲆᐃΔ": "img/night-hand-skin73.png",
		"ΔⲆⲆⲆᐃⲆΔ": "img/day-hand-skin74.png",
		"ᐃᐃⵠᐃⲆⲆⵠ": "img/night-hand-skin74.png",
		"ⵠⲆⵠᐃⲆⵠⵠ": "img/day-hand-skin75.png",
		"ⲆⵠΔⲆⵠᐃΔ": "img/night-hand-skin75.png",
		"ⵠᐃΔⲆⵠⲆΔ": "img/day-hand-skin76.png",
		"ΔΔΔΔⲆⲆⲆ": "img/night-hand-skin76.png",
		"ΔᐃⲆⵠΔⵠᐃ": "img/day-hand-skin77.png",
		"ⲆⲆⵠᐃᐃᐃⲆ": "img/night-hand-skin77.png",
		"ⵠΔⲆⲆⲆᐃΔ": "img/day-hand-skin78.png",
		"ⵠᐃⵠⵠⵠⵠⲆ": "img/night-hand-skin78.png",
		"ᐃΔΔⵠΔᐃⵠ": "img/day-hand-skin79.png",
		"ⵠᐃⲆⲆⲆⵠᐃ": "img/night-hand-skin79.png",
		"ᐃⲆⵠᐃᐃⲆⲆ": "img/day-hand-skin80.png",
		"ΔᐃΔⵠᐃᐃᐃ": "img/night-hand-skin80.png",
		"ⵠᐃⵠΔⲆⲆⲆ": "img/day-hand-skin81.png",
		"ⵠⲆⲆⲆⲆΔᐃ": "img/night-hand-skin81.png",
		"ΔᐃΔⲆΔᐃⲆ": "img/day-hand-skin82.png",
		"ⵠⲆⲆᐃᐃⵠᐃ": "img/night-hand-skin82.png",
		"ΔᐃᐃⵠΔⲆΔ": "img/day-hand-skin83.png",
		"ΔΔⵠⲆᐃⲆᐃ": "img/night-hand-skin83.png",
		"ⵠⲆⲆᐃΔᐃᐃ": "img/day-hand-skin84.png",
		"ᐃΔⵠΔⵠⲆⲆ": "img/night-hand-skin84.png",
		"ⲆⵠΔⵠΔΔΔ": "img/day-hand-skin85.png",
		"ⲆⵠΔΔΔⵠⲆ": "img/night-hand-skin85.png",
		"ⲆⵠᐃⵠᐃΔΔ": "img/day-hand-skin86.png",
		"ⲆᐃΔᐃⵠᐃΔ": "img/night-hand-skin86.png",
		"ⵠⵠⵠⲆⲆΔᐃ": "img/day-hand-skin87.png",
		"ΔⲆⲆⵠⵠⵠⲆ": "img/night-hand-skin87.png",
		"ΔⲆΔᐃⵠᐃᐃ": "img/day-hand-skin88.png",
		"ΔⵠΔⵠᐃⲆⲆ": "img/night-hand-skin88.png",
		"ⲆᐃΔᐃⲆΔⲆ": "img/day-hand-skin89.png",
		"ΔΔᐃΔᐃⲆⲆ": "img/night-hand-skin89.png",
		"ⵠΔⵠᐃⵠᐃⵠ": "img/day-hand-skin90.png",
		"ⵠΔΔΔⵠⲆⵠ": "img/night-hand-skin90.png",
		"ΔΔΔⵠⲆⵠⵠ": "img/day-hand-skin91.png",
		"ⲆᐃⲆⵠᐃᐃⵠ": "img/night-hand-skin91.png",
		"ΔΔᐃΔΔⵠⲆ": "img/day-hand-skin92.png",
		"ⲆΔᐃⲆⲆᐃᐃ": "img/night-hand-skin92.png",
		"ⲆⲆⲆⲆᐃⵠⲆ": "img/day-hand-skin93.png",
		"ⲆⵠⲆΔΔᐃᐃ": "img/night-hand-skin93.png",
		"ⵠᐃⵠⲆᐃⲆⲆ": "img/day-hand-skin94.png",
		"ΔΔⵠᐃΔⲆΔ": "img/night-hand-skin94.png",
		"ⲆⵠΔⲆⲆᐃᐃ": "img/day-hand-skin95.png",
		"ⵠⵠⵠⲆⵠⵠᐃ": "img/night-hand-skin95.png",
		"ᐃΔⵠⵠⲆⵠⵠ": "img/day-hand-skin96.png",
		"ΔᐃⲆⲆΔΔⵠ": "img/night-hand-skin96.png",
		"ⵠⲆⵠΔⵠᐃⲆ": "img/day-hand-skin97.png",
		"ⵠᐃΔⲆΔᐃⲆ": "img/night-hand-skin97.png",
		"ᐃᐃᐃⵠᐃᐃⵠ": "img/day-hand-skin98.png",
		"ⲆⲆᐃᐃΔΔⵠ": "img/night-hand-skin98.png",
		"ⲆⵠΔⲆΔⲆⲆ": "img/day-hand-skin99.png",
		"ⲆⲆⵠᐃΔⵠᐃ": "img/night-hand-skin99.png",
		"ΔⵠⵠᐃᐃⵠⲆ": "img/day-hand-skin100.png",
		"ⲆⵠΔⲆᐃⲆΔ": "img/night-hand-skin100.png",
		"ⲆⲆᐃⲆΔⲆΔ": "img/day-hand-skin101.png",
		"ⲆΔⵠⵠⵠΔᐃ": "img/night-hand-skin101.png",
		"ⵠⵠᐃΔⲆΔⵠ": "img/day-hand-skin102.png",
		"ΔᐃⲆⲆᐃⵠⲆ": "img/night-hand-skin102.png",
		"ΔᐃΔᐃᐃⲆⵠ": "img/day-hand-skin103.png",
		"ΔᐃⵠΔⲆᐃⵠ": "img/night-hand-skin103.png",
		"ⵠᐃΔᐃΔᐃⵠ": "img/day-hand-skin104.png",
		"ⵠᐃⵠⲆᐃᐃᐃ": "img/night-hand-skin104.png",
		"ⵠᐃΔⵠⵠⵠⲆ": "img/day-hand-skin105.png",
		"ⵠⵠᐃᐃⲆⲆΔ": "img/night-hand-skin105.png",
		"ΔᐃᐃⵠⵠᐃΔ": "img/day-hand-skin106.png",
		"ΔⵠⲆΔⲆⵠⵠ": "img/night-hand-skin106.png",
		"ΔⵠⵠΔⵠᐃᐃ": "img/day-hand-skin107.png",
		"ᐃᐃⲆΔⵠᐃⵠ": "img/night-hand-skin107.png",
		"ΔΔⵠⲆⲆⲆⵠ": "img/day-hand-skin108.png",
		"ᐃⵠᐃⵠⵠᐃⲆ": "img/night-hand-skin108.png",
		"ΔΔⲆᐃᐃᐃᐃ": "img/day-hand-skin109.png",
		"ⵠⲆⵠⵠΔΔⵠ": "img/night-hand-skin109.png",
		"ⲆⲆⲆⲆⲆᐃⲆ": "img/day-hand-skin110.png",
		"ΔᐃⲆΔΔⲆΔ": "img/night-hand-skin110.png",
		"ⲆᐃᐃⲆΔⵠΔ": "img/day-hand-skin111.png",
		"ᐃⲆⲆΔⲆᐃⲆ": "img/night-hand-skin111.png",
		"ᐃⲆⵠⲆⵠⵠΔ": "img/day-hand-skin112.png",
		"ⲆᐃⵠΔᐃⲆΔ": "img/night-hand-skin112.png",
		"ⲆΔΔⵠⵠⲆⵠⵠⲆ": "img/day-hand-skin113.png",
		"ᐃⲆᐃᐃⲆᐃⵠᐃᐃ": "img/night-hand-skin113.png",
		"ΔᐃⵠⲆⵠᐃᐃ": "img/day-hand-skin114.png",
		"ᐃⲆⵠΔⵠⵠⲆ": "img/night-hand-skin114.png",
		"ⵠΔⵠⲆΔΔΔ": "img/day-hand-skin115.png",
		"ᐃⵠΔᐃⲆⵠⲆ": "img/night-hand-skin115.png",
		"ⵠⲆⲆⵠᐃⵠⵠ": "img/day-hand-skin116.png",
		"ΔᐃΔᐃⵠⲆΔ": "img/night-hand-skin116.png",
		"ᐃΔⲆⲆᐃⵠΔ": "img/day-hand-skin117.png",
		"ⵠⲆᐃⲆⲆᐃΔ": "img/night-hand-skin117.png",
		"ᐃΔⵠᐃΔΔᐃ": "img/day-hand-skin118.png",
		"ⵠⵠΔⲆΔΔᐃ": "img/night-hand-skin118.png",
		"ⲆᐃⲆΔⲆⵠᐃ": "img/day-hand-skin119.png",
		"ⲆⲆᐃⲆⲆⵠᐃ": "img/night-hand-skin119.png",
		"ⵠᐃᐃⲆⵠᐃⲆ": "img/day-hand-skin120.png",
		"ᐃΔΔΔΔⲆΔ": "img/night-hand-skin120.png",
		"ⵠⲆⲆⲆᐃΔΔ": "img/day-hand-skin122.png",
		"ⲆᐃΔⵠΔⵠᐃ": "img/night-hand-skin122.png",
		"ΔᐃᐃᐃⲆⵠⲆ": "img/day-hand-skin122.png",
		"ΔᐃⵠᐃⵠᐃΔ": "img/night-hand-skin122.png",
		"ΔΔᐃⲆᐃⵠⲆ": "img/day-hand-skin122.png",
		"ⲆⵠⲆⲆⲆⲆⲆ": "img/night-hand-skin122.png",
		"ᐃⲆⲆⵠⲆⲆΔ": "img/day-hand-skin124.png",
		"ᐃΔⵠΔⵠᐃⲆ": "img/night-hand-skin124.png",
		"ᐃⵠⵠᐃᐃⵠⲆ": "img/day-hand-skin125.png",
		"ᐃⵠᐃΔᐃⲆΔ": "img/night-hand-skin125.png",
		"ⲆΔΔᐃΔΔⵠ": "img/day-hand-skin126.png",
		"ᐃⵠⲆᐃⵠΔᐃ": "img/night-hand-skin126.png",
		"ⵠⲆⵠⵠΔⲆΔ": "img/day-hand-skin127.png",
		"ᐃΔⵠᐃⲆᐃⲆ": "img/night-hand-skin127.png",
		"ⵠⵠⵠⵠⵠΔᐃ": "img/day-hand-skin128.png",
		"ᐃᐃΔΔⲆΔⲆ": "img/night-hand-skin128.png",
		"ΔⲆΔΔⲆᐃΔ": "img/day-hand-skin129.png",
		"ΔⲆⵠᐃΔⵠᐃ": "img/night-hand-skin129.png",
		"ⲆⲆΔⵠⲆᐃᐃ": "img/day-hand-skin130.png",
		"ΔⵠΔⲆΔᐃΔ": "img/night-hand-skin130.png",
		"ΔᐃᐃᐃᐃΔⲆ": "img/day-hand-skin131.png",
		"ΔΔΔⵠᐃᐃⲆ": "img/night-hand-skin131.png",
		"ⵠᐃⵠΔⲆΔⲆ": "img/day-hand-skin130.png",
		"ⵠΔⲆⵠⵠⵠⵠ": "img/night-hand-skin130.png",
		"ⲆⵠⲆⲆⲆᐃΔ": "img/day-hand-skin133.png",
		"ⲆⲆᐃⵠⵠⵠⲆ": "img/night-hand-skin133.png",
		"ⵠⲆΔΔΔⲆΔ": "img/day-hand-skin134.png",
		"ⵠΔΔΔᐃⵠᐃ": "img/night-hand-skin134.png",
		"ⲆⲆᐃⲆᐃⵠⵠ": "img/day-hand-skin135.png",
		"ⵠⲆᐃⵠΔⵠᐃ": "img/night-hand-skin135.png",
		"ᐃᐃᐃⲆⲆᐃᐃ": "img/day-hand-skin136.png",
		"ⲆⲆⲆⵠΔᐃΔ": "img/night-hand-skin136.png",
		"ᐃⵠⲆΔᐃᐃΔ": "img/day-hand-skin137.png",
		"Δᐃᐃⵠⵠᐃⵠ": "img/night-hand-skin137.png",
		"ⲆᐃⲆⵠⵠᐃⲆ": "img/day-hand-skin138.png",
		"ΔΔⲆⵠⲆⵠⵠ": "img/night-hand-skin138.png",
		"ᐃⲆΔⲆᐃⵠⵠ": "img/day-hand-skin139.png",
		"ⵠᐃΔⲆⲆΔᐃ": "img/night-hand-skin139.png",
		"ᐃⵠⲆΔΔⵠΔ": "img/day-hand-skin140.png",
		"ⵠᐃⵠⵠⲆΔⲆ": "img/night-hand-skin140.png",
		"ΔⲆᐃⲆⲆΔⵠ": "img/day-hand-skin141.png",
		"ᐃᐃΔⲆⲆᐃᐃ": "img/night-hand-skin141.png",
		"ⵠⲆΔⵠΔⵠⲆ": "img/day-hand-skin142.png",
		"ΔᐃΔⲆⵠᐃⵠ": "img/night-hand-skin142.png",
		"ᐃⵠⲆⲆⵠⵠΔ": "img/day-hand-skin143.png",
		"ⵠᐃᐃⲆⲆⵠᐃ": "img/night-hand-skin143.png",
		"ⵠⲆⲆⵠᐃΔⵠ": "img/day-hand-skin144.png",
		"ᐃᐃᐃᐃᐃᐃᐃ": "img/night-hand-skin144.png",
		"ΔⵠⵠΔⲆⵠᐃ": "img/day-hand-skin145.png",
		"ΔᐃᐃᐃΔⵠⲆ": "img/night-hand-skin145.png",
		"ⵠⵠΔᐃΔⲆᐃ": "img/day-hand-skin146.png",
		"ΔᐃΔⲆⵠᐃⲆ": "img/night-hand-skin146.png",
		"ⲆⲆᐃᐃΔᐃⲆ": "img/day-hand-skin147.png",
		"ᐃΔΔⵠᐃᐃᐃ": "img/night-hand-skin147.png",
		"ᐃⵠᐃⵠΔⵠⲆ": "img/day-hand-skin148.png",
		"ⵠᐃᐃⵠΔⲆΔ": "img/night-hand-skin148.png",
		"ᐃⲆⲆⵠΔⲆᐃ": "img/day-hand-skin149.png",
		"ⵠΔⵠᐃⲆⲆⵠ": "img/night-hand-skin149.png",
		"ⲆᐃⵠᐃⲆᐃᐃ": "img/day-hand-skin150.png",
		"ⵠⲆⵠᐃΔⲆⲆ": "img/night-hand-skin150.png",
		"ⵠⲆᐃΔⲆΔᐃ": "img/day-hand-skin151.png",
		"ⲆΔⲆᐃⵠΔΔ": "img/night-hand-skin151.png",
		"ⲆⲆⲆΔⵠⲆᐃ": "img/day-hand-skin152.png",
		"ΔⲆΔⵠᐃΔᐃ": "img/night-hand-skin152.png",
		"ΔⵠⲆᐃⵠΔⵠ": "img/day-hand-skin153.png",
		"ⵠΔΔΔⵠⵠΔ": "img/night-hand-skin153.png",
		"ΔΔⵠⲆΔᐃⵠ": "img/day-hand-skin154.png",
		"ᐃⵠⲆΔᐃⵠᐃ": "img/night-hand-skin154.png",
		"ΔⲆⵠᐃⲆᐃᐃ": "img/day-hand-skin155.png",
		"ΔⵠⵠᐃΔⵠᐃ": "img/night-hand-skin155.png",
		"ⵠⵠᐃⲆⲆΔᐃ": "img/day-hand-skin156.png",
		"ⵠᐃΔⲆᐃΔᐃ": "img/night-hand-skin156.png",
		"ⵠᐃΔΔⲆΔⵠ": "img/day-hand-skin157.png",
		"ΔᐃⲆᐃᐃⲆΔ": "img/night-hand-skin157.png",
		"ⵠΔⵠΔΔⲆⵠ": "img/day-hand-skin158.png",
		"ⲆⲆⲆᐃⵠⵠⵠ": "img/night-hand-skin158.png",
		"ⵠⵠⵠΔⲆΔⵠ": "img/day-hand-skin159.png",
		"ⵠᐃⵠⵠᐃⵠⵠ": "img/night-hand-skin159.png",
		"ⵠΔⵠΔΔᐃⵠ": "img/day-hand-skin160.png",
		"ᐃΔᐃⲆᐃᐃᐃ": "img/night-hand-skin160.png",
		"ⵠᐃΔⵠΔΔᐃ": "img/day-hand-skin161.png",
		"ⵠⲆᐃΔΔΔⲆ": "img/night-hand-skin161.png",
		"ΔΔⵠⲆⵠᐃΔ": "img/day-hand-skin162.png",
		"ⵠᐃⲆᐃΔⲆᐃ": "img/night-hand-skin162.png",
		"ᐃᐃⲆⲆΔⲆⵠ": "img/day-hand-skin163.png",
		"ᐃΔⲆᐃⲆᐃⲆ": "img/night-hand-skin163.png",
		"ᐃⵠⲆΔᐃⵠΔ": "img/day-hand-skin164.png",
		"ⵠᐃΔΔⲆⵠᐃ": "img/night-hand-skin164.png",
		"ⲆⵠⵠⵠᐃΔⵠ": "img/day-hand-skin165.png",
		"Ⲇⵠⵠⵠᐃⵠᐃ": "img/night-hand-skin165.png",
		"ⲆⲆΔⲆⵠⲆⲆ": "img/day-hand-skin166.png",
		"ⲆⵠΔΔΔⲆᐃ": "img/night-hand-skin166.png",
		"ᐃⵠⲆⵠᐃⵠⲆ": "img/day-hand-skin167.png",
		"ⵠⵠΔᐃᐃⵠΔ": "img/night-hand-skin167.png",
		"ⵠΔⵠⵠⵠⲆᐃ": "img/day-hand-skin168.png",
		"ⲆᐃᐃΔᐃⵠΔ": "img/night-hand-skin168.png",
		"ᐃᐃⲆⵠⵠᐃΔ": "img/day-hand-skin169.png",
		"ⲆⵠΔᐃᐃⲆⵠ": "img/night-hand-skin169.png",
		"ᐃⵠᐃΔΔⲆⵠ": "img/day-hand-skin170.png",
		"ᐃᐃⵠΔΔᐃⵠ": "img/night-hand-skin170.png",
		"ⵠⲆΔⵠᐃΔΔ": "img/day-hand-skin171.png",
		"ⵠⲆⵠΔⲆΔⵠ": "img/night-hand-skin171.png",
		"ⲆⵠΔᐃΔᐃᐃ": "img/day-hand-skin172.png",
		"ⲆᐃᐃⲆΔⲆᐃ": "img/night-hand-skin172.png",
		"Δᐃᐃᐃᐃᐃᐃ": "img/day-hand-skin173.png",
		"ⲆⲆᐃⵠⵠⲆΔ": "img/night-hand-skin173.png",
		"ⵠⵠΔⵠᐃⵠⲆ": "img/day-hand-skin174.png",
		"ⵠᐃᐃⵠΔΔᐃ": "img/night-hand-skin174.png",
		"ᐃΔΔⵠⲆᐃΔ": "img/day-hand-skin175.png",
		"ᐃᐃΔᐃⵠⲆΔ": "img/night-hand-skin175.png",
		"ⵠⵠⲆᐃⲆᐃⲆ": "img/day-hand-skin176.png",
		"ΔⵠᐃⲆⵠᐃᐃ": "img/night-hand-skin176.png",
		"ᐃⵠᐃᐃΔΔⲆ": "img/day-hand-skin177.png",
		"ⵠΔⲆΔᐃⲆΔ": "img/night-hand-skin177.png",
		"ⲆⲆᐃⲆⵠⲆⵠ": "img/day-hand-skin178.png",
		"ⵠΔᐃⲆᐃⵠⲆ": "img/night-hand-skin178.png",
		"ΔⲆᐃⵠⵠᐃᐃ": "img/day-hand-skin179.png",
		"ⵠⲆᐃΔⲆΔⲆ": "img/night-hand-skin179.png",
		"ᐃⲆᐃⵠⵠⲆᐃ": "img/day-hand-skin180.png",
		"ⵠⵠᐃᐃΔⲆᐃ": "img/night-hand-skin180.png",
		"ΔⵠⲆᐃΔⵠⵠ": "img/day-hand-skin181.png",
		"ⵠᐃΔΔΔΔΔ": "img/night-hand-skin181.png",
		"ⲆᐃᐃⵠΔⵠᐃ": "img/day-hand-skin182.png",
		"ᐃⲆᐃⵠⵠⲆⲆ": "img/night-hand-skin182.png",
		"ⲆⵠΔⲆⲆΔΔ": "img/day-hand-skin183.png",
		"ⲆⵠΔⵠⲆⵠⵠ": "img/night-hand-skin183.png",
		"ⵠⵠⵠΔᐃΔᐃ": "img/day-hand-skin184.png",
		"ⲆⲆΔΔⲆᐃⵠ": "img/night-hand-skin184.png",
		"ⵠⵠⵠⵠΔΔⲆ": "img/day-hand-skin185.png",
		"ΔΔΔⲆΔᐃⲆ": "img/night-hand-skin185.png",
		"ᐃΔⲆⲆⵠⲆⲆ": "img/day-hand-skin186.png",
		"ⵠΔⲆΔⲆΔᐃ": "img/night-hand-skin186.png",
		"ⵠΔΔⵠⵠⵠΔ": "img/day-hand-skin187.png",
		"ⵠΔᐃⵠΔᐃⲆ": "img/night-hand-skin187.png",
		"ΔΔⲆΔⲆⲆΔ": "img/day-hand-skin188.png",
		"ⲆᐃᐃᐃΔᐃⲆ": "img/night-hand-skin188.png",
		"ⵠⵠⵠⲆⲆᐃⲆ": "img/day-hand-skin189.png",
		"ⲆⲆᐃⵠⲆᐃΔ": "img/night-hand-skin189.png",
		"ⵠΔΔᐃΔᐃᐃ": "img/day-hand-skin190.png",
		"ⵠΔΔⵠᐃⵠΔ": "img/night-hand-skin190.png",
		"ΔⲆΔⵠⵠᐃᐃ": "img/day-hand-skin191.png",
		"ᐃⵠⵠᐃΔᐃⵠ": "img/night-hand-skin191.png",
		"ⵠΔᐃΔⵠⵠΔ": "img/day-hand-skin192.png",
		"ᐃΔⲆⵠⵠΔᐃ": "img/night-hand-skin192.png",
		"ᐃᐃⲆᐃᐃⲆⲆ": "img/day-hand-skin193.png",
		"ⵠΔⵠⲆⲆᐃⲆ": "img/night-hand-skin193.png",
		"ⲆΔⵠⵠⵠⲆⲆ": "img/day-hand-skin194.png",
		"ΔⵠⵠⲆᐃⲆΔ": "img/night-hand-skin194.png",
		"ⲆⲆⵠᐃᐃᐃⵠ": "img/day-hand-skin195.png",
		"ΔΔΔᐃΔⵠΔ": "img/night-hand-skin195.png",
		"ᐃⲆΔΔΔⲆΔ": "img/day-hand-skin196.png",
		"ΔΔᐃⲆⵠⲆΔ": "img/night-hand-skin196.png",
		"ᐃⵠΔⵠⲆⵠⵠ": "img/day-hand-skin197.png",
		"ⵠⵠⵠᐃᐃᐃⵠ": "img/night-hand-skin197.png",
		"ⲆⲆⵠⲆᐃⵠᐃ": "img/day-hand-skin198.png",
		"ⲆᐃⲆⵠⲆΔⲆ": "img/night-hand-skin198.png",
		"ᐃⵠΔⵠᐃⲆΔ": "img/day-hand-skin199.png",
		"ᐃᐃⵠΔⵠⲆⵠ": "img/night-hand-skin199.png",
		"ⵠⵠⲆⵠⵠⲆΔ": "img/day-hand-skin200.png",
		"ΔⲆᐃᐃΔⵠⲆ": "img/night-hand-skin200.png",
		"ⵠΔΔᐃⲆⲆⵠ": "img/day-hand-skin201.png",
		"ΔⵠΔⵠΔᐃⵠ": "img/night-hand-skin201.png",
		"ΔΔⲆⵠᐃⲆΔ": "img/day-hand-skin202.png",
		"ᐃΔᐃⲆΔⵠᐃ": "img/night-hand-skin202.png",
		"Ⲇⵠⵠⵠᐃᐃᐃ": "img/day-hand-skin203.png",
		"ΔⵠᐃΔⵠⵠᐃ": "img/night-hand-skin203.png",
		"ⲆΔⵠΔΔΔΔ": "img/day-hand-skin204.png",
		"ᐃΔⵠᐃΔᐃᐃ": "img/night-hand-skin204.png",
		"ΔᐃⵠⲆΔⵠⵠ": "img/day-hand-skin205.png",
		"ΔⵠⲆᐃⲆⵠᐃ": "img/night-hand-skin205.png",
		"ᐃⲆⲆⵠᐃᐃⲆ": "img/day-hand-skin206.png",
		"ⵠⲆⲆⲆⲆᐃᐃ": "img/night-hand-skin206.png",
		"ᐃΔᐃⵠΔⵠⵠ": "img/day-hand-skin207.png",
		"ⲆΔΔᐃⵠⵠΔ": "img/night-hand-skin207.png",
		"ΔΔᐃⵠΔΔⵠ": "img/day-hand-skin208.png",
		"ⲆⵠⵠⵠΔΔΔ": "img/night-hand-skin208.png",
		"ΔⲆΔᐃⵠΔⲆ": "img/day-hand-skin209.png",
		"ⲆΔΔⲆᐃⲆΔ": "img/night-hand-skin209.png",
		"ⵠΔⲆⲆᐃΔⵠ": "img/day-hand-skin210.png",
		"ⲆⵠⵠᐃᐃⲆᐃ": "img/night-hand-skin210.png",
		"ΔᐃⵠᐃⵠⲆⵠ": "img/day-hand-skin211.png",
		"ⲆᐃΔΔⵠΔⲆ": "img/night-hand-skin211.png",
		"ⵠᐃⵠⲆⲆⵠⲆ": "img/day-hand-skin212.png",
		"ᐃⵠⵠⵠⲆⲆⲆ": "img/night-hand-skin212.png",
		"ΔΔⲆΔΔᐃᐃ": "img/day-hand-skin213.png",
		"ᐃⲆᐃⲆᐃⵠⵠ": "img/night-hand-skin213.png",
		"ΔⲆᐃⵠⵠⵠⲆ": "img/day-hand-skin214.png",
		"ΔⲆⵠⲆΔⲆᐃ": "img/night-hand-skin214.png",
		"ⵠⲆⲆᐃⵠΔΔ": "img/day-bag-star0.png",
		"ⲆΔⲆΔⲆⲆΔ": "img/night-bag-star0.png",
		"ΔᐃᐃᐃΔⵠⵠ": "img/day-bag0.png",
		"ΔⵠⵠⵠⵠᐃΔ": "img/night-bag0.png",
		"ΔⵠⲆⲆⲆΔΔ": "img/day-bag1.png",
		"ⵠⵠⵠⵠΔⲆⲆ": "img/night-bag1.png",
		"ᐃⵠⲆᐃⵠᐃΔ": "img/day-bag2.png",
		"ΔᐃΔⲆᐃⵠⲆ": "img/night-bag2.png",
		"ᐃᐃⲆΔⵠⵠⵠ": "img/day-bag3.png",
		"ΔⲆΔᐃⵠᐃⲆ": "img/night-bag3.png",
		"ᐃⲆᐃⲆᐃⵠᐃ": "img/day-bag4.png",
		"ⵠΔΔᐃⲆⵠⲆ": "img/night-bag4.png",
		"ᐃΔⵠⲆᐃⵠΔ": "img/day-bag5.png",
		"ΔⲆΔᐃⲆⲆᐃ": "img/night-bag5.png",
		"ⲆⲆⲆᐃⲆΔⲆ": "img/day-bag6.png",
		"ΔⲆⵠΔᐃᐃⲆ": "img/night-bag6.png",
		"ⵠⵠⵠⲆΔⵠᐃ": "img/day-bag7.png",
		"ⵠⵠᐃᐃᐃΔⵠ": "img/night-bag7.png",
		"ΔⲆΔᐃᐃΔΔ": "img/day-bag8.png",
		"ΔⵠⵠⲆᐃΔᐃ": "img/night-bag8.png",
		"ⵠΔᐃⲆΔⵠᐃ": "img/day-bag9.png",
		"ᐃⵠⲆⵠⲆΔⵠ": "img/night-bag9.png",
		"ⲆⵠᐃᐃⵠΔᐃ": "img/day-bag10.png",
		"ᐃΔᐃΔⵠⵠⵠ": "img/night-bag10.png",
		"ΔᐃᐃⵠΔᐃⵠ": "img/day-bag11.png",
		"ⲆᐃΔᐃⲆᐃᐃ": "img/night-bag11.png",
		"ⲆⲆⲆⲆΔΔⵠ": "img/day-bag13.png",
		"ⲆⵠΔⵠᐃᐃΔ": "img/night-bag13.png",
		"ΔⲆΔⲆⵠⵠⵠ": "img/day-bag14.png",
		"ΔΔⵠⲆΔⲆⲆ": "img/night-bag14.png",
		"ⵠΔᐃΔⵠⵠᐃ": "img/day-bag16.png",
		"ⵠⵠΔⲆⵠⲆᐃ": "img/night-bag16.png",
		"ⵠΔΔᐃⵠΔΔ": "img/day-bag17.png",
		"ᐃᐃⵠΔⲆᐃΔ": "img/night-bag17.png",
		"ΔᐃᐃⵠΔⵠΔ": "img/day-bag18.png",
		"ΔⲆⲆⵠⲆⲆΔ": "img/night-bag18.png",
		"ΔΔⵠΔⲆⲆⲆ": "img/day-bag19.png",
		"ΔⲆⵠΔⲆⵠⲆ": "img/night-bag19.png",
		"ⲆᐃⵠᐃΔⲆⲆ": "img/day-bag20.png",
		"ⵠⵠⵠΔᐃΔⲆ": "img/night-bag20.png",
		"ⲆΔᐃⵠⲆⲆⵠ": "img/day-bag21.png",
		"ΔΔⵠⵠᐃⲆΔ": "img/night-bag21.png",
		"ΔΔⵠⲆᐃΔΔ": "img/day-bag22.png",
		"ⲆⵠΔⵠᐃᐃⵠ": "img/night-bag22.png",
		"ᐃᐃⲆⲆⲆⲆⵠ": "img/day-bag23.png",
		"ᐃΔΔΔⵠⵠⲆ": "img/night-bag23.png",
		"ⵠⵠΔΔⲆⵠᐃ": "img/day-bag24.png",
		"ⲆᐃΔᐃⵠⵠⵠ": "img/night-bag24.png",
		"ᐃΔΔⵠΔᐃⲆ": "img/day-bag25.png",
		"ⵠΔᐃΔⲆⵠΔ": "img/night-bag25.png",
		"ⵠΔⵠⵠᐃⲆⲆ": "img/day-bag26.png",
		"ⲆΔᐃⲆᐃᐃⲆ": "img/night-bag26.png",
		"ⵠΔΔᐃΔΔⲆ": "img/day-bag27.png",
		"ᐃᐃⵠⵠΔΔΔ": "img/night-bag27.png",
		"ⵠⵠΔⲆⲆᐃᐃ": "img/day-bag28.png",
		"ᐃⵠΔⲆⲆᐃΔ": "img/night-bag28.png",
		"ⲆⲆΔᐃᐃΔⲆ": "img/day-bag29.png",
		"ⲆΔⲆᐃΔⵠᐃ": "img/night-bag29.png",
		"ᐃⵠΔⲆᐃⵠⵠ": "img/day-bag30.png",
		"ⵠᐃⵠⵠⵠⲆⲆ": "img/night-bag30.png",
		"ⵠⲆⲆⲆⵠΔⵠ": "img/day-bag31.png",
		"ΔᐃᐃΔⵠⵠⲆ": "img/night-bag31.png",
		"ΔᐃᐃⲆᐃⵠᐃ": "img/day-bag32.png",
		"ⵠΔⵠⵠΔⲆΔ": "img/night-bag32.png",
		"ᐃΔᐃΔⵠΔᐃ": "img/day-bag33.png",
		"ΔⲆⲆΔⵠⵠⲆ": "img/night-bag33.png",
		"ⲆⵠΔᐃⲆᐃᐃ": "img/day-bag34.png",
		"ⲆⲆᐃᐃᐃⵠⲆ": "img/night-bag34.png",
		"ⵠⲆΔᐃⵠΔⲆ": "img/day-bag35.png",
		"ΔᐃᐃⲆⵠᐃⵠ": "img/night-bag35.png",
		"ΔⵠΔᐃΔⲆΔ": "img/day-bag36.png",
		"ᐃⵠⵠΔᐃⲆⲆ": "img/night-bag36.png",
		"ΔⵠΔⵠΔⲆⵠ": "img/day-bag37.png",
		"ⵠᐃᐃⲆᐃΔᐃ": "img/night-bag37.png",
		"ᐃΔᐃⲆᐃΔⲆ": "img/day-bag38.png",
		"ⵠⲆⵠⵠⵠⵠⲆ": "img/night-bag38.png",
		"ΔⲆⵠᐃⲆⲆⲆ": "img/day-bag39.png",
		"ⵠᐃⵠⲆⵠⵠⲆ": "img/night-bag39.png",
		"ᐃⵠⲆΔΔⵠⲆ": "img/day-bag40.png",
		"ᐃⲆΔⵠⲆΔΔ": "img/night-bag40.png",
		"ᐃᐃᐃΔⵠᐃΔ": "img/day-bag41.png",
		"ⲆᐃⲆᐃⲆⲆΔ": "img/night-bag41.png",
		"ⵠΔᐃⵠⵠᐃΔ": "img/day-bag42.png",
		"ⵠΔᐃⵠⵠᐃⵠ": "img/night-bag42.png",
		"ⵠⵠⵠⲆⵠⵠΔ": "img/day-bag43.png",
		"ᐃΔⲆⵠᐃⲆⵠ": "img/night-bag43.png",
		"ᐃᐃⲆΔⲆᐃⵠ": "img/day-bag44.png",
		"ⲆⲆⵠᐃᐃⲆΔ": "img/night-bag44.png",
		"ᐃⵠⵠⵠⵠⲆΔ": "img/day-bag45.png",
		"ᐃΔⲆⲆᐃΔᐃ": "img/night-bag45.png",
		"ᐃⵠⵠΔᐃΔᐃ": "img/day-bag46.png",
		"ΔᐃᐃⲆⵠΔᐃ": "img/night-bag46.png",
		"ΔΔΔᐃΔᐃΔ": "img/day-bag47.png",
		"ⵠⲆⵠⲆΔⲆΔ": "img/night-bag47.png",
		"ⲆᐃΔΔⲆΔΔ": "img/day-bag48.png",
		"ⵠⲆΔΔⲆⵠᐃ": "img/night-bag48.png",
		"ᐃⵠᐃΔⵠᐃᐃ": "img/day-bag49.png",
		"ⲆⲆⵠΔⲆⲆᐃ": "img/night-bag49.png",
		"ⲆⵠᐃΔⲆΔᐃ": "img/day-bag50.png",
		"ΔⲆΔⵠⵠⵠⵠ": "img/night-bag50.png",
		"ᐃᐃⵠⲆⵠⲆⵠ": "img/day-bag51.png",
		"ⵠⲆᐃⲆᐃΔⲆ": "img/night-bag51.png",
		"ᐃⵠⲆⵠⵠⵠᐃ": "img/day-bag52.png",
		"ⵠΔⵠⵠⲆΔⵠ": "img/night-bag52.png",
		"ⵠΔⲆΔⵠⵠⵠ": "img/day-bag53.png",
		"ⵠⲆⵠⵠᐃⲆⲆ": "img/night-bag53.png",
		"ⲆⵠΔⲆΔⵠⲆ": "img/day-bag54.png",
		"ⲆᐃᐃΔΔⵠⵠ": "img/night-bag54.png",
		"ⵠᐃᐃⲆᐃᐃⲆ": "img/day-bag55.png",
		"ΔⵠⲆⲆᐃᐃⲆ": "img/night-bag55.png",
		"ⲆᐃᐃᐃⲆΔⲆ": "img/day-bag56.png",
		"ⲆΔⲆⲆᐃⵠⵠ": "img/night-bag56.png",
		"ⵠΔᐃⵠΔᐃΔ": "img/day-bag57.png",
		"ⵠⵠⵠⲆΔᐃᐃ": "img/night-bag57.png",
		"ⵠᐃⵠⲆⵠΔⵠ": "img/day-bag58.png",
		"ⵠⲆΔΔᐃⲆⲆ": "img/night-bag58.png",
		"ⲆᐃⵠᐃΔΔⵠ": "img/day-bag59.png",
		"ⲆⲆⵠⲆΔᐃⲆ": "img/night-bag59.png",
		"ᐃᐃⵠΔΔΔⵠ": "img/day-bag60.png",
		"ᐃᐃᐃⵠⵠΔΔ": "img/night-bag60.png",
		"ᐃᐃⵠΔⲆⵠⵠ": "img/day-bag61.png",
		"ⲆⲆΔᐃⲆⵠⵠ": "img/night-bag61.png",
		"ΔⵠΔⵠⵠⵠᐃ": "img/day-bag62.png",
		"ᐃⵠᐃᐃⲆⵠⲆ": "img/night-bag62.png",
		"ⵠⲆΔᐃⵠᐃΔ": "img/day-bag63.png",
		"ΔⲆⲆᐃⵠᐃⲆ": "img/night-bag63.png",
		"ΔⲆΔⲆⲆᐃᐃ": "img/day-bag64.png",
		"ⵠⵠΔΔΔᐃⲆ": "img/night-bag64.png",
		"ⲆᐃⲆⲆΔⲆⲆ": "img/day-bag65.png",
		"ⲆⲆᐃᐃⲆⲆΔ": "img/night-bag65.png",
		"ⲆⵠⵠⵠΔⵠⲆ": "img/day-bag66.png",
		"ᐃⲆᐃᐃᐃⲆᐃ": "img/night-bag66.png",
		"ⲆⵠᐃᐃΔᐃⵠ": "img/day-bag67.png",
		"ⵠⲆⲆᐃΔⵠⵠ": "img/night-bag67.png",
		"ⲆⲆⲆⲆᐃΔⲆ": "img/day-bag68.png",
		"ⲆⵠᐃᐃΔⵠΔ": "img/night-bag68.png",
		"ΔΔⲆᐃⲆⵠΔ": "img/day-bag69.png",
		"ᐃⵠΔⵠⵠᐃᐃ": "img/night-bag69.png",
		"ⵠᐃⵠⲆⵠⵠⵠ": "img/day-bag70.png",
		"ⲆⲆᐃⲆⲆⵠⲆ": "img/night-bag70.png",
		"ᐃΔΔΔᐃⲆᐃ": "img/day-bag71.png",
		"ⵠⲆⵠⲆⵠΔᐃ": "img/night-bag71.png",
		"ⵠⲆᐃⲆᐃᐃⲆ": "img/day-bag72.png",
		"ⲆⲆⵠⵠⲆⵠΔ": "img/night-bag72.png",
		"ⵠΔΔⵠΔⵠΔ": "img/day-bag73.png",
		"ᐃᐃⲆᐃᐃⲆΔ": "img/night-bag73.png",
		"ⵠΔⲆΔᐃΔⲆ": "img/day-bag74.png",
		"ⵠᐃⵠⲆⲆⲆⲆ": "img/night-bag74.png",
		"ⲆⲆᐃᐃᐃⵠᐃ": "img/day-bag75.png",
		"ΔⵠⲆΔΔΔⵠ": "img/night-bag75.png",
		"ΔᐃΔⵠⵠΔⲆ": "img/day-bag76.png",
		"ⲆⵠᐃⲆΔᐃΔ": "img/night-bag76.png",
		"ᐃΔⵠⲆⵠΔΔ": "img/day-bag77.png",
		"ΔⵠᐃᐃⲆΔⵠ": "img/night-bag77.png",
		"ᐃΔⲆΔᐃΔⵠ": "img/day-bag78.png",
		"ᐃⲆΔⵠΔⲆⵠ": "img/night-bag78.png",
		"ᐃⲆⵠⲆΔⲆⲆ": "img/day-bag79.png",
		"ⲆⲆΔⵠΔᐃΔ": "img/night-bag79.png",
		"ΔΔᐃΔⲆⵠᐃ": "img/day-bag80.png",
		"ΔΔᐃⵠΔΔᐃ": "img/night-bag80.png",
		"ⲆΔᐃᐃᐃΔᐃ": "img/day-accessory0.png",
		"ΔⲆⵠⲆᐃⲆⵠ": "img/day-accessory0-pacques.png",
		"ⲆΔΔⲆΔⲆᐃ": "img/night-accessory0-pacques.png",
		"ᐃᐃᐃⵠᐃⵠⲆ": "img/day-accessory13.png",
		"ᐃⲆⲆⲆⵠⵠΔ": "img/night-accessory13.png",
		"ᐃⵠⵠΔⲆⵠΔ": "img/day-accessory14.png",
		"ⵠⲆΔᐃᐃⲆᐃ": "img/night-accessory14.png",
		"ᐃⲆⲆⲆⵠⲆⵠ": "img/day-accessory15.png",
		"ⲆΔᐃⲆᐃⲆΔ": "img/night-accessory15.png",
		"ΔⵠΔΔⵠᐃᐃ": "img/day-accessory16.png",
		"ⵠΔⲆΔᐃᐃⵠ": "img/night-accessory16.png",
		"ⲆⲆⵠⵠΔΔᐃ": "img/day-accessory17.png",
		"ⵠΔᐃⵠⵠⵠΔ": "img/day-accessory17.png",
		"ⲆᐃΔᐃᐃᐃⵠ": "img/day-accessory19.png",
		"ΔⵠΔⵠΔΔΔ": "img/night-accessory19.png",
		"ᐃⵠᐃⵠΔᐃⲆ": "img/day-accessory20.png",
		"ⲆΔᐃⲆⲆΔΔ": "img/night-accessory20.png",
		"ⲆⵠΔⲆⵠΔⲆ": "img/day-accessory21.png",
		"ⵠΔᐃⲆⲆⵠⲆ": "img/night-accessory21.png",
		"ⲆΔⲆⲆⵠᐃΔ": "img/day-accessory22.png",
		"ⵠⲆᐃⵠⵠⵠᐃ": "img/night-accessory22.png",
		"ⵠΔⵠᐃⵠⵠΔ": "img/day-accessory23.png",
		"ⲆΔᐃⵠᐃⲆⲆ": "img/night-accessory23.png",
		"ⵠⵠⲆⵠΔΔΔ": "img/day-accessory24.png",
		"ᐃᐃΔᐃⲆΔΔ": "img/night-accessory24.png",
		"ⲆⵠΔⲆᐃΔⵠ": "img/day-accessory25.png",
		"ⵠⲆΔΔΔⵠⲆ": "img/night-accessory25.png",
		"ⲆⵠⵠⲆΔⲆΔ": "img/day-accessory26.png",
		"ΔΔΔᐃΔⵠᐃ": "img/night-accessory26.png",
		"ⲆⲆΔⲆⲆⲆⲆ": "img/day-accessory27.png",
		"ᐃⵠΔⲆⲆⲆⲆ": "img/night-accessory27.png",
		"ΔⵠⵠᐃᐃΔⲆ": "img/day-accessory18.png",
		"ⲆⵠⲆᐃΔΔᐃ": "img/night-accessory18.png",
		"ΔᐃᐃⲆⲆΔᐃ": "img/day-accessory29.png",
		"ⲆⲆⲆΔᐃΔᐃ": "img/night-accessory29.png",
		"ⲆΔᐃᐃΔᐃΔ": "img/day-accessory30.png",
		"ΔᐃⲆⵠᐃΔᐃ": "img/night-accessory30.png",
		"ᐃⲆΔⵠⲆᐃⵠ": "img/day-accessory31.png",
		"ⵠⵠⵠⲆⲆⲆᐃ": "img/night-accessory31.png",
		"ΔⵠᐃΔΔⵠᐃ": "img/day-accessory32.png",
		"ⵠⲆⵠⲆⲆⵠⵠ": "img/night-accessory32.png",
		"ᐃᐃⲆⲆᐃⵠΔ": "img/day-accessory33.png",
		"ⵠᐃⲆⲆᐃⵠⲆ": "img/night-accessory33.png",
		"ΔⲆⲆⵠΔΔΔ": "img/day-accessory34.png",
		"ⲆⵠΔᐃⵠΔΔ": "img/night-accessory34.png",
		"ⵠᐃΔⵠᐃⲆⲆ": "img/day-accessory35.png",
		"ⵠΔⵠᐃᐃᐃΔ": "img/night-accessory35.png",
		"ⲆⵠⲆᐃⵠΔΔ": "img/day-accessory28.png",
		"ⲆᐃⲆΔΔⲆⲆ": "img/night-accessory28.png",
		"ΔⵠΔⵠᐃⵠⵠ": "img/day-accessory36.png",
		"ΔᐃⵠΔⲆᐃⲆ": "img/night-accessory36.png",
		"ᐃΔᐃΔⲆᐃᐃ": "img/day-accessory37.png",
		"ΔᐃΔⲆⵠⲆⲆ": "img/night-accessory37.png",
		"ⲆⵠⵠΔⲆΔⵠ": "img/day-accessory39.png",
		"ᐃⲆΔᐃⲆᐃⵠ": "img/night-accessory39.png",
		"ⲆΔΔⲆᐃⲆⵠ": "img/day-accessory40.png",
		"ΔⲆΔⲆᐃΔΔ": "img/night-accessory40.png",
		"ⲆᐃΔⵠⲆⲆΔ": "img/day-accessory41.png",
		"ⲆΔⲆⵠΔΔⲆ": "img/night-accessory41.png",
		"ⵠⵠᐃᐃᐃΔⲆ": "img/day-accessory42.png",
		"ᐃΔᐃᐃⲆⲆⵠ": "img/night-accessory42.png",
		"ΔⲆⵠΔᐃⲆΔ": "img/day-accessory43.png",
		"ⲆⵠΔΔΔᐃⵠ": "img/night-accessory43.png",
		"ΔᐃᐃΔΔΔΔ": "img/day-accessory44.png",
		"ΔⵠⵠⲆⵠⵠΔ": "img/night-accessory44.png",
		"ΔᐃⵠΔᐃᐃΔ": "img/day-accessory38.png",
		"ⵠᐃᐃⲆᐃᐃⵠ": "img/night-accessory38.png",
		"ΔⵠⵠΔⲆΔΔ": "img/day-accessory46.png",
		"ᐃᐃΔΔΔΔΔ": "img/night-accessory46.png",
		"ᐃᐃΔᐃⵠⲆⵠ": "img/day-accessory47.png",
		"ⲆⲆⲆⵠⵠⵠⲆ": "img/night-accessory47.png",
		"ᐃⵠⲆᐃᐃⵠΔ": "img/day-accessory48.png",
		"ᐃᐃⲆΔΔⲆⲆ": "img/night-accessory48.png",
		"ⵠⲆΔΔⲆⵠⵠ": "img/day-accessory49.png",
		"ⲆⵠⲆⵠΔΔⲆ": "img/night-accessory49.png",
		"ⲆⲆⲆᐃⵠⵠΔ": "img/day-accessory45.png",
		"ⲆⵠⵠⵠⲆⲆᐃ": "img/night-accessory45.png",
		"ⲆΔⲆΔⵠⵠᐃ": "img/day-accessory50.png",
		"ⲆⵠⲆⲆⲆⵠⲆ": "img/night-accessory50.png",
		"ⵠᐃΔΔⵠᐃΔ": "img/day-accessory51.png",
		"ΔⵠᐃⲆΔᐃⵠ": "img/night-accessory51.png",
		"ΔΔⲆⵠᐃΔΔ": "img/day-accessory52.png",
		"ⵠᐃⵠⲆΔᐃⲆ": "img/night-accessory52.png",
		"ⲆΔᐃΔᐃΔⵠ": "img/day-accessory53.png",
		"Ⲇⵠᐃᐃᐃᐃⵠ": "img/night-accessory53.png",
		"ᐃΔⲆᐃᐃⲆΔ": "img/day-accessory54.png",
		"ᐃΔⲆⵠⲆΔⵠ": "img/night-accessory54.png",
		"ᐃΔⲆΔⲆⲆΔ": "img/day-accessory55.png",
		"ⵠᐃⲆⲆⲆⲆᐃ": "img/night-accessory55.png",
		"ⵠᐃⲆΔΔΔΔ": "img/day-accessory56.png",
		"ᐃⲆⵠΔⲆⵠⵠ": "img/night-accessory56.png",
		"ⲆΔⵠⵠⵠΔⵠ": "img/day-accessory57.png",
		"ΔⵠᐃⵠⲆᐃᐃ": "img/night-accessory57.png",
		"ᐃⵠᐃⵠᐃΔᐃ": "img/day-accessory58.png",
		"ⵠⲆⲆΔⵠΔΔ": "img/night-accessory58.png",
		"ΔⲆⲆᐃⵠⵠⵠ": "img/day-accessory59.png",
		"ᐃⲆΔᐃᐃᐃᐃ": "img/night-accessory59.png",
		"ⵠᐃⲆΔⵠᐃⵠ": "img/day-accessory60.png",
		"ⲆᐃΔⲆⲆⲆⵠ": "img/night-accessory60.png",
		"ⵠⵠᐃᐃΔΔⲆ": "img/day-accessory61.png",
		"ᐃⲆⲆⵠⲆⲆⵠ": "img/night-accessory61.png",
		"ⲆᐃⵠⲆᐃⵠⵠ": "img/day-accessory62.png",
		"ᐃⲆⵠⲆⵠⲆⵠ": "img/night-accessory62.png",
		"ᐃⵠⲆΔⲆᐃᐃ": "img/day-accessory63.png",
		"ΔⲆᐃⲆⵠⲆⲆ": "img/night-accessory63.png",
		"ⵠᐃᐃᐃᐃᐃᐃ": "img/day-accessory64.png",
		"ⲆⲆⵠᐃΔⲆⲆ": "img/night-accessory64.png",
		"Ⲇᐃᐃⵠᐃᐃᐃ": "img/day-accessory65.png",
		"ΔⲆⵠΔⵠΔᐃ": "img/night-accessory65.png",
		"ⲆᐃΔⵠⲆⵠΔ": "img/day-accessory66.png",
		"ᐃᐃᐃⲆⵠᐃⵠ": "img/night-accessory66.png",
		"ⵠᐃⵠⲆⵠⲆⵠ": "img/day-accessory67.png",
		"ΔⲆΔΔⲆⵠⲆ": "img/night-accessory67.png",
		"ᐃΔᐃⵠⵠΔΔ": "img/day-accessory68.png",
		"ᐃⵠⵠΔⵠᐃⲆ": "img/night-accessory68.png",
		"ⲆᐃᐃⵠΔᐃΔ": "img/day-accessory69.png",
		"ⲆᐃᐃⲆⲆⵠⲆ": "img/night-accessory69.png",
		"ⵠᐃⵠᐃⲆⲆⵠ": "img/day-accessory70.png",
		"ᐃⲆᐃⲆⲆᐃᐃ": "img/night-accessory70.png",
		"ΔᐃⲆⲆⵠⵠⵠ": "img/day-accessory71.png",
		"ⵠⵠΔᐃⲆⲆΔ": "img/night-accessory71.png",
		"ᐃⲆⲆΔⵠΔΔ": "img/day-accessory72.png",
		"ᐃⲆΔΔⲆᐃᐃ": "img/night-accessory72.png",
		"ᐃᐃⵠⲆⵠᐃⵠ": "img/day-accessory73.png",
		"ᐃⲆⲆᐃᐃΔᐃ": "img/night-accessory73.png",
		"ᐃΔΔⵠⲆΔᐃ": "img/day-accessory74.png",
		"ⵠⲆⵠΔⲆᐃⵠ": "img/night-accessory74.png",
		"ⲆᐃᐃΔΔΔᐃ": "img/day-accessory75.png",
		"ⲆⲆⲆᐃΔΔⵠ": "img/night-accessory75.png",
		"ⲆⵠΔⲆᐃⵠⲆ": "img/day-accessory76.png",
		"ⲆⵠᐃᐃᐃⲆⵠ": "img/night-accessory76.png",
		"ΔΔⲆΔⲆᐃᐃ": "img/day-accessory77.png",
		"ᐃΔⵠᐃΔⲆⲆ": "img/night-accessory77.png",
		"ⲆⵠⲆⵠⲆΔⵠ": "img/day-accessory78.png",
		"ΔⵠⵠⵠⵠⵠⲆ": "img/night-accessory78.png",
		"ⲆⲆᐃⲆΔΔⲆ": "img/day-accessory79.png",
		"ᐃⲆⵠⲆⵠΔⵠ": "img/night-accessory79.png",
		"ΔⲆᐃᐃⵠΔᐃ": "img/day-accessory80.png",
		"ΔⵠⲆⵠⵠⲆⲆ": "img/night-accessory80.png",
		"ⲆⵠΔΔⵠᐃᐃ": "img/day-accessory81.png",
		"ⲆⵠᐃΔⵠⲆΔ": "img/night-accessory81.png",
		"ΔᐃⵠⵠΔⵠᐃ": "img/day-accessory83.png",
		"ⲆⲆΔⵠΔᐃᐃ": "img/night-accessory83.png",
		"ᐃᐃⵠᐃⵠⲆⵠ": "img/day-accessory84.png",
		"ⵠⲆᐃΔⵠⲆΔ": "img/night-accessory84.png",
		"ⵠⵠⵠΔΔᐃᐃ": "img/day-accessory85.png",
		"ⵠⲆⲆΔⵠⵠᐃ": "img/night-accessory85.png",
		"ᐃΔΔⵠⲆⵠⲆ": "img/day-accessory86.png",
		"ΔᐃΔΔⲆΔΔ": "img/night-accessory86.png",
		"ᐃⲆΔᐃΔⵠⲆ": "img/day-accessory87.png",
		"ᐃⲆⲆⵠⲆⵠΔ": "img/night-accessory87.png",
		"ⵠⵠΔⵠⲆⲆΔ": "img/day-accessory88.png",
		"ΔΔΔΔᐃⵠᐃ": "img/night-accessory88.png",
		"ΔⲆⵠⲆⲆⵠⲆ": "img/day-accessory89.png",
		"ᐃⵠᐃΔᐃΔⵠ": "img/night-accessory89.png",
		"ⲆⲆⵠⵠⵠⲆΔ": "img/day-accessory90.png",
		"ⵠⵠΔⲆⲆᐃⵠ": "img/night-accessory90.png",
		"ⲆᐃⵠΔᐃⵠⲆ": "img/day-accessory91.png",
		"ᐃⲆΔᐃΔⵠᐃ": "img/night-accessory91.png",
		"ⲆⵠᐃΔᐃᐃᐃ": "img/day-accessory92.png",
		"ⲆⵠⲆⲆⲆᐃⵠ": "img/night-accessory92.png",
		"ⲆⵠᐃⲆΔΔᐃ": "img/day-accessory93.png",
		"ᐃⲆⵠⵠⲆᐃⲆ": "img/night-accessory93.png",
		"ΔΔΔᐃΔⵠⵠ": "img/day-accessory94.png",
		"ᐃΔΔⲆΔⵠⵠ": "img/night-accessory94.png",
		"ᐃᐃᐃᐃⲆⲆⵠ": "img/day-accessory95.png",
		"ΔⲆΔΔⵠⵠΔ": "img/night-accessory95.png",
		"ⲆⵠⵠⵠΔⲆΔ": "img/day-accessory96.png",
		"ᐃᐃΔΔΔᐃⵠ": "img/night-accessory96.png",
		"ΔⲆⵠⵠⲆⵠΔ": "img/day-accessory97.png",
		"ⲆΔⵠⲆⲆⲆⲆ": "img/night-accessory97.png",
		"ⲆⲆᐃᐃΔⲆⵠ": "img/day-accessory98.png",
		"ⵠⲆΔΔᐃⲆⵠ": "img/night-accessory98.png",
		"ᐃⲆΔᐃⵠΔΔ": "img/day-accessory99.png",
		"ᐃⲆⵠᐃⵠⵠΔ": "img/night-accessory99.png",
		"ᐃⲆⵠⲆⲆⵠΔ": "img/day-accessory100.png",
		"ⵠΔⵠⵠΔΔΔ": "img/night-accessory100.png",
		"ᐃᐃⵠΔΔΔΔ": "img/day-accessory101.png",
		"ΔⵠⲆⲆΔⵠᐃ": "img/night-accessory101.png",
		"ΔⵠⲆΔⵠⵠⵠ": "img/day-accessory102.png",
		"ᐃΔᐃΔΔᐃⲆ": "img/night-accessory102.png",
		"ᐃᐃⲆΔΔⵠᐃ": "img/day-accessory103.png",
		"ⵠᐃΔΔᐃⲆⵠ": "img/night-accessory103.png",
		"ΔᐃⲆⵠⲆⲆᐃ": "img/day-accessory104.png",
		"ᐃⲆΔᐃΔΔⲆ": "img/night-accessory104.png",
		"ⵠΔᐃⵠΔⲆᐃ": "img/day-accessory105.png",
		"ΔⲆⲆⵠᐃⲆᐃ": "img/night-accessory105.png",
		"ΔΔⲆᐃⵠⲆᐃᐃⵠ": "img/day-accessory106.png",
		"ⵠΔΔⲆⵠⵠⲆᐃΔ": "img/night-accessory106.png",
		"ᐃᐃΔΔᐃⵠⵠᐃᐃ": "img/day-accessory107.png",
		"ⲆΔᐃⵠΔᐃΔΔᐃ": "img/night-accessory107.png",
		"ΔΔᐃⲆⵠⲆᐃ": "img/day-accessory82.png",
		"ᐃⲆᐃΔⵠΔⵠ": "img/night-accessory82.png",
		"ᐃⵠΔⲆᐃⵠΔ": "img/day-book0.png",
		"ΔⲆⲆΔᐃΔΔ": "img/night-book0.png",
		"ΔΔΔⲆⵠⲆᐃ": "img/day-book1.png",
		"ⲆⵠᐃⲆᐃⲆᐃ": "img/night-book1.png",
		"ΔᐃᐃⲆᐃΔΔ": "img/day-book2.png",
		"ⲆⵠⵠΔᐃⵠᐃ": "img/night-book2.png",
		"ΔΔⲆΔⵠΔⵠ": "img/day-book3.png",
		"Ⲇⵠⵠᐃᐃᐃᐃ": "img/night-book3.png",
		"ⲆⲆⲆⲆᐃⵠΔ": "img/day-book4.png",
		"ᐃⲆⵠⵠΔⵠⵠ": "img/night-book4.png",
		"ᐃⵠᐃᐃᐃⲆⲆ": "img/day-book5.png",
		"ⲆⵠⵠⲆΔΔᐃ": "img/night-book5.png",
		"ᐃⵠΔⲆᐃᐃΔ": "img/day-book6.png",
		"ΔⵠΔᐃᐃⵠᐃ": "img/night-book6.png",
		"ΔⵠᐃΔⵠΔᐃ": "img/day-book7.png",
		"ΔΔⲆΔⲆᐃΔ": "img/night-book7.png",
		"ᐃΔⲆⵠⵠΔⵠ": "img/day-book8.png",
		"ᐃᐃⵠⵠⵠⵠⵠ": "img/night-book8.png",
		"ⲆᐃΔᐃΔΔⲆ": "img/day-book9.png",
		"ΔⲆΔΔᐃΔΔ": "img/night-book9.png",
		"ᐃΔᐃΔᐃⲆⲆ": "img/day-book10.png",
		"ⲆⵠΔΔⲆᐃΔ": "img/night-book10.png",
		"ΔⵠⲆΔⵠΔΔ": "img/day-book11.png",
		"ⵠⵠⵠᐃⲆΔΔ": "img/night-book11.png",
		"ⲆⵠΔᐃᐃⵠⲆ": "img/day-book12.png",
		"ΔⵠᐃⵠΔⵠᐃ": "img/night-book12.png",
		"ⵠΔⵠⵠΔΔⵠ": "img/day-book13.png",
		"ΔⲆⵠⵠᐃΔᐃ": "img/night-book13.png",
		"ΔΔⲆⵠⵠⲆᐃ": "img/day-book14.png",
		"ⲆΔΔᐃΔⵠᐃ": "img/night-book14.png",
		"ⵠΔⵠΔⵠⲆᐃ": "img/day-book15.png",
		"ᐃⲆⲆᐃⵠⵠⲆ": "img/night-book15.png",
		"ΔⵠᐃⲆⵠΔⵠ": "img/day-book16.png",
		"ⲆⲆⲆⲆⵠⵠⲆ": "img/night-book16.png",
		"ⲆᐃⵠⲆⵠΔᐃ": "img/day-book17.png",
		"ⵠΔΔⵠⲆᐃⲆ": "img/night-book17.png",
		"ⲆⵠⵠᐃΔⵠᐃ": "img/day-book18.png",
		"ⲆΔⲆⲆⵠⵠⲆ": "img/night-book18.png",
		"ΔⲆᐃⲆΔᐃΔ": "img/day-book19.png",
		"ⲆΔΔⲆᐃᐃᐃ": "img/night-book19.png",
		"ᐃⵠᐃⲆᐃⵠΔ": "img/day-book20.png",
		"ⲆⲆⲆⵠᐃᐃⲆ": "img/night-book20.png",
		"ᐃⲆⵠⲆᐃⵠΔ": "img/day-book21.png",
		"ⲆᐃΔⲆΔⲆⲆ": "img/night-book21.png",
		"ⵠΔⲆⲆⵠΔⲆ": "img/day-book22.png",
		"ΔⵠᐃΔⵠⵠΔ": "img/night-book22.png",
		"ᐃⵠΔⲆᐃΔⲆ": "img/day-book23.png",
		"ᐃⵠⲆΔΔᐃⲆ": "img/night-book23.png",
		"ⲆΔⵠⵠᐃⲆΔ": "img/day-book24.png",
		"ⲆⵠⵠΔᐃᐃⵠ": "img/night-book24.png",
		"ΔⲆᐃᐃⲆᐃΔ": "img/day-book25.png",
		"ᐃΔⵠⲆΔⵠⵠ": "img/night-book25.png",
		"ᐃⲆⲆᐃᐃⵠᐃ": "img/day-book26.png",
		"ⲆΔᐃⲆΔᐃᐃ": "img/night-book26.png",
		"ⵠᐃΔⲆΔⲆΔ": "img/day-book27.png",
		"ᐃⵠⲆⵠⵠΔⵠ": "img/night-book27.png",
		"ⵠᐃΔΔⵠⵠⵠ": "img/day-book28.png",
		"ΔⲆⵠᐃⲆⵠⵠ": "img/night-book28.png",
		"ⵠΔⵠᐃᐃⵠⵠ": "img/day-book29.png",
		"ΔⲆᐃⲆⵠᐃΔ": "img/night-book29.png",
		"ⲆΔΔΔᐃΔΔ": "img/day-book30.png",
		"ΔⵠⵠⲆⵠᐃⵠ": "img/night-book30.png",
		"ΔⲆΔΔⵠⲆΔ": "img/day-book31.png",
		"ⲆΔⲆⵠⲆΔᐃ": "img/night-book31.png",
		"ⲆⵠΔΔⵠⲆⲆ": "img/day-book32.png",
		"ΔⵠᐃᐃᐃⵠΔ": "img/night-book32.png",
		"ⲆᐃⲆⵠΔⲆᐃ": "img/day-book33.png",
		"ⵠⵠⲆⵠᐃᐃⲆ": "img/night-book33.png",
		"ΔⵠᐃᐃᐃⵠⲆ": "img/day-book34.png",
		"ⲆⲆᐃⲆΔⲆᐃ": "img/night-book34.png",
		"ⲆⵠᐃⵠⲆⵠⵠ": "img/day-book35.png",
		"ΔΔᐃⵠΔⵠⲆ": "img/night-book35.png",
		"ᐃⵠⵠⲆᐃⵠⲆ": "img/day-book36.png",
		"ᐃⵠΔΔⲆⲆΔ": "img/night-book36.png",
		"ΔⲆⵠΔΔⵠⲆᐃᐃ": "img/day-book37.png",
		"ΔⲆⲆⵠⲆⲆⵠᐃΔ": "img/night-book37.png",
		"ᐃⵠΔⵠⲆⲆⲆ": "img/day-book38.png",
		"ΔΔⵠⵠΔΔᐃ": "img/night-book38.png",
		"ⵠᐃⵠⵠΔΔⲆ": "img/day-book39.png",
		"ᐃΔΔⲆⵠⲆⲆ": "img/night-book39.png",
		"ΔⵠΔᐃΔⲆⲆ": "img/day-book40.png",
		"ⲆᐃΔᐃΔᐃΔ": "img/night-book40.png",
		"ⲆⲆⵠⲆᐃᐃⵠ": "img/day-book41.png",
		"ᐃⵠⲆᐃⵠⵠⵠ": "img/night-book41.png",
		"ⲆΔΔⵠⵠΔΔ": "img/day-book42.png",
		"ⲆⵠΔⲆᐃᐃᐃ": "img/night-book42.png",
		"ᐃΔⲆⲆᐃⲆⲆ": "img/day-book43.png",
		"ΔΔΔⲆⲆΔⲆ": "img/night-book43.png",
		"ⲆⵠⵠⲆⵠΔⲆ": "img/day-book44.png",
		"ᐃⲆΔᐃⲆⲆⵠ": "img/night-book44.png",
		"Δᐃⵠᐃᐃᐃⵠ": "img/day-book45.png",
		"ⵠⲆⵠⲆᐃΔᐃ": "img/night-book45.png",
		"ᐃᐃᐃΔⵠΔᐃ": "img/day-book46.png",
		"ⵠΔΔΔΔⲆΔ": "img/night-book46.png",
		"ⲆⵠᐃⲆᐃΔⵠ": "img/day-book47.png",
		"ΔⲆΔᐃᐃⵠⵠ": "img/night-book47.png",
		"ᐃⵠΔΔΔᐃᐃ": "img/day-book48.png",
		"ΔᐃⵠⲆᐃⲆⵠ": "img/night-book48.png",
		"ⵠΔⲆⵠᐃΔⲆ": "img/day-book49.png",
		"ⲆⲆΔΔΔΔⲆ": "img/night-book49.png",
		"ⲆⵠΔΔⵠⲆΔ": "img/day-book50.png",
		"ⵠⵠᐃΔⲆⵠⵠ": "img/night-book50.png",
		"ΔⲆⵠΔⲆⲆΔ": "img/day-crate1.png",
		"ΔⵠΔⵠⲆΔⵠ": "img/night-crate1.png",
		"ⵠᐃⵠⲆⲆⵠⵠ": "img/day-crate2.png",
		"ⲆΔⲆⵠΔΔⵠ": "img/night-crate2.png",
		"ⲆⵠⲆᐃΔⵠᐃ": "img/day-crate3.png",
		"ᐃⲆⲆⲆⲆⲆⲆ": "img/night-crate3.png",
		"ᐃⵠᐃⵠᐃⲆⲆ": "img/day-crate4.png",
		"ᐃⲆⵠᐃᐃⲆⵠ": "img/night-crate4.png",
		"ⲆΔΔⲆΔᐃⵠ": "img/day-crate5.png",
		"ⵠⲆⵠᐃΔΔⵠ": "img/night-crate5.png",
		"ⵠᐃⵠⲆⵠⵠΔ": "img/day-crate6.png",
		"ⲆΔΔⲆⲆᐃᐃ": "img/night-crate6.png",
		"ΔⲆΔⵠΔΔΔ": "img/day-crate7.png",
		"ᐃΔᐃⲆⲆⲆΔ": "img/night-crate7.png",
		"ⵠⲆᐃᐃⲆⲆⵠ": "img/day-crate8.png",
		"ᐃΔⲆᐃⵠⲆⲆ": "img/night-crate8.png",
		"ΔᐃΔΔⲆⲆΔ": "img/day-crate9.png",
		"ⲆⲆᐃΔᐃΔⵠ": "img/night-crate9.png",
		"ΔΔⵠᐃⵠⵠᐃ": "img/day-crate10.png",
		"ΔΔⲆⵠⵠⵠⵠ": "img/night-crate10.png",
		"ᐃᐃⵠΔⲆΔⲆ": "img/day-crate11.png",
		"ΔⵠⲆⲆᐃⵠΔ": "img/night-crate11.png",
		"ⲆⵠⵠᐃⵠᐃⲆ": "img/day-crate12.png",
		"ⲆⵠⵠΔⵠᐃⵠ": "img/night-crate12.png",
		"ΔⵠⲆΔΔⵠᐃ": "img/day-crate13.png",
		"ᐃⲆΔⵠⵠᐃⵠ": "img/night-crate13.png",
		"ΔⲆⵠΔᐃΔΔ": "img/day-crate14.png",
		"ᐃⵠᐃⵠΔⲆᐃ": "img/night-crate14.png",
		"ⵠᐃⲆⲆΔΔΔ": "img/day-crate15.png",
		"ⵠⵠⵠᐃⵠⵠᐃ": "img/night-crate15.png",
		"ⵠⲆᐃⵠⲆⵠⲆ": "img/day-crate16.png",
		"ᐃᐃΔⵠⲆΔⲆ": "img/night-crate16.png",
		"ᐃⵠᐃⵠΔⲆⵠ": "img/day-crate17.png",
		"ᐃᐃᐃⵠⲆⵠⲆ": "img/night-crate17.png",
		"ⵠᐃΔⲆⲆᐃⵠ": "img/day-crate18.png",
		"ⵠⵠᐃⲆΔⵠΔ": "img/night-crate18.png",
		"ⵠᐃᐃⵠⲆⵠⲆ": "img/day-crate19.png",
		"ⲆⲆⵠⵠᐃⵠⵠ": "img/night-crate19.png",
		"ⲆⵠΔΔⲆΔⵠ": "img/day-crate20.png",
		"ΔᐃΔⵠᐃⵠΔ": "img/night-crate20.png",
		"ΔΔⲆⲆⵠᐃⵠ": "img/day-crate21.png",
		"ⲆⲆⲆᐃⵠⵠⲆ": "img/night-crate21.png",
		"ⵠⲆΔᐃᐃᐃⲆ": "img/day-crate22.png",
		"ΔΔⲆⵠᐃⲆⵠ": "img/night-crate22.png",
		"ᐃᐃⲆΔΔΔⲆ": "img/day-crate23.png",
		"ᐃΔⲆⵠᐃⲆⲆ": "img/night-crate23.png",
		"ᐃᐃⵠΔⵠΔΔ": "img/day-crate24.png",
		"ⲆΔᐃⲆⲆⲆΔ": "img/night-crate24.png",
		"ⲆⵠΔΔⲆⲆⵠ": "img/day-crate25.png",
		"ⵠᐃᐃⵠᐃⲆⵠ": "img/night-crate25.png",
		"ᐃᐃⲆⲆΔΔᐃ": "img/day-crate26.png",
		"ΔᐃⵠⲆΔⵠᐃ": "img/night-crate26.png",
		"ΔⵠΔΔΔᐃⲆ": "img/day-crate27.png",
		"ᐃᐃᐃΔᐃⲆΔ": "img/night-crate27.png",
		"ΔᐃᐃⵠᐃⵠΔ": "img/day-crate28.png",
		"ⵠⲆⵠⲆᐃⵠΔ": "img/night-crate28.png",
		"ⵠΔⵠⵠⲆⲆᐃ": "img/day-crate29.png",
		"ⲆⲆⵠΔΔΔⵠ": "img/night-crate29.png",
		"ⵠⵠᐃⵠᐃⲆᐃ": "img/day-crate30.png",
		"ⲆΔⵠᐃᐃΔⵠ": "img/night-crate30.png",
		"ⲆᐃⵠᐃᐃᐃΔ": "img/day-crate31.png",
		"ᐃⲆⲆᐃΔᐃᐃ": "img/night-crate31.png",
		"ΔᐃⲆΔⲆΔⲆ": "img/day-crate32.png",
		"ⲆⵠΔΔΔΔΔ": "img/night-crate32.png",
		"ᐃⵠᐃⵠᐃⵠⲆ": "img/day-crate33.png",
		"ⲆⵠⵠᐃⵠⲆΔ": "img/night-crate33.png",
		"ⵠᐃⲆⲆⵠⲆⲆ": "img/day-crate34.png",
		"ⲆΔΔᐃΔΔᐃ": "img/night-crate34.png",
		"ⵠⵠΔⵠⵠⲆΔ": "img/day-crate35.png",
		"ⵠᐃᐃΔⵠⲆⲆ": "img/night-crate35.png",
		"ΔⵠⵠⲆΔⵠᐃ": "img/day-crate36.png",
		"ᐃᐃᐃⲆΔᐃΔ": "img/night-crate36.png",
		"ΔⵠⵠⲆΔΔⵠ": "img/day-crate37.png",
		"ⲆᐃΔⵠⲆⵠᐃ": "img/night-crate37.png",
		"ⲆⵠᐃΔᐃⵠⲆ": "img/day-crate38.png",
		"ⵠⲆⵠⵠⲆᐃᐃ": "img/night-crate38.png",
		"ΔⵠᐃⵠΔΔⲆ": "img/day-crate39.png",
		"ᐃᐃⲆᐃⲆΔⵠ": "img/night-crate39.png",
		"Ⲇᐃᐃⵠⵠⵠᐃ": "img/day-crate40.png",
		"ⲆⵠᐃΔⵠⵠⵠ": "img/night-crate40.png",
		"ᐃⲆᐃΔⲆⲆᐃ": "img/day-crate41.png",
		"ⵠⵠⲆⲆⲆᐃᐃ": "img/night-crate41.png",
		"ⵠⲆᐃᐃⵠᐃΔ": "img/day-crate42.png",
		"ⵠⵠⵠᐃⲆⲆⵠ": "img/night-crate42.png",
		"ᐃⵠⲆΔⲆᐃⲆ": "img/day-crate43.png",
		"ᐃⵠⵠΔⵠΔⲆ": "img/night-crate43.png",
		"ⲆᐃΔⲆⵠΔⵠ": "img/day-crate44.png",
		"ⵠᐃⵠΔⵠΔᐃ": "img/night-crate44.png",
		"ΔΔⵠⵠΔⲆⵠ": "img/day-crate45.png",
		"ᐃⲆᐃᐃⵠⵠΔ": "img/night-crate45.png",
		"ᐃΔΔⵠⵠⵠⲆ": "img/day-crate46.png",
		"ΔᐃⲆΔⲆⲆⵠ": "img/night-crate46.png",
		"ΔᐃⵠⲆᐃᐃⵠ": "img/day-crate47.png",
		"ⵠᐃⵠᐃⲆⲆΔ": "img/night-crate47.png",
		"ⵠΔΔΔΔᐃΔ": "img/day-crate48.png",
		"ⵠᐃᐃΔⵠᐃⵠ": "img/night-crate48.png",
		"ᐃΔᐃⲆⲆⵠⲆ": "img/day-crate49.png",
		"ΔᐃⵠᐃᐃΔΔ": "img/night-crate49.png",
		"ⵠΔᐃΔⵠΔᐃ": "img/day-crate50.png",
		"ⵠⲆⵠⲆΔΔⵠ": "img/night-crate50.png",
		"ΔΔᐃⲆⵠΔⵠ": "img/day-crate51.png",
		"ⵠⵠⲆΔⲆⵠΔ": "img/night-crate51.png",
		"ΔΔΔᐃⲆⵠᐃ": "img/day-crate52.png",
		"ⵠΔΔΔΔΔⵠ": "img/night-crate52.png",
		"ᐃᐃⲆᐃΔΔΔ": "img/day-crate53.png",
		"ᐃᐃΔᐃΔⲆᐃ": "img/night-crate53.png",
		"ΔⲆᐃⵠΔⵠᐃ": "img/day-crate54.png",
		"ᐃⵠⵠⵠⲆᐃᐃ": "img/night-crate54.png",
		"ᐃᐃⵠⲆΔⲆⵠ": "img/day-crate55.png",
		"ᐃⵠⵠᐃⲆⲆⵠ": "img/night-crate55.png",
		"ᐃⲆᐃᐃᐃΔᐃ": "img/day-crate56.png",
		"ᐃⵠⲆᐃΔⲆΔ": "img/night-crate56.png",
		"ΔⵠᐃΔⲆⵠⵠ": "img/day-crate57.png",
		"ΔΔⵠᐃⵠⲆⲆ": "img/night-crate57.png",
		"ⵠᐃΔΔᐃⵠᐃ": "img/day-crate58.png",
		"ΔᐃᐃⲆⲆΔΔ": "img/night-crate58.png",
		"ⵠᐃᐃⵠᐃⲆⲆ": "img/day-crate59.png",
		"ᐃⵠⵠⵠⲆⲆΔ": "img/night-crate59.png",
		"ᐃⵠⵠΔᐃΔⵠ": "img/day-crate60.png",
		"ⵠᐃᐃᐃΔΔⵠ": "img/night-crate60.png",
		"ᐃᐃᐃᐃᐃᐃⲆ": "img/day-crate61.png",
		"ΔⲆΔΔᐃⵠΔ": "img/night-crate61.png",
		"ⵠⵠΔᐃⲆΔΔ": "img/day-crate62.png",
		"ⵠⲆⵠᐃΔᐃΔ": "img/night-crate62.png",
		"ΔΔᐃⲆΔⵠΔ": "img/day-crate63.png",
		"ᐃⲆᐃΔⵠΔΔ": "img/night-crate63.png",
		"ⲆΔΔᐃⲆⵠⲆ": "img/day-crate64.png",
		"ᐃΔᐃᐃᐃⲆΔ": "img/night-crate64.png",
		"ΔΔⵠᐃⲆΔⲆ": "img/day-crate65.png",
		"ΔᐃᐃΔΔⵠⵠ": "img/night-crate65.png",
		"ΔΔⵠⲆᐃΔᐃ": "img/day-crate66.png",
		"ⲆⲆⲆⵠᐃΔΔ": "img/night-crate66.png",
		"ⲆⲆⵠⲆⲆΔΔ": "img/day-crate67.png",
		"ⲆᐃⵠⵠⵠⲆΔ": "img/night-crate67.png",
		"ΔⵠᐃⵠΔΔⵠ": "img/day-crate68.png",
		"ⵠᐃΔᐃⵠⲆⲆ": "img/night-crate68.png",
		"ΔⵠⲆⵠᐃⵠΔ": "img/day-crate69.png",
		"ᐃⲆᐃΔΔⵠⲆ": "img/night-crate69.png",
		"ᐃⲆⵠΔⵠᐃᐃ": "img/day-crate70.png",
		"ΔΔΔᐃⲆΔⵠ": "img/night-crate70.png",
		"ᐃΔᐃⲆᐃⲆⵠ": "img/day-crate71.png",
		"ᐃⲆᐃᐃⲆⲆⲆ": "img/night-crate71.png",
		"ᐃⵠⲆᐃΔΔⲆ": "img/day-crate72.png",
		"ⵠⵠⲆΔⲆΔⲆ": "img/night-crate72.png",
		"ᐃᐃᐃΔΔⲆⲆ": "img/day-crate73.png",
		"ᐃⲆⲆⲆⵠΔᐃ": "img/night-crate73.png",
		"ⲆⲆⲆⲆⵠΔΔ": "img/day-crate74.png",
		"ᐃᐃⵠⲆᐃⲆΔ": "img/night-crate74.png",
		"ⵠⲆⵠⵠᐃᐃⲆ": "img/day-crate75.png",
		"ⵠᐃᐃⵠⵠⵠⲆ": "img/night-crate75.png",
		"ⲆᐃⲆⵠⵠⲆⲆ": "img/day-crate76.png",
		"ⵠᐃᐃᐃⲆᐃᐃ": "img/night-crate76.png",
		"ᐃᐃᐃⲆⵠᐃⲆ": "img/day-crate77.png",
		"ⵠᐃⲆⵠⵠᐃΔ": "img/night-crate77.png",
		"ΔⵠⵠᐃⲆΔᐃ": "img/day-crate78.png",
		"ΔΔⲆΔΔⵠⵠ": "img/night-crate78.png",
		"ⲆᐃΔⵠⵠΔΔ": "img/day-crate79.png",
		"ⲆᐃⵠΔⵠΔΔ": "img/night-crate79.png",
		"ᐃΔᐃᐃᐃⵠᐃ": "img/day-herb0.png",
		"ⵠⵠⵠᐃΔⵠⲆ": "img/day-herb1.png",
		"ΔⲆⲆⵠⲆⲆⵠ": "img/day-herb2.png",
		"ᐃⵠⲆᐃⵠⵠᐃ": "img/day-herb3.png",
		"ⲆΔᐃᐃΔⵠΔ": "img/day-herb4.png",
		"ΔᐃⵠⲆΔΔⲆ": "img/day-herb5.png",
		"ΔⵠΔΔⲆΔⵠ": "img/day-herb6.png",
		"ΔⵠⵠⵠΔⲆᐃ": "img/day-herb7.png",
		"ⲆⲆⵠΔᐃⲆΔ": "img/day-herb8.png",
		"ᐃⵠⵠⲆⲆⵠⵠ": "img/day-herb9.png",
		"ΔⲆⲆᐃⲆᐃᐃ": "img/day-herb10.png",
		"ⵠⲆⲆΔΔⵠᐃ": "img/day-herb11.png",
		"ᐃⵠΔᐃⲆΔΔ": "img/day-herb12.png",
		"ⵠᐃᐃᐃⲆΔΔ": "img/day-herb13.png",
		"ⲆⲆΔᐃⲆⲆⲆ": "img/day-herb14.png",
		"ᐃⵠⲆᐃⲆΔᐃ": "img/day-herb15.png",
		"ⵠⵠⵠᐃⵠᐃΔ": "img/day-shell0.png",
		"ΔⵠΔΔΔΔⵠ": "img/day-shell1.png",
		"ⲆᐃΔΔⵠⲆᐃ": "img/day-shell2.png",
		"ⲆⵠⲆⵠΔⲆⵠ": "img/day-leaf1.png",
		"ⵠΔⲆᐃΔⵠᐃ": "img/day-leaf2.png",
		"ΔΔΔᐃⲆⵠΔ": "img/day-leaf3.png",
		"ⲆⲆⲆⲆΔⲆⲆ": "img/day-leaf4.png",
		"ⲆᐃΔᐃΔΔᐃ": "img/day-leaf5.png",
		"ⲆⵠⲆᐃᐃᐃΔ": "img/day-leaf6.png",
		"ⲆΔⵠᐃⵠⵠⵠ": "img/day-leaf7.png",
		"ⲆΔᐃⲆⵠⲆⲆ": "img/day-leaf8.png",
		"ᐃⲆΔᐃᐃᐃⲆ": "img/day-rock0.png",
		"ᐃⵠⵠΔᐃⵠⲆ": "img/day-rock1.png",
		"ⵠⲆⲆΔⵠⲆⵠ": "img/day-rock2.png",
		"ⵠΔⵠΔⵠᐃΔ": "img/day-rock3.png",
		"ⵠⵠⲆᐃⲆⵠΔ": "img/day-rock4.png",
		"ΔᐃΔⲆⲆⵠΔ": "img/day-rock5.png",
		"ΔΔⲆⲆⵠⵠΔ": "img/day-rock6.png",
		"ᐃⲆΔᐃⵠⲆⵠ": "img/day-rock7.png",
		"ⲆΔΔⵠΔΔᐃ": "img/day-rock8.png",
		"ⵠΔΔᐃᐃᐃᐃ": "img/day-rock9.png",
		"ΔⲆⵠᐃᐃⲆⲆ": "img/day-rock10.png",
		"ⲆⵠⵠᐃΔⵠⲆ": "img/day-rock11.png",
		"ⲆΔⵠᐃⵠⵠᐃ": "img/day-rock12.png",
		"ⲆⵠᐃⲆⵠⲆΔ": "img/day-rock13.png",
		"ΔΔΔᐃΔΔⲆ": "img/day-flower1.png",
		"ᐃⲆⵠⵠᐃⲆⵠ": "img/day-flower2.png",
		"ⵠΔⲆⵠᐃⲆΔ": "img/day-flower3.png",
		"ⲆΔⵠᐃⵠᐃⲆ": "img/day-flower4.png",
		"ΔⲆⵠⲆⵠⲆⲆ": "img/day-flower5.png",
		"ΔⵠᐃᐃⲆΔⲆ": "img/day-flower6.png",
		"ⵠⵠᐃⲆⲆΔΔ": "img/day-flower7.png",
		"ⵠᐃⲆᐃⲆΔᐃ": "img/day-flower8.png",
		"ⲆⵠᐃⲆᐃᐃᐃ": "img/day-flower9.png",
		"ᐃⵠᐃⵠⵠᐃΔ": "img/day-herb16.png",
		"ΔⵠᐃΔΔΔⲆ": "img/day-herb17.png",
		"ⵠΔⵠⲆΔⲆⵠ": "img/day-herb18.png",
		"ᐃⵠⲆΔᐃⵠⵠ": "img/day-herb19.png",
		"ⲆΔᐃⵠⲆⲆⲆ": "img/day-herb20.png",
		"ⵠᐃⲆΔⲆᐃΔ": "img/day-herb21.png",
		"ⲆᐃΔⲆΔⲆⵠ": "img/night-herb0.png",
		"ⵠⵠⵠᐃⲆΔⵠ": "img/night-herb1.png",
		"ⵠⵠⲆᐃᐃᐃᐃ": "img/night-herb2.png",
		"ᐃΔᐃⲆⲆⲆᐃ": "img/night-herb3.png",
		"ΔⵠⵠΔⵠⲆⲆ": "img/night-herb4.png",
		"ⲆΔⵠⲆΔⲆⲆ": "img/night-herb5.png",
		"ⲆⵠⵠⵠΔᐃᐃ": "img/night-herb6.png",
		"ⲆᐃⲆᐃⲆΔⲆ": "img/night-herb7.png",
		"ⲆΔΔΔⲆⵠᐃ": "img/night-herb8.png",
		"ΔᐃΔᐃΔⵠⵠ": "img/night-herb9.png",
		"ᐃⵠᐃᐃᐃᐃᐃ": "img/night-herb10.png",
		"ΔΔⲆΔⲆΔᐃ": "img/night-herb11.png",
		"ΔᐃΔΔᐃⲆⲆ": "img/night-herb12.png",
		"ⲆΔⲆⲆⲆΔᐃ": "img/night-herb13.png",
		"ᐃⲆⵠⵠⲆᐃⵠ": "img/night-herb14.png",
		"ᐃᐃᐃⲆⵠⲆⵠ": "img/night-herb15.png",
		"ᐃⵠᐃⵠᐃᐃᐃ": "img/night-shell0.png",
		"ᐃⲆᐃⵠᐃΔΔ": "img/night-shell1.png",
		"ΔᐃᐃᐃⵠΔᐃ": "img/night-shell2.png",
		"ⵠⲆⵠⲆᐃⲆⲆ": "img/night-leaf1.png",
		"ΔⲆᐃΔⵠⵠᐃ": "img/night-leaf2.png",
		"ⵠΔⵠⲆΔᐃⲆ": "img/night-leaf3.png",
		"ⲆᐃΔᐃⲆⲆΔ": "img/night-leaf4.png",
		"ᐃⵠΔⲆⵠΔⵠ": "img/night-leaf5.png",
		"ᐃⵠᐃⲆᐃⲆΔ": "img/night-leaf6.png",
		"ΔᐃⲆᐃⲆᐃⲆ": "img/night-leaf7.png",
		"ⲆⲆⵠⵠΔⲆᐃ": "img/night-leaf8.png",
		"ᐃⵠⲆⲆⲆⵠΔ": "img/night-rock0.png",
		"ⵠⵠⲆⲆⵠᐃⵠ": "img/night-rock1.png",
		"ΔⲆⵠΔⲆΔᐃ": "img/night-rock2.png",
		"ᐃΔᐃᐃΔⲆΔ": "img/night-rock3.png",
		"ⲆᐃⲆΔⲆᐃⲆ": "img/night-rock4.png",
		"ᐃⲆΔⲆᐃΔⵠ": "img/night-rock5.png",
		"ⲆⲆΔΔⵠΔᐃ": "img/night-rock6.png",
		"ⵠᐃⲆᐃᐃΔⲆ": "img/night-rock7.png",
		"ᐃᐃᐃᐃΔᐃⵠ": "img/night-rock8.png",
		"ᐃᐃⵠⵠΔⲆᐃ": "img/night-rock9.png",
		"ΔⵠⵠᐃΔᐃᐃ": "img/night-rock10.png",
		"ΔΔⲆᐃΔⵠⵠ": "img/night-rock11.png",
		"ᐃⲆᐃᐃΔᐃⵠ": "img/night-rock12.png",
		"ⲆⲆⵠⲆⵠⲆⵠ": "img/night-rock13.png",
		"ᐃΔⵠⲆᐃᐃᐃ": "img/night-flower1.png",
		"ⵠⲆΔΔᐃⵠᐃ": "img/night-flower2.png",
		"ⲆΔΔⵠⵠᐃᐃ": "img/night-flower3.png",
		"ΔⲆᐃⲆⲆⲆΔ": "img/night-flower4.png",
		"ⵠⵠᐃᐃᐃΔᐃ": "img/night-flower5.png",
		"ⵠᐃΔᐃⵠᐃⲆ": "img/night-flower6.png",
		"ΔᐃⲆᐃⵠΔⵠ": "img/night-flower7.png",
		"ΔᐃΔᐃⲆⲆⵠ": "img/night-flower8.png",
		"ᐃⵠᐃΔⲆᐃⵠ": "img/night-flower9.png",
		"ⵠⵠΔΔᐃΔΔ": "img/night-herb16.png",
		"ᐃΔⲆΔⲆΔᐃ": "img/night-herb17.png",
		"ⲆΔᐃⵠΔΔΔ": "img/night-herb18.png",
		"ⲆᐃΔᐃⵠⵠᐃ": "img/night-herb19.png",
		"ⲆΔΔⵠⵠⵠᐃ": "img/night-herb20.png",
		"ⲆⲆΔⵠⲆᐃⲆ": "img/night-herb21.png",
		"ᐃⲆᐃⵠⲆΔᐃ": "img/day-river000-010-000.png",
		"ΔⲆⲆⲆᐃᐃⲆ": "img/day-river000-010-010.png",
		"ⲆᐃⵠΔᐃⵠⵠ": "img/day-river000-011-000.png",
		"ⵠᐃΔⲆⵠⵠᐃ": "img/day-river000-011-010.png",
		"ᐃⵠⵠᐃⲆⲆᐃ": "img/day-river000-011-011.png",
		"ⵠⲆΔⲆΔᐃⲆ": "img/day-river000-110-000.png",
		"ΔⵠⵠᐃΔⲆΔ": "img/day-river000-110-010.png",
		"ᐃΔΔⲆΔΔᐃ": "img/day-river000-110-110.png",
		"ⵠᐃⵠⲆᐃΔⵠ": "img/day-river000-111-000.png",
		"ⲆΔⵠᐃΔᐃⵠ": "img/day-river000-111-010.png",
		"ᐃⵠⵠⲆⵠᐃΔ": "img/day-river000-111-011.png",
		"ⲆⲆⲆΔⵠᐃⵠ": "img/day-river000-111-110.png",
		"ⵠᐃⵠᐃΔⵠΔ": "img/day-river000-111-111.png",
		"ΔⵠᐃΔΔⲆᐃ": "img/day-river010-010-000.png",
		"ΔΔᐃⲆᐃΔⵠ": "img/day-river010-010-010.png",
		"ᐃΔⲆⲆⵠΔⲆ": "img/day-river010-011-000.png",
		"ΔⵠⲆⵠᐃⲆⵠ": "img/day-river010-011-010.png",
		"ⵠᐃⵠᐃⵠᐃΔ": "img/day-river010-011-011.png",
		"ⲆⵠΔⲆᐃⲆᐃ": "img/day-river010-110-000.png",
		"ᐃΔⲆΔΔΔⵠ": "img/day-river010-110-010.png",
		"ᐃⵠⲆⵠᐃᐃᐃ": "img/day-river010-110-110.png",
		"ⲆΔᐃᐃΔⵠᐃ": "img/day-river010-111-000.png",
		"ᐃⵠⲆⲆᐃᐃᐃ": "img/day-river010-111-010.png",
		"ΔⲆᐃⲆΔΔΔ": "img/day-river010-111-011.png",
		"ᐃⲆᐃΔⵠⵠⲆ": "img/day-river010-111-110.png",
		"ΔΔᐃⵠΔⲆΔ": "img/day-river010-111-111.png",
		"ΔⵠⲆΔⲆⲆⲆ": "img/day-river011-011-000.png",
		"ⲆⵠⵠΔⵠΔⲆ": "img/day-river011-011-010.png",
		"ᐃᐃⵠⲆΔⲆⲆ": "img/day-river011-011-011.png",
		"ⲆᐃⵠⵠⵠΔⵠ": "img/day-river011-111-000.png",
		"ⵠΔⲆᐃⵠⵠⲆ": "img/day-river011-111-010.png",
		"ⲆΔⲆⲆᐃⲆΔ": "img/day-river011-111-011.png",
		"ᐃΔⲆΔᐃΔᐃ": "img/day-river011-111-110.png",
		"ⵠⲆⵠⲆⵠⵠⲆ": "img/day-river011-111-111.png",
		"ⲆᐃⵠΔΔᐃⵠ": "img/day-river110-110-000.png",
		"ᐃⵠΔⵠⵠΔΔ": "img/day-river110-110-010.png",
		"ᐃᐃⵠⲆⲆΔᐃ": "img/day-river110-110-110.png",
		"ⲆΔᐃⵠⵠᐃᐃ": "img/day-river110-111-000.png",
		"ᐃⵠΔΔΔΔⵠ": "img/day-river110-111-010.png",
		"ⵠᐃⲆᐃΔΔᐃ": "img/day-river110-111-011.png",
		"ⲆᐃⵠΔⵠⲆΔ": "img/day-river110-111-110.png",
		"ⲆΔⲆΔⲆⲆⵠ": "img/day-river110-111-111.png",
		"ᐃΔΔΔΔΔⲆ": "img/day-river111-111-011.png",
		"ⵠᐃⵠᐃΔⲆⲆ": "img/day-river111-111-110.png",
		"ᐃΔΔΔΔΔⲆ": "img/day-river111-111-011.png",
		"ᐃⵠΔᐃᐃⲆⵠ": "img/day-river111-111-000.png",
		"ⲆΔⵠⲆΔᐃᐃ": "img/day-river111-111-111.png",
		"ΔᐃⲆⵠⵠⲆⵠ": "img/day-river111-111-010.png",
		"ⵠᐃⲆᐃⲆⲆⵠ": "img/night-river000-010-000.png",
		"ΔⵠΔⵠΔⵠⵠ": "img/night-river000-010-010.png",
		"ⵠᐃⲆⲆⲆⲆΔ": "img/night-river000-011-000.png",
		"ⵠᐃᐃⲆⵠᐃᐃ": "img/night-river000-011-010.png",
		"ᐃᐃⵠΔⲆᐃⲆ": "img/night-river000-011-011.png",
		"ΔΔΔᐃⵠᐃⵠ": "img/night-river000-110-000.png",
		"ⵠΔⲆⲆΔΔⲆ": "img/night-river000-110-010.png",
		"ⲆΔᐃⲆΔᐃⲆ": "img/night-river000-110-110.png",
		"ⵠᐃΔⵠΔΔⲆ": "img/night-river000-111-000.png",
		"ᐃΔⲆⵠᐃᐃⲆ": "img/night-river000-111-010.png",
		"ⲆⵠⵠⲆΔⵠⵠ": "img/night-river000-111-011.png",
		"ⵠΔᐃⲆᐃⵠᐃ": "img/night-river000-111-110.png",
		"ᐃⵠΔᐃⲆᐃⵠ": "img/night-river000-111-111.png",
		"ⲆⵠⲆⲆΔΔΔ": "img/night-river010-010-000.png",
		"ᐃⵠΔᐃⵠⵠⲆ": "img/night-river010-010-010.png",
		"ⲆΔΔⵠΔⲆⵠ": "img/night-river010-011-000.png",
		"ⵠⵠⲆΔᐃⵠⵠ": "img/night-river010-011-010.png",
		"ΔΔΔΔᐃᐃᐃ": "img/night-river010-011-011.png",
		"ⵠᐃΔᐃΔΔⲆ": "img/night-river010-110-000.png",
		"ᐃᐃⲆΔⵠⲆⲆ": "img/night-river010-110-010.png",
		"ⵠᐃᐃⲆⵠᐃⵠ": "img/night-river010-110-110.png",
		"ⲆⲆⵠᐃⵠΔⵠ": "img/night-river010-111-000.png",
		"ᐃΔⲆΔᐃⵠᐃ": "img/night-river010-111-010.png",
		"ⵠᐃᐃⲆⵠⵠᐃ": "img/night-river010-111-011.png",
		"ⲆΔⵠΔΔⵠⲆ": "img/night-river010-111-110.png",
		"ΔⲆⵠⲆΔΔⵠ": "img/night-river010-111-111.png",
		"ⲆⲆᐃⵠᐃⲆᐃ": "img/night-river011-011-000.png",
		"ⲆⲆΔᐃΔⲆΔ": "img/night-river011-011-010.png",
		"ᐃⲆΔΔⲆᐃⵠ": "img/night-river011-011-011.png",
		"ΔⵠΔᐃᐃⲆᐃ": "img/night-river011-111-000.png",
		"ⲆᐃΔⵠᐃΔΔ": "img/night-river011-111-010.png",
		"ⲆΔΔΔⵠΔⲆ": "img/night-river011-111-011.png",
		"ⲆΔΔΔⲆᐃⵠ": "img/night-river011-111-110.png",
		"ⵠⲆⲆⵠᐃΔᐃ": "img/night-river011-111-111.png",
		"ΔᐃⲆⵠⲆⵠⲆ": "img/night-river110-110-000.png",
		"ΔⵠⵠⵠᐃΔⲆ": "img/night-river110-110-010.png",
		"ΔⲆⲆΔᐃⵠᐃ": "img/night-river110-110-110.png",
		"ⵠⲆⲆᐃⲆⵠᐃ": "img/night-river110-111-000.png",
		"ΔⵠⵠⵠⵠⲆΔ": "img/night-river110-111-010.png",
		"ⵠⲆᐃΔⲆⵠᐃ": "img/night-river110-111-011.png",
		"ᐃΔⵠⵠᐃΔⵠ": "img/night-river110-111-110.png",
		"ᐃΔᐃΔⲆⵠⲆ": "img/night-river110-111-111.png",
		"ⲆΔᐃⵠᐃⵠⵠ": "img/night-river111-111-011.png",
		"ⲆⵠⲆⲆⵠᐃᐃ": "img/night-river111-111-110.png",
		"ⲆΔᐃⵠᐃⵠⵠ": "img/night-river111-111-011.png",
		"ⲆⲆⲆⵠⵠΔᐃ": "img/night-river111-111-000.png",
		"ᐃⲆΔᐃⵠⵠⲆ": "img/night-river111-111-111.png",
		"ⵠⲆᐃᐃᐃⵠᐃ": "img/night-river111-111-010.png",
		"ΔΔⵠⵠΔⵠⲆ": "img/day-pebblecompo1.png",
		"ⲆΔⵠᐃᐃ": "img/day-pebblecompo2.png",
		"ΔⵠᐃᐃΔ": "img/day-pebblecompo3.png",
		"ⲆⵠᐃⲆⲆᐃⵠ": "img/day-pebblecompo4.png",
		"ᐃⵠᐃⵠΔ": "img/day-pebblecompo5.png",
		"ΔᐃⲆᐃΔ": "img/day-pebblecompo6.png",
		"ΔΔᐃΔⲆ": "img/day-pebblecompo7.png",
		"ⵠⵠᐃⲆⵠⵠⲆ": "img/day-pebblecompo8.png",
		"ΔⵠΔΔΔⵠⲆ": "img/day-pebblecompo9.png",
		"ⵠΔⲆⵠⵠΔⵠ": "img/day-pebblecompo10.png",
		"ΔⵠᐃΔⲆ": "img/day-pebblecompo11.png",
		"ᐃᐃⵠΔᐃⲆΔ": "img/day-pebblecompo12.png",
		"ᐃᐃⵠᐃⲆⵠⵠ": "img/day-pebblecompo13.png",
		"ᐃⵠΔΔᐃᐃᐃ": "img/day-pebblecompo14.png",
		"ΔⵠⲆⲆⲆᐃΔ": "img/day-pebblecompo15.png",
		"ΔΔΔⵠⲆⵠΔ": "img/day-pebblecompo16.png",
		"ⲆⵠᐃΔΔ": "img/day-pebblecompo17.png",
		"ᐃΔⲆᐃᐃΔⵠ": "img/day-pebblecompo18.png",
		"ΔΔⲆⲆⵠᐃⲆ": "img/day-pebblecompo19.png",
		"ⲆⵠΔΔᐃ": "img/day-pebblecompo20.png",
		"ⲆⲆᐃⵠⵠ": "img/day-pebblecompo21.png",
		"ⵠΔΔⲆⵠⵠⵠ": "img/day-pebblecompo22.png",
		"ⵠΔᐃⵠᐃᐃᐃ": "img/day-pebblecompo23.png",
		"ΔⵠᐃⵠⲆⵠΔ": "img/day-pebblecompo24.png",
		"ΔⲆⵠΔΔ": "img/day-pebblecompo25.png",
		"ⲆᐃΔⲆⲆ": "img/day-pebblecompo26.png",
		"ΔᐃᐃΔⵠⵠΔ": "img/day-pebblecompo27.png",
		"ⲆⲆᐃᐃᐃ": "img/day-pebblecompo28.png",
		"ⲆⵠⲆⵠⵠⲆⵠ": "img/night-pebblecompo1.png",
		"ⲆΔΔᐃⵠ": "img/night-pebblecompo2.png",
		"ᐃⵠⲆⲆⵠ": "img/night-pebblecompo3.png",
		"ᐃᐃΔΔⵠⵠⵠ": "img/night-pebblecompo4.png",
		"ΔⵠⲆΔⵠ": "img/night-pebblecompo5.png",
		"ⵠΔⲆΔⵠ": "img/night-pebblecompo6.png",
		"ΔΔⲆⵠΔ": "img/night-pebblecompo7.png",
		"ΔⲆⵠᐃᐃⵠⲆ": "img/night-pebblecompo8.png",
		"ⲆⲆⵠⵠⵠΔⵠ": "img/night-pebblecompo9.png",
		"ⲆⵠᐃⲆΔΔⲆ": "img/night-pebblecompo10.png",
		"ᐃⵠᐃΔᐃ": "img/night-pebblecompo11.png",
		"Δⵠᐃᐃⵠⵠⵠ": "img/night-pebblecompo12.png",
		"ⲆΔΔⵠᐃᐃⲆ": "img/night-pebblecompo13.png",
		"ΔΔΔⲆᐃⲆᐃ": "img/night-pebblecompo14.png",
		"ᐃⵠⵠⲆⲆΔΔ": "img/night-pebblecompo15.png",
		"ⵠᐃᐃΔΔᐃᐃ": "img/night-pebblecompo16.png",
		"ⲆᐃⲆⵠⵠ": "img/night-pebblecompo17.png",
		"ⵠΔᐃΔΔⵠⲆ": "img/night-pebblecompo18.png",
		"ⲆΔΔΔΔⵠⵠ": "img/night-pebblecompo19.png",
		"ⵠᐃΔΔⵠ": "img/night-pebblecompo20.png",
		"ΔⵠⵠΔⲆ": "img/night-pebblecompo21.png",
		"ΔᐃᐃⲆⵠΔΔ": "img/night-pebblecompo22.png",
		"ⵠᐃΔΔΔⵠⲆ": "img/night-pebblecompo23.png",
		"ⵠⵠᐃᐃᐃⵠᐃ": "img/night-pebblecompo24.png",
		"ᐃⵠᐃᐃⵠ": "img/night-pebblecompo25.png",
		"ΔⲆᐃᐃΔ": "img/night-pebblecompo26.png",
		"ΔⲆⲆⲆⵠⵠΔ": "img/night-pebblecompo27.png",
		"ΔⵠΔΔⵠ": "img/night-pebblecompo28.png",
		"ⲆΔⲆⵠⲆΔΔ": "img/day-baby-mammoth.png",
		"ᐃᐃᐃⵠⲆᐃⵠ": "img/day-baby-mammoth-tamed.png",
		"ΔⲆᐃᐃΔΔⵠ": "img/day-baby-mammoth-angry.png",
		"ⲆⲆⲆⲆⲆΔΔ": "img/night-baby-mammoth.png",
		"ΔᐃⵠⵠᐃⵠΔ": "img/night-baby-mammoth-tamed.png",
		"ⵠΔᐃⵠΔⵠᐃ": "img/night-baby-mammoth-angry.png",
		"ΔⵠΔΔᐃᐃⵠ": "img/inv-mammoth-out.png",
		"ΔΔᐃⲆⵠΔⲆ": "img/inv-mammoth-in.png",
		"ΔΔΔΔΔᐃᐃ": "img/inv-mammoth-click.png",
		"ⲆⲆΔⲆⲆΔᐃ": "img/hurt-baby-mammoth.png",
		"ⵠⵠⲆᐃⵠⲆⲆ": "img/baby-mammoth-step.png",
		"ⵠⵠΔⵠⲆⵠΔΔⲆ": "img/day-flower-hat.png",
		"ⵠⲆΔᐃⵠᐃⲆⵠΔ": "img/night-flower-hat.png",
		"ⵠⵠᐃΔᐃΔⵠⵠⵠ": "img/inv-flower-hat-out.png",
		"ᐃⵠⲆᐃΔᐃΔΔⵠ": "img/inv-flower-hat-in.png",
		"ᐃⵠⲆⵠⵠΔⲆⵠᐃ": "img/inv-flower-hat-click.png",
		"ᐃⵠΔΔⵠⲆΔΔⲆ": "img/day-fur-hat.png",
		"ΔᐃⵠⲆⲆⵠⵠⵠⲆ": "img/night-fur-hat.png",
		"ⵠΔᐃⵠΔⵠⲆΔⵠ": "img/inv-fur-hat-out.png",
		"ⵠⵠᐃΔᐃΔⵠΔⵠ": "img/inv-fur-hat-in.png",
		"ᐃⲆⲆⲆⲆⵠⵠⲆΔ": "img/inv-fur-hat-click.png",
		"ⵠΔᐃⲆⵠⲆᐃᐃⵠ": "img/day-mammoth.png",
		"ⵠΔⲆⵠⵠΔⲆΔΔ": "img/night-mammoth.png",
		"ᐃΔⲆⵠⵠⵠᐃ": "img/hurt-mammoth.png",
		"ᐃⲆⲆᐃᐃᐃⲆᐃΔ": "img/inv-mammoth-fur-out.png",
		"ΔΔᐃΔⲆⵠⵠⲆⵠ": "img/inv-mammoth-fur-in.png",
		"ⵠᐃⲆⲆⲆⲆᐃᐃΔ": "img/inv-mammoth-fur-click.png",
		"ⵠⲆᐃᐃᐃΔᐃⵠⵠ": "img/inv-wood-bow-out.png",
		"ΔⲆⲆⵠⵠⲆᐃⵠⲆ": "img/inv-wood-bow-in.png",
		"ᐃⵠⲆΔⵠᐃΔⵠⵠ": "img/inv-wood-bow-click.png",
		"ᐃⲆⵠΔΔΔⵠΔⵠ": "img/inv-wood-arrow-out.png",
		"ΔⲆⲆⲆᐃⵠΔΔⲆ": "img/inv-wood-arrow-in.png",
		"ⲆⲆΔΔⲆΔᐃᐃΔ": "img/inv-wood-arrow-click.png",
		"ⲆⲆⲆᐃᐃⵠⲆᐃΔ": "img/day-wood-bow2.png",
		"ⲆⲆⵠⲆⲆᐃᐃⵠⵠ": "img/night-wood-bow2.png",
		"ᐃΔΔⵠᐃΔⲆ": "img/day-wood-arrow.png",
		"ᐃⵠᐃⲆⲆⲆᐃ": "img/night-wood-arrow.png",
		"ⵠΔΔⲆᐃⵠᐃΔⲆ": "img/inv-stone-bow-out.png",
		"ᐃᐃⲆᐃΔΔⵠΔᐃ": "img/inv-stone-bow-in.png",
		"ⲆᐃⲆΔⵠᐃΔⲆᐃ": "img/inv-stone-bow-click.png",
		"ⵠᐃΔᐃΔⲆΔⵠⵠ": "img/inv-stone-arrow-out.png",
		"ΔΔⵠΔΔᐃΔΔᐃ": "img/inv-stone-arrow-in.png",
		"ᐃⲆⵠⲆⵠᐃᐃⲆⵠ": "img/inv-stone-arrow-click.png",
		"ΔⲆΔΔᐃᐃᐃⵠᐃ": "img/day-stone-bow.png",
		"ᐃⲆΔⲆᐃⲆⲆⲆⲆ": "img/night-stone-bow.png",
		"ΔⵠΔΔᐃΔⵠ": "img/day-stone-arrow.png",
		"ΔΔⲆᐃΔⲆᐃ": "img/night-stone-arrow.png",
		"ᐃΔᐃΔᐃᐃⲆᐃⵠ": "img/inv-gold-bow-out.png",
		"ⵠⲆᐃⵠⵠⵠⵠᐃⲆ": "img/inv-gold-bow-in.png",
		"ⲆᐃⲆⲆᐃΔᐃᐃᐃ": "img/inv-gold-bow-click.png",
		"ᐃᐃⵠⲆΔⵠⲆᐃᐃ": "img/inv-gold-arrow-out.png",
		"ⵠⲆⲆΔⵠⵠᐃᐃⲆ": "img/inv-gold-arrow-in.png",
		"ⵠΔⲆⲆᐃΔΔᐃᐃ": "img/inv-gold-arrow-click.png",
		"ΔᐃⵠᐃⵠⵠΔᐃᐃ": "img/day-gold-bow.png",
		"ΔᐃΔⵠⲆᐃⵠΔΔ": "img/night-gold-bow.png",
		"ΔΔⲆᐃΔᐃΔ": "img/day-gold-arrow.png",
		"ⵠᐃⲆⵠⵠⲆⵠ": "img/night-gold-arrow.png",
		"ᐃΔᐃᐃΔⵠⲆⵠⵠ": "img/inv-diamond-bow-out.png",
		"ᐃⵠΔⵠⵠΔⲆᐃⲆ": "img/inv-diamond-bow-in.png",
		"ΔⲆⲆΔⲆΔⵠΔⵠ": "img/inv-diamond-bow-click.png",
		"ⲆᐃΔⲆᐃᐃΔᐃⵠ": "img/inv-diamond-arrow-out.png",
		"ᐃᐃΔᐃΔⵠⵠΔⵠ": "img/inv-diamond-arrow-in.png",
		"ΔⵠΔⲆᐃᐃⵠⲆᐃ": "img/inv-diamond-arrow-click.png",
		"ΔⵠᐃⵠΔⵠⲆⵠᐃ": "img/day-diamond-bow.png",
		"ᐃⲆᐃᐃᐃᐃⲆΔⵠ": "img/night-diamond-bow.png",
		"ᐃⲆⲆⲆⵠⵠⲆ": "img/day-diamond-arrow.png",
		"ΔⲆΔΔᐃᐃΔ": "img/night-diamond-arrow.png",
		"ΔᐃⵠⵠⵠⲆⲆⲆⵠ": "img/inv-amethyst-bow-out.png",
		"ⵠΔⲆⲆΔⲆΔⲆᐃ": "img/inv-amethyst-bow-in.png",
		"ⲆⵠΔⲆᐃΔⲆΔΔ": "img/inv-amethyst-bow-click.png",
		"ⵠᐃⵠΔᐃΔᐃΔᐃ": "img/inv-amethyst-arrow-out.png",
		"ⵠⵠΔⵠᐃⲆΔΔⲆ": "img/inv-amethyst-arrow-in.png",
		"ⲆⲆᐃΔⵠⵠΔⲆΔ": "img/inv-amethyst-arrow-click.png",
		"ⲆᐃᐃⵠⲆⵠΔΔᐃ": "img/day-amethyst-bow.png",
		"ᐃⵠΔⵠᐃᐃΔΔΔ": "img/night-amethyst-bow.png",
		"ΔᐃᐃⵠΔⲆᐃ": "img/day-amethyst-arrow.png",
		"ⲆⲆⲆΔΔⵠⲆ": "img/night-amethyst-arrow.png",
		"ⵠᐃᐃⲆⵠⲆΔⲆⲆ": "img/inv-dragon-bow-out.png",
		"ΔⲆⲆⵠⲆΔⲆᐃΔ": "img/inv-dragon-bow-in.png",
		"ΔⵠᐃⵠⵠⲆᐃᐃΔ": "img/inv-dragon-bow-click.png",
		"ⵠᐃⲆᐃᐃᐃⲆⵠⵠ": "img/inv-dragon-arrow-out.png",
		"ᐃᐃΔΔΔᐃⵠᐃᐃ": "img/inv-dragon-arrow-in.png",
		"ᐃΔⲆⲆⵠⵠⵠⵠⵠ": "img/inv-dragon-arrow-click.png",
		"ⵠⵠⵠⲆⲆΔⲆᐃⵠ": "img/day-dragon-bow.png",
		"ΔᐃΔⵠᐃⵠⵠΔΔ": "img/night-dragon-bow.png",
		"ⵠΔᐃΔᐃⲆΔ": "img/day-dragon-arrow.png",
		"ⵠΔⲆᐃΔⲆⵠ": "img/night-dragon-arrow.png",
		"ⲆⵠⵠᐃΔᐃΔΔⵠ": "img/inv-reidite-bow-out.png",
		"ⲆⲆⵠⵠΔⲆⵠⵠⲆ": "img/inv-reidite-bow-in.png",
		"ΔⵠΔⵠⲆᐃΔⲆⲆ": "img/inv-reidite-bow-click.png",
		"ᐃᐃΔⲆⵠⲆⲆᐃΔ": "img/inv-reidite-arrow-out.png",
		"ⲆΔⵠΔΔⵠⵠᐃΔ": "img/inv-reidite-arrow-in.png",
		"ΔⵠᐃⲆᐃᐃⲆⵠΔ": "img/inv-reidite-arrow-click.png",
		"ⲆⲆᐃⲆΔⵠΔⲆⲆ": "img/day-reidite-bow.png",
		"ⵠⲆᐃΔᐃⵠᐃΔΔ": "img/night-reidite-bow.png",
		"ⵠΔⵠᐃⵠΔⵠ": "img/day-reidite-arrow.png",
		"ⲆᐃΔᐃⲆᐃᐃⵠᐃ": "img/night-reidite-arrow.png",
		"ⵠΔᐃΔⲆⵠⵠᐃΔ": "img/inv-wooden-axe-out.png",
		"ΔᐃΔᐃⲆⲆᐃⵠⲆ": "img/inv-wooden-axe-in.png",
		"ᐃⲆᐃⲆΔⵠΔΔᐃ": "img/inv-wooden-axe-click.png",
		"ΔΔᐃΔⲆΔⲆⲆⲆ": "img/day-wooden-axe.png",
		"ⵠΔΔΔΔⲆΔⲆⵠ": "img/night-wooden-axe.png",
		"ᐃⵠΔⵠⵠΔΔΔⲆ": "img/inv-stone-axe-out.png",
		"ΔΔⵠⵠᐃⵠΔᐃΔ": "img/inv-stone-axe-in.png",
		"ΔΔⵠΔΔⵠᐃᐃⲆ": "img/inv-stone-axe-click.png",
		"ⵠΔᐃⵠΔⵠΔᐃⵠ": "img/day-stone-axe.png",
		"ⲆⲆⵠΔΔᐃⵠΔΔ": "img/night-stone-axe.png",
		"ⲆΔⵠᐃΔΔⵠⲆⲆ": "img/inv-golden-axe-out.png",
		"ᐃⲆΔⲆⲆᐃΔⵠⵠ": "img/inv-golden-axe-in.png",
		"ⵠⵠᐃⵠⵠⵠᐃΔⲆ": "img/inv-golden-axe-click.png",
		"ᐃⲆⲆⲆⲆΔⲆᐃΔ": "img/day-golden-axe.png",
		"ᐃⲆⵠΔⲆⲆᐃⵠⵠ": "img/night-golden-axe.png",
		"ᐃⵠⵠΔⵠⵠΔⲆⲆ": "img/inv-diamond-axe-out.png",
		"ⵠⵠⵠΔᐃᐃᐃΔΔ": "img/inv-diamond-axe-in.png",
		"ΔⲆΔΔⲆᐃⲆⲆΔ": "img/inv-diamond-axe-click.png",
		"ⵠⵠΔΔⲆΔⵠⵠΔ": "img/day-diamond-axe.png",
		"ⲆⲆΔⵠⲆΔⵠᐃΔ": "img/night-diamond-axe.png",
		"ᐃᐃⲆⲆⵠΔᐃΔΔ": "img/inv-amethyst-axe-out.png",
		"ᐃᐃᐃΔⵠⲆΔΔⲆ": "img/inv-amethyst-axe-in.png",
		"ᐃⲆⲆΔⵠⵠⵠΔᐃ": "img/inv-amethyst-axe-click.png",
		"ⲆⲆⲆⲆⵠⵠΔⲆᐃ": "img/day-amethyst-axe.png",
		"ᐃⲆⵠⲆⵠᐃⲆⲆΔ": "img/night-amethyst-axe.png",
		"ⵠⵠⵠⲆᐃᐃⲆⵠⵠ": "img/inv-reidite-axe-out.png",
		"ΔᐃⲆᐃⲆⵠᐃⵠⲆ": "img/inv-reidite-axe-in.png",
		"ⲆᐃⲆⲆᐃⵠΔΔΔ": "img/inv-reidite-axe-click.png",
		"ⵠⲆᐃΔΔΔⲆⲆⵠ": "img/day-reidite-axe.png",
		"ⵠⵠⵠⵠⵠᐃⲆᐃΔ": "img/night-reidite-axe.png",
		"ΔᐃⵠⲆᐃⵠᐃ": "img/bandage-activated.png",
		"ⵠᐃᐃᐃⵠᐃⵠ": "img/auto-feed.png",
		"ᐃⵠᐃⲆⲆⲆΔ": "img/stop-regeneration.png",
		"ⲆⵠᐃΔⵠⲆⵠ": "img/stop-regeneration2.png",
		"ΔᐃⵠⵠᐃΔⵠΔΔ": "img/day-wood-platform.png",
		"ⵠᐃⲆⲆⲆΔⲆⲆΔ": "img/night-wood-platform.png",
		"ΔⵠᐃᐃΔⲆΔΔⲆ": "img/inv-wood-platform-in.png",
		"ⵠⵠᐃᐃⲆᐃᐃᐃᐃ": "img/inv-wood-platform-out.png",
		"ᐃΔΔⲆⲆⵠᐃⵠⲆ": "img/inv-wood-platform-click.png",
		"ᐃⵠΔᐃⵠΔᐃΔΔ": "img/day-wood-shield.png",
		"ⲆⵠⲆⵠⲆᐃⵠⲆⲆ": "img/night-wood-shield.png",
		"ΔⲆⵠⵠⵠΔᐃⲆⲆ": "img/day-stone-shield.png",
		"ⲆᐃᐃᐃᐃⵠⵠⲆⵠ": "img/night-stone-shield.png",
		"ΔⵠΔᐃⵠᐃΔⲆΔ": "img/day-gold-shield.png",
		"ΔⲆⲆΔᐃΔᐃΔⵠ": "img/night-gold-shield.png",
		"ⵠⵠⲆΔᐃⵠᐃΔᐃ": "img/day-diamond-shield.png",
		"ΔΔΔⲆⵠⵠⵠᐃᐃ": "img/night-diamond-shield.png",
		"ⵠⲆⲆΔⵠⵠⵠᐃⲆ": "img/day-amethyst-shield.png",
		"ⲆᐃⵠⵠⲆᐃⵠⵠⲆ": "img/night-amethyst-shield.png",
		"ⵠᐃⲆⲆΔΔⲆⲆΔ": "img/day-reidite-shield.png",
		"ᐃΔⲆⲆⲆᐃΔᐃⲆ": "img/night-reidite-shield.png",
		"ΔⵠⵠⲆΔⵠᐃᐃᐃ": "img/inv-wood-shield-in.png",
		"ΔΔⵠⵠᐃΔⵠΔⵠ": "img/inv-wood-shield-out.png",
		"ⲆⲆⲆⵠⲆⵠⲆᐃⵠ": "img/inv-wood-shield-click.png",
		"ⲆᐃⲆᐃᐃᐃⲆⲆⲆ": "img/inv-stone-shield-in.png",
		"ⵠⲆⲆᐃⲆᐃᐃⲆⵠ": "img/inv-stone-shield-out.png",
		"ⲆⵠᐃⲆⲆⲆⵠⲆⵠ": "img/inv-stone-shield-click.png",
		"ⵠᐃⵠⵠⲆⲆⲆⵠⲆ": "img/inv-gold-shield-in.png",
		"ᐃᐃⲆΔΔΔΔΔⵠ": "img/inv-gold-shield-out.png",
		"ᐃᐃⵠⵠⵠΔΔΔᐃ": "img/inv-gold-shield-click.png",
		"ΔⲆⵠᐃΔⵠᐃⲆᐃ": "img/inv-diamond-shield-in.png",
		"ᐃⵠᐃᐃⲆΔⲆΔⲆ": "img/inv-diamond-shield-out.png",
		"ⵠⵠⲆⵠᐃⵠⲆΔΔ": "img/inv-diamond-shield-click.png",
		"ⵠΔΔᐃᐃⵠΔΔΔ": "img/inv-amethyst-shield-in.png",
		"ⲆΔⲆⲆΔΔΔⵠⲆ": "img/inv-amethyst-shield-out.png",
		"ᐃᐃᐃΔⵠᐃⵠⵠⲆ": "img/inv-amethyst-shield-click.png",
		"ⵠⲆⲆⵠⵠΔⵠᐃᐃ": "img/inv-reidite-shield-in.png",
		"ⵠⵠⵠⵠⲆⵠΔⵠΔ": "img/inv-reidite-shield-out.png",
		"ΔⲆᐃⵠⲆⲆⵠⵠⵠ": "img/inv-reidite-shield-click.png",
		"ⵠⵠΔᐃᐃⵠΔⵠΔ": "img/day-machete.png",
		"ⵠⵠⵠᐃⲆⵠΔⵠᐃ": "img/night-machete.png",
		"ⵠΔᐃⵠᐃΔⲆᐃΔ": "img/inv-machete-in.png",
		"ΔⵠᐃΔΔᐃΔΔⵠ": "img/inv-machete-out.png",
		"ⲆⲆⵠⵠⲆΔⲆⲆᐃ": "img/inv-machete-click.png"
	};
	ΔᐃⲆᐃᐃᐃΔ = [{}];
	ΔᐃⲆᐃᐃᐃΔ[0].stringify = function(ⵠᐃⲆΔᐃⲆⵠ) {
		var ⲆⲆΔᐃᐃⲆⵠ = new Uint8Array(new ArrayBuffer(ⵠᐃⲆΔᐃⲆⵠ.length));
		for (var Ⲇᐃ = ⵠⵠⵠΔ; Ⲇᐃ < ⵠᐃⲆΔᐃⲆⵠ.length; Ⲇᐃ++) ⲆⲆΔᐃᐃⲆⵠ[Ⲇᐃ] = ⵠᐃⲆΔᐃⲆⵠ[Ⲇᐃ];
		return ⲆⲆΔᐃᐃⲆⵠ
	};
	const ⲆΔᐃⲆⵠⲆΔ = ⲆⵠⵠΔΔΔᐃ;
	ⲆᐃΔⵠⵠᐃⵠ = {};
	const ΔΔΔᐃ = Δᐃⵠⵠ;
	ΔⲆⵠΔᐃᐃⵠⵠΔ = {};
	for (var Ⲇᐃ in ⵠᐃ) ⲆᐃΔⵠⵠᐃⵠ[Ⲇᐃ] = ⵠᐃ[Ⲇᐃ];

	function ΔⵠⲆⲆΔᐃⵠ(ᐃᐃⲆΔΔᐃᐃ, ᐃΔⵠⲆΔᐃⲆ, ⲆΔⲆᐃΔⲆⵠ, ΔᐃᐃΔⲆⲆⵠ, ⲆⲆⵠᐃᐃⲆⵠ) {
		ⲆᐃⲆΔⵠⲆⵠ(ᐃⵠΔⲆⲆ, ᐃᐃⲆΔΔᐃᐃ, ᐃΔⵠⲆΔᐃⲆ, ⲆΔⲆᐃΔⲆⵠ, ΔᐃᐃΔⲆⲆⵠ, ⲆⲆⵠᐃᐃⲆⵠ);
		const ⲆᐃΔⲆΔᐃⵠⲆΔ = ΔΔⵠⲆΔⵠⲆ(ⲆⲆⵠΔ[ⵠⵠⵠ], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[2]);
		const ⵠⵠΔⵠΔᐃⵠⲆⵠ = ΔᐃᐃᐃΔᐃⵠ(ⲆⲆⵠΔ[3], ⲆⲆⵠΔ[ᐃⲆⲆΔΔ], ⲆⲆⵠΔ[ⵠᐃⲆ], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[2], ⲆⲆⵠΔ[ΔⲆⵠᐃ]);
		const ⲆΔⲆᐃⵠⲆⵠΔᐃ = ⲆᐃΔⲆΔᐃⵠⲆΔ ^ 46046;
		return ⲆΔⲆᐃⵠⲆⵠΔᐃ
	}
	const ᐃⲆΔᐃⵠᐃΔ = ⵠΔᐃⲆⲆ;
	ᐃΔ = [];
	const sprite = ᐃΔ;
	sprite[1e4] = [new Image];
	sprite[10001] = [new Image];
	sprite[10002] = [new Image];
	sprite[10003] = [new Image];
	sprite[10004] = [new Image];
	sprite[10005] = [new Image];
	sprite[10006] = [new Image];
	sprite[10007] = [new Image];
	sprite[10008] = [new Image];
	sprite[10009] = [new Image];
	sprite[10010] = [new Image];
	sprite[10011] = [new Image];
	sprite[10012] = [new Image];
	sprite[10013] = [new Image];
	sprite[10014] = [new Image];
	sprite[10015] = [new Image];
	sprite[10016] = [new Image];
	sprite[10017] = [new Image];
	sprite[10018] = [new Image];
	sprite[10019] = [new Image];
	sprite[10020] = [new Image];
	sprite[10021] = [new Image];
	sprite[10022] = [new Image];
	sprite[10023] = [new Image];
	sprite[10024] = [new Image];
	sprite[10025] = [new Image];
	sprite[10026] = [new Image];
	sprite[10027] = [new Image];
	sprite[10028] = [new Image];
	sprite[10029] = [new Image];
	sprite[10030] = [new Image];
	sprite[10031] = [new Image];
	sprite[10032] = [new Image];
	sprite[10033] = [new Image];
	sprite[10034] = [new Image];
	sprite[10035] = [new Image];
	const switchColoredSpikesTextures = () => {
		switch (Settings.ColoredSpikes.textures) {
			case "1": {
				sprite[1e4][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-ally.png";
				sprite[10001][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-enemy.png";
				sprite[10002][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-ally.png";
				sprite[10003][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-enemy.png";
				sprite[10004][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-ally.png";
				sprite[10005][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-enemy.png";
				sprite[10006][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-ally.png";
				sprite[10007][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-enemy.png";
				sprite[10008][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-ally.png";
				sprite[10009][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-enemy.png";
				sprite[10010][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-ally.png";
				sprite[10011][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-enemy.png";
				sprite[10012][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood2.png";
				sprite[10013][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood1.png";
				sprite[10014][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone1.png";
				sprite[10015][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone2.png";
				sprite[10016][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold2.png";
				sprite[10017][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold1.png";
				sprite[10018][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond2.png";
				sprite[10019][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond1.png";
				sprite[10020][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst1.png";
				sprite[10021][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst2.png";
				sprite[10022][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite2.png";
				sprite[10023][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite1.png";
				sprite[10024][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-door-ally.png";
				sprite[10025][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-wood-spike-door-enemy.png";
				sprite[10026][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-door-ally.png";
				sprite[10027][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-stone-spike-door-enemy.png";
				sprite[10028][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-door-ally.png";
				sprite[10029][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-gold-spike-door-enemy.png";
				sprite[10030][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-door-ally.png";
				sprite[10031][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-diamond-spike-door-enemy.png";
				sprite[10032][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-door-ally.png";
				sprite[10033][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-amethyst-spike-door-enemy.png";
				sprite[10034][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-door-ally.png";
				sprite[10035][0].src = "https://raw.githubusercontent.com/XmreLoux/For_require/main/images/day-reidite-spike-door-enemy.png"
			};
			break;
		case "2": {
			sprite[1e4][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-enemy.png.111.png?raw=true";
			sprite[10001][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-enemy.png12312.png?raw=true";
			sprite[10002][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-ally.png312312.png?raw=true";
			sprite[10003][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-enemy.1213png1.png?raw=true";
			sprite[10004][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-ally.png?raw=true";
			sprite[10005][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-enemy.png1.png1.png?raw=true";
			sprite[10006][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-ally%20remaster%20by%20hersgori.png?raw=true";
			sprite[10007][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-enemy.png1132.png1.png?raw=true";
			sprite[10008][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-ally1.png?raw=true";
			sprite[10009][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-enemy.png1.png?raw=true";
			sprite[10010][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-all1232y.png?raw=true";
			sprite[10011][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-enemy.png123.png1.png?raw=true";
			sprite[10012][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood2.png";
			sprite[10013][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_wood1.png";
			sprite[10014][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone1.png";
			sprite[10015][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_stone2.png";
			sprite[10016][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold2.png";
			sprite[10017][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_gold1.png";
			sprite[10018][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond2.png";
			sprite[10019][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_diamond1.png";
			sprite[10020][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst1.png";
			sprite[10021][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_amethyst2.png";
			sprite[10022][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite2.png";
			sprite[10023][0].src = "https://raw.githubusercontent.com/XmreLoux/weirdo/main/door_reidite1.png";
			sprite[10024][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-door-ally.png?raw=true";
			sprite[10025][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-wood-spike-door-enemy.png?raw=true";
			sprite[10026][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-door-ally.png?raw=true";
			sprite[10027][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-stone-spike-door-enemy.png?raw=true";
			sprite[10028][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-door-ally.png?raw=true";
			sprite[10029][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-gold-spike-door-enemy.png?raw=true";
			sprite[10030][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-door-ally.png?raw=true";
			sprite[10031][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-diamond-spike-door-enemy.png?raw=true";
			sprite[10032][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-door-ally.png?raw=true";
			sprite[10033][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-amethyst-spike-door-enemy.png?raw=true";
			sprite[10034][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-door-ally%20remastered%20by%20hersgori.png?raw=true";
			sprite[10035][0].src = "https://github.com/XmreLoux/blackspikes/blob/main/day-reidite-spike-door-enemy.png?raw=true"
		};
		break
		}
	};
	switchColoredSpikesTextures();
	sprite[1e4][1] = sprite[1e4][0];
	sprite[10001][1] = sprite[10001][0];
	sprite[10002][1] = sprite[10002][0];
	sprite[10003][1] = sprite[10003][0];
	sprite[10004][1] = sprite[10004][0];
	sprite[10005][1] = sprite[10005][0];
	sprite[10006][1] = sprite[10006][0];
	sprite[10007][1] = sprite[10007][0];
	sprite[10008][1] = sprite[10008][0];
	sprite[10009][1] = sprite[10009][0];
	sprite[10010][1] = sprite[10010][0];
	sprite[10011][1] = sprite[10011][0];
	sprite[10012][1] = sprite[10012][0];
	sprite[10013][1] = sprite[10013][0];
	sprite[10014][1] = sprite[10014][0];
	sprite[10015][1] = sprite[10015][0];
	sprite[10016][1] = sprite[10016][0];
	sprite[10017][1] = sprite[10017][0];
	sprite[10018][1] = sprite[10018][0];
	sprite[10019][1] = sprite[10019][0];
	sprite[10020][1] = sprite[10020][0];
	sprite[10021][1] = sprite[10021][0];
	sprite[10022][1] = sprite[10022][0];
	sprite[10023][1] = sprite[10023][0];
	sprite[10024][1] = sprite[10024][0];
	sprite[10025][1] = sprite[10025][0];
	sprite[10026][1] = sprite[10026][0];
	sprite[10027][1] = sprite[10027][0];
	sprite[10028][1] = sprite[10028][0];
	sprite[10029][1] = sprite[10029][0];
	sprite[10030][1] = sprite[10030][0];
	sprite[10031][1] = sprite[10031][0];
	sprite[10032][1] = sprite[10032][0];
	sprite[10033][1] = sprite[10033][0];
	sprite[10034][1] = sprite[10034][0];
	sprite[10035][1] = sprite[10035][0];
	const ᐃᐃⲆⲆᐃᐃⵠ = ᐃΔΔⲆⲆ;
	const ΔⲆⲆⲆΔⵠᐃ = ΔᐃᐃⲆᐃ;
	ΔΔⵠ = {};
	ΔΔⵠ.ᐃⵠⲆⲆⲆ = ⵠⵠⲆⵠ;
	const ⲆⲆᐃⵠⵠⲆⲆⲆⲆ = ⲆΔᐃᐃΔⵠⲆ;
	const ⵠⵠᐃᐃᐃⲆⲆ = ᐃᐃΔΔⵠ;
	ΔΔⵠ.ⲆⵠᐃΔ = 1;
	ΔΔⵠ.ⵠⵠΔΔ = ⲆᐃⵠΔ;
	ΔΔⵠ.ᐃΔᐃⲆ = 3;
	const ᐃΔⲆᐃΔⲆΔΔᐃ = ⲆⲆᐃᐃⵠⵠⲆ;
	const ᐃⲆⵠᐃⵠ = ⵠᐃΔⲆ;
	const ᐃⲆⵠⵠⵠ = ⲆᐃΔⲆⲆΔᐃ;
	const ΔⵠⲆᐃⵠⲆᐃ = ᐃⵠΔⲆΔ;
	ΔΔⵠ.ⲆᐃⲆᐃ = 4;
	const ⵠᐃΔᐃΔ = ⲆⵠⲆⵠⵠ;
	const ⲆΔΔⲆᐃ = ΔΔⵠᐃⵠ;
	ΔΔⵠ.ⲆΔΔᐃ = ᐃᐃᐃⲆ;
	ΔΔⵠ.ⲆᐃⲆⲆ = 6;
	ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ = 7;
	ΔΔⵠ.ᐃΔⵠⵠⵠ = ᐃΔⲆᐃⵠΔⵠ;
	const ᐃΔΔΔᐃᐃΔ = ⲆᐃᐃᐃΔⲆΔ;
	Δᐃᐃᐃ = {};
	ᐃᐃᐃᐃ = [];
	ᐃⵠᐃᐃⵠⵠⵠ = function(ΔΔⵠΔΔᐃⵠ, ⲆΔ) {
		for (var Ⲇᐃ = 0; Ⲇᐃ < ΔΔⵠΔΔᐃⵠ.length; Ⲇᐃ++) {
			if (ΔΔⵠΔΔᐃⵠ[Ⲇᐃ].id === ⲆΔ) return Ⲇᐃ
		}
		return -ⵠΔᐃ
	};
	var ΔⵠᐃⲆΔΔΔ = [];
	const ⵠᐃᐃⲆᐃΔⲆ = ᐃⲆⵠⲆΔΔΔ;

	function ⲆⵠᐃᐃΔ(ⲆΔⲆᐃ, ΔⵠⵠⲆᐃ) {
		for (var Ⲇᐃ = ᐃᐃⲆ; ΔⵠᐃⲆΔΔΔ.length > Ⲇᐃ; Ⲇᐃ += ΔⵠⵠⲆᐃ) {
			var ΔⲆΔ = ΔⵠᐃⲆΔΔΔ[Ⲇᐃ];
			if (ⲆΔⲆᐃ === ΔⲆΔ[0]) ᐃⲆᐃⵠⵠⵠΔⲆⲆ(ΔⲆΔ[0], ΔⲆΔ[1], ΔⲆΔ[ⵠⵠⵠᐃ], ΔⲆΔ[3])
		}
	}
	const ⲆⲆⵠⵠⲆ = ⲆⲆⲆᐃᐃ;

	function ᐃᐃⲆΔΔΔΔΔⲆ() {
		ⲆⵠᐃᐃΔ(ⵠ[418], ΔᐃⲆⲆ);
		ⲆⵠᐃᐃΔ(ⵠ[282], 20);
		ⲆⵠᐃᐃΔ(ⵠ[105], 1);
		ⲆⵠᐃᐃΔ("c", ΔᐃⲆⲆ);
		ⲆⵠᐃᐃΔ("s", ΔᐃⵠⲆ);
		ⲆⵠᐃᐃΔ("f", ⵠΔᐃ);
		ⲆⵠᐃᐃΔ("p", ⲆᐃΔ);
		ⲆⵠᐃᐃΔ("g", 1);
		ⲆⵠᐃᐃΔ("d", 1);
		ⲆⵠᐃᐃΔ("a", ΔᐃΔⲆ);
		ⲆⵠᐃᐃΔ(ⵠ[449], ⵠΔᐃ);
		ⲆⵠᐃᐃΔ("m", 1);
		ΔⵠᐃⲆΔΔΔ = []
	}
	const ⲆᐃᐃΔⵠ = ⵠⵠᐃΔ;

	function ᐃⲆᐃⵠⵠⵠΔⲆⲆ(ⲆΔⲆᐃ, ᐃΔᐃⲆⲆ, Ⲇᐃ, ⲆⲆᐃⲆ) {
		var ᐃⲆᐃⲆΔᐃᐃ = ᐃᐃᐃᐃ[ⲆΔⲆᐃ];
		if (ᐃⲆᐃⲆΔᐃᐃ === ⵠΔⵠⵠⲆ) return;
		for (var ⵠᐃᐃᐃ = 0; 2 > ⵠᐃᐃᐃ; ⵠᐃᐃᐃ++) {
			var ᐃᐃ = ᐃⲆᐃⲆΔᐃᐃ[ᐃΔᐃⲆⲆ][ⵠᐃᐃᐃ];
			var Ⲇⵠ = ⲆⲆᐃⲆ * 193 / ⲆⵠΔ.ΔᐃᐃⵠΔ;
			var ᐃⵠⲆ = Ⲇᐃ * 193 / ⲆⵠΔ.ᐃⵠᐃᐃᐃ;
			var ⲆⲆᐃ = ᐃᐃ.width / 3.5;
			var ⲆΔⲆ = ᐃᐃ.height / 3.5;
			ᐃΔ[Δ.ΔΔⲆΔΔ][ⵠᐃᐃᐃ].drawImage(ᐃᐃ, Ⲇⵠ - ⲆⲆᐃ / ᐃⲆᐃᐃ, ᐃⵠⲆ - ⲆΔⲆ / ᐃᐃⲆⲆ, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇⵠ = 600 * ⲆⲆᐃⲆ / ⲆⵠΔ.ΔᐃᐃⵠΔ;
			ᐃⵠⲆ = Ⲇᐃ * 600 / ⲆⵠΔ.ᐃⵠᐃᐃᐃ;
			ⲆⲆᐃ = ᐃᐃ.width / 1.5;
			ⲆΔⲆ = ᐃᐃ.height / 1.5;
			ᐃΔ[Δ.ΔⵠⵠⲆⵠ][ⵠᐃᐃᐃ].drawImage(ᐃᐃ, Ⲇⵠ - ⲆⲆᐃ / ᐃᐃⲆⲆ, ᐃⵠⲆ - ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ)
		}
	}

	function ⵠⵠᐃΔⵠⵠⵠⵠΔ(ⲆΔⲆᐃ, ᐃΔᐃⲆⲆ, Ⲇᐃ, ⲆⲆᐃⲆ) {
		ΔⵠᐃⲆΔΔΔ.push([ⲆΔⲆᐃ, ᐃΔᐃⲆⲆ, Ⲇᐃ, ⲆⲆᐃⲆ])
	}
	ⲆΔⵠⵠⲆᐃⲆⲆΔ = function() {
		for (var Ⲇᐃ = ⲆⲆⵠⲆ; 2 > Ⲇᐃ; Ⲇᐃ++) {
			ᐃΔ[Δ.ΔΔⲆΔΔ][Ⲇᐃ].clearRect(0, ⵠⲆΔ, 193, 193);
			ᐃΔ[Δ.ΔΔⲆΔΔ][Ⲇᐃ].drawImage(ᐃᐃᐃᐃ["MAP"][Ⲇᐃ], 0, ⵠⵠⲆⵠ, 193, 193);
			ᐃΔ[Δ.ΔⵠⵠⲆⵠ][Ⲇᐃ].clearRect(0, 0, 600, 600);
			ᐃΔ[Δ.ΔⵠⵠⲆⵠ][Ⲇᐃ].drawImage(ᐃᐃᐃᐃ["MAP"][Ⲇᐃ], ⵠᐃⲆⲆ, 0, 600, 600);
			for (var ⲆⲆᐃⲆ = ⲆⵠΔ.ᐃΔⲆᐃ.length - ⵠⲆⲆ; ⲆⲆᐃⲆ >= ⵠⵠⲆⵠ; ⲆⲆᐃⲆ--) {
				var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[ⲆⲆᐃⲆ];
				var Ⲇⵠ = ᐃΔⵠᐃ.x1 * 193 / (ᐃⲆᐃⵠΔ * ⲆⵠΔ.ΔᐃᐃⵠΔ);
				var ᐃⵠⲆ = ᐃΔⵠᐃ.y1 * 193 / (100 * ⲆⵠΔ.ᐃⵠᐃᐃᐃ);
				var ⲆⲆᐃ = 193 * ᐃΔⵠᐃ.w / (ⲆⵠΔ.ΔᐃᐃⵠΔ * 100);
				var ⲆΔⲆ = 193 * ᐃΔⵠᐃ.ⲆΔⲆ / (ᐃⲆᐃⵠΔ * ⲆⵠΔ.ᐃⵠᐃᐃᐃ);
				var ⵠΔᐃⲆᐃ = 600 * ᐃΔⵠᐃ.x1 / (ⵠΔⵠΔΔ * ⲆⵠΔ.ΔᐃᐃⵠΔ);
				var ⵠΔⲆᐃⵠ = ᐃΔⵠᐃ.y1 * 600 / (ⲆⵠΔ.ᐃⵠᐃᐃᐃ * ΔᐃΔΔΔ);
				var ⲆΔΔΔᐃⲆᐃ = ᐃΔⵠᐃ.w * 600 / (ⲆⵠΔ.ΔᐃᐃⵠΔ * 100);
				var ⵠⵠⵠᐃᐃⲆᐃ = 600 * ᐃΔⵠᐃ.ⲆΔⲆ / (ⲆⵠΔ.ᐃⵠᐃᐃᐃ * ΔᐃΔΔΔ);
				ⲆⵠΔ.ᐃΔΔΔⵠ === ᐃΔⵠᐃ.Δᐃᐃ && (ᐃΔ[Δ.ΔΔⲆΔΔ][Ⲇᐃ].drawImage(ᐃᐃᐃᐃ[ⵠ[139]][Ⲇᐃ], Ⲇⵠ, ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ), ᐃΔ[Δ.ΔⵠⵠⲆⵠ][Ⲇᐃ].drawImage(ᐃᐃᐃᐃ[ⵠ[139]][Ⲇᐃ], ⵠΔᐃⲆᐃ, ⵠΔⲆᐃⵠ, ⲆΔΔΔᐃⲆᐃ, ⵠⵠⵠᐃᐃⲆᐃ));
				ⲆⵠΔ.ⵠᐃᐃᐃⲆⲆᐃ === ᐃΔⵠᐃ.Δᐃᐃ && (ᐃΔ[Δ.ΔΔⲆΔΔ][Ⲇᐃ].drawImage(ᐃᐃᐃᐃ[ⵠ[116]][Ⲇᐃ], Ⲇⵠ, ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ), ᐃΔ[Δ.ΔⵠⵠⲆⵠ][Ⲇᐃ].drawImage(ᐃᐃᐃᐃ[ⵠ[116]][Ⲇᐃ], ⵠΔᐃⲆᐃ, ⵠΔⲆᐃⵠ, ⲆΔΔΔᐃⲆᐃ, ⵠⵠⵠᐃᐃⲆᐃ));
				ᐃΔⵠᐃ.Δᐃᐃ === ⲆⵠΔ.ΔΔⵠⵠᐃΔⵠ && (ᐃΔ[Δ.ΔΔⲆΔΔ][Ⲇᐃ].drawImage(ᐃᐃᐃᐃ[ⵠ[314]][Ⲇᐃ], Ⲇⵠ, ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ), ᐃΔ[Δ.ΔⵠⵠⲆⵠ][Ⲇᐃ].drawImage(ᐃᐃᐃᐃ[ⵠ[314]][Ⲇᐃ], ⵠΔᐃⲆᐃ, ⵠΔⲆᐃⵠ, ⲆΔΔΔᐃⲆᐃ, ⵠⵠⵠᐃᐃⲆᐃ));
				ᐃΔⵠᐃ.Δᐃᐃ === ⲆⵠΔ.ⲆⵠⵠⲆⵠᐃΔ && (ᐃΔ[Δ.ΔΔⲆΔΔ][Ⲇᐃ].drawImage(ᐃᐃᐃᐃ["CAVE"][Ⲇᐃ], Ⲇⵠ, ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ), ᐃΔ[Δ.ΔⵠⵠⲆⵠ][Ⲇᐃ].drawImage(ᐃᐃᐃᐃ["CAVE"][Ⲇᐃ], ⵠΔᐃⲆᐃ, ⵠΔⲆᐃⵠ, ⲆΔΔΔᐃⲆᐃ, ⵠⵠⵠᐃᐃⲆᐃ));
				ᐃΔⵠᐃ.Δᐃᐃ === ⲆⵠΔ.ᐃᐃΔⲆᐃᐃⵠ && (ᐃΔ[Δ.ΔΔⲆΔΔ][Ⲇᐃ].drawImage(ᐃᐃᐃᐃ[ⵠ[65]][Ⲇᐃ], Ⲇⵠ, ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ), ᐃΔ[Δ.ΔⵠⵠⲆⵠ][Ⲇᐃ].drawImage(ᐃᐃᐃᐃ[ⵠ[65]][Ⲇᐃ], ⵠΔᐃⲆᐃ, ⵠΔⲆᐃⵠ, ⲆΔΔΔᐃⲆᐃ, ⵠⵠⵠᐃᐃⲆᐃ))
			}
		}
	};
	ΔⲆΔⵠⲆᐃΔΔⲆ = function() {
		Δᐃᐃᐃ = {
			"ⵠᐃΔⲆΔ": [{
				id: 0,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⲆᐃⵠⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⲆⲆᐃΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⲆⵠΔⵠⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆΔᐃΔⲆⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⵠⲆⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Starver"
			}, {
				id: 3,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⵠⲆⲆⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆΔᐃⲆΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃΔⵠᐃΔᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃⵠᐃⵠⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⵠⲆⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Angry"
			}, {
				id: 2,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠⲆⲆΔᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔΔᐃⲆΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆΔᐃⲆⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⵠⲆⵠᐃΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⵠⲆⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Sad"
			}, {
				id: ᐃⲆⵠⲆΔⵠⵠ,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⵠΔⵠⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔⵠΔΔⵠⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠⲆⵠⵠⵠᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃΔᐃⲆⵠΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⵠⲆⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Happy 1"
			}, {
				id: 1,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃᐃⲆΔᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⲆΔΔⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃΔΔⵠⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃⵠⵠⲆΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "What?"
			}, {
				id: 4,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔᐃⲆⲆΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⲆΔⲆⲆᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠⲆⲆⵠᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠⲆⲆΔⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Suspicious"
			}, {
				id: ⲆⲆᐃᐃ,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⲆⵠⵠⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⲆⵠᐃⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⵠⲆΔⲆᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⲆⵠΔΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Scar"
			}, {
				id: ΔΔΔⵠΔ,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆᐃⲆᐃⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔᐃⲆᐃΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆⲆΔⲆΔΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⵠⵠᐃⵠΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "In Trouble"
			}, {
				id: 7,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠᐃΔⲆⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆΔⲆΔᐃᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆᐃⵠⲆⲆⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⲆᐃᐃΔᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Cute"
			}, {
				id: 8,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⵠᐃⵠⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔᐃΔⵠᐃΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃᐃᐃⲆΔᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⵠᐃᐃΔΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bored 1"
			}, {
				id: 10,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⵠⲆⲆΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃᐃⲆΔⲆᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆΔⵠᐃⵠΔᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⵠⵠⲆⵠⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Happy 2"
			}, {
				id: 11,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆⲆⲆΔⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔΔⲆⲆΔⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆΔⵠⲆⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔⵠⲆᐃⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Crazy"
			}, {
				id: 12,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⵠᐃⵠΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃᐃⲆᐃⲆᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆΔΔᐃⵠᐃΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⵠᐃΔⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Happy 3"
			}, {
				id: ᐃⲆΔᐃⵠᐃΔ,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃΔΔⵠⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠᐃⲆᐃⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃΔᐃΔᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃΔⵠⵠᐃⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Very Cute"
			}, {
				id: 14,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠⵠⵠᐃᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆΔΔᐃΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆⵠΔΔⲆⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⲆⲆΔⲆᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Curious"
			}, {
				id: ᐃⵠᐃⵠᐃ,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃᐃΔΔᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃᐃᐃⲆᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠⵠᐃⵠⲆⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆΔⲆⵠᐃᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bored 2"
			}, {
				id: 16,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆᐃⵠΔΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⲆᐃⲆᐃΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆΔΔⵠᐃΔᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⲆᐃΔᐃΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Happy 4"
			}, {
				id: ᐃⲆΔⵠⵠᐃᐃ,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⵠⲆⲆᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⵠⵠΔᐃΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆᐃΔΔⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⵠᐃΔⲆΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Scar 2"
			}, {
				id: 18,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔᐃᐃᐃΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⲆΔⲆⵠⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆⲆⵠᐃⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆΔᐃᐃⲆⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Sick"
			}, {
				id: 19,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⵠⵠᐃᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⵠΔⲆᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃΔⲆⵠΔⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⲆᐃᐃⲆⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Somnambule"
			}, {
				id: 24,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⲆΔⵠᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⵠⲆΔᐃΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔⵠΔΔⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃⵠⵠⲆⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[304],
				name: "Feel Bad"
			}, {
				id: 23,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⵠⵠᐃΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔΔⲆΔⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃⵠⲆⲆᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔΔⵠΔΔᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[304],
				name: "Mmmh."
			}, {
				id: 103,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠΔΔⲆᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆᐃⲆⲆⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔⲆⲆⲆᐃΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃⵠⵠⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Panic"
			}, {
				id: 105,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆⲆᐃⵠᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⵠΔΔΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⲆⵠᐃᐃⲆⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃΔⵠᐃᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Hypnotic"
			}, {
				id: 106,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆΔᐃⲆⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⲆΔᐃⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃⵠΔⲆⲆⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⲆⲆⲆⲆΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Stars in the eyes"
			}, {
				id: 220,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⵠⲆΔⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔΔⲆⲆᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠΔⵠⲆⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⵠⵠᐃᐃᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Seams"
			}, {
				id: 104,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔΔᐃᐃⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆΔΔⲆΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃΔΔⵠΔᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃⲆⲆⲆⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Scared at night"
			}, {
				id: 20,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃΔⲆⵠⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⵠᐃⵠⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠⵠΔΔⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆᐃⵠⵠΔᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Vampire"
			}, {
				id: 21,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⲆΔⵠᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⲆⲆΔⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆΔⵠⵠΔΔⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃᐃⵠᐃΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Zombie"
			}, {
				id: 22,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠᐃᐃⲆΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠΔΔᐃΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃᐃⵠⵠⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃΔⲆⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[304],
				name: "Devaster"
			}, {
				id: 116,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆⲆⵠⵠᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆᐃΔⲆⵠᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔΔⵠⲆⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆᐃⲆⵠᐃᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": "Fukss",
				name: "Dead Devaster"
			}, {
				id: 27,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⵠⵠᐃⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔⲆΔΔⵠⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃΔᐃⲆⵠⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃΔΔⲆⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[423],
				name: ⵠ[157]
			}, {
				id: 28,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⵠΔⵠⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⲆΔΔⲆⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃⵠⲆΔⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠᐃΔⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Bee"
			}, {
				id: 49,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⵠᐃᐃΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⵠΔᐃⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆⵠⵠⲆᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠⵠⲆᐃⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Camo Skin"
			}, {
				id: 58,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆⲆᐃⲆⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⵠⵠⲆⵠⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆⲆⲆⲆⲆⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃⵠᐃᐃΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Blue Limax Skin"
			}, {
				id: 59,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⲆⵠΔⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔⲆᐃⲆᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆΔᐃᐃᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃᐃⵠⵠⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Red Limax Skin"
			}, {
				id: 94,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔᐃᐃⵠΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃΔΔᐃΔⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔΔᐃⲆⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔᐃⲆᐃΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Mr. Pumpkin"
			}, {
				id: 109,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⵠΔΔΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠΔⵠΔᐃᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆⲆᐃΔᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃΔⵠΔⵠⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Wood"
			}, {
				id: 114,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔΔΔⲆΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃᐃᐃᐃΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃΔᐃⲆΔⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔΔᐃΔᐃⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Zebra"
			}, {
				id: 120,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⵠᐃΔⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⵠΔⵠΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⵠΔⲆⲆᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⵠⵠⲆⵠⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[17],
				name: "Tiger"
			}, {
				id: 134,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃΔⵠⵠᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⵠΔⵠⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔⲆᐃᐃᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⲆⵠⵠΔΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": "Franchestcreator",
				name: "Day or Night"
			}, {
				id: 135,
				"ⲆΔᐃ": ⵠᐃ.ΔΔΔⲆⲆᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔᐃⲆⵠΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆⲆⲆⲆᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃⲆΔΔⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": "Poinet",
				name: "Square Starver"
			}, {
				id: 136,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⵠⵠⵠΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃⵠᐃⲆΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃᐃⲆΔⵠΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⲆⲆΔⲆᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Voodoo Doll"
			}, {
				id: 137,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃᐃΔⲆᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⵠΔⵠⲆᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⲆⵠⲆⵠⵠΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆᐃⵠΔᐃⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Frankenstein"
			}, {
				id: 138,
				"ⲆΔᐃ": ⵠᐃ.ΔΔᐃᐃΔᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃⵠⲆⵠⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃⵠⲆⵠᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⲆⵠΔⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Old Mummy"
			}, {
				id: 139,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⲆΔⲆΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⲆⵠΔΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔⵠⲆΔΔΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⵠΔᐃⲆⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Werewolf"
			}, {
				id: 140,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆΔⲆᐃⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔᐃⲆⵠᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆⲆⵠᐃⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃΔᐃⵠⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Old Cthulhu"
			}, {
				id: 141,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⵠⵠⲆᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⵠⵠΔΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃΔⲆⲆᐃⵠΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⲆᐃⲆⲆᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Sea Man"
			}, {
				id: 142,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆⲆΔⲆΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⲆΔⵠⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃΔⵠᐃΔΔᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⵠΔⲆΔΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Old Pumpkin"
			}, {
				id: 148,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆⵠΔⵠⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆΔΔⵠᐃᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⲆⲆⵠⲆⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃΔⵠΔⵠᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Old Snowman"
			}, {
				id: 149,
				"ⲆΔᐃ": ⵠᐃ.ΔΔΔⵠᐃⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⵠΔΔᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠⵠᐃᐃⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⵠᐃΔᐃⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Old Christmas Tree Man"
			}, {
				id: 150,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆΔⲆⵠⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆᐃⵠⵠᐃᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆΔΔᐃΔΔⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⵠⲆᐃⵠΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Old Mrs Bell"
			}, {
				id: 151,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃΔⲆⲆΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆΔᐃᐃⵠᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆⵠⵠΔⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃΔⵠᐃⲆᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Old Elfy"
			}, {
				id: 152,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⵠΔⲆⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⲆᐃᐃΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠⵠⵠⵠΔᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃΔΔⲆΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Old Mr Present"
			}, {
				id: 153,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⵠⵠⲆΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆᐃⵠᐃⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆΔΔⲆᐃΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⲆⵠᐃΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "My Dear Old Deer"
			}, {
				id: 154,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃᐃᐃΔⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⲆⲆᐃΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆΔⵠⲆᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠΔⲆΔᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr Angel"
			}, {
				id: 155,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔΔΔⲆᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⵠⲆᐃΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃᐃᐃᐃΔⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔΔΔⵠᐃᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr Ice Cube"
			}, {
				id: 156,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠⲆΔⲆᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃⲆΔⵠΔⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃⵠΔⲆΔⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔⲆⵠⵠⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr Snowman"
			}, {
				id: 159,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⲆⵠⲆⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⲆⲆᐃΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆᐃⲆᐃⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⲆᐃⵠΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[ⲆⵠⵠⲆΔ],
				name: "Crystal Sky Skin"
			}, {
				id: 167,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⲆⵠⵠⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃΔᐃⵠⵠⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠⲆⲆⵠⵠΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃᐃⲆⲆⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": "Franchestcreator",
				name: "Radioactive Starver"
			}, {
				id: 169,
				"ⲆΔᐃ": ⵠᐃ.Δᐃⵠᐃᐃⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃᐃⲆᐃΔⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠΔᐃΔⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃΔⲆⵠᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": "TheScaryBlaze",
				name: "Eaten Cookie"
			}, {
				id: 170,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔⵠΔΔΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⲆΔⵠⵠⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆᐃᐃΔᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃΔΔⵠᐃᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[343],
				name: "Blob Thing"
			}, {
				id: 172,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⲆⵠΔⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃⵠΔⵠⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⲆⲆⵠΔⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔⵠᐃⲆⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[343],
				name: "Machine Mask"
			}, {
				id: 184,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆΔⲆⲆΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔᐃⵠⵠᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔⵠΔΔᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃΔᐃⲆᐃᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mad"
			}, {
				id: 206,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⲆᐃⲆΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔⵠⲆᐃᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⵠΔⲆⲆΔΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⵠΔⵠⲆⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Survivor"
			}, {
				id: 209,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⲆⲆⵠⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔⵠⵠᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃΔⲆⲆⵠⲆⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔⲆΔⲆΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Starverator"
			}, {
				id: 230,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⲆⵠⲆⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⲆᐃᐃᐃΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃΔᐃⵠΔⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆΔΔᐃⵠⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: ⵠ[31]
			}, {
				id: 231,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔⲆΔᐃⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃᐃⵠΔΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔᐃⵠΔΔⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⵠⵠⵠΔΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Big Pile of Sand"
			}, {
				id: 232,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⵠⲆᐃⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⲆΔΔⲆᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆΔᐃⵠΔⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆΔΔⲆᐃⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Big Pile of Dirt"
			}, {
				id: 235,
				"ⲆΔᐃ": ⵠᐃ.ΔΔΔⲆⵠⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.Δⵠᐃⵠⵠᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔⲆⲆᐃΔⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⵠⵠᐃᐃⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Sandstone"
			}, {
				id: 29,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⵠᐃᐃΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔΔⲆⵠⵠⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃΔⲆⲆᐃⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃⲆᐃⲆΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[304],
				name: "Lollipop 1"
			}, {
				id: 30,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆᐃⲆⵠⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠᐃⵠⲆΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃΔⲆⲆⲆⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃⲆⵠΔΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Lollipop 2"
			}, {
				id: 31,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⲆΔⵠⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠΔΔΔΔⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔΔⲆᐃᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃΔᐃⲆΔΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Lollipop 3"
			}, {
				id: 32,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃΔⲆΔⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔⲆᐃⲆⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⵠⲆⲆⵠⵠᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃΔᐃᐃⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Lollipop 4"
			}, {
				id: 33,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆⲆⲆᐃᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠΔΔΔᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⵠΔᐃΔΔⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆᐃⵠⲆⲆΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[256],
				name: "Yellow Bird"
			}, {
				id: 34,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔᐃⵠⲆΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⲆᐃⵠⲆᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆⵠᐃⲆΔⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⲆⲆᐃΔⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[ΔᐃΔᐃⲆΔⲆ],
				name: "Red Bird"
			}, {
				id: 35,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆⵠⲆⲆⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠΔᐃⵠᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃᐃᐃᐃΔΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔΔⵠⲆᐃⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[ᐃⲆᐃᐃΔᐃΔ],
				name: "Blue Bird"
			}, {
				id: 37,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃᐃΔᐃⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⲆΔᐃᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃᐃᐃⵠΔΔΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃⵠⵠΔⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[423],
				name: "Owl"
			}, {
				id: 52,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔΔΔⲆⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⲆΔᐃⵠⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆᐃᐃⲆⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆΔⵠⵠⲆⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Nemo"
			}, {
				id: 53,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⲆᐃᐃⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠᐃΔΔᐃΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠⲆᐃⵠᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⲆᐃΔⲆⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr. Bread"
			}, {
				id: 74,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔΔΔΔⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃⵠΔⵠᐃᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠΔΔⵠΔΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃᐃⲆⲆΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": "Communist & Taco4Life",
				name: "Mr. Bread 2"
			}, {
				id: 75,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆᐃᐃⵠᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⵠⲆⲆⲆⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆᐃⵠΔⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⲆᐃⵠⵠᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": "Communist & Taco4Life",
				name: "Mr. Bread 3"
			}, {
				id: 60,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆΔⵠΔᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⲆⵠⲆΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔᐃᐃⲆΔⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⲆᐃⲆⵠΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Red Berry"
			}, {
				id: 61,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⵠᐃⲆᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.Δⵠⵠᐃᐃⵠᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔΔΔⲆⲆⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⵠᐃΔⵠⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Old Berry"
			}, {
				id: 70,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⲆΔᐃⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⵠⵠⵠⵠᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠᐃᐃᐃⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆᐃⵠᐃᐃΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Cake"
			}, {
				id: 71,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔⵠⵠⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⲆᐃΔΔⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃⲆⵠⵠⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆΔΔⵠⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Christmas Cake"
			}, {
				id: 77,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆΔⵠΔⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆΔΔᐃⵠⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆΔᐃᐃΔᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⲆᐃᐃΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": "Pancakez",
				name: "Mr. Pancake"
			}, {
				id: 87,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔⲆⲆⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠᐃⲆΔΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠᐃⵠⲆᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃⵠΔΔⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Mr. Taco"
			}, {
				id: 78,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃᐃⲆᐃᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⲆΔⵠⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠⵠⵠΔᐃΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⲆⲆᐃΔΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Mr. Bottle"
			}, {
				id: 79,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⵠⲆᐃΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃᐃΔᐃΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆⵠⲆΔΔΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⲆⲆΔᐃᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Mr. Bottle 2"
			}, {
				id: 97,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃᐃⲆⵠⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃⵠΔⵠⲆⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔⲆⲆΔᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃΔⵠⲆᐃⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Pink Rabbit"
			}, {
				id: 102,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔⲆⲆⵠΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⵠΔᐃⵠᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃⲆⵠΔⵠᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⲆⵠᐃᐃᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Marshmallow"
			}, {
				id: 107,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔⵠⲆΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠΔⵠᐃᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃΔⲆΔᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⲆⲆᐃᐃⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Fox"
			}, {
				id: 132,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃΔᐃⵠⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔⵠΔⲆΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⵠⵠΔⵠᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃⲆΔⵠᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Raccoon"
			}, {
				id: 111,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔⲆᐃᐃΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠᐃᐃΔⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⵠᐃⵠᐃΔΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆᐃΔᐃⵠᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Cloud"
			}, {
				id: 113,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⲆᐃⵠᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⵠΔⵠᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆΔᐃⵠᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠΔⵠᐃⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Moon"
			}, {
				id: 117,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔᐃⲆⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔⲆⵠᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔᐃΔΔⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆΔᐃⲆⲆᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Mr. Panda"
			}, {
				id: 118,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆΔᐃᐃᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃΔΔΔⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆⲆⲆᐃⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⵠⲆΔΔᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Mr. Strawberry"
			}, {
				id: 119,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆΔᐃΔⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⲆΔΔⵠᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃⵠⲆᐃⲆⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔΔⵠᐃΔⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": "eogito & Sushuui",
				name: "Mummy"
			}, {
				id: 122,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆᐃⲆΔᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔΔΔᐃⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆⵠΔⵠᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃΔⲆΔᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Dino"
			}, {
				id: 127,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⲆΔΔⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔᐃΔⵠᐃᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠᐃΔⲆΔⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃⲆⲆᐃⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[511],
				name: "Mr. Koala"
			}, {
				id: 160,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆⵠⵠᐃⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⵠᐃⲆᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃᐃᐃⲆⲆᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⲆⲆⵠΔᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bottle Protection"
			}, {
				id: 162,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⵠⲆΔⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔᐃⲆΔⲆᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃⲆⵠⵠᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔΔⲆⵠⲆⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[17],
				name: "Leaf Man"
			}, {
				id: 166,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⵠⲆⵠΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔⵠΔΔΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆΔⵠΔⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃΔⲆⵠᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Bubble"
			}, {
				id: 174,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔⵠᐃⵠᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆᐃΔᐃⵠᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⵠⵠΔⲆⵠᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃᐃᐃΔⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[340],
				name: "Potato"
			}, {
				id: 171,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⲆΔⵠⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⲆᐃᐃⵠⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠᐃⵠΔⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃᐃⵠΔⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[343],
				name: "Axolotl"
			}, {
				id: 178,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠⲆⵠᐃᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⵠᐃΔⲆⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔⵠⲆΔᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⵠⲆΔᐃⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Rusted Machine"
			}, {
				id: 179,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆΔᐃⲆᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔᐃΔΔⲆⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆⵠᐃⲆᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠⵠᐃΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Starving Machine"
			}, {
				id: 181,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⲆⵠΔⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⲆᐃΔᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃΔΔⲆΔⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃⲆᐃᐃⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Night Stars"
			}, {
				id: 191,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⵠⵠᐃⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔᐃⲆᐃⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠⲆⵠᐃⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⵠΔᐃᐃⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Blue Jay"
			}, {
				id: 198,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆΔⲆⵠΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃⲆⵠⵠΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠΔⵠᐃⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃᐃⵠΔΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": "AWTP",
				name: "Dave"
			}, {
				id: 200,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⵠᐃΔⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔᐃⲆᐃⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠⲆᐃⲆᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠᐃⲆⵠᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": "Jinty",
				name: "Smug"
			}, {
				id: 203,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆΔⵠⲆΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⵠⲆΔΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆᐃⵠⵠᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⲆᐃΔⲆΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Reclaimed"
			}, {
				id: 204,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔΔⲆⲆⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⵠⲆΔⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⲆᐃⵠⵠⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⵠᐃᐃΔⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Legacy Wolf"
			}, {
				id: 211,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⵠΔΔΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃⲆⲆᐃΔⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔⲆΔⲆⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆᐃᐃᐃΔᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Starver of the Seas"
			}, {
				id: 213,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔᐃⵠⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⵠⲆΔᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔΔᐃΔᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔΔⵠᐃⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Ice"
			}, {
				id: 219,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃᐃΔⵠΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃᐃⲆⵠⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⲆΔΔΔⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔΔᐃⲆⵠⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": "Ramil",
				name: "Sandwich Cookie"
			}, {
				id: 221,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃΔⲆᐃΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃⵠᐃⲆΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆⵠⲆᐃⵠᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆᐃⲆⵠⲆΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Purple Geode"
			}, {
				id: 222,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔⲆⲆᐃⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⵠᐃⲆΔⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠΔⵠᐃⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃⵠΔⵠⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Cyan Geode"
			}, {
				id: 223,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔᐃΔᐃᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⲆΔⵠΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠⲆⵠⵠⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⲆᐃᐃΔⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Yellow Geode"
			}, {
				id: 228,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⲆⵠᐃⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⵠⲆⲆⵠⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃⵠⲆΔⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠⲆᐃⲆⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Furnace Head"
			}, {
				id: 229,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔᐃⵠᐃⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⲆᐃᐃⲆⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⲆⲆⵠᐃᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⲆⲆⲆⲆᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bag"
			}, {
				id: 227,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃᐃΔᐃᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⲆΔᐃᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆΔⵠΔΔΔΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃΔⵠᐃΔᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Lit Furnace Head"
			}, {
				id: 25,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⲆⵠᐃⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⵠᐃΔⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃⵠΔⵠⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔΔⵠΔΔᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[304],
				name: "Test Dummy"
			}, {
				id: 41,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃᐃⲆᐃΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⵠⲆⵠⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃⵠⲆⲆⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⵠΔⲆΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Star-ver"
			}, {
				id: 43,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⲆⲆᐃⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔΔΔⵠᐃΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆⲆⲆΔⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⲆⲆΔⵠⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[ⲆⵠⲆⵠⵠ],
				name: "Starver Chest"
			}, {
				id: 88,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⵠΔⵠⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆᐃⲆⲆᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔᐃᐃⵠᐃΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠΔⲆᐃΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[8],
				name: "Starver Workbench"
			}, {
				id: 121,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠᐃⲆΔΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃⲆΔⲆᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃΔⵠⵠⲆⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃⲆⲆΔΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[511],
				name: "Fish"
			}, {
				id: 39,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠⲆᐃᐃᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆᐃⲆⲆΔⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.Δⵠⵠᐃⵠᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆᐃΔΔᐃⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": "Negligent4Dia",
				name: "Crab"
			}, {
				id: 40,
				"ⲆΔᐃ": ⵠᐃ.ΔΔᐃΔΔⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆᐃΔᐃⲆⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆΔΔᐃⲆⲆⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆΔᐃᐃⵠⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": "Negligent4Dia",
				name: "Piranha"
			}, {
				id: 36,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠᐃⵠⵠⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠᐃΔⲆⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆΔⲆᐃᐃΔΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⲆᐃᐃⵠⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Winter Fox"
			}, {
				id: 69,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔΔⲆⵠⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃᐃΔᐃᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆᐃΔΔᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⲆᐃⲆⲆΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": "Zed",
				name: "Baby Foxy"
			}, {
				id: 51,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃᐃᐃⵠⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⲆⵠⵠΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔⲆᐃᐃᐃΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔΔΔⲆΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": "HOWI",
				name: "Winter Bear"
			}, {
				id: 133,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⲆⵠⲆⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆΔⲆⲆⵠᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔⵠⲆⲆⲆⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⵠᐃⵠⵠᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Hawk"
			}, {
				id: 55,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⵠᐃᐃⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⲆᐃⲆⲆᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⵠᐃⲆΔΔⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠΔⵠΔᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Nice Little Yuki"
			}, {
				id: 68,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃᐃⵠⲆᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠΔⲆᐃᐃΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆⲆⵠᐃⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃⵠΔΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Baby Yuki"
			}, {
				id: 62,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⲆⵠⲆᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠᐃⵠⲆⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃΔΔᐃⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔⲆᐃⵠᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr. Carrot"
			}, {
				id: 56,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆΔΔⵠᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃΔⵠᐃᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃⲆⲆᐃⵠΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⵠⵠⲆⲆⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bat Limax"
			}, {
				id: 72,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠΔⵠᐃΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠΔⲆΔⵠⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⵠᐃᐃⲆᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆΔⵠΔⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Mr. Crate"
			}, {
				id: 73,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃᐃⲆⲆⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔΔΔⲆⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔⵠᐃΔΔᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⲆᐃⲆⵠⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": "Taco4Life & eogito",
				name: "Mr. Spider"
			}, {
				id: 93,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⵠΔΔᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔᐃⲆⵠΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠΔΔᐃᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃⲆⵠᐃⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[529],
				name: "Mr. Spider 2"
			}, {
				id: 82,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔⲆⲆⵠⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆΔⵠⲆⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆᐃⲆⵠⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃΔᐃΔΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr. Blue Starfish"
			}, {
				id: 83,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃᐃΔᐃⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔⲆⵠᐃᐃΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠⵠⵠᐃᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⵠⲆⲆᐃⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr. Orange Starfish"
			}, {
				id: 84,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆⲆⲆᐃᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠᐃᐃΔⵠⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃⲆⲆⵠᐃΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆΔⵠⲆΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr. Pink Starfish"
			}, {
				id: 85,
				"ⲆΔᐃ": ⵠᐃ.ΔΔᐃΔΔⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔⵠᐃⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃᐃⵠΔⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠⲆⲆᐃⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr. ShellMauve"
			}, {
				id: 86,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔⵠⲆⲆΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃΔⵠΔⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔⲆⲆΔΔⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⲆⵠᐃⲆⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr. Shell Bead"
			}, {
				id: 96,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠΔⲆⲆΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⲆⲆⵠⲆᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔᐃⵠⵠⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃΔⵠΔⵠΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": "Fukss",
				name: "Angry Crab"
			}, {
				id: 98,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⲆⵠᐃⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆᐃⲆⵠΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃⵠᐃⲆⵠᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠᐃⲆⲆᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Penguin"
			}, {
				id: 126,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⵠⵠⲆΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠΔᐃⵠᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆᐃⲆΔⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆΔⵠⵠⵠΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[529],
				name: "Mr. Boar"
			}, {
				id: 145,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⲆΔΔⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⲆᐃⲆⵠⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆⲆⲆᐃΔΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆᐃΔⵠΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "I saw you"
			}, {
				id: 146,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔΔΔΔⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃᐃⲆⲆⵠⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃᐃᐃⲆⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃⵠᐃⵠᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "It was funny"
			}, {
				id: 147,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⵠⵠΔⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆᐃⵠⵠᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔᐃⲆᐃⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⵠⲆⲆⲆⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "You can scream"
			}, {
				id: 158,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⲆᐃΔΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔᐃⲆⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆΔΔΔⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔΔΔᐃⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Mr. Book"
			}, {
				id: 163,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃΔⵠΔᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⲆⵠⲆⵠᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⲆΔⲆᐃⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃΔⲆⲆΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[529],
				name: "Mr. Mammoth"
			}, {
				id: 164,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⵠⵠⲆᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔⲆΔᐃΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠⲆΔΔⵠΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃⵠⵠⲆΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": "SoOw",
				name: "Mr. Mammoth 2"
			}, {
				id: 161,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠΔⵠΔⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔΔᐃᐃⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠⲆΔᐃᐃΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.Δᐃᐃⵠⵠᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Nightmare"
			}, {
				id: 168,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠᐃⵠⵠⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆΔⵠᐃⲆᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆⲆⵠᐃΔⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃᐃᐃᐃᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Shiny Crystal"
			}, {
				id: 173,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠᐃᐃᐃⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⲆⲆΔⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃⵠᐃⲆᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⲆⵠᐃΔⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Water skin"
			}, {
				id: 175,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆΔⵠΔΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃⵠⵠΔⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆᐃΔⲆΔᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆΔⲆᐃⵠΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Fall Berry Bush Starver"
			}, {
				id: 176,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆⵠⵠΔⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠΔᐃⲆⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆⲆΔⵠⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⲆΔⵠᐃΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Christmas Berry Bush Starver"
			}, {
				id: 177,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆΔⵠⵠΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔⲆⲆᐃΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⵠⲆᐃⵠΔⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔΔΔⵠⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Berry Bush Starver"
			}, {
				id: 182,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆΔⲆᐃΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⵠΔᐃᐃᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔⵠΔΔⲆⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⲆⲆᐃⵠⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamer"
			}, {
				id: 185,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⲆᐃⲆᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠΔᐃⵠⵠⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃΔⵠΔΔᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⲆᐃΔΔΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Wolf"
			}, {
				id: 186,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆⲆⲆᐃᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔΔⲆᐃⵠⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔⵠⲆⵠᐃΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃⲆᐃΔⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Snow Wolf"
			}, {
				id: 187,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃΔΔⲆΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃⵠᐃΔᐃᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃᐃⲆⲆΔⲆⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃΔⲆᐃⲆᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Rabbit"
			}, {
				id: 188,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⵠΔΔᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃᐃⵠⵠΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠⲆΔᐃⵠΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃΔΔⲆⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Snow Rabbit"
			}, {
				id: 189,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠᐃⵠᐃⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠΔᐃⵠⵠᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⵠⵠⵠᐃΔⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.Ⲇⵠⵠⵠᐃⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Bear"
			}, {
				id: 190,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⲆⵠΔᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⵠᐃᐃᐃᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆΔⲆⵠⲆⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⵠΔΔΔⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Polar Bear"
			}, {
				id: 196,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⲆⵠⵠΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃΔⲆⲆⲆⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⵠΔᐃΔᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆᐃᐃⲆΔⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Crying Angel"
			}, {
				id: 202,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆⵠⲆᐃΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⲆΔᐃΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆᐃⲆⵠⲆⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔᐃⲆᐃⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Fennec"
			}, {
				id: 207,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆᐃΔⵠᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆΔΔΔᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠⵠΔᐃΔᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⲆΔΔⲆᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Decay"
			}, {
				id: 212,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⲆⲆⲆⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⲆⵠᐃⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠⵠⲆⲆᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⲆᐃⵠⲆᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Pillow"
			}, {
				id: 218,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⲆⵠⲆⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⲆⲆⲆⵠⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆⵠᐃᐃᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔΔΔᐃΔⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Exotic"
			}, {
				id: 224,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⲆᐃⵠᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆᐃᐃΔΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔΔᐃⲆⲆⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠΔⵠΔᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Apple"
			}, {
				id: 225,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆᐃᐃⲆΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠᐃᐃⲆΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔⲆⵠᐃⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃΔᐃⲆΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Golden Apple"
			}, {
				id: 233,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔΔⲆⵠΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⲆⲆⵠⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃⵠⲆⲆⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⵠⵠⵠⲆⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Lava Cube"
			}, {
				id: 234,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆⲆᐃᐃΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⲆⲆᐃⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃⵠᐃⵠⲆⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆᐃΔΔⵠΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Dragon Cube"
			}, {
				id: 42,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⵠΔⲆⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃⲆᐃᐃⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠⵠᐃⲆᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃΔⲆΔⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[423],
				name: "Will-O'-The-Wisp"
			}, {
				id: 91,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⲆⵠΔⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠΔΔⵠΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆᐃⲆᐃⵠΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃⵠⲆⲆⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": "ExpertyAnimations",
				name: "Flame"
			}, {
				id: 26,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⵠΔΔⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆᐃⲆⲆⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠΔΔᐃⲆⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔⲆⲆᐃⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Be a Tree"
			}, {
				id: 38,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠΔΔⲆⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠΔⲆᐃⲆⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⲆⲆⲆⲆᐃΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⵠΔⲆⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[423],
				name: "Toxic Mutant"
			}, {
				id: 50,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔΔⲆⵠΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⵠᐃΔᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆΔᐃᐃⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⲆⲆⵠΔᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[8],
				name: "Mr. Tomato"
			}, {
				id: 54,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆᐃᐃᐃⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⲆᐃᐃⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃⵠⲆΔᐃΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⲆᐃⵠⵠᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr. Mauve, the Lapa"
			}, {
				id: 57,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠᐃΔΔᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆᐃΔᐃΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃᐃⲆⵠⵠᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⵠΔⵠᐃΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Golden Fish"
			}, {
				id: 64,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆᐃⵠΔⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔᐃⵠᐃᐃΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃᐃⲆⲆⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⵠᐃⵠᐃᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "LapaMauve"
			}, {
				id: 65,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⵠᐃⲆΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔᐃⵠᐃⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃᐃᐃΔΔⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⵠᐃΔⲆⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "LapaMauve "
			}, {
				id: 92,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠΔΔΔⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃΔⵠᐃⲆᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃⲆᐃΔⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆΔΔⲆΔⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr. Burger"
			}, {
				id: 66,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔᐃⲆΔⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃᐃᐃᐃΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃᐃΔⲆΔⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃᐃⵠⲆᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Tropical Starver"
			}, {
				id: 80,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⵠⲆΔⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠΔⲆⵠΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆⲆᐃᐃⲆⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃⲆⲆΔᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr. ShellPink"
			}, {
				id: 81,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆⵠⵠⲆⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆΔᐃᐃΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆΔⲆᐃΔⵠΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔᐃⵠⵠⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr. OranShell"
			}, {
				id: 99,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠᐃⲆᐃΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆΔⲆⲆⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆⲆⲆᐃⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃⵠᐃⲆⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Pepe"
			}, {
				id: 100,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⲆᐃΔΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⲆΔⲆⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆⵠᐃⲆⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⵠΔⲆⵠᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": "fatant",
				name: "Mr. Ant"
			}, {
				id: 115,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠⵠⲆⲆⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⵠᐃⵠⵠⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔⵠᐃⵠᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔΔΔⵠⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[511],
				name: "Mr. Watermelon"
			}, {
				id: 101,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⲆⲆⲆⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆᐃΔΔⵠᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃΔⲆⵠⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔΔΔΔⲆⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Mr. Thornbush"
			}, {
				id: 131,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆΔⵠᐃΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔΔⵠΔⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃᐃⵠⵠᐃΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠⲆΔⲆⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Cthulhu"
			}, {
				id: 143,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔᐃᐃⲆⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⲆᐃⵠᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃⲆΔⲆⵠᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⲆᐃⲆⲆⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Mr. Cactus"
			}, {
				id: 144,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆᐃΔⵠᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃⲆΔΔᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃᐃⲆⵠᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃΔΔΔΔⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Momo"
			}, {
				id: 180,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔΔΔΔᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⲆⵠᐃᐃΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠᐃⲆⲆΔᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃΔⲆᐃΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Scream"
			}, {
				id: 193,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠᐃᐃᐃⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠᐃⵠⲆᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃᐃⲆⵠⵠᐃΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⵠΔᐃᐃⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Dragon"
			}, {
				id: 195,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⵠΔᐃᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃᐃᐃᐃⲆᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆΔⵠᐃΔΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⲆⵠΔⲆΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Forest Spirit"
			}, {
				id: 197,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠⵠΔᐃⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠΔⵠⵠⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.Δᐃᐃᐃᐃᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⲆᐃⵠⵠⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Evil Goat"
			}, {
				id: 199,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⵠⵠⵠⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⲆᐃⲆΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃΔΔⵠⲆᐃΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃΔᐃⵠⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Rotten"
			}, {
				id: 201,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆΔⲆᐃᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⲆΔⵠⵠᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠᐃᐃΔΔⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔⲆΔᐃⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Fossil"
			}, {
				id: 205,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆΔᐃⵠΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⲆΔⲆΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⵠⲆᐃΔⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃΔΔΔΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Spectrum"
			}, {
				id: 210,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠΔᐃⲆⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃΔΔⵠⵠᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔΔⵠⵠⵠΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔᐃⵠΔᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": "Helpy",
				name: "Black Cat"
			}, {
				id: 214,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠᐃᐃⲆⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃᐃᐃⲆⲆⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆΔⵠⵠᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⵠⵠᐃΔᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Lynx"
			}, {
				id: 215,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠΔⵠⵠⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆᐃΔΔΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔᐃΔⵠⵠΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃΔⲆⵠⵠΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Warg"
			}, {
				id: 217,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔᐃΔΔᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⲆΔᐃΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆΔⵠⵠⵠⲆⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠⵠⲆᐃⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Menhir"
			}, {
				id: 95,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆⵠⵠⵠⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃᐃᐃⲆⵠⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⲆⲆⲆΔⲆⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔΔᐃᐃᐃⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Mr. Garlic"
			}, {
				id: 76,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆⵠᐃΔᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔΔΔⵠΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃⵠᐃΔᐃⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⵠⵠⲆⵠᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[423],
				name: "Robot Dragon"
			}, {
				id: 44,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆᐃⲆⲆᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃΔΔᐃᐃⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃΔⵠΔΔᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠΔⵠⲆⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[423],
				name: "Lava Dragon Version 1"
			}, {
				id: 90,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⲆΔᐃⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆᐃⵠⲆΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆⲆⵠⲆᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⵠⲆⵠᐃΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": "ExpertyAnimations",
				name: "Lava Dragon Version 2"
			}, {
				id: 124,
				"ⲆΔᐃ": ⵠᐃ.ΔΔᐃᐃⵠⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠᐃⲆᐃⵠⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⵠΔⲆΔⲆⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⲆⵠᐃΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Lava Dragon Version 3"
			}, {
				id: 45,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠᐃⲆᐃΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔⲆⵠⲆΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆᐃᐃΔⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃⵠⵠⵠΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[ΔᐃΔⲆΔⲆΔ],
				name: "Ice Dragon Version 1"
			}, {
				id: 46,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⵠΔⲆΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃⵠᐃΔⵠⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠⵠⵠΔⵠᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆᐃⵠⲆⵠᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[423],
				name: "Ice Dragon Version 2"
			}, {
				id: 108,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⵠᐃⵠΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔΔᐃⵠᐃΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃᐃⵠΔⲆΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔΔⵠⲆᐃⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Ice Dragon Version 3"
			}, {
				id: 123,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃᐃΔΔᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⵠᐃⲆΔᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃᐃᐃⵠᐃᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⲆᐃᐃΔΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Baby Dragon Version 1"
			}, {
				id: 128,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔᐃᐃᐃⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔᐃⲆⵠᐃᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃΔᐃᐃⲆⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃⵠΔⲆᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[511],
				name: "Baby Dragon Version 2"
			}, {
				id: 125,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⲆⲆΔⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃᐃⵠΔⵠΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⵠⵠᐃᐃⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⵠΔⲆᐃⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Baby Lava"
			}, {
				id: 47,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔⵠΔΔΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔΔⵠⵠᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⲆΔΔⵠⵠⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⵠⲆⲆⵠⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Kraken"
			}, {
				id: 129,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃᐃⲆᐃⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆᐃⵠᐃⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃΔᐃΔᐃⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃⵠⲆᐃᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Sandworm"
			}, {
				id: 63,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔᐃᐃΔⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠΔᐃⲆᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃⵠᐃⵠᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔΔΔΔⵠΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr. Golden Bread"
			}, {
				id: 67,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔΔᐃⲆⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃᐃⲆⲆΔⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃΔᐃᐃⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⵠᐃⵠⵠΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": "ForgottenHeroe",
				name: "Starver Ores"
			}, {
				id: 130,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠΔΔⲆΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⵠⲆᐃᐃⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠᐃΔⵠⵠⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠⵠᐃᐃⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Poo"
			}, {
				id: 89,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠⵠⲆⲆⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃᐃΔΔΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔᐃΔⲆᐃⲆⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔᐃⵠⲆⵠⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": "Poinet",
				name: "Volcano Starver"
			}, {
				id: 112,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔΔᐃⵠᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆᐃᐃⵠⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠⵠⲆⲆΔᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⲆⲆⵠⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Lava Starver"
			}, {
				id: 183,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠⵠⲆΔᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔΔᐃⵠᐃ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠⵠΔⲆΔⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠᐃⵠⵠᐃⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Revaster"
			}, {
				id: 192,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠⵠⲆΔᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔᐃᐃΔΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠΔⵠⵠⵠⲆᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆᐃᐃΔᐃⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Awakened"
			}, {
				id: 194,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⵠΔΔⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔᐃⲆΔⲆⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠᐃΔΔⲆⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃⵠΔΔᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Ice Dragon"
			}, {
				id: 236,
				"ⲆΔᐃ": ⵠᐃ.ΔΔΔⲆⲆⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆᐃΔᐃΔΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆᐃᐃⵠΔⵠᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⲆᐃⵠⵠⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Crystal Dragon"
			}, {
				id: 208,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃᐃⲆΔᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠᐃΔᐃΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ⵠⵠⵠⵠΔΔⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔΔΔⲆΔᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bone Dragon"
			}, {
				id: 216,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⵠⵠⵠⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⵠΔᐃⲆⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃᐃⲆᐃᐃⲆⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⵠΔⵠⲆⲆᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Warg Ghost"
			}, {
				id: 226,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔⲆΔΔⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔᐃΔΔΔⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.Ⲇⵠⵠⵠᐃᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠᐃΔⵠⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Cursed"
			}, {
				id: 48,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔⵠΔⲆⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃⵠᐃᐃΔⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ᐃⵠⲆⲆⲆⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⵠΔⲆΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Robot"
			}, {
				id: 110,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆΔⵠⵠⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃᐃⲆⲆᐃΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⵠΔⵠΔΔΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⵠΔΔΔⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Blue Butterfly"
			}, {
				id: 157,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆΔΔⵠᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⲆΔⵠᐃΔ,
				"ᐃⵠΔΔ": ⵠᐃ.ⲆⵠⲆⲆⲆᐃΔ,
				"ᐃⲆⵠΔ": ⵠᐃ.ⲆⲆᐃⵠⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Yrifox"
			}, {
				id: 165,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠΔΔᐃΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆᐃΔⲆⵠⵠ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆᐃⲆⲆΔⵠ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃᐃΔⲆⲆᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ,
				"ⲆⲆⲆ": "OmarJr13",
				name: "Blob Skin"
			}, {
				id: 237,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⲆᐃΔᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆΔᐃⲆΔⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔΔⲆΔΔᐃᐃ,
				"ᐃⲆⵠΔ": ⵠᐃ.ᐃⲆᐃⲆᐃⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ,
				"ⲆⲆⲆ": "NotBonnie",
				name: "NotBonnie"
			}, {
				id: 238,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆⲆⵠᐃⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⵠⵠᐃΔⲆ,
				"ᐃⵠΔΔ": ⵠᐃ.ΔⲆᐃⵠⵠⵠⲆ,
				"ᐃⲆⵠΔ": ⵠᐃ.ΔⲆⵠⲆΔⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ,
				"ⲆⲆⲆ": "NotBonnie",
				name: "Cynder"
			}],
			"ⵠᐃⵠⲆ": [{
				id: ⵠᐃⲆ,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔⲆⵠΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⵠⲆⵠΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⵠⲆⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bag 1"
			}, {
				id: 1,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃᐃᐃΔⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⵠⵠⵠᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⵠⲆⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Old Bag"
			}, {
				id: 2,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆᐃⲆᐃⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔΔᐃⲆⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bag 2"
			}, {
				id: ΔⲆΔⲆ,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔⵠⲆᐃⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔᐃⲆⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bag 3"
			}, {
				id: 4,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆⲆᐃⲆΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⵠΔᐃᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bag 4"
			}, {
				id: 5,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠⵠⲆΔⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠᐃᐃᐃΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bag 5"
			}, {
				id: ⵠᐃⲆⵠᐃ,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⲆⲆⲆⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔΔΔⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Wood Pickaxe Bag"
			}, {
				id: 19,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔᐃΔⵠⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠΔⲆⵠⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[99],
				name: "Wood Carrier"
			}, {
				id: 37,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠΔᐃΔⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⵠΔᐃⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Bag 6"
			}, {
				id: 39,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔᐃⲆᐃΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⵠⵠⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Bag with Wooden Swords"
			}, {
				id: 44,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠⵠⲆⵠⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔⲆⵠᐃⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[Δⵠᐃᐃⵠ],
				name: "Big Bag"
			}, {
				id: Δᐃⵠᐃⵠ,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆΔⲆⵠⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⵠⲆΔⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[ⲆΔⲆᐃᐃ],
				name: "Bag 6"
			}, {
				id: 8,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔⲆΔⲆⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃΔⵠᐃᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Easter Bag"
			}, {
				id: ᐃⲆᐃᐃⲆ,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆⲆᐃⵠΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⲆΔⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Star Bag"
			}, {
				id: ⵠⲆΔᐃᐃ,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔᐃⲆΔⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⲆⵠⲆΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Winter Bag"
			}, {
				id: 20,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔΔᐃⵠΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃⵠΔⲆᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[99],
				name: "Stone Carrier"
			}, {
				id: 24,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠΔΔⲆⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃΔᐃⵠⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Stone Pickaxe Bag"
			}, {
				id: 6,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆⲆⲆΔΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠΔⵠᐃᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[ᐃΔⲆᐃⵠΔⵠ],
				name: "Bag Camouflage"
			}, {
				id: 38,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠΔⵠΔⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃᐃⲆᐃΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Bag with Stone Swords"
			}, {
				id: 54,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⲆΔⵠⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⵠⵠᐃⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Cow Bag"
			}, {
				id: 59,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⵠⲆⵠΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆΔΔᐃⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[17],
				name: "Starver Bag"
			}, {
				id: 62,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⵠΔⲆⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆΔᐃⲆⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[17],
				name: "Crystal Sky Bag"
			}, {
				id: 71,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⵠⲆⵠⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆᐃⲆⲆⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Portable Furnace"
			}, {
				id: 78,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔⵠⲆⵠΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠᐃᐃⲆΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Crate Bag"
			}, {
				id: ᐃᐃⵠᐃᐃⲆⲆ,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠᐃᐃⵠΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔᐃΔⵠⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Honey Pot"
			}, {
				id: 21,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃᐃⵠΔⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⲆⵠⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[99],
				name: "Gold Carrier"
			}, {
				id: 30,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔΔⵠΔᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔᐃΔⲆⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Gold Pickaxe Bag"
			}, {
				id: 29,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆⲆⲆⵠΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃᐃΔⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": "Ariel",
				name: "Mr and Mrs Bakers"
			}, {
				id: 41,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⲆΔΔⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆΔⵠⲆΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Bag with Golden Swords"
			}, {
				id: 47,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⵠΔᐃΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃᐃⲆⵠΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Explorer Bag"
			}, {
				id: 51,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠᐃΔⲆΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔⵠⵠⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Bamboo Bag"
			}, {
				id: 53,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⲆⵠⵠⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔⵠⵠⲆΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Mummy Bag"
			}, {
				id: 58,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔᐃⵠΔᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⵠⲆΔᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[511],
				name: "Watermelon Bag"
			}, {
				id: 60,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⵠᐃΔΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃᐃⵠⵠΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Garlic Bag"
			}, {
				id: 61,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⵠΔΔΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⵠⲆΔᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Pumpkin Bag"
			}, {
				id: 64,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆΔᐃⵠᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⲆᐃⵠᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[340],
				name: "Oil Barel bag"
			}, {
				id: 67,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆⲆⲆᐃΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠᐃᐃΔⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Tree Bag"
			}, {
				id: 70,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⲆᐃⲆⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠΔⵠⵠᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Lit Portable Furnace"
			}, {
				id: 72,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔΔΔᐃⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⵠⲆⵠΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Christmas Berry Bush Bag"
			}, {
				id: 73,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆᐃⲆᐃᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⵠⵠⲆⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Berry Bush Bag"
			}, {
				id: 74,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔΔⵠΔⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃⲆᐃᐃⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Fall Berry Bush Bag"
			}, {
				id: 76,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆᐃᐃᐃⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⲆΔΔΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Reclaimed Bag"
			}, {
				id: 14,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠⲆⲆⲆΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⵠⵠΔⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "a Rabbit in my Bag"
			}, {
				id: 15,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⲆᐃⵠᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃΔⲆᐃⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bird's nest"
			}, {
				id: 16,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⲆΔⵠⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔᐃⵠᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "a Fish on your Back"
			}, {
				id: 17,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆΔᐃᐃΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⵠⲆᐃΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "a Squirrel in my Bag"
			}, {
				id: 22,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⵠΔⲆⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⵠΔⲆⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[99],
				name: "Diamond Carrier"
			}, {
				id: 12,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⵠⲆᐃΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠΔⵠᐃᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Resources Bag"
			}, {
				id: 32,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⵠⵠᐃⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔᐃⲆᐃᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Diamond Pickaxe Bag"
			}, {
				id: 40,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⵠᐃⲆⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⵠⲆⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Bag with Diamond Swords"
			}, {
				id: 45,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⲆΔⲆᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⵠᐃᐃⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "My Cake Bag"
			}, {
				id: 46,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⵠⵠⵠⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔⲆⲆᐃΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "My Christmas Cake Bag"
			}, {
				id: 52,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⵠⲆⵠⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆᐃⲆᐃΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[511],
				name: "Fish Bag"
			}, {
				id: 65,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆΔⲆⲆᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠΔΔΔᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Cloud Bag"
			}, {
				id: 68,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⵠⵠΔⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆᐃᐃᐃⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Bee Bag"
			}, {
				id: 77,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃΔⵠⵠΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠᐃⲆΔᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bag and Bedroll"
			}, {
				id: 80,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆⵠⲆΔⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆΔⵠΔᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Peasant's Bag"
			}, {
				id: 81,
				"ⲆΔᐃ": ⵠᐃ.ΔΔᐃΔⲆⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔᐃⵠΔΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Probably Stolen Bag"
			}, {
				id: 48,
				"ⲆΔᐃ": ⵠᐃ.ΔΔΔᐃΔᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⵠⲆΔⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": "fatant",
				name: "Natural Bag"
			}, {
				id: 23,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⵠᐃΔⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⵠΔᐃΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[99],
				name: "Amethyst Carrier"
			}, {
				id: 25,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔΔᐃΔΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃⵠⵠΔΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Amethyst Pickaxe Bag"
			}, {
				id: 28,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠΔⲆᐃⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⵠⵠⵠⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Your Baby"
			}, {
				id: 33,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃᐃⲆᐃⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔⵠⵠΔⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Tropical Bag"
			}, {
				id: 43,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔᐃⵠⵠᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔᐃⵠⵠᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Bag with Amethyst Swords"
			}, {
				id: 35,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔᐃⲆᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆᐃᐃᐃⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Ice Bag"
			}, {
				id: 50,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠᐃΔⵠᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⵠΔⲆⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Thornbush Bag"
			}, {
				id: 56,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃᐃⲆᐃᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⲆⲆᐃᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Autumn Bag"
			}, {
				id: 57,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃᐃᐃⲆΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⲆⲆᐃⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Dino Egg Bag"
			}, {
				id: 66,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⲆⲆΔⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆᐃᐃⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Magic Cloud Bag"
			}, {
				id: 69,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠᐃᐃΔᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⲆᐃΔⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Chest Bag"
			}, {
				id: 75,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⲆΔᐃΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⵠⲆⲆⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Spectum Bag"
			}, {
				id: 79,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔⲆΔᐃΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆΔⵠΔⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Winter Peasant's Bag"
			}, {
				id: 31,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔᐃⵠⲆⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⵠⵠᐃⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[99],
				name: "Reidite Carrier"
			}, {
				id: ⲆⲆⲆⲆⲆ,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃᐃⵠΔᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃΔᐃⲆᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[423],
				name: "Lava Bag"
			}, {
				id: 49,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃΔΔⲆΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆΔΔⲆⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Lava Bag 2"
			}, {
				id: 36,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆΔᐃⵠΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃᐃⲆⵠᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Dragon Bag"
			}, {
				id: 55,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔⲆΔⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃᐃΔΔⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Winter Ice Bag"
			}, {
				id: 26,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠΔⲆⲆᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠΔⲆⲆᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Reidite Pickaxe Bag"
			}, {
				id: 27,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆΔᐃᐃΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⲆᐃΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Octopus Bowl"
			}, {
				id: 34,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔᐃΔⵠΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⲆΔⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Cave Bag"
			}, {
				id: 42,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃᐃΔⵠᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃⲆᐃⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Bag with Reidite Swords"
			}, {
				id: 63,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠΔⵠⵠⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠᐃᐃⲆⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Engineer Bag"
			}],
			"ᐃᐃⵠⵠΔ": [{
				id: 0,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆΔⵠΔΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔᐃⲆⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⵠⲆⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Wooden Dead Box"
			}, {
				id: ᐃⲆΔ,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⵠⲆⵠⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔΔⲆⲆᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⵠⲆⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Hidden item"
			}, {
				id: ΔᐃΔᐃ,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⵠΔⲆⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠΔⵠⲆΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Wooden Box 1"
			}, {
				id: ⵠⵠΔⵠ,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⵠⲆⲆⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⲆⵠΔΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Wooden Box 2"
			}, {
				id: 4,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⲆᐃΔⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⲆⲆⲆⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Wooden Box 3"
			}, {
				id: ᐃᐃⵠᐃΔ,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠᐃⵠᐃⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⵠᐃᐃⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Broken Wooden Box"
			}, {
				id: 6,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔΔⲆΔᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⵠᐃΔΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Wooden Box"
			}, {
				id: 7,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆᐃᐃⲆⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔⲆᐃⵠⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Wooden Battle Box"
			}, {
				id: Ⲇᐃⵠⵠᐃ,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃΔΔⲆⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆᐃΔᐃΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Wooden Box with a Cross"
			}, {
				id: 9,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⵠᐃⵠⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⲆⵠⵠⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Wooden Box with Bubbles"
			}, {
				id: 10,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⵠΔⲆΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⲆⲆᐃⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Wooden Box with Eyes"
			}, {
				id: 11,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⵠᐃⵠᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⵠΔⵠᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Dark Wooden Box"
			}, {
				id: 38,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠᐃⵠΔΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃⲆᐃⲆΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": "Weddlz",
				name: "Noob Box"
			}, {
				id: 12,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠⲆΔΔⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆΔⵠⵠᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Wooden and Stone Box"
			}, {
				id: 14,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃᐃⵠⲆⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⵠⵠᐃⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Star Box 1"
			}, {
				id: 15,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔΔⲆΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃΔⵠᐃⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Star Box 2"
			}, {
				id: 27,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⵠⵠⲆⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⵠΔΔΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Flower Box"
			}, {
				id: 46,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⵠⲆᐃᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⵠᐃⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[511],
				name: "Blue Box"
			}, {
				id: 75,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⲆⵠⵠⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃᐃᐃⲆᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Night Stars Crate"
			}, {
				id: ΔΔⵠⲆⲆ,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⲆⲆⵠᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⲆᐃⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Beehive"
			}, {
				id: ΔᐃᐃⵠⲆᐃᐃ,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⵠΔᐃΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠᐃⵠΔⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Wooden and Golden Box"
			}, {
				id: 21,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆΔᐃᐃᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⲆⵠᐃⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Gravestone"
			}, {
				id: 25,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⲆⲆΔΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃⵠⲆΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[Δᐃᐃⵠⵠ],
				name: "Sky Box"
			}, {
				id: 29,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠᐃⵠᐃⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⵠᐃᐃΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[423],
				name: "Golden Box"
			}, {
				id: 34,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠΔⵠⵠⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃᐃΔⵠⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[ⲆΔΔⲆⵠ],
				name: "Water Crate"
			}, {
				id: 35,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠⵠⲆΔⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃᐃⲆΔᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[ΔΔⲆᐃᐃ],
				name: "Glass Crate"
			}, {
				id: 70,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔᐃⲆᐃⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆᐃᐃⲆⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[ⲆᐃⲆⲆⵠ],
				name: "Crystal Sky Box"
			}, {
				id: 74,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆⵠⵠᐃᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃᐃⵠⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Reclaimed Crate"
			}, {
				id: 77,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠⵠᐃⲆΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⲆΔΔⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Workplace Accident"
			}, {
				id: ⲆⵠᐃⵠΔᐃΔ,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⲆⲆΔΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⵠᐃⵠⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Wooden and Diamond Box"
			}, {
				id: 18,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃΔⲆⲆᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠᐃⲆΔⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Don't Hit Me"
			}, {
				id: 26,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠΔΔΔᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃᐃΔᐃⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Underwater Box"
			}, {
				id: 31,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⲆΔⲆΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠΔΔΔΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[8],
				name: "Items Pile"
			}, {
				id: 32,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠᐃⵠᐃⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⵠᐃⵠⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Cake Box"
			}, {
				id: 33,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⲆⲆⵠⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔΔᐃΔΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Christmas Cake Box"
			}, {
				id: 36,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠⵠⲆΔΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃΔⵠⲆⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": "Fukss",
				name: "Crab Box"
			}, {
				id: 42,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⲆΔⲆᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⵠΔⵠΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[511],
				name: "Fishing Box"
			}, {
				id: 72,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃᐃΔΔⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⲆⲆⵠΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Storage Machine"
			}, {
				id: 22,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⲆΔΔΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔⲆⵠᐃⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Let me out of here"
			}, {
				id: 17,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆᐃⵠⲆⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃΔⵠⲆΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Wooden and Amethyst Box"
			}, {
				id: 24,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔΔⲆⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃᐃⵠᐃⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Aquarium"
			}, {
				id: 28,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃᐃⵠᐃⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⵠⲆᐃⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Gift Box"
			}, {
				id: 40,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆᐃΔⲆⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⲆⲆⲆᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[511],
				name: "Open Watermelon Box"
			}, {
				id: 41,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆᐃᐃⵠᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⵠᐃⲆⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[511],
				name: "Watermelon Box"
			}, {
				id: 39,
				"ⲆΔᐃ": ⵠᐃ.Ⲇᐃᐃⵠⵠⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠᐃΔⵠⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Thornbush Box"
			}, {
				id: 43,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃΔⲆⵠΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⵠΔⵠΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Rabbit in the Box"
			}, {
				id: 47,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔΔΔΔᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃᐃΔⵠᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Garlic Plot"
			}, {
				id: 48,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔᐃⲆⲆⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃⵠᐃᐃΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Pumpkin Plot"
			}, {
				id: 78,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃΔⵠⵠΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃⵠΔⵠΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Spectrum Portal"
			}, {
				id: 45,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔΔⵠⵠⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃⲆΔⲆⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Autumn Box"
			}, {
				id: 44,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⵠⵠΔⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆᐃᐃⵠⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Winter Box"
			}, {
				id: 20,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠᐃⵠΔⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃᐃⵠⲆⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Metal and Reidite Box"
			}, {
				id: 23,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⵠΔⵠΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔᐃⲆⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Kraken Box"
			}, {
				id: 30,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⵠᐃᐃᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⲆᐃΔᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[423],
				name: "Lava Box"
			}, {
				id: 37,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠᐃΔᐃⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⵠⵠⲆᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Lava Box 2"
			}, {
				id: 49,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔᐃΔⵠΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⵠⲆΔΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Rabbit"
			}, {
				id: 50,
				"ⲆΔᐃ": ⵠᐃ.ΔΔᐃⲆⵠΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⲆΔⲆⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Wolf"
			}, {
				id: 51,
				"ⲆΔᐃ": ⵠᐃ.ΔΔΔᐃⲆⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔΔΔΔΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Spider"
			}, {
				id: 52,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⲆᐃΔΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃΔᐃΔⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Hawk"
			}, {
				id: 53,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆᐃⵠΔⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⵠⵠⲆᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Bear"
			}, {
				id: 54,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⵠⲆΔⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⵠᐃⲆⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Fox"
			}, {
				id: 55,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆᐃᐃᐃΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⲆᐃΔⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Baby Mammoth"
			}, {
				id: 56,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠᐃΔⲆⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⵠᐃⵠⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Mammoth"
			}, {
				id: 57,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃΔΔᐃⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃᐃⲆⲆΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Sandworm"
			}, {
				id: 58,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃᐃⵠᐃⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⵠⵠⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Vulture"
			}, {
				id: 59,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⵠΔᐃΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃᐃᐃΔΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Kraken"
			}, {
				id: 60,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃᐃᐃᐃᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔΔᐃⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Piranha"
			}, {
				id: 61,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠΔᐃⲆΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⵠᐃΔᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Baby Dragon"
			}, {
				id: 62,
				"ⲆΔᐃ": ⵠᐃ.ΔΔᐃⲆΔⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆᐃΔⵠΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Baby Lava"
			}, {
				id: 63,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔΔᐃⲆⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔᐃᐃᐃⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Dragon"
			}, {
				id: 64,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⵠᐃⲆΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃᐃΔΔⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Penguin"
			}, {
				id: 65,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⵠⲆᐃΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⲆⵠᐃΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Lava Dragon"
			}, {
				id: 66,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆⵠⲆⲆΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃⵠⵠⵠⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Boar"
			}, {
				id: 67,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠᐃⵠΔΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃΔᐃⵠⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Fire mob"
			}, {
				id: 68,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠⲆⵠᐃⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆᐃΔΔⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the Crab"
			}, {
				id: 69,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆⵠΔⵠᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔΔᐃⲆΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Box of the King Crab"
			}, {
				id: 71,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⲆᐃΔΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⲆΔⲆΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Dragon Box"
			}, {
				id: 73,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆⲆⲆⵠΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃⵠⲆᐃⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Rekt"
			}, {
				id: 76,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃᐃⲆⵠᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⲆⵠⵠᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Sleeping Tamon Dragon"
			}],
			"ᐃᐃΔⲆᐃ": [{
				id: Ⲇᐃⵠ,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠΔⲆᐃⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⲆΔᐃΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⵠⲆⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Book 1"
			}, {
				id: ᐃᐃΔ,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⲆΔⵠΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.Ⲇⵠⵠᐃᐃᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Book 2"
			}, {
				id: 2,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆⲆⲆᐃⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⵠⵠΔⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Book 3"
			}, {
				id: 3,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠᐃᐃᐃⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⵠⲆΔΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Book 4"
			}, {
				id: 4,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠΔⲆᐃᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠΔᐃᐃⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Damaged Book 1"
			}, {
				id: ⵠᐃⵠⵠᐃ,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⵠᐃΔⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⲆⲆⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": "SeveR",
				name: "Damaged Book 2"
			}, {
				id: 5,
				"ⲆΔᐃ": ⵠᐃ.ΔΔΔⲆⵠⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠᐃⲆᐃⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": "Doctorpus",
				name: "Scroll"
			}, {
				id: 6,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃᐃⲆᐃΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⵠΔᐃⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": "Doctorpus",
				name: "Clipboard"
			}, {
				id: Δᐃⵠᐃⵠ,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠᐃΔⵠΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⲆΔⲆᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Seed Book"
			}, {
				id: 20,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠᐃⲆᐃⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⲆⵠᐃᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Camo Book"
			}, {
				id: 24,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔⵠⵠᐃⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⵠΔᐃᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[ΔΔᐃⲆⲆ],
				name: "Stone Tablet"
			}, {
				id: 47,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠΔΔΔᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃⵠⲆᐃⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Reclaimed Book"
			}, {
				id: ᐃⵠᐃΔⲆ,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⵠⵠΔΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⵠⵠᐃΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Star Book"
			}, {
				id: ⵠᐃⵠΔⲆ,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃΔᐃΔΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔΔᐃΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Gold Book"
			}, {
				id: ⲆΔΔΔⵠ,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⵠΔⵠⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⲆᐃⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Old Mysterious Paper"
			}, {
				id: ᐃⲆΔⵠⵠᐃᐃ,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⵠⲆⵠΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔΔⵠⲆᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Gold Engraving"
			}, {
				id: 25,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆᐃᐃⲆᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔⵠⲆΔⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": "fatant",
				name: "Ant Book"
			}, {
				id: 32,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔΔⵠⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠᐃᐃᐃⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Mummy Book"
			}, {
				id: 37,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⵠⵠΔΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔΔⲆⵠⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Garlic Book"
			}, {
				id: 38,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠΔⵠⲆⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⵠⵠΔΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Pumpkin Book"
			}, {
				id: 39,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠΔᐃΔⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃΔᐃΔᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Christmas Tree Book"
			}, {
				id: ⲆⲆΔⲆⲆ,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔᐃΔᐃⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠΔΔⲆᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Diamond Book"
			}, {
				id: 9,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔⲆⵠⵠΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃⵠⵠⵠⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Obscure Book"
			}, {
				id: ⲆⲆᐃⵠᐃᐃΔ,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠᐃⲆⵠΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⲆⲆⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Rolled Parchment"
			}, {
				id: 22,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⲆⲆⵠΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠᐃΔⵠⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Cake Book"
			}, {
				id: 23,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠΔⲆᐃΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⲆΔΔᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Christmas Cake Book"
			}, {
				id: 30,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔΔΔᐃΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⵠⲆⵠᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[511],
				name: "Fish Book"
			}, {
				id: 31,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆΔΔⵠⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⲆⵠⲆΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[ᐃⲆΔⵠⵠᐃᐃ],
				name: "Once upon a time"
			}, {
				id: 48,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⲆⵠᐃΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆΔΔΔΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Chrono Clock"
			}, {
				id: 49,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔΔⵠⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠᐃΔⲆⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Recipe Book"
			}, {
				id: ⵠⵠΔΔΔⲆΔ,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠⲆΔⵠΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⵠᐃⲆΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Amethyst Book"
			}, {
				id: 28,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃΔΔⵠⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⵠᐃⲆⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Paint Pallet"
			}, {
				id: 29,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⵠᐃᐃⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆᐃⲆⵠᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[ⵠᐃⵠⲆΔᐃᐃ],
				name: "Watermelon Book"
			}, {
				id: 27,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃΔⲆΔⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⲆⵠⵠΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Thornbush Book"
			}, {
				id: 35,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠᐃⵠⲆⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔᐃⵠΔⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Menu"
			}, {
				id: 36,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⵠⲆᐃⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠΔΔⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[ⲆΔΔⲆⲆⵠⲆ],
				name: "Lover Letter"
			}, {
				id: 40,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆⵠⲆᐃᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⲆᐃⵠⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Fresh-Baked Cookies"
			}, {
				id: 41,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔΔⵠⵠΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠΔⲆᐃᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Inside, there is just a book."
			}, {
				id: 45,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃᐃΔⵠΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔΔΔΔⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Crafting Machine"
			}, {
				id: 33,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⲆⵠΔⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⲆⵠᐃᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Winter Book"
			}, {
				id: 34,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠᐃᐃᐃⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆᐃⲆΔⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Autumn Book"
			}, {
				id: 14,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔᐃᐃⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠᐃⵠΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Reidite Book"
			}, {
				id: 12,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⲆⵠⵠⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔΔᐃΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[423],
				name: "Lava Book"
			}, {
				id: 26,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆⲆᐃᐃⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔᐃⲆΔᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Lava Book 2"
			}, {
				id: 19,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆᐃⲆΔᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔΔⲆᐃᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[423],
				name: "Ocean Mystery"
			}, {
				id: 21,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆⵠⲆᐃⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃΔⲆΔⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Dragon Book"
			}, {
				id: 42,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔⲆⲆᐃⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔΔⲆⲆΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Engineer Book"
			}, {
				id: 43,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⵠⲆⵠΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆΔᐃⲆⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Nightmare Book"
			}, {
				id: 44,
				"ⲆΔᐃ": ⵠᐃ.Δᐃⵠᐃᐃᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⵠⲆᐃΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[343],
				name: "Mystery Book"
			}, {
				id: 46,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠᐃⲆᐃΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔᐃᐃⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Cursed Book"
			}],
			"ΔᐃⲆΔᐃ": [{
				id: 0,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔᐃᐃᐃΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔᐃᐃᐃΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⵠⲆⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Nothing"
			}, {
				id: ᐃⲆᐃᐃ,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔⵠᐃΔⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔΔΔⲆⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⵠⲆⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Pink Cheeks"
			}, {
				id: 3,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⲆⵠⵠᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆᐃⲆⲆΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⵠⲆⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Heart"
			}, {
				id: 1,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⲆΔΔᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⵠⵠΔᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⵠⲆⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bandage 1"
			}, {
				id: 4,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⲆⵠΔΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠᐃᐃⵠΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃⵠⲆⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Flower 1"
			}, {
				id: ΔⵠΔᐃ,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔⲆⵠᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆΔΔΔΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bow 1"
			}, {
				id: ⵠⲆⲆᐃᐃ,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⲆᐃᐃΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆᐃⵠⲆⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Bandage 2"
			}, {
				id: 7,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆⲆⲆⵠⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔᐃⲆᐃⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Flower 2"
			}, {
				id: ᐃᐃᐃΔⲆ,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃΔⲆᐃΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⲆᐃⲆⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Bandage 3"
			}, {
				id: 36,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⲆᐃⵠΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃⲆΔΔⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Foliage"
			}, {
				id: 59,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃΔᐃⵠⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⲆⵠⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Peaceful"
			}, {
				id: 67,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔⲆᐃᐃⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔⲆⵠⲆΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Sparkles"
			}, {
				id: 68,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔⲆΔⲆⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⲆⲆⲆⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Luxury"
			}, {
				id: 69,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⲆΔΔΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⵠΔⲆⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆⵠᐃΔ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Snow Flakes Crown"
			}, {
				id: ᐃⵠⲆⲆⵠΔᐃ,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⵠⲆᐃⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔΔⲆΔⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Glasses 1"
			}, {
				id: ⵠⲆⵠⵠⲆ,
				"ⲆΔᐃ": ⵠᐃ.Ⲇᐃᐃⵠᐃⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⲆΔᐃⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Bow 2"
			}, {
				id: ⵠΔⲆⵠⵠ,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃᐃⵠᐃⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⲆⲆⵠⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Little Stars"
			}, {
				id: ⵠⵠᐃᐃᐃⲆⲆ,
				"ⲆΔᐃ": ⵠᐃ.ΔΔᐃⲆⲆᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃΔⲆᐃⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Pirate Eye Patch 1"
			}, {
				id: 44,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃᐃΔΔΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⵠⲆⵠⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Pirate Eye Patch 2"
			}, {
				id: 23,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔⵠᐃⵠⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔᐃⵠᐃⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Clown nose"
			}, {
				id: ᐃⵠⲆⲆΔΔᐃ,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃΔᐃᐃⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⵠⵠⵠᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Eye Patch"
			}, {
				id: 30,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔᐃᐃΔᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃⲆⵠᐃΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Flower 3"
			}, {
				id: 38,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔᐃΔⲆᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃΔⲆⵠⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[423],
				name: "False Nose"
			}, {
				id: 74,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠᐃᐃΔΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⲆⵠⲆⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Red Cloth"
			}, {
				id: 75,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⵠⲆᐃⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⵠⲆⵠⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Blue Cloth"
			}, {
				id: 79,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃΔⵠⲆⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃᐃⲆⵠᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Transparent Mask"
			}, {
				id: 89,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔⲆᐃⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠᐃᐃᐃⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[529],
				name: "Starve.io Anime"
			}, {
				id: 94,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⲆΔⲆᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔⵠᐃΔⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": "Ant",
				name: "Hero Mask"
			}, {
				id: ᐃⲆᐃⵠΔ,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆΔᐃΔⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⲆⵠⲆⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "This starver is mad"
			}, {
				id: 104,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃⵠΔᐃⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆΔᐃΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Scars"
			}, {
				id: 106,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠᐃⲆΔΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⵠⵠⲆᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "In Search of Intelligence"
			}, {
				id: 109,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⵠⵠΔⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃΔΔΔᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Reclaimed Bandage"
			}, {
				id: 111,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆᐃᐃΔⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆΔΔᐃⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⵠⵠΔΔ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Unwrap Starver for Gift"
			}, {
				id: ⵠᐃΔⵠᐃ,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠΔΔⵠᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔⲆΔᐃᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Star Glasses"
			}, {
				id: 21,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔⲆⵠΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔᐃⲆⲆⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Great-aunt's Glasses"
			}, {
				id: 24,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠⲆⵠΔΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃΔᐃⲆΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Little Starver"
			}, {
				id: 22,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔⲆⲆⵠᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆᐃⵠⵠⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Little Glasses"
			}, {
				id: ᐃⵠⵠΔⲆ,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⵠΔⲆⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆΔᐃᐃⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Flower Chain"
			}, {
				id: 29,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃᐃⲆⲆΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⲆΔᐃΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Horns"
			}, {
				id: 31,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆΔⵠⲆᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⵠⲆⲆⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Golden Flower"
			}, {
				id: 40,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔΔⲆᐃⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔⲆᐃΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Sleeping Mask"
			}, {
				id: 57,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆⲆᐃⵠⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⵠⵠⲆⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[558],
				name: "Fish on your head"
			}, {
				id: 58,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠⵠΔⲆΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃΔΔΔΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Rose"
			}, {
				id: 91,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆᐃⲆΔΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⵠⲆⵠΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[340],
				name: "Grey Scarf"
			}, {
				id: 92,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆᐃᐃⵠΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⲆⵠⵠⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[340],
				name: "Black Scarf"
			}, {
				id: 93,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔΔⵠᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠᐃΔⵠⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[340],
				name: "Skull Mask"
			}, {
				id: 95,
				"ⲆΔᐃ": ⵠᐃ.ΔΔᐃⲆⵠⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆᐃΔⵠΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Golden Monocle"
			}, {
				id: 96,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⵠⵠΔⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆΔⵠΔᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "A simple instruction"
			}, {
				id: 102,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⵠⲆⲆⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠᐃΔᐃΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Garland"
			}, {
				id: 103,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆⵠⵠⵠⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠΔⲆⲆᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "The Doormat"
			}, {
				id: 108,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃᐃᐃⲆⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔΔⵠⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Copium Tanks"
			}, {
				id: 117,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⲆⵠⲆⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆΔᐃΔΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Eyelashes"
			}, {
				id: 118,
				"ⲆΔᐃ": ⵠᐃ.ⵠΔᐃⵠΔⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⲆⵠᐃⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔᐃⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Helmet Prototype"
			}, {
				id: ⲆᐃΔⵠΔΔᐃ,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⲆⲆΔⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠΔΔΔᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Fancy Glasses"
			}, {
				id: 25,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠΔⲆᐃΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆΔΔΔⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Medecin Mask"
			}, {
				id: 14,
				"ⲆΔᐃ": ⵠᐃ.ΔΔᐃⲆᐃᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔⲆⵠᐃΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mr. Mayor"
			}, {
				id: ΔΔΔⵠᐃⲆⵠ,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃΔᐃᐃᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠΔⵠΔΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Sunglasses 2"
			}, {
				id: 28,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠⵠᐃᐃΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⲆᐃΔΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[362],
				name: "Starfish"
			}, {
				id: 37,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠΔⵠᐃⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃⵠΔⲆᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Berry"
			}, {
				id: 39,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⵠΔⲆΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆΔᐃⲆᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Flake"
			}, {
				id: 43,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⵠΔᐃⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠΔΔΔᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Leaf "
			}, {
				id: 61,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆΔΔⲆⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⲆⵠΔΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "A sword in your head"
			}, {
				id: 62,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔⲆΔⵠⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⲆⲆⲆⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Winter Scarf"
			}, {
				id: 64,
				"ⲆΔᐃ": ⵠᐃ.ΔΔⲆⵠᐃΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⵠⲆΔᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Winter Scarf 2"
			}, {
				id: 66,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔᐃΔᐃΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.Ⲇⵠᐃᐃᐃᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Winter Scarf 3"
			}, {
				id: 70,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔⵠⵠⵠΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠᐃⵠⲆᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mask with animal tracks"
			}, {
				id: 71,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠᐃⵠᐃΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⲆΔⵠΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Spring Mask"
			}, {
				id: 72,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⲆᐃⵠⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆΔᐃᐃᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Pink Mask"
			}, {
				id: 73,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⲆΔⵠᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃΔⲆⲆⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Blue Mask"
			}, {
				id: 76,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⲆΔⲆᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆᐃⲆⵠⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Military Mask"
			}, {
				id: 77,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃᐃᐃᐃᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⵠᐃΔⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Orange Mask"
			}, {
				id: 78,
				"ⲆΔᐃ": ⵠᐃ.Ⲇᐃᐃⵠᐃᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⵠΔⵠΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "White and Red Points Mask"
			}, {
				id: 80,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⵠⲆⵠⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆΔΔⲆⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Stick out your tongue Mask"
			}, {
				id: 81,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔᐃⵠⵠΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⵠΔⵠᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Two Teeth Mask"
			}, {
				id: 82,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃᐃⵠΔᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆᐃᐃⲆⲆⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Make-up Mask"
			}, {
				id: 83,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃⵠᐃⲆⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆᐃⲆⲆᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Sad Mask"
			}, {
				id: 84,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⲆⲆⵠⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠΔᐃⲆⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Happy Mask"
			}, {
				id: 90,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⲆⵠⲆΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⵠⵠⵠⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[343],
				name: "Blood"
			}, {
				id: 101,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠΔⵠⲆⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔΔΔᐃⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Axed Plans"
			}, {
				id: 105,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠᐃΔᐃᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠⲆⲆⲆᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Saddle"
			}, {
				id: 113,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆⵠⲆⲆⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔⵠⵠΔΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "I see"
			}, {
				id: 114,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⵠΔΔΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠⲆⲆΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "I have no body and I must dress"
			}, {
				id: 115,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠⲆΔⵠⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔᐃΔΔᐃⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Cursed Crown"
			}, {
				id: 27,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆΔⲆⲆⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠΔⲆⲆⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Clown Face"
			}, {
				id: 20,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠᐃⵠΔᐃⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔᐃⲆⲆΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Sunglasses 3"
			}, {
				id: 32,
				"ⲆΔᐃ": ⵠᐃ.ΔⵠᐃΔΔⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⵠⲆⲆⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Engineer's Glasses"
			}, {
				id: 33,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⲆⲆᐃⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃⲆⲆᐃⵠⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Engineer's Monocle"
			}, {
				id: 34,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⲆⵠΔΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⵠΔᐃⵠΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mauve's butt"
			}, {
				id: 41,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃΔⵠⲆⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⲆⵠΔΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Lapa Head"
			}, {
				id: 42,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠᐃᐃᐃΔⲆ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔᐃᐃⲆⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Lapa Head "
			}, {
				id: 85,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆⲆΔⵠΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆΔΔⲆᐃᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Mask and Glasses"
			}, {
				id: 110,
				"ⲆΔᐃ": ⵠᐃ.ΔⲆⵠⵠⲆⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ⲆΔⵠⲆⲆⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆΔΔᐃ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Spectrum Pet"
			}, {
				id: 60,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⲆᐃᐃⵠΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃⲆΔΔⲆⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Jason"
			}, {
				id: 26,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠⵠⲆΔⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔΔᐃΔⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Devil Horns"
			}, {
				id: 18,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆⵠⵠΔΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔᐃⵠⵠⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Big Boss"
			}, {
				id: 35,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃΔⵠᐃⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ⵠΔⵠᐃᐃᐃΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Baby Kraken"
			}, {
				id: 63,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃΔΔⵠᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ΔⵠᐃⲆΔᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Deer Antlers"
			}, {
				id: 65,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⵠΔᐃᐃΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃᐃⲆᐃᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Baby Dragon on your head"
			}, {
				id: 86,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⵠⲆⵠᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⲆᐃᐃΔᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Gaz Mask and Glasses"
			}, {
				id: 87,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔΔⵠⲆΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⵠΔⲆᐃⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Pink Gaz Mask and Glasses"
			}, {
				id: 88,
				"ⲆΔᐃ": ⵠᐃ.ⲆᐃᐃΔΔΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⲆᐃΔΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[459],
				name: "Engineer Glasses"
			}, {
				id: 97,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⵠᐃⵠⲆⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆᐃΔⵠⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Jarred Horns"
			}, {
				id: 98,
				"ⲆΔᐃ": ⵠᐃ.ⵠⵠⵠΔΔᐃᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⲆΔⵠⵠᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Curved Horns"
			}, {
				id: 99,
				"ⲆΔᐃ": ⵠᐃ.ᐃΔΔⵠⲆⵠⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔᐃΔΔⲆΔΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Evil Goat Horns"
			}, {
				id: 107,
				"ⲆΔᐃ": ⵠᐃ.ΔΔΔᐃΔⵠⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔΔⲆΔⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Decorative Earmuffs"
			}, {
				id: 112,
				"ⲆΔᐃ": ⵠᐃ.ᐃⲆΔᐃⵠΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⲆⵠᐃⵠⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Tamon Dragon Pet"
			}, {
				id: 116,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃⲆΔΔⵠᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠᐃΔΔᐃⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ⲆᐃⲆⲆ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "Blanket"
			}, {
				id: 45,
				"ⲆΔᐃ": ⵠᐃ.ⲆⵠᐃⲆⲆΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ᐃᐃⲆⲆⲆⵠⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔⵠⵠⵠ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "More than Level 5",
				level: ⲆᐃⲆΔ
			}, {
				id: 46,
				"ⲆΔᐃ": ⵠᐃ.ⲆΔⲆᐃᐃΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⲆⵠⲆⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔⵠⵠⵠ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "More than Level 10",
				level: 10
			}, {
				id: 47,
				"ⲆΔᐃ": ⵠᐃ.ᐃⵠⵠΔΔⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔΔⲆⵠⵠⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔⵠⵠⵠ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "More than Level 15",
				level: ⵠⲆⵠⲆᐃ
			}, {
				id: 48,
				"ⲆΔᐃ": ⵠᐃ.ΔΔΔᐃⵠⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆⲆΔⲆⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔⵠⵠⵠ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "More than Level 20",
				level: 20
			}, {
				id: 49,
				"ⲆΔᐃ": ⵠᐃ.ᐃᐃΔᐃⵠⲆⲆ,
				"ΔⲆᐃ": ⵠᐃ.ΔⲆⵠⲆⲆⲆᐃ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔⵠⵠⵠ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "More than Level 25",
				level: 25
			}, {
				id: 50,
				"ⲆΔᐃ": ⵠᐃ.ⵠᐃΔⵠᐃΔⵠ,
				"ΔⲆᐃ": ⵠᐃ.ⲆⲆΔⵠᐃⵠΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔⵠⵠⵠ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "More than Level 30",
				level: 30
			}, {
				id: 51,
				"ⲆΔᐃ": ⵠᐃ.ΔᐃⲆⵠᐃΔΔ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠΔⵠᐃΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔⵠⵠⵠ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "More than Level 35",
				level: 35
			}, {
				id: 52,
				"ⲆΔᐃ": ⵠᐃ.Ⲇᐃᐃᐃⵠᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃⵠⲆⲆΔΔⲆ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔⵠⵠⵠ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "More than Level 40",
				level: 40
			}, {
				id: 53,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆⲆⵠⵠⲆᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆⲆⲆⲆⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔⵠⵠⵠ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "More than Level 45",
				level: 45
			}, {
				id: 54,
				"ⲆΔᐃ": ⵠᐃ.ⵠⲆΔⲆⲆΔᐃ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⵠⵠⵠΔΔⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔⵠⵠⵠ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "More than Level 50",
				level: 50
			}, {
				id: 55,
				"ⲆΔᐃ": ⵠᐃ.ⲆⲆΔⲆⵠⲆΔ,
				"ΔⲆᐃ": ⵠᐃ.ⵠⲆᐃⵠᐃⲆⵠ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔⵠⵠⵠ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "More than Level 55",
				level: 55
			}, {
				id: 56,
				"ⲆΔᐃ": ⵠᐃ.Δⵠᐃᐃᐃᐃⵠ,
				"ΔⲆᐃ": ⵠᐃ.ᐃΔⲆΔΔⲆΔ,
				"ⵠᐃⵠ": ΔΔⵠ.ᐃΔⵠⵠⵠ,
				"ⲆⲆⲆ": ⵠ[462],
				name: "More than Level 60",
				level: 60
			}]
		};
		ΔᐃᐃΔ.ᐃⵠⵠᐃⵠᐃᐃ = ᐃⵠᐃᐃⵠⵠⵠ(Δᐃᐃᐃ.ⵠᐃΔⲆΔ, 21);
		ΔᐃᐃΔ.ᐃⲆᐃᐃⵠⲆⵠ = ᐃⵠᐃᐃⵠⵠⵠ(Δᐃᐃᐃ.ⵠᐃΔⲆΔ, 20);
		ᐃΔ[Δ.ᐃΔⵠⲆⵠ] = [];
		ᐃΔ[Δ.ΔᐃᐃⵠⲆ] = [];
		ᐃΔ[Δ.ᐃᐃⵠⵠΔ] = [];
		ᐃΔ[Δ.ᐃᐃΔⲆᐃ] = [];
		ᐃΔ[Δ.ⵠᐃⵠⲆ] = [];
		ᐃΔ[Δ.ΔᐃⲆΔᐃ] = [];
		for (var Ⲇᐃ = Ⲇᐃⵠ; Ⲇᐃ < Δᐃᐃᐃ.ⵠᐃΔⲆΔ.length; Ⲇᐃ++) {
			ᐃΔ[Δ.ᐃΔⵠⲆⵠ][Ⲇᐃ] = [Δᐃᐃᐃ.ⵠᐃΔⲆΔ[Ⲇᐃ].ⲆΔᐃ, Δᐃᐃᐃ.ⵠᐃΔⲆΔ[Ⲇᐃ].ΔⲆᐃ];
			ᐃΔ[Δ.ΔᐃᐃⵠⲆ][Ⲇᐃ] = [Δᐃᐃᐃ.ⵠᐃΔⲆΔ[Ⲇᐃ].ᐃⵠΔΔ, Δᐃᐃᐃ.ⵠᐃΔⲆΔ[Ⲇᐃ].ᐃⲆⵠΔ]
		}
		for (var Ⲇᐃ = ΔΔᐃ; Ⲇᐃ < Δᐃᐃᐃ.ᐃᐃΔⲆᐃ.length; Ⲇᐃ++) ᐃΔ[Δ.ᐃᐃΔⲆᐃ][Ⲇᐃ] = [Δᐃᐃᐃ.ᐃᐃΔⲆᐃ[Ⲇᐃ].ⲆΔᐃ, Δᐃᐃᐃ.ᐃᐃΔⲆᐃ[Ⲇᐃ].ΔⲆᐃ];
		for (var Ⲇᐃ = ᐃᐃⲆ; Δᐃᐃᐃ.ᐃᐃⵠⵠΔ.length > Ⲇᐃ; Ⲇᐃ++) ᐃΔ[Δ.ᐃᐃⵠⵠΔ][Ⲇᐃ] = [Δᐃᐃᐃ.ᐃᐃⵠⵠΔ[Ⲇᐃ].ⲆΔᐃ, Δᐃᐃᐃ.ᐃᐃⵠⵠΔ[Ⲇᐃ].ΔⲆᐃ];
		for (var Ⲇᐃ = 0; Δᐃᐃᐃ.ⵠᐃⵠⲆ.length > Ⲇᐃ; Ⲇᐃ++) ᐃΔ[Δ.ⵠᐃⵠⲆ][Ⲇᐃ] = [Δᐃᐃᐃ.ⵠᐃⵠⲆ[Ⲇᐃ].ⲆΔᐃ, Δᐃᐃᐃ.ⵠᐃⵠⲆ[Ⲇᐃ].ΔⲆᐃ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < Δᐃᐃᐃ.ΔᐃⲆΔᐃ.length; Ⲇᐃ++) ᐃΔ[Δ.ΔᐃⲆΔᐃ][Ⲇᐃ] = [Δᐃᐃᐃ.ΔᐃⲆΔᐃ[Ⲇᐃ].ⲆΔᐃ, Δᐃᐃᐃ.ΔᐃⲆΔᐃ[Ⲇᐃ].ΔⲆᐃ]
	};
	const ΔⵠⵠΔⵠ = ΔΔⲆᐃᐃ;
	const ᐃⵠⲆᐃΔ = ΔΔΔⲆ;

	function ΔᐃⲆᐃ(ΔⲆΔ, ᐃᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ᐃⲆⲆᐃ = Math.sqrt(ᐃᐃ.width * ᐃᐃ.width + ᐃᐃ.height * ᐃᐃ.height);
		d2 = ᐃⲆⲆᐃ / 2;
		ΔⲆ.width = ᐃⲆⲆᐃ;
		ΔⲆ.height = ᐃⲆⲆᐃ;
		Ⲇ.translate(d2, d2);
		Ⲇ.rotate(ΔⲆΔ);
		Ⲇ.drawImage(ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
		return ΔⲆ
	}

	function ᐃΔⵠ(Ⲇ, ⵠᐃⲆᐃ, ⲆⲆᐃΔ, ᐃⲆⲆᐃ, ᐃⵠⵠΔ, ᐃⲆⵠⲆ) {
		ᐃⲆⲆᐃ < ⲆⵠΔⵠ * ᐃⲆⵠⲆ && (ᐃⲆⵠⲆ = ᐃⲆⲆᐃ / ΔᐃΔᐃ);
		ᐃⲆⵠⲆ * 2 > ᐃⵠⵠΔ && (ᐃⲆⵠⲆ = ᐃⵠⵠΔ / ᐃᐃΔⵠ);
		0 > ᐃⲆⵠⲆ && (ᐃⲆⵠⲆ = 0);
		Ⲇ.beginPath();
		Ⲇ.moveTo(ⵠᐃⲆᐃ + ᐃⲆⵠⲆ, ⲆⲆᐃΔ);
		Ⲇ.arcTo(ⵠᐃⲆᐃ + ᐃⲆⲆᐃ, ⲆⲆᐃΔ, ⵠᐃⲆᐃ + ᐃⲆⲆᐃ, ⲆⲆᐃΔ + ᐃⵠⵠΔ, ᐃⲆⵠⲆ);
		Ⲇ.arcTo(ⵠᐃⲆᐃ + ᐃⲆⲆᐃ, ⲆⲆᐃΔ + ᐃⵠⵠΔ, ⵠᐃⲆᐃ, ⲆⲆᐃΔ + ᐃⵠⵠΔ, ᐃⲆⵠⲆ);
		Ⲇ.arcTo(ⵠᐃⲆᐃ, ⲆⲆᐃΔ + ᐃⵠⵠΔ, ⵠᐃⲆᐃ, ⲆⲆᐃΔ, ᐃⲆⵠⲆ);
		Ⲇ.arcTo(ⵠᐃⲆᐃ, ⲆⲆᐃΔ, ⵠᐃⲆᐃ + ᐃⲆⲆᐃ, ⲆⲆᐃΔ, ᐃⲆⵠⲆ);
		Ⲇ.closePath()
	}

	function ⲆⲆᐃⲆᐃᐃⲆⲆⲆ(ᐃ, ΔⲆⵠⲆ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆΔⲆ = Math.floor(ᐃ * 28);
		var ᐃⲆΔᐃΔ = Math.floor(20 * ᐃ);
		Ⲇ.font = ᐃⲆΔᐃΔ + ⵠ[572];
		var ΔⵠⵠⲆᐃ = ⵠᐃⵠΔⲆ * ᐃ;
		var ⲆⲆᐃ = Ⲇ.measureText(ΔⲆⵠⲆ).width + 2 * ΔⵠⵠⲆᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		ᐃΔⵠ(Ⲇ, 0, 0, ⲆⲆᐃ, ⲆΔⲆ, ᐃ * 10);
		Ⲇ.globalAlpha = .5;
		ΔΔ(Ⲇ, ⵠ[204]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.textBaseline = ⵠ[90], Ⲇ.font = ᐃⲆΔᐃΔ + ⵠ[572];
		Ⲇ.beginPath();
		Ⲇ.fillStyle = ⵠ[447];
		Ⲇ.fillText(ΔⲆⵠⲆ, ΔⵠⵠⲆᐃ, ⲆΔⲆ / 2);
		return ΔⲆ
	}

	function ΔΔⲆⵠΔᐃΔ(Ⲇ, Ⲇⵠ, ᐃⵠⲆ, ΔⲆΔ, ⵠᐃⲆᐃ) {
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.arc(Ⲇⵠ, ᐃⵠⲆ, ΔⲆΔ, 0, Math.PI * ⲆᐃⵠΔ * ⵠᐃⲆᐃ)
	}

	function ᐃᐃⲆΔ(Ⲇ, ⵠᐃΔⵠ, ΔⲆΔ, ⵠⵠⵠⵠ) {
		var ⵠᐃⲆᐃ = Math.PI * ⵠΔⵠΔ / ⵠᐃΔⵠ;
		Ⲇ.beginPath();
		var ⲆⲆⵠΔΔⵠⵠ = [{
			x: ΔⲆΔ,
			y: ⵠᐃⲆⲆ
		}];
		var ⲆⵠᐃᐃⲆⲆΔ = [];
		for (var Ⲇᐃ = 1; ⵠᐃΔⵠ > Ⲇᐃ; Ⲇᐃ++) {
			ⲆⲆⵠΔΔⵠⵠ.push({
				x: ΔⲆΔ * Math.sin(Ⲇᐃ * ⵠᐃⲆᐃ),
				y: ΔⲆΔ * Math.cos(Ⲇᐃ * ⵠᐃⲆᐃ)
			});
			var ᐃⵠΔΔᐃ = ⲆⲆⵠΔΔⵠⵠ.length;
			ⲆⵠᐃᐃⲆⲆΔ.push(ΔⵠΔⵠ.ᐃⵠⵠⵠᐃⲆⲆ(ⲆⲆⵠΔΔⵠⵠ[ᐃⵠΔΔᐃ - ⲆᐃΔⲆ], ⲆⲆⵠΔΔⵠⵠ[ᐃⵠΔΔᐃ - ΔᐃΔⲆ]))
		}
		ⲆⵠᐃᐃⲆⲆΔ.push(ΔⵠΔⵠ.ᐃⵠⵠⵠᐃⲆⲆ(ⲆⲆⵠΔΔⵠⵠ[ⲆⲆⵠΔΔⵠⵠ.length - 1], ⲆⲆⵠΔΔⵠⵠ[ⵠⵠⵠ]));
		var ⲆⵠⲆ = ⲆⵠᐃᐃⲆⲆΔ[ⲆⵠᐃᐃⲆⲆΔ.length - ΔⵠΔ];
		Ⲇ.moveTo(ⲆⵠⲆ.x, ⲆⵠⲆ.y);
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠᐃΔⵠ; Ⲇᐃ++) Ⲇ.arcTo(ⲆⲆⵠΔΔⵠⵠ[Ⲇᐃ].x, ⲆⲆⵠΔΔⵠⵠ[Ⲇᐃ].y, ⲆⵠᐃᐃⲆⲆΔ[Ⲇᐃ].x, ⲆⵠᐃᐃⲆⲆΔ[Ⲇᐃ].y, ⵠⵠⵠⵠ);
		Ⲇ.closePath()
	}

	function ΔΔ(Ⲇ, ᐃⵠⲆⵠⲆ, ΔΔⲆⵠ, ⵠΔΔ) {
		if (ᐃⵠⲆⵠⲆ) {
			Ⲇ.fillStyle = ᐃⵠⲆⵠⲆ;
			Ⲇ.fill()
		}
		if (ΔΔⲆⵠ) {
			Ⲇ.lineWidth = ⵠΔΔ;
			Ⲇ.strokeStyle = ΔΔⲆⵠ;
			Ⲇ.stroke()
		}
	}
	
	function ᐃΔΔ(Ⲇ, Ⲇⵠ, ᐃⵠⲆ, ΔⲆΔ) {
		Ⲇ.beginPath();
		Ⲇ.arc(Ⲇⵠ, ᐃⵠⲆ, ΔⲆΔ, ⲆⵠⲆⲆ, Math.PI * ᐃⲆᐃᐃ)
	}
	function ΔᐃⵠᐃⲆΔᐃΔᐃ(Ⲇ, ⵠᐃⲆᐃ, ⲆⲆᐃΔ, ᐃⲆⲆᐃ, ᐃⵠⵠΔ, ᐃⲆⵠⲆ) {
		ᐃⲆⲆᐃ < ᐃⲆⵠⲆ * 2 && (ᐃⲆⵠⲆ = ᐃⲆⲆᐃ / 2);
		ᐃⵠⵠΔ < ⵠⵠⵠᐃ * ᐃⲆⵠⲆ && (ᐃⲆⵠⲆ = ᐃⵠⵠΔ / 2);
		ᐃⲆⵠⲆ < 0 && (ᐃⲆⵠⲆ = ⵠᐃⲆ);
		Ⲇ.beginPath();
		Ⲇ.moveTo(ⵠᐃⲆᐃ + ᐃⲆⵠⲆ, ⲆⲆᐃΔ);
		Ⲇ.arcTo(ⵠᐃⲆᐃ + ᐃⲆⲆᐃ, ⲆⲆᐃΔ, ⵠᐃⲆᐃ + ᐃⲆⲆᐃ, ⲆⲆᐃΔ + ᐃⵠⵠΔ, 0);
		Ⲇ.arcTo(ⵠᐃⲆᐃ + ᐃⲆⲆᐃ, ⲆⲆᐃΔ + ᐃⵠⵠΔ, ⵠᐃⲆᐃ, ⲆⲆᐃΔ + ᐃⵠⵠΔ, ᐃⲆⵠⲆ);
		Ⲇ.arcTo(ⵠᐃⲆᐃ, ⲆⲆᐃΔ + ᐃⵠⵠΔ, ⵠᐃⲆᐃ, ⲆⲆᐃΔ, 0);
		Ⲇ.arcTo(ⵠᐃⲆᐃ, ⲆⲆᐃΔ, ⵠᐃⲆᐃ + ᐃⲆⲆᐃ, ⲆⲆᐃΔ, ᐃⲆⵠⲆ);
		Ⲇ.closePath()
	}
	const ⵠΔΔᐃΔᐃΔ = ⲆⲆΔⲆⲆ;

	function ΔⲆⲆⲆΔΔⲆⵠΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 70 * ᐃ;
		ΔⲆ.height = 70 * ᐃ;
		Ⲇ.globalAlpha = .5;
		ᐃΔΔ(Ⲇ, 26 * ᐃ, ᐃ * 26, ᐃⲆⵠⲆⵠᐃⲆ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ]);
		ᐃΔΔ(Ⲇ, 56 * ᐃ, 36 * ᐃ, ᐃ * ⵠⵠⲆⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[1]);
		ᐃΔΔ(Ⲇ, ᐃ * 40, ᐃ * 50, ᐃ * ΔⲆⲆΔⲆ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠᐃ]);
		Ⲇ.globalAlpha = 1;
		ᐃΔΔ(Ⲇ, 26 * ᐃ, ᐃ * 26, ᐃΔΔⲆⵠ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		ᐃΔΔ(Ⲇ, ᐃ * 56, ᐃ * 36, ᐃ * 5);
		ΔΔ(Ⲇ, Δⵠ[1]);
		ᐃΔΔ(Ⲇ, 40 * ᐃ, 50 * ᐃ, 5 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[2]);
		return ΔⲆ
	}

	function ⵠᐃᐃⲆⲆΔⲆⲆⵠ(ᐃ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 176 * ᐃ;
		ΔⲆ.height = 127 * ᐃ;
		if (8 == Ⲇᐃ) {
			Ⲇ.globalAlpha = .3;
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 87, 64.5 * ᐃ);
			ᐃΔⵠ(Ⲇ, -56 * ᐃ, -41.5 * ᐃ, ᐃ * 112, ᐃ * 83, ᐃ * ⵠᐃⵠⵠᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ᐃⲆΔ], ᐃ * ᐃⵠⵠⵠᐃ);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 82, 69.5 * ᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * -51, -36.5 * ᐃ, ᐃ * 102, ᐃ * 73, 18 * ᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[Δⵠᐃ], ᐃⲆⵠᐃⵠ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 55, ᐃ * 41);
			Ⲇ.bezierCurveTo(ᐃ * 38, ᐃ * 41, 37 * ᐃ, ᐃ * 50, 38 * ᐃ, ᐃ * 61);
			Ⲇ.bezierCurveTo(ᐃ * 42, ᐃ * 50, ᐃ * 46, ᐃ * 46, ᐃ * 55, ᐃ * 42);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[3]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(ᐃ * 26, ᐃ * 10);
			ᐃΔΔ(Ⲇ, ᐃ * 35, 75 * ᐃ, ᐃ * ⲆΔᐃΔⲆ);
			ΔΔ(Ⲇ, Δⵠ[4]);
			ᐃΔΔ(Ⲇ, 85 * ᐃ, 75 * ᐃ, ᐃ * ⵠᐃᐃⲆᐃΔⲆ);
			ΔΔ(Ⲇ, Δⵠ[ΔⵠⵠⲆ]);
			ᐃΔΔ(Ⲇ, ᐃ * 32, 67 * ᐃ, ᐃ * Ⲇᐃⵠᐃ);
			ΔΔ(Ⲇ, Δⵠ[5]);
			ᐃΔΔ(Ⲇ, ᐃ * 82, 67 * ᐃ, ᐃ * 5);
			ΔΔ(Ⲇ, Δⵠ[5])
		} else if (Ⲇᐃ == ⵠΔⵠⵠᐃ) {
			var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
			var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
			ΔⲆ.width = 332 * ᐃ;
			ΔⲆ.height = ᐃ * 127;
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ⵠΔᐃⵠ, ᐃ * -36);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 165.25, 106.84375 * ᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * -56.5, ᐃ * -41.5, ᐃ * 113, 83 * ᐃ, 18 * ᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(ΔⲆⲆ, ⵠⵠᐃΔᐃ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(210.75 * ᐃ, ᐃ * 72.84375);
			Ⲇ.bezierCurveTo(ᐃ * 238.75, 74.84375 * ᐃ, 270.75 * ᐃ, 85.84375 * ᐃ, 269.75 * ᐃ, ᐃ * 90.84375);
			Ⲇ.bezierCurveTo(268.75 * ᐃ, 94.84375 * ᐃ, 221.75 * ᐃ, 81.84375 * ᐃ, 206.75 * ᐃ, ᐃ * 85.84375);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⲆ], Δⵠ[ⲆⲆⲆⲆ], ΔⵠⵠⲆ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 208.75, 69.84375 * ᐃ);
			Ⲇ.bezierCurveTo(241.75 * ᐃ, ᐃ * 61.84375, ᐃ * 265.75, ᐃ * 65.84375, ᐃ * 286.75, ᐃ * 69.84375);
			Ⲇ.bezierCurveTo(290.75 * ᐃ, ᐃ * 75.84375, 225.75 * ᐃ, ᐃ * 69.84375, 215.75 * ᐃ, ᐃ * 80.84375);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔⵠΔ], Δⵠ[ᐃᐃⲆⲆ], ᐃ * 4);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(209.75 * ᐃ, ᐃ * 69.84375);
			Ⲇ.bezierCurveTo(228.75 * ᐃ, 51.84375 * ᐃ, 265.75 * ᐃ, ᐃ * 46.84375, ᐃ * 294.75, 51.84375 * ᐃ);
			Ⲇ.bezierCurveTo(301.75 * ᐃ, 55.84375 * ᐃ, 224.75 * ᐃ, 60.84375 * ᐃ, 216.75 * ᐃ, ᐃ * 80.84375);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * ᐃⲆⲆΔΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 193.75, ᐃ * 72.84375);
			Ⲇ.bezierCurveTo(ᐃ * 206.75, 47.84375 * ᐃ, ᐃ * 221.75, ᐃ * 37.84375, ᐃ * 249.75, ᐃ * 35.84375);
			Ⲇ.bezierCurveTo(264.75 * ᐃ, ᐃ * 34.84375, 305.75 * ᐃ, 16.84375 * ᐃ, 300.75 * ᐃ, ᐃ * 24.84375);
			Ⲇ.bezierCurveTo(273.75 * ᐃ, ᐃ * 45.84375, ᐃ * 245.75, 46.84375 * ᐃ, ᐃ * 235.75, ᐃ * 62.84375);
			Ⲇ.bezierCurveTo(218.75 * ᐃ, ᐃ * 82.84375, ᐃ * 215.75, 87.84375 * ᐃ, ᐃ * 199.75, 84.84375 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⵠⵠⵠᐃ], Ⲇⵠⵠⵠ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 126.75, 80.34375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 94.75, ᐃ * 88.34375, 83.75 * ᐃ, 88.34375 * ᐃ, 65.75 * ᐃ, ᐃ * 90.34375);
			Ⲇ.bezierCurveTo(61.75 * ᐃ, 87.34375 * ᐃ, ᐃ * 86.75, 77.34375 * ᐃ, ᐃ * 129.75, 70.34375 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ΔⵠⵠⲆ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 120.75, ᐃ * 72.34375);
			Ⲇ.bezierCurveTo(128.75 * ᐃ, ᐃ * 62.34375, ᐃ * 98.75, 64.34375 * ᐃ, 49.75 * ᐃ, ᐃ * 68.34375);
			Ⲇ.bezierCurveTo(ᐃ * 34.75, 75.34375 * ᐃ, 101.75 * ᐃ, ᐃ * 72.34375, 124.75 * ᐃ, ᐃ * 78.34375);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * 4);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 128.75, ᐃ * 76.34375);
			Ⲇ.bezierCurveTo(111.75 * ᐃ, ᐃ * 54.34375, 69.75 * ᐃ, 48.34375 * ᐃ, ᐃ * 39.75, 50.34375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 26.75, 53.34375 * ᐃ, 86.75 * ᐃ, ᐃ * 59.34375, 123.75 * ᐃ, 78.34375 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 4 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(143.75 * ᐃ, ᐃ * 74.34375);
			Ⲇ.bezierCurveTo(128.75 * ᐃ, 48.34375 * ᐃ, 108.75 * ᐃ, 35.34375 * ᐃ, 81.75 * ᐃ, 35.34375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 63.75, 33.34375 * ᐃ, ᐃ * 26.75, 15.34375 * ᐃ, ᐃ * 29.75, ᐃ * 25.34375);
			Ⲇ.bezierCurveTo(33.75 * ᐃ, 30.34375 * ᐃ, 49.75 * ᐃ, 40.34375 * ᐃ, 70.75 * ᐃ, ᐃ * 49.34375);
			Ⲇ.bezierCurveTo(94.75 * ᐃ, 54.34375 * ᐃ, 104.75 * ᐃ, 72.34375 * ᐃ, 128.75 * ᐃ, ᐃ * 88.34375);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔΔΔᐃ], Δⵠ[2], 4 * ᐃ);
			Ⲇ.translate(0, ᐃ * -28);
			Ⲇ.save();
			Ⲇ.translate(165.25 * ᐃ, 106.84375 * ᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * -56.5, ᐃ * -41.5, 113 * ᐃ, ᐃ * 83, ᐃ * ⲆⲆⲆⵠᐃᐃᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ᐃⲆᐃⵠ], ᐃ * 4);
			Ⲇ.translate(28 * ᐃ, ᐃᐃΔᐃⲆ * ᐃ);
			Ⲇ.translate(0, ᐃ * 8);
			Ⲇ.globalAlpha = .5;
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(83 * ᐃ, 52 * ᐃ);
			Ⲇ.bezierCurveTo(78 * ᐃ, ᐃ * 65, ᐃ * 110, ᐃ * 72, 139 * ᐃ, ᐃ * 71);
			Ⲇ.bezierCurveTo(ᐃ * 176, ᐃ * 71, ᐃ * 193, 61 * ᐃ, ᐃ * 191, 54 * ᐃ);
			Ⲇ.bezierCurveTo(202 * ᐃ, 58 * ᐃ, ᐃ * 198, ᐃ * 72, ᐃ * 187, 75 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 143, ᐃ * 87, 107 * ᐃ, 79 * ᐃ, ᐃ * 89, ᐃ * 75);
			Ⲇ.bezierCurveTo(72 * ᐃ, ᐃ * 69, 74 * ᐃ, ᐃ * 58, 83 * ᐃ, 52 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃⵠ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(0 * ᐃ, -Δᐃᐃⵠⵠ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(83 * ᐃ, ᐃ * 52);
			Ⲇ.bezierCurveTo(78 * ᐃ, 65 * ᐃ, ᐃ * 110, 72 * ᐃ, 139 * ᐃ, ᐃ * 71);
			Ⲇ.bezierCurveTo(176 * ᐃ, ᐃ * 71, ᐃ * 193, 61 * ᐃ, 191 * ᐃ, ᐃ * 54);
			Ⲇ.bezierCurveTo(202 * ᐃ, 58 * ᐃ, ᐃ * 198, 72 * ᐃ, ᐃ * 187, ᐃ * 75);
			Ⲇ.bezierCurveTo(ᐃ * 143, 87 * ᐃ, ᐃ * 107, ᐃ * 79, ᐃ * 89, 75 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 72, 69 * ᐃ, ᐃ * 74, ᐃ * 58, ᐃ * 83, 52 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[6], ᐃ * 4);
			Ⲇ.translate(ᐃ * -28, ᐃ * -ΔⲆΔᐃΔᐃⵠ);
			ᐃΔΔ(Ⲇ, 141.75 * ᐃ, 127.34375 * ᐃ, ᐃ * ᐃⲆⵠⲆΔΔΔ);
			ΔΔ(Ⲇ, Δⵠ[3]);
			ᐃΔΔ(Ⲇ, ᐃ * 191.75, ᐃ * 127.09375, ⵠᐃΔⵠᐃ * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[3]);
			ᐃΔΔ(Ⲇ, 138.75 * ᐃ, ᐃ * 119.34375, ΔΔᐃᐃⵠ * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[4]);
			ᐃΔΔ(Ⲇ, 188.75 * ᐃ, 119.34375 * ᐃ, 5 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[4]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(125.75 * ᐃ, 139.34375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 134.75, 134.34375 * ᐃ, 143.75 * ᐃ, ᐃ * 134.34375, ᐃ * 156.75, ᐃ * 139.34375);
			Ⲇ.bezierCurveTo(153.25 * ᐃ, 141.84375 * ᐃ, ᐃ * 153.25, ᐃ * 141.84375, 149.75 * ᐃ, ᐃ * 144.34375);
			Ⲇ.bezierCurveTo(ᐃ * 140.25, ᐃ * 144.34375, ᐃ * 140.25, 144.34375 * ᐃ, 130.75 * ᐃ, ᐃ * 144.34375);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔΔΔᐃ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(176.75 * ᐃ, 139.34375 * ᐃ);
			Ⲇ.bezierCurveTo(183.75 * ᐃ, 135.34375 * ᐃ, 199.75 * ᐃ, ᐃ * 135.34375, ᐃ * 205.75, ᐃ * 139.34375);
			Ⲇ.bezierCurveTo(203.25 * ᐃ, 141.34375 * ᐃ, ᐃ * 203.25, 141.34375 * ᐃ, ᐃ * 200.75, ᐃ * 143.34375);
			Ⲇ.bezierCurveTo(ᐃ * 190.75, 143.84375 * ᐃ, ᐃ * 190.75, 143.84375 * ᐃ, ᐃ * 180.75, 144.34375 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[Δᐃⵠⵠ])
		} else {
			Ⲇ.globalAlpha = .75;
			Ⲇ.translate(ⵠᐃⲆ, 8 * ᐃ);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 87, 64.5 * ᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * -56, -41.5 * ᐃ, 112 * ᐃ, 83 * ᐃ, ᐃ * ⲆⲆⲆⵠᐃᐃᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ⵠΔᐃ;
			Ⲇ.translate(0, -ᐃΔΔᐃΔ * ᐃ);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 87, 64.5 * ᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * -56, -41.5 * ᐃ, ᐃ * 112, 83 * ᐃ, ᐃ * ⲆᐃᐃᐃΔⲆΔ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔΔΔⵠ], 4 * ᐃ);
			if (Ⲇᐃ == ⵠⵠⲆⵠ) {
				Ⲇ.translate(27 * ᐃ, ᐃ * ΔⵠⵠᐃⲆ);
				ᐃΔΔ(Ⲇ, ᐃ * 35, 75 * ᐃ, ᐃ * 15);
				ΔΔ(Ⲇ, Δⵠ[3]);
				ᐃΔΔ(Ⲇ, 85 * ᐃ, 75 * ᐃ, 15 * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[3]);
				ᐃΔΔ(Ⲇ, ᐃ * 32, ᐃ * 67, ᐃᐃᐃΔⵠ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ᐃⲆⲆΔΔ]);
				ᐃΔΔ(Ⲇ, 82 * ᐃ, 67 * ᐃ, ᐃ * 5);
				ΔΔ(Ⲇ, Δⵠ[4])
			} else if (Ⲇᐃ == 1) {
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(ᐃ * 35, 73 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 40, 72 * ᐃ, 38 * ᐃ, 68 * ᐃ, ᐃ * 35, ᐃ * 67);
				Ⲇ.bezierCurveTo(ᐃ * 25, 67 * ᐃ, 21 * ᐃ, 65 * ᐃ, ᐃ * ᐃΔⲆⵠΔ, ᐃ * 61);
				Ⲇ.bezierCurveTo(ᐃ * ⵠⲆⵠᐃⵠ, 60 * ᐃ, ⵠᐃᐃⲆⲆ * ᐃ, 64 * ᐃ, 20 * ᐃ, ᐃ * 67);
				Ⲇ.bezierCurveTo(ᐃ * ΔΔᐃΔ, ᐃ * 70, ᐃ * 12, 68.5 * ᐃ, 4 * ᐃ, 70 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * ΔΔΔⵠ, ᐃ * 71, ᐃ * 6, 72 * ᐃ, 13 * ᐃ, ᐃ * 73);
				Ⲇ.bezierCurveTo(ᐃ * 12.5, 76.5 * ᐃ, ᐃ * 12.5, 76.5 * ᐃ, ᐃ * 12, ᐃ * 80);
				Ⲇ.bezierCurveTo(ᐃᐃΔΔⵠ * ᐃ, 83 * ᐃ, ᐃ * 15, ᐃ * 80, ᐃ * ΔΔⵠᐃᐃ, 73 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 26.5, ᐃ * 73.5, 26.5 * ᐃ, 73.5 * ᐃ, 35 * ᐃ, 74 * ᐃ);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[ᐃⵠᐃⲆ], Δⵠ[ΔᐃΔᐃᐃ], ᐃ * ⵠⵠᐃΔ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(134 * ᐃ, 64 * ᐃ);
				Ⲇ.bezierCurveTo(141.5 * ᐃ, 64 * ᐃ, 141.5 * ᐃ, ᐃ * 64, ᐃ * 149, ᐃ * 64);
				Ⲇ.bezierCurveTo(153 * ᐃ, 59 * ᐃ, 156 * ᐃ, ᐃ * 56, ᐃ * 159, ᐃ * 56);
				Ⲇ.bezierCurveTo(ᐃ * 161, 57 * ᐃ, ᐃ * 160, ᐃ * 60, 155 * ᐃ, 65 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 165, ᐃ * 71, 168 * ᐃ, 72 * ᐃ, ᐃ * 169, ᐃ * 74);
				Ⲇ.bezierCurveTo(169 * ᐃ, ᐃ * 76, 159 * ᐃ, ᐃ * 71, 156 * ᐃ, 72 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 154, ᐃ * 72, 155 * ᐃ, 75 * ᐃ, 156 * ᐃ, 79 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 155, ᐃ * 81, 153 * ᐃ, 78 * ᐃ, 150 * ᐃ, ᐃ * 72);
				Ⲇ.bezierCurveTo(ᐃ * 142, ᐃ * 71.5, 142 * ᐃ, 71.5 * ᐃ, ᐃ * 134, ᐃ * 71);
				Ⲇ.bezierCurveTo(ᐃ * 130, 69 * ᐃ, ᐃ * 131, ᐃ * 65, 135 * ᐃ, ᐃ * 64);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[ⲆⵠΔΔ], Δⵠ[6], ᐃ * ⵠᐃΔΔ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(ᐃ * 80, ᐃ * 95);
				Ⲇ.bezierCurveTo(ᐃ * 83, ᐃ * 88, ᐃ * 89, 88 * ᐃ, ᐃ * 92, ᐃ * 95);
				Ⲇ.bezierCurveTo(ᐃ * 92, ᐃ * 105, ᐃ * 88, 110 * ᐃ, ᐃ * 86, ᐃ * 110);
				Ⲇ.bezierCurveTo(ᐃ * 83, 107 * ᐃ, 82 * ᐃ, ᐃ * 104, ᐃ * 80, 96 * ᐃ);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[ⵠᐃΔᐃΔ], Δⵠⵠᐃ * ᐃ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(81 * ᐃ, ᐃ * ᐃⲆΔⲆᐃ);
				Ⲇ.bezierCurveTo(82 * ᐃ, ᐃ * 97, ᐃ * 83, 96 * ᐃ, ᐃ * 85, ᐃ * 96);
				Ⲇ.bezierCurveTo(ᐃ * 82, ⵠⵠⲆⲆⵠ * ᐃ, 82 * ᐃ, ᐃ * 101, ᐃ * 83, 103 * ᐃ);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[ΔᐃᐃⲆᐃ]);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(83 * ᐃ, 103 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 83, 102 * ᐃ, ᐃ * 84, ΔᐃΔΔΔ * ᐃ, 86 * ᐃ, ᐃ * 100);
				Ⲇ.bezierCurveTo(ᐃ * 84, 103 * ᐃ, ᐃ * 84, ᐃ * 105, ᐃ * 84, ᐃ * 106);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[8]);
				Ⲇ.translate(ᐃ * 27, ᐃ * 10);
				ᐃΔΔ(Ⲇ, ᐃ * 35, ᐃ * 75, ᐃ * ⲆΔᐃΔⲆ);
				ΔΔ(Ⲇ, Δⵠ[ⵠⵠΔⵠ]);
				ᐃΔΔ(Ⲇ, 85 * ᐃ, ᐃ * 75, 15 * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[3]);
				ᐃΔΔ(Ⲇ, ᐃ * 32, 67 * ᐃ, 5 * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔΔ]);
				ᐃΔΔ(Ⲇ, ᐃ * 82, ᐃ * 67, 5 * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ᐃⲆⵠᐃⵠ])
			} else if (2 == Ⲇᐃ) {
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(48 * ᐃ, ᐃ * 22);
				Ⲇ.bezierCurveTo(85.5 * ᐃ, ᐃ * 22, 85.5 * ᐃ, 22 * ᐃ, ᐃ * 123, 22 * ᐃ);
				Ⲇ.bezierCurveTo(138 * ᐃ, 23 * ᐃ, 147 * ᐃ, ᐃ * 34, 143 * ᐃ, 62 * ᐃ);
				Ⲇ.bezierCurveTo(142 * ᐃ, ᐃ * 67, 144 * ᐃ, 70 * ᐃ, ᐃ * 149, 73 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 147, 77 * ᐃ, 145 * ᐃ, ᐃ * 77, 143 * ᐃ, 77 * ᐃ);
				Ⲇ.bezierCurveTo(141 * ᐃ, ᐃ * 85, ᐃ * 145, 92 * ᐃ, 148 * ᐃ, ᐃ * 97);
				Ⲇ.bezierCurveTo(142 * ᐃ, 103 * ᐃ, ᐃ * 134, 105 * ᐃ, 121 * ᐃ, 106 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 85, 106 * ᐃ, 85 * ᐃ, ᐃ * 106, ᐃ * 49, ᐃ * 106);
				Ⲇ.bezierCurveTo(ᐃ * 32, 104 * ᐃ, ᐃ * 29, ᐃ * 101, ᐃ * 24, 95 * ᐃ);
				Ⲇ.bezierCurveTo(30 * ᐃ, ᐃ * 86, 31 * ᐃ, ᐃ * 85, ᐃ * 30, ᐃ * 78);
				Ⲇ.bezierCurveTo(27.5 * ᐃ, 76 * ᐃ, ᐃ * 27.5, 76 * ᐃ, ᐃ * 25, 74 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 31, ᐃ * 68, 31 * ᐃ, 60 * ᐃ, 30 * ᐃ, 46 * ᐃ);
				Ⲇ.bezierCurveTo(31 * ᐃ, 31 * ᐃ, ᐃ * 37, 23 * ᐃ, 47 * ᐃ, 22 * ᐃ);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 4 * ᐃ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(ᐃ * 30, ᐃ * 44);
				Ⲇ.bezierCurveTo(66 * ᐃ, ᐃ * 48, 99 * ᐃ, 45 * ᐃ, ᐃ * 141, 39 * ᐃ);
				ΔΔ(Ⲇ, undefined, Δⵠ[ᐃΔⲆΔ], ᐃ * ⲆΔᐃᐃΔ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(ᐃ * 30, 67 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 80, 44 * ᐃ, ᐃ * 118, 43 * ᐃ, ᐃ * 141, 60 * ᐃ);
				ΔΔ(Ⲇ, ⵠⲆⵠᐃⲆ, Δⵠ[3], ᐃ * 4);
				Ⲇ.globalAlpha = .4;
				ᐃΔΔ(Ⲇ, ᐃ * 31, 44 * ᐃ, 9 * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[4]);
				ᐃΔΔ(Ⲇ, 42 * ᐃ, ᐃ * 47, ᐃ * ᐃΔⵠⵠⲆ);
				ΔΔ(Ⲇ, Δⵠ[5]);
				ᐃΔΔ(Ⲇ, 70 * ᐃ, 42 * ᐃ, ᐃ * 9);
				ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆⵠⲆ]);
				ᐃΔΔ(Ⲇ, 53 * ᐃ, 45 * ᐃ, ᐃⲆᐃᐃⲆ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[7]);
				ᐃΔΔ(Ⲇ, 103 * ᐃ, 40 * ᐃ, ᐃ * ⵠΔⵠⵠᐃ);
				ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⵠⵠ]);
				ᐃΔΔ(Ⲇ, 116 * ᐃ, 41 * ᐃ, ᐃ * 9);
				ΔΔ(Ⲇ, Δⵠ[5]);
				ᐃΔΔ(Ⲇ, ᐃ * 131, 41 * ᐃ, ΔⲆⵠⲆⵠⵠⵠ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[4]);
				ᐃΔΔ(Ⲇ, 39 * ᐃ, 64 * ᐃ, ᐃ * 9);
				ΔΔ(Ⲇ, Δⵠ[7]);
				ᐃΔΔ(Ⲇ, 51 * ᐃ, 60 * ᐃ, ᐃ * ⵠᐃΔⲆⲆΔΔ);
				ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆⵠⲆ]);
				ᐃΔΔ(Ⲇ, 74 * ᐃ, ᐃ * 53, ᐃ * ⵠⲆⵠΔⵠ);
				ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔⲆ]);
				ᐃΔΔ(Ⲇ, ᐃ * 83, 51 * ᐃ, ᐃ * ⵠΔᐃᐃΔ);
				ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔᐃΔ]);
				ᐃΔΔ(Ⲇ, ᐃ * 95, 51 * ᐃ, ᐃⵠᐃΔΔⵠᐃ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ΔΔΔⲆ]);
				ᐃΔΔ(Ⲇ, ᐃ * 107, 49 * ᐃ, ⵠⲆⵠΔⵠ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠⲆΔ]);
				ᐃΔΔ(Ⲇ, ᐃ * 120, 50 * ᐃ, ᐃ * 9);
				ΔΔ(Ⲇ, Δⵠ[4]);
				ᐃΔΔ(Ⲇ, ᐃ * 137, ᐃ * 57, ᐃ * ⵠᐃΔⲆⲆΔΔ);
				ΔΔ(Ⲇ, Δⵠ[5]);
				Ⲇ.globalAlpha = 1;
				ᐃΔΔ(Ⲇ, ᐃ * 31, 44 * ᐃ, ᐃ * ⵠⵠᐃΔ);
				ΔΔ(Ⲇ, Δⵠ[4]);
				ᐃΔΔ(Ⲇ, ᐃ * 42, 47 * ᐃ, ᐃ * 4);
				ΔΔ(Ⲇ, Δⵠ[5]);
				ᐃΔΔ(Ⲇ, 53 * ᐃ, 45 * ᐃ, ᐃ * ⲆΔᐃᐃΔ);
				ΔΔ(Ⲇ, Δⵠ[ΔᐃᐃᐃⵠΔⲆ]);
				ᐃΔΔ(Ⲇ, 70 * ᐃ, 43 * ᐃ, ⵠᐃΔΔ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[6]);
				ᐃΔΔ(Ⲇ, 50 * ᐃ, 59 * ᐃ, ⵠⲆⲆⵠ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ΔΔΔⲆ]);
				ᐃΔΔ(Ⲇ, 39 * ᐃ, 64 * ᐃ, ᐃ * ⲆΔᐃᐃΔ);
				ΔΔ(Ⲇ, Δⵠ[ᐃⲆⵠⵠⵠ]);
				ᐃΔΔ(Ⲇ, 83 * ᐃ, 51 * ᐃ, 4 * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ᐃⲆⵠᐃⵠ]);
				ᐃΔΔ(Ⲇ, ᐃ * 74, ᐃ * 53, ᐃ * 4);
				ΔΔ(Ⲇ, Δⵠ[8]);
				ᐃΔΔ(Ⲇ, 95 * ᐃ, ᐃ * 51, ᐃ * 4);
				ΔΔ(Ⲇ, Δⵠ[6]);
				ᐃΔΔ(Ⲇ, ᐃ * 103, 41 * ᐃ, ᐃ * 4);
				ΔΔ(Ⲇ, Δⵠ[8]);
				ᐃΔΔ(Ⲇ, 107 * ᐃ, ᐃ * 49, ᐃ * 4);
				ΔΔ(Ⲇ, Δⵠ[ᐃᐃⵠᐃᐃ]);
				ᐃΔΔ(Ⲇ, ᐃ * 116, ᐃ * 41, ᐃ * 4);
				ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠⵠ]);
				ᐃΔΔ(Ⲇ, ᐃ * 131, ᐃ * 41, 4 * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⵠᐃ]);
				ᐃΔΔ(Ⲇ, 137 * ᐃ, 57 * ᐃ, ᐃ * 4);
				ΔΔ(Ⲇ, Δⵠ[ⲆΔⲆⲆⵠ]);
				ᐃΔΔ(Ⲇ, ᐃ * 120, ᐃ * 50, 4 * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃⲆ]);
				Ⲇ.translate(ᐃ * 27, ΔⵠⵠᐃⲆ * ᐃ);
				ᐃΔΔ(Ⲇ, ᐃ * 35, ᐃ * 75, ᐃ * 15);
				ΔΔ(Ⲇ, Δⵠ[9]);
				ᐃΔΔ(Ⲇ, 85 * ᐃ, ᐃ * 75, ᐃⲆΔᐃΔⵠⵠ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠⲆⵠⵠⵠ]);
				ᐃΔΔ(Ⲇ, 32 * ᐃ, 67 * ᐃ, ᐃ * 5);
				ΔΔ(Ⲇ, Δⵠ[ΔΔΔᐃⲆ]);
				ᐃΔΔ(Ⲇ, ᐃ * 82, 67 * ᐃ, 5 * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[10])
			} else if (3 == Ⲇᐃ) {
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(23 * ᐃ, ᐃ * 95);
				Ⲇ.bezierCurveTo(ᐃ * 30, 85 * ᐃ, ᐃ * 30, ᐃ * 83, 30 * ᐃ, ᐃ * 72);
				Ⲇ.bezierCurveTo(30 * ᐃ, ᐃ * 61.5, ᐃ * 30, 61.5 * ᐃ, ᐃ * 30, 51 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 29, ᐃ * 33, 42 * ᐃ, 23 * ᐃ, 54 * ᐃ, ᐃ * 24);
				Ⲇ.bezierCurveTo(86.5 * ᐃ, ᐃ * 24, ᐃ * 86.5, ᐃ * 24, ᐃ * 119, 24 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 135, 24 * ᐃ, 143 * ᐃ, ᐃ * 33, 143 * ᐃ, ᐃ * 47);
				Ⲇ.bezierCurveTo(ᐃ * 143, 63.5 * ᐃ, ᐃ * 143, ᐃ * 63.5, ᐃ * 143, ᐃ * 80);
				Ⲇ.bezierCurveTo(ᐃ * 142, ᐃ * 86, ᐃ * 147, ᐃ * 93, ᐃ * 150, 96 * ᐃ);
				Ⲇ.bezierCurveTo(144 * ᐃ, 107 * ᐃ, 113 * ᐃ, 112 * ᐃ, 84 * ᐃ, ᐃ * 111);
				Ⲇ.bezierCurveTo(52 * ᐃ, ᐃ * 112, ᐃ * 34, ᐃ * 106, 23 * ᐃ, 96 * ᐃ);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[ⲆᐃΔ], Δⵠ[2], ᐃ * Ⲇⵠⵠⵠ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(30 * ᐃ, ᐃ * 81);
				Ⲇ.bezierCurveTo(56 * ᐃ, 99 * ᐃ, ᐃ * 104, ᐃ * 98, 142 * ᐃ, ᐃ * 84);
				Ⲇ.bezierCurveTo(ᐃ * 145.5, ᐃ * 89.5, 145.5 * ᐃ, 89.5 * ᐃ, ᐃ * 149, 95 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 142, ᐃ * 106, 127 * ᐃ, ᐃ * 110, 81 * ᐃ, 110 * ᐃ);
				Ⲇ.bezierCurveTo(36 * ᐃ, ᐃ * 112, 28 * ᐃ, ᐃ * 99, 23 * ᐃ, 95 * ᐃ);
				Ⲇ.bezierCurveTo(31 * ᐃ, ᐃ * 87, 31 * ᐃ, 82 * ᐃ, ᐃ * 30, 81 * ᐃ);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[ᐃΔⲆΔ], Δⵠ[2], ᐃ * 4);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(23 * ᐃ, ᐃ * 95);
				Ⲇ.bezierCurveTo(ᐃ * 30, 85 * ᐃ, ᐃ * 30, 83 * ᐃ, 30 * ᐃ, 72 * ᐃ);
				Ⲇ.bezierCurveTo(30 * ᐃ, ᐃ * 61.5, 30 * ᐃ, 61.5 * ᐃ, 30 * ᐃ, 51 * ᐃ);
				Ⲇ.bezierCurveTo(29 * ᐃ, 33 * ᐃ, ᐃ * 42, ᐃ * 23, ᐃ * 54, ᐃ * 24);
				Ⲇ.bezierCurveTo(ᐃ * 86.5, ᐃ * 24, ᐃ * 86.5, 24 * ᐃ, ᐃ * 119, ᐃ * 24);
				Ⲇ.bezierCurveTo(135 * ᐃ, 24 * ᐃ, ᐃ * 143, ᐃ * 33, ᐃ * 143, ᐃ * 47);
				Ⲇ.bezierCurveTo(143 * ᐃ, ᐃ * 63.5, 143 * ᐃ, 63.5 * ᐃ, ᐃ * 143, 80 * ᐃ);
				Ⲇ.bezierCurveTo(142 * ᐃ, ᐃ * 86, 147 * ᐃ, 93 * ᐃ, 150 * ᐃ, ᐃ * 96);
				Ⲇ.bezierCurveTo(144 * ᐃ, ᐃ * 107, 113 * ᐃ, 112 * ᐃ, 84 * ᐃ, 111 * ᐃ);
				Ⲇ.bezierCurveTo(52 * ᐃ, ᐃ * 112, ᐃ * 34, ᐃ * 106, 23 * ᐃ, ᐃ * 96);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, undefined, Δⵠ[ΔΔⲆⲆ], ᐃ * 4);
				Ⲇ.translate(27 * ᐃ, 10 * ᐃ);
				ᐃΔΔ(Ⲇ, ᐃ * 35, 75 * ᐃ, ⵠⲆⵠⲆᐃ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[6]);
				ᐃΔΔ(Ⲇ, ᐃ * 85, 75 * ᐃ, ⲆΔᐃΔⲆ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[6]);
				ᐃΔΔ(Ⲇ, 32 * ᐃ, 67 * ᐃ, 5 * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ᐃⲆⲆᐃΔⲆⵠ]);
				ᐃΔΔ(Ⲇ, ᐃ * 82, 67 * ᐃ, ᐃ * ᐃᐃᐃᐃⵠ);
				ΔΔ(Ⲇ, Δⵠ[ⲆⲆΔΔᐃ]);
				Ⲇ.translate(ᐃ * -96, ᐃ * -25);
				Ⲇ.scale(1.8, 1.8);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(85 * ᐃ, 21 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 73, ᐃ * 16, ᐃ * 70, 16 * ᐃ, 70 * ᐃ, 26 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 72, ᐃ * 34, 75 * ᐃ, ᐃ * 37, 85 * ᐃ, 26 * ᐃ);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[ΔⵠⵠⲆ], Δⵠ[5], ᐃ * 3);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(ᐃ * 89, ᐃ * 21);
				Ⲇ.bezierCurveTo(104 * ᐃ, ᐃΔⲆⵠΔ * ᐃ, ᐃ * 105, ᐃ * 19, ᐃ * 106, ᐃ * 24);
				Ⲇ.bezierCurveTo(105 * ᐃ, 36 * ᐃ, 97 * ᐃ, ᐃ * 36, ᐃ * 90, ᐃ * 28);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ⵠⲆⲆᐃ], ᐃ * 3);
				ᐃΔΔ(Ⲇ, ᐃ * 87, 23 * ᐃ, 6.324555320336759 * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ΔⵠⵠⲆ], Δⵠ[ΔⵠΔᐃ], 3 * ᐃ)
			} else if (ᐃᐃⵠΔ == Ⲇᐃ) {
				Ⲇ.translate(ᐃ * 27, ᐃ * Ⲇᐃⵠᐃᐃ);
				ᐃΔΔ(Ⲇ, 15 * ᐃ, ᐃ * 76, ᐃ * 9.219544457292887);
				ΔΔ(Ⲇ, Δⵠ[3]);
				ᐃΔΔ(Ⲇ, ᐃ * 106, 76 * ᐃ, 9.219544457292887 * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃⲆ]);
				Ⲇ.translate(ᐃ * -27, -ⵠᐃΔᐃΔ * ᐃ);
				Ⲇ.translate(27 * ᐃ, 10 * ᐃ);
				ᐃΔΔ(Ⲇ, ᐃ * 35, ᐃ * 75, 15 * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆⵠ]);
				ᐃΔΔ(Ⲇ, 85 * ᐃ, 75 * ᐃ, ᐃ * 15);
				ΔΔ(Ⲇ, Δⵠ[ΔⵠⲆᐃᐃ]);
				ᐃΔΔ(Ⲇ, 32 * ᐃ, ᐃ * 67, ᐃ * 5);
				ΔΔ(Ⲇ, Δⵠ[ΔΔⵠΔᐃ]);
				ᐃΔΔ(Ⲇ, 82 * ᐃ, 67 * ᐃ, 5 * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[6]);
				Ⲇ.translate(-27 * ᐃ, ᐃ * -ΔΔΔᐃⲆ);
				Ⲇ.translate(ᐃ * 27, ⲆΔⲆᐃᐃ * ᐃ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(52 * ᐃ, ᐃ * 86);
				Ⲇ.bezierCurveTo(ᐃ * 54, 78 * ᐃ, ᐃ * 65, ᐃ * 80, ᐃ * 67, 85 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 69, 89 * ᐃ, 64 * ᐃ, 99 * ᐃ, 71 * ᐃ, 106 * ᐃ);
				Ⲇ.bezierCurveTo(75 * ᐃ, ᐃ * 109, 61 * ᐃ, 108 * ᐃ, ᐃ * 58, ᐃ * 102);
				Ⲇ.bezierCurveTo(ᐃ * 53, ᐃ * 97, 52 * ᐃ, ᐃ * 91, 52 * ᐃ, ᐃ * 86);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[4])
			} else if (6 == Ⲇᐃ) {
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.translate(ΔᐃⵠΔ * ᐃ, 0);
				Ⲇ.moveTo(ᐃ * 28, ᐃ * 69);
				Ⲇ.bezierCurveTo(26 * ᐃ, 39 * ᐃ, ᐃ * 31, 25 * ᐃ, 52 * ᐃ, 24 * ᐃ);
				Ⲇ.bezierCurveTo(86 * ᐃ, 23.5 * ᐃ, ᐃ * 86, 23.5 * ᐃ, ᐃ * 120, 23 * ᐃ);
				Ⲇ.bezierCurveTo(137 * ᐃ, ᐃ * 23, ᐃ * 145, ᐃ * 33, 144 * ᐃ, 53 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 144.5, ᐃ * 63, ᐃ * 144.5, 63 * ᐃ, ᐃ * 145, ᐃ * 73);
				Ⲇ.bezierCurveTo(ᐃ * 141, ᐃ * 41, 106 * ᐃ, ᐃ * 41, ᐃ * 98, 59 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 92, ᐃ * 69, ᐃ * 94, ᐃ * 98, 90 * ᐃ, ᐃ * 95);
				Ⲇ.bezierCurveTo(ᐃ * 86, 95 * ᐃ, ᐃ * 86, ᐃ * 95, 82 * ᐃ, 95 * ᐃ);
				Ⲇ.bezierCurveTo(79 * ᐃ, ᐃ * 94, 87 * ᐃ, ᐃ * 33, 48 * ᐃ, 47 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 31, 57 * ᐃ, ᐃ * 30, ᐃ * 65, ᐃ * 28, ᐃ * 72);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[3]);
				Ⲇ.save();
				Ⲇ.translate(ᐃ * 87, 64.5 * ᐃ);
				ᐃΔⵠ(Ⲇ, -56 * ᐃ, -41.5 * ᐃ, ᐃ * 112, 83 * ᐃ, 18 * ᐃ);
				Ⲇ.restore();
				ΔΔ(Ⲇ, ΔΔⵠⵠⲆ, Δⵠ[2], ᐃ * 4);
				Ⲇ.translate(ᐃ * 27, 10 * ᐃ);
				ᐃΔΔ(Ⲇ, 35 * ᐃ, 75 * ᐃ, ⲆΔᐃΔⲆ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃⲆ]);
				ᐃΔΔ(Ⲇ, ᐃ * 85, ᐃ * 75, 15 * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠᐃ]);
				ᐃΔΔ(Ⲇ, 32 * ᐃ, 67 * ᐃ, ᐃ * ⲆΔⲆⲆⵠ);
				ΔΔ(Ⲇ, Δⵠ[4]);
				ᐃΔΔ(Ⲇ, ᐃ * 82, 67 * ᐃ, ᐃᐃⵠᐃΔ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⵠᐃ]);
				Ⲇ.scale(1.4, 1.4);
				Ⲇ.translate(ᐃ * -43.5, -32 * ᐃ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(86 * ᐃ, ᐃ * 105);
				Ⲇ.bezierCurveTo(89 * ᐃ, 103 * ᐃ, 90 * ᐃ, ᐃⵠΔᐃⵠ * ᐃ, 92 * ᐃ, ᐃ * 97);
				Ⲇ.bezierCurveTo(ᐃ * 93, 91 * ᐃ, 85 * ᐃ, ᐃ * 90, 81 * ᐃ, ᐃ * 95);
				Ⲇ.bezierCurveTo(ᐃ * 80, 97 * ᐃ, 83 * ᐃ, ᐃ * 101, ᐃ * 85, ᐃ * 105);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[ⲆⲆⵠⵠⲆ], ⵠⵠΔⵠ * ᐃ)
			} else if (Ⲇᐃ == 7) {
				Ⲇ.save();
				Ⲇ.translate(86 * ᐃ, 64.5 * ᐃ);
				ᐃΔⵠ(Ⲇ, -16 * ᐃ, ᐃ * -43.5, ᐃ * 32, 87 * ᐃ, 5 * ᐃ);
				Ⲇ.restore();
				ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠᐃ], Δⵠ[4], ᐃ * 4);
				Ⲇ.translate(0, 6 * ᐃ);
				Ⲇ.globalAlpha = .5;
				Ⲇ.save();
				Ⲇ.translate(85.5 * ᐃ, 47 * ᐃ);
				ᐃΔⵠ(Ⲇ, ᐃ * -58.5, -ᐃΔΔᐃΔ * ᐃ, ᐃ * 117, 16 * ᐃ, 5 * ᐃ);
				Ⲇ.restore();
				ΔΔ(Ⲇ, Δⵠ[0]);
				Ⲇ.translate(0, ᐃ * -6);
				Ⲇ.globalAlpha = 1;
				Ⲇ.save();
				Ⲇ.translate(ᐃ * 85.5, ᐃ * 47);
				ᐃΔⵠ(Ⲇ, ᐃ * -58.5, ᐃ * -8, ᐃ * 117, ᐃ * 16, Ⲇᐃⵠᐃ * ᐃ);
				Ⲇ.restore();
				ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⵠⲆΔⵠ], 4 * ᐃ);
				Ⲇ.translate(0, ᐃ * 7);
				Ⲇ.globalAlpha = .5;
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(ᐃ * 84, 44 * ᐃ);
				Ⲇ.bezierCurveTo(85 * ᐃ, ᐃ * 26, ᐃ * 96, 23 * ᐃ, ᐃ * 103, ᐃ * 30);
				Ⲇ.bezierCurveTo(110 * ᐃ, 36 * ᐃ, 110 * ᐃ, ᐃ * 47, ᐃ * 92, ᐃ * 50);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ]);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(ᐃ * 87, 44 * ᐃ);
				Ⲇ.bezierCurveTo(108 * ᐃ, 47 * ᐃ, 109 * ᐃ, 54 * ᐃ, 102 * ᐃ, ᐃ * 63);
				Ⲇ.bezierCurveTo(92 * ᐃ, ᐃ * 77, ᐃ * 80, 61 * ᐃ, ᐃ * 84, ᐃ * 49);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[0]);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(84 * ᐃ, ᐃ * 43);
				Ⲇ.bezierCurveTo(ᐃ * 86, 24 * ᐃ, 72 * ᐃ, 23 * ᐃ, 68 * ᐃ, ᐃ * 31);
				Ⲇ.bezierCurveTo(56 * ᐃ, ᐃ * 42, ᐃ * 70, 49 * ᐃ, ᐃ * 81, 47 * ᐃ);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[0]);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(ᐃ * 78, ᐃ * 45);
				Ⲇ.bezierCurveTo(ᐃ * 61, 49 * ᐃ, 60 * ᐃ, ᐃ * 58, ᐃ * 68, 64 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 78, ᐃ * 75, 84 * ᐃ, ᐃ * 65, 89 * ᐃ, 54 * ᐃ);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[0]);
				Ⲇ.translate(ⵠΔᐃⵠ, -ᐃⲆⵠⵠⵠ * ᐃ);
				Ⲇ.globalAlpha = 1;
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(84 * ᐃ, 44 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 85, ᐃ * 26, 96 * ᐃ, 23 * ᐃ, 103 * ᐃ, 30 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 110, ᐃ * 36, 110 * ᐃ, ᐃ * 47, 92 * ᐃ, 50 * ᐃ);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[ΔΔᐃΔ], Δⵠ[ⲆΔᐃᐃΔ], ᐃ * ΔⵠⵠⲆ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(87 * ᐃ, 44 * ᐃ);
				Ⲇ.bezierCurveTo(108 * ᐃ, ᐃ * 47, ᐃ * 109, 54 * ᐃ, 102 * ᐃ, ᐃ * 63);
				Ⲇ.bezierCurveTo(92 * ᐃ, 77 * ᐃ, ᐃ * 80, 61 * ᐃ, ᐃ * 84, ᐃ * 49);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * ᐃⲆⵠᐃⵠ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(84 * ᐃ, ᐃ * 43);
				Ⲇ.bezierCurveTo(86 * ᐃ, ᐃ * 24, 72 * ᐃ, ᐃ * 23, ᐃ * 68, 31 * ᐃ);
				Ⲇ.bezierCurveTo(56 * ᐃ, 42 * ᐃ, ᐃ * 70, 49 * ᐃ, ᐃ * 81, ᐃ * 47);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * ᐃⲆⵠᐃⵠ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(78 * ᐃ, ᐃ * 45);
				Ⲇ.bezierCurveTo(ᐃ * 61, 49 * ᐃ, 60 * ᐃ, 58 * ᐃ, 68 * ᐃ, ᐃ * 64);
				Ⲇ.bezierCurveTo(ᐃ * 78, 75 * ᐃ, 84 * ᐃ, 65 * ᐃ, ᐃ * 89, ᐃ * 54);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃᐃⵠΔ * ᐃ);
				Ⲇ.translate(0, ᐃ * ⲆⲆⵠⵠⲆ);
				Ⲇ.globalAlpha = .5;
				Ⲇ.save();
				Ⲇ.translate(85 * ᐃ, 47.5 * ᐃ);
				Ⲇ.rotate(Δⵠⵠⵠ);
				ᐃΔⵠ(Ⲇ, ᐃ * -10, ᐃ * -10.5, ᐃ * 20, ᐃ * 21, ᐃ * ⵠⲆⲆᐃ);
				Ⲇ.restore();
				ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ]);
				Ⲇ.translate(ΔΔᐃ, -ΔΔⵠΔᐃ * ᐃ);
				Ⲇ.globalAlpha = 1;
				Ⲇ.save();
				Ⲇ.translate(85 * ᐃ, 47.5 * ᐃ);
				Ⲇ.rotate(ⵠΔᐃⵠ);
				ᐃΔⵠ(Ⲇ, ᐃ * -ⵠΔΔⲆΔ, ᐃ * -10.5, 20 * ᐃ, 21 * ᐃ, 5 * ᐃ);
				Ⲇ.restore();
				ΔΔ(Ⲇ, Δⵠ[ᐃΔⲆΔ], Δⵠ[4], 4 * ᐃ);
				Ⲇ.translate(27 * ᐃ, 10 * ᐃ);
				ᐃΔΔ(Ⲇ, 35 * ᐃ, ᐃ * 75, ᐃ * 15);
				ΔΔ(Ⲇ, Δⵠ[ΔΔⲆⲆⵠ]);
				ᐃΔΔ(Ⲇ, 85 * ᐃ, 75 * ᐃ, ᐃ * ⵠᐃΔⵠᐃ);
				ΔΔ(Ⲇ, Δⵠ[ΔⵠΔᐃ]);
				ᐃΔΔ(Ⲇ, 32 * ᐃ, ᐃ * 67, ᐃ * ᐃΔΔⲆⵠ);
				ΔΔ(Ⲇ, Δⵠ[ΔΔΔⲆ]);
				ᐃΔΔ(Ⲇ, ᐃ * 82, 67 * ᐃ, ᐃᐃᐃΔⵠ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⵠⲆ])
			} else if (Ⲇᐃ == ᐃᐃᐃⲆ) {
				ΔⲆ.width = ᐃ * 211;
				ΔⲆ.height = 152 * ᐃ;
				Ⲇ.globalAlpha = .5;
				Ⲇ.translate(0, ᐃ * 8);
				Ⲇ.save();
				Ⲇ.translate(ᐃ * 105.5, ᐃ * 76.5);
				ᐃΔⵠ(Ⲇ, ᐃ * -56, ᐃ * -41.5, 112 * ᐃ, ᐃ * 83, ᐃ * ᐃⲆⲆⵠᐃ);
				Ⲇ.restore();
				ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ]);
				Ⲇ.globalAlpha = 1;
				Ⲇ.translate(0, -8 * ᐃ);
				Ⲇ.save();
				Ⲇ.translate(105.5 * ᐃ, 76.5 * ᐃ);
				ᐃΔⵠ(Ⲇ, ᐃ * -56, ᐃ * -41.5, ᐃ * 112, ᐃ * 83, 18 * ᐃ);
				Ⲇ.restore();
				ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⲆᐃⵠΔ], ᐃ * 4);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(68 * ᐃ, ᐃ * 39);
				Ⲇ.bezierCurveTo(48 * ᐃ, ᐃ * 37, 43 * ᐃ, ᐃ * 27, 40 * ᐃ, ᐃ * 12);
				Ⲇ.bezierCurveTo(ᐃ * 31, ᐃ * 25, 20 * ᐃ, ᐃ * ⲆᐃⲆⲆⵠ, ᐃ * ΔⵠᐃⵠⲆⲆΔ, ᐃΔⲆⲆⵠ * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 9, 41 * ᐃ, 40 * ᐃ, ᐃ * 44, ᐃ * 62, ᐃ * 45);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[ΔΔᐃΔ], Δⵠ[2], ᐃ * ΔⵠⵠⲆ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(143 * ᐃ, ᐃ * 38);
				Ⲇ.bezierCurveTo(161 * ᐃ, ᐃ * 40, ᐃ * 169, 24 * ᐃ, 171 * ᐃ, ᐃ * ⵠⵠΔΔΔⲆΔ);
				Ⲇ.bezierCurveTo(ᐃ * 181, 23 * ᐃ, 188 * ᐃ, ⵠΔⵠᐃⲆ * ᐃ, 199 * ᐃ, ᐃ * 9);
				Ⲇ.bezierCurveTo(ᐃ * 204, 35 * ᐃ, ᐃ * 182, ᐃ * 44, 152 * ᐃ, ᐃ * 45);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⲆⲆΔⲆ], ᐃ * 4);
				Ⲇ.save();
				Ⲇ.translate(105.5 * ᐃ, 76.5 * ᐃ);
				ᐃΔⵠ(Ⲇ, -55 * ᐃ, ᐃ * -40.5, 106 * ᐃ, ᐃ * 77, ᐃ * ΔΔΔΔᐃ);
				Ⲇ.restore();
				ΔΔ(Ⲇ, Δⵠ[1]);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(ᐃ * 149, ᐃ * 45);
				Ⲇ.bezierCurveTo(155 * ᐃ, ᐃ * 37, 158 * ᐃ, ᐃ * 37, 161 * ᐃ, 52 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 164, ᐃ * 60, ᐃ * 161, 65 * ᐃ, 152 * ᐃ, 58 * ᐃ);
				Ⲇ.bezierCurveTo(145 * ᐃ, ᐃ * 51, 143 * ᐃ, 49 * ᐃ, ᐃ * 149, ᐃ * 45);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃⲆ], Δⵠ[2], 4 * ᐃ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(ᐃ * 60, ᐃ * 43);
				Ⲇ.bezierCurveTo(ᐃ * 67, ᐃ * 47, ᐃ * 67, ᐃ * 51, 57 * ᐃ, 59 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 50, ᐃ * 64, ᐃ * 47, 64 * ᐃ, 49 * ᐃ, ᐃ * 55);
				Ⲇ.bezierCurveTo(ᐃ * 49, ᐃ * 42, ᐃ * 51, ᐃ * 38, ᐃ * 59, ᐃ * 42);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃᐃΔ], Δⵠ[ᐃᐃᐃⵠ], ⵠⲆⲆⵠ * ᐃ);
				ᐃΔΔ(Ⲇ, 105 * ᐃ, 107 * ᐃ, ᐃ * 10.63014581273465);
				ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆⵠ], Δⵠ[Ⲇⵠⵠᐃⵠ], 4 * ᐃ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(105 * ᐃ, 100 * ᐃ);
				Ⲇ.bezierCurveTo(111 * ᐃ, ᐃ * 101, 113 * ᐃ, 104 * ᐃ, 112 * ᐃ, 109 * ᐃ);
				Ⲇ.closePath();
				ΔΔ(Ⲇ, Δⵠ[7]);
				Ⲇ.translate(ᐃ * 44.5, ᐃ * 22);
				ᐃΔΔ(Ⲇ, ᐃ * 35, 75 * ᐃ, ᐃⲆⵠⲆΔΔΔ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔᐃΔ]);
				ᐃΔΔ(Ⲇ, ᐃ * 85, 75 * ᐃ, ᐃ * ⲆΔᐃΔⲆ);
				ΔΔ(Ⲇ, Δⵠ[8]);
				ᐃΔΔ(Ⲇ, 32 * ᐃ, 67 * ᐃ, ΔΔᐃᐃⵠ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆΔⲆ]);
				ᐃΔΔ(Ⲇ, ᐃ * 82, 67 * ᐃ, ⵠⵠᐃᐃ * ᐃ);
				ΔΔ(Ⲇ, Δⵠ[ᐃΔΔⲆⲆ])
			} else ⵠⲆᐃᐃΔ == Ⲇᐃ && (Ⲇ.save(), Ⲇ.translate(110 * ᐃ, ᐃ * 22), ᐃΔⵠ(Ⲇ, -16 * ᐃ, ᐃ * -ⲆⵠΔΔ, ᐃ * 32, ᐃ * ᐃⵠᐃⵠⲆ, ᐃ * 10), Ⲇ.restore(), ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ΔⲆΔⲆ * ᐃ), Ⲇ.save(), Ⲇ.translate(ᐃ * 109.5, ᐃ * 17), ᐃΔⵠ(Ⲇ, -18.5 * ᐃ, ᐃ * -ᐃΔⵠⲆ, 37 * ᐃ, ᐃ * ⵠⵠⲆⵠᐃ, ᐃ * ⲆΔΔⲆᐃ), Ⲇ.restore(), ΔΔ(Ⲇ, Δⵠ[ⵠΔΔⲆᐃ], Δⵠ[4], ᐃ * ᐃΔⵠⲆ), Ⲇ.globalAlpha = .5, Ⲇ.translate(0, ᐃ * 5), Ⲇ.save(), Ⲇ.translate(86 * ᐃ, ᐃ * 40), ᐃΔⵠ(Ⲇ, -58 * ᐃ, -ᐃΔΔⲆⲆ * ᐃ, 116 * ᐃ, ᐃ * ⲆᐃᐃᐃΔⲆΔ, ᐃ * 6), Ⲇ.restore(), ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ]), Ⲇ.globalAlpha = 1, Ⲇ.translate(0, ᐃ * -5), Ⲇ.save(), Ⲇ.translate(ᐃ * 86, 40 * ᐃ), ᐃΔⵠ(Ⲇ, ᐃ * -58, ᐃ * -ⵠⲆⵠΔⵠ, ᐃ * 116, ᐃ * 18, 6 * ᐃ), Ⲇ.restore(), ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔΔ], Δⵠ[ⲆΔᐃᐃΔ], ⵠⵠΔⵠ * ᐃ), Ⲇ.globalAlpha = .75, Ⲇ.translate(0, ᐃ * 5), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 109, ᐃ * 47), Ⲇ.bezierCurveTo(ᐃ * 110.5, 45 * ᐃ, ᐃ * 110.5, 45 * ᐃ, 112 * ᐃ, 43 * ᐃ), Ⲇ.bezierCurveTo(114 * ᐃ, 44 * ᐃ, 114 * ᐃ, 44 * ᐃ, ᐃ * 116, ᐃ * 45), Ⲇ.bezierCurveTo(117.5 * ᐃ, ᐃ * 43, 117.5 * ᐃ, 43 * ᐃ, 119 * ᐃ, 41 * ᐃ), Ⲇ.bezierCurveTo(121 * ᐃ, 41.5 * ᐃ, 121 * ᐃ, ᐃ * 41.5, 123 * ᐃ, 42 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[0]), Ⲇ.beginPath(), Ⲇ.translate(0, ᐃ * ΔΔᐃᐃⵠ), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 54, 35 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 61.5, 35 * ᐃ, 61.5 * ᐃ, 35 * ᐃ, 69 * ᐃ, ᐃ * 35), Ⲇ.bezierCurveTo(70 * ᐃ, 48 * ᐃ, 70 * ᐃ, 60 * ᐃ, ᐃ * 60, 59 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 45, 61 * ᐃ, 44 * ᐃ, ᐃ * 60, 43 * ᐃ, ᐃ * 53), Ⲇ.bezierCurveTo(ᐃ * 42, ᐃ * 49, ᐃ * 55, ᐃ * 51, ᐃ * 55, 44 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[0]), Ⲇ.globalAlpha = ΔⵠⲆⲆ, Ⲇ.translate(ᐃᐃᐃ, ᐃ * -ΔⵠⲆᐃᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 105, ᐃ * 38), Ⲇ.bezierCurveTo(ᐃ * 110, ᐃ * 48, ᐃ * 110, ᐃ * 50, ᐃ * 105, 53 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 98, ᐃ * 62, 107 * ᐃ, 66 * ᐃ, 117 * ᐃ, 60 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 128, 56 * ᐃ, ᐃ * 130, 56 * ᐃ, ᐃ * 126, 49 * ᐃ), Ⲇ.bezierCurveTo(123.5 * ᐃ, 41.5 * ᐃ, ᐃ * 123.5, 41.5 * ᐃ, 121 * ᐃ, ᐃ * 34), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[8], ᐃ * 3), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 109, 47 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 110.5, 45 * ᐃ, ᐃ * 110.5, ᐃ * 45, ᐃ * 112, 43 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 114, 44 * ᐃ, 114 * ᐃ, 44 * ᐃ, ᐃ * 116, ᐃ * 45), Ⲇ.bezierCurveTo(117.5 * ᐃ, 43 * ᐃ, 117.5 * ᐃ, ᐃ * 43, 119 * ᐃ, ᐃ * 41), Ⲇ.bezierCurveTo(121 * ᐃ, ᐃ * 41.5, ᐃ * 121, ᐃ * 41.5, 123 * ᐃ, 42 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, undefined, Δⵠ[ᐃΔᐃΔᐃ], 3 * ᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(84 * ᐃ, 33 * ᐃ), Ⲇ.bezierCurveTo(88.5 * ᐃ, ᐃ * 34.5, ᐃ * 88.5, ᐃ * 34.5, 93 * ᐃ, ᐃ * 36), Ⲇ.bezierCurveTo(ᐃ * 87, ᐃ * 43, ᐃ * 88, ᐃ * 45, 91 * ᐃ, 46 * ᐃ), Ⲇ.bezierCurveTo(98 * ᐃ, 56 * ᐃ, ᐃ * 91, 57 * ᐃ, 85 * ᐃ, ᐃ * 53), Ⲇ.bezierCurveTo(80 * ᐃ, ᐃ * 50, 78 * ᐃ, ᐃ * 49, ᐃ * 82, ᐃ * 43), Ⲇ.bezierCurveTo(83.5 * ᐃ, 38 * ᐃ, 83.5 * ᐃ, ᐃ * 38, 85 * ᐃ, ᐃ * 33), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[ⵠⵠᐃᐃ], Δⵠ[ⵠⵠΔⲆⵠ], ᐃⵠΔⵠ * ᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(54 * ᐃ, 35 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 61.5, ᐃ * 35, ᐃ * 61.5, 35 * ᐃ, 69 * ᐃ, ᐃ * 35), Ⲇ.bezierCurveTo(ᐃ * 70, 48 * ᐃ, 70 * ᐃ, ᐃ * 60, 60 * ᐃ, ᐃ * 59), Ⲇ.bezierCurveTo(ᐃ * 45, ᐃ * 61, ᐃ * 44, ᐃ * 60, ᐃ * 43, ᐃ * 53), Ⲇ.bezierCurveTo(42 * ᐃ, 49 * ᐃ, ᐃ * 55, 51 * ᐃ, ᐃ * 55, 44 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[ᐃᐃⵠᐃᐃ], Δⵠ[ⵠᐃΔᐃΔ], ᐃ * ᐃⵠΔⵠ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(48 * ᐃ, 49 * ᐃ), Ⲇ.bezierCurveTo(50 * ᐃ, ᐃ * 50, 50 * ᐃ, 50 * ᐃ, 52 * ᐃ, 51 * ᐃ), Ⲇ.bezierCurveTo(50.5 * ᐃ, 52 * ᐃ, ᐃ * 50.5, 52 * ᐃ, ᐃ * 49, ᐃ * 53), Ⲇ.bezierCurveTo(51 * ᐃ, ᐃ * 54.5, 51 * ᐃ, 54.5 * ᐃ, 53 * ᐃ, 56 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 51, ᐃ * 57.5, 51 * ᐃ, ᐃ * 57.5, ᐃ * 49, 59 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, undefined, Δⵠ[ⵠⲆⲆᐃᐃ], 3 * ᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(54 * ᐃ, ᐃ * 39), Ⲇ.bezierCurveTo(ᐃ * 61.5, ᐃ * 39.5, 61.5 * ᐃ, ᐃ * 39.5, 69 * ᐃ, 40 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, ⲆΔΔⵠᐃ, Δⵠ[ⲆΔⵠᐃⵠ], ᐃ * ᐃⵠΔᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 55, 43 * ᐃ), Ⲇ.bezierCurveTo(61.5 * ᐃ, 43.5 * ᐃ, 61.5 * ᐃ, 43.5 * ᐃ, ᐃ * 68, ᐃ * 44), Ⲇ.closePath(), ΔΔ(Ⲇ, ⲆⲆⵠⵠᐃ, Δⵠ[6], ΔⲆΔⵠ * ᐃ), Ⲇ.translate(27 * ᐃ, ᐃ * ⵠⵠᐃᐃ), ᐃΔΔ(Ⲇ, 35 * ᐃ, 75 * ᐃ, Δⵠᐃⵠᐃ * ᐃ), ΔΔ(Ⲇ, Δⵠ[ⲆᐃΔⵠΔΔᐃ]), ᐃΔΔ(Ⲇ, 85 * ᐃ, 75 * ᐃ, ᐃ * ΔⲆΔᐃΔᐃⵠ), ΔΔ(Ⲇ, Δⵠ[ᐃΔⲆⲆⵠ]), ᐃΔΔ(Ⲇ, 32 * ᐃ, ᐃ * 67, ᐃ * 5), ΔΔ(Ⲇ, Δⵠ[10]), ᐃΔΔ(Ⲇ, ᐃ * 82, 67 * ᐃ, ᐃ * ⲆᐃⲆΔ), ΔΔ(Ⲇ, Δⵠ[10]))
		}
		return ΔⲆ
	}

	function ᐃᐃᐃΔⵠⵠΔⲆᐃ(ᐃ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 120 * ᐃ;
		ΔⲆ.height = ᐃ * 110;
		if (Ⲇᐃ == 1) {
			ᐃΔΔ(Ⲇ, 35 * ᐃ, ᐃ * 75, ᐃ * 19.72308292331602);
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[0], ᐃ * ⵠᐃᐃΔ);
			Ⲇ.save();
			Ⲇ.translate(ⵠΔΔᐃΔᐃΔ * ᐃ, 77 * ᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * -ⵠⵠᐃΔ, -4 * ᐃ, Ⲇᐃⵠⵠᐃ * ᐃ, ΔΔᐃⲆⲆ * ᐃ, ᐃ * 10);
			Ⲇ.restore();
			ΔΔ(Ⲇ, undefined, Δⵠ[ΔⲆⲆ], ᐃ * 4);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(11 * ᐃ, ᐃ * 81);
			Ⲇ.bezierCurveTo(13 * ᐃ, ᐃ * 105, ᐃⵠᐃΔΔⵠᐃ * ᐃ, ᐃ * 106, ᐃ * 8, ᐃ * 91);
			ΔΔ(Ⲇ, undefined, Δⵠ[ⵠᐃⲆ], ⲆΔᐃΔⵠ * ᐃ)
		} else if (Ⲇᐃ == 2) {
			ᐃΔΔ(Ⲇ, 85 * ᐃ, 75 * ᐃ, ᐃ * ⵠᐃᐃⲆⲆ);
			ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆ], Δⵠ[0], ᐃ * ᐃⲆⵠᐃⵠ);
			Ⲇ.scale(-1.7 * ᐃ, ᐃ * 1.7);
			Ⲇ.translate(ᐃ * -120, 0 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 20, 95 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 56.5, ᐃ * 54, ᐃ * 56.5, ᐃ * 54, ᐃ * 93, ᐃᐃⵠᐃᐃⲆⲆ * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 89, ᐃ * ⵠᐃᐃᐃⲆⵠΔ, 89 * ᐃ, ᐃ * 13, ᐃ * 85, ᐃ * 13);
			Ⲇ.bezierCurveTo(49.5 * ᐃ, 53 * ᐃ, 49.5 * ᐃ, ᐃ * 53, 14 * ᐃ, ᐃ * 93);
			Ⲇ.bezierCurveTo(ⲆΔᐃΔⲆ * ᐃ, 94 * ᐃ, ᐃ * ⲆΔΔΔⵠ, ᐃ * 94, ᐃ * 19, ᐃ * 95);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠᐃⲆⲆ], ᐃⲆⵠᐃⵠ * ᐃ)
		} else if (3 == Ⲇᐃ) {
			Ⲇ.translate(ᐃ * -52, ⵠⵠⲆⵠ);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 84.5, 36.5 * ᐃ);
			Ⲇ.rotate(-.96);
			ᐃΔⵠ(Ⲇ, -5.5 * ᐃ, ᐃ * -15.5, 11 * ᐃ, ᐃ * 31, ᐃ * ᐃⲆⲆΔΔ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠ], Δⵠ[Ⲇⵠᐃ], ᐃ * 4);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 84, ᐃ * 36);
			Ⲇ.rotate(.64);
			ᐃΔⵠ(Ⲇ, ᐃ * -ΔⵠΔᐃ, ᐃ * -16, ᐃ * 10, ᐃ * 32, ᐃ * 4);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ], Δⵠ[Δⵠᐃ], ᐃⲆⲆΔΔ * ᐃ);
			Ⲇ.save();
			Ⲇ.translate(83.5 * ᐃ, ᐃ * 36.5);
			Ⲇ.rotate(.68);
			ᐃΔⵠ(Ⲇ, -2.5 * ᐃ, -6.5 * ᐃ, ᐃᐃΔᐃ * ᐃ, ᐃ * Ⲇᐃᐃⵠⵠᐃⵠ, ᐃ * ᐃΔⵠⵠ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[1])
		} else if (4 == Ⲇᐃ) {
			ᐃΔΔ(Ⲇ, 35 * ᐃ, ᐃ * 85, ᐃ * 17);
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[Ⲇᐃⵠ], ᐃ * 3);
			ᐃΔΔ(Ⲇ, 85 * ᐃ, 85 * ᐃ, ᐃ * 17);
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⵠⵠⲆⵠ], ᐃ * ᐃⲆᐃΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(53 * ᐃ, ᐃ * 86);
			Ⲇ.bezierCurveTo(59 * ᐃ, ᐃ * 83, ᐃ * 63, 83 * ᐃ, 67 * ᐃ, ᐃ * 86);
			ΔΔ(Ⲇ, undefined, Δⵠ[ⵠⲆⵠⵠ], ᐃ * 4)
		} else if (Ⲇᐃ == ᐃΔΔⲆⵠ) {
			Ⲇ.scale(1.2, 1.2);
			Ⲇ.translate(-27 * ᐃ, -ᐃᐃᐃΔⲆ * ᐃ);
			Ⲇ.scale(1.2, 1.2);
			Ⲇ.translate(-ⵠΔΔΔⵠ * ᐃ, ⵠⲆⵠⵠ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 97, 23 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 105, ᐃ * 24, 107 * ᐃ, ᐃ * 37, ᐃ * 97, 39 * ᐃ);
			Ⲇ.bezierCurveTo(85 * ᐃ, ᐃ * 40, 84 * ᐃ, 22 * ᐃ, ᐃ * 97, ᐃ * 23);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, ⵠⲆⲆⲆⲆ, Δⵠ[0], ⵠΔΔⲆᐃ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 96, 24 * ᐃ);
			Ⲇ.bezierCurveTo(96 * ᐃ, 30.5 * ᐃ, ᐃ * 96, 30.5 * ᐃ, ᐃ * 96, ᐃ * 37);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, undefined, Δⵠ[ΔΔᐃ], ᐃ * 3);
			Ⲇ.translate(0, -2 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 88, ᐃ * 37);
			Ⲇ.bezierCurveTo(ᐃ * 93, ᐃ * 33, 91.5 * ᐃ, ᐃ * 34.5, 95 * ᐃ, ᐃ * 32);
			Ⲇ.bezierCurveTo(ᐃ * 98.5, 34 * ᐃ, ᐃ * 98.5, 34 * ᐃ, ᐃ * 102, 36 * ᐃ);
			ΔΔ(Ⲇ, undefined, Δⵠ[ⵠᐃⲆ], ᐃ * ᐃⵠΔⲆ)
		} else if (6 == Ⲇᐃ) {
			ᐃΔΔ(Ⲇ, ᐃ * 13, 79 * ᐃ, ᐃ * ΔⲆⲆⵠ);
			ΔΔ(Ⲇ, Δⵠ[0]);
			ᐃΔΔ(Ⲇ, ᐃ * 106, ᐃ * 79, 5 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[0])
		} else if (7 == Ⲇᐃ) {
			Ⲇ.translate(ᐃ * ⵠⵠⵠ, ᐃ * ᐃᐃᐃⲆ);
			Ⲇ.globalAlpha = .5;
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(27 * ᐃ, 14.399993896484375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 29, ᐃ * 4.399993896484375, ᐃ * 44, ᐃ * 16.399993896484375, ᐃ * 37, 21.399993896484375 * ᐃ);
			Ⲇ.bezierCurveTo(47 * ᐃ, ᐃ * 17.399993896484375, ᐃ * 45, 36.399993896484375 * ᐃ, 37 * ᐃ, 32.399993896484375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 44, ᐃ * 40.399993896484375, 28 * ᐃ, 47.399993896484375 * ᐃ, ᐃ * 26, ᐃ * 37.399993896484375);
			Ⲇ.bezierCurveTo(ᐃ * 22, 46.399993896484375 * ᐃ, ⵠᐃΔⲆⲆΔΔ * ᐃ, ᐃ * 37.399993896484375, ᐃΔⲆΔΔⲆᐃ * ᐃ, 30.399993896484375 * ᐃ);
			Ⲇ.bezierCurveTo(6 * ᐃ, 34.399993896484375 * ᐃ, ᐃ * ⵠⲆΔⵠⵠ, 15.399993896484375 * ᐃ, ᐃ * 18, ᐃ * 19.399993896484375);
			Ⲇ.bezierCurveTo(ᐃ * 10, 12.399993896484375 * ᐃ, ᐃ * 26, 7.399993896484375 * ᐃ, 26 * ᐃ, 14.399993896484375 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[3]);
			Ⲇ.globalAlpha = ΔⵠΔ;
			Ⲇ.translate(ᐃ * ⵠⲆⵠⵠ, ᐃ * -ⵠⲆⲆᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(27 * ᐃ, ᐃ * 14.399993896484375);
			Ⲇ.bezierCurveTo(ᐃ * 29, 4.399993896484375 * ᐃ, 44 * ᐃ, ᐃ * 16.399993896484375, 37 * ᐃ, ᐃ * 21.399993896484375);
			Ⲇ.bezierCurveTo(ᐃ * 47, 17.399993896484375 * ᐃ, ᐃ * 45, 36.399993896484375 * ᐃ, ᐃ * 37, ᐃ * 32.399993896484375);
			Ⲇ.bezierCurveTo(ᐃ * 44, 40.399993896484375 * ᐃ, ᐃ * 28, ᐃ * 47.399993896484375, ᐃ * 26, ᐃ * 37.399993896484375);
			Ⲇ.bezierCurveTo(ᐃ * 22, 46.399993896484375 * ᐃ, 9 * ᐃ, ᐃ * 37.399993896484375, ᐃᐃⲆⲆⵠ * ᐃ, 30.399993896484375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 6, ᐃ * 34.399993896484375, 9 * ᐃ, ᐃ * 15.399993896484375, ᐃ * 18, 19.399993896484375 * ᐃ);
			Ⲇ.bezierCurveTo(10 * ᐃ, ᐃ * 12.399993896484375, ᐃ * 26, ᐃ * 7.399993896484375, 26 * ᐃ, 14.399993896484375 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * ΔΔⲆᐃ);
			ᐃΔΔ(Ⲇ, 27 * ᐃ, ᐃ * 26.800003051757812, ᐃ * 5);
			ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ])
		} else ⵠᐃΔᐃΔ == Ⲇᐃ && (Ⲇ.translate(ᐃ * -32, -19 * ᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(123 * ᐃ, ᐃ * 46), Ⲇ.bezierCurveTo(132 * ᐃ, ᐃ * 46, 135 * ᐃ, ᐃ * 39, 134 * ᐃ, 33 * ᐃ), Ⲇ.bezierCurveTo(145 * ᐃ, ᐃ * 43, ᐃ * 142, ᐃ * 65, 127 * ᐃ, ᐃ * 66), Ⲇ.bezierCurveTo(ᐃ * 118, 61 * ᐃ, ᐃ * 119, 51 * ᐃ, ᐃ * 123, 46 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ], Δⵠ[ⵠⲆⲆ], ᐃ * ᐃⲆⲆΔΔ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(49 * ᐃ, ᐃ * 32), Ⲇ.bezierCurveTo(ᐃ * 49, 44 * ᐃ, 56 * ᐃ, ᐃ * 44, 61 * ᐃ, ᐃ * 46), Ⲇ.bezierCurveTo(67 * ᐃ, 52 * ᐃ, 65 * ᐃ, ᐃ * 65, 55 * ᐃ, 66 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 37, 60 * ᐃ, 42 * ᐃ, ᐃ * 38, ᐃ * 49, 32 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ΔᐃⵠⲆ], 4 * ᐃ));
		return ΔⲆ
	}

	function ⲆΔⲆΔⲆΔᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 264;
		ΔⲆ.height = ᐃ * 246;
		Ⲇ.translate(ⵠⲆⵠⵠ, ᐃⵠᐃΔⲆ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ⲆᐃΔ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(75 * ᐃ, ᐃ * 54);
		Ⲇ.bezierCurveTo(79 * ᐃ, ᐃ * 21, ᐃ * 131, 13 * ᐃ, ᐃ * 153, 36 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 204, 27 * ᐃ, 221 * ᐃ, 52 * ᐃ, 216 * ᐃ, 83 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 241, 103 * ᐃ, ᐃ * 232, ᐃ * 138, ᐃ * 214, 147 * ᐃ);
		Ⲇ.bezierCurveTo(223 * ᐃ, ᐃ * 184, 201 * ᐃ, ᐃ * 200, 175 * ᐃ, 199 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 156, 218 * ᐃ, 135 * ᐃ, 222 * ᐃ, 114 * ᐃ, ᐃ * 203);
		Ⲇ.bezierCurveTo(ᐃ * 62, ᐃ * 213, 66 * ᐃ, ᐃ * 189, 59 * ᐃ, 170 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 27, ᐃ * 164, 31 * ᐃ, 134 * ᐃ, ᐃ * 38, 123 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 11, ᐃ * 80, 51 * ᐃ, ᐃ * 52, ᐃ * 75, ᐃ * 54);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.translate(0, -ⵠΔΔⲆΔ * ᐃ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 75, ᐃ * 54);
		Ⲇ.bezierCurveTo(79 * ᐃ, 21 * ᐃ, 131 * ᐃ, 13 * ᐃ, ᐃ * 153, ᐃ * 36);
		Ⲇ.bezierCurveTo(ᐃ * 204, 27 * ᐃ, ᐃ * 221, 52 * ᐃ, ᐃ * 216, ᐃ * 83);
		Ⲇ.bezierCurveTo(ᐃ * 241, 103 * ᐃ, 232 * ᐃ, 138 * ᐃ, ᐃ * 214, 147 * ᐃ);
		Ⲇ.bezierCurveTo(223 * ᐃ, 184 * ᐃ, 201 * ᐃ, ᐃ * 200, ᐃ * 175, ᐃ * 199);
		Ⲇ.bezierCurveTo(ᐃ * 156, 218 * ᐃ, ᐃ * 135, ᐃ * 222, ᐃ * 114, 203 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 62, 213 * ᐃ, ᐃ * 66, ᐃ * 189, ᐃ * 59, 170 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 27, 164 * ᐃ, 31 * ᐃ, 134 * ᐃ, ᐃ * 38, ᐃ * 123);
		Ⲇ.bezierCurveTo(ᐃ * ΔᐃⲆⲆⲆⲆⲆ, ᐃ * 80, 51 * ᐃ, 52 * ᐃ, ᐃ * 75, 54 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], Δᐃᐃⵠⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 121, ᐃ * 102);
		Ⲇ.bezierCurveTo(111 * ᐃ, 80 * ᐃ, 110 * ᐃ, 66 * ᐃ, 108 * ᐃ, 51 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 119, ᐃ * 65, ᐃ * 129, ᐃ * 85, 135 * ᐃ, 99 * ᐃ);
		Ⲇ.bezierCurveTo(142 * ᐃ, 67 * ᐃ, ᐃ * 146, 60 * ᐃ, ᐃ * 152, ᐃ * 50);
		Ⲇ.bezierCurveTo(ᐃ * 154, ᐃ * 71, 152 * ᐃ, ᐃ * 85, ᐃ * 149, 104 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 166, 88 * ᐃ, 175 * ᐃ, 83 * ᐃ, ᐃ * 188, ᐃ * 78);
		Ⲇ.bezierCurveTo(ᐃ * 179, 91 * ᐃ, ᐃ * 170, ᐃ * 103, ᐃ * 160, ᐃ * 112);
		Ⲇ.bezierCurveTo(186 * ᐃ, 107 * ᐃ, 191 * ᐃ, 107 * ᐃ, ᐃ * 204, 108 * ᐃ);
		Ⲇ.bezierCurveTo(195 * ᐃ, 114 * ᐃ, 179 * ᐃ, ᐃ * 120, 163 * ᐃ, 123 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 183, ᐃ * 130, ᐃ * 186, ᐃ * 135, 192 * ᐃ, ᐃ * 140);
		Ⲇ.bezierCurveTo(ᐃ * 179, 141 * ᐃ, 164 * ᐃ, ᐃ * 139, 153 * ᐃ, 135 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 158, 145 * ᐃ, 163 * ᐃ, 159 * ᐃ, 165 * ᐃ, 177 * ᐃ);
		Ⲇ.bezierCurveTo(154 * ᐃ, 166 * ᐃ, 145 * ᐃ, 153 * ᐃ, 138 * ᐃ, ᐃ * 139);
		Ⲇ.bezierCurveTo(133 * ᐃ, 155 * ᐃ, ᐃ * 125, ᐃ * 170, ᐃ * 117, ᐃ * 182);
		Ⲇ.bezierCurveTo(116 * ᐃ, ᐃ * 160, 119 * ᐃ, ᐃ * 151, 124 * ᐃ, ᐃ * 138);
		Ⲇ.bezierCurveTo(ᐃ * 107, 150 * ᐃ, 95 * ᐃ, 156 * ᐃ, ᐃ * 82, ᐃ * 159);
		Ⲇ.bezierCurveTo(ᐃ * 94, 140 * ᐃ, ᐃ * 101, ᐃ * 136, 113 * ᐃ, 128 * ᐃ);
		Ⲇ.bezierCurveTo(78 * ᐃ, ᐃ * 123, 75 * ᐃ, ᐃ * 121, 67 * ᐃ, 118 * ᐃ);
		Ⲇ.bezierCurveTo(85 * ᐃ, ᐃ * 112, 94 * ᐃ, ᐃ * 112, ᐃ * 111, 113 * ᐃ);
		Ⲇ.bezierCurveTo(89 * ᐃ, ᐃ * 97, 85 * ᐃ, 93 * ᐃ, 78 * ᐃ, 82 * ᐃ);
		Ⲇ.bezierCurveTo(92 * ᐃ, ᐃ * 85, ᐃ * 101, ᐃ * 90, 121 * ᐃ, ᐃ * 102);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 128, 103 * ᐃ);
		Ⲇ.bezierCurveTo(111 * ᐃ, 112 * ᐃ, ᐃ * 117, 136 * ᐃ, 140 * ᐃ, 130 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 151, ᐃ * 126, ᐃ * 156, ᐃ * 115, ᐃ * 155, ᐃ * 107);
		Ⲇ.bezierCurveTo(ᐃ * 155, ᐃ * 96, ᐃ * 154, 94 * ᐃ, 148 * ᐃ, 94 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 141, 94 * ᐃ, 146 * ᐃ, ᐃ * 104, 136 * ᐃ, 104 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠᐃ], Δⵠ[4], ᐃⲆᐃⲆ * ᐃ);
		return ΔⲆ
	}

	function ⲆΔⵠⲆⲆᐃᐃΔΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 350 * ᐃ;
		ΔⲆ.height = 350 * ᐃ;
		Ⲇ.translate(0, ᐃ * ⵠⵠⲆᐃᐃⵠᐃ);
		Ⲇ.globalAlpha = .5;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 174, ᐃ * 172);
		ᐃΔⵠ(Ⲇ, -81 * ᐃ, -60 * ᐃ, 162 * ᐃ, 120 * ᐃ, 26 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.translate(ⵠⲆᐃ, ᐃ * -15);
		Ⲇ.globalAlpha = 1;
		Ⲇ.save();
		Ⲇ.translate(174 * ᐃ, 172 * ᐃ);
		ᐃΔⵠ(Ⲇ, -81 * ᐃ, -60 * ᐃ, 162 * ᐃ, ᐃ * 120, 26 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ᐃⲆᐃⵠ], ᐃ * 7);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 179, ᐃ * 211);
		Ⲇ.bezierCurveTo(ᐃ * 183, 204.5 * ᐃ, ᐃ * 183, 204.5 * ᐃ, ᐃ * 187, 198 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 198.5, 191.5 * ᐃ, 198.5 * ᐃ, ᐃ * 191.5, ᐃ * 210, 185 * ᐃ);
		Ⲇ.bezierCurveTo(215 * ᐃ, ᐃ * 176.5, 215 * ᐃ, ᐃ * 176.5, 220 * ᐃ, ᐃ * 168);
		Ⲇ.bezierCurveTo(ᐃ * 213, 173.5 * ᐃ, 213 * ᐃ, ᐃ * 173.5, ᐃ * 206, ᐃ * 179);
		Ⲇ.bezierCurveTo(195 * ᐃ, 184 * ᐃ, 195 * ᐃ, ᐃ * 184, 184 * ᐃ, 189 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(167 * ᐃ, ᐃ * 233);
		Ⲇ.bezierCurveTo(ᐃ * 167, 207 * ᐃ, 167 * ᐃ, 207 * ᐃ, ᐃ * 167, ᐃ * 181);
		Ⲇ.bezierCurveTo(167 * ᐃ, 166 * ᐃ, ᐃ * 157, ᐃ * 164, 148 * ᐃ, 165 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 120, 165 * ᐃ, ᐃ * 120, 165 * ᐃ, ᐃ * 92, 165 * ᐃ);
		Ⲇ.bezierCurveTo(92 * ᐃ, ᐃ * 186.5, 92 * ᐃ, ᐃ * 186.5, ᐃ * 92, ᐃ * 208);
		Ⲇ.bezierCurveTo(ᐃ * 93, 222 * ᐃ, 102 * ᐃ, ᐃ * 234, 119 * ᐃ, ᐃ * 233);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔᐃ], Δⵠ[2], ᐃⲆᐃΔΔ * ᐃ);
		ᐃΔΔ(Ⲇ, 152 * ᐃ, ᐃ * 179, ᐃ * 6);
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔΔ]);
		ᐃΔΔ(Ⲇ, 107 * ᐃ, ᐃ * 179, ᐃ * ⲆⲆⵠⵠⲆ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔΔᐃ]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 210, 200 * ᐃ);
		Ⲇ.rotate(.2);
		ᐃᐃⲆΔ(Ⲇ, ᐃᐃⲆⵠⲆ, 32 * ᐃ, ΔΔΔᐃⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆᐃ], Δⵠ[ᐃᐃΔⵠ], ᐃ * 7);
		Ⲇ.save();
		Ⲇ.translate(210 * ᐃ, 200 * ᐃ);
		Ⲇ.rotate(1.0471975511965976);
		ᐃᐃⲆΔ(Ⲇ, ⲆΔⵠᐃⵠ, ᐃ * 19, ΔΔΔⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[7], ᐃ * ΔⵠΔΔᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 205, 193 * ᐃ);
		Ⲇ.rotate(ᐃᐃⲆ);
		ᐃᐃⲆΔ(Ⲇ, ΔᐃΔᐃᐃ, 10 * ᐃ, 3 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[8]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 137, 200 * ᐃ);
		Ⲇ.rotate(-.5235987755982988);
		ᐃᐃⲆΔ(Ⲇ, ⵠⲆⲆᐃᐃ, 20 * ᐃ, ᐃ * 5);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠΔⲆⵠ], Δⵠ[ΔⵠΔΔᐃ], ᐃ * ⲆΔᐃⲆᐃ);
		Ⲇ.save();
		Ⲇ.translate(131 * ᐃ, 194 * ᐃ);
		ᐃᐃⲆΔ(Ⲇ, 6, ⵠⲆⲆⵠΔ * ᐃ, ᐃ * ᐃⲆΔΔ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔΔⲆⵠ]);
		Ⲇ.save();
		Ⲇ.translate(150.5 * ᐃ, 120 * ᐃ);
		Ⲇ.rotate(ⵠⵠⲆⵠ);
		ᐃΔⵠ(Ⲇ, -19.5 * ᐃ, -ᐃᐃᐃΔⲆ * ᐃ, 39 * ᐃ, ᐃΔᐃᐃⲆ * ᐃ, ᐃ * 0);
		Ⲇ.restore();
		ΔΔ(Ⲇ, ⲆΔΔⵠᐃ, Δⵠ[ᐃⲆᐃⵠ], ᐃ * 7);
		return ΔⲆ
	}

	function ᐃΔⵠᐃⵠⵠΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 120 * ᐃ;
		var ⲆΔⲆ = ᐃ * 110;
		var w2 = ⲆⲆᐃ / 2;
		var ⲆⲆⲆΔΔ = ⲆΔⲆ / 2;
		var ⵠⵠⵠⵠ = ᐃ * 20;
		var ⵠⲆⲆΔᐃⵠⵠ = ᐃ * 112;
		var ⲆⵠⲆᐃⵠⵠⵠ = ᐃ * 82;
		var ⵠⵠΔᐃⵠⲆΔᐃΔ = ⵠⲆⲆΔᐃⵠⵠ / ΔᐃⵠΔ;
		var ⵠⵠΔⲆᐃᐃⵠᐃᐃ = ⲆⵠⲆᐃⵠⵠⵠ / ᐃᐃΔⵠ;
		var ⵠΔΔ = ᐃ * ⲆΔᐃΔⵠ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(w2, ⲆⲆⲆΔΔ);
		ᐃΔⵠ(Ⲇ, -ⵠⵠΔᐃⵠⲆΔᐃΔ, -ⵠⵠΔⲆᐃᐃⵠᐃᐃ, ⵠⲆⲆΔᐃⵠⵠ, ⲆⵠⲆᐃⵠⵠⵠ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ, Δⵠ, ⵠΔΔ);
		return ΔⲆ
	}

	function ᐃᐃᐃⲆⵠᐃⲆᐃΔ(ᐃ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 175 * ᐃ;
		ΔⲆ.height = ᐃ * 150;
		if (Ⲇᐃ == ⵠⲆΔ) {
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * -88, ᐃ * -95);
			Ⲇ.save();
			Ⲇ.translate(174 * ᐃ, ᐃ * 195.5);
			ᐃΔⵠ(Ⲇ, ᐃ * -82, ᐃ * -46.5, ᐃ * 164, ᐃ * 93, ᐃ * 30);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ΔⵠΔ;
			Ⲇ.save();
			Ⲇ.translate(174 * ᐃ, 170.5 * ᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * -81, -59.5 * ᐃ, 162 * ᐃ, ᐃ * 119, ᐃ * 28);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 6.5 * ᐃ);
			ᐃΔΔ(Ⲇ, 137 * ᐃ, 200 * ᐃ, 22.090722034374522 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[3]);
			ᐃΔΔ(Ⲇ, ᐃ * 210, ᐃ * 200, 22.20360331117452 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⵠ]);
			ᐃΔΔ(Ⲇ, 131 * ᐃ, ᐃ * 194, 7 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[4]);
			ᐃΔΔ(Ⲇ, ᐃ * 206, ᐃ * 194, Δᐃⵠᐃⵠ * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔⲆ]);
			Ⲇ.translate(0, ⵠⲆΔⲆ * ᐃ);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 138.5, ᐃ * 180.5);
			ᐃΔⵠ(Ⲇ, -22.5 * ᐃ, -11.5 * ᐃ, 45 * ᐃ, 23 * ᐃ, ⵠⵠⵠΔ * ᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[Δⵠᐃ]);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 207, 177.5 * ᐃ);
			ᐃΔⵠ(Ⲇ, -31 * ᐃ, ᐃ * -9.5, 62 * ᐃ, ᐃᐃⲆⵠᐃ * ᐃ, ᐃ * 0);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃ]);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 171.5, 220 * ᐃ);
			ᐃΔⵠ(Ⲇ, -52.5 * ᐃ, -ᐃᐃᐃⵠ * ᐃ, 105 * ᐃ, ᐃ * ΔⵠⵠⲆ, ⵠⵠⵠ * ᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ΔⵠⲆⲆ])
		} else if (1 == Ⲇᐃ) {
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(-88 * ᐃ, ᐃ * -95);
			Ⲇ.save();
			Ⲇ.translate(174 * ᐃ, ᐃ * 195.5);
			ᐃΔⵠ(Ⲇ, -82 * ᐃ, ᐃ * -46.5, ᐃ * 164, 93 * ᐃ, ᐃ * 30);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 174, 170.5 * ᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * -81, ᐃ * -59.5, ᐃ * 162, 119 * ᐃ, ᐃ * 28);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 6.5 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(183 * ᐃ, ᐃ * 223);
			Ⲇ.bezierCurveTo(ᐃ * 193, 187 * ᐃ, ᐃ * 215, 193 * ᐃ, 227 * ᐃ, 159 * ᐃ);
			Ⲇ.bezierCurveTo(227 * ᐃ, 194 * ᐃ, 209 * ᐃ, ᐃ * 187, ᐃ * 183, ᐃ * 223);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔᐃ]);
			ᐃΔΔ(Ⲇ, 137 * ᐃ, 200 * ᐃ, ᐃ * 22.090722034374522);
			ΔΔ(Ⲇ, Δⵠ[3]);
			ᐃΔΔ(Ⲇ, ᐃ * 210, 200 * ᐃ, ᐃ * 22.20360331117452);
			ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃΔ]);
			ᐃΔΔ(Ⲇ, 131 * ᐃ, ᐃ * 190, ᐃ * 7);
			ΔΔ(Ⲇ, Δⵠ[4]);
			ᐃΔΔ(Ⲇ, 204 * ᐃ, 190 * ᐃ, 7 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆⵠ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(120 * ᐃ, ᐃ * 154);
			Ⲇ.bezierCurveTo(125 * ᐃ, ᐃ * 146, 131 * ᐃ, 143 * ᐃ, ᐃ * 147, ᐃ * 137);
			Ⲇ.bezierCurveTo(139 * ᐃ, 147 * ᐃ, 129 * ᐃ, 152 * ᐃ, ᐃ * 121, ᐃ * 154);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ᐃⵠᐃⲆ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(120 * ᐃ, ᐃ * 162);
			Ⲇ.bezierCurveTo(ᐃ * 134, 153 * ᐃ, ᐃ * 139, 149 * ᐃ, 150 * ᐃ, 144 * ᐃ);
			Ⲇ.bezierCurveTo(143 * ᐃ, ᐃ * 155, 128 * ᐃ, ᐃ * 163, ᐃ * 121, 161 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⵠᐃᐃ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(127 * ᐃ, ᐃ * 142);
			Ⲇ.bezierCurveTo(ᐃ * 129, 151 * ᐃ, 132 * ᐃ, ᐃ * 157, 137 * ᐃ, ᐃ * 162);
			Ⲇ.bezierCurveTo(134 * ᐃ, 152 * ᐃ, 132 * ᐃ, ᐃ * 146, ᐃ * 127, ᐃ * 142);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃⵠ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 135, 140 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 141, 144 * ᐃ, ᐃ * 143, 150 * ᐃ, 143 * ᐃ, 157 * ᐃ);
			Ⲇ.bezierCurveTo(138 * ᐃ, ᐃ * 150, 136 * ᐃ, 145 * ᐃ, ᐃ * 135, 140 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[5])
		} else if (2 == Ⲇᐃ) {
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * -88, -95 * ᐃ);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 174, ᐃ * 195.5);
			ᐃΔⵠ(Ⲇ, -82 * ᐃ, ᐃ * -46.5, 164 * ᐃ, ᐃ * 93, 30 * ᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆ]);
			Ⲇ.globalAlpha = Δᐃⵠⵠ;
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 174, ᐃ * 170.5);
			ᐃΔⵠ(Ⲇ, ᐃ * -81, ᐃ * -59.5, ᐃ * 162, ᐃ * 119, ᐃ * 28);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⲆᐃΔⲆ], ᐃ * 6.5);
			ᐃΔΔ(Ⲇ, ᐃ * 137, 200 * ᐃ, ᐃ * 22.090722034374522);
			ΔΔ(Ⲇ, Δⵠ[ⲆᐃᐃΔ]);
			ᐃΔΔ(Ⲇ, ᐃ * 210, 200 * ᐃ, ᐃ * 22.20360331117452);
			ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⲆ]);
			ᐃΔΔ(Ⲇ, 130 * ᐃ, ᐃ * 192, ᐃ * ΔⵠΔΔᐃ);
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆⵠ]);
			ᐃΔΔ(Ⲇ, ᐃ * 203, ᐃ * 192, Δᐃⵠᐃⵠ * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃⲆ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(115 * ᐃ, 224 * ᐃ);
			Ⲇ.bezierCurveTo(173 * ᐃ, 223.5 * ᐃ, ᐃ * 173, ᐃ * 223.5, 231 * ᐃ, 223 * ᐃ);
			Ⲇ.bezierCurveTo(230 * ᐃ, ᐃ * 222, ᐃ * 198, ᐃ * 223, ᐃ * 186, 209 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 173.5, ᐃ * 209, ᐃ * 173.5, ᐃ * 209, ᐃ * 161, ᐃ * 209);
			Ⲇ.bezierCurveTo(146 * ᐃ, ᐃ * 224, ᐃ * 114, ᐃ * 223, 116 * ᐃ, 224 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 112, ᐃ * 193);
			Ⲇ.bezierCurveTo(ᐃ * 154, ᐃ * 182, 194 * ᐃ, ᐃ * 183, 234 * ᐃ, ᐃ * 192);
			Ⲇ.bezierCurveTo(217 * ᐃ, ᐃ * 154, 148 * ᐃ, ᐃ * 127, ᐃ * 112, ᐃ * 192);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1])
		} else if (ΔΔᐃΔ == Ⲇᐃ) {
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * -88, -95 * ᐃ);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 174, ᐃ * 195.5);
			ᐃΔⵠ(Ⲇ, -82 * ᐃ, -46.5 * ᐃ, 164 * ᐃ, 93 * ᐃ, ᐃ * 30);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.save();
			Ⲇ.translate(174 * ᐃ, 170.5 * ᐃ);
			ᐃΔⵠ(Ⲇ, -81 * ᐃ, ᐃ * -59.5, 162 * ᐃ, ᐃ * 119, ᐃ * 28);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⲆ], Δⵠ[ⲆⲆⲆⲆ], 6.5 * ᐃ);
			ᐃΔΔ(Ⲇ, 137 * ᐃ, 200 * ᐃ, 22.090722034374522 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⵠ]);
			ᐃΔΔ(Ⲇ, 210 * ᐃ, ᐃ * 200, 22.20360331117452 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[3]);
			ᐃΔΔ(Ⲇ, 130 * ᐃ, 192 * ᐃ, 7 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⵠ]);
			ᐃΔΔ(Ⲇ, ᐃ * 203, ᐃ * 192, 7 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⵠᐃ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 120, ᐃ * 176);
			Ⲇ.bezierCurveTo(175 * ᐃ, 193 * ᐃ, ᐃ * 147.5, ᐃ * 184.5, 175 * ᐃ, ᐃ * 193);
			Ⲇ.bezierCurveTo(ᐃ * 200, 184.5 * ᐃ, ᐃ * 200, 184.5 * ᐃ, 225 * ᐃ, ᐃ * 176);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 226, ᐃ * 223);
			Ⲇ.bezierCurveTo(ᐃ * 173.5, ᐃ * 223, 173.5 * ᐃ, 223 * ᐃ, 121 * ᐃ, 223 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 148, 218 * ᐃ, 148 * ᐃ, ᐃ * 218, ᐃ * 175, 213 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1])
		} else if (Ⲇᐃ == ᐃᐃⵠΔ) {
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(-88 * ᐃ, -95 * ᐃ);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 174, ᐃ * 195.5);
			ᐃΔⵠ(Ⲇ, -82 * ᐃ, -46.5 * ᐃ, 164 * ᐃ, ᐃ * 93, ᐃ * 30);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆ]);
			Ⲇ.globalAlpha = ⵠΔᐃ;
			Ⲇ.save();
			Ⲇ.translate(174 * ᐃ, 170.5 * ᐃ);
			Ⲇ.rotate(ⵠⵠⵠ);
			ᐃΔⵠ(Ⲇ, -81 * ᐃ, -59.5 * ᐃ, ᐃ * 162, ᐃ * 119, ᐃ * 28);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[Δⵠᐃ], Δⵠ[ⵠΔⵠΔ], ᐃ * 6.5);
			ᐃΔΔ(Ⲇ, ᐃ * 137, 200 * ᐃ, ᐃ * 22.090722034374522);
			ΔΔ(Ⲇ, Δⵠ[3]);
			ᐃΔΔ(Ⲇ, ᐃ * 210, 200 * ᐃ, ᐃ * 22.20360331117452);
			ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⲆ]);
			ᐃΔΔ(Ⲇ, 137 * ᐃ, ᐃ * 203, 8 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[4]);
			ᐃΔΔ(Ⲇ, 209 * ᐃ, 203 * ᐃ, 8 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[4]);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 174.5, ᐃ * 218);
			Ⲇ.rotate(Ⲇᐃⵠ);
			ᐃΔⵠ(Ⲇ, -60.5 * ᐃ, -ⲆΔⲆⲆⵠ * ᐃ, ᐃ * 121, ᐃ * ⵠⵠΔⲆᐃ, 28 * ᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ΔᐃⲆⲆ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 113, ᐃ * 190);
			Ⲇ.bezierCurveTo(ᐃ * 144, 181.5 * ᐃ, ᐃ * 144, 181.5 * ᐃ, ᐃ * 175, ᐃ * 173);
			Ⲇ.bezierCurveTo(ᐃ * 205, 182 * ᐃ, ᐃ * 205, 182 * ᐃ, 235 * ᐃ, 191 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 242, 141 * ᐃ, 106 * ᐃ, 119 * ᐃ, 112 * ᐃ, 189 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⲆΔΔΔ])
		} else if (5 == Ⲇᐃ) {
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(-88 * ᐃ, ᐃ * -95);
			Ⲇ.save();
			Ⲇ.translate(174 * ᐃ, ᐃ * 195.5);
			ᐃΔⵠ(Ⲇ, ᐃ * -82, ᐃ * -46.5, 164 * ᐃ, ᐃ * 93, ᐃ * 30);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 174, ᐃ * 170.5);
			Ⲇ.rotate(ᐃᐃⲆ);
			ᐃΔⵠ(Ⲇ, ᐃ * -81, -59.5 * ᐃ, ᐃ * 162, ᐃ * 119, ᐃ * 28);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔᐃⵠΔ], 6.5 * ᐃ);
			ᐃΔΔ(Ⲇ, ᐃ * 137, 200 * ᐃ, ᐃ * 22.090722034374522);
			ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃⲆ]);
			ᐃΔΔ(Ⲇ, ᐃ * 210, 200 * ᐃ, 22.20360331117452 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ⲆᐃᐃΔ]);
			ᐃΔΔ(Ⲇ, 140 * ᐃ, 196 * ᐃ, 7 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[Ⲇⵠⵠⵠ]);
			ᐃΔΔ(Ⲇ, 213 * ᐃ, ᐃ * 196, ⲆᐃΔⲆⲆΔᐃ * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⵠ]);
			ᐃΔΔ(Ⲇ, 131 * ᐃ, 206 * ᐃ, ΔⲆΔⲆ * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[4]);
			ᐃΔΔ(Ⲇ, 204 * ᐃ, 206 * ᐃ, ᐃ * ⲆⵠⲆᐃ);
			ΔΔ(Ⲇ, Δⵠ[4]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 113, 181 * ᐃ);
			Ⲇ.bezierCurveTo(159 * ᐃ, ᐃ * 204, 190 * ᐃ, 202 * ᐃ, ᐃ * 235, 181 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 241, 137 * ᐃ, ᐃ * 109, ᐃ * 130, ᐃ * 112, 180 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⲆ]);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 174, 220 * ᐃ);
			Ⲇ.rotate(ⲆⵠⲆⲆ);
			ᐃΔⵠ(Ⲇ, ᐃ * -56, -ⲆᐃⲆΔ * ᐃ, ᐃ * 112, ᐃ * 10, ΔᐃⲆⲆ * ᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔ])
		} else if (6 == Ⲇᐃ) {
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(-88 * ᐃ, ᐃ * -95);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 174, 195.5 * ᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * -82, ᐃ * -46.5, ᐃ * 164, ᐃ * 93, ᐃ * 30);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ΔΔΔᐃ;
			Ⲇ.save();
			Ⲇ.translate(174 * ᐃ, 170.5 * ᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * -81, -59.5 * ᐃ, ᐃ * 162, 119 * ᐃ, 28 * ᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ⲆΔΔΔ], Δⵠ[2], ᐃ * 6.5);
			ᐃΔΔ(Ⲇ, ᐃ * 137, 200 * ᐃ, 22.090722034374522 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ΔΔᐃΔ]);
			ᐃΔΔ(Ⲇ, 210 * ᐃ, 200 * ᐃ, ᐃ * 22.20360331117452);
			ΔΔ(Ⲇ, Δⵠ[3]);
			ᐃΔΔ(Ⲇ, 133 * ᐃ, ᐃ * 188, ΔΔⵠΔⲆ * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⵠ]);
			ᐃΔΔ(Ⲇ, 206 * ᐃ, 188 * ᐃ, ᐃ * ᐃⲆⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⵠ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 110, 193 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 130, ᐃ * 182, 142 * ᐃ, ᐃ * 183, 162 * ᐃ, 193 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 164, 176.5 * ᐃ, ᐃ * 164, 176.5 * ᐃ, ᐃ * 166, 160 * ᐃ);
			Ⲇ.bezierCurveTo(137 * ᐃ, ᐃ * 159, 137 * ᐃ, ᐃ * 159, ᐃ * 108, 158 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(184 * ᐃ, ᐃ * 192);
			Ⲇ.bezierCurveTo(ᐃ * 205, ᐃ * 183, ᐃ * 216, 183 * ᐃ, ᐃ * 234, ᐃ * 192);
			Ⲇ.bezierCurveTo(ᐃ * 233.5, ᐃ * 177, ᐃ * 233.5, 177 * ᐃ, 233 * ᐃ, ᐃ * 162);
			Ⲇ.bezierCurveTo(ᐃ * 209, ᐃ * 161.5, ᐃ * 186, 162 * ᐃ, ᐃ * 185, 161 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⲆᐃΔ])
		} else if (Ⲇᐃ == 7) {
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(-88 * ᐃ, -95 * ᐃ);
			Ⲇ.save();
			Ⲇ.translate(174 * ᐃ, ᐃ * 195.5);
			ᐃΔⵠ(Ⲇ, -82 * ᐃ, ᐃ * -46.5, ᐃ * 164, ᐃ * 93, 30 * ᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 174, 170.5 * ᐃ);
			ᐃΔⵠ(Ⲇ, -81 * ᐃ, -59.5 * ᐃ, 162 * ᐃ, ᐃ * 119, 28 * ᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ⲆΔΔΔ], Δⵠ[ΔΔⲆᐃ], ᐃ * 6.5);
			ᐃΔΔ(Ⲇ, 137 * ᐃ, 200 * ᐃ, 22.090722034374522 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[Δⵠⵠᐃ]);
			ᐃΔΔ(Ⲇ, 210 * ᐃ, 200 * ᐃ, ᐃ * 22.20360331117452);
			ΔΔ(Ⲇ, Δⵠ[Δⵠⵠᐃ]);
			ᐃΔΔ(Ⲇ, 130 * ᐃ, 206 * ᐃ, ᐃⲆⵠⵠⵠ * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ⵠⵠᐃΔ]);
			ᐃΔΔ(Ⲇ, 203 * ᐃ, ᐃ * 206, 7 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[4]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 108, ᐃ * 191);
			Ⲇ.bezierCurveTo(141 * ᐃ, 184 * ᐃ, ᐃ * 141, ᐃ * 184, ᐃ * 174, 177 * ᐃ);
			Ⲇ.bezierCurveTo(207 * ᐃ, ᐃ * 184, 207 * ᐃ, ᐃ * 184, 240 * ᐃ, ᐃ * 191);
			Ⲇ.bezierCurveTo(ᐃ * 244, 140 * ᐃ, 113 * ᐃ, 121 * ᐃ, 108 * ᐃ, 191 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔΔΔᐃ])
		} else if (8 == Ⲇᐃ) {
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * -88, ᐃ * -95);
			Ⲇ.save();
			Ⲇ.translate(174 * ᐃ, 195.5 * ᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * -82, -46.5 * ᐃ, ᐃ * 164, 93 * ᐃ, 30 * ᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.save();
			Ⲇ.translate(174 * ᐃ, ᐃ * 170.5);
			ᐃΔⵠ(Ⲇ, -81 * ᐃ, ᐃ * -59.5, ᐃ * 162, ᐃ * 119, 28 * ᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ΔᐃⲆⲆ], Δⵠ[ⲆᐃⵠΔ], ᐃ * 6.5);
			ᐃΔΔ(Ⲇ, ᐃ * 137, 200 * ᐃ, 22.090722034374522 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[3]);
			ᐃΔΔ(Ⲇ, 210 * ᐃ, 200 * ᐃ, 22.20360331117452 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[3]);
			ᐃΔΔ(Ⲇ, ᐃ * 127, 198 * ᐃ, ᐃ * ⲆΔᐃⲆᐃ);
			ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔⲆ]);
			ᐃΔΔ(Ⲇ, 200 * ᐃ, 198 * ᐃ, 7 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⵠ]);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 175, 175.5 * ᐃ);
			ᐃΔⵠ(Ⲇ, -67 * ᐃ, -13.5 * ᐃ, 134 * ᐃ, ᐃ * 27, ᐃ * 0);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠⲆ]);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 172, ᐃ * 219);
			ᐃΔⵠ(Ⲇ, ᐃ * -60, -ⵠᐃΔⲆ * ᐃ, ᐃ * 120, ᐃ * ⲆΔⲆᐃᐃ, ᐃ * 0);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[Δⵠᐃ])
		} else if (Ⲇᐃ == 9) {
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(-88 * ᐃ, -95 * ᐃ);
			Ⲇ.save();
			Ⲇ.translate(174 * ᐃ, ᐃ * 195.5);
			ᐃΔⵠ(Ⲇ, -82 * ᐃ, -46.5 * ᐃ, ᐃ * 164, ᐃ * 93, 30 * ᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.save();
			Ⲇ.translate(174 * ᐃ, 170.5 * ᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * -81, ᐃ * -59.5, 162 * ᐃ, 119 * ᐃ, ᐃ * 28);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⲆ], Δⵠ[ΔΔⲆⲆ], ᐃ * 6.5);
			ᐃΔΔ(Ⲇ, 137 * ᐃ, 200 * ᐃ, ᐃ * 22.090722034374522);
			ΔΔ(Ⲇ, Δⵠ[3]);
			ᐃΔΔ(Ⲇ, 210 * ᐃ, 200 * ᐃ, ᐃ * 22.090722034374522);
			ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔΔ]);
			ᐃΔΔ(Ⲇ, ᐃ * 143, 200 * ᐃ, ᐃ * ᐃⲆⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔΔ]);
			ᐃΔΔ(Ⲇ, 204 * ᐃ, ᐃ * 200, ᐃ * ⵠⵠⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔΔᐃ])
		}
		return ΔⲆ
	}
	const ΔⵠⲆᐃ = ᐃᐃⲆⲆ;

	function ΔⲆⲆΔⲆⵠΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 248;
		ΔⲆ.height = 247 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(183 * ᐃ, ᐃ * 107);
		ᐃΔⵠ(Ⲇ, ᐃ * -8, -70.5 * ᐃ, ᐃ * 16, 141 * ᐃ, ᐃ * ⵠⲆΔⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.save();
		Ⲇ.translate(69.5 * ᐃ, 110 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -8.5, -71 * ᐃ, ᐃ * ᐃⵠⲆΔⲆᐃΔ, ᐃ * 143, ΔᐃⲆⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 123.5, 181 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -84.5, ᐃ * -26, ᐃ * 169, ᐃ * 52, 5 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[1], ᐃ * 6);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(41 * ᐃ, ᐃ * 95);
		Ⲇ.bezierCurveTo(105 * ᐃ, 96 * ᐃ, 113 * ᐃ, ᐃ * 99, 134 * ᐃ, ᐃ * 102);
		Ⲇ.bezierCurveTo(147 * ᐃ, ᐃ * 106, ᐃ * 173, ᐃ * 100, 207 * ᐃ, ᐃ * 105);
		Ⲇ.bezierCurveTo(210 * ᐃ, 105 * ᐃ, 207 * ᐃ, 140 * ᐃ, 207 * ᐃ, 154 * ᐃ);
		Ⲇ.bezierCurveTo(123.5 * ᐃ, 151.5 * ᐃ, 123.5 * ᐃ, 151.5 * ᐃ, 40 * ᐃ, ᐃ * 149);
		Ⲇ.bezierCurveTo(ᐃ * 37, ᐃ * 145, 39 * ᐃ, 95 * ᐃ, ᐃ * 41, ᐃ * 96);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔⲆⲆ], Δⵠ[1], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(68 * ᐃ, 75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 54, 72.5 * ᐃ, 54 * ᐃ, 72.5 * ᐃ, ᐃ * 40, ᐃ * 70);
		Ⲇ.bezierCurveTo(ᐃ * 38, ᐃ * 46, 40 * ᐃ, ᐃ * 46, ᐃ * 53, 46 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 201, 41 * ᐃ, ᐃ * 201, 41 * ᐃ, 201 * ᐃ, 42 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 211, ᐃ * 40, 208 * ᐃ, 53 * ᐃ, 208 * ᐃ, 72 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 209, ᐃ * 91, ᐃ * 210, 96 * ᐃ, ᐃ * 194, ᐃ * 94);
		Ⲇ.bezierCurveTo(119 * ᐃ, 97 * ᐃ, 119 * ᐃ, ᐃ * 97, 44 * ᐃ, 100 * ᐃ);
		Ⲇ.bezierCurveTo(39 * ᐃ, ᐃ * 99, 40 * ᐃ, 96 * ᐃ, 40 * ᐃ, 80 * ᐃ);
		Ⲇ.bezierCurveTo(54 * ᐃ, 77.5 * ᐃ, 54 * ᐃ, 77.5 * ᐃ, ᐃ * 68, 75 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[1], ᐃ * ΔⲆⲆⵠⵠ);
		return ΔⲆ
	}

	function ⲆⵠⵠⲆᐃⵠᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 248 * ᐃ;
		ΔⲆ.height = 247 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(69.5 * ᐃ, 145 * ᐃ);
		ᐃΔⵠ(Ⲇ, -8.5 * ᐃ, -63 * ᐃ, ΔᐃⲆⵠⵠΔΔ * ᐃ, ᐃ * 127, 1 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.save();
		Ⲇ.translate(183 * ᐃ, 145 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -ΔⵠⵠΔⵠ, ᐃ * -63, 16 * ᐃ, 126 * ᐃ, ᐃ * ΔΔΔᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠ]);
		Ⲇ.save();
		Ⲇ.translate(123.5 * ᐃ, ᐃ * 62.5);
		Ⲇ.rotate(6.28);
		ᐃΔⵠ(Ⲇ, ᐃ * -84.5, ᐃ * -25.5, 169 * ᐃ, 51 * ᐃ, ᐃ * 5);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠᐃ], Δⵠ[ⲆΔΔΔ], ᐃ * 6);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 123.5, 118 * ᐃ);
		Ⲇ.rotate(6.24);
		ᐃΔⵠ(Ⲇ, ᐃ * -85.5, -24 * ᐃ, ᐃ * 169, ᐃ * 48, ᐃ * ΔΔⲆⲆⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[1], ᐃⵠⲆᐃΔ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(122 * ᐃ, ᐃ * 177.5);
		Ⲇ.rotate(6.32);
		ᐃΔⵠ(Ⲇ, ᐃ * -84, ᐃ * -23.5, 169 * ᐃ, 47 * ᐃ, 5 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[Ⲇⵠᐃ], ΔⲆⲆⵠⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 37, 157 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 49, ᐃ * 160, 49 * ᐃ, ᐃ * 160, ᐃ * 61, 163 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 49.5, 165.5 * ᐃ, 49.5 * ᐃ, 165.5 * ᐃ, ᐃ * 38, ᐃ * 168);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 205, ᐃ * 175);
		Ⲇ.bezierCurveTo(ᐃ * 192.5, 180 * ᐃ, ᐃ * 192.5, 180 * ᐃ, 180 * ᐃ, 185 * ᐃ);
		Ⲇ.bezierCurveTo(193 * ᐃ, ᐃ * 188, ᐃ * 193, 188 * ᐃ, 206 * ᐃ, 191 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⲆⲆ]);
		return ΔⲆ
	}

	function ᐃΔⵠΔⲆⲆⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 248 * ᐃ;
		ΔⲆ.height = ᐃ * 247;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 182, ᐃ * 120);
		ᐃΔⵠ(Ⲇ, -8 * ᐃ, -67 * ᐃ, ᐃ * 16, 134 * ᐃ, ΔΔΔᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.save();
		Ⲇ.translate(68.5 * ᐃ, ᐃ * 127.5);
		ᐃΔⵠ(Ⲇ, ᐃ * -8.5, ᐃ * -70.5, ⵠⲆᐃⵠⵠᐃⲆ * ᐃ, ᐃ * 141, ΔΔΔᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠ]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 123.5, 68 * ᐃ);
		ᐃΔⵠ(Ⲇ, -82.5 * ᐃ, -24 * ᐃ, 165 * ᐃ, ᐃ * 48, ᐃ * 4);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆΔⲆ], Δⵠ[1], Ⲇⵠⵠᐃⵠ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 123, 179.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -83, ᐃ * -24.5, ᐃ * 166, 49 * ᐃ, ᐃ * 4);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[1], ᐃ * 6);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 123.5, 123.5 * ᐃ);
		Ⲇ.rotate(6.24);
		ᐃΔⵠ(Ⲇ, ᐃ * -82.5, ᐃ * -24.5, 165 * ᐃ, ᐃ * 49, 4 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[Δⵠᐃ], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(204 * ᐃ, 112 * ᐃ);
		Ⲇ.bezierCurveTo(149 * ᐃ, ᐃ * 121.5, 96 * ᐃ, ᐃ * 130, ᐃ * 94, 131 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 149.5, ᐃ * 127.5, 149.5 * ᐃ, ᐃ * 127.5, ᐃ * 205, 124 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⲆ]);
		return ΔⲆ
	}

	function ΔⲆⵠΔΔⲆⵠΔⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * ᐃΔΔⲆΔ;
		ΔⲆ.height = 20 * ᐃ;
		Ⲇ.globalAlpha = .5;
		ᐃΔΔ(Ⲇ, ᐃ * 10, ᐃ * 10, 9 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		return ΔⲆ
	}

	function ⵠΔⵠⲆΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 22;
		ΔⲆ.height = 22 * ᐃ;
		Ⲇ.globalAlpha = .4;
		ᐃΔΔ(Ⲇ, ⵠᐃⲆⵠᐃ * ᐃ, ᐃ * 11, ᐃ * ⲆΔΔⲆᐃ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = .7;
		ᐃΔΔ(Ⲇ, ᐃ * 11, ᐃ * 11, ΔⵠΔΔᐃ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ]);
		Ⲇ.globalAlpha = ⵠΔᐃ;
		ᐃΔΔ(Ⲇ, 11 * ᐃ, ⵠΔᐃᐃⲆΔⲆ * ᐃ, ⵠⵠᐃΔ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		return ΔⲆ
	}
	const ᐃⵠⵠⲆ = ⵠⲆⵠⵠ;
	const ΔⲆᐃΔⲆ = ⵠⲆⲆⵠΔ;

	function ΔⲆⵠⲆⲆΔΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 191;
		ΔⲆ.height = 153 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 96.49996948242188, 66.79510498046875 * ᐃ);
		ᐃΔⵠ(Ⲇ, -79.5 * ᐃ, -48.5 * ᐃ, ᐃ * 159, 97 * ᐃ, 22 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ⲆΔᐃΔⵠ * ᐃ);
		Ⲇ.translate(2 * ᐃ, 0);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(119 * ᐃ, 28 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 119, 22 * ᐃ, ᐃ * 119, 20 * ᐃ, 122 * ᐃ, ᐃ * 16);
		Ⲇ.bezierCurveTo(149 * ᐃ, 39 * ᐃ, 149 * ᐃ, 39 * ᐃ, ᐃ * 176, 63 * ᐃ);
		Ⲇ.bezierCurveTo(176 * ᐃ, 75 * ᐃ, ᐃ * 176, ᐃ * 75, ᐃ * 175, ᐃ * 88);
		Ⲇ.bezierCurveTo(174 * ᐃ, ᐃ * 90, ᐃ * 174, 90 * ᐃ, ᐃ * 172, 93 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 171, 101 * ᐃ, ᐃ * 169, 109 * ᐃ, ᐃ * 164, ᐃ * 113);
		Ⲇ.bezierCurveTo(ᐃ * 163, 104 * ᐃ, ᐃ * 163, ᐃ * 104, 162 * ᐃ, ᐃ * 95);
		Ⲇ.bezierCurveTo(155 * ᐃ, ᐃ * 105, 155 * ᐃ, ᐃ * 105, 147 * ᐃ, 116 * ᐃ);
		Ⲇ.bezierCurveTo(87 * ᐃ, ᐃ * 114, ᐃ * 87, ᐃ * 114, 26 * ᐃ, ᐃ * 112);
		Ⲇ.bezierCurveTo(27 * ᐃ, ᐃ * 106, 27 * ᐃ, 106 * ᐃ, ᐃ * 27, 101 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 24, ᐃ * 104, 24 * ᐃ, ᐃ * 104, 20 * ᐃ, ᐃ * 108);
		Ⲇ.bezierCurveTo(17 * ᐃ, 103 * ᐃ, ᐃ * ᐃⲆᐃΔⲆ, ᐃ * 86, ᐃ * 23, 72 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * ⲆΔᐃΔⲆ, ᐃ * 74, ᐃ * 14, 78 * ᐃ, ᐃ * 12, 83 * ᐃ);
		Ⲇ.bezierCurveTo(12 * ᐃ, 65 * ᐃ, ΔⲆⵠΔⲆᐃΔ * ᐃ, 54 * ᐃ, ᐃ * ᐃΔⲆⵠΔ, 42 * ᐃ);
		Ⲇ.bezierCurveTo(ΔⲆΔᐃⲆⵠⲆ * ᐃ, 39 * ᐃ, 14 * ᐃ, 39 * ᐃ, 12 * ᐃ, 36 * ᐃ);
		Ⲇ.bezierCurveTo(16 * ᐃ, ᐃ * 33, ⵠᐃᐃⲆⲆ * ᐃ, 33 * ᐃ, 19 * ᐃ, 30 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 18, ᐃ * 27, ΔΔΔΔᐃ * ᐃ, ᐃ * 27, ⲆΔΔⲆⲆⵠⲆ * ᐃ, ᐃ * 25);
		Ⲇ.bezierCurveTo(24 * ᐃ, ᐃ * 24, 31 * ᐃ, ᐃ * 21, 29 * ᐃ, 19 * ᐃ);
		Ⲇ.bezierCurveTo(37 * ᐃ, 25 * ᐃ, ᐃ * 37, ᐃ * 25, 45 * ᐃ, ᐃ * 31);
		Ⲇ.bezierCurveTo(ᐃ * 40, 23 * ᐃ, 40 * ᐃ, ᐃ * 21, 42 * ᐃ, 16 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 74, ᐃ * ᐃΔᐃᐃⲆ, ᐃ * 74, ᐃ * 16, ᐃ * 106, ΔᐃⲆⲆΔ * ᐃ);
		Ⲇ.bezierCurveTo(113 * ᐃ, 21 * ᐃ, 113 * ᐃ, ᐃ * 21, ᐃ * 119, ᐃ * 26);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ], Δⵠ[0], ΔⵠⵠⲆ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 97.49996948242188, ᐃ * 95.12844848632812);
		ᐃΔⵠ(Ⲇ, -62.5 * ᐃ, ᐃ * -41.5, ᐃ * 125, 83 * ᐃ, ᐃΔΔⲆΔ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⲆⲆⵠⲆ], ᐃ * 4);
		return ΔⲆ
	}

	function ᐃⵠⲆΔΔΔⵠᐃⵠ(ᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 200;
		var ⲆΔⲆ = 200 * ᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		var ᐃᐃ = ⵠⵠⵠᐃⵠ(.35, ΔΔᐃⵠᐃ, [ⵠ[292], "#0b8052", ⵠ[62]]);
		Ⲇ.drawImage(ᐃᐃ, ΔⲆᐃΔⲆ, 10);
		var ᐃᐃ = ⵠⵠⵠⲆⵠ(.9, ᐃᐃⲆⲆΔ, [ⵠ[576], ⵠ[506]]);
		Ⲇ.drawImage(ᐃᐃ, 21, 20);
		var ᐃᐃ = ⵠⵠⵠⲆⵠ(.9, ᐃⲆⲆᐃᐃ, [ⵠ[576], ⵠ[506]]);
		Ⲇ.drawImage(ᐃᐃ, 38, 28);
		var ᐃᐃ = ⵠⵠⵠⲆⵠ(.9, ᐃΔⵠᐃⲆ, [ⵠ[576], ⵠ[506]]);
		Ⲇ.drawImage(ᐃᐃ, 15, 37);
		var ᐃᐃ = ⵠⵠⵠⲆⵠ(.9, ᐃⲆⵠⵠⲆ, [ⵠ[576], ⵠ[506]]);
		Ⲇ.drawImage(ᐃᐃ, 32, 45);
		return ΔⲆ
	}

	function ΔⵠⲆⵠΔⵠⲆ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 185;
		ΔⲆ.height = 240 * ᐃ;
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(ⲆⵠⲆⲆ, ᐃ * ΔⵠⵠᐃⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 44, 137 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 60, 87 * ᐃ, ᐃ * 68, ᐃ * 66, 92 * ᐃ, 67 * ᐃ);
		Ⲇ.bezierCurveTo(115 * ᐃ, 64 * ᐃ, ᐃ * 129, 97 * ᐃ, ᐃ * 137, 136 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 53, ᐃ * 181);
		Ⲇ.bezierCurveTo(30 * ᐃ, 164 * ᐃ, 19 * ᐃ, ᐃ * 150, ⵠΔⲆⵠⵠ * ᐃ, 136 * ᐃ);
		Ⲇ.bezierCurveTo(28 * ᐃ, 121 * ᐃ, ᐃ * 38, ᐃ * 132, 48 * ᐃ, 150 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(63 * ᐃ, 208 * ᐃ);
		Ⲇ.bezierCurveTo(75 * ᐃ, 224 * ᐃ, 86 * ᐃ, 228 * ᐃ, 93 * ᐃ, 228 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 104, 229 * ᐃ, ᐃ * 116, ᐃ * 219, 122 * ᐃ, ᐃ * 205);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 130, ᐃ * 170);
		Ⲇ.bezierCurveTo(146 * ᐃ, ᐃ * 125, ᐃ * 156, ᐃ * 126, ᐃ * 173, ᐃ * 137);
		Ⲇ.bezierCurveTo(ᐃ * 167, 151 * ᐃ, 143 * ᐃ, 174 * ᐃ, ᐃ * 131, ᐃ * 183);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 39, 140 * ᐃ);
		Ⲇ.bezierCurveTo(75 * ᐃ, ᐃ * 126, 113 * ᐃ, 127 * ᐃ, ᐃ * 143, ᐃ * 137);
		Ⲇ.bezierCurveTo(141 * ᐃ, ᐃ * 186, 130 * ᐃ, 202 * ᐃ, 113 * ᐃ, ᐃ * 214);
		Ⲇ.bezierCurveTo(ᐃ * 85, 228 * ᐃ, ᐃ * 56, 219 * ᐃ, 48 * ᐃ, 173 * ᐃ);
		Ⲇ.bezierCurveTo(40 * ᐃ, 148 * ᐃ, 43 * ᐃ, ᐃ * 145, ᐃ * 39, 140 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠΔ]);
		Ⲇ.globalAlpha = ⵠⲆΔⲆ;
		Ⲇ.translate(ⵠⲆᐃ, ᐃ * -ⵠⲆⵠⵠⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 44, 137 * ᐃ);
		Ⲇ.bezierCurveTo(60 * ᐃ, 87 * ᐃ, 68 * ᐃ, ᐃ * 66, ᐃ * 92, ᐃ * 67);
		Ⲇ.bezierCurveTo(115 * ᐃ, ᐃ * 64, ᐃ * 129, 97 * ᐃ, 137 * ᐃ, ᐃ * 136);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ᐃⲆᐃⵠ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 53, 181 * ᐃ);
		Ⲇ.bezierCurveTo(30 * ᐃ, ᐃ * 164, ᐃ * 19, 150 * ᐃ, ᐃ * 11, 136 * ᐃ);
		Ⲇ.bezierCurveTo(28 * ᐃ, ᐃ * 121, 38 * ᐃ, ᐃ * 132, 48 * ᐃ, 150 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆ], Δⵠ[ᐃⲆᐃᐃ], ᐃ * ⵠᐃΔΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 63, 208 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 75, ᐃ * 224, ᐃ * 86, ᐃ * 228, ᐃ * 93, ᐃ * 228);
		Ⲇ.bezierCurveTo(104 * ᐃ, 229 * ᐃ, ᐃ * 116, 219 * ᐃ, ᐃ * 122, ᐃ * 205);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔ], Δⵠ[2], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(130 * ᐃ, ᐃ * 170);
		Ⲇ.bezierCurveTo(146 * ᐃ, ᐃ * 125, 156 * ᐃ, ᐃ * 126, ᐃ * 173, 137 * ᐃ);
		Ⲇ.bezierCurveTo(167 * ᐃ, ᐃ * 151, ᐃ * 143, 174 * ᐃ, 131 * ᐃ, ᐃ * 183);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔᐃ], Δⵠ[ⵠⵠⵠᐃ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 39, ᐃ * 140);
		Ⲇ.bezierCurveTo(75 * ᐃ, 126 * ᐃ, ᐃ * 113, ᐃ * 127, ᐃ * 143, 137 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 141, ᐃ * 186, 130 * ᐃ, 202 * ᐃ, 113 * ᐃ, 214 * ᐃ);
		Ⲇ.bezierCurveTo(85 * ᐃ, 228 * ᐃ, ᐃ * 56, 219 * ᐃ, 48 * ᐃ, ᐃ * 173);
		Ⲇ.bezierCurveTo(ᐃ * 40, ᐃ * 148, ᐃ * 43, 145 * ᐃ, 39 * ᐃ, 140 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⲆ], Δⵠ[ᐃᐃⲆⲆ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 59, 99 * ᐃ);
		Ⲇ.bezierCurveTo(71 * ᐃ, ᐃ * 68, ᐃ * 81, 68 * ᐃ, ᐃ * 94, ᐃ * 67);
		Ⲇ.bezierCurveTo(ᐃ * 105, 66 * ᐃ, ᐃ * 119, 75 * ᐃ, 123 * ᐃ, ᐃ * 96);
		Ⲇ.bezierCurveTo(104 * ᐃ, 91 * ᐃ, 101 * ᐃ, 94 * ᐃ, 94 * ᐃ, ᐃ * 97);
		Ⲇ.bezierCurveTo(76 * ᐃ, 92 * ᐃ, 73 * ᐃ, ᐃ * 93, 60 * ᐃ, 99 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔΔΔⵠ], ᐃ * 4);
		ᐃⵠⵠⲆ === Ⲇᐃ ? (Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(47 * ᐃ, ᐃ * 149), Ⲇ.bezierCurveTo(ᐃ * 43, 140 * ᐃ, ᐃ * 48, 130 * ᐃ, ᐃ * 59, ᐃ * 127), Ⲇ.bezierCurveTo(ᐃ * 77, 126 * ᐃ, ᐃ * 90, ᐃ * 131, ᐃ * 131, ᐃ * 127), Ⲇ.bezierCurveTo(143 * ᐃ, ᐃ * 130, 144 * ᐃ, ᐃ * 143, ᐃ * 132, 154 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 90, 152 * ᐃ, ᐃ * 90, ᐃ * 152, ᐃ * 48, ᐃ * 150), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[ΔᐃΔⲆ]), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(40 * ᐃ, ᐃ * 139), Ⲇ.bezierCurveTo(ᐃ * 48, 113 * ᐃ, ᐃ * 76, ᐃ * 119, ᐃ * 91, 126 * ᐃ), Ⲇ.bezierCurveTo(117 * ᐃ, ᐃ * 113, ᐃ * 135, ᐃ * 117, 144 * ᐃ, 134 * ᐃ), Ⲇ.bezierCurveTo(144 * ᐃ, ᐃ * 138, ᐃ * 144, 138 * ᐃ, ᐃ * 144, 142 * ᐃ), Ⲇ.bezierCurveTo(128 * ᐃ, ᐃ * 124, 108 * ᐃ, 124 * ᐃ, ᐃ * 91, 136 * ᐃ), Ⲇ.bezierCurveTo(59 * ᐃ, ᐃ * 124, 50 * ᐃ, 137 * ᐃ, 42 * ᐃ, ᐃ * 148), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⲆⵠΔⵠ], ⲆᐃᐃΔⵠ * ᐃ)) : (Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(41 * ᐃ, ᐃ * 139), Ⲇ.bezierCurveTo(53 * ᐃ, ᐃ * 117, 69 * ᐃ, ᐃ * 118, ᐃ * 92, ᐃ * 127), Ⲇ.bezierCurveTo(ᐃ * 124, ᐃ * 111, ᐃ * 136, 121 * ᐃ, 143 * ᐃ, 136 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 142, ᐃ * 144, 142 * ᐃ, ᐃ * 144, ᐃ * 141, 152 * ᐃ), Ⲇ.bezierCurveTo(128 * ᐃ, 131 * ᐃ, 113 * ᐃ, 138 * ᐃ, ᐃ * 92, ᐃ * 145), Ⲇ.bezierCurveTo(ᐃ * 57, ᐃ * 133, ᐃ * 57, ᐃ * 147, 44 * ᐃ, 154 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔᐃⵠΔ], ᐃ * 4));
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(90 * ᐃ, 95 * ᐃ);
		Ⲇ.bezierCurveTo(99 * ᐃ, ᐃ * 82, 98 * ᐃ, 58 * ᐃ, ᐃ * 99, 40 * ᐃ);
		Ⲇ.bezierCurveTo(90 * ᐃ, 38 * ᐃ, 89 * ᐃ, ᐃ * 34, ᐃ * 92, 17 * ᐃ);
		Ⲇ.bezierCurveTo(92 * ᐃ, ᐃ * 5, ᐃ * 83, ᐃ * 16, ᐃ * 78, ᐃ * 29);
		Ⲇ.bezierCurveTo(ᐃ * 72, 59 * ᐃ, 87 * ᐃ, 81 * ᐃ, ᐃ * 89, 87 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔ], Δⵠ[ΔⵠⲆᐃ], ᐃᐃⵠΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(90 * ᐃ, ᐃ * 86);
		Ⲇ.bezierCurveTo(95 * ᐃ, 74 * ᐃ, 95 * ᐃ, ᐃ * 62, ᐃ * 95, ᐃ * 43);
		Ⲇ.bezierCurveTo(ᐃ * 84, 37 * ᐃ, ᐃ * 86, 34 * ᐃ, 89 * ᐃ, ᐃ * ⲆⵠΔᐃΔ);
		Ⲇ.bezierCurveTo(75 * ᐃ, 29 * ᐃ, 80 * ᐃ, ᐃ * 58, 90 * ᐃ, 85 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⲆⲆ], Δⵠ[3], ᐃ * ᐃᐃⵠΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 92, 117 * ᐃ);
		Ⲇ.bezierCurveTo(98 * ᐃ, 87 * ᐃ, 93 * ᐃ, 78 * ᐃ, 85 * ᐃ, ᐃ * 76);
		Ⲇ.bezierCurveTo(85.5 * ᐃ, ᐃ * 79.5, ᐃ * 85.5, 79.5 * ᐃ, 86 * ᐃ, ᐃ * 83);
		Ⲇ.bezierCurveTo(84 * ᐃ, 85.5 * ᐃ, ᐃ * 84, 85.5 * ᐃ, 82 * ᐃ, 88 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 90, ᐃ * 93, 89 * ᐃ, 100 * ᐃ, 92 * ᐃ, ᐃ * 117);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[3], ⲆᐃᐃΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(92 * ᐃ, 175 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 95, ᐃ * 135, ᐃ * 98, ᐃ * 125, 109 * ᐃ, ᐃ * 121);
		Ⲇ.bezierCurveTo(106 * ᐃ, 114 * ᐃ, 104 * ᐃ, ᐃ * 114, 102 * ᐃ, 113 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 103, ᐃ * 106, ᐃ * 104, 103 * ᐃ, ᐃ * 107, 96 * ᐃ);
		Ⲇ.bezierCurveTo(74 * ᐃ, 108 * ᐃ, 86 * ᐃ, 157 * ᐃ, ᐃ * 92, 174 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃΔ], Δⵠ[3], ⵠᐃᐃΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(48 * ᐃ, 169 * ᐃ);
		Ⲇ.bezierCurveTo(42 * ᐃ, 187 * ᐃ, 50 * ᐃ, ᐃ * 193, 59 * ᐃ, ᐃ * 198);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ΔΔΔᐃᐃ, Δⵠ[ΔᐃⵠΔ], ᐃ * ᐃΔΔⲆⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 136, 171 * ᐃ);
		Ⲇ.bezierCurveTo(139 * ᐃ, ᐃ * 186, 138 * ᐃ, ᐃ * 191, 124 * ᐃ, ᐃ * 199);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], ⲆΔᐃᐃΔ * ᐃ);
		ᐃΔΔ(Ⲇ, 63 * ᐃ, 180 * ᐃ, 15.231546211727817 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⵠⲆ]);
		ᐃΔΔ(Ⲇ, ᐃ * 121, ᐃ * 181, 15.652475842498529 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⵠᐃ]);
		ᐃΔΔ(Ⲇ, ᐃ * 58, 175 * ᐃ, 5.656854249492381 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[2]);
		ᐃΔΔ(Ⲇ, 116 * ᐃ, ᐃ * 175, 5.656854249492381 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[2]);
		return ΔⲆ
	}

	function ⵠⲆⲆᐃⲆΔᐃ(ᐃ, Δⵠ, Δᐃᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 32 * ᐃ;
		var ⲆΔⲆ = 32 * ᐃ;
		var Ⲇⵠ = ⲆⲆᐃ / 2;
		var ᐃⵠⲆ = ⲆΔⲆ / 2;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		var ⵠᐃⲆᐃⲆⲆᐃ = 5 * ᐃ;
		var ᐃΔⵠⲆⵠⵠⲆ = ᐃ * 28;
		var ΔⲆⲆΔⵠᐃⲆ = ⵠᐃⲆᐃⲆⲆᐃ / 2;
		var ΔⵠⵠᐃⲆⲆᐃ = ᐃΔⵠⲆⵠⵠⲆ / 2;
		Ⲇ.translate(ⵠⵠⵠΔ * ᐃ, Δⵠⵠⵠ * ᐃ);
		Ⲇ.translate(Ⲇⵠ, ᐃⵠⲆ);
		if (Δᐃᐃ == ⲆΔΔΔ) {
			ᐃΔΔ(Ⲇ, 0, 0, ⲆΔⵠⵠΔ * ᐃ, ⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ΔᐃⵠΔ], ᐃ * ⲆⲆᐃⵠ);
			for (var Ⲇᐃ = ᐃᐃⲆ; 4 > Ⲇᐃ; Ⲇᐃ++) {
				ᐃΔⵠ(Ⲇ, -ΔⲆⲆΔⵠᐃⲆ, -ΔⵠⵠᐃⲆⲆᐃ, ⵠᐃⲆᐃⲆⲆᐃ, ᐃΔⵠⲆⵠⵠⲆ, ᐃ * 2);
				Ⲇ.rotate(Math.PI / ᐃΔⵠⵠ);
				ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ΔΔΔⵠ], ⲆᐃᐃΔⵠ * ᐃ)
			}
		}
		ᐃΔΔ(Ⲇ, 0, 0, ᐃ * ᐃⵠᐃⵠⲆ, ᐃᐃⲆ);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[1], ᐃ * 1.5);
		for (var Ⲇᐃ = 0; 4 > Ⲇᐃ; Ⲇᐃ++) {
			ᐃΔⵠ(Ⲇ, -ΔⲆⲆΔⵠᐃⲆ, -ΔⵠⵠᐃⲆⲆᐃ, ⵠᐃⲆᐃⲆⲆᐃ, ᐃΔⵠⲆⵠⵠⲆ, ΔᐃΔᐃ * ᐃ);
			Ⲇ.rotate(Math.PI / ⲆΔᐃᐃΔ);
			ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⲆ], Δⵠ[ⵠΔᐃ], ᐃ * 1.5)
		}
		ᐃΔΔ(Ⲇ, 0, ⵠⲆⵠⵠ, ᐃ * ⵠΔΔⲆΔ, ΔⲆⲆ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ]);
		ᐃΔΔ(Ⲇ, ⵠⵠⵠΔ, ⵠⲆΔ, ᐃ * ᐃⲆⵠᐃⵠ, 0);
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[1], 1.5 * ᐃ);
		Ⲇ.globalCompositeOperation = ⵠ[381];
		ᐃΔΔ(Ⲇ, 0, ⵠⵠⵠΔ, ᐃ * 4, 0);
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ], Δⵠ[1], ᐃ * ΔΔΔⵠ);
		Ⲇ.globalCompositeOperation = ⵠ[453];
		ᐃΔΔ(Ⲇ, 0, Ⲇᐃⵠ, ᐃ * 4, ΔⲆⲆ);
		ΔΔ(Ⲇ, ΔΔⵠⵠⲆ, Δⵠ[Δⵠᐃ], ᐃ * 2);
		return ΔⲆ
	}

	function ᐃΔΔᐃⲆ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 40 * ᐃ;
		var ⲆΔⲆ = ᐃ * 40;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		var Ⲇⵠ = ⲆⲆᐃ * ᐃ / ⲆᐃΔⲆ;
		var ᐃⵠⲆ = ᐃ * ⲆΔⲆ / 2;
		var ΔⲆΔ = 15 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(Ⲇⵠ, ᐃⵠⲆ);
		Ⲇ.globalAlpha = ΔⵠⲆⲆ;
		ᐃΔΔ(Ⲇ, ⲆⲆⵠⲆ, 0, ΔⲆΔ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ]);
		var ΔⲆΔ = ᐃΔΔⲆⵠ * ᐃ;
		var Ⲇⵠ = 2 * ᐃ;
		var ᐃⵠⲆ = ᐃ * ⵠⲆⲆ;
		Ⲇ.translate(Ⲇⵠ, ᐃⵠⲆ);
		Ⲇ.globalAlpha = ΔΔΔᐃ;
		ᐃΔΔ(Ⲇ, ⵠⲆΔ, 0, ΔⲆΔ);
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.restore();
		return ΔⲆ
	}

	function ᐃΔᐃⲆⲆᐃⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 191;
		ΔⲆ.height = 153 * ᐃ;
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(0, ᐃ * 10);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 97.49996948242188, ᐃ * 95.12844848632812);
		ᐃΔⵠ(Ⲇ, ᐃ * -62.5, ᐃ * -41.5, 125 * ᐃ, ᐃ * 83, ᐃΔΔⲆΔ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⲆ], Δⵠ[ΔΔᐃ], 4 * ᐃ);
		Ⲇ.globalAlpha = Δⵠᐃ;
		Ⲇ.translate(ΔΔᐃ, ᐃ * -10);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 97.49996948242188, ᐃ * 95.12844848632812);
		ᐃΔⵠ(Ⲇ, -62.5 * ᐃ, ᐃ * -41.5, ᐃ * 125, 83 * ᐃ, ΔΔⲆΔⲆᐃⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃΔᐃΔ * ᐃ);
		Ⲇ.globalCompositeOperation = ⵠ[381];
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 26.999969482421875, ᐃ * 50.850677490234375);
		Ⲇ.bezierCurveTo(ᐃ * 46.499969482421875, ᐃ * 64.85067749023438, ᐃ * 46.499969482421875, ᐃ * 64.85067749023438, 65.99996948242188 * ᐃ, ᐃ * 78.85067749023438);
		Ⲇ.bezierCurveTo(ᐃ * 80.99996948242188, ᐃ * 87.85067749023438, ᐃ * 105.99996948242188, ᐃ * 82.85067749023438, ᐃ * 114.99996948242188, ᐃ * 80.85067749023438);
		Ⲇ.bezierCurveTo(130.99996948242188 * ᐃ, 69.85067749023438 * ᐃ, 152.99996948242188 * ᐃ, ᐃ * 70.85067749023438, 166.99996948242188 * ᐃ, 67.85067749023438 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 156.99996948242188, 52.850677490234375 * ᐃ, 156.99996948242188 * ᐃ, 52.850677490234375 * ᐃ, 146.99996948242188 * ᐃ, ᐃ * 37.850677490234375);
		Ⲇ.bezierCurveTo(ᐃ * 101.49996948242188, ᐃ * 37.350677490234375, ᐃ * 101.49996948242188, ᐃ * 37.350677490234375, 55.999969482421875 * ᐃ, 36.850677490234375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], ᐃ * ⲆΔᐃᐃΔ);
		Ⲇ.globalCompositeOperation = ⵠ[453];
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 40.999969482421875, ᐃ * 59.850677490234375);
		Ⲇ.bezierCurveTo(41.999969482421875 * ᐃ, ᐃ * 50.850677490234375, 47.999969482421875 * ᐃ, ᐃ * 47.850677490234375, ᐃ * 56.999969482421875, 49.850677490234375 * ᐃ);
		Ⲇ.bezierCurveTo(65.99996948242188 * ᐃ, 41.850677490234375 * ᐃ, ᐃ * 76.99996948242188, 42.850677490234375 * ᐃ, ᐃ * 90.99996948242188, ᐃ * 47.850677490234375);
		Ⲇ.bezierCurveTo(94.99996948242188 * ᐃ, ᐃ * 42.850677490234375, 104.99996948242188 * ᐃ, 42.850677490234375 * ᐃ, 114.99996948242188 * ᐃ, ᐃ * 47.850677490234375);
		Ⲇ.bezierCurveTo(131.99996948242188 * ᐃ, ᐃ * 42.850677490234375, 142.99996948242188 * ᐃ, ᐃ * 48.850677490234375, 145.99996948242188 * ᐃ, 56.850677490234375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 160.99996948242188, 63.850677490234375 * ᐃ, 154.99996948242188 * ᐃ, ᐃ * 69.85067749023438, ᐃ * 155.99996948242188, 70.85067749023438 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 141.99996948242188, ᐃ * 71.85067749023438, ᐃ * 141.99996948242188, ᐃ * 71.85067749023438, 127.99996948242188 * ᐃ, 72.85067749023438 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 110.99996948242188, ᐃ * 83.85067749023438, 107.99996948242188 * ᐃ, ᐃ * 82.85067749023438, 90.99996948242188 * ᐃ, 85.85067749023438 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 70.99996948242188, ᐃ * 83.85067749023438, ᐃ * 64.99996948242188, ᐃ * 79.85067749023438, 53.999969482421875 * ᐃ, 70.85067749023438 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃᐃⵠΔ], ᐃᐃⵠΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 33.999969482421875, ᐃ * 65.85067749023438);
		Ⲇ.bezierCurveTo(36.999969482421875 * ᐃ, 59.850677490234375 * ᐃ, ᐃ * 34.999969482421875, ᐃ * 60.850677490234375, 39.999969482421875 * ᐃ, ᐃ * 59.850677490234375);
		Ⲇ.bezierCurveTo(ᐃ * 47.999969482421875, ᐃ * 61.850677490234375, 62.999969482421875 * ᐃ, 76.85067749023438 * ᐃ, ᐃ * 74.99996948242188, ᐃ * 79.85067749023438);
		Ⲇ.bezierCurveTo(93.99996948242188 * ᐃ, 85.85067749023438 * ᐃ, ᐃ * 111.99996948242188, 83.85067749023438 * ᐃ, 124.99996948242188 * ᐃ, 70.85067749023438 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 129.99996948242188, 67.85067749023438 * ᐃ, 145.99996948242188 * ᐃ, ᐃ * 65.85067749023438, 159.99996948242188 * ᐃ, 67.85067749023438 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 159.99996948242188, 71.85067749023438 * ᐃ, 159.99996948242188 * ᐃ, 71.85067749023438 * ᐃ, ᐃ * 159.99996948242188, ᐃ * 75.85067749023438);
		Ⲇ.bezierCurveTo(ᐃ * 146.99996948242188, ᐃ * 72.85067749023438, ᐃ * 144.99996948242188, ᐃ * 75.85067749023438, 143.99996948242188 * ᐃ, ᐃ * 82.85067749023438);
		Ⲇ.bezierCurveTo(ᐃ * 144.99996948242188, ᐃ * 86.85067749023438, ᐃ * 140.99996948242188, ᐃ * 90.85067749023438, ᐃ * 137.99996948242188, ᐃ * 86.85067749023438);
		Ⲇ.bezierCurveTo(139.99996948242188 * ᐃ, 72.85067749023438 * ᐃ, 135.99996948242188 * ᐃ, ᐃ * 72.85067749023438, ᐃ * 133.99996948242188, 82.85067749023438 * ᐃ);
		Ⲇ.bezierCurveTo(127.99996948242188 * ᐃ, ᐃ * 88.85067749023438, 124.99996948242188 * ᐃ, 70.85067749023438 * ᐃ, ᐃ * 116.99996948242188, 86.85067749023438 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 110.99996948242188, 91.85067749023438 * ᐃ, ᐃ * 96.99996948242188, 81.85067749023438 * ᐃ, ᐃ * 89.99996948242188, 90.85067749023438 * ᐃ);
		Ⲇ.bezierCurveTo(85.99996948242188 * ᐃ, ᐃ * 92.85067749023438, 81.99996948242188 * ᐃ, 95.85067749023438 * ᐃ, 76.99996948242188 * ᐃ, ᐃ * 86.85067749023438);
		Ⲇ.bezierCurveTo(67.99996948242188 * ᐃ, ᐃ * 93.85067749023438, 67.99996948242188 * ᐃ, ᐃ * 91.85067749023438, ᐃ * 60.999969482421875, ᐃ * 79.85067749023438);
		Ⲇ.bezierCurveTo(ᐃ * 53.999969482421875, ᐃ * 71.85067749023438, ᐃ * 52.999969482421875, 72.85067749023438 * ᐃ, ᐃ * 46.999969482421875, 77.85067749023438 * ᐃ);
		Ⲇ.bezierCurveTo(41.999969482421875 * ᐃ, ᐃ * 78.85067749023438, 42.999969482421875 * ᐃ, ᐃ * 69.85067749023438, 33.999969482421875 * ᐃ, 65.85067749023438 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[ΔΔΔΔ], ᐃ * ᐃⲆⵠᐃⵠ);
		ᐃΔΔ(Ⲇ, 68 * ᐃ, 111.29513549804688 * ᐃ, ᐃ * ⲆΔΔΔⵠ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⲆΔⲆᐃ], Δⵠ[ⵠᐃⵠΔⲆ], ᐃ * ⲆΔᐃᐃΔ);
		ᐃΔΔ(Ⲇ, 123 * ᐃ, 111.29510498046875 * ᐃ, 15 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[8], ᐃ * 4);
		ᐃΔΔ(Ⲇ, ᐃ * 63, ᐃ * 106, ᐃ * 5);
		ΔΔ(Ⲇ, Δⵠ[9]);
		ᐃΔΔ(Ⲇ, ᐃ * 118, ᐃ * 106, ᐃᐃΔᐃ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔⲆⲆΔΔ]);
		return ΔⲆ
	}

	function ᐃᐃⲆⵠⲆΔⲆ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ⲆⵠⲆⲆⵠ * ᐃ;
		var ⲆΔⲆ = ᐃ * ⲆᐃᐃⵠΔ;
		var Ⲇⵠ = ⲆⲆᐃ / ΔΔⲆᐃ;
		var ᐃⵠⲆ = ⲆΔⲆ / ⲆⵠΔⵠ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		var ⵠᐃⲆᐃⲆⲆᐃ = ᐃ * 5;
		var ᐃΔⵠⲆⵠⵠⲆ = 28 * ᐃ;
		var ΔⲆⲆΔⵠᐃⲆ = ⵠᐃⲆᐃⲆⲆᐃ / ⲆᐃⵠΔ;
		var ΔⵠⵠᐃⲆⲆᐃ = ᐃΔⵠⲆⵠⵠⲆ / ⵠΔⵠΔ;
		Ⲇ.translate(Ⲇⵠ, ᐃⵠⲆ);
		for (var Ⲇᐃ = ⵠⲆΔ; Ⲇᐃ < ⵠᐃΔⲆ; Ⲇᐃ++) {
			ᐃΔⵠ(Ⲇ, -ΔⲆⲆΔⵠᐃⲆ, -ΔⵠⵠᐃⲆⲆᐃ, ⵠᐃⲆᐃⲆⲆᐃ, ᐃΔⵠⲆⵠⵠⲆ, ᐃ * 2);
			Ⲇ.rotate(Math.PI / 4);
			ΔΔ(Ⲇ, Δⵠ)
		}
		Ⲇ.arc(ΔΔᐃ, 0, ᐃ * 10, 0, 2 * Math.PI);
		ΔΔ(Ⲇ, Δⵠ);
		Ⲇ.globalCompositeOperation = ⵠ[381];
		ᐃΔΔ(Ⲇ, 0, ⲆⲆⵠⲆ, ᐃ * 4);
		Ⲇ.fill();
		return ΔⲆ
	}

	function ⵠⲆΔΔⲆⲆⲆ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 85 * ᐃ;
		var ⲆΔⲆ = ᐃ * 115;
		var ⲆⲆⵠᐃ = ᐃ * 6;
		var ⵠΔΔ = ⵠᐃΔⲆ * ᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(ᐃ * -130, ᐃ * -60 + ⲆⲆⵠᐃ);
		Ⲇ.globalAlpha = .5;
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(190 * ᐃ, 87 * ᐃ, ᐃ * 201, 59 * ᐃ, ᐃ * 208, ᐃ * 64);
		Ⲇ.bezierCurveTo(ᐃ * 213, 68 * ᐃ, 204 * ᐃ, ᐃ * 93, ᐃ * 195, ᐃ * 109);
		Ⲇ.bezierCurveTo(195 * ᐃ, 109 * ᐃ, ᐃ * 202, ᐃ * 124, 191 * ᐃ, 141 * ᐃ);
		Ⲇ.bezierCurveTo(182 * ᐃ, 151 * ᐃ, 164 * ᐃ, 155 * ᐃ, ᐃ * 148, 144 * ᐃ);
		Ⲇ.bezierCurveTo(136 * ᐃ, 135 * ᐃ, ᐃ * 138, 111 * ᐃ, ᐃ * 145, ᐃ * 104);
		Ⲇ.bezierCurveTo(ᐃ * 140, 92 * ᐃ, 131 * ᐃ, 67 * ᐃ, ᐃ * 138, 63 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 145, ᐃ * 61, ᐃ * 153, ᐃ * 82, 155 * ᐃ, ᐃ * 96);
		Ⲇ.bezierCurveTo(ᐃ * 167, 91 * ᐃ, ᐃ * 178, 92 * ᐃ, ᐃ * 187, 98 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ]);
		Ⲇ.translate(0, -ⲆⲆⵠᐃ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(ᐃ * 190, ᐃ * 87, 201 * ᐃ, 59 * ᐃ, 208 * ᐃ, 64 * ᐃ);
		Ⲇ.bezierCurveTo(213 * ᐃ, 68 * ᐃ, 204 * ᐃ, ᐃ * 93, 195 * ᐃ, 109 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 195, ᐃ * 109, 202 * ᐃ, 124 * ᐃ, 191 * ᐃ, ᐃ * 141);
		Ⲇ.bezierCurveTo(ᐃ * 182, 151 * ᐃ, 164 * ᐃ, ᐃ * 155, ᐃ * 148, 144 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 136, 135 * ᐃ, ᐃ * 138, 111 * ᐃ, ᐃ * 145, ᐃ * 104);
		Ⲇ.bezierCurveTo(ᐃ * 140, 92 * ᐃ, ᐃ * 131, ᐃ * 67, ᐃ * 138, 63 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 145, ᐃ * 61, ᐃ * 153, ᐃ * 82, 155 * ᐃ, ᐃ * 96);
		Ⲇ.bezierCurveTo(ᐃ * 167, ᐃ * 91, 178 * ᐃ, ᐃ * 92, 187 * ᐃ, 98 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ᐃⲆᐃᐃ], ⵠⲆΔⵠ);
		var ᐃᐃᐃΔⵠⲆΔ = ᐃ * 155;
		var ᐃⵠⵠⲆⵠⲆⲆ = 133 * ᐃ;
		var ⲆⲆⵠΔⵠΔⲆ = 10 * ᐃ;
		var ΔᐃⲆᐃᐃΔᐃ = ᐃ * 3;
		var ⵠⵠΔΔⲆᐃΔ = ᐃᐃᐃΔⵠⲆΔ + -ΔΔᐃΔ * ᐃ;
		var ΔΔᐃⵠΔⵠᐃ = ᐃⵠⵠⲆⵠⲆⲆ + -ΔΔᐃᐃⵠ * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(ᐃᐃᐃΔⵠⲆΔ, ᐃⵠⵠⲆⵠⲆⲆ);
		Ⲇ.globalAlpha = ⵠⲆⲆ;
		ᐃΔΔ(Ⲇ, ΔⲆⲆ, ΔⲆⲆ, ⲆⲆⵠΔⵠΔⲆ);
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ⵠⵠΔΔⲆᐃΔ, ΔΔᐃⵠΔⵠᐃ);
		Ⲇ.globalAlpha = ΔⵠⲆⲆ;
		ᐃΔΔ(Ⲇ, 0, ᐃᐃⲆ, ΔᐃⲆᐃᐃΔᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⵠ]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ᐃᐃᐃΔⵠⲆΔ + ᐃ * 27, ᐃⵠⵠⲆⵠⲆⲆ);
		Ⲇ.globalAlpha = ᐃᐃΔ;
		ᐃΔΔ(Ⲇ, ᐃᐃⲆ, 0, ⲆⲆⵠΔⵠΔⲆ);
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 27 + ⵠⵠΔΔⲆᐃΔ, ΔΔᐃⵠΔⵠᐃ);
		Ⲇ.globalAlpha = 1;
		ᐃΔΔ(Ⲇ, 0, ⲆⲆⵠⲆ, ΔᐃⲆᐃᐃΔᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔΔᐃ]);
		return ΔⲆ
	}

	function ⵠᐃⵠᐃⲆⲆⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 125 * ᐃ;
		var ⲆΔⲆ = ᐃ * 95;
		var w2 = ⲆⲆᐃ / ΔⵠⲆᐃ;
		var ⲆⲆⲆΔΔ = ⲆΔⲆ / 2;
		var ⵠⵠⵠⵠ = ᐃⵠᐃⵠⲆ * ᐃ;
		var ⲆⲆⵠᐃ = ΔΔⲆᐃᐃ * ᐃ;
		var ⲆⵠⵠⵠΔⲆⵠ = ᐃ * 112;
		var ⵠᐃⲆⵠⲆⲆⵠ = 82 * ᐃ;
		var ΔⲆΔᐃᐃΔⵠ = ⲆⵠⵠⵠΔⲆⵠ / 2;
		var ΔⲆᐃΔᐃⵠⲆ = ⵠᐃⲆⵠⲆⲆⵠ / 2;
		var ⵠΔΔ = ᐃΔᐃΔ * ᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(w2 - 4 * ᐃ, ⲆⲆⲆΔΔ + ⵠᐃΔⲆ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		ᐃΔⵠ(Ⲇ, -ΔⲆΔᐃᐃΔⵠ, -ΔⲆᐃΔᐃⵠⲆ, ⲆⵠⵠⵠΔⲆⵠ, ⵠᐃⲆⵠⲆⲆⵠ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⲆ]);
		Ⲇ.globalAlpha = ⵠΔᐃ;
		Ⲇ.translate(0, -ⲆⲆⵠᐃ);
		ᐃΔⵠ(Ⲇ, -ΔⲆΔᐃᐃΔⵠ, -ΔⲆᐃΔᐃⵠⲆ, ⲆⵠⵠⵠΔⲆⵠ, ⵠᐃⲆⵠⲆⲆⵠ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔ], Δⵠ[ᐃᐃΔⵠ], ⵠΔΔ);
		var ⲆⲆᐃ = 55 * ᐃ;
		var ⲆΔⲆ = 45 * ᐃ;
		var ⵠⵠⵠⵠ = 5;
		Ⲇ.translate(-40 * ᐃ, ᐃ * -30);
		ᐃΔⵠ(Ⲇ, ᐃᐃⲆ, ⵠⲆΔ, ⲆⲆᐃ, ⲆΔⲆ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[3]);
		var ᐃᐃ = ᐃᐃⲆⵠⲆΔⲆ(.7 * ᐃ, Δⵠ[ⲆΔᐃⲆ]);
		Ⲇ.drawImage(ᐃᐃ, 45 * ᐃ, -25 * ᐃ);
		var ᐃᐃ = ᐃᐃⲆⵠⲆΔⲆ(ᐃ * .7, Δⵠ[3]);
		Ⲇ.drawImage(ᐃᐃ, ᐃ * 45, 15 * ᐃ);
		var ᐃᐃ = ᐃᐃⲆⵠⲆΔⲆ(1.2 * ᐃ, Δⵠ[ⲆᐃᐃΔ]);
		Ⲇ.drawImage(ᐃᐃ, 28 * ᐃ, -30 * ᐃ);
		var ⲆⲆᐃ = ᐃ * 15;
		var ⲆΔⲆ = 70 * ᐃ;
		var ⵠⵠⵠⵠ = ᐃ * ᐃᐃΔᐃ;
		Ⲇ.translate(78 * ᐃ, ᐃ * -5);
		ᐃΔⵠ(Ⲇ, 0, ᐃⵠⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[4]);
		var ⲆⲆᐃ = ᐃ * ᐃΔⲆⲆⵠ;
		var ⲆΔⲆ = ᐃ * 50;
		var ⵠⵠⵠⵠ = ᐃ * 3;
		Ⲇ.translate(-20 * ᐃ, ⵠΔᐃⲆⵠ * ᐃ);
		Ⲇ.rotate(Math.PI / ⲆᐃⲆΔ);
		Ⲇ.globalAlpha = .6;
		ᐃΔⵠ(Ⲇ, 0, 0, ⲆⲆᐃ, ⲆΔⲆ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃΔⵠ]);
		Ⲇ.translate(-ⵠᐃᐃⵠΔ * ᐃ, ᐃ * 29);
		Ⲇ.rotate(Math.PI / 5);
		Ⲇ.globalAlpha = .6;
		Ⲇ.beginPath();
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(Δⵠⵠⵠ, 0);
		Ⲇ.lineTo(ⵠⲆᐃ, 30 * ᐃ);
		Ⲇ.lineTo(30 * ᐃ, ᐃ * 30);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, null, Δⵠ[Ⲇᐃⵠᐃ], ᐃ * 8);
		return ΔⲆ
	}

	function ⵠⵠᐃΔᐃΔᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 191 * ᐃ;
		ΔⲆ.height = ᐃ * 153;
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(0, 10 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 96.49996948242188, 66.79510498046875 * ᐃ);
		Ⲇ.rotate(ⲆⲆⵠⲆ);
		ᐃΔⵠ(Ⲇ, -79.5 * ᐃ, ᐃ * -48.5, 159 * ᐃ, 97 * ᐃ, ᐃ * 22);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃ * 4);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(0, ᐃ * -10);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 96.49996948242188, ᐃ * 66.79510498046875);
		Ⲇ.rotate(ⵠΔᐃⵠ);
		ᐃΔⵠ(Ⲇ, ᐃ * -79.5, ᐃ * -48.5, ᐃ * 159, 97 * ᐃ, ᐃ * 22);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔΔΔⵠ], ᐃ * ⲆΔᐃᐃΔ);
		Ⲇ.translate(ΔⵠⲆᐃ * ᐃ, 0);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 119, 28 * ᐃ);
		Ⲇ.bezierCurveTo(119 * ᐃ, 22 * ᐃ, ᐃ * 119, ᐃ * ᐃΔΔⲆΔ, ᐃ * 122, ᐃ * ⵠᐃᐃⲆⲆ);
		Ⲇ.bezierCurveTo(ᐃ * 149, ᐃ * 39, ᐃ * 149, ᐃ * 39, 176 * ᐃ, ᐃ * 63);
		Ⲇ.bezierCurveTo(176 * ᐃ, 75 * ᐃ, 176 * ᐃ, ᐃ * 75, ᐃ * 175, 88 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 174, 90 * ᐃ, 174 * ᐃ, 90 * ᐃ, ᐃ * 172, ᐃ * 93);
		Ⲇ.bezierCurveTo(ᐃ * 171, 101 * ᐃ, 169 * ᐃ, 109 * ᐃ, 164 * ᐃ, 113 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 163, ᐃ * 104, 163 * ᐃ, ᐃ * 104, ᐃ * 162, ᐃ * 95);
		Ⲇ.bezierCurveTo(155 * ᐃ, 105 * ᐃ, 155 * ᐃ, ᐃ * 105, ᐃ * 147, ᐃ * 116);
		Ⲇ.bezierCurveTo(ᐃ * 87, ᐃ * 114, 87 * ᐃ, ᐃ * 114, 26 * ᐃ, ᐃ * 112);
		Ⲇ.bezierCurveTo(ᐃ * 27, ᐃ * 106, 27 * ᐃ, 106 * ᐃ, 27 * ᐃ, 101 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 24, 104 * ᐃ, ᐃ * 24, ᐃ * 104, ⲆⵠⲆⵠⲆⲆΔ * ᐃ, ᐃ * 108);
		Ⲇ.bezierCurveTo(ᐃ * ⲆᐃⲆⲆⵠ, 103 * ᐃ, ᐃ * ⲆⵠⲆⵠⲆⲆΔ, ᐃ * 86, ᐃ * 23, ᐃ * 72);
		Ⲇ.bezierCurveTo(15 * ᐃ, ᐃ * 74, 14 * ᐃ, ᐃ * 78, ᐃᐃΔΔⵠ * ᐃ, ᐃ * 83);
		Ⲇ.bezierCurveTo(12 * ᐃ, ᐃ * 65, 12 * ᐃ, ᐃ * 54, 16 * ᐃ, 42 * ᐃ);
		Ⲇ.bezierCurveTo(ⲆΔᐃⵠⵠΔᐃ * ᐃ, ᐃ * 39, ⲆᐃᐃΔⵠΔⵠ * ᐃ, ᐃ * 39, ⵠᐃΔᐃᐃ * ᐃ, ᐃ * 36);
		Ⲇ.bezierCurveTo(16 * ᐃ, 33 * ᐃ, ᐃᐃⲆⲆⵠ * ᐃ, 33 * ᐃ, Δᐃⵠⵠⵠ * ᐃ, ᐃ * 30);
		Ⲇ.bezierCurveTo(ᐃ * 18, ᐃ * 27, ⵠΔⵠⲆⵠ * ᐃ, ᐃ * 27, ᐃ * ⲆⵠᐃⲆⵠᐃⵠ, ᐃ * 25);
		Ⲇ.bezierCurveTo(ᐃ * 24, 24 * ᐃ, 31 * ᐃ, 21 * ᐃ, ᐃ * 29, ᐃ * ⵠⵠΔᐃⲆ);
		Ⲇ.bezierCurveTo(ᐃ * 37, ᐃ * 25, ᐃ * 37, 25 * ᐃ, ᐃ * 45, 31 * ᐃ);
		Ⲇ.bezierCurveTo(40 * ᐃ, 23 * ᐃ, ᐃ * 40, ᐃ * 21, ᐃ * 42, ᐃᐃΔᐃᐃⲆⲆ * ᐃ);
		Ⲇ.bezierCurveTo(74 * ᐃ, ᐃ * ⲆⵠΔᐃΔ, 74 * ᐃ, ⲆⵠΔᐃΔ * ᐃ, ᐃ * 106, ⲆⲆᐃⲆⵠᐃⲆ * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 113, 21 * ᐃ, ᐃ * 113, ᐃ * 21, ᐃ * 119, ᐃ * 26);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠᐃ], Δⵠ[ᐃΔⵠⵠ], ᐃ * 4);
		return ΔⲆ
	}

	function ⲆΔⲆⵠⲆⲆⲆⲆⵠ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 185;
		ΔⲆ.height = 240 * ᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(58 * ᐃ, 205 * ᐃ);
		Ⲇ.bezierCurveTo(74 * ᐃ, ᐃ * 227, 83 * ᐃ, ᐃ * 230, ᐃ * 92, 230 * ᐃ);
		Ⲇ.bezierCurveTo(101 * ᐃ, 232 * ᐃ, 119 * ᐃ, 219 * ᐃ, 122 * ᐃ, ᐃ * 205);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔ], Δⵠ[ΔΔᐃΔⵠ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(46 * ᐃ, ᐃ * 151);
		Ⲇ.bezierCurveTo(34 * ᐃ, 126 * ᐃ, ᐃ * 21, 130 * ᐃ, ᐃ * 10, 139 * ᐃ);
		Ⲇ.bezierCurveTo(27 * ᐃ, ᐃ * 168, ᐃ * 48, 180 * ᐃ, 53 * ᐃ, ᐃ * 184);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃΔ], Δⵠ[2], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 122, 165 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 143, 140 * ᐃ, ᐃ * 154, ᐃ * 123, 172 * ᐃ, 139 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 169, ᐃ * 149, ᐃ * 147, ᐃ * 173, 126 * ᐃ, ᐃ * 192);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃⲆ], Δⵠ[ⲆᐃΔⲆ], ᐃⲆᐃⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 47, ᐃ * 129);
		Ⲇ.bezierCurveTo(ᐃ * 55, 90 * ᐃ, 71 * ᐃ, ᐃ * 66, 93 * ᐃ, 69 * ᐃ);
		Ⲇ.bezierCurveTo(116 * ᐃ, ᐃ * 70, ᐃ * 122, 88 * ᐃ, ᐃ * 136, ᐃ * 127);
		Ⲇ.bezierCurveTo(143 * ᐃ, 137 * ᐃ, 144 * ᐃ, 137 * ᐃ, ᐃ * 144, ᐃ * 142);
		Ⲇ.bezierCurveTo(138 * ᐃ, 199 * ᐃ, ᐃ * 128, 206 * ᐃ, ᐃ * 108, ᐃ * 219);
		Ⲇ.bezierCurveTo(84 * ᐃ, 228 * ᐃ, ᐃ * 65, ᐃ * 224, ᐃ * 50, ᐃ * 191);
		Ⲇ.bezierCurveTo(ᐃ * 41, 161 * ᐃ, ᐃ * 41, ᐃ * 157, ᐃ * 39, 144 * ᐃ);
		Ⲇ.bezierCurveTo(40 * ᐃ, 140 * ᐃ, 42 * ᐃ, 137 * ᐃ, ᐃ * 47, 129 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 47, ᐃ * 133);
		Ⲇ.bezierCurveTo(ᐃ * 65, 143 * ᐃ, ᐃ * 74, 162 * ᐃ, ᐃ * 70, 186 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 71, 188.5 * ᐃ, ᐃ * 71, 188.5 * ᐃ, ᐃ * 72, 191 * ᐃ);
		Ⲇ.bezierCurveTo(81 * ᐃ, 185.5 * ᐃ, 81 * ᐃ, ᐃ * 185.5, 90 * ᐃ, ᐃ * 180);
		Ⲇ.bezierCurveTo(99 * ᐃ, ᐃ * 185, ᐃ * 99, ᐃ * 185, 108 * ᐃ, ᐃ * 190);
		Ⲇ.bezierCurveTo(110.5 * ᐃ, 184.5 * ᐃ, 110.5 * ᐃ, ᐃ * 184.5, ᐃ * 113, 179 * ᐃ);
		Ⲇ.bezierCurveTo(110 * ᐃ, ᐃ * 156, ᐃ * 121, 156 * ᐃ, 142 * ᐃ, ᐃ * 141);
		Ⲇ.bezierCurveTo(ᐃ * 137.5, ᐃ * 133, ᐃ * 137.5, 133 * ᐃ, 133 * ᐃ, ᐃ * 125);
		Ⲇ.bezierCurveTo(116 * ᐃ, ᐃ * 78, 112 * ᐃ, 70 * ᐃ, 91 * ᐃ, 71 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 62, 69 * ᐃ, ᐃ * 59, ᐃ * 107, ᐃ * 48, 132 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(93 * ᐃ, ᐃ * 86);
		Ⲇ.bezierCurveTo(ᐃ * 101, 79 * ᐃ, ᐃ * 99, 56 * ᐃ, ⵠΔⵠΔΔ * ᐃ, ᐃ * 37);
		Ⲇ.bezierCurveTo(ᐃ * 90, ᐃ * 34, 90 * ᐃ, ᐃ * 27, ᐃ * 93, ᐃ * 13);
		Ⲇ.bezierCurveTo(96 * ᐃ, 0 * ᐃ, 85 * ᐃ, ᐃ * 13, ᐃ * 82, 26 * ᐃ);
		Ⲇ.bezierCurveTo(78 * ᐃ, 43 * ᐃ, 89 * ᐃ, ᐃ * 74, ᐃ * 93, 85 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔΔⲆᐃ], ᐃᐃⵠΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 94, 86 * ᐃ);
		Ⲇ.bezierCurveTo(120 * ᐃ, 88 * ᐃ, ᐃ * 132, 109 * ᐃ, 122 * ᐃ, 128 * ᐃ);
		Ⲇ.bezierCurveTo(118 * ᐃ, 139 * ᐃ, 101 * ᐃ, ᐃ * 146, ᐃ * 90, 143 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 57, 141 * ᐃ, 49 * ᐃ, ᐃ * 109, ᐃ * 68, 94 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 78, 85 * ᐃ, ᐃ * 90, 86 * ᐃ, ᐃ * 95, ᐃ * 86);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 91, ᐃ * 178);
		Ⲇ.bezierCurveTo(78 * ᐃ, 136 * ᐃ, 81 * ᐃ, 88 * ᐃ, ᐃ * 93, 87 * ᐃ);
		Ⲇ.bezierCurveTo(101 * ᐃ, 84 * ᐃ, 94 * ᐃ, 97 * ᐃ, ᐃ * 94, 107 * ᐃ);
		Ⲇ.bezierCurveTo(91 * ᐃ, 112 * ᐃ, 92 * ᐃ, ᐃ * 117, ᐃ * 94, ᐃ * 121);
		Ⲇ.bezierCurveTo(98 * ᐃ, ᐃ * 126, ᐃ * 102, 128 * ᐃ, 97 * ᐃ, 135 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 92, 140 * ᐃ, 93 * ᐃ, 160 * ᐃ, ᐃ * 91, ᐃ * 179);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[1], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(20 * ᐃ, ᐃ * 151);
		Ⲇ.bezierCurveTo(22 * ᐃ, 147 * ᐃ, 22 * ᐃ, 147 * ᐃ, ᐃ * 24, 143 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 27, 144.5 * ᐃ, 27 * ᐃ, 144.5 * ᐃ, 30 * ᐃ, 146 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 31, 143 * ᐃ, 31 * ᐃ, 143 * ᐃ, 32 * ᐃ, ᐃ * 140);
		Ⲇ.bezierCurveTo(35 * ᐃ, ᐃ * 140.5, ᐃ * 35, 140.5 * ᐃ, 38 * ᐃ, 141 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 31, 132 * ᐃ, 29 * ᐃ, ᐃ * 131, ᐃ * 22, ᐃ * 132);
		Ⲇ.bezierCurveTo(ᐃ * ⲆᐃⵠΔᐃ, ᐃ * 135, ᐃ * Ⲇᐃᐃⵠⵠᐃⵠ, ᐃ * 135, ᐃ * ⲆⵠⲆⲆⵠⵠⲆ, ᐃ * 138);
		Ⲇ.bezierCurveTo(15.5 * ᐃ, 144.5 * ᐃ, 15.5 * ᐃ, 144.5 * ᐃ, 20 * ᐃ, 151 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6]);
		ᐃΔΔ(Ⲇ, ᐃ * 61, 183 * ᐃ, 16.15549442140351 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[7]);
		ᐃΔΔ(Ⲇ, ᐃ * 121, ᐃ * 184, 14.866068747318506 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[7]);
		ᐃΔΔ(Ⲇ, 57 * ᐃ, 178 * ᐃ, ᐃ * 5.656854249492381);
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠΔⵠ]);
		ᐃΔΔ(Ⲇ, 116 * ᐃ, 177 * ᐃ, ᐃ * 5.830951894845301);
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃΔⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(162 * ᐃ, ᐃ * 152);
		Ⲇ.bezierCurveTo(161.5 * ᐃ, 148 * ᐃ, 161.5 * ᐃ, 148 * ᐃ, ᐃ * 161, 144 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 157.5, 145 * ᐃ, ᐃ * 157.5, ᐃ * 145, 154 * ᐃ, ᐃ * 146);
		Ⲇ.bezierCurveTo(ᐃ * 153.5, 143 * ᐃ, 153.5 * ᐃ, 143 * ᐃ, 153 * ᐃ, ᐃ * 140);
		Ⲇ.bezierCurveTo(149 * ᐃ, 140.5 * ᐃ, ᐃ * 149, ᐃ * 140.5, 145 * ᐃ, ᐃ * 141);
		Ⲇ.bezierCurveTo(150 * ᐃ, ᐃ * 132, 161 * ᐃ, 131 * ᐃ, 170 * ᐃ, 138 * ᐃ);
		Ⲇ.bezierCurveTo(173 * ᐃ, ᐃ * 141, ᐃ * 165, ᐃ * 150, 162 * ᐃ, ᐃ * 150);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(106 * ᐃ, ᐃ * 110);
		Ⲇ.bezierCurveTo(ᐃ * 104, 98 * ᐃ, 112 * ᐃ, 91 * ᐃ, ᐃ * 118, 101 * ᐃ);
		Ⲇ.bezierCurveTo(122 * ᐃ, ᐃ * 115, ᐃ * 121, 119 * ᐃ, 117 * ᐃ, ᐃ * 124);
		Ⲇ.bezierCurveTo(ᐃ * 112, ᐃ * 129, 107 * ᐃ, ᐃ * 124, ᐃ * 106, 112 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(64 * ᐃ, ᐃ * 106);
		Ⲇ.bezierCurveTo(66 * ᐃ, ᐃ * 97, ᐃ * 72, ᐃ * 89, 76 * ᐃ, ᐃ * 98);
		Ⲇ.bezierCurveTo(ᐃ * 78, 106 * ᐃ, 79 * ᐃ, 118 * ᐃ, 72 * ᐃ, 126 * ᐃ);
		Ⲇ.bezierCurveTo(65 * ᐃ, ᐃ * 130, 63 * ᐃ, 117 * ᐃ, ᐃ * 64, ᐃ * 108);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1]);
		return ΔⲆ
	}

	function ⵠⵠⲆⵠⵠⵠⵠᐃΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 200 * ᐃ;
		ΔⲆ.height = 200 * ᐃ;
		Ⲇ.translate(ᐃⲆⵠⲆΔⵠⵠ * ᐃ, ⲆⵠᐃⵠⲆ * ᐃ);
		Ⲇ.fillStyle = Δⵠ[ᐃᐃⲆ];
		Ⲇ.fillRect(-ΔᐃΔᐃ, -ᐃΔⵠⲆ, ΔⲆ.width, ΔⲆ.height);
		Ⲇ.fillStyle = Δⵠ[9];
		Ⲇ.fillRect(0, 0, ΔⲆ.width, ΔⲆ.height);
		Ⲇ.fillStyle = Δⵠ[17];
		Ⲇ.fillRect(0, ⵠΔᐃⵠ, ΔⲆ.width, ΔⲆ.height / 2.1);
		Ⲇ.fillStyle = Δⵠ[26];
		Ⲇ.fillRect(ΔⲆ.width / 1.77, ΔⲆ.height / 2.1, ΔⲆ.width / 2.1, ΔⲆ.height / 2.1);
		Ⲇ.fillStyle = Δⵠ[28];
		Ⲇ.fillRect(ΔⲆ.width / 1.77, ΔⲆ.height / 2.1, 5, ΔⲆ.height / 2.1);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[ΔᐃⲆⵠⵠΔΔ], "so", 3, 6, ⲆⵠⲆⲆ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[28], ⵠ[418], 6, ᐃᐃᐃⵠ, ⲆᐃΔⲆ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[28], ⵠ[418], 6, 1, ΔᐃΔⲆ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[28], ⵠ[418], ΔᐃΔᐃᐃ, 0, ⵠᐃⲆⲆ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[5], ⵠ[267], 2, ΔⵠⲆᐃ, 2);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[5], ⵠ[267], 2, 1, 1);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[ΔⲆⵠⵠ], ⵠ[267], 2, ⵠᐃⲆⲆ, 0);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[5], "t", ΔⵠⲆᐃ, 5, 4);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[ΔⲆⲆⵠⵠ], "t", ⲆⲆᐃⵠ, ⲆⵠⲆᐃ, ᐃᐃᐃⵠ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[ᐃᐃⵠᐃᐃ], "t", 4, 1, ⵠⲆᐃ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[ⵠᐃΔᐃΔ], "b", ᐃⵠΔⲆ, 3, 2);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[9], "b", 4, ΔᐃΔⲆ, ΔΔᐃ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[2], "s", 2, ᐃᐃᐃⵠ, ᐃᐃⲆⲆ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[ᐃᐃᐃΔᐃ], "s", ᐃⵠΔⲆ, ΔᐃⵠⲆ, ΔⵠΔ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[ⲆΔᐃΔⵠ], "s", 4, 0, ᐃᐃⲆ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[ⵠⲆΔᐃᐃ], "g", ΔⵠⲆᐃ, ⵠⵠⵠᐃ, 2);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[11], "g", ᐃⲆᐃΔ, Ⲇⵠᐃ, 1);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[ΔⲆⵠΔᐃ], "g", ⵠⲆⲆⵠ, ⵠⵠⲆⵠ, ⵠⲆᐃ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[ΔᐃⲆⲆ], "p", ᐃᐃΔΔᐃ, -1);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[25], "dg", ⵠⵠΔⵠ, ⵠⵠᐃᐃᐃ, ⵠⲆⵠⵠ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[27], ⵠ[ᐃΔⵠⲆ], 2, 2, 2);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[27], ⵠ[ᐃΔⵠⲆ], ΔᐃⵠΔ, ⲆᐃΔ, ⵠⲆΔⲆ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[27], ⵠ[ⵠΔΔⲆᐃ], ⵠⵠⵠᐃ, 0, 0);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[19], "f", 2, 2, 2);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[ᐃⲆΔⲆⲆΔᐃ], "f", 3, ⲆΔΔΔ, Δⵠᐃ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[21], "f", 4, 0, 0);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[22], ⵠ[169], 2, 2, ᐃᐃⲆⲆ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[22], ⵠ[169], 3, ΔⵠΔ, ⵠⲆΔⲆ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[22], ⵠ[169], ⵠᐃᐃΔ, ⵠⲆΔ, 0);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[23], ⵠ[563], 3, Ⲇⵠᐃ, ⲆᐃΔ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[23], ⵠ[563], ⵠᐃΔΔ, ⵠΔᐃⵠ, ΔⲆⲆ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[23], ⵠ[563], ⲆⲆⲆⲆ, 2, ⲆᐃⵠΔ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[23], "d", Δⵠⵠᐃ, ⲆᐃΔ, ΔⵠΔ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[23], "d", ⵠⲆΔⵠ, 0, ᐃᐃⲆ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[23], "d", ᐃᐃᐃⵠ, 2, ⲆⲆⲆⲆ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[24], "a", 2, 2, ᐃᐃΔⵠ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[24], "a", 3, ⲆΔΔΔ, 1);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[24], "a", ⵠⵠᐃΔ, 0, 0);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[30], "l", 4, 2, 2);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[30], "l", 4, 1, ΔᐃⵠⲆ);
		ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ[30], "l", ⵠᐃΔΔ, 0, ⲆⲆⵠⲆ);
		ᐃΔΔ(Ⲇ, 0, ⵠⵠⵠΔ, ⵠⵠⵠ);
		Ⲇ.globalCompositeOperation = ⵠ[381];
		Ⲇ.translate(ᐃ * -9, ᐃ * -4);
		Ⲇ.rect(ᐃ * 5, 0, ΔⲆ.width * ᐃ, ᐃ * ΔⲆ.height, ᐃ * 10);
		Ⲇ.lineWidth = 7 * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[ΔᐃⲆⲆΔ];
		Ⲇ.stroke();
		return ΔⲆ
	}

	function ᐃᐃΔⵠΔ(Ⲇ, ᐃ, Δⵠ, Δᐃᐃ, ΔⲆΔ, ΔⵠᐃⲆ, ⲆΔⲆⵠ) {
		if (undefined === ⲆΔⲆⵠ) ⲆΔⲆⵠ = ⵠⲆΔ;
		for (var ⵠᐃᐃᐃ = -1 == ΔⵠᐃⲆ ? ⵠⲆⵠⵠ : ΔⵠᐃⲆ; ⵠᐃᐃᐃ >= ⲆΔⲆⵠ; ⵠᐃᐃᐃ--) {
			for (var Ⲇᐃ = 0; Ⲇᐃ < 200; Ⲇᐃ++) {
				for (var ⲆⲆᐃⲆ = 0; ⲆⲆᐃⲆ < 200; ⲆⲆᐃⲆ++) {
					var ᐃΔⲆⲆ = ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[ⲆⲆᐃⲆ][Ⲇᐃ];
					if (!ᐃΔⲆⲆ || !ᐃΔⲆⲆ[Δᐃᐃ]) continue;
					if (ΔⵠᐃⲆ == -1) var Ⲇⵠⵠ = ᐃΔⲆⲆ[Δᐃᐃ];
					else var Ⲇⵠⵠ = ᐃΔⲆⲆ[Δᐃᐃ][ⵠᐃᐃᐃ];
					for (var ᐃᐃⲆᐃ = Ⲇᐃⵠ; Ⲇⵠⵠ && Ⲇⵠⵠ.length > ᐃᐃⲆᐃ; ᐃᐃⲆᐃ++) {
						var ⲆᐃΔⵠ = Ⲇⵠⵠ[ᐃᐃⲆᐃ];
						Ⲇ.fillStyle = Δⵠ;
						ᐃΔΔ(Ⲇ, ᐃ * ⲆᐃΔⵠ.x * .0095, .0095 * (ⲆᐃΔⵠ.y * ᐃ), ΔⲆΔ * ᐃ);
						Ⲇ.fill()
					}
				}
			}
		}
	}

	function ⲆΔᐃΔⵠⵠΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 185 * ᐃ;
		ΔⲆ.height = ᐃ * 240;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 44, ᐃ * 137);
		Ⲇ.bezierCurveTo(60 * ᐃ, ᐃ * 87, 68 * ᐃ, ᐃ * 66, 92 * ᐃ, ᐃ * 67);
		Ⲇ.bezierCurveTo(ᐃ * 115, ᐃ * 64, 129 * ᐃ, ᐃ * 97, ᐃ * 137, ᐃ * 136);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(53 * ᐃ, 181 * ᐃ);
		Ⲇ.bezierCurveTo(30 * ᐃ, 164 * ᐃ, ᐃ * ΔΔΔⵠᐃⲆⵠ, 150 * ᐃ, 11 * ᐃ, 136 * ᐃ);
		Ⲇ.bezierCurveTo(28 * ᐃ, 121 * ᐃ, 38 * ᐃ, 132 * ᐃ, 48 * ᐃ, 150 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(63 * ᐃ, 208 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 75, 224 * ᐃ, 86 * ᐃ, ᐃ * 228, ᐃ * 93, ᐃ * 228);
		Ⲇ.bezierCurveTo(104 * ᐃ, ᐃ * 229, ᐃ * 116, ᐃ * 219, 122 * ᐃ, 205 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(130 * ᐃ, 170 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 146, ᐃ * 125, ᐃ * 156, 126 * ᐃ, 173 * ᐃ, ᐃ * 137);
		Ⲇ.bezierCurveTo(ᐃ * 167, ᐃ * 151, 143 * ᐃ, 174 * ᐃ, ᐃ * 131, ᐃ * 183);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(39 * ᐃ, ᐃ * 140);
		Ⲇ.bezierCurveTo(75 * ᐃ, ᐃ * 126, ᐃ * 113, 127 * ᐃ, ᐃ * 143, 137 * ᐃ);
		Ⲇ.bezierCurveTo(141 * ᐃ, 186 * ᐃ, ᐃ * 130, ᐃ * 202, 113 * ᐃ, ᐃ * 214);
		Ⲇ.bezierCurveTo(ᐃ * 85, 228 * ᐃ, ᐃ * 56, 219 * ᐃ, ᐃ * 48, 173 * ᐃ);
		Ⲇ.bezierCurveTo(40 * ᐃ, ᐃ * 148, 43 * ᐃ, ᐃ * 145, ᐃ * 39, ᐃ * 140);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 90, 95 * ᐃ);
		Ⲇ.bezierCurveTo(99 * ᐃ, ᐃ * 82, 98 * ᐃ, ᐃ * 58, ᐃ * 99, ᐃ * 40);
		Ⲇ.bezierCurveTo(90 * ᐃ, ᐃ * 38, 89 * ᐃ, ᐃ * 34, 92 * ᐃ, ᐃ * 17);
		Ⲇ.bezierCurveTo(92 * ᐃ, ᐃ * 5, 83 * ᐃ, ᐃ * ⲆΔⲆⵠΔ, 78 * ᐃ, 29 * ᐃ);
		Ⲇ.bezierCurveTo(72 * ᐃ, ᐃ * 59, ᐃ * 87, 81 * ᐃ, ᐃ * 89, ᐃ * 87);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(90 * ᐃ, ᐃ * 86);
		Ⲇ.bezierCurveTo(95 * ᐃ, ᐃ * 74, ᐃ * 95, ᐃ * 62, ᐃ * 95, ᐃ * 43);
		Ⲇ.bezierCurveTo(ᐃ * 84, ᐃ * 37, ᐃ * 86, 34 * ᐃ, ᐃ * 89, ᐃ * 16);
		Ⲇ.bezierCurveTo(75 * ᐃ, 29 * ᐃ, ᐃ * 80, ᐃ * 58, ᐃ * 90, 85 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(92 * ᐃ, 117 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 98, ᐃ * 87, 93 * ᐃ, 78 * ᐃ, ᐃ * 85, ᐃ * 76);
		Ⲇ.bezierCurveTo(ᐃ * 85.5, 79.5 * ᐃ, ᐃ * 85.5, ᐃ * 79.5, ᐃ * 86, 83 * ᐃ);
		Ⲇ.bezierCurveTo(84 * ᐃ, ᐃ * 85.5, 84 * ᐃ, ᐃ * 85.5, ᐃ * 82, 88 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 90, 93 * ᐃ, ᐃ * 89, 100 * ᐃ, ᐃ * 92, ᐃ * 117);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(92 * ᐃ, 175 * ᐃ);
		Ⲇ.bezierCurveTo(95 * ᐃ, 135 * ᐃ, ᐃ * 98, 125 * ᐃ, 109 * ᐃ, ᐃ * 121);
		Ⲇ.bezierCurveTo(ᐃ * 106, ᐃ * 114, ᐃ * 104, 114 * ᐃ, ᐃ * 102, ᐃ * 113);
		Ⲇ.bezierCurveTo(103 * ᐃ, 106 * ᐃ, ᐃ * 104, 103 * ᐃ, ᐃ * 107, ᐃ * 96);
		Ⲇ.bezierCurveTo(74 * ᐃ, ᐃ * 108, ᐃ * 86, 157 * ᐃ, 92 * ᐃ, ᐃ * 174);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⲆ]);
		return ΔⲆ
	}
	const ⵠⵠΔᐃⵠⲆΔ = ᐃⲆΔᐃⵠᐃΔ;

	function ⵠΔⲆⵠΔⵠᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 188 * ᐃ;
		ΔⲆ.height = ᐃ * 190;
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(0, ᐃ * ᐃᐃᐃΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 33.00567626953125, 95.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(42.00567626953125 * ᐃ, ᐃ * 87.44320678710938, ᐃ * 48.00567626953125, 51.443206787109375 * ᐃ, 74.00567626953125 * ᐃ, 47.443206787109375 * ᐃ);
		Ⲇ.bezierCurveTo(100.00567626953125 * ᐃ, ᐃ * 42.443206787109375, ᐃ * 118.00567626953125, ᐃ * 49.443206787109375, 131.00567626953125 * ᐃ, ᐃ * 55.443206787109375);
		Ⲇ.bezierCurveTo(ᐃ * 140.00567626953125, 70.44320678710938 * ᐃ, ᐃ * 145.00567626953125, 87.44320678710938 * ᐃ, ᐃ * 152.00567626953125, 94.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(149.00567626953125 * ᐃ, ᐃ * 99.44320678710938, ᐃ * 147.00567626953125, ᐃ * 98.44320678710938, ᐃ * 141.00567626953125, 101.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 147.00567626953125, ᐃ * 108.44320678710938, 147.00567626953125 * ᐃ, 111.44320678710938 * ᐃ, 147.00567626953125 * ᐃ, ᐃ * 112.44320678710938);
		Ⲇ.bezierCurveTo(143.00567626953125 * ᐃ, 112.44320678710938 * ᐃ, ᐃ * 141.00567626953125, 112.44320678710938 * ᐃ, ᐃ * 137.00567626953125, 111.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 138.00567626953125, ᐃ * 117.44320678710938, 138.00567626953125 * ᐃ, 120.44320678710938 * ᐃ, ᐃ * 138.00567626953125, 124.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 125.00567626953125, 107.44320678710938 * ᐃ, ᐃ * 121.00567626953125, ᐃ * 124.44320678710938, 110.00567626953125 * ᐃ, ᐃ * 141.44320678710938);
		Ⲇ.bezierCurveTo(102.00567626953125 * ᐃ, ᐃ * 158.44320678710938, 89.00567626953125 * ᐃ, 158.44320678710938 * ᐃ, ᐃ * 80.00567626953125, ᐃ * 144.44320678710938);
		Ⲇ.bezierCurveTo(61.00567626953125 * ᐃ, ᐃ * 111.44320678710938, 56.00567626953125 * ᐃ, 117.44320678710938 * ᐃ, 48.00567626953125 * ᐃ, 120.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 46.00567626953125, 118.44320678710938 * ᐃ, 47.00567626953125 * ᐃ, 112.44320678710938 * ᐃ, ᐃ * 48.00567626953125, ᐃ * 107.44320678710938);
		Ⲇ.bezierCurveTo(ᐃ * 43.00567626953125, ᐃ * 111.44320678710938, 40.00567626953125 * ᐃ, 111.44320678710938 * ᐃ, 37.00567626953125 * ᐃ, 110.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(39.50567626953125 * ᐃ, ᐃ * 104.94320678710938, 39.50567626953125 * ᐃ, 104.94320678710938 * ᐃ, 42.00567626953125 * ᐃ, ᐃ * 99.44320678710938);
		Ⲇ.bezierCurveTo(33.00567626953125 * ᐃ, ᐃ * 99.44320678710938, 33.00567626953125 * ᐃ, ᐃ * 98.44320678710938, ᐃ * 33.00567626953125, 96.44320678710938 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ], Δⵠ[ⵠⵠⵠ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 60.00567626953125, 99.35227966308594 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 70.00567626953125, ᐃ * 82.35227966308594, 85.00567626953125 * ᐃ, ᐃ * 86.35227966308594, ᐃ * 87.00567626953125, 97.35227966308594 * ᐃ);
		Ⲇ.bezierCurveTo(89.00567626953125 * ᐃ, 101.35227966308594 * ᐃ, 88.00567626953125 * ᐃ, 105.35227966308594 * ᐃ, ᐃ * 87.00567626953125, 110.35227966308594 * ᐃ);
		Ⲇ.bezierCurveTo(89.00567626953125 * ᐃ, ᐃ * 111.35227966308594, 91.00567626953125 * ᐃ, ᐃ * 112.35227966308594, ᐃ * 93.00567626953125, ᐃ * 115.35227966308594);
		Ⲇ.bezierCurveTo(ᐃ * 96.00567626953125, ᐃ * 111.35227966308594, 99.00567626953125 * ᐃ, 111.35227966308594 * ᐃ, ᐃ * 100.00567626953125, 110.35227966308594 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 98.00567626953125, 92.35227966308594 * ᐃ, ᐃ * 103.00567626953125, ᐃ * 86.35227966308594, ᐃ * 113.00567626953125, 89.35227966308594 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 122.00567626953125, 92.35227966308594 * ᐃ, ᐃ * 123.00567626953125, ᐃ * 94.35227966308594, 126.00567626953125 * ᐃ, 98.35227966308594 * ᐃ);
		Ⲇ.bezierCurveTo(124.00567626953125 * ᐃ, ᐃ * 102.35227966308594, ᐃ * 123.00567626953125, 103.35227966308594 * ᐃ, 121.00567626953125 * ᐃ, ᐃ * 104.35227966308594);
		Ⲇ.bezierCurveTo(ᐃ * 124.00567626953125, 105.35227966308594 * ᐃ, ᐃ * 126.00567626953125, 107.35227966308594 * ᐃ, ᐃ * 129.00567626953125, ᐃ * 111.35227966308594);
		Ⲇ.bezierCurveTo(ᐃ * 115.00567626953125, ᐃ * 122.35227966308594, 113.00567626953125 * ᐃ, 145.35227966308594 * ᐃ, ᐃ * 100.00567626953125, 152.35227966308594 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 91.00567626953125, ᐃ * 158.35227966308594, ᐃ * 83.00567626953125, ᐃ * 149.35227966308594, ᐃ * 76.00567626953125, ᐃ * 138.35227966308594);
		Ⲇ.bezierCurveTo(67.00567626953125 * ᐃ, ᐃ * 114.35227966308594, 63.00567626953125 * ᐃ, 113.35227966308594 * ᐃ, 59.00567626953125 * ᐃ, 111.35227966308594 * ᐃ);
		Ⲇ.bezierCurveTo(62.00567626953125 * ᐃ, 107.35227966308594 * ᐃ, ᐃ * 64.00567626953125, ᐃ * 105.35227966308594, ᐃ * 66.00567626953125, ᐃ * 104.35227966308594);
		Ⲇ.bezierCurveTo(ᐃ * 63.00567626953125, 100.35227966308594 * ᐃ, 62.00567626953125 * ᐃ, 100.35227966308594 * ᐃ, ᐃ * 60.00567626953125, ᐃ * 99.35227966308594);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ᐃᐃᐃ], ᐃ * ΔⵠⲆᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(51.00567626953125 * ᐃ, ᐃ * 72.53409576416016);
		Ⲇ.bezierCurveTo(48.00567626953125 * ᐃ, 56.534095764160156 * ᐃ, ᐃ * 48.00567626953125, ᐃ * 49.534095764160156, ᐃ * 54.00567626953125, 35.534095764160156 * ᐃ);
		Ⲇ.bezierCurveTo(58.00567626953125 * ᐃ, 26.534095764160156 * ᐃ, ᐃ * 65.00567626953125, ᐃ * 27.534095764160156, ᐃ * 73.00567626953125, 40.534095764160156 * ᐃ);
		Ⲇ.bezierCurveTo(81.00567626953125 * ᐃ, 49.534095764160156 * ᐃ, 82.00567626953125 * ᐃ, ᐃ * 50.534095764160156, 83.00567626953125 * ᐃ, ᐃ * 51.534095764160156);
		Ⲇ.bezierCurveTo(77.00567626953125 * ᐃ, ᐃ * 71.53409576416016, 64.00567626953125 * ᐃ, ᐃ * 75.53409576416016, ᐃ * 51.00567626953125, 72.53409576416016 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ᐃⵠⵠⲆ], ⲆⲆⲆⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(105.00567626953125 * ᐃ, 50.53410339355469 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 112.00567626953125, 48.53410339355469 * ᐃ, ᐃ * 125.00567626953125, 21.534103393554688 * ᐃ, 132.00567626953125 * ᐃ, ᐃ * 33.53410339355469);
		Ⲇ.bezierCurveTo(138.00567626953125 * ᐃ, 42.53410339355469 * ᐃ, 140.00567626953125 * ᐃ, 64.53410339355469 * ᐃ, 136.00567626953125 * ᐃ, ᐃ * 75.53410339355469);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃ * 2);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ᐃᐃⲆ, ᐃ * -ⵠⲆⲆᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(33.00567626953125 * ᐃ, ᐃ * 95.44320678710938);
		Ⲇ.bezierCurveTo(ᐃ * 42.00567626953125, 87.44320678710938 * ᐃ, 48.00567626953125 * ᐃ, ᐃ * 51.443206787109375, ᐃ * 74.00567626953125, ᐃ * 47.443206787109375);
		Ⲇ.bezierCurveTo(100.00567626953125 * ᐃ, 42.443206787109375 * ᐃ, ᐃ * 118.00567626953125, ᐃ * 49.443206787109375, ᐃ * 131.00567626953125, ᐃ * 55.443206787109375);
		Ⲇ.bezierCurveTo(ᐃ * 140.00567626953125, ᐃ * 70.44320678710938, 145.00567626953125 * ᐃ, 87.44320678710938 * ᐃ, 152.00567626953125 * ᐃ, ᐃ * 94.44320678710938);
		Ⲇ.bezierCurveTo(ᐃ * 149.00567626953125, ᐃ * 99.44320678710938, ᐃ * 147.00567626953125, ᐃ * 98.44320678710938, 141.00567626953125 * ᐃ, ᐃ * 101.44320678710938);
		Ⲇ.bezierCurveTo(147.00567626953125 * ᐃ, 108.44320678710938 * ᐃ, ᐃ * 147.00567626953125, 111.44320678710938 * ᐃ, ᐃ * 147.00567626953125, ᐃ * 112.44320678710938);
		Ⲇ.bezierCurveTo(ᐃ * 143.00567626953125, ᐃ * 112.44320678710938, ᐃ * 141.00567626953125, 112.44320678710938 * ᐃ, 137.00567626953125 * ᐃ, ᐃ * 111.44320678710938);
		Ⲇ.bezierCurveTo(ᐃ * 138.00567626953125, 117.44320678710938 * ᐃ, ᐃ * 138.00567626953125, 120.44320678710938 * ᐃ, 138.00567626953125 * ᐃ, 124.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(125.00567626953125 * ᐃ, ᐃ * 107.44320678710938, ᐃ * 121.00567626953125, 124.44320678710938 * ᐃ, ᐃ * 110.00567626953125, 141.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 102.00567626953125, 158.44320678710938 * ᐃ, 89.00567626953125 * ᐃ, 158.44320678710938 * ᐃ, ᐃ * 80.00567626953125, 144.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 61.00567626953125, ᐃ * 111.44320678710938, 56.00567626953125 * ᐃ, ᐃ * 117.44320678710938, ᐃ * 48.00567626953125, ᐃ * 120.44320678710938);
		Ⲇ.bezierCurveTo(46.00567626953125 * ᐃ, ᐃ * 118.44320678710938, ᐃ * 47.00567626953125, 112.44320678710938 * ᐃ, ᐃ * 48.00567626953125, 107.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(43.00567626953125 * ᐃ, ᐃ * 111.44320678710938, 40.00567626953125 * ᐃ, ᐃ * 111.44320678710938, 37.00567626953125 * ᐃ, ᐃ * 110.44320678710938);
		Ⲇ.bezierCurveTo(ᐃ * 39.50567626953125, ᐃ * 104.94320678710938, 39.50567626953125 * ᐃ, ᐃ * 104.94320678710938, ᐃ * 42.00567626953125, 99.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 33.00567626953125, ᐃ * 99.44320678710938, ᐃ * 33.00567626953125, 98.44320678710938 * ᐃ, ᐃ * 33.00567626953125, 96.44320678710938 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[ⲆⲆΔⲆ], ᐃ * ᐃⵠΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 60.00567626953125, ᐃ * 99.35227966308594);
		Ⲇ.bezierCurveTo(ᐃ * 70.00567626953125, 82.35227966308594 * ᐃ, ᐃ * 85.00567626953125, ᐃ * 86.35227966308594, ᐃ * 87.00567626953125, ᐃ * 97.35227966308594);
		Ⲇ.bezierCurveTo(89.00567626953125 * ᐃ, ᐃ * 101.35227966308594, 88.00567626953125 * ᐃ, 105.35227966308594 * ᐃ, ᐃ * 87.00567626953125, 110.35227966308594 * ᐃ);
		Ⲇ.bezierCurveTo(89.00567626953125 * ᐃ, ᐃ * 111.35227966308594, 91.00567626953125 * ᐃ, ᐃ * 112.35227966308594, ᐃ * 93.00567626953125, ᐃ * 115.35227966308594);
		Ⲇ.bezierCurveTo(96.00567626953125 * ᐃ, ᐃ * 111.35227966308594, ᐃ * 99.00567626953125, 111.35227966308594 * ᐃ, 100.00567626953125 * ᐃ, ᐃ * 110.35227966308594);
		Ⲇ.bezierCurveTo(ᐃ * 98.00567626953125, ᐃ * 92.35227966308594, ᐃ * 103.00567626953125, 86.35227966308594 * ᐃ, 113.00567626953125 * ᐃ, 89.35227966308594 * ᐃ);
		Ⲇ.bezierCurveTo(122.00567626953125 * ᐃ, 92.35227966308594 * ᐃ, ᐃ * 123.00567626953125, 94.35227966308594 * ᐃ, ᐃ * 126.00567626953125, 98.35227966308594 * ᐃ);
		Ⲇ.bezierCurveTo(124.00567626953125 * ᐃ, 102.35227966308594 * ᐃ, ᐃ * 123.00567626953125, ᐃ * 103.35227966308594, ᐃ * 121.00567626953125, 104.35227966308594 * ᐃ);
		Ⲇ.bezierCurveTo(124.00567626953125 * ᐃ, ᐃ * 105.35227966308594, ᐃ * 126.00567626953125, ᐃ * 107.35227966308594, ᐃ * 129.00567626953125, 111.35227966308594 * ᐃ);
		Ⲇ.bezierCurveTo(115.00567626953125 * ᐃ, ᐃ * 122.35227966308594, 113.00567626953125 * ᐃ, ᐃ * 145.35227966308594, ᐃ * 100.00567626953125, 152.35227966308594 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 91.00567626953125, 158.35227966308594 * ᐃ, ᐃ * 83.00567626953125, ᐃ * 149.35227966308594, ᐃ * 76.00567626953125, 138.35227966308594 * ᐃ);
		Ⲇ.bezierCurveTo(67.00567626953125 * ᐃ, 114.35227966308594 * ᐃ, ᐃ * 63.00567626953125, 113.35227966308594 * ᐃ, ᐃ * 59.00567626953125, ᐃ * 111.35227966308594);
		Ⲇ.bezierCurveTo(ᐃ * 62.00567626953125, 107.35227966308594 * ᐃ, 64.00567626953125 * ᐃ, 105.35227966308594 * ᐃ, 66.00567626953125 * ᐃ, ᐃ * 104.35227966308594);
		Ⲇ.bezierCurveTo(ᐃ * 63.00567626953125, ᐃ * 100.35227966308594, 62.00567626953125 * ᐃ, ᐃ * 100.35227966308594, ᐃ * 60.00567626953125, 99.35227966308594 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(33.00567626953125 * ᐃ, ᐃ * 95.44320678710938);
		Ⲇ.bezierCurveTo(42.00567626953125 * ᐃ, ᐃ * 87.44320678710938, ᐃ * 48.00567626953125, 51.443206787109375 * ᐃ, ᐃ * 74.00567626953125, ᐃ * 47.443206787109375);
		Ⲇ.bezierCurveTo(ᐃ * 100.00567626953125, ᐃ * 42.443206787109375, ᐃ * 118.00567626953125, 49.443206787109375 * ᐃ, ᐃ * 131.00567626953125, 55.443206787109375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 140.00567626953125, 70.44320678710938 * ᐃ, 145.00567626953125 * ᐃ, ᐃ * 87.44320678710938, 152.00567626953125 * ᐃ, ᐃ * 94.44320678710938);
		Ⲇ.bezierCurveTo(149.00567626953125 * ᐃ, 99.44320678710938 * ᐃ, 147.00567626953125 * ᐃ, 98.44320678710938 * ᐃ, 141.00567626953125 * ᐃ, ᐃ * 101.44320678710938);
		Ⲇ.bezierCurveTo(ᐃ * 147.00567626953125, 108.44320678710938 * ᐃ, ᐃ * 147.00567626953125, ᐃ * 111.44320678710938, 147.00567626953125 * ᐃ, 112.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 143.00567626953125, 112.44320678710938 * ᐃ, ᐃ * 141.00567626953125, ᐃ * 112.44320678710938, 137.00567626953125 * ᐃ, ᐃ * 111.44320678710938);
		Ⲇ.bezierCurveTo(ᐃ * 138.00567626953125, 117.44320678710938 * ᐃ, ᐃ * 138.00567626953125, 120.44320678710938 * ᐃ, 138.00567626953125 * ᐃ, ᐃ * 124.44320678710938);
		Ⲇ.bezierCurveTo(ᐃ * 125.00567626953125, 107.44320678710938 * ᐃ, 121.00567626953125 * ᐃ, ᐃ * 124.44320678710938, ᐃ * 110.00567626953125, 141.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 102.00567626953125, ᐃ * 158.44320678710938, 89.00567626953125 * ᐃ, ᐃ * 158.44320678710938, 80.00567626953125 * ᐃ, ᐃ * 144.44320678710938);
		Ⲇ.bezierCurveTo(61.00567626953125 * ᐃ, ᐃ * 111.44320678710938, ᐃ * 56.00567626953125, ᐃ * 117.44320678710938, 48.00567626953125 * ᐃ, 120.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(46.00567626953125 * ᐃ, 118.44320678710938 * ᐃ, ᐃ * 47.00567626953125, ᐃ * 112.44320678710938, ᐃ * 48.00567626953125, ᐃ * 107.44320678710938);
		Ⲇ.bezierCurveTo(ᐃ * 43.00567626953125, 111.44320678710938 * ᐃ, 40.00567626953125 * ᐃ, 111.44320678710938 * ᐃ, 37.00567626953125 * ᐃ, 110.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(39.50567626953125 * ᐃ, 104.94320678710938 * ᐃ, ᐃ * 39.50567626953125, ᐃ * 104.94320678710938, ᐃ * 42.00567626953125, ᐃ * 99.44320678710938);
		Ⲇ.bezierCurveTo(ᐃ * 33.00567626953125, ᐃ * 99.44320678710938, 33.00567626953125 * ᐃ, 98.44320678710938 * ᐃ, ᐃ * 33.00567626953125, ᐃ * 96.44320678710938);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ΔΔΔᐃᐃ, Δⵠ[ⵠⵠⵠᐃ], ᐃ * 3);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 51.00567626953125, ᐃ * 72.53409576416016);
		Ⲇ.bezierCurveTo(ᐃ * 48.00567626953125, ᐃ * 56.534095764160156, 48.00567626953125 * ᐃ, ᐃ * 49.534095764160156, ᐃ * 54.00567626953125, ᐃ * 35.534095764160156);
		Ⲇ.bezierCurveTo(ᐃ * 58.00567626953125, ᐃ * 26.534095764160156, ᐃ * 65.00567626953125, 27.534095764160156 * ᐃ, 73.00567626953125 * ᐃ, 40.534095764160156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 81.00567626953125, 49.534095764160156 * ᐃ, 82.00567626953125 * ᐃ, 50.534095764160156 * ᐃ, ᐃ * 83.00567626953125, 51.534095764160156 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[Ⲇⵠᐃ], Δⵠ[ΔᐃΔᐃ], ΔⲆΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(105.00567626953125 * ᐃ, ᐃ * 50.53410339355469);
		Ⲇ.bezierCurveTo(ᐃ * 112.00567626953125, ᐃ * 48.53410339355469, 125.00567626953125 * ᐃ, 21.534103393554688 * ᐃ, 132.00567626953125 * ᐃ, ᐃ * 33.53410339355469);
		Ⲇ.bezierCurveTo(138.00567626953125 * ᐃ, 42.53410339355469 * ᐃ, 140.00567626953125 * ᐃ, 64.53410339355469 * ᐃ, ᐃ * 136.00567626953125, ᐃ * 75.53410339355469);
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⲆⲆ], Δⵠ[2], ⲆⲆᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(57.00567626953125 * ᐃ, 68.53410339355469 * ᐃ);
		Ⲇ.bezierCurveTo(63.00567626953125 * ᐃ, ᐃ * 69.53410339355469, 69.00567626953125 * ᐃ, 66.53410339355469 * ᐃ, ᐃ * 73.00567626953125, 60.53410339355469 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 66.00567626953125, ᐃ * 47.53410339355469, ᐃ * 61.00567626953125, ᐃ * 42.53410339355469, 58.00567626953125 * ᐃ, 49.53410339355469 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 56.00567626953125, ᐃ * 59.53410339355469, 56.00567626953125 * ᐃ, 64.53410339355469 * ᐃ, 57.00567626953125 * ᐃ, ᐃ * 67.53410339355469);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 115.00567626953125, ᐃ * 59.715911865234375);
		Ⲇ.bezierCurveTo(ᐃ * 119.00567626953125, 48.715911865234375 * ᐃ, 126.00567626953125 * ᐃ, ᐃ * 41.715911865234375, ᐃ * 129.00567626953125, 48.715911865234375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 131.00567626953125, ᐃ * 56.715911865234375, 133.00567626953125 * ᐃ, ᐃ * 71.71591186523438, 127.00567626953125 * ᐃ, 68.71591186523438 * ᐃ);
		Ⲇ.bezierCurveTo(120.00567626953125 * ᐃ, ᐃ * 67.71591186523438, 114.00567626953125 * ᐃ, ᐃ * 59.715911865234375, 116.00567626953125 * ᐃ, 58.715911865234375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		ᐃΔΔ(Ⲇ, 77 * ᐃ, ᐃ * 107, ⵠⵠᐃᐃᐃ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃΔⵠ]);
		ᐃΔΔ(Ⲇ, ᐃ * 110, 107 * ᐃ, ΔΔΔⵠΔ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃⵠ]);
		ᐃΔΔ(Ⲇ, 75 * ᐃ, ᐃ * 105, ᐃ * 3);
		ΔΔ(Ⲇ, Δⵠ[4]);
		ᐃΔΔ(Ⲇ, ᐃ * 108, 105 * ᐃ, ᐃ * 3);
		ΔΔ(Ⲇ, Δⵠ[4]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 88.00567626953125, ᐃ * 141.4431915283203);
		Ⲇ.bezierCurveTo(ᐃ * 93.00567626953125, 137.4431915283203 * ᐃ, 96.00567626953125 * ᐃ, ᐃ * 138.4431915283203, ᐃ * 100.00567626953125, ᐃ * 141.4431915283203);
		Ⲇ.bezierCurveTo(ᐃ * 103.00567626953125, ᐃ * 143.4431915283203, 101.00567626953125 * ᐃ, 149.4431915283203 * ᐃ, ᐃ * 95.00567626953125, ᐃ * 148.4431915283203);
		Ⲇ.bezierCurveTo(85.00567626953125 * ᐃ, ᐃ * 148.4431915283203, 86.00567626953125 * ᐃ, ᐃ * 145.4431915283203, ᐃ * 88.00567626953125, ᐃ * 142.4431915283203);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1]);
		return ΔⲆ
	}

	function ΔᐃΔⲆΔΔⵠΔΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 188;
		ΔⲆ.height = ᐃ * 190;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(33.00567626953125 * ᐃ, 95.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(42.00567626953125 * ᐃ, 87.44320678710938 * ᐃ, 48.00567626953125 * ᐃ, 51.443206787109375 * ᐃ, ᐃ * 74.00567626953125, 47.443206787109375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 100.00567626953125, ᐃ * 42.443206787109375, ᐃ * 118.00567626953125, ᐃ * 49.443206787109375, ᐃ * 131.00567626953125, ᐃ * 55.443206787109375);
		Ⲇ.bezierCurveTo(140.00567626953125 * ᐃ, 70.44320678710938 * ᐃ, ᐃ * 145.00567626953125, 87.44320678710938 * ᐃ, ᐃ * 152.00567626953125, 94.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 149.00567626953125, ᐃ * 99.44320678710938, 147.00567626953125 * ᐃ, ᐃ * 98.44320678710938, ᐃ * 141.00567626953125, ᐃ * 101.44320678710938);
		Ⲇ.bezierCurveTo(147.00567626953125 * ᐃ, ᐃ * 108.44320678710938, ᐃ * 147.00567626953125, 111.44320678710938 * ᐃ, 147.00567626953125 * ᐃ, 112.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(143.00567626953125 * ᐃ, 112.44320678710938 * ᐃ, 141.00567626953125 * ᐃ, 112.44320678710938 * ᐃ, 137.00567626953125 * ᐃ, 111.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 138.00567626953125, ᐃ * 117.44320678710938, ᐃ * 138.00567626953125, 120.44320678710938 * ᐃ, 138.00567626953125 * ᐃ, 124.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 125.00567626953125, ᐃ * 107.44320678710938, 121.00567626953125 * ᐃ, ᐃ * 124.44320678710938, ᐃ * 110.00567626953125, 141.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(102.00567626953125 * ᐃ, 158.44320678710938 * ᐃ, 89.00567626953125 * ᐃ, ᐃ * 158.44320678710938, ᐃ * 80.00567626953125, 144.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(61.00567626953125 * ᐃ, 111.44320678710938 * ᐃ, 56.00567626953125 * ᐃ, ᐃ * 117.44320678710938, 48.00567626953125 * ᐃ, 120.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(46.00567626953125 * ᐃ, 118.44320678710938 * ᐃ, 47.00567626953125 * ᐃ, ᐃ * 112.44320678710938, 48.00567626953125 * ᐃ, 107.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 43.00567626953125, 111.44320678710938 * ᐃ, ᐃ * 40.00567626953125, 111.44320678710938 * ᐃ, 37.00567626953125 * ᐃ, 110.44320678710938 * ᐃ);
		Ⲇ.bezierCurveTo(39.50567626953125 * ᐃ, 104.94320678710938 * ᐃ, 39.50567626953125 * ᐃ, 104.94320678710938 * ᐃ, 42.00567626953125 * ᐃ, ᐃ * 99.44320678710938);
		Ⲇ.bezierCurveTo(ᐃ * 33.00567626953125, ᐃ * 99.44320678710938, ᐃ * 33.00567626953125, ᐃ * 98.44320678710938, ᐃ * 33.00567626953125, 96.44320678710938 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⲆ], Δⵠ[ΔⲆⲆ], ⵠᐃΔⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(51.00567626953125 * ᐃ, 72.53409576416016 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 48.00567626953125, 56.534095764160156 * ᐃ, ᐃ * 48.00567626953125, 49.534095764160156 * ᐃ, ᐃ * 54.00567626953125, 35.534095764160156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 58.00567626953125, ᐃ * 26.534095764160156, ᐃ * 65.00567626953125, ᐃ * 27.534095764160156, 73.00567626953125 * ᐃ, 40.534095764160156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 81.00567626953125, 49.534095764160156 * ᐃ, 82.00567626953125 * ᐃ, 50.534095764160156 * ᐃ, 83.00567626953125 * ᐃ, ᐃ * 51.534095764160156);
		Ⲇ.bezierCurveTo(ᐃ * 77.00567626953125, ᐃ * 71.53409576416016, 64.00567626953125 * ᐃ, 75.53409576416016 * ᐃ, ᐃ * 51.00567626953125, ᐃ * 72.53409576416016);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆ], Δⵠ[0], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(105.00567626953125 * ᐃ, ᐃ * 50.53410339355469);
		Ⲇ.bezierCurveTo(112.00567626953125 * ᐃ, ᐃ * 48.53410339355469, ᐃ * 125.00567626953125, ᐃ * 21.534103393554688, 132.00567626953125 * ᐃ, 33.53410339355469 * ᐃ);
		Ⲇ.bezierCurveTo(138.00567626953125 * ᐃ, 42.53410339355469 * ᐃ, ᐃ * 140.00567626953125, 64.53410339355469 * ᐃ, ᐃ * 136.00567626953125, 75.53410339355469 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ], Δⵠ[ᐃᐃᐃ], 2 * ᐃ);
		return ΔⲆ
	}

	function ⵠᐃⵠⵠΔⲆⵠⲆⵠ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 85;
		var ⲆΔⲆ = ᐃ * 115;
		var ⲆⲆⵠᐃ = ᐃ * 6;
		var ⵠΔΔ = ᐃ * 4;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(ᐃ * -130, ᐃ * -60);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(190 * ᐃ, 87 * ᐃ, ᐃ * 201, ᐃ * 59, 208 * ᐃ, 64 * ᐃ);
		Ⲇ.bezierCurveTo(213 * ᐃ, ᐃ * 68, 204 * ᐃ, ᐃ * 93, 195 * ᐃ, ᐃ * 109);
		Ⲇ.bezierCurveTo(195 * ᐃ, 109 * ᐃ, ᐃ * 202, 124 * ᐃ, 191 * ᐃ, ᐃ * 141);
		Ⲇ.bezierCurveTo(ᐃ * 182, ᐃ * 151, ᐃ * 164, 155 * ᐃ, ᐃ * 148, ᐃ * 144);
		Ⲇ.bezierCurveTo(ᐃ * 136, ᐃ * 135, ᐃ * 138, 111 * ᐃ, 145 * ᐃ, ᐃ * 104);
		Ⲇ.bezierCurveTo(ᐃ * 140, 92 * ᐃ, 131 * ᐃ, 67 * ᐃ, 138 * ᐃ, 63 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 145, ᐃ * 61, ᐃ * 153, 82 * ᐃ, 155 * ᐃ, ᐃ * 96);
		Ⲇ.bezierCurveTo(167 * ᐃ, ᐃ * 91, ᐃ * 178, 92 * ᐃ, ᐃ * 187, 98 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ, Δⵠ, ⵠΔΔ);
		return ΔⲆ
	}
	const ⵠⲆΔΔⵠᐃⵠᐃᐃ = ⵠⵠΔᐃⵠⲆΔ;
	const ΔⵠᐃᐃΔⲆᐃ = ⲆⲆⲆⵠᐃᐃᐃ;
	const ⵠⲆⲆΔΔΔⲆ = ΔᐃⵠⲆΔ;
	const ⵠΔⲆΔΔ = ᐃΔᐃΔ;

	function ᐃᐃⲆᐃⵠΔᐃ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 55 * ᐃ;
		var ⲆΔⲆ = ᐃ * 55;
		var ⲆⲆⵠᐃ = ᐃ * ΔΔⲆᐃᐃ;
		var ⵠΔΔ = ᐃ * ᐃⲆᐃⲆ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(-65 * ᐃ, -55 * ᐃ + ⲆⲆⵠᐃ);
		Ⲇ.globalAlpha = ΔᐃⲆⲆ;
		Ⲇ.beginPath();
		Ⲇ.moveTo(95 * ᐃ, 60 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 107, ᐃ * 62, 110 * ᐃ, ᐃ * 73, 107 * ᐃ, ᐃ * 79);
		Ⲇ.bezierCurveTo(104 * ᐃ, 85 * ᐃ, ᐃ * 85, 93 * ᐃ, ᐃ * 81, ᐃ * 88);
		Ⲇ.bezierCurveTo(ᐃ * 74, ᐃ * 80, 85 * ᐃ, ᐃ * 60, 95 * ᐃ, 60 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆⲆ], Δⵠ[Δⵠᐃ], ᐃⵠΔⵠ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.moveTo(ᐃ * 91, ᐃ * 70);
		Ⲇ.bezierCurveTo(91 * ᐃ, ᐃ * 75, ᐃⵠΔᐃⵠ * ᐃ, ᐃ * 76, ⲆⵠⲆⲆⵠ * ᐃ, ᐃ * 73);
		Ⲇ.bezierCurveTo(ᐃ * ΔᐃΔΔΔ, 69 * ᐃ, 89 * ᐃ, 65 * ᐃ, 91 * ᐃ, ᐃ * 70);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], ⵠⵠΔⵠ);
		return ΔⲆ
	}

	function ᐃⵠΔΔΔⲆⲆΔΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 238 * ᐃ;
		ΔⲆ.height = ᐃ * 230;
		Ⲇ.translate(ᐃ * -93, ᐃ * -110);
		ᐃΔΔ(Ⲇ, 213.5 * ᐃ, 256.75 * ᐃ, ᐃ * 75);
		ΔΔ(Ⲇ, Δⵠ);
		ᐃΔΔ(Ⲇ, ᐃ * 213.5, ᐃ * 175.75, 25 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(156.5 * ᐃ, ᐃ * 137.75);
		Ⲇ.bezierCurveTo(ᐃ * 170.5, ᐃ * 173.75, 195.5 * ᐃ, 177.75 * ᐃ, 209.5 * ᐃ, ᐃ * 177.75);
		Ⲇ.lineWidth = ᐃ * ᐃΔⵠΔⵠᐃⵠ;
		Ⲇ.strokeStyle = Δⵠ;
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 217.5, 178.75 * ᐃ);
		Ⲇ.bezierCurveTo(251.5 * ᐃ, 177.75 * ᐃ, ᐃ * 263.5, ᐃ * 153.75, 270.5 * ᐃ, ᐃ * 140.75);
		Ⲇ.lineWidth = ᐃ * ⲆⵠᐃⲆⵠᐃⵠ;
		Ⲇ.strokeStyle = Δⵠ;
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 130.5, 124.75 * ᐃ);
		Ⲇ.bezierCurveTo(153.5 * ᐃ, ᐃ * 185.75, ᐃ * 198.5, 185.75 * ᐃ, 213.5 * ᐃ, 185.75 * ᐃ);
		Ⲇ.lineWidth = 17 * ᐃ;
		Ⲇ.strokeStyle = Δⵠ;
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 214.5, 183.75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 265.5, 192.75 * ᐃ, ᐃ * 293.5, ᐃ * 141.75, ᐃ * 297.5, ᐃ * 124.75);
		Ⲇ.lineWidth = ᐃ * ᐃⲆΔⵠⵠᐃᐃ;
		Ⲇ.strokeStyle = Δⵠ;
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(107.5 * ᐃ, 213.75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 151.5, 190.75 * ᐃ, ᐃ * 198.5, ᐃ * 184.75, 210.5 * ᐃ, ᐃ * 184.75);
		Ⲇ.lineWidth = ᐃ * 17;
		Ⲇ.strokeStyle = Δⵠ;
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 212.5, 187.75 * ᐃ);
		Ⲇ.bezierCurveTo(258.5 * ᐃ, 182.75 * ᐃ, 286.5 * ᐃ, 194.75 * ᐃ, 314.5 * ᐃ, ᐃ * 206.75);
		Ⲇ.lineWidth = ᐃ * ⲆᐃⲆⲆⵠ;
		Ⲇ.strokeStyle = Δⵠ;
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 102.5, ᐃ * 258.75);
		Ⲇ.bezierCurveTo(ᐃ * 142.5, ᐃ * 200.75, 193.5 * ᐃ, 194.75 * ᐃ, ᐃ * 211.5, ᐃ * 185.75);
		Ⲇ.lineWidth = 17 * ᐃ;
		Ⲇ.strokeStyle = Δⵠ;
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 214.5, 192.75 * ᐃ);
		Ⲇ.bezierCurveTo(276.5 * ᐃ, 194.75 * ᐃ, 306.5 * ᐃ, ᐃ * 233.75, 316.5 * ᐃ, ᐃ * 246.75);
		Ⲇ.lineWidth = ᐃ * 17;
		Ⲇ.strokeStyle = Δⵠ;
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 219.5, ᐃ * 158.75);
		Ⲇ.bezierCurveTo(226.5 * ᐃ, ᐃ * 159.75, ᐃ * 227.5, ᐃ * 147.75, 219.5 * ᐃ, ᐃ * 145.75);
		Ⲇ.closePath();
		Ⲇ.lineWidth = ⵠΔΔΔⵠ * ᐃ;
		Ⲇ.strokeStyle = Δⵠ;
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(210.5 * ᐃ, 160.75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 203.5, 159.75 * ᐃ, 199.5 * ᐃ, ᐃ * 146.75, ᐃ * 210.5, ᐃ * 145.75);
		Ⲇ.closePath();
		Ⲇ.lineWidth = ᐃ * 10;
		Ⲇ.strokeStyle = Δⵠ;
		Ⲇ.stroke();
		return ΔⲆ
	}

	function ᐃᐃⵠⲆⵠⲆᐃ(ᐃ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 400;
		ΔⲆ.height = ᐃ * 400;
		Ⲇ.save();
		Ⲇ.translate(202.5 * ᐃ, ᐃ * 147.5);
		ᐃΔⵠ(Ⲇ, -96.5 * ᐃ, -21.5 * ᐃ, 193 * ᐃ, 193 * ᐃ, ᐃ * ΔⲆⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ΔᐃⲆⲆ], 12 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(202.5 * ᐃ, 190.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * 96.5, -21.5 * ᐃ, ᐃ * -193, 43 * ᐃ, ⵠⵠⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[1], ⲆᐃⲆᐃⲆ * ᐃ);
		Ⲇ.save();
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 202.5, ᐃ * 233.5);
		ᐃΔⵠ(Ⲇ, -96.5 * ᐃ, ᐃ * -20.5, 193 * ᐃ, 41 * ᐃ, ᐃ * ⵠᐃⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠᐃ], Δⵠ[1], ᐃ * ⲆᐃⲆᐃⲆ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 202.5, 275 * ᐃ);
		ᐃΔⵠ(Ⲇ, 96.5 * ᐃ, ᐃ * -21, -193 * ᐃ, 42 * ᐃ, ᐃ * 0);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃ], Δⵠ[1], ᐃ * 12);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 201, 212 * ᐃ);
		Ⲇ.rotate(8.64);
		ᐃΔⵠ(Ⲇ, -116 * ᐃ, ᐃ * -22, 232 * ᐃ, 44 * ᐃ, ᐃ * ⵠΔΔⲆΔ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔᐃΔⲆ], ᐃ * 12);
		Ⲇ.save();
		Ⲇ.translate(203.5 * ᐃ, ᐃ * 121.5);
		ᐃΔⵠ(Ⲇ, ᐃ * -115.5, -20.5 * ᐃ, 231 * ᐃ, ᐃ * 41, ⵠΔΔΔⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃΔ], Δⵠ[ᐃᐃΔ], 12 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 203.5, 299 * ᐃ);
		ᐃΔⵠ(Ⲇ, -115.5 * ᐃ, ᐃ * -ⲆⵠⲆⵠⲆⲆΔ, ᐃ * 231, ᐃ * 40, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔᐃⵠⲆ], ᐃ * ⲆⵠⵠΔΔΔᐃ);
		Ⲇ.save();
		Ⲇ.translate(298.5 * ᐃ, 210 * ᐃ);
		ᐃΔⵠ(Ⲇ, -20.5 * ᐃ, -109 * ᐃ, ᐃ * 41, ᐃ * 218, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[1], ᐃ * ⲆⲆⲆⲆⵠΔⲆ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 108.5, 210 * ᐃ);
		ᐃΔⵠ(Ⲇ, -20.5 * ᐃ, ᐃ * -109, ᐃ * 41, ᐃ * 218, ᐃ * ⵠⲆⵠᐃⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆᐃ], Δⵠ[ᐃⲆΔ], 12 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(204 * ᐃ, ᐃ * 121.5);
		ᐃΔⵠ(Ⲇ, -92 * ᐃ, -9.5 * ᐃ, 184 * ᐃ, ᐃ * ⵠⵠΔⵠⲆΔΔ, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃⵠΔⵠ], 10 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(197 * ᐃ, 299 * ᐃ);
		ᐃΔⵠ(Ⲇ, 85 * ᐃ, -ᐃⲆⵠⲆⵠᐃⲆ * ᐃ, -170 * ᐃ, ᐃ * ᐃⲆⲆⵠᐃ, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔΔⲆᐃ], Δⵠ[ΔⲆΔⵠ], 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 94, ᐃ * 317);
		Ⲇ.bezierCurveTo(110.5 * ᐃ, 299.5 * ᐃ, 110.5 * ᐃ, ᐃ * 299.5, 127 * ᐃ, ᐃ * 282);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ΔΔΔᐃᐃ, Δⵠ[ΔᐃⵠⲆ], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(279 * ᐃ, ᐃ * 142);
		Ⲇ.bezierCurveTo(ᐃ * 296.5, ᐃ * 125.5, 296.5 * ᐃ, 125.5 * ᐃ, ᐃ * 314, ᐃ * 109);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[1], ⲆⲆᐃⵠⲆⵠⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(93 * ᐃ, 106 * ᐃ);
		Ⲇ.bezierCurveTo(110.5 * ᐃ, 124 * ᐃ, 110.5 * ᐃ, ᐃ * 124, 128 * ᐃ, 142 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ᐃⵠᐃᐃⲆ, Δⵠ[1], ⵠⵠᐃᐃᐃⲆⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(281 * ᐃ, ᐃ * 282);
		Ⲇ.bezierCurveTo(296 * ᐃ, ᐃ * 297.5, 296 * ᐃ, ᐃ * 297.5, 311 * ᐃ, 313 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ⲆᐃΔ], ᐃ * 12);
		if (Ⲇᐃ == ⵠᐃⲆⲆ) {
			Ⲇ.scale(ΔⵠⲆᐃ, ΔΔⲆⲆ);
			Ⲇ.translate(ᐃ * -7, 55 * ᐃ);
			Ⲇ.rotate(-.5);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(60 * ᐃ, 47 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 81, 46 * ᐃ, ᐃ * 85, ᐃ * 47, 83 * ᐃ, 63 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 83, 72 * ᐃ, 83 * ᐃ, 75 * ᐃ, 72 * ᐃ, 73 * ᐃ);
			Ⲇ.bezierCurveTo(68 * ᐃ, 80 * ᐃ, ᐃ * 69, 82 * ᐃ, 66 * ᐃ, ᐃ * 73);
			Ⲇ.bezierCurveTo(ᐃ * 62, ᐃ * 81, ᐃ * 61, 82 * ᐃ, ᐃ * 59, 73 * ᐃ);
			Ⲇ.bezierCurveTo(54 * ᐃ, ᐃ * 81, 55 * ᐃ, 81 * ᐃ, 52 * ᐃ, ᐃ * 74);
			Ⲇ.bezierCurveTo(38 * ᐃ, ᐃ * 76, ᐃ * 41, 74 * ᐃ, 40 * ᐃ, ᐃ * 66);
			Ⲇ.bezierCurveTo(ᐃ * 38, 45 * ᐃ, 39 * ᐃ, 49 * ᐃ, ᐃ * 59, 47 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ⵠᐃΔⲆ], ᐃ * ᐃᐃᐃΔⵠ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(68 * ᐃ, 54 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 75, ᐃ * 54, 77 * ᐃ, 62 * ᐃ, 71 * ᐃ, 64 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 62, 65 * ᐃ, 63 * ᐃ, 54 * ᐃ, ᐃ * 68, 54 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[3]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(50 * ᐃ, 55 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 57, ᐃ * 55, 58 * ᐃ, ᐃ * 65, 52 * ᐃ, 65 * ᐃ);
			Ⲇ.bezierCurveTo(44 * ᐃ, 66 * ᐃ, 44 * ᐃ, 54 * ᐃ, ᐃ * 50, 55 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[3])
		} else ΔᐃⲆⲆ == Ⲇᐃ && (Ⲇ.scale(.6, .6), Ⲇ.translate(185 * ᐃ, 165 * ᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(108 * ᐃ, ᐃ * 56), Ⲇ.bezierCurveTo(ᐃ * 136, 58 * ᐃ, ᐃ * 203, 69 * ᐃ, 234 * ᐃ, ᐃ * 75), Ⲇ.bezierCurveTo(246 * ᐃ, 77 * ᐃ, ᐃ * 247, 78 * ᐃ, 245 * ᐃ, 90 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 238, ᐃ * 143, 228 * ᐃ, ᐃ * 197, ᐃ * 214, 259 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 212, ᐃ * 267, 209 * ᐃ, 270 * ᐃ, ᐃ * 189, ᐃ * 268), Ⲇ.bezierCurveTo(142 * ᐃ, ᐃ * 264, 106 * ᐃ, 260 * ᐃ, 75 * ᐃ, ᐃ * 253), Ⲇ.bezierCurveTo(60 * ᐃ, ᐃ * 250, ᐃ * 64, 250 * ᐃ, ᐃ * 66, ᐃ * 221), Ⲇ.bezierCurveTo(71 * ᐃ, 168 * ᐃ, 87 * ᐃ, 95 * ᐃ, ᐃ * 98, 67 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 101, 57 * ᐃ, 103 * ᐃ, ᐃ * 56, 106 * ᐃ, 56 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔΔ], Δⵠ[4], ᐃ * 20), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 112, ᐃ * 72), Ⲇ.bezierCurveTo(132 * ᐃ, ᐃ * 73, ᐃ * 227, ᐃ * 85, ᐃ * 226, 91 * ᐃ), Ⲇ.bezierCurveTo(231 * ᐃ, ᐃ * 89, ᐃ * 217, ᐃ * 196, 200 * ᐃ, ᐃ * 250), Ⲇ.bezierCurveTo(196 * ᐃ, ᐃ * 254, ᐃ * 175, ᐃ * 249, ᐃ * 166, 249 * ᐃ), Ⲇ.bezierCurveTo(91 * ᐃ, ᐃ * 241, ᐃ * 82, 236 * ᐃ, 83 * ᐃ, 232 * ᐃ), Ⲇ.bezierCurveTo(90 * ᐃ, ᐃ * 144, 108 * ᐃ, ᐃ * 71, ᐃ * 111, ᐃ * 72), Ⲇ.closePath(), ΔΔ(Ⲇ, ⵠᐃᐃᐃᐃ, Δⵠ[ⵠⵠⵠΔ], ᐃ * 13), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(132 * ᐃ, ᐃ * 117), Ⲇ.bezierCurveTo(ᐃ * 171, ᐃ * 86, 191 * ᐃ, ᐃ * 101, 188 * ᐃ, ᐃ * 134), Ⲇ.bezierCurveTo(ᐃ * 185, ᐃ * 154, 170 * ᐃ, 158 * ᐃ, ᐃ * 153, ᐃ * 158), Ⲇ.bezierCurveTo(ᐃ * 143, ᐃ * 172, 146 * ᐃ, ᐃ * 180, ᐃ * 147, 193 * ᐃ), ΔΔ(Ⲇ, undefined, Δⵠ[0], ᐃ * 20), ᐃΔΔ(Ⲇ, 142 * ᐃ, ᐃ * 221, 16.1245154965971 * ᐃ), ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃ]));
		return ΔⲆ
	}

	function ⵠᐃᐃⵠⲆᐃᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 238 * ᐃ;
		ΔⲆ.height = 230 * ᐃ;
		Ⲇ.translate(-93 * ᐃ, ᐃ * -110 + 5 * ᐃ);
		Ⲇ.globalAlpha = .3;
		ᐃΔΔ(Ⲇ, ᐃ * 213.5, 256.75 * ᐃ, 75 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		ᐃΔΔ(Ⲇ, ᐃ * 213.5, 175.75 * ᐃ, ᐃ * 25);
		ΔΔ(Ⲇ, Δⵠ[5]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(156.5 * ᐃ, 137.75 * ᐃ);
		Ⲇ.bezierCurveTo(170.5 * ᐃ, ᐃ * 173.75, ᐃ * 195.5, 177.75 * ᐃ, 209.5 * ᐃ, 177.75 * ᐃ);
		Ⲇ.lineWidth = ΔᐃΔⲆⲆⵠᐃ * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[ΔⲆⲆⵠ];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(217.5 * ᐃ, 178.75 * ᐃ);
		Ⲇ.bezierCurveTo(251.5 * ᐃ, 177.75 * ᐃ, 263.5 * ᐃ, ᐃ * 153.75, 270.5 * ᐃ, ᐃ * 140.75);
		Ⲇ.lineWidth = 17 * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[5];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 130.5, 124.75 * ᐃ);
		Ⲇ.bezierCurveTo(153.5 * ᐃ, 185.75 * ᐃ, ᐃ * 198.5, 185.75 * ᐃ, ᐃ * 213.5, ᐃ * 185.75);
		Ⲇ.lineWidth = ⲆⲆᐃⲆⵠⲆΔ * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[5];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 214.5, ᐃ * 183.75);
		Ⲇ.bezierCurveTo(265.5 * ᐃ, ᐃ * 192.75, 293.5 * ᐃ, ᐃ * 141.75, 297.5 * ᐃ, ᐃ * 124.75);
		Ⲇ.lineWidth = ᐃ * 17;
		Ⲇ.strokeStyle = Δⵠ[ⲆⵠΔΔ];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 107.5, 213.75 * ᐃ);
		Ⲇ.bezierCurveTo(151.5 * ᐃ, 190.75 * ᐃ, ᐃ * 198.5, ᐃ * 184.75, 210.5 * ᐃ, 184.75 * ᐃ);
		Ⲇ.lineWidth = ᐃ * 17;
		Ⲇ.strokeStyle = Δⵠ[ⲆΔⲆⲆⵠ];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(212.5 * ᐃ, ᐃ * 187.75);
		Ⲇ.bezierCurveTo(258.5 * ᐃ, ᐃ * 182.75, ᐃ * 286.5, ᐃ * 194.75, 314.5 * ᐃ, 206.75 * ᐃ);
		Ⲇ.lineWidth = ᐃ * ⵠⲆᐃⵠⵠᐃⲆ;
		Ⲇ.strokeStyle = Δⵠ[5];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(102.5 * ᐃ, 258.75 * ᐃ);
		Ⲇ.bezierCurveTo(142.5 * ᐃ, ᐃ * 200.75, ᐃ * 193.5, 194.75 * ᐃ, ᐃ * 211.5, ᐃ * 185.75);
		Ⲇ.lineWidth = ᐃ * ⵠᐃⵠⲆΔᐃᐃ;
		Ⲇ.strokeStyle = Δⵠ[5];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(214.5 * ᐃ, ᐃ * 192.75);
		Ⲇ.bezierCurveTo(ᐃ * 276.5, 194.75 * ᐃ, ᐃ * 306.5, 233.75 * ᐃ, ᐃ * 316.5, 246.75 * ᐃ);
		Ⲇ.lineWidth = 17 * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[ⵠⲆⲆᐃ];
		Ⲇ.stroke();
		Ⲇ.translate(ⲆⵠⲆⲆ, -5);
		Ⲇ.globalAlpha = ΔᐃⲆⲆ;
		ᐃΔΔ(Ⲇ, ᐃ * 213.5, ᐃ * 256.75, ᐃ * 75);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃΔᐃ]);
		ᐃΔΔ(Ⲇ, 213.5 * ᐃ, 175.75 * ᐃ, 25 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 219.5, ᐃ * 158.75);
		Ⲇ.bezierCurveTo(ᐃ * 226.5, 159.75 * ᐃ, 227.5 * ᐃ, ᐃ * 147.75, 219.5 * ᐃ, ᐃ * 145.75);
		Ⲇ.closePath();
		Ⲇ.lineWidth = 10 * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[3];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(210.5 * ᐃ, 160.75 * ᐃ);
		Ⲇ.bezierCurveTo(203.5 * ᐃ, 159.75 * ᐃ, 199.5 * ᐃ, ᐃ * 146.75, ᐃ * 210.5, 145.75 * ᐃ);
		Ⲇ.closePath();
		Ⲇ.lineWidth = ᐃ * ⲆⲆⵠⲆⵠ;
		Ⲇ.strokeStyle = Δⵠ[3];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(219.5 * ᐃ, ᐃ * 158.75);
		Ⲇ.bezierCurveTo(ᐃ * 226.5, 159.75 * ᐃ, 227.5 * ᐃ, ᐃ * 147.75, ᐃ * 219.5, 145.75 * ᐃ);
		Ⲇ.closePath();
		Ⲇ.fillStyle = Δⵠ[0];
		Ⲇ.fill();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 210.5, ᐃ * 160.75);
		Ⲇ.bezierCurveTo(ᐃ * 203.5, ᐃ * 159.75, ᐃ * 199.5, 146.75 * ᐃ, ᐃ * 210.5, 145.75 * ᐃ);
		Ⲇ.closePath();
		Ⲇ.fillStyle = Δⵠ[0];
		Ⲇ.fill();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(156.5 * ᐃ, ᐃ * 137.75);
		Ⲇ.bezierCurveTo(170.5 * ᐃ, ᐃ * 173.75, ᐃ * 195.5, ᐃ * 177.75, ᐃ * 209.5, ᐃ * 177.75);
		Ⲇ.lineWidth = ᐃⲆΔⵠⵠᐃᐃ * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[ⲆⲆᐃⵠ];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(217.5 * ᐃ, 178.75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 251.5, ᐃ * 177.75, 263.5 * ᐃ, 153.75 * ᐃ, ᐃ * 270.5, ᐃ * 140.75);
		Ⲇ.lineWidth = ᐃ * ΔᐃⲆⵠⵠΔΔ;
		Ⲇ.strokeStyle = Δⵠ[3];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 130.5, ᐃ * 124.75);
		Ⲇ.bezierCurveTo(153.5 * ᐃ, 185.75 * ᐃ, ᐃ * 198.5, 185.75 * ᐃ, 213.5 * ᐃ, ᐃ * 185.75);
		Ⲇ.lineWidth = 17 * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[ⲆⲆᐃⵠ];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(214.5 * ᐃ, 183.75 * ᐃ);
		Ⲇ.bezierCurveTo(265.5 * ᐃ, ᐃ * 192.75, 293.5 * ᐃ, ᐃ * 141.75, 297.5 * ᐃ, ᐃ * 124.75);
		Ⲇ.lineWidth = ᐃ * 17;
		Ⲇ.strokeStyle = Δⵠ[3];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(107.5 * ᐃ, 213.75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 151.5, ᐃ * 190.75, ᐃ * 198.5, ᐃ * 184.75, 210.5 * ᐃ, ᐃ * 184.75);
		Ⲇ.lineWidth = ⲆⲆᐃⲆⵠⲆΔ * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[Δⵠⵠᐃ];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 212.5, ᐃ * 187.75);
		Ⲇ.bezierCurveTo(ᐃ * 258.5, ᐃ * 182.75, 286.5 * ᐃ, 194.75 * ᐃ, 314.5 * ᐃ, 206.75 * ᐃ);
		Ⲇ.lineWidth = 17 * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[ⲆΔⵠⵠⵠ];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 102.5, 258.75 * ᐃ);
		Ⲇ.bezierCurveTo(142.5 * ᐃ, ᐃ * 200.75, 193.5 * ᐃ, ᐃ * 194.75, ᐃ * 211.5, 185.75 * ᐃ);
		Ⲇ.lineWidth = 17 * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[3];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 214.5, ᐃ * 192.75);
		Ⲇ.bezierCurveTo(276.5 * ᐃ, 194.75 * ᐃ, 306.5 * ᐃ, ᐃ * 233.75, 316.5 * ᐃ, 246.75 * ᐃ);
		Ⲇ.lineWidth = ᐃ * ᐃΔᐃⲆᐃᐃⵠ;
		Ⲇ.strokeStyle = Δⵠ[Δⵠⵠᐃ];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 156.5, ᐃ * 137.75);
		Ⲇ.bezierCurveTo(170.5 * ᐃ, ᐃ * 173.75, ᐃ * 195.5, ᐃ * 177.75, ᐃ * 209.5, 177.75 * ᐃ);
		Ⲇ.lineWidth = 8 * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[0];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 217.5, ᐃ * 178.75);
		Ⲇ.bezierCurveTo(251.5 * ᐃ, 177.75 * ᐃ, ᐃ * 263.5, 153.75 * ᐃ, 270.5 * ᐃ, ᐃ * 140.75);
		Ⲇ.lineWidth = 8 * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[ⵠⲆⵠⵠ];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(130.5 * ᐃ, ᐃ * 124.75);
		Ⲇ.bezierCurveTo(153.5 * ᐃ, ᐃ * 185.75, 198.5 * ᐃ, 185.75 * ᐃ, ᐃ * 213.5, 185.75 * ᐃ);
		Ⲇ.lineWidth = ᐃ * ⵠᐃⵠΔⲆ;
		Ⲇ.strokeStyle = Δⵠ[ΔΔᐃ];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 214.5, 183.75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 265.5, ᐃ * 192.75, 293.5 * ᐃ, ᐃ * 141.75, 297.5 * ᐃ, 124.75 * ᐃ);
		Ⲇ.lineWidth = Ⲇᐃⵠᐃᐃ * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[ⵠᐃⲆ];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 107.5, 213.75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 151.5, ᐃ * 190.75, 198.5 * ᐃ, 184.75 * ᐃ, 210.5 * ᐃ, 184.75 * ᐃ);
		Ⲇ.lineWidth = 8 * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[Δⵠⵠⵠ];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 212.5, ᐃ * 187.75);
		Ⲇ.bezierCurveTo(258.5 * ᐃ, 182.75 * ᐃ, ᐃ * 286.5, 194.75 * ᐃ, 314.5 * ᐃ, ᐃ * 206.75);
		Ⲇ.lineWidth = 8 * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[ΔΔᐃ];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(102.5 * ᐃ, ᐃ * 258.75);
		Ⲇ.bezierCurveTo(ᐃ * 142.5, 200.75 * ᐃ, ᐃ * 193.5, ᐃ * 194.75, ᐃ * 211.5, ᐃ * 185.75);
		Ⲇ.lineWidth = 8 * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[ⵠⲆΔ];
		Ⲇ.stroke();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(214.5 * ᐃ, 192.75 * ᐃ);
		Ⲇ.bezierCurveTo(276.5 * ᐃ, ᐃ * 194.75, ᐃ * 306.5, 233.75 * ᐃ, 316.5 * ᐃ, 246.75 * ᐃ);
		Ⲇ.lineWidth = 8 * ᐃ;
		Ⲇ.strokeStyle = Δⵠ[Ⲇᐃⵠ];
		Ⲇ.stroke();
		ᐃΔΔ(Ⲇ, 213.5 * ᐃ, 256.75 * ᐃ, ᐃ * 70);
		ΔΔ(Ⲇ, Δⵠ[0]);
		ᐃΔΔ(Ⲇ, 213.5 * ᐃ, ᐃ * 175.75, ⵠΔⵠᐃⲆ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		ᐃΔΔ(Ⲇ, ᐃ * 222, ᐃ * 166, 5 * ᐃ);
		Ⲇ.fillStyle = Δⵠ[2];
		Ⲇ.fill();
		ᐃΔΔ(Ⲇ, ᐃ * 205, 166 * ᐃ, 5 * ᐃ);
		Ⲇ.fillStyle = Δⵠ[2];
		Ⲇ.fill();
		ᐃΔΔ(Ⲇ, 206.2 * ᐃ, 167 * ᐃ, ᐃ * 2.5);
		Ⲇ.fillStyle = Δⵠ[4];
		Ⲇ.fill();
		ᐃΔΔ(Ⲇ, ᐃ * 223.2, ᐃ * 167, ᐃ * 2.5);
		Ⲇ.fillStyle = Δⵠ[ⵠᐃᐃΔ];
		Ⲇ.fill();
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 213.5, ᐃ * 293.75);
		Ⲇ.rotate(.76);
		ᐃΔⵠ(Ⲇ, -22 * ᐃ, ᐃ * -21, 44 * ᐃ, 42 * ᐃ, 6 * ᐃ);
		Ⲇ.restore();
		Ⲇ.fillStyle = Δⵠ[1];
		Ⲇ.fill();
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 212.5, 258.25 * ᐃ);
		Ⲇ.rotate(.8);
		ᐃΔⵠ(Ⲇ, ᐃ * -ᐃⵠᐃⵠᐃ, -14.5 * ᐃ, ᐃ * 30, 29 * ᐃ, ᐃ * ᐃⵠⲆᐃΔ);
		Ⲇ.restore();
		Ⲇ.fillStyle = Δⵠ[Δⵠᐃ];
		Ⲇ.fill();
		return ΔⲆ
	}

	function ⵠⵠᐃⵠⲆⲆⵠⵠΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 450 * ᐃ;
		ΔⲆ.height = 470 * ᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 226.5, 91.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 254.5, 115.546875 * ᐃ, 261.5 * ᐃ, 115.546875 * ᐃ, 294.5 * ᐃ, ᐃ * 109.546875);
		Ⲇ.bezierCurveTo(299.5 * ᐃ, 141.546875 * ᐃ, 315.5 * ᐃ, ᐃ * 151.546875, 344.5 * ᐃ, ᐃ * 158.546875);
		Ⲇ.bezierCurveTo(ᐃ * 330.5, 195.546875 * ᐃ, ᐃ * 341.5, 207.546875 * ᐃ, 361.5 * ᐃ, ᐃ * 226.546875);
		Ⲇ.bezierCurveTo(ᐃ * 331.5, ᐃ * 251.546875, 335.5 * ᐃ, ᐃ * 270.546875, ᐃ * 342.5, 295.546875 * ᐃ);
		Ⲇ.bezierCurveTo(300.5 * ᐃ, 296.546875 * ᐃ, 293.5 * ᐃ, ᐃ * 325.546875, ᐃ * 292.5, 344.546875 * ᐃ);
		Ⲇ.bezierCurveTo(257.5 * ᐃ, ᐃ * 326.546875, ᐃ * 242.5, 338.546875 * ᐃ, ᐃ * 224.5, ᐃ * 361.546875);
		Ⲇ.bezierCurveTo(ᐃ * 200.5, ᐃ * 329.546875, ᐃ * 180.5, 334.546875 * ᐃ, 155.5 * ᐃ, 341.546875 * ᐃ);
		Ⲇ.bezierCurveTo(146.5 * ᐃ, ᐃ * 307.546875, 140.5 * ᐃ, ᐃ * 302.546875, 107.5 * ᐃ, ᐃ * 292.546875);
		Ⲇ.bezierCurveTo(ᐃ * 117.5, ᐃ * 253.546875, 109.5 * ᐃ, 244.546875 * ᐃ, ᐃ * 89.5, 224.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 118.5, 191.546875 * ᐃ, 114.5 * ᐃ, 182.546875 * ᐃ, ᐃ * 108.5, 156.546875 * ᐃ);
		Ⲇ.bezierCurveTo(143.5 * ᐃ, ᐃ * 149.546875, 150.5 * ᐃ, ᐃ * 136.546875, ᐃ * 157.5, 106.546875 * ᐃ);
		Ⲇ.bezierCurveTo(202.5 * ᐃ, ᐃ * 120.546875, 211.5 * ᐃ, ᐃ * 103.546875, ᐃ * 228.5, 91.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ΔⲆΔⵠᐃ, Δⵠ[0], Ⲇⵠⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 224.5, 129.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 247.5, ᐃ * 147.546875, ᐃ * 252.5, ᐃ * 143.546875, ᐃ * 274.5, 141.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 279.5, 163.546875 * ᐃ, ᐃ * 289.5, ᐃ * 168.546875, 311.5 * ᐃ, 178.546875 * ᐃ);
		Ⲇ.bezierCurveTo(301.5 * ᐃ, 199.546875 * ᐃ, ᐃ * 307.5, 213.546875 * ᐃ, 323.5 * ᐃ, 226.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 303.5, 240.546875 * ᐃ, ᐃ * 303.5, ᐃ * 255.546875, ᐃ * 312.5, 275.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 281.5, 278.546875 * ᐃ, 276.5 * ᐃ, 291.546875 * ᐃ, ᐃ * 272.5, ᐃ * 313.546875);
		Ⲇ.bezierCurveTo(ᐃ * 248.5, 301.546875 * ᐃ, 239.5 * ᐃ, 310.546875 * ᐃ, 224.5 * ᐃ, 324.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 211.5, 304.546875 * ᐃ, ᐃ * 199.5, 301.546875 * ᐃ, 176.5 * ᐃ, ᐃ * 309.546875);
		Ⲇ.bezierCurveTo(165.5 * ᐃ, 276.546875 * ᐃ, 159.5 * ᐃ, 275.546875 * ᐃ, 138.5 * ᐃ, ᐃ * 274.546875);
		Ⲇ.bezierCurveTo(148.5 * ᐃ, ᐃ * 248.546875, ᐃ * 140.5, 237.546875 * ᐃ, 125.5 * ᐃ, 225.546875 * ᐃ);
		Ⲇ.bezierCurveTo(145.5 * ᐃ, ᐃ * 205.546875, 146.5 * ᐃ, ᐃ * 195.546875, 142.5 * ᐃ, ᐃ * 176.546875);
		Ⲇ.bezierCurveTo(173.5 * ᐃ, ᐃ * 164.546875, ᐃ * 173.5, 155.546875 * ᐃ, 178.5 * ᐃ, ᐃ * 140.546875);
		Ⲇ.bezierCurveTo(214.5 * ᐃ, 143.546875 * ᐃ, 214.5 * ᐃ, ᐃ * 135.546875, 226.5 * ᐃ, ᐃ * 129.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[0], ⵠᐃΔΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(224.5 * ᐃ, 160.546875 * ᐃ);
		Ⲇ.bezierCurveTo(236.5 * ᐃ, ᐃ * 168.546875, 239.5 * ᐃ, ᐃ * 168.546875, 258.5 * ᐃ, 168.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 261.5, ᐃ * 185.546875, 268.5 * ᐃ, ᐃ * 187.546875, ᐃ * 282.5, 192.546875 * ᐃ);
		Ⲇ.bezierCurveTo(277.5 * ᐃ, 208.546875 * ᐃ, 283.5 * ᐃ, ᐃ * 216.546875, 289.5 * ᐃ, 228.546875 * ᐃ);
		Ⲇ.bezierCurveTo(277.5 * ᐃ, ᐃ * 243.546875, ᐃ * 280.5, 253.546875 * ᐃ, ᐃ * 281.5, 260.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 264.5, 260.546875 * ᐃ, ᐃ * 259.5, ᐃ * 269.546875, ᐃ * 256.5, ᐃ * 283.546875);
		Ⲇ.bezierCurveTo(ᐃ * 244.5, 276.546875 * ᐃ, 232.5 * ᐃ, ᐃ * 283.546875, 223.5 * ᐃ, ᐃ * 291.546875);
		Ⲇ.bezierCurveTo(ᐃ * 213.5, ᐃ * 276.546875, ᐃ * 205.5, 278.546875 * ᐃ, ᐃ * 190.5, ᐃ * 281.546875);
		Ⲇ.bezierCurveTo(ᐃ * 181.5, 262.546875 * ᐃ, 173.5 * ᐃ, ᐃ * 259.546875, 165.5 * ᐃ, 258.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 169.5, 239.546875 * ᐃ, ᐃ * 167.5, 233.546875 * ᐃ, ᐃ * 157.5, ᐃ * 225.546875);
		Ⲇ.bezierCurveTo(ᐃ * 169.5, 208.546875 * ᐃ, ᐃ * 170.5, 203.546875 * ᐃ, 168.5 * ᐃ, ᐃ * 192.546875);
		Ⲇ.bezierCurveTo(ᐃ * 181.5, ᐃ * 187.546875, 188.5 * ᐃ, ᐃ * 179.546875, 192.5 * ᐃ, ᐃ * 168.546875);
		Ⲇ.bezierCurveTo(216.5 * ᐃ, 170.546875 * ᐃ, 218.5 * ᐃ, ᐃ * 163.546875, ᐃ * 225.5, 160.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[0], Ⲇⵠⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(205.5 * ᐃ, ᐃ * 194.546875);
		Ⲇ.bezierCurveTo(ᐃ * 216.5, 192.546875 * ᐃ, ᐃ * 219.5, ᐃ * 191.546875, ᐃ * 225.5, 185.546875 * ᐃ);
		Ⲇ.bezierCurveTo(232.5 * ᐃ, ᐃ * 193.546875, ᐃ * 237.5, ᐃ * 191.546875, ᐃ * 246.5, ᐃ * 192.546875);
		Ⲇ.bezierCurveTo(249.5 * ᐃ, 202.546875 * ᐃ, ᐃ * 253.5, 205.546875 * ᐃ, 258.5 * ᐃ, ᐃ * 207.546875);
		Ⲇ.bezierCurveTo(259.5 * ᐃ, 222.546875 * ᐃ, 256.5 * ᐃ, 223.546875 * ᐃ, 265.5 * ᐃ, 226.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 256.5, 231.546875 * ᐃ, 255.5 * ᐃ, 241.546875 * ᐃ, 259.5 * ᐃ, 248.546875 * ᐃ);
		Ⲇ.bezierCurveTo(250.5 * ᐃ, ᐃ * 245.546875, ᐃ * 245.5, 252.546875 * ᐃ, ᐃ * 243.5, 260.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 234.5, 256.546875 * ᐃ, ᐃ * 229.5, 258.546875 * ᐃ, 223.5 * ᐃ, ᐃ * 265.546875);
		Ⲇ.bezierCurveTo(ᐃ * 218.5, ᐃ * 255.546875, ᐃ * 213.5, ᐃ * 257.546875, 204.5 * ᐃ, 261.546875 * ᐃ);
		Ⲇ.bezierCurveTo(203.5 * ᐃ, ᐃ * 251.546875, 198.5 * ᐃ, 248.546875 * ᐃ, ᐃ * 189.5, ᐃ * 244.546875);
		Ⲇ.bezierCurveTo(194.5 * ᐃ, 237.546875 * ᐃ, ᐃ * 192.5, ᐃ * 231.546875, 184.5 * ᐃ, ᐃ * 225.546875);
		Ⲇ.bezierCurveTo(ᐃ * 191.5, ᐃ * 211.546875, ᐃ * 192.5, 209.546875 * ᐃ, ᐃ * 190.5, 204.546875 * ᐃ);
		Ⲇ.bezierCurveTo(200.5 * ᐃ, 204.546875 * ᐃ, 204.5 * ᐃ, ᐃ * 198.546875, 207.5 * ᐃ, ᐃ * 194.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠⵠⲆᐃᐃ, Δⵠ[ᐃⵠⵠⲆ], ⲆᐃᐃΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 149.5, 93.546875 * ᐃ);
		Ⲇ.bezierCurveTo(287.5 * ᐃ, ᐃ * 332.546875, 226 * ᐃ, 225.546875 * ᐃ, 302.5 * ᐃ, 357.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[0], 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(224.5 * ᐃ, ᐃ * 66.546875);
		Ⲇ.bezierCurveTo(224.5 * ᐃ, ᐃ * 223.546875, 224.5 * ᐃ, ᐃ * 223.546875, ᐃ * 224.5, 380.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆⲆⵠⵠᐃ, Δⵠ[0], ⵠⵠᐃΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(302.5 * ᐃ, ᐃ * 88.546875);
		Ⲇ.bezierCurveTo(222.5 * ᐃ, 227.546875 * ᐃ, ᐃ * 222.5, ᐃ * 227.546875, ᐃ * 142.5, ᐃ * 366.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ᐃᐃᐃ], 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 361.5, ᐃ * 147.546875);
		Ⲇ.bezierCurveTo(ᐃ * 223, 226.546875 * ᐃ, 223 * ᐃ, 226.546875 * ᐃ, 84.5 * ᐃ, ᐃ * 305.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[0], 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 379.5, 225.546875 * ᐃ);
		Ⲇ.bezierCurveTo(221 * ᐃ, 225.546875 * ᐃ, 221 * ᐃ, 225.546875 * ᐃ, ᐃ * 62.5, 225.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ᐃⵠⵠⲆ], ᐃΔⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 90.5, 147.546875 * ᐃ);
		Ⲇ.bezierCurveTo(226.5 * ᐃ, ᐃ * 226.546875, 226.5 * ᐃ, ᐃ * 226.546875, 362.5 * ᐃ, ᐃ * 305.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ΔΔΔᐃᐃ, Δⵠ[ⵠⲆᐃ], ᐃΔᐃΔ);
		return ΔⲆ
	}
	const ΔⲆᐃⲆ = ΔⵠΔ;

	function ⲆᐃⲆⲆΔΔΔΔΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 400 * ᐃ;
		ΔⲆ.height = 400 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 85, ᐃ * 237);
		Ⲇ.rotate(1.5707963267948966);
		ᐃᐃⲆΔ(Ⲇ, ΔⵠΔⵠᐃ, ᐃ * 54.585977194239184, ᐃ * 1);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * 12);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 178, ᐃ * 238);
		Ⲇ.rotate(1.5707963267948966);
		ᐃᐃⲆΔ(Ⲇ, 6, ᐃ * 52.53573932334064, ᐃ * 1);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆ], Δⵠ[2], 12 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(270 * ᐃ, 239 * ᐃ);
		Ⲇ.rotate(1.5707963267948966);
		ᐃᐃⲆΔ(Ⲇ, ⵠⵠᐃᐃᐃ, ᐃ * 53.58058329516393, ᐃ * 1);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⲆ], Δⵠ[2], ᐃ * 12);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 222, 312 * ᐃ);
		Ⲇ.rotate(1.5707963267948966);
		ᐃᐃⲆΔ(Ⲇ, 6, ᐃ * 52.53573932334064, 1 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃ], Δⵠ[2], ᐃ * 12);
		Ⲇ.save();
		Ⲇ.translate(317 * ᐃ, ᐃ * 159);
		Ⲇ.rotate(1.5707963267948966);
		ᐃᐃⲆΔ(Ⲇ, ΔΔΔⵠΔ, 57.63465889766331 * ᐃ, ΔᐃΔⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * 12);
		Ⲇ.save();
		Ⲇ.translate(223.5 * ᐃ, 139.0625 * ᐃ);
		Ⲇ.rotate(1.5707963267948966);
		ᐃᐃⲆΔ(Ⲇ, ⵠⲆⲆᐃᐃ, ᐃ * 51.66236541235796, ᐃ * 1);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔᐃ], Δⵠ[2], 12 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 132.5, 137.0625 * ᐃ);
		Ⲇ.rotate(1.5707963267948966);
		ᐃᐃⲆΔ(Ⲇ, ᐃⵠⵠⵠⲆ, 52.009614495783374 * ᐃ, 1 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⲆⲆ], Δⵠ[ⵠⵠⵠᐃ], ᐃ * ᐃᐃΔΔⵠ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 178.5, ᐃ * 58.0625);
		Ⲇ.rotate(1.5707963267948966);
		ᐃᐃⲆΔ(Ⲇ, ΔΔΔΔ, ᐃ * 53.16013544000805, ᐃ * 1);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆ], Δⵠ[2], ⲆΔᐃⲆⵠⲆΔ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(177.5 * ᐃ, ᐃ * 216.0625);
		Ⲇ.rotate(1.5707963267948966);
		ᐃᐃⲆΔ(Ⲇ, ᐃⵠⲆᐃΔ, ᐃ * 50, ᐃ * ΔᐃΔⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * 12);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 84.5, ᐃ * 215.0625);
		Ⲇ.rotate(1.5707963267948966);
		ᐃᐃⲆΔ(Ⲇ, 6, ᐃ * 54, 1 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[Δⵠᐃ], Δⵠ[2], ᐃ * 12);
		Ⲇ.save();
		Ⲇ.translate(319.5 * ᐃ, ᐃ * 138.0625);
		Ⲇ.rotate(1.5707963267948966);
		ᐃᐃⲆΔ(Ⲇ, ΔⲆⲆⵠⵠ, 55.08175741568164 * ᐃ, ⵠΔᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔΔΔ], Δⵠ[2], ᐃ * 12);
		Ⲇ.save();
		Ⲇ.translate(269.5 * ᐃ, ᐃ * 216.0625);
		Ⲇ.rotate(1.5707963267948966);
		ᐃᐃⲆΔ(Ⲇ, ᐃΔᐃΔᐃ, ᐃ * 54.589376255824725, ᐃ * 1);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔ], Δⵠ[ᐃᐃⲆⲆ], ᐃ * 12);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 221.5, 293.0625 * ᐃ);
		Ⲇ.rotate(.5235987755982988);
		ᐃᐃⲆΔ(Ⲇ, 6, ᐃ * 49.49747468305833, ΔᐃΔⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 221.5, 342.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 221.5, ᐃ * 350.5625, ᐃ * 221.5, ᐃ * 350.5625, ᐃ * 221.5, ᐃ * 359.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠⲆⵠᐃⲆ, Δⵠ[ⲆⲆⲆⲆ], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(84.5 * ᐃ, ᐃ * 270.0625);
		Ⲇ.bezierCurveTo(ᐃ * 84.5, 277.0625 * ᐃ, ᐃ * 84.5, 277.0625 * ᐃ, ᐃ * 84.5, ᐃ * 284.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], ᐃ * ⲆᐃᐃⲆᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 84.5, ᐃ * 215.0625);
		Ⲇ.rotate(.5235987755982988);
		ᐃᐃⲆΔ(Ⲇ, ⵠⵠΔⲆⵠ, ᐃ * 30, ᐃ * 15);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.save();
		Ⲇ.translate(177.5 * ᐃ, 215.0625 * ᐃ);
		Ⲇ.rotate(.5235987755982988);
		ᐃᐃⲆΔ(Ⲇ, ⲆⲆⲆᐃᐃ, ᐃ * 30, ᐃᐃΔᐃⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⲆΔ]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 222.5, ᐃ * 294.0625);
		Ⲇ.rotate(.5235987755982988);
		ᐃᐃⲆΔ(Ⲇ, ⲆⲆⵠⵠⲆ, 30 * ᐃ, ᐃ * 15);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⲆ]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 270.5, ᐃ * 216.0625);
		Ⲇ.rotate(.5235987755982988);
		ᐃᐃⲆΔ(Ⲇ, 6, ᐃ * 30, ᐃ * ᐃⵠⵠᐃᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 320.5, 134.0625 * ᐃ);
		Ⲇ.rotate(.5235987755982988);
		ᐃᐃⲆΔ(Ⲇ, 6, 30 * ᐃ, ᐃ * ΔΔⵠⲆᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.save();
		Ⲇ.translate(224.5 * ᐃ, 138.0625 * ᐃ);
		Ⲇ.rotate(.5235987755982988);
		ᐃᐃⲆΔ(Ⲇ, ΔΔⵠΔᐃ, ᐃ * 30, ⵠᐃΔⵠᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 133.5, 137.0625 * ᐃ);
		Ⲇ.rotate(.5235987755982988);
		ᐃᐃⲆΔ(Ⲇ, ᐃΔᐃΔᐃ, 30 * ᐃ, ᐃ * ᐃⲆⵠⲆΔΔΔ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.save();
		Ⲇ.translate(178.5 * ᐃ, ᐃ * 56.0625);
		Ⲇ.rotate(.5235987755982988);
		ᐃᐃⲆΔ(Ⲇ, ⲆΔⵠΔΔ, ᐃ * 30, ⵠⲆⵠⲆᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3]);
		return ΔⲆ
	}

	function ⵠᐃⵠⲆⲆᐃᐃⵠΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 650;
		ΔⲆ.height = ᐃ * 650;
		Ⲇ.scale(1.9, 1.9);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 202.5, 147.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -96.5, ᐃ * -21.5, ᐃ * 193, ᐃ * 193, ᐃ * 0);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[1], ⵠⵠᐃᐃΔΔⵠ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 203.5, ᐃ * 121.5);
		ᐃΔⵠ(Ⲇ, ᐃ * -115.5, ᐃ * -20.5, 231 * ᐃ, ᐃ * 41, ⵠⲆΔᐃᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆᐃⵠ], Δⵠ[1], 12 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(203.5 * ᐃ, ᐃ * 299);
		ᐃΔⵠ(Ⲇ, ᐃ * -115.5, ᐃ * -20, ᐃ * 231, ᐃ * 40, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠΔⵠ], Δⵠ[1], 12 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(298.5 * ᐃ, ᐃ * 210);
		ᐃΔⵠ(Ⲇ, ᐃ * -20.5, ᐃ * -109, ᐃ * 41, ᐃ * 218, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃΔ], Δⵠ[1], ᐃ * 12);
		Ⲇ.save();
		Ⲇ.translate(108.5 * ᐃ, ᐃ * 210);
		ᐃΔⵠ(Ⲇ, ᐃ * -20.5, -109 * ᐃ, ᐃ * 41, ᐃ * 218, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⲆ], Δⵠ[1], 12 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 204, 121.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -92, ᐃ * -9.5, 184 * ᐃ, ᐃ * ⵠⲆΔΔⵠΔⵠ, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[3], ᐃ * ⵠⲆⵠᐃⵠ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 197, ᐃ * 299);
		ᐃΔⵠ(Ⲇ, ᐃ * 85, ᐃ * -ᐃΔⵠⵠⲆ, -170 * ᐃ, ᐃ * ⵠᐃⵠᐃΔ, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃⵠΔⵠ], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(94 * ᐃ, 317 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 110.5, ᐃ * 299.5, 110.5 * ᐃ, ᐃ * 299.5, ᐃ * 127, 282 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[1], ᐃⲆⵠᐃⲆᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(279 * ᐃ, ᐃ * 142);
		Ⲇ.bezierCurveTo(296.5 * ᐃ, ᐃ * 125.5, ᐃ * 296.5, 125.5 * ᐃ, ᐃ * 314, 109 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ᐃⵠᐃᐃⲆ, Δⵠ[1], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 93, ᐃ * 106);
		Ⲇ.bezierCurveTo(ᐃ * 110.5, 124 * ᐃ, 110.5 * ᐃ, ᐃ * 124, 128 * ᐃ, 142 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Ⲇⵠⵠᐃᐃ, Δⵠ[1], ⲆᐃⲆᐃⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 281, ᐃ * 282);
		Ⲇ.bezierCurveTo(296 * ᐃ, 297.5 * ᐃ, ᐃ * 296, 297.5 * ᐃ, 311 * ᐃ, ᐃ * 313);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[1], ᐃ * ⵠᐃⵠΔᐃ);
		return ΔⲆ
	}

	function ᐃᐃΔΔΔⲆᐃⲆⵠ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 400 * ᐃ;
		ΔⲆ.height = 400 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 202.5, ᐃ * 147.5);
		ᐃΔⵠ(Ⲇ, ᐃ * -96.5, ᐃ * -21.5, 193 * ᐃ, 43 * ᐃ, Δⵠⵠⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ⲆᐃᐃⲆᐃ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 202.5, 190.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * 96.5, -21.5 * ᐃ, -193 * ᐃ, ᐃ * 43, ᐃ * ⵠᐃⲆⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ΔⲆⵠΔᐃ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 202.5, 233.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -96.5, -20.5 * ᐃ, 193 * ᐃ, 41 * ᐃ, 0 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠⲆΔ], ΔΔᐃⲆⲆⵠᐃ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(202.5 * ᐃ, ᐃ * 275);
		ᐃΔⵠ(Ⲇ, 96.5 * ᐃ, -21 * ᐃ, -193 * ᐃ, 42 * ᐃ, ᐃ * 0);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], 12 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(203.5 * ᐃ, 121.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, -115.5 * ᐃ, -20.5 * ᐃ, 231 * ᐃ, ᐃ * 41, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ], Δⵠ[0], ᐃ * 12);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 203.5, 299 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -115.5, ᐃ * -ᐃᐃⲆΔⵠ, 231 * ᐃ, 40 * ᐃ, ⵠⲆΔⲆᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ], Δⵠ[0], ᐃᐃΔΔⵠ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 298.5, 210 * ᐃ);
		ᐃΔⵠ(Ⲇ, -20.5 * ᐃ, ᐃ * -109, 41 * ᐃ, 218 * ᐃ, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⲆ], Δⵠ[0], ᐃ * ⲆΔᐃⲆⵠⲆΔ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 108.5, 210 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -20.5, ᐃ * -109, ᐃ * 41, ᐃ * 218, ΔⵠⵠᐃⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ], Δⵠ[ᐃᐃᐃ], ᐃ * ⲆⵠⵠΔΔΔᐃ);
		return ΔⲆ
	}

	function ⵠⵠⲆⲆΔⵠⲆΔᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 400 * ᐃ;
		ΔⲆ.height = ᐃ * 400;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(101 * ᐃ, ᐃ * 255);
		Ⲇ.bezierCurveTo(113 * ᐃ, 243 * ᐃ, ᐃ * 179, ᐃ * 210, 219 * ᐃ, ᐃ * 196);
		Ⲇ.bezierCurveTo(ᐃ * 252, 203 * ᐃ, ᐃ * 288, ᐃ * 215, ᐃ * 318, ᐃ * 233);
		Ⲇ.bezierCurveTo(304 * ᐃ, ᐃ * 254, 258 * ᐃ, 273 * ᐃ, ᐃ * 215, 296 * ᐃ);
		Ⲇ.bezierCurveTo(161 * ᐃ, ᐃ * 287, 119 * ᐃ, ᐃ * 270, 102 * ᐃ, ᐃ * 257);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆ], Δⵠ[1], ᐃ * 14);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 99, 258 * ᐃ);
		Ⲇ.bezierCurveTo(99 * ᐃ, 272.5 * ᐃ, ᐃ * 99, 272.5 * ᐃ, 99 * ᐃ, ᐃ * 287);
		Ⲇ.bezierCurveTo(ᐃ * 166, ᐃ * 319, 193 * ᐃ, 320 * ᐃ, 212 * ᐃ, ᐃ * 324);
		Ⲇ.bezierCurveTo(292 * ᐃ, 286 * ᐃ, ᐃ * 312, ᐃ * 271, 319 * ᐃ, 263 * ᐃ);
		Ⲇ.bezierCurveTo(320 * ᐃ, 249 * ᐃ, ᐃ * 320, ᐃ * 241, 318 * ᐃ, 234 * ᐃ);
		Ⲇ.bezierCurveTo(300 * ᐃ, ᐃ * 254, 254 * ᐃ, ᐃ * 277, ᐃ * 216, 294 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 190, ᐃ * 296, ᐃ * 135, ᐃ * 276, ᐃ * 102, 258 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⲆⲆ], Δⵠ[1], ᐃⵠⵠΔⵠΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 212, 323 * ᐃ);
		Ⲇ.bezierCurveTo(211.5 * ᐃ, 310.5 * ᐃ, 211.5 * ᐃ, 310.5 * ᐃ, ᐃ * 211, ᐃ * 298);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆⲆⵠⵠᐃ, Δⵠ[Δⵠᐃ], ᐃ * ᐃⵠⵠⵠⵠⵠΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(212 * ᐃ, ᐃ * 210);
		Ⲇ.bezierCurveTo(ᐃ * 286, ᐃ * 210, ᐃ * 331, 254 * ᐃ, ᐃ * 212, ᐃ * 276);
		Ⲇ.bezierCurveTo(ᐃ * 108, ᐃ * 276, ᐃ * 112, 222 * ᐃ, 213 * ᐃ, ᐃ * 208);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⲆ], Δⵠ[Ⲇⵠⵠⵠ], ᐃ * 14);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(98 * ᐃ, ᐃ * 200);
		Ⲇ.bezierCurveTo(ᐃ * 126, 216 * ᐃ, ᐃ * 177, 232 * ᐃ, 213 * ᐃ, 237 * ᐃ);
		Ⲇ.bezierCurveTo(266 * ᐃ, 218 * ᐃ, 288 * ᐃ, 209 * ᐃ, 318 * ᐃ, ᐃ * 190);
		Ⲇ.bezierCurveTo(ᐃ * 269, 164 * ᐃ, ᐃ * 239, ᐃ * 158, ᐃ * 214, 153 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 148, ᐃ * 172, 131 * ᐃ, 182 * ᐃ, 98 * ᐃ, 200 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ], Δⵠ[ⵠⲆΔⲆ], ᐃⵠⵠΔⵠΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(97 * ᐃ, ᐃ * 204);
		Ⲇ.bezierCurveTo(ᐃ * 97, 215.5 * ᐃ, 97 * ᐃ, ᐃ * 215.5, ᐃ * 97, 227 * ᐃ);
		Ⲇ.bezierCurveTo(148 * ᐃ, 250 * ᐃ, ᐃ * 179, ⲆⲆⲆᐃⲆᐃⵠ * ᐃ, 212 * ᐃ, ᐃ * 262);
		Ⲇ.bezierCurveTo(ᐃ * 268, 244 * ᐃ, ᐃ * 281, ᐃ * 233, ᐃ * 318, ᐃ * 214);
		Ⲇ.bezierCurveTo(318 * ᐃ, ᐃ * 203, 318 * ᐃ, ᐃ * 203, ᐃ * 318, 192 * ᐃ);
		Ⲇ.bezierCurveTo(250 * ᐃ, ᐃ * 225, 236 * ᐃ, 231 * ᐃ, 214 * ᐃ, ᐃ * 239);
		Ⲇ.bezierCurveTo(158 * ᐃ, 228 * ᐃ, ᐃ * 126, ᐃ * 215, ᐃ * 99, ᐃ * 201);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[1], ᐃ * 14);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(212 * ᐃ, 260 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 212, ᐃ * 251.5, ᐃ * 212, ᐃ * 251.5, ᐃ * 212, 243 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠⵠⲆΔⲆ, Δⵠ[ᐃᐃΔ], ᐃ * ⲆᐃⵠⲆΔ);
		ᐃΔΔ(Ⲇ, ᐃ * 161, ᐃ * 201, 13 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		ᐃΔΔ(Ⲇ, ᐃ * 216, ᐃ * 205, ᐃ * 8.06225774829855);
		ΔΔ(Ⲇ, Δⵠ[5]);
		ᐃΔΔ(Ⲇ, ᐃ * 216, ᐃ * 175, 6.708203932499369 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔᐃ]);
		ᐃΔΔ(Ⲇ, 271 * ᐃ, ᐃ * 191, 5.0990195135927845 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		ᐃΔΔ(Ⲇ, ᐃ * 206, ᐃ * 180, 11.180339887498949 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		return ΔⲆ
	}
	const ΔⲆᐃᐃ = ΔᐃⲆⲆ;

	function ⲆⵠᐃΔⲆΔΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 52 * ᐃ;
		ΔⲆ.height = 65 * ᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 9.833328247070312, 12.078125 * ᐃ);
		Ⲇ.bezierCurveTo(15.333328247070312 * ᐃ, ᐃ * 28.078125, ᐃ * 15.333328247070312, 28.078125 * ᐃ, ᐃ * 20.833328247070312, 44.078125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔⵠⲆⲆ], ᐃ * ⲆⵠΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 7.8333282470703125, 20.078125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 16.833328247070312, 32.578125 * ᐃ, 16.833328247070312 * ᐃ, 32.578125 * ᐃ, ᐃ * 25.833328247070312, 45.078125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[1], ᐃ * ⲆⵠΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 23.833328247070312, 26.078125 * ᐃ);
		Ⲇ.bezierCurveTo(25.833328247070312 * ᐃ, ᐃ * 11.078125, ᐃ * 16.833328247070312, 8.078125 * ᐃ, ᐃ * 14.833328247070312, 7.078125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 11.833328247070312, ᐃ * 17.078125, 13.833328247070312 * ᐃ, 22.078125 * ᐃ, ᐃ * 23.833328247070312, 27.078125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ΔΔΔᐃ], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 35.83332824707031, ᐃ * 8.078125);
		Ⲇ.bezierCurveTo(34.83332824707031 * ᐃ, ᐃ * 27.078125, 28.833328247070312 * ᐃ, 27.078125 * ᐃ, ᐃ * 23.833328247070312, 28.078125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 21.833328247070312, 14.078125 * ᐃ, 26.833328247070312 * ᐃ, 11.078125 * ᐃ, ᐃ * 35.83332824707031, 8.078125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[1], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(25.833328247070312 * ᐃ, ᐃ * 39.078125);
		Ⲇ.bezierCurveTo(20.833328247070312 * ᐃ, 29.078125 * ᐃ, 14.833328247070312 * ᐃ, 27.078125 * ᐃ, 5.8333282470703125 * ᐃ, ᐃ * 29.078125);
		Ⲇ.bezierCurveTo(9.833328247070312 * ᐃ, ᐃ * 39.078125, 16.833328247070312 * ᐃ, ᐃ * 42.078125, 25.833328247070312 * ᐃ, 40.078125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ], Δⵠ[1], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 42.83332824707031, 23.078125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 35.83332824707031, 35.078125 * ᐃ, ᐃ * 31.833328247070312, ᐃ * 37.078125, 25.833328247070312 * ᐃ, ᐃ * 36.078125);
		Ⲇ.bezierCurveTo(ᐃ * 25.833328247070312, 24.078125 * ᐃ, 33.83332824707031 * ᐃ, 21.078125 * ᐃ, ᐃ * 42.83332824707031, 23.078125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[1], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 23.833328247070312, ᐃ * 24.078125);
		Ⲇ.bezierCurveTo(20.833328247070312 * ᐃ, 34.078125 * ᐃ, 23.833328247070312 * ᐃ, ᐃ * 40.078125, 27.833328247070312 * ᐃ, ᐃ * 43.078125);
		Ⲇ.bezierCurveTo(37.33332824707031 * ᐃ, ᐃ * 28.078125, 37.33332824707031 * ᐃ, ᐃ * 28.078125, ᐃ * 46.83332824707031, ᐃ * 13.078125);
		ΔΔ(Ⲇ, ⲆⲆⲆΔⲆ, Δⵠ[1], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(38.83332824707031 * ᐃ, 14.078125 * ᐃ);
		Ⲇ.bezierCurveTo(34.83332824707031 * ᐃ, ᐃ * 24.078125, 34.83332824707031 * ᐃ, ᐃ * 24.078125, 30.833328247070312 * ᐃ, 34.078125 * ᐃ);
		ΔΔ(Ⲇ, ⲆΔΔⵠᐃ, Δⵠ[ΔᐃΔⲆ], ᐃᐃⲆⲆ * ᐃ);
		return ΔⲆ
	}
	const ⵠⲆⵠⵠⲆⲆⵠ = ⲆⵠⲆΔᐃ;

	function ΔⲆᐃⲆⵠⲆΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 170 * ᐃ;
		ΔⲆ.height = ᐃ * 173;
		Ⲇ.translate(ᐃ * 5, ⲆⲆᐃᐃ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ᐃᐃΔ;
		Ⲇ.save();
		Ⲇ.translate(86.25 * ᐃ, ᐃ * 84.953125);
		Ⲇ.rotate(.32);
		ᐃᐃⲆΔ(Ⲇ, 7, 42.15447781671598 * ᐃ, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠⵠ]);
		Ⲇ.globalAlpha = ⵠΔᐃ;
		Ⲇ.translate(-ⵠⵠᐃᐃ * ᐃ, ᐃ * -ᐃᐃᐃΔⵠ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 86.25, 84.953125 * ᐃ);
		Ⲇ.rotate(.32);
		ᐃᐃⲆΔ(Ⲇ, ⲆΔⲆⵠⵠ, 42.15447781671598 * ᐃ, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⲆⲆ], Δⵠ[2], ᐃΔⵠⵠ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔᐃⵠⲆ;
		Ⲇ.translate(5 * ᐃ, 5 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(86.25 * ᐃ, ᐃ * 84.953125);
		Ⲇ.rotate(.28);
		ᐃᐃⲆΔ(Ⲇ, ΔⵠΔΔᐃ, 30.463092423455635 * ᐃ, ᐃ * ⵠΔΔΔⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ᐃ * -5, ᐃ * -ΔⲆⲆⵠ);
		Ⲇ.save();
		Ⲇ.translate(86.25 * ᐃ, ᐃ * 84.953125);
		Ⲇ.rotate(.28);
		ᐃᐃⲆΔ(Ⲇ, 7, ᐃ * 30.463092423455635, ᐃ * ᐃⵠᐃΔⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⵠᐃΔⲆ], ⵠᐃΔⲆ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ᐃ * 5, ΔⵠⲆᐃᐃ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 86.25, 84.953125 * ᐃ, 18.867962264113206 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ᐃ * -ⲆⵠΔΔ, ᐃ * -5);
		ᐃΔΔ(Ⲇ, ᐃ * 86.25, ᐃ * 84.953125, ᐃ * 18.867962264113206);
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[6], ᐃᐃΔΔᐃ * ᐃ);
		return ΔⲆ
	}
	const ⲆⲆᐃΔᐃΔⲆ = ΔⵠⵠΔⵠ;

	function ΔⲆⲆΔⵠⲆⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 170;
		ΔⲆ.height = 173 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ⵠⲆⲆ;
		Ⲇ.translate(ᐃ * 5, ⵠⲆⲆᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(85.25 * ᐃ, 82.953125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 98.25, 46.453125 * ᐃ, ᐃ * 98.25, 46.453125 * ᐃ, 111.25 * ᐃ, 9.953125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ⵠᐃⲆⲆ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 111.25, 8.953125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 117.75, 12.453125 * ᐃ, 117.75 * ᐃ, ᐃ * 12.453125, 124.25 * ᐃ, 15.953125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 113.75, 39.953125 * ᐃ, ᐃ * 113.75, ᐃ * 39.953125, ᐃ * 103.25, ᐃ * 63.953125);
		Ⲇ.bezierCurveTo(ᐃ * 97.75, ᐃ * 64.953125, 97.75 * ᐃ, ᐃ * 64.953125, ᐃ * 92.25, ᐃ * 65.953125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ]);
		Ⲇ.globalAlpha = ΔⲆᐃⲆ;
		Ⲇ.translate(ᐃ * -5, ᐃ * -ᐃᐃᐃᐃⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 111.25, ᐃ * 8.953125);
		Ⲇ.bezierCurveTo(ᐃ * 117.75, 12.453125 * ᐃ, ᐃ * 117.75, ᐃ * 12.453125, 124.25 * ᐃ, ᐃ * 15.953125);
		Ⲇ.bezierCurveTo(113.75 * ᐃ, ᐃ * 39.953125, 113.75 * ᐃ, 39.953125 * ᐃ, ᐃ * 103.25, 63.953125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 97.75, 64.953125 * ᐃ, 97.75 * ᐃ, 64.953125 * ᐃ, 92.25 * ᐃ, 65.953125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⲆⵠⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 85.25, ᐃ * 82.953125);
		Ⲇ.bezierCurveTo(98.25 * ᐃ, ᐃ * 46.453125, 98.25 * ᐃ, 46.453125 * ᐃ, ᐃ * 111.25, 9.953125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠⵠⲆᐃᐃ, Δⵠ[ᐃΔᐃΔᐃ], ⲆᐃᐃΔⵠ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ᐃ * Ⲇᐃⵠᐃ, 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 87.25, 84.953125 * ᐃ);
		Ⲇ.bezierCurveTo(123.75 * ᐃ, ᐃ * 100.453125, ᐃ * 123.75, ᐃ * 100.453125, ᐃ * 160.25, ᐃ * 115.953125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[0], ᐃⲆᐃⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(160.25 * ᐃ, 114.953125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 156.25, 122.453125 * ᐃ, ᐃ * 156.25, ᐃ * 122.453125, ᐃ * 152.25, ᐃ * 129.953125);
		Ⲇ.bezierCurveTo(ᐃ * 130.25, ᐃ * 117.953125, ᐃ * 130.25, 117.953125 * ᐃ, ᐃ * 108.25, ᐃ * 105.953125);
		Ⲇ.bezierCurveTo(107.25 * ᐃ, 98.953125 * ᐃ, 107.25 * ᐃ, 98.953125 * ᐃ, ᐃ * 106.25, 91.953125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ]);
		Ⲇ.globalAlpha = ΔⲆᐃⲆ;
		Ⲇ.translate(-ⲆΔⲆⲆⵠ * ᐃ, -ΔΔⲆⲆⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 160.25, ᐃ * 114.953125);
		Ⲇ.bezierCurveTo(156.25 * ᐃ, 122.453125 * ᐃ, ᐃ * 156.25, 122.453125 * ᐃ, 152.25 * ᐃ, ᐃ * 129.953125);
		Ⲇ.bezierCurveTo(ᐃ * 130.25, 117.953125 * ᐃ, ᐃ * 130.25, 117.953125 * ᐃ, ᐃ * 108.25, 105.953125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 107.25, ᐃ * 98.953125, ᐃ * 107.25, ᐃ * 98.953125, ᐃ * 106.25, ᐃ * 91.953125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(87.25 * ᐃ, ᐃ * 84.953125);
		Ⲇ.bezierCurveTo(123.75 * ᐃ, 100.453125 * ᐃ, ᐃ * 123.75, 100.453125 * ᐃ, 160.25 * ᐃ, ᐃ * 115.953125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔΔΔΔ], ᐃ * 4);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(5 * ᐃ, ᐃ * ᐃᐃᐃΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(83.25 * ᐃ, ᐃ * 83.953125);
		Ⲇ.bezierCurveTo(47.75 * ᐃ, 68.453125 * ᐃ, ᐃ * 47.75, ᐃ * 68.453125, ᐃ * 12.25, ᐃ * 52.953125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ᐃᐃᐃ], ᐃᐃⵠΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(13.25 * ᐃ, ᐃ * 53.953125);
		Ⲇ.bezierCurveTo(ᐃ * 17.25, ᐃ * 46.953125, 17.25 * ᐃ, ᐃ * 46.953125, ᐃ * 21.25, 39.953125 * ᐃ);
		Ⲇ.bezierCurveTo(42.75 * ᐃ, ᐃ * 52.453125, 42.75 * ᐃ, ᐃ * 52.453125, ᐃ * 64.25, ᐃ * 64.953125);
		Ⲇ.bezierCurveTo(ᐃ * 64.25, ᐃ * 70.953125, 64.25 * ᐃ, 70.953125 * ᐃ, ᐃ * 64.25, 76.953125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ]);
		Ⲇ.globalAlpha = ΔᐃⲆⲆ;
		Ⲇ.translate(-ΔⵠⲆᐃᐃ * ᐃ, -ⲆⵠΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(13.25 * ᐃ, ᐃ * 53.953125);
		Ⲇ.bezierCurveTo(ᐃ * 17.25, 46.953125 * ᐃ, 17.25 * ᐃ, 46.953125 * ᐃ, ᐃ * 21.25, ᐃ * 39.953125);
		Ⲇ.bezierCurveTo(ᐃ * 42.75, 52.453125 * ᐃ, ᐃ * 42.75, 52.453125 * ᐃ, 64.25 * ᐃ, 64.953125 * ᐃ);
		Ⲇ.bezierCurveTo(64.25 * ᐃ, ᐃ * 70.953125, 64.25 * ᐃ, ᐃ * 70.953125, 64.25 * ᐃ, 76.953125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(83.25 * ᐃ, 83.953125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 47.75, 68.453125 * ᐃ, 47.75 * ᐃ, 68.453125 * ᐃ, 12.25 * ᐃ, 52.953125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[6], ᐃ * ᐃⵠⵠⵠᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(5 * ᐃ, ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 84.25, ᐃ * 86.953125);
		Ⲇ.bezierCurveTo(70.25 * ᐃ, ᐃ * 123.953125, ᐃ * 70.25, 123.953125 * ᐃ, ᐃ * 56.25, 160.953125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[0], ᐃ * ⵠⲆΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 56.25, 159.953125 * ᐃ);
		Ⲇ.bezierCurveTo(49.25 * ᐃ, ᐃ * 155.453125, 49.25 * ᐃ, 155.453125 * ᐃ, 42.25 * ᐃ, 150.953125 * ᐃ);
		Ⲇ.bezierCurveTo(54.25 * ᐃ, 127.953125 * ᐃ, ᐃ * 54.25, 127.953125 * ᐃ, 66.25 * ᐃ, ᐃ * 104.953125);
		Ⲇ.bezierCurveTo(ᐃ * 71.25, 104.953125 * ᐃ, ᐃ * 71.25, ᐃ * 104.953125, 76.25 * ᐃ, ᐃ * 104.953125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = ΔᐃⲆⲆ;
		Ⲇ.translate(ᐃ * -ᐃᐃΔᐃ, -ΔⵠⲆᐃᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 56.25, ᐃ * 159.953125);
		Ⲇ.bezierCurveTo(49.25 * ᐃ, 155.453125 * ᐃ, ᐃ * 49.25, 155.453125 * ᐃ, ᐃ * 42.25, ᐃ * 150.953125);
		Ⲇ.bezierCurveTo(54.25 * ᐃ, ᐃ * 127.953125, 54.25 * ᐃ, 127.953125 * ᐃ, 66.25 * ᐃ, ᐃ * 104.953125);
		Ⲇ.bezierCurveTo(71.25 * ᐃ, ᐃ * 104.953125, ᐃ * 71.25, 104.953125 * ᐃ, ᐃ * 76.25, ᐃ * 104.953125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 84.25, 86.953125 * ᐃ);
		Ⲇ.bezierCurveTo(70.25 * ᐃ, 123.953125 * ᐃ, 70.25 * ᐃ, ᐃ * 123.953125, 56.25 * ᐃ, 160.953125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠⲆⲆⲆⲆ, Δⵠ[ΔΔΔΔ], ᐃ * ᐃⲆⲆΔΔ);
		return ΔⲆ
	}
	const ΔΔᐃᐃ = ⲆⲆⵠⲆ;

	function ⵠⵠⵠⲆᐃⲆⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 170 * ᐃ;
		ΔⲆ.height = ᐃ * 173;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔᐃⵠⲆ;
		Ⲇ.translate(ᐃ * 5, ⲆⲆᐃᐃ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(86.25 * ᐃ, 84.953125 * ᐃ);
		ᐃᐃⲆΔ(Ⲇ, ⲆⲆΔΔᐃ, ᐃ * 9.848857801796104, ᐃ * Ⲇᐃⵠᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = ᐃⲆΔ;
		Ⲇ.translate(-ΔΔᐃᐃⵠ * ᐃ, ᐃ * -ᐃᐃᐃΔⵠ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 86.25, 84.953125 * ᐃ);
		ᐃᐃⲆΔ(Ⲇ, 7, 9.848857801796104 * ᐃ, ᐃ * 5);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⵠΔⵠ], Δⵠ[ᐃⵠᐃΔΔⵠᐃ], ᐃ * 4);
		return ΔⲆ
	}
	const ⲆⵠᐃⵠⵠⲆᐃ = ᐃⲆΔᐃΔⵠⵠ;

	function ᐃΔⲆⵠⵠⲆΔ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 75 * ᐃ;
		var ⲆΔⲆ = ᐃ * 55;
		var ⵠΔΔ = ᐃ * 4;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(ᐃ * -30, ᐃ * -40);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(ᐃ * 67, 56 * ᐃ, 72 * ᐃ, ᐃ * 71, 72 * ᐃ, 71 * ᐃ);
		Ⲇ.bezierCurveTo(72 * ᐃ, 71 * ᐃ, 84 * ᐃ, ᐃ * 70, 75 * ᐃ, ᐃ * 82);
		Ⲇ.bezierCurveTo(70 * ᐃ, 88 * ᐃ, ᐃ * 61, 89 * ᐃ, 58 * ᐃ, 89 * ᐃ);
		Ⲇ.bezierCurveTo(55 * ᐃ, 89 * ᐃ, 40 * ᐃ, 89 * ᐃ, 46 * ᐃ, 77 * ᐃ);
		Ⲇ.bezierCurveTo(46 * ᐃ, 77 * ᐃ, ᐃ * 43, ᐃ * 63, ᐃ * 43, 63 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 35, ᐃ * 61, 35 * ᐃ, ᐃ * 53, 42 * ᐃ, 47 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 48, ᐃ * 42, 62 * ᐃ, ᐃ * 41, ᐃ * 66, ᐃ * 43);
		Ⲇ.bezierCurveTo(70 * ᐃ, ᐃ * 45, ᐃ * 72, ᐃ * 48, ᐃ * 67, ᐃ * 56);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⲆ]);
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(ᐃ * 68, 61 * ᐃ, ᐃ * 72, ᐃ * 76, ᐃ * 72, ᐃ * 76);
		Ⲇ.bezierCurveTo(ᐃ * 65, ᐃ * 85, 61 * ᐃ, ᐃ * 85, ᐃ * 49, 83 * ᐃ);
		Ⲇ.bezierCurveTo(49 * ᐃ, 83 * ᐃ, ᐃ * 44, 63 * ᐃ, ᐃ * 44, ᐃ * 63);
		Ⲇ.bezierCurveTo(ᐃ * 54, ᐃ * 63, 60 * ᐃ, 63 * ᐃ, ᐃ * 67, 55 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.moveTo(69 * ᐃ, 65 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 70, ᐃ * 61, 81 * ᐃ, 66 * ᐃ, 86 * ᐃ, ᐃ * 66);
		Ⲇ.bezierCurveTo(ᐃ * 90, 66 * ᐃ, ᐃ * 97, ᐃ * 63, ᐃ * 97, ᐃ * 56);
		Ⲇ.bezierCurveTo(97 * ᐃ, 50 * ᐃ, ᐃ * 93, 47 * ᐃ, ᐃ * 88, ᐃ * 44);
		ΔΔ(Ⲇ, ΔⵠΔⵠⵠ, Δⵠ[Ⲇⵠᐃ], 2);
		Ⲇ.beginPath();
		Ⲇ.moveTo(50 * ᐃ, 48 * ᐃ);
		Ⲇ.bezierCurveTo(43 * ᐃ, 52 * ᐃ, 50 * ᐃ, ᐃ * 54, 51 * ᐃ, ᐃ * 54);
		Ⲇ.bezierCurveTo(54 * ᐃ, 54 * ᐃ, ᐃ * 59, 52 * ᐃ, ᐃ * 59, 49 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 59, ᐃ * 48, 55 * ᐃ, ᐃ * 46, ᐃ * 50, 48 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔⵠ]);
		return ΔⲆ
	}

	function ⲆᐃΔⵠΔⲆⵠⵠΔ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 195 * ᐃ;
		var ⲆΔⲆ = ᐃ * 190;
		var Ⲇⵠ = ⲆⲆᐃ / ⵠⵠⵠᐃ;
		var ᐃⵠⲆ = ⲆΔⲆ / 2;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		var ⵠⵠⵠⵠ = 10 * ᐃ;
		var ⵠᐃᐃᐃΔ = ᐃ * 35;
		var ᐃⲆΔᐃΔ = ᐃ * 150;
		var ΔᐃⲆⲆⵠ = ⵠᐃᐃᐃΔ / ΔᐃⵠΔ;
		var ⵠⵠᐃᐃⵠ = ᐃⲆΔᐃΔ / 2;
		var ⵠΔΔ = ᐃ * Ⲇⵠⵠⵠ;
		Ⲇ.translate(Ⲇⵠ - ᐃ * 5, ᐃⵠⲆ - ᐃ * 5);
		Ⲇ.rotate(-Math.PI / 1.25);
		Ⲇ.globalAlpha = Δᐃⵠⵠ;
		ᐃΔⵠ(Ⲇ, -ΔᐃⲆⲆⵠ, -ⵠⵠᐃᐃⵠ, ⵠᐃᐃᐃΔ, ᐃⲆΔᐃΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[1], ⵠΔΔ);
		Ⲇ.translate(ΔΔᐃ, 0);
		Ⲇ.rotate(Math.PI / ⵠⵠΔⵠ);
		Ⲇ.globalAlpha = ΔⵠⲆⲆ;
		ᐃΔⵠ(Ⲇ, -ΔᐃⲆⲆⵠ, -ⵠⵠᐃᐃⵠ, ⵠᐃᐃᐃΔ, ᐃⲆΔᐃΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[1], ⵠΔΔ);
		Ⲇ.translate(0, ⲆⲆᐃᐃ);
		ᐃΔⵠ(Ⲇ, -ΔᐃⲆⲆⵠ / 2, -ⵠⵠᐃᐃⵠ / ᐃᐃᐃⵠ, ⵠᐃᐃᐃΔ / ⲆᐃⵠΔ, ᐃⲆΔᐃΔ / ᐃⲆᐃΔ, ⵠⵠⵠⵠ - 2);
		ΔΔ(Ⲇ, Δⵠ[1]);
		return ΔⲆ
	}
	const ΔΔⵠΔ = ΔᐃⲆⲆ;

	function ΔⲆⲆᐃⵠⲆⲆ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 135 * ᐃ;
		var ⲆΔⲆ = 190 * ᐃ;
		var Ⲇⵠ = ⲆⲆᐃ / 2;
		var ᐃⵠⲆ = ⲆΔⲆ / 2;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		var ⵠⵠⵠⵠ = 10 * ᐃ;
		var ⵠᐃᐃᐃΔ = 25 * ᐃ;
		var ᐃⲆΔᐃΔ = 180 * ᐃ;
		var ΔᐃⲆⲆⵠ = ⵠᐃᐃᐃΔ / 2;
		var ⵠⵠᐃᐃⵠ = ᐃⲆΔᐃΔ / 2;
		var ⵠΔΔ = ᐃ * ᐃΔᐃΔ;
		Ⲇ.translate(Ⲇⵠ, ᐃⵠⲆ);
		Ⲇ.rotate(-Math.PI / 5);
		Ⲇ.globalAlpha = ⲆΔΔΔ;
		ᐃΔⵠ(Ⲇ, -ΔᐃⲆⲆⵠ, -ⵠⵠᐃᐃⵠ, ⵠᐃᐃᐃΔ, ᐃⲆΔᐃΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[1], ⵠΔΔ);
		Ⲇ.translate(0, 0);
		Ⲇ.rotate(Math.PI / ᐃΔΔⲆⵠ);
		Ⲇ.globalAlpha = Δᐃⵠⵠ;
		ᐃΔⵠ(Ⲇ, -ΔᐃⲆⲆⵠ, -ⵠⵠᐃᐃⵠ, ⵠᐃᐃᐃΔ, ᐃⲆΔᐃΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ], Δⵠ[Δⵠᐃ], ⵠΔΔ);
		return ΔⲆ
	}

	function ΔⵠⵠⵠΔⲆΔΔⵠ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 149 * ᐃ;
		ΔⲆ.height = 356 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(74.5 * ᐃ, ᐃ * 177.5);
		ᐃΔⵠ(Ⲇ, ᐃ * -57.5, ᐃ * -161.5, ᐃ * ᐃⲆΔⲆᐃ, ᐃ * 323, ⵠⲆⵠᐃⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ], Δⵠ[1], 4 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(74.5 * ᐃ, 177.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -57.5, 50.5 * ᐃ, ᐃ * 100, ᐃ * 105, ᐃⵠᐃΔⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[1], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ⵠᐃᐃⲆⲆ * ᐃ, 125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 74.5, 125 * ᐃ, 118 * ᐃ, 125 * ᐃ, 118 * ᐃ, ᐃ * 125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃⵠ], Δⵠ[ⲆⵠΔⵠ], ᐃ * ⲆΔΔⲆᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃᐃΔᐃᐃⲆⲆ * ᐃ, 120 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 74.5, ᐃ * 120, 74.5 * ᐃ, 120 * ᐃ, 118 * ᐃ, 120 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠΔⵠ], Δⵠ[ⵠⵠΔⵠ], ᐃⵠᐃⵠⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ΔᐃᐃΔΔ * ᐃ, ᐃ * 228);
		Ⲇ.bezierCurveTo(ᐃ * 75, 228.5 * ᐃ, 118 * ᐃ, ᐃ * 228.5, ᐃ * 118, 229 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[2], ᐃ * ᐃⵠᐃΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 16, 224 * ᐃ);
		Ⲇ.bezierCurveTo(75 * ᐃ, ᐃ * 224, 118 * ᐃ, 224 * ᐃ, 118 * ᐃ, ᐃ * 224);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃⵠΔⲆ], ᐃ * 10);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 72, ᐃ * 68.5);
		ᐃΔⵠ(Ⲇ, -41.5 * ᐃ, -36.5 * ᐃ, ᐃ * 73, ᐃ * 73, 13 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[4]);
		Ⲇ.save();
		Ⲇ.translate(72 * ᐃ, ᐃ * 175.5);
		ᐃΔⵠ(Ⲇ, ᐃ * -41.5, -38.5 * ᐃ, 73 * ᐃ, 73 * ᐃ, ᐃ * 13);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[4]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 72, ᐃ * 279.5);
		ᐃΔⵠ(Ⲇ, -41.5 * ᐃ, -40.5 * ᐃ, 73 * ᐃ, ᐃ * 73, ᐃ * 13);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⵠⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ⲆⵠᐃⵠΔᐃΔ * ᐃ, ᐃ * 338);
		Ⲇ.bezierCurveTo(75 * ᐃ, ᐃ * 338, ᐃ * 118, 338 * ᐃ, ᐃ * 118, ᐃ * 338);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆΔⲆ], Δⵠ[2], ⲆΔⵠⵠΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 16, ᐃ * 333);
		Ⲇ.bezierCurveTo(75 * ᐃ, 333 * ᐃ, 118 * ᐃ, ᐃ * 333, ᐃ * 118, 333 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔΔ], Δⵠ[3], 10 * ᐃ);
		return ΔⲆ
	}

	function ⵠⲆⲆⵠΔΔⲆ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 193;
		var ⲆΔⲆ = 198 * ᐃ;
		var Ⲇⵠ = 140 * ᐃ;
		var ᐃⵠⲆ = 90 * ᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		var ⵠⵠⵠⵠ = ΔⵠⵠᐃⲆ * ᐃ;
		var ⵠᐃᐃᐃΔ = ᐃ * 25;
		var ᐃⲆΔᐃΔ = 180 * ᐃ;
		var ΔᐃⲆⲆⵠ = ⵠᐃᐃᐃΔ / ΔⵠⲆᐃ;
		var ⵠⵠᐃᐃⵠ = ᐃⲆΔᐃΔ / ᐃᐃⲆⲆ;
		var ⵠΔΔ = ᐃ * 4;
		Ⲇ.translate(-25 * ᐃ, ᐃ * 1);
		Ⲇ.translate(Ⲇⵠ, ᐃⵠⲆ);
		Ⲇ.rotate(-Math.PI / 5);
		ᐃΔⵠ(Ⲇ, -ΔᐃⲆⲆⵠ, -ⵠⵠᐃᐃⵠ, ⵠᐃᐃᐃΔ, ᐃⲆΔᐃΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠΔ], Δⵠ[ⵠⲆΔⲆ], ⵠΔΔ);
		Ⲇ.translate(-30 * ᐃ, ᐃ * -25);
		Ⲇ.rotate(Math.PI / 3);
		ᐃΔⵠ(Ⲇ, -ΔᐃⲆⲆⵠ, -ⵠⵠᐃᐃⵠ, ⵠᐃᐃᐃΔ, ᐃⲆΔᐃΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⲆ], Δⵠ[ΔⲆᐃᐃ], ⵠΔΔ);
		Ⲇ.translate(35 * ᐃ, ᐃ * 30);
		Ⲇ.rotate(Math.PI / 3);
		ᐃΔⵠ(Ⲇ, -ΔᐃⲆⲆⵠ, -ⵠⵠᐃᐃⵠ, ⵠᐃᐃᐃΔ, ᐃⲆΔᐃΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ], Δⵠ[1], ⵠΔΔ);
		return ΔⲆ
	}

	function ΔΔᐃⵠ(ᐃ, Δⵠᐃⵠᐃⵠᐃ, ⵠⲆᐃΔⲆⲆΔⲆΔ, Δⵠ, ⲆΔⵠΔ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 70;
		var ⲆΔⲆ = 70 * ᐃ;
		var ΔⲆΔ = 10 * ᐃ;
		var ⲆⲆⵠᐃ = 5 * ᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ + ⲆⲆⵠᐃ;
		for (var Ⲇᐃ = ΔΔᐃᐃ; Ⲇᐃ < Δⵠᐃⵠᐃⵠᐃ.length; Ⲇᐃ++) {
			var Δⵠⵠ = Δⵠᐃⵠᐃⵠᐃ[Ⲇᐃ];
			Ⲇ.globalAlpha = Δⵠⵠ.a;
			var ᐃᐃ = Δⵠⵠ.f(ⵠⲆᐃΔⲆⲆΔⲆΔ, ᐃⵠⲆⲆᐃ, Δⵠⵠ.c);
			Ⲇ.save();
			Ⲇ.translate(ⲆⲆᐃ / ⲆⲆⲆⲆ + Δⵠⵠ.x * ᐃ, ⲆΔⲆ / ⵠΔⵠΔ + ᐃ * Δⵠⵠ.y);
			Ⲇ.rotate(Δⵠⵠ.r);
			Ⲇ.drawImage(ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ⵠΔⵠΔ);
			Ⲇ.restore()
		}
		var ᐃΔⲆ = [];
		for (var Ⲇᐃ = ⵠⲆᐃ; Ⲇᐃ < Δⵠ.length; Ⲇᐃ++) {
			var ⲆⵠΔΔᐃⲆᐃ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
			var ᐃᐃⲆᐃᐃ = ⲆⵠΔΔᐃⲆᐃ.getContext(ⵠ[444]);
			ⲆⵠΔΔᐃⲆᐃ.width = ⲆⲆᐃ;
			ⲆⵠΔΔᐃⲆᐃ.height = ⲆΔⲆ + ⲆⲆⵠᐃ;
			ᐃᐃⲆᐃᐃ.globalAlpha = ⲆΔⵠΔ / 2;
			if (Ⲇᐃ == 2) ᐃΔⵠ(ᐃᐃⲆᐃᐃ, ⵠΔᐃⵠ, ⲆⲆⵠᐃ, ⲆⲆᐃ, ⲆΔⲆ, ΔⲆΔ);
			else ᐃΔⵠ(ᐃᐃⲆᐃᐃ, ⵠⲆΔ, 0, ⲆⲆᐃ, ⲆΔⲆ + ⲆⲆⵠᐃ, ΔⲆΔ);
			ΔΔ(ᐃᐃⲆᐃᐃ, "#081a19");
			ᐃᐃⲆᐃᐃ.globalAlpha = ⲆΔⵠΔ;
			2 == Ⲇᐃ ? ᐃΔⵠ(ᐃᐃⲆᐃᐃ, Ⲇᐃⵠ, ⲆⲆⵠᐃ, ⲆⲆᐃ, ⲆΔⲆ, ΔⲆΔ) : ᐃΔⵠ(ᐃᐃⲆᐃᐃ, Ⲇᐃⵠ, 0, ⲆⲆᐃ, ⲆΔⲆ, ΔⲆΔ);
			ΔΔ(ᐃᐃⲆᐃᐃ, Δⵠ[Ⲇᐃ]);
			ᐃᐃⲆᐃᐃ.globalAlpha = ΔᐃⵠⲆ;
			if (Ⲇᐃ == ᐃⲆᐃⵠ) ᐃᐃⲆᐃᐃ.drawImage(ΔⲆ, 0, ⲆⲆⵠᐃ);
			else ᐃᐃⲆᐃᐃ.drawImage(ΔⲆ, ΔΔᐃ, 0);
			ᐃΔⲆ.push(ᐃⵠᐃ(ⲆⵠΔΔᐃⲆᐃ))
		}
		return ᐃΔⲆ
	}

	function ΔⲆⵠᐃᐃⵠᐃ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 145;
		var ⲆΔⲆ = 145 * ᐃ;
		var Ⲇⵠ = ⲆⲆᐃ / ⵠⵠⵠᐃ;
		var ᐃⵠⲆ = ⲆΔⲆ / ⵠⵠⵠᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		var ΔⲆΔ = ᐃ * 70;
		Ⲇ.translate(Ⲇⵠ, ᐃⵠⲆ);
		Ⲇ.globalAlpha = .4;
		ᐃΔΔ(Ⲇ, ⲆⲆⵠⲆ, ᐃⵠⵠⲆ, ΔⲆΔ);
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⲆ]);
		var ΔⲆΔ = 50 * ᐃ;
		Ⲇ.translate(ⵠⲆⵠⵠ, 0);
		Ⲇ.globalAlpha = .8;
		ᐃΔΔ(Ⲇ, ⲆⲆⵠⲆ, ΔⲆⲆ, ΔⲆΔ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		var ΔⲆΔ = ᐃ * 35;
		Ⲇ.translate(0, Δⵠⵠⵠ);
		Ⲇ.globalAlpha = .8;
		ᐃΔΔ(Ⲇ, 0, ᐃᐃⲆ, ΔⲆΔ);
		ΔΔ(Ⲇ, Δⵠ[1]);
		var ΔⲆΔ = ᐃ * 20;
		Ⲇ.translate(0, ⲆⵠⲆⲆ);
		Ⲇ.globalAlpha = .8;
		ᐃΔΔ(Ⲇ, 0, 0, ΔⲆΔ);
		ΔΔ(Ⲇ, Δⵠ[2]);
		return ΔⲆ
	}
	const ΔⵠⲆⲆⵠᐃⵠ = ᐃΔΔΔᐃᐃΔ;

	function ⵠΔΔⵠⲆⵠΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 220 * ᐃ;
		var ⲆΔⲆ = ᐃ * 220;
		var ΔⲆΔ = ᐃ * 32;
		var ⵠΔΔ = ᐃΔᐃΔ * ᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(ⲆⲆᐃ / 2, ⲆΔⲆ / ⵠΔⵠΔ + ⲆΔⵠΔⵠ * ᐃ);
		Ⲇ.globalAlpha = .5;
		ᐃΔΔ(Ⲇ, 0, 0, ΔⲆΔ);
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ], Δⵠ[ⵠᐃⲆⲆ]);
		Ⲇ.translate(ⵠⵠⵠΔ, -8 * ᐃ);
		Ⲇ.globalAlpha = 1;
		ᐃΔΔ(Ⲇ, ⵠⵠⵠ, ᐃᐃⲆ, ΔⲆΔ);
		ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃⲆ], Δⵠ[ⲆᐃΔⲆ], ⵠΔΔ);
		return ΔⲆ
	}

	function ᐃᐃⲆⵠᐃⵠᐃ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 205;
		var ⲆΔⲆ = ᐃ * 205;
		var Ⲇⵠ = ⲆⲆᐃ / ΔⵠⲆᐃ;
		var ᐃⵠⲆ = ⲆΔⲆ / ΔᐃⵠΔ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		var ΔⲆΔ = 100 * ᐃ;
		Ⲇ.translate(Ⲇⵠ, ᐃⵠⲆ);
		Ⲇ.globalAlpha = 1;
		ᐃΔΔ(Ⲇ, 0, 0, ΔⲆΔ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		return ΔⲆ
	}

	function ΔⵠᐃΔᐃᐃⲆ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 370 * ᐃ;
		var ⲆΔⲆ = ᐃ * 370;
		var Ⲇⵠ = ⲆⲆᐃ / ᐃᐃᐃⵠ;
		var ᐃⵠⲆ = ⲆΔⲆ / ⲆᐃΔⲆ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		var ΔⲆΔ = 180 * ᐃ;
		Ⲇ.globalAlpha = .2;
		ᐃΔΔ(Ⲇ, Ⲇⵠ, ᐃⵠⲆ, ΔⲆΔ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		return ΔⲆ
	}

	function ⵠΔᐃⵠⲆⵠᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 155 * ᐃ;
		ΔⲆ.height = ᐃ * 127;
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(0, ᐃ * 8);
		Ⲇ.translate(ᐃ * -ΔᐃᐃᐃⵠΔⲆ, ᐃ * -20);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 55, ᐃ * 68);
		Ⲇ.bezierCurveTo(ᐃ * 86, 64 * ᐃ, 117 * ᐃ, ᐃ * 66, ᐃ * 134, 68 * ᐃ);
		Ⲇ.bezierCurveTo(152 * ᐃ, 69 * ᐃ, 165 * ᐃ, ᐃ * 86, ᐃ * 152, ᐃ * 104);
		Ⲇ.bezierCurveTo(146 * ᐃ, 87 * ᐃ, ᐃ * 122, 89 * ᐃ, 98 * ᐃ, 90 * ᐃ);
		Ⲇ.bezierCurveTo(64 * ᐃ, 89 * ᐃ, 41 * ᐃ, ᐃ * 91, 36 * ᐃ, 106 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 19, 92 * ᐃ, 31 * ᐃ, 71 * ᐃ, 54 * ᐃ, 69 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠⵠ]);
		Ⲇ.globalAlpha = ⲆΔΔΔ;
		Ⲇ.translate(ⵠⲆΔ, ᐃ * -Δⵠᐃᐃⵠ);
		Ⲇ.translate(ᐃ * ⲆⵠⲆΔᐃ, ᐃ * 20);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(24 * ᐃ, ᐃ * 28);
		Ⲇ.bezierCurveTo(ᐃ * 39, 30 * ᐃ, ᐃ * 37, 31 * ᐃ, ᐃ * 40, 32 * ᐃ);
		Ⲇ.bezierCurveTo(22 * ᐃ, ᐃ * 45, 26 * ᐃ, 58 * ᐃ, ᐃ * 29, ᐃ * 66);
		Ⲇ.bezierCurveTo(86.5 * ᐃ, ᐃ * 65, 86.5 * ᐃ, 65 * ᐃ, ᐃ * 144, ᐃ * 64);
		Ⲇ.bezierCurveTo(151 * ᐃ, ᐃ * 42, ᐃ * 132, ᐃ * ᐃᐃΔΔΔ, 120 * ᐃ, ᐃ * 16);
		Ⲇ.bezierCurveTo(ᐃ * 106, 12 * ᐃ, 89 * ᐃ, ᐃ * ⲆⵠⲆⲆ, ᐃ * 73, ᐃ * ⲆⵠⲆᐃ);
		Ⲇ.bezierCurveTo(51 * ᐃ, ⲆⵠΔΔ * ᐃ, ᐃ * 36, ᐃ * 20, ᐃ * 25, ᐃ * 28);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * ᐃⲆᐃⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 30, ᐃ * 41);
		Ⲇ.bezierCurveTo(ᐃ * 49, 31 * ᐃ, 53 * ᐃ, 29 * ᐃ, ᐃ * 62, ᐃ * 27);
		Ⲇ.bezierCurveTo(59 * ᐃ, 24 * ᐃ, 56 * ᐃ, 25 * ᐃ, 53 * ᐃ, 24 * ᐃ);
		Ⲇ.bezierCurveTo(67 * ᐃ, 15 * ᐃ, 84 * ᐃ, ᐃ * ᐃᐃΔΔⵠ, 120 * ᐃ, ᐃ * ⵠᐃᐃⲆⲆ);
		Ⲇ.bezierCurveTo(107 * ᐃ, 11 * ᐃ, ᐃ * 96, ᐃ * 6, ᐃ * 85, 2 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 59, 3 * ᐃ, 54 * ᐃ, 7 * ᐃ, ᐃ * 40, ᐃ * 17);
		Ⲇ.bezierCurveTo(32.5 * ᐃ, ᐃ * 22.5, ᐃ * 32.5, 22.5 * ᐃ, ᐃ * 25, ᐃ * 28);
		Ⲇ.bezierCurveTo(ᐃ * 32, ᐃ * 30, 32 * ᐃ, 30 * ᐃ, 39 * ᐃ, 32 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⲆΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(24 * ᐃ, 28 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 39, 30 * ᐃ, 37 * ᐃ, 31 * ᐃ, ᐃ * 40, 32 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 22, ᐃ * 45, ᐃ * 26, ᐃ * 58, ᐃ * 29, ᐃ * 66);
		Ⲇ.bezierCurveTo(86.5 * ᐃ, 65 * ᐃ, 86.5 * ᐃ, 65 * ᐃ, ᐃ * 144, 64 * ᐃ);
		Ⲇ.bezierCurveTo(151 * ᐃ, ᐃ * 42, ᐃ * 132, ⲆⵠⲆΔⲆ * ᐃ, 120 * ᐃ, 16 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 106, ᐃ * ⲆⵠⵠΔΔΔᐃ, 89 * ᐃ, ᐃ * ⲆⵠⲆⲆ, 73 * ᐃ, ᐃ * ⵠⵠΔⵠ);
		Ⲇ.bezierCurveTo(ᐃ * 51, 5 * ᐃ, ᐃ * 36, 20 * ᐃ, ᐃ * 25, 28 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], ᐃ * 4);
		ᐃΔΔ(Ⲇ, ᐃⲆⲆⵠᐃ * ᐃ, 38 * ᐃ, 14.866068747318506 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃᐃΔ], Δⵠ[ᐃᐃᐃⲆ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(39 * ᐃ, ᐃ * 30);
		Ⲇ.bezierCurveTo(27 * ᐃ, ᐃ * 38, ᐃ * 25, 50 * ᐃ, ᐃ * 26, 60 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 36.5, 58.5 * ᐃ, ᐃ * 36.5, 58.5 * ᐃ, ᐃ * 47, 57 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[Δᐃⵠⵠ], Δⵠ[ᐃᐃⲆⲆ], ᐃ * 4);
		Ⲇ.translate(-7 * ᐃ, -ᐃᐃΔΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(27 * ᐃ, ᐃ * 74);
		Ⲇ.bezierCurveTo(ᐃ * 38, 77.5 * ᐃ, ᐃ * 38, ᐃ * 77.5, 49 * ᐃ, ᐃ * 81);
		Ⲇ.bezierCurveTo(ᐃ * 54.5, 75.5 * ᐃ, ᐃ * 54.5, ᐃ * 75.5, 60 * ᐃ, 70 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 64, ᐃ * 72, ᐃ * 64, ᐃ * 72, ᐃ * 68, 74 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 80.5, 67.5 * ᐃ, ᐃ * 80.5, ᐃ * 67.5, ᐃ * 93, 61 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 104.5, 68 * ᐃ, 104.5 * ᐃ, 68 * ᐃ, ᐃ * 116, 75 * ᐃ);
		Ⲇ.bezierCurveTo(120.5 * ᐃ, ᐃ * 72.5, 120.5 * ᐃ, ᐃ * 72.5, ᐃ * 125, ᐃ * 70);
		Ⲇ.bezierCurveTo(ᐃ * 129, ᐃ * 75, 129 * ᐃ, 75 * ᐃ, ᐃ * 133, ᐃ * 80);
		Ⲇ.bezierCurveTo(145.5 * ᐃ, 76.5 * ᐃ, 145.5 * ᐃ, ᐃ * 76.5, ᐃ * 158, ᐃ * 73);
		Ⲇ.bezierCurveTo(ᐃ * 158, 87 * ᐃ, ᐃ * 158, 93 * ᐃ, 155 * ᐃ, 95 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 152.5, ᐃ * 96, 152.5 * ᐃ, 96 * ᐃ, 150 * ᐃ, 97 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 121, 85 * ᐃ, 108 * ᐃ, 86 * ᐃ, ᐃ * 93, 85 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 64, ᐃ * 85, 52 * ᐃ, 95 * ᐃ, ᐃ * 38, ᐃ * 99);
		Ⲇ.bezierCurveTo(36 * ᐃ, 98.5 * ᐃ, ᐃ * 36, ᐃ * 98.5, 34 * ᐃ, ᐃ * 98);
		Ⲇ.bezierCurveTo(25 * ᐃ, ᐃ * 98, ᐃ * 27, ᐃ * 91, ᐃ * 27, 76 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⵠᐃⵠ], Δⵠ[7], ᐃ * ⵠⵠΔⲆⵠ);
		return ΔⲆ
	}

	function ⵠᐃᐃᐃⵠⵠᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 40;
		var ⲆΔⲆ = 40 * ᐃ;
		var ΔⲆΔ = ᐃ * 16;
		var ⵠΔΔ = ᐃ * ᐃᐃⵠΔ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(ⲆⲆᐃ / ΔΔⲆᐃ, ⲆΔⲆ / 2);
		Ⲇ.globalAlpha = 1;
		ᐃΔΔ(Ⲇ, 0, 0, ΔⲆΔ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃ], Δⵠ[1], ⵠΔΔ);
		return ΔⲆ
	}

	function ⲆⲆᐃⲆⵠⵠΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 155;
		ΔⲆ.height = 127 * ᐃ;
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(ⵠᐃⲆⲆ, ⲆᐃⲆΔⵠ * ᐃ);
		Ⲇ.translate(-7 * ᐃ, -20 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(55 * ᐃ, ᐃ * 68);
		Ⲇ.bezierCurveTo(86 * ᐃ, ᐃ * 64, 117 * ᐃ, 66 * ᐃ, ᐃ * 134, 68 * ᐃ);
		Ⲇ.bezierCurveTo(152 * ᐃ, ᐃ * 69, ᐃ * 165, 86 * ᐃ, ᐃ * 152, 104 * ᐃ);
		Ⲇ.bezierCurveTo(146 * ᐃ, 87 * ᐃ, 122 * ᐃ, 89 * ᐃ, 98 * ᐃ, 90 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 64, ᐃ * 89, ᐃ * 41, ᐃ * 91, 36 * ᐃ, ᐃ * 106);
		Ⲇ.bezierCurveTo(ᐃ * 19, 92 * ᐃ, ᐃ * 31, ᐃ * 71, ᐃ * 54, ᐃ * 69);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = ΔⵠⲆⲆ;
		Ⲇ.translate(0, ᐃ * -8);
		Ⲇ.translate(ᐃ * Δᐃⵠᐃⵠ, 20 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(24 * ᐃ, ᐃ * 28);
		Ⲇ.bezierCurveTo(39 * ᐃ, 30 * ᐃ, 37 * ᐃ, 31 * ᐃ, 40 * ᐃ, ᐃ * 32);
		Ⲇ.bezierCurveTo(ᐃ * 22, 45 * ᐃ, 26 * ᐃ, 58 * ᐃ, 29 * ᐃ, 66 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 86.5, 65 * ᐃ, ᐃ * 86.5, 65 * ᐃ, 144 * ᐃ, ᐃ * 64);
		Ⲇ.bezierCurveTo(ᐃ * 151, 42 * ᐃ, ᐃ * 132, 20 * ᐃ, 120 * ᐃ, 16 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 106, ᐃ * 12, ᐃ * 89, ᐃ * ᐃᐃᐃ, 73 * ᐃ, 3 * ᐃ);
		Ⲇ.bezierCurveTo(51 * ᐃ, ΔⵠΔᐃ * ᐃ, ᐃ * 36, ᐃ * ᐃⲆᐃΔⲆ, 25 * ᐃ, 28 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 30, 41 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 49, 31 * ᐃ, ᐃ * 53, ᐃ * 29, ᐃ * 62, 27 * ᐃ);
		Ⲇ.bezierCurveTo(59 * ᐃ, ᐃ * 24, 56 * ᐃ, 25 * ᐃ, ᐃ * 53, ᐃ * 24);
		Ⲇ.bezierCurveTo(67 * ᐃ, ᐃ * ⲆΔᐃΔⲆ, 84 * ᐃ, ᐃⲆⵠᐃⲆᐃⵠ * ᐃ, 120 * ᐃ, ᐃ * ᐃΔⲆⲆΔ);
		Ⲇ.bezierCurveTo(ᐃ * 107, ⲆⵠⲆⲆⵠⵠⲆ * ᐃ, ᐃ * 96, 6 * ᐃ, ᐃ * 85, ΔΔⲆⲆ * ᐃ);
		Ⲇ.bezierCurveTo(59 * ᐃ, ⲆΔᐃⲆ * ᐃ, 54 * ᐃ, 7 * ᐃ, 40 * ᐃ, ᐃΔⵠΔⵠᐃⵠ * ᐃ);
		Ⲇ.bezierCurveTo(32.5 * ᐃ, ᐃ * 22.5, ᐃ * 32.5, 22.5 * ᐃ, ᐃ * 25, 28 * ᐃ);
		Ⲇ.bezierCurveTo(32 * ᐃ, 30 * ᐃ, ᐃ * 32, 30 * ᐃ, ᐃ * 39, 32 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 24, ᐃ * 28);
		Ⲇ.bezierCurveTo(39 * ᐃ, 30 * ᐃ, ᐃ * 37, 31 * ᐃ, ᐃ * 40, 32 * ᐃ);
		Ⲇ.bezierCurveTo(22 * ᐃ, 45 * ᐃ, ᐃ * 26, 58 * ᐃ, ᐃ * 29, 66 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 86.5, ᐃ * 65, ᐃ * 86.5, ᐃ * 65, 144 * ᐃ, 64 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 151, 42 * ᐃ, 132 * ᐃ, 20 * ᐃ, ᐃ * 120, ᐃ * 16);
		Ⲇ.bezierCurveTo(106 * ᐃ, ᐃ * ⲆᐃⲆᐃⲆ, ᐃ * 89, ᐃ * ⵠⲆΔ, 73 * ᐃ, ᐃⵠΔᐃ * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 51, ᐃ * 5, 36 * ᐃ, ᐃ * ΔⲆΔⲆΔ, ᐃ * 25, 28 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], ᐃⲆᐃⲆ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 18, ᐃ * 38, 14.866068747318506 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ᐃᐃΔᐃ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 39, ᐃ * 30);
		Ⲇ.bezierCurveTo(27 * ᐃ, ᐃ * 38, ᐃ * 25, 50 * ᐃ, 26 * ᐃ, 60 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 36.5, ᐃ * 58.5, 36.5 * ᐃ, 58.5 * ᐃ, ᐃ * 47, ᐃ * 57);
		ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃᐃ], Δⵠ[2], 4 * ᐃ);
		Ⲇ.translate(ᐃ * -7, -20 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 55, ᐃ * 68);
		Ⲇ.bezierCurveTo(86 * ᐃ, 64 * ᐃ, ᐃ * 117, 66 * ᐃ, 134 * ᐃ, 68 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 152, 69 * ᐃ, ᐃ * 165, ᐃ * 86, 152 * ᐃ, 104 * ᐃ);
		Ⲇ.bezierCurveTo(146 * ᐃ, 87 * ᐃ, 122 * ᐃ, 89 * ᐃ, ᐃ * 98, 90 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 64, 89 * ᐃ, ᐃ * 41, ᐃ * 91, 36 * ᐃ, ᐃ * 106);
		Ⲇ.bezierCurveTo(ᐃ * ⲆⵠΔᐃΔᐃⲆ, 92 * ᐃ, ᐃ * 31, 71 * ᐃ, 54 * ᐃ, 69 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ⲆⲆᐃᐃ], ᐃ * 4);
		return ΔⲆ
	}
	const ᐃⲆⲆⲆⲆΔⵠ = ⲆᐃΔⲆⵠ;

	function ᐃⵠΔΔⵠᐃᐃ(ᐃ, Δⵠ, Ⲇᐃ, ⵠΔΔᐃⲆΔΔ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 121 * ᐃ;
		ΔⲆ.height = 130 * ᐃ;
		Ⲇ.translate(ᐃᐃⲆ, ᐃ * ΔΔᐃΔᐃΔΔ);
		if (ⵠΔᐃ == Ⲇᐃ) {
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(Ⲇⵠⵠᐃⵠ * ᐃ, 23 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 6, ᐃ * 46, ᐃ * ᐃⵠⵠⵠⲆ, ᐃ * 46, ᐃ * ΔΔΔⵠΔ, 69 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 21, 69 * ᐃ, ᐃ * 21, 69 * ᐃ, ᐃ * 36, 69 * ᐃ);
			Ⲇ.bezierCurveTo(45.5 * ᐃ, ᐃ * 78.5, 45.5 * ᐃ, ᐃ * 78.5, 55 * ᐃ, ᐃ * 88);
			Ⲇ.bezierCurveTo(55.5 * ᐃ, ᐃ * 45.5, 55.5 * ᐃ, ᐃ * 45.5, 56 * ᐃ, ᐃ * 3);
			Ⲇ.bezierCurveTo(ᐃ * 47, ⵠΔⲆᐃᐃ * ᐃ, 47 * ᐃ, ᐃ * ⵠΔⲆᐃᐃ, ᐃ * 38, ᐃ * 25);
			Ⲇ.bezierCurveTo(ᐃ * 23, 25 * ᐃ, 23 * ᐃ, ᐃ * 25, ᐃ * ⲆⲆⲆᐃᐃ, 23 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, undefined, Δⵠ[ΔΔᐃΔ], ᐃ * ⵠΔᐃⲆⲆ)
		}
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(6 * ᐃ, ᐃ * 23);
		Ⲇ.bezierCurveTo(ᐃ * Ⲇⵠⵠᐃⵠ, 46 * ᐃ, ᐃ * ᐃⵠⲆᐃΔ, ᐃ * 46, ᐃ * ⲆⲆⵠⵠⲆ, 69 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 21, ᐃ * 69, ᐃ * 21, 69 * ᐃ, 36 * ᐃ, 69 * ᐃ);
		Ⲇ.bezierCurveTo(45.5 * ᐃ, 78.5 * ᐃ, ᐃ * 45.5, ᐃ * 78.5, 55 * ᐃ, ᐃ * 88);
		Ⲇ.bezierCurveTo(ᐃ * 55.5, 45.5 * ᐃ, ᐃ * 55.5, ᐃ * 45.5, ᐃ * 56, ᐃ * ᐃΔⵠⲆ);
		Ⲇ.bezierCurveTo(ᐃ * 47, ΔⲆⲆᐃⲆⲆⲆ * ᐃ, 47 * ᐃ, ᐃ * 14, 38 * ᐃ, ᐃ * 25);
		Ⲇ.bezierCurveTo(ᐃ * 23, 25 * ᐃ, ᐃ * 23, 25 * ᐃ, ᐃ * ⲆⲆⲆᐃᐃ, 23 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔ], Δⵠ[2], 4 * ᐃ);
		if (ⵠΔΔᐃⲆΔΔ == 1) {
			Ⲇ.translate(0, ᐃ * ⲆⲆᐃᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(67 * ᐃ, ᐃ * 30);
			Ⲇ.bezierCurveTo(ᐃ * 73, 47 * ᐃ, 69 * ᐃ, 45 * ᐃ, ᐃ * 67, ᐃ * 58);
			ΔΔ(Ⲇ, undefined, Δⵠ[ᐃᐃᐃ], ΔⵠⵠᐃⲆ * ᐃ);
			Ⲇ.translate(ⵠⵠΔⵠ, ⵠⵠⲆⵠ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(70 * ᐃ, ⲆΔΔⲆⲆⵠⲆ * ᐃ);
			Ⲇ.bezierCurveTo(83 * ᐃ, 45 * ᐃ, 76 * ᐃ, ᐃ * 55, 70 * ᐃ, ᐃ * 69);
			ΔΔ(Ⲇ, undefined, Δⵠ[ⵠⵠⵠ], ᐃ * ᐃⵠᐃⵠⲆ);
			Ⲇ.translate(3, ⵠᐃⲆⲆ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(76 * ᐃ, 8 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 88, 31 * ᐃ, 89 * ᐃ, ᐃ * 55, ᐃ * 76, 79 * ᐃ);
			ΔΔ(Ⲇ, undefined, Δⵠ[0], ΔⵠⵠᐃⲆ * ᐃ);
			if (Ⲇᐃ == Ⲇⵠᐃ) {
				Ⲇ.translate(-6 * ᐃ, ᐃ * -5);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(67 * ᐃ, ᐃ * 30);
				Ⲇ.bezierCurveTo(73 * ᐃ, 47 * ᐃ, 69 * ᐃ, 45 * ᐃ, 67 * ᐃ, ᐃ * 58);
				ΔΔ(Ⲇ, undefined, Δⵠ[3], ᐃ * 18);
				Ⲇ.translate(3, ⵠⲆΔ * ᐃ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(70 * ᐃ, ⲆⵠⵠⲆΔ * ᐃ);
				Ⲇ.bezierCurveTo(83 * ᐃ, 45 * ᐃ, 76 * ᐃ, 55 * ᐃ, ᐃ * 70, 69 * ᐃ);
				ΔΔ(Ⲇ, ⵠⲆⲆⲆⲆ, Δⵠ[ΔⲆΔⵠ], 18 * ᐃ);
				Ⲇ.translate(3, ᐃ * ⵠⵠⵠΔ);
				Ⲇ.beginPath();
				Ⲇ.lineCap = ⵠ[401];
				Ⲇ.lineJoin = ⵠ[401];
				Ⲇ.moveTo(ᐃ * 76, 8 * ᐃ);
				Ⲇ.bezierCurveTo(ᐃ * 88, ᐃ * 31, 89 * ᐃ, ᐃ * 55, ᐃ * 76, 79 * ᐃ);
				ΔΔ(Ⲇ, undefined, Δⵠ[3], 18 * ᐃ);
				Ⲇ.translate(-ᐃⵠⵠⵠⲆ, 0 * ᐃ)
			} else {
				Ⲇ.translate(-6 * ᐃ, -ᐃᐃⵠᐃΔ * ᐃ)
			}
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(67 * ᐃ, 30 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 73, ᐃ * 47, ᐃ * 69, 45 * ᐃ, ᐃ * 67, 58 * ᐃ);
			ΔΔ(Ⲇ, undefined, Δⵠ[2], ᐃ * ⵠⵠΔⲆᐃ);
			Ⲇ.translate(ᐃⵠΔᐃ, 0 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(70 * ᐃ, 17 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 83, 45 * ᐃ, ᐃ * 76, 55 * ᐃ, ᐃ * 70, ᐃ * 69);
			ΔΔ(Ⲇ, undefined, Δⵠ[ΔᐃⵠΔ], ᐃ * ⵠΔΔΔⵠ);
			Ⲇ.translate(ᐃΔⲆΔ, ᐃ * ⵠⵠⵠ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(76 * ᐃ, ᐃ * 8);
			Ⲇ.bezierCurveTo(ᐃ * 88, ᐃ * 31, ᐃ * 89, ᐃ * 55, ᐃ * 76, 79 * ᐃ);
			ΔΔ(Ⲇ, ⵠⵠⲆᐃᐃ, Δⵠ[ᐃᐃΔⵠ], 10 * ᐃ)
		} else {
			Ⲇᐃ == ΔᐃⵠⲆ ? (Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(108 * ᐃ, ᐃ * 27), Ⲇ.bezierCurveTo(ᐃ * 94, 45.5 * ᐃ, 94 * ᐃ, 45.5 * ᐃ, ᐃ * 80, ᐃ * 64), Ⲇ.closePath(), ΔΔ(Ⲇ, undefined, Δⵠ[ΔⲆΔⲆ], 18 * ᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 79, 30 * ᐃ), Ⲇ.bezierCurveTo(93 * ᐃ, ᐃ * 47, ᐃ * 93, ᐃ * 47, 107 * ᐃ, ᐃ * 64), Ⲇ.closePath(), ΔΔ(Ⲇ, ⲆⲆⲆΔⲆ, Δⵠ[ᐃⵠΔᐃ], ᐃ * ΔΔⵠᐃᐃ)) : (Ⲇ.translate(ⵠᐃⲆ, -5 * ᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 108, ᐃ * 27), Ⲇ.bezierCurveTo(94 * ᐃ, 45.5 * ᐃ, 94 * ᐃ, 45.5 * ᐃ, ᐃ * 80, 64 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, ⵠⵠⲆᐃᐃ, Δⵠ[ⵠᐃⲆⲆ], 7 * ᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 79, ᐃ * 30), Ⲇ.bezierCurveTo(ᐃ * 93, ᐃ * 47, 93 * ᐃ, ᐃ * 47, ᐃ * 107, ᐃ * 64), Ⲇ.closePath(), ΔΔ(Ⲇ, undefined, Δⵠ[ⵠⵠⲆⵠ], ᐃ * ᐃⲆᐃΔΔ), Ⲇ.translate(ⵠⲆΔ, ᐃⵠᐃⲆ * ᐃ));
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 108, 27 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 94, 45.5 * ᐃ, 94 * ᐃ, 45.5 * ᐃ, 80 * ᐃ, 64 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, undefined, Δⵠ[ⲆⲆΔⲆ], ⲆΔⲆⵠⵠ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 79, 30 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 93, 47 * ᐃ, ᐃ * 93, 47 * ᐃ, 107 * ᐃ, 64 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, ⵠΔⵠⵠⲆ, Δⵠ[2], ⲆⲆΔΔᐃ * ᐃ)
		}
		return ΔⲆ
	}

	function ⲆΔΔᐃᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 105 * ᐃ;
		var ⲆΔⲆ = 125 * ᐃ;
		var ⵠΔΔ = ᐃΔᐃΔ * ᐃ;
		var w2 = ⲆⲆᐃ / 2;
		var ⲆⲆⲆΔΔ = ⲆΔⲆ / 2;
		var ⵠⵠⵠⵠ = ᐃ * 10;
		var ⲆⲆⵠᐃ = 5 * ᐃ;
		var ᐃᐃᐃΔⲆⵠᐃ = 10 * ᐃ;
		var ΔΔΔᐃᐃΔⲆ = ᐃ * 110;
		var ᐃᐃΔⵠᐃᐃᐃ = ᐃᐃᐃΔⲆⵠᐃ / ΔΔⲆᐃ;
		var ΔΔᐃᐃΔⵠⲆ = ΔΔΔᐃᐃΔⲆ / ΔⵠⲆᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.save();
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ⲆⲆᐃ / ⲆⲆΔⲆ + Δᐃᐃⵠⵠ * ᐃ, ⲆΔⲆ / 2 + ⲆⲆⵠᐃ);
		ᐃΔⵠ(Ⲇ, -ᐃᐃΔⵠᐃᐃᐃ, -ΔΔᐃᐃΔⵠⲆ, ᐃᐃᐃΔⲆⵠᐃ, ΔΔΔᐃᐃΔⲆ, ⵠⵠⵠⵠ);
		if (ⵠⲆᐃⵠ) {
			ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⲆ])
		} else {
			ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠⲆ])
		}
		Ⲇ.translate(-130 * ᐃ + ⲆⲆⵠᐃ, ᐃ * -128 + ⲆⲆⵠᐃ);
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(159 * ᐃ, 93 * ᐃ, ᐃ * 156, 99 * ᐃ, ᐃ * 154, 102 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 128, ᐃ * 92, ᐃ * 90, ᐃ * 93, ᐃ * 72, ᐃ * 96);
		Ⲇ.bezierCurveTo(68 * ᐃ, 84 * ᐃ, ᐃ * 143, ᐃ * 73, ᐃ * 162, 86 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔⲆⲆ]);
		Ⲇ.restore();
		Ⲇ.translate(ⲆⲆᐃ / ΔᐃⵠΔ + 8, ⲆΔⲆ / ΔΔΔⵠ);
		Ⲇ.globalAlpha = 1;
		ᐃΔⵠ(Ⲇ, -ᐃᐃΔⵠᐃᐃᐃ, -ΔΔᐃᐃΔⵠⲆ, ᐃᐃᐃΔⲆⵠᐃ, ΔΔΔᐃᐃΔⲆ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔᐃ], Δⵠ[ᐃΔⵠⵠ], ⵠΔΔ);
		Ⲇ.translate(ᐃ * -130, -125 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(ᐃ * 159, ᐃ * 93, ᐃ * 156, ᐃ * 99, 154 * ᐃ, 102 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 128, ᐃ * 92, 90 * ᐃ, 93 * ᐃ, ᐃ * 72, ᐃ * 96);
		Ⲇ.bezierCurveTo(ᐃ * 68, 84 * ᐃ, ᐃ * 143, 73 * ᐃ, 162 * ᐃ, ᐃ * 86);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[6], ⵠΔΔ);
		return ΔⲆ
	}
	const ΔⲆⲆⵠⲆⲆⲆΔⲆ = {};
	const ⲆᐃⵠΔⲆⲆⵠ = {};
	ΔⲆⲆⵠⲆⲆⲆΔⲆ["get"] = function(ΔⵠΔΔΔⲆⵠ, ⲆⵠⵠᐃⵠᐃΔ) {
		if (ⲆⵠⵠᐃⵠᐃΔ !== "ΔⲆⲆⵠⲆⲆⲆΔⲆ") {
			const ΔⲆⲆⵠⲆⲆⲆΔⲆ = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]];
			const ΔⵠΔΔΔⲆⵠ = ΔⲆⲆⵠⲆⲆⲆΔⲆ;
			const ⲆⵠⵠᐃⵠᐃΔ = function() {
				ΔⲆⲆⵠⲆⲆⲆΔⲆ(ⲆⵠⵠᐃⵠᐃΔ, 9717);
				ΔⵠΔΔΔⲆⵠ(ⲆⵠⵠᐃⵠᐃΔ, 2854)
			};
			ⲆⵠⵠᐃⵠᐃΔ()
		}
		return ⵠⵠⲆΔᐃᐃᐃⲆΔ["Reflect"]["get"](...arguments)
	};
	const ⲆⲆΔΔⵠΔⲆ = new ⵠⵠⲆΔᐃᐃᐃⲆΔ["Proxy"](ⲆᐃⵠΔⲆⲆⵠ, ΔⲆⲆⵠⲆⲆⲆΔⲆ);
	const ⲆᐃΔΔΔⵠΔΔΔ = ⲆⲆΔΔⵠΔⲆ.ΔⲆⲆⵠⲆⲆⲆΔⲆ;

	function ΔᐃΔᐃⵠ(ᐃ, Δⵠ, ΔᐃΔ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 210 * ᐃ;
		var ⲆΔⲆ = ᐃ * 205;
		var w2 = ⲆⲆᐃ / 2;
		var ⲆⲆⲆΔΔ = ⲆΔⲆ / ⵠΔⵠΔ;
		var ⵠⵠⵠⵠ = ᐃ * 30;
		var ⲆⲆⵠᐃ = ᐃ * 20;
		var ΔⲆⵠᐃᐃ = 200 * ᐃ;
		var ΔⲆᐃΔΔ = 180 * ᐃ;
		var ΔⲆΔ = ᐃ * 80;
		var ⵠΔΔΔᐃ = ΔⲆⵠᐃᐃ / ΔⵠⲆᐃ;
		var ⵠΔⲆⲆᐃ = ΔⲆᐃΔΔ / 2;
		var ⵠΔΔ = ⵠᐃᐃΔ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		ΔⲆ.width = ᐃ * 419;
		ΔⲆ.height = ᐃ * 412;
		if (1 == Ⲇᐃ) {
			Ⲇ.save();
			Ⲇ.translate(10 * ᐃ, 0 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(117.99996948242188 * ᐃ, 216.40621948242188 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 86.99996948242188, ᐃ * 221.40621948242188, 74.99996948242188 * ᐃ, 217.40621948242188 * ᐃ, ᐃ * 60.999969482421875, ᐃ * 205.40621948242188);
			ΔΔ(Ⲇ, undefined, Δⵠ[4], ΔⲆΔⵠ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(114.99996948242188 * ᐃ, ᐃ * 227.40621948242188);
			Ⲇ.bezierCurveTo(ᐃ * 90.99996948242188, ᐃ * 233.40621948242188, ᐃ * 66.99996948242188, ᐃ * 228.40621948242188, 43.999969482421875 * ᐃ, ᐃ * 225.40621948242188);
			ΔΔ(Ⲇ, undefined, Δⵠ[4], 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 110.99996948242188, ᐃ * 236.40621948242188);
			Ⲇ.bezierCurveTo(ᐃ * 94.99996948242188, ᐃ * 244.40621948242188, ᐃ * 79.99996948242188, ᐃ * 249.40621948242188, 60.999969482421875 * ᐃ, ᐃ * 249.40621948242188);
			ΔΔ(Ⲇ, ᐃⲆⵠⲆᐃ, Δⵠ[4], ᐃ * ᐃΔⲆΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 111.99996948242188, 206.29513549804688 * ᐃ);
			Ⲇ.bezierCurveTo(91.99996948242188 * ᐃ, ᐃ * 206.29513549804688, ᐃ * 87.99996948242188, 201.29513549804688 * ᐃ, 79.99996948242188 * ᐃ, ᐃ * 192.29513549804688);
			ΔΔ(Ⲇ, undefined, Δⵠ[ᐃⲆⲆΔΔ], ᐃ * 3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(109.99996948242188 * ᐃ, 249.18402099609375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 97.99996948242188, 263.18402099609375 * ᐃ, ᐃ * 85.99996948242188, 271.18402099609375 * ᐃ, ᐃ * 65.99996948242188, 277.18402099609375 * ᐃ);
			ΔΔ(Ⲇ, undefined, Δⵠ[ᐃⵠⵠⵠᐃ], ᐃ * ᐃΔⲆΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 105.99996948242188, ᐃ * 192.18402099609375);
			Ⲇ.bezierCurveTo(ᐃ * 99.49996948242188, 197.68402099609375 * ᐃ, 99.49996948242188 * ᐃ, ᐃ * 197.68402099609375, 92.99996948242188 * ᐃ, ᐃ * 203.18402099609375);
			Ⲇ.bezierCurveTo(ᐃ * 95.99996948242188, ᐃ * 213.18402099609375, 95.99996948242188 * ᐃ, 215.18402099609375 * ᐃ, ᐃ * 89.99996948242188, 219.18402099609375 * ᐃ);
			Ⲇ.bezierCurveTo(91.99996948242188 * ᐃ, 223.18402099609375 * ᐃ, 91.99996948242188 * ᐃ, 226.18402099609375 * ᐃ, ᐃ * 87.99996948242188, ᐃ * 230.18402099609375);
			Ⲇ.bezierCurveTo(89.99996948242188 * ᐃ, 234.18402099609375 * ᐃ, ᐃ * 91.99996948242188, ᐃ * 237.18402099609375, 90.99996948242188 * ᐃ, 244.18402099609375 * ᐃ);
			Ⲇ.bezierCurveTo(96.99996948242188 * ᐃ, 252.18402099609375 * ᐃ, ᐃ * 96.99996948242188, 256.18402099609375 * ᐃ, ᐃ * 95.99996948242188, 262.18402099609375 * ᐃ);
			Ⲇ.bezierCurveTo(106.49996948242188 * ᐃ, 264.18402099609375 * ᐃ, 106.49996948242188 * ᐃ, 264.18402099609375 * ᐃ, ᐃ * 116.99996948242188, ᐃ * 266.18402099609375);
			ΔΔ(Ⲇ, ΔΔᐃⵠⵠ, Δⵠ[4], ᐃ * 3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(104.99996948242188 * ᐃ, ᐃ * 183.29513549804688);
			Ⲇ.bezierCurveTo(ᐃ * 99.99996948242188, ᐃ * 193.29513549804688, ᐃ * 93.99996948242188, 195.29513549804688 * ᐃ, 89.99996948242188 * ᐃ, ᐃ * 201.29513549804688);
			Ⲇ.bezierCurveTo(ᐃ * 86.99996948242188, 212.29513549804688 * ᐃ, 85.99996948242188 * ᐃ, 214.29513549804688 * ᐃ, 81.99996948242188 * ᐃ, 215.29513549804688 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 83.99996948242188, 223.29513549804688 * ᐃ, ᐃ * 83.99996948242188, 227.29513549804688 * ᐃ, ᐃ * 79.99996948242188, ᐃ * 230.29513549804688);
			Ⲇ.bezierCurveTo(ᐃ * 83.99996948242188, ᐃ * 235.29513549804688, 84.99996948242188 * ᐃ, 240.29513549804688 * ᐃ, 79.99996948242188 * ᐃ, 246.29513549804688 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 86.99996948242188, 251.29513549804688 * ᐃ, 91.99996948242188 * ᐃ, 256.2951354980469 * ᐃ, ᐃ * 89.99996948242188, 266.2951354980469 * ᐃ);
			Ⲇ.bezierCurveTo(102.99996948242188 * ᐃ, 269.2951354980469 * ᐃ, 102.99996948242188 * ᐃ, 269.2951354980469 * ᐃ, ᐃ * 115.99996948242188, 272.2951354980469 * ᐃ);
			ΔΔ(Ⲇ, undefined, Δⵠ[4], ΔⲆⵠᐃ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 107.99996948242188, ᐃ * 177.85067749023438);
			Ⲇ.bezierCurveTo(95.99996948242188 * ᐃ, 187.35067749023438 * ᐃ, 95.99996948242188 * ᐃ, ᐃ * 187.35067749023438, ᐃ * 83.99996948242188, ᐃ * 196.85067749023438);
			Ⲇ.bezierCurveTo(ᐃ * 82.99996948242188, ᐃ * 203.85067749023438, ᐃ * 80.99996948242188, 209.85067749023438 * ᐃ, 72.99996948242188 * ᐃ, 210.85067749023438 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 73.99996948242188, 220.85067749023438 * ᐃ, 73.99996948242188 * ᐃ, 221.85067749023438 * ᐃ, 66.99996948242188 * ᐃ, 227.85067749023438 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 71.99996948242188, ᐃ * 235.85067749023438, ᐃ * 73.99996948242188, 239.85067749023438 * ᐃ, ᐃ * 71.99996948242188, ᐃ * 247.85067749023438);
			Ⲇ.bezierCurveTo(ᐃ * 80.99996948242188, ᐃ * 257.8506774902344, ᐃ * 81.99996948242188, ᐃ * 263.8506774902344, 77.99996948242188 * ᐃ, 271.8506774902344 * ᐃ);
			Ⲇ.bezierCurveTo(95.49996948242188 * ᐃ, 272.8506774902344 * ᐃ, ᐃ * 95.49996948242188, 272.8506774902344 * ᐃ, 112.99996948242188 * ᐃ, 273.8506774902344 * ᐃ);
			ΔΔ(Ⲇ, undefined, Δⵠ[4], 3 * ᐃ);
			Ⲇ.restore()
		} else Ⲇᐃ == 2 && (Ⲇ.save(), Ⲇ.translate(ᐃ * 130, 35 * ᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(170.99996948242188 * ᐃ, ᐃ * 133.85067749023438), Ⲇ.bezierCurveTo(195.99996948242188 * ᐃ, 129.85067749023438 * ᐃ, 196.99996948242188 * ᐃ, 111.85067749023438 * ᐃ, ᐃ * 200.99996948242188, 88.85067749023438 * ᐃ), ΔΔ(Ⲇ, undefined, Δⵠ[4], ᐃ * 3), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 169.99996948242188, ᐃ * 143.85067749023438), Ⲇ.bezierCurveTo(189.99996948242188 * ᐃ, 145.85067749023438 * ᐃ, ᐃ * 207.99996948242188, ᐃ * 126.85067749023438, ᐃ * 222.99996948242188, ᐃ * 100.85067749023438), ΔΔ(Ⲇ, ⲆⲆⵠⵠᐃ, Δⵠ[ᐃᐃⵠΔ], ᐃᐃᐃΔᐃ * ᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(170.99996948242188 * ᐃ, ᐃ * 157.85067749023438), Ⲇ.bezierCurveTo(193.99996948242188 * ᐃ, 160.85067749023438 * ᐃ, 210.99996948242188 * ᐃ, 151.85067749023438 * ᐃ, ᐃ * 232.99996948242188, 139.85067749023438 * ᐃ), ΔΔ(Ⲇ, ⲆΔΔⵠᐃ, Δⵠ[ᐃⲆⵠᐃⵠ], ᐃ * 3), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 169.99996948242188, 168.85067749023438 * ᐃ), Ⲇ.bezierCurveTo(192.99996948242188 * ᐃ, 175.85067749023438 * ᐃ, ᐃ * 203.99996948242188, ᐃ * 177.85067749023438, ᐃ * 245.99996948242188, 168.85067749023438 * ᐃ), ΔΔ(Ⲇ, ⵠⲆⲆⲆⲆ, Δⵠ[ᐃᐃΔΔᐃ], ᐃ * 3), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 167.99996948242188, 168.85067749023438 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 183.99996948242188, ᐃ * 189.85067749023438, 191.99996948242188 * ᐃ, ᐃ * 193.85067749023438, 220.99996948242188 * ᐃ, 196.85067749023438 * ᐃ), ΔΔ(Ⲇ, undefined, Δⵠ[4], 3 * ᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(176.99996948242188 * ᐃ, ᐃ * 117.85067749023438), Ⲇ.bezierCurveTo(ᐃ * 181.99996948242188, ᐃ * 120.85067749023438, ᐃ * 181.99996948242188, ᐃ * 120.85067749023438, 186.99996948242188 * ᐃ, 123.85067749023438 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 183.99996948242188, 137.85067749023438 * ᐃ, 185.99996948242188 * ᐃ, ᐃ * 136.85067749023438, ᐃ * 190.99996948242188, 136.85067749023438 * ᐃ), Ⲇ.bezierCurveTo(186.99996948242188 * ᐃ, ᐃ * 147.85067749023438, ᐃ * 189.99996948242188, 152.85067749023438 * ᐃ, ᐃ * 193.99996948242188, 155.85067749023438 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 187.99996948242188, 165.85067749023438 * ᐃ, 190.99996948242188 * ᐃ, 169.85067749023438 * ᐃ, ᐃ * 190.99996948242188, 172.85067749023438 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 186.99996948242188, 183.85067749023438 * ᐃ, 186.99996948242188 * ᐃ, 185.85067749023438 * ᐃ, 189.99996948242188 * ᐃ, 188.85067749023438 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 182.49996948242188, 195.35067749023438 * ᐃ, 182.49996948242188 * ᐃ, ᐃ * 195.35067749023438, ᐃ * 174.99996948242188, 201.85067749023438 * ᐃ), ΔΔ(Ⲇ, ⲆⲆⵠⵠᐃ, Δⵠ[ᐃᐃΔΔᐃ], 3 * ᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 176.99996948242188, 112.18402099609375 * ᐃ), Ⲇ.bezierCurveTo(183.99996948242188 * ᐃ, ᐃ * 119.18402099609375, 186.99996948242188 * ᐃ, 117.18402099609375 * ᐃ, 192.99996948242188 * ᐃ, ᐃ * 116.18402099609375), Ⲇ.bezierCurveTo(ᐃ * 191.99996948242188, ᐃ * 126.18402099609375, 193.99996948242188 * ᐃ, ᐃ * 130.18402099609375, 199.99996948242188 * ᐃ, 130.18402099609375 * ᐃ), Ⲇ.bezierCurveTo(194.99996948242188 * ᐃ, ᐃ * 145.18402099609375, ᐃ * 197.99996948242188, 147.18402099609375 * ᐃ, ᐃ * 201.99996948242188, 153.18402099609375 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 196.99996948242188, ᐃ * 164.18402099609375, 197.99996948242188 * ᐃ, 169.18402099609375 * ᐃ, ᐃ * 201.99996948242188, 174.18402099609375 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 194.99996948242188, 184.18402099609375 * ᐃ, 196.99996948242188 * ᐃ, ᐃ * 187.18402099609375, 200.99996948242188 * ᐃ, 193.18402099609375 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 185.99996948242188, ᐃ * 195.18402099609375, ᐃ * 181.99996948242188, 201.18402099609375 * ᐃ, ᐃ * 174.99996948242188, 210.18402099609375 * ᐃ), ΔΔ(Ⲇ, undefined, Δⵠ[ⲆΔᐃΔⵠ], ᐃⲆΔΔ * ᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 176.99996948242188, ᐃ * 101.29513549804688), Ⲇ.bezierCurveTo(ᐃ * 181.99996948242188, 108.29513549804688 * ᐃ, 189.99996948242188 * ᐃ, ᐃ * 110.29513549804688, 195.99996948242188 * ᐃ, 107.29513549804688 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 197.99996948242188, ᐃ * 121.29513549804688, ᐃ * 200.99996948242188, ᐃ * 122.29513549804688, 206.99996948242188 * ᐃ, ᐃ * 122.29513549804688), Ⲇ.bezierCurveTo(201.99996948242188 * ᐃ, ᐃ * 138.29513549804688, ᐃ * 204.99996948242188, ᐃ * 142.29513549804688, ᐃ * 211.99996948242188, ᐃ * 148.29513549804688), Ⲇ.bezierCurveTo(201.99996948242188 * ᐃ, ᐃ * 156.29513549804688, ᐃ * 205.99996948242188, ᐃ * 167.29513549804688, ᐃ * 213.99996948242188, 173.29513549804688 * ᐃ), Ⲇ.bezierCurveTo(204.99996948242188 * ᐃ, 181.29513549804688 * ᐃ, ᐃ * 204.99996948242188, 187.29513549804688 * ᐃ, 205.99996948242188 * ᐃ, 193.29513549804688 * ᐃ), Ⲇ.bezierCurveTo(190.99996948242188 * ᐃ, ᐃ * 198.29513549804688, ᐃ * 181.99996948242188, ᐃ * 205.29513549804688, 174.99996948242188 * ᐃ, ᐃ * 214.29513549804688), ΔΔ(Ⲇ, ⵠΔⲆⵠΔ, Δⵠ[ᐃᐃΔΔᐃ], ᐃ * ᐃΔⲆΔ), Ⲇ.restore());
		Ⲇ.translate(ΔⲆ.width / 2, ΔⲆ.height / ᐃⲆᐃᐃ);
		if (!Ⲇᐃ) {
			Ⲇ.globalAlpha = .5;
			ᐃΔⵠ(Ⲇ, -ⵠΔΔΔᐃ, -ⵠΔⲆⲆᐃ, ΔⲆⵠᐃᐃ, ΔⲆᐃΔΔ + ⲆⲆⵠᐃ, ⵠⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⲆ]);
			if (ΔᐃΔ) Ⲇ.rotate(Math.PI);
			Ⲇ.globalAlpha = ΔⵠΔ;
			ᐃΔⵠ(Ⲇ, -ⵠΔΔΔᐃ, -ⵠΔⲆⲆᐃ, ΔⲆⵠᐃᐃ, ΔⲆᐃΔΔ, ⵠⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⲆⵠΔⵠ], ⵠΔΔ);
			Ⲇ.globalAlpha = ΔᐃⲆⲆ;
			ᐃΔⵠ(Ⲇ, -ⵠΔΔΔᐃ + 35 * ᐃ, -ⵠΔⲆⲆᐃ + ⲆᐃⲆⲆⲆⲆⲆ * ᐃ, ΔⲆⵠᐃᐃ - 50 * ᐃ, ΔⲆᐃΔΔ - 50 * ᐃ, ⵠⵠⵠⵠ - ᐃ * 10);
			ΔΔ(Ⲇ, Δⵠ[3])
		}
		if (3 == Ⲇᐃ) {
			Ⲇ.translate(-ΔⲆ.width / ⵠⵠⵠᐃ, -ΔⲆ.height / ΔᐃⵠΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 121, 190 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 129, 186 * ᐃ, 137 * ᐃ, 183 * ᐃ, ᐃ * 135, 163 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 131, 135 * ᐃ, ᐃ * 153, 127 * ᐃ, ᐃ * 177, ᐃ * 124);
			Ⲇ.bezierCurveTo(198 * ᐃ, ᐃ * 120, 208 * ᐃ, 122 * ᐃ, ᐃ * 226, ᐃ * 128);
			Ⲇ.bezierCurveTo(261 * ᐃ, ᐃ * 112, 271 * ᐃ, 126 * ᐃ, 287 * ᐃ, 147 * ᐃ);
			Ⲇ.bezierCurveTo(310 * ᐃ, ᐃ * 163, 304 * ᐃ, ᐃ * 183, 283 * ᐃ, 196 * ᐃ);
			Ⲇ.bezierCurveTo(296 * ᐃ, ᐃ * 249, 278 * ᐃ, ᐃ * 262, 253 * ᐃ, ᐃ * 263);
			Ⲇ.bezierCurveTo(210 * ᐃ, 264 * ᐃ, ᐃ * 188, 252 * ᐃ, ᐃ * 177, ᐃ * 234);
			Ⲇ.bezierCurveTo(133 * ᐃ, ᐃ * 242, ᐃ * 123, 241 * ᐃ, 115 * ᐃ, 225 * ᐃ);
			Ⲇ.bezierCurveTo(109 * ᐃ, 206 * ᐃ, 115 * ᐃ, 193 * ᐃ, 121 * ᐃ, 190 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ᐃⲆⲆΔΔ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(219 * ᐃ, 144 * ᐃ);
			Ⲇ.bezierCurveTo(251 * ᐃ, 121 * ᐃ, 277 * ᐃ, ᐃ * 136, ᐃ * 276, ᐃ * 159);
			Ⲇ.bezierCurveTo(276 * ᐃ, ᐃ * 176, 273 * ᐃ, 191 * ᐃ, ᐃ * 242, ᐃ * 193);
			Ⲇ.bezierCurveTo(226 * ᐃ, ᐃ * 228, 155 * ᐃ, ᐃ * 219, 150 * ᐃ, 183 * ᐃ);
			Ⲇ.bezierCurveTo(142 * ᐃ, ᐃ * 144, ᐃ * 174, ᐃ * 127, ᐃ * 219, 144 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠᐃ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 123, ᐃ * 214);
			Ⲇ.bezierCurveTo(ᐃ * 119, 198 * ᐃ, 129 * ᐃ, ᐃ * 189, ᐃ * 146, 194 * ᐃ);
			Ⲇ.bezierCurveTo(158 * ᐃ, 201 * ᐃ, ᐃ * 165, ᐃ * 218, 147 * ᐃ, 226 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 135, 230 * ᐃ, ᐃ * 125, ᐃ * 222, 123 * ᐃ, 214 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⲆᐃⲆΔ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(257 * ᐃ, ᐃ * 199);
			Ⲇ.bezierCurveTo(264 * ᐃ, 199 * ᐃ, 275 * ᐃ, 213 * ᐃ, ᐃ * 261, ᐃ * 220);
			Ⲇ.bezierCurveTo(ᐃ * 246, ᐃ * 225, ᐃ * 235, 200 * ᐃ, ᐃ * 257, 199 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[5]);
			Ⲇ.translate(-ᐃΔΔⲆⵠ * ᐃ, ᐃ * 55);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 186, ᐃ * 123);
			Ⲇ.bezierCurveTo(198 * ᐃ, ᐃ * 115, 219 * ᐃ, ᐃ * 110, ᐃ * 219, 123 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 216, 135 * ᐃ, 171 * ᐃ, 143 * ᐃ, 186 * ᐃ, ᐃ * 123);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⲆⲆᐃᐃ]);
			Ⲇ.translate(5 * ᐃ, -55 * ᐃ);
			Ⲇ.translate(ᐃ * -ᐃᐃᐃΔⵠ, ᐃ * 15);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 171, ᐃ * 241);
			Ⲇ.bezierCurveTo(ᐃ * 189, 234 * ᐃ, 200 * ᐃ, ᐃ * 248, ᐃ * 189, ᐃ * 254);
			Ⲇ.bezierCurveTo(179 * ᐃ, 260 * ᐃ, ᐃ * 158, 246 * ᐃ, ᐃ * 171, ᐃ * 241);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔⵠΔᐃ])
		} else if (ᐃᐃⵠΔ == Ⲇᐃ) {
			Ⲇ.translate(-ΔⲆ.width / 2, -ΔⲆ.height / 2);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 30, ᐃ * 167);
			Ⲇ.bezierCurveTo(ᐃ * 47, ᐃ * 144, 64 * ᐃ, 140 * ᐃ, ᐃ * 80, ᐃ * 147);
			Ⲇ.bezierCurveTo(ᐃ * 95, ᐃ * 154, ᐃ * 95, 159 * ᐃ, ᐃΔΔⲆΔⵠΔ * ᐃ, ᐃ * 179);
			Ⲇ.bezierCurveTo(105 * ᐃ, ᐃ * 202, ᐃ * 95, 218 * ᐃ, 69 * ᐃ, ᐃ * 218);
			Ⲇ.bezierCurveTo(ᐃ * 48, 236 * ᐃ, ᐃ * 26, ᐃ * 223, 28 * ᐃ, ᐃ * 213);
			Ⲇ.bezierCurveTo(ᐃ * 28, ᐃ * 205, 29 * ᐃ, 199 * ᐃ, 32 * ᐃ, ᐃ * 195);
			Ⲇ.bezierCurveTo(21 * ᐃ, 183 * ᐃ, 27 * ᐃ, ᐃ * 173, 30 * ᐃ, 167 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔⲆ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(26 * ᐃ, 145 * ᐃ);
			Ⲇ.bezierCurveTo(32 * ᐃ, 138 * ᐃ, 37 * ᐃ, ᐃ * 137, ᐃ * 40, 139 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 43, ᐃ * 140, ᐃ * 41, 150 * ᐃ, 31 * ᐃ, ᐃ * 159);
			Ⲇ.bezierCurveTo(ᐃ * 23, 166 * ᐃ, 17 * ᐃ, 158 * ᐃ, ᐃ * 26, 145 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[4]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * ⵠΔᐃⲆⲆ, 193 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 21, ᐃ * 187, 30 * ᐃ, ᐃ * 190, ⲆⵠⲆΔⲆ * ᐃ, 202 * ᐃ);
			Ⲇ.bezierCurveTo(ⲆⵠⵠᐃΔ * ᐃ, 208 * ᐃ, ᐃΔⵠᐃⲆᐃΔ * ᐃ, ᐃ * 202, ᐃⵠⵠⵠΔ * ᐃ, 193 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ᐃᐃⵠΔ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 121, 190 * ᐃ);
			Ⲇ.bezierCurveTo(129 * ᐃ, 186 * ᐃ, 137 * ᐃ, 183 * ᐃ, ᐃ * 135, 163 * ᐃ);
			Ⲇ.bezierCurveTo(131 * ᐃ, 135 * ᐃ, ᐃ * 153, 127 * ᐃ, ᐃ * 177, ᐃ * 124);
			Ⲇ.bezierCurveTo(198 * ᐃ, ᐃ * 120, 208 * ᐃ, ᐃ * 122, ᐃ * 226, ᐃ * 128);
			Ⲇ.bezierCurveTo(ᐃ * 261, ᐃ * 112, 271 * ᐃ, ᐃ * 126, ᐃ * 287, ᐃ * 147);
			Ⲇ.bezierCurveTo(ᐃ * 310, 163 * ᐃ, ᐃ * 304, ᐃ * 183, ᐃ * 283, ᐃ * 196);
			Ⲇ.bezierCurveTo(ᐃ * 296, ᐃ * 249, 278 * ᐃ, ᐃ * 262, 253 * ᐃ, 263 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 210, ᐃ * 264, ᐃ * 188, ᐃ * 252, 177 * ᐃ, 234 * ᐃ);
			Ⲇ.bezierCurveTo(133 * ᐃ, 242 * ᐃ, 123 * ᐃ, ᐃ * 241, 115 * ᐃ, ᐃ * 225);
			Ⲇ.bezierCurveTo(109 * ᐃ, ᐃ * 206, ᐃ * 115, ᐃ * 193, 121 * ᐃ, 190 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[4]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 335, ᐃ * 196);
			Ⲇ.bezierCurveTo(312 * ᐃ, ᐃ * 208, 300 * ᐃ, 185 * ᐃ, 309 * ᐃ, 167 * ᐃ);
			Ⲇ.bezierCurveTo(314 * ᐃ, ᐃ * 141, 339 * ᐃ, 127 * ᐃ, ᐃ * 359, ᐃ * 144);
			Ⲇ.bezierCurveTo(363 * ᐃ, 148 * ᐃ, 364 * ᐃ, 150 * ᐃ, ᐃ * 364, ᐃ * 150);
			Ⲇ.bezierCurveTo(392 * ᐃ, ᐃ * 143, ᐃ * 396, ᐃ * 183, ᐃ * 378, ᐃ * 204);
			Ⲇ.bezierCurveTo(367 * ᐃ, ᐃ * 215, 339 * ᐃ, ᐃ * 208, ᐃ * 335, 196 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[4]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(349 * ᐃ, 212 * ᐃ);
			Ⲇ.bezierCurveTo(339 * ᐃ, 216 * ᐃ, ᐃ * 334, ᐃ * 208, 341 * ᐃ, ᐃ * 203);
			Ⲇ.bezierCurveTo(ᐃ * 353, ᐃ * 198, 361 * ᐃ, 205 * ᐃ, 349 * ᐃ, 212 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃᐃΔ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(46 * ᐃ, 165 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 55, 148 * ᐃ, 85 * ᐃ, 157 * ᐃ, 83 * ᐃ, ᐃ * 175);
			Ⲇ.bezierCurveTo(99 * ᐃ, 185 * ᐃ, ᐃ * 89, ᐃ * 212, ᐃ * 66, ᐃ * 204);
			Ⲇ.bezierCurveTo(ᐃ * 55, ᐃ * 212, ᐃ * 43, 212 * ᐃ, 41 * ᐃ, ᐃ * 202);
			Ⲇ.bezierCurveTo(ᐃ * 39, 194 * ᐃ, 42 * ᐃ, 187 * ᐃ, 49 * ᐃ, 185 * ᐃ);
			Ⲇ.bezierCurveTo(44 * ᐃ, ᐃ * 175, 45 * ᐃ, 172 * ᐃ, 46 * ᐃ, 165 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[4]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 219, 144 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 251, 121 * ᐃ, ᐃ * 277, ᐃ * 136, ᐃ * 276, ᐃ * 159);
			Ⲇ.bezierCurveTo(ᐃ * 276, 176 * ᐃ, 273 * ᐃ, ᐃ * 191, 242 * ᐃ, ᐃ * 193);
			Ⲇ.bezierCurveTo(226 * ᐃ, 228 * ᐃ, 155 * ᐃ, 219 * ᐃ, ᐃ * 150, 183 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 142, ᐃ * 144, ᐃ * 174, 127 * ᐃ, ᐃ * 219, 144 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ᐃᐃⵠᐃΔ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(123 * ᐃ, 214 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 119, 198 * ᐃ, ᐃ * 129, 189 * ᐃ, 146 * ᐃ, ᐃ * 194);
			Ⲇ.bezierCurveTo(ᐃ * 158, 201 * ᐃ, ᐃ * 165, 218 * ᐃ, 147 * ᐃ, ᐃ * 226);
			Ⲇ.bezierCurveTo(135 * ᐃ, 230 * ᐃ, ᐃ * 125, ᐃ * 222, ᐃ * 123, ᐃ * 214);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[5]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 257, ᐃ * 199);
			Ⲇ.bezierCurveTo(ᐃ * 264, ᐃ * 199, 275 * ᐃ, 213 * ᐃ, ᐃ * 261, 220 * ᐃ);
			Ⲇ.bezierCurveTo(246 * ᐃ, ᐃ * 225, ᐃ * 235, 200 * ᐃ, 257 * ᐃ, ᐃ * 199);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ᐃⵠᐃⲆ]);
			Ⲇ.translate(-ᐃᐃⵠᐃΔ * ᐃ, ᐃ * 55);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(186 * ᐃ, ᐃ * 123);
			Ⲇ.bezierCurveTo(ᐃ * 198, 115 * ᐃ, ᐃ * 219, ᐃ * 110, ᐃ * 219, 123 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 216, ᐃ * 135, ᐃ * 171, 143 * ᐃ, 186 * ᐃ, ᐃ * 123);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ᐃⵠᐃⲆ]);
			Ⲇ.translate(5 * ᐃ, -55 * ᐃ);
			Ⲇ.translate(ᐃ * -5, ᐃ * ΔΔⵠⲆᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 171, 241 * ᐃ);
			Ⲇ.bezierCurveTo(189 * ᐃ, 234 * ᐃ, 200 * ᐃ, 248 * ᐃ, 189 * ᐃ, ᐃ * 254);
			Ⲇ.bezierCurveTo(179 * ᐃ, ᐃ * 260, 158 * ᐃ, ᐃ * 246, ᐃ * 171, 241 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⲆᐃⲆΔ]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 367, 164 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 380, ᐃ * 160, ᐃ * 391, ᐃ * 185, ᐃ * 371, ᐃ * 189);
			Ⲇ.bezierCurveTo(362 * ᐃ, ᐃ * 192, ᐃ * 354, ᐃ * 191, ᐃ * 350, 185 * ᐃ);
			Ⲇ.bezierCurveTo(326 * ᐃ, ᐃ * 205, ᐃ * 314, 182 * ᐃ, ᐃ * 316, ᐃ * 171);
			Ⲇ.bezierCurveTo(ᐃ * 317, 150 * ᐃ, ᐃ * 332, 143 * ᐃ, 347 * ᐃ, ᐃ * 147);
			Ⲇ.bezierCurveTo(ᐃ * 361, 151 * ᐃ, ᐃ * 366, 158 * ᐃ, ᐃ * 367, 164 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔⵠⵠⲆ])
		}
		return ΔⲆ
	}

	function ⲆΔΔΔⲆΔⲆ(ᐃ, Δⵠ, ΔᐃΔ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 450 * ᐃ;
		var ⲆΔⲆ = ᐃ * 145;
		var w2 = ⲆⲆᐃ / 2;
		var ⲆⲆⲆΔΔ = ⲆΔⲆ / 2;
		var ⵠⵠⵠⵠ = ᐃ * ⵠⲆⲆⵠΔ;
		var ⲆⲆⵠᐃ = ᐃᐃⲆΔⵠ * ᐃ;
		var ΔⲆⵠᐃᐃ = ᐃ * 300;
		var ΔⲆᐃΔΔ = ᐃ * 30;
		var ΔⲆΔ = ᐃ * 80;
		var ⵠΔΔΔᐃ = ΔⲆⵠᐃᐃ / 2;
		var ⵠΔⲆⲆᐃ = ΔⲆᐃΔΔ / 2;
		var ⵠΔΔ = ⲆΔᐃΔⵠ;
		if (ΔᐃΔ) {
			var ⲆⲆᐃ = 145 * ᐃ;
			var ⲆΔⲆ = ᐃ * 450;
			ΔⲆ.width = ⲆⲆᐃ;
			ΔⲆ.height = ⲆΔⲆ;
			Ⲇ.rotate(Math.PI / ᐃⲆᐃᐃ);
			Ⲇ.save();
			Ⲇ.globalAlpha = .5;
			ᐃΔⵠ(Ⲇ, ᐃ * ᐃΔⵠᐃⵠ, -110 * ᐃ, ΔⲆⵠᐃᐃ, ΔⲆᐃΔΔ, ⵠⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.translate(ᐃ * 178, -98 * ᐃ);
			ᐃΔⵠ(Ⲇ, -ⵠΔΔΔᐃ, -ⵠΔⲆⲆᐃ - ᐃ * 6, 100 * ᐃ, 100 * ᐃ, ⵠⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.translate(-50 * ᐃ, ᐃ * ᐃᐃΔᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * 220, ᐃ * -ⵠᐃᐃⲆᐃΔⲆ, 90 * ᐃ, ᐃ * 90, ⵠⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.restore();
			Ⲇ.save();
			Ⲇ.globalAlpha = ΔᐃⵠⲆ;
			Ⲇ.translate(250 * ᐃ, -63 * ᐃ);
			ᐃΔⵠ(Ⲇ, -ⵠΔΔΔᐃ - ᐃ * 20, -ⵠΔⲆⲆᐃ, ΔⲆⵠᐃᐃ, ΔⲆᐃΔΔ, ⵠⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔ], Δⵠ[2], ⵠΔΔ);
			Ⲇ.translate(ᐃ * -70, -40 * ᐃ);
			ᐃΔⵠ(Ⲇ, -ⵠΔΔΔᐃ - 20 * ᐃ, -ⵠΔⲆⲆᐃ, 100 * ᐃ, 100 * ᐃ, ⵠⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ⵠΔΔ);
			Ⲇ.translate(-70 * ᐃ, ᐃⲆⵠⲆΔΔΔ * ᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * 220, ᐃ * -22, 90 * ᐃ, 90 * ᐃ, ⵠⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠᐃ], Δⵠ[4], ⵠΔΔ);
			ᐃΔⵠ(Ⲇ, 230 * ᐃ, -12 * ᐃ, 55 * ᐃ, ᐃ * 55, ⵠⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔᐃ]);
			Ⲇ.translate(ᐃ * -70, ⵠⵠⲆⵠ);
			ᐃΔⵠ(Ⲇ, ᐃ * -ⵠᐃᐃⲆᐃΔⲆ, ᐃ * -ΔΔⲆⲆ, ᐃ * 60, 60 * ᐃ, ⵠⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[5]);
			Ⲇ.restore()
		} else {
			ΔⲆ.width = ⲆⲆᐃ;
			ΔⲆ.height = ⲆΔⲆ;
			Ⲇ.save();
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(w2, ⲆⲆⲆΔΔ + 10 * ᐃ);
			ᐃΔⵠ(Ⲇ, -ⵠΔΔΔᐃ, -ⵠΔⲆⲆᐃ, ΔⲆⵠᐃᐃ, ΔⲆᐃΔΔ, ⵠⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[Δⵠⵠⵠ]);
			Ⲇ.translate(-65 * ᐃ, ᐃ * -25);
			ᐃΔⵠ(Ⲇ, -ⵠΔΔΔᐃ, -ⵠΔⲆⲆᐃ - ᐃ * 6, ᐃ * 100, ⲆⵠⲆⲆⵠ * ᐃ, 15 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.translate(ᐃ * -35, ᐃ * -5);
			ᐃΔⵠ(Ⲇ, 220 * ᐃ, ᐃ * -ⵠⵠⲆᐃᐃⵠᐃ, ᐃ * 90, 90 * ᐃ, 15 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.restore();
			Ⲇ.save();
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(240 * ᐃ, ᐃ * 70);
			ᐃΔⵠ(Ⲇ, -ⵠΔΔΔᐃ, -ⵠΔⲆⲆᐃ, ΔⲆⵠᐃᐃ, ΔⲆᐃΔΔ, ⵠⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[ⲆᐃΔ], Δⵠ[2], ⵠΔΔ);
			Ⲇ.translate(ᐃ * -60, -40 * ᐃ);
			ᐃΔⵠ(Ⲇ, -ⵠΔΔΔᐃ - ᐃ * ᐃⲆᐃⵠⲆ, -ⵠΔⲆⲆᐃ, ᐃ * 100, ⲆΔⵠⲆⵠⵠΔ * ᐃ, ᐃ * ⲆⵠᐃⵠⵠⲆᐃ);
			ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃⲆ], Δⵠ[4], ⵠΔΔ);
			Ⲇ.translate(ᐃ * -55, ᐃ * 10);
			ᐃΔⵠ(Ⲇ, ᐃ * 220, -22 * ᐃ, ᐃ * 90, ᐃ * 90, ᐃ * ᐃⲆΔᐃΔⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ⵠΔΔ);
			ᐃΔⵠ(Ⲇ, ᐃ * 240, -ᐃⵠⲆⵠᐃ * ᐃ, ᐃ * 55, ᐃ * 55, ᐃ * 12);
			ΔΔ(Ⲇ, Δⵠ[5]);
			Ⲇ.translate(ᐃ * 45, ⲆⲆⵠⲆ * ᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * -145, ᐃ * -2, 60 * ᐃ, ᐃ * 60, 12 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ⵠⵠᐃᐃ]);
			Ⲇ.restore()
		}
		return ΔⲆ
	}

	function ᐃⵠᐃⵠⲆⵠⵠᐃΔ(ᐃ, Δⵠ, ΔᐃΔ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		Ⲇ.rotate(Math.PI / ⲆᐃⵠΔ)
	}

	function ΔΔΔⵠⲆᐃⲆ(ᐃⲆⵠⲆⲆΔⵠ, ΔⵠΔΔᐃᐃⲆ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = Math.max(ΔⵠΔΔᐃᐃⲆ.width, ᐃⲆⵠⲆⲆΔⵠ.width);
		var ⲆΔⲆ = Math.max(ΔⵠΔΔᐃᐃⲆ.height, ᐃⲆⵠⲆⲆΔⵠ.height);
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.drawImage(ᐃⲆⵠⲆⲆΔⵠ, (ⲆⲆᐃ - ᐃⲆⵠⲆⲆΔⵠ.width) / ΔΔⲆⲆ, (ⲆΔⲆ - ᐃⲆⵠⲆⲆΔⵠ.height) / 2);
		Ⲇ.drawImage(ΔⵠΔΔᐃᐃⲆ, (ⲆⲆᐃ - ΔⵠΔΔᐃᐃⲆ.width) / ᐃᐃᐃⵠ, (ⲆΔⲆ - ΔⵠΔΔᐃᐃⲆ.height) / 2);
		return ΔⲆ
	}

	function ΔⵠⲆΔⵠⲆⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 170 * ᐃ;
		ΔⲆ.height = ᐃ * 469;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(20 * ᐃ, ᐃ * 20);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 88, ᐃ * 30);
		Ⲇ.bezierCurveTo(ᐃ * 96, 49.5 * ᐃ, ᐃ * 96, ᐃ * 49.5, ᐃ * 104, 69 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 105.5, 41.5 * ᐃ, ᐃ * 105.5, ᐃ * 41.5, ᐃ * 107, ⲆΔᐃⵠⵠΔᐃ * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 114, 9.5 * ᐃ, ᐃ * 114, ᐃ * 9.5, 121 * ᐃ, ᐃ * ΔⲆⲆⵠ);
		Ⲇ.bezierCurveTo(135.5 * ᐃ, ᐃ * 27.5, 135.5 * ᐃ, 27.5 * ᐃ, ᐃ * 150, ᐃ * 50);
		Ⲇ.bezierCurveTo(110.5 * ᐃ, 286 * ᐃ, ᐃ * 110.5, ᐃ * 286, ᐃ * 103, ᐃ * 331);
		Ⲇ.bezierCurveTo(69.5 * ᐃ, 325 * ᐃ, ᐃ * 69.5, 325 * ᐃ, ᐃ * 36, ᐃ * 319);
		Ⲇ.bezierCurveTo(56.5 * ᐃ, ᐃ * 180, ᐃ * 56.5, 180 * ᐃ, ᐃ * 77, 41 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(118 * ᐃ, ᐃ * 31);
		Ⲇ.bezierCurveTo(ᐃ * 125, ᐃ * 43, ᐃ * 125, ᐃ * 43, ᐃ * 132, 55 * ᐃ);
		Ⲇ.bezierCurveTo(109.5 * ᐃ, 185.5 * ᐃ, ᐃ * 109.5, ᐃ * 185.5, ᐃ * 87, ᐃ * 316);
		Ⲇ.bezierCurveTo(ᐃ * 72, 313.5 * ᐃ, ᐃ * 72, ᐃ * 313.5, 57 * ᐃ, ᐃ * 311);
		Ⲇ.bezierCurveTo(ᐃ * 76.5, 181 * ᐃ, 76.5 * ᐃ, 181 * ᐃ, 96 * ᐃ, 51 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(56 * ᐃ, ᐃ * 328);
		Ⲇ.bezierCurveTo(47 * ᐃ, 385.5 * ᐃ, 47 * ᐃ, 385.5 * ᐃ, 38 * ᐃ, 443 * ᐃ);
		Ⲇ.bezierCurveTo(52 * ᐃ, 446 * ᐃ, 52 * ᐃ, 446 * ᐃ, ᐃ * 66, 449 * ᐃ);
		Ⲇ.bezierCurveTo(76.5 * ᐃ, 388.5 * ᐃ, ᐃ * 76.5, 388.5 * ᐃ, 87 * ᐃ, ᐃ * 328);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 74, 302 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 104, 316.5 * ᐃ, 104 * ᐃ, ᐃ * 316.5, 134 * ᐃ, ᐃ * 331);
		Ⲇ.bezierCurveTo(133 * ᐃ, 341 * ᐃ, 133 * ᐃ, ᐃ * 341, ᐃ * 132, 351 * ᐃ);
		Ⲇ.bezierCurveTo(69.5 * ᐃ, ᐃ * 342, 69.5 * ᐃ, ᐃ * 342, 7 * ᐃ, 333 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃΔⲆᐃⵠΔⵠ * ᐃ, 323 * ᐃ, ⲆΔⲆᐃᐃ * ᐃ, ᐃ * 323, ᐃ * ⲆᐃΔⵠΔΔᐃ, 313 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.save();
		Ⲇ.translate(51.5 * ᐃ, 440.5 * ᐃ);
		Ⲇ.rotate(.2);
		ᐃΔⵠ(Ⲇ, ᐃ * -20.5, ᐃ * -18.5, 41 * ᐃ, ᐃ * 37, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 73, 316 * ᐃ);
		Ⲇ.bezierCurveTo(90 * ᐃ, ᐃ * 324.5, 90 * ᐃ, ᐃ * 324.5, ᐃ * 107, ᐃ * 333);
		Ⲇ.bezierCurveTo(70 * ᐃ, ᐃ * 327.5, 70 * ᐃ, ᐃ * 327.5, ᐃ * 33, ᐃ * 322);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(-20 * ᐃ, ᐃ * -20);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 88, 30 * ᐃ);
		Ⲇ.bezierCurveTo(96 * ᐃ, 49.5 * ᐃ, ᐃ * 96, 49.5 * ᐃ, ᐃ * 104, 69 * ᐃ);
		Ⲇ.bezierCurveTo(105.5 * ᐃ, 41.5 * ᐃ, ᐃ * 105.5, ᐃ * 41.5, 107 * ᐃ, ΔⲆΔⲆᐃ * ᐃ);
		Ⲇ.bezierCurveTo(114 * ᐃ, 9.5 * ᐃ, ᐃ * 114, 9.5 * ᐃ, ᐃ * 121, ᐃ * 5);
		Ⲇ.bezierCurveTo(135.5 * ᐃ, 27.5 * ᐃ, ᐃ * 135.5, ᐃ * 27.5, ᐃ * 150, 50 * ᐃ);
		Ⲇ.bezierCurveTo(110.5 * ᐃ, 286 * ᐃ, 110.5 * ᐃ, ᐃ * 286, 103 * ᐃ, 331 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 69.5, 325 * ᐃ, ᐃ * 69.5, ᐃ * 325, 36 * ᐃ, 319 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 56.5, ᐃ * 180, ᐃ * 56.5, 180 * ᐃ, ᐃ * 77, 41 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[ΔΔᐃΔⵠ], ΔΔⵠΔⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 118, ᐃ * 31);
		Ⲇ.bezierCurveTo(ᐃ * 125, 43 * ᐃ, ᐃ * 125, ᐃ * 43, ᐃ * 132, 55 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 109.5, ᐃ * 185.5, ᐃ * 109.5, 185.5 * ᐃ, 87 * ᐃ, 316 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 72, 313.5 * ᐃ, 72 * ᐃ, ᐃ * 313.5, 57 * ᐃ, 311 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 76.5, 181 * ᐃ, ᐃ * 76.5, 181 * ᐃ, ᐃ * 96, ᐃ * 51);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 88, 30 * ᐃ);
		Ⲇ.bezierCurveTo(96 * ᐃ, ᐃ * 49.5, ᐃ * 96, ᐃ * 49.5, ᐃ * 104, 69 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 105.5, 41.5 * ᐃ, ᐃ * 105.5, ᐃ * 41.5, ᐃ * 107, 14 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 114, ᐃ * 9.5, ᐃ * 114, 9.5 * ᐃ, 121 * ᐃ, ᐃ * 5);
		Ⲇ.bezierCurveTo(135.5 * ᐃ, ᐃ * 27.5, ᐃ * 135.5, ᐃ * 27.5, ᐃ * 150, ᐃ * 50);
		Ⲇ.bezierCurveTo(ᐃ * 110.5, ᐃ * 286, ᐃ * 110.5, ᐃ * 286, 103 * ᐃ, 331 * ᐃ);
		Ⲇ.bezierCurveTo(69.5 * ᐃ, 325 * ᐃ, ᐃ * 69.5, 325 * ᐃ, 36 * ᐃ, 319 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 56.5, ᐃ * 180, 56.5 * ᐃ, ᐃ * 180, 77 * ᐃ, 41 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], ᐃ * 7);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 56, ᐃ * 328);
		Ⲇ.bezierCurveTo(ᐃ * 47, ᐃ * 385.5, ᐃ * 47, ᐃ * 385.5, ᐃ * 38, ᐃ * 443);
		Ⲇ.bezierCurveTo(52 * ᐃ, ᐃ * 446, ᐃ * 52, ᐃ * 446, 66 * ᐃ, ᐃ * 449);
		Ⲇ.bezierCurveTo(ᐃ * 76.5, 388.5 * ᐃ, 76.5 * ᐃ, 388.5 * ᐃ, ᐃ * 87, 328 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆⵠ], Δⵠ[ⲆⵠΔΔ], ᐃ * ⲆⲆΔΔᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(74 * ᐃ, 302 * ᐃ);
		Ⲇ.bezierCurveTo(104 * ᐃ, 316.5 * ᐃ, ᐃ * 104, ᐃ * 316.5, ᐃ * 134, ᐃ * 331);
		Ⲇ.bezierCurveTo(ᐃ * 133, ᐃ * 341, 133 * ᐃ, ᐃ * 341, 132 * ᐃ, 351 * ᐃ);
		Ⲇ.bezierCurveTo(69.5 * ᐃ, 342 * ᐃ, ᐃ * 69.5, ᐃ * 342, 7 * ᐃ, ᐃ * 333);
		Ⲇ.bezierCurveTo(ᐃ * 8, 323 * ᐃ, ΔⵠⵠΔⵠ * ᐃ, ᐃ * 323, 9 * ᐃ, ᐃ * 313);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆⲆΔΔ], Δⵠ[ᐃᐃⵠᐃΔ], 7 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(51.5 * ᐃ, 440.5 * ᐃ);
		Ⲇ.rotate(.2);
		ᐃΔⵠ(Ⲇ, ᐃ * -20.5, -18.5 * ᐃ, ᐃ * 41, ᐃ * 37, ᐃ * ⲆΔⵠⵠΔ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], 7 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 73, ᐃ * 316);
		Ⲇ.bezierCurveTo(90 * ᐃ, ᐃ * 324.5, 90 * ᐃ, ᐃ * 324.5, ᐃ * 107, 333 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 70, 327.5 * ᐃ, ᐃ * 70, 327.5 * ᐃ, 33 * ᐃ, ᐃ * 322);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠΔⲆⵠ]);
		return ΔⲆ
	}

	function ⵠⵠΔᐃⲆΔᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 220 * ᐃ;
		var ⲆΔⲆ = 220 * ᐃ;
		var ΔⲆΔ = ᐃⲆⵠᐃⲆᐃⲆ * ᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(ⲆⲆᐃ / ΔΔΔⵠ, ⲆΔⲆ / ΔΔⲆᐃ);
		Ⲇ.globalAlpha = .5;
		ᐃΔΔ(Ⲇ, 0, 0, ΔⲆΔ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		return ΔⲆ
	}
	const ΔⲆᐃΔ = ᐃⲆᐃᐃ;

	function ᐃᐃΔⵠⵠⲆⲆ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 283 * ᐃ;
		ΔⲆ.height = 224 * ᐃ;
		Ⲇ.translate(Δⵠⵠⵠ, ΔΔⵠⲆᐃ * ᐃ);
		Ⲇ.globalAlpha = .5;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 93, 55 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 127, ᐃ * 27, 195 * ᐃ, ᐃ * 42, 213 * ᐃ, 78 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 254, 134 * ᐃ, ᐃ * 226, ᐃ * 198, 153 * ᐃ, ᐃ * 197);
		Ⲇ.bezierCurveTo(ᐃ * 59, 204 * ᐃ, 56 * ᐃ, 158 * ᐃ, 51 * ᐃ, ᐃ * 115);
		Ⲇ.bezierCurveTo(ᐃ * 50, ᐃ * 93, 81 * ᐃ, ᐃ * 62, ᐃ * 90, ᐃ * 57);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ⲆᐃⲆⵠⲆ * ᐃ, 33 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 85, ᐃ * 62, ᐃ * 102, ᐃ * 66, 110 * ᐃ, ᐃ * 83);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 181, ᐃ * 32);
		Ⲇ.bezierCurveTo(196 * ᐃ, ᐃ * 62, ᐃ * 181, 68 * ᐃ, 178 * ᐃ, 69 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(225 * ᐃ, 52 * ᐃ);
		Ⲇ.bezierCurveTo(228 * ᐃ, 78 * ᐃ, 207 * ᐃ, ᐃ * 77, 192 * ᐃ, ᐃ * 88);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 34, 134 * ᐃ);
		Ⲇ.bezierCurveTo(46 * ᐃ, ᐃ * 111, 57 * ᐃ, 111 * ᐃ, 79 * ᐃ, ᐃ * 109);
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(249 * ᐃ, ᐃ * 135);
		Ⲇ.bezierCurveTo(ᐃ * 233, ᐃ * 107, 212 * ᐃ, ᐃ * 112, 202 * ᐃ, 115 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 56, ᐃ * 50);
		Ⲇ.bezierCurveTo(56 * ᐃ, 82 * ᐃ, 73 * ᐃ, ᐃ * 82, ᐃ * 93, 89 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠⵠ]);
		Ⲇ.translate(ⵠⵠⵠΔ, -ⵠⲆⵠⲆᐃ * ᐃ);
		Ⲇ.globalAlpha = ΔⵠⲆⲆ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(100 * ᐃ, 33 * ᐃ);
		Ⲇ.bezierCurveTo(85 * ᐃ, 62 * ᐃ, ᐃ * 102, 66 * ᐃ, ᐃ * 110, ᐃ * 83);
		ΔΔ(Ⲇ, ᐃⵠᐃᐃⲆ, Δⵠ[2], 40 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 181, ᐃ * 32);
		Ⲇ.bezierCurveTo(ᐃ * 196, ᐃ * 62, ᐃ * 181, ᐃ * 68, ᐃ * 178, ᐃ * 69);
		ΔΔ(Ⲇ, ⲆΔΔⵠᐃ, Δⵠ[ΔᐃⵠΔ], ᐃ * 40);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 225, ᐃ * 52);
		Ⲇ.bezierCurveTo(228 * ᐃ, 78 * ᐃ, 207 * ᐃ, ᐃ * 77, 192 * ᐃ, ᐃ * 88);
		ΔΔ(Ⲇ, undefined, Δⵠ[ⵠⵠⵠᐃ], 40 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(34 * ᐃ, 134 * ᐃ);
		Ⲇ.bezierCurveTo(46 * ᐃ, ᐃ * 111, 57 * ᐃ, 111 * ᐃ, 79 * ᐃ, ᐃ * 109);
		ΔΔ(Ⲇ, ⵠⲆⲆⲆⲆ, Δⵠ[ΔΔΔⵠ], ᐃ * 40);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 249, ᐃ * 135);
		Ⲇ.bezierCurveTo(ᐃ * 233, ᐃ * 107, ᐃ * 212, 112 * ᐃ, ᐃ * 202, 115 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔᐃΔᐃ], 40 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 56, 50 * ᐃ);
		Ⲇ.bezierCurveTo(56 * ᐃ, 82 * ᐃ, ᐃ * 73, ᐃ * 82, ᐃ * 93, ᐃ * 89);
		ΔΔ(Ⲇ, undefined, Δⵠ[2], 40 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 93, ᐃ * 55);
		Ⲇ.bezierCurveTo(ᐃ * 127, 27 * ᐃ, ᐃ * 195, 42 * ᐃ, ᐃ * 213, ᐃ * 78);
		Ⲇ.bezierCurveTo(ᐃ * 254, 134 * ᐃ, 226 * ᐃ, ᐃ * 198, ᐃ * 153, ᐃ * 197);
		Ⲇ.bezierCurveTo(ᐃ * 59, ᐃ * 204, ᐃ * 56, 158 * ᐃ, 51 * ᐃ, ᐃ * 115);
		Ⲇ.bezierCurveTo(ᐃ * 50, ᐃ * 93, 81 * ᐃ, 62 * ᐃ, 90 * ᐃ, ᐃ * 57);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠᐃ], Δⵠ[2], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * ᐃΔᐃⵠⵠ, 33 * ᐃ);
		Ⲇ.bezierCurveTo(85 * ᐃ, 62 * ᐃ, 102 * ᐃ, ᐃ * 66, ᐃ * 110, 83 * ᐃ);
		ΔΔ(Ⲇ, ΔΔΔᐃᐃ, Δⵠ[1], ᐃ * 20);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(181 * ᐃ, 32 * ᐃ);
		Ⲇ.bezierCurveTo(196 * ᐃ, ᐃ * 62, 181 * ᐃ, ᐃ * 68, 178 * ᐃ, 69 * ᐃ);
		ΔΔ(Ⲇ, ⵠΔⲆⵠΔ, Δⵠ[1], ᐃ * 20);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(225 * ᐃ, ᐃ * 52);
		Ⲇ.bezierCurveTo(ᐃ * 228, ᐃ * 78, 207 * ᐃ, 77 * ᐃ, ᐃ * 192, 88 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[1], 20 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(34 * ᐃ, 134 * ᐃ);
		Ⲇ.bezierCurveTo(46 * ᐃ, 111 * ᐃ, ᐃ * 57, ᐃ * 111, 79 * ᐃ, ᐃ * 109);
		ΔΔ(Ⲇ, ⵠⵠⲆΔⲆ, Δⵠ[1], ⲆⵠⲆΔⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(249 * ᐃ, 135 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 233, 107 * ᐃ, ᐃ * 212, 112 * ᐃ, 202 * ᐃ, ᐃ * 115);
		ΔΔ(Ⲇ, ΔΔⵠΔΔ, Δⵠ[ΔᐃⲆⲆ], ᐃΔΔⲆΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 56, ᐃ * 50);
		Ⲇ.bezierCurveTo(56 * ᐃ, 82 * ᐃ, ᐃ * 73, ᐃ * 82, 93 * ᐃ, 89 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[Δᐃⵠⵠ], 20 * ᐃ);
		ᐃΔΔ(Ⲇ, 101 * ᐃ, ᐃ * 155, ᐃ * 20.591260281974);
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔᐃ]);
		ᐃΔΔ(Ⲇ, 180 * ᐃ, 155 * ᐃ, 20.591260281974 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[3]);
		ᐃΔΔ(Ⲇ, 95 * ᐃ, 148 * ᐃ, ᐃ * 7.211102550927978);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆⵠ]);
		ᐃΔΔ(Ⲇ, ᐃ * 173, ᐃ * 148, ᐃ * 7.211102550927978);
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆⲆΔΔ]);
		ᐃᐃΔ === Ⲇᐃ && (Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 191, 107 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 180, 104 * ᐃ, 175 * ᐃ, 101 * ᐃ, ᐃ * 180, 95 * ᐃ), Ⲇ.bezierCurveTo(180 * ᐃ, ᐃ * 95, 181 * ᐃ, 99 * ᐃ, ᐃ * 188, ᐃ * 103), Ⲇ.bezierCurveTo(ᐃ * 191, 101 * ᐃ, ᐃ * 191, 95 * ᐃ, 190 * ᐃ, 91 * ᐃ), Ⲇ.bezierCurveTo(190 * ᐃ, 91 * ᐃ, 196 * ᐃ, ᐃ * 89, ᐃ * 195, 99 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[2]), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(206 * ᐃ, 98 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 203, 95 * ᐃ, 200 * ᐃ, 93 * ᐃ, ᐃ * 198, ᐃ * 101), Ⲇ.bezierCurveTo(194 * ᐃ, ᐃ * 109, 193 * ᐃ, 109 * ᐃ, ᐃ * 196, ᐃ * 110), Ⲇ.bezierCurveTo(206 * ᐃ, 115 * ᐃ, 209 * ᐃ, 114 * ᐃ, ᐃ * 211, ᐃ * 111), Ⲇ.bezierCurveTo(211 * ᐃ, ᐃ * 106, 208 * ᐃ, ᐃ * 108, ᐃ * 203, ᐃ * 108), Ⲇ.bezierCurveTo(193 * ᐃ, 107 * ᐃ, 204 * ᐃ, 101 * ᐃ, 206 * ᐃ, 99 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[ΔΔⲆⲆ]), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 172, ᐃ * 111), Ⲇ.bezierCurveTo(ᐃ * 172, 106 * ᐃ, ᐃ * 174, ᐃ * 105, 185 * ᐃ, 109 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 190, 109 * ᐃ, 189 * ᐃ, ᐃ * 114, 185 * ᐃ, 120 * ᐃ), Ⲇ.bezierCurveTo(181 * ᐃ, ᐃ * 125, ᐃ * 180, ᐃ * 126, ᐃ * 176, ᐃ * 122), Ⲇ.bezierCurveTo(182 * ᐃ, ᐃ * 119, ᐃ * 187, 110 * ᐃ, ᐃ * 182, ᐃ * 112), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[2]), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(202 * ᐃ, 125 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 197, 117 * ᐃ, ᐃ * 193, 116 * ᐃ, 193 * ᐃ, ᐃ * 120), Ⲇ.bezierCurveTo(ᐃ * 192.5, 124.5 * ᐃ, ᐃ * 192.5, ᐃ * 124.5, ᐃ * 192, 129 * ᐃ), Ⲇ.bezierCurveTo(188 * ᐃ, ᐃ * 129, 187 * ᐃ, 124 * ᐃ, 189 * ᐃ, 120 * ᐃ), Ⲇ.bezierCurveTo(191 * ᐃ, ᐃ * 110, 192 * ᐃ, ᐃ * 110, ᐃ * 200, ᐃ * 116), Ⲇ.bezierCurveTo(ᐃ * 208, 120 * ᐃ, ᐃ * 207, 123 * ᐃ, ᐃ * 202, 125 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃᐃ]));
		return ΔⲆ
	}

	function ⵠⲆᐃᐃⵠⲆⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃⲆᐃⵠΔ * ᐃ;
		ΔⲆ.height = 250 * ᐃ;
		Ⲇ.translate(ᐃ * -135, -75 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .8 : ᐃᐃΔ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 178.5, ᐃ * 238.03125);
		Ⲇ.bezierCurveTo(177 * ᐃ, 175.03125 * ᐃ, ᐃ * 177, ᐃ * 175.03125, 175.5 * ᐃ, ᐃ * 112.03125);
		Ⲇ.bezierCurveTo(ᐃ * 184.5, 100.53125 * ᐃ, 184.5 * ᐃ, ᐃ * 100.53125, ᐃ * 193.5, 89.03125 * ᐃ);
		Ⲇ.bezierCurveTo(202 * ᐃ, ᐃ * 100.03125, 202 * ᐃ, ᐃ * 100.03125, 210.5 * ᐃ, 111.03125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 209.5, ᐃ * 174.03125, ᐃ * 209.5, ᐃ * 174.03125, ᐃ * 208.5, 237.03125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 155.5, ᐃ * 239.03125);
		Ⲇ.bezierCurveTo(ᐃ * 194, ᐃ * 238.53125, 194 * ᐃ, 238.53125 * ᐃ, ᐃ * 232.5, ᐃ * 238.03125);
		Ⲇ.bezierCurveTo(232.5 * ᐃ, 243.03125 * ᐃ, ᐃ * 232.5, 243.03125 * ᐃ, 232.5 * ᐃ, 248.03125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 194, 248.53125 * ᐃ, ᐃ * 194, ᐃ * 248.53125, 155.5 * ᐃ, ᐃ * 249.03125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ]);
		ᐃΔΔ(Ⲇ, 160.5 * ᐃ, 243.03125 * ᐃ, 7 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ]);
		ᐃΔΔ(Ⲇ, 227.5 * ᐃ, ᐃ * 242.03125, ⵠⵠⲆⲆΔⲆᐃ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 185.5, 253.03125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 193.5, ᐃ * 253.03125, 193.5 * ᐃ, 253.03125 * ᐃ, 201.5 * ᐃ, ᐃ * 253.03125);
		Ⲇ.bezierCurveTo(201.5 * ᐃ, 276.03125 * ᐃ, ᐃ * 201.5, ᐃ * 276.03125, ᐃ * 201.5, ᐃ * 299.03125);
		Ⲇ.bezierCurveTo(194.5 * ᐃ, 299.03125 * ᐃ, ᐃ * 194.5, ᐃ * 299.03125, ᐃ * 187.5, ᐃ * 299.03125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃⵠ], Δⵠ[ᐃᐃⲆ], 5 * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 194, 298 * ᐃ, ⵠⲆΔⵠⵠ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ᐃᐃᐃ], Ⲇᐃⵠᐃ * ᐃ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(-10 * ᐃ, ᐃ * ⵠⲆⵠⵠⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 178.5, 238.03125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 177, ᐃ * 175.03125, 177 * ᐃ, 175.03125 * ᐃ, ᐃ * 175.5, 112.03125 * ᐃ);
		Ⲇ.bezierCurveTo(184.5 * ᐃ, ᐃ * 100.53125, ᐃ * 184.5, 100.53125 * ᐃ, ᐃ * 193.5, ᐃ * 89.03125);
		Ⲇ.bezierCurveTo(ᐃ * 202, 100.03125 * ᐃ, ᐃ * 202, 100.03125 * ᐃ, 210.5 * ᐃ, 111.03125 * ᐃ);
		Ⲇ.bezierCurveTo(209.5 * ᐃ, 174.03125 * ᐃ, ᐃ * 209.5, ᐃ * 174.03125, ᐃ * 208.5, ᐃ * 237.03125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * ΔⲆⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(155.5 * ᐃ, ᐃ * 239.03125);
		Ⲇ.bezierCurveTo(ᐃ * 194, 238.53125 * ᐃ, 194 * ᐃ, 238.53125 * ᐃ, 232.5 * ᐃ, ᐃ * 238.03125);
		Ⲇ.bezierCurveTo(232.5 * ᐃ, 243.03125 * ᐃ, 232.5 * ᐃ, ᐃ * 243.03125, 232.5 * ᐃ, ᐃ * 248.03125);
		Ⲇ.bezierCurveTo(194 * ᐃ, ᐃ * 248.53125, 194 * ᐃ, ᐃ * 248.53125, 155.5 * ᐃ, ᐃ * 249.03125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔ], Δⵠ[ᐃⲆᐃⵠ], 5 * ᐃ);
		ᐃΔΔ(Ⲇ, 160.5 * ᐃ, 243.03125 * ᐃ, 7 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆ], Δⵠ[ⲆᐃⵠΔ], ᐃ * 5);
		ᐃΔΔ(Ⲇ, ᐃ * 227.5, ᐃ * 242.03125, ⲆⲆΔΔᐃ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(185.5 * ᐃ, ᐃ * 253.03125);
		Ⲇ.bezierCurveTo(ᐃ * 193.5, ᐃ * 253.03125, 193.5 * ᐃ, 253.03125 * ᐃ, ᐃ * 201.5, 253.03125 * ᐃ);
		Ⲇ.bezierCurveTo(201.5 * ᐃ, 276.03125 * ᐃ, 201.5 * ᐃ, 276.03125 * ᐃ, ᐃ * 201.5, 299.03125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 194.5, ᐃ * 299.03125, 194.5 * ᐃ, ᐃ * 299.03125, 187.5 * ᐃ, 299.03125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔ], Δⵠ[2], ᐃ * ᐃⲆⵠⵠⵠ);
		ᐃΔΔ(Ⲇ, 194 * ᐃ, 298 * ᐃ, ᐃ * ⵠⲆΔⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 7 * ᐃ);
		return ΔⲆ
	}

	function ⵠᐃⲆΔΔⲆⵠ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 131;
		ΔⲆ.height = ᐃ * 121;
		Ⲇ.translate(ⵠⵠⵠΔ, 20 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 110, 59 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 93, ᐃ * 61.5, ᐃ * 93, 61.5 * ᐃ, ᐃ * 76, 64 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 84.5, 78.5 * ᐃ, 84.5 * ᐃ, 78.5 * ᐃ, ᐃ * 93, 93 * ᐃ);
		Ⲇ.bezierCurveTo(70 * ᐃ, ᐃ * 111, ᐃ * 43, 103 * ᐃ, ᐃ * 30, ᐃ * 82);
		Ⲇ.bezierCurveTo(17 * ᐃ, ᐃ * 61, ᐃ * 25, 30 * ᐃ, 51 * ᐃ, 21 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 66, ᐃ * ⲆΔᐃΔⲆ, ᐃ * 83, ᐃⵠⲆⲆⵠⲆⵠ * ᐃ, 96 * ᐃ, 29 * ᐃ);
		Ⲇ.bezierCurveTo(104 * ᐃ, 35 * ᐃ, ᐃ * 109, ᐃ * 47, 110 * ᐃ, 58 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠΔ]);
		Ⲇ.globalAlpha = ᐃᐃΔ;
		Ⲇ.translate(ΔΔᐃ, ᐃ * -ⲆⵠⲆⵠⲆⲆΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 110, 59 * ᐃ);
		Ⲇ.bezierCurveTo(93 * ᐃ, 61.5 * ᐃ, ᐃ * 93, 61.5 * ᐃ, ᐃ * 76, ᐃ * 64);
		Ⲇ.bezierCurveTo(ᐃ * 84.5, 78.5 * ᐃ, ᐃ * 84.5, 78.5 * ᐃ, 93 * ᐃ, 93 * ᐃ);
		Ⲇ.bezierCurveTo(70 * ᐃ, 111 * ᐃ, 43 * ᐃ, 103 * ᐃ, ᐃ * 30, ᐃ * 82);
		Ⲇ.bezierCurveTo(17 * ᐃ, 61 * ᐃ, ᐃ * 25, ᐃ * 30, 51 * ᐃ, ᐃ * 21);
		Ⲇ.bezierCurveTo(ᐃ * 66, ⲆΔΔΔⵠ * ᐃ, 83 * ᐃ, 18 * ᐃ, ᐃ * 96, 29 * ᐃ);
		Ⲇ.bezierCurveTo(104 * ᐃ, ᐃ * 35, 109 * ᐃ, 47 * ᐃ, 110 * ᐃ, 58 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔΔᐃΔⵠ], 10 * ᐃ);
		return ΔⲆ
	}

	function ΔᐃᐃⵠⲆⲆⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 424;
		ΔⲆ.height = ᐃ * 788;
		Ⲇ.translate(ᐃ * 25, ᐃ * 25);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : Δⵠᐃ;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 193.5, 602.5 * ᐃ);
		Ⲇ.rotate(-.12);
		ᐃΔⵠ(Ⲇ, ᐃ * -26.5, ᐃ * -97.5, 53 * ᐃ, ᐃ * 195, 25 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(137 * ᐃ, ᐃ * 519);
		Ⲇ.bezierCurveTo(ᐃ * 182, ᐃ * 513, 182 * ᐃ, ᐃ * 513, ᐃ * 227, ᐃ * 507);
		Ⲇ.bezierCurveTo(ᐃ * 214, ᐃ * 417, ᐃ * 189, 304 * ᐃ, 221 * ᐃ, ᐃ * 180);
		Ⲇ.bezierCurveTo(191 * ᐃ, 126 * ᐃ, ᐃ * 192, 105 * ᐃ, 198 * ᐃ, ᐃ * 64);
		Ⲇ.bezierCurveTo(123 * ᐃ, 102 * ᐃ, 99 * ᐃ, 285 * ᐃ, ᐃ * 137, 517 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 175, 119 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 176, 142 * ᐃ, ᐃ * 184, 165 * ᐃ, 197 * ᐃ, 183 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 167, ᐃ * 325, ᐃ * 191, ᐃ * 405, 202 * ᐃ, 502 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 180, ᐃ * 503, ᐃ * 180, 503 * ᐃ, ᐃ * 158, ᐃ * 504);
		Ⲇ.bezierCurveTo(ᐃ * 135, ᐃ * 396, ᐃ * 134, 185 * ᐃ, ᐃ * 175, ᐃ * 119);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 110, ᐃ * 518);
		Ⲇ.bezierCurveTo(ᐃ * 111.5, ᐃ * 533, ᐃ * 111.5, 533 * ᐃ, ᐃ * 113, ᐃ * 548);
		Ⲇ.bezierCurveTo(ᐃ * 162.5, ᐃ * 544, 162.5 * ᐃ, 544 * ᐃ, 212 * ᐃ, ᐃ * 540);
		Ⲇ.bezierCurveTo(ᐃ * 312, ᐃ * 535, ᐃ * 281, 665 * ᐃ, 225 * ᐃ, 665 * ᐃ);
		Ⲇ.bezierCurveTo(227 * ᐃ, ᐃ * 686.5, ᐃ * 227, 686.5 * ᐃ, ᐃ * 229, ᐃ * 708);
		Ⲇ.bezierCurveTo(343 * ᐃ, ᐃ * 684, ᐃ * 354, ᐃ * 496, 222 * ᐃ, 498 * ᐃ);
		Ⲇ.bezierCurveTo(165.5 * ᐃ, 503 * ᐃ, ᐃ * 165.5, ᐃ * 503, ᐃ * 109, ᐃ * 508);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		ᐃΔΔ(Ⲇ, 204 * ᐃ, 693 * ᐃ, ᐃ * 36.013886210738214);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ]);
		ᐃΔΔ(Ⲇ, 105 * ᐃ, 518 * ᐃ, 30 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(171 * ᐃ, 535 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 139.5, ᐃ * 537.5, ᐃ * 139.5, 537.5 * ᐃ, ᐃ * 108, 540 * ᐃ);
		Ⲇ.bezierCurveTo(110 * ᐃ, 527.5 * ᐃ, ᐃ * 110, ᐃ * 527.5, ᐃ * 112, ᐃ * 515);
		Ⲇ.bezierCurveTo(ᐃ * 148, 513 * ᐃ, ᐃ * 148, ᐃ * 513, 184 * ᐃ, ᐃ * 511);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 244, ᐃ * 669);
		Ⲇ.bezierCurveTo(ᐃ * 248.5, ᐃ * 680, ᐃ * 248.5, 680 * ᐃ, 253 * ᐃ, ᐃ * 691);
		Ⲇ.bezierCurveTo(ᐃ * 239.5, ᐃ * 697, 239.5 * ᐃ, 697 * ᐃ, ᐃ * 226, 703 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 223, ᐃ * 691.5, ᐃ * 223, 691.5 * ᐃ, ᐃ * 220, 680 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ]);
		Ⲇ.translate(-25 * ᐃ, ᐃ * -25);
		Ⲇ.globalAlpha = Δⵠᐃ;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 193.5, ᐃ * 602.5);
		Ⲇ.rotate(-.12);
		ᐃΔⵠ(Ⲇ, -26.5 * ᐃ, -97.5 * ᐃ, 53 * ᐃ, 195 * ᐃ, ᐃ * 25);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃΔⲆⵠΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(137 * ᐃ, 519 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 182, 513 * ᐃ, ᐃ * 182, ᐃ * 513, ᐃ * 227, 507 * ᐃ);
		Ⲇ.bezierCurveTo(214 * ᐃ, ᐃ * 417, 189 * ᐃ, ᐃ * 304, ᐃ * 221, ᐃ * 180);
		Ⲇ.bezierCurveTo(191 * ᐃ, ᐃ * 126, ᐃ * 192, 105 * ᐃ, 198 * ᐃ, ᐃ * 64);
		Ⲇ.bezierCurveTo(ᐃ * 123, 102 * ᐃ, 99 * ᐃ, 285 * ᐃ, ᐃ * 137, ᐃ * 517);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃᐃΔ], Δⵠ[4], 16 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(175 * ᐃ, 119 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 176, ᐃ * 142, ᐃ * 184, ᐃ * 165, ᐃ * 197, ᐃ * 183);
		Ⲇ.bezierCurveTo(167 * ᐃ, 325 * ᐃ, ᐃ * 191, 405 * ᐃ, 202 * ᐃ, 502 * ᐃ);
		Ⲇ.bezierCurveTo(180 * ᐃ, ᐃ * 503, ᐃ * 180, 503 * ᐃ, ᐃ * 158, 504 * ᐃ);
		Ⲇ.bezierCurveTo(135 * ᐃ, 396 * ᐃ, 134 * ᐃ, ᐃ * 185, 175 * ᐃ, ᐃ * 119);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(110 * ᐃ, ᐃ * 518);
		Ⲇ.bezierCurveTo(ᐃ * 111.5, ᐃ * 533, ᐃ * 111.5, ᐃ * 533, 113 * ᐃ, 548 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 162.5, ᐃ * 544, 162.5 * ᐃ, 544 * ᐃ, ᐃ * 212, ᐃ * 540);
		Ⲇ.bezierCurveTo(ᐃ * 312, 535 * ᐃ, 281 * ᐃ, 665 * ᐃ, ᐃ * 225, 665 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 227, ᐃ * 686.5, ᐃ * 227, ᐃ * 686.5, ᐃ * 229, 708 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 343, 684 * ᐃ, ᐃ * 354, ᐃ * 496, 222 * ᐃ, ᐃ * 498);
		Ⲇ.bezierCurveTo(ᐃ * 165.5, 503 * ᐃ, 165.5 * ᐃ, ᐃ * 503, ᐃ * 109, 508 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[ᐃⲆⵠᐃⵠ], ᐃ * ⲆⲆⲆᐃΔ);
		ᐃΔΔ(Ⲇ, ᐃ * 204, 693 * ᐃ, ᐃ * 36.013886210738214);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆⵠⲆ], Δⵠ[4], ΔΔΔⵠᐃ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 105, ᐃ * 518, ᐃ * 30);
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[ⲆᐃᐃΔⵠ], 16 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 171, 535 * ᐃ);
		Ⲇ.bezierCurveTo(139.5 * ᐃ, ᐃ * 537.5, ᐃ * 139.5, 537.5 * ᐃ, 108 * ᐃ, ᐃ * 540);
		Ⲇ.bezierCurveTo(ᐃ * 110, ᐃ * 527.5, 110 * ᐃ, ᐃ * 527.5, 112 * ᐃ, 515 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 148, ᐃ * 513, ᐃ * 148, 513 * ᐃ, 184 * ᐃ, 511 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⵠᐃⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 244, 669 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 248.5, 680 * ᐃ, 248.5 * ᐃ, 680 * ᐃ, 253 * ᐃ, ᐃ * 691);
		Ⲇ.bezierCurveTo(239.5 * ᐃ, ᐃ * 697, ᐃ * 239.5, ᐃ * 697, ᐃ * 226, 703 * ᐃ);
		Ⲇ.bezierCurveTo(223 * ᐃ, ᐃ * 691.5, 223 * ᐃ, ᐃ * 691.5, 220 * ᐃ, ᐃ * 680);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠΔⲆⵠ]);
		ᐃΔΔ(Ⲇ, ᐃ * 204, ᐃ * 693, 17.029386365926403 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆΔΔΔⲆ]);
		ᐃΔΔ(Ⲇ, 106 * ᐃ, ᐃ * 518, 12 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[Δᐃⵠᐃⵠ]);
		return ΔⲆ
	}

	function ⵠΔᐃⵠⵠᐃᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 283;
		ΔⲆ.height = ᐃ * 224;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ⵠᐃⵠΔⵠⵠᐃ * ᐃ, ᐃ * 33);
		Ⲇ.bezierCurveTo(ᐃ * 85, ᐃ * 62, 102 * ᐃ, ᐃ * 66, 110 * ᐃ, ᐃ * 83);
		ΔΔ(Ⲇ, undefined, Δⵠ[0], 40 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 181, ᐃ * 32);
		Ⲇ.bezierCurveTo(ᐃ * 196, 62 * ᐃ, 181 * ᐃ, 68 * ᐃ, ᐃ * 178, 69 * ᐃ);
		ΔΔ(Ⲇ, ⵠΔⲆⵠΔ, Δⵠ[0], ᐃ * 40);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 225, 52 * ᐃ);
		Ⲇ.bezierCurveTo(228 * ᐃ, ᐃ * 78, ᐃ * 207, 77 * ᐃ, 192 * ᐃ, ᐃ * 88);
		ΔΔ(Ⲇ, Ⲇⵠⵠᐃᐃ, Δⵠ[0], 40 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 34, 134 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 46, 111 * ᐃ, 57 * ᐃ, 111 * ᐃ, 79 * ᐃ, 109 * ᐃ);
		ΔΔ(Ⲇ, ΔΔᐃⵠⵠ, Δⵠ[ⵠⲆᐃ], 40 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(249 * ᐃ, ᐃ * 135);
		Ⲇ.bezierCurveTo(ᐃ * 233, ᐃ * 107, ᐃ * 212, 112 * ᐃ, ᐃ * 202, ᐃ * 115);
		ΔΔ(Ⲇ, undefined, Δⵠ[0], 40 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 56, ᐃ * 50);
		Ⲇ.bezierCurveTo(ᐃ * 56, 82 * ᐃ, ᐃ * 73, ᐃ * 82, 93 * ᐃ, ᐃ * 89);
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔΔᐃ], 40 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 93, ᐃ * 55);
		Ⲇ.bezierCurveTo(124 * ᐃ, ᐃ * 29, ᐃ * 179, 44 * ᐃ, 188 * ᐃ, ᐃ * 52);
		Ⲇ.bezierCurveTo(207 * ᐃ, ᐃ * 64, ᐃ * 226, ᐃ * 94, 231 * ᐃ, 118 * ᐃ);
		Ⲇ.bezierCurveTo(236 * ᐃ, ᐃ * 145, 222 * ᐃ, ᐃ * 184, 193 * ᐃ, ᐃ * 192);
		Ⲇ.bezierCurveTo(147 * ᐃ, 201 * ᐃ, 116 * ᐃ, 200 * ᐃ, ᐃ * 93, ᐃ * 193);
		Ⲇ.bezierCurveTo(61 * ᐃ, ᐃ * 180, ᐃ * 48, 147 * ᐃ, 50 * ᐃ, 123 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 50, 93 * ᐃ, 76 * ᐃ, 66 * ᐃ, ᐃ * 92, 56 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠ]);
		return ΔⲆ
	}
	const ᐃⲆᐃΔᐃⲆⲆᐃΔ = 13643330;

	function ⵠᐃⵠᐃⲆⲆΔⵠⲆ(ⵠᐃⲆᐃᐃᐃΔ) {
		return ⵠⵠⲆΔᐃᐃᐃⲆΔ.String.fromCharCode(ⵠᐃⲆᐃᐃᐃΔ)
	}

	function ΔᐃᐃⲆΔⵠⵠᐃΔ(ᐃΔⵠΔᐃᐃⲆΔᐃ) {
		return ᐃΔⵠΔᐃᐃⲆΔᐃ.map(ⵠᐃⵠᐃⲆⲆΔⵠⲆ).join("")
	}
	const ⲆⵠᐃᐃⵠⲆⲆⵠΔ = function() {
		const ⲆᐃⵠΔⵠᐃᐃᐃΔ = ΔᐃᐃⲆΔⵠⵠᐃΔ([5123, 11398, 5123, 916, 5123, 11398, 11398, 5123, 916]);
		const ⲆⲆⲆΔⲆᐃⲆ = {
			"ᐃΔΔⲆⲆᐃⲆ": 1382209,
			"ᐃⲆΔⵠᐃΔⵠᐃΔ": 14538519,
			"ᐃⲆᐃΔᐃⲆⲆᐃΔ": 16472081,
			"ⵠⵠⵠᐃᐃΔΔⵠⲆ": 11968198
		};
		if (ⲆⲆⲆΔⲆᐃⲆ[ⲆᐃⵠΔⵠᐃᐃᐃΔ] !== ⲆⲆⲆΔⲆᐃⲆ.ᐃⲆᐃΔᐃⲆⲆᐃΔ) {
			const ᐃⲆᐃΔᐃⲆⲆᐃΔ = Math.random;
			const ⵠᐃⲆᐃᐃᐃΔ = [];
			const ⵠᐃⵠᐃⲆⲆΔⵠⲆ = function() {
				for (let ΔᐃᐃⲆΔⵠⵠᐃΔ = 0; ΔᐃᐃⲆΔⵠⵠᐃΔ < 7803; ΔᐃᐃⲆΔⵠⵠᐃΔ++) ⵠᐃⲆᐃᐃᐃΔ.push(ΔᐃᐃⲆΔⵠⵠᐃΔ);
				return ᐃⲆᐃΔᐃⲆⲆᐃΔ()
			};
			Math.random = ⵠᐃⵠᐃⲆⲆΔⵠⲆ
		}
	};
	ⲆⵠᐃᐃⵠⲆⲆⵠΔ();

	function ⵠᐃⵠⲆᐃⲆⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 290 * ᐃ;
		ΔⲆ.height = 525 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔⵠΔ;
		Ⲇ.translate(ᐃ * ᐃΔΔⲆΔ, ᐃ * ⲆᐃⲆⲆⲆⲆⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(111 * ᐃ, 351 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 129, 218 * ᐃ, ᐃ * 129, ᐃ * 218, ᐃ * 147, 85 * ᐃ);
		Ⲇ.bezierCurveTo(167 * ᐃ, ᐃ * 65.5, ᐃ * 167, ᐃ * 65.5, ᐃ * 187, ᐃ * 46);
		Ⲇ.bezierCurveTo(ᐃ * 201.5, ᐃ * 70.5, 201.5 * ᐃ, 70.5 * ᐃ, 216 * ᐃ, ᐃ * 95);
		Ⲇ.bezierCurveTo(ᐃ * 194.5, 227.5 * ᐃ, 194.5 * ᐃ, 227.5 * ᐃ, 173 * ᐃ, ᐃ * 360);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠ]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 131, 425.5 * ᐃ);
		Ⲇ.rotate(.16);
		ᐃΔⵠ(Ⲇ, -14 * ᐃ, ᐃ * -56.5, 28 * ᐃ, 113 * ᐃ, 8 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ]);
		ᐃΔΔ(Ⲇ, 122 * ᐃ, 480 * ᐃ, 18.439088914585774 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(79 * ᐃ, ᐃ * 371);
		Ⲇ.bezierCurveTo(131 * ᐃ, ᐃ * 373, ᐃ * 145, ᐃ * 378, ᐃ * 197, 388 * ᐃ);
		Ⲇ.bezierCurveTo(205 * ᐃ, 382.5 * ᐃ, ᐃ * 205, ᐃ * 382.5, 213 * ᐃ, ᐃ * 377);
		Ⲇ.bezierCurveTo(167 * ᐃ, ᐃ * 352, 117 * ᐃ, ᐃ * 345, 69 * ᐃ, 355 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ]);
		Ⲇ.globalAlpha = ΔⵠⲆⲆ;
		Ⲇ.translate(-ᐃⲆᐃⵠⲆ * ᐃ, -ⵠΔᐃⲆⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(111 * ᐃ, 351 * ᐃ);
		Ⲇ.bezierCurveTo(129 * ᐃ, ᐃ * 218, 129 * ᐃ, ᐃ * 218, ᐃ * 147, 85 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 167, 65.5 * ᐃ, 167 * ᐃ, ᐃ * 65.5, ᐃ * 187, 46 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 201.5, 70.5 * ᐃ, 201.5 * ᐃ, 70.5 * ᐃ, ᐃ * 216, ᐃ * 95);
		Ⲇ.bezierCurveTo(194.5 * ᐃ, 227.5 * ᐃ, ᐃ * 194.5, ᐃ * 227.5, 173 * ᐃ, ᐃ * 360);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * 12.5);
		Ⲇ.save();
		Ⲇ.translate(131 * ᐃ, 425.5 * ᐃ);
		Ⲇ.rotate(.16);
		ᐃΔⵠ(Ⲇ, ᐃ * -14, -56.5 * ᐃ, ᐃ * 28, ᐃ * 113, Δᐃᐃⵠⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔⲆ], Δⵠ[ΔΔᐃᐃⵠ], ᐃ * 12.5);
		ᐃΔΔ(Ⲇ, ᐃ * 122, 480 * ᐃ, ᐃ * 18.439088914585774);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠᐃΔ], Δⵠ[ᐃⵠᐃⲆ], ᐃ * 12.5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 79, ᐃ * 371);
		Ⲇ.bezierCurveTo(131 * ᐃ, 373 * ᐃ, 145 * ᐃ, ᐃ * 378, 197 * ᐃ, 388 * ᐃ);
		Ⲇ.bezierCurveTo(205 * ᐃ, 382.5 * ᐃ, ᐃ * 205, ᐃ * 382.5, 213 * ᐃ, 377 * ᐃ);
		Ⲇ.bezierCurveTo(167 * ᐃ, 352 * ᐃ, ᐃ * 117, 345 * ᐃ, ᐃ * 69, ᐃ * 355);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃⲆ], Δⵠ[ᐃᐃΔᐃ], ᐃ * 12.5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(128 * ᐃ, ᐃ * 345);
		Ⲇ.bezierCurveTo(142 * ᐃ, ᐃ * 345, ᐃ * 147, 346 * ᐃ, 158 * ᐃ, 349 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 177.5, ᐃ * 224.5, 177.5 * ᐃ, ᐃ * 224.5, 197 * ᐃ, ⵠⵠⲆᐃⲆ * ᐃ);
		Ⲇ.bezierCurveTo(190.5 * ᐃ, ᐃ * 84.5, 190.5 * ᐃ, 84.5 * ᐃ, ᐃ * 184, 69 * ᐃ);
		Ⲇ.bezierCurveTo(173.5 * ᐃ, ᐃ * 82, 173.5 * ᐃ, 82 * ᐃ, ᐃ * 163, 95 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		return ΔⲆ
	}
	const ⵠΔᐃᐃ = ⵠᐃⲆ;

	function ⵠⵠΔᐃⵠΔᐃ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 104;
		ΔⲆ.height = 112 * ᐃ;
		Ⲇ.translate(0, ᐃ * 15);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * ᐃΔᐃᐃⲆ, 44 * ᐃ);
		Ⲇ.bezierCurveTo(30.5 * ᐃ, 48 * ᐃ, 30.5 * ᐃ, 48 * ᐃ, 45 * ᐃ, ᐃ * 52);
		Ⲇ.bezierCurveTo(ᐃ * 36.5, ᐃ * 63, ᐃ * 36.5, ᐃ * 63, 28 * ᐃ, 74 * ᐃ);
		Ⲇ.bezierCurveTo(32 * ᐃ, ᐃ * 86, ᐃ * 61, 92 * ᐃ, ᐃ * 78, ᐃ * 76);
		Ⲇ.bezierCurveTo(ᐃ * 93, 62 * ᐃ, ᐃ * 92, ᐃ * 40, 80 * ᐃ, ᐃ * 26);
		Ⲇ.bezierCurveTo(ᐃ * 65, ᐃ * 11, ᐃ * 42, ᐃ * 16, 34 * ᐃ, 21 * ᐃ);
		Ⲇ.bezierCurveTo(22 * ᐃ, 27 * ᐃ, ΔΔΔⵠᐃ * ᐃ, ᐃ * 39, 16 * ᐃ, 44 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃ]);
		Ⲇ.globalAlpha = ΔΔΔᐃ;
		Ⲇ.translate(0, ᐃ * -15);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 16, ᐃ * 44);
		Ⲇ.bezierCurveTo(ᐃ * 30.5, ᐃ * 48, ᐃ * 30.5, ᐃ * 48, 45 * ᐃ, ᐃ * 52);
		Ⲇ.bezierCurveTo(36.5 * ᐃ, ᐃ * 63, 36.5 * ᐃ, ᐃ * 63, ᐃ * 28, 74 * ᐃ);
		Ⲇ.bezierCurveTo(32 * ᐃ, 86 * ᐃ, ᐃ * 61, ᐃ * 92, 78 * ᐃ, 76 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 93, 62 * ᐃ, ᐃ * 92, 40 * ᐃ, 80 * ᐃ, ᐃ * 26);
		Ⲇ.bezierCurveTo(ᐃ * 65, ⵠᐃⲆⵠᐃ * ᐃ, ᐃ * 42, ᐃ * ᐃᐃⲆⲆⵠ, 34 * ᐃ, ᐃ * 21);
		Ⲇ.bezierCurveTo(22 * ᐃ, 27 * ᐃ, ᐃ * 16, ᐃ * 39, ⲆΔⲆⲆⲆ * ᐃ, ᐃ * 44);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[ᐃⲆᐃᐃ], ᐃ * 8);
		return ΔⲆ
	}

	function ⵠΔΔⲆΔⵠΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 290 * ᐃ;
		ΔⲆ.height = 525 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔΔΔᐃ;
		Ⲇ.translate(ᐃ * ⵠΔᐃⲆⵠ, 20 * ᐃ);
		Ⲇ.translate(-20 * ᐃ, -20 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 132, 423 * ᐃ);
		Ⲇ.rotate(.16);
		ᐃΔⵠ(Ⲇ, -14 * ᐃ, -61 * ᐃ, ᐃ * 28, 122 * ᐃ, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃΔΔⲆΔⵠΔ * ᐃ, 344 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 123, ᐃ * 214, ᐃ * 123, ᐃ * 214, 146 * ᐃ, 84 * ᐃ);
		Ⲇ.bezierCurveTo(166.5 * ᐃ, 65 * ᐃ, 166.5 * ᐃ, 65 * ᐃ, 187 * ᐃ, 46 * ᐃ);
		Ⲇ.bezierCurveTo(201 * ᐃ, 71 * ᐃ, ᐃ * 201, 71 * ᐃ, 215 * ᐃ, 96 * ᐃ);
		Ⲇ.bezierCurveTo(199.5 * ᐃ, 226.5 * ᐃ, ᐃ * 199.5, 226.5 * ᐃ, ᐃ * 184, 357 * ᐃ);
		Ⲇ.bezierCurveTo(162.5 * ᐃ, 362.5 * ᐃ, ᐃ * 162.5, 362.5 * ᐃ, 141 * ᐃ, ᐃ * 368);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(75 * ᐃ, 328 * ᐃ);
		Ⲇ.bezierCurveTo(88 * ᐃ, 336.5 * ᐃ, ᐃ * 88, 336.5 * ᐃ, 101 * ᐃ, 345 * ᐃ);
		Ⲇ.bezierCurveTo(123.5 * ᐃ, 337.5 * ᐃ, 123.5 * ᐃ, ᐃ * 337.5, 146 * ᐃ, ᐃ * 330);
		Ⲇ.bezierCurveTo(ᐃ * 165, 343.5 * ᐃ, 165 * ᐃ, 343.5 * ᐃ, 184 * ᐃ, ᐃ * 357);
		Ⲇ.bezierCurveTo(198.5 * ᐃ, 353 * ᐃ, ᐃ * 198.5, 353 * ᐃ, 213 * ᐃ, ᐃ * 349);
		Ⲇ.bezierCurveTo(ᐃ * 200.5, ᐃ * 364.5, 200.5 * ᐃ, 364.5 * ᐃ, ᐃ * 188, 380 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 163, 380.5 * ᐃ, 163 * ᐃ, 380.5 * ᐃ, 138 * ᐃ, ᐃ * 381);
		Ⲇ.bezierCurveTo(112 * ᐃ, 373.5 * ᐃ, ᐃ * 112, ᐃ * 373.5, 86 * ᐃ, 366 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 121, 332 * ᐃ);
		Ⲇ.bezierCurveTo(133.5 * ᐃ, 327.5 * ᐃ, 133.5 * ᐃ, ᐃ * 327.5, ᐃ * 146, ᐃ * 323);
		Ⲇ.bezierCurveTo(ᐃ * 157, ᐃ * 330.5, 157 * ᐃ, 330.5 * ᐃ, ᐃ * 168, 338 * ᐃ);
		Ⲇ.bezierCurveTo(182.5 * ᐃ, 219.5 * ᐃ, ᐃ * 182.5, 219.5 * ᐃ, ᐃ * 197, ᐃ * 101);
		Ⲇ.bezierCurveTo(190 * ᐃ, ᐃ * 84.5, ᐃ * 190, ᐃ * 84.5, 183 * ᐃ, 68 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 172.5, 81 * ᐃ, 172.5 * ᐃ, 81 * ᐃ, ᐃ * 162, ᐃ * 94);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(105 * ᐃ, ᐃ * 463);
		Ⲇ.bezierCurveTo(ᐃ * 124.5, 466 * ᐃ, 124.5 * ᐃ, ᐃ * 466, 144 * ᐃ, 469 * ᐃ);
		Ⲇ.bezierCurveTo(145.5 * ᐃ, 478.5 * ᐃ, 145.5 * ᐃ, 478.5 * ᐃ, ᐃ * 147, ᐃ * 488);
		Ⲇ.bezierCurveTo(133.5 * ᐃ, 495.5 * ᐃ, ᐃ * 133.5, 495.5 * ᐃ, 120 * ᐃ, ᐃ * 503);
		Ⲇ.bezierCurveTo(ᐃ * 108.5, ᐃ * 492, ᐃ * 108.5, ᐃ * 492, ᐃ * 97, 481 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ]);
		Ⲇ.globalAlpha = ⲆᐃΔ;
		Ⲇ.translate(ᐃ * -20, -ΔΔᐃΔᐃΔΔ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 132, 423 * ᐃ);
		Ⲇ.rotate(.16);
		ᐃΔⵠ(Ⲇ, ᐃ * -ⵠⲆᐃᐃⵠ, ᐃ * -61, ᐃ * 28, ᐃ * 122, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃⲆ], Δⵠ[ⲆᐃⲆΔ], ᐃ * 12.5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(100 * ᐃ, 344 * ᐃ);
		Ⲇ.bezierCurveTo(123 * ᐃ, ᐃ * 214, ᐃ * 123, ᐃ * 214, 146 * ᐃ, ᐃ * 84);
		Ⲇ.bezierCurveTo(166.5 * ᐃ, 65 * ᐃ, 166.5 * ᐃ, ᐃ * 65, ᐃ * 187, ᐃ * 46);
		Ⲇ.bezierCurveTo(201 * ᐃ, ᐃ * 71, 201 * ᐃ, ᐃ * 71, ᐃ * 215, ᐃ * 96);
		Ⲇ.bezierCurveTo(199.5 * ᐃ, 226.5 * ᐃ, 199.5 * ᐃ, ᐃ * 226.5, 184 * ᐃ, ᐃ * 357);
		Ⲇ.bezierCurveTo(ᐃ * 162.5, 362.5 * ᐃ, ᐃ * 162.5, 362.5 * ᐃ, 141 * ᐃ, 368 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δᐃⵠⵠ], Δⵠ[2], ᐃ * 12.5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(75 * ᐃ, ᐃ * 328);
		Ⲇ.bezierCurveTo(88 * ᐃ, ᐃ * 336.5, ᐃ * 88, ᐃ * 336.5, ᐃ * 101, ᐃ * 345);
		Ⲇ.bezierCurveTo(ᐃ * 123.5, 337.5 * ᐃ, 123.5 * ᐃ, 337.5 * ᐃ, ᐃ * 146, ᐃ * 330);
		Ⲇ.bezierCurveTo(ᐃ * 165, ᐃ * 343.5, ᐃ * 165, ᐃ * 343.5, ᐃ * 184, ᐃ * 357);
		Ⲇ.bezierCurveTo(198.5 * ᐃ, 353 * ᐃ, ᐃ * 198.5, 353 * ᐃ, 213 * ᐃ, ᐃ * 349);
		Ⲇ.bezierCurveTo(ᐃ * 200.5, 364.5 * ᐃ, 200.5 * ᐃ, 364.5 * ᐃ, ᐃ * 188, ᐃ * 380);
		Ⲇ.bezierCurveTo(163 * ᐃ, 380.5 * ᐃ, 163 * ᐃ, ᐃ * 380.5, 138 * ᐃ, ᐃ * 381);
		Ⲇ.bezierCurveTo(ᐃ * 112, ᐃ * 373.5, ᐃ * 112, 373.5 * ᐃ, ᐃ * 86, 366 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[ᐃᐃᐃⵠ], 12.5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 121, ᐃ * 332);
		Ⲇ.bezierCurveTo(ᐃ * 133.5, 327.5 * ᐃ, 133.5 * ᐃ, ᐃ * 327.5, 146 * ᐃ, 323 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 157, ᐃ * 330.5, 157 * ᐃ, ᐃ * 330.5, ᐃ * 168, 338 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 182.5, 219.5 * ᐃ, 182.5 * ᐃ, 219.5 * ᐃ, 197 * ᐃ, 101 * ᐃ);
		Ⲇ.bezierCurveTo(190 * ᐃ, ᐃ * 84.5, ᐃ * 190, ᐃ * 84.5, ᐃ * 183, 68 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 172.5, ᐃ * 81, ᐃ * 172.5, ᐃ * 81, 162 * ᐃ, 94 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(105 * ᐃ, ᐃ * 463);
		Ⲇ.bezierCurveTo(124.5 * ᐃ, 466 * ᐃ, 124.5 * ᐃ, 466 * ᐃ, 144 * ᐃ, ᐃ * 469);
		Ⲇ.bezierCurveTo(ᐃ * 145.5, 478.5 * ᐃ, 145.5 * ᐃ, ᐃ * 478.5, 147 * ᐃ, 488 * ᐃ);
		Ⲇ.bezierCurveTo(133.5 * ᐃ, 495.5 * ᐃ, 133.5 * ᐃ, ᐃ * 495.5, 120 * ᐃ, 503 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 108.5, 492 * ᐃ, ᐃ * 108.5, ᐃ * 492, ᐃ * 97, ᐃ * 481);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃⲆ], Δⵠ[ΔⲆᐃΔ], ᐃ * 12.5);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(143 * ᐃ, ᐃ * 346);
		Ⲇ.bezierCurveTo(125 * ᐃ, ᐃ * 352, 125 * ᐃ, 352 * ᐃ, ᐃ * 107, ᐃ * 358);
		Ⲇ.bezierCurveTo(ᐃ * 124, ᐃ * 363, 140 * ᐃ, 368 * ᐃ, 141 * ᐃ, ᐃ * 368);
		Ⲇ.bezierCurveTo(156.5 * ᐃ, 367 * ᐃ, ᐃ * 156.5, ᐃ * 367, ᐃ * 172, ᐃ * 366);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		return ΔⲆ
	}

	function ΔⲆⵠⵠⵠⲆⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 321 * ᐃ;
		ΔⲆ.height = ᐃ * 284;
		Ⲇ.translate(100 * ᐃ, 30 * ᐃ);
		Ⲇ.translate(ΔΔᐃᐃⵠ * ᐃ, ΔⲆⲆΔΔ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(58 * ᐃ, 33 * ᐃ);
		Ⲇ.bezierCurveTo(81 * ᐃ, 22 * ᐃ, 93 * ᐃ, ᐃ * 26, ᐃ * 123, ᐃ * 47);
		Ⲇ.bezierCurveTo(ᐃ * 160, ᐃ * 73, 169 * ᐃ, ᐃ * 80, ᐃ * 191, 99 * ᐃ);
		Ⲇ.bezierCurveTo(202 * ᐃ, ᐃ * 107, ᐃ * 211, ᐃ * 118, ᐃ * 195, 151 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 181, 183 * ᐃ, ᐃ * 157, 192 * ᐃ, ᐃ * 129, ᐃ * 174);
		Ⲇ.bezierCurveTo(78 * ᐃ, 140 * ᐃ, ᐃ * 68, 129 * ᐃ, ᐃ * 37, ᐃ * 94);
		Ⲇ.bezierCurveTo(15 * ᐃ, ᐃ * 68, 25 * ᐃ, ᐃ * 52, 56 * ᐃ, ᐃ * 34);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⲆ]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ᐃ * -ᐃᐃⵠᐃΔ, -ⵠΔΔⲆΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 58, 33 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 81, ᐃ * 22, ᐃ * 93, 26 * ᐃ, 123 * ᐃ, 47 * ᐃ);
		Ⲇ.bezierCurveTo(160 * ᐃ, ᐃ * 73, ᐃ * 169, ᐃ * 80, ᐃ * 191, 99 * ᐃ);
		Ⲇ.bezierCurveTo(202 * ᐃ, 107 * ᐃ, 211 * ᐃ, ᐃ * 118, ᐃ * 195, ᐃ * 151);
		Ⲇ.bezierCurveTo(181 * ᐃ, ᐃ * 183, ᐃ * 157, 192 * ᐃ, 129 * ᐃ, ᐃ * 174);
		Ⲇ.bezierCurveTo(78 * ᐃ, 140 * ᐃ, ᐃ * 68, ᐃ * 129, ᐃ * 37, 94 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 15, 68 * ᐃ, ᐃ * 25, ᐃ * 52, ᐃ * 56, 34 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔᐃΔᐃ], ⲆⲆⵠⲆⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(167 * ᐃ, 120 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 196, ᐃ * 106, ᐃ * 207, 111 * ᐃ, ᐃ * 199, 135 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 185, 172 * ᐃ, ᐃ * 166, ᐃ * 187, ᐃ * 145, ᐃ * 179);
		Ⲇ.bezierCurveTo(118 * ᐃ, 166 * ᐃ, ᐃ * 127, ᐃ * 139, ᐃ * 166, ᐃ * 121);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 25, 64 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 59, ᐃ * 96, 97 * ᐃ, ᐃ * 128, ᐃ * 129, 151 * ᐃ);
		Ⲇ.bezierCurveTo(126 * ᐃ, 163 * ᐃ, 134 * ᐃ, 174 * ᐃ, 142 * ᐃ, 180 * ᐃ);
		Ⲇ.bezierCurveTo(114 * ᐃ, ᐃ * 170, 68 * ᐃ, 134 * ᐃ, 31 * ᐃ, 85 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 24, 71 * ᐃ, ᐃ * 24, 70 * ᐃ, ᐃ * 25, 65 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 161, ᐃ * 141);
		Ⲇ.bezierCurveTo(ᐃ * 181, 131 * ᐃ, ᐃ * 186, ᐃ * 135, 173 * ᐃ, 152 * ᐃ);
		Ⲇ.bezierCurveTo(163 * ᐃ, 163 * ᐃ, ᐃ * 155, 161 * ᐃ, 151 * ᐃ, 150 * ᐃ);
		Ⲇ.bezierCurveTo(147 * ᐃ, ᐃ * 140, 155 * ᐃ, ᐃ * 131, ᐃ * 175, 125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 190, ᐃ * 120, ᐃ * 196, ᐃ * 121, 189 * ᐃ, ᐃ * 143);
		Ⲇ.bezierCurveTo(ᐃ * 182, 167 * ᐃ, ᐃ * 169, ᐃ * 174, ᐃ * 157, 174 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 138, ᐃ * 172, 139 * ᐃ, 162 * ᐃ, 140 * ᐃ, 156 * ᐃ);
		ΔΔ(Ⲇ, ⵠᐃᐃᐃᐃ, Δⵠ[ⲆΔᐃΔⵠ], ᐃ * 4);
		Ⲇ.translate(-ⵠⵠⲆⲆⵠ * ᐃ, ᐃ * -30);
		Ⲇ.translate(ⵠⲆⵠⵠⲆ * ᐃ, ᐃ * 70);
		Ⲇ.translate(5 * ᐃ, 10 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 58, ᐃ * 33);
		Ⲇ.bezierCurveTo(ᐃ * 81, 22 * ᐃ, 93 * ᐃ, ᐃ * 26, 123 * ᐃ, 47 * ᐃ);
		Ⲇ.bezierCurveTo(160 * ᐃ, 73 * ᐃ, 169 * ᐃ, 80 * ᐃ, 191 * ᐃ, 99 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 202, 107 * ᐃ, 211 * ᐃ, 118 * ᐃ, 195 * ᐃ, 151 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 181, 183 * ᐃ, 157 * ᐃ, 192 * ᐃ, ᐃ * 129, ᐃ * 174);
		Ⲇ.bezierCurveTo(78 * ᐃ, 140 * ᐃ, ᐃ * 68, 129 * ᐃ, 37 * ᐃ, 94 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 15, ᐃ * 68, 25 * ᐃ, ᐃ * 52, 56 * ᐃ, 34 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(-5 * ᐃ, -ΔΔΔᐃⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(58 * ᐃ, ᐃ * 33);
		Ⲇ.bezierCurveTo(81 * ᐃ, ᐃ * 22, ᐃ * 93, 26 * ᐃ, 123 * ᐃ, 47 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 160, 73 * ᐃ, 169 * ᐃ, 80 * ᐃ, 191 * ᐃ, ᐃ * 99);
		Ⲇ.bezierCurveTo(ᐃ * 202, ᐃ * 107, ᐃ * 211, 118 * ᐃ, 195 * ᐃ, 151 * ᐃ);
		Ⲇ.bezierCurveTo(181 * ᐃ, 183 * ᐃ, ᐃ * 157, 192 * ᐃ, ᐃ * 129, 174 * ᐃ);
		Ⲇ.bezierCurveTo(78 * ᐃ, 140 * ᐃ, 68 * ᐃ, ᐃ * 129, ᐃ * 37, 94 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * Δⵠᐃⵠᐃ, 68 * ᐃ, ᐃ * 25, ᐃ * 52, ᐃ * 56, ᐃ * 34);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ᐃⲆᐃⵠ], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(167 * ᐃ, ᐃ * 120);
		Ⲇ.bezierCurveTo(ᐃ * 196, ᐃ * 106, 207 * ᐃ, ᐃ * 111, ᐃ * 199, ᐃ * 135);
		Ⲇ.bezierCurveTo(ᐃ * 185, 172 * ᐃ, ᐃ * 166, 187 * ᐃ, ᐃ * 145, ᐃ * 179);
		Ⲇ.bezierCurveTo(118 * ᐃ, 166 * ᐃ, 127 * ᐃ, 139 * ᐃ, ᐃ * 166, ᐃ * 121);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(25 * ᐃ, 64 * ᐃ);
		Ⲇ.bezierCurveTo(59 * ᐃ, 96 * ᐃ, 97 * ᐃ, ᐃ * 128, 129 * ᐃ, 151 * ᐃ);
		Ⲇ.bezierCurveTo(126 * ᐃ, ᐃ * 163, 134 * ᐃ, 174 * ᐃ, ᐃ * 142, ᐃ * 180);
		Ⲇ.bezierCurveTo(114 * ᐃ, 170 * ᐃ, 68 * ᐃ, 134 * ᐃ, 31 * ᐃ, ᐃ * 85);
		Ⲇ.bezierCurveTo(ᐃ * 24, 71 * ᐃ, 24 * ᐃ, ᐃ * 70, 25 * ᐃ, 65 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(161 * ᐃ, ᐃ * 141);
		Ⲇ.bezierCurveTo(ᐃ * 181, 131 * ᐃ, 186 * ᐃ, ᐃ * 135, ᐃ * 173, ᐃ * 152);
		Ⲇ.bezierCurveTo(163 * ᐃ, ᐃ * 163, ᐃ * 155, ᐃ * 161, 151 * ᐃ, 150 * ᐃ);
		Ⲇ.bezierCurveTo(147 * ᐃ, 140 * ᐃ, ᐃ * 155, ᐃ * 131, 175 * ᐃ, ᐃ * 125);
		Ⲇ.bezierCurveTo(ᐃ * 190, ᐃ * 120, 196 * ᐃ, 121 * ᐃ, 189 * ᐃ, 143 * ᐃ);
		Ⲇ.bezierCurveTo(182 * ᐃ, 167 * ᐃ, ᐃ * 169, ᐃ * 174, 157 * ᐃ, 174 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 138, ᐃ * 172, ᐃ * 139, 162 * ᐃ, 140 * ᐃ, ᐃ * 156);
		ΔΔ(Ⲇ, undefined, Δⵠ[4], ᐃ * 4);
		Ⲇ.translate(ᐃ * 20, -80 * ᐃ);
		Ⲇ.translate(ᐃ * 5, ᐃ * ⵠⲆⲆⵠΔ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔⵠΔ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 58, 33 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 81, 22 * ᐃ, ᐃ * 93, 26 * ᐃ, ᐃ * 123, ᐃ * 47);
		Ⲇ.bezierCurveTo(160 * ᐃ, ᐃ * 73, ᐃ * 169, 80 * ᐃ, ᐃ * 191, 99 * ᐃ);
		Ⲇ.bezierCurveTo(202 * ᐃ, ᐃ * 107, 211 * ᐃ, 118 * ᐃ, 195 * ᐃ, ᐃ * 151);
		Ⲇ.bezierCurveTo(181 * ᐃ, ᐃ * 183, 157 * ᐃ, ᐃ * 192, 129 * ᐃ, ᐃ * 174);
		Ⲇ.bezierCurveTo(78 * ᐃ, ᐃ * 140, 68 * ᐃ, ᐃ * 129, ᐃ * 37, ᐃ * 94);
		Ⲇ.bezierCurveTo(15 * ᐃ, 68 * ᐃ, ᐃ * 25, ᐃ * 52, 56 * ᐃ, ᐃ * 34);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(-ⵠⲆⲆᐃ * ᐃ, -ⵠⲆⵠᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(58 * ᐃ, 33 * ᐃ);
		Ⲇ.bezierCurveTo(81 * ᐃ, 22 * ᐃ, ᐃ * 93, ᐃ * 26, 123 * ᐃ, 47 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 160, 73 * ᐃ, 169 * ᐃ, ᐃ * 80, 191 * ᐃ, ᐃ * 99);
		Ⲇ.bezierCurveTo(ᐃ * 202, ᐃ * 107, ᐃ * 211, ᐃ * 118, ᐃ * 195, ᐃ * 151);
		Ⲇ.bezierCurveTo(181 * ᐃ, 183 * ᐃ, 157 * ᐃ, ᐃ * 192, 129 * ᐃ, ᐃ * 174);
		Ⲇ.bezierCurveTo(78 * ᐃ, 140 * ᐃ, ᐃ * 68, 129 * ᐃ, ᐃ * 37, ᐃ * 94);
		Ⲇ.bezierCurveTo(ᐃ * ⵠⲆⵠⲆᐃ, 68 * ᐃ, 25 * ᐃ, ᐃ * 52, 56 * ᐃ, ᐃ * 34);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 167, ᐃ * 120);
		Ⲇ.bezierCurveTo(196 * ᐃ, ᐃ * 106, ᐃ * 207, ᐃ * 111, ᐃ * 199, 135 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 185, 172 * ᐃ, ᐃ * 166, ᐃ * 187, 145 * ᐃ, ᐃ * 179);
		Ⲇ.bezierCurveTo(118 * ᐃ, 166 * ᐃ, ᐃ * 127, ᐃ * 139, 166 * ᐃ, ᐃ * 121);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 25, 64 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 59, 96 * ᐃ, 97 * ᐃ, 128 * ᐃ, 129 * ᐃ, 151 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 126, ᐃ * 163, ᐃ * 134, ᐃ * 174, ᐃ * 142, 180 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 114, 170 * ᐃ, 68 * ᐃ, ᐃ * 134, ᐃ * 31, ᐃ * 85);
		Ⲇ.bezierCurveTo(24 * ᐃ, ᐃ * 71, 24 * ᐃ, 70 * ᐃ, ᐃ * 25, ᐃ * 65);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 161, ᐃ * 141);
		Ⲇ.bezierCurveTo(181 * ᐃ, ᐃ * 131, 186 * ᐃ, ᐃ * 135, 173 * ᐃ, ᐃ * 152);
		Ⲇ.bezierCurveTo(ᐃ * 163, ᐃ * 163, 155 * ᐃ, ᐃ * 161, 151 * ᐃ, ᐃ * 150);
		Ⲇ.bezierCurveTo(ᐃ * 147, 140 * ᐃ, 155 * ᐃ, 131 * ᐃ, ᐃ * 175, 125 * ᐃ);
		Ⲇ.bezierCurveTo(190 * ᐃ, ᐃ * 120, 196 * ᐃ, 121 * ᐃ, ᐃ * 189, 143 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 182, ᐃ * 167, ᐃ * 169, 174 * ᐃ, ᐃ * 157, ᐃ * 174);
		Ⲇ.bezierCurveTo(ᐃ * 138, ᐃ * 172, 139 * ᐃ, 162 * ᐃ, 140 * ᐃ, 156 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔⵠⵠⲆ], 4 * ᐃ);
		return ΔⲆ
	}

	function ᐃᐃΔΔⲆⲆᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 290 * ᐃ;
		ΔⲆ.height = 525 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ⵠΔⵠᐃⲆ * ᐃ, ᐃᐃⲆΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 112, 356 * ᐃ);
		Ⲇ.bezierCurveTo(124 * ᐃ, ᐃ * 220.5, ᐃ * 124, ᐃ * 220.5, 136 * ᐃ, 85 * ᐃ);
		Ⲇ.bezierCurveTo(162.5 * ᐃ, ᐃ * 65.5, ᐃ * 162.5, ᐃ * 65.5, ᐃ * 189, ᐃ * 46);
		Ⲇ.bezierCurveTo(208.5 * ᐃ, 72.5 * ᐃ, ᐃ * 208.5, ᐃ * 72.5, ᐃ * 228, ᐃ * 99);
		Ⲇ.bezierCurveTo(ᐃ * 200, ᐃ * 232, 200 * ᐃ, ᐃ * 232, 172 * ᐃ, 365 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.save();
		Ⲇ.translate(131 * ᐃ, ᐃ * 423);
		Ⲇ.rotate(.16);
		ᐃΔⵠ(Ⲇ, -ⲆΔᐃⵠⵠΔᐃ * ᐃ, ᐃ * -53, ᐃ * 28, ᐃ * 106, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.save();
		Ⲇ.translate(122 * ᐃ, ᐃ * 480);
		Ⲇ.rotate(1.72);
		ᐃᐃⲆΔ(Ⲇ, ⵠⵠᐃΔ, 26.476404589747453 * ᐃ, ᐃ * ⵠⲆΔᐃᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(210 * ᐃ, ᐃ * 387);
		Ⲇ.bezierCurveTo(138 * ᐃ, ᐃ * 376, ᐃ * 138, 376 * ᐃ, 66 * ᐃ, ᐃ * 365);
		Ⲇ.bezierCurveTo(ᐃ * 76, 355 * ᐃ, 76 * ᐃ, ᐃ * 355, ᐃ * 86, 345 * ᐃ);
		Ⲇ.bezierCurveTo(99 * ᐃ, 346.5 * ᐃ, ᐃ * 99, ᐃ * 346.5, 112 * ᐃ, 348 * ᐃ);
		Ⲇ.bezierCurveTo(128.5 * ᐃ, 344 * ᐃ, ᐃ * 128.5, ᐃ * 344, ᐃ * 145, 340 * ᐃ);
		Ⲇ.bezierCurveTo(158 * ᐃ, ᐃ * 348, 158 * ᐃ, ᐃ * 348, 171 * ᐃ, 356 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 184, 358 * ᐃ, 184 * ᐃ, 358 * ᐃ, 197 * ᐃ, 360 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(129 * ᐃ, ᐃ * 338);
		Ⲇ.bezierCurveTo(137 * ᐃ, ᐃ * 336, ᐃ * 137, 336 * ᐃ, ᐃ * 145, ᐃ * 334);
		Ⲇ.bezierCurveTo(ᐃ * 152.5, ᐃ * 338, 152.5 * ᐃ, 338 * ᐃ, 160 * ᐃ, ᐃ * 342);
		Ⲇ.bezierCurveTo(184 * ᐃ, ᐃ * 224, ᐃ * 184, 224 * ᐃ, ᐃ * 208, 106 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 197, 88 * ᐃ, ᐃ * 187, 70 * ᐃ, ᐃ * 186, ᐃ * 70);
		Ⲇ.bezierCurveTo(ᐃ * 169.5, 83 * ᐃ, 169.5 * ᐃ, ᐃ * 83, ᐃ * 153, ᐃ * 96);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = ΔⲆᐃⲆ;
		Ⲇ.translate(ᐃ * -20, ᐃ * -ⲆⵠⲆΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(112 * ᐃ, 356 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 124, ᐃ * 220.5, 124 * ᐃ, ᐃ * 220.5, 136 * ᐃ, ᐃ * 85);
		Ⲇ.bezierCurveTo(162.5 * ᐃ, 65.5 * ᐃ, ᐃ * 162.5, ᐃ * 65.5, ᐃ * 189, ᐃ * 46);
		Ⲇ.bezierCurveTo(ᐃ * 208.5, 72.5 * ᐃ, ᐃ * 208.5, ᐃ * 72.5, ᐃ * 228, ᐃ * 99);
		Ⲇ.bezierCurveTo(ᐃ * 200, 232 * ᐃ, ᐃ * 200, ᐃ * 232, ᐃ * 172, ᐃ * 365);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 12.5 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(131 * ᐃ, ᐃ * 423);
		Ⲇ.rotate(.16);
		ᐃΔⵠ(Ⲇ, ᐃ * -14, ᐃ * -53, ᐃ * 28, 106 * ᐃ, ᐃ * ΔⵠⵠᐃⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], 12.5 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(122 * ᐃ, 480 * ᐃ);
		Ⲇ.rotate(1.72);
		ᐃᐃⲆΔ(Ⲇ, ⵠᐃΔⲆ, ᐃ * 26.476404589747453, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 12.5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 210, ᐃ * 387);
		Ⲇ.bezierCurveTo(138 * ᐃ, 376 * ᐃ, ᐃ * 138, 376 * ᐃ, ᐃ * 66, ᐃ * 365);
		Ⲇ.bezierCurveTo(ᐃ * 76, 355 * ᐃ, 76 * ᐃ, ᐃ * 355, 86 * ᐃ, 345 * ᐃ);
		Ⲇ.bezierCurveTo(99 * ᐃ, ᐃ * 346.5, 99 * ᐃ, 346.5 * ᐃ, 112 * ᐃ, 348 * ᐃ);
		Ⲇ.bezierCurveTo(128.5 * ᐃ, ᐃ * 344, 128.5 * ᐃ, ᐃ * 344, ᐃ * 145, ᐃ * 340);
		Ⲇ.bezierCurveTo(158 * ᐃ, 348 * ᐃ, ᐃ * 158, ᐃ * 348, 171 * ᐃ, 356 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 184, 358 * ᐃ, 184 * ᐃ, 358 * ᐃ, 197 * ᐃ, 360 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔΔΔ], Δⵠ[2], 12.5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(129 * ᐃ, ᐃ * 338);
		Ⲇ.bezierCurveTo(137 * ᐃ, ᐃ * 336, ᐃ * 137, 336 * ᐃ, ᐃ * 145, 334 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 152.5, ᐃ * 338, ᐃ * 152.5, ᐃ * 338, 160 * ᐃ, ᐃ * 342);
		Ⲇ.bezierCurveTo(ᐃ * 184, 224 * ᐃ, 184 * ᐃ, 224 * ᐃ, 208 * ᐃ, ᐃ * 106);
		Ⲇ.bezierCurveTo(ᐃ * 197, ᐃ * 88, ᐃ * 187, 70 * ᐃ, ᐃ * 186, ᐃ * 70);
		Ⲇ.bezierCurveTo(169.5 * ᐃ, ᐃ * 83, 169.5 * ᐃ, 83 * ᐃ, 153 * ᐃ, ᐃ * 96);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⲆ]);
		return ΔⲆ
	}

	function ⲆⵠᐃⲆᐃᐃⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 290 * ᐃ;
		ΔⲆ.height = ᐃ * 525;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ᐃ * 20, 20 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(111 * ᐃ, 351 * ᐃ);
		Ⲇ.bezierCurveTo(128.5 * ᐃ, ᐃ * 218.5, ᐃ * 128.5, 218.5 * ᐃ, 146 * ᐃ, 86 * ᐃ);
		Ⲇ.bezierCurveTo(166.5 * ᐃ, ᐃ * 66.5, 166.5 * ᐃ, ᐃ * 66.5, ᐃ * 187, ᐃ * 47);
		Ⲇ.bezierCurveTo(ᐃ * 201, 71.5 * ᐃ, ᐃ * 201, ᐃ * 71.5, ᐃ * 215, 96 * ᐃ);
		Ⲇ.bezierCurveTo(193 * ᐃ, 228.5 * ᐃ, ᐃ * 193, 228.5 * ᐃ, ᐃ * 171, 361 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ]);
		Ⲇ.save();
		Ⲇ.translate(129.5 * ᐃ, 424 * ᐃ);
		Ⲇ.rotate(.16);
		ᐃΔⵠ(Ⲇ, -15.5 * ᐃ, ᐃ * -63, 31 * ᐃ, ᐃ * 126, ᐃⵠᐃⵠⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠΔ]);
		ᐃΔΔ(Ⲇ, ᐃ * 121, 480 * ᐃ, ᐃ * 20.396078054371138);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(90 * ᐃ, 311 * ᐃ);
		Ⲇ.bezierCurveTo(95 * ᐃ, ᐃ * 324, 95 * ᐃ, 324 * ᐃ, ᐃⵠΔᐃⵠ * ᐃ, ᐃ * 337);
		Ⲇ.bezierCurveTo(ᐃ * 141.5, ᐃ * 345.5, 141.5 * ᐃ, ᐃ * 345.5, ᐃ * 183, 354 * ᐃ);
		Ⲇ.bezierCurveTo(193.5 * ᐃ, 342.5 * ᐃ, ᐃ * 193.5, 342.5 * ᐃ, 204 * ᐃ, 331 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 202, 354 * ᐃ, 202 * ᐃ, 354 * ᐃ, ᐃ * 200, 377 * ᐃ);
		Ⲇ.bezierCurveTo(147 * ᐃ, ᐃ * 388, 106 * ᐃ, ᐃ * 371, 79 * ᐃ, ᐃ * 356);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = ΔⵠΔ;
		Ⲇ.translate(-20 * ᐃ, ᐃ * -20);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 111, 351 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 128.5, 218.5 * ᐃ, 128.5 * ᐃ, ᐃ * 218.5, 146 * ᐃ, 86 * ᐃ);
		Ⲇ.bezierCurveTo(166.5 * ᐃ, 66.5 * ᐃ, ᐃ * 166.5, 66.5 * ᐃ, ᐃ * 187, 47 * ᐃ);
		Ⲇ.bezierCurveTo(201 * ᐃ, ᐃ * 71.5, ᐃ * 201, ᐃ * 71.5, ᐃ * 215, 96 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 193, ᐃ * 228.5, 193 * ᐃ, 228.5 * ᐃ, 171 * ᐃ, 361 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔ], Δⵠ[ΔΔᐃΔⵠ], ᐃ * 12.5);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 129.5, ᐃ * 424);
		Ⲇ.rotate(.16);
		ᐃΔⵠ(Ⲇ, ᐃ * -15.5, -63 * ᐃ, ᐃ * 31, ᐃ * 126, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], ᐃ * 12.5);
		ᐃΔΔ(Ⲇ, 121 * ᐃ, 480 * ᐃ, 20.396078054371138 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆⵠᐃⵠ], Δⵠ[5], 12.5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(90 * ᐃ, ᐃ * 311);
		Ⲇ.bezierCurveTo(ᐃ * 95, 324 * ᐃ, 95 * ᐃ, ᐃ * 324, ᐃΔᐃⵠⵠ * ᐃ, 337 * ᐃ);
		Ⲇ.bezierCurveTo(141.5 * ᐃ, ᐃ * 345.5, 141.5 * ᐃ, 345.5 * ᐃ, ᐃ * 183, ᐃ * 354);
		Ⲇ.bezierCurveTo(ᐃ * 193.5, 342.5 * ᐃ, 193.5 * ᐃ, 342.5 * ᐃ, ᐃ * 204, ᐃ * 331);
		Ⲇ.bezierCurveTo(202 * ᐃ, 354 * ᐃ, ᐃ * 202, ᐃ * 354, ᐃ * 200, ᐃ * 377);
		Ⲇ.bezierCurveTo(147 * ᐃ, 388 * ᐃ, 106 * ᐃ, ᐃ * 371, ᐃ * 79, ᐃ * 356);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * 12.5);
		return ΔⲆ
	}
	const ᐃⲆⵠᐃⵠⲆᐃ = 6736977;

	function ᐃᐃⲆⲆⲆᐃΔ(ᐃⵠⲆΔᐃΔⲆ) {
		const ᐃⲆⵠᐃⵠⲆᐃ = function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("mousemove", (function() {
				ᐃⲆⵠᐃⵠⲆᐃ()
			}))
		};
		ᐃⲆⵠᐃⵠⲆᐃ()
	}
	const ᐃⵠⲆΔᐃΔⲆ = ᐃᐃⲆⲆⲆᐃΔ + ";" + "let ᐃⵠⲆΔᐃΔⲆ = " + ᐃᐃⲆⲆⲆᐃΔ + ";";
	const ᐃΔⵠΔⲆΔΔⵠᐃ = ᐃⵠⲆΔᐃΔⲆ + "let ᐃⵠⵠⵠΔⵠΔ = 12105597; try { ᐃⵠⵠⵠΔⵠΔ = ᐃᐃⲆⲆⲆᐃΔ; } catch (ΔⲆⲆᐃᐃᐃⲆ) { ᐃⵠⲆΔᐃΔⲆ (); };";
	ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]](ᐃΔⵠΔⲆΔΔⵠᐃ, 0);

	function ⲆᐃⵠᐃᐃⲆΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 154;
		ΔⲆ.height = ᐃ * 261;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ΔΔᐃ, ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(125 * ᐃ, 69 * ᐃ);
		Ⲇ.bezierCurveTo(123.5 * ᐃ, ᐃ * 141.5, ᐃ * 123.5, 141.5 * ᐃ, 122 * ᐃ, ᐃ * 214);
		Ⲇ.bezierCurveTo(123 * ᐃ, 228 * ᐃ, 119 * ᐃ, 239 * ᐃ, 102 * ᐃ, 239 * ᐃ);
		Ⲇ.bezierCurveTo(90 * ᐃ, 238 * ᐃ, 86 * ᐃ, 225 * ᐃ, ᐃ * 89, ᐃ * 197);
		Ⲇ.bezierCurveTo(92 * ᐃ, 159 * ᐃ, ᐃ * 92, ᐃ * 141, ᐃ * 94, ᐃ * 84);
		Ⲇ.bezierCurveTo(94 * ᐃ, 58 * ᐃ, ᐃ * 87, ᐃ * 50, 73 * ᐃ, 52 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 53, 54 * ᐃ, 54 * ᐃ, ᐃ * 92, ᐃ * 34, ᐃ * 87);
		Ⲇ.bezierCurveTo(ᐃ * 13, 85 * ᐃ, 22 * ᐃ, ᐃ * 58, 34 * ᐃ, 40 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 44, 24 * ᐃ, ᐃ * 68, ᐃ * 17, 86 * ᐃ, ᐃ * 21);
		Ⲇ.bezierCurveTo(ᐃ * 111, ᐃ * 23, 123 * ᐃ, ᐃ * 39, ᐃ * 125, ᐃ * 67);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠ]);
		Ⲇ.globalAlpha = Ⲇⵠᐃ;
		Ⲇ.translate(Δⵠⵠⵠ, -ᐃᐃᐃΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 125, ᐃ * 69);
		Ⲇ.bezierCurveTo(ᐃ * 123.5, 141.5 * ᐃ, 123.5 * ᐃ, 141.5 * ᐃ, 122 * ᐃ, ᐃ * 214);
		Ⲇ.bezierCurveTo(ᐃ * 123, 228 * ᐃ, 119 * ᐃ, ᐃ * 239, 102 * ᐃ, ᐃ * 239);
		Ⲇ.bezierCurveTo(ᐃ * 90, 238 * ᐃ, 86 * ᐃ, ᐃ * 225, 89 * ᐃ, 197 * ᐃ);
		Ⲇ.bezierCurveTo(92 * ᐃ, 159 * ᐃ, ᐃ * 92, 141 * ᐃ, ᐃ * 94, 84 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 94, 58 * ᐃ, 87 * ᐃ, ᐃ * 50, ᐃ * 73, 52 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 53, 54 * ᐃ, 54 * ᐃ, ᐃ * 92, 34 * ᐃ, 87 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 13, ᐃ * 85, ᐃ * 22, 58 * ᐃ, ᐃ * 34, ᐃ * 40);
		Ⲇ.bezierCurveTo(ᐃ * 44, ᐃ * 24, ᐃ * 68, ᐃ * ᐃⵠⲆΔⲆᐃΔ, 86 * ᐃ, ᐃ * 21);
		Ⲇ.bezierCurveTo(111 * ᐃ, 23 * ᐃ, ᐃ * 123, ᐃ * 39, 125 * ᐃ, ᐃ * 67);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔᐃ], Δⵠ[ⵠΔⵠΔ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(31 * ᐃ, ᐃ * 43);
		Ⲇ.bezierCurveTo(31 * ᐃ, 61 * ᐃ, 43 * ᐃ, 70 * ᐃ, ᐃ * 51, 75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 48, ᐃ * 84, 41 * ᐃ, ᐃ * 89, ᐃ * 33, 86 * ᐃ);
		Ⲇ.bezierCurveTo(23 * ᐃ, ᐃ * 88, ⲆⵠⲆⵠⲆⲆΔ * ᐃ, ᐃ * 76, 23 * ᐃ, 62 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 45, ᐃ * 29);
		Ⲇ.bezierCurveTo(49 * ᐃ, 45 * ᐃ, ᐃ * 61, 54 * ᐃ, 64 * ᐃ, ᐃ * 55);
		Ⲇ.bezierCurveTo(ᐃ * 67.5, 53 * ᐃ, 67.5 * ᐃ, 53 * ᐃ, ᐃ * 71, ᐃ * 51);
		Ⲇ.bezierCurveTo(ᐃ * 80, 44 * ᐃ, ᐃ * 83, ᐃ * 33, ᐃ * 82, ᐃ * 20);
		Ⲇ.bezierCurveTo(ᐃ * 59, ᐃ * ⲆⵠⵠΔᐃ, ᐃ * 51, 23 * ᐃ, ᐃ * 45, 30 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔΔⲆᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 86, ᐃ * 56);
		Ⲇ.bezierCurveTo(90 * ᐃ, ᐃ * 33, 103 * ᐃ, ᐃ * 25, ᐃ * 105, ᐃ * 27);
		Ⲇ.bezierCurveTo(116 * ᐃ, 31 * ᐃ, 121 * ᐃ, ᐃ * 45, 122 * ᐃ, 50 * ᐃ);
		Ⲇ.bezierCurveTo(112 * ᐃ, ᐃ * 62, 103 * ᐃ, 63 * ᐃ, ᐃ * 91, ᐃ * 62);
		Ⲇ.bezierCurveTo(89 * ᐃ, 59.5 * ᐃ, 89 * ᐃ, ᐃ * 59.5, 87 * ᐃ, 57 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 93, 81 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 109, ᐃ * 82, ᐃ * 123, ᐃ * 70, ᐃ * 124, ᐃ * 63);
		Ⲇ.bezierCurveTo(124 * ᐃ, ᐃ * 75.5, 124 * ᐃ, ᐃ * 75.5, ᐃ * 124, 88 * ᐃ);
		Ⲇ.bezierCurveTo(119 * ᐃ, ᐃ * 99, ᐃ * 103, 103 * ᐃ, ᐃ * 94, ᐃ * 103);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(93 * ᐃ, ᐃ * 124);
		Ⲇ.bezierCurveTo(ᐃ * 108, ᐃ * 125, ᐃ * 122, 113 * ᐃ, ᐃ * 124, 106 * ᐃ);
		Ⲇ.bezierCurveTo(124 * ᐃ, 119 * ᐃ, 124 * ᐃ, 129 * ᐃ, 124 * ᐃ, ᐃ * 132);
		Ⲇ.bezierCurveTo(ᐃ * 110, 147 * ᐃ, ᐃ * 94, ᐃ * 148, 90 * ᐃ, ᐃ * 147);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(90 * ᐃ, 170 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 104, 166 * ᐃ, ᐃ * 122, ᐃ * 158, ᐃ * 122, ᐃ * 151);
		Ⲇ.bezierCurveTo(ᐃ * 122, ᐃ * 162.5, 122 * ᐃ, 162.5 * ᐃ, ᐃ * 122, ᐃ * 174);
		Ⲇ.bezierCurveTo(111 * ᐃ, ᐃ * 191, 97 * ᐃ, ᐃ * 191, ᐃ * 89, ᐃ * 191);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 88, 208 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 100, 209 * ᐃ, ᐃ * 115, 205 * ᐃ, ᐃ * 122, ᐃ * 193);
		Ⲇ.bezierCurveTo(122 * ᐃ, ᐃ * 205.5, ᐃ * 122, ᐃ * 205.5, ᐃ * 122, ᐃ * 218);
		Ⲇ.bezierCurveTo(ᐃ * 115, 229 * ᐃ, 103 * ᐃ, 235 * ᐃ, ᐃ * 90, 228 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 88, 224 * ᐃ, ᐃ * 88, ᐃ * 217, ᐃ * 88, ᐃ * 211);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⲆ]);
		Ⲇ.globalAlpha = .4;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 22, ᐃ * 81);
		Ⲇ.bezierCurveTo(32 * ᐃ, 84 * ᐃ, ᐃ * 41, ᐃ * 81, 45 * ᐃ, ᐃ * 68);
		Ⲇ.bezierCurveTo(ᐃ * 50, 50 * ᐃ, ᐃ * 62, ᐃ * 40, ᐃ * 79, 43 * ᐃ);
		Ⲇ.bezierCurveTo(95 * ᐃ, 45 * ᐃ, 102 * ᐃ, 58 * ᐃ, ᐃ * 101, 81 * ᐃ);
		Ⲇ.bezierCurveTo(99.5 * ᐃ, 120.5 * ᐃ, ᐃ * 99.5, 120.5 * ᐃ, ᐃ * 98, 160 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 96.5, ᐃ * 191.5, 96.5 * ᐃ, ᐃ * 191.5, ᐃ * 95, 223 * ᐃ);
		Ⲇ.bezierCurveTo(93 * ᐃ, 232 * ᐃ, 101 * ᐃ, 235 * ᐃ, ᐃ * 108, 238 * ᐃ);
		Ⲇ.bezierCurveTo(100 * ᐃ, ᐃ * 240, ᐃ * 90, 233 * ᐃ, ᐃ * 90, 224 * ᐃ);
		Ⲇ.bezierCurveTo(92 * ᐃ, ᐃ * 157, 92 * ᐃ, ᐃ * 157, 94 * ᐃ, 90 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 94, ᐃ * 56, 89 * ᐃ, 53 * ᐃ, 77 * ᐃ, 51 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 58, ᐃ * 50, ᐃ * 54, 59 * ᐃ, ᐃ * 49, 75 * ᐃ);
		Ⲇ.bezierCurveTo(44 * ᐃ, 91 * ᐃ, 28 * ᐃ, ᐃ * 90, 23 * ᐃ, ᐃ * 81);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = ᐃⲆΔ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(82 * ᐃ, 123 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 88, ᐃ * 130, ᐃ * 88, ᐃ * 127, 94 * ᐃ, ᐃ * 128);
		Ⲇ.bezierCurveTo(91 * ᐃ, ᐃ * 136, ᐃ * 94, 137 * ᐃ, 99 * ᐃ, 142 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 97, 149 * ᐃ, 99 * ᐃ, 152 * ᐃ, ᐃ * 105, ᐃ * 155);
		Ⲇ.bezierCurveTo(107 * ᐃ, ᐃ * 159, ᐃ * 113, ᐃ * 159, ᐃ * 120, 158 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 121, 160 * ᐃ, ᐃ * 125, ᐃ * 163, 132 * ᐃ, ᐃ * 163);
		Ⲇ.bezierCurveTo(ᐃ * 133, 166 * ᐃ, 136 * ᐃ, ᐃ * 169, ᐃ * 138, 170 * ᐃ);
		Ⲇ.bezierCurveTo(133 * ᐃ, 171 * ᐃ, 132 * ᐃ, 172 * ᐃ, 129 * ᐃ, 174 * ᐃ);
		Ⲇ.bezierCurveTo(122 * ᐃ, ᐃ * 170, 120 * ᐃ, 170 * ᐃ, 116 * ᐃ, 174 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 108, 170.5 * ᐃ, ᐃ * 108, 170.5 * ᐃ, 100 * ᐃ, ᐃ * 167);
		Ⲇ.bezierCurveTo(ᐃ * 95, 172 * ᐃ, ᐃ * 94, ᐃ * 179, ᐃ * 95, 184 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 87, 185 * ᐃ, ᐃ * 87, ᐃ * 189, ᐃ * 88, 194 * ᐃ);
		Ⲇ.bezierCurveTo(82 * ᐃ, 194 * ᐃ, 81 * ᐃ, 195 * ᐃ, 79 * ᐃ, 197 * ᐃ);
		Ⲇ.bezierCurveTo(78 * ᐃ, ᐃ * 192, ᐃ * 78, ᐃ * 191, 77 * ᐃ, ᐃ * 189);
		Ⲇ.bezierCurveTo(81 * ᐃ, 185 * ᐃ, ᐃ * 82, 183 * ᐃ, ᐃ * 80, 176 * ᐃ);
		Ⲇ.bezierCurveTo(89 * ᐃ, 170 * ᐃ, ᐃ * 92, ᐃ * 168, ᐃ * 95, 163 * ᐃ);
		Ⲇ.bezierCurveTo(91 * ᐃ, ᐃ * 151, 88 * ᐃ, 151 * ᐃ, 82 * ᐃ, ᐃ * 147);
		Ⲇ.bezierCurveTo(ᐃ * 85, 142 * ᐃ, ᐃ * 85, ᐃ * 137, ᐃ * 81, ᐃ * 133);
		Ⲇ.bezierCurveTo(84 * ᐃ, 127 * ᐃ, 84 * ᐃ, 125 * ᐃ, 82 * ᐃ, 124 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆⵠ], Δⵠ[5], ᐃ * 4);
		ᐃΔΔ(Ⲇ, 107 * ᐃ, ᐃ * 152, ᐃΔⲆⲆⵠ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[6]);
		ᐃΔΔ(Ⲇ, ᐃ * 105, ᐃ * 173, ᐃ * 9);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆⵠⲆ]);
		ᐃΔΔ(Ⲇ, ᐃ * 87, ᐃ * 161, 9 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[6]);
		ᐃΔΔ(Ⲇ, 106 * ᐃ, 147 * ᐃ, ᐃ * 4);
		ΔΔ(Ⲇ, Δⵠ[7]);
		ᐃΔΔ(Ⲇ, 104 * ᐃ, ᐃ * 167, 4 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[7]);
		ᐃΔΔ(Ⲇ, ᐃ * 86, 154 * ᐃ, ᐃᐃΔΔᐃ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[7]);
		return ΔⲆ
	}
	const ⵠᐃⵠΔ = ΔΔΔᐃ;

	function ᐃᐃᐃⲆⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 70 * ᐃ;
		var ⲆΔⲆ = ᐃ * 90;
		var ⵠΔΔ = 4 * ᐃ;
		var ⲆⲆⵠᐃ = ᐃ * 5;
		var w2 = ⲆⲆᐃ / ⲆᐃⵠΔ;
		var ⲆⲆⲆΔΔ = ⲆΔⲆ / ᐃⲆᐃᐃ;
		var ⵠⵠⵠⵠ = ᐃᐃᐃΔΔ * ᐃ;
		var ⵠᐃⲆᐃⲆⲆᐃ = ᐃ * ⲆΔⵠⲆⵠⵠΔ;
		var ᐃΔⵠⲆⵠⵠⲆ = ΔᐃⲆΔⵠΔᐃ * ᐃ;
		var ΔⲆⲆΔⵠᐃⲆ = ⵠᐃⲆᐃⲆⲆᐃ / ⲆⲆΔⲆ;
		var ΔⵠⵠᐃⲆⲆᐃ = ᐃΔⵠⲆⵠⵠⲆ / ΔⵠⲆᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.save();
		Ⲇ.translate(-80 * ᐃ, -70 * ᐃ + ⲆⲆⵠᐃ);
		Ⲇ.globalAlpha = .5;
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(130 * ᐃ, 79 * ᐃ, ᐃ * 132, ᐃ * 86, 130 * ᐃ, ᐃ * 93);
		Ⲇ.bezierCurveTo(128 * ᐃ, ᐃ * ᐃⲆᐃⵠΔ, ᐃ * 121, ᐃ * 107, ᐃ * 120, 107 * ᐃ);
		Ⲇ.bezierCurveTo(120 * ᐃ, 107 * ᐃ, 115 * ᐃ, ᐃ * 98, 115 * ᐃ, 92 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 115, 86 * ᐃ, ᐃ * 119, ᐃ * 76, ᐃ * 127, ᐃ * 73);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠ[254]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ᐃ * -80, -70 * ᐃ + ⲆⲆⵠᐃ);
		Ⲇ.globalAlpha = .5;
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(112 * ᐃ, ᐃ * 109, ᐃ * 111, 100 * ᐃ, ᐃ * 106, 93 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 104, 90 * ᐃ, ᐃ * 91, ᐃ * 87, 91 * ᐃ, ᐃ * 87);
		Ⲇ.bezierCurveTo(91 * ᐃ, ᐃ * 88, ᐃ * 91, 96 * ᐃ, 94 * ᐃ, 102 * ᐃ);
		Ⲇ.bezierCurveTo(97 * ᐃ, 108 * ᐃ, ᐃ * 106, ᐃ * 112, 113 * ᐃ, 112 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠ[254]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ᐃ * -80, -70 * ᐃ + ⲆⲆⵠᐃ);
		Ⲇ.globalAlpha = .5;
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(108 * ᐃ, ᐃ * 120, ᐃ * ΔᐃΔΔΔ, 119 * ᐃ, 91 * ᐃ, 127 * ᐃ);
		Ⲇ.bezierCurveTo(83 * ᐃ, ᐃ * 134, ᐃ * 82, ᐃ * 146, 83 * ᐃ, 146 * ᐃ);
		Ⲇ.bezierCurveTo(84 * ᐃ, 146 * ᐃ, 98 * ᐃ, ᐃ * 142, 103 * ᐃ, ᐃ * 138);
		Ⲇ.bezierCurveTo(107 * ᐃ, ᐃ * 135, 110 * ᐃ, ᐃ * 130, 112 * ᐃ, 121 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠ[254]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 3, ᐃ * -93 + ⲆⲆⵠᐃ);
		Ⲇ.rotate(Math.PI / ⲆⵠΔΔ);
		Ⲇ.globalAlpha = .5;
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(ᐃ * 130, 79 * ᐃ, 132 * ᐃ, 86 * ᐃ, 130 * ᐃ, 93 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 128, ᐃ * 100, ᐃ * 121, 107 * ᐃ, 120 * ᐃ, ᐃ * 107);
		Ⲇ.bezierCurveTo(120 * ᐃ, ᐃ * 107, ᐃ * 115, ᐃ * 98, ᐃ * 115, 92 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 115, ᐃ * 86, ᐃ * 119, ᐃ * 76, ᐃ * 127, ᐃ * 73);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠ[254]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(-80 * ᐃ, ᐃ * -70);
		Ⲇ.globalAlpha = ⵠᐃⵠΔ;
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(130 * ᐃ, ᐃ * 79, 132 * ᐃ, ᐃ * 86, ᐃ * 130, ᐃ * 93);
		Ⲇ.bezierCurveTo(128 * ᐃ, ⲆᐃⲆⵠⲆ * ᐃ, ᐃ * 121, ᐃ * 107, ᐃ * 120, ᐃ * 107);
		Ⲇ.bezierCurveTo(120 * ᐃ, ᐃ * 107, ᐃ * 115, 98 * ᐃ, ᐃ * 115, 92 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 115, 86 * ᐃ, ᐃ * 119, 76 * ᐃ, 127 * ᐃ, 73 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ], Δⵠ[Δᐃⵠⵠ], ⵠΔΔ);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(-80 * ᐃ, -70 * ᐃ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(ᐃ * 112, 109 * ᐃ, ᐃ * 111, ᐃ * 100, ᐃ * 106, 93 * ᐃ);
		Ⲇ.bezierCurveTo(104 * ᐃ, ᐃ * 90, 91 * ᐃ, ᐃ * 87, ᐃ * 91, 87 * ᐃ);
		Ⲇ.bezierCurveTo(91 * ᐃ, 88 * ᐃ, 91 * ᐃ, 96 * ᐃ, ᐃ * 94, ᐃ * 102);
		Ⲇ.bezierCurveTo(97 * ᐃ, ᐃ * 108, 106 * ᐃ, 112 * ᐃ, 113 * ᐃ, ᐃ * 112);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ΔⲆᐃᐃ], ⵠΔΔ);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ᐃ * -80, -70 * ᐃ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(ᐃ * 108, 120 * ᐃ, 100 * ᐃ, ᐃ * 119, 91 * ᐃ, ᐃ * 127);
		Ⲇ.bezierCurveTo(ᐃ * 83, 134 * ᐃ, ᐃ * 82, 146 * ᐃ, ᐃ * 83, ᐃ * 146);
		Ⲇ.bezierCurveTo(ᐃ * 84, ᐃ * 146, ᐃ * 98, 142 * ᐃ, ᐃ * 103, 138 * ᐃ);
		Ⲇ.bezierCurveTo(107 * ᐃ, ᐃ * 135, ᐃ * 110, 130 * ᐃ, 112 * ᐃ, ᐃ * 121);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[Ⲇⵠᐃ], ⵠΔΔ);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ᐃΔⵠⲆ * ᐃ, -93 * ᐃ);
		Ⲇ.rotate(Math.PI / 5);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(130 * ᐃ, ᐃ * 79, ᐃ * 132, 86 * ᐃ, 130 * ᐃ, ᐃ * 93);
		Ⲇ.bezierCurveTo(128 * ᐃ, ᐃ * 100, ᐃ * 121, ᐃ * 107, ᐃ * 120, ᐃ * 107);
		Ⲇ.bezierCurveTo(ᐃ * 120, ᐃ * 107, ᐃ * 115, 98 * ᐃ, ᐃ * 115, ᐃ * 92);
		Ⲇ.bezierCurveTo(ᐃ * 115, 86 * ᐃ, ᐃ * 119, ᐃ * 76, 127 * ᐃ, ᐃ * 73);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃᐃ], Δⵠ[1], ⵠΔΔ);
		Ⲇ.restore();
		return ΔⲆ
	}

	function ⵠⲆᐃⵠᐃ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 180;
		var ⲆΔⲆ = 210 * ᐃ;
		var ΔⲆΔ = 60 * ᐃ;
		var ⵠⵠⵠⵠ = ΔⲆΔ / 4;
		var ⲆⲆⵠᐃ = 20 * ᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.save();
		Ⲇ.translate(ⲆⲆᐃ / ⲆᐃΔⲆ - ⲆⲆⵠⲆ * ᐃ, ⲆΔⲆ / ΔⲆᐃΔ - 35 * ᐃ + ⲆⲆⵠᐃ);
		Ⲇ.rotate(Math.PI / -1.8);
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(ᐃ * Δⵠⵠⵠ, -ⲆᐃΔᐃⵠ * ᐃ);
		ᐃᐃⲆΔ(Ⲇ, 5, ΔⲆΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ⲆⲆᐃ / 2 + ᐃ * ⵠΔΔⲆΔ, ⲆΔⲆ / 2 + 15 * ᐃ + ⲆⲆⵠᐃ);
		Ⲇ.rotate(Math.PI / 2);
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(0 * ᐃ, -ⵠΔᐃⲆⵠ * ᐃ);
		ᐃᐃⲆΔ(Ⲇ, 5, ΔⲆΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ⲆⲆᐃ / ΔⲆᐃΔ - 50 * ᐃ, ⲆΔⲆ / ΔⲆᐃΔ + ᐃ * 40 + ⲆⲆⵠᐃ);
		Ⲇ.rotate(Math.PI / 3);
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(0, ᐃ * -ΔΔᐃΔᐃΔΔ);
		ᐃᐃⲆΔ(Ⲇ, ᐃᐃᐃΔⵠ, ΔⲆΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ⲆⲆᐃ / ΔΔⲆⲆ - Ⲇᐃⵠ * ᐃ, ⲆΔⲆ / 2 - 35 * ᐃ);
		Ⲇ.rotate(Math.PI / -1.8);
		Ⲇ.globalAlpha = ⵠⲆⲆ;
		Ⲇ.translate(0 * ᐃ, -ΔⲆΔⲆΔ * ᐃ);
		ᐃᐃⲆΔ(Ⲇ, 5, ΔⲆΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ⲆⲆᐃ / 2 + ᐃ * 10, ⲆΔⲆ / 2 + ᐃ * ΔΔⵠⲆᐃ);
		Ⲇ.rotate(Math.PI / 2);
		Ⲇ.globalAlpha = ⵠΔᐃ;
		Ⲇ.translate(0, ᐃ * -ⵠΔⵠᐃⲆ);
		ᐃᐃⲆΔ(Ⲇ, 5, ΔⲆΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ⲆⲆᐃ / 2 - 50 * ᐃ, ⲆΔⲆ / ΔΔⲆⲆ + 40 * ᐃ);
		Ⲇ.rotate(Math.PI / 3);
		Ⲇ.globalAlpha = ΔΔⵠΔ;
		Ⲇ.translate(ᐃᐃⲆ, -20 * ᐃ);
		ᐃᐃⲆΔ(Ⲇ, ᐃⵠᐃⲆ, ΔⲆΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔ]);
		Ⲇ.restore();
		var ΔⲆΔ = ᐃ * 30;
		var ⵠⵠⵠⵠ = ΔⲆΔ / ⵠᐃᐃΔ;
		Ⲇ.save();
		Ⲇ.translate(ⲆⲆᐃ / 2 + ᐃᐃᐃΔⵠ * ᐃ, ⲆΔⲆ / ΔΔⲆᐃ - ᐃ * 20);
		Ⲇ.rotate(Math.PI / -1.8);
		Ⲇ.globalAlpha = Ⲇⵠᐃ;
		Ⲇ.translate(0, ᐃ * -ᐃΔΔⲆΔ);
		ᐃᐃⲆΔ(Ⲇ, ΔΔᐃᐃⵠ, ΔⲆΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⲆⲆ]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ⲆⲆᐃ / ᐃⲆᐃᐃ + ᐃ * 0, ⲆΔⲆ / 2 + 10 * ᐃ);
		Ⲇ.rotate(Math.PI / 2);
		Ⲇ.globalAlpha = ⲆΔΔΔ;
		Ⲇ.translate(ᐃᐃⲆ, ᐃ * -ⲆⵠⲆΔⲆ);
		ᐃᐃⲆΔ(Ⲇ, 5, ΔⲆΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔⵠ]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ⲆⲆᐃ / ΔΔΔⵠ - ᐃ * 45, ⲆΔⲆ / 2 + 35 * ᐃ);
		Ⲇ.rotate(Math.PI / ᐃⵠΔᐃ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ⵠⲆⵠⵠ, ᐃ * -20);
		ᐃᐃⲆΔ(Ⲇ, ᐃᐃᐃΔⵠ, ΔⲆΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.restore();
		ᐃΔΔ(Ⲇ, ⲆⲆᐃ / 2 - ᐃ * 7, ⲆΔⲆ / 2 + 7 * ᐃ, 5);
		ΔΔ(Ⲇ, Δⵠ[2]);
		return ΔⲆ
	}

	function ΔᐃΔΔⲆⵠⲆⵠⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 400 * ᐃ;
		ΔⲆ.height = 400 * ᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(96.5 * ᐃ, 277.34375 * ᐃ);
		Ⲇ.bezierCurveTo(197.5 * ᐃ, ᐃ * 259.84375, 197.5 * ᐃ, 259.84375 * ᐃ, ᐃ * 298.5, ᐃ * 242.34375);
		Ⲇ.bezierCurveTo(311.5 * ᐃ, 231.34375 * ᐃ, ᐃ * 307.5, ᐃ * 168.34375, 298.5 * ᐃ, ᐃ * 150.34375);
		Ⲇ.bezierCurveTo(ᐃ * 198, 170.34375 * ᐃ, ᐃ * 198, 170.34375 * ᐃ, 97.5 * ᐃ, 190.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⵠΔⵠΔ], ᐃ * ᐃⲆⵠᐃⲆᐃⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(98.5 * ᐃ, 214.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 199, 196.34375 * ᐃ, 199 * ᐃ, ᐃ * 196.34375, 299.5 * ᐃ, 178.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(98.5 * ᐃ, ᐃ * 247.34375);
		Ⲇ.bezierCurveTo(201.5 * ᐃ, ᐃ * 229.34375, ᐃ * 201.5, 229.34375 * ᐃ, ᐃ * 304.5, ᐃ * 211.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔⲆᐃΔ], ᐃ * ᐃᐃΔΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 97.5, ᐃ * 189.34375);
		Ⲇ.bezierCurveTo(ᐃ * 97, 199.84375 * ᐃ, ᐃ * 97, ᐃ * 199.84375, 96.5 * ᐃ, 210.34375 * ᐃ);
		Ⲇ.bezierCurveTo(110.5 * ᐃ, ᐃ * 204.34375, 110.5 * ᐃ, ᐃ * 204.34375, 124.5 * ᐃ, ᐃ * 198.34375);
		Ⲇ.bezierCurveTo(ᐃ * 137.5, 203.84375 * ᐃ, ᐃ * 137.5, 203.84375 * ᐃ, ᐃ * 150.5, 209.34375 * ᐃ);
		Ⲇ.bezierCurveTo(172 * ᐃ, ᐃ * 197.84375, 172 * ᐃ, ᐃ * 197.84375, ᐃ * 193.5, 186.34375 * ᐃ);
		Ⲇ.bezierCurveTo(211.5 * ᐃ, ᐃ * 189.84375, 211.5 * ᐃ, 189.84375 * ᐃ, 229.5 * ᐃ, 193.34375 * ᐃ);
		Ⲇ.bezierCurveTo(240.5 * ᐃ, 193.34375 * ᐃ, ᐃ * 240.5, 193.34375 * ᐃ, 251.5 * ᐃ, ᐃ * 193.34375);
		Ⲇ.bezierCurveTo(ᐃ * 261, 182.84375 * ᐃ, 261 * ᐃ, ᐃ * 182.84375, 270.5 * ᐃ, ᐃ * 172.34375);
		Ⲇ.bezierCurveTo(ᐃ * 287.5, 169.34375 * ᐃ, ᐃ * 287.5, ᐃ * 169.34375, 304.5 * ᐃ, 166.34375 * ᐃ);
		Ⲇ.bezierCurveTo(304.5 * ᐃ, ᐃ * 156.34375, ᐃ * 300.5, 145.34375 * ᐃ, 298.5 * ᐃ, ᐃ * 147.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⲆ], Δⵠ[ⵠΔⲆΔΔ], ⲆΔᐃⲆⵠⲆΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 300.5, 147.34375 * ᐃ);
		Ⲇ.bezierCurveTo(293.5 * ᐃ, ᐃ * 121.34375, ᐃ * 278.5, ᐃ * 106.34375, ᐃ * 256.5, 101.34375 * ᐃ);
		Ⲇ.bezierCurveTo(176.5 * ᐃ, ᐃ * 145.34375, 176.5 * ᐃ, 145.34375 * ᐃ, ᐃ * 96.5, ᐃ * 189.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⲆᐃᐃ], Δⵠ[6], 12 * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 252.5, 129.34375 * ᐃ, 18.027756377319946 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[7]);
		ᐃΔΔ(Ⲇ, 248.5 * ᐃ, 121.34375 * ᐃ, ᐃ * 8.246211251235321);
		ΔΔ(Ⲇ, Δⵠ[Δⵠᐃᐃⵠ]);
		return ΔⲆ
	}

	function ⲆᐃΔΔΔⲆⲆᐃⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 400 * ᐃ;
		ΔⲆ.height = ᐃ * 400;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔᐃⲆⲆ;
		Ⲇ.translate(ᐃⵠᐃⵠⲆ * ᐃ, ᐃ * ⵠⵠᐃᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(100.5 * ᐃ, ᐃ * 126.34375);
		Ⲇ.bezierCurveTo(151.5 * ᐃ, 104.34375 * ᐃ, ᐃ * 279.5, ᐃ * 188.34375, ᐃ * 297.5, 292.34375 * ᐃ);
		Ⲇ.bezierCurveTo(222.5 * ᐃ, ᐃ * 307.34375, ᐃ * 106.5, ᐃ * 196.34375, ᐃ * 100.5, 127.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃ * ΔⲆⵠΔᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(106.5 * ᐃ, ᐃ * 131.34375);
		Ⲇ.bezierCurveTo(ᐃ * 140.5, 142.34375 * ᐃ, 225.5 * ᐃ, 184.34375 * ᐃ, ᐃ * 290.5, 287.34375 * ᐃ);
		Ⲇ.bezierCurveTo(270.5 * ᐃ, ᐃ * 188.34375, 152.5 * ᐃ, ᐃ * 118.34375, 107.5 * ᐃ, ᐃ * 131.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 157.5, ᐃ * 137.34375);
		Ⲇ.bezierCurveTo(ᐃ * 161.5, 138.34375 * ᐃ, ᐃ * 164.5, ᐃ * 140.34375, ᐃ * 168.5, ᐃ * 142.34375);
		Ⲇ.bezierCurveTo(ᐃ * 165.5, 156.34375 * ᐃ, 141.5 * ᐃ, ᐃ * 176.34375, ᐃ * 126.5, 179.34375 * ᐃ);
		Ⲇ.bezierCurveTo(123.5 * ᐃ, ᐃ * 173.34375, 120.5 * ᐃ, 169.34375 * ᐃ, 120.5 * ᐃ, 169.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 141.5, ᐃ * 161.34375, ᐃ * 156.5, ᐃ * 145.34375, 155.5 * ᐃ, ᐃ * 136.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(196.5 * ᐃ, ᐃ * 151.34375);
		Ⲇ.bezierCurveTo(211.5 * ᐃ, 158.34375 * ᐃ, ᐃ * 224.5, ᐃ * 171.34375, 229.5 * ᐃ, ᐃ * 176.34375);
		Ⲇ.bezierCurveTo(246.5 * ᐃ, ᐃ * 163.34375, 259.5 * ᐃ, 166.34375 * ᐃ, 272.5 * ᐃ, 168.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 254.5, ᐃ * 146.34375, 214.5 * ᐃ, ᐃ * 145.34375, ᐃ * 198.5, 151.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(154.5 * ᐃ, 222.34375 * ᐃ);
		Ⲇ.bezierCurveTo(164.5 * ᐃ, ᐃ * 234.34375, 173.5 * ᐃ, 242.34375 * ᐃ, 178.5 * ᐃ, 245.34375 * ᐃ);
		Ⲇ.bezierCurveTo(174.5 * ᐃ, 265.34375 * ᐃ, ᐃ * 180.5, ᐃ * 274.34375, 186.5 * ᐃ, ᐃ * 283.34375);
		Ⲇ.bezierCurveTo(165.5 * ᐃ, ᐃ * 277.34375, ᐃ * 151.5, ᐃ * 245.34375, ᐃ * 155.5, 224.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ], Δⵠ[0], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 279.5, ᐃ * 294.34375);
		Ⲇ.bezierCurveTo(ᐃ * 286.5, ᐃ * 285.84375, ᐃ * 286.5, 285.84375 * ᐃ, ᐃ * 293.5, 277.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 315.5, ᐃ * 280.34375, 315.5 * ᐃ, ᐃ * 280.34375, ᐃ * 337.5, 283.34375 * ᐃ);
		Ⲇ.bezierCurveTo(340.5 * ᐃ, 311.34375 * ᐃ, ᐃ * 317.5, 326.34375 * ᐃ, ᐃ * 307.5, ᐃ * 331.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃ * ⲆⵠᐃⵠⲆ);
		Ⲇ.globalAlpha = ΔΔⵠΔ;
		Ⲇ.translate(-ⵠΔΔΔⵠ * ᐃ, -5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 100.5, ᐃ * 126.34375);
		Ⲇ.bezierCurveTo(ᐃ * 151.5, ᐃ * 104.34375, 279.5 * ᐃ, ᐃ * 188.34375, 297.5 * ᐃ, ᐃ * 292.34375);
		Ⲇ.bezierCurveTo(222.5 * ᐃ, 307.34375 * ᐃ, 106.5 * ᐃ, ᐃ * 196.34375, 100.5 * ᐃ, 127.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔ], Δⵠ[ΔᐃΔᐃ], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(106.5 * ᐃ, ᐃ * 131.34375);
		Ⲇ.bezierCurveTo(140.5 * ᐃ, 142.34375 * ᐃ, 225.5 * ᐃ, 184.34375 * ᐃ, ᐃ * 290.5, 287.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 270.5, ᐃ * 188.34375, 152.5 * ᐃ, ᐃ * 118.34375, ᐃ * 107.5, ᐃ * 131.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 157.5, 137.34375 * ᐃ);
		Ⲇ.bezierCurveTo(161.5 * ᐃ, ᐃ * 138.34375, ᐃ * 164.5, 140.34375 * ᐃ, 168.5 * ᐃ, 142.34375 * ᐃ);
		Ⲇ.bezierCurveTo(165.5 * ᐃ, ᐃ * 156.34375, ᐃ * 141.5, 176.34375 * ᐃ, 126.5 * ᐃ, ᐃ * 179.34375);
		Ⲇ.bezierCurveTo(123.5 * ᐃ, ᐃ * 173.34375, ᐃ * 120.5, 169.34375 * ᐃ, 120.5 * ᐃ, 169.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 141.5, ᐃ * 161.34375, 156.5 * ᐃ, ᐃ * 145.34375, 155.5 * ᐃ, 136.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4]);
		ᐃΔΔ(Ⲇ, ᐃ * 125.5, ᐃ * 140.34375, 11.180339887498949 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃⵠ]);
		ᐃΔΔ(Ⲇ, ᐃ * 122.5, 135.34375 * ᐃ, ᐃ * 5.0990195135927845);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆⵠⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(196.5 * ᐃ, 151.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 211.5, ᐃ * 158.34375, 224.5 * ᐃ, 171.34375 * ᐃ, 229.5 * ᐃ, 176.34375 * ᐃ);
		Ⲇ.bezierCurveTo(246.5 * ᐃ, 163.34375 * ᐃ, 259.5 * ᐃ, 166.34375 * ᐃ, ᐃ * 272.5, 168.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 254.5, ᐃ * 146.34375, ᐃ * 214.5, 145.34375 * ᐃ, 198.5 * ᐃ, ᐃ * 151.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[ᐃᐃᐃΔⲆ], ⲆⵠᐃⵠⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(154.5 * ᐃ, 222.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 164.5, 234.34375 * ᐃ, ᐃ * 173.5, 242.34375 * ᐃ, 178.5 * ᐃ, 245.34375 * ᐃ);
		Ⲇ.bezierCurveTo(174.5 * ᐃ, ᐃ * 265.34375, ᐃ * 180.5, ᐃ * 274.34375, 186.5 * ᐃ, ᐃ * 283.34375);
		Ⲇ.bezierCurveTo(ᐃ * 165.5, ᐃ * 277.34375, 151.5 * ᐃ, ᐃ * 245.34375, 155.5 * ᐃ, 224.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃⲆᐃ], Δⵠ[ⲆΔⲆᐃᐃ], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 279.5, 294.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 286.5, ᐃ * 285.84375, 286.5 * ᐃ, ᐃ * 285.84375, 293.5 * ᐃ, ᐃ * 277.34375);
		Ⲇ.bezierCurveTo(ᐃ * 315.5, ᐃ * 280.34375, ᐃ * 315.5, 280.34375 * ᐃ, ᐃ * 337.5, 283.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 340.5, ᐃ * 311.34375, ᐃ * 317.5, 326.34375 * ᐃ, 307.5 * ᐃ, 331.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[8], ᐃ * ⲆᐃᐃⵠᐃⲆΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(296.5 * ᐃ, 287.34375 * ᐃ);
		Ⲇ.bezierCurveTo(311.5 * ᐃ, ᐃ * 291.34375, 311.5 * ᐃ, ᐃ * 291.34375, 326.5 * ᐃ, 295.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ᐃⵠᐃΔΔⵠᐃ], ΔⲆⲆⵠⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(294.5 * ᐃ, ᐃ * 289.34375);
		Ⲇ.bezierCurveTo(308.5 * ᐃ, ᐃ * 297.34375, ᐃ * 308.5, 297.34375 * ᐃ, ᐃ * 322.5, ᐃ * 305.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ᐃⲆⵠⲆⵠᐃⲆ], ᐃ * 6);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(294.5 * ᐃ, 291.34375 * ᐃ);
		Ⲇ.bezierCurveTo(304 * ᐃ, 303.34375 * ᐃ, ᐃ * 304, 303.34375 * ᐃ, ᐃ * 313.5, ᐃ * 315.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[9], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(226.5 * ᐃ, ᐃ * 161.34375);
		Ⲇ.bezierCurveTo(ᐃ * 230.5, 160.34375 * ᐃ, ᐃ * 236.5, 158.34375 * ᐃ, 238.5 * ᐃ, 161.34375 * ᐃ);
		Ⲇ.bezierCurveTo(238.5 * ᐃ, 157.34375 * ᐃ, ᐃ * 228.5, ᐃ * 159.34375, 227.5 * ᐃ, 161.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ⵠΔᐃᐃΔ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(167.5 * ᐃ, 248.34375 * ᐃ);
		Ⲇ.bezierCurveTo(165.5 * ᐃ, 251.34375 * ᐃ, ᐃ * 168.5, ᐃ * 256.34375, ᐃ * 168.5, 253.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 166.5, 252.34375 * ᐃ, 168.5 * ᐃ, 246.34375 * ᐃ, 166.5 * ᐃ, ᐃ * 247.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[9], 3 * ᐃ);
		return ΔⲆ
	}

	function ⲆⵠⵠᐃᐃⲆⲆᐃᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 309 * ᐃ;
		ΔⲆ.height = 287 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ᐃ * ⲆΔⵠΔⵠ, ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 34.5, 38.53125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 91.5, 30.53125 * ᐃ, 138.5 * ᐃ, 68.53125 * ᐃ, ᐃ * 169.5, ᐃ * 93.53125);
		Ⲇ.bezierCurveTo(ᐃ * 208.5, 128.53125 * ᐃ, ᐃ * 226.5, 157.53125 * ᐃ, ᐃ * 233.5, ᐃ * 209.53125);
		Ⲇ.bezierCurveTo(195.5 * ᐃ, ᐃ * 218.53125, 138.5 * ᐃ, 191.53125 * ᐃ, 105.5 * ᐃ, ᐃ * 157.53125);
		Ⲇ.bezierCurveTo(ᐃ * 54.5, ᐃ * 112.53125, 41.5 * ᐃ, ᐃ * 80.53125, 33.5 * ᐃ, 38.53125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃ * ⵠⲆⵠⵠⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 143.5, 74.53125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 164.5, 73.53125 * ᐃ, ᐃ * 159, ᐃ * 74.53125, 174.5 * ᐃ, 74.53125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 186, ᐃ * 86.53125, ᐃ * 186, ᐃ * 86.53125, 197.5 * ᐃ, ᐃ * 98.53125);
		Ⲇ.bezierCurveTo(ᐃ * 186, ᐃ * 97.03125, 186 * ᐃ, ᐃ * 97.03125, 174.5 * ᐃ, ᐃ * 95.53125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(87.5 * ᐃ, 142.53125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 92, ᐃ * 160.03125, 92 * ᐃ, 160.03125 * ᐃ, 96.5 * ᐃ, ᐃ * 177.53125);
		Ⲇ.bezierCurveTo(108 * ᐃ, 181.53125 * ᐃ, ᐃ * 108, 181.53125 * ᐃ, ᐃ * 119.5, ᐃ * 185.53125);
		Ⲇ.bezierCurveTo(ᐃ * 116.5, 175.53125 * ᐃ, ᐃ * 116.5, ᐃ * 175.53125, ᐃ * 113.5, 165.53125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ᐃᐃᐃ], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 236.5, ᐃ * 189.53125);
		Ⲇ.bezierCurveTo(ᐃ * 274.5, 197.53125 * ᐃ, ᐃ * 255.5, ᐃ * 194.03125, 274.5 * ᐃ, 198.53125 * ᐃ);
		Ⲇ.bezierCurveTo(272.5 * ᐃ, 236.53125 * ᐃ, 261.5 * ᐃ, 237.53125 * ᐃ, ᐃ * 242.5, ᐃ * 248.53125);
		Ⲇ.bezierCurveTo(230.5 * ᐃ, ᐃ * 231.03125, ᐃ * 230.5, 231.03125 * ᐃ, 218.5 * ᐃ, 213.53125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ], Δⵠ[ⵠⵠⲆⵠ], ᐃ * 10);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(-10 * ᐃ, ᐃ * -5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 34.5, 38.53125 * ᐃ);
		Ⲇ.bezierCurveTo(91.5 * ᐃ, 30.53125 * ᐃ, 138.5 * ᐃ, 68.53125 * ᐃ, ᐃ * 169.5, 93.53125 * ᐃ);
		Ⲇ.bezierCurveTo(208.5 * ᐃ, 128.53125 * ᐃ, 226.5 * ᐃ, ᐃ * 157.53125, ᐃ * 233.5, ᐃ * 209.53125);
		Ⲇ.bezierCurveTo(ᐃ * 195.5, ᐃ * 218.53125, 138.5 * ᐃ, ᐃ * 191.53125, ᐃ * 105.5, ᐃ * 157.53125);
		Ⲇ.bezierCurveTo(ᐃ * 54.5, 112.53125 * ᐃ, 41.5 * ᐃ, 80.53125 * ᐃ, ᐃ * 33.5, 38.53125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆ], Δⵠ[ΔΔⲆⲆ], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 143.5, ᐃ * 74.53125);
		Ⲇ.bezierCurveTo(164.5 * ᐃ, 73.53125 * ᐃ, ᐃ * 159, ᐃ * 74.53125, 174.5 * ᐃ, ᐃ * 74.53125);
		Ⲇ.bezierCurveTo(ᐃ * 186, 86.53125 * ᐃ, 186 * ᐃ, ᐃ * 86.53125, 197.5 * ᐃ, ᐃ * 98.53125);
		Ⲇ.bezierCurveTo(186 * ᐃ, ᐃ * 97.03125, 186 * ᐃ, 97.03125 * ᐃ, 174.5 * ᐃ, 95.53125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ⲆΔΔⲆᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(87.5 * ᐃ, ᐃ * 142.53125);
		Ⲇ.bezierCurveTo(92 * ᐃ, ᐃ * 160.03125, ᐃ * 92, ᐃ * 160.03125, 96.5 * ᐃ, ᐃ * 177.53125);
		Ⲇ.bezierCurveTo(108 * ᐃ, ᐃ * 181.53125, ᐃ * 108, ᐃ * 181.53125, ᐃ * 119.5, 185.53125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 116.5, ᐃ * 175.53125, ᐃ * 116.5, ᐃ * 175.53125, 113.5 * ᐃ, 165.53125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⲆ], Δⵠ[2], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 236.5, 189.53125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 274.5, 197.53125 * ᐃ, ᐃ * 255.5, ᐃ * 194.03125, ᐃ * 274.5, 198.53125 * ᐃ);
		Ⲇ.bezierCurveTo(272.5 * ᐃ, ᐃ * 236.53125, ᐃ * 261.5, 237.53125 * ᐃ, 242.5 * ᐃ, ᐃ * 248.53125);
		Ⲇ.bezierCurveTo(ᐃ * 230.5, 231.03125 * ᐃ, ᐃ * 230.5, ᐃ * 231.03125, ᐃ * 218.5, 213.53125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔᐃ], Δⵠ[2], ΔⲆⲆΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(109.5 * ᐃ, 51.53125 * ᐃ);
		Ⲇ.bezierCurveTo(107.5 * ᐃ, 92.53125 * ᐃ, ᐃ * 91.5, ᐃ * 95.53125, 59.5 * ᐃ, ᐃ * 101.53125);
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃΔ], Δⵠ[ᐃᐃⲆⲆ], ᐃ * 7);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 72.5, 51.53125 * ᐃ);
		Ⲇ.bezierCurveTo(71 * ᐃ, ᐃ * 64.53125, 69.5 * ᐃ, ᐃ * 76.53125, 69.5 * ᐃ, 77.53125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⵠΔⵠΔ], ᐃ * 7);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 84.5, ᐃ * 63.53125);
		Ⲇ.bezierCurveTo(70.5 * ᐃ, ᐃ * 65.03125, 70.5 * ᐃ, ᐃ * 65.03125, 56.5 * ᐃ, ᐃ * 66.53125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆ], Δⵠ[ᐃᐃΔⵠ], ᐃⲆᐃΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 125.5, ᐃ * 84.53125);
		Ⲇ.bezierCurveTo(125.5 * ᐃ, 110.03125 * ᐃ, 125.5 * ᐃ, 110.03125 * ᐃ, ᐃ * 125.5, ᐃ * 135.53125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ⲆᐃΔⲆⲆΔᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 149.5, ᐃ * 108.53125);
		Ⲇ.bezierCurveTo(150 * ᐃ, ᐃ * 137.03125, 150 * ᐃ, 137.03125 * ᐃ, ᐃ * 150.5, 165.53125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⲆⵠΔⵠ], ΔⵠΔΔᐃ * ᐃ);
		return ΔⲆ
	}

	function ⵠⵠⵠⲆⵠ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ΔⵠΔⵠⲆⲆⵠ * ᐃ;
		var ⲆΔⲆ = ΔΔⵠᐃᐃ * ᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		var Ⲇⵠ = 9 * ᐃ;
		var ᐃⵠⲆ = 9 * ᐃ;
		var ΔⲆΔ = 8 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(Ⲇⵠ, ᐃⵠⲆ);
		Ⲇ.globalAlpha = ΔΔⵠΔ;
		ᐃΔΔ(Ⲇ, ⵠⲆᐃ, 0, ΔⲆΔ);
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ]);
		var ΔⲆΔ = 3 * ᐃ;
		var Ⲇⵠ = Δⵠⵠⵠ;
		var ᐃⵠⲆ = -3 * ᐃ;
		Ⲇ.translate(Ⲇⵠ, ᐃⵠⲆ);
		Ⲇ.globalAlpha = Ⲇⵠᐃ;
		ᐃΔΔ(Ⲇ, ᐃᐃᐃ, ⲆⲆⵠⲆ, ΔⲆΔ);
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.restore();
		return ΔⲆ
	}

	function ᐃᐃⲆⲆΔⲆΔ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ, Ⲇᐃ, ⵠᐃⲆᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		if (ΔΔᐃ == Ⲇᐃ) {
			var ⲆⲆᐃ = 270 * ᐃ;
			var ⲆΔⲆ = 250 * ᐃ;
			ΔⲆ.width = ⲆⲆᐃ;
			ΔⲆ.height = ⲆΔⲆ;
			Ⲇ.beginPath();
			Ⲇ.moveTo(ᐃ * 140, ᐃ * 3);
			Ⲇ.translate(ᐃ * -25, -ᐃᐃΔΔΔ * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 218, 31 * ᐃ, 251 * ᐃ, 61 * ᐃ, ᐃ * 265, 85 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 278, ᐃ * 108, 295 * ᐃ, 160 * ᐃ, ᐃ * 285, 195 * ᐃ);
			Ⲇ.bezierCurveTo(271 * ᐃ, ᐃ * 242, 213 * ᐃ, ᐃ * 268, 188 * ᐃ, 266 * ᐃ);
			Ⲇ.bezierCurveTo(139 * ᐃ, 262 * ᐃ, ᐃ * 70, 244 * ᐃ, 47 * ᐃ, 204 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * ΔⲆΔⲆΔ, 158 * ᐃ, 35 * ᐃ, ᐃ * 78, ᐃ * 59, ᐃ * 56);
			Ⲇ.bezierCurveTo(ᐃ * 90, ᐃ * 28, ᐃ * 124, 23 * ᐃ, ᐃ * 140, ᐃ * 23);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0])
		} else if (Ⲇᐃ == 1) {
			var ⲆⲆᐃ = ᐃ * 430;
			var ⲆΔⲆ = 350 * ᐃ;
			ΔⲆ.width = ⲆⲆᐃ;
			ΔⲆ.height = ⲆΔⲆ;
			Ⲇ.beginPath();
			Ⲇ.moveTo(180 * ᐃ, ᐃ * Ⲇᐃⵠᐃ);
			Ⲇ.translate(ᐃ * -30, ᐃ * -60);
			Ⲇ.bezierCurveTo(283 * ᐃ, 60 * ᐃ, 265 * ᐃ, 163 * ᐃ, ᐃ * 335, ᐃ * 206);
			Ⲇ.bezierCurveTo(ᐃ * 376, 231 * ᐃ, 492 * ᐃ, ᐃ * 299, ᐃ * 434, ᐃ * 357);
			Ⲇ.bezierCurveTo(ᐃ * 371, ᐃ * 421, 289 * ᐃ, 394 * ᐃ, ᐃ * 255, 386 * ᐃ);
			Ⲇ.bezierCurveTo(218 * ᐃ, 377 * ᐃ, 91 * ᐃ, 359 * ᐃ, 50 * ᐃ, ᐃ * 272);
			Ⲇ.bezierCurveTo(12 * ᐃ, 192 * ᐃ, ᐃ * 107, 75 * ᐃ, 178 * ᐃ, 69 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃⵠ])
		} else if (2 == Ⲇᐃ) {
			var ⲆⲆᐃ = ᐃ * 400;
			var ⲆΔⲆ = 300 * ᐃ;
			ΔⲆ.width = ⲆⲆᐃ;
			ΔⲆ.height = ⲆΔⲆ;
			Ⲇ.beginPath();
			Ⲇ.moveTo(80 * ᐃ, ᐃ * 52);
			Ⲇ.translate(ᐃ * -40, ᐃ * -30);
			Ⲇ.bezierCurveTo(ᐃ * 124, ᐃ * 77, 241 * ᐃ, ᐃ * 22, 311 * ᐃ, 65 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 352, 90 * ᐃ, ᐃ * 404, 176 * ᐃ, ᐃ * 346, 234 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 283, ᐃ * 298, 179 * ᐃ, 299 * ᐃ, ᐃ * 145, ᐃ * 291);
			Ⲇ.bezierCurveTo(108 * ᐃ, 282 * ᐃ, ᐃ * ⲆᐃᐃⵠΔ, ᐃ * 239, 63 * ᐃ, ᐃ * 205);
			Ⲇ.bezierCurveTo(37 * ᐃ, 181 * ᐃ, ᐃ * 45, 131 * ᐃ, 80 * ᐃ, 107 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0])
		}
		return ΔⲆ
	}

	function ᐃΔᐃⵠᐃᐃⵠⵠᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 243 * ᐃ;
		ΔⲆ.height = 172 * ᐃ;
		ᐃΔΔ(Ⲇ, ᐃ * 119.5, ᐃ * 140.125, ᐃ * 19);
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔⲆᐃᐃ], ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(36.5 * ᐃ, ᐃ * 20.125);
		Ⲇ.bezierCurveTo(ᐃ * 119.5, ᐃ * 20.625, ᐃ * 119.5, 20.625 * ᐃ, ᐃ * 202.5, 21.125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 214.5, 22.125 * ᐃ, 216.5 * ᐃ, 26.125 * ᐃ, ᐃ * 217.5, ᐃ * 35.125);
		Ⲇ.bezierCurveTo(ᐃ * 221, 76.125 * ᐃ, 221 * ᐃ, 76.125 * ᐃ, 224.5 * ᐃ, 117.125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 225.5, 127.125 * ᐃ, ᐃ * 221.5, 131.125 * ᐃ, ᐃ * 210.5, ᐃ * 132.125);
		Ⲇ.bezierCurveTo(117.5 * ᐃ, 132.125 * ᐃ, 117.5 * ᐃ, 132.125 * ᐃ, 24.5 * ᐃ, ᐃ * 132.125);
		Ⲇ.bezierCurveTo(ᐃ * 14.5, ᐃ * 131.125, 13.5 * ᐃ, ᐃ * 126.125, 16.5 * ᐃ, 111.125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 19.5, ᐃ * 73.125, ᐃ * 19.5, 73.125 * ᐃ, 22.5 * ᐃ, 35.125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 23.5, ᐃ * 23.125, ᐃ * 29.5, ᐃ * 21.125, ᐃ * 36.5, ᐃ * 20.125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ], Δⵠ[ΔᐃⲆⲆ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(15.5 * ᐃ, 138.625 * ᐃ);
		Ⲇ.bezierCurveTo(120 * ᐃ, ᐃ * 138.625, 120 * ᐃ, ᐃ * 138.625, ᐃ * 224.5, 138.625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 13.5, 131.625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 119.5, 131.625 * ᐃ, 119.5 * ᐃ, ᐃ * 131.625, ᐃ * 225.5, 131.625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠΔⲆⵠΔ, Δⵠ[ΔⲆΔⲆ], ⵠⵠΔⲆᐃ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 119.5, 140.125 * ᐃ, 14.866068747318506 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⵠΔ], Δⵠ[5], ᐃ * ΔⵠⵠⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 106.5, 146.625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 116.5, 137.625 * ᐃ, ᐃ * 118.5, 136.625 * ᐃ, ᐃ * 123.5, 138.625 * ᐃ);
		Ⲇ.bezierCurveTo(131.5 * ᐃ, ᐃ * 145.625, 133.5 * ᐃ, 148.625 * ᐃ, 127.5 * ᐃ, 152.625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 115.5, 158.625 * ᐃ, 111.5 * ᐃ, 153.625 * ᐃ, 106.5 * ᐃ, 147.625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[7], ⲆᐃΔⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(105.5 * ᐃ, 146.625 * ᐃ);
		Ⲇ.bezierCurveTo(116.5 * ᐃ, ᐃ * 159.625, 124.5 * ᐃ, ᐃ * 156.625, ᐃ * 132.5, 146.625 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[ⵠᐃⵠΔⲆ], ᐃ * ΔⲆⵠⵠ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 75.5, ᐃ * 80.125);
		ᐃΔⵠ(Ⲇ, -39 * ᐃ, -40 * ᐃ, 78 * ᐃ, ᐃ * 78, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[9]);
		Ⲇ.save();
		Ⲇ.translate(167 * ᐃ, 80.125 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -38.5, -39 * ᐃ, ᐃ * 78, ᐃ * 78, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[9]);
		return ΔⲆ
	}

	function ⲆⲆΔᐃΔⲆⵠⲆⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 217;
		ΔⲆ.height = ᐃ * 215;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(79 * ᐃ, 113 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 135, ᐃ * 98, ᐃ * 136, 96 * ᐃ, ᐃ * 142, ᐃ * 97);
		Ⲇ.bezierCurveTo(167 * ᐃ, 106 * ᐃ, 167 * ᐃ, ᐃ * 106, ᐃ * 171, ᐃ * 109);
		Ⲇ.bezierCurveTo(ᐃ * 173, ᐃ * 120, ᐃ * 173, 134 * ᐃ, 169 * ᐃ, ᐃ * 141);
		Ⲇ.bezierCurveTo(ᐃ * 140, ᐃ * 149.5, ᐃ * 140, ᐃ * 149.5, ᐃ * 111, 158 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[ⲆᐃΔⲆ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 154, ᐃ * 103);
		Ⲇ.bezierCurveTo(167 * ᐃ, 91 * ᐃ, 175 * ᐃ, 87 * ᐃ, 176 * ᐃ, 94 * ᐃ);
		Ⲇ.bezierCurveTo(175 * ᐃ, 102 * ᐃ, 176 * ᐃ, ᐃ * 102, ᐃ * 186, ᐃ * 103);
		Ⲇ.bezierCurveTo(191 * ᐃ, ᐃ * 104, 192 * ᐃ, ᐃ * 105, ᐃ * 185, ᐃ * 116);
		Ⲇ.bezierCurveTo(ᐃ * 183, 120 * ᐃ, 191 * ᐃ, ᐃ * 124, ᐃ * 189, ᐃ * 129);
		Ⲇ.bezierCurveTo(ᐃ * 185, ᐃ * 139, ᐃ * 178, 134 * ᐃ, 166 * ᐃ, 131 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔ], Δⵠ[ΔⲆᐃΔ], ᐃⲆⵠᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(60 * ᐃ, 46 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 60, 34 * ᐃ, ᐃ * 60, ᐃ * 29, ᐃ * 56, 19 * ᐃ);
		Ⲇ.bezierCurveTo(52 * ᐃ, ⲆΔᐃⲆⵠⲆΔ * ᐃ, ᐃ * 52, 16 * ᐃ, ᐃ * 49, 24 * ᐃ);
		Ⲇ.bezierCurveTo(48 * ᐃ, 27 * ᐃ, 46 * ᐃ, 28 * ᐃ, 39 * ᐃ, 27 * ᐃ);
		Ⲇ.bezierCurveTo(33 * ᐃ, 26 * ᐃ, 34 * ᐃ, 31 * ᐃ, ᐃ * 35, ᐃ * 37);
		Ⲇ.bezierCurveTo(ᐃ * 36, 41 * ᐃ, 27 * ᐃ, 46 * ᐃ, 29 * ᐃ, ᐃ * 52);
		Ⲇ.bezierCurveTo(ᐃ * 36, 55 * ᐃ, 35 * ᐃ, 56 * ᐃ, ᐃ * 31, ᐃ * 59);
		Ⲇ.bezierCurveTo(27 * ᐃ, 65 * ᐃ, ᐃ * 32, ᐃ * 64, ᐃ * 35, 62 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 46, 50 * ᐃ);
		Ⲇ.bezierCurveTo(51 * ᐃ, 35 * ᐃ, 70 * ᐃ, ᐃ * 32, ᐃ * 78, ᐃ * 29);
		Ⲇ.bezierCurveTo(84 * ᐃ, ᐃ * 27, 113 * ᐃ, ᐃ * 36, 127 * ᐃ, 41 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 140, ᐃ * 47, ᐃ * 147, ᐃ * 69, 137 * ᐃ, 73 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 124, ᐃ * 92, 117 * ᐃ, ᐃ * 92, 109 * ᐃ, ᐃ * 94);
		Ⲇ.bezierCurveTo(101 * ᐃ, 96 * ᐃ, ᐃ * 89, 92 * ᐃ, ᐃ * 65, 83 * ᐃ);
		Ⲇ.bezierCurveTo(54 * ᐃ, 80 * ᐃ, 46 * ᐃ, ᐃ * 58, ᐃ * 46, ᐃ * 51);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ᐃᐃΔᐃ], ᐃⲆᐃⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 51, ᐃ * 40);
		Ⲇ.bezierCurveTo(49 * ᐃ, 34 * ᐃ, 49 * ᐃ, ᐃ * 34, 47 * ᐃ, 28 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 38, 28 * ᐃ, 34 * ᐃ, ᐃ * 27, 37 * ᐃ, 37 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 43, 40.5 * ᐃ, 43 * ᐃ, 40.5 * ᐃ, ᐃ * 49, 44 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⵠᐃᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(29 * ᐃ, 48 * ᐃ);
		Ⲇ.bezierCurveTo(38 * ᐃ, ᐃ * 49, 38 * ᐃ, 49 * ᐃ, ᐃ * 47, 50 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 46.5, 51.5 * ᐃ, 46.5 * ᐃ, 51.5 * ᐃ, 46 * ᐃ, 53 * ᐃ);
		Ⲇ.bezierCurveTo(40 * ᐃ, ᐃ * 53.5, ᐃ * 40, 53.5 * ᐃ, 34 * ᐃ, ᐃ * 54);
		Ⲇ.bezierCurveTo(ᐃ * 29, 51 * ᐃ, ᐃ * 32, ᐃ * 51.5, 30 * ᐃ, 49 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δᐃⵠᐃⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 89, ᐃ * 61);
		Ⲇ.bezierCurveTo(ᐃ * 101, ᐃ * 70, ᐃ * 109, 90 * ᐃ, ᐃ * 102, ᐃ * 90);
		Ⲇ.bezierCurveTo(97 * ᐃ, 91 * ᐃ, 87 * ᐃ, ᐃ * 91, ᐃ * 60, 80 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 48, 65 * ᐃ, ᐃ * 46, ᐃ * 56, ᐃ * 48, ᐃ * 53);
		Ⲇ.bezierCurveTo(50 * ᐃ, 52 * ᐃ, 66 * ᐃ, 56 * ᐃ, ᐃ * 89, ᐃ * 61);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔΔᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 99, 59 * ᐃ);
		Ⲇ.bezierCurveTo(115 * ᐃ, 45 * ᐃ, ᐃ * 125, ᐃ * 42, ᐃ * 129, ᐃ * 47);
		Ⲇ.bezierCurveTo(138 * ᐃ, ᐃ * 56, ᐃ * 140, ᐃ * 63, ᐃ * 138, ᐃ * 67);
		Ⲇ.bezierCurveTo(ᐃ * 131, 80 * ᐃ, 122 * ᐃ, ᐃ * 87, 114 * ᐃ, 90 * ᐃ);
		Ⲇ.bezierCurveTo(105 * ᐃ, 80 * ᐃ, 95 * ᐃ, 62 * ᐃ, 98 * ᐃ, 61 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 118, 62 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 139, 45 * ᐃ, ᐃ * 153, ᐃ * 40, 150 * ᐃ, ᐃ * 48);
		Ⲇ.bezierCurveTo(145 * ᐃ, 57 * ᐃ, 157 * ᐃ, ᐃ * 63, ᐃ * 157, 70 * ᐃ);
		Ⲇ.bezierCurveTo(157 * ᐃ, ᐃ * 74, ᐃ * 142, ᐃ * 77, ᐃ * 142, 85 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 143, 91 * ᐃ, ᐃ * 141, ᐃ * 92, 135 * ᐃ, ᐃ * 90);
		Ⲇ.bezierCurveTo(132 * ᐃ, ᐃ * 90, ᐃ * 132, ᐃ * 96, 124 * ᐃ, 99 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 118, ᐃ * 93, ᐃ * 116, 77 * ᐃ, ᐃ * 116, ᐃ * 64);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(90 * ᐃ, 130 * ᐃ);
		Ⲇ.bezierCurveTo(157 * ᐃ, ᐃ * 115, 165 * ᐃ, 111 * ᐃ, 167 * ᐃ, 115 * ᐃ);
		Ⲇ.bezierCurveTo(170 * ᐃ, ᐃ * 117, ᐃ * 171, 135 * ᐃ, ᐃ * 167, ᐃ * 141);
		Ⲇ.bezierCurveTo(135.5 * ᐃ, ᐃ * 149.5, 135.5 * ᐃ, ᐃ * 149.5, ᐃ * 104, 158 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 53, 119 * ᐃ);
		Ⲇ.bezierCurveTo(46 * ᐃ, 120 * ᐃ, 40 * ᐃ, ᐃ * 118, ᐃ * 34, 116 * ᐃ);
		Ⲇ.bezierCurveTo(28 * ᐃ, ᐃ * 111, 41 * ᐃ, 112 * ᐃ, ᐃ * 39, ᐃ * 108);
		Ⲇ.bezierCurveTo(ᐃ * 36, ᐃ * 100, ᐃ * 49, ᐃ * 102, 53 * ᐃ, ᐃ * 95);
		Ⲇ.bezierCurveTo(57 * ᐃ, ᐃ * 84, ᐃ * 58, ᐃ * 85, 63 * ᐃ, ᐃ * 93);
		Ⲇ.bezierCurveTo(ᐃ * 68, ᐃ * 96, ᐃ * 72, ᐃ * 94, 80 * ᐃ, ᐃ * 88);
		Ⲇ.bezierCurveTo(80 * ᐃ, ᐃ * 96, ᐃ * 78, 107 * ᐃ, ᐃ * 66, ᐃ * 115);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔΔⵠⲆΔᐃ], Δⵠ[ΔΔΔᐃⲆ], ᐃᐃⵠΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(118 * ᐃ, ᐃ * 64);
		Ⲇ.bezierCurveTo(133.5 * ᐃ, 57 * ᐃ, 133.5 * ᐃ, ᐃ * 57, ᐃ * 149, ᐃ * 50);
		Ⲇ.bezierCurveTo(145 * ᐃ, ᐃ * 54, 154 * ᐃ, ᐃ * 65, 157 * ᐃ, ᐃ * 68);
		Ⲇ.bezierCurveTo(ᐃ * 138.5, 66.5 * ᐃ, ᐃ * 138.5, ᐃ * 66.5, 120 * ᐃ, ᐃ * 65);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⲆᐃⵠΔⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(118 * ᐃ, ᐃ * 65);
		Ⲇ.bezierCurveTo(ᐃ * 129, ᐃ * 77, ᐃ * 129, 77 * ᐃ, ᐃ * 140, ᐃ * 89);
		Ⲇ.bezierCurveTo(131 * ᐃ, ᐃ * 89, ᐃ * 130, 92 * ᐃ, 128 * ᐃ, 96 * ᐃ);
		Ⲇ.bezierCurveTo(123.5 * ᐃ, ᐃ * 82, 123.5 * ᐃ, 82 * ᐃ, ᐃ * 119, ᐃ * 68);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 51, ᐃ * 112);
		Ⲇ.bezierCurveTo(ᐃ * 63, 108 * ᐃ, 78 * ᐃ, ᐃ * 111, 88 * ᐃ, ᐃ * 112);
		Ⲇ.bezierCurveTo(98 * ᐃ, 122 * ᐃ, 117 * ᐃ, 136 * ᐃ, ᐃ * 125, ᐃ * 157);
		Ⲇ.bezierCurveTo(123 * ᐃ, ᐃ * 180, 123 * ᐃ, 185 * ᐃ, ᐃ * 118, ᐃ * 186);
		Ⲇ.bezierCurveTo(ᐃ * 101, 190 * ᐃ, ᐃ * 89, ᐃ * 191, ᐃ * 79, ᐃ * 187);
		Ⲇ.bezierCurveTo(ᐃ * 53, 165 * ᐃ, 50 * ᐃ, ᐃ * 153, ᐃ * 47, 144 * ᐃ);
		Ⲇ.bezierCurveTo(46 * ᐃ, ᐃ * 128, 46 * ᐃ, 124 * ᐃ, 50 * ᐃ, 112 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[9], Δⵠ[10], ᐃ * ᐃⵠⵠⵠᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(50 * ᐃ, 114 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 81, ᐃ * 149, 80 * ᐃ, 147 * ᐃ, 80 * ᐃ, 149 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 82, 155 * ᐃ, 80 * ᐃ, ᐃ * 182, ᐃ * 74, 182 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 60, ᐃ * 172, ᐃ * 52, ᐃ * 157, 47 * ᐃ, 144 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[11], Δⵠ[ᐃᐃᐃᐃⲆΔᐃ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 85, ᐃ * 152);
		Ⲇ.bezierCurveTo(ᐃ * 99, 150 * ᐃ, 109 * ᐃ, ᐃ * 152, 119 * ᐃ, ᐃ * 156);
		Ⲇ.bezierCurveTo(122 * ᐃ, ᐃ * 163, ᐃ * 122, ᐃ * 174, 117 * ᐃ, 182 * ᐃ);
		Ⲇ.closePath();
		Ⲇ.bezierCurveTo(93 * ᐃ, 188 * ᐃ, ᐃ * 82, 187 * ᐃ, 83 * ᐃ, 179 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[11], Δⵠ[ⵠΔᐃᐃⲆΔⲆ], ᐃ * ⵠᐃΔΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(104 * ᐃ, ᐃ * 166);
		Ⲇ.bezierCurveTo(133 * ᐃ, 165 * ᐃ, ᐃ * 142, ᐃ * 168, 137 * ᐃ, 173 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 127, 177 * ᐃ, ᐃ * 137, 195 * ᐃ, ᐃ * 126, ᐃ * 196);
		Ⲇ.bezierCurveTo(112 * ᐃ, 195 * ᐃ, 112 * ᐃ, 194 * ᐃ, ᐃ * 109, ᐃ * 199);
		Ⲇ.bezierCurveTo(105 * ᐃ, 205 * ᐃ, 102 * ᐃ, ᐃ * 195, ᐃ * 96, 197 * ᐃ);
		Ⲇ.bezierCurveTo(84 * ᐃ, ᐃ * 201, ᐃ * 88, ᐃ * 198, 90 * ᐃ, 187 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 96, ᐃ * 171, ᐃ * 97, 170 * ᐃ, 103 * ᐃ, ᐃ * 167);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[9], Δⵠ[10], ᐃ * ⵠᐃᐃΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(105 * ᐃ, ᐃ * 168);
		Ⲇ.bezierCurveTo(118 * ᐃ, ᐃ * 172.5, ᐃ * 118, 172.5 * ᐃ, 131 * ᐃ, ᐃ * 177);
		Ⲇ.bezierCurveTo(133 * ᐃ, 190 * ᐃ, 132 * ᐃ, 199 * ᐃ, 116 * ᐃ, 194 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 110, ᐃ * 182, 110 * ᐃ, ᐃ * 182, ᐃ * 104, 170 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[10]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 102, ᐃ * 169);
		Ⲇ.bezierCurveTo(100.5 * ᐃ, ᐃ * 182, 100.5 * ᐃ, 182 * ᐃ, 99 * ᐃ, 195 * ᐃ);
		Ⲇ.bezierCurveTo(93.5 * ᐃ, 196.5 * ᐃ, ᐃ * 93.5, ᐃ * 196.5, ᐃ * 88, ᐃ * 198);
		Ⲇ.bezierCurveTo(94 * ᐃ, 176 * ᐃ, 96 * ᐃ, 174 * ᐃ, 101 * ᐃ, ᐃ * 168);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[9], Δⵠ[ⵠΔᐃᐃΔ], ᐃ * ᐃΔⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 64, 107 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 64, ᐃ * 101, ᐃ * 64, ᐃ * 101, 64 * ᐃ, ᐃ * 95);
		Ⲇ.bezierCurveTo(ᐃ * 57, 86 * ᐃ, 57 * ᐃ, 84 * ᐃ, 53 * ᐃ, ᐃ * 97);
		Ⲇ.bezierCurveTo(55 * ᐃ, 103.5 * ᐃ, ᐃ * 55, 103.5 * ᐃ, 57 * ᐃ, 110 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔⲆⵠⵠ], Δⵠ[ⲆⵠⲆⲆⵠⵠⲆ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(40 * ᐃ, 108 * ᐃ);
		Ⲇ.bezierCurveTo(46.5 * ᐃ, ᐃ * 111, ᐃ * 46.5, ᐃ * 111, 53 * ᐃ, 114 * ᐃ);
		Ⲇ.bezierCurveTo(50.5 * ᐃ, 117 * ᐃ, 50.5 * ᐃ, 117 * ᐃ, ᐃ * 48, ᐃ * 120);
		Ⲇ.bezierCurveTo(40.5 * ᐃ, 117.5 * ᐃ, 40.5 * ᐃ, ᐃ * 117.5, ᐃ * 33, ᐃ * 115);
		Ⲇ.bezierCurveTo(ᐃ * 36, ᐃ * 112, ᐃ * 36, ᐃ * 112, ᐃ * 39, 109 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[11], Δⵠ[ⵠᐃⲆⵠᐃ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(189 * ᐃ, ᐃ * 106);
		Ⲇ.bezierCurveTo(178.5 * ᐃ, 110.5 * ᐃ, ᐃ * 178.5, ᐃ * 110.5, ᐃ * 168, 115 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 168.5, 119 * ᐃ, 168.5 * ᐃ, ᐃ * 119, ᐃ * 169, ᐃ * 123);
		Ⲇ.bezierCurveTo(ᐃ * 179, ᐃ * 124.5, 179 * ᐃ, ᐃ * 124.5, 189 * ᐃ, 126 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 182, 118 * ᐃ, ᐃ * 183, 115 * ᐃ, ᐃ * 188, 106 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 69, 178 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 69, 141 * ᐃ, ᐃ * 70, 136 * ᐃ, ᐃ * 77, ᐃ * 137);
		Ⲇ.bezierCurveTo(ᐃ * 88, ᐃ * 133, ᐃ * 101, ᐃ * 134, 108 * ᐃ, ᐃ * 137);
		ΔΔ(Ⲇ, undefined, Δⵠ[3], ⵠⲆΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(55 * ᐃ, ᐃ * 161);
		Ⲇ.bezierCurveTo(54 * ᐃ, 124 * ᐃ, ᐃ * 55, 119 * ᐃ, 62 * ᐃ, 119 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 74, 117 * ᐃ, ᐃ * 85, ᐃ * 117, ᐃ * 93, 119 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔⲆⵠᐃ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(91 * ᐃ, ᐃ * 29);
		Ⲇ.bezierCurveTo(74 * ᐃ, 33 * ᐃ, 62 * ᐃ, ᐃ * 46, ᐃ * 57, ᐃ * 54);
		Ⲇ.bezierCurveTo(57 * ᐃ, ᐃ * 63, ᐃ * 68, ᐃ * 76, 77 * ᐃ, 87 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[ⲆⲆⵠⵠⲆ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 107, 33 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 82, ᐃ * 51, ᐃ * 80, ᐃ * 52, ᐃ * 79, 59 * ᐃ);
		Ⲇ.bezierCurveTo(78 * ᐃ, 65 * ᐃ, ᐃ * 93, ᐃ * 86, 101 * ᐃ, 93 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔΔΔⵠΔ], ᐃ * ΔⵠⵠⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(130 * ᐃ, 98 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 126.5, 103 * ᐃ, ᐃ * 126.5, ᐃ * 103, 123 * ᐃ, 108 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 133.5, 107 * ᐃ, ᐃ * 133.5, 107 * ᐃ, 144 * ᐃ, ᐃ * 106);
		Ⲇ.bezierCurveTo(ᐃ * 138.5, ᐃ * 110, 138.5 * ᐃ, ᐃ * 110, 133 * ᐃ, ᐃ * 114);
		Ⲇ.bezierCurveTo(142 * ᐃ, ᐃ * 114, ᐃ * 142, 114 * ᐃ, 151 * ᐃ, ᐃ * 114);
		Ⲇ.bezierCurveTo(146.5 * ᐃ, 119.5 * ᐃ, 146.5 * ᐃ, 119.5 * ᐃ, 142 * ᐃ, ᐃ * 125);
		Ⲇ.bezierCurveTo(ᐃ * 146.5, 127 * ᐃ, 146.5 * ᐃ, 127 * ᐃ, ᐃ * 151, 129 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 147.5, 132 * ᐃ, ᐃ * 147.5, 132 * ᐃ, ᐃ * 144, 135 * ᐃ);
		Ⲇ.bezierCurveTo(148 * ᐃ, ᐃ * 137, 148 * ᐃ, ᐃ * 137, ᐃ * 152, ᐃ * 139);
		Ⲇ.bezierCurveTo(149 * ᐃ, 142.5 * ᐃ, 149 * ᐃ, 142.5 * ᐃ, ᐃ * 146, 146 * ᐃ);
		ΔΔ(Ⲇ, ⵠᐃᐃᐃᐃ, Δⵠ[3], ⵠⲆΔⵠ * ᐃ);
		return ΔⲆ
	}

	function ᐃΔΔΔⵠⲆⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 130;
		var ⲆΔⲆ = 142 * ᐃ;
		var Ⲇⵠ = ⲆⲆᐃ / ΔᐃΔᐃ;
		var ᐃⵠⲆ = ⲆΔⲆ / 2;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(Ⲇⵠ, ᐃⵠⲆ + ΔᐃᐃᐃⵠΔⲆ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		ᐃΔΔ(Ⲇ, 0, ᐃⵠⵠⲆ, 60 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.translate(0, -ⲆΔᐃⲆᐃ * ᐃ);
		Ⲇ.globalAlpha = ⵠᐃⵠΔ;
		ᐃΔΔ(Ⲇ, ⵠᐃⲆⲆ, 0, 60 * ᐃ, ⵠΔᐃⵠ);
		ΔΔ(Ⲇ, Δⵠ[Δⵠᐃ], Δⵠ[ΔᐃⵠΔ], 4 * ᐃ);
		ᐃΔΔ(Ⲇ, ΔΔᐃ, ⲆⵠⲆⲆ, ᐃ * 40);
		ΔΔ(Ⲇ, Δⵠ[3]);
		ᐃΔΔ(Ⲇ, ⵠⵠⵠΔ, ⵠⵠⵠΔ, ᐃ * 25);
		ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃᐃΔ], Δⵠ[5], ⲆⵠⲆⵠⵠ * ᐃ);
		return ΔⲆ
	}

	function ⲆⲆⵠⵠⵠⲆᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 130;
		ΔⲆ.height = 142 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : Δᐃⵠⵠ;
		Ⲇ.save();
		Ⲇ.translate(65 * ᐃ, 80 * ᐃ);
		Ⲇ.rotate(.2);
		ᐃᐃⲆΔ(Ⲇ, 9, 60 * ᐃ, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.save();
		Ⲇ.translate(65 * ᐃ, ᐃ * 71);
		Ⲇ.rotate(.2);
		ᐃᐃⲆΔ(Ⲇ, ᐃᐃⲆⲆᐃᐃⵠ, 60 * ᐃ, 10 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔΔⲆᐃ], 4);
		Ⲇ.rotate(-.32);
		ᐃᐃⲆΔ(Ⲇ, 9, ᐃ * 38, ᐃ * ᐃⵠᐃⵠⲆ);
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃᐃΔΔᐃ);
		Ⲇ.rotate(.68);
		ᐃᐃⲆΔ(Ⲇ, 9, ⵠΔᐃⲆⵠ * ᐃ, ⲆᐃⲆΔⵠ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⲆⲆⵠ], Δⵠ[ᐃⵠⲆᐃΔ], ⵠⵠΔⲆⵠ);
		Ⲇ.restore();
		return ΔⲆ
	}

	function ⵠᐃᐃᐃⲆᐃᐃᐃᐃ(ᐃΔΔⲆ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var text = ⲆΔⵠ[ᐃΔΔⲆ];
		Ⲇ.font = "20px Baloo Paaji";
		var ⲆᐃΔΔΔᐃⵠ = 0;
		if (1 <= text.length) ⲆᐃΔΔΔᐃⵠ = Math.max(0, Ⲇ.measureText(text[0]).width);
		Ⲇ.font = "17px Baloo Paaji";
		ᐃⲆᐃᐃ <= text.length && (ⲆᐃΔΔΔᐃⵠ = Math.max(ⲆᐃΔΔΔᐃⵠ, Ⲇ.measureText(text[Δᐃⵠⵠ]).width));
		Ⲇ.font = "14px Baloo Paaji";
		for (Ⲇᐃ = 2; Ⲇᐃ < text.length; Ⲇᐃ++) ⲆᐃΔΔΔᐃⵠ = Math.max(ⲆᐃΔΔΔᐃⵠ, Ⲇ.measureText(text[Ⲇᐃ]).width);
		var ⵠΔΔ = ⲆᐃΔΔΔᐃⵠ + 35;
		var ᐃⲆⲆᐃΔⵠⵠ = 26;
		var ⵠⵠⲆ = ⲆⲆⵠⲆ;
		if (1 === text.length) ⵠⵠⲆ = 55;
		else if (2 === text.length) ⵠⵠⲆ = 85;
		else ⵠⵠⲆ = ᐃⲆⲆᐃΔⵠⵠ * (text.length - 2) + 85;
		ΔⲆ.width = ⵠΔΔ;
		ΔⲆ.height = ⵠⵠⲆ;
		ᐃΔⵠ(Ⲇ, 0, 0, ⵠΔΔ, ⵠⵠⲆ, 10);
		Ⲇ.fillStyle = ⵠ[91];
		Ⲇ.globalAlpha = .5;
		Ⲇ.fill();
		if (ΔᐃⵠⲆ <= text.length) {
			Ⲇ.textBaseline = ⵠ[90], Ⲇ.font = "20px Baloo Paaji";
			Ⲇ.globalAlpha = ⵠᐃⵠΔ;
			Ⲇ.fillStyle = "#e2c340";
			Ⲇ.fillText(text[0], 15, 28)
		}
		if (ᐃᐃΔⵠ <= text.length) {
			Ⲇ.font = "17px Baloo Paaji";
			Ⲇ.fillStyle = ⵠ[0];
			Ⲇ.fillText(text[ΔΔⵠΔ], 15, 55);
			ⵠⵠⲆ = 55
		}
		if (ⲆΔᐃⲆ <= text.length) {
			Ⲇ.font = "14px Baloo Paaji";
			Ⲇ.globalAlpha = .7;
			for (Ⲇᐃ = ᐃⲆᐃⵠ; Ⲇᐃ < text.length; Ⲇᐃ++) {
				Ⲇ.fillText(text[Ⲇᐃ], ΔᐃⵠΔᐃⵠᐃ, ⵠⵠⲆ + 28);
				ⵠⵠⲆ += ᐃⲆⲆᐃΔⵠⵠ
			}
		}
		return ΔⲆ
	}

	function ᐃⵠᐃΔΔΔᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 234 * ᐃ;
		ΔⲆ.height = 183 * ᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 76, ᐃ * 25);
		Ⲇ.bezierCurveTo(ᐃ * 150, ΔΔᐃΔ * ᐃ, 181 * ᐃ, ᐃ * 22, ᐃ * 203, ᐃ * 41);
		Ⲇ.bezierCurveTo(225 * ᐃ, ᐃ * 63, 225 * ᐃ, ᐃ * 105, ᐃ * 198, ᐃ * 133);
		Ⲇ.bezierCurveTo(ᐃ * 179, ᐃ * 157, ᐃ * 134, ᐃ * 178, 81 * ᐃ, 164 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃᐃⲆⵠᐃ * ᐃ, ᐃ * 148, 6 * ᐃ, ᐃ * 95, ᐃ * 21, 66 * ᐃ);
		Ⲇ.bezierCurveTo(34 * ᐃ, ᐃ * 39, 52 * ᐃ, 33 * ᐃ, ᐃ * 75, 25 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ], Δⵠ[0], ᐃ * ⵠᐃΔΔ);
		return ΔⲆ
	}

	function ΔⵠⲆⵠᐃΔⵠΔᐃ(text) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		Ⲇ.lineJoin = ⵠ[401];
		while (-ⵠⲆΔⲆ !== text.indexOf("\\n")) text = text.replace("\\n", "\n");
		text = text.split("\n");
		Δⵠ = [];
		var ⲆΔⲆ = 14;
		var ⵠⵠⲆ = (ⲆΔⲆ + ⲆᐃᐃΔⵠ) * text.length + ⵠΔΔΔⵠ;
		var ⵠΔΔ = ⲆⵠⲆⲆ;
		Ⲇ.font = ⲆΔⲆ + ⵠ[572];
		for (var Ⲇᐃ = ⵠΔᐃᐃ; Ⲇᐃ < text.length; Ⲇᐃ++) {
			text[Ⲇᐃ].charAt(0) === "#" ? (Δⵠ[Ⲇᐃ] = text[Ⲇᐃ].substring(0, 7), text[Ⲇᐃ] = text[Ⲇᐃ].substring(8)) : Δⵠ[Ⲇᐃ] = ⵠ[100];
			ⵠΔΔ = Math.max(Ⲇ.measureText(text[Ⲇᐃ]).width + ⲆΔⲆⵠΔ, ⵠΔΔ)
		}
		ΔⲆ.height = ⵠⵠⲆ;
		ΔⲆ.width = ⵠΔΔ;
		for (var Ⲇᐃ = ⵠⵠⵠΔ; Ⲇᐃ < text.length; Ⲇᐃ++) {
			var ᐃᐃ = ᐃⵠΔΔΔ(1, text[Ⲇᐃ], ⲆΔⲆ, Δⵠ[Ⲇᐃ], null, null, null, null, null, ⵠ[204], ⵠⵠᐃᐃᐃ);
			Ⲇ.drawImage(ᐃᐃ, 8, (ⲆΔⲆ + ᐃΔᐃΔ) * Ⲇᐃ + 5)
		}
		return ΔⲆ
	}

	function ΔⵠⲆⵠⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 220;
		var ⲆΔⲆ = 220 * ᐃ;
		var ΔⲆΔ = ᐃ * 100;
		var ⵠⵠⵠⵠ = ΔⲆΔ / 4;
		var ⲆⲆⵠᐃ = ᐃ * ⲆⵠⲆⵠⲆⲆΔ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		if (!ⵠⲆᐃⵠ) Ⲇ.translate(ᐃᐃᐃ * ᐃ, ᐃ * -ⲆⵠⲆⵠⵠ);
		ᐃᐃⲆΔ(Ⲇ, ᐃΔΔⲆⲆⲆᐃ, ΔⲆΔ, ⵠⵠⵠⵠ);
		if (ⵠⲆᐃⵠ) {
			ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆ])
		} else {
			ΔΔ(Ⲇ, Δⵠ[1])
		}
		Ⲇ.globalAlpha = 1;
		if (Ⲇᐃ == 0) {
			ᐃᐃⲆΔ(Ⲇ, 6, .65 * ΔⲆΔ, .65 * ⵠⵠⵠⵠ);
			ΔΔ(Ⲇ, Δⵠ[ⲆⲆⲆⲆ])
		} else if (Δⵠᐃ == Ⲇᐃ) {
			Ⲇ.translate(ⵠΔᐃⲆⵠ * ᐃ, 20 * ᐃ);
			ᐃᐃⲆΔ(Ⲇ, 6, .45 * ΔⲆΔ, ⵠⵠⵠⵠ * .4);
			ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃᐃ])
		}
		return ΔⲆ
	}

	function ⲆΔᐃΔⲆⵠΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 248 * ᐃ;
		ΔⲆ.height = ᐃ * 128;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 137, ᐃ * 7);
		Ⲇ.bezierCurveTo(ᐃ * 169, ᐃ * ⵠΔⲆᐃᐃ, 212 * ᐃ, ᐃⲆⵠⲆΔⵠⵠ * ᐃ, 241 * ᐃ, ᐃ * 5);
		Ⲇ.bezierCurveTo(ᐃ * 211, ᐃ * 63, ᐃ * 158, 92 * ᐃ, ᐃ * 103, ᐃ * 109);
		Ⲇ.bezierCurveTo(73 * ᐃ, ᐃ * 126, ᐃ * 54, ᐃ * 124, 6 * ᐃ, 99 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 82, 63 * ᐃ, ᐃ * 113, 35 * ᐃ, 137 * ᐃ, 8 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠⲆΔⲆ], 14 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 73, ᐃ * 124);
		Ⲇ.bezierCurveTo(ᐃ * 111, ᐃ * 126, 162 * ᐃ, ᐃ * 97, ᐃ * 203, 61 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 156, 98 * ᐃ, ᐃ * 131, 106 * ᐃ, ᐃ * 105, ᐃ * 109);
		Ⲇ.bezierCurveTo(99 * ᐃ, 121 * ᐃ, ᐃ * 87, 124 * ᐃ, ᐃ * 72, ᐃ * 124);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃⵠ], Δⵠ[ⵠⵠΔⵠ], ᐃ * 1);
		return ΔⲆ
	}

	function ⲆΔᐃⲆⲆ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 120 * ᐃ;
		var ⲆΔⲆ = ᐃ * 150;
		var ΔⲆΔ = ᐃ * 60;
		var ⵠⵠⵠⵠ = ΔⲆΔ / 4;
		var ⲆⲆⵠᐃ = ᐃ * 15;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.save();
		Ⲇ.translate(ⲆⲆᐃ / ᐃⲆᐃⵠ + 0 * ᐃ, ⲆΔⲆ / 2 + ᐃ * ⵠᐃⲆ + ⲆⲆⵠᐃ);
		Ⲇ.rotate(Math.PI / 3);
		Ⲇ.globalAlpha = .5;
		ᐃᐃⲆΔ(Ⲇ, 8, ΔⲆΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ⲆⲆᐃ / 2 - ⲆᐃᐃⲆΔ * ᐃ, ⲆΔⲆ / ΔⵠⲆᐃ + ΔⲆⵠΔⲆᐃΔ * ᐃ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.rotate(Math.PI / 3);
		Ⲇ.translate(0, -ⲆⲆⵠᐃ);
		ᐃᐃⲆΔ(Ⲇ, Δᐃᐃⵠⵠ, ΔⲆΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔ]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ⲆⲆᐃ / 2 - ᐃ * 9, ⲆΔⲆ / 2 - ⲆᐃᐃⵠᐃⲆΔ * ᐃ);
		Ⲇ.rotate(Math.PI / 2.8);
		ᐃᐃⲆΔ(Ⲇ, ⲆᐃⲆΔ, .5 * ΔⲆΔ, ⵠⵠⵠⵠ * .4);
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠΔ]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ⲆⲆᐃ / ⵠΔⵠΔ + 19 * ᐃ, ⲆΔⲆ / 2 + ᐃ * ᐃᐃᐃᐃⵠ);
		Ⲇ.rotate(Math.PI / ΔᐃⲆⲆ);
		ᐃᐃⲆΔ(Ⲇ, 5, ΔⲆΔ * .5, .4 * ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ⲆⲆᐃ / 2 - ᐃ * 8, ⲆΔⲆ / ⲆⵠΔⵠ + ⵠᐃⲆⵠⲆ * ᐃ);
		Ⲇ.rotate(Math.PI / 2.25);
		ᐃᐃⲆΔ(Ⲇ, ᐃᐃΔᐃ, ΔⲆΔ * .5, ⵠⵠⵠⵠ * .4);
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃⵠΔ]);
		Ⲇ.restore();
		return ΔⲆ
	}

	function ᐃⵠᐃΔΔΔᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 80 * ᐃ;
		ΔⲆ.height = ᐃ * ᐃΔᐃⵠⵠ;
		Ⲇ.scale(.5, .5);
		Ⲇ.translate(10, ᐃⵠᐃⵠᐃ);
		Ⲇ.globalAlpha = .5;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 47, ᐃ * ΔⲆⵠⵠ);
		Ⲇ.bezierCurveTo(ⵠᐃᐃᐃⵠⵠⵠ * ᐃ, 30 * ᐃ, ᐃ * ΔⵠⲆⲆⲆ, 42 * ᐃ, ᐃ * 10, ᐃ * 55);
		Ⲇ.bezierCurveTo(ᐃ * ΔⵠᐃⵠⲆⲆΔ, ᐃ * 75, 27 * ᐃ, ᐃ * 76, 36 * ᐃ, 72 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 52, 60 * ᐃ, 53 * ᐃ, ᐃ * 46, ᐃ * 54, ᐃ * 31);
		Ⲇ.bezierCurveTo(53 * ᐃ, ⲆᐃⵠⲆΔ * ᐃ, ᐃ * 50, ᐃ * 9, 48 * ᐃ, ᐃ * Ⲇⵠⵠᐃⵠ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(17 * ᐃ, 70 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃⲆᐃⲆⵠ * ᐃ, ᐃ * 77, ᐃ * ⵠⲆⵠᐃⵠ, ᐃ * 83, ᐃ * ⵠⲆΔⵠ, ᐃ * 87);
		ΔΔ(Ⲇ, undefined, Δⵠ[0], ⲆⲆⵠⲆⵠ * ᐃ);
		Ⲇ.translate(0, -10);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 47, ᐃᐃᐃΔⵠ * ᐃ);
		Ⲇ.bezierCurveTo(19 * ᐃ, ᐃ * 30, ᐃ * 12, ᐃ * 42, ᐃ * 10, ᐃ * 55);
		Ⲇ.bezierCurveTo(ᐃ * 11, ᐃ * 75, ᐃ * 27, ᐃ * 76, 36 * ᐃ, 72 * ᐃ);
		Ⲇ.bezierCurveTo(52 * ᐃ, 60 * ᐃ, 53 * ᐃ, ᐃ * 46, ᐃ * 54, 31 * ᐃ);
		Ⲇ.bezierCurveTo(53 * ᐃ, ᐃ * ⲆᐃⵠΔᐃ, 50 * ᐃ, ᐃ * ᐃΔⲆⲆⵠ, 48 * ᐃ, ᐃ * ⲆΔⵠᐃⵠ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⵠΔ], Δⵠ[ⵠⵠⵠᐃ], ᐃ * ⲆⲆᐃΔᐃΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * ᐃΔⵠΔⵠᐃⵠ, 70 * ᐃ);
		Ⲇ.bezierCurveTo(ΔⵠᐃᐃΔⲆᐃ * ᐃ, 77 * ᐃ, ᐃ * ᐃⵠᐃΔⲆ, ᐃ * 83, 4 * ᐃ, ᐃ * 87);
		ΔΔ(Ⲇ, ⵠⲆⲆⲆⲆ, Δⵠ[2], 8 * ᐃ);
		Ⲇ.globalAlpha = .5;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ⲆⵠⵠΔᐃ * ᐃ, ᐃ * 70);
		Ⲇ.bezierCurveTo(ᐃ * 33, 52 * ᐃ, 39 * ᐃ, ᐃ * 33, ᐃ * 48, ᐃ * ΔᐃᐃᐃⵠΔⲆ);
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔΔᐃΔⵠ], ᐃ * 8);
		return ΔⲆ
	}

	function ⵠⵠᐃⵠᐃΔⵠΔΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 118 * ᐃ;
		ΔⲆ.height = 114 * ᐃ;
		Ⲇ.translate(ⵠⵠⲆⵠ, ᐃ * 10);
		ᐃΔΔ(Ⲇ, 42 * ᐃ, 43 * ᐃ, ᐃ * 24.758836806279895);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(65 * ᐃ, 90 * ᐃ);
		Ⲇ.bezierCurveTo(72 * ᐃ, ᐃ * 91, 75 * ᐃ, 92 * ᐃ, ᐃ * 71, ᐃ * 96);
		Ⲇ.bezierCurveTo(65 * ᐃ, 98 * ᐃ, ᐃ * 65, ᐃ * 94, ᐃ * 65, ᐃ * 91);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(87 * ᐃ, ᐃ * 45);
		Ⲇ.bezierCurveTo(108 * ᐃ, 59 * ᐃ, ᐃ * ΔᐃⲆⲆⲆ, ᐃ * 86, 85 * ᐃ, 91 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 80, 96 * ᐃ, 68 * ᐃ, ᐃ * 95, 58 * ᐃ, 87 * ᐃ);
		Ⲇ.bezierCurveTo(53 * ᐃ, ᐃ * 80, 61 * ᐃ, 64 * ᐃ, 66 * ᐃ, ᐃ * 58);
		Ⲇ.bezierCurveTo(ᐃ * 73, ᐃ * 48, 78 * ᐃ, 44 * ᐃ, ᐃ * 87, ᐃ * 45);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃⵠ]);
		Ⲇ.translate(ⵠΔᐃⵠ, -10 * ᐃ);
		ᐃΔΔ(Ⲇ, 42 * ᐃ, ᐃ * 43, 24.758836806279895 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔᐃⵠΔ], ᐃᐃΔᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(65 * ᐃ, ᐃ * 90);
		Ⲇ.bezierCurveTo(72 * ᐃ, 91 * ᐃ, 75 * ᐃ, ᐃ * 92, 71 * ᐃ, ᐃ * 96);
		Ⲇ.bezierCurveTo(ᐃ * 65, ᐃ * 98, 65 * ᐃ, ᐃ * 94, 65 * ᐃ, ᐃ * 91);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠᐃ], Δⵠ[2], ᐃ * ΔⲆⲆⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 87, ᐃ * 45);
		Ⲇ.bezierCurveTo(ᐃ * 108, 59 * ᐃ, 100 * ᐃ, 86 * ᐃ, ᐃ * 85, 91 * ᐃ);
		Ⲇ.bezierCurveTo(80 * ᐃ, ᐃ * 96, ᐃ * 68, 95 * ᐃ, ᐃ * 58, ᐃ * 87);
		Ⲇ.bezierCurveTo(ᐃ * 53, 80 * ᐃ, ᐃ * 61, 64 * ᐃ, ᐃ * 66, ᐃ * 58);
		Ⲇ.bezierCurveTo(73 * ᐃ, ᐃ * 48, 78 * ᐃ, ᐃ * 44, ᐃ * 87, ᐃ * 45);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 52, 16 * ᐃ);
		Ⲇ.bezierCurveTo(55 * ᐃ, ⵠⲆΔΔⵠΔⵠ * ᐃ, 54 * ᐃ, 20 * ᐃ, 55 * ᐃ, 22 * ᐃ);
		Ⲇ.bezierCurveTo(52 * ᐃ, 24.5 * ᐃ, ᐃ * 52, 24.5 * ᐃ, 49 * ᐃ, ᐃ * 27);
		Ⲇ.bezierCurveTo(ᐃ * 45, 25 * ᐃ, 45 * ᐃ, ᐃ * 25, 41 * ᐃ, 23 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 45, ᐃ * ᐃᐃⲆⵠᐃ, ᐃ * 48, ᐃ * ΔΔΔⵠᐃ, 52 * ᐃ, 16 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⵠ], Δⵠ[4], ᐃᐃᐃᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(62 * ᐃ, 30 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 66, 29 * ᐃ, ᐃ * 64, ᐃ * 30, 66 * ᐃ, ᐃ * 30);
		Ⲇ.bezierCurveTo(67 * ᐃ, ᐃ * 31, 67 * ᐃ, ᐃ * 31, 68 * ᐃ, 32 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 66.5, ᐃ * 33.5, ᐃ * 66.5, ᐃ * 33.5, 65 * ᐃ, 35 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 63.5, 32.5 * ᐃ, ᐃ * 63.5, ᐃ * 32.5, 62 * ᐃ, ᐃ * 30);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 29, 21 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 31, ᐃ * 22, ᐃ * 31, ᐃ * 26, ᐃ * 29, ᐃ * 29);
		Ⲇ.bezierCurveTo(26 * ᐃ, ᐃ * 28.5, 26 * ᐃ, 28.5 * ᐃ, ᐃ * 23, ᐃ * 28);
		Ⲇ.bezierCurveTo(23 * ᐃ, 26.5 * ᐃ, ᐃ * 23, ᐃ * 26.5, 23 * ᐃ, 25 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 25, 23 * ᐃ, ᐃ * 25, ᐃ * 23, ᐃ * 27, ᐃ * 21);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * Ⲇᐃⵠᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(18 * ᐃ, ᐃ * 36);
		Ⲇ.bezierCurveTo(23 * ᐃ, 36 * ᐃ, 24 * ᐃ, ᐃ * 42, ᐃ * ⵠⵠΔⵠⲆΔΔ, 46 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 12, ᐃ * 39, ᐃ * ᐃⵠⵠᐃᐃ, ᐃ * 38, ᐃ * ΔⲆⵠᐃᐃⵠⵠ, ᐃ * 37);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⵠᐃΔⲆ], 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 30, 34 * ᐃ);
		Ⲇ.bezierCurveTo(35 * ᐃ, ᐃ * 36, ᐃ * 36, 39 * ᐃ, ᐃ * 32, 45 * ᐃ);
		Ⲇ.bezierCurveTo(25 * ᐃ, 46 * ᐃ, 25 * ᐃ, ᐃ * 44, ᐃ * 30, ᐃ * 34);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠᐃ], Δⵠ[4], ΔΔⲆⲆⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 59, 35 * ᐃ);
		Ⲇ.bezierCurveTo(58 * ᐃ, ᐃ * 27, ᐃ * 57, 27 * ᐃ, ᐃ * 52, ᐃ * 31);
		Ⲇ.bezierCurveTo(50 * ᐃ, 36 * ᐃ, 53 * ᐃ, ᐃ * 38, ᐃ * 58, ᐃ * 36);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(63 * ᐃ, ᐃ * 46);
		Ⲇ.bezierCurveTo(ᐃ * 64.5, 46.5 * ᐃ, 64.5 * ᐃ, 46.5 * ᐃ, 66 * ᐃ, ᐃ * 47);
		Ⲇ.bezierCurveTo(70 * ᐃ, ᐃ * 50, ᐃ * 70, 53 * ᐃ, ᐃ * 61, 55 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 62, ᐃ * 50.5, ᐃ * 62, ᐃ * 50.5, ᐃ * 63, 46 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃΔ], Δⵠ[ᐃⲆⵠᐃⵠ], ᐃ * ᐃⵠᐃⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 41, 42 * ᐃ);
		Ⲇ.bezierCurveTo(47 * ᐃ, 41 * ᐃ, ᐃ * 53, 47 * ᐃ, 46 * ᐃ, ᐃ * 51);
		Ⲇ.bezierCurveTo(38 * ᐃ, 49 * ᐃ, 39 * ᐃ, ᐃ * 46, 41 * ᐃ, ᐃ * 43);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⵠ], Δⵠ[ⵠᐃΔΔ], ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(44 * ᐃ, 57 * ᐃ);
		Ⲇ.bezierCurveTo(54 * ᐃ, ᐃ * 57, ᐃ * 54, 58 * ᐃ, ᐃ * 55, 61 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 54, ᐃ * 63, 52 * ᐃ, 64 * ᐃ, ᐃ * 48, 65 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⵠ], Δⵠ[ᐃᐃⵠΔ], ᐃ * ᐃᐃᐃΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 20, 52 * ᐃ);
		Ⲇ.bezierCurveTo(25 * ᐃ, 51 * ᐃ, 27 * ᐃ, 50 * ᐃ, ᐃ * 28, 54 * ᐃ);
		Ⲇ.bezierCurveTo(27 * ᐃ, 58 * ᐃ, 24 * ᐃ, ᐃ * 58, ᐃ * 22, 58 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 21, 55.5 * ᐃ, ᐃ * 21, ᐃ * 55.5, 20 * ᐃ, ᐃ * 53);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(30 * ᐃ, ᐃ * 61);
		Ⲇ.bezierCurveTo(ᐃ * 37, 61 * ᐃ, 39 * ᐃ, 63 * ᐃ, 39 * ᐃ, ᐃ * 68);
		Ⲇ.bezierCurveTo(ᐃ * 36, ᐃ * 68.5, 36 * ᐃ, ᐃ * 68.5, 33 * ᐃ, 69 * ᐃ);
		Ⲇ.bezierCurveTo(30.5 * ᐃ, 67.5 * ᐃ, 30.5 * ᐃ, 67.5 * ᐃ, ᐃ * 28, 66 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⵠⲆⲆⵠ], ΔⲆⲆⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 88, 45 * ᐃ);
		Ⲇ.bezierCurveTo(90 * ᐃ, ᐃ * 46.5, 90 * ᐃ, ᐃ * 46.5, ᐃ * 92, ᐃ * 48);
		Ⲇ.bezierCurveTo(92 * ᐃ, ᐃ * 50, 92 * ᐃ, 50 * ᐃ, ᐃ * 92, ᐃ * 52);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⵠⵠᐃΔ], ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 96, ᐃ * 53);
		Ⲇ.bezierCurveTo(97.5 * ᐃ, 55 * ᐃ, ᐃ * 97.5, ᐃ * 55, 99 * ᐃ, ᐃ * 57);
		Ⲇ.bezierCurveTo(97.5 * ᐃ, ᐃ * 59.5, 97.5 * ᐃ, ᐃ * 59.5, ᐃ * 96, 62 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 93.5, 60.5 * ᐃ, 93.5 * ᐃ, ᐃ * 60.5, 91 * ᐃ, 59 * ᐃ);
		Ⲇ.bezierCurveTo(91.5 * ᐃ, 57 * ᐃ, ᐃ * 91.5, ᐃ * 57, 92 * ᐃ, 55 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃᐃΔΔᐃ], ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(92 * ᐃ, 71 * ᐃ);
		Ⲇ.bezierCurveTo(94.5 * ᐃ, ᐃ * 70.5, ᐃ * 94.5, 70.5 * ᐃ, 97 * ᐃ, 70 * ᐃ);
		Ⲇ.bezierCurveTo(98.5 * ᐃ, ᐃ * 72.5, ᐃ * 98.5, ᐃ * 72.5, ⲆⵠⲆⲆⵠ * ᐃ, 75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 97, 76.5 * ᐃ, 97 * ᐃ, 76.5 * ᐃ, ᐃ * 94, ᐃ * 78);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃΔ], Δⵠ[4], ᐃ * ΔΔⲆⲆⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 95, 82 * ᐃ);
		Ⲇ.bezierCurveTo(96 * ᐃ, ᐃ * 83, 96 * ᐃ, ᐃ * 83, 97 * ᐃ, 84 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 97, ᐃ * 85.5, ᐃ * 97, 85.5 * ᐃ, 97 * ᐃ, 87 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 93.5, 87.5 * ᐃ, ᐃ * 93.5, 87.5 * ᐃ, 90 * ᐃ, ᐃ * 88);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 86, 72 * ᐃ);
		Ⲇ.bezierCurveTo(89 * ᐃ, 76 * ᐃ, 88 * ᐃ, ᐃ * 81, ᐃ * 85, ᐃ * 82);
		Ⲇ.bezierCurveTo(ᐃ * 80, ᐃ * 80, 82 * ᐃ, 78 * ᐃ, ᐃ * 85, ᐃ * 72);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃⲆᐃⲆ], ᐃᐃᐃⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 80, 86 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 84, 88 * ᐃ, ᐃ * 86, ᐃ * 88, ᐃ * 85, 93 * ᐃ);
		Ⲇ.bezierCurveTo(80 * ᐃ, 96 * ᐃ, 79 * ᐃ, 96 * ᐃ, 76 * ᐃ, 91 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔⵠⵠⲆ], ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(84 * ᐃ, ᐃ * 46);
		Ⲇ.bezierCurveTo(93 * ᐃ, ᐃ * 51, ᐃ * 91, 62 * ᐃ, 80 * ᐃ, 78 * ᐃ);
		Ⲇ.bezierCurveTo(74 * ᐃ, 86 * ᐃ, 66 * ᐃ, ᐃ * 90, ᐃ * 60, 86 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 55, 79 * ᐃ, 57 * ᐃ, ᐃ * 73, 67 * ᐃ, 57 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 71, 51 * ᐃ, ᐃ * 79, ᐃ * 44, ᐃ * 84, ᐃ * 46);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔᐃ], Δⵠ[ⵠⵠᐃᐃᐃ], ᐃ * ⲆⵠΔΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(76 * ᐃ, 60 * ᐃ);
		Ⲇ.bezierCurveTo(80 * ᐃ, ᐃ * 66, 75 * ᐃ, ᐃ * 74, ᐃ * 68, 74 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 60, ᐃ * 64, 68 * ᐃ, ᐃ * 59, 76 * ᐃ, ᐃ * 59);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[ᐃΔΔᐃΔ], ᐃ * 5);
		return ΔⲆ
	}

	function ⵠᐃᐃᐃⵠΔⵠᐃᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 130;
		var ⲆΔⲆ = 142 * ᐃ;
		var Ⲇⵠ = ⲆⲆᐃ / 2;
		var ᐃⵠⲆ = ⲆΔⲆ / ΔΔⲆⲆ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		ᐃΔΔ(Ⲇ, Ⲇⵠ, ᐃⵠⲆ, ᐃ * 40, 0);
		ΔΔ(Ⲇ, ⵠⵠⲆΔⲆ, Δⵠ[0], ⲆⲆΔΔᐃ * ᐃ);
		ᐃΔΔ(Ⲇ, Ⲇⵠ, ᐃⵠⲆ, 30 * ᐃ, ᐃⵠⵠⲆ);
		ΔΔ(Ⲇ, ⵠΔⲆⵠΔ, Δⵠ[ΔΔᐃᐃ], ⵠⵠⲆⲆΔⲆᐃ * ᐃ);
		ᐃΔΔ(Ⲇ, Ⲇⵠ, ᐃⵠⲆ, 20 * ᐃ, ⵠⲆΔ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		return ΔⲆ
	}

	function ⵠⲆⵠᐃΔΔΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 373;
		ΔⲆ.height = ᐃ * 314;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔᐃΔⲆ;
		Ⲇ.translate(ᐃ * 5, ᐃ * ᐃᐃᐃΔⵠ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 184.048583984375, 69.1805419921875 * ᐃ);
		ᐃΔⵠ(Ⲇ, -40 * ᐃ, -28.5 * ᐃ, 80 * ᐃ, 57 * ᐃ, ⵠⲆⲆⵠΔ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃΔ], Δⵠ[2], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 185.048583984375, 61.6805419921875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 145.048583984375, 59.6805419921875 * ᐃ, 138.048583984375 * ᐃ, 41.6805419921875 * ᐃ, 148.048583984375 * ᐃ, 33.6805419921875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 169.048583984375, ᐃ * 17.6805419921875, ᐃ * 194.048583984375, ᐃ * 20.6805419921875, ᐃ * 210.048583984375, 27.6805419921875 * ᐃ);
		Ⲇ.bezierCurveTo(234.048583984375 * ᐃ, 40.6805419921875 * ᐃ, 225.048583984375 * ᐃ, ᐃ * 57.6805419921875, 186.048583984375 * ᐃ, ᐃ * 61.6805419921875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], Ⲇⵠⵠᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(224.048583984375 * ᐃ, ᐃ * 56.6805419921875);
		Ⲇ.bezierCurveTo(326.048583984375 * ᐃ, ᐃ * 69.6805419921875, 363.048583984375 * ᐃ, ᐃ * 148.6805419921875, ᐃ * 349.048583984375, ᐃ * 206.6805419921875);
		Ⲇ.bezierCurveTo(329.048583984375 * ᐃ, ᐃ * 278.6805419921875, ᐃ * 252.048583984375, ᐃ * 283.6805419921875, ᐃ * 206.048583984375, 275.6805419921875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 206.548583984375, ᐃ * 266.6805419921875, 206.548583984375 * ᐃ, ᐃ * 266.6805419921875, ᐃ * 207.048583984375, ᐃ * 257.6805419921875);
		Ⲇ.bezierCurveTo(ᐃ * 276.048583984375, ᐃ * 268.6805419921875, ᐃ * 308.048583984375, 239.6805419921875 * ᐃ, 323.048583984375 * ᐃ, ᐃ * 208.6805419921875);
		Ⲇ.bezierCurveTo(ᐃ * 352.048583984375, 145.6805419921875 * ᐃ, 292.048583984375 * ᐃ, 86.6805419921875 * ᐃ, ᐃ * 223.048583984375, ᐃ * 74.6805419921875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], 6 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(183.548583984375 * ᐃ, 119.6805419921875 * ᐃ);
		ᐃΔⵠ(Ⲇ, -121.5 * ᐃ, ᐃ * -45, ᐃ * 243, ᐃ * 90, 40 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ], Δⵠ[ⲆⵠⲆⲆ], 6 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 183.048583984375, 155.6805419921875 * ᐃ);
		ᐃΔⵠ(Ⲇ, -121 * ᐃ, -52 * ᐃ, ᐃ * 242, 104 * ᐃ, ᐃ * 40);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆⲆ], Δⵠ[0], ᐃ * ΔⲆⲆⵠⵠ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 183.048583984375, ᐃ * 205.1805419921875);
		ᐃΔⵠ(Ⲇ, -121 * ᐃ, ᐃ * -50.5, 242 * ᐃ, 101 * ᐃ, 40 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠⲆⵠⵠ], ᐃ * 6);
		Ⲇ.save();
		Ⲇ.translate(185.048583984375 * ᐃ, 204.1805419921875 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -ᐃΔᐃⵠⵠ, -34.5 * ᐃ, 200 * ᐃ, ᐃ * 69, 40 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃ * 6);
		ᐃΔΔ(Ⲇ, ᐃ * 185.048583984375, ᐃ * 257.6805419921875, ᐃ * 27.018512172212592);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[Δⵠⵠⵠ], Ⲇⵠⵠᐃⵠ * ᐃ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(-ᐃᐃⵠᐃΔ * ᐃ, -ⲆⵠΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 224.048583984375, 56.6805419921875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 326.048583984375, 69.6805419921875 * ᐃ, ᐃ * 363.048583984375, ᐃ * 148.6805419921875, ᐃ * 349.048583984375, ᐃ * 206.6805419921875);
		Ⲇ.bezierCurveTo(329.048583984375 * ᐃ, ᐃ * 278.6805419921875, 252.048583984375 * ᐃ, 283.6805419921875 * ᐃ, ᐃ * 206.048583984375, ᐃ * 275.6805419921875);
		Ⲇ.bezierCurveTo(206.548583984375 * ᐃ, 266.6805419921875 * ᐃ, ᐃ * 206.548583984375, 266.6805419921875 * ᐃ, ᐃ * 207.048583984375, 257.6805419921875 * ᐃ);
		Ⲇ.bezierCurveTo(276.048583984375 * ᐃ, ᐃ * 268.6805419921875, 308.048583984375 * ᐃ, ᐃ * 239.6805419921875, 323.048583984375 * ᐃ, 208.6805419921875 * ᐃ);
		Ⲇ.bezierCurveTo(352.048583984375 * ᐃ, ᐃ * 145.6805419921875, 292.048583984375 * ᐃ, 86.6805419921875 * ᐃ, 223.048583984375 * ᐃ, ᐃ * 74.6805419921875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * 6);
		Ⲇ.save();
		Ⲇ.translate(184.048583984375 * ᐃ, 69.1805419921875 * ᐃ);
		ᐃΔⵠ(Ⲇ, -40 * ᐃ, -28.5 * ᐃ, 80 * ᐃ, ᐃ * 57, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃΔ], Δⵠ[ⵠΔⵠΔ], ᐃ * ⵠᐃΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 185.048583984375, 61.6805419921875 * ᐃ);
		Ⲇ.bezierCurveTo(145.048583984375 * ᐃ, ᐃ * 59.6805419921875, ᐃ * 138.048583984375, ᐃ * 41.6805419921875, 148.048583984375 * ᐃ, ᐃ * 33.6805419921875);
		Ⲇ.bezierCurveTo(ᐃ * 169.048583984375, ᐃ * 17.6805419921875, 194.048583984375 * ᐃ, ᐃ * 20.6805419921875, 210.048583984375 * ᐃ, 27.6805419921875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 234.048583984375, 40.6805419921875 * ᐃ, ᐃ * 225.048583984375, ᐃ * 57.6805419921875, 186.048583984375 * ᐃ, 61.6805419921875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ᐃᐃΔⵠ], ⲆΔⵠᐃⵠ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(183.548583984375 * ᐃ, ᐃ * 119.6805419921875);
		ᐃΔⵠ(Ⲇ, -121.5 * ᐃ, ᐃ * -45, ᐃ * 243, ᐃ * 90, ᐃ * 40);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[4], ΔⵠΔⵠᐃ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(183.048583984375 * ᐃ, 155.6805419921875 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -121, ᐃ * -52, ᐃ * 242, ᐃ * 104, 40 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⵠ], Δⵠ[4], 6 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(183.048583984375 * ᐃ, ᐃ * 205.1805419921875);
		ᐃΔⵠ(Ⲇ, ᐃ * -121, -50.5 * ᐃ, ᐃ * 242, ᐃ * 101, 40 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[ᐃᐃⵠΔ], 6 * ᐃ);
		Ⲇ.globalCompositeOperation = ⵠ[381];
		Ⲇ.save();
		Ⲇ.translate(185.048583984375 * ᐃ, 204.1805419921875 * ᐃ);
		ᐃΔⵠ(Ⲇ, -100 * ᐃ, ᐃ * -34.5, 200 * ᐃ, ᐃ * 69, ᐃ * 40);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[ⲆΔⲆᐃᐃ], ᐃ * ⲆⲆⵠⵠⲆ);
		Ⲇ.globalCompositeOperation = ⵠ[453];
		Ⲇ.globalAlpha = .5;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 185.048583984375, 204.1805419921875 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -ᐃⲆΔⲆᐃ, ᐃ * -34.5, 200 * ᐃ, ᐃ * 69, ᐃ * 40);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔⵠΔⲆ], Δⵠ[8], ᐃ * 6);
		Ⲇ.globalAlpha = 1;
		Ⲇ.save();
		ᐃΔΔ(Ⲇ, 185.048583984375 * ᐃ, ᐃ * 257.6805419921875, 27.018512172212592 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * 6);
		Ⲇ.restore();
		return ΔⲆ
	}

	function ΔᐃΔΔᐃⲆⵠ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 220 * ᐃ;
		var ⲆΔⲆ = ᐃ * 230;
		var ΔⲆΔ = 100 * ᐃ;
		var ⵠⵠⵠⵠ = ΔⲆΔ / ᐃᐃⵠΔ;
		var ⲆⲆⵠᐃ = ᐃ * ⵠᐃᐃⵠΔ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(ⲆⲆᐃ / ⲆᐃΔⲆ, ⲆΔⲆ / ⲆⵠΔⵠ + ⲆⲆⵠᐃ);
		Ⲇ.globalAlpha = .5;
		ᐃᐃⲆΔ(Ⲇ, 7, ΔⲆΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ]);
		Ⲇ.globalAlpha = Δᐃⵠⵠ;
		Ⲇ.translate(ⵠⵠⵠΔ, -ⲆⲆⵠᐃ);
		ᐃᐃⲆΔ(Ⲇ, ⵠⲆⲆΔΔΔⲆ, ΔⲆΔ, ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[1]);
		ᐃᐃⲆΔ(Ⲇ, 6, .65 * ΔⲆΔ, .65 * ⵠⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[2]);
		return ΔⲆ
	}

	function ᐃⵠΔΔΔ(ᐃ, text, ⲆΔⲆ, Δⵠ, ⲆⲆⵠᐃ, ΔⲆⲆᐃ, ᐃΔΔᐃⵠⲆⲆ, ᐃⲆⵠⵠΔ, ΔⵠᐃⲆ, ΔΔⲆⵠ, ΔⵠΔᐃⵠ) {
		ΔⵠΔᐃⵠ === ⵠΔⵠⵠⲆ && (ΔⵠΔᐃⵠ = 0);
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆⲆᐃ = !ΔⲆⲆᐃ ? 0 : ᐃ * ΔⲆⲆᐃ;
		var ⵠⵠⲆ = Math.floor(ⲆΔⲆ * ᐃ);
		Ⲇ.font = ⵠⵠⲆ + ⵠ[572];
		Ⲇ.lineJoin = ⵠ[401];
		ᐃⲆⵠⵠΔ = ᐃ * ᐃⲆⵠⵠΔ;
		var ΔⵠⵠⲆᐃ = ᐃΔΔᐃⵠⲆⲆ ? ΔⲆᐃΔ * ᐃⲆⵠⵠΔ : 0;
		if (ΔⵠᐃⲆ) var ⵠΔΔ = Math.min(Ⲇ.measureText(text).width + ᐃ * ⲆⵠΔⵠ + ΔⵠⵠⲆᐃ, ΔⵠᐃⲆ);
		else var ⵠΔΔ = Ⲇ.measureText(text).width + ᐃ * ⲆⲆⲆⲆ + ΔⵠⵠⲆᐃ + ΔⵠΔᐃⵠ * ᐃ * 2;
		var ⵠⵠⲆ = ᐃ * (ⵠⵠⲆ + ΔⲆⲆᐃ + ΔⵠΔᐃⵠ) + ΔⵠⵠⲆᐃ;
		ΔⲆ.width = ⵠΔΔ;
		ΔⲆ.height = ⵠⵠⲆ;
		ᐃΔΔᐃⵠⲆⲆ && (Ⲇ.fillStyle = ᐃΔΔᐃⵠⲆⲆ, ᐃΔⵠ(Ⲇ, ΔⲆⲆ, 0, ⵠΔΔ, ⵠⵠⲆ, ᐃⲆⵠⵠΔ * 2), Ⲇ.fill(), Ⲇ.translate(ᐃⲆⵠⵠΔ, ᐃⲆⵠⵠΔ));
		Ⲇ.textBaseline = ⵠ[90], Ⲇ.font = ⲆΔⲆ + ⵠ[572];
		Ⲇ.lineJoin = ⵠ[401];
		ⲆⲆⵠᐃ && (Ⲇ.beginPath(), Ⲇ.fillStyle = ⲆⲆⵠᐃ, Ⲇ.fillText(text, 0, ⵠⵠⲆ / ⲆⲆΔⲆ + ΔⲆⲆᐃ - ΔⵠⵠⲆᐃ / 2, ⵠΔΔ));
		Ⲇ.beginPath();
		if (ΔΔⲆⵠ) {
			Ⲇ.strokeStyle = ΔΔⲆⵠ;
			Ⲇ.lineWidth = ΔⵠΔᐃⵠ;
			Ⲇ.strokeText(text, ΔⵠΔᐃⵠ, (ⵠⵠⲆ - ΔⵠⵠⲆᐃ) / 2, ⵠΔΔ)
		}
		Ⲇ.fillStyle = Δⵠ;
		Ⲇ.fillText(text, ΔⵠΔᐃⵠ, (ⵠⵠⲆ - ΔⵠⵠⲆᐃ) / ΔⵠⲆᐃ, ⵠΔΔ);
		return ΔⲆ
	}

	function ⵠⲆⵠⵠΔⲆⲆ(ᐃ, ΔⲆΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ΔⲆΔ * ᐃ * ⲆᐃⵠΔ;
		var ⲆΔⲆ = ᐃᐃΔⵠ * (ᐃ * ΔⲆΔ);
		var Ⲇⵠ = ⲆⲆᐃ / ΔΔᐃΔⵠ;
		var ᐃⵠⲆ = ⲆΔⲆ / 2;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(Ⲇⵠ, ᐃⵠⲆ);
		ᐃΔΔ(Ⲇ, ⵠᐃⲆⲆ, ⵠᐃⲆ, ᐃ * ΔⲆΔ, ⵠⵠⲆⵠ);
		ΔΔ(Ⲇ, Δⵠ);
		return ΔⲆ
	}

	function ⲆᐃᐃᐃⲆⵠΔⵠⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 350;
		ΔⲆ.height = 140 * ᐃ;
		Ⲇ.translate(ᐃ * -50, -150 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 184.5, ᐃ * 222.0625);
		Ⲇ.bezierCurveTo(ᐃ * 185.5, 184.0625 * ᐃ, 302.5 * ᐃ, ᐃ * 171.0625, 313.5 * ᐃ, ᐃ * 222.0625);
		Ⲇ.bezierCurveTo(ᐃ * 330.5, ᐃ * 263.0625, ᐃ * 181.5, ᐃ * 274.0625, 184.5 * ᐃ, 223.0625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃⵠ], Δⵠ[ⲆᐃΔ], ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 131.5, 241.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 144.5, 278.0625 * ᐃ, 270.5 * ᐃ, ᐃ * 209.0625, ᐃ * 228.5, 174.0625 * ᐃ);
		Ⲇ.bezierCurveTo(196.5 * ᐃ, 147.0625 * ᐃ, 117.5 * ᐃ, 196.0625 * ᐃ, 131.5 * ᐃ, 240.0625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ], Δⵠ[1], 8 * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 270.5, ᐃ * 225.0625, 15.811388300841896 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[2]);
		ᐃΔΔ(Ⲇ, ᐃ * 243.5, ᐃ * 225.0625, 6.082762530298219 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[2]);
		ᐃΔΔ(Ⲇ, ᐃ * 255.5, 210.0625 * ᐃ, ᐃ * 10.816653826391969);
		ΔΔ(Ⲇ, Δⵠ[2]);
		ᐃΔΔ(Ⲇ, 167.5 * ᐃ, 215.0625 * ᐃ, 15.297058540778355 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃΔ]);
		ᐃΔΔ(Ⲇ, 176.5 * ᐃ, 204.0625 * ᐃ, 7.280109889280518 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠΔⵠ]);
		ᐃΔΔ(Ⲇ, 206.5 * ᐃ, ᐃ * 189.0625, 7.280109889280518 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 151.5, 212.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 161.5, ᐃ * 204.0625, 173.5 * ᐃ, ᐃ * 214.0625, 158.5 * ᐃ, 221.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 145.5, 228.0625 * ᐃ, ᐃ * 144.5, 216.0625 * ᐃ, ᐃ * 151.5, 212.0625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃⲆᐃⲆ], ᐃ * ⵠⲆΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(194.5 * ᐃ, 209.0625 * ᐃ);
		Ⲇ.bezierCurveTo(205.5 * ᐃ, ᐃ * 202.0625, ᐃ * 215.5, ᐃ * 207.0625, 199.5 * ᐃ, 217.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 187.5, ᐃ * 224.0625, ᐃ * 182.5, 217.0625 * ᐃ, 194.5 * ᐃ, ᐃ * 209.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠᐃ], Δⵠ[Ⲇⵠⵠⵠ], ⵠᐃΔⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(188.5 * ᐃ, ᐃ * 183.0625);
		Ⲇ.bezierCurveTo(ᐃ * 201.5, ᐃ * 176.0625, ᐃ * 213.5, 187.0625 * ᐃ, 193.5 * ᐃ, 193.0625 * ᐃ);
		Ⲇ.bezierCurveTo(185.5 * ᐃ, 194.0625 * ᐃ, 175.5 * ᐃ, 189.0625 * ᐃ, ᐃ * 188.5, ᐃ * 183.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ⵠⲆⲆⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(261.5 * ᐃ, 202.0625 * ᐃ);
		Ⲇ.bezierCurveTo(274.5 * ᐃ, ᐃ * 201.0625, 282.5 * ᐃ, 214.0625 * ᐃ, 261.5 * ᐃ, 215.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 246.5, ᐃ * 214.0625, 248.5 * ᐃ, 203.0625 * ᐃ, ᐃ * 261.5, ᐃ * 202.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃΔ], Δⵠ[ᐃⲆⲆΔΔ], ᐃΔⵠⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(240.5 * ᐃ, ᐃ * 231.0625);
		Ⲇ.bezierCurveTo(255.5 * ᐃ, 231.0625 * ᐃ, 254.5 * ᐃ, 243.0625 * ᐃ, ᐃ * 240.5, 242.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 225.5, 239.0625 * ᐃ, 225.5 * ᐃ, ᐃ * 232.0625, 240.5 * ᐃ, ᐃ * 231.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠᐃ], Δⵠ[ⵠᐃᐃΔ], ᐃ * ⵠΔⲆΔΔ);
		return ΔⲆ
	}

	function ⵠⵠⵠᐃⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 140;
		var ⲆΔⲆ = 150 * ᐃ;
		var ⲆⲆⵠᐃ = ⲆΔΔⲆᐃ * ᐃ;
		var ⵠΔΔ = 4 * ᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(ᐃ * -50, ᐃ * -38 + ⲆⲆⵠᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : Ⲇⵠᐃ;
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(160 * ᐃ, ᐃ * 65, ᐃ * 160, ᐃ * 85, ᐃ * 152, ᐃ * 95);
		Ⲇ.bezierCurveTo(152 * ᐃ, ᐃ * 95, ᐃ * 173, ᐃ * 94, 187 * ᐃ, 102 * ᐃ);
		Ⲇ.bezierCurveTo(187 * ᐃ, 102 * ᐃ, ᐃ * 180, ᐃ * 120, 155 * ᐃ, ᐃ * 126);
		Ⲇ.bezierCurveTo(ᐃ * 154, ᐃ * 126, ᐃ * 166, ᐃ * 138, ᐃ * 169, ᐃ * 148);
		Ⲇ.bezierCurveTo(ᐃ * 169, ᐃ * 148, 148 * ᐃ, 152 * ᐃ, ᐃ * 133, ᐃ * 140);
		Ⲇ.bezierCurveTo(ᐃ * 133, ᐃ * 140, ᐃ * 134, 160 * ᐃ, ᐃ * 122, 175 * ᐃ);
		Ⲇ.bezierCurveTo(122 * ᐃ, ᐃ * 175, 107 * ᐃ, 162 * ᐃ, ᐃ * 107, 144 * ᐃ);
		Ⲇ.bezierCurveTo(107 * ᐃ, ᐃ * 144, ᐃ * 98, ᐃ * 164, 73 * ᐃ, ᐃ * 167);
		Ⲇ.bezierCurveTo(ᐃ * 73, ᐃ * 167, ᐃ * 72, ᐃ * 134, ᐃ * 90, 127 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 90, ᐃ * 127, 70 * ᐃ, 134 * ᐃ, ᐃ * 55, ᐃ * 123);
		Ⲇ.bezierCurveTo(ᐃ * 55, 123 * ᐃ, ᐃ * 58, ᐃ * 115, ᐃ * 75, 104 * ᐃ);
		Ⲇ.bezierCurveTo(75 * ᐃ, 104 * ᐃ, ᐃ * 66, ᐃ * 96, ᐃ * 61, ᐃ * 77);
		Ⲇ.bezierCurveTo(ᐃ * 61, 77 * ᐃ, 83 * ᐃ, 74 * ᐃ, 102 * ᐃ, ᐃ * 89);
		Ⲇ.bezierCurveTo(ᐃ * 102, ᐃ * 89, 92 * ᐃ, ᐃ * 66, ᐃ * 110, 41 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 111, 40 * ᐃ, 130 * ᐃ, 54 * ᐃ, 130 * ᐃ, ᐃ * 82);
		Ⲇ.bezierCurveTo(ᐃ * 130, 82 * ᐃ, ᐃ * 143, 67 * ᐃ, 159 * ᐃ, 65 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.translate(0, 0 - ⲆⲆⵠᐃ);
		Ⲇ.globalAlpha = ΔⲆᐃⲆ;
		Ⲇ.beginPath();
		Ⲇ.bezierCurveTo(ᐃ * 160, ᐃ * 65, ᐃ * 160, 85 * ᐃ, ᐃ * 152, ᐃ * 95);
		Ⲇ.bezierCurveTo(ᐃ * 152, 95 * ᐃ, 173 * ᐃ, 94 * ᐃ, 187 * ᐃ, 102 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 187, ᐃ * 102, 180 * ᐃ, ᐃ * 120, ᐃ * 155, ᐃ * 126);
		Ⲇ.bezierCurveTo(ᐃ * 154, 126 * ᐃ, 166 * ᐃ, 138 * ᐃ, 169 * ᐃ, 148 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 169, 148 * ᐃ, ᐃ * 148, 152 * ᐃ, 133 * ᐃ, 140 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 133, 140 * ᐃ, ᐃ * 134, ᐃ * 160, ᐃ * 122, ᐃ * 175);
		Ⲇ.bezierCurveTo(ᐃ * 122, 175 * ᐃ, 107 * ᐃ, ᐃ * 162, 107 * ᐃ, 144 * ᐃ);
		Ⲇ.bezierCurveTo(107 * ᐃ, ᐃ * 144, ᐃ * 98, ᐃ * 164, ᐃ * 73, 167 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 73, ᐃ * 167, 72 * ᐃ, 134 * ᐃ, 90 * ᐃ, ᐃ * 127);
		Ⲇ.bezierCurveTo(90 * ᐃ, 127 * ᐃ, 70 * ᐃ, ᐃ * 134, 55 * ᐃ, ᐃ * 123);
		Ⲇ.bezierCurveTo(55 * ᐃ, 123 * ᐃ, ᐃ * 58, 115 * ᐃ, ᐃ * 75, ᐃ * 104);
		Ⲇ.bezierCurveTo(75 * ᐃ, ᐃ * 104, ᐃ * 66, ᐃ * 96, ᐃ * 61, ᐃ * 77);
		Ⲇ.bezierCurveTo(61 * ᐃ, 77 * ᐃ, ᐃ * 83, ᐃ * 74, 102 * ᐃ, 89 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 102, 89 * ᐃ, 92 * ᐃ, ᐃ * 66, ᐃ * 110, ᐃ * 41);
		Ⲇ.bezierCurveTo(ᐃ * 111, 40 * ᐃ, ᐃ * 130, ᐃ * 54, ᐃ * 130, 82 * ᐃ);
		Ⲇ.bezierCurveTo(130 * ᐃ, ᐃ * 82, ᐃ * 143, 67 * ᐃ, ᐃ * 159, 65 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Ⲇⵠᐃ], Δⵠ[2], ⵠΔΔ);
		return ΔⲆ
	}

	function ΔᐃΔⵠΔⵠⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 130;
		ΔⲆ.height = ᐃ * 148;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 65, 85 * ᐃ);
		Ⲇ.rotate(1.4);
		ᐃᐃⲆΔ(Ⲇ, 7, ᐃ * 60, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.save();
		Ⲇ.translate(65 * ᐃ, 74 * ᐃ);
		Ⲇ.rotate(1.4);
		ᐃᐃⲆΔ(Ⲇ, 7, 60 * ᐃ, ᐃ * ⲆΔⵠΔⵠ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 4);
		Ⲇ.rotate(.64);
		ᐃᐃⲆΔ(Ⲇ, 7, ᐃ * 40, ᐃ * ᐃⵠᐃⵠⲆ);
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⲆΔᐃᐃΔ], 4);
		Ⲇ.rotate(.12);
		ᐃᐃⲆΔ(Ⲇ, 7, ᐃ * 23, ᐃ * 5);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⵠᐃΔ]);
		return ΔⲆ
	}

	function ᐃΔΔᐃⲆⵠΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 220;
		ΔⲆ.height = ᐃ * 180;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ᐃ * -90, -150 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(104 * ᐃ, 237.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 110, 237.8000030517578 * ᐃ, 110 * ᐃ, ᐃ * 237.8000030517578, 116 * ᐃ, ᐃ * 237.8000030517578);
		Ⲇ.bezierCurveTo(ᐃ * 116, 241.8000030517578 * ᐃ, 116 * ᐃ, 241.8000030517578 * ᐃ, ᐃ * 116, ᐃ * 245.8000030517578);
		Ⲇ.bezierCurveTo(115 * ᐃ, 245.3000030517578 * ᐃ, ᐃ * 115, 245.3000030517578 * ᐃ, ᐃ * 114, 244.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 109.5, 244.8000030517578 * ᐃ, 109.5 * ᐃ, ᐃ * 244.8000030517578, ᐃ * 105, ᐃ * 244.8000030517578);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[ΔⲆⲆⵠ], ⲆⲆⲆⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(115 * ᐃ, 211.20000457763672 * ᐃ);
		Ⲇ.bezierCurveTo(106 * ᐃ, ᐃ * 216.20000457763672, ᐃ * 101, ᐃ * 234.20000457763672, ᐃ * 102, 241.20000457763672 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 102, 260.2000045776367 * ᐃ, 115 * ᐃ, 269.2000045776367 * ᐃ, ᐃ * 115, 269.2000045776367 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 116, ᐃ * 265.2000045776367, 115.5 * ᐃ, 265.2000045776367 * ᐃ, 116 * ᐃ, ᐃ * 261.2000045776367);
		Ⲇ.bezierCurveTo(ᐃ * 112, 264 * ᐃ, 108 * ᐃ, ᐃ * 254, ᐃ * 106, 242 * ᐃ);
		Ⲇ.bezierCurveTo(105 * ᐃ, 232 * ᐃ, 110 * ᐃ, ᐃ * 222, 115 * ᐃ, 218 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 116, 216.75 * ᐃ, 115.5 * ᐃ, 217.375 * ᐃ, 116 * ᐃ, ᐃ * 216.75);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔᐃ], Δⵠ[ᐃⵠᐃⲆ], ΔⵠⲆᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 120, 207 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 115, ᐃ * 206, 114 * ᐃ, ᐃ * 209, ᐃ * 114, 211 * ᐃ);
		Ⲇ.bezierCurveTo(114 * ᐃ, ᐃ * 268, 114 * ᐃ, 241 * ᐃ, 114 * ᐃ, 271 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 115, ᐃ * 276, ᐃ * 118, 276 * ᐃ, 120 * ᐃ, ᐃ * 276);
		Ⲇ.bezierCurveTo(ᐃ * 122, 273 * ᐃ, 120.5 * ᐃ, ᐃ * 274.5, ᐃ * 121, 273 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 121, 241 * ᐃ, ᐃ * 121, ᐃ * 241, ᐃ * 121, 209 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ᐃΔⵠⵠ], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 284, 238 * ᐃ);
		Ⲇ.bezierCurveTo(289.5 * ᐃ, 238 * ᐃ, 289.5 * ᐃ, 238 * ᐃ, 295 * ᐃ, 238 * ᐃ);
		Ⲇ.bezierCurveTo(295 * ᐃ, 241.5 * ᐃ, 295 * ᐃ, 241.5 * ᐃ, 295 * ᐃ, ᐃ * 245);
		Ⲇ.bezierCurveTo(ᐃ * 289.5, 245 * ᐃ, ᐃ * 289.5, 245 * ᐃ, 284 * ᐃ, 245 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⵠ], Δⵠ[ⲆᐃᐃΔⵠ], ΔᐃⵠΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 283, ᐃ * 211);
		Ⲇ.bezierCurveTo(ᐃ * 293, ᐃ * 216, 297 * ᐃ, ᐃ * 231, ᐃ * 297, 241 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 298, ᐃ * 254, 290 * ᐃ, ᐃ * 265, 284 * ᐃ, ᐃ * 269);
		Ⲇ.bezierCurveTo(ᐃ * 283, ᐃ * 266, 283.5 * ᐃ, ᐃ * 266, ᐃ * 283, ᐃ * 263);
		Ⲇ.bezierCurveTo(290 * ᐃ, 260 * ᐃ, 292 * ᐃ, 251 * ᐃ, 293 * ᐃ, 242 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 292, ᐃ * 223, ᐃ * 289, ᐃ * 224, 284 * ᐃ, 218 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[4], ΔᐃΔᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 280, ᐃ * 206);
		Ⲇ.bezierCurveTo(284 * ᐃ, ᐃ * 206, ᐃ * 285, 208 * ᐃ, 285 * ᐃ, 211 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 285, 241.5 * ᐃ, 285 * ᐃ, ᐃ * 241.5, 285 * ᐃ, 272 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 284, ᐃ * 275, ᐃ * 284, 275 * ᐃ, ᐃ * 280, 275 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 279, ᐃ * 273.5, 279 * ᐃ, ᐃ * 273.5, ᐃ * 278, 272 * ᐃ);
		Ⲇ.bezierCurveTo(278 * ᐃ, ᐃ * 240.5, ᐃ * 278, 240.5 * ᐃ, ᐃ * 278, 209 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠᐃΔ], Δⵠ[ⵠᐃΔⲆ], ᐃ * ⵠΔⵠΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 138, 298.40000915527344 * ᐃ);
		Ⲇ.bezierCurveTo(141 * ᐃ, 311.40000915527344 * ᐃ, ᐃ * 151, ᐃ * 314.40000915527344, ᐃ * 162, 316.40000915527344 * ᐃ);
		Ⲇ.bezierCurveTo(224 * ᐃ, 316.40000915527344 * ᐃ, ᐃ * 200, 315.90000915527344 * ᐃ, ᐃ * 238, ᐃ * 315.40000915527344);
		Ⲇ.bezierCurveTo(ᐃ * 254, ᐃ * 316.40000915527344, 261 * ᐃ, 306.40000915527344 * ᐃ, ᐃ * 264, ᐃ * 298.40000915527344);
		Ⲇ.bezierCurveTo(ᐃ * ⵠⵠⲆⲆᐃ, 304.40000915527344 * ᐃ, 250 * ᐃ, ᐃ * 306.40000915527344, 244 * ᐃ, 306.40000915527344 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 201, ᐃ * 306.90000915527344, 201 * ᐃ, 306.90000915527344 * ᐃ, 158 * ᐃ, ᐃ * 307.40000915527344);
		Ⲇ.bezierCurveTo(150 * ᐃ, ᐃ * 306.40000915527344, ᐃ * 148, 306.40000915527344 * ᐃ, ᐃ * 139, ᐃ * 300.40000915527344);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃᐃΔⵠ], Δⵠ[ᐃⲆⵠᐃⵠ], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 161, ᐃ * 177.5999984741211);
		Ⲇ.bezierCurveTo(130 * ᐃ, 175.5999984741211 * ᐃ, ᐃ * 123, 190.5999984741211 * ᐃ, ᐃ * 122, ᐃ * 205.5999984741211);
		Ⲇ.bezierCurveTo(121 * ᐃ, 277.5999984741211 * ᐃ, 122 * ᐃ, ᐃ * 242.5999984741211, 122 * ᐃ, ᐃ * 279.5999984741211);
		Ⲇ.bezierCurveTo(ᐃ * 128, 297.5999984741211 * ᐃ, ᐃ * 137, ᐃ * 299.5999984741211, 143 * ᐃ, 300.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(163 * ᐃ, ᐃ * 301.0999984741211, ᐃ * 163, ᐃ * 301.0999984741211, 183 * ᐃ, 301.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 150, 300.5999984741211 * ᐃ, 135 * ᐃ, ᐃ * 290.5999984741211, ᐃ * 134, 267.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(133 * ᐃ, ᐃ * 245.5999984741211, 146 * ᐃ, 235.5999984741211 * ᐃ, ᐃ * 164, 235.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(206 * ᐃ, 236.0999984741211 * ᐃ, 206 * ᐃ, ᐃ * 236.0999984741211, 248 * ᐃ, 236.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(266 * ᐃ, 243.5999984741211 * ᐃ, 268 * ᐃ, ᐃ * 259.5999984741211, ᐃ * 267, 266.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(266 * ᐃ, ᐃ * 288.5999984741211, 251 * ᐃ, 294.5999984741211 * ᐃ, ᐃ * 244, 297.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(228.5 * ᐃ, 299.5999984741211 * ᐃ, 228.5 * ᐃ, 299.5999984741211 * ᐃ, ᐃ * 213, ᐃ * 301.5999984741211);
		Ⲇ.bezierCurveTo(236 * ᐃ, ᐃ * 301.0999984741211, 236 * ᐃ, ᐃ * 301.0999984741211, 259 * ᐃ, 300.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 272, 295.5999984741211 * ᐃ, 277 * ᐃ, 288.5999984741211 * ᐃ, ᐃ * 278, 271.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(277.5 * ᐃ, 236.5999984741211 * ᐃ, ᐃ * 277.5, 236.5999984741211 * ᐃ, 277 * ᐃ, ᐃ * 201.5999984741211);
		Ⲇ.bezierCurveTo(276 * ᐃ, 186.5999984741211 * ᐃ, ᐃ * 265, ᐃ * 178.5999984741211, ᐃ * 254, 177.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 247.5, ᐃ * 177.5999984741211, 247.5 * ᐃ, 177.5999984741211 * ᐃ, ᐃ * 241, 177.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(ⵠᐃᐃᐃᐃᐃΔ * ᐃ, ᐃ * 202.5999984741211, ᐃ * 214, 217.5999984741211 * ᐃ, 201 * ᐃ, ᐃ * 215.5999984741211);
		Ⲇ.bezierCurveTo(170 * ᐃ, ᐃ * 215.5999984741211, ᐃ * 152, ᐃ * 197.5999984741211, ᐃ * 161, 178.5999984741211 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ⵠᐃΔΔ], ΔΔⲆⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 162, 175.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(153 * ᐃ, ᐃ * 176.0999984741211, 153 * ᐃ, 176.0999984741211 * ᐃ, ᐃ * 144, 176.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(125 * ᐃ, 178.5999984741211 * ᐃ, 121 * ᐃ, ᐃ * 196.5999984741211, 121 * ᐃ, ᐃ * 207.5999984741211);
		Ⲇ.bezierCurveTo(121 * ᐃ, ᐃ * 243.20000076293945, 121 * ᐃ, ᐃ * 243.20000076293945, 121 * ᐃ, 278.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(126 * ᐃ, 298.8000030517578 * ᐃ, 137 * ᐃ, ᐃ * 300.8000030517578, 146 * ᐃ, 302.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 200.5, ᐃ * 302.8000030517578, ᐃ * 200.5, 302.8000030517578 * ᐃ, ᐃ * ᐃᐃΔᐃⵠΔⲆ, 302.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(271 * ᐃ, ᐃ * 301.8000030517578, ᐃ * 279, ᐃ * 288.8000030517578, 279 * ᐃ, 273.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 279, 236.8000030517578 * ᐃ, 279 * ᐃ, 236.8000030517578 * ᐃ, 279 * ᐃ, 199.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 274, 178.8000030517578 * ᐃ, 263 * ᐃ, 177.8000030517578 * ᐃ, ᐃ * ⲆⵠᐃⲆⲆᐃⲆ, 175.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 248, 175.8000030517578 * ᐃ, ᐃ * 248, 175.8000030517578 * ᐃ, ᐃ * 241, ᐃ * 175.8000030517578);
		Ⲇ.bezierCurveTo(ᐃ * 240, 175.8000030517578 * ᐃ, 240 * ᐃ, ᐃ * 175.8000030517578, ᐃ * 239, ᐃ * 175.8000030517578);
		Ⲇ.bezierCurveTo(254 * ᐃ, 200.8000030517578 * ᐃ, 222 * ᐃ, 211.8000030517578 * ᐃ, 202 * ᐃ, ᐃ * 212.8000030517578);
		Ⲇ.bezierCurveTo(168 * ᐃ, 213.8000030517578 * ᐃ, 151 * ᐃ, 190.8000030517578 * ᐃ, ᐃ * 163, 176.8000030517578 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ᐃΔᐃΔ], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 198, ᐃ * 161.4000015258789);
		Ⲇ.bezierCurveTo(198 * ᐃ, ᐃ * 186.9000015258789, 198 * ᐃ, ᐃ * 186.9000015258789, 198 * ᐃ, 212.4000015258789 * ᐃ);
		Ⲇ.bezierCurveTo(201 * ᐃ, 212.4000015258789 * ᐃ, ᐃ * 201, 212.4000015258789 * ᐃ, 204 * ᐃ, ᐃ * 212.4000015258789);
		Ⲇ.bezierCurveTo(ᐃ * 204, 186.9000015258789 * ᐃ, ᐃ * 204, ᐃ * 186.9000015258789, 204 * ᐃ, ᐃ * 161.4000015258789);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[4], ᐃ * ΔΔⲆⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 161, ᐃ * 194);
		Ⲇ.bezierCurveTo(188 * ᐃ, ᐃ * 169, ᐃ * 231, ᐃ * 179, 241 * ᐃ, 194 * ᐃ);
		Ⲇ.bezierCurveTo(239.5 * ᐃ, ᐃ * 196, ᐃ * 239.5, ᐃ * 196, 238 * ᐃ, ᐃ * 198);
		Ⲇ.bezierCurveTo(221 * ᐃ, 179 * ᐃ, 182 * ᐃ, ᐃ * 182, ᐃ * 165, ᐃ * 198);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[4], ᐃᐃⲆⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(157 * ᐃ, ᐃ * 188.80000019073486);
		Ⲇ.bezierCurveTo(162 * ᐃ, ᐃ * 150.80000019073486, 241 * ᐃ, 150.80000019073486 * ᐃ, 245 * ᐃ, ᐃ * 188.80000019073486);
		Ⲇ.bezierCurveTo(242 * ᐃ, ᐃ * 224.80000019073486, ᐃ * 162, 228.80000019073486 * ᐃ, 157 * ᐃ, 188.80000019073486 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 159, ᐃ * 188.80000019073486, 159 * ᐃ, ᐃ * 188.80000019073486, 161 * ᐃ, ᐃ * 188.80000019073486);
		Ⲇ.bezierCurveTo(ᐃ * 168, 216.80000019073486 * ᐃ, ᐃ * 231, 218.80000019073486 * ᐃ, ᐃ * 241, ᐃ * 188.80000019073486);
		Ⲇ.bezierCurveTo(ᐃ * 236, 156.80000019073486 * ᐃ, ᐃ * 169, ᐃ * 152.80000019073486, ᐃ * 161, 188.80000019073486 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔΔ], Δⵠ[4], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(156 * ᐃ, ᐃ * 188);
		Ⲇ.bezierCurveTo(160 * ᐃ, 164 * ᐃ, 183 * ᐃ, 159 * ᐃ, 201 * ᐃ, 158 * ᐃ);
		Ⲇ.bezierCurveTo(232 * ᐃ, 159 * ᐃ, ᐃ * 244, 174 * ᐃ, 246 * ᐃ, ᐃ * 188);
		Ⲇ.bezierCurveTo(ᐃ * 245, 212 * ᐃ, ᐃ * 213, 219 * ᐃ, ᐃ * 201, ᐃ * 218);
		Ⲇ.bezierCurveTo(181 * ᐃ, ᐃ * 221, 158 * ᐃ, 207 * ᐃ, ᐃ * 156, 190 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ⲆᐃᐃΔⵠ], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 162, ᐃ * 189);
		Ⲇ.bezierCurveTo(ᐃ * 166, ᐃ * 170, 185 * ᐃ, 165 * ᐃ, 201 * ᐃ, ᐃ * 164);
		Ⲇ.bezierCurveTo(227 * ᐃ, ᐃ * 165, 240 * ᐃ, ᐃ * 178, ᐃ * 239, ᐃ * 188);
		Ⲇ.bezierCurveTo(ᐃ * 239, 204 * ᐃ, 210 * ᐃ, 210 * ᐃ, 201 * ᐃ, 210 * ᐃ);
		Ⲇ.bezierCurveTo(182 * ᐃ, ᐃ * 211, 166 * ᐃ, 200 * ᐃ, ᐃ * 162, 190 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ᐃⲆⵠⲆᐃ, Δⵠ[4], ᐃ * ΔΔΔⵠΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 131, 262 * ᐃ);
		Ⲇ.bezierCurveTo(136 * ᐃ, ᐃ * 241, 144 * ᐃ, ᐃ * 236, ᐃ * 158, ᐃ * 233);
		Ⲇ.bezierCurveTo(ᐃ * 200.5, ᐃ * 233, 229 * ᐃ, 232 * ᐃ, ᐃ * 243, ᐃ * 233);
		Ⲇ.bezierCurveTo(259 * ᐃ, 235 * ᐃ, 267 * ᐃ, ᐃ * 248, ᐃ * 269, 260 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 269, 266.5 * ᐃ, 269 * ᐃ, 266.5 * ᐃ, ᐃ * 269, 273 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 265, ᐃ * 290, ᐃ * 251, 297 * ᐃ, 242 * ᐃ, ᐃ * 298);
		Ⲇ.bezierCurveTo(ᐃ * 202, 298 * ᐃ, ᐃ * 202, ᐃ * 298, 162 * ᐃ, 298 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 148, 298 * ᐃ, 136 * ᐃ, ᐃ * 289, 132 * ᐃ, ᐃ * 273);
		Ⲇ.bezierCurveTo(131.5 * ᐃ, ᐃ * 268, 131.5 * ᐃ, ᐃ * 268, 131 * ᐃ, 263 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 135, 263 * ᐃ, ᐃ * 135, ᐃ * 263, ᐃ * 139, ᐃ * 263);
		Ⲇ.bezierCurveTo(ᐃ * 139, 281 * ᐃ, ᐃ * 151, ᐃ * 287, ᐃ * 160, 290 * ᐃ);
		Ⲇ.bezierCurveTo(200.5 * ᐃ, ᐃ * 290, 200.5 * ᐃ, 290 * ᐃ, 241 * ᐃ, 290 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 252, ᐃ * 290, ᐃ * 257, ᐃ * 281, ᐃ * 262, ᐃ * 271);
		Ⲇ.bezierCurveTo(ᐃ * 261.5, 267 * ᐃ, ᐃ * 261.5, ᐃ * 267, ᐃ * 261, ᐃ * 263);
		Ⲇ.bezierCurveTo(ᐃ * 260, 249 * ᐃ, ᐃ * 251, ᐃ * 242, ᐃ * 241, 241 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 240.5, ᐃ * 240.5, 240.5 * ᐃ, ᐃ * 240.5, ᐃ * 240, ᐃ * 240);
		Ⲇ.bezierCurveTo(200 * ᐃ, 240 * ᐃ, 200 * ᐃ, 240 * ᐃ, ᐃ * 160, 240 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 145, 244 * ᐃ, ᐃ * 142, 250 * ᐃ, 139 * ᐃ, 264 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠᐃΔ], Δⵠ[4], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 130, 264 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 132, ᐃ * 244, ᐃ * 144, 235 * ᐃ, 157 * ᐃ, ᐃ * 232);
		Ⲇ.bezierCurveTo(ᐃ * 245, 232 * ᐃ, ᐃ * 201, ᐃ * 232, ᐃ * 245, 232 * ᐃ);
		Ⲇ.bezierCurveTo(264 * ᐃ, ᐃ * 235, 269 * ᐃ, ᐃ * 251, ᐃ * 270, ᐃ * 264);
		Ⲇ.bezierCurveTo(272 * ᐃ, ᐃ * 291, 248 * ᐃ, 299 * ᐃ, 242 * ᐃ, ᐃ * 299);
		Ⲇ.bezierCurveTo(200 * ᐃ, ᐃ * 299, ᐃ * 200, ᐃ * 299, 158 * ᐃ, 299 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 139, ᐃ * 298, ᐃ * 130, ᐃ * 276, ᐃ * 130, 265 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠΔⵠⵠⲆ, Δⵠ[4], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 140, ᐃ * 265.33333587646484);
		Ⲇ.bezierCurveTo(141 * ᐃ, ᐃ * 250.33333587646484, 148 * ᐃ, 244.33333587646484 * ᐃ, 160 * ᐃ, 241.33333587646484 * ᐃ);
		Ⲇ.bezierCurveTo(200 * ᐃ, ᐃ * 241.33333587646484, 200 * ᐃ, 241.33333587646484 * ᐃ, 240 * ᐃ, ᐃ * 241.33333587646484);
		Ⲇ.bezierCurveTo(ᐃ * 256, 243.33333587646484 * ᐃ, ᐃ * 260, 255.33333587646484 * ᐃ, 260 * ᐃ, ᐃ * 265.33333587646484);
		Ⲇ.bezierCurveTo(ᐃ * 261, 281.33333587646484 * ᐃ, ᐃ * 247, 289.33333587646484 * ᐃ, ᐃ * 240, ᐃ * 289.33333587646484);
		Ⲇ.bezierCurveTo(161 * ᐃ, ᐃ * 289.33333587646484, 200.5 * ᐃ, 289.33333587646484 * ᐃ, ᐃ * 161, ᐃ * 289.33333587646484);
		Ⲇ.bezierCurveTo(ᐃ * 149, 288.33333587646484 * ᐃ, ᐃ * 142, ᐃ * 278.33333587646484, 140 * ᐃ, 266.33333587646484 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[4], 6 * ᐃ);
		Ⲇ.globalAlpha = .5;
		Ⲇ.scale(ᐃⲆΔ, 1);
		Ⲇ.translate(ᐃ * 105, 155 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 59.27557373046875, 20.406280517578125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 74.27557373046875, ᐃ * 5.406280517578125, 90.27557373046875 * ᐃ, ᐃ * 6.406280517578125, 99.27557373046875 * ᐃ, ᐃ * 5.406280517578125);
		Ⲇ.bezierCurveTo(ᐃ * 120.27557373046875, 5.406280517578125 * ᐃ, ᐃ * 126.27557373046875, 10.406280517578125 * ᐃ, ᐃ * 136.27557373046875, 20.406280517578125 * ᐃ);
		Ⲇ.bezierCurveTo(157.77557373046875 * ᐃ, 37.906280517578125 * ᐃ, ᐃ * 157.77557373046875, ᐃ * 37.906280517578125, ᐃ * 179.27557373046875, ᐃ * 55.406280517578125);
		Ⲇ.bezierCurveTo(190.27557373046875 * ᐃ, ᐃ * 63.406280517578125, 192.27557373046875 * ᐃ, 77.40628051757812 * ᐃ, ᐃ * 189.27557373046875, 91.40628051757812 * ᐃ);
		Ⲇ.bezierCurveTo(183.27557373046875 * ᐃ, 108.40628051757812 * ᐃ, ᐃ * 176.27557373046875, 110.40628051757812 * ᐃ, ᐃ * 169.27557373046875, 118.40628051757812 * ᐃ);
		Ⲇ.bezierCurveTo(152.27557373046875 * ᐃ, ᐃ * 133.40628051757812, 152.27557373046875 * ᐃ, 133.40628051757812 * ᐃ, 135.27557373046875 * ᐃ, 148.40628051757812 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 87.27557373046875, 143.40628051757812 * ᐃ, 87.27557373046875 * ᐃ, ᐃ * 143.40628051757812, 39.27557373046875 * ᐃ, ᐃ * 138.40628051757812);
		Ⲇ.bezierCurveTo(26.77557373046875 * ᐃ, 123.40628051757812 * ᐃ, ᐃ * 26.77557373046875, 123.40628051757812 * ᐃ, 14.27557373046875 * ᐃ, ᐃ * 108.40628051757812);
		Ⲇ.bezierCurveTo(ᐃ * 2.27557373046875, ᐃ * 95.40628051757812, ᐃ * 2.27557373046875, ᐃ * 92.40628051757812, 3.27557373046875 * ᐃ, ᐃ * 83.40628051757812);
		Ⲇ.bezierCurveTo(4.27557373046875 * ᐃ, ᐃ * 63.406280517578125, 12.27557373046875 * ᐃ, 60.406280517578125 * ᐃ, ᐃ * 24.27557373046875, 40.406280517578125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃⵠ], Δⵠ[ᐃᐃᐃⲆ], ᐃ * ⵠΔⲆΔΔ);
		Ⲇ.globalAlpha = ᐃⲆΔ;
		Ⲇ.translate(ᐃ * -110, ᐃ * -155);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(104 * ᐃ, 237.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(110 * ᐃ, ᐃ * 237.8000030517578, ᐃ * 110, 237.8000030517578 * ᐃ, ᐃ * 116, 237.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(116 * ᐃ, ᐃ * 241.8000030517578, ᐃ * 116, 241.8000030517578 * ᐃ, 116 * ᐃ, ᐃ * 245.8000030517578);
		Ⲇ.bezierCurveTo(ᐃ * 115, ᐃ * 245.3000030517578, ᐃ * 115, ᐃ * 245.3000030517578, ᐃ * 114, 244.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 109.5, ᐃ * 244.8000030517578, ᐃ * 109.5, 244.8000030517578 * ᐃ, ᐃ * 105, ᐃ * 244.8000030517578);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠⵠ], Δⵠ[ΔⵠΔ], ᐃ * ΔΔⲆᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(115 * ᐃ, ᐃ * 211.20000457763672);
		Ⲇ.bezierCurveTo(ᐃ * 106, 216.20000457763672 * ᐃ, 101 * ᐃ, 234.20000457763672 * ᐃ, 102 * ᐃ, ᐃ * 241.20000457763672);
		Ⲇ.bezierCurveTo(102 * ᐃ, ᐃ * 260.2000045776367, ᐃ * 115, 269.2000045776367 * ᐃ, ᐃ * 115, 269.2000045776367 * ᐃ);
		Ⲇ.bezierCurveTo(116 * ᐃ, ᐃ * 265.2000045776367, 115.5 * ᐃ, ᐃ * 265.2000045776367, ᐃ * 116, ᐃ * 261.2000045776367);
		Ⲇ.bezierCurveTo(ᐃ * 112, 264 * ᐃ, 108 * ᐃ, 254 * ᐃ, 106 * ᐃ, 242 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 105, 232 * ᐃ, ᐃ * 110, 222 * ᐃ, ᐃ * 115, ᐃ * 218);
		Ⲇ.bezierCurveTo(116 * ᐃ, 216.75 * ᐃ, 115.5 * ᐃ, 217.375 * ᐃ, ᐃ * 116, ᐃ * 216.75);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[1], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 120, ᐃ * 207);
		Ⲇ.bezierCurveTo(ᐃ * 115, ᐃ * 206, ᐃ * 114, 209 * ᐃ, 114 * ᐃ, ᐃ * 211);
		Ⲇ.bezierCurveTo(ᐃ * 114, 268 * ᐃ, ᐃ * 114, ᐃ * 241, 114 * ᐃ, 271 * ᐃ);
		Ⲇ.bezierCurveTo(115 * ᐃ, ᐃ * 276, 118 * ᐃ, ᐃ * 276, ᐃ * 120, 276 * ᐃ);
		Ⲇ.bezierCurveTo(122 * ᐃ, 273 * ᐃ, ᐃ * 120.5, ᐃ * 274.5, ᐃ * 121, ᐃ * 273);
		Ⲇ.bezierCurveTo(ᐃ * 121, 241 * ᐃ, 121 * ᐃ, ᐃ * 241, ᐃ * 121, 209 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ], Δⵠ[ⵠᐃⵠΔ], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 284, ᐃ * 238);
		Ⲇ.bezierCurveTo(ᐃ * 289.5, ᐃ * 238, 289.5 * ᐃ, ᐃ * 238, ᐃ * 295, 238 * ᐃ);
		Ⲇ.bezierCurveTo(295 * ᐃ, 241.5 * ᐃ, ᐃ * 295, ᐃ * 241.5, ᐃ * 295, 245 * ᐃ);
		Ⲇ.bezierCurveTo(289.5 * ᐃ, ᐃ * 245, 289.5 * ᐃ, ᐃ * 245, ᐃ * 284, 245 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[1], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(283 * ᐃ, 211 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 293, 216 * ᐃ, ᐃ * 297, ᐃ * 231, ᐃ * 297, ᐃ * 241);
		Ⲇ.bezierCurveTo(298 * ᐃ, 254 * ᐃ, ᐃ * 290, 265 * ᐃ, ᐃ * 284, ᐃ * 269);
		Ⲇ.bezierCurveTo(283 * ᐃ, ᐃ * 266, 283.5 * ᐃ, 266 * ᐃ, ᐃ * 283, ᐃ * 263);
		Ⲇ.bezierCurveTo(ᐃ * 290, 260 * ᐃ, 292 * ᐃ, ᐃ * 251, 293 * ᐃ, ᐃ * 242);
		Ⲇ.bezierCurveTo(ᐃ * 292, ᐃ * 223, ᐃ * 289, ᐃ * 224, 284 * ᐃ, 218 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ΔⲆᐃⲆ], ᐃ * ⲆⵠΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(280 * ᐃ, ᐃ * 206);
		Ⲇ.bezierCurveTo(284 * ᐃ, 206 * ᐃ, ᐃ * 285, 208 * ᐃ, 285 * ᐃ, 211 * ᐃ);
		Ⲇ.bezierCurveTo(285 * ᐃ, ᐃ * 241.5, ᐃ * 285, ᐃ * 241.5, 285 * ᐃ, ᐃ * 272);
		Ⲇ.bezierCurveTo(ᐃ * 284, 275 * ᐃ, 284 * ᐃ, 275 * ᐃ, 280 * ᐃ, 275 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 279, 273.5 * ᐃ, 279 * ᐃ, 273.5 * ᐃ, 278 * ᐃ, 272 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 278, 240.5 * ᐃ, ᐃ * 278, ᐃ * 240.5, ᐃ * 278, 209 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ], Δⵠ[ΔⲆᐃⲆ], ᐃ * ΔᐃⵠΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(138 * ᐃ, ᐃ * 298.40000915527344);
		Ⲇ.bezierCurveTo(141 * ᐃ, 311.40000915527344 * ᐃ, ᐃ * 151, ᐃ * 314.40000915527344, 162 * ᐃ, ᐃ * 316.40000915527344);
		Ⲇ.bezierCurveTo(ᐃ * 224, 316.40000915527344 * ᐃ, 200 * ᐃ, ᐃ * 315.90000915527344, 238 * ᐃ, 315.40000915527344 * ᐃ);
		Ⲇ.bezierCurveTo(254 * ᐃ, ᐃ * 316.40000915527344, ᐃ * 261, 306.40000915527344 * ᐃ, 264 * ᐃ, 298.40000915527344 * ᐃ);
		Ⲇ.bezierCurveTo(255 * ᐃ, 304.40000915527344 * ᐃ, ᐃ * 250, ᐃ * 306.40000915527344, 244 * ᐃ, 306.40000915527344 * ᐃ);
		Ⲇ.bezierCurveTo(201 * ᐃ, ᐃ * 306.90000915527344, 201 * ᐃ, 306.90000915527344 * ᐃ, 158 * ᐃ, 307.40000915527344 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 150, 306.40000915527344 * ᐃ, ᐃ * 148, ᐃ * 306.40000915527344, 139 * ᐃ, 300.40000915527344 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃⵠ], Δⵠ[1], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 161, 177.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(130 * ᐃ, ᐃ * 175.5999984741211, 123 * ᐃ, ᐃ * 190.5999984741211, ᐃ * 122, 205.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(121 * ᐃ, 277.5999984741211 * ᐃ, ᐃ * 122, ᐃ * 242.5999984741211, 122 * ᐃ, ᐃ * 279.5999984741211);
		Ⲇ.bezierCurveTo(128 * ᐃ, 297.5999984741211 * ᐃ, ᐃ * 137, ᐃ * 299.5999984741211, ᐃ * 143, ᐃ * 300.5999984741211);
		Ⲇ.bezierCurveTo(163 * ᐃ, 301.0999984741211 * ᐃ, 163 * ᐃ, ᐃ * 301.0999984741211, 183 * ᐃ, 301.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(150 * ᐃ, ᐃ * 300.5999984741211, 135 * ᐃ, 290.5999984741211 * ᐃ, ᐃ * 134, 267.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 133, ᐃ * 245.5999984741211, ᐃ * 146, 235.5999984741211 * ᐃ, ᐃ * 164, ᐃ * 235.5999984741211);
		Ⲇ.bezierCurveTo(206 * ᐃ, ᐃ * 236.0999984741211, ᐃ * 206, 236.0999984741211 * ᐃ, ᐃ * 248, ᐃ * 236.5999984741211);
		Ⲇ.bezierCurveTo(ᐃ * 266, ᐃ * 243.5999984741211, ᐃ * 268, ᐃ * 259.5999984741211, ᐃ * 267, 266.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 266, ᐃ * 288.5999984741211, ᐃ * 251, ᐃ * 294.5999984741211, 244 * ᐃ, 297.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(228.5 * ᐃ, ᐃ * 299.5999984741211, 228.5 * ᐃ, ᐃ * 299.5999984741211, ᐃ * 213, 301.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 236, ᐃ * 301.0999984741211, ᐃ * 236, ᐃ * 301.0999984741211, 259 * ᐃ, 300.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 272, ᐃ * 295.5999984741211, 277 * ᐃ, ᐃ * 288.5999984741211, ᐃ * 278, ᐃ * 271.5999984741211);
		Ⲇ.bezierCurveTo(277.5 * ᐃ, 236.5999984741211 * ᐃ, ᐃ * 277.5, ᐃ * 236.5999984741211, 277 * ᐃ, ᐃ * 201.5999984741211);
		Ⲇ.bezierCurveTo(276 * ᐃ, 186.5999984741211 * ᐃ, ᐃ * 265, 178.5999984741211 * ᐃ, ᐃ * 254, 177.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(247.5 * ᐃ, ᐃ * 177.5999984741211, ᐃ * 247.5, ᐃ * 177.5999984741211, ᐃ * 241, 177.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(255 * ᐃ, 202.5999984741211 * ᐃ, ᐃ * 214, 217.5999984741211 * ᐃ, 201 * ᐃ, ᐃ * 215.5999984741211);
		Ⲇ.bezierCurveTo(ᐃ * 170, 215.5999984741211 * ᐃ, 152 * ᐃ, 197.5999984741211 * ᐃ, ᐃ * 161, 178.5999984741211 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃᐃ], Δⵠ[2], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 162, 175.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(153 * ᐃ, 176.0999984741211 * ᐃ, ᐃ * 153, 176.0999984741211 * ᐃ, ᐃ * 144, 176.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 125, ᐃ * 178.5999984741211, 121 * ᐃ, 196.5999984741211 * ᐃ, ᐃ * 121, 207.5999984741211 * ᐃ);
		Ⲇ.bezierCurveTo(121 * ᐃ, ᐃ * 243.20000076293945, ᐃ * 121, 243.20000076293945 * ᐃ, ᐃ * 121, 278.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 126, 298.8000030517578 * ᐃ, 137 * ᐃ, ᐃ * 300.8000030517578, 146 * ᐃ, ᐃ * 302.8000030517578);
		Ⲇ.bezierCurveTo(ᐃ * 200.5, 302.8000030517578 * ᐃ, ᐃ * 200.5, ᐃ * 302.8000030517578, ᐃ * 255, 302.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(271 * ᐃ, 301.8000030517578 * ᐃ, 279 * ᐃ, 288.8000030517578 * ᐃ, 279 * ᐃ, 273.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 279, 236.8000030517578 * ᐃ, 279 * ᐃ, 236.8000030517578 * ᐃ, 279 * ᐃ, 199.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(274 * ᐃ, 178.8000030517578 * ᐃ, ᐃ * 263, ᐃ * 177.8000030517578, ᐃ * ⲆᐃⵠⲆⵠᐃΔ, 175.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(248 * ᐃ, 175.8000030517578 * ᐃ, 248 * ᐃ, ᐃ * 175.8000030517578, 241 * ᐃ, ᐃ * 175.8000030517578);
		Ⲇ.bezierCurveTo(ᐃ * 240, ᐃ * 175.8000030517578, ᐃ * 240, ᐃ * 175.8000030517578, ᐃ * 239, ᐃ * 175.8000030517578);
		Ⲇ.bezierCurveTo(ᐃ * 254, 200.8000030517578 * ᐃ, ᐃ * 222, 211.8000030517578 * ᐃ, ᐃ * 202, 212.8000030517578 * ᐃ);
		Ⲇ.bezierCurveTo(168 * ᐃ, 213.8000030517578 * ᐃ, ᐃ * 151, ᐃ * 190.8000030517578, ᐃ * 163, 176.8000030517578 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ΔⲆΔⵠᐃ, Δⵠ[3], ΔᐃΔᐃᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(198 * ᐃ, 161.4000015258789 * ᐃ);
		Ⲇ.bezierCurveTo(198 * ᐃ, 186.9000015258789 * ᐃ, ᐃ * 198, ᐃ * 186.9000015258789, ᐃ * 198, 212.4000015258789 * ᐃ);
		Ⲇ.bezierCurveTo(201 * ᐃ, 212.4000015258789 * ᐃ, 201 * ᐃ, 212.4000015258789 * ᐃ, 204 * ᐃ, ᐃ * 212.4000015258789);
		Ⲇ.bezierCurveTo(204 * ᐃ, ᐃ * 186.9000015258789, ᐃ * 204, 186.9000015258789 * ᐃ, 204 * ᐃ, 161.4000015258789 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃⵠ], Δⵠ[1], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 161, 194 * ᐃ);
		Ⲇ.bezierCurveTo(188 * ᐃ, 169 * ᐃ, ᐃ * 231, ᐃ * 179, ᐃ * 241, ᐃ * 194);
		Ⲇ.bezierCurveTo(ᐃ * 239.5, 196 * ᐃ, 239.5 * ᐃ, ᐃ * 196, ᐃ * 238, ᐃ * 198);
		Ⲇ.bezierCurveTo(ᐃ * 221, ᐃ * 179, ᐃ * 182, ᐃ * 182, 165 * ᐃ, 198 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ], Δⵠ[1], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 157, ᐃ * 188.80000019073486);
		Ⲇ.bezierCurveTo(162 * ᐃ, 150.80000019073486 * ᐃ, ᐃ * 241, ᐃ * 150.80000019073486, ᐃ * 245, ᐃ * 188.80000019073486);
		Ⲇ.bezierCurveTo(242 * ᐃ, 224.80000019073486 * ᐃ, 162 * ᐃ, ᐃ * 228.80000019073486, ᐃ * 157, 188.80000019073486 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 159, 188.80000019073486 * ᐃ, 159 * ᐃ, ᐃ * 188.80000019073486, ᐃ * 161, 188.80000019073486 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 168, 216.80000019073486 * ᐃ, ᐃ * 231, ᐃ * 218.80000019073486, 241 * ᐃ, ᐃ * 188.80000019073486);
		Ⲇ.bezierCurveTo(ᐃ * 236, 156.80000019073486 * ᐃ, 169 * ᐃ, ᐃ * 152.80000019073486, 161 * ᐃ, 188.80000019073486 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[1], ᐃ * ⲆⲆΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(156 * ᐃ, 188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 160, 164 * ᐃ, 183 * ᐃ, ᐃ * 159, ᐃ * 201, ᐃ * 158);
		Ⲇ.bezierCurveTo(232 * ᐃ, ᐃ * 159, ᐃ * 244, ᐃ * 174, 246 * ᐃ, ᐃ * 188);
		Ⲇ.bezierCurveTo(ᐃ * 245, 212 * ᐃ, 213 * ᐃ, 219 * ᐃ, 201 * ᐃ, 218 * ᐃ);
		Ⲇ.bezierCurveTo(181 * ᐃ, ᐃ * 221, ᐃ * 158, 207 * ᐃ, 156 * ᐃ, ᐃ * 190);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠⵠⲆᐃᐃ, Δⵠ[ⵠᐃⵠΔ], ⲆⲆⲆⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(162 * ᐃ, 189 * ᐃ);
		Ⲇ.bezierCurveTo(166 * ᐃ, 170 * ᐃ, 185 * ᐃ, ᐃ * 165, 201 * ᐃ, 164 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 227, 165 * ᐃ, 240 * ᐃ, 178 * ᐃ, 239 * ᐃ, ᐃ * 188);
		Ⲇ.bezierCurveTo(ᐃ * 239, 204 * ᐃ, 210 * ᐃ, ᐃ * 210, ᐃ * 201, ᐃ * 210);
		Ⲇ.bezierCurveTo(182 * ᐃ, 211 * ᐃ, ᐃ * 166, ᐃ * 200, ᐃ * 162, ᐃ * 190);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[Δᐃⵠⵠ], ᐃⲆᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 131, 262 * ᐃ);
		Ⲇ.bezierCurveTo(136 * ᐃ, ᐃ * 241, ᐃ * 144, ᐃ * 236, 158 * ᐃ, 233 * ᐃ);
		Ⲇ.bezierCurveTo(200.5 * ᐃ, ᐃ * 233, ᐃ * 229, 232 * ᐃ, ᐃ * 243, 233 * ᐃ);
		Ⲇ.bezierCurveTo(259 * ᐃ, ᐃ * 235, ᐃ * 267, 248 * ᐃ, ᐃ * 269, 260 * ᐃ);
		Ⲇ.bezierCurveTo(269 * ᐃ, ᐃ * 266.5, ᐃ * 269, 266.5 * ᐃ, ᐃ * 269, 273 * ᐃ);
		Ⲇ.bezierCurveTo(265 * ᐃ, 290 * ᐃ, 251 * ᐃ, ᐃ * 297, 242 * ᐃ, 298 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 202, ᐃ * 298, 202 * ᐃ, 298 * ᐃ, ᐃ * 162, 298 * ᐃ);
		Ⲇ.bezierCurveTo(148 * ᐃ, 298 * ᐃ, 136 * ᐃ, ᐃ * 289, 132 * ᐃ, ᐃ * 273);
		Ⲇ.bezierCurveTo(ᐃ * 131.5, ᐃ * 268, 131.5 * ᐃ, ᐃ * 268, ᐃ * 131, 263 * ᐃ);
		Ⲇ.bezierCurveTo(135 * ᐃ, ᐃ * 263, 135 * ᐃ, ᐃ * 263, 139 * ᐃ, ᐃ * 263);
		Ⲇ.bezierCurveTo(ᐃ * 139, 281 * ᐃ, ᐃ * 151, ᐃ * 287, 160 * ᐃ, ᐃ * 290);
		Ⲇ.bezierCurveTo(ᐃ * 200.5, 290 * ᐃ, ᐃ * 200.5, 290 * ᐃ, ᐃ * 241, 290 * ᐃ);
		Ⲇ.bezierCurveTo(252 * ᐃ, ᐃ * 290, ᐃ * 257, 281 * ᐃ, ᐃ * 262, 271 * ᐃ);
		Ⲇ.bezierCurveTo(261.5 * ᐃ, ᐃ * 267, ᐃ * 261.5, 267 * ᐃ, 261 * ᐃ, 263 * ᐃ);
		Ⲇ.bezierCurveTo(260 * ᐃ, 249 * ᐃ, 251 * ᐃ, ᐃ * 242, ᐃ * 241, ᐃ * 241);
		Ⲇ.bezierCurveTo(240.5 * ᐃ, ᐃ * 240.5, 240.5 * ᐃ, 240.5 * ᐃ, 240 * ᐃ, ᐃ * 240);
		Ⲇ.bezierCurveTo(ᐃ * 200, 240 * ᐃ, ᐃ * 200, ᐃ * 240, 160 * ᐃ, ᐃ * 240);
		Ⲇ.bezierCurveTo(ᐃ * 145, ᐃ * 244, 142 * ᐃ, 250 * ᐃ, ᐃ * 139, ᐃ * 264);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(130 * ᐃ, ᐃ * 264);
		Ⲇ.bezierCurveTo(ᐃ * 132, 244 * ᐃ, 144 * ᐃ, ᐃ * 235, 157 * ᐃ, ᐃ * 232);
		Ⲇ.bezierCurveTo(ᐃ * 245, 232 * ᐃ, ᐃ * 201, ᐃ * 232, 245 * ᐃ, 232 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 264, 235 * ᐃ, 269 * ᐃ, ᐃ * 251, ᐃ * 270, 264 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 272, 291 * ᐃ, ᐃ * 248, ᐃ * 299, 242 * ᐃ, ᐃ * 299);
		Ⲇ.bezierCurveTo(200 * ᐃ, 299 * ᐃ, ᐃ * 200, ᐃ * 299, 158 * ᐃ, ᐃ * 299);
		Ⲇ.bezierCurveTo(139 * ᐃ, ᐃ * 298, 130 * ᐃ, ᐃ * 276, ᐃ * 130, ᐃ * 265);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ΔΔΔᐃᐃ, Δⵠ[ⵠⲆⲆ], ᐃ * ΔΔΔⵠ);
		return ΔⲆ
	}
	var ⲆⵠⲆⲆΔⲆᐃⲆᐃ = 51;

	function ⲆⲆⲆⲆⲆⲆΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 372;
		ΔⲆ.height = 375 * ᐃ;
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(15 * ᐃ, 15 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(313.0000305175781 * ᐃ, 76.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(308.0000305175781 * ᐃ, ᐃ * 130.58523559570312, ᐃ * 279.0000305175781, 158.58523559570312 * ᐃ, 254.00003051757812 * ᐃ, ᐃ * 175.58523559570312);
		Ⲇ.bezierCurveTo(ᐃ * 287.0000305175781, ᐃ * 182.58523559570312, ᐃ * 274.0000305175781, ᐃ * 181.08523559570312, 294.0000305175781 * ᐃ, 186.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(293.5000305175781 * ᐃ, ᐃ * 196.08523559570312, 293.5000305175781 * ᐃ, 196.08523559570312 * ᐃ, 293.0000305175781 * ᐃ, 205.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 304.0000305175781, ᐃ * 201.08523559570312, ᐃ * 304.0000305175781, ᐃ * 201.08523559570312, ᐃ * 315.0000305175781, 196.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 350.0000305175781, ᐃ * 219.58523559570312, ᐃ * 343.0000305175781, ᐃ * 221.58523559570312, 351.0000305175781 * ᐃ, 230.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 296.0000305175781, 260.5852355957031 * ᐃ, ᐃ * 264.0000305175781, 256.5852355957031 * ᐃ, 220.00003051757812 * ᐃ, 236.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 233.00003051757812, 266.5852355957031 * ᐃ, ᐃ * 232.00003051757812, ᐃ * 279.5852355957031, 231.00003051757812 * ᐃ, 295.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 222.00003051757812, ᐃ * 297.5852355957031, ᐃ * 222.00003051757812, 297.5852355957031 * ᐃ, ᐃ * 213.00003051757812, 299.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 219.50003051757812, 308.0852355957031 * ᐃ, ᐃ * 219.50003051757812, 308.0852355957031 * ᐃ, ᐃ * 226.00003051757812, 316.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 223.00003051757812, ᐃ * 344.5852355957031, ᐃ * 216.00003051757812, 350.5852355957031 * ᐃ, 209.00003051757812 * ᐃ, 363.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 154.00003051757812, ᐃ * 318.5852355957031, ᐃ * 156.00003051757812, 268.5852355957031 * ᐃ, 160.00003051757812 * ᐃ, 238.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 135.00003051757812, 268.5852355957031 * ᐃ, ᐃ * 125.00003051757812, 267.5852355957031 * ᐃ, ᐃ * 112.00003051757812, 272.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(104.50003051757812 * ᐃ, 266.5852355957031 * ᐃ, ᐃ * 104.50003051757812, ᐃ * 266.5852355957031, ᐃ * 97.00003051757812, 260.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(93.00003051757812 * ᐃ, ᐃ * 271.0852355957031, 93.00003051757812 * ᐃ, ᐃ * 271.0852355957031, ᐃ * 89.00003051757812, ᐃ * 281.5852355957031);
		Ⲇ.bezierCurveTo(66.00003051757812 * ᐃ, ᐃ * 288.5852355957031, ᐃ * 59.000030517578125, 288.5852355957031 * ᐃ, 39.000030517578125 * ᐃ, ᐃ * 285.5852355957031);
		Ⲇ.bezierCurveTo(56.000030517578125 * ᐃ, ᐃ * 216.58523559570312, 91.00003051757812 * ᐃ, ᐃ * 204.58523559570312, ᐃ * 129.00003051757812, ᐃ * 189.58523559570312);
		Ⲇ.bezierCurveTo(90.00003051757812 * ᐃ, 176.58523559570312 * ᐃ, ᐃ * 89.00003051757812, ᐃ * 173.58523559570312, 79.00003051757812 * ᐃ, ᐃ * 166.58523559570312);
		Ⲇ.bezierCurveTo(82.00003051757812 * ᐃ, 155.08523559570312 * ᐃ, 82.00003051757812 * ᐃ, ᐃ * 155.08523559570312, 85.00003051757812 * ᐃ, ᐃ * 143.58523559570312);
		Ⲇ.bezierCurveTo(75.50003051757812 * ᐃ, 147.58523559570312 * ᐃ, 75.50003051757812 * ᐃ, 147.58523559570312 * ᐃ, ᐃ * 66.00003051757812, 151.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 44.000030517578125, 133.58523559570312 * ᐃ, 41.000030517578125 * ᐃ, ᐃ * 124.58523559570312, ᐃ * 34.000030517578125, ᐃ * 102.58523559570312);
		Ⲇ.bezierCurveTo(100.00003051757812 * ᐃ, ᐃ * 81.58523559570312, ᐃ * 134.00003051757812, ᐃ * 118.58523559570312, ᐃ * 150.00003051757812, ᐃ * 128.58523559570312);
		Ⲇ.bezierCurveTo(ᐃ * 144.00003051757812, ᐃ * 102.58523559570312, ᐃ * 147.00003051757812, ᐃ * 90.58523559570312, ᐃ * 150.00003051757812, 80.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(159.50003051757812 * ᐃ, ᐃ * 79.08523559570312, ᐃ * 159.50003051757812, ᐃ * 79.08523559570312, ᐃ * 169.00003051757812, 77.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(163.00003051757812 * ᐃ, ᐃ * 72.58523559570312, ᐃ * 163.00003051757812, 72.58523559570312 * ᐃ, 157.00003051757812 * ᐃ, 67.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 162.00003051757812, 42.585235595703125 * ᐃ, 169.00003051757812 * ᐃ, 29.585235595703125 * ᐃ, ᐃ * 182.00003051757812, 14.585235595703125 * ᐃ);
		Ⲇ.bezierCurveTo(219.00003051757812 * ᐃ, ᐃ * 48.585235595703125, ᐃ * 222.00003051757812, ᐃ * 92.58523559570312, ᐃ * 218.00003051757812, 112.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(239.00003051757812 * ᐃ, 95.58523559570312 * ᐃ, ᐃ * 242.00003051757812, ᐃ * 97.58523559570312, 249.00003051757812 * ᐃ, ᐃ * 94.58523559570312);
		Ⲇ.bezierCurveTo(255.00003051757812 * ᐃ, 103.08523559570312 * ᐃ, ᐃ * 255.00003051757812, ᐃ * 103.08523559570312, 261.0000305175781 * ᐃ, ᐃ * 111.58523559570312);
		Ⲇ.bezierCurveTo(ᐃ * 261.5000305175781, ᐃ * 99.58523559570312, 261.5000305175781 * ᐃ, 99.58523559570312 * ᐃ, 262.0000305175781 * ᐃ, 87.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 282.0000305175781, 77.58523559570312 * ᐃ, ᐃ * 301.0000305175781, 74.58523559570312 * ᐃ, 314.0000305175781 * ᐃ, ᐃ * 76.58523559570312);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃ]);
		Ⲇ.globalAlpha = ΔᐃⵠⲆ;
		Ⲇ.translate(ᐃ * -15, -ⵠⵠⲆᐃᐃⵠᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 313.0000305175781, ᐃ * 76.58523559570312);
		Ⲇ.bezierCurveTo(ᐃ * 308.0000305175781, 130.58523559570312 * ᐃ, ᐃ * 279.0000305175781, 158.58523559570312 * ᐃ, ᐃ * 254.00003051757812, 175.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(287.0000305175781 * ᐃ, ᐃ * 182.58523559570312, ᐃ * 274.0000305175781, ᐃ * 181.08523559570312, 294.0000305175781 * ᐃ, ᐃ * 186.58523559570312);
		Ⲇ.bezierCurveTo(ᐃ * 293.5000305175781, ᐃ * 196.08523559570312, ᐃ * 293.5000305175781, ᐃ * 196.08523559570312, 293.0000305175781 * ᐃ, 205.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(304.0000305175781 * ᐃ, 201.08523559570312 * ᐃ, 304.0000305175781 * ᐃ, ᐃ * 201.08523559570312, ᐃ * 315.0000305175781, ᐃ * 196.58523559570312);
		Ⲇ.bezierCurveTo(350.0000305175781 * ᐃ, ᐃ * 219.58523559570312, ᐃ * 343.0000305175781, ᐃ * 221.58523559570312, 351.0000305175781 * ᐃ, 230.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(296.0000305175781 * ᐃ, ᐃ * 260.5852355957031, ᐃ * 264.0000305175781, ᐃ * 256.5852355957031, ᐃ * 220.00003051757812, ᐃ * 236.58523559570312);
		Ⲇ.bezierCurveTo(233.00003051757812 * ᐃ, ᐃ * 266.5852355957031, ᐃ * 232.00003051757812, 279.5852355957031 * ᐃ, ᐃ * 231.00003051757812, 295.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(222.00003051757812 * ᐃ, 297.5852355957031 * ᐃ, 222.00003051757812 * ᐃ, ᐃ * 297.5852355957031, 213.00003051757812 * ᐃ, ᐃ * 299.5852355957031);
		Ⲇ.bezierCurveTo(219.50003051757812 * ᐃ, ᐃ * 308.0852355957031, ᐃ * 219.50003051757812, 308.0852355957031 * ᐃ, 226.00003051757812 * ᐃ, 316.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 223.00003051757812, 344.5852355957031 * ᐃ, 216.00003051757812 * ᐃ, 350.5852355957031 * ᐃ, 209.00003051757812 * ᐃ, ᐃ * 363.5852355957031);
		Ⲇ.bezierCurveTo(154.00003051757812 * ᐃ, 318.5852355957031 * ᐃ, ᐃ * 156.00003051757812, 268.5852355957031 * ᐃ, ᐃ * 160.00003051757812, ᐃ * 238.58523559570312);
		Ⲇ.bezierCurveTo(135.00003051757812 * ᐃ, 268.5852355957031 * ᐃ, 125.00003051757812 * ᐃ, ᐃ * 267.5852355957031, ᐃ * 112.00003051757812, ᐃ * 272.5852355957031);
		Ⲇ.bezierCurveTo(104.50003051757812 * ᐃ, ᐃ * 266.5852355957031, 104.50003051757812 * ᐃ, 266.5852355957031 * ᐃ, 97.00003051757812 * ᐃ, 260.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 93.00003051757812, 271.0852355957031 * ᐃ, 93.00003051757812 * ᐃ, ᐃ * 271.0852355957031, 89.00003051757812 * ᐃ, ᐃ * 281.5852355957031);
		Ⲇ.bezierCurveTo(ᐃ * 66.00003051757812, 288.5852355957031 * ᐃ, 59.000030517578125 * ᐃ, ᐃ * 288.5852355957031, 39.000030517578125 * ᐃ, 285.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(56.000030517578125 * ᐃ, ᐃ * 216.58523559570312, ᐃ * 91.00003051757812, 204.58523559570312 * ᐃ, ᐃ * 129.00003051757812, ᐃ * 189.58523559570312);
		Ⲇ.bezierCurveTo(90.00003051757812 * ᐃ, 176.58523559570312 * ᐃ, 89.00003051757812 * ᐃ, 173.58523559570312 * ᐃ, 79.00003051757812 * ᐃ, ᐃ * 166.58523559570312);
		Ⲇ.bezierCurveTo(ᐃ * 82.00003051757812, ᐃ * 155.08523559570312, ᐃ * 82.00003051757812, 155.08523559570312 * ᐃ, 85.00003051757812 * ᐃ, 143.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(75.50003051757812 * ᐃ, ᐃ * 147.58523559570312, 75.50003051757812 * ᐃ, 147.58523559570312 * ᐃ, ᐃ * 66.00003051757812, 151.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(44.000030517578125 * ᐃ, ᐃ * 133.58523559570312, 41.000030517578125 * ᐃ, 124.58523559570312 * ᐃ, ᐃ * 34.000030517578125, 102.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 100.00003051757812, 81.58523559570312 * ᐃ, ᐃ * 134.00003051757812, 118.58523559570312 * ᐃ, 150.00003051757812 * ᐃ, 128.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 144.00003051757812, 102.58523559570312 * ᐃ, ᐃ * 147.00003051757812, 90.58523559570312 * ᐃ, ᐃ * 150.00003051757812, ᐃ * 80.58523559570312);
		Ⲇ.bezierCurveTo(159.50003051757812 * ᐃ, 79.08523559570312 * ᐃ, 159.50003051757812 * ᐃ, 79.08523559570312 * ᐃ, 169.00003051757812 * ᐃ, 77.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 163.00003051757812, 72.58523559570312 * ᐃ, ᐃ * 163.00003051757812, 72.58523559570312 * ᐃ, 157.00003051757812 * ᐃ, 67.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(162.00003051757812 * ᐃ, 42.585235595703125 * ᐃ, 169.00003051757812 * ᐃ, ᐃ * 29.585235595703125, 182.00003051757812 * ᐃ, 14.585235595703125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 219.00003051757812, 48.585235595703125 * ᐃ, 222.00003051757812 * ᐃ, 92.58523559570312 * ᐃ, ᐃ * 218.00003051757812, ᐃ * 112.58523559570312);
		Ⲇ.bezierCurveTo(ᐃ * 239.00003051757812, 95.58523559570312 * ᐃ, ᐃ * 242.00003051757812, 97.58523559570312 * ᐃ, ᐃ * 249.00003051757812, ᐃ * 94.58523559570312);
		Ⲇ.bezierCurveTo(ᐃ * 255.00003051757812, 103.08523559570312 * ᐃ, ᐃ * 255.00003051757812, ᐃ * 103.08523559570312, ᐃ * 261.0000305175781, 111.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(261.5000305175781 * ᐃ, ᐃ * 99.58523559570312, ᐃ * 261.5000305175781, 99.58523559570312 * ᐃ, 262.0000305175781 * ᐃ, 87.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 282.0000305175781, ᐃ * 77.58523559570312, ᐃ * 301.0000305175781, ᐃ * 74.58523559570312, ᐃ * 314.0000305175781, 76.58523559570312 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ᐃⲆᐃⵠ], ᐃ * Ⲇⵠⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(186.00003051757812 * ᐃ, 192.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(185.00003051757812 * ᐃ, ᐃ * 66.94886779785156, 184.50003051757812 * ᐃ, ᐃ * 104.94886779785156, 183.00003051757812 * ᐃ, ᐃ * 16.948867797851562);
		Ⲇ.bezierCurveTo(216.00003051757812 * ᐃ, 47.94886779785156 * ᐃ, 219.00003051757812 * ᐃ, 80.94886779785156 * ᐃ, 218.00003051757812 * ᐃ, ᐃ * 113.94886779785156);
		Ⲇ.bezierCurveTo(ᐃ * 209.00003051757812, ᐃ * 165.94886779785156, 200.00003051757812 * ᐃ, ᐃ * 176.94886779785156, 189.00003051757812 * ᐃ, 192.94886779785156 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃΔⵠⲆ], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(190.00003051757812 * ᐃ, 191.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 207.00003051757812, 348.94886779785156 * ᐃ, ᐃ * 205.00003051757812, 323.94886779785156 * ᐃ, 209.00003051757812 * ᐃ, ᐃ * 358.94886779785156);
		Ⲇ.bezierCurveTo(171.00003051757812 * ᐃ, 334.94886779785156 * ᐃ, ᐃ * 167.00003051757812, ᐃ * 302.94886779785156, 161.00003051757812 * ᐃ, ᐃ * 268.94886779785156);
		Ⲇ.bezierCurveTo(160.00003051757812 * ᐃ, 218.94886779785156 * ᐃ, ᐃ * 181.00003051757812, 191.94886779785156 * ᐃ, 189.00003051757812 * ᐃ, ᐃ * 186.94886779785156);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⵠⵠⵠ], Δⵠ[3], ΔΔΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 194.00003051757812, ᐃ * 195.94886779785156);
		Ⲇ.bezierCurveTo(116.00003051757812 * ᐃ, 150.94886779785156 * ᐃ, ᐃ * 116.00003051757812, ᐃ * 150.94886779785156, ᐃ * 38.000030517578125, 105.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(67.00003051757812 * ᐃ, ᐃ * 90.94886779785156, 96.00003051757812 * ᐃ, 99.94886779785156 * ᐃ, ᐃ * 123.00003051757812, 111.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(183.00003051757812 * ᐃ, ᐃ * 152.94886779785156, 179.00003051757812 * ᐃ, ᐃ * 180.94886779785156, ᐃ * 193.00003051757812, 194.94886779785156 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⵠ], Δⵠ[3], ᐃⲆᐃᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(189.00003051757812 * ᐃ, 190.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 250.00003051757812, ᐃ * 133.94886779785156, ᐃ * 311.0000305175781, ᐃ * 78.94886779785156, 311.0000305175781 * ᐃ, 76.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 306.0000305175781, ᐃ * 127.94886779785156, 283.0000305175781 * ᐃ, 148.94886779785156 * ᐃ, 261.0000305175781 * ᐃ, 166.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 220.00003051757812, 197.94886779785156 * ᐃ, ᐃ * 191.00003051757812, 194.94886779785156 * ᐃ, ᐃ * 189.00003051757812, 195.94886779785156 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⵠ], Δⵠ[3], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(189.00003051757812 * ᐃ, ᐃ * 194.94886779785156);
		Ⲇ.bezierCurveTo(268.5000305175781 * ᐃ, ᐃ * 211.94886779785156, ᐃ * 268.5000305175781, 211.94886779785156 * ᐃ, 348.0000305175781 * ᐃ, 228.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 316.0000305175781, 247.94886779785156 * ᐃ, ᐃ * 298.0000305175781, 256.94886779785156 * ᐃ, ᐃ * 250.00003051757812, 246.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 197.00003051757812, ᐃ * 229.94886779785156, ᐃ * 189.00003051757812, ᐃ * 202.94886779785156, ᐃ * 188.00003051757812, 199.94886779785156 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⵠ], Δⵠ[3], ᐃ * ⲆⲆⲆⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 192.00003051757812, 191.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(116.50003051757812 * ᐃ, ᐃ * 238.44886779785156, 116.50003051757812 * ᐃ, 238.44886779785156 * ᐃ, 41.000030517578125 * ᐃ, 284.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 49.000030517578125, 252.94886779785156 * ᐃ, 56.000030517578125 * ᐃ, 242.94886779785156 * ᐃ, 80.00003051757812 * ᐃ, ᐃ * 215.94886779785156);
		Ⲇ.bezierCurveTo(125.00003051757812 * ᐃ, ᐃ * 181.94886779785156, 174.00003051757812 * ᐃ, ᐃ * 183.94886779785156, 192.00003051757812 * ᐃ, 191.94886779785156 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔΔᐃΔ], ΔΔⲆᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(313.0000305175781 * ᐃ, ᐃ * 76.58523559570312);
		Ⲇ.bezierCurveTo(ᐃ * 308.0000305175781, 130.58523559570312 * ᐃ, 279.0000305175781 * ᐃ, 158.58523559570312 * ᐃ, 254.00003051757812 * ᐃ, ᐃ * 175.58523559570312);
		Ⲇ.bezierCurveTo(287.0000305175781 * ᐃ, 182.58523559570312 * ᐃ, 274.0000305175781 * ᐃ, ᐃ * 181.08523559570312, 294.0000305175781 * ᐃ, ᐃ * 186.58523559570312);
		Ⲇ.bezierCurveTo(ᐃ * 293.5000305175781, 196.08523559570312 * ᐃ, 293.5000305175781 * ᐃ, 196.08523559570312 * ᐃ, 293.0000305175781 * ᐃ, ᐃ * 205.58523559570312);
		Ⲇ.bezierCurveTo(ᐃ * 304.0000305175781, ᐃ * 201.08523559570312, ᐃ * 304.0000305175781, ᐃ * 201.08523559570312, 315.0000305175781 * ᐃ, 196.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(350.0000305175781 * ᐃ, ᐃ * 219.58523559570312, ᐃ * 343.0000305175781, 221.58523559570312 * ᐃ, 351.0000305175781 * ᐃ, ᐃ * 230.58523559570312);
		Ⲇ.bezierCurveTo(296.0000305175781 * ᐃ, 260.5852355957031 * ᐃ, ᐃ * 264.0000305175781, 256.5852355957031 * ᐃ, ᐃ * 220.00003051757812, 236.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 233.00003051757812, ᐃ * 266.5852355957031, 232.00003051757812 * ᐃ, ᐃ * 279.5852355957031, ᐃ * 231.00003051757812, 295.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 222.00003051757812, ᐃ * 297.5852355957031, 222.00003051757812 * ᐃ, ᐃ * 297.5852355957031, 213.00003051757812 * ᐃ, ᐃ * 299.5852355957031);
		Ⲇ.bezierCurveTo(ᐃ * 219.50003051757812, 308.0852355957031 * ᐃ, ᐃ * 219.50003051757812, ᐃ * 308.0852355957031, ᐃ * 226.00003051757812, 316.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(223.00003051757812 * ᐃ, ᐃ * 344.5852355957031, ᐃ * 216.00003051757812, ᐃ * 350.5852355957031, ᐃ * 209.00003051757812, 363.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 154.00003051757812, 318.5852355957031 * ᐃ, 156.00003051757812 * ᐃ, ᐃ * 268.5852355957031, ᐃ * 160.00003051757812, 238.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(135.00003051757812 * ᐃ, 268.5852355957031 * ᐃ, 125.00003051757812 * ᐃ, ᐃ * 267.5852355957031, ᐃ * 112.00003051757812, 272.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 104.50003051757812, 266.5852355957031 * ᐃ, ᐃ * 104.50003051757812, 266.5852355957031 * ᐃ, ᐃ * 97.00003051757812, 260.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(93.00003051757812 * ᐃ, ᐃ * 271.0852355957031, 93.00003051757812 * ᐃ, 271.0852355957031 * ᐃ, 89.00003051757812 * ᐃ, ᐃ * 281.5852355957031);
		Ⲇ.bezierCurveTo(66.00003051757812 * ᐃ, 288.5852355957031 * ᐃ, 59.000030517578125 * ᐃ, 288.5852355957031 * ᐃ, 39.000030517578125 * ᐃ, 285.5852355957031 * ᐃ);
		Ⲇ.bezierCurveTo(56.000030517578125 * ᐃ, 216.58523559570312 * ᐃ, ᐃ * 91.00003051757812, ᐃ * 204.58523559570312, ᐃ * 129.00003051757812, ᐃ * 189.58523559570312);
		Ⲇ.bezierCurveTo(90.00003051757812 * ᐃ, 176.58523559570312 * ᐃ, 89.00003051757812 * ᐃ, 173.58523559570312 * ᐃ, ᐃ * 79.00003051757812, 166.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 82.00003051757812, ᐃ * 155.08523559570312, 82.00003051757812 * ᐃ, ᐃ * 155.08523559570312, ᐃ * 85.00003051757812, 143.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(75.50003051757812 * ᐃ, 147.58523559570312 * ᐃ, ᐃ * 75.50003051757812, ᐃ * 147.58523559570312, 66.00003051757812 * ᐃ, 151.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 44.000030517578125, ᐃ * 133.58523559570312, ᐃ * 41.000030517578125, 124.58523559570312 * ᐃ, 34.000030517578125 * ᐃ, ᐃ * 102.58523559570312);
		Ⲇ.bezierCurveTo(100.00003051757812 * ᐃ, 81.58523559570312 * ᐃ, ᐃ * 134.00003051757812, 118.58523559570312 * ᐃ, ᐃ * 150.00003051757812, ᐃ * 128.58523559570312);
		Ⲇ.bezierCurveTo(144.00003051757812 * ᐃ, 102.58523559570312 * ᐃ, ᐃ * 147.00003051757812, ᐃ * 90.58523559570312, ᐃ * 150.00003051757812, ᐃ * 80.58523559570312);
		Ⲇ.bezierCurveTo(159.50003051757812 * ᐃ, ᐃ * 79.08523559570312, 159.50003051757812 * ᐃ, ᐃ * 79.08523559570312, 169.00003051757812 * ᐃ, ᐃ * 77.58523559570312);
		Ⲇ.bezierCurveTo(163.00003051757812 * ᐃ, ᐃ * 72.58523559570312, 163.00003051757812 * ᐃ, 72.58523559570312 * ᐃ, ᐃ * 157.00003051757812, ᐃ * 67.58523559570312);
		Ⲇ.bezierCurveTo(162.00003051757812 * ᐃ, ᐃ * 42.585235595703125, 169.00003051757812 * ᐃ, ᐃ * 29.585235595703125, ᐃ * 182.00003051757812, 14.585235595703125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 219.00003051757812, ᐃ * 48.585235595703125, ᐃ * 222.00003051757812, ᐃ * 92.58523559570312, 218.00003051757812 * ᐃ, 112.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(239.00003051757812 * ᐃ, ᐃ * 95.58523559570312, ᐃ * 242.00003051757812, 97.58523559570312 * ᐃ, ᐃ * 249.00003051757812, ᐃ * 94.58523559570312);
		Ⲇ.bezierCurveTo(255.00003051757812 * ᐃ, 103.08523559570312 * ᐃ, 255.00003051757812 * ᐃ, 103.08523559570312 * ᐃ, ᐃ * 261.0000305175781, ᐃ * 111.58523559570312);
		Ⲇ.bezierCurveTo(ᐃ * 261.5000305175781, ᐃ * 99.58523559570312, 261.5000305175781 * ᐃ, ᐃ * 99.58523559570312, ᐃ * 262.0000305175781, 87.58523559570312 * ᐃ);
		Ⲇ.bezierCurveTo(282.0000305175781 * ᐃ, 77.58523559570312 * ᐃ, ᐃ * 301.0000305175781, 74.58523559570312 * ᐃ, ᐃ * 314.0000305175781, 76.58523559570312 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆⲆⵠᐃΔ, Δⵠ[ᐃⲆᐃᐃ], ᐃᐃΔΔᐃ * ᐃ);
		return ΔⲆ
	}
	const ⲆΔΔΔⲆⵠⵠⵠΔ = Δⵠᐃⵠᐃ;

	function ⵠᐃⵠⵠᐃΔⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 125;
		ΔⲆ.height = ᐃ * 139;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 63, 79 * ᐃ);
		Ⲇ.rotate(1);
		ᐃᐃⲆΔ(Ⲇ, ΔΔⲆᐃᐃ, 60 * ᐃ, 10 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.restore();
		Ⲇ.globalAlpha = ΔᐃΔⲆ;
		Ⲇ.save();
		Ⲇ.translate(63 * ᐃ, 69 * ᐃ);
		Ⲇ.rotate(ΔⵠΔ);
		ᐃᐃⲆΔ(Ⲇ, ΔᐃᐃⲆᐃ, ᐃ * 60, 10 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[Δⵠᐃ], Δⵠ[2], ᐃᐃΔΔᐃ);
		Ⲇ.rotate(.56);
		ᐃᐃⲆΔ(Ⲇ, ᐃΔΔᐃΔ, 40 * ᐃ, ᐃ * 10);
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆᐃⵠ], Δⵠ[4], 4);
		Ⲇ.rotate(.28);
		ᐃᐃⲆΔ(Ⲇ, ⵠᐃΔᐃΔ, ᐃ * 28, ᐃ * ᐃΔⲆᐃⵠΔⵠ);
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠΔΔ]);
		Ⲇ.restore();
		return ΔⲆ
	}

	function ᐃΔΔΔᐃΔⵠᐃⲆ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 118;
		ΔⲆ.height = 129 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 90, 90 * ᐃ);
		ᐃΔⵠ(Ⲇ, -86.5 * ᐃ, ᐃ * -86, 110 * ᐃ, ᐃ * 110, ᐃ * 15);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ΔⲆᐃⲆ], ᐃⲆⲆΔΔ);
		return ΔⲆ
	}

	function ⲆⵠΔΔⵠⵠⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 90;
		ΔⲆ.height = ᐃ * 98;
		Ⲇ.translate(ⵠⵠⲆⵠ, ᐃ * 4);
		if (0 === Ⲇᐃ) {
			Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
			Ⲇ.save();
			Ⲇ.translate(44 * ᐃ, ᐃ * 50);
			Ⲇ.rotate(Δᐃⵠⵠ);
			ᐃᐃⲆΔ(Ⲇ, 8, ᐃ * 41, ᐃ * 10);
			ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ]);
			Ⲇ.restore()
		}
		Ⲇ.globalAlpha = ᐃᐃΔ;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 44, ᐃ * 44);
		Ⲇ.rotate(ΔⲆᐃᐃ);
		ᐃᐃⲆΔ(Ⲇ, ΔⵠΔⵠΔ, 41 * ᐃ, 10 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * ᐃΔⵠⵠ);
		Ⲇ.rotate(.56);
		ᐃᐃⲆΔ(Ⲇ, ⲆΔⲆᐃᐃ, 33 * ᐃ, ᐃ * ⵠⲆⵠᐃⵠ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃΔᐃ], Δⵠ[ⵠⲆⲆⵠ], ⵠᐃΔⲆ * ᐃ);
		Ⲇ.rotate(.28);
		ᐃᐃⲆΔ(Ⲇ, 8, ᐃ * 24, ᐃ * ᐃΔΔᐃΔ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 45, 45 * ᐃ);
		Ⲇ.rotate(ⵠᐃⲆⲆ);
		ᐃΔⵠ(Ⲇ, ᐃ * -ⵠⲆᐃᐃΔ, -25.5 * ᐃ, Ⲇⵠᐃᐃⵠⵠⵠ * ᐃ, 51 * ᐃ, ᐃ * 30);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆⲆΔΔ], Δⵠ[ᐃⲆⲆΔΔ], ᐃ * ΔΔΔⵠ);
		Ⲇ.save();
		Ⲇ.translate(45 * ᐃ, ᐃ * 45);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, -26 * ᐃ, ᐃ * -ⵠΔⵠⵠᐃ, ᐃ * 52, 18 * ᐃ, 30 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃⲆ], Δⵠ[ᐃⲆⲆΔΔ], ᐃ * ⲆⲆⲆⲆ);
		ᐃΔΔ(Ⲇ, ᐃ * 45, 29 * ᐃ, ⵠⵠⵠⵠⵠ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔΔⲆⲆⵠ]);
		ᐃΔΔ(Ⲇ, 45 * ᐃ, ᐃ * 61, ⲆⵠⲆΔᐃ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		ᐃΔΔ(Ⲇ, 28 * ᐃ, 45 * ᐃ, 7 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆᐃ]);
		ᐃΔΔ(Ⲇ, ᐃ * 62, ᐃ * 45, ᐃ * ᐃⲆⵠⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		return ΔⲆ
	}

	function ᐃᐃⵠΔⵠᐃᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 300 * ᐃ;
		ΔⲆ.height = ᐃ * 300;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔΔΔᐃ;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 150, 160 * ᐃ);
		Ⲇ.rotate(6.28);
		ᐃᐃⲆΔ(Ⲇ, 6, ᐃ * 146, 30 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.save();
		Ⲇ.translate(150 * ᐃ, 150 * ᐃ);
		Ⲇ.rotate(6.28);
		ᐃᐃⲆΔ(Ⲇ, 6, ᐃ * 146, 30 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⲆⲆΔⲆ], Ⲇᐃⵠᐃᐃ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 150, ᐃ * 150);
		Ⲇ.rotate(ᐃⵠⵠⲆ);
		ᐃᐃⲆΔ(Ⲇ, 6, ᐃ * 105, 30 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃΔᐃ], Δⵠ[3], 8 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 150, 150 * ᐃ);
		Ⲇ.rotate(ⵠⵠⵠΔ);
		ᐃᐃⲆΔ(Ⲇ, ΔΔΔΔ, ᐃ * 66, ᐃ * 30);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔⲆΔΔ], Δⵠ[2], 8 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(150 * ᐃ, 150 * ᐃ);
		Ⲇ.rotate(ⵠⲆᐃ);
		ᐃᐃⲆΔ(Ⲇ, ᐃⵠⵠⵠⲆ, ᐃ * 31, 30 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[ⵠⵠᐃᐃᐃ], ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(150 * ᐃ, ᐃ * 207);
		Ⲇ.bezierCurveTo(150 * ᐃ, 151 * ᐃ, ᐃ * 150, 101 * ᐃ, ᐃ * 150, ᐃ * 94);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔᐃΔᐃ], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 118, 100 * ᐃ);
		Ⲇ.bezierCurveTo(118 * ᐃ, ᐃ * 205, 118 * ᐃ, ᐃ * 207, 118 * ᐃ, ᐃ * 200);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 183, 100 * ᐃ);
		Ⲇ.bezierCurveTo(183 * ᐃ, 203 * ᐃ, 183 * ᐃ, 203 * ᐃ, 183 * ᐃ, 200 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], Ⲇᐃⵠⵠᐃ * ᐃ);
		return ΔⲆ
	}

	function ⲆΔⲆΔᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 90 * ᐃ;
		ΔⲆ.height = ᐃ * 98;
		Ⲇ.translate(ΔⲆⲆ, ᐃ * Ⲇⵠⵠⵠ);
		if (Ⲇᐃ === ⲆⵠⲆⲆ) {
			Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ᐃᐃΔ;
			Ⲇ.save();
			Ⲇ.translate(44 * ᐃ, 50 * ᐃ);
			Ⲇ.rotate(1.4);
			ᐃᐃⲆΔ(Ⲇ, 7, ᐃ * 41, ⵠⲆΔⲆᐃ * ᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[0])
		}
		Ⲇ.globalAlpha = 1;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 44, ᐃ * 44);
		Ⲇ.rotate(1.4);
		ᐃᐃⲆΔ(Ⲇ, 7, 41 * ᐃ, 10 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⲆⲆ], Δⵠ[2], 4 * ᐃ);
		ᐃᐃⲆΔ(Ⲇ, ᐃⲆⲆᐃΔⲆⵠ, 35 * ᐃ, 10 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * ᐃⲆᐃⲆ);
		ᐃᐃⲆΔ(Ⲇ, ΔᐃⵠⲆΔ, 23 * ᐃ, 5 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠᐃ]);
		Ⲇ.save();
		Ⲇ.translate(45 * ᐃ, 45 * ᐃ);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, -9 * ᐃ, ᐃ * -25.5, 18 * ᐃ, ᐃ * 51, 30 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃΔⵠ], Δⵠ[ⲆΔᐃΔⵠ], 2 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(45 * ᐃ, 45 * ᐃ);
		Ⲇ.rotate(ⲆⵠⲆⲆ);
		ᐃΔⵠ(Ⲇ, -26 * ᐃ, ᐃ * -ᐃΔⵠⵠⲆ, ᐃ * 52, 18 * ᐃ, 30 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[4], ᐃ * ΔΔΔⵠ);
		ᐃΔΔ(Ⲇ, 45 * ᐃ, 29 * ᐃ, ⵠⲆⲆΔΔΔⲆ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		ᐃΔΔ(Ⲇ, ᐃ * 45, ᐃ * 61, ᐃ * 7);
		ΔΔ(Ⲇ, Δⵠ[5]);
		ᐃΔΔ(Ⲇ, 28 * ᐃ, 45 * ᐃ, ᐃ * ΔΔⵠΔⲆ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		ᐃΔΔ(Ⲇ, 62 * ᐃ, ᐃ * 45, ᐃ * ⲆΔⲆⵠⵠ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔᐃ]);
		return ΔⲆ
	}

	function ⲆⲆⵠⲆᐃⲆⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 90 * ᐃ;
		ΔⲆ.height = 98 * ᐃ;
		Ⲇ.translate(Δⵠⵠⵠ, ᐃᐃⵠΔ * ᐃ);
		if (ⵠⲆΔ === Ⲇᐃ) {
			Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ⵠᐃⵠΔ;
			Ⲇ.save();
			Ⲇ.translate(44 * ᐃ, 50 * ᐃ);
			Ⲇ.rotate(.2);
			ᐃᐃⲆΔ(Ⲇ, ΔⲆⵠⲆⵠⵠⵠ, 41 * ᐃ, 10 * ᐃ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[0])
		}
		Ⲇ.globalAlpha = ΔΔⵠΔ;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 44, ᐃ * 44);
		Ⲇ.rotate(.2);
		ᐃᐃⲆΔ(Ⲇ, 9, ᐃ * 41, 10 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 4 * ᐃ);
		Ⲇ.rotate(-.32);
		ᐃᐃⲆΔ(Ⲇ, 9, 32 * ᐃ, 10 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠΔΔⲆᐃ], Δⵠ[ᐃᐃⵠΔ], ᐃ * 4);
		Ⲇ.rotate(.68);
		ᐃᐃⲆΔ(Ⲇ, 9, ᐃ * 23, ᐃ * ᐃΔΔᐃΔ);
		ΔΔ(Ⲇ, Δⵠ[ΔΔⲆⲆⵠ], Δⵠ[ΔⲆⲆⵠⵠ], ᐃ * 6);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 45, ᐃ * 45);
		Ⲇ.rotate(Ⲇᐃⵠ);
		ᐃΔⵠ(Ⲇ, ᐃ * -ⵠΔᐃᐃΔ, -25.5 * ᐃ, ᐃ * 18, 51 * ᐃ, 30 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ᐃⲆᐃⲆ], 2 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 45, ᐃ * 45);
		Ⲇ.rotate(ⲆⵠⲆⲆ);
		ᐃΔⵠ(Ⲇ, ᐃ * -26, -9 * ᐃ, 52 * ᐃ, ᐃ * ᐃⲆᐃⲆⵠ, 30 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[4], 2 * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 45, 29 * ᐃ, ᐃ * ⲆⵠⲆΔᐃ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		ᐃΔΔ(Ⲇ, 45 * ᐃ, ᐃ * 61, ᐃ * ΔΔⵠΔⲆ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		ᐃΔΔ(Ⲇ, 28 * ᐃ, ᐃ * 45, 7 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠⵠ]);
		ᐃΔΔ(Ⲇ, 62 * ᐃ, ᐃ * 45, ᐃ * ⲆᐃΔⲆⲆΔᐃ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		return ΔⲆ
	}

	function ⲆΔᐃⲆⵠᐃⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 90 * ᐃ;
		ΔⲆ.height = 101 * ᐃ;
		Ⲇ.translate(ᐃ * ⵠⵠⵠ, ⲆΔⲆⲆⵠ * ᐃ);
		Ⲇᐃ === ΔⲆⲆ && (Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ⵠⲆⲆ, ᐃΔΔ(Ⲇ, ᐃ * 44, 55 * ᐃ, ᐃ * 41), ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ]));
		Ⲇ.globalAlpha = 1;
		ᐃΔΔ(Ⲇ, ᐃ * 44, ᐃ * 45, 41 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔ], Δⵠ[2], 4 * ᐃ);
		ᐃΔΔ(Ⲇ, 44 * ᐃ, ᐃ * 45, 31 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⲆ]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 45, 45 * ᐃ);
		ᐃΔⵠ(Ⲇ, -ᐃⵠᐃΔΔⵠᐃ * ᐃ, -25.5 * ᐃ, ᐃ * ⲆⲆⲆⲆⲆ, ᐃ * 51, ᐃ * 30);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[4], ᐃ * 2);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 45, ᐃ * 45);
		ᐃΔⵠ(Ⲇ, -26 * ᐃ, ᐃ * -9, ᐃ * 52, 18 * ᐃ, 30 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ᐃᐃⵠΔ], ΔΔΔⵠ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 45, 29 * ᐃ, ᐃ * 7);
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔᐃ]);
		ᐃΔΔ(Ⲇ, ᐃ * 45, ᐃ * 61, 7 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		ᐃΔΔ(Ⲇ, 28 * ᐃ, ᐃ * 45, 7 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		ᐃΔΔ(Ⲇ, ᐃ * 62, 45 * ᐃ, ᐃ * ᐃᐃⵠᐃᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆⵠ]);
		return ΔⲆ
	}

	function ᐃᐃⵠⵠᐃⵠᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 300;
		ΔⲆ.height = ᐃ * 300;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ⲆΔΔΔ;
		Ⲇ.save();
		Ⲇ.translate(150 * ᐃ, 160 * ᐃ);
		Ⲇ.rotate(6.28);
		ᐃᐃⲆΔ(Ⲇ, 6, ᐃ * 146, ᐃ * 30);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.save();
		Ⲇ.translate(150 * ᐃ, ᐃ * 150);
		Ⲇ.rotate(6.28);
		ᐃᐃⲆΔ(Ⲇ, ⲆⲆⵠⵠⲆ, ᐃ * 146, 30 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ⲆΔⲆᐃᐃ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(150 * ᐃ, ᐃ * 150);
		Ⲇ.rotate(ⵠⲆΔ);
		ᐃᐃⲆΔ(Ⲇ, 6, ᐃ * 105, 30 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠᐃ], Δⵠ[ᐃΔⵠⲆ], ᐃ * ΔΔⲆᐃᐃ);
		Ⲇ.save();
		Ⲇ.translate(150 * ᐃ, 150 * ᐃ);
		Ⲇ.rotate(ⵠⵠⵠΔ);
		ᐃᐃⲆΔ(Ⲇ, 6, 66 * ᐃ, 30 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[2], ᐃ * ΔΔᐃⲆⲆ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 131, 116 * ᐃ);
		ᐃᐃⲆΔ(Ⲇ, ⲆΔⲆⵠⵠ, ᐃ * 17, ΔᐃᐃⲆᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[6]);
		Ⲇ.save();
		Ⲇ.translate(163 * ᐃ, 168 * ᐃ);
		ᐃᐃⲆΔ(Ⲇ, ⲆⵠⲆΔᐃ, 25 * ᐃ, 8 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[6]);
		Ⲇ.save();
		Ⲇ.translate(117 * ᐃ, ᐃ * 151);
		ᐃᐃⲆΔ(Ⲇ, 7, ᐃ * ⲆᐃᐃⲆΔ, 8 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[6]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 167, 122 * ᐃ);
		ᐃᐃⲆΔ(Ⲇ, 7, ᐃ * 12, ᐃ * 8);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[6]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 150, ᐃ * 207);
		Ⲇ.bezierCurveTo(150 * ᐃ, 151 * ᐃ, 150 * ᐃ, ᐃ * 101, ᐃ * 150, 94 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ⲆⵠΔⵠ], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 118, ᐃ * 100);
		Ⲇ.bezierCurveTo(118 * ᐃ, 205 * ᐃ, 118 * ᐃ, ᐃ * 207, ᐃ * 118, ᐃ * 200);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆⲆⵠⵠᐃ, Δⵠ[ⲆᐃΔⲆ], ⲆⵠⲆⵠⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(183 * ᐃ, 100 * ᐃ);
		Ⲇ.bezierCurveTo(183 * ᐃ, ᐃ * 203, ᐃ * 183, ᐃ * 203, 183 * ᐃ, ᐃ * 200);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], ᐃ * ΔΔⲆᐃᐃ);
		return ΔⲆ
	}
	const ⵠᐃᐃΔⲆⵠΔ = ᐃᐃⵠⵠⲆⲆⲆ;

	function ᐃΔᐃΔΔΔΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 135 * ᐃ;
		ΔⲆ.height = ᐃ * 120;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 3.5, ᐃ * 55.25);
		Ⲇ.bezierCurveTo(3.5 * ᐃ, 114.25 * ᐃ, ᐃ * 2.5, 109.25 * ᐃ, 3.5 * ᐃ, ᐃ * 112.25);
		Ⲇ.bezierCurveTo(ᐃ * 5.5, 119.25 * ᐃ, ᐃ * 8.5, ᐃ * 119.25, 11.5 * ᐃ, 119.25 * ᐃ);
		Ⲇ.bezierCurveTo(15.5 * ᐃ, 114.25 * ᐃ, ᐃ * 13.5, ᐃ * 95.25, ᐃ * 14.5, 82.25 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[1], ᐃ * ⲆⲆΔΔᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 6.5, ᐃ * 43.25);
		Ⲇ.bezierCurveTo(3.5 * ᐃ, ᐃ * 27.25, 7.5 * ᐃ, ᐃ * 20.25, 25.5 * ᐃ, ᐃ * 11.25);
		Ⲇ.bezierCurveTo(ᐃ * 45.5, -.75 * ᐃ, ᐃ * 73.5, 1.25 * ᐃ, ᐃ * 107.5, 10.25 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 131.5, 21.25 * ᐃ, ᐃ * 125.5, ᐃ * 34.25, 125.5 * ᐃ, 36.25 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ], Δⵠ[1], ᐃ * ΔᐃⵠⲆΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(120.5 * ᐃ, ᐃ * 62.25);
		Ⲇ.bezierCurveTo(121.5 * ᐃ, ᐃ * 95.25, ᐃ * 120.5, 80.25 * ᐃ, ᐃ * 120.5, 100.25 * ᐃ);
		Ⲇ.bezierCurveTo(118.5 * ᐃ, 119.25 * ᐃ, 123.5 * ᐃ, ᐃ * 118.25, ᐃ * 129.5, 113.25 * ᐃ);
		Ⲇ.bezierCurveTo(133.5 * ᐃ, 107.25 * ᐃ, ᐃ * 130.5, ᐃ * 97.25, 130.5 * ᐃ, 87.25 * ᐃ);
		Ⲇ.bezierCurveTo(129.5 * ᐃ, 56.25 * ᐃ, ᐃ * 130, ᐃ * 70.75, ᐃ * 129.5, 54.25 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆⲆ], Δⵠ[1], 7 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 17.5, 27 * ᐃ);
		Ⲇ.bezierCurveTo(48.5 * ᐃ, ᐃ * ⲆⵠΔΔ, ᐃ * 93.5, 14 * ᐃ, 118.5 * ᐃ, ᐃ * 26);
		Ⲇ.bezierCurveTo(ᐃ * 132.5, ᐃ * 35, 133.5 * ᐃ, ᐃ * 52, ᐃ * 132.5, 68 * ᐃ);
		Ⲇ.bezierCurveTo(125.5 * ᐃ, ᐃ * 87, 116.5 * ᐃ, 84 * ᐃ, ᐃ * 96.5, 75 * ᐃ);
		Ⲇ.bezierCurveTo(60.5 * ᐃ, 66 * ᐃ, 52.5 * ᐃ, ᐃ * 74, 37.5 * ᐃ, 78 * ᐃ);
		Ⲇ.bezierCurveTo(2.5 * ᐃ, ᐃ * 86, ᐃ * 3.5, ᐃ * 78, 1.5 * ᐃ, 61 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 1.5, 37 * ᐃ, 9.5 * ᐃ, ᐃ * 32, ᐃ * 15.5, 28 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃΔᐃ], Δⵠ[ⲆΔⵠⵠⵠ], ⵠⵠⵠⵠⵠ * ᐃ);
		return ΔⲆ
	}

	function ΔⵠⲆΔⲆⵠᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 304 * ᐃ;
		ΔⲆ.height = ᐃ * 278;
		Ⲇ.translate(ᐃ * 10, ᐃ * 25);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 128, ᐃ * 137);
		Ⲇ.bezierCurveTo(155 * ᐃ, ᐃ * 144, ᐃ * 223, ᐃ * 143, ΔᐃΔⲆΔⲆΔ * ᐃ, 122 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 249, ᐃ * 180, ᐃ * 210, 227 * ᐃ, ᐃ * 164, 242 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 74, ᐃ * 213, ᐃ * 99, 166 * ᐃ, 127 * ᐃ, 138 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(284 * ᐃ, ᐃ * 52);
		Ⲇ.bezierCurveTo(ᐃ * 126, ᐃ * 112, ᐃ * 89, ᐃ * 177, 170 * ᐃ, 241 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 103, ᐃ * 275, ᐃ * 20, 239 * ᐃ, 12 * ᐃ, ᐃ * 159);
		Ⲇ.bezierCurveTo(ᐃ * 5, ᐃ * 76, 75 * ᐃ, ᐃ * 4, 165 * ᐃ, ᐃ * 13);
		Ⲇ.bezierCurveTo(ᐃ * 233, ᐃ * 15, ᐃ * 260, 33 * ᐃ, 284 * ᐃ, 52 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃ]);
		Ⲇ.translate(-10 * ᐃ, -25 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆⲆ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(128 * ᐃ, 137 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 155, ᐃ * 144, 223 * ᐃ, ᐃ * 143, ᐃ * 256, ᐃ * 122);
		Ⲇ.bezierCurveTo(249 * ᐃ, ᐃ * 180, 210 * ᐃ, 227 * ᐃ, 164 * ᐃ, ᐃ * 242);
		Ⲇ.bezierCurveTo(74 * ᐃ, 213 * ᐃ, 99 * ᐃ, ᐃ * 166, 127 * ᐃ, ᐃ * 138);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[2], ⲆΔᐃΔⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 284, ᐃ * 52);
		Ⲇ.bezierCurveTo(ᐃ * 126, ᐃ * 112, ᐃ * 89, 177 * ᐃ, ᐃ * 170, ᐃ * 241);
		Ⲇ.bezierCurveTo(103 * ᐃ, 275 * ᐃ, ᐃ * ᐃᐃΔΔΔ, 239 * ᐃ, ᐃ * ΔⲆⵠΔᐃ, ᐃ * 159);
		Ⲇ.bezierCurveTo(ᐃ * ᐃᐃΔᐃ, 76 * ᐃ, ᐃ * 75, ᐃ * 4, 165 * ᐃ, ΔⲆᐃΔᐃ * ᐃ);
		Ⲇ.bezierCurveTo(233 * ᐃ, ᐃ * ⵠⵠⲆᐃᐃⵠᐃ, ᐃ * 260, ᐃ * 33, 284 * ᐃ, 52 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔᐃ], Δⵠ[4], ᐃⲆΔᐃΔⵠⵠ * ᐃ);
		return ΔⲆ
	}

	function ΔⵠⵠΔᐃΔΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 175 * ᐃ;
		ΔⲆ.height = ᐃ * 169;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 17, 112 * ᐃ);
		Ⲇ.bezierCurveTo(14 * ᐃ, ᐃ * 146, 27 * ᐃ, 152 * ᐃ, 37 * ᐃ, ᐃ * 149);
		Ⲇ.bezierCurveTo(78 * ᐃ, 155 * ᐃ, ᐃ * 128, 150 * ᐃ, ᐃ * 146, ᐃ * 150);
		Ⲇ.bezierCurveTo(158 * ᐃ, 144 * ᐃ, ᐃ * 158, ᐃ * 121, ᐃ * 153, 114 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[9], ΔⵠΔᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 127, 111 * ᐃ);
		Ⲇ.bezierCurveTo(133 * ᐃ, 136 * ᐃ, ᐃ * 115, 149 * ᐃ, 88 * ᐃ, 150 * ᐃ);
		Ⲇ.bezierCurveTo(119.5 * ᐃ, 151 * ᐃ, ᐃ * 119.5, ᐃ * 151, 151 * ᐃ, 152 * ᐃ);
		Ⲇ.bezierCurveTo(159 * ᐃ, ᐃ * 136, ᐃ * 155, 126 * ᐃ, 154 * ᐃ, 113 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃΔⵠΔΔᐃ]);
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(0, ᐃᐃᐃΔᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 15, ᐃ * 117);
		Ⲇ.bezierCurveTo(ᐃ * 34, 109 * ᐃ, 61 * ᐃ, 106 * ᐃ, 94 * ᐃ, ᐃ * 109);
		Ⲇ.bezierCurveTo(ᐃ * 126, 110 * ᐃ, 142 * ᐃ, 113 * ᐃ, 154 * ᐃ, 119 * ᐃ);
		Ⲇ.bezierCurveTo(154 * ᐃ, 123 * ᐃ, 154 * ᐃ, 123 * ᐃ, 154 * ᐃ, ᐃ * 127);
		Ⲇ.bezierCurveTo(127 * ᐃ, 118 * ᐃ, ᐃⲆΔᐃΔⵠⵠ * ᐃ, 122 * ᐃ, ᐃ * 18, ᐃ * 129);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ⲆⲆⵠⲆ, -ΔⲆΔⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 14, ᐃ * 127);
		Ⲇ.bezierCurveTo(ᐃ * ⵠⵠΔΔΔⲆΔ, 117 * ᐃ, 12 * ᐃ, 109 * ᐃ, ᐃ * 15, 103 * ᐃ);
		Ⲇ.bezierCurveTo(16 * ᐃ, 95 * ᐃ, 21 * ᐃ, 92 * ᐃ, ᐃ * 60, 93 * ᐃ);
		Ⲇ.bezierCurveTo(91 * ᐃ, 93 * ᐃ, 118 * ᐃ, 93 * ᐃ, ᐃ * 143, ᐃ * 96);
		Ⲇ.bezierCurveTo(151 * ᐃ, 96 * ᐃ, ᐃ * 155, ᐃ * 99, ᐃ * 156, 112 * ᐃ);
		Ⲇ.bezierCurveTo(157 * ᐃ, 124 * ᐃ, ᐃ * 157, 127 * ᐃ, 156 * ᐃ, ᐃ * 128);
		Ⲇ.bezierCurveTo(ᐃ * 138, 112 * ᐃ, ΔᐃⲆⲆⲆ * ᐃ, 118 * ᐃ, ᐃ * 84, ᐃ * 118);
		Ⲇ.bezierCurveTo(28 * ᐃ, 118 * ᐃ, 20 * ᐃ, 120 * ᐃ, 16 * ᐃ, 127 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ΔΔᐃᐃⵠ], ᐃ * ΔΔⲆⲆⵠ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 27.5, 138.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -13.5, ᐃ * -14.5, 27 * ᐃ, ᐃ * 29, ᐃ * 4);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔᐃΔᐃ], 5 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 143.5, 137 * ᐃ);
		ᐃΔⵠ(Ⲇ, -13.5 * ᐃ, -ⲆⵠⲆᐃᐃᐃⲆ * ᐃ, ᐃ * 27, ᐃ * 28, 4 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 5 * ᐃ);
		return ΔⲆ
	}

	function ⵠⲆⲆᐃⵠᐃΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 501 * ᐃ;
		ΔⲆ.height = 309 * ᐃ;
		Ⲇ.translate(Ⲇᐃⵠ, ⲆΔⵠᐃⵠ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 126, ᐃ * 184);
		Ⲇ.bezierCurveTo(ᐃ * 169, 196 * ᐃ, ᐃ * 194, ᐃ * 198, 227 * ᐃ, 198 * ᐃ);
		Ⲇ.bezierCurveTo(235 * ᐃ, ᐃ * 222, ᐃ * 236, 223 * ᐃ, 241 * ᐃ, ᐃ * 226);
		Ⲇ.bezierCurveTo(ᐃ * 245, 228 * ᐃ, ᐃ * 257, ᐃ * 228, ᐃ * 263, ᐃ * 226);
		Ⲇ.bezierCurveTo(267 * ᐃ, ᐃ * 225, 270 * ᐃ, 211 * ᐃ, ᐃ * 275, ᐃ * 198);
		Ⲇ.bezierCurveTo(ᐃ * 332, 194 * ᐃ, ᐃ * 347, ᐃ * 192, 372 * ᐃ, ᐃ * 188);
		Ⲇ.bezierCurveTo(366 * ᐃ, 174.5 * ᐃ, 366 * ᐃ, ᐃ * 174.5, ᐃ * 360, 161 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 253.5, ᐃ * 162, ᐃ * 253.5, 162 * ᐃ, 147 * ᐃ, ᐃ * 163);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = ΔⲆᐃᐃ;
		Ⲇ.translate(Ⲇᐃⵠ, ᐃ * -ᐃⵠⲆᐃΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃⲆᐃⵠΔ * ᐃ, ᐃ * 116);
		Ⲇ.bezierCurveTo(ᐃ * 90, ᐃ * 101, 96 * ᐃ, 89 * ᐃ, ᐃ * 106, 83 * ᐃ);
		Ⲇ.bezierCurveTo(86 * ᐃ, 79 * ᐃ, ᐃ * 86, 52 * ᐃ, 93 * ᐃ, ᐃ * 38);
		Ⲇ.bezierCurveTo(99 * ᐃ, ᐃ * 51, 107 * ᐃ, ᐃ * 57, 122 * ᐃ, 63 * ᐃ);
		Ⲇ.bezierCurveTo(130 * ᐃ, 53 * ᐃ, 141 * ᐃ, 46 * ᐃ, ᐃ * 161, ᐃ * 46);
		Ⲇ.bezierCurveTo(157 * ᐃ, 31 * ᐃ, 158 * ᐃ, 20 * ᐃ, 169 * ᐃ, ᐃ * ΔΔΔⵠΔ);
		Ⲇ.bezierCurveTo(171 * ᐃ, 24 * ᐃ, ᐃ * 186, ᐃ * 33, 198 * ᐃ, 45 * ᐃ);
		Ⲇ.bezierCurveTo(252 * ᐃ, ᐃ * 45, ᐃ * 252, ᐃ * 45, 306 * ᐃ, 45 * ᐃ);
		Ⲇ.bezierCurveTo(323 * ᐃ, 33 * ᐃ, 332 * ᐃ, 21 * ᐃ, ᐃ * 335, ᐃ * 7);
		Ⲇ.bezierCurveTo(ᐃ * 349, ᐃ * 21, 347 * ᐃ, 36 * ᐃ, ᐃ * 345, 46 * ᐃ);
		Ⲇ.bezierCurveTo(364 * ᐃ, 46 * ᐃ, 369 * ᐃ, ᐃ * 48, ᐃ * 377, ᐃ * 63);
		Ⲇ.bezierCurveTo(398 * ᐃ, 58 * ᐃ, ᐃ * 403, ᐃ * 49, ᐃ * 409, ᐃ * 40);
		Ⲇ.bezierCurveTo(419 * ᐃ, ᐃ * 57, 411 * ᐃ, 79 * ᐃ, ᐃ * 398, 85 * ᐃ);
		Ⲇ.bezierCurveTo(405 * ᐃ, ⵠᐃⵠΔⵠⵠᐃ * ᐃ, ᐃ * 405, 106 * ᐃ, 401 * ᐃ, 118 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 332.5, ᐃ * 128.5, 332.5 * ᐃ, 128.5 * ᐃ, ᐃ * 264, 139 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 122, 191 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 123, 237 * ᐃ, ᐃ * 135, ᐃ * 245, ᐃ * 153, ᐃ * 259);
		Ⲇ.bezierCurveTo(167 * ᐃ, ᐃ * 269, ᐃ * 158, ᐃ * 281, 118 * ᐃ, 276 * ᐃ);
		Ⲇ.bezierCurveTo(104 * ᐃ, ᐃ * 273, ᐃ * 98, 268 * ᐃ, 93 * ᐃ, 242 * ᐃ);
		Ⲇ.bezierCurveTo(89 * ᐃ, ᐃ * 220, 92 * ᐃ, ᐃ * 201, ᐃ * 102, ᐃ * 179);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃΔ], Δⵠ[2], 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(403 * ᐃ, 182 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 414, 215 * ᐃ, 412 * ᐃ, 232 * ᐃ, ᐃ * 403, ᐃ * 260);
		Ⲇ.bezierCurveTo(ᐃ * 395, 274 * ᐃ, ᐃ * 375, 272 * ᐃ, ᐃ * 356, ᐃ * 270);
		Ⲇ.bezierCurveTo(345 * ᐃ, 268 * ᐃ, 339 * ᐃ, ᐃ * 262, 354 * ᐃ, ᐃ * 252);
		Ⲇ.bezierCurveTo(ᐃ * 370, 242 * ᐃ, ᐃ * 380, ᐃ * 225, ᐃ * 384, 184 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠᐃ], Δⵠ[2], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(155 * ᐃ, ᐃ * 157);
		Ⲇ.bezierCurveTo(146 * ᐃ, 189 * ᐃ, 137 * ᐃ, 198 * ᐃ, ᐃ * 114, 219 * ᐃ);
		Ⲇ.bezierCurveTo(104 * ᐃ, ᐃ * 212, 98 * ᐃ, ᐃ * 203, ᐃ * 89, ᐃ * 189);
		Ⲇ.bezierCurveTo(82 * ᐃ, ᐃ * 178, ᐃ * 91, 164 * ᐃ, ᐃ * 93, 136 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ⲆⲆΔⲆ], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(347 * ᐃ, 162 * ᐃ);
		Ⲇ.bezierCurveTo(357 * ᐃ, 195 * ᐃ, ᐃ * 376, ᐃ * 209, 387 * ᐃ, 217 * ᐃ);
		Ⲇ.bezierCurveTo(409 * ᐃ, ᐃ * 201, 420 * ᐃ, ᐃ * 181, ᐃ * 416, 166 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 410, 150 * ᐃ, ᐃ * 412, ᐃ * 149, 408 * ᐃ, 130 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠᐃΔ], Δⵠ[2], ᐃ * ⲆⲆⵠⲆⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(86 * ᐃ, ᐃ * 134);
		Ⲇ.bezierCurveTo(79 * ᐃ, ᐃ * 102, 92 * ᐃ, 84 * ᐃ, ᐃ * 108, ᐃ * 92);
		Ⲇ.bezierCurveTo(149 * ᐃ, ᐃ * 108, 184 * ᐃ, ᐃ * 111, 242 * ᐃ, ᐃ * 111);
		Ⲇ.bezierCurveTo(294 * ᐃ, ᐃ * 108, ᐃ * 341, ᐃ * 105, 386 * ᐃ, 98 * ᐃ);
		Ⲇ.bezierCurveTo(412 * ᐃ, ᐃ * 91, ᐃ * 417, ᐃ * 86, 415 * ᐃ, ᐃ * 133);
		Ⲇ.bezierCurveTo(ᐃ * 413, ᐃ * 160, 413 * ᐃ, ᐃ * 160, ᐃ * 368, 174 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 308, ᐃ * 184, 291 * ᐃ, ᐃ * 185, 270 * ᐃ, 186 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 264, ᐃ * 206, 262 * ᐃ, 215 * ᐃ, ᐃ * 253, 215 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 239, 217 * ᐃ, 239 * ᐃ, ᐃ * 211, ᐃ * 231, ᐃ * 186);
		Ⲇ.bezierCurveTo(178 * ᐃ, 184 * ᐃ, 156 * ᐃ, 179 * ᐃ, ᐃ * 112, ᐃ * 162);
		Ⲇ.bezierCurveTo(ᐃ * 87, 151 * ᐃ, ᐃ * 90, ᐃ * 144, ᐃ * 87, ᐃ * 137);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔΔᐃ], Δⵠ[2], ᐃ * ⲆΔΔⲆᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 63, 98 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 84, ᐃ * 121, ᐃ * 109, 102 * ᐃ, 124 * ᐃ, 117 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 138, ᐃ * 136, 123 * ᐃ, 165 * ᐃ, ᐃ * 94, ᐃ * 150);
		Ⲇ.bezierCurveTo(66 * ᐃ, ᐃ * 131, 64 * ᐃ, ᐃ * 115, 63 * ᐃ, 99 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⵠ], Δⵠ[2], ΔΔⵠᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 449, ᐃ * 97);
		Ⲇ.bezierCurveTo(ᐃ * 446, ᐃ * 143, 415 * ᐃ, 151 * ᐃ, ᐃ * 402, 155 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 386, 157 * ᐃ, 373 * ᐃ, 133 * ᐃ, ᐃ * 391, 116 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 402, 106 * ᐃ, ᐃ * 432, 124 * ᐃ, ᐃ * 449, ᐃ * 97);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⲆ], Δⵠ[ᐃⲆᐃⵠ], 10 * ᐃ);
		return ΔⲆ
	}

	function ᐃΔⲆⵠΔⵠᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 175 * ᐃ;
		ΔⲆ.height = ᐃ * 169;
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(0, ᐃ * 3);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(19 * ᐃ, ᐃ * 139);
		Ⲇ.bezierCurveTo(18 * ᐃ, ᐃ * 163, 22 * ᐃ, ᐃ * 156, ᐃ * 53, ᐃ * 157);
		Ⲇ.bezierCurveTo(ᐃ * 97.5, ᐃ * 157, ᐃ * 97.5, 157 * ᐃ, 142 * ᐃ, ᐃ * 157);
		Ⲇ.bezierCurveTo(ᐃ * 150, 157 * ᐃ, 153 * ᐃ, ᐃ * 156, 154 * ᐃ, 142 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = ⲆᐃΔ;
		Ⲇ.translate(0, -3 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 86.5, 81.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -66.5, -65.5 * ᐃ, ᐃ * 133, ᐃ * 131, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ᐃᐃΔⵠ], ᐃⵠᐃⲆ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(84.5 * ᐃ, ᐃ * 79);
		ᐃΔⵠ(Ⲇ, ᐃ * -50.5, -49 * ᐃ, ᐃ * 101, ᐃ * 98, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⲆ], Δⵠ[2], ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(42 * ᐃ, 54 * ᐃ);
		Ⲇ.bezierCurveTo(37 * ᐃ, ᐃ * 48, ᐃ * 39, ᐃ * 44, ᐃ * 38, ᐃ * 41);
		Ⲇ.bezierCurveTo(42 * ᐃ, ᐃ * 40, ᐃ * 45, ᐃ * 40, ᐃ * 50, 41 * ᐃ);
		Ⲇ.bezierCurveTo(85 * ᐃ, ᐃ * 36, 98 * ᐃ, 37 * ᐃ, ᐃ * 116, 42 * ᐃ);
		Ⲇ.bezierCurveTo(132 * ᐃ, 39 * ᐃ, ᐃ * 132, 39 * ᐃ, ᐃ * 133, 56 * ᐃ);
		Ⲇ.bezierCurveTo(136 * ᐃ, ᐃ * 73, 136 * ᐃ, ᐃ * 84, ᐃ * 132, ᐃ * 106);
		Ⲇ.bezierCurveTo(ᐃ * 47, 113 * ᐃ, 85.5 * ᐃ, 106 * ᐃ, 39 * ᐃ, 106 * ᐃ);
		Ⲇ.bezierCurveTo(32 * ᐃ, 81 * ᐃ, 38 * ᐃ, 60 * ᐃ, 42 * ᐃ, 55 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔⲆΔΔ], Δⵠ[ΔⲆⵠⵠ], ᐃ * 5);
		Ⲇ.save();
		Ⲇ.translate(28 * ᐃ, 24 * ᐃ);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, ᐃ * -ⲆᐃⵠⲆΔ, ᐃ * -14, ᐃ * 28, ᐃ * 28, ᐃ * 4);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⲆⲆ], Δⵠ[ⲆⲆⲆⲆ], 5 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(143 * ᐃ, ᐃ * 23);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, ᐃ * -14, -ᐃΔⲆⲆᐃᐃⵠ * ᐃ, 28 * ᐃ, 28 * ᐃ, ᐃ * ⲆΔᐃΔⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⵠⵠⵠᐃ], ⲆⲆᐃᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(55 * ᐃ, 80 * ᐃ);
		Ⲇ.bezierCurveTo(73 * ᐃ, 78 * ᐃ, 84 * ᐃ, ᐃ * 74, 100 * ᐃ, ᐃ * 64);
		Ⲇ.bezierCurveTo(111 * ᐃ, ᐃ * 57, ᐃ * 125, 67 * ᐃ, ᐃ * 108, 84 * ᐃ);
		Ⲇ.bezierCurveTo(96 * ᐃ, 95 * ᐃ, ᐃ * 86, ᐃ * 96, ᐃ * 70, 88 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 62.5, ᐃ * 84, ᐃ * 62.5, ᐃ * 84, ᐃ * 55, ᐃ * 80);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 17, ᐃ * 112);
		Ⲇ.bezierCurveTo(ᐃ * ⵠⲆᐃᐃⵠ, ᐃ * 146, 27 * ᐃ, 152 * ᐃ, ᐃ * 37, ᐃ * 149);
		Ⲇ.bezierCurveTo(ᐃ * 78, ᐃ * 155, 128 * ᐃ, 150 * ᐃ, 146 * ᐃ, ᐃ * 150);
		Ⲇ.bezierCurveTo(158 * ᐃ, 144 * ᐃ, 158 * ᐃ, ᐃ * 121, ᐃ * 153, 114 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[9], 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 127, ᐃ * 111);
		Ⲇ.bezierCurveTo(133 * ᐃ, 136 * ᐃ, ᐃ * 115, 149 * ᐃ, ᐃ * 88, 150 * ᐃ);
		Ⲇ.bezierCurveTo(119.5 * ᐃ, ᐃ * 151, 119.5 * ᐃ, 151 * ᐃ, 151 * ᐃ, 152 * ᐃ);
		Ⲇ.bezierCurveTo(159 * ᐃ, 136 * ᐃ, ᐃ * 155, ᐃ * 126, 154 * ᐃ, 113 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆⵠⲆⵠᐃⲆ]);
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(ⵠΔᐃⵠ, ᐃ * ⲆᐃᐃΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 15, ᐃ * 117);
		Ⲇ.bezierCurveTo(ᐃ * 34, ᐃ * 109, ᐃ * 61, ᐃ * 106, ᐃ * 94, 109 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 126, ᐃ * 110, ᐃ * 142, 113 * ᐃ, ᐃ * 154, ᐃ * 119);
		Ⲇ.bezierCurveTo(154 * ᐃ, ᐃ * 123, 154 * ᐃ, ᐃ * 123, 154 * ᐃ, ᐃ * 127);
		Ⲇ.bezierCurveTo(127 * ᐃ, 118 * ᐃ, 15 * ᐃ, ᐃ * 122, 18 * ᐃ, ᐃ * 129);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(0, ᐃ * -3);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃⵠⵠⵠⵠⵠΔ * ᐃ, ᐃ * 127);
		Ⲇ.bezierCurveTo(ᐃ * 13, 117 * ᐃ, ᐃ * 12, 109 * ᐃ, ᐃ * ᐃⲆΔᐃΔⵠⵠ, 103 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 16, ᐃ * 95, ᐃ * 21, ᐃ * 92, 60 * ᐃ, ᐃ * 93);
		Ⲇ.bezierCurveTo(91 * ᐃ, ᐃ * 93, 118 * ᐃ, ᐃ * 93, 143 * ᐃ, ᐃ * 96);
		Ⲇ.bezierCurveTo(ᐃ * 151, ᐃ * 96, ᐃ * 155, ᐃ * 99, 156 * ᐃ, 112 * ᐃ);
		Ⲇ.bezierCurveTo(157 * ᐃ, ᐃ * 124, 157 * ᐃ, 127 * ᐃ, 156 * ᐃ, ᐃ * 128);
		Ⲇ.bezierCurveTo(ᐃ * 138, 112 * ᐃ, 100 * ᐃ, ᐃ * 118, 84 * ᐃ, ᐃ * 118);
		Ⲇ.bezierCurveTo(28 * ᐃ, ᐃ * 118, 20 * ᐃ, ᐃ * 120, ᐃ * 16, 127 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃᐃΔ], Δⵠ[5], ᐃ * 5);
		Ⲇ.save();
		Ⲇ.translate(27.5 * ᐃ, ᐃ * 138.5);
		ᐃΔⵠ(Ⲇ, ᐃ * -13.5, -14.5 * ᐃ, ᐃ * 27, ᐃ * 29, ⲆΔᐃΔⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[Δᐃⵠⵠ], Δⵠ[2], ᐃ * 5);
		Ⲇ.save();
		Ⲇ.translate(143.5 * ᐃ, 137 * ᐃ);
		ᐃΔⵠ(Ⲇ, -13.5 * ᐃ, ᐃ * -14, 27 * ᐃ, ᐃ * 28, 4 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * 5);
		return ΔⲆ
	}
	const ⵠΔⵠᐃⵠⵠⵠⵠΔ = ⲆⵠⵠΔⲆ;

	function ᐃᐃⲆⲆΔᐃⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 43;
		ΔⲆ.height = ᐃ * 209;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ⵠΔᐃ;
		Ⲇ.translate(0, ᐃ * 10);
		Ⲇ.translate(ᐃ * 5, ᐃ * 5);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 21, ᐃ * 102.5);
		ᐃΔⵠ(Ⲇ, ᐃ * -ⲆΔᐃΔⵠ, -76.5 * ᐃ, ᐃ * 8, 163 * ᐃ, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.translate(0, ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(20 * ᐃ, 10 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 25, 25.5 * ᐃ, 25 * ᐃ, ᐃ * 25.5, ᐃ * 30, ᐃ * 41);
		Ⲇ.bezierCurveTo(ᐃ * 25.5, 38.5 * ᐃ, ᐃ * 25.5, ᐃ * 38.5, 21 * ᐃ, ᐃ * 36);
		Ⲇ.bezierCurveTo(ᐃ * 16, ᐃ * 38.5, ᐃΔⲆΔΔⲆᐃ * ᐃ, 38.5 * ᐃ, ΔⵠⵠᐃΔⵠⲆ * ᐃ, ᐃ * 41);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(21 * ᐃ, ᐃ * ᐃⲆΔ);
		Ⲇ.bezierCurveTo(ᐃ * 28, ᐃ * 18, ᐃ * 28, ΔΔⵠᐃᐃ * ᐃ, 35 * ᐃ, ᐃ * 35);
		Ⲇ.bezierCurveTo(ᐃ * 28.5, 32 * ᐃ, 28.5 * ᐃ, 32 * ᐃ, 22 * ᐃ, ᐃ * 29);
		Ⲇ.bezierCurveTo(14.5 * ᐃ, ᐃ * 32.5, ᐃ * 14.5, 32.5 * ᐃ, ᐃ * 7, ᐃ * 36);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * ⲆᐃᐃΔⵠΔⵠ, ᐃ * 146);
		Ⲇ.bezierCurveTo(21 * ᐃ, ᐃ * 146, ᐃ * 21, 146 * ᐃ, ᐃ * 28, ᐃ * 146);
		Ⲇ.bezierCurveTo(ᐃ * 27.5, 147.5 * ᐃ, 27.5 * ᐃ, 147.5 * ᐃ, ᐃ * 27, 149 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 27, ᐃ * 160, 27 * ᐃ, 160 * ᐃ, ᐃ * 27, ᐃ * 171);
		Ⲇ.bezierCurveTo(27.5 * ᐃ, 171.5 * ᐃ, ᐃ * 27.5, ᐃ * 171.5, 28 * ᐃ, 172 * ᐃ);
		Ⲇ.bezierCurveTo(21 * ᐃ, ᐃ * 172, ᐃ * 21, 172 * ᐃ, 14 * ᐃ, ᐃ * 172);
		Ⲇ.bezierCurveTo(ᐃ * ΔⲆⲆᐃⲆⲆⲆ, ᐃ * 171.5, 14 * ᐃ, ᐃ * 171.5, ᐃ * 14, 171 * ᐃ);
		Ⲇ.bezierCurveTo(14.5 * ᐃ, 171.5 * ᐃ, ᐃ * 14.5, ᐃ * 171.5, 15 * ᐃ, ᐃ * 172);
		Ⲇ.bezierCurveTo(ᐃ * ΔⲆΔᐃΔᐃⵠ, ᐃ * 160.5, ᐃ * ⲆΔᐃΔⲆ, ᐃ * 160.5, ᐃ * ΔᐃⵠΔᐃⵠᐃ, 149 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 21, 6 * ᐃ);
		Ⲇ.bezierCurveTo(26.5 * ᐃ, 18.5 * ᐃ, ᐃ * 26.5, ᐃ * 18.5, 32 * ᐃ, ᐃ * 31);
		Ⲇ.bezierCurveTo(ᐃ * 27, ᐃ * 29, ᐃ * 27, 29 * ᐃ, ᐃ * 22, 27 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.translate(ΔⲆⲆ, ᐃ * -ⵠᐃᐃⵠΔ);
		Ⲇ.globalAlpha = ΔᐃⲆⲆ;
		Ⲇ.translate(ⵠᐃⲆ, ⲆⲆⵠⲆⵠ * ᐃ);
		Ⲇ.translate(-ᐃΔΔⲆⵠ * ᐃ, -ⲆⵠΔΔ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 21, ᐃ * 102.5);
		ᐃΔⵠ(Ⲇ, -ⵠᐃΔⲆ * ᐃ, ᐃ * -76.5, ᐃ * 8, 163 * ᐃ, ᐃ * ᐃᐃᐃΔΔ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔᐃ], Δⵠ[ΔᐃΔᐃ], ᐃ * ⵠΔⲆΔΔ);
		Ⲇ.translate(ⵠⵠⵠΔ, ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 20, ᐃ * ⵠⲆⲆⵠΔ);
		Ⲇ.bezierCurveTo(25 * ᐃ, 25.5 * ᐃ, ᐃ * 25, ᐃ * 25.5, ᐃ * 30, ᐃ * 41);
		Ⲇ.bezierCurveTo(25.5 * ᐃ, ᐃ * 38.5, ᐃ * 25.5, ᐃ * 38.5, 21 * ᐃ, ᐃ * 36);
		Ⲇ.bezierCurveTo(ᐃ * ΔᐃⲆⲆΔ, ᐃ * 38.5, 16 * ᐃ, ᐃ * 38.5, ΔⵠⵠᐃΔⵠⲆ * ᐃ, ᐃ * 41);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔⵠⵠⲆ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 21, ᐃ * 1);
		Ⲇ.bezierCurveTo(ᐃ * 28, 18 * ᐃ, 28 * ᐃ, 18 * ᐃ, 35 * ᐃ, ᐃ * 35);
		Ⲇ.bezierCurveTo(ᐃ * 28.5, 32 * ᐃ, ᐃ * 28.5, 32 * ᐃ, 22 * ᐃ, ᐃ * 29);
		Ⲇ.bezierCurveTo(14.5 * ᐃ, ᐃ * 32.5, 14.5 * ᐃ, ᐃ * 32.5, ᐃΔⵠᐃⲆᐃΔ * ᐃ, ᐃ * 36);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃⵠ], Δⵠ[6], ᐃ * Ⲇⵠⵠⵠ);
		Ⲇ.translate(ΔΔᐃᐃ, ΔΔᐃᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 14, 146 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 21, ᐃ * 146, 21 * ᐃ, 146 * ᐃ, ᐃ * 28, ᐃ * 146);
		Ⲇ.bezierCurveTo(27.5 * ᐃ, 147.5 * ᐃ, ᐃ * 27.5, 147.5 * ᐃ, 27 * ᐃ, ᐃ * 149);
		Ⲇ.bezierCurveTo(ᐃ * 27, 160 * ᐃ, ᐃ * 27, ᐃ * 160, ᐃ * 27, ᐃ * 171);
		Ⲇ.bezierCurveTo(27.5 * ᐃ, ᐃ * 171.5, ᐃ * 27.5, 171.5 * ᐃ, 28 * ᐃ, ᐃ * 172);
		Ⲇ.bezierCurveTo(ᐃ * 21, 172 * ᐃ, ᐃ * 21, ᐃ * 172, 14 * ᐃ, 172 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 14, ᐃ * 171.5, ⲆΔᐃⵠⵠΔᐃ * ᐃ, ᐃ * 171.5, ᐃ * ΔⲆⲆⲆᐃΔΔ, 171 * ᐃ);
		Ⲇ.bezierCurveTo(14.5 * ᐃ, ᐃ * 171.5, ᐃ * 14.5, 171.5 * ᐃ, ᐃ * ᐃᐃΔᐃⲆ, ᐃ * 172);
		Ⲇ.bezierCurveTo(15 * ᐃ, ᐃ * 160.5, ᐃ * ⵠᐃᐃⲆᐃΔⲆ, 160.5 * ᐃ, 15 * ᐃ, 149 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⲆⵠΔⵠ], ᐃ * ⵠⲆⲆⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(21 * ᐃ, ᐃⵠⲆᐃΔ * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 26.5, ᐃ * 18.5, ᐃ * 26.5, ᐃ * 18.5, 32 * ᐃ, 31 * ᐃ);
		Ⲇ.bezierCurveTo(27 * ᐃ, ᐃ * 29, 27 * ᐃ, 29 * ᐃ, ᐃ * 22, 27 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔⲆᐃᐃ]);
		return ΔⲆ
	}

	function ⵠΔⲆⲆΔᐃⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 170;
		ΔⲆ.height = ᐃ * 170;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(0, ᐃ * 5);
		Ⲇ.save();
		Ⲇ.translate(85 * ᐃ, 88 * ᐃ);
		Ⲇ.rotate(1.4);
		ᐃᐃⲆΔ(Ⲇ, 7, 60 * ᐃ, ᐃ * ⵠⲆⵠᐃⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(85 * ᐃ, ᐃ * 80);
		for (var Ⲇᐃ = ᐃⵠⵠⲆ; ⲆⲆⵠⲆⵠ > Ⲇᐃ; Ⲇᐃ++) {
			Ⲇ.rotate(Math.PI / ᐃᐃᐃΔⵠ);
			Ⲇ.save();
			Ⲇ.translate(65 * ᐃ, ⵠⲆᐃ);
			ᐃᐃⲆΔ(Ⲇ, 3, ᐃ * 21, ⲆΔᐃΔⵠ * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ⲆᐃΔ], Δⵠ[ᐃⲆᐃⵠ], ᐃ * 4);
			Ⲇ.restore()
		}
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 0, 0 * ᐃ);
		Ⲇ.rotate(1.4);
		ᐃᐃⲆΔ(Ⲇ, ᐃΔΔⲆⲆⲆᐃ, 60 * ᐃ, ᐃ * ⲆΔⵠΔⵠ);
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * ⵠᐃΔΔ);
		Ⲇ.rotate(.64);
		ᐃᐃⲆΔ(Ⲇ, ΔΔⵠΔⲆ, ᐃ * 40, 10 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔᐃ], Δⵠ[6], 4 * ᐃ);
		Ⲇ.rotate(.12);
		ᐃᐃⲆΔ(Ⲇ, ⲆΔⲆⵠⵠ, ᐃ * 23, ᐃ * 5);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[7]);
		return ΔⲆ
	}

	function ⵠΔᐃⲆⵠⲆᐃ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 137;
		ΔⲆ.height = ᐃ * 129;
		Ⲇ.globalAlpha = .5;
		ᐃΔΔ(Ⲇ, 69 * ᐃ, ᐃ * 64, ᐃ * 48.16637831516918);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔ]);
		Ⲇ.globalAlpha = .7;
		ᐃΔΔ(Ⲇ, 69 * ᐃ, 64 * ᐃ, 38.23105625617661 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.globalAlpha = .7;
		ᐃΔΔ(Ⲇ, 69 * ᐃ, ᐃ * 64, 32.01562118716424 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠᐃ], Δⵠ[ΔⲆΔⲆ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(72 * ᐃ, 41 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 52, ᐃ * 41, 48 * ᐃ, 50 * ᐃ, ᐃ * 45, 58 * ᐃ);
		Ⲇ.bezierCurveTo(43 * ᐃ, 67 * ᐃ, ᐃ * 45, ᐃ * 68, 46 * ᐃ, 72 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 52, 53 * ᐃ, 60 * ᐃ, 48 * ᐃ, ᐃ * 72, 42 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 93, ᐃ * 62);
		Ⲇ.bezierCurveTo(ᐃ * 95, 72 * ᐃ, ᐃ * 90, 81 * ᐃ, 81 * ᐃ, ᐃ * 87);
		Ⲇ.bezierCurveTo(ᐃ * 74, 91 * ᐃ, 69 * ᐃ, ᐃ * 89, ᐃ * 64, 88 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 77, ᐃ * 83, 84 * ᐃ, ᐃ * 82, ᐃ * 92, ᐃ * 62);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃΔ]);
		return ΔⲆ
	}

	function ⵠⵠᐃⲆᐃⲆⲆ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 271 * ᐃ;
		ΔⲆ.height = ᐃ * 366;
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(0, ΔⲆᐃΔⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 133, ᐃ * 99);
		Ⲇ.bezierCurveTo(ᐃ * 186, 123 * ᐃ, ᐃ * 199, ᐃ * 152, 209 * ᐃ, ᐃ * 169);
		Ⲇ.bezierCurveTo(ᐃ * 228, 205 * ᐃ, 224 * ᐃ, ᐃ * 245, ᐃ * 190, ᐃ * 276);
		Ⲇ.bezierCurveTo(ᐃ * 161, ᐃ * 296, 99 * ᐃ, 292 * ᐃ, 79 * ᐃ, ᐃ * 274);
		Ⲇ.bezierCurveTo(49 * ᐃ, ᐃ * 253, ᐃ * 47, 214 * ᐃ, 50 * ᐃ, 197 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 61, 143 * ᐃ, ᐃ * 102, 113 * ᐃ, ᐃ * 131, ᐃ * 99);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(73 * ᐃ, 270 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 79, ᐃ * 280, 77 * ᐃ, 280 * ᐃ, 78 * ᐃ, 287 * ᐃ);
		Ⲇ.bezierCurveTo(78 * ᐃ, ᐃ * 290, ᐃ * 83, 291 * ᐃ, ᐃ * 82, ᐃ * 299);
		Ⲇ.bezierCurveTo(ᐃ * 81, 301 * ᐃ, 87 * ᐃ, ᐃ * 301, 92 * ᐃ, 314 * ᐃ);
		Ⲇ.bezierCurveTo(94 * ᐃ, ᐃ * 319, ᐃⵠⵠᐃΔⵠᐃ * ᐃ, ᐃ * 321, 107 * ᐃ, 320 * ᐃ);
		Ⲇ.bezierCurveTo(111 * ᐃ, ᐃ * 323, 114 * ᐃ, 324 * ᐃ, ᐃ * 119, 320 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 137, ᐃ * 321, 146 * ᐃ, ᐃ * 323, ᐃ * 139, 320 * ᐃ);
		Ⲇ.bezierCurveTo(141 * ᐃ, 324 * ᐃ, 150 * ᐃ, ᐃ * 324, ᐃ * 153, 320 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 168, 319 * ᐃ, 171 * ᐃ, ᐃ * 316, ᐃ * 173, 307 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 180, ᐃ * 305, ᐃ * 180, 301 * ᐃ, ᐃ * 178, 296 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 183, ᐃ * 296, 185 * ᐃ, ᐃ * 289, 188 * ᐃ, 279 * ᐃ);
		Ⲇ.bezierCurveTo(171 * ᐃ, ᐃ * 286, ᐃ * 149, ᐃ * 290, 132 * ᐃ, 289 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 101, 290 * ᐃ, ᐃ * 86, 280 * ᐃ, ᐃ * 74, 271 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 76, ᐃ * 252);
		Ⲇ.bezierCurveTo(85 * ᐃ, ᐃ * 294, ᐃ * 96, 314 * ᐃ, 103 * ᐃ, ᐃ * 314);
		Ⲇ.bezierCurveTo(106 * ᐃ, 316 * ᐃ, 151 * ᐃ, ᐃ * 314, 156 * ᐃ, 314 * ᐃ);
		Ⲇ.bezierCurveTo(169 * ᐃ, 317 * ᐃ, 182 * ᐃ, 285 * ᐃ, ᐃ * 191, ᐃ * 256);
		Ⲇ.bezierCurveTo(ᐃ * 134.5, 254 * ᐃ, 134.5 * ᐃ, ᐃ * 254, 78 * ᐃ, 252 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(84 * ᐃ, ᐃ * 257);
		Ⲇ.bezierCurveTo(ᐃ * 122, 273 * ᐃ, 146 * ᐃ, 268 * ᐃ, 179 * ᐃ, ᐃ * 261);
		Ⲇ.bezierCurveTo(190 * ᐃ, ᐃ * 258, ᐃ * 187, ᐃ * 266, 178 * ᐃ, ᐃ * 272);
		Ⲇ.bezierCurveTo(ᐃ * 160, 284 * ᐃ, 123 * ᐃ, ᐃ * 282, 100 * ᐃ, ᐃ * 277);
		Ⲇ.bezierCurveTo(73 * ᐃ, ᐃ * 260, 79 * ᐃ, 257 * ᐃ, 84 * ᐃ, 257 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(125 * ᐃ, ᐃ * 65);
		Ⲇ.bezierCurveTo(ᐃ * 133, 45 * ᐃ, ᐃ * 136, ᐃ * 42, ᐃ * 141, 55 * ᐃ);
		Ⲇ.bezierCurveTo(151 * ᐃ, 96 * ᐃ, 164 * ᐃ, 117 * ᐃ, 175 * ᐃ, 134 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 203, ᐃ * 181, 207 * ᐃ, 182 * ᐃ, ᐃ * 208, ᐃ * 215);
		Ⲇ.bezierCurveTo(ᐃ * 206, ᐃ * 240, ᐃ * 205, 246 * ᐃ, 184 * ᐃ, ᐃ * 258);
		Ⲇ.bezierCurveTo(ᐃ * 161, ᐃ * 267, ᐃ * 131, 272 * ᐃ, ᐃ * 86, 258 * ᐃ);
		Ⲇ.bezierCurveTo(67 * ᐃ, 252 * ᐃ, ᐃ * 68, 239 * ᐃ, 64 * ᐃ, ᐃ * 216);
		Ⲇ.bezierCurveTo(ᐃ * 62, ᐃ * 194, 72 * ᐃ, 169 * ᐃ, ᐃ * 92, ᐃ * 142);
		Ⲇ.bezierCurveTo(106 * ᐃ, ᐃ * 121, 114 * ᐃ, 101 * ᐃ, 125 * ᐃ, 65 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 115, 37 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 116, 28 * ᐃ, ᐃ * 119, ᐃ * 27, ᐃ * 126, 37 * ᐃ);
		Ⲇ.bezierCurveTo(134 * ᐃ, 48 * ᐃ, 134 * ᐃ, ᐃ * 49, 132 * ᐃ, 59 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 131, ᐃ * 67, ᐃ * 127, ᐃ * 65, ᐃ * 120, 56 * ᐃ);
		Ⲇ.bezierCurveTo(114 * ᐃ, ᐃ * 49, 113 * ᐃ, 43 * ᐃ, 115 * ᐃ, ᐃ * 38);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 146, 34 * ᐃ);
		Ⲇ.bezierCurveTo(152 * ᐃ, ᐃ * 28, ᐃ * 155, 27 * ᐃ, 157 * ᐃ, 39 * ᐃ);
		Ⲇ.bezierCurveTo(157 * ᐃ, 45 * ᐃ, 157 * ᐃ, ᐃ * 49, 150 * ᐃ, 56 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 141, 66 * ᐃ, 138 * ᐃ, ᐃ * 66, ᐃ * 138, ᐃ * 57);
		Ⲇ.bezierCurveTo(137 * ᐃ, ᐃ * 50, ᐃ * 137, ᐃ * 47, ᐃ * 141, 42 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(143 * ᐃ, 69 * ᐃ);
		Ⲇ.bezierCurveTo(148 * ᐃ, ᐃ * 56, ᐃ * 156, ᐃ * 50, 158 * ᐃ, 58 * ᐃ);
		Ⲇ.bezierCurveTo(159 * ᐃ, ᐃ * 64, ᐃ * 160, ᐃ * 67, 153 * ᐃ, 77 * ᐃ);
		Ⲇ.bezierCurveTo(148 * ᐃ, 83 * ᐃ, 145 * ᐃ, 84 * ᐃ, ᐃ * 143, 77 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(149 * ᐃ, 92 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 149, 89 * ᐃ, 151 * ᐃ, ᐃ * 84, ᐃ * 156, 79 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 161, ᐃ * 73, 163 * ᐃ, 78 * ᐃ, 162 * ᐃ, ᐃ * 86);
		Ⲇ.bezierCurveTo(161 * ᐃ, ᐃ * 91, ᐃ * 155, ᐃ * 99, 152 * ᐃ, ᐃ * 98);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 111, 61 * ᐃ);
		Ⲇ.bezierCurveTo(114 * ᐃ, ᐃ * 51, 117 * ᐃ, ᐃ * 51, 124 * ᐃ, ᐃ * 64);
		Ⲇ.bezierCurveTo(ᐃ * 128, ᐃ * 68, 128 * ᐃ, 76 * ᐃ, 126 * ᐃ, ᐃ * 79);
		Ⲇ.bezierCurveTo(ᐃ * 123, ᐃ * 84, 122 * ᐃ, ᐃ * 82, ᐃ * 115, 74 * ᐃ);
		Ⲇ.bezierCurveTo(112 * ᐃ, 67 * ᐃ, 115 * ᐃ, ᐃ * 74, 115 * ᐃ, 74 * ᐃ);
		Ⲇ.bezierCurveTo(111 * ᐃ, ᐃ * 68, ᐃ * 111, 66 * ᐃ, 111 * ᐃ, 62 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(107 * ᐃ, ᐃ * 81);
		Ⲇ.bezierCurveTo(ᐃ * 108, 74 * ᐃ, ᐃ * 112, ᐃ * 73, ᐃ * 118, ᐃ * 84);
		Ⲇ.bezierCurveTo(ᐃ * 122, 88 * ᐃ, 122 * ᐃ, 93 * ᐃ, 121 * ᐃ, ᐃ * 98);
		Ⲇ.bezierCurveTo(ᐃ * 114, 98 * ᐃ, ᐃ * 113, 98 * ᐃ, 109 * ᐃ, ᐃ * 90);
		Ⲇ.bezierCurveTo(107 * ᐃ, 87 * ᐃ, ᐃ * 106, 85 * ᐃ, ᐃ * 107, ᐃ * 82);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = ΔⲆᐃᐃ;
		Ⲇ.translate(ⵠΔᐃⵠ, -10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(133 * ᐃ, 99 * ᐃ);
		Ⲇ.bezierCurveTo(186 * ᐃ, ᐃ * 123, ᐃ * 199, ᐃ * 152, 209 * ᐃ, 169 * ᐃ);
		Ⲇ.bezierCurveTo(228 * ᐃ, ᐃ * 205, ᐃ * 224, 245 * ᐃ, 190 * ᐃ, 276 * ᐃ);
		Ⲇ.bezierCurveTo(161 * ᐃ, ᐃ * 296, ᐃ * 99, ᐃ * 292, 79 * ᐃ, ᐃ * 274);
		Ⲇ.bezierCurveTo(49 * ᐃ, ᐃ * 253, ᐃ * 47, ᐃ * 214, ᐃ * 50, ᐃ * 197);
		Ⲇ.bezierCurveTo(ᐃ * 61, ᐃ * 143, 102 * ᐃ, 113 * ᐃ, ᐃ * 131, ᐃ * 99);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[Δⵠⵠᐃ], ᐃ * ⲆⲆᐃΔᐃΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(73 * ᐃ, ᐃ * 270);
		Ⲇ.bezierCurveTo(ᐃ * 79, ᐃ * 280, 77 * ᐃ, ᐃ * 280, ᐃ * 78, ᐃ * 287);
		Ⲇ.bezierCurveTo(78 * ᐃ, 290 * ᐃ, 83 * ᐃ, 291 * ᐃ, ᐃ * 82, 299 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 81, 301 * ᐃ, ᐃ * 87, ᐃ * 301, 92 * ᐃ, 314 * ᐃ);
		Ⲇ.bezierCurveTo(94 * ᐃ, 319 * ᐃ, ᐃ * 100, 321 * ᐃ, ᐃ * 107, ᐃ * 320);
		Ⲇ.bezierCurveTo(ᐃ * 111, ᐃ * 323, 114 * ᐃ, ᐃ * 324, 119 * ᐃ, ᐃ * 320);
		Ⲇ.bezierCurveTo(137 * ᐃ, ᐃ * 321, 146 * ᐃ, 323 * ᐃ, 139 * ᐃ, 320 * ᐃ);
		Ⲇ.bezierCurveTo(141 * ᐃ, 324 * ᐃ, ᐃ * 150, ᐃ * 324, 153 * ᐃ, ᐃ * 320);
		Ⲇ.bezierCurveTo(ᐃ * 168, 319 * ᐃ, 171 * ᐃ, 316 * ᐃ, ᐃ * 173, ᐃ * 307);
		Ⲇ.bezierCurveTo(180 * ᐃ, 305 * ᐃ, 180 * ᐃ, ᐃ * 301, 178 * ᐃ, ᐃ * 296);
		Ⲇ.bezierCurveTo(183 * ᐃ, ᐃ * 296, ᐃ * 185, 289 * ᐃ, 188 * ᐃ, ᐃ * 279);
		Ⲇ.bezierCurveTo(171 * ᐃ, 286 * ᐃ, 149 * ᐃ, ᐃ * 290, 132 * ᐃ, 289 * ᐃ);
		Ⲇ.bezierCurveTo(101 * ᐃ, ᐃ * 290, ᐃ * 86, ᐃ * 280, ᐃ * 74, 271 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⵠⵠⵠ], Δⵠ[3], ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(76 * ᐃ, 252 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 85, 294 * ᐃ, ᐃ * 96, ᐃ * 314, ᐃ * 103, 314 * ᐃ);
		Ⲇ.bezierCurveTo(106 * ᐃ, 316 * ᐃ, 151 * ᐃ, ᐃ * 314, 156 * ᐃ, ᐃ * 314);
		Ⲇ.bezierCurveTo(169 * ᐃ, 317 * ᐃ, 182 * ᐃ, 285 * ᐃ, 191 * ᐃ, ᐃ * 256);
		Ⲇ.bezierCurveTo(ᐃ * 134.5, 254 * ᐃ, 134.5 * ᐃ, ᐃ * 254, 78 * ᐃ, ᐃ * 252);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⲆ], Δⵠ[ΔΔᐃΔ], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(84 * ᐃ, 257 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 122, 273 * ᐃ, ᐃ * 146, ᐃ * 268, 179 * ᐃ, ᐃ * 261);
		Ⲇ.bezierCurveTo(190 * ᐃ, ᐃ * 258, ᐃ * 187, ᐃ * 266, ᐃ * 178, ᐃ * 272);
		Ⲇ.bezierCurveTo(160 * ᐃ, 284 * ᐃ, ᐃ * 123, 282 * ᐃ, ᐃ * 100, 277 * ᐃ);
		Ⲇ.bezierCurveTo(73 * ᐃ, 260 * ᐃ, 79 * ᐃ, ᐃ * 257, 84 * ᐃ, 257 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃⵠΔⲆ], ᐃ * ΔᐃᐃⲆᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(125 * ᐃ, 65 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 133, ᐃ * 45, ᐃ * 136, 42 * ᐃ, ᐃ * 141, ᐃ * 55);
		Ⲇ.bezierCurveTo(ᐃ * 151, ᐃ * 96, ᐃ * 164, 117 * ᐃ, ᐃ * 175, 134 * ᐃ);
		Ⲇ.bezierCurveTo(203 * ᐃ, ᐃ * 181, 207 * ᐃ, 182 * ᐃ, 208 * ᐃ, 215 * ᐃ);
		Ⲇ.bezierCurveTo(206 * ᐃ, 240 * ᐃ, ᐃ * 205, ᐃ * 246, 184 * ᐃ, 258 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 161, 267 * ᐃ, 131 * ᐃ, ᐃ * 272, ᐃ * 86, 258 * ᐃ);
		Ⲇ.bezierCurveTo(67 * ᐃ, ᐃ * 252, 68 * ᐃ, 239 * ᐃ, 64 * ᐃ, ᐃ * 216);
		Ⲇ.bezierCurveTo(62 * ᐃ, ᐃ * 194, ᐃ * 72, 169 * ᐃ, 92 * ᐃ, 142 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 106, ᐃ * 121, ᐃ * 114, ᐃ * 101, 125 * ᐃ, ᐃ * 65);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[3], ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(115 * ᐃ, 37 * ᐃ);
		Ⲇ.bezierCurveTo(116 * ᐃ, 28 * ᐃ, ᐃ * 119, ᐃ * 27, 126 * ᐃ, ᐃ * 37);
		Ⲇ.bezierCurveTo(134 * ᐃ, 48 * ᐃ, ᐃ * 134, ᐃ * 49, ᐃ * 132, 59 * ᐃ);
		Ⲇ.bezierCurveTo(131 * ᐃ, 67 * ᐃ, 127 * ᐃ, 65 * ᐃ, ᐃ * 120, 56 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 114, 49 * ᐃ, ᐃ * 113, 43 * ᐃ, ᐃ * 115, ᐃ * 38);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[Δⵠⵠᐃ], ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 146, 34 * ᐃ);
		Ⲇ.bezierCurveTo(152 * ᐃ, 28 * ᐃ, 155 * ᐃ, ᐃ * 27, 157 * ᐃ, 39 * ᐃ);
		Ⲇ.bezierCurveTo(157 * ᐃ, ᐃ * 45, 157 * ᐃ, ᐃ * 49, ᐃ * 150, 56 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 141, ᐃ * 66, ᐃ * 138, ᐃ * 66, ᐃ * 138, 57 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 137, ᐃ * 50, ᐃ * 137, 47 * ᐃ, ᐃ * 141, 42 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆᐃ], Δⵠ[ᐃⲆᐃΔ], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 143, ᐃ * 69);
		Ⲇ.bezierCurveTo(ᐃ * 148, ᐃ * 56, 156 * ᐃ, ᐃ * 50, ᐃ * 158, ᐃ * 58);
		Ⲇ.bezierCurveTo(ᐃ * 159, ᐃ * 64, 160 * ᐃ, ᐃ * 67, 153 * ᐃ, 77 * ᐃ);
		Ⲇ.bezierCurveTo(148 * ᐃ, 83 * ᐃ, 145 * ᐃ, 84 * ᐃ, ᐃ * 143, 77 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔΔⲆᐃ], Δⵠ[ΔΔᐃΔ], Ⲇᐃⵠᐃᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(149 * ᐃ, 92 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 149, 89 * ᐃ, ᐃ * 151, 84 * ᐃ, 156 * ᐃ, 79 * ᐃ);
		Ⲇ.bezierCurveTo(161 * ᐃ, ᐃ * 73, ᐃ * 163, 78 * ᐃ, 162 * ᐃ, ᐃ * 86);
		Ⲇ.bezierCurveTo(161 * ᐃ, 91 * ᐃ, ᐃ * 155, ᐃ * 99, 152 * ᐃ, 98 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠᐃ], Δⵠ[ΔⲆΔⲆ], ᐃ * ΔΔⲆᐃᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 111, ᐃ * 61);
		Ⲇ.bezierCurveTo(114 * ᐃ, 51 * ᐃ, ᐃ * 117, 51 * ᐃ, ᐃ * 124, ᐃ * 64);
		Ⲇ.bezierCurveTo(128 * ᐃ, 68 * ᐃ, 128 * ᐃ, ᐃ * 76, ᐃ * 126, ᐃ * 79);
		Ⲇ.bezierCurveTo(ᐃ * 123, 84 * ᐃ, ᐃ * 122, ᐃ * 82, 115 * ᐃ, 74 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 112, 67 * ᐃ, ᐃ * 115, 74 * ᐃ, ᐃ * 115, ᐃ * 74);
		Ⲇ.bezierCurveTo(ᐃ * 111, 68 * ᐃ, 111 * ᐃ, ᐃ * 66, 111 * ᐃ, ᐃ * 62);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⵠΔΔⲆᐃ], ΔΔᐃⲆⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 107, 81 * ᐃ);
		Ⲇ.bezierCurveTo(108 * ᐃ, 74 * ᐃ, ᐃ * 112, ᐃ * 73, ᐃ * 118, ᐃ * 84);
		Ⲇ.bezierCurveTo(122 * ᐃ, ᐃ * 88, 122 * ᐃ, 93 * ᐃ, 121 * ᐃ, 98 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 114, 98 * ᐃ, 113 * ᐃ, 98 * ᐃ, ᐃ * 109, 90 * ᐃ);
		Ⲇ.bezierCurveTo(107 * ᐃ, 87 * ᐃ, 106 * ᐃ, 85 * ᐃ, 107 * ᐃ, ᐃ * 82);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔΔᐃΔ], ᐃ * ΔⵠΔⵠΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 133, 99 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 186, 123 * ᐃ, 199 * ᐃ, ᐃ * 152, 209 * ᐃ, 169 * ᐃ);
		Ⲇ.bezierCurveTo(228 * ᐃ, 205 * ᐃ, ᐃ * 224, ᐃ * 245, ᐃ * 190, ᐃ * 276);
		Ⲇ.bezierCurveTo(ᐃ * 161, 296 * ᐃ, ᐃ * 99, ᐃ * 292, 79 * ᐃ, ᐃ * 274);
		Ⲇ.bezierCurveTo(ᐃ * 49, ᐃ * 253, 47 * ᐃ, 214 * ᐃ, 50 * ᐃ, ᐃ * 197);
		Ⲇ.bezierCurveTo(ᐃ * 61, ᐃ * 143, 102 * ᐃ, 113 * ᐃ, 131 * ᐃ, 99 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 73, 270 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 79, 280 * ᐃ, ᐃ * 77, ᐃ * 280, 78 * ᐃ, ᐃ * 287);
		Ⲇ.bezierCurveTo(ᐃ * 78, 290 * ᐃ, ᐃ * 83, ᐃ * 291, ᐃ * 82, 299 * ᐃ);
		Ⲇ.bezierCurveTo(81 * ᐃ, 301 * ᐃ, 87 * ᐃ, ᐃ * 301, ᐃ * 92, ᐃ * 314);
		Ⲇ.bezierCurveTo(ᐃ * 94, 319 * ᐃ, ⵠᐃⵠΔⵠⵠᐃ * ᐃ, ᐃ * 321, 107 * ᐃ, 320 * ᐃ);
		Ⲇ.bezierCurveTo(111 * ᐃ, ᐃ * 323, ᐃ * 114, ᐃ * 324, ᐃ * 119, ᐃ * 320);
		Ⲇ.bezierCurveTo(137 * ᐃ, ᐃ * 321, 146 * ᐃ, 323 * ᐃ, ᐃ * 139, ᐃ * 320);
		Ⲇ.bezierCurveTo(ᐃ * 141, ᐃ * 324, ᐃ * 150, 324 * ᐃ, ᐃ * 153, ᐃ * 320);
		Ⲇ.bezierCurveTo(ᐃ * 168, 319 * ᐃ, ᐃ * 171, ᐃ * 316, ᐃ * 173, 307 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 180, ᐃ * 305, ᐃ * 180, ᐃ * 301, ᐃ * 178, 296 * ᐃ);
		Ⲇ.bezierCurveTo(183 * ᐃ, ᐃ * 296, ᐃ * 185, ᐃ * 289, ᐃ * 188, ᐃ * 279);
		Ⲇ.bezierCurveTo(ᐃ * 171, ᐃ * 286, ᐃ * 149, 290 * ᐃ, ᐃ * 132, ᐃ * 289);
		Ⲇ.bezierCurveTo(ᐃ * 101, ᐃ * 290, ᐃ * 86, 280 * ᐃ, ᐃ * 74, ᐃ * 271);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(76 * ᐃ, 252 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 85, 294 * ᐃ, 96 * ᐃ, ᐃ * 314, ᐃ * 103, 314 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 106, ᐃ * 316, 151 * ᐃ, 314 * ᐃ, ᐃ * 156, 314 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 169, ᐃ * 317, 182 * ᐃ, ᐃ * 285, ᐃ * 191, ᐃ * 256);
		Ⲇ.bezierCurveTo(ᐃ * 134.5, ᐃ * 254, 134.5 * ᐃ, 254 * ᐃ, ᐃ * 78, ᐃ * 252);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 84, ᐃ * 257);
		Ⲇ.bezierCurveTo(ᐃ * 122, 273 * ᐃ, ᐃ * 146, 268 * ᐃ, ᐃ * 179, 261 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 190, ᐃ * 258, ᐃ * 187, ᐃ * 266, ᐃ * 178, ᐃ * 272);
		Ⲇ.bezierCurveTo(160 * ᐃ, ᐃ * 284, ᐃ * 123, 282 * ᐃ, ᐃ * 100, ᐃ * 277);
		Ⲇ.bezierCurveTo(ᐃ * 73, 260 * ᐃ, 79 * ᐃ, 257 * ᐃ, ᐃ * 84, 257 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1]);
		ᐃΔΔ(Ⲇ, ᐃ * 102, 269 * ᐃ, 11 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔΔ]);
		ᐃΔΔ(Ⲇ, 98 * ᐃ, ᐃ * 266, 5 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠᐃ]);
		ᐃΔΔ(Ⲇ, ᐃ * 168, ᐃ * 269, ᐃ * ᐃᐃⲆⵠⲆⲆᐃ);
		ΔΔ(Ⲇ, Δⵠ[3]);
		ᐃΔΔ(Ⲇ, ᐃ * 164, 266 * ᐃ, 5 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[6]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 125, 65 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 133, 45 * ᐃ, ᐃ * 136, 42 * ᐃ, 141 * ᐃ, 55 * ᐃ);
		Ⲇ.bezierCurveTo(151 * ᐃ, 96 * ᐃ, 164 * ᐃ, 117 * ᐃ, ᐃ * 175, 134 * ᐃ);
		Ⲇ.bezierCurveTo(203 * ᐃ, 181 * ᐃ, 207 * ᐃ, 182 * ᐃ, ᐃ * 208, ᐃ * 215);
		Ⲇ.bezierCurveTo(ᐃ * 206, 240 * ᐃ, ᐃ * 205, ᐃ * 246, ᐃ * 184, ᐃ * 258);
		Ⲇ.bezierCurveTo(ᐃ * 161, 267 * ᐃ, 131 * ᐃ, ᐃ * 272, ᐃ * 86, ᐃ * 258);
		Ⲇ.bezierCurveTo(67 * ᐃ, 252 * ᐃ, ᐃ * 68, ᐃ * 239, ᐃ * 64, 216 * ᐃ);
		Ⲇ.bezierCurveTo(62 * ᐃ, 194 * ᐃ, ᐃ * 72, ᐃ * 169, ᐃ * 92, 142 * ᐃ);
		Ⲇ.bezierCurveTo(106 * ᐃ, 121 * ᐃ, ᐃ * 114, ᐃ * 101, 125 * ᐃ, ᐃ * 65);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 115, 235 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 118, ᐃ * 258, ᐃ * 137, 268 * ᐃ, 148 * ᐃ, ᐃ * 246);
		Ⲇ.bezierCurveTo(156 * ᐃ, 228 * ᐃ, 152 * ᐃ, 169 * ᐃ, ᐃ * 150, 140 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 147, 87 * ᐃ, 143 * ᐃ, 69 * ᐃ, ᐃ * 142, ᐃ * 60);
		Ⲇ.bezierCurveTo(136 * ᐃ, ᐃ * 44, ᐃ * 132, ᐃ * 43, 127 * ᐃ, 62 * ᐃ);
		Ⲇ.bezierCurveTo(119 * ᐃ, ᐃ * 116, 119 * ᐃ, ᐃ * 140, ᐃ * 116, ᐃ * 166);
		Ⲇ.bezierCurveTo(ᐃ * 113, ᐃ * 202, ᐃ * 113, 223 * ᐃ, ᐃ * 115, ᐃ * 233);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃΔⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 132, 219 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 140, 229 * ᐃ, 142 * ᐃ, ᐃ * 231, ᐃ * 145, ᐃ * 237);
		Ⲇ.bezierCurveTo(145 * ᐃ, ᐃ * 245, ᐃ * 139, ᐃ * 249, 133 * ᐃ, ᐃ * 249);
		Ⲇ.bezierCurveTo(123 * ᐃ, ᐃ * 248, ᐃ * 123, 243 * ᐃ, 121 * ᐃ, 239 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 126, 227 * ᐃ, ᐃ * 129, ᐃ * 223, ᐃ * 132, ᐃ * 219);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔⵠΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(133 * ᐃ, ᐃ * 179);
		Ⲇ.bezierCurveTo(140 * ᐃ, 188.5 * ᐃ, 140 * ᐃ, 188.5 * ᐃ, ᐃ * 147, ᐃ * 198);
		Ⲇ.bezierCurveTo(148 * ᐃ, ᐃ * 209, 142 * ᐃ, 214 * ᐃ, ᐃ * 133, 214 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 121, ᐃ * 211, ᐃ * 121, ᐃ * 207, ᐃ * 120, 200 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 126.5, 189.5 * ᐃ, 126.5 * ᐃ, 189.5 * ᐃ, 133 * ᐃ, 179 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔΔᐃΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 133, ᐃ * 143);
		Ⲇ.bezierCurveTo(ᐃ * 139, 151.5 * ᐃ, ᐃ * 139, ᐃ * 151.5, 145 * ᐃ, ᐃ * 160);
		Ⲇ.bezierCurveTo(ᐃ * 143, 167 * ᐃ, ᐃ * 140, 170 * ᐃ, 134 * ᐃ, 170 * ᐃ);
		Ⲇ.bezierCurveTo(128 * ᐃ, ᐃ * 169, 124 * ᐃ, ᐃ * 167, 123 * ᐃ, 161 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 128, 152 * ᐃ, ᐃ * 128, 152 * ᐃ, 133 * ᐃ, ᐃ * 143);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(133 * ᐃ, ᐃ * 115);
		Ⲇ.bezierCurveTo(137.5 * ᐃ, 121.5 * ᐃ, ᐃ * 137.5, 121.5 * ᐃ, 142 * ᐃ, ᐃ * 128);
		Ⲇ.bezierCurveTo(ᐃ * 141, ᐃ * 133, 138 * ᐃ, ᐃ * 135, ᐃ * 133, 135 * ᐃ);
		Ⲇ.bezierCurveTo(129 * ᐃ, 135 * ᐃ, 125 * ᐃ, 132 * ᐃ, ᐃ * 125, ᐃ * 129);
		Ⲇ.bezierCurveTo(129 * ᐃ, 122 * ᐃ, ᐃ * 129, 122 * ᐃ, ᐃ * 133, 115 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(133 * ᐃ, 94 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 136.5, 98.5 * ᐃ, 136.5 * ᐃ, 98.5 * ᐃ, ᐃ * 140, ᐃ * 103);
		Ⲇ.bezierCurveTo(ᐃ * 139, ᐃ * 109, 137 * ᐃ, 109 * ᐃ, 133 * ᐃ, ᐃ * 110);
		Ⲇ.bezierCurveTo(127 * ᐃ, ᐃ * 108, ᐃ * 129, 107 * ᐃ, 127 * ᐃ, 105 * ᐃ);
		Ⲇ.bezierCurveTo(130 * ᐃ, ᐃ * 99.5, 130 * ᐃ, 99.5 * ᐃ, ᐃ * 133, 94 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔΔᐃΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(130 * ᐃ, ᐃ * 279);
		Ⲇ.bezierCurveTo(ᐃ * 136.5, 287.5 * ᐃ, ᐃ * 136.5, ᐃ * 287.5, ᐃ * 143, ᐃ * 296);
		Ⲇ.bezierCurveTo(ᐃ * 143, 302 * ᐃ, 139 * ᐃ, 309 * ᐃ, 131 * ᐃ, 308 * ᐃ);
		Ⲇ.bezierCurveTo(123 * ᐃ, 306 * ᐃ, ᐃ * 121, ᐃ * 303, 120 * ᐃ, 297 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 125.5, 288.5 * ᐃ, 125.5 * ᐃ, ᐃ * 288.5, 131 * ᐃ, ᐃ * 280);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(147 * ᐃ, 303 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 151, 311 * ᐃ, 151 * ᐃ, 319 * ᐃ, 147 * ᐃ, 321 * ᐃ);
		Ⲇ.bezierCurveTo(138 * ᐃ, ᐃ * 320, ᐃ * 145, 308 * ᐃ, ᐃ * 147, 303 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃⲆΔⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(115 * ᐃ, 303 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 115, ᐃ * 312, ᐃ * 118, 319 * ᐃ, ᐃ * 115, ᐃ * 319);
		Ⲇ.bezierCurveTo(ᐃ * 112, ᐃ * 324, ᐃ * 109, 318 * ᐃ, 109 * ᐃ, 314 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 109, 308 * ᐃ, ᐃ * 112, 303 * ᐃ, ᐃ * 115, 303 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃΔⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(89 * ᐃ, 280 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 83, 279 * ᐃ, 80 * ᐃ, 281 * ᐃ, ᐃ * 81, 286 * ᐃ);
		Ⲇ.bezierCurveTo(83 * ᐃ, 290 * ᐃ, ᐃ * 84, 290 * ᐃ, ᐃ * 87, 286 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δᐃᐃⵠⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 94, ᐃ * 290);
		Ⲇ.bezierCurveTo(93 * ᐃ, ᐃ * 294, ᐃ * 90, 303 * ᐃ, ᐃ * 86, ᐃ * 298);
		Ⲇ.bezierCurveTo(ᐃ * 84, 295 * ᐃ, 84 * ᐃ, ᐃ * 291, ᐃ * 89, ᐃ * 291);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⲆᐃⵠΔⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(163 * ᐃ, ᐃ * 295);
		Ⲇ.bezierCurveTo(175 * ᐃ, 294 * ᐃ, ᐃ * 176, ᐃ * 296, ᐃ * 175, ᐃ * 301);
		Ⲇ.bezierCurveTo(ᐃ * 174, 305 * ᐃ, 171 * ᐃ, 305 * ᐃ, 166 * ᐃ, 300 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠᐃᐃⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 172, 286 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 180, 285 * ᐃ, 181 * ᐃ, ᐃ * 285, ᐃ * 180, ᐃ * 291);
		Ⲇ.bezierCurveTo(176 * ᐃ, ᐃ * 295, ᐃ * 174, ᐃ * 294, ᐃ * 172, ᐃ * 286);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔᐃΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(115 * ᐃ, ᐃ * 37);
		Ⲇ.bezierCurveTo(ᐃ * 116, ᐃ * 28, ᐃ * 119, 27 * ᐃ, 126 * ᐃ, ᐃ * 37);
		Ⲇ.bezierCurveTo(134 * ᐃ, 48 * ᐃ, 134 * ᐃ, 49 * ᐃ, ᐃ * 132, 59 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 131, 67 * ᐃ, ᐃ * 127, ᐃ * 65, ᐃ * 120, ᐃ * 56);
		Ⲇ.bezierCurveTo(ᐃ * 114, ᐃ * 49, ᐃ * 113, 43 * ᐃ, ᐃ * 115, 38 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⲆⵠⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 146, ᐃ * 34);
		Ⲇ.bezierCurveTo(152 * ᐃ, ᐃ * 28, 155 * ᐃ, ᐃ * 27, 157 * ᐃ, 39 * ᐃ);
		Ⲇ.bezierCurveTo(157 * ᐃ, 45 * ᐃ, 157 * ᐃ, 49 * ᐃ, ᐃ * 150, 56 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 141, ᐃ * 66, 138 * ᐃ, ᐃ * 66, 138 * ᐃ, 57 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 137, 50 * ᐃ, ᐃ * 137, ᐃ * 47, 141 * ᐃ, 42 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠⵠⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 143, 69 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 148, ᐃ * 56, ᐃ * 156, 50 * ᐃ, ᐃ * 158, ᐃ * 58);
		Ⲇ.bezierCurveTo(159 * ᐃ, 64 * ᐃ, 160 * ᐃ, 67 * ᐃ, 153 * ᐃ, ᐃ * 77);
		Ⲇ.bezierCurveTo(148 * ᐃ, 83 * ᐃ, ᐃ * 145, ᐃ * 84, ᐃ * 143, 77 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 149, 92 * ᐃ);
		Ⲇ.bezierCurveTo(149 * ᐃ, 89 * ᐃ, 151 * ᐃ, 84 * ᐃ, 156 * ᐃ, ᐃ * 79);
		Ⲇ.bezierCurveTo(161 * ᐃ, 73 * ᐃ, ᐃ * 163, ᐃ * 78, 162 * ᐃ, ᐃ * 86);
		Ⲇ.bezierCurveTo(161 * ᐃ, 91 * ᐃ, ᐃ * 155, ᐃ * 99, ᐃ * 152, ᐃ * 98);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(111 * ᐃ, ᐃ * 61);
		Ⲇ.bezierCurveTo(114 * ᐃ, ᐃ * 51, 117 * ᐃ, 51 * ᐃ, ᐃ * 124, ᐃ * 64);
		Ⲇ.bezierCurveTo(ᐃ * 128, 68 * ᐃ, ᐃ * 128, 76 * ᐃ, 126 * ᐃ, 79 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 123, 84 * ᐃ, 122 * ᐃ, ᐃ * 82, 115 * ᐃ, 74 * ᐃ);
		Ⲇ.bezierCurveTo(112 * ᐃ, 67 * ᐃ, 115 * ᐃ, 74 * ᐃ, ᐃ * 115, 74 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 111, 68 * ᐃ, 111 * ᐃ, ᐃ * 66, 111 * ᐃ, 62 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(107 * ᐃ, 81 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 108, 74 * ᐃ, 112 * ᐃ, 73 * ᐃ, ᐃ * 118, ᐃ * 84);
		Ⲇ.bezierCurveTo(122 * ᐃ, 88 * ᐃ, ᐃ * 122, 93 * ᐃ, ᐃ * 121, ᐃ * 98);
		Ⲇ.bezierCurveTo(ᐃ * 114, ᐃ * 98, ᐃ * 113, ᐃ * 98, 109 * ᐃ, ᐃ * 90);
		Ⲇ.bezierCurveTo(ᐃ * 107, 87 * ᐃ, 106 * ᐃ, ᐃ * 85, 107 * ᐃ, 82 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆⲆᐃΔⲆⵠ]);
		return ΔⲆ
	}

	function ⵠⵠᐃⵠᐃᐃᐃⵠᐃ() {
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[284]).style.backgroundColor = Δ.ⵠⵠΔᐃⵠ[ΔⵠⵠⵠⲆ.time];
		ΔⵠⵠⵠⲆ.items.push(new ᐃᐃⵠⲆⲆΔⲆ(ⵠᐃᐃ.ⲆⲆΔⵠⲆ, 0, ⵠⵠⲆⵠ, ⵠⵠⲆⵠ, ⵠⵠⲆⵠ, Math.random() * Math.PI * ᐃᐃⲆⲆ, 2, 1));
		ΔⵠⵠⵠⲆ.items.push(new ᐃᐃⵠⲆⲆΔⲆ(ⵠᐃᐃ.ᐃᐃⲆᐃⵠ, Ⲇᐃⵠ, ⵠⲆΔ, ᐃᐃⲆ, ⵠⲆΔ, 0, 0, ΔⵠΔᐃ));
		ΔⵠⵠⵠⲆ.items.push(new ᐃᐃⵠⲆⲆΔⲆ(ⵠᐃᐃ.ᐃⵠⵠⲆᐃ, ⵠΔᐃⵠ, ᐃᐃᐃ, 0, 0, Math.PI / 4, ⵠⲆᐃ, Ⲇᐃⵠ));
		ΔⵠⵠⵠⲆ.items.push(new ᐃᐃⵠⲆⲆΔⲆ(ⵠᐃᐃ.ᐃᐃⲆᐃⵠ, ⵠᐃⲆ, ⵠΔᐃⵠ, ΔΔᐃ, ⵠⵠⵠΔ, ⵠⵠⵠ, 0, ΔΔᐃᐃⵠ))
	}

	function ΔᐃⵠΔⲆⵠⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 202 * ᐃ;
		ΔⲆ.height = ᐃ * 202;
		Ⲇ.translate(ᐃ * 2, 1 * ᐃ);
		Ⲇ.globalAlpha = .3;
		ᐃΔΔ(Ⲇ, ᐃ * 98, ᐃ * 99, ᐃ * 100);
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⲆ]);
		Ⲇ.globalAlpha = .5;
		ᐃΔΔ(Ⲇ, ᐃ * 98, ᐃ * 99, ᐃ * 90);
		ΔΔ(Ⲇ, Δⵠ[ΔᐃΔⲆ]);
		return ΔⲆ
	}

	function ᐃⲆᐃⲆᐃⵠⲆᐃΔ(ᐃ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		if (0 == Ⲇᐃ) {
			ΔⲆ.width = 543 * ᐃ;
			ΔⲆ.height = ᐃ * 393;
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 164.23297119140625, 72.80398559570312 * ᐃ);
			Ⲇ.bezierCurveTo(289.23297119140625 * ᐃ, ᐃ * 41.803985595703125, 413.23297119140625 * ᐃ, ᐃ * 86.80398559570312, ᐃ * 441.23297119140625, ᐃ * 105.80398559570312);
			Ⲇ.bezierCurveTo(513.2329711914062 * ᐃ, ᐃ * 149.80398559570312, 475.23297119140625 * ᐃ, 224.80398559570312 * ᐃ, 451.23297119140625 * ᐃ, ᐃ * 258.8039855957031);
			Ⲇ.bezierCurveTo(ᐃ * 410.23297119140625, 315.8039855957031 * ᐃ, 380.23297119140625 * ᐃ, ᐃ * 314.8039855957031, ᐃ * 289.23297119140625, 320.8039855957031 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 160.23297119140625, 329.8039855957031 * ᐃ, 102.23297119140625 * ᐃ, 312.8039855957031 * ᐃ, ᐃ * 72.23297119140625, 258.8039855957031 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 32.23297119140625, ᐃ * 156.80398559570312, ᐃ * 93.23297119140625, 92.80398559570312 * ᐃ, ᐃ * 164.23297119140625, ᐃ * 72.80398559570312);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆ])
		} else if (Ⲇᐃ == ΔⲆᐃⲆ) {
			ΔⲆ.width = ᐃ * 543;
			ΔⲆ.height = 470 * ᐃ;
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(238.23297119140625 * ᐃ, 34.622161865234375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 423.23297119140625, 21.622161865234375 * ᐃ, ᐃ * 474.23297119140625, 96.62216186523438 * ᐃ, ᐃ * 499.23297119140625, 167.62216186523438 * ᐃ);
			Ⲇ.bezierCurveTo(536.2329711914062 * ᐃ, 288.6221618652344 * ᐃ, 487.23297119140625 * ᐃ, 367.6221618652344 * ᐃ, 403.23297119140625 * ᐃ, ᐃ * 412.6221618652344);
			Ⲇ.bezierCurveTo(287.23297119140625 * ᐃ, ᐃ * 466.6221618652344, 127.23297119140625 * ᐃ, ᐃ * 424.6221618652344, 50.23297119140625 * ᐃ, ᐃ * 318.6221618652344);
			Ⲇ.bezierCurveTo(ᐃ * -.76702880859375, 239.62216186523438 * ᐃ, ᐃ * 30.23297119140625, 110.62216186523438 * ᐃ, 73.23297119140625 * ᐃ, 77.62216186523438 * ᐃ);
			Ⲇ.bezierCurveTo(128.23297119140625 * ᐃ, 29.622161865234375 * ᐃ, ᐃ * 202.23297119140625, ᐃ * 40.622161865234375, 238.23297119140625 * ᐃ, 34.622161865234375 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0])
		} else {
			ΔⲆ.width = ᐃ * 543;
			ΔⲆ.height = ᐃ * 470;
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 268.23297119140625, 23.349441528320312 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 424.23297119140625, ᐃ * -.6505584716796875, 524.2329711914062 * ᐃ, ᐃ * 44.34944152832031, 519.2329711914062 * ᐃ, 186.3494415283203 * ᐃ);
			Ⲇ.bezierCurveTo(515.2329711914062 * ᐃ, ᐃ * 341.3494415283203, ᐃ * 431.23297119140625, 409.3494415283203 * ᐃ, ᐃ * 357.23297119140625, 442.3494415283203 * ᐃ);
			Ⲇ.bezierCurveTo(278.23297119140625 * ᐃ, ᐃ * 469.3494415283203, ᐃ * 144.23297119140625, 460.3494415283203 * ᐃ, 51.23297119140625 * ᐃ, ᐃ * 348.3494415283203);
			Ⲇ.bezierCurveTo(3.23297119140625 * ᐃ, ᐃ * 274.3494415283203, 45.23297119140625 * ᐃ, ᐃ * 87.34944152832031, 268.23297119140625 * ᐃ, 23.349441528320312 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0])
		}
		return ΔⲆ
	}

	function ⵠΔⲆΔⲆᐃⵠ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 151 * ᐃ;
		ΔⲆ.height = 80 * ᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(133 * ᐃ, ᐃ * 54);
		Ⲇ.bezierCurveTo(ᐃ * 136, 18 * ᐃ, 129 * ᐃ, ᐃⵠⲆⲆⵠⲆⵠ * ᐃ, ᐃ * 114, ᐃ * ᐃⵠⵠΔⲆ);
		Ⲇ.bezierCurveTo(51 * ᐃ, ᐃ * 0, 36 * ᐃ, ⲆᐃⲆᐃⵠⵠⵠ * ᐃ, 34 * ᐃ, ᐃⲆⵠᐃⲆᐃⲆ * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * Δⵠᐃᐃⵠ, ᐃ * 28, 22 * ᐃ, ᐃ * 56, 21 * ᐃ, 57 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃⵠ], Δⵠ[ᐃⲆΔΔ], ᐃᐃⵠΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(130 * ᐃ, ᐃ * 40);
		Ⲇ.bezierCurveTo(132 * ᐃ, 35 * ᐃ, ᐃ * 132, ᐃ * 30, 132 * ᐃ, ᐃ * 29);
		Ⲇ.bezierCurveTo(ᐃ * 145, ᐃ * 38, 144 * ᐃ, ᐃ * 43, ᐃ * 137, ᐃ * 54);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ᐃⲆΔ], ⲆΔᐃᐃΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(20 * ᐃ, 33 * ᐃ);
		Ⲇ.bezierCurveTo(24 * ᐃ, 44 * ᐃ, 215 * ᐃ, 39 * ᐃ, 23 * ᐃ, ᐃ * 44);
		Ⲇ.bezierCurveTo(19 * ᐃ, 49 * ᐃ, 19 * ᐃ, ᐃ * 49, ᐃ * ᐃⲆΔᐃΔⵠⵠ, 54 * ᐃ);
		Ⲇ.bezierCurveTo(4 * ᐃ, 43 * ᐃ, ᐃ * ⵠⲆΔⲆᐃ, ᐃ * 35, 20 * ᐃ, 32 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠΔ], Δⵠ[1], ⲆΔᐃᐃΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ⵠᐃᐃΔⲆⵠΔ * ᐃ, 52 * ᐃ);
		Ⲇ.bezierCurveTo(24 * ᐃ, 31 * ᐃ, ᐃ * 34, 25 * ᐃ, ᐃ * 75, 23 * ᐃ);
		Ⲇ.bezierCurveTo(130 * ᐃ, 24 * ᐃ, 129 * ᐃ, 32 * ᐃ, 134 * ᐃ, 51 * ᐃ);
		Ⲇ.bezierCurveTo(138 * ᐃ, ᐃ * 70, 126 * ᐃ, 72 * ᐃ, 90 * ᐃ, ᐃ * 73);
		Ⲇ.bezierCurveTo(18 * ᐃ, ᐃ * 72, ᐃ * 15, 68 * ᐃ, ᐃ * ⲆᐃᐃᐃΔⲆΔ, ᐃ * 54);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ], Δⵠ[ᐃᐃΔ], Ⲇⵠⵠⵠ);
		return ΔⲆ
	}

	function ⵠⲆᐃⵠΔᐃⵠⲆΔ() {
		ᐃΔ[Δ.ᐃⲆᐃᐃᐃΔⵠ] = ΔΔᐃⵠ(ᐃⲆΔ, [{
			f: ⵠⵠΔΔⵠᐃᐃ,
			x: ⵠᐃⲆⲆ,
			y: 0,
			a: 1,
			r: ⵠⲆᐃ,
			c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
		}], .2, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃⵠΔᐃⲆΔⵠ] = ᐃΔ[Δ.ᐃⲆᐃᐃᐃΔⵠ];
		ᐃΔ[Δ.ⵠΔᐃᐃⵠᐃⲆ] = [];
		ᐃΔ[Δ.ⵠΔᐃᐃⵠᐃⲆ][ⵠᐃⲆⲆ] = ⵠᐃ.ΔⲆⵠⲆᐃΔⵠ;
		ᐃΔ[Δ.ⵠΔᐃᐃⵠᐃⲆ][ⵠⲆⲆ] = ⵠᐃ.ⲆᐃⲆⲆΔΔⵠ;
		ᐃΔ[Δ.ⵠΔᐃᐃⵠᐃⲆ][ⲆᐃΔⲆ] = ⵠᐃ.ᐃᐃⵠᐃⲆⲆⲆ;
		ᐃΔ[Δ.ᐃᐃⲆⵠⲆᐃⲆ] = ᐃΔ[Δ.ⵠΔᐃᐃⵠᐃⲆ];
		ᐃΔ[Δ.ΔⵠᐃⲆᐃΔᐃ] = [];
		ᐃΔ[Δ.ΔⵠᐃⲆᐃΔᐃ][ΔΔᐃ] = ⵠᐃ.ᐃⵠᐃⵠΔΔΔ;
		ᐃΔ[Δ.ΔⵠᐃⲆᐃΔᐃ][ΔΔⵠΔ] = ⵠᐃ.Ⲇⵠᐃᐃⵠᐃᐃ;
		ᐃΔ[Δ.ΔⵠᐃⲆᐃΔᐃ][2] = ⵠᐃ.ΔΔΔⲆᐃⵠⲆ;
		ᐃΔ[Δ.ⲆᐃᐃᐃⲆᐃⲆ] = ᐃΔ[Δ.ΔⵠᐃⲆᐃΔᐃ];
		ᐃΔ[Δ.ΔΔⲆᐃᐃΔᐃ] = [];
		ᐃΔ[Δ.ΔΔⲆᐃᐃΔᐃ][ⵠᐃⲆⲆ] = ⵠᐃ.ᐃᐃⲆⵠᐃⲆⵠ;
		ᐃΔ[Δ.ΔΔⲆᐃᐃΔᐃ][1] = ⵠᐃ.ᐃⵠΔⲆᐃΔⵠ;
		ᐃΔ[Δ.ΔΔⲆᐃᐃΔᐃ][ᐃᐃᐃⵠ] = ⵠᐃ.ⲆᐃⲆⵠⲆᐃⵠ;
		ᐃΔ[Δ.ΔᐃΔⵠᐃᐃⲆ] = ᐃΔ[Δ.ΔΔⲆᐃᐃΔᐃ];
		ᐃΔ[Δ.ᐃΔΔⵠⵠⲆᐃ] = [];
		ᐃΔ[Δ.ᐃΔΔⵠⵠⲆᐃ][ⵠΔᐃⵠ] = ⵠᐃ.ⵠΔᐃⵠⵠⵠⲆ;
		ᐃΔ[Δ.ᐃΔΔⵠⵠⲆᐃ][1] = ⵠᐃ.ⲆΔΔΔᐃΔⲆ;
		ᐃΔ[Δ.ᐃΔΔⵠⵠⲆᐃ][ΔⵠⲆᐃ] = ⵠᐃ.ΔⲆΔᐃΔⵠⲆ;
		ᐃΔ[Δ.ⲆᐃⲆΔᐃᐃⲆ] = ᐃΔ[Δ.ᐃΔΔⵠⵠⲆᐃ];
		ᐃΔ[Δ.ⵠⵠⵠⵠⲆᐃⵠ] = [];
		ᐃΔ[Δ.ⵠⵠⵠⵠⲆᐃⵠ][ⵠΔᐃᐃ] = ⵠᐃ.ᐃⲆᐃΔΔΔᐃ;
		ᐃΔ[Δ.ⵠⵠⵠⵠⲆᐃⵠ][ΔⲆᐃⲆ] = ⵠᐃ.ᐃⵠⵠⲆᐃΔΔ;
		ᐃΔ[Δ.ⵠⵠⵠⵠⲆᐃⵠ][ΔᐃΔᐃ] = ⵠᐃ.ⲆⵠⵠΔΔⲆⲆ;
		ᐃΔ[Δ.ⲆΔⲆΔΔΔΔ] = ᐃΔ[Δ.ⵠⵠⵠⵠⲆᐃⵠ];
		ᐃΔ[Δ.ⲆΔⲆⵠⲆᐃΔ] = [];
		ᐃΔ[Δ.ⲆΔⲆⵠⲆᐃΔ][ᐃⵠⵠⲆ] = ⵠᐃ.ⵠΔⲆⲆΔⲆⵠ;
		ᐃΔ[Δ.ⲆΔⲆⵠⲆᐃΔ][1] = ⵠᐃ.ΔΔⵠᐃΔⲆⲆ;
		ᐃΔ[Δ.ⲆΔⲆⵠⲆᐃΔ][2] = ⵠᐃ.ᐃΔⵠⵠᐃΔΔ;
		ᐃΔ[Δ.ᐃᐃⲆⵠΔⲆΔ] = ᐃΔ[Δ.ⲆΔⲆⵠⲆᐃΔ];
		ᐃΔ[Δ.ᐃᐃᐃΔⲆᐃⲆ] = ᐃΔ[Δ.ⲆΔⲆⵠⲆᐃΔ];
		ᐃΔ[Δ.ᐃᐃΔⲆⲆᐃΔ] = [];
		ᐃΔ[Δ.ᐃᐃΔⲆⲆᐃΔ][0] = ⵠᐃ.ΔⵠᐃΔΔᐃΔΔⵠ;
		ᐃΔ[Δ.ᐃᐃΔⲆⲆᐃΔ][1] = ⵠᐃ.ⵠΔᐃⵠᐃΔⲆᐃΔ;
		ᐃΔ[Δ.ᐃᐃΔⲆⲆᐃΔ][ᐃᐃᐃⵠ] = ⵠᐃ.ⲆⲆⵠⵠⲆΔⲆⲆᐃ;
		ᐃΔ[Δ.ⵠⲆⲆⲆⵠᐃⵠ] = ᐃΔ[Δ.ᐃᐃΔⲆⲆᐃΔ];
		ᐃΔ[Δ.ΔΔⲆΔⲆⵠⵠ] = ᐃΔ[Δ.ᐃᐃΔⲆⲆᐃΔ];
		ᐃΔ[Δ.ᐃᐃⲆⲆⲆⲆᐃ] = [];
		ᐃΔ[Δ.ᐃᐃⲆⲆⲆⲆᐃ][Δⵠⵠⵠ] = ⵠᐃ.ΔᐃᐃᐃⵠⲆΔ;
		ᐃΔ[Δ.ᐃᐃⲆⲆⲆⲆᐃ][1] = ⵠᐃ.ⲆΔⲆⵠⵠⵠΔ;
		ᐃΔ[Δ.ᐃᐃⲆⲆⲆⲆᐃ][2] = ⵠᐃ.ΔᐃⲆΔΔΔΔ;
		ᐃΔ[Δ.ᐃᐃⵠⵠΔᐃΔ] = ᐃΔ[Δ.ᐃᐃⲆⲆⲆⲆᐃ];
		ᐃΔ[Δ.ᐃᐃⵠΔΔᐃΔ] = ᐃΔ[Δ.ᐃᐃⲆⲆⲆⲆᐃ];
		ᐃΔ[Δ.ΔᐃᐃᐃᐃⲆⵠ] = [];
		ᐃΔ[Δ.ΔᐃᐃᐃᐃⲆⵠ][ⵠΔᐃᐃ] = ⵠᐃ.ⵠᐃⵠⲆⵠⵠᐃ;
		ᐃΔ[Δ.ΔᐃᐃᐃᐃⲆⵠ][1] = ⵠᐃ.ᐃᐃᐃᐃⵠⲆⲆ;
		ᐃΔ[Δ.ΔᐃᐃᐃᐃⲆⵠ][ᐃᐃⲆⲆ] = ⵠᐃ.ΔⵠⲆⵠΔⵠⵠ;
		ᐃΔ[Δ.ᐃⲆΔᐃΔΔⵠ] = ᐃΔ[Δ.ΔᐃᐃᐃᐃⲆⵠ];
		ᐃΔ[Δ.ΔᐃⲆᐃΔⲆΔ] = ᐃΔ[Δ.ΔᐃᐃᐃᐃⲆⵠ];
		ᐃΔ[Δ.ⲆⲆΔⲆⲆᐃΔ] = [];
		ᐃΔ[Δ.ⲆⲆΔⲆⲆᐃΔ][0] = ⵠᐃ.ᐃⲆⲆᐃᐃᐃⲆᐃΔ;
		ᐃΔ[Δ.ⲆⲆΔⲆⲆᐃΔ][1] = ⵠᐃ.ΔΔᐃΔⲆⵠⵠⲆⵠ;
		ᐃΔ[Δ.ⲆⲆΔⲆⲆᐃΔ][ΔΔᐃΔⵠ] = ⵠᐃ.ⵠᐃⲆⲆⲆⲆᐃᐃΔ;
		ᐃΔ[Δ.ⵠᐃⲆⲆⵠΔᐃ] = ᐃΔ[Δ.ⲆⲆΔⲆⲆᐃΔ];
		ᐃΔ[Δ.ΔⵠᐃᐃⲆⵠⲆ] = [];
		ᐃΔ[Δ.ΔⵠᐃᐃⲆⵠⲆ][ΔΔᐃ] = ⵠᐃ.ⵠΔᐃⵠΔⵠⲆΔⵠ;
		ᐃΔ[Δ.ΔⵠᐃᐃⲆⵠⲆ][1] = ⵠᐃ.ⵠⵠᐃΔᐃΔⵠΔⵠ;
		ᐃΔ[Δ.ΔⵠᐃᐃⲆⵠⲆ][2] = ⵠᐃ.ᐃⲆⲆⲆⲆⵠⵠⲆΔ;
		ᐃΔ[Δ.ᐃⵠⲆΔⵠⲆⲆ] = ᐃΔ[Δ.ΔⵠᐃᐃⲆⵠⲆ];
		ᐃΔ[Δ.ᐃΔΔⲆΔⵠᐃ] = ᐃΔ[Δ.ΔⵠᐃᐃⲆⵠⲆ];
		ᐃΔ[Δ.ⲆᐃⲆⲆⲆⵠⲆ] = [];
		ᐃΔ[Δ.ⲆᐃⲆⲆⲆⵠⲆ][ⵠⵠⵠΔ] = ⵠᐃ.ⵠⲆᐃᐃᐃΔᐃⵠⵠ;
		ᐃΔ[Δ.ⲆᐃⲆⲆⲆⵠⲆ][ΔᐃⲆⲆ] = ⵠᐃ.ΔⲆⲆⵠⵠⲆᐃⵠⲆ;
		ᐃΔ[Δ.ⲆᐃⲆⲆⲆⵠⲆ][ⲆⵠΔⵠ] = ⵠᐃ.ᐃⵠⲆΔⵠᐃΔⵠⵠ;
		ᐃΔ[Δ.ᐃᐃᐃᐃⵠⲆᐃ] = ᐃΔ[Δ.ⲆᐃⲆⲆⲆⵠⲆ];
		ᐃΔ[Δ.ⵠⲆⵠⵠⵠᐃⵠ] = ᐃΔ[Δ.ⲆᐃⲆⲆⲆⵠⲆ];
		ᐃΔ[Δ.ⲆᐃⵠΔⵠⵠΔ] = [];
		ᐃΔ[Δ.ⲆᐃⵠΔⵠⵠΔ][0] = ⵠᐃ.ᐃⲆⵠΔΔΔⵠΔⵠ;
		ᐃΔ[Δ.ⲆᐃⵠΔⵠⵠΔ][ΔΔΔᐃ] = ⵠᐃ.ΔⲆⲆⲆᐃⵠΔΔⲆ;
		ᐃΔ[Δ.ⲆᐃⵠΔⵠⵠΔ][2] = ⵠᐃ.ⲆⲆΔΔⲆΔᐃᐃΔ;
		ᐃΔ[Δ.ᐃⵠⲆⲆⲆⵠⵠ] = ᐃΔ[Δ.ⲆᐃⵠΔⵠⵠΔ];
		ᐃΔ[Δ.ᐃⲆᐃΔᐃΔΔ] = ᐃΔ[Δ.ⲆᐃⵠΔⵠⵠΔ];
		ᐃΔ[Δ.ᐃΔⲆⲆⲆⲆⲆ] = [];
		ᐃΔ[Δ.ᐃΔⲆⲆⲆⲆⲆ][ⵠΔᐃᐃ] = ⵠᐃ.ⵠΔΔⲆᐃⵠᐃΔⲆ;
		ᐃΔ[Δ.ᐃΔⲆⲆⲆⲆⲆ][ⲆᐃΔ] = ⵠᐃ.ᐃᐃⲆᐃΔΔⵠΔᐃ;
		ᐃΔ[Δ.ᐃΔⲆⲆⲆⲆⲆ][2] = ⵠᐃ.ⲆᐃⲆΔⵠᐃΔⲆᐃ;
		ᐃΔ[Δ.ΔⵠⵠΔⵠΔᐃ] = ᐃΔ[Δ.ᐃΔⲆⲆⲆⲆⲆ];
		ᐃΔ[Δ.ᐃⲆΔᐃᐃⵠⵠ] = ᐃΔ[Δ.ᐃΔⲆⲆⲆⲆⲆ];
		ᐃΔ[Δ.ⲆᐃΔΔⲆⵠⲆ] = [];
		ᐃΔ[Δ.ⲆᐃΔΔⲆⵠⲆ][ⵠⲆᐃ] = ⵠᐃ.ⵠᐃΔᐃΔⲆΔⵠⵠ;
		ᐃΔ[Δ.ⲆᐃΔΔⲆⵠⲆ][1] = ⵠᐃ.ΔΔⵠΔΔᐃΔΔᐃ;
		ᐃΔ[Δ.ⲆᐃΔΔⲆⵠⲆ][2] = ⵠᐃ.ᐃⲆⵠⲆⵠᐃᐃⲆⵠ;
		ᐃΔ[Δ.ⲆᐃΔⵠᐃΔᐃ] = ᐃΔ[Δ.ⲆᐃΔΔⲆⵠⲆ];
		ᐃΔ[Δ.ⵠᐃΔⲆⵠⵠⵠ] = ᐃΔ[Δ.ⲆᐃΔΔⲆⵠⲆ];
		ᐃΔ[Δ.ᐃΔᐃᐃⵠⵠΔ] = [];
		ᐃΔ[Δ.ᐃΔᐃᐃⵠⵠΔ][ᐃⵠⵠⲆ] = ⵠᐃ.ᐃΔᐃΔᐃᐃⲆᐃⵠ;
		ᐃΔ[Δ.ᐃΔᐃᐃⵠⵠΔ][1] = ⵠᐃ.ⵠⲆᐃⵠⵠⵠⵠᐃⲆ;
		ᐃΔ[Δ.ᐃΔᐃᐃⵠⵠΔ][2] = ⵠᐃ.ⲆᐃⲆⲆᐃΔᐃᐃᐃ;
		ᐃΔ[Δ.ᐃⵠΔᐃΔᐃΔ] = ᐃΔ[Δ.ᐃΔᐃᐃⵠⵠΔ];
		ᐃΔ[Δ.ⲆᐃⵠⲆΔⲆⵠ] = ᐃΔ[Δ.ᐃΔᐃᐃⵠⵠΔ];
		ᐃΔ[Δ.ⵠᐃⲆΔΔⵠⲆ] = [];
		ᐃΔ[Δ.ⵠᐃⲆΔΔⵠⲆ][0] = ⵠᐃ.ᐃᐃⵠⲆΔⵠⲆᐃᐃ;
		ᐃΔ[Δ.ⵠᐃⲆΔΔⵠⲆ][1] = ⵠᐃ.ⵠⲆⲆΔⵠⵠᐃᐃⲆ;
		ᐃΔ[Δ.ⵠᐃⲆΔΔⵠⲆ][ᐃⲆᐃⵠ] = ⵠᐃ.ⵠΔⲆⲆᐃΔΔᐃᐃ;
		ᐃΔ[Δ.ⲆΔᐃⲆᐃΔⲆ] = ᐃΔ[Δ.ⵠᐃⲆΔΔⵠⲆ];
		ᐃΔ[Δ.ΔᐃᐃΔⵠᐃᐃ] = ᐃΔ[Δ.ⵠᐃⲆΔΔⵠⲆ];
		ᐃΔ[Δ.ᐃᐃⲆΔΔᐃΔ] = [];
		ᐃΔ[Δ.ᐃᐃⲆΔΔᐃΔ][ⵠⵠⵠ] = ⵠᐃ.ᐃΔᐃᐃΔⵠⲆⵠⵠ;
		ᐃΔ[Δ.ᐃᐃⲆΔΔᐃΔ][1] = ⵠᐃ.ᐃⵠΔⵠⵠΔⲆᐃⲆ;
		ᐃΔ[Δ.ᐃᐃⲆΔΔᐃΔ][2] = ⵠᐃ.ΔⲆⲆΔⲆΔⵠΔⵠ;
		ᐃΔ[Δ.ΔⲆⲆⵠᐃᐃΔ] = ᐃΔ[Δ.ᐃᐃⲆΔΔᐃΔ];
		ᐃΔ[Δ.ΔᐃᐃⵠᐃⲆΔ] = ᐃΔ[Δ.ᐃᐃⲆΔΔᐃΔ];
		ᐃΔ[Δ.ΔⲆΔᐃᐃΔᐃ] = [];
		ᐃΔ[Δ.ΔⲆΔᐃᐃΔᐃ][ⵠⵠⲆⵠ] = ⵠᐃ.ⲆᐃΔⲆᐃᐃΔᐃⵠ;
		ᐃΔ[Δ.ΔⲆΔᐃᐃΔᐃ][1] = ⵠᐃ.ᐃᐃΔᐃΔⵠⵠΔⵠ;
		ᐃΔ[Δ.ΔⲆΔᐃᐃΔᐃ][ᐃᐃᐃⵠ] = ⵠᐃ.ΔⵠΔⲆᐃᐃⵠⲆᐃ;
		ᐃΔ[Δ.ᐃΔⲆᐃᐃⵠᐃ] = ᐃΔ[Δ.ΔⲆΔᐃᐃΔᐃ];
		ᐃΔ[Δ.ⲆᐃⵠᐃᐃⲆⵠ] = ᐃΔ[Δ.ΔⲆΔᐃᐃΔᐃ];
		ᐃΔ[Δ.ⵠᐃⲆᐃⵠΔΔ] = [];
		ᐃΔ[Δ.ⵠᐃⲆᐃⵠΔΔ][ᐃⵠⵠⲆ] = ⵠᐃ.ΔᐃⵠⵠⵠⲆⲆⲆⵠ;
		ᐃΔ[Δ.ⵠᐃⲆᐃⵠΔΔ][ᐃᐃΔ] = ⵠᐃ.ⵠΔⲆⲆΔⲆΔⲆᐃ;
		ᐃΔ[Δ.ⵠᐃⲆᐃⵠΔΔ][2] = ⵠᐃ.ⲆⵠΔⲆᐃΔⲆΔΔ;
		ᐃΔ[Δ.ᐃⲆⲆⲆᐃⲆⲆ] = ᐃΔ[Δ.ⵠᐃⲆᐃⵠΔΔ];
		ᐃΔ[Δ.ⵠΔᐃⵠⵠΔⵠ] = ᐃΔ[Δ.ⵠᐃⲆᐃⵠΔΔ];
		ᐃΔ[Δ.ⲆⵠⵠⵠⵠⵠΔ] = [];
		ᐃΔ[Δ.ⲆⵠⵠⵠⵠⵠΔ][0] = ⵠᐃ.ⵠᐃⵠΔᐃΔᐃΔᐃ;
		ᐃΔ[Δ.ⲆⵠⵠⵠⵠⵠΔ][ΔⵠΔ] = ⵠᐃ.ⵠⵠΔⵠᐃⲆΔΔⲆ;
		ᐃΔ[Δ.ⲆⵠⵠⵠⵠⵠΔ][2] = ⵠᐃ.ⲆⲆᐃΔⵠⵠΔⲆΔ;
		ᐃΔ[Δ.ⲆΔᐃᐃⵠⲆΔ] = ᐃΔ[Δ.ⲆⵠⵠⵠⵠⵠΔ];
		ᐃΔ[Δ.ΔΔᐃⵠⲆⲆΔ] = ᐃΔ[Δ.ⲆⵠⵠⵠⵠⵠΔ];
		ᐃΔ[Δ.ᐃⵠⲆᐃᐃⲆⵠ] = [];
		ᐃΔ[Δ.ᐃⵠⲆᐃᐃⲆⵠ][0] = ⵠᐃ.ⲆⵠⵠᐃΔᐃΔΔⵠ;
		ᐃΔ[Δ.ᐃⵠⲆᐃᐃⲆⵠ][ΔΔⵠΔ] = ⵠᐃ.ⲆⲆⵠⵠΔⲆⵠⵠⲆ;
		ᐃΔ[Δ.ᐃⵠⲆᐃᐃⲆⵠ][ⲆᐃΔⲆ] = ⵠᐃ.ΔⵠΔⵠⲆᐃΔⲆⲆ;
		ᐃΔ[Δ.ΔⲆⵠⲆᐃΔᐃ] = ᐃΔ[Δ.ᐃⵠⲆᐃᐃⲆⵠ];
		ᐃΔ[Δ.ΔⵠᐃΔⵠⲆⵠ] = ᐃΔ[Δ.ᐃⵠⲆᐃᐃⲆⵠ];
		ᐃΔ[Δ.ᐃᐃᐃᐃⲆᐃΔ] = [];
		ᐃΔ[Δ.ᐃᐃᐃᐃⲆᐃΔ][ⵠᐃⲆⲆ] = ⵠᐃ.ᐃᐃΔⲆⵠⲆⲆᐃΔ;
		ᐃΔ[Δ.ᐃᐃᐃᐃⲆᐃΔ][1] = ⵠᐃ.ⲆΔⵠΔΔⵠⵠᐃΔ;
		ᐃΔ[Δ.ᐃᐃᐃᐃⲆᐃΔ][ΔⵠⲆᐃ] = ⵠᐃ.ΔⵠᐃⲆᐃᐃⲆⵠΔ;
		ᐃΔ[Δ.ᐃᐃⲆΔⵠⲆΔ] = ᐃΔ[Δ.ᐃᐃᐃᐃⲆᐃΔ];
		ᐃΔ[Δ.ΔⵠⲆⵠⲆΔⲆ] = ᐃΔ[Δ.ᐃᐃᐃᐃⲆᐃΔ];
		ᐃΔ[Δ.ᐃᐃⲆΔⲆⵠΔ] = [];
		ᐃΔ[Δ.ᐃᐃⲆΔⲆⵠΔ][ⵠᐃⲆⲆ] = ⵠᐃ.ⵠᐃᐃⲆⵠⲆΔⲆⲆ;
		ᐃΔ[Δ.ᐃᐃⲆΔⲆⵠΔ][1] = ⵠᐃ.ΔⲆⲆⵠⲆΔⲆᐃΔ;
		ᐃΔ[Δ.ᐃᐃⲆΔⲆⵠΔ][2] = ⵠᐃ.ΔⵠᐃⵠⵠⲆᐃᐃΔ;
		ᐃΔ[Δ.ΔΔᐃⲆΔⵠⵠ] = ᐃΔ[Δ.ᐃᐃⲆΔⲆⵠΔ];
		ᐃΔ[Δ.ⲆⵠΔⵠⵠⲆⲆ] = ᐃΔ[Δ.ᐃᐃⲆΔⲆⵠΔ];
		ᐃΔ[Δ.ΔⵠⵠΔⲆⲆᐃ] = [];
		ᐃΔ[Δ.ΔⵠⵠΔⲆⲆᐃ][0] = ⵠᐃ.ⵠᐃⲆᐃᐃᐃⲆⵠⵠ;
		ᐃΔ[Δ.ΔⵠⵠΔⲆⲆᐃ][1] = ⵠᐃ.ᐃᐃΔΔΔᐃⵠᐃᐃ;
		ᐃΔ[Δ.ΔⵠⵠΔⲆⲆᐃ][2] = ⵠᐃ.ᐃΔⲆⲆⵠⵠⵠⵠⵠ;
		ᐃΔ[Δ.ⲆΔⵠΔⵠᐃΔ] = ᐃΔ[Δ.ΔⵠⵠΔⲆⲆᐃ];
		ᐃΔ[Δ.ⲆⵠΔⲆⵠⵠΔ] = ᐃΔ[Δ.ΔⵠⵠΔⲆⲆᐃ];
		ᐃΔ[Δ.ⵠⵠΔⲆᐃⲆⵠ] = [];
		ᐃΔ[Δ.ⵠⵠΔⲆᐃⲆⵠ][Δⵠⵠⵠ] = ⵠᐃ.ⵠΔᐃΔⲆⵠⵠᐃΔ;
		ᐃΔ[Δ.ⵠⵠΔⲆᐃⲆⵠ][1] = ⵠᐃ.ΔᐃΔᐃⲆⲆᐃⵠⲆ;
		ᐃΔ[Δ.ⵠⵠΔⲆᐃⲆⵠ][2] = ⵠᐃ.ᐃⲆᐃⲆΔⵠΔΔᐃ;
		ᐃΔ[Δ.ⲆⵠⵠΔⵠᐃⲆ] = ᐃΔ[Δ.ⵠⵠΔⲆᐃⲆⵠ];
		ᐃΔ[Δ.ⵠΔᐃⲆⲆⲆⵠ] = ᐃΔ[Δ.ⵠⵠΔⲆᐃⲆⵠ];
		ᐃΔ[Δ.ΔⲆⵠΔⵠⲆΔ] = [];
		ᐃΔ[Δ.ΔⲆⵠΔⵠⲆΔ][ⵠⲆΔ] = ⵠᐃ.ᐃⵠΔⵠⵠΔΔΔⲆ;
		ᐃΔ[Δ.ΔⲆⵠΔⵠⲆΔ][1] = ⵠᐃ.ΔΔⵠⵠᐃⵠΔᐃΔ;
		ᐃΔ[Δ.ΔⲆⵠΔⵠⲆΔ][ⲆⲆΔⲆ] = ⵠᐃ.ΔΔⵠΔΔⵠᐃᐃⲆ;
		ᐃΔ[Δ.ᐃΔᐃΔᐃⵠᐃ] = ᐃΔ[Δ.ΔⲆⵠΔⵠⲆΔ];
		ᐃΔ[Δ.ⵠⲆⲆⵠᐃΔΔ] = ᐃΔ[Δ.ΔⲆⵠΔⵠⲆΔ];
		ᐃΔ[Δ.ⲆᐃⵠⵠⲆⵠᐃ] = [];
		ᐃΔ[Δ.ⲆᐃⵠⵠⲆⵠᐃ][0] = ⵠᐃ.ⲆΔⵠᐃΔΔⵠⲆⲆ;
		ᐃΔ[Δ.ⲆᐃⵠⵠⲆⵠᐃ][1] = ⵠᐃ.ᐃⲆΔⲆⲆᐃΔⵠⵠ;
		ᐃΔ[Δ.ⲆᐃⵠⵠⲆⵠᐃ][ᐃⲆᐃᐃ] = ⵠᐃ.ⵠⵠᐃⵠⵠⵠᐃΔⲆ;
		ᐃΔ[Δ.ⲆᐃᐃⵠᐃⲆᐃ] = ᐃΔ[Δ.ⲆᐃⵠⵠⲆⵠᐃ];
		ᐃΔ[Δ.ⵠⵠΔᐃⵠⵠΔ] = ᐃΔ[Δ.ⲆᐃⵠⵠⲆⵠᐃ];
		ᐃΔ[Δ.ᐃⲆⵠᐃᐃⵠΔ] = [];
		ᐃΔ[Δ.ᐃⲆⵠᐃᐃⵠΔ][ⲆⲆⵠⲆ] = ⵠᐃ.ᐃⵠⵠΔⵠⵠΔⲆⲆ;
		ᐃΔ[Δ.ᐃⲆⵠᐃᐃⵠΔ][Ⲇⵠᐃ] = ⵠᐃ.ⵠⵠⵠΔᐃᐃᐃΔΔ;
		ᐃΔ[Δ.ᐃⲆⵠᐃᐃⵠΔ][2] = ⵠᐃ.ΔⲆΔΔⲆᐃⲆⲆΔ;
		ᐃΔ[Δ.ⵠⲆⲆⵠⵠΔⵠ] = ᐃΔ[Δ.ᐃⲆⵠᐃᐃⵠΔ];
		ᐃΔ[Δ.ⵠΔⵠΔⲆⵠⵠ] = ᐃΔ[Δ.ᐃⲆⵠᐃᐃⵠΔ];
		ᐃΔ[Δ.ΔᐃⲆΔᐃΔⵠ] = [];
		ᐃΔ[Δ.ΔᐃⲆΔᐃΔⵠ][0] = ⵠᐃ.ᐃᐃⲆⲆⵠΔᐃΔΔ;
		ᐃΔ[Δ.ΔᐃⲆΔᐃΔⵠ][ΔᐃⲆⲆ] = ⵠᐃ.ᐃᐃᐃΔⵠⲆΔΔⲆ;
		ᐃΔ[Δ.ΔᐃⲆΔᐃΔⵠ][ⲆⲆΔⲆ] = ⵠᐃ.ᐃⲆⲆΔⵠⵠⵠΔᐃ;
		ᐃΔ[Δ.ΔⲆΔᐃⲆΔΔ] = ᐃΔ[Δ.ΔᐃⲆΔᐃΔⵠ];
		ᐃΔ[Δ.ᐃⵠᐃΔⵠⲆⵠ] = ᐃΔ[Δ.ΔᐃⲆΔᐃΔⵠ];
		ᐃΔ[Δ.ΔΔⲆⵠⵠⵠᐃ] = [];
		ᐃΔ[Δ.ΔΔⲆⵠⵠⵠᐃ][ⵠⲆᐃ] = ⵠᐃ.ⵠⵠⵠⲆᐃᐃⲆⵠⵠ;
		ᐃΔ[Δ.ΔΔⲆⵠⵠⵠᐃ][ΔⵠⲆⲆ] = ⵠᐃ.ΔᐃⲆᐃⲆⵠᐃⵠⲆ;
		ᐃΔ[Δ.ΔΔⲆⵠⵠⵠᐃ][ΔᐃⵠΔ] = ⵠᐃ.ⲆᐃⲆⲆᐃⵠΔΔΔ;
		ᐃΔ[Δ.ⵠᐃⵠᐃⵠᐃⲆ] = ᐃΔ[Δ.ΔΔⲆⵠⵠⵠᐃ];
		ᐃΔ[Δ.ΔᐃΔⵠⵠⵠⵠ] = ᐃΔ[Δ.ΔΔⲆⵠⵠⵠᐃ];
		ᐃΔ[Δ.ᐃᐃᐃᐃᐃΔᐃ] = [];
		ᐃΔ[Δ.ᐃᐃᐃᐃᐃΔᐃ][ⵠⲆⵠⵠ] = ⵠᐃ.ΔΔⵠⵠᐃΔⵠΔⵠ;
		ᐃΔ[Δ.ᐃᐃᐃᐃᐃΔᐃ][1] = ⵠᐃ.ΔⵠⵠⲆΔⵠᐃᐃᐃ;
		ᐃΔ[Δ.ᐃᐃᐃᐃᐃΔᐃ][2] = ⵠᐃ.ⲆⲆⲆⵠⲆⵠⲆᐃⵠ;
		ᐃΔ[Δ.ⵠᐃⲆᐃⲆⵠᐃ] = ᐃΔ[Δ.ᐃᐃᐃᐃᐃΔᐃ];
		ᐃΔ[Δ.ⵠΔΔΔΔᐃⲆ] = ᐃΔ[Δ.ᐃᐃᐃᐃᐃΔᐃ];
		ᐃΔ[Δ.ΔⵠᐃᐃᐃⲆΔ] = [];
		ᐃΔ[Δ.ΔⵠᐃᐃᐃⲆΔ][0] = ⵠᐃ.ⵠⲆⲆᐃⲆᐃᐃⲆⵠ;
		ᐃΔ[Δ.ΔⵠᐃᐃᐃⲆΔ][ΔⲆᐃᐃ] = ⵠᐃ.ⲆᐃⲆᐃᐃᐃⲆⲆⲆ;
		ᐃΔ[Δ.ΔⵠᐃᐃᐃⲆΔ][ᐃⲆᐃᐃ] = ⵠᐃ.ⲆⵠᐃⲆⲆⲆⵠⲆⵠ;
		ᐃΔ[Δ.ᐃⲆⵠᐃⵠΔΔ] = ᐃΔ[Δ.ΔⵠᐃᐃᐃⲆΔ];
		ᐃΔ[Δ.ΔⵠΔⲆⵠΔΔ] = ᐃΔ[Δ.ΔⵠᐃᐃᐃⲆΔ];
		ᐃΔ[Δ.ΔΔⵠⲆⵠΔⲆ] = [];
		ᐃΔ[Δ.ΔΔⵠⲆⵠΔⲆ][ⵠⲆⵠⵠ] = ⵠᐃ.ᐃᐃⲆΔΔΔΔΔⵠ;
		ᐃΔ[Δ.ΔΔⵠⲆⵠΔⲆ][Ⲇⵠᐃ] = ⵠᐃ.ⵠᐃⵠⵠⲆⲆⲆⵠⲆ;
		ᐃΔ[Δ.ΔΔⵠⲆⵠΔⲆ][ⵠΔⵠΔ] = ⵠᐃ.ᐃᐃⵠⵠⵠΔΔΔᐃ;
		ᐃΔ[Δ.ⲆΔⵠΔⵠᐃᐃ] = ᐃΔ[Δ.ΔΔⵠⲆⵠΔⲆ];
		ᐃΔ[Δ.ᐃΔΔⵠⵠΔⲆ] = ᐃΔ[Δ.ΔΔⵠⲆⵠΔⲆ];
		ᐃΔ[Δ.ΔⲆᐃᐃᐃⲆⵠ] = [];
		ᐃΔ[Δ.ΔⲆᐃᐃᐃⲆⵠ][ⵠⲆⵠⵠ] = ⵠᐃ.ᐃⵠᐃᐃⲆΔⲆΔⲆ;
		ᐃΔ[Δ.ΔⲆᐃᐃᐃⲆⵠ][Ⲇⵠᐃ] = ⵠᐃ.ΔⲆⵠᐃΔⵠᐃⲆᐃ;
		ᐃΔ[Δ.ΔⲆᐃᐃᐃⲆⵠ][ᐃᐃⲆⲆ] = ⵠᐃ.ⵠⵠⲆⵠᐃⵠⲆΔΔ;
		ᐃΔ[Δ.ⵠᐃᐃᐃⲆΔⲆ] = ᐃΔ[Δ.ΔⲆᐃᐃᐃⲆⵠ];
		ᐃΔ[Δ.ⵠⵠⵠᐃⲆⵠⵠ] = ᐃΔ[Δ.ΔⲆᐃᐃᐃⲆⵠ];
		ᐃΔ[Δ.ᐃⵠᐃΔⲆⵠⲆ] = [];
		ᐃΔ[Δ.ᐃⵠᐃΔⲆⵠⲆ][0] = ⵠᐃ.ⲆΔⲆⲆΔΔΔⵠⲆ;
		ᐃΔ[Δ.ᐃⵠᐃΔⲆⵠⲆ][1] = ⵠᐃ.ⵠΔΔᐃᐃⵠΔΔΔ;
		ᐃΔ[Δ.ᐃⵠᐃΔⲆⵠⲆ][ⲆⲆΔⲆ] = ⵠᐃ.ᐃᐃᐃΔⵠᐃⵠⵠⲆ;
		ᐃΔ[Δ.ⲆⲆᐃᐃΔΔΔ] = ᐃΔ[Δ.ᐃⵠᐃΔⲆⵠⲆ];
		ᐃΔ[Δ.ⵠΔⵠⵠΔⵠᐃ] = ᐃΔ[Δ.ᐃⵠᐃΔⲆⵠⲆ];
		ᐃΔ[Δ.ΔⲆⲆΔⵠᐃΔ] = [];
		ᐃΔ[Δ.ΔⲆⲆΔⵠᐃΔ][ⲆⵠⲆⲆ] = ⵠᐃ.ⵠⵠⵠⵠⲆⵠΔⵠΔ;
		ᐃΔ[Δ.ΔⲆⲆΔⵠᐃΔ][1] = ⵠᐃ.ⵠⲆⲆⵠⵠΔⵠᐃᐃ;
		ᐃΔ[Δ.ΔⲆⲆΔⵠᐃΔ][ΔΔⲆᐃ] = ⵠᐃ.ΔⲆᐃⵠⲆⲆⵠⵠⵠ;
		ᐃΔ[Δ.ᐃⲆΔΔⵠⲆΔ] = ᐃΔ[Δ.ΔⲆⲆΔⵠᐃΔ];
		ᐃΔ[Δ.ᐃᐃᐃᐃᐃΔⵠ] = ᐃΔ[Δ.ΔⲆⲆΔⵠᐃΔ];
		ᐃΔ[Δ.ΔΔΔⵠⵠⲆⲆ] = [];
		ᐃΔ[Δ.ΔΔΔⵠⵠⲆⲆ][ⵠⵠⵠΔ] = ⵠᐃ.ⵠⵠᐃΔᐃΔⵠⵠⵠ;
		ᐃΔ[Δ.ΔΔΔⵠⵠⲆⲆ][ⵠΔᐃ] = ⵠᐃ.ᐃⵠⲆᐃΔᐃΔΔⵠ;
		ᐃΔ[Δ.ΔΔΔⵠⵠⲆⲆ][ΔⵠⲆᐃ] = ⵠᐃ.ᐃⵠⲆⵠⵠΔⲆⵠᐃ;
		ᐃΔ[Δ.ᐃᐃΔⵠⵠΔᐃ] = ᐃΔ[Δ.ΔΔΔⵠⵠⲆⲆ];
		ᐃΔ[Δ.ᐃᐃⵠᐃⲆᐃⵠ] = ᐃΔ[Δ.ΔΔΔⵠⵠⲆⲆ];
		ᐃΔ[Δ.ΔⲆᐃΔΔᐃⲆ] = [];
		ᐃΔ[Δ.ΔⲆᐃΔΔᐃⲆ][ᐃᐃⲆ] = ⵠᐃ.ⲆⲆᐃⲆⲆⲆΔ;
		ᐃΔ[Δ.ΔⲆᐃΔΔᐃⲆ][1] = ⵠᐃ.ᐃΔᐃΔⵠⲆⲆ;
		ᐃΔ[Δ.ΔⲆᐃΔΔᐃⲆ][2] = ⵠᐃ.ⲆⵠⵠᐃⲆΔⲆ;
		ᐃΔ[Δ.ⵠᐃᐃⲆⵠΔΔ] = ᐃΔ[Δ.ΔⲆᐃΔΔᐃⲆ];
		ᐃΔ[Δ.ⵠᐃᐃⵠΔᐃⲆᐃⵠ] = ᐃΔ[Δ.ΔⲆᐃΔΔᐃⲆ];
		ᐃΔ[Δ.ᐃⵠⵠΔⵠⵠᐃ] = ΔΔᐃⵠ(ⵠΔᐃ, [{
			f: ⲆΔⲆΔⲆΔᐃ,
			x: ᐃᐃᐃ,
			y: ΔΔᐃ,
			a: 1,
			r: Ⲇᐃⵠ,
			c: ["#352b10", ⵠ[104], ⵠ[363], "#e0e1e0", "#c4c4c4"]
		}], .22, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⵠⵠᐃᐃⲆΔᐃ] = ᐃΔ[Δ.ᐃⵠⵠΔⵠⵠᐃ];
		ᐃΔ[Δ.ΔᐃⵠⲆⲆⵠΔ] = ΔΔᐃⵠ(ΔⵠΔ, [{
			f: ⵠΔΔᐃⲆᐃⵠ,
			x: ᐃᐃⲆ,
			y: ⵠᐃⲆⲆ,
			a: ΔᐃⲆⲆ,
			r: 0,
			c: ["#352b10", "#349970", "#245c45", "#348361", ⵠ[104], ⵠ[363]]
		}], .2, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃᐃⵠΔΔᐃᐃ] = ᐃΔ[Δ.ΔᐃⵠⲆⲆⵠΔ];
		ᐃΔ[Δ.ⵠᐃᐃᐃⲆⲆΔ] = ΔΔᐃⵠ(ⵠᐃⵠΔ, [{
			f: ΔⲆᐃⲆⵠⲆΔ,
			x: -1,
			y: 0,
			a: 1,
			r: 0,
			c: [ⵠ[254], ⵠ[544], ⵠ[502], ⵠ[377], ⵠ[275], ⵠ[201], ⵠ[460], ⵠ[211], ⵠ[544], ⵠ[502]]
		}, {
			f: ΔⲆⲆΔⵠⲆⵠ,
			x: -ᐃⲆΔ,
			y: ⵠⲆᐃ,
			a: 1,
			r: 0,
			c: [ⵠ[254], ⵠ[544], ⵠ[502], ⵠ[377], ⵠ[275], ⵠ[201], ⵠ[460], ⵠ[211], ⵠ[544], ⵠ[502]]
		}, {
			f: ⵠⵠⵠⲆᐃⲆⲆ,
			x: -ⵠⲆΔⲆ,
			y: 0,
			a: ΔᐃⲆⲆ,
			r: 0,
			c: [ⵠ[254], ⵠ[544], ⵠ[502], ⵠ[377], ⵠ[275], ⵠ[201], ⵠ[460], ⵠ[211], ⵠ[544], ⵠ[502]]
		}], .4, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃΔΔⲆΔⵠⲆ] = ᐃΔ[Δ.ⵠᐃᐃᐃⲆⲆΔ];
		ᐃΔ[Δ.ⲆⵠⲆⲆⲆⲆᐃ] = ΔΔᐃⵠ(1, [{
			f: ⲆⵠᐃΔⲆΔΔ,
			x: ᐃⵠⵠⲆ,
			y: ⵠᐃⲆⲆ,
			a: ΔΔΔᐃ,
			r: 0,
			c: [ⵠ[162], ⵠ[564]]
		}], 1.2, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ΔⲆΔⲆⲆᐃⵠ] = ΔΔᐃⵠ(ΔᐃⲆⲆ, [{
			f: ΔᐃΔⲆΔᐃΔ,
			x: 0,
			y: 0,
			a: ΔΔⵠΔ,
			r: 0,
			c: [ⵠ[254], ⵠ[357], ⵠ[132], ⵠ[53]]
		}], .14, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆⲆⵠΔⵠᐃΔ] = ᐃΔ[Δ.ΔⲆΔⲆⲆᐃⵠ];
		ᐃΔ[Δ.ⵠⲆᐃᐃᐃᐃΔ] = ΔΔᐃⵠ(ΔᐃⵠⲆ, [{
			f: ᐃᐃᐃⲆⵠ,
			x: ⵠⲆⵠⵠ,
			y: Ⲇᐃⵠ,
			a: ΔᐃⵠⲆ,
			r: ᐃᐃⲆ,
			c: [ⵠ[162], ⵠ[564]]
		}], .6, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆΔᐃᐃⵠΔᐃ] = ᐃΔ[Δ.ⵠⲆᐃᐃᐃᐃΔ];
		ᐃΔ[Δ.ⲆⲆᐃΔⲆⲆⲆ] = ΔΔᐃⵠ(ⲆᐃΔ, [{
			f: ᐃᐃᐃⲆⵠ,
			x: 0,
			y: ⵠⵠⵠ,
			a: Ⲇⵠᐃ,
			r: 0,
			c: ["#493d36", "#332b28"]
		}], .7, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃΔⵠΔΔᐃΔ] = ᐃΔ[Δ.ⲆⲆᐃΔⲆⲆⲆ];
		ᐃΔ[Δ.ΔⲆΔⲆⲆΔⵠ] = ΔΔᐃⵠ(ⵠⲆⲆ, [{
			f: ᐃᐃᐃⲆⵠ,
			x: 0,
			y: ᐃᐃᐃ,
			a: 1,
			r: 0,
			c: [ⵠ[485], "#b17238"]
		}], .6, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ΔⵠΔⲆᐃΔΔ] = ᐃΔ[Δ.ΔⲆΔⲆⲆΔⵠ];
		ᐃΔ[Δ.ⵠⵠΔᐃΔⵠⵠ] = ΔΔᐃⵠ(Ⲇⵠᐃ, [{
			f: ᐃᐃᐃⲆⵠ,
			x: ⵠⵠⵠ,
			y: Δⵠⵠⵠ,
			a: 1,
			r: 0,
			c: [ⵠ[104], ⵠ[363]]
		}], .6, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆΔⲆΔⲆᐃⵠ] = ᐃΔ[Δ.ⵠⵠΔᐃΔⵠⵠ];
		ᐃΔ[Δ.ᐃΔⵠᐃⵠⲆⲆ] = ΔΔᐃⵠ(1, [{
			f: ᐃᐃᐃⲆⵠ,
			x: ⲆⲆⵠⲆ,
			y: ⵠⵠⵠ,
			a: 1,
			r: ⵠᐃⲆⲆ,
			c: ["#328a56", "#449573"]
		}], .6, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃⲆᐃᐃᐃᐃᐃ] = ᐃΔ[Δ.ᐃΔⵠᐃⵠⲆⲆ];
		ᐃΔ[Δ.ΔⲆᐃΔⲆⲆᐃ] = ΔΔᐃⵠ(ΔⲆᐃⲆ, [{
			f: ᐃᐃᐃⲆⵠ,
			x: ΔⲆⲆ,
			y: 0,
			a: ⵠΔᐃ,
			r: ⵠⵠⵠ,
			c: ["#c98e2f", "#a36b11"]
		}], .6, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⵠⵠᐃΔⲆΔᐃ] = ᐃΔ[Δ.ΔⲆᐃΔⲆⲆᐃ];
		ᐃΔ[Δ.ᐃⵠΔᐃⲆⵠΔ] = ᐃΔ[Δ.ΔⲆᐃΔⲆⲆᐃ];
		ᐃΔ[Δ.ⵠᐃᐃⵠᐃⲆΔ] = ΔΔᐃⵠ(1, [{
			f: ᐃᐃᐃⲆⵠ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: ["#13a56d", "#098a58"]
		}], .6, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃΔⵠⵠⵠⵠⵠ] = ᐃΔ[Δ.ⵠᐃᐃⵠᐃⲆΔ];
		ᐃΔ[Δ.ⵠΔᐃⲆⵠⵠⵠ] = ᐃΔ[Δ.ⵠᐃᐃⵠᐃⲆΔ];
		ᐃΔ[Δ.ⵠΔᐃΔᐃΔΔ] = ΔΔᐃⵠ(ΔⲆᐃⲆ, [{
			f: ᐃᐃᐃⲆⵠ,
			x: ᐃᐃᐃ,
			y: Δⵠⵠⵠ,
			a: 1,
			r: 0,
			c: ["#3a8214", "#4a9c1e"]
		}], .6, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ΔⵠΔΔᐃⵠⲆ] = ᐃΔ[Δ.ⵠΔᐃΔᐃΔΔ];
		ᐃΔ[Δ.ⲆᐃⲆΔⵠⲆⲆ] = ᐃΔ[Δ.ⵠΔᐃΔᐃΔΔ];
		ᐃΔ[Δ.ⵠΔᐃⲆⲆᐃⵠ] = ΔΔᐃⵠ(ΔⵠΔ, [{
			f: ᐃᐃᐃⲆⵠ,
			x: ⲆⵠⲆⲆ,
			y: Ⲇᐃⵠ,
			a: 1,
			r: 0,
			c: ["#b22419", "#99110e"]
		}], .6, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃᐃⲆΔⲆⵠᐃ] = ᐃΔ[Δ.ⵠΔᐃⲆⲆᐃⵠ];
		ᐃΔ[Δ.ᐃⲆⵠᐃᐃⵠⲆ] = ᐃΔ[Δ.ⵠΔᐃⲆⲆᐃⵠ];
		ᐃΔ[Δ.ᐃⵠⵠᐃᐃᐃΔ] = ΔΔᐃⵠ(ⲆΔΔΔ, [{
			f: ΔⲆⲆᐃⵠⲆⲆ,
			x: -ⲆⵠΔⵠ,
			y: -2,
			a: ⵠΔᐃ,
			r: -Math.PI / 7,
			c: [ⵠ[539], ⵠ[86]]
		}, {
			f: ΔⲆⵠᐃᐃⵠᐃ,
			x: -2,
			y: -2,
			a: 1,
			r: -Math.PI / 7,
			c: [ⵠ[110], "#ec8d35", "#e96132"]
		}], .3, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⵠⲆⵠⲆΔΔΔ] = ᐃΔ[Δ.ᐃⵠⵠᐃᐃᐃΔ];
		ᐃΔ[Δ.ⵠᐃᐃΔᐃΔⵠ] = ΔΔᐃⵠ(1, [{
			f: ⵠⲆⲆⵠΔΔⲆ,
			x: -ΔᐃⵠΔ,
			y: -1,
			a: ⵠᐃⵠΔ,
			r: -Math.PI / 7,
			c: [ⵠ[539], ⵠ[86], ⵠ[278], ⵠ[374], "#0c2c2e"]
		}, {
			f: ΔⲆⵠᐃᐃⵠᐃ,
			x: -2,
			y: -1,
			a: ΔᐃⲆⲆ,
			r: -Math.PI / 7,
			c: [ⵠ[110], "#ec8d35", "#e96132"]
		}], .3, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃⲆᐃⵠΔⲆᐃ] = ᐃΔ[Δ.ⵠᐃᐃΔᐃΔⵠ];
		ᐃΔ[Δ.ⵠᐃᐃᐃⲆΔᐃ] = ΔΔᐃⵠ(ΔΔⵠΔ, [{
			f: ΔᐃᐃⵠⲆⲆⲆ,
			x: 2,
			y: 0,
			a: ⲆᐃΔ,
			r: Math.PI / ⲆᐃⲆΔ,
			c: [ⵠ[254], "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", ⵠ[363], "#d6d1d1"]
		}], .1, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠᐃⵠⵠⲆⲆⵠ] = ΔΔᐃⵠ(Δⵠᐃ, [{
			f: ⲆᐃⵠᐃᐃⲆΔ,
			x: ⲆᐃⵠΔ,
			y: ⲆⲆⵠⲆ,
			a: 1,
			r: Math.PI / 5,
			c: [ⵠ[254], ⵠ[0], ⵠ[463], "#eb2933", "#57b74e", "#42a54d", ⵠ[213], ⵠ[120]]
		}], .3, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔⵠⲆᐃΔΔΔ] = ΔΔᐃⵠ(ⵠΔᐃ, [{
			f: ΔⵠⲆΔⵠⲆⵠ,
			x: 2,
			y: 0,
			a: 1,
			r: Math.PI / 5,
			c: [ⵠ[89], ⵠ[185], "#493425", ⵠ[331], "#5e4530", "#563e2b"]
		}], .15, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔΔᐃⵠⲆᐃⵠ] = ΔΔᐃⵠ(ⵠⲆⲆ, [{
			f: ⵠᐃⵠⲆᐃⲆⵠ,
			x: 2,
			y: ΔΔᐃᐃ,
			a: ΔᐃⵠⲆ,
			r: Math.PI / ᐃΔΔⲆⵠ,
			c: [ⵠ[254], ⵠ[369], ⵠ[463], "#b1afaf", "#493d36", "#332b28"]
		}], .15, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔΔᐃΔⵠᐃⲆ] = ΔΔᐃⵠ(1, [{
			f: ⲆⵠᐃⲆᐃᐃⵠ,
			x: 2,
			y: ⲆⲆⵠⲆ,
			a: ⵠⲆⲆ,
			r: Math.PI / ΔΔⲆⲆⵠ,
			c: [ⵠ[254], ⵠ[411], ⵠ[479], ⵠ[411], ⵠ[345], ⵠ[318]]
		}], .15, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⲆΔΔⲆⲆⵠⵠ] = ΔΔᐃⵠ(ΔⵠΔ, [{
			f: ᐃᐃΔΔⲆⲆᐃ,
			x: 2,
			y: ΔⲆⲆ,
			a: ⲆᐃΔ,
			r: Math.PI / 5,
			c: [ⵠ[254], "#6ad9e8", ⵠ[133], "#95e9f5", "#022320", "#011e19", ⵠ[ⲆⵠⲆⲆⵠ]]
		}], .15, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ᐃⵠⵠᐃⵠᐃⵠ] = ΔΔᐃⵠ(1, [{
			f: ⵠΔΔⲆΔⵠΔ,
			x: ⲆⵠΔⵠ,
			y: 0,
			a: Δᐃⵠⵠ,
			r: Math.PI / 5,
			c: [ⵠ[254], ⵠ[10], ⵠ[121], "#cc81e7", ⵠ[376], ⵠ[293], ⵠ[100]]
		}], .15, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠᐃⲆⲆΔⲆΔ] = ΔΔᐃⵠ(1, [{
			f: ⲆΔΔᐃᐃ,
			x: -ΔᐃΔᐃ,
			y: 5,
			a: 1,
			r: -Math.PI / 5,
			c: [ⵠ[254], ⵠ[91], ⵠ[254], ⵠ[539], ⵠ[86], ⵠ[539], ⵠ[86]]
		}], .45, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔᐃΔΔΔΔᐃ] = ΔΔᐃⵠ(Δᐃⵠⵠ, [{
			f: ⲆΔΔᐃᐃ,
			x: -ᐃⲆᐃᐃ,
			y: ΔⲆⵠⵠ,
			a: 1,
			r: -Math.PI / ΔΔᐃᐃⵠ,
			c: [ⵠ[254], ⵠ[91], ⵠ[254], ⵠ[539], ⵠ[86], ⵠ[369], ⵠ[463]]
		}], .45, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⲆⲆⲆΔⲆᐃⵠ] = ΔΔᐃⵠ(ⵠᐃⵠΔ, [{
			f: ⲆΔΔᐃᐃ,
			x: -2,
			y: ΔΔⲆⲆⵠ,
			a: 1,
			r: -Math.PI / ⵠⲆⲆᐃ,
			c: [ⵠ[254], ⵠ[91], ⵠ[254], ⵠ[345], ⵠ[318], ⵠ[411], ⵠ[479]]
		}], .45, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ᐃⲆΔⵠΔΔᐃ] = ΔΔᐃⵠ(ᐃⲆΔ, [{
			f: ⲆΔΔᐃᐃ,
			x: -ΔⵠⲆᐃ,
			y: 5,
			a: ⵠⲆⲆ,
			r: -Math.PI / ᐃᐃᐃⲆ,
			c: [ⵠ[254], ⵠ[91], ⵠ[254], ⵠ[376], ⵠ[293], ⵠ[192], ⵠ[133]]
		}], .45, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⲆⲆⲆᐃᐃⲆⵠ] = ΔΔᐃⵠ(ⵠⲆΔⲆ, [{
			f: ⲆΔΔᐃᐃ,
			x: -ΔΔⲆᐃ,
			y: Ⲇᐃⵠᐃ,
			a: 1,
			r: -Math.PI / ΔⲆⲆⵠ,
			c: [ⵠ[254], ⵠ[91], ⵠ[254], ⵠ[376], ⵠ[293], ⵠ[ⲆΔⵠⵠΔ], ⵠ[121]]
		}], .45, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔⲆⲆᐃⲆⵠᐃ] = [];
		ᐃΔ[Δ.ΔⲆⲆᐃⲆⵠᐃ][ᐃᐃⲆ] = ⵠᐃ.ᐃᐃⵠⵠᐃⲆⵠ;
		ᐃΔ[Δ.ΔⲆⲆᐃⲆⵠᐃ][1] = ⵠᐃ.ΔΔᐃⵠⲆⲆⲆ;
		ᐃΔ[Δ.ΔⲆⲆᐃⲆⵠᐃ][2] = ⵠᐃ.ΔⵠΔⵠΔⵠⲆ;
		ᐃΔ[Δ.ᐃΔᐃᐃΔⲆⵠ] = ᐃΔ[Δ.ΔⲆⲆᐃⲆⵠᐃ];
		ᐃΔ[Δ.ΔⵠⲆΔⲆⲆᐃ] = ᐃΔ[Δ.ΔⲆⲆᐃⲆⵠᐃ];
		ᐃΔ[Δ.ᐃΔⵠⵠᐃⲆⲆ] = ΔΔᐃⵠ(ΔᐃΔⲆ, [{
			f: ΔᐃΔΔᐃⲆⵠ,
			x: -5,
			y: -5,
			a: ⲆΔΔΔ,
			r: 0,
			c: [ⵠ[302], ⵠ[278], ⵠ[374]]
		}], .23, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⲆⵠᐃᐃᐃᐃΔ] = ΔΔᐃⵠ(1, [{
			f: ⲆΔᐃⲆⲆ,
			x: -5,
			y: -ⲆⲆᐃᐃ,
			a: 1,
			r: 0,
			c: ["#282823", "#877c2d", ⵠ[411]]
		}], .43, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⲆᐃΔᐃⲆⵠⲆ] = ΔΔᐃⵠ(ᐃⲆΔ, [{
			f: ⵠⲆᐃⵠᐃ,
			x: -ΔⲆⲆⵠ,
			y: -ΔⵠⲆᐃᐃ,
			a: ΔᐃⵠⲆ,
			r: 0,
			c: [ⵠ[137], ⵠ[125], ⵠ[4]]
		}], .33, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ᐃΔᐃⲆΔΔⲆ] = ΔΔᐃⵠ(1, [{
			f: ΔⲆⲆᐃⵠⲆⲆ,
			x: ⵠⵠⵠΔ,
			y: -ⲆᐃⲆΔ,
			a: ᐃᐃΔ,
			r: Math.PI / 2.5,
			c: [ⵠ[539], ⵠ[86]]
		}], .3, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ᐃᐃⲆᐃⲆⵠⵠ] = ᐃΔ[Δ.ΔⵠⲆᐃΔΔΔ];
		ᐃΔ[Δ.ⲆⵠᐃⲆⲆⵠΔ] = ᐃΔ[Δ.ΔΔᐃⵠⲆᐃⵠ];
		ᐃΔ[Δ.ⵠⲆⵠΔⵠⵠⲆ] = ᐃΔ[Δ.ΔΔᐃΔⵠᐃⲆ];
		ᐃΔ[Δ.ΔⵠᐃᐃΔᐃΔ] = ᐃΔ[Δ.ⲆΔΔⲆⲆⵠⵠ];
		ᐃΔ[Δ.ⵠⵠΔᐃⵠΔΔ] = ᐃΔ[Δ.ᐃⵠⵠᐃⵠᐃⵠ];
		ᐃΔ[Δ.ⲆⲆᐃⲆⵠⲆⲆ] = ᐃΔ[Δ.ⵠᐃⲆⲆΔⲆΔ];
		ᐃΔ[Δ.ΔᐃᐃΔΔΔⵠ] = ᐃΔ[Δ.ΔᐃΔΔΔΔᐃ];
		ᐃΔ[Δ.ⲆⵠⵠⵠⵠΔᐃ] = ᐃΔ[Δ.ⲆⲆⲆΔⲆᐃⵠ];
		ᐃΔ[Δ.ⲆⲆⵠⲆⲆⲆⲆ] = ᐃΔ[Δ.ᐃⲆΔⵠΔΔᐃ];
		ᐃΔ[Δ.ⲆᐃΔⲆⲆⲆΔ] = ᐃΔ[Δ.ⲆⲆⲆᐃᐃⲆⵠ];
		ᐃΔ[Δ.ⲆⵠⲆᐃⵠᐃⲆ] = ΔΔᐃⵠ(1, [{
			f: ᐃⵠⲆΔΔΔⵠᐃⵠ,
			x: ⵠᐃⲆⲆ,
			y: 0,
			a: Ⲇⵠᐃ,
			r: 0
		}], .4, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⵠⵠⲆⵠⲆΔⵠ] = ΔΔᐃⵠ(ΔΔΔᐃ, [{
			f: ⵠᐃⵠᐃⲆⲆⲆ,
			x: ⵠⲆΔ,
			y: 0,
			a: 1,
			r: ⵠⲆΔ,
			c: [ⵠ[254], ⵠ[539], ⵠ[86], "#756e52", "#663f22", "#9e9577"]
		}], .45, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⵠⲆᐃΔⵠᐃΔ] = ᐃΔ[Δ.ⵠⵠⲆⵠⲆΔⵠ];
		ᐃΔ[Δ.ΔΔⵠΔⲆᐃⵠ] = ΔΔᐃⵠ(1, [{
			f: ΔᐃΔⵠΔⵠⲆ,
			x: -ΔΔᐃΔⵠ,
			y: -ⲆⲆⲆⲆ,
			a: ΔᐃΔⲆ,
			r: ΔΔᐃᐃ,
			c: [ⵠ[254], ⵠ[321], ⵠ[379], ⵠ[50], ⵠ[553], ⵠ[207]]
		}], .4, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⵠΔⵠⲆⲆⵠᐃ] = ᐃΔ[Δ.ΔΔⵠΔⲆᐃⵠ];
		ᐃΔ[Δ.ⵠΔⵠⲆᐃᐃⵠ] = ΔΔᐃⵠ(Δⵠᐃ, [{
			f: ⲆⲆⵠⵠⵠⲆᐃ,
			x: 0,
			y: 0,
			a: 1,
			r: ⲆⲆⵠⲆ,
			c: [ⵠ[254], ⵠ[243], ⵠ[247], ⵠ[307], ⵠ[341], ⵠ[283], ⵠ[40]]
		}], .4, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆⲆⵠΔⵠΔⵠ] = ᐃΔ[Δ.ⵠΔⵠⲆᐃᐃⵠ];
		ᐃΔ[Δ.ⲆΔΔⲆΔΔᐃ] = ΔΔᐃⵠ(1, [{
			f: ΔᐃΔⵠΔⵠⲆ,
			x: 0,
			y: ΔΔᐃᐃ,
			a: 1,
			r: ᐃᐃᐃ,
			c: [ⵠ[254], ⵠ[534], ⵠ[121], ⵠ[335], ⵠ[290], ⵠ[205]]
		}], .4, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆⵠⵠΔⲆΔᐃ] = ᐃΔ[Δ.ⲆΔΔⲆΔΔᐃ];
		ᐃΔ[Δ.ᐃᐃⲆⵠⲆΔΔ] = ΔΔᐃⵠ(1, [{
			f: ⵠᐃⵠⵠᐃΔⲆ,
			x: ⵠΔᐃⵠ,
			y: ᐃⵠⵠⲆ,
			a: 1,
			r: ⲆⲆⵠⲆ,
			c: [ⵠ[254], ⵠ[546], ⵠ[251], ⵠ[34], ⵠ[202], ⵠ[170]]
		}], .4, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃⲆⲆΔⵠΔⲆ] = ᐃΔ[Δ.ᐃᐃⲆⵠⲆΔΔ];
		ᐃΔ[Δ.ΔⵠΔᐃᐃΔⵠ] = ΔΔᐃⵠ(ⲆᐃΔ, [{
			f: ᐃΔΔΔⵠⲆⲆ,
			x: 0,
			y: ⵠΔᐃᐃ,
			a: ⲆΔΔΔ,
			r: 0,
			c: [ⵠ[254], ⵠ[298], ⵠ[230], ⵠ[378], ⵠ[230], ⵠ[298]]
		}], .45, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃΔⲆⲆΔΔΔ] = ᐃΔ[Δ.ΔⵠΔᐃᐃΔⵠ];
		ᐃΔ[Δ.ⵠⵠⵠΔΔᐃΔ] = ΔΔᐃⵠ(ⵠΔᐃ, [{
			f: ⵠᐃⲆᐃΔᐃⵠ,
			x: ΔΔᐃ,
			y: ⵠᐃⲆ,
			a: ΔᐃΔⲆ,
			r: 0,
			c: [ⵠ[254], ⵠ[463], ⵠ[369], ⵠ[298], ⵠ[230], ⵠ[378], ⵠ[230], ⵠ[298]]
		}], .35, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃⵠⵠᐃⵠΔⵠ] = ᐃΔ[Δ.ⵠⵠⵠΔΔᐃΔ];
		ᐃΔ[Δ.ΔᐃΔⵠΔⲆⲆ] = ΔΔᐃⵠ(ΔⵠⲆⲆ, [{
			f: ᐃⵠΔᐃΔΔⲆ,
			x: ΔΔᐃᐃ,
			y: ⵠΔᐃⵠ,
			a: ⲆᐃΔ,
			r: 0,
			c: [ⵠ[254], ⵠ[463], ⵠ[369], ⵠ[546], ⵠ[251], ⵠ[34], ⵠ[202], ⵠ[170]]
		}], .35, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ΔⲆⵠⲆΔⵠΔ] = ᐃΔ[Δ.ΔᐃΔⵠΔⲆⲆ];
		ᐃΔ[Δ.ᐃⲆⵠᐃⵠⵠⲆ] = ΔΔᐃⵠ(1, [{
			f: ᐃⵠΔᐃΔΔⲆ,
			x: 0,
			y: ⵠΔᐃᐃ,
			a: ⵠⲆΔⲆ,
			r: 0,
			c: [ⵠ[254], "#7d8b90", "#9facaa", ⵠ[243], ⵠ[247], ⵠ[307], ⵠ[341], ⵠ[283], ⵠ[40]]
		}], .35, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆⲆⲆΔΔⵠⵠ] = ᐃΔ[Δ.ᐃⲆⵠᐃⵠⵠⲆ];
		ᐃΔ[Δ.ΔⲆⲆΔⵠΔⲆ] = ΔΔᐃⵠ(ΔⵠⲆⲆ, [{
			f: ⵠΔⲆⲆΔᐃⵠ,
			x: ΔΔᐃ,
			y: 0,
			a: 1,
			r: 0,
			c: [ⵠ[254], ⵠ[463], ⵠ[369], ⵠ[321], ⵠ[379], ⵠ[50], ⵠ[553], ⵠ[207]]
		}], .35, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆⲆⵠᐃⵠⲆⲆ] = ᐃΔ[Δ.ΔⲆⲆΔⵠΔⲆ];
		ᐃΔ[Δ.ᐃⵠΔᐃⲆΔⲆ] = ΔΔᐃⵠ(1, [{
			f: ⵠΔⲆⲆΔᐃⵠ,
			x: ⵠᐃⲆ,
			y: 0,
			a: ΔⵠΔ,
			r: ᐃⵠⵠⲆ,
			c: [ⵠ[254], ⵠ[463], ⵠ[369], ⵠ[534], ⵠ[121], ⵠ[335], ⵠ[290], ⵠ[205]]
		}], .35, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⵠⲆΔⵠᐃⵠⵠ] = ᐃΔ[Δ.ᐃⵠΔᐃⲆΔⲆ];
		ᐃΔ[Δ.ⵠⵠΔΔᐃⲆᐃ] = ΔΔᐃⵠ(ΔᐃⵠⲆ, [{
			f: ⲆΔᐃⲆⵠᐃⵠ,
			x: 0,
			y: ⵠⲆΔ,
			a: 1,
			r: 0,
			c: [ⵠ[254], ⵠ[323], ⵠ[397], "#644928", ⵠ[397], "#735534"]
		}], .6, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃⵠᐃᐃⲆΔᐃ] = ᐃΔ[Δ.ⵠⵠΔΔᐃⲆᐃ];
		ᐃΔ[Δ.ⵠⲆⲆΔⵠⵠΔ] = ΔΔᐃⵠ(1, [{
			f: ⲆΔⲆΔᐃ,
			x: ⲆⲆⵠⲆ,
			y: Ⲇᐃⵠ,
			a: 1,
			r: ⵠⵠⵠΔ,
			c: [ⵠ[254], ⵠ[321], ⵠ[379], ⵠ[50], ⵠ[207], ⵠ[553]]
		}], .6, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃΔⵠᐃᐃⲆⵠ] = ᐃΔ[Δ.ⵠⲆⲆΔⵠⵠΔ];
		ᐃΔ[Δ.ⵠᐃⲆΔΔⵠⵠ] = ΔΔᐃⵠ(ᐃᐃΔ, [{
			f: ⲆΔⲆΔᐃ,
			x: ΔΔᐃ,
			y: 0,
			a: 1,
			r: ᐃⵠⵠⲆ,
			c: [ⵠ[254], ⵠ[534], ⵠ[121], ⵠ[335], ⵠ[290], ⵠ[205]]
		}], .6, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆᐃⵠᐃⲆⲆΔ] = ᐃΔ[Δ.ⵠᐃⲆΔΔⵠⵠ];
		ᐃΔ[Δ.ⵠⵠⲆⵠᐃΔⲆ] = ΔΔᐃⵠ(ⲆΔΔΔ, [{
			f: ⲆⵠΔΔⵠⵠⲆ,
			x: ⵠⲆᐃ,
			y: 0,
			a: 1,
			r: 0,
			c: [ⵠ[254], ⵠ[546], ⵠ[251], ⵠ[34], "#9a8636", ⵠ[170]]
		}], .6, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆⲆⵠⲆΔᐃᐃ] = ᐃΔ[Δ.ⵠⵠⲆⵠᐃΔⲆ];
		ᐃΔ[Δ.ᐃⲆᐃᐃⲆΔⵠ] = ΔΔᐃⵠ(1, [{
			f: ⲆⲆⵠⲆᐃⲆⲆ,
			x: ΔΔᐃ,
			y: 0,
			a: ΔⵠΔ,
			r: ΔΔᐃ,
			c: [ⵠ[254], ⵠ[243], ⵠ[247], ⵠ[307], ⵠ[341], ⵠ[283], ⵠ[40]]
		}], .6, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆΔⵠᐃᐃⲆⵠ] = ᐃΔ[Δ.ᐃⲆᐃᐃⲆΔⵠ];
		ᐃΔ[Δ.ⵠⵠᐃΔⵠⵠᐃ] = ΔΔᐃⵠ(1, [{
			f: ⲆΔΔⵠΔⲆⲆ,
			x: 0,
			y: 2,
			a: 1,
			r: Ⲇᐃⵠ,
			c: [ⵠ[240], "#9e8838", ⵠ[59], ⵠ[323], ⵠ[229], ⵠ[229], ⵠ[229], ⵠ[59], ⵠ[59], ⵠ[59]]
		}], .35, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆⲆΔⲆΔⵠᐃ] = ᐃΔ[Δ.ⵠⵠᐃΔⵠⵠᐃ];
		ᐃΔ[Δ.ⲆⵠᐃΔΔΔΔ] = ΔΔᐃⵠ(ΔᐃΔⲆ, [{
			f: ᐃᐃⲆᐃⵠΔᐃ,
			x: Δⵠⵠⵠ,
			y: -ⲆΔⵠⵠⵠ,
			a: 1,
			r: ⵠⵠⲆⵠ,
			c: ["#dd5d57", ⵠ[ⵠⵠⵠ], "#5e5d5e", ⵠ[ΔΔᐃᐃ]]
		}], 1.4, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃⲆᐃᐃᐃⵠⲆ] = ΔΔᐃⵠ(ⵠⲆΔⲆ, [{
			f: ᐃᐃⲆᐃⵠΔᐃ,
			x: ⲆⵠⲆⲆ,
			y: -3,
			a: ᐃᐃΔ,
			r: 0,
			c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
		}], 1.4, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆⵠᐃΔᐃΔᐃ] = ᐃΔ[Δ.ᐃⲆᐃᐃᐃⵠⲆ];
		ᐃΔ[Δ.Δᐃⵠⵠⵠⵠⵠ] = ΔΔᐃⵠ(ⲆᐃΔ, [{
			f: ᐃΔⲆⵠⵠⲆΔ,
			x: -3,
			y: -ΔⲆⵠᐃ,
			a: 1,
			r: 0,
			c: ["#cec0c4", ⵠ[0], "#6d6768"]
		}], .9, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ΔΔⲆⵠᐃΔᐃ] = ΔΔᐃⵠ(1, [{
			f: ᐃΔⲆⵠⵠⲆΔ,
			x: -ⵠⵠΔⵠ,
			y: -3,
			a: ΔᐃⵠⲆ,
			r: 0,
			c: ["#d4e9ec", "#37b1d7", "#506c71"]
		}], .9, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃⵠᐃᐃⵠΔᐃ] = ᐃΔ[Δ.ΔΔⲆⵠᐃΔᐃ];
		ᐃΔ[Δ.ΔᐃⵠⵠΔⵠΔ] = ΔΔᐃⵠ(ⲆᐃΔ, [{
			f: ᐃᐃΔⵠΔᐃΔ,
			x: -3,
			y: -ᐃⵠΔᐃ,
			a: Δⵠᐃ,
			r: ⵠⵠⵠ,
			c: ["#ef96be", ⵠ[ⵠⵠⵠ]]
		}], .5, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⵠⲆⲆΔᐃᐃⵠ] = ΔΔᐃⵠ(1, [{
			f: ᐃᐃΔⵠΔᐃΔ,
			x: -ⲆⲆᐃⵠ,
			y: -ᐃΔⵠⲆ,
			a: 1,
			r: 0,
			c: ["#55423e", ⵠ[0]]
		}], .5, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⵠⲆΔΔⵠⲆⵠ] = ΔΔᐃⵠ(ⵠΔᐃ, [{
			f: ⲆΔᐃΔⲆⵠΔ,
			x: ⵠⵠⲆⵠ,
			y: ⵠᐃⲆⲆ,
			a: ⵠᐃⵠΔ,
			r: 0,
			c: [ⵠ[ΔⲆⲆ], "#e7e2e2", "#b35c46", "#a34d37"]
		}], .25, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ΔᐃᐃⲆⵠⵠᐃ] = ΔΔᐃⵠ(1, [{
			f: ⲆΔᐃΔⲆⵠΔ,
			x: ᐃᐃⲆ,
			y: ᐃᐃⲆ,
			a: 1,
			r: Ⲇᐃⵠ,
			c: ["#14151b", ⵠ[91], "#b35c46", "#a34d37"]
		}], .25, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⵠᐃⵠⵠΔⵠΔ] = ΔΔᐃⵠ(1, [{
			f: ᐃᐃΔⵠΔᐃΔ,
			x: 0,
			y: Δⵠⵠⵠ,
			a: ⵠⲆⲆ,
			r: ⵠᐃⲆⲆ,
			c: ["#201851", "#b6222a"]
		}], .5, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ᐃⲆⵠⵠⲆΔⲆ] = ΔΔᐃⵠ(1, [{
			f: ᐃᐃΔⵠΔᐃΔ,
			x: -3,
			y: -3,
			a: 1,
			r: 0,
			c: ["#231f20", "#b6222a"]
		}], .5, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⵠΔΔⲆⲆⵠⲆ] = ΔΔᐃⵠ(1, [{
			f: ᐃᐃΔⵠΔᐃΔ,
			x: -ⵠⵠΔⵠ,
			y: -ΔΔᐃΔ,
			a: ΔⵠΔ,
			r: 0,
			c: [ⵠ[0], "#b6222a"]
		}], .5, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⵠⲆⲆᐃΔⵠⲆ] = ΔΔᐃⵠ(1, [{
			f: ⵠΔⲆΔⲆᐃⵠ,
			x: Δⵠⵠⵠ,
			y: ΔΔᐃᐃ,
			a: 1,
			r: 0,
			c: [ⵠ[329], ⵠ[161], ⵠ[454], ⵠ[20]]
		}], .4, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ᐃΔΔᐃⲆᐃᐃ] = ᐃΔ[Δ.ⵠⲆⲆᐃΔⵠⲆ];
		ᐃΔ[Δ.ᐃΔᐃΔΔᐃⵠ] = ΔΔᐃⵠ(1, [{
			f: ᐃΔᐃΔΔΔΔ,
			x: Δⵠⵠⵠ,
			y: 0,
			a: ⵠᐃⵠΔ,
			r: ⵠⵠⵠ,
			c: [ⵠ[454], ⵠ[20], ⵠ[329], ⵠ[161]]
		}], .4, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⲆⵠΔⵠᐃΔⵠ] = ᐃΔ[Δ.ᐃΔᐃΔΔᐃⵠ];
		ᐃΔ[Δ.ᐃᐃΔᐃΔⲆⵠ] = ΔΔᐃⵠ(ΔⲆᐃⲆ, [{
			f: ⵠⵠΔΔΔΔⲆ,
			x: ⵠⲆᐃ,
			y: 0,
			a: ⲆᐃΔ,
			r: ⵠⵠⵠΔ,
			c: [ⵠ[239], "#dee7e7", "#b8cccb", ⵠ[0], "#e3e8e8"]
		}], .4, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⲆⵠΔᐃΔⵠⲆ] = ᐃΔ[Δ.ᐃᐃΔᐃΔⲆⵠ];
		ᐃΔ[Δ.ΔⲆⵠⵠⵠᐃΔ] = ΔΔᐃⵠ(ΔΔⵠΔ, [{
			f: ⲆⲆᐃⲆⵠⵠΔ,
			x: 0,
			y: 5,
			a: ᐃⲆΔ,
			r: 0,
			c: [ⵠ[239], "#c5232c", "#84191d", "#a72027", ⵠ[364], ⵠ[457]]
		}], .35, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔΔⵠⵠⵠΔᐃ] = ᐃΔ[Δ.ΔⲆⵠⵠⵠᐃΔ];
		ᐃΔ[Δ.ᐃΔᐃΔΔⲆⲆ] = ΔΔᐃⵠ(ⲆᐃΔ, [{
			f: ⵠΔᐃⵠⲆⵠᐃ,
			x: 0,
			y: ⵠⲆⲆᐃ,
			a: ⵠᐃⵠΔ,
			r: 0,
			c: [ⵠ[239], "#0f964c", "#106e3b", "#138344", ⵠ[364], ⵠ[457], "#C5232C", "#A92D2D"]
		}], .35, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔᐃⵠᐃⲆⲆᐃ] = ᐃΔ[Δ.ᐃΔᐃΔΔⲆⲆ];
		ᐃΔ[Δ.ΔⵠⲆΔΔΔΔ] = ΔΔᐃⵠ(ᐃᐃΔ, [{
			f: ⲆᐃΔⵠΔⲆⵠⵠΔ,
			x: -ΔⲆᐃΔ,
			y: -ⲆⲆΔⲆ,
			a: 1,
			r: 0,
			c: [ⵠ[0], "#cec0c4"]
		}], .35, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⵠⲆⵠΔΔΔᐃ] = ᐃΔ[Δ.ΔⵠⲆΔΔΔΔ];
		ᐃΔ[Δ.ΔΔⵠᐃΔⵠᐃ] = [];
		ᐃΔ[Δ.ΔΔⵠᐃΔⵠᐃ][ᐃⵠⵠⲆ] = ⵠᐃ.ⵠⲆᐃⵠΔⵠⵠ;
		ᐃΔ[Δ.ΔΔⵠᐃΔⵠᐃ][ⵠᐃⵠΔ] = ⵠᐃ.ΔᐃᐃⲆᐃᐃⲆ;
		ᐃΔ[Δ.ΔΔⵠᐃΔⵠᐃ][ᐃⲆᐃⵠ] = ⵠᐃ.ᐃᐃΔⵠⵠⵠᐃ;
		ᐃΔ[Δ.ᐃⵠⵠⵠⵠⲆⵠ] = ᐃΔ[Δ.ΔΔⵠᐃΔⵠᐃ];
		ᐃΔ[Δ.ⵠΔⲆⵠΔΔⵠ] = [];
		ᐃΔ[Δ.ⵠΔⲆⵠΔΔⵠ][ⵠⵠⵠ] = ⵠᐃ.ΔⲆΔΔᐃΔᐃ;
		ᐃΔ[Δ.ⵠΔⲆⵠΔΔⵠ][ⲆᐃΔ] = ⵠᐃ.ⵠⲆⲆⵠΔⵠΔ;
		ᐃΔ[Δ.ⵠΔⲆⵠΔΔⵠ][2] = ⵠᐃ.ⵠΔᐃᐃᐃⲆᐃ;
		ᐃΔ[Δ.ⲆΔΔⵠⲆΔⲆ] = ᐃΔ[Δ.ⵠΔⲆⵠΔΔⵠ];
		ᐃΔ[Δ.ΔΔⵠΔΔᐃⲆ] = ᐃΔ[Δ.ⵠΔⲆⵠΔΔⵠ];
		ᐃΔ[Δ.ᐃⲆⵠᐃᐃΔᐃ] = [];
		ᐃΔ[Δ.ᐃⲆⵠᐃᐃΔᐃ][ⵠⲆΔ] = ⵠᐃ.ΔⲆᐃⵠⲆⵠⲆ;
		ᐃΔ[Δ.ᐃⲆⵠᐃᐃΔᐃ][1] = ⵠᐃ.ΔΔⵠΔΔΔΔ;
		ᐃΔ[Δ.ᐃⲆⵠᐃᐃΔᐃ][2] = ⵠᐃ.ᐃᐃⲆⲆⲆΔᐃ;
		ᐃΔ[Δ.ⲆΔⵠⵠΔⵠⵠ] = ᐃΔ[Δ.ᐃⲆⵠᐃᐃΔᐃ];
		ᐃΔ[Δ.ᐃⲆⵠΔⵠⲆΔ] = ᐃΔ[Δ.ᐃⲆⵠᐃᐃΔᐃ];
		ᐃΔ[Δ.ⵠⲆⲆΔᐃΔΔ] = [];
		ᐃΔ[Δ.ⵠⲆⲆΔᐃΔΔ][Ⲇᐃⵠ] = ⵠᐃ.ⵠΔᐃⲆᐃᐃΔ;
		ᐃΔ[Δ.ⵠⲆⲆΔᐃΔΔ][1] = ⵠᐃ.ⵠΔᐃⲆᐃᐃΔ;
		ᐃΔ[Δ.ⵠⲆⲆΔᐃΔΔ][2] = ⵠᐃ.ⵠΔᐃⲆᐃᐃΔ;
		ᐃΔ[Δ.ⲆⲆᐃΔᐃᐃⵠ] = ᐃΔ[Δ.ⵠⲆⲆΔᐃΔΔ];
		ᐃΔ[Δ.ⵠⵠᐃⵠⵠⲆΔ] = [];
		ᐃΔ[Δ.ⵠⵠᐃⵠⵠⲆΔ][ⵠΔᐃⵠ] = ⵠᐃ.ⵠΔᐃⲆΔⲆⲆ;
		ᐃΔ[Δ.ⵠⵠᐃⵠⵠⲆΔ][1] = ⵠᐃ.ᐃᐃⵠΔᐃⲆⵠ;
		ᐃΔ[Δ.ⵠⵠᐃⵠⵠⲆΔ][ⲆᐃΔⲆ] = ⵠᐃ.ᐃᐃⲆᐃᐃᐃⲆ;
		ᐃΔ[Δ.ⲆⵠᐃᐃⲆΔΔ] = ᐃΔ[Δ.ⵠⵠᐃⵠⵠⲆΔ];
		ᐃΔ[Δ.ΔᐃⵠΔΔⵠᐃ] = ᐃΔ[Δ.ⵠⵠᐃⵠⵠⲆΔ];
		ᐃΔ[Δ.ΔⵠⵠΔⲆΔᐃ] = [];
		ᐃΔ[Δ.ΔⵠⵠΔⲆΔᐃ][0] = ⵠᐃ.ⲆᐃᐃⵠⲆᐃⲆ;
		ᐃΔ[Δ.ΔⵠⵠΔⲆΔᐃ][1] = ⵠᐃ.ⲆᐃᐃⵠⲆᐃⲆ;
		ᐃΔ[Δ.ΔⵠⵠΔⲆΔᐃ][ⲆⵠΔⵠ] = ⵠᐃ.ⲆᐃᐃⵠⲆᐃⲆ;
		ᐃΔ[Δ.ΔⵠΔΔⲆⵠᐃ] = ᐃΔ[Δ.ΔⵠⵠΔⲆΔᐃ];
		ᐃΔ[Δ.ᐃⲆⲆΔⲆᐃⵠ] = [];
		ᐃΔ[Δ.ᐃⲆⲆΔⲆᐃⵠ][0] = ⵠᐃ.ⵠⵠᐃᐃⲆᐃᐃᐃᐃ;
		ᐃΔ[Δ.ᐃⲆⲆΔⲆᐃⵠ][1] = ⵠᐃ.ΔⵠᐃᐃΔⲆΔΔⲆ;
		ᐃΔ[Δ.ᐃⲆⲆΔⲆᐃⵠ][2] = ⵠᐃ.ᐃΔΔⲆⲆⵠᐃⵠⲆ;
		ᐃΔ[Δ.ΔᐃⵠᐃᐃⵠΔ] = ᐃΔ[Δ.ᐃⲆⲆΔⲆᐃⵠ];
		ᐃΔ[Δ.ΔΔΔⲆᐃᐃⵠ] = ᐃΔ[Δ.ᐃⲆⲆΔⲆᐃⵠ];
		ᐃΔ[Δ.ᐃⵠⵠᐃⲆᐃⵠ] = [];
		ᐃΔ[Δ.ᐃⵠⵠᐃⲆᐃⵠ][0] = ⵠᐃ.ᐃΔⲆᐃⲆΔΔ;
		ᐃΔ[Δ.ᐃⵠⵠᐃⲆᐃⵠ][1] = ⵠᐃ.ⲆⲆΔⵠⵠⲆΔ;
		ᐃΔ[Δ.ᐃⵠⵠᐃⲆᐃⵠ][2] = ⵠᐃ.ⵠᐃᐃⲆΔⵠⵠ;
		ᐃΔ[Δ.ⵠⵠⵠⲆⲆΔΔ] = ᐃΔ[Δ.ᐃⵠⵠᐃⲆᐃⵠ];
		ᐃΔ[Δ.ᐃΔᐃΔΔⲆᐃ] = ᐃΔ[Δ.ᐃⵠⵠᐃⲆᐃⵠ];
		ᐃΔ[Δ.ΔΔⵠⲆΔΔⵠ] = [];
		ᐃΔ[Δ.ΔΔⵠⲆΔΔⵠ][ⵠⵠⲆⵠ] = ⵠᐃ.ⵠΔᐃᐃᐃⲆΔ;
		ᐃΔ[Δ.ΔΔⵠⲆΔΔⵠ][ΔⵠⲆⲆ] = ⵠᐃ.ⲆⵠΔⲆΔΔⵠ;
		ᐃΔ[Δ.ΔΔⵠⲆΔΔⵠ][ΔΔⲆⲆ] = ⵠᐃ.ⲆᐃΔᐃⲆΔΔ;
		ᐃΔ[Δ.ᐃᐃΔᐃΔⵠΔ] = ᐃΔ[Δ.ΔΔⵠⲆΔΔⵠ];
		ᐃΔ[Δ.ᐃⵠⵠⲆⲆᐃⲆ] = ᐃΔ[Δ.ΔΔⵠⲆΔΔⵠ];
		ᐃΔ[Δ.ⲆᐃᐃⲆᐃⲆΔ] = [];
		ᐃΔ[Δ.ⲆᐃᐃⲆᐃⲆΔ][0] = ⵠᐃ.ⵠⵠΔΔⲆⲆⵠ;
		ᐃΔ[Δ.ⲆᐃᐃⲆᐃⲆΔ][ⵠᐃⵠΔ] = ⵠᐃ.ⲆⲆⲆⵠⲆⲆⲆ;
		ᐃΔ[Δ.ⲆᐃᐃⲆᐃⲆΔ][2] = ⵠᐃ.ⲆΔⲆⵠⵠⵠⵠ;
		ᐃΔ[Δ.ⲆⲆᐃⲆᐃΔⲆ] = ᐃΔ[Δ.ⲆᐃᐃⲆᐃⲆΔ];
		ᐃΔ[Δ.ⵠⵠⲆⵠⵠⲆⵠ] = ᐃΔ[Δ.ⲆᐃᐃⲆᐃⲆΔ];
		ᐃΔ[Δ.ΔⵠⵠⲆⲆᐃⵠ] = [];
		ᐃΔ[Δ.ΔⵠⵠⲆⲆᐃⵠ][ⵠⲆⵠⵠ] = ⵠᐃ.ⲆⵠⲆᐃⲆᐃᐃ;
		ᐃΔ[Δ.ΔⵠⵠⲆⲆᐃⵠ][1] = ⵠᐃ.ⵠⲆⲆⵠᐃⲆᐃ;
		ᐃΔ[Δ.ΔⵠⵠⲆⲆᐃⵠ][2] = ⵠᐃ.ᐃᐃⲆⵠᐃΔⵠ;
		ᐃΔ[Δ.ΔΔⲆᐃᐃⵠΔ] = ᐃΔ[Δ.ΔⵠⵠⲆⲆᐃⵠ];
		ᐃΔ[Δ.ΔⵠⵠΔⲆⵠⲆ] = ᐃΔ[Δ.ΔⵠⵠⲆⲆᐃⵠ];
		ᐃΔ[Δ.ⵠᐃⲆᐃⵠΔⵠ] = [];
		ᐃΔ[Δ.ⵠᐃⲆᐃⵠΔⵠ][0] = ⵠᐃ.ⲆⲆⲆᐃΔⵠⵠ;
		ᐃΔ[Δ.ⵠᐃⲆᐃⵠΔⵠ][1] = ⵠᐃ.Δⵠⵠᐃᐃᐃᐃ;
		ᐃΔ[Δ.ⵠᐃⲆᐃⵠΔⵠ][2] = ⵠᐃ.ⵠⲆΔΔᐃΔⵠ;
		ᐃΔ[Δ.ΔΔⲆⵠⲆΔⵠ] = ᐃΔ[Δ.ⵠᐃⲆᐃⵠΔⵠ];
		ᐃΔ[Δ.ⵠᐃᐃᐃⵠΔⵠ] = ᐃΔ[Δ.ⵠᐃⲆᐃⵠΔⵠ];
		ᐃΔ[Δ.ᐃⵠΔᐃΔⵠΔ] = [];
		ᐃΔ[Δ.ᐃⵠΔᐃΔⵠΔ][0] = ⵠᐃ.ⲆⵠΔⲆᐃᐃⵠ;
		ᐃΔ[Δ.ᐃⵠΔᐃΔⵠΔ][1] = ⵠᐃ.ⵠΔΔⵠⵠΔⵠ;
		ᐃΔ[Δ.ᐃⵠΔᐃΔⵠΔ][2] = ⵠᐃ.ᐃᐃᐃΔΔⵠΔ;
		ᐃΔ[Δ.ⵠΔᐃΔᐃᐃⲆ] = ᐃΔ[Δ.ᐃⵠΔᐃΔⵠΔ];
		ᐃΔ[Δ.ᐃᐃΔᐃⲆⲆⵠ] = ᐃΔ[Δ.ᐃⵠΔᐃΔⵠΔ];
		ᐃΔ[Δ.ΔᐃⲆΔΔΔⵠ] = [];
		ᐃΔ[Δ.ΔᐃⲆΔΔΔⵠ][0] = ⵠᐃ.ⵠᐃⲆᐃⲆᐃΔ;
		ᐃΔ[Δ.ΔᐃⲆΔΔΔⵠ][ⲆᐃΔ] = ⵠᐃ.ⵠⵠⲆⵠΔΔⲆ;
		ᐃΔ[Δ.ΔᐃⲆΔΔΔⵠ][2] = ⵠᐃ.ⵠⲆᐃⵠΔΔⲆ;
		ᐃΔ[Δ.ⲆⲆᐃᐃⵠᐃⲆ] = ᐃΔ[Δ.ΔᐃⲆΔΔΔⵠ];
		ᐃΔ[Δ.ᐃⲆᐃⲆΔΔⵠ] = ᐃΔ[Δ.ΔᐃⲆΔΔΔⵠ];
		ᐃΔ[Δ.ⲆⵠΔⵠⵠᐃⵠ] = [];
		ᐃΔ[Δ.ⲆⵠΔⵠⵠᐃⵠ][ᐃᐃⲆ] = ⵠᐃ.ⲆΔΔⵠⲆᐃⲆ;
		ᐃΔ[Δ.ⲆⵠΔⵠⵠᐃⵠ][1] = ⵠᐃ.ΔⲆⵠΔⵠⵠⲆ;
		ᐃΔ[Δ.ⲆⵠΔⵠⵠᐃⵠ][2] = ⵠᐃ.ΔΔⲆᐃⵠΔΔ;
		ᐃΔ[Δ.ᐃⲆⲆΔⵠᐃᐃ] = ᐃΔ[Δ.ⲆⵠΔⵠⵠᐃⵠ];
		ᐃΔ[Δ.ⲆⵠΔΔΔⲆⵠ] = ᐃΔ[Δ.ⲆⵠΔⵠⵠᐃⵠ];
		ᐃΔ[Δ.ΔⲆᐃᐃᐃΔΔ] = [];
		ᐃΔ[Δ.ΔⲆᐃᐃᐃΔΔ][ⵠⲆΔ] = ⵠᐃ.ᐃᐃⵠΔΔΔᐃ;
		ᐃΔ[Δ.ΔⲆᐃᐃᐃΔΔ][ΔᐃⵠⲆ] = ⵠᐃ.ΔⵠΔᐃᐃᐃⲆ;
		ᐃΔ[Δ.ΔⲆᐃᐃᐃΔΔ][ΔΔⲆⲆ] = ⵠᐃ.ᐃⲆΔᐃⵠⵠΔ;
		ᐃΔ[Δ.ΔᐃⵠⲆᐃᐃᐃ] = ᐃΔ[Δ.ΔⲆᐃᐃᐃΔΔ];
		ᐃΔ[Δ.ⵠΔᐃⲆᐃⲆⵠ] = ᐃΔ[Δ.ΔⲆᐃᐃᐃΔΔ];
		ᐃΔ[Δ.ⲆΔⵠⲆⲆ] = [];
		ᐃΔ[Δ.ⲆΔⵠⲆⲆ][0] = ⵠᐃ.ⲆΔⵠⲆⲆ;
		ᐃΔ[Δ.ⲆΔⵠⲆⲆ][1] = ⵠᐃ.ⲆΔⵠⲆⲆ;
		ᐃΔ[Δ.ⲆΔⵠⲆⲆ][2] = ⵠᐃ.ⲆΔⵠⲆⲆ;
		ᐃΔ[Δ.ᐃᐃⵠⵠΔⵠⵠⲆⵠ] = ᐃΔ[Δ.ⲆΔⵠⲆⲆ];
		ᐃΔ[Δ.ⵠⲆᐃⵠⲆⲆⲆ] = ᐃΔ[Δ.ⲆΔⵠⲆⲆ];
		ᐃΔ[Δ.ⵠⲆΔᐃⵠ] = [];
		ᐃΔ[Δ.ⵠⲆΔᐃⵠ][0] = ⵠᐃ.ⵠⲆΔᐃⵠ;
		ᐃΔ[Δ.ⵠⲆΔᐃⵠ][Δᐃⵠⵠ] = ⵠᐃ.ⵠⲆΔᐃⵠ;
		ᐃΔ[Δ.ⵠⲆΔᐃⵠ][2] = ⵠᐃ.ⵠⲆΔᐃⵠ;
		ᐃΔ[Δ.ⲆᐃᐃⲆᐃⵠᐃⵠⵠ] = ᐃΔ[Δ.ⵠⲆΔᐃⵠ];
		ᐃΔ[Δ.ᐃᐃⲆⵠᐃᐃᐃ] = ᐃΔ[Δ.ⵠⲆΔᐃⵠ];
		ᐃΔ[Δ.ⲆᐃⲆΔΔ] = [];
		ᐃΔ[Δ.ⲆᐃⲆΔΔ][ⵠᐃⲆ] = ⵠᐃ.ⲆᐃⲆΔΔ;
		ᐃΔ[Δ.ⲆᐃⲆΔΔ][1] = ⵠᐃ.ⲆᐃⲆΔΔ;
		ᐃΔ[Δ.ⲆᐃⲆΔΔ][ΔΔⲆᐃ] = ⵠᐃ.ⲆᐃⲆΔΔ;
		ᐃΔ[Δ.ⲆΔΔⲆⲆΔⲆⵠᐃ] = ᐃΔ[Δ.ⲆᐃⲆΔΔ];
		ᐃΔ[Δ.ΔᐃΔⵠᐃⵠᐃ] = ᐃΔ[Δ.ⲆᐃⲆΔΔ];
		ᐃΔ[Δ.ΔⲆⲆⲆΔ] = [];
		ᐃΔ[Δ.ΔⲆⲆⲆΔ][ⵠᐃⲆⲆ] = ⵠᐃ.ΔⲆⲆⲆΔ;
		ᐃΔ[Δ.ΔⲆⲆⲆΔ][1] = ⵠᐃ.ΔⲆⲆⲆΔ;
		ᐃΔ[Δ.ΔⲆⲆⲆΔ][ΔᐃⵠΔ] = ⵠᐃ.ΔⲆⲆⲆΔ;
		ᐃΔ[Δ.ΔⵠⵠΔᐃᐃⵠ] = ᐃΔ[Δ.ΔⲆⲆⲆΔ];
		ᐃΔ[Δ.ΔⵠⲆⲆⲆᐃⲆ] = [];
		ᐃΔ[Δ.ΔⵠⲆⲆⲆᐃⲆ][0] = ⵠᐃ.ᐃⵠΔΔⲆΔⵠ;
		ᐃΔ[Δ.ΔⵠⲆⲆⲆᐃⲆ][Δⵠᐃ] = ⵠᐃ.ⲆᐃΔⵠⵠΔⲆ;
		ᐃΔ[Δ.ΔⵠⲆⲆⲆᐃⲆ][ᐃᐃΔⵠ] = ⵠᐃ.ᐃΔⲆⵠⵠᐃΔ;
		ᐃΔ[Δ.ⲆⲆⵠⲆᐃⵠΔ] = ᐃΔ[Δ.ΔⵠⲆⲆⲆᐃⲆ];
		ᐃΔ[Δ.ᐃⵠⲆᐃⲆⵠΔ] = ᐃΔ[Δ.ΔⵠⲆⲆⲆᐃⲆ];
		ᐃΔ[Δ.ⵠⵠⲆΔⲆⲆΔ] = [];
		ᐃΔ[Δ.ⵠⵠⲆΔⲆⲆΔ][ⵠⲆⵠⵠ] = ⵠᐃ.ⵠⵠⵠⵠⵠΔΔ;
		ᐃΔ[Δ.ⵠⵠⲆΔⲆⲆΔ][ΔⲆᐃⲆ] = ⵠᐃ.ᐃⲆⲆⵠᐃⵠᐃ;
		ᐃΔ[Δ.ⵠⵠⲆΔⲆⲆΔ][2] = ⵠᐃ.ΔⲆⵠΔᐃⵠⵠ;
		ᐃΔ[Δ.ᐃⵠⲆᐃⲆᐃⵠ] = ᐃΔ[Δ.ⵠⵠⲆΔⲆⲆΔ];
		ᐃΔ[Δ.ΔᐃⵠᐃⲆⵠⵠ] = ᐃΔ[Δ.ⵠⵠⲆΔⲆⲆΔ];
		ᐃΔ[Δ.ᐃΔⵠⵠⲆⵠΔ] = [];
		ᐃΔ[Δ.ᐃΔⵠⵠⲆⵠΔ][ᐃⵠⵠⲆ] = ⵠᐃ.ⲆⲆⲆᐃⵠΔⲆ;
		ᐃΔ[Δ.ᐃΔⵠⵠⲆⵠΔ][ᐃᐃΔ] = ⵠᐃ.ⲆⵠᐃⲆⲆΔⵠ;
		ᐃΔ[Δ.ᐃΔⵠⵠⲆⵠΔ][2] = ⵠᐃ.ⵠᐃΔⲆΔⵠⵠ;
		ᐃΔ[Δ.ᐃⲆΔΔᐃⲆΔ] = ᐃΔ[Δ.ᐃΔⵠⵠⲆⵠΔ];
		ᐃΔ[Δ.ⲆⵠΔⲆᐃⵠᐃ] = ᐃΔ[Δ.ᐃΔⵠⵠⲆⵠΔ];
		ᐃΔ[Δ.ⵠⵠᐃⵠⲆΔᐃ] = [];
		ᐃΔ[Δ.ⵠⵠᐃⵠⲆΔᐃ][ⵠⲆᐃ] = ⵠᐃ.ΔⵠΔⲆⲆⵠᐃ;
		ᐃΔ[Δ.ⵠⵠᐃⵠⲆΔᐃ][ΔᐃⵠⲆ] = ⵠᐃ.ΔΔⵠΔⲆⵠΔ;
		ᐃΔ[Δ.ⵠⵠᐃⵠⲆΔᐃ][ⲆᐃΔⲆ] = ⵠᐃ.ΔᐃⵠΔⵠⵠᐃ;
		ᐃΔ[Δ.ⲆΔᐃⵠⲆΔⵠ] = ᐃΔ[Δ.ⵠⵠᐃⵠⲆΔᐃ];
		ᐃΔ[Δ.ᐃΔΔΔⵠⵠΔ] = ᐃΔ[Δ.ⵠⵠᐃⵠⲆΔᐃ];
		ᐃΔ[Δ.ΔΔⲆⲆᐃⲆΔ] = [];
		ᐃΔ[Δ.ΔΔⲆⲆᐃⲆΔ][0] = ⵠᐃ.ΔᐃΔⲆᐃⵠⵠ;
		ᐃΔ[Δ.ΔΔⲆⲆᐃⲆΔ][1] = ⵠᐃ.ΔΔΔⲆⵠⲆΔ;
		ᐃΔ[Δ.ΔΔⲆⲆᐃⲆΔ][2] = ⵠᐃ.ΔᐃⵠⲆΔⲆⵠ;
		ᐃΔ[Δ.ᐃⲆⵠᐃⵠᐃΔ] = ᐃΔ[Δ.ΔΔⲆⲆᐃⲆΔ];
		ᐃΔ[Δ.ⲆΔᐃⵠⲆΔᐃ] = ᐃΔ[Δ.ΔΔⲆⲆᐃⲆΔ];
		ᐃΔ[Δ.ᐃᐃΔΔᐃᐃⵠ] = [];
		ᐃΔ[Δ.ᐃᐃΔΔᐃᐃⵠ][0] = ⵠᐃ.ⲆⲆᐃΔΔⲆⵠ;
		ᐃΔ[Δ.ᐃᐃΔΔᐃᐃⵠ][1] = ⵠᐃ.ΔⲆⵠⵠᐃⵠⵠ;
		ᐃΔ[Δ.ᐃᐃΔΔᐃᐃⵠ][2] = ⵠᐃ.ᐃᐃⵠⵠᐃⵠⵠ;
		ᐃΔ[Δ.ᐃⵠⵠⵠΔⲆⲆ] = ᐃΔ[Δ.ᐃᐃΔΔᐃᐃⵠ];
		ᐃΔ[Δ.ⲆⲆⵠΔᐃΔΔ] = ᐃΔ[Δ.ᐃᐃΔΔᐃᐃⵠ];
		ᐃΔ[Δ.ⵠⲆᐃⵠΔⲆᐃ] = [];
		ᐃΔ[Δ.ⵠⲆᐃⵠΔⲆᐃ][0] = ⵠᐃ.ⲆᐃⵠⲆⵠⲆⲆΔⵠ;
		ᐃΔ[Δ.ⵠⲆᐃⵠΔⲆᐃ][ΔΔⵠΔ] = ⵠᐃ.ⲆⵠⲆᐃⲆᐃΔΔᐃ;
		ᐃΔ[Δ.ⵠⲆᐃⵠΔⲆᐃ][ⲆᐃΔⲆ] = ⵠᐃ.ΔᐃΔᐃΔᐃⵠᐃⵠ;
		ᐃΔ[Δ.ᐃⵠΔⵠΔΔΔ] = ᐃΔ[Δ.ⵠⲆᐃⵠΔⲆᐃ];
		ᐃΔ[Δ.ΔⵠⲆᐃΔⵠΔ] = ᐃΔ[Δ.ⵠⲆᐃⵠΔⲆᐃ];
		ᐃΔ[Δ.ⲆⵠᐃⲆᐃⵠᐃ] = [];
		ᐃΔ[Δ.ⲆⵠᐃⲆᐃⵠᐃ][0] = ⵠᐃ.ⲆᐃⲆΔⵠⵠⵠ;
		ᐃΔ[Δ.ⲆⵠᐃⲆᐃⵠᐃ][ⵠΔᐃ] = ⵠᐃ.ᐃᐃΔᐃⵠᐃⵠ;
		ᐃΔ[Δ.ⲆⵠᐃⲆᐃⵠᐃ][ⲆⲆΔⲆ] = ⵠᐃ.ⵠⲆΔΔΔΔᐃ;
		ᐃΔ[Δ.ΔᐃᐃᐃΔᐃᐃ] = ᐃΔ[Δ.ⲆⵠᐃⲆᐃⵠᐃ];
		ᐃΔ[Δ.ᐃᐃΔⲆᐃᐃⲆ] = ᐃΔ[Δ.ⲆⵠᐃⲆᐃⵠᐃ];
		ᐃΔ[Δ.ΔΔΔΔⵠⲆᐃ] = [];
		ᐃΔ[Δ.ΔΔΔΔⵠⲆᐃ][0] = ⵠᐃ.ᐃⵠⵠⲆᐃⵠⵠ;
		ᐃΔ[Δ.ΔΔΔΔⵠⲆᐃ][ΔᐃⲆⲆ] = ⵠᐃ.ΔⵠⲆᐃᐃΔΔ;
		ᐃΔ[Δ.ΔΔΔΔⵠⲆᐃ][ᐃⲆᐃᐃ] = ⵠᐃ.ᐃᐃⵠᐃᐃᐃᐃ;
		ᐃΔ[Δ.ΔⲆⲆⲆⲆⲆⲆ] = ᐃΔ[Δ.ΔΔΔΔⵠⲆᐃ];
		ᐃΔ[Δ.ΔᐃⵠⵠᐃΔΔ] = ᐃΔ[Δ.ΔΔΔΔⵠⲆᐃ];
		ᐃΔ[Δ.ᐃᐃΔⲆⲆΔΔ] = [];
		ᐃΔ[Δ.ᐃᐃΔⲆⲆΔΔ][0] = ⵠᐃ.ΔΔⲆⲆᐃΔⵠ;
		ᐃΔ[Δ.ᐃᐃΔⲆⲆΔΔ][ᐃⲆΔ] = ⵠᐃ.ᐃᐃΔⲆΔΔᐃ;
		ᐃΔ[Δ.ᐃᐃΔⲆⲆΔΔ][ΔΔΔⵠ] = ⵠᐃ.ⲆΔⲆⲆⲆⲆΔ;
		ᐃΔ[Δ.ᐃⲆᐃⲆⲆᐃⵠ] = ᐃΔ[Δ.ᐃᐃΔⲆⲆΔΔ];
		ᐃΔ[Δ.ᐃΔⲆⲆⲆᐃⲆ] = ᐃΔ[Δ.ᐃᐃΔⲆⲆΔΔ];
		ᐃΔ[Δ.ΔΔᐃⲆⵠⵠⵠ] = [];
		ᐃΔ[Δ.ΔΔᐃⲆⵠⵠⵠ][0] = ⵠᐃ.ⵠᐃΔⲆⲆⵠⲆ;
		ᐃΔ[Δ.ΔΔᐃⲆⵠⵠⵠ][1] = ⵠᐃ.ΔⲆⵠⵠᐃΔΔ;
		ᐃΔ[Δ.ΔΔᐃⲆⵠⵠⵠ][2] = ⵠᐃ.ⵠⲆⵠΔᐃⲆⵠ;
		ᐃΔ[Δ.ⵠⲆⵠⵠⲆⵠⲆ] = ᐃΔ[Δ.ΔΔᐃⲆⵠⵠⵠ];
		ᐃΔ[Δ.ᐃΔⵠⵠⵠᐃⲆ] = ᐃΔ[Δ.ΔΔᐃⲆⵠⵠⵠ];
		ᐃΔ[Δ.ᐃᐃΔΔΔⵠᐃ] = [];
		ᐃΔ[Δ.ᐃᐃΔΔΔⵠᐃ][0] = ⵠᐃ.ΔⵠΔΔᐃᐃⵠ;
		ᐃΔ[Δ.ᐃᐃΔΔΔⵠᐃ][ⵠΔᐃ] = ⵠᐃ.ΔΔᐃⲆⵠΔⲆ;
		ᐃΔ[Δ.ᐃᐃΔΔΔⵠᐃ][ΔΔⲆᐃ] = ⵠᐃ.ΔΔΔΔΔᐃᐃ;
		ᐃΔ[Δ.ⲆΔᐃᐃΔΔⵠ] = ᐃΔ[Δ.ᐃᐃΔΔΔⵠᐃ];
		ᐃΔ[Δ.ⵠⲆⲆⲆⵠⵠⵠ] = ᐃΔ[Δ.ᐃᐃΔΔΔⵠᐃ];
		ᐃΔ[Δ.ⵠΔᐃᐃⵠⲆⵠ] = [];
		ᐃΔ[Δ.ⵠΔᐃᐃⵠⲆⵠ][0] = ⵠᐃ.ᐃΔΔⲆⲆⵠΔ;
		ᐃΔ[Δ.ⵠΔᐃᐃⵠⲆⵠ][ΔᐃⵠⲆ] = ⵠᐃ.ΔⵠⵠⵠⲆⲆⵠ;
		ᐃΔ[Δ.ⵠΔᐃᐃⵠⲆⵠ][2] = ⵠᐃ.ⵠᐃΔΔᐃΔⲆ;
		ᐃΔ[Δ.ⵠⲆΔⵠᐃⵠᐃ] = ᐃΔ[Δ.ⵠΔᐃᐃⵠⲆⵠ];
		ᐃΔ[Δ.ⲆⵠⵠⵠΔⵠΔ] = ᐃΔ[Δ.ⵠΔᐃᐃⵠⲆⵠ];
		ᐃΔ[Δ.ⵠᐃⵠΔΔⵠᐃ] = ΔΔᐃⵠ(1, [{
			f: ⲆΔⲆⲆΔΔᐃ,
			x: 0,
			y: ⵠⲆΔ,
			a: 1,
			r: ΔⲆⲆ,
			c: [ⵠ[254], "#515C57", "#3A4942", "#68736F", ⵠ[92], ⵠ[167], ⵠ[46], "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
		}, {
			f: ΔⵠᐃⲆⲆᐃⵠ,
			x: 0,
			y: 0,
			a: 1,
			r: ⵠΔᐃⵠ,
			c: ["#e4c027"]
		}], .14, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⵠΔⵠΔᐃⵠΔ] = ᐃΔ[Δ.ⵠᐃⵠΔΔⵠᐃ];
		ᐃΔ[Δ.ΔΔΔⲆⵠᐃᐃ] = ΔΔᐃⵠ(ᐃᐃΔ, [{
			f: ᐃᐃⵠΔⵠᐃᐃ,
			x: ⵠⵠⲆⵠ,
			y: 0,
			a: 1,
			r: ⵠⵠⵠΔ,
			c: [ⵠ[254], ⵠ[369], ⵠ[463], "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
		}], .18, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ΔᐃⵠⲆⵠⵠⵠ] = ᐃΔ[Δ.ΔΔΔⲆⵠᐃᐃ];
		ᐃΔ[Δ.ⵠΔᐃⵠᐃΔⲆ] = ΔΔᐃⵠ(ⲆΔΔΔ, [{
			f: ᐃΔⲆⵠΔⵠᐃ,
			x: ⵠΔᐃᐃ,
			y: ᐃⵠⵠⲆ,
			a: 1,
			r: ΔⲆⲆ,
			c: [ⵠ[254], ⵠ[474], ⵠ[285], "#261912", "#eee6c5", "#d1c599", ⵠ[474], ⵠ[285], "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", ⵠ[0], "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
		}], .32, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆⵠⲆᐃΔᐃΔ] = ᐃΔ[Δ.ⵠΔᐃⵠᐃΔⲆ];
		ᐃΔ[Δ.ⵠΔᐃⲆΔⵠⵠ] = ᐃΔ[Δ.ⵠΔᐃⵠᐃΔⲆ];
		ᐃΔ[Δ.ⲆᐃⵠᐃⲆⲆⵠ] = ΔΔᐃⵠ(1, [{
			f: ΔⵠⲆΔⲆⵠᐃ,
			x: 0,
			y: ⵠⵠⵠ,
			a: ᐃⲆΔ,
			r: 0,
			c: [ⵠ[254], ⵠ[432], ⵠ[352], ⵠ[394], ⵠ[432]]
		}], .17, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃⲆⵠⵠⵠⲆⲆ] = ᐃΔ[Δ.ⲆᐃⵠᐃⲆⲆⵠ];
		ᐃΔ[Δ.ΔᐃΔⲆΔΔⲆ] = ΔΔᐃⵠ(1, [{
			f: ⲆΔᐃᐃⵠⲆⲆ,
			x: 2,
			y: 0,
			a: 1,
			r: Math.PI / ΔΔⲆⲆⵠ,
			c: [ⵠ[254], ⵠ[373], ⵠ[126], ⵠ[394], ⵠ[432], ⵠ[432], ⵠ[352], ⵠ[349], ⵠ[131]]
		}], .12, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔⲆᐃΔᐃⲆᐃ] = ᐃΔ[Δ.ΔᐃΔⲆΔΔⲆ];
		ᐃΔ[Δ.ᐃΔⲆΔᐃⲆΔ] = ᐃΔ[Δ.ΔᐃΔⲆΔΔⲆ];
		ᐃΔ[Δ.ⵠΔⵠⵠᐃⵠΔ] = ΔΔᐃⵠ(ⵠⲆΔⲆ, [{
			f: ⵠⵠΔⲆⲆΔΔ,
			x: 2,
			y: 0,
			a: 1,
			r: Math.PI / 5,
			c: [ⵠ[254], ⵠ[373], ⵠ[126], "#765d42", ⵠ[349], ⵠ[131]]
		}], .12, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠⵠᐃⵠⵠᐃΔ] = ᐃΔ[Δ.ⵠΔⵠⵠᐃⵠΔ];
		ᐃΔ[Δ.ᐃΔᐃⵠⲆⲆΔ] = ΔΔᐃⵠ(ΔΔΔᐃ, [{
			f: ⲆᐃⵠⵠⲆⲆᐃ,
			x: 2,
			y: 0,
			a: 1,
			r: Math.PI / 5,
			c: [ⵠ[254], ⵠ[539], ⵠ[86], ⵠ[349], ⵠ[131], "#7a7575", "#454749", "#8c8787", ⵠ[369], ⵠ[463], "#aaa6a6"]
		}], .12, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠᐃΔⲆⵠⲆⲆ] = ᐃΔ[Δ.ᐃΔᐃⵠⲆⲆΔ];
		ᐃΔ[Δ.ⵠᐃΔⲆΔᐃᐃ] = ΔΔᐃⵠ(1, [{
			f: ⵠᐃΔⲆᐃⵠⵠ,
			x: ΔΔᐃΔⵠ,
			y: 0,
			a: Ⲇⵠᐃ,
			r: Math.PI / ᐃᐃΔᐃ,
			c: [ⵠ[254], ⵠ[345], ⵠ[318], "#a69e39", "#9c8828", "#bab143", ⵠ[411], ⵠ[479], "#d2ca59"]
		}], .12, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠΔⵠΔⲆᐃⵠ] = ᐃΔ[Δ.ⵠᐃΔⲆΔᐃᐃ];
		ᐃΔ[Δ.ⵠΔΔⲆᐃΔⲆ] = ΔΔᐃⵠ(1, [{
			f: ΔⵠΔⵠⵠⵠⲆ,
			x: ᐃⲆᐃᐃ,
			y: ⵠᐃⲆ,
			a: 1,
			r: Math.PI / 5,
			c: [ⵠ[254], ⵠ[376], ⵠ[293], "#4ba8b4", "#198a82", "#6ccad7", ⵠ[192], ⵠ[133], "#7bd9e6"]
		}], .12, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠΔΔᐃⵠⵠΔ] = ᐃΔ[Δ.ⵠΔΔⲆᐃΔⲆ];
		ᐃΔ[Δ.ⲆΔⵠⵠⵠᐃᐃ] = ΔΔᐃⵠ(1, [{
			f: ΔᐃⵠⲆᐃᐃⲆ,
			x: ΔⲆᐃΔ,
			y: ᐃᐃᐃ,
			a: 1,
			r: Math.PI / ⲆⲆᐃᐃ,
			c: [ⵠ[254], ⵠ[376], ⵠ[293], "#9443b1", "#6f1988", "#a752c6", "#9e35be", ⵠ[121], ⵠ[ⲆⲆⵠⲆⵠ]]
		}], .12, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⲆᐃΔᐃᐃⵠΔ] = ᐃΔ[Δ.ⲆΔⵠⵠⵠᐃᐃ];
		ᐃΔ[Δ.ⵠΔⵠⵠⲆⲆΔ] = ΔΔᐃⵠ(ΔⵠΔ, [{
			f: ᐃᐃⲆⲆΔᐃⲆ,
			x: 2,
			y: ⵠⲆᐃ,
			a: ⲆᐃΔ,
			r: Math.PI / 5,
			c: [ⵠ[254], "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
		}], .38, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔⵠⲆⵠⲆΔⵠ] = ᐃΔ[Δ.ⵠΔⵠⵠⲆⲆΔ];
		ᐃΔ[Δ.ᐃⵠΔⲆⵠⵠᐃ] = ᐃΔ[Δ.ⵠΔⵠⵠⲆⲆΔ];
		ᐃΔ[Δ.ⲆᐃⵠΔΔᐃΔ] = ΔΔᐃⵠ(1, [{
			f: ⲆⲆⵠⵠⵠ,
			x: 2,
			y: 0,
			a: ⲆΔΔΔ,
			r: Math.PI / ᐃᐃᐃⲆ,
			c: [ⵠ[254], ⵠ[539], ⵠ[86], ⵠ[369], ⵠ[463]]
		}], .52, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ᐃⲆⲆⲆΔΔⲆ] = ᐃΔ[Δ.ⲆᐃⵠΔΔᐃΔ];
		ᐃΔ[Δ.ᐃᐃᐃᐃⲆⲆⲆ] = ΔΔᐃⵠ(ΔⲆᐃᐃ, [{
			f: ᐃΔⵠⲆᐃᐃΔ,
			x: ⵠⲆⵠⵠ,
			y: Ⲇᐃⵠ,
			a: ΔⲆᐃᐃ,
			r: Math.PI / ᐃᐃⵠᐃΔ,
			c: [ⵠ[254], ⵠ[369], ⵠ[463]]
		}], .3, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠⲆΔΔⲆΔⲆ] = ᐃΔ[Δ.ᐃᐃᐃᐃⲆⲆⲆ];
		ᐃΔ[Δ.ᐃΔᐃΔΔⵠⲆ] = ΔΔᐃⵠ(1, [{
			f: ΔΔⲆⵠᐃⵠⵠ,
			x: 2,
			y: 0,
			a: 1,
			r: Math.PI / 5,
			c: [ⵠ[254], "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
		}], .52, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠⵠⲆⵠΔᐃᐃ] = ᐃΔ[Δ.ᐃΔᐃΔΔⵠⲆ];
		ᐃΔ[Δ.ⲆᐃⵠⲆᐃΔⵠ] = ΔΔᐃⵠ(ᐃⲆΔ, [{
			f: ⲆⲆⵠⵠⵠ,
			x: ᐃⲆᐃⵠ,
			y: ᐃⵠⵠⲆ,
			a: ΔⲆᐃᐃ,
			r: Math.PI / Ⲇᐃⵠᐃ,
			c: [ⵠ[254], ⵠ[345], ⵠ[318], ⵠ[411], ⵠ[479]]
		}], .52, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ᐃⵠⲆΔᐃⲆⵠ] = ᐃΔ[Δ.ⲆᐃⵠⲆᐃΔⵠ];
		ᐃΔ[Δ.ΔⵠⲆⲆΔΔⵠ] = ΔΔᐃⵠ(ΔⵠⲆⲆ, [{
			f: ⲆⲆⵠⵠⵠ,
			x: 2,
			y: 0,
			a: ΔⲆᐃⲆ,
			r: Math.PI / ⵠⵠᐃᐃ,
			c: [ⵠ[254], ⵠ[376], ⵠ[293], ⵠ[192], ⵠ[133]]
		}], .52, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ᐃⵠⵠⵠᐃⲆⵠ] = ᐃΔ[Δ.ΔⵠⲆⲆΔΔⵠ];
		ᐃΔ[Δ.ⵠΔΔΔⲆΔᐃ] = ΔΔᐃⵠ(ᐃⲆΔ, [{
			f: ⲆⲆⵠⵠⵠ,
			x: ΔⵠⲆᐃ,
			y: 0,
			a: 1,
			r: Math.PI / ᐃΔΔⲆⵠ,
			c: [ⵠ[254], ⵠ[376], ⵠ[293], ⵠ[10], ⵠ[121]]
		}], .52, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ᐃᐃⲆⲆⲆⲆⲆ] = ᐃΔ[Δ.ⵠΔΔΔⲆΔᐃ];
		ᐃΔ[Δ.ⵠⵠⵠΔΔΔᐃ] = [];
		ᐃΔ[Δ.ⵠⵠⵠΔΔΔᐃ][ⵠᐃⲆⲆ] = ⵠᐃ.ⵠΔⵠΔᐃᐃΔ;
		ᐃΔ[Δ.ⵠⵠⵠΔΔΔᐃ][1] = ⵠᐃ.ΔⵠⲆᐃᐃⵠⲆ;
		ᐃΔ[Δ.ⵠⵠⵠΔΔΔᐃ][ΔΔΔⵠ] = ⵠᐃ.ᐃⲆΔᐃⲆⲆΔ;
		ᐃΔ[Δ.ⵠᐃΔⵠⲆᐃΔ] = ᐃΔ[Δ.ⵠⵠⵠΔΔΔᐃ];
		ᐃΔ[Δ.ⵠⲆᐃⵠΔⵠⲆ] = ᐃΔ[Δ.ⵠⵠⵠΔΔΔᐃ];
		ᐃΔ[Δ.ⵠΔᐃⲆᐃⵠⵠ] = [];
		ᐃΔ[Δ.ⵠΔᐃⲆᐃⵠⵠ][0] = ⵠᐃ.ⲆⲆⵠᐃΔΔⵠ;
		ᐃΔ[Δ.ⵠΔᐃⲆᐃⵠⵠ][1] = ⵠᐃ.ΔⵠⲆⵠᐃᐃⲆ;
		ᐃΔ[Δ.ⵠΔᐃⲆᐃⵠⵠ][2] = ⵠᐃ.ⲆᐃⵠⲆΔⵠΔ;
		ᐃΔ[Δ.ⲆⵠᐃⲆⵠΔΔ] = ᐃΔ[Δ.ⵠΔᐃⲆᐃⵠⵠ];
		ᐃΔ[Δ.ⵠᐃᐃΔΔⲆⵠ] = ᐃΔ[Δ.ⵠΔᐃⲆᐃⵠⵠ];
		ᐃΔ[Δ.ΔΔᐃⵠⲆΔᐃ] = [];
		ᐃΔ[Δ.ΔΔᐃⵠⲆΔᐃ][ⲆⲆⵠⲆ] = ⵠᐃ.ⵠΔᐃⵠΔⲆΔ;
		ᐃΔ[Δ.ΔΔᐃⵠⲆΔᐃ][1] = ⵠᐃ.ᐃΔᐃⵠⵠᐃΔ;
		ᐃΔ[Δ.ΔΔᐃⵠⲆΔᐃ][ⲆⵠΔⵠ] = ⵠᐃ.ⲆᐃⲆⲆⵠⲆᐃ;
		ᐃΔ[Δ.ⲆΔⲆⲆΔᐃᐃ] = ᐃΔ[Δ.ΔΔᐃⵠⲆΔᐃ];
		ᐃΔ[Δ.ⵠᐃᐃⵠⲆΔΔ] = ᐃΔ[Δ.ΔΔᐃⵠⲆΔᐃ];
		ᐃΔ[Δ.ⵠⵠΔⲆⵠⲆⲆ] = [];
		ᐃΔ[Δ.ⵠⵠΔⲆⵠⲆⲆ][0] = ⵠᐃ.ⵠᐃᐃΔᐃᐃⵠ;
		ᐃΔ[Δ.ⵠⵠΔⲆⵠⲆⲆ][Ⲇⵠᐃ] = ⵠᐃ.ⲆᐃⵠΔᐃΔⲆ;
		ᐃΔ[Δ.ⵠⵠΔⲆⵠⲆⲆ][ΔⲆᐃΔ] = ⵠᐃ.ᐃⲆΔΔⵠΔⵠ;
		ᐃΔ[Δ.ΔᐃⵠⵠⲆᐃⵠ] = ᐃΔ[Δ.ⵠⵠΔⲆⵠⲆⲆ];
		ᐃΔ[Δ.ᐃᐃᐃⵠΔᐃᐃ] = ᐃΔ[Δ.ⵠⵠΔⲆⵠⲆⲆ];
		ᐃΔ[Δ.ⲆΔᐃⵠⲆᐃᐃ] = [];
		ᐃΔ[Δ.ⲆΔᐃⵠⲆᐃᐃ][ⵠⵠⵠ] = ⵠᐃ.ⲆⵠᐃΔⲆΔⲆ;
		ᐃΔ[Δ.ⲆΔᐃⵠⲆᐃᐃ][ᐃᐃΔ] = ⵠᐃ.ΔᐃⲆᐃΔΔⲆ;
		ᐃΔ[Δ.ⲆΔᐃⵠⲆᐃᐃ][2] = ⵠᐃ.ᐃⵠᐃⵠⵠᐃⵠ;
		ᐃΔ[Δ.ⲆⵠΔᐃⲆᐃΔ] = ᐃΔ[Δ.ⲆΔᐃⵠⲆᐃᐃ];
		ᐃΔ[Δ.ⲆᐃΔⲆΔΔⲆ] = ᐃΔ[Δ.ⲆΔᐃⵠⲆᐃᐃ];
		ᐃΔ[Δ.ⵠᐃⲆΔⲆΔⲆ] = [];
		ᐃΔ[Δ.ⵠᐃⲆΔⲆΔⲆ][0] = ⵠᐃ.ⵠⵠᐃⵠΔᐃⵠ;
		ᐃΔ[Δ.ⵠᐃⲆΔⲆΔⲆ][1] = ⵠᐃ.ᐃΔΔᐃⲆⲆᐃ;
		ᐃΔ[Δ.ⵠᐃⲆΔⲆΔⲆ][ⵠΔⵠΔ] = ⵠᐃ.ⵠᐃⲆⲆᐃⲆᐃ;
		ᐃΔ[Δ.ᐃⲆᐃⲆⲆᐃⲆ] = ᐃΔ[Δ.ⵠᐃⲆΔⲆΔⲆ];
		ᐃΔ[Δ.ΔᐃⲆⲆⲆⵠᐃ] = ᐃΔ[Δ.ⵠᐃⲆΔⲆΔⲆ];
		ᐃΔ[Δ.ᐃᐃⲆΔΔⵠⵠ] = [];
		ᐃΔ[Δ.ᐃᐃⲆΔΔⵠⵠ][ⵠΔᐃⵠ] = ⵠᐃ.ΔⵠᐃⲆΔⲆⵠ;
		ᐃΔ[Δ.ᐃᐃⲆΔΔⵠⵠ][1] = ⵠᐃ.ⵠᐃΔⵠᐃᐃᐃ;
		ᐃΔ[Δ.ᐃᐃⲆΔΔⵠⵠ][ⲆⵠΔⵠ] = ⵠᐃ.ⲆΔΔⲆΔⲆⵠ;
		ᐃΔ[Δ.ⲆᐃⲆᐃⵠΔΔ] = ᐃΔ[Δ.ᐃᐃⲆΔΔⵠⵠ];
		ᐃΔ[Δ.ⵠⵠⲆᐃΔⵠᐃ] = ᐃΔ[Δ.ᐃᐃⲆΔΔⵠⵠ];
		ᐃΔ[Δ.ΔΔⲆΔⲆΔΔ] = ΔΔᐃⵠ(1, [{
			f: ⵠⵠᐃⵠΔᐃⲆ,
			x: -ΔⲆᐃΔ,
			y: -2,
			a: 1,
			r: ΔⲆⲆ,
			c: [ⵠ[520], ⵠ[108], ⵠ[59], "#3a3a3a"]
		}], .8, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ΔⲆⵠᐃⵠⵠⲆ] = ᐃΔ[Δ.ΔΔⲆΔⲆΔΔ];
		ᐃΔ[Δ.ᐃⵠⲆᐃΔⵠⲆ] = ΔΔᐃⵠ(1, [{
			f: ΔⲆᐃⲆⵠΔⵠ,
			x: -ΔⲆᐃΔ,
			y: -ΔΔⲆⲆ,
			a: ΔⵠΔ,
			r: -Math.PI / 5,
			c: [ⵠ[520], ⵠ[59], ⵠ[108]]
		}], .08, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⲆᐃⲆᐃΔⲆΔ] = ᐃΔ[Δ.ᐃⵠⲆᐃΔⵠⲆ];
		ᐃΔ[Δ.ΔⲆᐃⵠⲆⵠΔ] = ΔΔᐃⵠ(ΔᐃΔⲆ, [{
			f: ⵠᐃᐃⲆⲆΔΔ,
			x: -ᐃᐃⲆⲆ,
			y: -2,
			a: ΔⲆᐃᐃ,
			r: Δⵠⵠⵠ,
			c: [ⵠ[520], "#178a99", "#0a6372", "#03282e"]
		}], .3, [ⵠ[112], ⵠ[112], ⵠ[112]], .7);
		ᐃΔ[Δ.ΔⵠΔⲆᐃᐃΔ] = ΔΔᐃⵠ(Δᐃⵠⵠ, [{
			f: ⵠᐃᐃⲆⲆΔΔ,
			x: -ⲆⵠΔⵠ,
			y: -ⵠΔⵠΔ,
			a: ΔⵠⲆⲆ,
			r: 0,
			c: [ⵠ[543], "#991616", "#750a0a", ⵠ[543]]
		}], .3, [ⵠ[112], ⵠ[112], ⵠ[112]], .7);
		ᐃΔ[Δ.ⲆⲆᐃⲆⵠᐃᐃ] = ΔΔᐃⵠ(1, [{
			f: ΔᐃⵠΔⲆⵠⵠ,
			x: ΔΔᐃᐃ,
			y: 0,
			a: 1,
			r: 0,
			c: [ⵠ[9], ⵠ[259]]
		}, {
			f: ᐃⵠⵠᐃΔᐃΔ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: [ⵠ[ᐃΔΔⲆⲆ], ⵠ[259], "#1c2528", ⵠ[435], ⵠ[279], "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
		}, {
			f: ⵠΔⵠⵠⵠᐃΔ,
			x: 0,
			y: ΔⲆⲆ,
			a: 1,
			r: 0,
			c: [ⵠ[435], ⵠ[279]]
		}, {
			f: ⵠᐃⵠⲆⵠᐃⲆ,
			x: 0,
			y: 0,
			a: ⵠⲆⲆ,
			r: ⵠΔᐃⵠ,
			c: [ⵠ[435], ⵠ[279], "#418ba5", "#59b8ce"]
		}], .3, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆᐃΔⵠᐃⲆⲆ] = ᐃΔ[Δ.ⲆⲆᐃⲆⵠᐃᐃ];
		ᐃΔ[Δ.ᐃᐃΔᐃΔΔⵠ] = ΔΔᐃⵠ(1, [{
			f: ⲆᐃΔᐃⵠΔⵠ,
			x: 45,
			y: 70,
			a: 1,
			r: ⵠⲆΔ,
			c: [ⵠ[254], ⵠ[298], ⵠ[230], ⵠ[378]]
		}], .6, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃⵠⵠᐃΔⲆᐃ] = ᐃΔ[Δ.ᐃᐃΔᐃΔΔⵠ];
		ᐃΔ[Δ.ᐃᐃⲆⵠⲆΔⵠ] = ΔΔᐃⵠ(ΔⵠΔ, [{
			f: ⵠⵠⵠΔⵠⵠΔ,
			x: ⵠᐃⲆ,
			y: Δⵠⵠⵠ,
			a: ΔⲆᐃⲆ,
			r: 0,
			c: [ⵠ[254], "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
		}], .52, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⲆⲆΔᐃΔΔⲆ] = ᐃΔ[Δ.ᐃᐃⲆⵠⲆΔⵠ];
		ᐃΔ[Δ.ΔᐃΔⵠΔᐃΔ] = ΔΔᐃⵠ(1, [{
			f: ᐃΔⲆⲆᐃΔΔ,
			x: Ⲇᐃⵠ,
			y: ΔΔᐃ,
			a: ⲆᐃΔ,
			r: 0,
			c: [ⵠ[79], ⵠ[38], ⵠ[524], "#1b1a25"]
		}], .12, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔΔΔᐃΔᐃⵠ] = ᐃΔ[Δ.ΔᐃΔⵠΔᐃΔ];
		ᐃΔ[Δ.ⲆⲆⵠⵠᐃᐃⲆ] = ΔΔᐃⵠ(1, [{
			f: ⵠⲆⲆᐃᐃⲆΔ,
			x: 0,
			y: 0,
			a: ᐃᐃΔ,
			r: 0,
			c: [ⵠ[79], ⵠ[38], ⵠ[524]]
		}], .25, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔᐃⲆΔᐃᐃᐃ] = ᐃΔ[Δ.ⲆⲆⵠⵠᐃᐃⲆ];
		ᐃΔ[Δ.ⲆⲆⲆⵠⵠⵠⵠ] = ΔΔᐃⵠ(1, [{
			f: ᐃⲆⲆⲆⲆⲆᐃ,
			x: ⵠⵠⵠ,
			y: 3,
			a: ΔᐃⵠⲆ,
			r: 0,
			c: [ⵠ[30], "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
		}], .39, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ᐃᐃᐃⲆΔΔⲆ] = ᐃΔ[Δ.ⲆⲆⲆⵠⵠⵠⵠ];
		ᐃΔ[Δ.ΔΔⵠⵠⲆⲆᐃ] = ΔΔᐃⵠ(ᐃⲆΔ, [{
			f: ᐃⲆⲆⲆⲆⲆᐃ,
			x: 0,
			y: 3,
			a: ⵠΔᐃ,
			r: ΔⲆⲆ,
			c: [ⵠ[30], "#8c7654", ⵠ[12], "#a88e6c", ⵠ[12], "#705845"]
		}], .39, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔⲆΔᐃⲆΔᐃ] = ᐃΔ[Δ.ΔΔⵠⵠⲆⲆᐃ];
		ᐃΔ[Δ.ᐃⲆΔⲆⲆⵠΔ] = ΔΔᐃⵠ(ᐃⲆΔ, [{
			f: ᐃΔⲆΔⵠᐃⲆ,
			x: ⵠᐃⲆⲆ,
			y: ΔⵠⵠᐃⲆ,
			a: Ⲇⵠᐃ,
			r: ⵠⲆⵠⵠ,
			c: [ⵠ[254], ⵠ[488], ⵠ[55], ⵠ[85], "#49B669", "#19994C", "#71C187"]
		}], .15, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔΔⵠⵠⵠᐃᐃ] = ᐃΔ[Δ.ᐃⲆΔⲆⲆⵠΔ];
		ᐃΔ[Δ.ᐃⵠⵠⲆᐃⲆᐃ] = ΔΔᐃⵠ(ΔᐃⲆⲆ, [{
			f: ᐃΔⲆΔⵠᐃⲆ,
			x: ⵠⵠⲆⵠ,
			y: 10,
			a: 1,
			r: ⵠᐃⲆ,
			c: [ⵠ[254], ⵠ[488], ⵠ[55], ⵠ[85], "#C45727", "#994617", "#DB9358"]
		}], .15, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠᐃⲆⲆⲆⵠⵠ] = ᐃΔ[Δ.ᐃⵠⵠⲆᐃⲆᐃ];
		ᐃΔ[Δ.ⲆΔΔⲆⲆᐃⲆ] = ΔΔᐃⵠ(ΔΔⵠΔ, [{
			f: ᐃΔⲆΔⵠᐃⲆ,
			x: 0,
			y: 10,
			a: 1,
			r: 0,
			c: [ⵠ[254], ⵠ[488], ⵠ[55], ⵠ[85], "#2792C1", "#196599", "#59C0D8"]
		}], .15, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ᐃΔᐃⵠⵠⲆΔ] = ᐃΔ[Δ.ⲆΔΔⲆⲆᐃⲆ];
		ᐃΔ[Δ.ⵠⲆⲆᐃⲆᐃᐃ] = ΔΔᐃⵠ(ⲆΔΔΔ, [{
			f: ⵠⲆⲆᐃⵠᐃΔ,
			x: -1,
			y: ΔΔᐃ,
			a: 1,
			r: ⵠⲆᐃ,
			c: [ⵠ[91], "#b03431", "#94312d", "#bd3c33", "#de5445"]
		}], .15, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠⵠⲆΔⲆⵠⵠ] = ᐃΔ[Δ.ⵠⲆⲆᐃⲆᐃᐃ];
		ᐃΔ[Δ.ΔΔΔᐃᐃᐃΔ] = ᐃΔ[Δ.ⵠⲆⲆᐃⲆᐃᐃ];
		ᐃΔ[Δ.ᐃⵠΔⲆⲆᐃⲆ] = ΔΔᐃⵠ(ΔᐃⲆⲆ, [{
			f: ⲆΔⲆΔᐃⵠⵠ,
			x: ᐃᐃⲆ,
			y: 0,
			a: ⵠⲆΔⲆ,
			r: 0,
			c: [ⵠ[254], "#cae9eb", "#75bcae", ⵠ[ᐃᐃᐃ], "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
		}], .2, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⲆⲆᐃΔⵠⵠⵠ] = ᐃΔ[Δ.ᐃⵠΔⲆⲆᐃⲆ];
		ᐃΔ[Δ.ΔᐃⲆⲆΔⲆᐃ] = ΔΔᐃⵠ(ⵠΔᐃ, [{
			f: ⵠⲆⵠᐃᐃⲆⲆ,
			x: ⲆⵠⲆⲆ,
			y: ⵠⲆᐃ,
			a: 1,
			r: Math.PI / 5,
			c: [ⵠ[254], "#284c4a", "#193533", "#c7efef", "#7fccca"]
		}], .75, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠᐃⲆⲆⵠΔΔ] = ᐃΔ[Δ.ΔᐃⲆⲆΔⲆᐃ];
		ᐃΔ[Δ.ᐃⵠⵠⲆᐃᐃⲆ] = ΔΔᐃⵠ(ᐃⲆΔ, [{
			f: ⲆⵠΔⵠΔᐃΔ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
		}], .55, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⲆⲆΔΔⵠⵠⲆ] = ΔΔᐃⵠ(ᐃᐃΔ, [{
			f: ⵠΔᐃⲆⵠⲆᐃ,
			x: ⵠᐃⲆⲆ,
			y: ᐃᐃⲆ,
			a: Δⵠᐃ,
			r: ΔΔᐃ,
			c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
		}], .55, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⵠᐃⵠⵠΔΔΔ] = ΔΔᐃⵠ(1, [{
			f: ⲆⵠΔⵠΔᐃΔ,
			x: ⵠⵠⲆⵠ,
			y: 0,
			a: 1,
			r: ⵠⵠⵠΔ,
			c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
		}], .55, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⵠᐃᐃΔⵠⲆⵠ] = ΔΔᐃⵠ(1, [{
			f: ⵠΔᐃⲆⵠⲆᐃ,
			x: ⵠⲆᐃ,
			y: ⲆⵠⲆⲆ,
			a: 1,
			r: ⵠΔᐃⵠ,
			c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
		}], .55, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ᐃⵠΔΔΔⵠⵠ] = ΔΔᐃⵠ(ΔⲆᐃᐃ, [{
			f: ⵠⲆⲆⵠΔⲆⵠ,
			x: 0,
			y: ⵠᐃⲆⲆ,
			a: 1,
			r: 0,
			c: ["#59ba72", "#94d966", "#5aa628", ⵠ[254], "#38874d"]
		}], .35, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ᐃⵠΔⲆⲆΔⲆ] = ΔΔᐃⵠ(ΔΔⵠΔ, [{
			f: ⵠⲆⲆⵠΔⲆⵠ,
			x: 0,
			y: 0,
			a: ΔΔⵠΔ,
			r: ⵠⲆΔ,
			c: ["#C45727", "#de7d46", "#DB9358", ⵠ[254], "#994617"]
		}], .35, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⲆΔΔⵠΔⵠΔ] = ΔΔᐃⵠ(1, [{
			f: ⵠⲆⲆⵠΔⲆⵠ,
			x: ⵠᐃⲆⲆ,
			y: ⵠΔᐃⵠ,
			a: ΔⵠⲆⲆ,
			r: ⵠⲆᐃ,
			c: ["#3a9dbd", "#59C0D8", "#48abcb", ⵠ[254], "#196599"]
		}], .35, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ᐃᐃⲆΔⲆⲆⲆ] = ΔΔᐃⵠ(Ⲇⵠᐃ, [{
			f: ᐃΔⲆᐃᐃ,
			x: ⵠⲆⵠⵠ,
			y: ⵠⲆᐃ,
			a: ΔⵠΔ,
			r: Math.PI / ⲆΔⲆⲆⵠ,
			c: [ⵠ[254], "#6d5041", "#4f3d35", ⵠ[369], ⵠ[463], "#757575"]
		}], .45, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠⵠᐃⵠⲆΔⵠ] = ᐃΔ[Δ.ᐃᐃⲆΔⲆⲆⲆ];
		ᐃΔ[Δ.ΔⵠᐃⲆΔⵠⲆ] = ΔΔᐃⵠ(Δᐃⵠⵠ, [{
			f: ᐃΔⲆᐃᐃ,
			x: 0,
			y: ⵠⵠⵠΔ,
			a: 1,
			r: Math.PI / 5,
			c: [ⵠ[254], ⵠ[345], ⵠ[318], ⵠ[411], ⵠ[479], "#b4ac45"]
		}], .45, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⲆΔᐃΔⵠⲆⲆ] = ᐃΔ[Δ.ΔⵠᐃⲆΔⵠⲆ];
		ᐃΔ[Δ.ⵠᐃⲆⲆⲆⵠⲆ] = ΔΔᐃⵠ(1, [{
			f: ᐃΔⲆᐃᐃ,
			x: ⵠⵠⵠ,
			y: 0,
			a: 1,
			r: Math.PI / 5,
			c: [ⵠ[254], ⵠ[376], ⵠ[293], ⵠ[192], ⵠ[133], "#42aab8"]
		}], .45, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠⵠᐃΔⲆⵠΔ] = ᐃΔ[Δ.ⵠᐃⲆⲆⲆⵠⲆ];
		ᐃΔ[Δ.ᐃⲆⲆⵠᐃⵠⵠ] = ΔΔᐃⵠ(ΔᐃⲆⲆ, [{
			f: ᐃΔⲆᐃᐃ,
			x: ⵠΔᐃᐃ,
			y: ⵠⵠⲆⵠ,
			a: Δᐃⵠⵠ,
			r: Math.PI / ⲆⲆᐃᐃ,
			c: [ⵠ[254], ⵠ[376], ⵠ[293], ⵠ[ᐃⵠᐃΔⲆ], ⵠ[121], "#a853c7"]
		}], .45, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠⵠᐃΔΔⲆΔ] = ᐃΔ[Δ.ᐃⲆⲆⵠᐃⵠⵠ];
		ᐃΔ[Δ.ΔⵠΔᐃΔΔᐃ] = ΔΔᐃⵠ(1, [{
			f: ⲆΔⲆᐃᐃⲆᐃ,
			x: 0,
			y: ⵠᐃⲆ,
			a: 1,
			r: ΔΔᐃ,
			c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
		}], .35, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔⲆᐃᐃⲆΔⲆ] = ᐃΔ[Δ.ΔⵠΔᐃΔΔᐃ];
		ᐃΔ[Δ.ΔΔⲆΔⲆⲆⲆ] = ΔΔᐃⵠ(1, [{
			f: ⲆΔⲆⲆᐃΔⵠ,
			x: ᐃⵠⵠⲆ,
			y: 0,
			a: ΔⲆᐃᐃ,
			r: ΔΔᐃ,
			c: [ⵠ[89], ⵠ[185], "#493425", ⵠ[331]]
		}], .35, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔⵠⲆⵠⲆⲆⵠ] = ᐃΔ[Δ.ΔΔⲆΔⲆⲆⲆ];
		ᐃΔ[Δ.ⲆⲆⲆⲆᐃⲆᐃ] = ΔΔᐃⵠ(1, [{
			f: ᐃⲆᐃⵠᐃⲆΔ,
			x: ΔΔᐃᐃ,
			y: -2,
			a: ⵠⲆⲆ,
			r: 0,
			c: [ⵠ[89], "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", ⵠ[574], "#747474", "#969696", ⵠ[490]]
		}], .4, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠᐃᐃⲆⵠΔⵠ] = ᐃΔ[Δ.ⲆⲆⲆⲆᐃⲆᐃ];
		ᐃΔ[Δ.ΔⲆΔΔΔᐃᐃ] = ΔΔᐃⵠ(1, [{
			f: ᐃΔᐃⲆⲆⵠᐃ,
			x: 0,
			y: 0,
			a: 1,
			r: ᐃⵠⵠⲆ,
			c: ["#dbce71", ⵠ[479], ⵠ[411]]
		}], .35, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ᐃᐃⲆⲆⲆᐃᐃ] = ᐃΔ[Δ.ΔⲆΔΔΔᐃᐃ];
		ᐃΔ[Δ.ᐃⵠⵠⵠⵠᐃⲆ] = ΔΔᐃⵠ(Δᐃⵠⵠ, [{
			f: ΔⵠᐃᐃΔΔⲆ,
			x: 0,
			y: 0,
			a: 1,
			r: ⵠΔᐃⵠ,
			c: ["#717171", "#485252", ⵠ[574], "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
		}], .45, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⲆⵠΔᐃΔⲆⵠ] = ᐃΔ[Δ.ᐃⵠⵠⵠⵠᐃⲆ];
		ᐃΔ[Δ.ⲆΔᐃⲆᐃⲆⵠ] = ΔΔᐃⵠ(ΔᐃΔⲆ, [{
			f: ⵠΔᐃΔⵠⲆᐃⵠⵠ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: ["#511f00", "#2f1300", ⵠ[ⵠⲆᐃ], "#d4d4d4", "#5b2400", "#984e21"]
		}], .15, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠⵠⵠⲆΔᐃⲆ] = ᐃΔ[Δ.ⲆΔᐃⲆᐃⲆⵠ];
		ᐃΔ[Δ.ⵠᐃⲆᐃᐃⵠᐃ] = ΔΔᐃⵠ(1, [{
			f: ⲆᐃⵠⵠΔⵠᐃⲆᐃ,
			x: 0,
			y: ᐃᐃⲆ,
			a: ⲆΔΔΔ,
			r: ⵠⲆΔ,
			c: ["#221e1b", ⵠ[0], "#f6f0e7"]
		}], .3, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ΔⵠᐃⲆⵠᐃⲆ] = ᐃΔ[Δ.ⵠᐃⲆᐃᐃⵠᐃ];
		ᐃΔ[Δ.ⲆᐃᐃⵠⲆⲆⵠ] = ΔΔᐃⵠ(Δᐃⵠⵠ, [{
			f: ⲆᐃᐃⲆⲆᐃᐃ,
			x: -ΔⲆⵠⵠ,
			y: -Ⲇᐃⵠᐃ,
			a: 1,
			r: ⵠΔᐃⵠ,
			c: [ⵠ[350], ⵠ[353], ⵠ[501]]
		}], .31, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ᐃᐃᐃΔⲆΔⵠ] = ΔΔᐃⵠ(1, [{
			f: ⵠᐃⵠⵠⵠᐃᐃ,
			x: ⵠⵠⵠ,
			y: 0,
			a: ΔΔΔᐃ,
			r: 0,
			c: ["#D7C393", "#a48c6c"]
		}], .22, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⵠⲆⲆᐃᐃⲆᐃ] = ΔΔᐃⵠ(1, [{
			f: ⲆΔⲆᐃΔⲆᐃⵠⵠ,
			x: ⵠΔᐃⵠ,
			y: 0,
			a: ⵠΔᐃ,
			r: ⵠᐃⲆⲆ,
			c: ["#93CBCE", "#E9F6F6"]
		}], .3, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠⵠⵠⵠⵠᐃᐃ] = ΔΔᐃⵠ(ΔⲆᐃᐃ, [{
			f: ⵠᐃⵠⵠⵠᐃᐃ,
			x: ᐃᐃⲆ,
			y: ⵠⵠⵠ,
			a: ⵠⲆΔⲆ,
			r: 0,
			c: ["#866432", "#6b4f25"]
		}], .22, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ΔⲆⵠᐃⵠΔⵠ] = ΔΔᐃⵠ(1, [{
			f: ΔᐃⵠᐃⲆⲆⵠΔᐃ,
			x: ⲆⵠⲆᐃ,
			y: 2,
			a: ᐃᐃΔ,
			r: 0,
			c: [ⵠ[231], ⵠ[460], ⵠ[201], "#2f2211", "#785931", ⵠ[404]]
		}], .22, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ΔΔᐃⲆⵠᐃⲆ] = ΔΔᐃⵠ(ΔⵠΔ, [{
			f: ⲆⵠΔΔᐃΔⵠⲆⲆ,
			x: 3,
			y: 2,
			a: ΔⲆᐃᐃ,
			r: 0,
			c: [ⵠ[231], ⵠ[460], ⵠ[201], "#2f2211", "#785931", ⵠ[404]]
		}], .22, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⲆᐃⲆᐃᐃⵠⲆ] = ᐃΔ[Δ.ΔⲆⵠᐃⵠΔⵠ];
		ᐃΔ[Δ.ⲆⲆⵠΔΔΔΔ] = ᐃΔ[Δ.ΔΔᐃⲆⵠᐃⲆ];
		ᐃΔ[Δ.ᐃⵠΔⵠⵠⲆⲆ] = ΔΔᐃⵠ(Δⵠᐃ, [{
			f: ΔⲆⵠⵠᐃΔⵠ,
			x: 0,
			y: ⵠⲆⵠⵠ,
			a: 1,
			r: ΔΔᐃᐃ,
			c: [ⵠ[231], "#717273", "#606162", "#a09f9f", "#878787", ⵠ[490]]
		}], .1, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ΔⵠⵠⲆᐃⵠᐃ] = ᐃΔ[Δ.ᐃⵠΔⵠⵠⲆⲆ];
		ᐃΔ[Δ.ⵠΔΔᐃΔⲆᐃ] = ΔΔᐃⵠ(1, [{
			f: ⵠⵠΔⲆⲆΔᐃ,
			x: ΔⲆⲆ,
			y: ΔΔᐃᐃ,
			a: ΔΔⵠΔ,
			r: Math.PI / ᐃᐃᐃᐃⵠ,
			c: [ⵠ[393], ⵠ[273], ⵠ[396], ⵠ[151], ⵠ[158], ⵠ[92], ⵠ[149]]
		}], .18, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆⵠᐃⵠⲆⲆΔ] = ΔΔᐃⵠ(ᐃⲆΔ, [{
			f: ⵠⲆᐃⵠⵠⲆⲆΔⵠ,
			x: 0,
			y: 0,
			a: 1,
			r: Math.PI / 5,
			c: [ⵠ[393], ⵠ[273], ⵠ[396], ⵠ[151], ⵠ[158], ⵠ[92], ⵠ[149]]
		}], .18, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⵠΔΔⵠᐃΔⵠ] = ᐃΔ[Δ.ⵠΔΔᐃΔⲆᐃ];
		ᐃΔ[Δ.ᐃᐃΔⵠΔⵠⵠ] = ᐃΔ[Δ.ⲆⵠᐃⵠⲆⲆΔ];
		ᐃΔ[Δ.ᐃΔⵠⵠⲆΔᐃ] = ΔΔᐃⵠ(Δᐃⵠⵠ, [{
			f: ⲆᐃᐃᐃⲆⵠΔⵠⲆ,
			x: 0,
			y: 0,
			a: 1,
			r: ᐃᐃᐃ,
			c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
		}], .3, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆΔᐃᐃⵠΔⵠ] = ᐃΔ[Δ.ᐃΔⵠⵠⲆΔᐃ];
		ᐃΔ[Δ.ᐃᐃᐃΔᐃⲆᐃ] = ΔΔᐃⵠ(ΔΔΔᐃ, [{
			f: ⲆⲆΔᐃΔⲆⵠⲆⵠ,
			x: 0,
			y: ⲆⲆⵠⲆ,
			a: 1,
			r: ⵠᐃⲆ,
			c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
		}], .3, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆⵠⲆⵠΔⲆⲆ] = ΔΔᐃⵠ(1, [{
			f: ⵠⵠᐃⵠᐃΔⵠΔΔ,
			x: 0,
			y: 0,
			a: Δᐃⵠⵠ,
			r: 0,
			c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
		}], .6, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆᐃΔⲆⲆᐃⵠ] = ΔΔᐃⵠ(Δᐃⵠⵠ, [{
			f: ᐃⲆΔⵠΔΔΔ,
			x: 0,
			y: -ᐃᐃᐃⵠ,
			a: ΔⵠΔ,
			r: 0,
			c: [ⵠ[350], "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
		}], .17, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⵠⲆⲆⲆΔΔⲆ] = ᐃΔ[Δ.ⲆᐃΔⲆⲆᐃⵠ];
		ᐃΔ[Δ.ⵠⵠᐃⲆΔᐃⲆ] = ΔΔᐃⵠ(1, [{
			f: ⲆᐃΔΔΔⲆⲆᐃⲆ,
			x: -ᐃⲆΔΔ,
			y: -ⲆᐃⲆΔ,
			a: ΔⲆᐃᐃ,
			r: 0,
			c: [ⵠ[350], "#63767c", "#424f51", "#6c8288", "#536468", "#202020", ⵠ[0], "#806f60", "#514942", "#756557"]
		}], .23, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ΔⲆⵠᐃⵠⲆΔ] = ΔΔᐃⵠ(1, [{
			f: ⲆⵠⵠᐃᐃⲆⲆᐃᐃ,
			x: 0,
			y: 0,
			a: ⲆᐃΔ,
			r: 0,
			c: [ⵠ[350], "#42261A", "#281818"]
		}], .23, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ᐃᐃΔΔⲆᐃⵠ] = ᐃΔ[Δ.ΔⲆⵠᐃⵠⲆΔ];
		ᐃΔ[Δ.ⵠᐃⵠⵠᐃⵠᐃ] = ΔΔᐃⵠ(Δⵠᐃ, [{
			f: ⵠⲆⵠᐃΔΔΔ,
			x: -3,
			y: 0,
			a: ⵠΔᐃ,
			r: 0,
			c: [ⵠ[231], "#65A8B7", ⵠ[380], "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", ⵠ[380]]
		}], .2, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ΔⲆⵠⵠⵠⲆΔ] = ᐃΔ[Δ.ⵠᐃⵠⵠᐃⵠᐃ];
		ᐃΔ[Δ.ΔΔⲆΔⲆⲆᐃ] = ΔΔᐃⵠ(ᐃᐃΔ, [{
			f: ⲆᐃⲆⲆΔΔΔΔΔ,
			x: ⲆⵠⲆⲆ,
			y: 0,
			a: ⵠᐃⵠΔ,
			r: ⵠᐃⲆ,
			c: [ⵠ[231], "#961B1B", "#702727", "#C43B3B"]
		}], .15, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⲆΔᐃΔᐃⵠᐃ] = ΔΔᐃⵠ(ⵠΔᐃ, [{
			f: ᐃΔΔᐃⲆⵠΔ,
			x: 0,
			y: ⵠΔᐃⵠ,
			a: 1,
			r: ⵠⲆΔ,
			c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", ⵠ[231]]
		}], .3, [ⵠ[276], ⵠ[305], ⵠ[189]], .5);
		ᐃΔ[Δ.ⵠⲆᐃⵠΔⲆⵠ] = ᐃΔ[Δ.ⲆΔᐃΔᐃⵠᐃ];
		ᐃΔ[Δ.ᐃⵠΔΔⲆⲆⲆ] = ΔΔᐃⵠ(ⵠⲆΔⲆ, [{
			f: ᐃᐃᐃΔⲆᐃΔ,
			x: 0,
			y: ⵠΔᐃⵠ,
			a: Δⵠᐃ,
			r: ⵠⲆⵠⵠ,
			c: [ⵠ[231], "#352E1E", ⵠ[201], ⵠ[397]]
		}], .3, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ΔᐃᐃᐃⲆⲆⵠ] = ᐃΔ[Δ.ᐃⵠΔΔⲆⲆⲆ];
		ᐃΔ[Δ.ΔᐃⵠᐃᐃⲆΔ] = ΔΔᐃⵠ(ⵠᐃⵠΔ, [{
			f: ΔⲆⲆⲆΔΔⲆⵠΔ,
			x: -ⲆᐃⲆΔ,
			y: -5,
			a: 1,
			r: ⵠΔᐃⵠ,
			c: ["#e2d63b", "#ee71a9", "#42b672"]
		}], ⲆΔΔΔ, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆⵠⲆⵠⵠΔⲆ] = ᐃΔ[Δ.ΔᐃⵠᐃᐃⲆΔ];
		ᐃΔ[Δ.ⵠᐃΔⲆΔΔⵠ] = ΔΔᐃⵠ(1, [{
			f: ᐃⲆᐃᐃⵠΔᐃ,
			x: 0,
			y: ⵠᐃⲆ,
			a: ΔᐃⲆⲆ,
			r: ΔΔᐃᐃ,
			c: [ⵠ[231], "#332715", ⵠ[201], ⵠ[397]]
		}], .5, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ΔΔᐃⲆᐃⲆⲆ] = ᐃΔ[Δ.ⵠᐃΔⲆΔΔⵠ];
		ᐃΔ[Δ.ΔⵠΔⵠⲆᐃᐃ] = ΔΔᐃⵠ(ΔⵠⲆⲆ, [{
			f: ⲆⵠⵠⲆᐃⵠᐃ,
			x: 0,
			y: 0,
			a: 1,
			r: 0,
			c: [ⵠ[231], "#352618", "#402b18", ⵠ[323], ⵠ[397], "#52391e"]
		}], .3, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⵠᐃᐃⵠⵠᐃⲆ] = ᐃΔ[Δ.ΔⵠΔⵠⲆᐃᐃ];
		ᐃΔ[Δ.ᐃΔⲆᐃΔΔⲆ] = ΔΔᐃⵠ(1, [{
			f: ⲆΔΔΔⵠΔᐃ,
			x: -1,
			y: 0,
			a: ΔᐃΔⲆ,
			r: -Math.PI / 5,
			c: [ⵠ[231], ⵠ[460], ⵠ[201], "#594225", ⵠ[404]]
		}], .4, [ⵠ[276], ⵠ[305], ⵠ[189]], .7);
		ᐃΔ[Δ.ⵠⵠΔⲆⵠΔⵠ] = ᐃΔ[Δ.ᐃΔⲆᐃΔΔⲆ];
		ᐃΔ[Δ.ΔⲆⵠᐃⲆΔΔ] = ΔΔᐃⵠ(1, [{
			f: ⲆΔΔΔⵠΔᐃ,
			x: -1,
			y: 0,
			a: 1,
			r: -Math.PI / ΔⵠⲆᐃᐃ,
			c: [ⵠ[231], ⵠ[460], ⵠ[201], "#594225", "#3F2D18", "#2D2112"]
		}], .4, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⵠΔΔⲆⵠᐃⵠ] = ᐃΔ[Δ.ΔⲆⵠᐃⲆΔΔ];
		ᐃΔ[Δ.ⵠΔⵠⵠⲆⲆⲆ] = ΔΔᐃⵠ(1, [{
			f: ⵠΔᐃⵠᐃⵠⵠ,
			x: ⵠⵠⵠΔ,
			y: 0,
			a: ΔᐃΔⲆ,
			r: 0,
			c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
		}], .25, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ᐃⵠᐃⲆΔⵠⵠ] = ΔΔᐃⵠ(1, [{
			f: ΔⲆⵠⵠⵠⲆⵠ,
			x: ΔⲆⲆ,
			y: ΔⲆⲆ,
			a: 1,
			r: 0,
			c: [ⵠ[231], "#ed5f4f", "#ce4545", ⵠ[ΔⲆⲆ], "#e2dad7"]
		}], .2, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⵠΔⲆⵠΔᐃᐃ] = ᐃΔ[Δ.ᐃⵠᐃⲆΔⵠⵠ];
		ᐃΔ[Δ.ⵠⵠᐃⲆⲆᐃⲆ] = ΔΔᐃⵠ(1, [{
			f: ΔᐃΔΔⲆⵠⲆⵠⵠ,
			x: ⵠΔᐃⵠ,
			y: 0,
			a: 1,
			r: ᐃᐃᐃ,
			c: [ⵠ[231], "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", ⵠ[213], ⵠ[120]]
		}], .25, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ΔⲆⵠⵠΔᐃⲆ] = ᐃΔ[Δ.ⵠⵠᐃⲆⲆᐃⲆ];
		ᐃΔ[Δ.ΔΔΔⲆΔΔᐃ] = ΔΔᐃⵠ(ⵠⲆΔⲆ, [{
			f: ⵠⵠⲆⲆΔⵠⲆΔᐃ,
			x: -2,
			y: -Δᐃᐃⵠⵠ,
			a: 1,
			r: ᐃᐃᐃ,
			c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
		}], .25, [ⵠ[568], ⵠ[88], ⵠ[512]], .5);
		ᐃΔ[Δ.ⲆⲆᐃΔⵠᐃⲆ] = ᐃΔ[Δ.ΔΔΔⲆΔΔᐃ];
		ᐃΔ[Δ.ⵠⲆΔᐃⲆⲆΔ] = [];
		ᐃΔ[Δ.ⵠⲆΔᐃⲆⲆΔ][0] = ⵠᐃ.ΔⲆⵠⵠⲆΔᐃ;
		ᐃΔ[Δ.ⵠⲆΔᐃⲆⲆΔ][ΔⵠⲆⲆ] = ⵠᐃ.ᐃⲆΔᐃᐃᐃΔ;
		ᐃΔ[Δ.ⵠⲆΔᐃⲆⲆΔ][ΔᐃⵠΔ] = ⵠᐃ.ⵠⲆⲆᐃⲆᐃΔ;
		ᐃΔ[Δ.ᐃⲆⲆΔΔⲆᐃ] = ᐃΔ[Δ.ⵠⲆΔᐃⲆⲆΔ];
		ᐃΔ[Δ.ΔⲆⲆΔΔᐃⲆ] = ᐃΔ[Δ.ⵠⲆΔᐃⲆⲆΔ];
		ᐃΔ[Δ.ⵠⵠⵠᐃⲆⲆΔ] = [];
		ᐃΔ[Δ.ⵠⵠⵠᐃⲆⲆΔ][0] = ⵠᐃ.ᐃᐃⵠᐃⲆᐃΔ;
		ᐃΔ[Δ.ⵠⵠⵠᐃⲆⲆΔ][ΔᐃⵠⲆ] = ⵠᐃ.ⵠⵠⵠⵠⵠⲆᐃ;
		ᐃΔ[Δ.ⵠⵠⵠᐃⲆⲆΔ][ΔⵠⲆᐃ] = ⵠᐃ.ⲆⵠⲆᐃᐃⵠᐃ;
		ᐃΔ[Δ.ⲆΔⲆⲆΔᐃⵠ] = ᐃΔ[Δ.ⵠⵠⵠᐃⲆⲆΔ];
		ᐃΔ[Δ.ⵠΔᐃⲆΔⲆⵠ] = ᐃΔ[Δ.ⵠⵠⵠᐃⲆⲆΔ];
		ᐃΔ[Δ.ⲆΔⲆⵠⲆⲆⲆ] = ᐃΔ[Δ.ⵠᐃᐃᐃⵠ];
		ᐃΔ[Δ.ᐃⲆΔⲆⲆᐃⲆ] = ᐃΔ[Δ.ⵠᐃᐃᐃⵠ];
		ᐃΔ[Δ.ⵠᐃᐃᐃⵠ] = [];
		ᐃΔ[Δ.ⵠᐃᐃᐃⵠ][ⵠΔᐃᐃ] = ⵠᐃ.ⲆΔᐃⲆᐃⵠⵠ;
		ᐃΔ[Δ.ⵠᐃᐃᐃⵠ][ᐃⲆΔ] = ⵠᐃ.ⵠᐃⲆⲆⲆᐃΔ;
		ᐃΔ[Δ.ⵠᐃᐃᐃⵠ][ᐃᐃᐃⵠ] = ⵠᐃ.ΔΔΔⲆⲆᐃᐃ;
		ᐃΔ[Δ.ⲆΔⲆⵠⲆⲆⲆ] = ᐃΔ[Δ.ⵠᐃᐃᐃⵠ];
		ᐃΔ[Δ.ᐃⲆΔⲆⲆᐃⲆ] = ᐃΔ[Δ.ⵠᐃᐃᐃⵠ];
		ᐃΔ[Δ.ΔᐃᐃⲆᐃⵠΔ] = [];
		ᐃΔ[Δ.ΔᐃᐃⲆᐃⵠΔ][0] = ⵠᐃ.ᐃᐃⲆⵠⵠΔᐃ;
		ᐃΔ[Δ.ΔᐃᐃⲆᐃⵠΔ][ΔᐃⲆⲆ] = ⵠᐃ.ⲆᐃⲆⵠᐃᐃᐃ;
		ᐃΔ[Δ.ΔᐃᐃⲆᐃⵠΔ][ᐃⲆᐃⵠ] = ⵠᐃ.ⲆᐃⲆᐃⵠᐃᐃ;
		ᐃΔ[Δ.ΔⵠⵠⲆⵠΔᐃ] = ᐃΔ[Δ.ΔᐃᐃⲆᐃⵠΔ];
		ᐃΔ[Δ.ᐃⵠⵠᐃⲆⵠᐃ] = ᐃΔ[Δ.ΔᐃᐃⲆᐃⵠΔ];
		ᐃΔ[Δ.ⲆᐃΔᐃᐃΔᐃ] = [];
		ᐃΔ[Δ.ⲆᐃΔᐃᐃΔᐃ][ΔⲆⲆ] = ⵠᐃ.ⲆΔᐃⲆⲆᐃⵠ;
		ᐃΔ[Δ.ⲆᐃΔᐃᐃΔᐃ][1] = ⵠᐃ.ⲆⵠᐃⲆΔⵠⵠ;
		ᐃΔ[Δ.ⲆᐃΔᐃᐃΔᐃ][ΔᐃⵠΔ] = ⵠᐃ.ΔΔᐃᐃᐃᐃᐃ;
		ᐃΔ[Δ.ⲆⲆⵠⲆⲆⵠⵠ] = ᐃΔ[Δ.ⲆᐃΔᐃᐃΔᐃ];
		ᐃΔ[Δ.ⲆᐃⵠΔᐃⵠᐃ] = ᐃΔ[Δ.ⲆᐃΔᐃᐃΔᐃ];
		ᐃΔ[Δ.ⵠⲆΔΔⵠⵠΔ] = [];
		ᐃΔ[Δ.ⵠⲆΔΔⵠⵠΔ][ⵠΔᐃⵠ] = ⵠᐃ.ᐃΔⵠⲆⲆⵠⵠ;
		ᐃΔ[Δ.ⵠⲆΔΔⵠⵠΔ][1] = ⵠᐃ.ΔⲆⲆᐃΔⵠⲆ;
		ᐃΔ[Δ.ⵠⲆΔΔⵠⵠΔ][ᐃᐃᐃⵠ] = ⵠᐃ.ᐃΔᐃⵠΔᐃⵠ;
		ᐃΔ[Δ.Δᐃⵠⵠⵠⵠᐃ] = ᐃΔ[Δ.ⵠⲆΔΔⵠⵠΔ];
		ᐃΔ[Δ.ⵠⵠⲆᐃⵠΔⲆ] = ᐃΔ[Δ.ⵠⲆΔΔⵠⵠΔ];
		ᐃΔ[Δ.ᐃᐃⵠᐃⵠΔᐃ] = [];
		ᐃΔ[Δ.ᐃᐃⵠᐃⵠΔᐃ][ΔΔᐃᐃ] = ⵠᐃ.ΔᐃᐃΔⲆᐃᐃ;
		ᐃΔ[Δ.ᐃᐃⵠᐃⵠΔᐃ][1] = ⵠᐃ.ΔᐃΔⲆⵠΔⲆ;
		ᐃΔ[Δ.ᐃᐃⵠᐃⵠΔᐃ][ⲆᐃΔⲆ] = ⵠᐃ.ᐃⲆᐃΔⲆⵠΔ;
		ᐃΔ[Δ.ᐃΔᐃᐃⲆᐃᐃ] = ᐃΔ[Δ.ᐃᐃⵠᐃⵠΔᐃ];
		ᐃΔ[Δ.ΔⵠⲆᐃᐃⲆⵠ] = ᐃΔ[Δ.ᐃᐃⵠᐃⵠΔᐃ];
		ᐃΔ[Δ.ⲆⲆⲆⵠΔᐃⲆ] = [];
		ᐃΔ[Δ.ⲆⲆⲆⵠΔᐃⲆ][ⵠⵠⲆⵠ] = ⵠᐃ.ᐃⲆⲆΔᐃⲆΔ;
		ᐃΔ[Δ.ⲆⲆⲆⵠΔᐃⲆ][1] = ⵠᐃ.ⵠΔΔⲆᐃⲆⵠ;
		ᐃΔ[Δ.ⲆⲆⲆⵠΔᐃⲆ][2] = ⵠᐃ.ΔⲆⵠⵠᐃⲆⵠ;
		ᐃΔ[Δ.ᐃΔⵠᐃⲆⵠⵠ] = ᐃΔ[Δ.ⲆⲆⲆⵠΔᐃⲆ];
		ᐃΔ[Δ.ⵠΔⲆⲆⲆⵠΔ] = ᐃΔ[Δ.ⲆⲆⲆⵠΔᐃⲆ];
		ᐃΔ[Δ.ⵠⵠⲆᐃΔⲆᐃ] = [];
		ᐃΔ[Δ.ⵠⵠⲆᐃΔⲆᐃ][ⵠΔᐃⵠ] = ⵠᐃ.ⵠⲆΔᐃⲆⵠᐃ;
		ᐃΔ[Δ.ⵠⵠⲆᐃΔⲆᐃ][Ⲇⵠᐃ] = ⵠᐃ.ΔΔᐃⲆⲆⵠΔ;
		ᐃΔ[Δ.ⵠⵠⲆᐃΔⲆᐃ][2] = ⵠᐃ.ⵠΔⲆᐃⵠΔⲆ;
		ᐃΔ[Δ.ⵠⵠᐃⲆⲆⵠⵠ] = ᐃΔ[Δ.ⵠⵠⲆᐃΔⲆᐃ];
		ᐃΔ[Δ.ᐃΔⲆΔⵠΔΔ] = ᐃΔ[Δ.ⵠⵠⲆᐃΔⲆᐃ];
		ᐃΔ[Δ.ⲆΔⵠᐃⲆⲆΔ] = [];
		ᐃΔ[Δ.ⲆΔⵠᐃⲆⲆΔ][0] = ⵠᐃ.ⲆΔⲆⲆⲆⵠΔ;
		ᐃΔ[Δ.ⲆΔⵠᐃⲆⲆΔ][ᐃⲆΔ] = ⵠᐃ.ⲆⲆᐃᐃⵠᐃΔ;
		ᐃΔ[Δ.ⲆΔⵠᐃⲆⲆΔ][ⲆᐃⵠΔ] = ⵠᐃ.ΔΔᐃᐃⵠⵠⵠ;
		ᐃΔ[Δ.ΔⲆⵠᐃⵠⵠⲆᐃⵠ] = ᐃΔ[Δ.ⲆΔⵠᐃⲆⲆΔ];
		ᐃΔ[Δ.ⲆΔⲆᐃΔⲆⲆ] = ᐃΔ[Δ.ⲆΔⵠᐃⲆⲆΔ];
		ᐃΔ[Δ.ΔⲆᐃᐃⵠᐃΔ] = [];
		ᐃΔ[Δ.ΔⲆᐃᐃⵠᐃΔ][ⵠⲆⵠⵠ] = ⵠᐃ.ᐃⲆⲆΔᐃⲆⲆ;
		ᐃΔ[Δ.ΔⲆᐃᐃⵠᐃΔ][ⵠΔᐃ] = ⵠᐃ.ᐃⲆᐃⵠΔⵠΔ;
		ᐃΔ[Δ.ΔⲆᐃᐃⵠᐃΔ][ᐃⲆᐃᐃ] = ⵠᐃ.ⲆᐃⵠᐃᐃᐃⲆ;
		ᐃΔ[Δ.ⲆⲆᐃⵠⵠⵠᐃ] = ᐃΔ[Δ.ΔⲆᐃᐃⵠᐃΔ];
		ᐃΔ[Δ.ⲆΔΔΔᐃᐃⵠ] = ᐃΔ[Δ.ΔⲆᐃᐃⵠᐃΔ];
		ᐃΔ[Δ.ᐃⲆᐃⲆΔΔΔ] = [];
		ᐃΔ[Δ.ᐃⲆᐃⲆΔΔΔ][0] = ⵠᐃ.ⲆⲆⲆⲆⵠᐃⲆ;
		ᐃΔ[Δ.ᐃⲆᐃⲆΔΔΔ][ΔⵠΔ] = ⵠᐃ.ᐃΔᐃⵠⲆΔΔ;
		ᐃΔ[Δ.ᐃⲆᐃⲆΔΔΔ][ᐃᐃⲆⲆ] = ⵠᐃ.ⲆΔᐃᐃΔⵠⵠ;
		ᐃΔ[Δ.ⵠᐃⵠⲆΔⲆⲆ] = ᐃΔ[Δ.ᐃⲆᐃⲆΔΔΔ];
		ᐃΔ[Δ.ᐃⵠᐃⵠⲆΔΔ] = ᐃΔ[Δ.ᐃⲆᐃⲆΔΔΔ];
		ᐃΔ[Δ.ΔΔⵠΔⲆⲆᐃ] = [];
		ᐃΔ[Δ.ΔΔⵠΔⲆⲆᐃ][0] = ⵠᐃ.ⵠΔⲆⵠᐃᐃᐃ;
		ᐃΔ[Δ.ΔΔⵠΔⲆⲆᐃ][ΔⲆᐃⲆ] = ⵠᐃ.ⵠⵠΔⲆⲆⲆⵠ;
		ᐃΔ[Δ.ΔΔⵠΔⲆⲆᐃ][ΔᐃⵠΔ] = ⵠᐃ.ᐃⲆΔΔⵠΔᐃ;
		ᐃΔ[Δ.ΔⵠⵠᐃΔⲆⵠ] = ᐃΔ[Δ.ΔΔⵠΔⲆⲆᐃ];
		ᐃΔ[Δ.ⵠⲆⲆⵠⵠⵠⲆ] = [];
		ᐃΔ[Δ.ⵠⲆⲆⵠⵠⵠⲆ][0] = ⵠᐃ.ⲆΔⵠⲆᐃᐃⵠ;
		ᐃΔ[Δ.ⵠⲆⲆⵠⵠⵠⲆ][1] = ⵠᐃ.ΔⲆᐃⵠΔⵠΔ;
		ᐃΔ[Δ.ⵠⲆⲆⵠⵠⵠⲆ][ΔⵠⲆᐃ] = ⵠᐃ.ΔΔⲆⲆᐃΔΔ;
		ᐃΔ[Δ.ⵠᐃΔⵠΔⲆⲆ] = ᐃΔ[Δ.ⵠⲆⲆⵠⵠⵠⲆ];
		ᐃΔ[Δ.ΔΔⲆΔⵠΔⲆ] = ᐃΔ[Δ.ᐃᐃⲆΔⲆⲆⲆ];
		ᐃΔ[Δ.ΔΔᐃᐃⲆΔΔ] = ᐃΔ[Δ.ΔⵠᐃⲆΔⵠⲆ];
		ᐃΔ[Δ.ΔᐃᐃᐃⲆⵠᐃ] = ᐃΔ[Δ.ⵠᐃⲆⲆⲆⵠⲆ];
		ᐃΔ[Δ.ⵠⲆᐃⵠᐃᐃΔ] = ᐃΔ[Δ.ᐃⲆⲆⵠᐃⵠⵠ];
		ᐃΔ[Δ.ⵠΔΔᐃⵠΔⵠ] = ᐃΔ[Δ.ⲆⲆᐃΔⲆⲆⲆ];
		ᐃΔ[Δ.ΔᐃⲆⵠⵠⲆᐃ] = ᐃΔ[Δ.ⵠⲆᐃᐃᐃᐃΔ];
		ᐃΔ[Δ.ᐃⲆΔᐃΔⵠΔ] = ᐃΔ[Δ.ⵠᐃᐃᐃⲆⲆΔ];
		ᐃΔ[Δ.ᐃΔⲆⲆⲆΔΔ] = ᐃΔ[Δ.ⲆⵠⲆⲆⲆⲆᐃ];
		ᐃΔ[Δ.ᐃΔⵠⲆⵠⵠᐃ] = ᐃΔ[Δ.ᐃⵠⵠᐃᐃᐃΔ];
		ᐃΔ[Δ.ⵠⵠΔⵠᐃⲆᐃ] = ᐃΔ[Δ.ⲆⲆΔΔⵠⵠⲆ];
		ᐃΔ[Δ.ⵠΔⲆⵠⵠⲆΔ] = ᐃΔ[Δ.ᐃⵠⵠⲆᐃᐃⲆ];
		ᐃΔ[Δ.ᐃΔⲆⲆⲆᐃΔ] = ᐃΔ[Δ.ⵠᐃᐃΔⵠⲆⵠ];
		ᐃΔ[Δ.ⲆᐃⲆⵠᐃⵠⵠ] = ᐃΔ[Δ.ⵠᐃⵠⵠΔΔΔ];
		ᐃΔ[Δ.ΔΔⲆⵠⲆᐃᐃ] = ᐃΔ[Δ.ⵠᐃᐃΔᐃΔⵠ];
		ᐃΔ[Δ.ᐃⵠⵠⲆΔⵠΔ] = ᐃΔ[Δ.ⵠᐃⵠⵠⲆⲆⵠ];
		ᐃΔ[Δ.ⲆΔⲆⲆⵠΔⵠ] = ᐃΔ[Δ.ⵠᐃᐃᐃⲆΔᐃ];
		ᐃΔ[Δ.ᐃⲆⵠᐃⲆⵠᐃ] = ᐃΔ[Δ.ΔⵠⲆᐃΔΔΔ];
		ᐃΔ[Δ.ⲆⵠΔⵠⵠΔⲆ] = ᐃΔ[Δ.ΔΔᐃⵠⲆᐃⵠ];
		ᐃΔ[Δ.ΔⲆᐃⵠⵠΔⵠ] = ᐃΔ[Δ.ᐃᐃⲆⵠΔᐃⵠ];
		ᐃΔ[Δ.ⵠΔⵠᐃⵠΔᐃ] = ᐃΔ[Δ.ΔΔᐃΔⵠᐃⲆ];
		ᐃΔ[Δ.ΔΔΔⵠⵠᐃΔ] = ᐃΔ[Δ.ⲆΔΔⲆⲆⵠⵠ];
		ᐃΔ[Δ.ⵠΔᐃᐃΔⵠⲆ] = ᐃΔ[Δ.ᐃⵠⵠᐃⵠᐃⵠ];
		ᐃΔ[Δ.ΔⲆΔᐃⵠⲆᐃ] = ᐃΔ[Δ.ⵠᐃⲆⲆΔⲆΔ];
		ᐃΔ[Δ.ΔⵠᐃⲆⲆⲆⵠ] = ᐃΔ[Δ.ΔᐃΔΔΔΔᐃ];
		ᐃΔ[Δ.ΔᐃⲆΔⵠⲆⲆ] = ᐃΔ[Δ.ⲆⲆⲆΔⲆᐃⵠ];
		ᐃΔ[Δ.ⲆⵠⵠΔᐃᐃⲆ] = ᐃΔ[Δ.ᐃⲆΔⵠΔΔᐃ];
		ᐃΔ[Δ.ⵠᐃⵠΔⲆᐃⵠ] = ᐃΔ[Δ.ⲆⲆⲆᐃᐃⲆⵠ];
		ᐃΔ[Δ.ΔⵠΔᐃⵠⵠⵠ] = ᐃΔ[Δ.ᐃΔⵠⵠᐃⲆⲆ];
		ᐃΔ[Δ.ⵠⲆᐃⵠΔΔᐃ] = ᐃΔ[Δ.ⲆⵠᐃᐃᐃᐃΔ];
		ᐃΔ[Δ.ᐃᐃΔⲆΔᐃⵠ] = ᐃΔ[Δ.ⲆᐃΔᐃⲆⵠⲆ];
		ᐃΔ[Δ.ᐃᐃⵠⲆᐃᐃⲆ] = ᐃΔ[Δ.ᐃΔᐃⲆΔΔⲆ];
		ᐃΔ[Δ.ⲆⲆⲆⵠΔⲆⲆ] = ᐃΔ[Δ.ⲆⵠⲆᐃⵠᐃⲆ];
		ᐃΔ[Δ.ⵠΔΔΔᐃⵠⲆ] = ᐃΔ[Δ.ⵠⵠⲆⵠⲆΔⵠ];
		ᐃΔ[Δ.ΔⵠΔΔⵠΔⵠ] = ᐃΔ[Δ.ΔΔⵠΔⲆᐃⵠ];
		ᐃΔ[Δ.ⵠᐃⲆⵠⲆᐃΔ] = ᐃΔ[Δ.ⵠΔⵠⲆᐃᐃⵠ];
		ᐃΔ[Δ.ⵠΔⵠⵠᐃΔⲆ] = ᐃΔ[Δ.ᐃᐃⲆⵠⲆΔΔ];
		ᐃΔ[Δ.ⵠΔΔΔΔⲆⲆ] = ᐃΔ[Δ.ⲆΔΔⲆΔΔᐃ];
		ᐃΔ[Δ.ΔⵠⵠᐃⵠᐃⲆ] = ᐃΔ[Δ.ΔⵠΔᐃᐃΔⵠ];
		ᐃΔ[Δ.ⲆⵠΔΔⲆⵠⵠ] = ᐃΔ[Δ.ⵠⵠⵠΔΔᐃΔ];
		ᐃΔ[Δ.ΔⵠⲆΔΔᐃᐃ] = ᐃΔ[Δ.ⲆⵠᐃΔΔΔΔ];
		ᐃΔ[Δ.ⵠᐃᐃΔᐃΔᐃ] = ᐃΔ[Δ.ᐃⲆᐃᐃᐃⵠⲆ];
		ᐃΔ[Δ.ΔⵠᐃⵠⲆΔⵠ] = ᐃΔ[Δ.Δᐃⵠⵠⵠⵠⵠ];
		ᐃΔ[Δ.ΔΔⲆᐃΔΔᐃ] = ᐃΔ[Δ.ΔΔⲆⵠᐃΔᐃ];
		ᐃΔ[Δ.ᐃⵠⲆⲆⲆΔᐃ] = ᐃΔ[Δ.ΔⵠⲆΔΔΔΔ];
		ᐃΔ[Δ.ᐃⲆΔⵠᐃⲆᐃ] = ᐃΔ[Δ.ΔΔⲆΔⲆΔΔ];
		ᐃΔ[Δ.ΔⲆᐃⵠᐃⵠᐃ] = ᐃΔ[Δ.ᐃⵠⲆᐃΔⵠⲆ];
		ᐃΔ[Δ.ΔⲆⵠᐃᐃᐃΔ] = ᐃΔ[Δ.ⲆⲆᐃⲆⵠᐃᐃ];
		ᐃΔ[Δ.ᐃΔᐃΔⵠᐃⵠ] = ᐃΔ[Δ.ΔⲆᐃⵠⲆⵠΔ];
		ᐃΔ[Δ.ⵠⵠⵠⵠᐃΔᐃ] = ᐃΔ[Δ.ΔⵠΔⲆᐃᐃΔ];
		ᐃΔ[Δ.ⲆⵠΔΔᐃⵠΔ] = ᐃΔ[Δ.ΔᐃⲆⲆΔⲆᐃ];
		ᐃΔ[Δ.ⲆᐃΔΔᐃΔⲆ] = ᐃΔ[Δ.ᐃᐃΔᐃΔΔⵠ];
		ᐃΔ[Δ.ⵠΔⵠΔΔⲆᐃ] = ᐃΔ[Δ.ⵠⵠΔΔᐃⲆᐃ];
		ᐃΔ[Δ.ΔⵠⵠⲆⵠⲆⲆ] = ᐃΔ[Δ.ⵠⵠᐃΔⵠⵠᐃ];
		ᐃΔ[Δ.ᐃᐃΔΔΔᐃⲆ] = ᐃⵠᐃ(ΔᐃΔⵠⲆᐃⲆᐃⵠ(.8, true, [ⵠ[323], ⵠ[59], ⵠ[59], ⵠ[59]]));
		ᐃΔ[Δ.ΔᐃⲆᐃⵠᐃⵠ] = ΔΔᐃⵠ(.5, [{
			f: ΔΔᐃᐃᐃᐃΔΔᐃ,
			x: 0,
			y: 2,
			a: 1,
			r: ⵠᐃⲆ,
			c: [ⵠ[Ⲇᐃⵠ]]
		}], .16, [ⵠ[59], "#d0ad41", "#b89733"], .9);
		ᐃΔ[Δ.ⵠΔⲆᐃⵠⲆⵠ] = ᐃΔ[Δ.ΔⲆⲆΔⵠΔⲆ];
		ᐃΔ[Δ.ⵠⵠᐃᐃⲆᐃᐃ] = ᐃΔ[Δ.ΔᐃΔⵠΔⲆⲆ];
		ᐃΔ[Δ.ⵠⲆⲆⵠⲆⵠⲆ] = ᐃΔ[Δ.ᐃⲆⵠᐃⵠⵠⲆ];
		ᐃΔ[Δ.ⲆⵠΔⵠᐃΔᐃ] = ᐃΔ[Δ.ᐃⵠΔᐃⲆΔⲆ];
		ᐃΔ[Δ.ΔᐃΔⵠᐃⲆᐃ] = ᐃΔ[Δ.ΔΔⵠᐃΔⵠᐃ];
		ᐃΔ[Δ.ⲆᐃᐃᐃⵠᐃΔ] = ᐃΔ[Δ.ⵠⲆΔΔⵠⲆⵠ];
		ᐃΔ[Δ.ᐃⵠΔΔⲆᐃΔ] = ᐃΔ[Δ.ΔᐃᐃⲆⵠⵠᐃ];
		ᐃΔ[Δ.ΔᐃⲆᐃᐃⵠᐃ] = ᐃΔ[Δ.ΔᐃⵠⵠΔⵠΔ];
		ᐃΔ[Δ.ⵠⲆᐃⲆΔⲆΔ] = ᐃΔ[Δ.ⵠᐃⵠⵠΔⵠΔ];
		ᐃΔ[Δ.ᐃⵠΔⲆᐃΔΔ] = ᐃΔ[Δ.ᐃⲆⵠⵠⲆΔⲆ];
		ᐃΔ[Δ.ΔΔᐃᐃⵠᐃᐃ] = ᐃΔ[Δ.ⵠⲆⲆΔᐃᐃⵠ];
		ᐃΔ[Δ.ᐃⵠΔΔⲆᐃⲆ] = ᐃΔ[Δ.ⵠΔΔⲆⲆⵠⲆ];
		ᐃΔ[Δ.ⵠΔᐃⵠⲆⲆⲆ] = ᐃΔ[Δ.ⵠⲆⲆᐃΔⵠⲆ];
		ᐃΔ[Δ.ΔΔⵠΔⲆΔΔ] = ᐃΔ[Δ.ᐃᐃΔᐃΔⲆⵠ];
		ᐃΔ[Δ.ⲆⲆΔΔᐃΔⵠ] = ᐃΔ[Δ.ⵠⲆⲆΔⵠⵠΔ];
		ᐃΔ[Δ.ⲆΔⲆΔⲆΔⲆ] = ᐃΔ[Δ.ⵠⵠⲆⵠᐃΔⲆ];
		ᐃΔ[Δ.ᐃᐃⵠΔⵠⵠᐃ] = ᐃΔ[Δ.ᐃⲆᐃᐃⲆΔⵠ];
		ᐃΔ[Δ.ⵠΔⵠᐃⲆⵠᐃ] = ᐃΔ[Δ.ⵠᐃⲆΔΔⵠⵠ];
		ᐃΔ[Δ.ⲆᐃⲆᐃΔᐃⲆ] = ᐃΔ[Δ.ᐃΔᐃΔΔᐃⵠ];
		ᐃΔ[Δ.ⲆⵠΔⲆᐃΔⲆ] = ᐃΔ[Δ.ⵠΔⵠⵠᐃⵠΔ];
		ᐃΔ[Δ.ᐃᐃᐃᐃΔⵠΔ] = ᐃΔ[Δ.ᐃΔᐃⵠⲆⲆΔ];
		ᐃΔ[Δ.ᐃΔᐃΔⲆⵠᐃ] = ᐃΔ[Δ.ⵠᐃΔⲆΔᐃᐃ];
		ᐃΔ[Δ.ⵠᐃΔᐃⵠΔᐃ] = ᐃΔ[Δ.ⵠΔΔⲆᐃΔⲆ];
		ᐃΔ[Δ.ΔⲆΔⲆⵠⲆⲆ] = ᐃΔ[Δ.ⲆΔⵠⵠⵠᐃᐃ];
		ᐃΔ[Δ.ᐃⵠΔⲆⵠⵠᐃ] = ᐃΔ[Δ.ⵠΔⵠⵠⲆⲆΔ];
		ᐃΔ[Δ.ⵠⵠⲆⵠΔⵠᐃ] = ᐃΔ[Δ.ᐃΔᐃΔΔⵠⲆ];
		ᐃΔ[Δ.ᐃΔᐃⲆᐃΔΔ] = ᐃΔ[Δ.ᐃᐃᐃᐃⲆⲆⲆ];
		ᐃΔ[Δ.ΔⲆᐃᐃⲆᐃⲆ] = ᐃΔ[Δ.ⲆᐃⵠΔΔᐃΔ];
		ᐃΔ[Δ.ⲆΔᐃΔⵠᐃⲆ] = ᐃΔ[Δ.ⲆᐃⵠⲆᐃΔⵠ];
		ᐃΔ[Δ.ⲆᐃⲆⲆⵠⵠᐃ] = ᐃΔ[Δ.ΔⵠⲆⲆΔΔⵠ];
		ᐃΔ[Δ.ⵠᐃⵠⵠΔⲆᐃ] = ᐃΔ[Δ.ⵠΔΔΔⲆΔᐃ];
		ᐃΔ[Δ.ⵠⵠⵠᐃᐃᐃⲆ] = ᐃΔ[Δ.ΔΔΔⲆⵠᐃᐃ];
		ᐃΔ[Δ.ᐃΔᐃⲆⲆⲆⲆ] = ᐃΔ[Δ.ⵠᐃⵠΔΔⵠᐃ];
		ᐃΔ[Δ.ᐃᐃⵠⵠΔᐃⲆ] = ᐃΔ[Δ.ΔⵠΔᐃΔΔᐃ];
		ᐃΔ[Δ.ᐃⵠⲆⵠⲆⵠⵠ] = ᐃΔ[Δ.ⲆⲆⲆⲆᐃⲆᐃ];
		ᐃΔ[Δ.ⵠⲆᐃᐃⲆⲆⲆ] = ᐃΔ[Δ.ΔⲆΔΔΔᐃᐃ];
		ᐃΔ[Δ.ᐃᐃⲆⵠᐃᐃⵠ] = ᐃΔ[Δ.ᐃⵠⵠⵠⵠᐃⲆ];
		ᐃΔ[Δ.ΔᐃΔᐃΔΔᐃ] = ᐃΔ[Δ.ᐃᐃⲆⵠⲆΔⵠ];
		ᐃΔ[Δ.ᐃⲆᐃΔᐃⲆᐃ] = ᐃΔ[Δ.ᐃⵠΔⲆⲆᐃⲆ];
		ᐃΔ[Δ.ⲆᐃᐃᐃΔⵠⵠ] = ᐃΔ[Δ.ⲆΔᐃⲆᐃⲆⵠ];
		ᐃΔ[Δ.ⵠⵠΔΔᐃⵠᐃ] = ᐃΔ[Δ.ⵠᐃⲆᐃᐃⵠᐃ];
		ᐃΔ[Δ.ᐃⵠᐃⲆⵠΔΔ] = ᐃΔ[Δ.ⲆᐃᐃⵠⲆⲆⵠ];
		ᐃΔ[Δ.ᐃᐃΔⲆᐃⵠⵠ] = ᐃΔ[Δ.ⵠᐃΔⲆΔΔⵠ];
		ᐃΔ[Δ.ⲆⵠᐃᐃΔΔᐃ] = ᐃΔ[Δ.ΔⵠΔⵠⲆᐃᐃ];
		ᐃΔ[Δ.ᐃⲆⲆⲆⵠᐃΔ] = ᐃΔ[Δ.ᐃⵠΔΔⲆⲆⲆ];
		ᐃΔ[Δ.ΔᐃⵠⵠⵠⵠΔ] = ᐃΔ[Δ.ᐃᐃᐃΔⲆΔⵠ];
		ᐃΔ[Δ.ᐃΔΔⲆΔᐃΔ] = ᐃΔ[Δ.ⲆᐃΔⲆⲆᐃⵠ];
		ᐃΔ[Δ.ᐃⲆⵠⲆᐃⲆᐃ] = ᐃΔ[Δ.ⵠⲆⲆᐃᐃⲆᐃ];
		ᐃΔ[Δ.ⲆⲆⲆⵠⵠΔⲆ] = ᐃΔ[Δ.ⵠⵠⵠⵠⵠᐃᐃ];
		ᐃΔ[Δ.ⵠⲆⵠⲆΔⵠΔ] = ᐃΔ[Δ.ⵠΔΔᐃΔⲆᐃ];
		ᐃΔ[Δ.ⵠⲆⵠᐃᐃⲆⵠ] = ᐃΔ[Δ.ⲆⵠᐃⵠⲆⲆΔ];
		ᐃΔ[Δ.ΔᐃⲆᐃᐃⵠⲆ] = ᐃΔ[Δ.ΔⲆⵠᐃⲆΔΔ];
		ᐃΔ[Δ.ⲆᐃⵠⲆⵠΔⵠ] = ᐃΔ[Δ.ⵠΔⵠⵠⲆⲆⲆ];
		ᐃΔ[Δ.ᐃⵠΔⵠΔⲆⲆ] = ᐃΔ[Δ.ᐃΔⵠⵠⲆΔᐃ];
		ᐃΔ[Δ.ᐃΔⲆⲆⵠΔΔ] = ᐃΔ[Δ.ᐃᐃᐃΔᐃⲆᐃ];
		ᐃΔ[Δ.ᐃΔⵠᐃᐃΔⲆ] = ᐃΔ[Δ.ⲆⵠⲆⵠΔⲆⲆ];
		ᐃΔ[Δ.ⵠⲆⲆΔΔⵠⵠ] = ᐃΔ[Δ.ⲆΔᐃΔᐃⵠᐃ];
		ᐃΔ[Δ.ⲆⵠΔⲆΔᐃⲆ] = ᐃΔ[Δ.ⵠᐃⵠⵠᐃⵠᐃ];
		ᐃΔ[Δ.ᐃⵠᐃΔⵠⵠΔ] = ᐃΔ[Δ.ᐃΔⲆᐃΔΔⲆ];
		ᐃΔ[Δ.ⲆⲆⲆΔᐃⵠΔ] = ᐃΔ[Δ.ⵠⵠᐃⲆⲆᐃⲆ];
		ᐃΔ[Δ.ⵠΔⲆⵠΔᐃᐃ] = ᐃΔ[Δ.ᐃⵠᐃⲆΔⵠⵠ];
		ᐃΔ[Δ.ⵠⲆⵠᐃⵠᐃⵠ] = ᐃΔ[Δ.ⵠⵠᐃⲆΔᐃⲆ];
		ᐃΔ[Δ.ᐃⲆⵠΔᐃⲆⲆ] = ᐃΔ[Δ.ΔⲆⵠᐃⵠⲆΔ];
		ᐃΔ[Δ.ᐃⲆΔⲆᐃᐃⵠ] = ᐃΔ[Δ.ΔΔⲆΔⲆⲆᐃ];
		ᐃΔ[Δ.ⲆⵠᐃᐃⲆⲆⵠ] = ᐃΔ[Δ.ΔΔΔⲆΔΔᐃ];
		ᐃΔ[Δ.ⵠᐃⲆΔⵠⵠΔ] = ᐃΔ[Δ.ᐃⲆΔⲆⲆⵠΔ];
		ᐃΔ[Δ.ΔⵠⲆⵠᐃᐃⵠ] = ᐃΔ[Δ.ᐃⵠΔΔΔⵠⵠ];
		ᐃΔ[Δ.ⲆΔⵠⵠⲆᐃΔ] = ᐃΔ[Δ.ᐃⵠⵠⲆᐃⲆᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆⵠᐃⵠ] = ᐃΔ[Δ.ᐃⵠΔⲆⲆΔⲆ];
		ᐃΔ[Δ.ΔⵠⲆΔⵠᐃⲆ] = ᐃΔ[Δ.ⲆΔΔⲆⲆᐃⲆ];
		ᐃΔ[Δ.ⵠᐃᐃΔⵠᐃⲆ] = ᐃΔ[Δ.ⲆΔΔⵠΔⵠΔ];
		ᐃΔ[Δ.ᐃΔⲆᐃⲆⵠΔ] = ᐃΔ[Δ.ⲆⲆⵠⵠᐃᐃⲆ];
		ᐃΔ[Δ.ΔⵠΔᐃⲆΔΔ] = ᐃΔ[Δ.ΔΔⵠⵠⲆⲆᐃ];
		ᐃΔ[Δ.ΔⲆΔᐃⵠⵠΔ] = ᐃΔ[Δ.ⲆⲆⲆⵠⵠⵠⵠ];
		ᐃΔ[Δ.ΔᐃⵠΔⵠⲆΔ] = ᐃΔ[Δ.ΔᐃΔⵠΔᐃΔ];
		ᐃΔ[Δ.ⵠΔⵠⲆⵠΔΔ] = ᐃΔ[Δ.ΔΔᐃⲆⵠᐃⲆ];
		ᐃΔ[Δ.ᐃⵠⵠⵠΔΔᐃ] = ᐃΔ[Δ.ΔⲆⵠᐃⵠΔⵠ];
		ᐃΔ[Δ.ⵠⵠΔⵠⲆΔⲆ] = ᐃΔ[Δ.ᐃⵠΔⵠⵠⲆⲆ];
		ᐃΔ[Δ.ᐃⲆΔᐃⵠⲆⲆ] = ᐃΔ[Δ.ΔⲆΔⲆⲆᐃⵠ];
		ᐃΔ[Δ.ΔⵠᐃΔᐃⵠᐃ] = ᐃΔ[Δ.ΔⲆΔⲆⲆΔⵠ];
		ᐃΔ[Δ.ΔᐃⲆᐃⲆⵠⵠ] = ᐃΔ[Δ.ⵠⵠΔᐃΔⵠⵠ];
		ᐃΔ[Δ.ⵠΔᐃΔΔⲆΔ] = ᐃΔ[Δ.ᐃΔⵠᐃⵠⲆⲆ];
		ᐃΔ[Δ.ΔⵠΔᐃⲆΔᐃ] = ᐃΔ[Δ.ΔΔⲆΔⲆⲆⲆ]
	}

	function ᐃΔⵠⲆᐃᐃΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 144 * ᐃ;
		ΔⲆ.height = 280 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ᐃ * 5, ⲆΔⲆⲆⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 62, 103.79999542236328 * ᐃ);
		Ⲇ.bezierCurveTo(62.5 * ᐃ, 148.79999542236328 * ᐃ, 62.5 * ᐃ, ᐃ * 148.79999542236328, 63 * ᐃ, 193.79999542236328 * ᐃ);
		Ⲇ.bezierCurveTo(63 * ᐃ, ᐃ * 219.79999542236328, 47 * ᐃ, 217.79999542236328 * ᐃ, 51 * ᐃ, ᐃ * 230.79999542236328);
		Ⲇ.bezierCurveTo(ᐃ * 62, 255.79999542236328 * ᐃ, ᐃ * 74, 260.7999954223633 * ᐃ, ᐃ * 72, ᐃ * 248.79999542236328);
		Ⲇ.bezierCurveTo(ᐃ * 65, ᐃ * 226.79999542236328, ᐃ * 71, ᐃ * 229.79999542236328, ᐃ * 76, ᐃ * 225.79999542236328);
		Ⲇ.bezierCurveTo(90 * ᐃ, 224.79999542236328 * ᐃ, 89 * ᐃ, 232.79999542236328 * ᐃ, 90 * ᐃ, ᐃ * 243.79999542236328);
		Ⲇ.bezierCurveTo(95 * ᐃ, ᐃ * 253.79999542236328, 99 * ᐃ, 249.79999542236328 * ᐃ, ᐃ * ⵠⵠⲆⲆⵠ, ᐃ * 229.79999542236328);
		Ⲇ.bezierCurveTo(ᐃ * 102, ᐃ * 213.79999542236328, 98 * ᐃ, 214.79999542236328 * ᐃ, 90 * ᐃ, 205.79999542236328 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 82, 201.79999542236328 * ᐃ, ᐃ * 82, 185.79999542236328 * ᐃ, ᐃ * 82, 114.79999542236328 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 80, ᐃ * 73, 82 * ᐃ, ᐃ * 68, 93 * ᐃ, ᐃ * 53);
		Ⲇ.bezierCurveTo(98 * ᐃ, 37 * ᐃ, ᐃ * 65, ᐃ * 14, ᐃ * 74, 33 * ᐃ);
		Ⲇ.bezierCurveTo(82 * ᐃ, 56 * ᐃ, 77 * ᐃ, ᐃ * 52, 69 * ᐃ, 54 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 55, 57 * ᐃ, ᐃ * 57, ᐃ * 53, 54 * ᐃ, ᐃ * 39);
		Ⲇ.bezierCurveTo(ᐃ * 46, 20 * ᐃ, 37 * ᐃ, 61 * ᐃ, 50 * ᐃ, ᐃ * 68);
		Ⲇ.bezierCurveTo(ᐃ * 65, ᐃ * 81, ᐃ * 60, ᐃ * 89, ᐃ * 62, ᐃ * 102);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⲆ]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ᐃ * -ᐃᐃⵠᐃΔ, ᐃ * -ⲆᐃⲆΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(62 * ᐃ, 103.79999542236328 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 62.5, ᐃ * 148.79999542236328, ᐃ * 62.5, 148.79999542236328 * ᐃ, ᐃ * 63, 193.79999542236328 * ᐃ);
		Ⲇ.bezierCurveTo(63 * ᐃ, ᐃ * 219.79999542236328, ᐃ * 47, ᐃ * 217.79999542236328, ᐃ * 51, ᐃ * 230.79999542236328);
		Ⲇ.bezierCurveTo(ᐃ * 62, ᐃ * 255.79999542236328, 74 * ᐃ, 260.7999954223633 * ᐃ, ᐃ * 72, ᐃ * 248.79999542236328);
		Ⲇ.bezierCurveTo(65 * ᐃ, 226.79999542236328 * ᐃ, 71 * ᐃ, ᐃ * 229.79999542236328, ᐃ * 76, ᐃ * 225.79999542236328);
		Ⲇ.bezierCurveTo(ᐃ * 90, ᐃ * 224.79999542236328, 89 * ᐃ, ᐃ * 232.79999542236328, ᐃ * 90, ᐃ * 243.79999542236328);
		Ⲇ.bezierCurveTo(95 * ᐃ, ᐃ * 253.79999542236328, ᐃ * 99, ᐃ * 249.79999542236328, ᐃ * 100, ᐃ * 229.79999542236328);
		Ⲇ.bezierCurveTo(ᐃ * 102, 213.79999542236328 * ᐃ, 98 * ᐃ, ᐃ * 214.79999542236328, ᐃ * 90, 205.79999542236328 * ᐃ);
		Ⲇ.bezierCurveTo(82 * ᐃ, ᐃ * 201.79999542236328, ᐃ * 82, ᐃ * 185.79999542236328, 82 * ᐃ, 114.79999542236328 * ᐃ);
		Ⲇ.bezierCurveTo(80 * ᐃ, 73 * ᐃ, 82 * ᐃ, 68 * ᐃ, ᐃ * 93, ᐃ * 53);
		Ⲇ.bezierCurveTo(98 * ᐃ, 37 * ᐃ, ᐃ * 65, ᐃΔⲆⲆᐃᐃⵠ * ᐃ, 74 * ᐃ, ᐃ * 33);
		Ⲇ.bezierCurveTo(82 * ᐃ, 56 * ᐃ, ᐃ * 77, 52 * ᐃ, ᐃ * 69, 54 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 55, 57 * ᐃ, ᐃ * 57, ᐃ * 53, ᐃ * 54, 39 * ᐃ);
		Ⲇ.bezierCurveTo(46 * ᐃ, ᐃ * 20, ᐃ * 37, 61 * ᐃ, 50 * ᐃ, ᐃ * 68);
		Ⲇ.bezierCurveTo(65 * ᐃ, ᐃ * 81, 60 * ᐃ, 89 * ᐃ, ᐃ * 62, ᐃ * 102);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃᐃ], Δⵠ[ΔⵠⲆᐃ], ΔΔΔΔ * ᐃ);
		return ΔⲆ
	}

	function ⲆΔᐃⲆⲆΔⲆ() {
		var ΔᐃᐃᐃΔᐃΔⵠⲆ = (new Date).getTime();
		ΔⲆΔⵠⲆᐃΔΔⲆ();

		function ᐃⲆⵠᐃ(ⲆⲆΔᐃⲆ) {
			var ᐃΔⲆⲆ = ᐃᐃᐃ;
			for (var ⲆⲆᐃⲆ = ΔⲆⲆ, Ⲇᐃ = 0; Ⲇᐃ < ⲆⲆΔᐃⲆ.length; Ⲇᐃ++) {
				var ᐃⵠⵠΔ = ⲆⲆΔᐃⲆ.charAt(Ⲇᐃ);
				if ("_" === ᐃⵠⵠΔ || 5 === Ⲇᐃ) continue;
				if ("1" === ᐃⵠⵠΔ) ᐃΔⲆⲆ += Math.pow(2, ⲆⲆᐃⲆ);
				ⲆⲆᐃⲆ++
			}
			return ᐃΔⲆⲆ
		}
		ᐃΔ[Δ.ⵠⲆⲆᐃᐃⵠⵠ] = [ⵠᐃ.ΔᐃⲆΔΔⵠᐃ, ⵠᐃ.Δᐃⵠᐃⵠᐃⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ] = [];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[452])] = [ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⲆⵠΔΔᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[464])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[452])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[103])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[452])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[155])] = [ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[218])] = [ⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ, ⵠᐃ.ΔⲆⵠΔΔ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[365])] = [ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⲆⵠΔΔᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[491])] = [ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ΔᐃᐃΔⵠⵠΔ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[559])] = [ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ⵠⵠᐃⲆⵠⵠⲆ, ⵠᐃ.ΔⵠΔΔΔⵠⲆ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ΔᐃᐃΔⵠⵠΔ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[567])] = [ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[246])] = [ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ΔⵠΔΔΔⵠⲆ, ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ, ⵠᐃ.ᐃᐃⵠᐃⲆⵠⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[424])] = [ⵠᐃ.ⲆⵠΔΔᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[37])] = [ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[514])] = [ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⲆᐃΔⲆⲆ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[448])] = [ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[493])] = [ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔⵠΔΔΔⵠⲆ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ᐃᐃⵠᐃⲆⵠⵠ, ⵠᐃ.ΔⵠⲆⲆⲆᐃΔ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[235])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[336])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[391])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[258])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[414])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[191])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[190])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[438])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[268])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[518])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[5])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[342])] = [ⵠᐃ.ΔΔⵠⵠΔⵠⲆ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⲆᐃΔⲆⲆ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[297])] = [ⵠᐃ.ΔΔⵠⵠΔⵠⲆ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[294])] = [ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔΔⵠⵠΔⵠⲆ, ⵠᐃ.ΔⵠⲆⲆⲆᐃΔ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[354])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[297])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[174])] = [ⵠᐃ.ΔΔⵠⵠΔⵠⲆ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ᐃᐃⵠᐃⲆⵠⵠ, ⵠᐃ.ΔⵠⲆⲆⲆᐃΔ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[306])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[174])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[67])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[174])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[299])] = [ⵠᐃ.ΔΔⵠⵠΔⵠⲆ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔⵠΔΔΔⵠⲆ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ᐃᐃⵠᐃⲆⵠⵠ, ⵠᐃ.ΔⵠⲆⲆⲆᐃΔ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[76])] = [ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ᐃᐃⵠΔᐃⲆΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[264])] = [ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[495])] = [ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔⵠΔΔΔⵠⲆ, ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[113])] = [ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ᐃᐃⵠΔᐃⲆΔ, ⵠᐃ.ᐃⵠΔΔᐃᐃᐃ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[436])] = [ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔⵠΔΔΔⵠⲆ, ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ᐃᐃⵠᐃⲆⵠⵠ, ⵠᐃ.ᐃⵠΔΔᐃᐃᐃ, ⵠᐃ.ΔⵠⲆⲆⲆᐃΔ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[119])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[436])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[249])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[436])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[36])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[436])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[541])] = [ⵠᐃ.ⲆⲆᐃᐃᐃ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ΔⵠⲆⲆⲆᐃΔ, ⵠᐃ.ᐃⵠΔΔᐃᐃᐃ, ⵠᐃ.ᐃᐃⵠᐃⲆⵠⵠ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔΔⵠⵠΔⵠⲆ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[332])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[541])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[368])] = [ⵠᐃ.ᐃᐃⵠΔᐃⲆΔ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔΔⵠⵠΔⵠⲆ, ⵠᐃ.ᐃⵠΔΔᐃᐃᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[237])] = [ⵠᐃ.ΔΔⵠⵠΔⵠⲆ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔⵠΔΔΔⵠⲆ, ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ᐃᐃⵠᐃⲆⵠⵠ, ⵠᐃ.ΔⵠⲆⲆⲆᐃΔ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[421])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[541])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[452])] = [ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ⵠᐃΔΔⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[464])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[452])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[103])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[452])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[155])] = [ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[218])] = [ⵠᐃ.ᐃᐃΔΔⵠⵠⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃⵠᐃᐃⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[365])] = [ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⵠᐃΔΔⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[491])] = [ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⲆⲆⲆⵠⵠΔ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[559])] = [ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ΔⲆⵠᐃᐃⵠⲆ, ⵠᐃ.ⲆⲆⵠⵠⵠΔⵠ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⲆⲆⲆⵠⵠΔ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[567])] = [ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[246])] = [ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆⲆⵠⵠⵠΔⵠ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ᐃᐃΔΔⵠⵠⵠ, ⵠᐃ.ⲆΔΔⵠᐃᐃⲆ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[424])] = [ⵠᐃ.ⵠᐃΔΔⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[37])] = [ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[514])] = [ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔⲆᐃᐃΔ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[448])] = [ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[493])] = [ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆⲆⵠⵠⵠΔⵠ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆΔΔⵠᐃᐃⲆ, ⵠᐃ.ᐃⵠⵠⲆⲆΔΔ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[235])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[336])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[391])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[258])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[414])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[191])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[190])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[438])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[268])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[518])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[ΔⵠΔᐃ])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[493])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[342])] = [ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔⲆᐃᐃΔ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[297])] = [ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[294])] = [ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ᐃᐃΔΔⵠⵠⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ, ⵠᐃ.ᐃⵠⵠⲆⲆΔΔ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[354])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[297])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[174])] = [ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆΔΔⵠᐃᐃⲆ, ⵠᐃ.ᐃⵠⵠⲆⲆΔΔ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[306])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[174])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[67])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[174])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[299])] = [ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ᐃᐃΔΔⵠⵠⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆⲆⵠⵠⵠΔⵠ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆΔΔⵠᐃᐃⲆ, ⵠᐃ.ᐃⵠⵠⲆⲆΔΔ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[76])] = [ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.Δⵠᐃᐃⵠⵠⵠ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠΔΔⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[264])] = [ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⵠΔΔⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[495])] = [ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆⲆⵠⵠⵠΔⵠ, ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⵠΔΔⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[113])] = [ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.Δⵠᐃᐃⵠⵠⵠ, ⵠᐃ.ΔΔΔⲆᐃⲆᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[436])] = [ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆⲆⵠⵠⵠΔⵠ, ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆΔΔⵠᐃᐃⲆ, ⵠᐃ.ΔΔΔⲆᐃⲆᐃ, ⵠᐃ.ᐃⵠⵠⲆⲆΔΔ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[119])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[436])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[249])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[436])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[36])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[436])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[541])] = [ⵠᐃ.ΔⵠΔΔⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ᐃⵠⵠⲆⲆΔΔ, ⵠᐃ.ΔΔΔⲆᐃⲆᐃ, ⵠᐃ.ⲆΔΔⵠᐃᐃⲆ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[332])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[541])];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[368])] = [ⵠᐃ.Δⵠᐃᐃⵠⵠⵠ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ, ⵠᐃ.ΔΔΔⲆᐃⲆᐃ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[237])] = [ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ᐃᐃΔΔⵠⵠⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆⲆⵠⵠⵠΔⵠ, ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆΔΔⵠᐃᐃⲆ, ⵠᐃ.ᐃⵠⵠⲆⲆΔΔ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
		ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[421])] = ᐃΔ[Δ.ΔΔᐃⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[541])];
		ᐃΔ[Δ.ⵠΔⲆⲆ] = [];
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[452])] = ⵠᐃ.ᐃⲆᐃⵠⲆΔᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[464])] = ⵠᐃ.ΔⲆⲆⲆᐃᐃⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[103])] = ⵠᐃ.ⲆᐃⵠΔᐃⵠⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[155])] = ⵠᐃ.ⵠᐃΔⲆⵠⵠᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[218])] = ⵠᐃ.ᐃⵠⵠᐃⲆⲆᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[365])] = ⵠᐃ.ⵠⲆΔⲆΔᐃⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[491])] = ⵠᐃ.ΔⵠⵠᐃΔⲆΔ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[559])] = ⵠᐃ.ᐃΔΔⲆΔΔᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[567])] = ⵠᐃ.ⵠᐃⵠⲆᐃΔⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[ⲆΔⲆⲆⵠ])] = ⵠᐃ.ⲆΔⵠᐃΔᐃⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[391])] = ⵠᐃ.ᐃⵠⵠⲆⵠᐃΔ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[518])] = ⵠᐃ.ⲆⲆⲆΔⵠᐃⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[246])] = ⵠᐃ.ⵠᐃⵠᐃΔⵠΔ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[424])] = ⵠᐃ.ΔⵠᐃΔΔⲆᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[37])] = ⵠᐃ.ΔΔᐃⲆᐃΔⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[514])] = ⵠᐃ.ᐃΔⲆⲆⵠΔⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[235])] = ⵠᐃ.ΔⵠⲆⵠᐃⲆⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[336])] = ⵠᐃ.ⵠᐃⵠᐃⵠᐃΔ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[448])] = ⵠᐃ.ⲆⵠΔⲆᐃⲆᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[258])] = ⵠᐃ.ᐃΔⲆΔΔΔⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[493])] = ⵠᐃ.ᐃⵠⲆⵠᐃᐃᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[414])] = ⵠᐃ.ⲆΔᐃᐃΔⵠᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[191])] = ⵠᐃ.ᐃⵠⲆⲆᐃᐃᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[190])] = ⵠᐃ.ΔⲆᐃⲆΔΔΔ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[438])] = ⵠᐃ.ᐃⲆᐃΔⵠⵠⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[268])] = ⵠᐃ.ΔΔᐃⵠΔⲆΔ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[342])] = ⵠᐃ.ΔⵠⲆΔⲆⲆⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[297])] = ⵠᐃ.ⲆⵠⵠΔⵠΔⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[294])] = ⵠᐃ.ᐃᐃⵠⲆΔⲆⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[354])] = ⵠᐃ.ⲆᐃⵠⵠⵠΔⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[174])] = ⵠᐃ.ⵠΔⲆᐃⵠⵠⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[306])] = ⵠᐃ.ⲆΔⲆⲆᐃⲆΔ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[67])] = ⵠᐃ.ᐃΔⲆΔᐃΔᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[299])] = ⵠᐃ.ⵠⲆⵠⲆⵠⵠⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[76])] = ⵠᐃ.ⲆᐃⵠΔΔᐃⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[264])] = ⵠᐃ.ᐃⵠΔⵠⵠΔΔ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[495])] = ⵠᐃ.ᐃᐃⵠⲆⲆΔᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[113])] = ⵠᐃ.ⲆΔᐃⵠⵠᐃᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[36])] = ⵠᐃ.ᐃⵠΔΔΔΔⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[249])] = ⵠᐃ.ⵠᐃⲆᐃΔΔᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[436])] = ⵠᐃ.ⲆᐃⵠΔⵠⲆΔ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[119])] = ⵠᐃ.ⲆΔⲆΔⲆⲆⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[332])] = ⵠᐃ.ᐃΔΔΔΔΔⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[541])] = ⵠᐃ.ⵠᐃⵠᐃΔⲆⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[332])] = ⵠᐃ.ᐃΔΔΔΔΔⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[368])] = ⵠᐃ.ᐃⵠΔᐃᐃⲆⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[237])] = ⵠᐃ.ⲆΔⵠⲆΔᐃᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⵠΔⵠ][ᐃⲆⵠᐃ(ⵠ[421])] = ⵠᐃ.ΔᐃⲆⵠⵠⲆⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[452])] = ⵠᐃ.ⵠᐃⲆᐃⲆⲆⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[464])] = ⵠᐃ.ΔⵠΔⵠΔⵠⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[103])] = ⵠᐃ.ⵠᐃⲆⲆⲆⲆΔ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[155])] = ⵠᐃ.ⵠᐃᐃⲆⵠᐃᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[218])] = ⵠᐃ.ᐃᐃⵠΔⲆᐃⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[365])] = ⵠᐃ.ΔΔΔᐃⵠᐃⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[491])] = ⵠᐃ.ⵠΔⲆⲆΔΔⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[559])] = ⵠᐃ.ⲆΔᐃⲆΔᐃⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[567])] = ⵠᐃ.ⵠᐃΔⵠΔΔⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[5])] = ⵠᐃ.ᐃΔⲆⵠᐃᐃⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[391])] = ⵠᐃ.ⲆⵠⵠⲆΔⵠⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[518])] = ⵠᐃ.ⵠΔᐃⲆᐃⵠᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[246])] = ⵠᐃ.ᐃⵠΔᐃⲆᐃⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[424])] = ⵠᐃ.ⲆⵠⲆⲆΔΔΔ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[37])] = ⵠᐃ.ᐃⵠΔᐃⵠⵠⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[514])] = ⵠᐃ.ⲆΔΔⵠΔⲆⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[235])] = ⵠᐃ.ⵠⵠⲆΔᐃⵠⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[336])] = ⵠᐃ.ΔΔΔΔᐃᐃᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[448])] = ⵠᐃ.ⵠᐃΔᐃΔΔⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[258])] = ⵠᐃ.ᐃᐃⲆΔⵠⲆⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[493])] = ⵠᐃ.ⵠᐃᐃⲆⵠᐃⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[414])] = ⵠᐃ.ⲆⲆⵠᐃⵠΔⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[191])] = ⵠᐃ.ᐃΔⲆΔᐃⵠᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[190])] = ⵠᐃ.ⵠᐃᐃⲆⵠⵠᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[438])] = ⵠᐃ.ⲆΔⵠΔΔⵠⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[268])] = ⵠᐃ.ΔⲆⵠⲆΔΔⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[342])] = ⵠᐃ.ⲆⲆᐃⵠᐃⲆᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[297])] = ⵠᐃ.ⲆⲆΔᐃΔⲆΔ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[294])] = ⵠᐃ.ᐃⲆΔΔⲆᐃⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[354])] = ⵠᐃ.ΔⵠΔᐃᐃⲆᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[174])] = ⵠᐃ.ⲆᐃΔⵠᐃΔΔ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[306])] = ⵠᐃ.ⲆΔΔΔⵠΔⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[67])] = ⵠᐃ.ⲆΔΔΔⲆᐃⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[299])] = ⵠᐃ.ⵠⲆⲆⵠᐃΔᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[76])] = ⵠᐃ.ΔᐃⲆⵠⲆⵠⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[264])] = ⵠᐃ.ΔⵠⵠⵠᐃΔⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[495])] = ⵠᐃ.ΔⲆⲆΔᐃⵠᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[113])] = ⵠᐃ.ⵠⲆⲆᐃⲆⵠᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[36])] = ⵠᐃ.ΔⵠⵠⵠⵠⲆΔ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[249])] = ⵠᐃ.ⵠⲆᐃΔⲆⵠᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[436])] = ⵠᐃ.ᐃΔⵠⵠᐃΔⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[119])] = ⵠᐃ.ᐃΔᐃΔⲆⵠⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[332])] = ⵠᐃ.ⲆΔᐃⵠᐃⵠⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[541])] = ⵠᐃ.ⲆⵠⲆⲆⵠᐃᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[332])] = ⵠᐃ.ⲆΔᐃⵠᐃⵠⵠ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[368])] = ⵠᐃ.ⲆⲆⲆⵠⵠΔᐃ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[237])] = ⵠᐃ.ᐃⲆΔᐃⵠⵠⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆ][Δ.ⲆⲆⵠ][ᐃⲆⵠᐃ(ⵠ[421])] = ⵠᐃ.ⵠⲆᐃᐃᐃⵠᐃ;
		ᐃΔ[Δ.ⲆⵠΔⲆⲆ] = [];
		ᐃΔ[Δ.ⲆⵠΔⲆⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆᐃΔᐃⵠΔⲆ;
		ᐃΔ[Δ.ⲆⵠΔⲆⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆΔΔᐃⵠⲆⲆ;
		ᐃΔ[Δ.ⲆᐃᐃᐃΔ] = [];
		ᐃΔ[Δ.ⲆᐃᐃᐃΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆᐃᐃΔᐃⲆᐃ;
		ᐃΔ[Δ.ⲆᐃᐃᐃΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⲆᐃᐃⵠⵠᐃ;
		ᐃΔ[Δ.ⲆᐃⵠⲆᐃΔⲆ] = [];
		ᐃΔ[Δ.ⲆᐃⵠⲆᐃΔⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠᐃΔⵠⵠⵠ;
		ᐃΔ[Δ.ⲆᐃⵠⲆᐃΔⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⵠⲆⵠᐃⲆⵠ;
		ᐃΔ[Δ.ⵠⲆⵠΔⲆ] = [];
		ᐃΔ[Δ.ⵠⲆⵠΔⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⵠⲆⲆΔᐃᐃ;
		ᐃΔ[Δ.ⵠⲆⵠΔⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃΔⲆᐃᐃᐃΔ;
		ᐃΔ[Δ.ΔΔΔΔΔᐃΔ] = [];
		ᐃΔ[Δ.ΔΔΔΔΔᐃΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔᐃᐃΔᐃⵠᐃ;
		ᐃΔ[Δ.ΔΔΔΔΔᐃΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆΔⵠΔⵠΔᐃ;
		ᐃΔ[Δ.ᐃΔᐃⲆⵠᐃᐃ] = [];
		ᐃΔ[Δ.ᐃΔᐃⲆⵠᐃᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃΔΔΔΔᐃⲆ;
		ᐃΔ[Δ.ᐃΔᐃⲆⵠᐃᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔᐃᐃᐃⲆΔⵠ;
		ᐃΔ[Δ.ⵠⲆⵠΔΔ] = [];
		ᐃΔ[Δ.ⵠⲆⵠΔΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆᐃⵠⲆΔᐃⵠ;
		ᐃΔ[Δ.ⵠⲆⵠΔΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃⵠⲆⵠᐃⵠ;
		ᐃΔ[Δ.ΔⲆᐃΔⵠⵠⲆ] = [];
		ᐃΔ[Δ.ΔⲆᐃΔⵠⵠⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⵠᐃⲆᐃⲆΔ;
		ᐃΔ[Δ.ΔⲆᐃΔⵠⵠⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⵠⲆⲆⵠΔ;
		ᐃΔ[Δ.ⵠΔⵠⵠΔⵠΔ] = [];
		ᐃΔ[Δ.ⵠΔⵠⵠΔⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⵠⵠⵠΔⲆⲆ;
		ᐃΔ[Δ.ⵠΔⵠⵠΔⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⵠᐃⵠⵠᐃΔ;
		ᐃΔ[Δ.ⲆᐃⵠΔᐃⲆⲆ] = [];
		ᐃΔ[Δ.ⲆᐃⵠΔᐃⲆⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆᐃᐃⵠΔⲆⲆ;
		ᐃΔ[Δ.ⲆᐃⵠΔᐃⲆⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆᐃΔΔᐃΔ;
		ᐃΔ[Δ.ᐃΔΔⲆᐃ] = [];
		ᐃΔ[Δ.ᐃΔΔⲆᐃ][Δ.ⵠΔⵠ] = [ⵠᐃ.ⲆΔⵠΔⲆⵠⲆ];
		ᐃΔ[Δ.ᐃΔΔⲆᐃ][Δ.ⲆⲆⵠ] = [ⵠᐃ.ⵠⵠⵠⲆⲆⲆΔ];
		ᐃΔ[Δ.ᐃⲆⵠⲆⲆ] = [], ᐃΔ[Δ.ᐃⲆⵠⲆⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⵠⵠⲆΔⵠⵠ;
		ᐃΔ[Δ.ᐃⲆⵠⲆⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃΔᐃⲆᐃᐃΔ;
		ᐃΔ[Δ.ΔΔⵠⵠΔ] = [], ᐃΔ[Δ.ΔΔⵠⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃᐃⲆΔⵠΔΔ;
		ᐃΔ[Δ.ΔΔⵠⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠⲆᐃⵠⲆΔΔ;
		ᐃΔ[Δ.ⵠⲆΔⲆⵠ] = [];
		ᐃΔ[Δ.ⵠⲆΔⲆⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⲆᐃⵠΔᐃᐃ;
		ᐃΔ[Δ.ⵠⲆΔⲆⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⵠᐃⵠⲆⵠ;
		ᐃΔ[Δ.ⲆΔᐃΔᐃ] = [];
		ᐃΔ[Δ.ⲆΔᐃΔᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⲆᐃⲆⵠⵠ;
		ᐃΔ[Δ.ⲆΔᐃΔᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆᐃⵠⲆⲆΔ;
		ᐃΔ[Δ.ⲆΔΔⵠΔ] = [];
		ᐃΔ[Δ.ⲆΔΔⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⲆⲆⵠⲆΔᐃ;
		ᐃΔ[Δ.ⲆΔΔⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠΔⵠΔⵠΔ;
		ᐃΔ[Δ.ⵠⵠΔⲆΔ] = [];
		ᐃΔ[Δ.ⵠⵠΔⲆΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆᐃⲆᐃᐃⵠⵠ;
		ᐃΔ[Δ.ⵠⵠΔⲆΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⵠΔⵠⲆⲆ;
		ᐃΔ[Δ.ⲆᐃⵠΔΔ] = [];
		ᐃΔ[Δ.ⲆᐃⵠΔΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔΔΔⵠⵠⵠⵠ;
		ᐃΔ[Δ.ⲆᐃⵠΔΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⲆⲆᐃⵠᐃ;
		ᐃΔ[Δ.ⵠⵠᐃᐃΔ] = [];
		ᐃΔ[Δ.ⵠⵠᐃᐃΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⲆⲆⲆⲆᐃΔ;
		ᐃΔ[Δ.ⵠⵠᐃᐃΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠᐃᐃⵠⲆΔ;
		ᐃΔ[Δ.ⲆⵠΔⵠⵠ] = [];
		ᐃΔ[Δ.ⲆⵠΔⵠⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆᐃᐃᐃᐃᐃⲆ;
		ᐃΔ[Δ.ⲆⵠΔⵠⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠⵠᐃⵠⵠⲆ;
		ᐃΔ[Δ.ⲆⲆᐃⲆΔⲆⵠ] = [];
		ᐃΔ[Δ.ⲆⲆᐃⲆΔⲆⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⵠᐃⵠⲆⵠⵠ;
		ᐃΔ[Δ.ⲆⲆᐃⲆΔⲆⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔΔᐃΔⲆⵠⲆ;
		ᐃΔ[Δ.ⲆⵠⵠⵠⲆⵠⲆ] = [];
		ᐃΔ[Δ.ⲆⵠⵠⵠⲆⵠⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔᐃⵠᐃⵠⲆΔ;
		ᐃΔ[Δ.ⲆⵠⵠⵠⲆⵠⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠΔΔⵠᐃΔ;
		ᐃΔ[Δ.ⵠⲆΔΔⵠ] = [];
		ᐃΔ[Δ.ⵠⲆΔΔⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⵠᐃⲆⲆΔΔ;
		ᐃΔ[Δ.ⵠⲆΔΔⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔᐃⵠⵠΔⲆ;
		ᐃΔ[Δ.ᐃᐃⵠⲆⵠΔⵠ] = ⵠᐃ.ᐃᐃⵠⲆⵠΔⵠ;
		ᐃΔ[Δ.ΔⲆᐃΔⲆΔᐃ] = ⵠᐃ.ΔⲆᐃΔⲆΔᐃ;
		ᐃΔ[Δ.ΔΔⲆᐃⵠ] = [];
		ᐃΔ[Δ.ΔΔⲆᐃⵠ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ΔΔⲆᐃⵠ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ΔΔⲆᐃⵠ][Δ.ⵠΔⵠ].push(ⵠᐃ.ΔⲆⲆⵠΔⲆⲆ);
		ᐃΔ[Δ.ΔΔⲆᐃⵠ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆⲆⵠⲆⵠⵠΔ);
		ᐃΔ[Δ.ΔΔⲆᐃⵠ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃⵠⵠᐃⵠΔ);
		ᐃΔ[Δ.ΔΔⲆᐃⵠ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ᐃⵠᐃᐃΔⵠᐃ);
		ᐃΔ[Δ.ΔΔⲆᐃⵠ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ΔΔᐃᐃᐃᐃⵠ);
		ᐃΔ[Δ.ΔΔⲆᐃⵠ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⵠᐃⵠⵠᐃⲆᐃ);
		ᐃΔ[Δ.ᐃᐃⲆΔᐃ] = [];
		ᐃΔ[Δ.ᐃᐃⲆΔᐃ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ᐃᐃⲆΔᐃ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ᐃᐃⲆΔᐃ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆΔⵠᐃΔⲆᐃ);
		ᐃΔ[Δ.ᐃᐃⲆΔᐃ][Δ.ⵠΔⵠ].push(ⵠᐃ.ΔᐃᐃⵠⵠⲆᐃ);
		ᐃΔ[Δ.ᐃᐃⲆΔᐃ][Δ.ⵠΔⵠ].push(ⵠᐃ.ᐃⵠᐃⵠΔⲆΔ);
		ᐃΔ[Δ.ᐃᐃⲆΔᐃ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⵠⲆⵠⵠᐃΔᐃ);
		ᐃΔ[Δ.ᐃᐃⲆΔᐃ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⲆⲆᐃΔⲆᐃⵠ);
		ᐃΔ[Δ.ᐃᐃⲆΔᐃ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ΔⲆⲆⲆⲆΔⲆ);
		ᐃΔ[Δ.ⵠᐃⵠⵠΔ] = [];
		ᐃΔ[Δ.ⵠᐃⵠⵠΔ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⵠᐃⵠⵠΔ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ⵠᐃⵠⵠΔ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⵠᐃⵠⵠᐃΔᐃ);
		ᐃΔ[Δ.ⵠᐃⵠⵠΔ][Δ.ⵠΔⵠ].push(ⵠᐃ.ᐃΔⲆⲆⵠᐃᐃ);
		ᐃΔ[Δ.ⵠᐃⵠⵠΔ][Δ.ⵠΔⵠ].push(ⵠᐃ.ΔᐃⲆⲆⵠⲆΔ);
		ᐃΔ[Δ.ⵠᐃⵠⵠΔ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆΔⵠΔΔᐃᐃ);
		ᐃΔ[Δ.ⵠᐃⵠⵠΔ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃⲆⲆΔⵠⵠ);
		ᐃΔ[Δ.ⵠᐃⵠⵠΔ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⲆΔⲆⲆⵠⲆᐃ);
		ᐃΔ[Δ.ⵠᐃⵠⵠΔ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⵠᐃⲆⲆΔΔⲆ);
		ᐃΔ[Δ.ⵠᐃⵠⵠΔ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ᐃⵠΔΔᐃᐃⵠ);
		ᐃΔ[Δ.ⵠᐃⵠⵠΔ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ᐃⲆΔⵠⲆΔⵠ);
		ᐃΔ[Δ.ⵠᐃⵠⵠΔ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⲆⲆⲆⲆΔΔⲆ);
		ᐃΔ[Δ.ⵠⵠᐃⵠΔ] = [];
		ᐃΔ[Δ.ⵠⵠᐃⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⵠΔⵠΔⵠⵠ;
		ᐃΔ[Δ.ⵠⵠᐃⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠⵠⵠⲆⲆⲆ;
		ᐃΔ[Δ.ᐃⲆΔⵠᐃⵠⵠ] = [];
		ᐃΔ[Δ.ᐃⲆΔⵠᐃⵠⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠΔΔΔᐃΔᐃ;
		ᐃΔ[Δ.ᐃⲆΔⵠᐃⵠⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃᐃᐃΔΔΔᐃ;
		ᐃΔ[Δ.ⵠᐃⵠⲆᐃⵠΔ] = [];
		ᐃΔ[Δ.ⵠᐃⵠⲆᐃⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔΔⵠΔⵠⵠᐃ;
		ᐃΔ[Δ.ⵠᐃⵠⲆᐃⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃᐃΔΔᐃⲆⲆ;
		ᐃΔ[Δ.ⲆΔⵠⲆⲆⵠΔ] = ⵠᐃ.ⲆΔⵠⲆⲆⵠΔ;
		ᐃΔ[Δ.ⵠⵠⵠΔⵠᐃⵠ] = ⵠᐃ.ⵠⵠⵠΔⵠᐃⵠ;
		ᐃΔ[Δ.ΔⲆⵠΔΔⲆΔ] = ⵠᐃ.ΔⲆⵠΔΔⲆΔ;
		ᐃΔ[Δ.ᐃᐃⵠⲆᐃ] = [];
		ᐃΔ[Δ.ᐃᐃⵠⲆᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃΔᐃⲆᐃΔⵠ;
		ᐃΔ[Δ.ᐃᐃⵠⲆᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆΔᐃΔΔⲆⵠ;
		ᐃΔ[Δ.ᐃᐃⲆⵠⵠ] = [];
		ᐃΔ[Δ.ᐃᐃⲆⵠⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⵠⵠⲆⲆⵠⲆ;
		ᐃΔ[Δ.ᐃᐃⲆⵠⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃᐃⲆⵠᐃⵠⲆ;
		ᐃΔ[Δ.ΔⲆΔΔⵠ] = [];
		ᐃΔ[Δ.ΔⲆΔΔⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠΔⲆⵠⵠ;
		ᐃΔ[Δ.ΔⲆΔΔⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃΔᐃⲆᐃⲆᐃ;
		ᐃΔ[Δ.ⲆΔΔⵠⲆᐃΔ] = [];
		ᐃΔ[Δ.ⲆΔΔⵠⲆᐃΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⵠⵠⲆⲆⵠⲆ;
		ᐃΔ[Δ.ⲆΔΔⵠⲆᐃΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃᐃⲆⵠᐃⵠⲆ;
		ᐃΔ[Δ.ΔⲆΔΔⲆ] = [];
		ᐃΔ[Δ.ΔⲆΔΔⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔᐃᐃⲆⵠⵠⲆ;
		ᐃΔ[Δ.ΔⲆΔΔⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔΔᐃⵠⲆᐃΔ;
		ᐃΔ[Δ.ᐃᐃⵠⵠⵠ] = [];
		ᐃΔ[Δ.ᐃᐃⵠⵠⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠⵠⵠⵠΔ;
		ᐃΔ[Δ.ᐃᐃⵠⵠⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃⲆΔᐃᐃⵠ;
		ᐃΔ[Δ.Δᐃᐃᐃⵠ] = [];
		ᐃΔ[Δ.Δᐃᐃᐃⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⵠΔΔⲆⲆ;
		ᐃΔ[Δ.Δᐃᐃᐃⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⵠΔⲆⵠᐃ;
		ᐃΔ[Δ.ΔΔΔⲆᐃ] = [];
		ᐃΔ[Δ.ΔΔΔⲆᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔΔⲆⵠⵠᐃⲆ;
		ᐃΔ[Δ.ΔΔΔⲆᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⵠΔⲆⲆⵠΔ;
		ᐃΔ[Δ.ⵠΔⲆⵠᐃ] = [];
		ᐃΔ[Δ.ⵠΔⲆⵠᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆⲆⲆⲆⲆᐃ;
		ᐃΔ[Δ.ⵠΔⲆⵠᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃΔΔⲆᐃⵠ;
		ᐃΔ[Δ.ᐃⲆⲆⵠΔ] = [];
		ᐃΔ[Δ.ᐃⲆⲆⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⲆⵠⵠⵠΔⲆ;
		ᐃΔ[Δ.ᐃⲆⲆⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔΔⲆⲆⲆᐃⵠ;
		ᐃΔ[Δ.ⵠᐃⲆᐃΔ] = [];
		ᐃΔ[Δ.ⵠᐃⲆᐃΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔΔᐃΔⲆΔⲆⲆⲆ;
		ᐃΔ[Δ.ⵠᐃⲆᐃΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔΔΔΔⲆΔⲆⵠ;
		ᐃΔ[Δ.ᐃΔᐃΔΔ] = [];
		ᐃΔ[Δ.ᐃΔᐃΔΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠΔᐃⵠΔⵠΔᐃⵠ;
		ᐃΔ[Δ.ᐃΔᐃΔΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⵠΔΔᐃⵠΔΔ;
		ᐃΔ[Δ.ᐃᐃⵠΔⵠ] = [];
		ᐃΔ[Δ.ᐃᐃⵠΔⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⲆⲆⲆⲆΔⲆᐃΔ;
		ᐃΔ[Δ.ᐃᐃⵠΔⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆⵠΔⲆⲆᐃⵠⵠ;
		ᐃΔ[Δ.ⲆⲆⵠΔᐃ] = [];
		ᐃΔ[Δ.ⲆⲆⵠΔᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠΔΔⲆΔⵠⵠΔ;
		ᐃΔ[Δ.ⲆⲆⵠΔᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆΔⵠⲆΔⵠᐃΔ;
		ᐃΔ[Δ.ΔⲆⵠⲆⵠ] = [];
		ᐃΔ[Δ.ΔⲆⵠⲆⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⲆⲆⲆⵠⵠΔⲆᐃ;
		ᐃΔ[Δ.ΔⲆⵠⲆⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆⵠⲆⵠᐃⲆⲆΔ;
		ᐃΔ[Δ.ⲆⲆΔⵠΔ] = [];
		ᐃΔ[Δ.ⲆⲆΔⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⲆᐃΔΔΔⲆⲆⵠ;
		ᐃΔ[Δ.ⲆⲆΔⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠⵠⵠⵠᐃⲆᐃΔ;
		ᐃΔ[Δ.ΔⲆⵠⵠⲆ] = [];
		ᐃΔ[Δ.ΔⲆⵠⵠⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⲆⵠᐃΔΔⲆ;
		ᐃΔ[Δ.ΔⲆⵠⵠⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔΔⲆΔⵠᐃⵠ;
		ᐃΔ[Δ.ΔⲆᐃⵠⵠ] = [];
		ᐃΔ[Δ.ΔⲆᐃⵠⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃᐃΔᐃⵠⵠᐃ;
		ᐃΔ[Δ.ΔⲆᐃⵠⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⵠΔⵠᐃⲆ;
		ᐃΔ[Δ.ᐃΔⲆᐃⵠ] = [];
		ᐃΔ[Δ.ᐃΔⲆᐃⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⵠΔᐃⵠΔᐃΔΔ;
		ᐃΔ[Δ.ᐃΔⲆᐃⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⵠⲆⵠⲆᐃⵠⲆⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆΔ] = [];
		ᐃΔ[Δ.ⵠΔⲆⲆΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠⵠⵠΔᐃⲆⲆ;
		ᐃΔ[Δ.ⵠΔⲆⲆΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃᐃᐃᐃⵠⵠⲆⵠ;
		ᐃΔ[Δ.ᐃⲆⲆⵠⵠ] = [];
		ᐃΔ[Δ.ᐃⲆⲆⵠⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⵠΔᐃⵠᐃΔⲆΔ;
		ᐃΔ[Δ.ᐃⲆⲆⵠⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⲆⲆΔᐃΔᐃΔⵠ;
		ᐃΔ[Δ.ΔⵠΔⵠⲆ] = [];
		ᐃΔ[Δ.ΔⵠΔⵠⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⲆΔᐃⵠᐃΔᐃ;
		ᐃΔ[Δ.ΔⵠΔⵠⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔΔΔⲆⵠⵠⵠᐃᐃ;
		ᐃΔ[Δ.ⵠᐃΔⵠΔ] = [];
		ᐃΔ[Δ.ⵠᐃΔⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⲆⲆΔⵠⵠⵠᐃⲆ;
		ᐃΔ[Δ.ⵠᐃΔⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃⵠⵠⲆᐃⵠⵠⲆ;
		ᐃΔ[Δ.ⵠᐃΔΔΔ] = [];
		ᐃΔ[Δ.ⵠᐃΔΔΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠᐃⲆⲆΔΔⲆⲆΔ;
		ᐃΔ[Δ.ⵠᐃΔΔΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃΔⲆⲆⲆᐃΔᐃⲆ;
		ᐃΔ[Δ.ᐃⵠⲆΔΔ] = [];
		ᐃΔ[Δ.ᐃⵠⲆΔΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃΔΔⵠᐃΔⲆ;
		ᐃΔ[Δ.ᐃⵠⲆΔΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠᐃⲆⲆⲆᐃ;
		ᐃΔ[Δ.ⵠᐃΔⲆᐃ] = [];
		ᐃΔ[Δ.ⵠᐃΔⲆᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⲆⲆᐃᐃⵠⲆᐃΔ;
		ᐃΔ[Δ.ⵠᐃΔⲆᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⵠⲆⲆᐃᐃⵠⵠ;
		ᐃΔ[Δ.ⲆⲆᐃⲆΔ] = [];
		ᐃΔ[Δ.ⲆⲆᐃⲆΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⵠΔΔᐃΔⵠ;
		ᐃΔ[Δ.ⲆⲆᐃⲆΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔΔⲆᐃΔⲆᐃ;
		ᐃΔ[Δ.ⲆⲆΔᐃΔ] = [];
		ᐃΔ[Δ.ⲆⲆΔᐃΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆΔΔᐃᐃᐃⵠᐃ;
		ᐃΔ[Δ.ⲆⲆΔᐃΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆΔⲆᐃⲆⲆⲆⲆ;
		ᐃΔ[Δ.ᐃⲆΔΔΔ] = [];
		ᐃΔ[Δ.ᐃⲆΔΔΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔΔⲆᐃΔᐃΔ;
		ᐃΔ[Δ.ᐃⲆΔΔΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⲆⵠⵠⲆⵠ;
		ᐃΔ[Δ.ΔᐃⵠᐃΔ] = [];
		ᐃΔ[Δ.ΔᐃⵠᐃΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔᐃⵠᐃⵠⵠΔᐃᐃ;
		ᐃΔ[Δ.ΔᐃⵠᐃΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔᐃΔⵠⲆᐃⵠΔΔ;
		ᐃΔ[Δ.ⵠⵠᐃⲆⲆ] = [];
		ᐃΔ[Δ.ⵠⵠᐃⲆⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⲆⲆⲆⵠⵠⲆ;
		ᐃΔ[Δ.ⵠⵠᐃⲆⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⲆΔΔᐃᐃΔ;
		ᐃΔ[Δ.ⲆΔⵠⲆᐃ] = [];
		ᐃΔ[Δ.ⲆΔⵠⲆᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⵠᐃⵠΔⵠⲆⵠᐃ;
		ᐃΔ[Δ.ⲆΔⵠⲆᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆᐃᐃᐃᐃⲆΔⵠ;
		ᐃΔ[Δ.ⵠᐃⵠⲆⵠ] = [];
		ᐃΔ[Δ.ⵠᐃⵠⲆⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔᐃᐃⵠΔⲆᐃ;
		ᐃΔ[Δ.ⵠᐃⵠⲆⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⲆΔΔⵠⲆ;
		ᐃΔ[Δ.ΔⲆᐃᐃᐃ] = [];
		ᐃΔ[Δ.ΔⲆᐃᐃᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆᐃᐃⵠⲆⵠΔΔᐃ;
		ᐃΔ[Δ.ΔⲆᐃᐃᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠΔⵠᐃᐃΔΔΔ;
		ᐃΔ[Δ.ⵠᐃᐃΔΔ] = [];
		ᐃΔ[Δ.ⵠᐃᐃΔΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠΔⵠᐃⵠΔⵠ;
		ᐃΔ[Δ.ⵠᐃᐃΔΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃΔᐃⲆᐃᐃⵠᐃ;
		ᐃΔ[Δ.ⲆᐃΔⲆᐃ] = [];
		ᐃΔ[Δ.ⲆᐃΔⲆᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⲆᐃⲆΔⵠΔⲆⲆ;
		ᐃΔ[Δ.ⲆᐃΔⲆᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠⲆᐃΔᐃⵠᐃΔΔ;
		ᐃΔ[Δ.ⵠⲆⵠⲆΔ] = [];
		ᐃΔ[Δ.ⵠⲆⵠⲆΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠΔᐃΔᐃⲆΔ;
		ᐃΔ[Δ.ⵠⲆⵠⲆΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔⲆᐃΔⲆⵠ;
		ᐃΔ[Δ.ΔΔⵠⲆΔ] = [];
		ᐃΔ[Δ.ΔΔⵠⲆΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⵠⲆⲆΔⲆᐃⵠ;
		ᐃΔ[Δ.ΔΔⵠⲆΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔᐃΔⵠᐃⵠⵠΔΔ;
		ᐃΔ[Δ.ᐃⲆΔΔⵠ] = [];
		ᐃΔ[Δ.ᐃⲆΔΔⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⵠⵠᐃΔΔ;
		ᐃΔ[Δ.ᐃⲆΔΔⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⲆΔⵠⵠⲆΔ;
		ᐃΔ[Δ.ᐃΔⲆΔΔ] = [];
		ᐃΔ[Δ.ᐃΔⲆΔΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠᐃᐃΔⲆΔ;
		ᐃΔ[Δ.ᐃΔⲆΔΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠᐃᐃⵠᐃΔ;
		ᐃΔ[Δ.ⲆΔⵠⵠⲆ] = [];
		ᐃΔ[Δ.ⲆΔⵠⵠⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃΔⲆᐃⲆⲆⲆ;
		ᐃΔ[Δ.ⲆΔⵠⵠⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆᐃΔΔᐃΔ;
		ᐃΔ[Δ.ΔᐃⲆΔᐃᐃΔ] = [];
		ᐃΔ[Δ.ΔᐃⲆΔᐃᐃΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⲆΔΔᐃⲆᐃ;
		ᐃΔ[Δ.ΔᐃⲆΔᐃᐃΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆΔⲆᐃΔᐃ;
		ᐃΔ[Δ.ΔⲆᐃᐃΔⲆⵠ] = [];
		ᐃΔ[Δ.ΔⲆᐃᐃΔⲆⵠ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ΔⲆᐃᐃΔⲆⵠ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ΔⲆᐃᐃΔⲆⵠ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⵠΔⵠΔⲆⵠᐃᐃⵠ);
		ᐃΔ[Δ.ΔⲆᐃᐃΔⲆⵠ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆⲆⲆⵠⵠᐃⲆⵠⲆ);
		ᐃΔ[Δ.ΔⲆᐃᐃΔⲆⵠ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⲆⲆⲆⵠⵠᐃⲆⵠⲆ);
		ᐃΔ[Δ.ΔⲆᐃᐃΔⲆⵠ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ᐃΔΔⵠⵠⵠⲆⵠⵠ);
		ᐃΔ[Δ.ⵠⵠⲆⵠΔ] = [];
		ᐃΔ[Δ.ⵠⵠⲆⵠΔ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⵠⵠⲆⵠΔ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ⵠⵠⲆⵠΔ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⵠⵠⵠⵠⲆᐃᐃ);
		ᐃΔ[Δ.ⵠⵠⲆⵠΔ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃⵠⵠⲆᐃΔ);
		ᐃΔ[Δ.ⵠⵠⲆⵠΔ][Δ.ⵠΔⵠ].push(ⵠᐃ.ᐃⵠⲆΔΔᐃΔ);
		ᐃΔ[Δ.ⵠⵠⲆⵠΔ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ΔⲆᐃΔΔΔΔ);
		ᐃΔ[Δ.ⵠⵠⲆⵠΔ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⵠⲆΔⲆΔⲆΔ);
		ᐃΔ[Δ.ⵠⵠⲆⵠΔ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ᐃΔᐃⵠⲆΔⲆ);
		ᐃΔ[Δ.ᐃⲆΔⵠⵠ] = [];
		ᐃΔ[Δ.ᐃⲆΔⵠⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔᐃᐃᐃⲆᐃⲆ;
		ᐃΔ[Δ.ᐃⲆΔⵠⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠΔᐃⵠⲆΔ;
		ᐃΔ[Δ.ⲆⵠⵠⲆᐃ] = [];
		ᐃΔ[Δ.ⲆⵠⵠⲆᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆᐃΔᐃΔⵠⵠ;
		ᐃΔ[Δ.ⲆⵠⵠⲆᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃᐃᐃΔⵠⲆ;
		ᐃΔ[Δ.ᐃᐃⲆᐃⲆ] = [];
		ᐃΔ[Δ.ᐃᐃⲆᐃⲆ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ᐃᐃⲆᐃⲆ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ᐃᐃⲆᐃⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⵠⲆⲆⵠΔᐃᐃ);
		ᐃΔ[Δ.ᐃᐃⲆᐃⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ΔᐃⵠⵠΔΔΔ);
		ᐃΔ[Δ.ᐃᐃⲆᐃⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⵠⲆᐃΔⵠⵠΔ);
		ᐃΔ[Δ.ᐃᐃⲆᐃⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ΔᐃⵠⵠᐃⵠⲆ);
		ᐃΔ[Δ.ᐃᐃⲆᐃⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ΔΔⲆᐃᐃⵠⲆ);
		ᐃΔ[Δ.ᐃᐃⲆᐃⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ᐃΔⵠᐃΔΔΔ);
		ᐃΔ[Δ.ⲆᐃⲆⲆ] = [];
		ᐃΔ[Δ.ⲆᐃⲆⲆ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⲆᐃⲆⲆ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ⲆᐃⲆⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆⵠⲆⲆⵠⲆΔ);
		ᐃΔ[Δ.ⲆᐃⲆⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⵠΔΔᐃⵠⲆᐃ);
		ᐃΔ[Δ.ⲆᐃⲆⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃΔᐃΔᐃⲆ);
		ᐃΔ[Δ.ⲆᐃⲆⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ᐃⵠⵠᐃⲆΔᐃ);
		ᐃΔ[Δ.ⲆᐃⲆⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⵠᐃΔⵠᐃⲆⵠ);
		ᐃΔ[Δ.ⲆᐃⲆⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ᐃⵠⵠΔᐃⲆⵠ);
		ᐃΔ[Δ.ⲆᐃᐃΔⲆ] = [];
		ᐃΔ[Δ.ⲆᐃᐃΔⲆ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⲆᐃᐃΔⲆ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ⲆᐃᐃΔⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ᐃⲆⵠᐃⵠΔᐃ);
		ᐃΔ[Δ.ⲆᐃᐃΔⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ᐃΔᐃⵠΔᐃᐃ);
		ᐃΔ[Δ.ⲆᐃᐃΔⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃⲆᐃⵠⵠΔ);
		ᐃΔ[Δ.ⲆᐃᐃΔⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ΔⵠⲆⵠΔⲆⲆ);
		ᐃΔ[Δ.ⲆᐃᐃΔⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⵠᐃᐃⲆⲆᐃⲆ);
		ᐃΔ[Δ.ⲆᐃᐃΔⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃᐃΔⲆΔΔ);
		ᐃΔ[Δ.ⲆᐃᐃΔⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ᐃᐃⲆΔΔⲆΔ);
		ᐃΔ[Δ.ⲆᐃᐃΔⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ᐃⵠⲆᐃⵠⵠⲆ);
		ᐃΔ[Δ.ⲆᐃᐃΔⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ᐃΔΔᐃΔⵠⲆ);
		ᐃΔ[Δ.ⲆᐃᐃΔⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⲆⲆΔⲆⵠⵠⲆ);
		ᐃΔ[Δ.ⲆᐃᐃΔⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⲆΔΔⲆᐃⵠⲆ);
		ᐃΔ[Δ.ⲆᐃᐃΔⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ᐃⵠⲆⵠΔⲆΔ);
		ᐃΔ[Δ.ⵠⵠⵠΔⲆ] = [];
		ᐃΔ[Δ.ⵠⵠⵠΔⲆ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⵠⵠⵠΔⲆ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ⵠⵠⵠΔⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⵠⵠⵠⵠᐃⲆⲆ);
		ᐃΔ[Δ.ⵠⵠⵠΔⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ΔΔⲆΔᐃⵠⲆ);
		ᐃΔ[Δ.ⵠⵠⵠΔⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ᐃⲆⲆⵠⵠⵠⵠ);
		ᐃΔ[Δ.ⵠⵠⵠΔⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆΔΔΔᐃᐃⲆ);
		ᐃΔ[Δ.ⵠⵠⵠΔⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⵠᐃⲆⵠⵠᐃⲆ);
		ᐃΔ[Δ.ⵠⵠⵠΔⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃᐃᐃⵠΔᐃ);
		ᐃΔ[Δ.ⵠⵠⵠΔⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⵠⵠⲆⵠΔⵠⲆ);
		ᐃΔ[Δ.ⵠⵠⵠΔⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⵠⵠⲆⲆᐃᐃᐃ);
		ᐃΔ[Δ.ⵠⵠⵠΔⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ᐃⵠᐃⵠⲆⵠᐃ);
		ᐃΔ[Δ.ⵠⵠⵠΔⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ΔⵠⲆΔΔⵠΔ);
		ᐃΔ[Δ.ⵠⵠⵠΔⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ΔΔᐃⵠᐃᐃⲆ);
		ᐃΔ[Δ.ⵠⵠⵠΔⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⲆⵠⵠᐃⵠⲆⲆ);
		ᐃΔ[Δ.ΔΔᐃΔΔΔⲆ] = [];
		ᐃΔ[Δ.ΔΔᐃΔΔΔⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⲆΔⲆΔΔⲆ;
		ᐃΔ[Δ.ΔΔᐃΔΔΔⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃΔΔⲆᐃⲆ;
		ᐃΔ[Δ.ⲆⵠⵠⵠⲆⲆⲆ] = ⵠᐃ.ⲆᐃᐃᐃᐃⲆᐃ;
		ᐃΔ[Δ.ⵠⵠΔⵠᐃ] = [];
		ᐃΔ[Δ.ⵠⵠΔⵠᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠΔᐃᐃⵠΔⵠΔ;
		ᐃΔ[Δ.ⵠⵠΔⵠᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠⵠᐃⲆⵠΔⵠᐃ;
		ᐃΔ[Δ.ⲆᐃᐃⵠⲆ] = [];
		ᐃΔ[Δ.ⲆᐃᐃⵠⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⲆΔᐃⲆᐃⵠ;
		ᐃΔ[Δ.ⲆᐃᐃⵠⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⲆⵠᐃᐃᐃ;
		ᐃΔ[Δ.ᐃΔⲆᐃⲆ] = [];
		ᐃΔ[Δ.ᐃΔⲆᐃⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠᐃᐃⲆⵠΔᐃ;
		ᐃΔ[Δ.ᐃΔⲆᐃⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠⵠᐃⵠᐃΔ;
		ᐃΔ[Δ.ⵠⵠⵠⵠΔ] = [];
		ᐃΔ[Δ.ⵠⵠⵠⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠΔᐃᐃᐃᐃⵠ;
		ᐃΔ[Δ.ⵠⵠⵠⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔᐃⲆΔΔⵠ;
		ᐃΔ[Δ.ⵠⲆⲆΔᐃ] = [];
		ᐃΔ[Δ.ⵠⲆⲆΔᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⲆΔⵠᐃⲆΔ;
		ᐃΔ[Δ.ⵠⲆⲆΔᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔΔΔΔⲆᐃⲆ;
		ᐃΔ[Δ.ⲆⵠⲆΔⵠⵠⲆ] = ⵠᐃ.ⲆⵠⲆΔⵠⵠⲆ;
		ᐃΔ[Δ.ⲆΔⵠⲆⲆᐃᐃ] = [];
		ᐃΔ[Δ.ⲆΔⵠⲆⲆᐃᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠΔⲆⲆΔⵠΔ;
		ᐃΔ[Δ.ⲆΔⵠⲆⲆᐃᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⵠᐃⵠⵠⲆⵠ;
		ᐃΔ[Δ.ΔΔΔⵠⲆⲆⲆ] = [];
		ᐃΔ[Δ.ΔΔΔⵠⲆⲆⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔΔⵠⲆⲆⵠΔ;
		ᐃΔ[Δ.ΔΔΔⵠⲆⲆⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⵠᐃΔⲆⲆⵠ;
		ᐃΔ[Δ.ⵠⵠⲆⲆⵠⲆⲆ] = ⵠᐃ.ⵠⵠⲆⲆⵠⲆⲆ;
		ᐃΔ[Δ.ⲆⵠⵠⵠⵠⲆⵠ] = ⵠᐃ.ⲆⵠⵠⵠⵠⲆⵠ;
		ᐃΔ[Δ.ⵠⵠⲆⲆⲆⵠΔ] = ⵠᐃ.ⵠⵠⲆⲆⲆⵠΔ;
		ᐃΔ[Δ.ⵠΔᐃᐃΔᐃⲆ] = [];
		ᐃΔ[Δ.ⵠΔᐃᐃΔᐃⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆⲆᐃⲆⵠⲆ;
		ᐃΔ[Δ.ⵠΔᐃᐃΔᐃⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔᐃΔⵠΔⵠ;
		ᐃΔ[Δ.ⵠΔⲆᐃΔᐃⵠ] = [];
		ᐃΔ[Δ.ⵠΔⲆᐃΔᐃⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⵠⲆᐃⲆᐃΔ;
		ᐃΔ[Δ.ⵠΔⲆᐃΔᐃⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆᐃⵠⵠⲆᐃ;
		ᐃΔ[Δ.ΔⲆⲆᐃⵠΔⲆ] = [];
		ᐃΔ[Δ.ΔⲆⲆᐃⵠΔⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆΔΔⵠᐃⲆΔ;
		ᐃΔ[Δ.ΔⲆⲆᐃⵠΔⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔΔΔⵠⲆⵠⲆ;
		ᐃΔ[Δ.ᐃⵠᐃΔⵠⲆᐃ] = ⵠᐃ.ᐃⵠᐃΔⵠⲆᐃ;
		ᐃΔ[Δ.ΔⵠᐃⲆΔⲆⲆ] = ⵠᐃ.ΔⵠᐃⲆΔⲆⲆ;
		ᐃΔ[Δ.ΔⵠⲆⲆΔⲆΔ] = ⵠᐃ.ΔⵠⲆⲆΔⲆΔ;
		ᐃΔ[Δ.ⲆᐃᐃⲆⵠⵠⵠ] = [];
		ᐃΔ[Δ.ⲆᐃᐃⲆⵠⵠⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⵠⲆᐃⵠⵠΔ;
		ᐃΔ[Δ.ⲆᐃᐃⲆⵠⵠⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆΔⲆᐃᐃᐃ;
		ᐃΔ[Δ.ⲆΔⲆⲆΔⵠⵠ] = [];
		ᐃΔ[Δ.ⲆΔⲆⲆΔⵠⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠᐃᐃⵠⲆᐃⲆ;
		ᐃΔ[Δ.ⲆΔⲆⲆΔⵠⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔᐃΔⲆⲆⵠⲆ;
		ᐃΔ[Δ.ⵠⲆⲆⵠᐃ] = [];
		ᐃΔ[Δ.ⵠⲆⲆⵠᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠΔᐃᐃⵠᐃ;
		ᐃΔ[Δ.ⵠⲆⲆⵠᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆⲆΔᐃΔⲆ;
		ᐃΔ[Δ.ᐃⲆᐃⵠⲆⲆⵠ] = [];
		ᐃΔ[Δ.ᐃⲆᐃⵠⲆⲆⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⵠΔⵠᐃⲆⵠ;
		ᐃΔ[Δ.ᐃⲆᐃⵠⲆⲆⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃΔⲆΔⲆᐃⲆ;
		ᐃΔ[Δ.ᐃⵠⲆΔΔⲆⵠ] = [];
		ᐃΔ[Δ.ᐃⵠⲆΔΔⲆⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⲆⲆΔⵠΔᐃ;
		ᐃΔ[Δ.ᐃⵠⲆΔΔⲆⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔᐃΔⲆΔⲆⲆ;
		ᐃΔ[Δ.ⲆΔⵠᐃⵠⲆᐃ] = [];
		ᐃΔ[Δ.ⲆΔⵠᐃⵠⲆᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⵠⵠⵠⲆΔⵠ;
		ᐃΔ[Δ.ⲆΔⵠᐃⵠⲆᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆⲆⵠⲆᐃⲆ;
		ᐃΔ[Δ.ΔΔΔΔⲆⵠΔ] = [];
		ᐃΔ[Δ.ΔΔΔΔⲆⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠᐃⲆᐃⵠᐃⲆ;
		ᐃΔ[Δ.ΔΔΔΔⲆⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆᐃⲆΔᐃᐃ;
		ᐃΔ[Δ.ⵠᐃΔⲆᐃᐃΔ] = ⵠᐃ.ⵠᐃΔⲆᐃᐃΔ;
		ᐃΔ[Δ.ⲆᐃⵠⲆⵠⲆⲆ] = ⵠᐃ.ⲆᐃⵠⲆⵠⲆⲆ;
		ᐃΔ[Δ.ⵠΔⵠⲆⵠⵠᐃ] = ⵠᐃ.ⵠΔⵠⲆⵠⵠᐃ;
		ᐃΔ[Δ.ⲆΔᐃᐃᐃⵠⵠ] = ⵠᐃ.ⲆΔᐃᐃᐃⵠⵠ;
		ᐃΔ[Δ.ᐃΔᐃΔⵠⲆΔ] = ⵠᐃ.ᐃΔᐃΔⵠⲆΔ;
		ᐃΔ[Δ.ᐃΔⲆΔΔⵠΔ] = ⵠᐃ.ᐃΔⲆΔΔⵠΔ;
		ᐃΔ[Δ.ⲆⲆⵠᐃᐃΔⲆ] = [];
		ᐃΔ[Δ.ⲆⲆⵠᐃᐃΔⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆᐃᐃΔΔⵠ;
		ᐃΔ[Δ.ⲆⲆⵠᐃᐃΔⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔᐃⵠΔⵠᐃ;
		ᐃΔ[Δ.ⲆΔΔᐃⲆ] = [];
		ᐃΔ[Δ.ⲆΔΔᐃⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆΔⲆⵠⲆΔΔ;
		ᐃΔ[Δ.ⲆΔΔᐃⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⲆⲆⲆΔΔ;
		ᐃΔ[Δ.ⵠΔΔΔⲆ] = [];
		ᐃΔ[Δ.ⵠΔΔΔⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠΔᐃⲆⵠⲆᐃᐃⵠ;
		ᐃΔ[Δ.ⵠΔΔΔⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔⲆⵠⵠΔⲆΔΔ;
		ᐃΔ[Δ.ⲆΔΔᐃⲆᐃΔ] = [];
		ᐃΔ[Δ.ⲆΔΔᐃⲆᐃΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃᐃᐃⵠⲆᐃⵠ;
		ᐃΔ[Δ.ⲆΔΔᐃⲆᐃΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔᐃⵠⵠᐃⵠΔ;
		ᐃΔ[Δ.ⲆⲆΔⲆⲆΔᐃ] = ⵠᐃ.ⲆⲆΔⲆⲆΔᐃ;
		ᐃΔ[Δ.ᐃΔⲆⵠⵠⵠᐃ] = ⵠᐃ.ᐃΔⲆⵠⵠⵠᐃ;
		ᐃΔ[Δ.ᐃᐃΔΔᐃΔⵠ] = [];
		ᐃΔ[Δ.ᐃᐃΔΔᐃΔⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠΔⵠΔⵠᐃⵠ;
		ᐃΔ[Δ.ᐃᐃΔΔᐃΔⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⲆⵠΔᐃᐃΔ;
		ᐃΔ[Δ.ⲆⵠⲆⵠᐃ] = [];
		ᐃΔ[Δ.ⲆⵠⲆⵠᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⲆΔᐃᐃⲆΔ;
		ᐃΔ[Δ.ⲆⵠⲆⵠᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠⲆΔᐃⲆΔⲆ;
		ᐃΔ[Δ.ᐃᐃⵠᐃᐃⲆᐃ] = [];
		ᐃΔ[Δ.ᐃᐃⵠᐃᐃⲆᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠⵠΔⲆⲆ;
		ᐃΔ[Δ.ᐃᐃⵠᐃᐃⲆᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃᐃⲆΔᐃⵠⲆ;
		ᐃΔ[Δ.ⲆΔⵠⲆⵠΔⲆ] = [];
		ᐃΔ[Δ.ⲆΔⵠⲆⵠΔⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆΔⲆᐃⲆΔⲆ;
		ᐃΔ[Δ.ⲆΔⵠⲆⵠΔⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆᐃΔΔⵠⵠ;
		ᐃΔ[Δ.ᐃᐃⵠᐃᐃΔⵠ] = [];
		ᐃΔ[Δ.ᐃᐃⵠᐃᐃΔⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆᐃΔᐃⲆΔ;
		ᐃΔ[Δ.ᐃᐃⵠᐃᐃΔⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔᐃΔΔⲆⲆⲆ;
		ᐃΔ[Δ.ΔⵠᐃⵠΔᐃΔ] = [];
		ᐃΔ[Δ.ΔⵠᐃⵠΔᐃΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠΔΔⵠⲆⵠⵠ;
		ᐃΔ[Δ.ΔⵠᐃⵠΔᐃΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔΔⲆΔΔΔⵠ;
		ᐃΔ[Δ.ΔΔⲆᐃΔⲆⵠ] = [];
		ᐃΔ[Δ.ΔΔⲆᐃΔⲆⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⲆⲆΔⲆⲆⲆ;
		ᐃΔ[Δ.ΔΔⲆᐃΔⲆⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⵠᐃΔᐃⵠΔ;
		ᐃΔ[Δ.ⲆΔᐃᐃⲆΔᐃ] = [];
		ᐃΔ[Δ.ⲆΔᐃᐃⲆΔᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠΔⵠᐃΔΔⲆ;
		ᐃΔ[Δ.ⲆΔᐃᐃⲆΔᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃΔⵠⵠⵠᐃᐃ;
		ᐃΔ[Δ.ᐃᐃⲆΔΔᐃⲆ] = [];
		ᐃΔ[Δ.ᐃᐃⲆΔΔᐃⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠᐃᐃᐃᐃ;
		ᐃΔ[Δ.ᐃᐃⲆΔΔᐃⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆΔⲆᐃᐃⲆ;
		ᐃΔ[Δ.ⵠΔⵠⲆⵠΔᐃ] = ⵠᐃ.ⵠΔⵠⲆⵠΔᐃ;
		ᐃΔ[Δ.ΔΔᐃⵠΔᐃⲆ] = ⵠᐃ.ΔΔᐃⵠΔᐃⲆ;
		ᐃΔ[Δ.ⵠⲆᐃⵠⵠᐃⵠ] = ⵠᐃ.ⵠⲆᐃⵠⵠᐃⵠ;
		ᐃΔ[Δ.ⵠⵠᐃⲆΔᐃᐃ] = [];
		ᐃΔ[Δ.ⵠⵠᐃⲆΔᐃᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠΔΔΔᐃᐃ;
		ᐃΔ[Δ.ⵠⵠᐃⲆΔᐃᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆΔⵠᐃΔΔΔ;
		ᐃΔ[Δ.ⲆᐃⲆⲆΔ] = [];
		ᐃΔ[Δ.ⲆᐃⲆⲆΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠΔⵠⵠᐃⵠ;
		ᐃΔ[Δ.ⲆᐃⲆⲆΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔᐃΔᐃΔⲆⲆ;
		ᐃΔ[Δ.ⵠⲆᐃᐃΔⵠΔ] = [];
		ᐃΔ[Δ.ⵠⲆᐃᐃΔⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔΔⲆΔᐃⲆⵠ;
		ᐃΔ[Δ.ⵠⲆᐃᐃΔⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔΔᐃⵠⵠⲆⲆ;
		ᐃΔ[Δ.ⵠΔⵠᐃⲆⵠⵠ] = [];
		ᐃΔ[Δ.ⵠΔⵠᐃⲆⵠⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⵠᐃΔⲆΔⵠ;
		ᐃΔ[Δ.ⵠΔⵠᐃⲆⵠⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⵠΔⵠⵠΔⵠ;
		ᐃΔ[Δ.ᐃᐃΔⲆᐃⵠⲆ] = [];
		ᐃΔ[Δ.ᐃᐃΔⲆᐃⵠⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⲆⲆᐃᐃⲆᐃ;
		ᐃΔ[Δ.ᐃᐃΔⲆᐃⵠⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔΔⲆⵠΔⲆ;
		ᐃΔ[Δ.ᐃΔΔᐃⲆΔⵠ] = [];
		ᐃΔ[Δ.ᐃΔΔᐃⲆΔⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⲆᐃⲆᐃΔⲆ;
		ᐃΔ[Δ.ᐃΔΔᐃⲆΔⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔᐃⵠᐃᐃⲆᐃ;
		ᐃΔ[Δ.ΔⵠΔⲆᐃⵠᐃ] = [];
		ᐃΔ[Δ.ΔⵠΔⲆᐃⵠᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠΔΔⲆⲆᐃⲆ;
		ᐃΔ[Δ.ΔⵠΔⲆᐃⵠᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔᐃⲆΔⵠΔΔ;
		ᐃΔ[Δ.ⵠΔᐃᐃᐃᐃᐃ] = [];
		ᐃΔ[Δ.ⵠΔᐃᐃᐃᐃᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠΔⵠΔΔⲆΔ;
		ᐃΔ[Δ.ⵠΔᐃᐃᐃᐃᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔΔᐃⲆⲆᐃ;
		ᐃΔ[Δ.ⲆᐃⵠⵠⲆᐃⲆ] = [];
		ᐃΔ[Δ.ⲆᐃⵠⵠⲆᐃⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⲆⲆⵠⲆΔ;
		ᐃΔ[Δ.ⲆᐃⵠⵠⲆᐃⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆΔⲆⵠΔⲆΔ;
		ᐃΔ[Δ.ⲆᐃⲆⵠⵠΔᐃ] = ⵠᐃ.ⲆᐃⲆⵠⵠΔᐃ;
		ᐃΔ[Δ.ⲆΔⵠΔⵠⵠⲆ] = ⵠᐃ.ⲆΔⵠΔⵠⵠⲆ;
		ᐃΔ[Δ.ⵠΔΔⵠᐃⵠⲆ] = ⵠᐃ.ⵠΔΔⵠᐃⵠⲆ;
		ᐃΔ[Δ.ΔΔⲆᐃᐃⵠᐃ] = [];
		ᐃΔ[Δ.ΔΔⲆᐃᐃⵠᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃΔΔΔΔⲆᐃ;
		ᐃΔ[Δ.ΔΔⲆᐃᐃⵠᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⵠⵠⲆⲆⲆΔ;
		ᐃΔ[Δ.ΔⵠⲆΔᐃ] = [];
		ᐃΔ[Δ.ΔⵠⲆΔᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⵠᐃⵠⵠΔΔ;
		ᐃΔ[Δ.ΔⵠⲆΔᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠⲆⵠⲆⲆΔ;
		ᐃΔ[Δ.ᐃᐃΔⲆⵠⲆΔ] = ⵠᐃ.ᐃᐃΔⲆⵠⲆΔ;
		ᐃΔ[Δ.ᐃⲆⵠᐃᐃᐃΔ] = [];
		ᐃΔ[Δ.ᐃⲆⵠᐃᐃᐃΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃᐃΔᐃᐃΔᐃ;
		ᐃΔ[Δ.ᐃⲆⵠᐃᐃᐃΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⲆᐃⲆⲆᐃΔ;
		ᐃΔ[Δ.ⵠΔΔᐃᐃⵠⲆ] = [];
		ᐃΔ[Δ.ⵠΔΔᐃᐃⵠⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠΔΔⵠⵠⲆⲆ;
		ᐃΔ[Δ.ⵠΔΔᐃᐃⵠⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔᐃΔΔᐃΔ;
		ᐃΔ[Δ.ⲆⵠⵠⵠⲆᐃᐃ] = [];
		ᐃΔ[Δ.ⲆⵠⵠⵠⲆᐃᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆΔᐃᐃᐃⲆⵠ;
		ᐃΔ[Δ.ⲆⵠⵠⵠⲆᐃᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆΔᐃᐃᐃⵠᐃ;
		ᐃΔ[Δ.ᐃᐃⲆⵠᐃⲆⲆ] = [];
		ᐃΔ[Δ.ᐃᐃⲆⵠᐃⲆⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃᐃᐃⲆⲆⵠΔ;
		ᐃΔ[Δ.ᐃᐃⲆⵠᐃⲆⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃΔⵠᐃΔᐃⵠ;
		ᐃΔ[Δ.ᐃΔΔⵠⲆⲆΔ] = [];
		ᐃΔ[Δ.ᐃΔΔⵠⲆⲆΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⵠⲆⵠⵠⵠΔ;
		ᐃΔ[Δ.ᐃΔΔⵠⲆⲆΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔᐃᐃⲆᐃᐃⵠ;
		ᐃΔ[Δ.ⲆΔⵠΔᐃⵠⲆ] = [];
		ᐃΔ[Δ.ⲆΔⵠΔᐃⵠⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆᐃⵠⵠⵠΔ;
		ᐃΔ[Δ.ⲆΔⵠΔᐃⵠⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⵠᐃⵠⵠΔᐃ;
		ᐃΔ[Δ.ᐃⲆⲆⲆᐃⵠΔ] = [];
		ᐃΔ[Δ.ᐃⲆⲆⲆᐃⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃᐃᐃⵠᐃᐃᐃ;
		ᐃΔ[Δ.ᐃⲆⲆⲆᐃⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃⲆΔΔᐃⵠ;
		ᐃΔ[Δ.ⲆⲆΔⵠⵠΔⲆ] = [];
		ᐃΔ[Δ.ⲆⲆΔⵠⵠΔⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⲆⵠⵠⲆΔΔ;
		ᐃΔ[Δ.ⲆⲆΔⵠⵠΔⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔΔΔⵠⵠⲆΔ;
		ᐃΔ[Δ.ⲆⵠⲆᐃⵠⵠᐃ] = [];
		ᐃΔ[Δ.ⲆⵠⲆᐃⵠⵠᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃᐃᐃΔⲆⵠⲆ;
		ᐃΔ[Δ.ⲆⵠⲆᐃⵠⵠᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃᐃΔⲆⵠⵠᐃ;
		ᐃΔ[Δ.ΔⵠΔⵠΔⲆΔ] = ⵠᐃ.ΔⵠΔⵠΔⲆΔ;
		ᐃΔ[Δ.ⵠⵠⲆⵠᐃⲆᐃ] = ⵠᐃ.ⵠⵠⲆⵠᐃⲆᐃ;
		ᐃΔ[Δ.ⲆᐃⵠⵠⵠⵠⲆ] = ⵠᐃ.ⲆᐃⵠⵠⵠⵠⲆ;
		ᐃΔ[Δ.ΔⲆⲆⵠᐃⵠΔ] = [];
		ᐃΔ[Δ.ΔⲆⲆⵠᐃⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠΔᐃⲆᐃΔΔ;
		ᐃΔ[Δ.ΔⲆⲆⵠᐃⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃΔⲆⵠΔΔ;
		ᐃΔ[Δ.ᐃΔΔᐃⵠ] = [];
		ᐃΔ[Δ.ᐃΔΔᐃⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⵠᐃᐃᐃⲆⵠ;
		ᐃΔ[Δ.ᐃΔΔᐃⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔΔⲆᐃᐃⲆ;
		ᐃΔ[Δ.ⵠⲆᐃᐃΔᐃⲆ] = ⵠᐃ.ⵠⲆᐃᐃΔᐃⲆ;
		ᐃΔ[Δ.ΔⲆᐃⲆⲆⲆⵠ] = [];
		ᐃΔ[Δ.ΔⲆᐃⲆⲆⲆⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠᐃⵠⵠⵠ;
		ᐃΔ[Δ.ΔⲆᐃⲆⲆⲆⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃΔΔⲆΔᐃⵠ;
		ᐃΔ[Δ.ⲆⵠᐃⵠⲆⲆⲆ] = [];
		ᐃΔ[Δ.ⲆⵠᐃⵠⲆⲆⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⲆΔⵠⵠⲆᐃ;
		ᐃΔ[Δ.ⲆⵠᐃⵠⲆⲆⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔⲆΔⵠⲆⵠ;
		ᐃΔ[Δ.ⲆⲆⲆⲆⲆᐃᐃ] = [];
		ᐃΔ[Δ.ⲆⲆⲆⲆⲆᐃᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃΔⲆᐃⲆᐃΔ;
		ᐃΔ[Δ.ⲆⲆⲆⲆⲆᐃᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⲆᐃⲆⵠᐃⵠ;
		ᐃΔ[Δ.ᐃᐃⵠᐃᐃᐃⲆ] = [];
		ᐃΔ[Δ.ᐃᐃⵠᐃᐃᐃⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆΔⲆⵠΔᐃⵠ;
		ᐃΔ[Δ.ᐃᐃⵠᐃᐃᐃⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔᐃⵠⲆⵠⲆᐃ;
		ᐃΔ[Δ.ΔᐃⲆⲆΔΔⲆ] = [];
		ᐃΔ[Δ.ΔᐃⲆⲆΔΔⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⲆⲆΔⵠⵠⲆ;
		ᐃΔ[Δ.ΔᐃⲆⲆΔΔⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔΔⲆΔᐃⲆ;
		ᐃΔ[Δ.ΔΔⲆⵠᐃⵠᐃ] = [];
		ᐃΔ[Δ.ΔΔⲆⵠᐃⵠᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⵠⲆⵠΔᐃ;
		ᐃΔ[Δ.ΔΔⲆⵠᐃⵠᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.Ⲇᐃⵠⵠᐃⵠⵠ;
		ᐃΔ[Δ.ΔᐃⲆⵠΔⲆΔ] = [];
		ᐃΔ[Δ.ΔᐃⲆⵠΔⲆΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠᐃⵠΔᐃⵠΔ;
		ᐃΔ[Δ.ΔᐃⲆⵠΔⲆΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠⵠΔΔⵠᐃ;
		ᐃΔ[Δ.ΔΔⵠⵠⲆⲆⵠ] = [];
		ᐃΔ[Δ.ΔΔⵠⵠⲆⲆⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⵠΔⵠⲆⲆᐃ;
		ᐃΔ[Δ.ΔΔⵠⵠⲆⲆⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⲆⵠⲆⲆΔᐃ;
		ᐃΔ[Δ.ᐃᐃΔⵠΔⵠΔ] = [];
		ᐃΔ[Δ.ᐃᐃΔⵠΔⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⵠΔⲆⵠᐃⵠ;
		ᐃΔ[Δ.ᐃᐃΔⵠΔⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃᐃⵠⲆⵠⲆ;
		ᐃΔ[Δ.ᐃⵠΔⲆΔᐃⵠ] = ⵠᐃ.ᐃⵠΔⲆΔᐃⵠ;
		ᐃΔ[Δ.ⲆᐃⲆᐃⲆᐃⵠ] = ⵠᐃ.ⲆᐃⲆᐃⲆᐃⵠ;
		ᐃΔ[Δ.ⵠᐃᐃⵠⵠᐃᐃ] = ⵠᐃ.ⵠᐃᐃⵠⵠᐃᐃ;
		ᐃΔ[Δ.ᐃΔⲆΔⲆ] = [];
		ᐃΔ[Δ.ᐃΔⲆΔⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠΔⲆΔΔⲆⲆ;
		ᐃΔ[Δ.ᐃΔⲆΔⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔⲆⲆᐃⵠΔ;
		ᐃΔ[Δ.ⵠΔⲆΔᐃⵠⵠ] = [];
		ᐃΔ[Δ.ⵠΔⲆΔᐃⵠⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⲆΔᐃⲆᐃⲆ;
		ᐃΔ[Δ.ⵠΔⲆΔᐃⵠⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃΔΔΔᐃⵠᐃ;
		ᐃΔ[Δ.ᐃΔⲆᐃΔᐃⲆ] = [];
		ᐃΔ[Δ.ᐃΔⲆᐃΔᐃⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠᐃΔΔⲆⵠⵠ;
		ᐃΔ[Δ.ᐃΔⲆᐃΔᐃⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⲆⵠⵠᐃᐃⵠ;
		ᐃΔ[Δ.ΔⲆⲆⵠΔⵠΔ] = [];
		ᐃΔ[Δ.ΔⲆⲆⵠΔⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆⲆⵠΔⵠΔ;
		ᐃΔ[Δ.ΔⲆⲆⵠΔⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⲆⲆⵠΔⵠΔ;
		ᐃΔ[Δ.ΔΔⲆΔΔΔᐃ] = [];
		ᐃΔ[Δ.ΔΔⲆΔΔΔᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔΔⲆΔΔΔᐃ;
		ᐃΔ[Δ.ΔΔⲆΔΔΔᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔΔⲆΔΔΔᐃ;
		ᐃΔ[Δ.ⵠⵠⲆᐃⵠⲆⲆ] = [];
		ᐃΔ[Δ.ⵠⵠⲆᐃⵠⲆⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⲆᐃⵠⲆⲆ;
		ᐃΔ[Δ.ⵠⵠⲆᐃⵠⲆⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠⲆᐃⵠⲆⲆ;
		ᐃΔ[Δ.ΔᐃⲆⵠⵠΔⵠ] = ⵠᐃ.ΔᐃⲆⵠⵠΔⵠ;
		ᐃΔ[Δ.ᐃΔⵠΔᐃ] = [];
		ᐃΔ[Δ.ᐃΔⵠΔᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔᐃᐃΔᐃⲆⵠ;
		ᐃΔ[Δ.ᐃΔⵠΔᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔⲆΔΔΔⵠ;
		ᐃΔ[Δ.ⲆⲆⵠⵠΔ] = [];
		ᐃΔ[Δ.ⲆⲆⵠⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃᐃⵠΔⲆⲆⲆ;
		ᐃΔ[Δ.ⲆⲆⵠⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⵠΔΔⲆᐃⵠ;
		ᐃΔ[Δ.ΔⲆΔΔΔ] = [];
		ᐃΔ[Δ.ΔⲆΔΔΔ][Δ.ⵠΔⵠ] = [ⵠᐃ.ⵠⲆᐃⵠⲆⲆⵠ, ⵠᐃ.ⲆΔᐃⲆΔΔᐃ, ⵠᐃ.ᐃΔΔⵠᐃΔⲆ, ⵠᐃ.ΔⵠΔΔᐃΔⵠ, ⵠᐃ.ΔΔⲆᐃΔᐃΔ, ⵠᐃ.ᐃⲆⲆⲆⵠⵠⲆ, ⵠᐃ.ΔᐃᐃⵠΔⲆᐃ, ⵠᐃ.ⵠΔⵠᐃⵠΔⵠ, ⵠᐃ.ⵠΔᐃΔᐃⲆΔ];
		ᐃΔ[Δ.ΔⲆΔΔΔ][Δ.ⲆⲆⵠ] = [ⵠᐃ.ΔᐃⵠᐃⵠⵠΔ, ⵠᐃ.ᐃⲆᐃᐃⲆᐃⲆ, ⵠᐃ.ᐃⵠᐃⲆⲆⲆᐃ, ⵠᐃ.ΔΔⲆᐃΔⲆᐃ, ⵠᐃ.ⵠᐃⲆⵠⵠⲆⵠ, ⵠᐃ.ΔⲆΔΔᐃᐃΔ, ⵠᐃ.ⲆⲆⲆΔΔⵠⲆ, ⵠᐃ.ⵠΔⵠᐃⵠΔⵠ, ⵠᐃ.ⵠΔⲆᐃΔⲆⵠ];
		ᐃΔ[Δ.ⵠᐃⵠⵠⵠ] = [];
		ᐃΔ[Δ.ⵠᐃⵠⵠⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⵠⲆⲆⲆⲆⲆ;
		ᐃΔ[Δ.ⵠᐃⵠⵠⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆΔⲆΔΔΔⵠ;
		ᐃΔ[Δ.ⵠᐃⵠΔⵠⵠⵠ] = [];
		ᐃΔ[Δ.ⵠᐃⵠΔⵠⵠⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆⵠⵠᐃᐃⵠⲆ;
		ᐃΔ[Δ.ⵠᐃⵠΔⵠⵠⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⵠΔⲆΔⵠⲆ;
		ᐃΔ[Δ.ᐃᐃⲆⲆᐃΔᐃ] = [];
		ᐃΔ[Δ.ᐃᐃⲆⲆᐃΔᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔᐃⵠᐃᐃⲆⲆ;
		ᐃΔ[Δ.ᐃᐃⲆⲆᐃΔᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃΔΔᐃΔΔⵠ;
		ᐃΔ[Δ.ΔⲆⲆⵠΔ] = [];
		ᐃΔ[Δ.ΔⲆⲆⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃᐃΔᐃᐃᐃᐃ;
		ᐃΔ[Δ.ΔⲆⲆⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠⲆᐃⵠΔΔ;
		ᐃΔ[Δ.ΔⵠⲆΔΔ] = [];
		ᐃΔ[Δ.ΔⵠⲆΔΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⵠΔΔⵠⲆΔΔⲆ;
		ᐃΔ[Δ.ΔⵠⲆΔΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔᐃⵠⲆⲆⵠⵠⵠⲆ;
		ᐃΔ[Δ.ᐃⲆⲆⲆⵠ] = [];
		ᐃΔ[Δ.ᐃⲆⲆⲆⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⵠΔⵠⲆⵠΔΔⲆ;
		ᐃΔ[Δ.ᐃⲆⲆⲆⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠⲆΔᐃⵠᐃⲆⵠΔ;
		ᐃΔ[Δ.ᐃΔΔΔⲆ] = [];
		ᐃΔ[Δ.ᐃΔΔΔⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠΔⵠᐃᐃ;
		ᐃΔ[Δ.ᐃΔΔΔⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⲆⲆⲆᐃⲆ;
		ᐃΔ[Δ.ⵠⲆΔⵠΔ] = [];
		ᐃΔ[Δ.ⵠⲆΔⵠΔ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⵠⲆΔⵠΔ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ⵠⲆΔⵠΔ][Δ.ⵠΔⵠ].push(ⵠᐃ.ᐃⲆᐃⵠⵠⲆΔⵠᐃ);
		ᐃΔ[Δ.ⵠⲆΔⵠΔ][Δ.ⵠΔⵠ].push(ⵠᐃ.ΔΔⲆΔΔΔⵠⲆⲆ);
		ᐃΔ[Δ.ⵠⲆΔⵠΔ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃⲆⵠⵠⵠΔᐃΔ);
		ᐃΔ[Δ.ⵠⲆΔⵠΔ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ᐃΔⲆⵠⵠⵠΔΔⲆ);
		ᐃΔ[Δ.ⵠⲆΔⵠΔ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⲆᐃⲆⲆΔⲆⲆⵠⵠ);
		ᐃΔ[Δ.ⵠⲆΔⵠΔ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ΔΔΔΔᐃᐃᐃΔⵠ);
		ᐃΔ[Δ.ᐃᐃᐃⲆⲆ] = [];
		ᐃΔ[Δ.ᐃᐃᐃⲆⲆ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ᐃᐃᐃⲆⲆ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ᐃᐃᐃⲆⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⵠΔᐃᐃⵠⵠⵠΔⲆ);
		ᐃΔ[Δ.ᐃᐃᐃⲆⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ΔⲆⲆⵠⵠⲆⵠᐃᐃ);
		ᐃΔ[Δ.ᐃᐃᐃⲆⲆ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⵠᐃⲆⲆΔᐃΔᐃΔ);
		ᐃΔ[Δ.ᐃᐃᐃⲆⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ᐃᐃΔⲆⲆⲆᐃᐃΔ);
		ᐃΔ[Δ.ᐃᐃᐃⲆⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⵠⵠⵠⲆⵠⵠⵠⲆᐃ);
		ᐃΔ[Δ.ᐃᐃᐃⲆⲆ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⵠᐃΔⲆⵠΔⵠΔⵠ);
		ᐃΔ[Δ.ⲆⲆⲆⵠΔ] = [];
		ᐃΔ[Δ.ⲆⲆⲆⵠΔ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⲆⲆⲆⵠΔ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ⲆⲆⲆⵠΔ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆΔΔⲆᐃⲆⵠⵠⲆ);
		ᐃΔ[Δ.ⲆⲆⲆⵠΔ][Δ.ⵠΔⵠ].push(ⵠᐃ.ⲆⲆⲆⵠⵠⵠΔⲆᐃ);
		ᐃΔ[Δ.ⲆⲆⲆⵠΔ][Δ.ⵠΔⵠ].push(ⵠᐃ.ᐃⲆᐃΔᐃΔΔΔⲆ);
		ᐃΔ[Δ.ⲆⲆⲆⵠΔ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⲆⲆᐃΔⲆⲆⵠᐃⵠ);
		ᐃΔ[Δ.ⲆⲆⲆⵠΔ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ⲆᐃⲆⵠⵠΔⵠΔΔ);
		ᐃΔ[Δ.ⲆⲆⲆⵠΔ][Δ.ⲆⲆⵠ].push(ⵠᐃ.ΔⵠᐃⵠᐃⲆᐃⲆΔ);
		ᐃᐃᐃᐃ["g"] = [];
		ᐃᐃᐃᐃ["g"][ⵠᐃⲆ] = [ⵠᐃ.ⲆⵠᐃΔⵠⵠΔ, ⵠᐃ.ᐃΔⵠⵠⲆⵠⲆ];
		ᐃᐃᐃᐃ["g"][ΔⲆᐃᐃ] = ᐃᐃᐃᐃ["g"][0];
		ᐃᐃᐃᐃ["g"][2] = [ⵠᐃ.ⵠⲆⲆⵠⲆΔⵠ, ⵠᐃ.ⲆΔⲆΔⵠΔⲆ];
		ᐃᐃᐃᐃ["m"] = [];
		ᐃᐃᐃᐃ["m"][0] = [ⵠᐃ.ᐃⲆΔⲆⵠᐃΔ, ⵠᐃ.ΔΔⲆΔⵠⲆⵠ];
		ᐃᐃᐃᐃ["m"][1] = ᐃᐃᐃᐃ["m"][0];
		ᐃᐃᐃᐃ["m"][ᐃᐃⲆⲆ] = [ⵠᐃ.ᐃⵠⵠΔⲆⵠⲆ, ⵠᐃ.ⲆᐃΔⵠᐃᐃⲆ];
		ᐃᐃᐃᐃ[ⵠ[105]] = [];
		ᐃᐃᐃᐃ[ⵠ[105]][ⵠⲆΔ] = [ⵠᐃ.ΔⲆⲆⲆᐃⲆⵠ, ⵠᐃ.ᐃⵠΔⵠⲆΔᐃ];
		ᐃᐃᐃᐃ[ⵠ[105]][ⵠΔᐃ] = ᐃᐃᐃᐃ[ⵠ[105]][0];
		ᐃᐃᐃᐃ[ⵠ[105]][2] = ᐃᐃᐃᐃ[ⵠ[105]][0];
		ᐃᐃᐃᐃ[ⵠ[105]][3] = ᐃᐃᐃᐃ[ⵠ[105]][ⵠⵠⵠΔ];
		ᐃᐃᐃᐃ[ⵠ[105]][Ⲇⵠⵠⵠ] = ᐃᐃᐃᐃ[ⵠ[105]][0];
		ᐃᐃᐃᐃ[ⵠ[105]][ΔΔᐃᐃⵠ] = ᐃᐃᐃᐃ[ⵠ[105]][0];
		ᐃᐃᐃᐃ["s"] = [];
		ᐃᐃᐃᐃ["s"][ⵠⵠⵠΔ] = [ⵠᐃ.ⵠᐃΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃⵠⵠΔⵠⲆ];
		ᐃᐃᐃᐃ["s"][ⵠΔᐃ] = ᐃᐃᐃᐃ["s"][Ⲇᐃⵠ];
		ᐃᐃᐃᐃ["s"][ⵠΔⵠΔ] = [ⵠᐃ.ᐃⵠⵠⵠⵠΔΔ, ⵠᐃ.ⲆΔⵠⵠⵠⵠΔ];
		ᐃᐃᐃᐃ["p"] = [];
		ᐃᐃᐃᐃ["p"][0] = [ⵠᐃ.ᐃⵠⲆᐃⵠᐃⲆ, ⵠᐃ.ᐃⵠⲆᐃⵠᐃⲆ];
		ᐃᐃᐃᐃ["a"] = [];
		ᐃᐃᐃᐃ["a"][0] = [ⵠᐃ.ⵠⲆᐃⲆⵠⵠⵠ, ⵠᐃ.ΔΔΔΔΔⲆᐃ];
		ᐃᐃᐃᐃ["a"][1] = ᐃᐃᐃᐃ["a"][ΔΔᐃᐃ];
		ᐃᐃᐃᐃ["a"][ᐃⲆᐃⵠ] = ᐃᐃᐃᐃ["a"][0];
		ᐃᐃᐃᐃ["d"] = [];
		ᐃᐃᐃᐃ["d"][Ⲇᐃⵠ] = [ⵠᐃ.ⲆⲆΔⵠᐃⲆⲆ, ⵠᐃ.ΔⲆⵠⵠΔΔᐃ];
		ᐃᐃᐃᐃ["d"][1] = ᐃᐃᐃᐃ["d"][0];
		ᐃᐃᐃᐃ["d"][2] = ᐃᐃᐃᐃ["d"][0];
		ᐃᐃᐃᐃ[ⵠ[449]] = [];
		ᐃᐃᐃᐃ[ⵠ[449]][ⵠⵠⵠ] = [ⵠᐃ.ΔⲆⲆⵠⵠⲆᐃ, ⵠᐃ.ᐃⲆⲆΔᐃᐃⵠ];
		ᐃᐃᐃᐃ[ⵠ[449]][ⲆΔΔΔ] = ᐃᐃᐃᐃ[ⵠ[449]][ⵠᐃⲆ];
		ᐃᐃᐃᐃ[ⵠ[449]][ΔⵠⲆᐃ] = ᐃᐃᐃᐃ[ⵠ[449]][0];
		ᐃᐃᐃᐃ["f"] = [];
		ᐃᐃᐃᐃ["f"][Δⵠⵠⵠ] = [ⵠᐃ.ⵠΔΔⵠᐃⵠᐃ, ⵠᐃ.ᐃⵠⲆⲆᐃⲆᐃ];
		ᐃᐃᐃᐃ["f"][ΔⵠⲆⲆ] = ᐃᐃᐃᐃ["f"][ⵠΔᐃᐃ];
		ᐃᐃᐃᐃ["f"][2] = ᐃᐃᐃᐃ["f"][0];
		ᐃᐃᐃᐃ[ⵠ[418]] = [];
		ᐃᐃᐃᐃ[ⵠ[418]][ⵠⲆⵠⵠ] = [ⵠᐃ.ⲆⵠᐃᐃⲆⲆⲆ, ⵠᐃ.ⵠⲆⲆⲆⵠⲆⲆ];
		ᐃᐃᐃᐃ[ⵠ[418]][1] = ᐃᐃᐃᐃ[ⵠ[418]][Ⲇᐃⵠ];
		ᐃᐃᐃᐃ[ⵠ[418]][ΔΔⲆᐃ] = ᐃᐃᐃᐃ[ⵠ[418]][ⵠⵠⵠ];
		ᐃᐃᐃᐃ["c"] = [];
		ᐃᐃᐃᐃ["c"][0] = [ⵠᐃ.ⲆΔᐃΔⲆⵠⵠ, ⵠᐃ.ⵠⲆΔⲆᐃⲆⵠ];
		ᐃᐃᐃᐃ["c"][ΔⲆᐃᐃ] = ᐃᐃᐃᐃ["c"][ΔΔᐃᐃ];
		ᐃᐃᐃᐃ["c"][2] = ᐃᐃᐃᐃ["c"][ⵠᐃⲆⲆ];
		ᐃᐃᐃᐃ[ⵠ[282]] = [];
		ᐃᐃᐃᐃ[ⵠ[282]][0] = [ⵠᐃ.ⵠⵠⵠΔΔⲆⵠ, ⵠᐃ.ⲆⲆᐃⵠΔΔΔ];
		ᐃᐃᐃᐃ["PIRANHA"] = [ⵠᐃ.ΔᐃΔΔⵠⲆᐃ, ⵠᐃ.Δᐃᐃⵠⵠⵠⵠ];
		ᐃᐃᐃᐃ["KRAKEN"] = [ⵠᐃ.ⵠⲆᐃⲆᐃⲆΔ, ⵠᐃ.ᐃᐃⲆᐃᐃⵠΔ];
		ᐃᐃᐃᐃ["FOX"] = [ⵠᐃ.ⲆΔⵠᐃΔᐃΔ, ⵠᐃ.ⵠⲆᐃΔⲆΔΔ];
		ᐃᐃᐃᐃ["WOLF"] = [ⵠᐃ.ⵠⵠⲆᐃⵠᐃⵠ, ⵠᐃ.ΔΔᐃᐃⲆᐃΔ];
		ᐃᐃᐃᐃ["SPIDER"] = [ⵠᐃ.ᐃΔⲆⲆⵠΔᐃ, ⵠᐃ.ⵠⵠⲆⲆΔᐃᐃ];
		ᐃᐃᐃᐃ["BEAR"] = [ⵠᐃ.ᐃΔᐃⲆⲆΔⲆ, ⵠᐃ.ΔᐃΔᐃΔⵠᐃ];
		ᐃᐃᐃᐃ["CAVE"] = [ⵠᐃ.ΔᐃⲆᐃⵠᐃΔ, ⵠᐃ.ᐃⵠⵠΔⲆΔⲆ];
		ᐃᐃᐃᐃ["MAP"] = [ⵠᐃ.ΔᐃⲆᐃΔⵠΔ, ⵠᐃ.ⵠⵠΔΔⵠᐃⵠ];
		ᐃᐃᐃᐃ[ⵠ[139]] = [ⵠᐃ.ᐃΔΔⲆᐃΔΔ, ⵠᐃ.ᐃᐃⵠΔΔΔⲆ];
		ᐃᐃᐃᐃ[ⵠ[116]] = [ⵠᐃ.ΔⵠⲆΔᐃⵠⲆ, ⵠᐃ.ⲆΔⵠⵠⵠᐃⵠ];
		ᐃᐃᐃᐃ[ⵠ[65]] = [ⵠᐃ.ⵠΔⵠΔⵠⲆⵠ, ⵠᐃ.ΔΔⵠⵠΔᐃᐃ];
		ᐃᐃᐃᐃ[ⵠ[314]] = [ⵠᐃ.ⵠⵠᐃΔΔⲆⲆ, ⵠᐃ.ΔⵠⵠⲆⵠⲆΔ];
		for (var ⲆⵠⵠᐃᐃΔᐃⵠΔ in ᐃᐃᐃᐃ) {
			var ΔⲆⲆΔΔⵠΔ = ᐃᐃᐃᐃ[ⲆⵠⵠᐃᐃΔᐃⵠΔ];
			for (var Ⲇᐃ = ⵠⲆΔ; Ⲇᐃ < ΔⲆⲆΔΔⵠΔ.length; Ⲇᐃ++) {
				var ⵠⵠⲆⲆᐃΔⲆ = ΔⲆⲆΔΔⵠΔ[Ⲇᐃ];
				if (ⵠⵠⲆⲆᐃΔⲆ.ᐃⲆⵠᐃⲆΔⵠ !== ΔΔⵠⵠⲆ) ⵠⵠⲆⲆᐃΔⲆ.ᐃⲆⵠᐃⲆΔⵠ();
				else if (ⵠⵠⲆⲆᐃΔⲆ.length > Ⲇᐃⵠ) {
					for (var ⲆⲆᐃⲆ = 0; ⲆⲆᐃⲆ < ⵠⵠⲆⲆᐃΔⲆ.length; ⲆⲆᐃⲆ++) {
						if (ⵠⵠⲆⲆᐃΔⲆ[ⲆⲆᐃⲆ].ᐃⲆⵠᐃⲆΔⵠ !== ⵠⵠⲆΔⲆ) ⵠⵠⲆⲆᐃΔⲆ[ⲆⲆᐃⲆ].ᐃⲆⵠᐃⲆΔⵠ()
					}
				}
			}
		}
	}

	function ⵠᐃⵠⵠⵠⵠⵠᐃⵠ(ᐃ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		if (0 == Ⲇᐃ) {
			ΔⲆ.width = 543 * ᐃ;
			ΔⲆ.height = 393 * ᐃ;
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(109.5 * ᐃ, 154.046875 * ᐃ);
			Ⲇ.bezierCurveTo(143.5 * ᐃ, 96.046875 * ᐃ, ᐃ * 208.5, 92.046875 * ᐃ, ᐃ * 288.5, 97.046875 * ᐃ);
			Ⲇ.bezierCurveTo(357.5 * ᐃ, ᐃ * 104.046875, ᐃ * 414.5, ᐃ * 132.046875, ᐃ * 422.5, ᐃ * 166.046875);
			Ⲇ.bezierCurveTo(ᐃ * 431.5, 192.046875 * ᐃ, ᐃ * 400.5, ᐃ * 261.046875, ᐃ * 332.5, 271.046875 * ᐃ);
			Ⲇ.bezierCurveTo(272.5 * ᐃ, ᐃ * 279.046875, ᐃ * 159.5, ᐃ * 285.046875, ᐃ * 126.5, ᐃ * 260.046875);
			Ⲇ.bezierCurveTo(ᐃ * 99.5, ᐃ * 238.046875, ᐃ * 95.5, 183.046875 * ᐃ, 109.5 * ᐃ, ᐃ * 154.046875);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0])
		} else ⵠⲆⲆ == Ⲇᐃ ? (ΔⲆ.width = 543 * ᐃ, ΔⲆ.height = 470 * ᐃ, Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 216.23297119140625, ᐃ * 100.34944152832031), Ⲇ.bezierCurveTo(349.23297119140625 * ᐃ, ᐃ * 110.34944152832031, 422.23297119140625 * ᐃ, ᐃ * 142.3494415283203, ᐃ * 434.23297119140625, ᐃ * 194.3494415283203), Ⲇ.bezierCurveTo(451.23297119140625 * ᐃ, 268.3494415283203 * ᐃ, ᐃ * 397.23297119140625, 367.3494415283203 * ᐃ, 313.23297119140625 * ᐃ, ᐃ * 351.3494415283203), Ⲇ.bezierCurveTo(ᐃ * 148.23297119140625, 330.3494415283203 * ᐃ, 106.23297119140625 * ᐃ, 319.3494415283203 * ᐃ, 87.23297119140625 * ᐃ, ᐃ * 248.3494415283203), Ⲇ.bezierCurveTo(63.23297119140625 * ᐃ, 164.3494415283203 * ᐃ, ᐃ * 102.23297119140625, ᐃ * 90.34944152832031, ᐃ * 216.23297119140625, 100.34944152832031 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ])) : (ΔⲆ.width = ᐃ * 543, ΔⲆ.height = ᐃ * 470, Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(155.23297119140625 * ᐃ, ᐃ * 126.71307373046875), Ⲇ.bezierCurveTo(232.23297119140625 * ᐃ, ᐃ * 76.71307373046875, ᐃ * 340.23297119140625, 67.71307373046875 * ᐃ, 411.23297119140625 * ᐃ, ᐃ * 106.71307373046875), Ⲇ.bezierCurveTo(ᐃ * 458.23297119140625, 131.71307373046875 * ᐃ, 465.23297119140625 * ᐃ, 280.71307373046875 * ᐃ, ᐃ * 353.23297119140625, 363.71307373046875 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 299.23297119140625, 404.71307373046875 * ᐃ, 143.23297119140625 * ᐃ, 415.71307373046875 * ᐃ, ᐃ * 88.23297119140625, ᐃ * 327.71307373046875), Ⲇ.bezierCurveTo(ᐃ * 48.23297119140625, ᐃ * 256.71307373046875, 93.23297119140625 * ᐃ, ᐃ * 171.71307373046875, 155.23297119140625 * ᐃ, 126.71307373046875 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[0]));
		return ΔⲆ
	}

	function ΔᐃⵠᐃⲆⲆⵠΔᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 400;
		ΔⲆ.height = 400 * ᐃ;
		Ⲇ.translate(ΔΔᐃ, ᐃ * ᐃⵠᐃⵠᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔⲆᐃᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 102, 154 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 108, 216.5 * ᐃ, 108 * ᐃ, 216.5 * ᐃ, 114 * ᐃ, 279 * ᐃ);
		Ⲇ.bezierCurveTo(124 * ᐃ, ᐃ * 300, 237 * ᐃ, 299 * ᐃ, ᐃ * 251, 279 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 257, 217 * ᐃ, ᐃ * 257, ᐃ * 217, 263 * ᐃ, ᐃ * 155);
		Ⲇ.bezierCurveTo(ᐃ * 248, ᐃ * 194, 91 * ᐃ, 180 * ᐃ, ᐃ * 103, ᐃ * 156);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 102, 154 * ᐃ);
		Ⲇ.bezierCurveTo(106 * ᐃ, ᐃ * 53, ᐃ * 255, ᐃ * 53, ᐃ * 263, ᐃ * 154);
		Ⲇ.bezierCurveTo(ᐃ * 248, ᐃ * 38, ᐃ * 99, 69 * ᐃ, ᐃ * 103, ᐃ * 154);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ᐃⵠⵠⲆ], 11 * ᐃ);
		Ⲇ.translate(0, ᐃ * -5);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(103 * ᐃ, 154 * ᐃ);
		Ⲇ.bezierCurveTo(98 * ᐃ, ᐃ * 119, 264 * ᐃ, 119 * ᐃ, 264 * ᐃ, 154 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 271, 189 * ᐃ, 94 * ᐃ, 188 * ᐃ, ᐃ * 103, 154 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⵠⵠⵠ], Δⵠ[ΔΔᐃΔⵠ], 12 * ᐃ);
		Ⲇ.translate(0, ᐃ * 25);
		Ⲇ.globalAlpha = ⵠΔᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(103 * ᐃ, 154 * ᐃ);
		Ⲇ.bezierCurveTo(98 * ᐃ, 119 * ᐃ, ᐃ * 264, ᐃ * 119, ᐃ * 264, 154 * ᐃ);
		Ⲇ.bezierCurveTo(271 * ᐃ, ᐃ * 189, 94 * ᐃ, 188 * ᐃ, 103 * ᐃ, ᐃ * 154);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5]);
		Ⲇ.translate(ΔΔᐃᐃ, -25 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 102, 154 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 108, ᐃ * 216.5, 108 * ᐃ, ᐃ * 216.5, ᐃ * 114, ᐃ * 279);
		Ⲇ.bezierCurveTo(ᐃ * 124, ᐃ * 300, 237 * ᐃ, 299 * ᐃ, 251 * ᐃ, 279 * ᐃ);
		Ⲇ.bezierCurveTo(257 * ᐃ, ᐃ * 217, ᐃ * 257, ᐃ * 217, ᐃ * 263, 155 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 248, ᐃ * 194, 91 * ᐃ, ᐃ * 180, 103 * ᐃ, ᐃ * 156);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 182, 185 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 182.5, ᐃ * 237.5, 182.5 * ᐃ, ᐃ * 237.5, ᐃ * 183, ᐃ * 290);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 222, ᐃ * 287);
		Ⲇ.bezierCurveTo(226 * ᐃ, 233.5 * ᐃ, ᐃ * 226, 233.5 * ᐃ, 230 * ᐃ, ᐃ * 180);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ᐃΔᐃΔΔᐃΔ, Δⵠ[2], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 145, ᐃ * 290);
		Ⲇ.bezierCurveTo(140.5 * ᐃ, ᐃ * 237, 140.5 * ᐃ, 237 * ᐃ, ᐃ * 136, ᐃ * 184);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * 11);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 105, 184 * ᐃ);
		Ⲇ.bezierCurveTo(148 * ᐃ, 205 * ᐃ, ᐃ * 231, ᐃ * 202, 260 * ᐃ, 182 * ᐃ);
		Ⲇ.bezierCurveTo(259 * ᐃ, ᐃ * 195.5, 259 * ᐃ, 195.5 * ᐃ, ᐃ * 258, ᐃ * 209);
		Ⲇ.bezierCurveTo(217 * ᐃ, 218 * ᐃ, ᐃ * 163, 225 * ᐃ, ᐃ * 108, 207 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆⵠ], Δⵠ[ΔΔᐃΔⵠ], ᐃ * 11);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(251 * ᐃ, ᐃ * 276);
		Ⲇ.bezierCurveTo(251.5 * ᐃ, 267.5 * ᐃ, 251.5 * ᐃ, 267.5 * ᐃ, ᐃ * 252, 259 * ᐃ);
		Ⲇ.bezierCurveTo(212 * ᐃ, 272 * ᐃ, ᐃ * 156, 275 * ᐃ, 112 * ᐃ, ᐃ * 260);
		Ⲇ.bezierCurveTo(112.5 * ᐃ, ᐃ * 269, 112.5 * ᐃ, ᐃ * 269, 113 * ᐃ, 278 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 155, 306 * ᐃ, ᐃ * 253, ᐃ * 286, ᐃ * 250, ᐃ * 276);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⵠΔ], Δⵠ[ᐃᐃΔⵠ], ᐃ * 11);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 102, 154 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 106, ᐃ * 53, ᐃ * ᐃΔⵠⲆΔ, 53 * ᐃ, ᐃ * 263, 154 * ᐃ);
		Ⲇ.bezierCurveTo(248 * ᐃ, ᐃ * 38, ᐃ * 99, 69 * ᐃ, 103 * ᐃ, 154 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆⲆⵠᐃΔ, Δⵠ[ᐃᐃΔⵠ], 11 * ᐃ);
		return ΔⲆ
	}

	function ᐃᐃⵠᐃΔΔᐃⵠᐃ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 254 * ᐃ;
		ΔⲆ.height = 288 * ᐃ;
		Ⲇ.translate(Δⵠⵠⵠ, 5);
		Ⲇ.globalAlpha = .5;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(218 * ᐃ, ᐃ * 84.640625);
		Ⲇ.bezierCurveTo(ᐃ * 150, ᐃ * 13.640625, 186 * ᐃ, ᐃ * 92.640625, 168 * ᐃ, ᐃ * 103.640625);
		Ⲇ.bezierCurveTo(151 * ᐃ, 107.640625 * ᐃ, 150 * ᐃ, ᐃ * 61.640625, ᐃ * 144, ᐃ * 39.640625);
		Ⲇ.bezierCurveTo(ᐃ * 135, 1.640625 * ᐃ, ᐃ * 113, ᐃ * 2.640625, ᐃ * 110, ᐃ * 40.640625);
		Ⲇ.bezierCurveTo(ᐃ * 106, 97.640625 * ᐃ, 98 * ᐃ, ᐃ * 102.640625, ᐃ * 83, ᐃ * 100.640625);
		Ⲇ.bezierCurveTo(68 * ᐃ, ᐃ * 98.640625, ᐃ * 67, ᐃ * 77.640625, ᐃ * 70, 55.640625 * ᐃ);
		Ⲇ.bezierCurveTo(75 * ᐃ, ᐃ * 16.640625, 47 * ᐃ, 52.640625 * ᐃ, ᐃ * 38, 67.640625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 10, ᐃ * 113.640625, ᐃ * ⲆΔΔⲆᐃ, 181.640625 * ᐃ, 23 * ᐃ, ᐃ * 213.640625);
		Ⲇ.bezierCurveTo(ᐃ * 45, 266.640625 * ᐃ, ᐃ * 97, ᐃ * 277.640625, ᐃ * 147, ᐃ * 269.640625);
		Ⲇ.bezierCurveTo(ᐃ * 217, ᐃ * 259.640625, 236 * ᐃ, 221.640625 * ᐃ, 239 * ᐃ, ᐃ * 166.640625);
		Ⲇ.bezierCurveTo(239 * ᐃ, ᐃ * 113.640625, ᐃ * 223, ᐃ * 90.640625, 219 * ᐃ, 86.640625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], 4 * ᐃ);
		ᐃΔΔ(Ⲇ, 175 * ᐃ, 220.640625 * ᐃ, 29.546573405388315 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		ᐃΔΔ(Ⲇ, 79 * ᐃ, ᐃ * 222.640625, ᐃ * 28.178005607210743);
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ]);
		ᐃΔΔ(Ⲇ, ᐃ * 175, 214.640625 * ᐃ, ᐃ * 27.892651361962706);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠⲆⵠⵠ], ⵠΔⲆΔΔ * ᐃ);
		ᐃΔΔ(Ⲇ, 79 * ᐃ, ᐃ * 215.640625, 26.570660511172846 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃⲆⲆΔΔ * ᐃ);
		Ⲇ.translate(0, -5);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 218, 84.640625 * ᐃ);
		Ⲇ.bezierCurveTo(150 * ᐃ, 13.640625 * ᐃ, 186 * ᐃ, ᐃ * 92.640625, ᐃ * 168, ᐃ * 103.640625);
		Ⲇ.bezierCurveTo(ᐃ * 151, ᐃ * 107.640625, 150 * ᐃ, ᐃ * 61.640625, 144 * ᐃ, 39.640625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 135, ᐃ * 1.640625, 113 * ᐃ, ᐃ * 2.640625, 110 * ᐃ, 40.640625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 106, ᐃ * 97.640625, 98 * ᐃ, ᐃ * 102.640625, ᐃ * 83, ᐃ * 100.640625);
		Ⲇ.bezierCurveTo(68 * ᐃ, 98.640625 * ᐃ, ᐃ * 67, 77.640625 * ᐃ, ᐃ * 70, ᐃ * 55.640625);
		Ⲇ.bezierCurveTo(ᐃ * 75, ᐃ * 16.640625, ᐃ * 47, 52.640625 * ᐃ, 38 * ᐃ, ᐃ * 67.640625);
		Ⲇ.bezierCurveTo(ᐃ * ⲆΔⵠΔⵠ, ᐃ * 113.640625, ᐃ * ᐃⵠᐃⵠⲆ, ᐃ * 181.640625, 23 * ᐃ, ᐃ * 213.640625);
		Ⲇ.bezierCurveTo(45 * ᐃ, ᐃ * 266.640625, ᐃ * 97, ᐃ * 277.640625, ᐃ * 147, 269.640625 * ᐃ);
		Ⲇ.bezierCurveTo(217 * ᐃ, ᐃ * 259.640625, ᐃ * 236, 221.640625 * ᐃ, 239 * ᐃ, 166.640625 * ᐃ);
		Ⲇ.bezierCurveTo(239 * ᐃ, 113.640625 * ᐃ, ᐃ * 223, ᐃ * 90.640625, 219 * ᐃ, ᐃ * 86.640625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * ᐃΔᐃΔ);
		ᐃΔΔ(Ⲇ, 175 * ᐃ, ᐃ * 222.640625, ᐃ * 26.546573405388315);
		ΔΔ(Ⲇ, Δⵠ[3]);
		ᐃΔΔ(Ⲇ, ᐃ * 79, 222.640625 * ᐃ, ᐃ * 26.178005607210743);
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆᐃ]);
		ᐃΔΔ(Ⲇ, ᐃ * 175, ᐃ * 210.640625, 26.892651361962706 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], 8 * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 79, 210.640625 * ᐃ, ᐃ * 26.570660511172846);
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ΔΔᐃᐃⵠ], 8 * ᐃ);
		return ΔⲆ
	}

	function ΔⲆᐃⲆⵠΔⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 450 * ᐃ;
		ΔⲆ.height = ᐃ * 790;
		Ⲇ.translate(ᐃ * ᐃᐃᐃⲆ, ᐃ * ᐃΔΔⲆⵠ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? 0 : 0;
		ᐃΔΔ(Ⲇ, ᐃ * 178.5, 172.828125 * ᐃ, 150 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[0], 65 * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 178.5, 172.828125 * ᐃ, 150 * ᐃ);
		ΔΔ(Ⲇ, ⲆⲆⲆΔⲆ, Δⵠ[ΔΔᐃᐃ], 55 * ᐃ);
		Ⲇ.closePath();
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 177, 512.328125 * ᐃ);
		ᐃΔⵠ(Ⲇ, -25 * ᐃ, -202.5 * ᐃ, 65 * ᐃ, ᐃ * 405, ᐃ * 25);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 136, 581.828125 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -39, -23 * ᐃ, ᐃ * 78, ᐃ * 46, 25 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆⲆ]);
		Ⲇ.save();
		Ⲇ.translate(135.5 * ᐃ, ᐃ * 663.828125);
		ᐃΔⵠ(Ⲇ, ᐃ * -39.5, ᐃ * -22, 79 * ᐃ, ᐃ * 44, 25 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 114, 594.828125 * ᐃ);
		Ⲇ.bezierCurveTo(175 * ᐃ, ᐃ * 596.828125, ᐃ * 163, ᐃ * 596.828125, ᐃ * 172, 594.828125 * ᐃ);
		Ⲇ.bezierCurveTo(171.5 * ᐃ, 633.828125 * ᐃ, 171.5 * ᐃ, 633.828125 * ᐃ, 171 * ᐃ, ᐃ * 672.828125);
		Ⲇ.bezierCurveTo(110 * ᐃ, ᐃ * 673.828125, ᐃ * 140.5, ᐃ * 673.328125, 110 * ᐃ, 673.828125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 110.5, ᐃ * 661.828125, ᐃ * 110.5, 661.828125 * ᐃ, ᐃ * 111, ᐃ * 649.828125);
		Ⲇ.bezierCurveTo(ᐃ * 157, ᐃ * 633.828125, 134 * ᐃ, 607.828125 * ᐃ, ᐃ * 114, 594.828125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.translate(ⲆⵠⲆⲆ, ΔⲆⲆⵠ * ᐃ);
		Ⲇ.moveTo(140 * ᐃ, ᐃ * 294.828125);
		Ⲇ.bezierCurveTo(ᐃ * 212, ᐃ * 295.828125, 176.5 * ᐃ, ᐃ * 295.328125, 213 * ᐃ, 295.828125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 201.5, ᐃ * 325.328125, ᐃ * 201.5, 325.328125 * ᐃ, ᐃ * 190, ᐃ * 354.828125);
		Ⲇ.bezierCurveTo(175.5 * ᐃ, 355.828125 * ᐃ, ᐃ * 175.5, ᐃ * 355.828125, ᐃ * 161, ᐃ * 356.828125);
		Ⲇ.bezierCurveTo(ᐃ * 154.5, 328.828125 * ᐃ, 154.5 * ᐃ, 328.828125 * ᐃ, 148 * ᐃ, ᐃ * 300.828125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.translate(ⲆⲆᐃⵠ, -5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(159 * ᐃ, 679.828125 * ᐃ);
		Ⲇ.bezierCurveTo(180 * ᐃ, 665.828125 * ᐃ, 155 * ᐃ, ᐃ * 675.828125, 151 * ᐃ, ᐃ * 671.828125);
		Ⲇ.bezierCurveTo(154.5 * ᐃ, ᐃ * 685.328125, ᐃ * 154.5, ᐃ * 685.328125, ᐃ * 158, 698.828125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 171, ᐃ * 699.828125, 171 * ᐃ, 699.828125 * ᐃ, 184 * ᐃ, ᐃ * 700.828125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃ]);
		Ⲇ.save();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(157 * ᐃ, 548.828125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 157, 561.828125 * ᐃ, 157 * ᐃ, 561.828125 * ᐃ, ᐃ * 157, ᐃ * 574.828125);
		Ⲇ.bezierCurveTo(132.5 * ᐃ, 580.828125 * ᐃ, ᐃ * 132.5, 580.828125 * ᐃ, 108 * ᐃ, 586.828125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 112, ᐃ * 599.828125, 111 * ᐃ, ᐃ * 593.828125, ᐃ * 112, ᐃ * 599.828125);
		Ⲇ.bezierCurveTo(159 * ᐃ, ᐃ * 603.828125, ᐃ * 126.5, ᐃ * 601.328125, ᐃ * 141, 602.828125 * ᐃ);
		Ⲇ.bezierCurveTo(145 * ᐃ, ᐃ * 641.828125, 143.5 * ᐃ, 623.828125 * ᐃ, 146 * ᐃ, 644.828125 * ᐃ);
		Ⲇ.bezierCurveTo(129.5 * ᐃ, 645.328125 * ᐃ, ᐃ * 129.5, 645.328125 * ᐃ, 113 * ᐃ, 645.828125 * ᐃ);
		Ⲇ.bezierCurveTo(107.5 * ᐃ, ᐃ * 652.828125, 107.5 * ᐃ, ᐃ * 652.828125, 102 * ᐃ, 659.828125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 104, ᐃ * 669.328125, ᐃ * 104, ᐃ * 669.328125, 106 * ᐃ, ᐃ * 678.828125);
		Ⲇ.bezierCurveTo(145 * ᐃ, ᐃ * 679.328125, 145 * ᐃ, ᐃ * 679.328125, ᐃ * 184, 679.828125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 185, ᐃ * 615.828125, ᐃ * 185, ᐃ * 615.828125, 186 * ᐃ, 551.828125 * ᐃ);
		Ⲇ.bezierCurveTo(172.5 * ᐃ, ᐃ * 551.328125, ᐃ * 172.5, 551.328125 * ᐃ, 159 * ᐃ, 550.828125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃ * ᐃⲆⵠⵠⵠ);
		Ⲇ.restore();
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(15 * ᐃ, ᐃ * 35);
		ᐃΔΔ(Ⲇ, 178.5 * ᐃ, 172.828125 * ᐃ, ᐃ * 150);
		ΔΔ(Ⲇ, ΔⲆΔⵠᐃ, Δⵠ[ᐃⲆᐃⵠ], 95 * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 178.5, ᐃ * 172.828125, 150 * ᐃ);
		ΔΔ(Ⲇ, ⵠΔⲆⵠΔ, Δⵠ[1], 55 * ᐃ);
		Ⲇ.closePath();
		Ⲇ.save();
		Ⲇ.translate(177 * ᐃ, ᐃ * 512.328125);
		ᐃΔⵠ(Ⲇ, ᐃ * -25, -202.5 * ᐃ, 65 * ᐃ, ᐃ * 405, 25 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[Δᐃⵠⵠ], Δⵠ[ⲆᐃⵠΔ], ᐃ * 20);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 136, 581.828125 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -39, ᐃ * -23, 78 * ᐃ, 46 * ᐃ, ᐃ * 25);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔΔᐃΔⵠ], ᐃ * 20);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 135.5, 663.828125 * ᐃ);
		ᐃΔⵠ(Ⲇ, -39.5 * ᐃ, ᐃ * -22, ᐃ * 79, ᐃ * 44, 25 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ⵠΔⵠᐃⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 114, 594.828125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 175, 596.828125 * ᐃ, ᐃ * 163, ᐃ * 596.828125, 172 * ᐃ, 594.828125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 171.5, 633.828125 * ᐃ, 171.5 * ᐃ, 633.828125 * ᐃ, 171 * ᐃ, 672.828125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 110, 673.828125 * ᐃ, 140.5 * ᐃ, ᐃ * 673.328125, 110 * ᐃ, ᐃ * 673.828125);
		Ⲇ.bezierCurveTo(110.5 * ᐃ, 661.828125 * ᐃ, 110.5 * ᐃ, 661.828125 * ᐃ, 111 * ᐃ, ᐃ * 649.828125);
		Ⲇ.bezierCurveTo(ᐃ * 157, 633.828125 * ᐃ, ᐃ * 134, ᐃ * 607.828125, 114 * ᐃ, 594.828125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.translate(ᐃᐃᐃ, ᐃ * 5);
		Ⲇ.moveTo(123 * ᐃ, 294.828125 * ᐃ);
		Ⲇ.bezierCurveTo(212 * ᐃ, ᐃ * 295.828125, ᐃ * 190.5, ᐃ * 295.328125, ᐃ * 250, ᐃ * 295.828125);
		Ⲇ.bezierCurveTo(231.5 * ᐃ, 325.328125 * ᐃ, 231.5 * ᐃ, ᐃ * 325.328125, ᐃ * 220, 354.828125 * ᐃ);
		Ⲇ.bezierCurveTo(175.5 * ᐃ, ᐃ * 355.828125, 175.5 * ᐃ, 355.828125 * ᐃ, 140 * ᐃ, ᐃ * 356.828125);
		Ⲇ.bezierCurveTo(ᐃ * 123.5, ᐃ * 328.828125, 123.5 * ᐃ, ᐃ * 328.828125, 123 * ᐃ, 294.828125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃΔ]);
		Ⲇ.translate(Ⲇᐃⵠ, -5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(159 * ᐃ, ᐃ * 679.828125);
		Ⲇ.bezierCurveTo(ᐃ * 180, ᐃ * 665.828125, 155 * ᐃ, 675.828125 * ᐃ, 151 * ᐃ, ᐃ * 671.828125);
		Ⲇ.bezierCurveTo(ᐃ * 154.5, ᐃ * 685.328125, 154.5 * ᐃ, ᐃ * 685.328125, 158 * ᐃ, ᐃ * 698.828125);
		Ⲇ.bezierCurveTo(ᐃ * 171, 699.828125 * ᐃ, ᐃ * 171, 699.828125 * ᐃ, 184 * ᐃ, ᐃ * 700.828125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔ]);
		Ⲇ.save();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 157, ᐃ * 548.828125);
		Ⲇ.bezierCurveTo(ᐃ * 157, ᐃ * 561.828125, 157 * ᐃ, ᐃ * 561.828125, ᐃ * 157, 574.828125 * ᐃ);
		Ⲇ.bezierCurveTo(132.5 * ᐃ, ᐃ * 580.828125, ᐃ * 132.5, ᐃ * 580.828125, ᐃ * 108, ᐃ * 586.828125);
		Ⲇ.bezierCurveTo(112 * ᐃ, 599.828125 * ᐃ, 111 * ᐃ, 593.828125 * ᐃ, 112 * ᐃ, ᐃ * 599.828125);
		Ⲇ.bezierCurveTo(ᐃ * 159, 603.828125 * ᐃ, ᐃ * 126.5, ᐃ * 601.328125, 141 * ᐃ, ᐃ * 602.828125);
		Ⲇ.bezierCurveTo(ᐃ * 145, ᐃ * 641.828125, ᐃ * 143.5, ᐃ * 623.828125, ᐃ * 146, ᐃ * 644.828125);
		Ⲇ.bezierCurveTo(129.5 * ᐃ, ᐃ * 645.328125, ᐃ * 129.5, ᐃ * 645.328125, 113 * ᐃ, ᐃ * 645.828125);
		Ⲇ.bezierCurveTo(107.5 * ᐃ, ᐃ * 652.828125, ᐃ * 107.5, ᐃ * 652.828125, 102 * ᐃ, ᐃ * 659.828125);
		Ⲇ.bezierCurveTo(104 * ᐃ, ᐃ * 669.328125, ᐃ * 104, ᐃ * 669.328125, ᐃ * 106, 678.828125 * ᐃ);
		Ⲇ.bezierCurveTo(145 * ᐃ, 679.328125 * ᐃ, 145 * ᐃ, 679.328125 * ᐃ, ᐃ * 184, 679.828125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 185, ᐃ * 615.828125, 185 * ᐃ, ᐃ * 615.828125, 186 * ᐃ, ᐃ * 551.828125);
		Ⲇ.bezierCurveTo(172.5 * ᐃ, ᐃ * 551.328125, ᐃ * 172.5, ᐃ * 551.328125, ᐃ * 159, ᐃ * 550.828125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔΔΔ], Δⵠ[ΔⲆᐃⲆ], ᐃ * 7);
		Ⲇ.restore();
		return ΔⲆ
	}

	function ⵠⲆⵠᐃΔⵠᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 120 * ᐃ;
		ΔⲆ.height = ᐃ * 300;
		Ⲇ.translate(-200 * ᐃ, ᐃ * -40);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(344 * ᐃ, 18.40625 * ᐃ);
		Ⲇ.bezierCurveTo(345 * ᐃ, 361.40625 * ᐃ, 344 * ᐃ, 191.40625 * ᐃ, 344 * ᐃ, 364.40625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 261, 275.40625 * ᐃ, 274 * ᐃ, ᐃ * 259.40625, 229 * ᐃ, 213.40625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 199, ᐃ * 187.40625, ᐃ * 222, ᐃ * 133.40625, ᐃ * 273, ᐃ * 100.40625);
		Ⲇ.bezierCurveTo(321 * ᐃ, ᐃ * 71.40625, ᐃ * 327, ᐃ * 34.40625, ᐃ * 344, 18.40625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 335, ᐃ * 38.072906494140625);
		Ⲇ.bezierCurveTo(ᐃ * 307, ᐃ * 62.072906494140625, 291 * ᐃ, ᐃ * 60.072906494140625, 262 * ᐃ, ᐃ * 68.07290649414062);
		Ⲇ.bezierCurveTo(223 * ᐃ, ᐃ * 80.07290649414062, ᐃ * 225, ᐃ * 111.07290649414062, 264 * ᐃ, 139.07290649414062 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆ]);
		return ΔⲆ
	}

	function ⵠΔᐃⲆⵠᐃⵠ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 120;
		ΔⲆ.height = 320 * ᐃ;
		Ⲇ.translate(-60 * ᐃ, ᐃ * -ⵠⲆⵠⲆᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 188.5, 3.953125 * ᐃ);
		Ⲇ.bezierCurveTo(188.5 * ᐃ, 171.453125 * ᐃ, ᐃ * 188.5, ᐃ * 171.453125, 188.5 * ᐃ, 338.953125 * ᐃ);
		Ⲇ.bezierCurveTo(162.5 * ᐃ, ᐃ * 268.953125, ᐃ * 145.5, ᐃ * 265.953125, ᐃ * 116.5, 244.953125 * ᐃ);
		Ⲇ.bezierCurveTo(67.5 * ᐃ, ᐃ * 204.953125, ᐃ * 87.5, ᐃ * 160.953125, 113.5 * ᐃ, ᐃ * 125.953125);
		Ⲇ.bezierCurveTo(141.5 * ᐃ, ᐃ * 90.953125, ᐃ * 176.5, ᐃ * 56.953125, 188.5 * ᐃ, 3.953125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ]);
		return ΔⲆ
	}

	function ΔⲆΔᐃⵠⵠᐃ(ΔⲆΔⲆΔⲆⲆ, ⲆⲆᐃⵠΔⲆⵠ) {
		const ᐃⵠⲆⲆⵠΔⵠ = ~(40114 & ΔⲆΔⲆΔⲆⲆ) & ΔⲆΔⲆΔⲆⲆ | ~(ΔⲆΔⲆΔⲆⲆ & 40114) & 40114;
		const ⲆΔⵠⵠΔⲆⵠ = 62307 ^ ⲆⲆᐃⵠΔⲆⵠ;
		const ⵠⵠᐃΔⲆⵠΔᐃΔ = ⲆΔⵠᐃⵠΔⵠⲆΔ(ᐃⵠⲆⲆⵠΔⵠ, ⲆΔⵠⵠΔⲆⵠ, ᐃⵠⲆⲆⵠΔⵠ, ⲆΔⵠⵠΔⲆⵠ, ᐃⵠⲆⲆⵠΔⵠ, ⲆΔⵠⵠΔⲆⵠ);
		const ⵠⵠᐃΔᐃⲆᐃⵠⵠ = ⲆΔⵠⵠᐃᐃⲆ(ᐃⵠⲆⲆⵠΔⵠ, ⲆΔⵠⵠΔⲆⵠ, ᐃⵠⲆⲆⵠΔⵠ, ⲆΔⵠⵠΔⲆⵠ, ᐃⵠⲆⲆⵠΔⵠ);
		const ᐃⵠΔⵠΔⲆⵠⵠⲆ = ⵠⵠᐃΔⲆⵠΔᐃΔ ^ 11548;
		return ᐃⵠΔⵠΔⲆⵠⵠⲆ
	}

	function ᐃⵠⵠΔΔⵠΔⵠⲆ() {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 460;
		ΔⲆ.height = 220;
		Ⲇ.fillStyle = "#3a2a0d";
		Ⲇ.fillRect(0, ΔΔᐃ, ΔⲆ.width, ΔⲆ.height);
		Ⲇ.lineWidth = 4;
		Ⲇ.beginPath();
		Ⲇ.strokeStyle = "#513810";
		for (var ᐃⵠⲆ = 20; ᐃⵠⲆ < 220; ᐃⵠⲆ += 20) {
			Ⲇ.moveTo(ᐃⵠⵠⲆ, ᐃⵠⲆ);
			Ⲇ.lineTo(460, ᐃⵠⲆ);
			Ⲇ.closePath();
			Ⲇ.stroke()
		}
		return ΔⲆ
	}

	function ᐃⵠᐃⲆᐃⵠᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 376;
		ΔⲆ.height = ᐃ * 371;
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(ᐃⵠᐃⲆ * ᐃ, 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 191.633544921875, ᐃ * 123.98580932617188);
		Ⲇ.bezierCurveTo(ᐃ * 215.633544921875, ᐃ * 85.98580932617188, 187.633544921875 * ᐃ, ᐃ * 71.98580932617188, ᐃ * 202.633544921875, ᐃ * 19.985809326171875);
		Ⲇ.bezierCurveTo(ᐃ * 231.633544921875, ᐃ * 68.98580932617188, ᐃ * 253.633544921875, 71.98580932617188 * ᐃ, 256.633544921875 * ᐃ, 93.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 306.633544921875, ᐃ * 64.98580932617188, ᐃ * 319.633544921875, 61.985809326171875 * ᐃ, ᐃ * 350.633544921875, ᐃ * 58.985809326171875);
		Ⲇ.bezierCurveTo(ᐃ * 280.633544921875, 86.98580932617188 * ᐃ, 281.633544921875 * ᐃ, ᐃ * 106.98580932617188, ᐃ * 268.633544921875, ᐃ * 130.98580932617188);
		Ⲇ.bezierCurveTo(ᐃ * 295.633544921875, ᐃ * 158.98580932617188, ᐃ * 328.633544921875, 155.98580932617188 * ᐃ, ᐃ * 353.633544921875, 90.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 371.633544921875, ᐃ * 158.98580932617188, 337.633544921875 * ᐃ, ᐃ * 210.98580932617188, ᐃ * 286.633544921875, 209.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 323.633544921875, 230.98580932617188 * ᐃ, ᐃ * 317.633544921875, 274.9858093261719 * ᐃ, 356.633544921875 * ᐃ, ᐃ * 305.9858093261719);
		Ⲇ.bezierCurveTo(288.633544921875 * ᐃ, ᐃ * 297.9858093261719, ᐃ * 288.633544921875, 265.9858093261719 * ᐃ, 275.633544921875 * ᐃ, ᐃ * 266.9858093261719);
		Ⲇ.bezierCurveTo(280.633544921875 * ᐃ, 294.9858093261719 * ᐃ, 315.633544921875 * ᐃ, 306.9858093261719 * ᐃ, ᐃ * 336.633544921875, ᐃ * 316.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 295.633544921875, ᐃ * 318.9858093261719, 264.633544921875 * ᐃ, ᐃ * 302.9858093261719, 254.633544921875 * ᐃ, ᐃ * 289.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 252.633544921875, ᐃ * 301.9858093261719, 224.633544921875 * ᐃ, ᐃ * 315.9858093261719, 201.633544921875 * ᐃ, ᐃ * 356.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 195.633544921875, ᐃ * 313.9858093261719, ᐃ * 195.633544921875, 308.9858093261719 * ᐃ, 196.633544921875 * ᐃ, ᐃ * 307.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 197.633544921875, 289.9858093261719 * ᐃ, 207.633544921875 * ᐃ, 283.9858093261719 * ᐃ, 195.633544921875 * ᐃ, ᐃ * 258.9858093261719);
		Ⲇ.bezierCurveTo(182.633544921875 * ᐃ, 282.9858093261719 * ᐃ, ᐃ * 190.633544921875, 287.9858093261719 * ᐃ, 193.633544921875 * ᐃ, 297.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(195.633544921875 * ᐃ, ᐃ * 306.9858093261719, 191.633544921875 * ᐃ, 334.9858093261719 * ᐃ, 187.633544921875 * ᐃ, 354.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(165.633544921875 * ᐃ, ᐃ * 320.9858093261719, ᐃ * 138.633544921875, 307.9858093261719 * ᐃ, 135.633544921875 * ᐃ, ᐃ * 288.9858093261719);
		Ⲇ.bezierCurveTo(110.633544921875 * ᐃ, 318.9858093261719 * ᐃ, ᐃ * 68.633544921875, ᐃ * 323.9858093261719, ᐃ * 49.633544921875, 320.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(88.633544921875 * ᐃ, ᐃ * 308.9858093261719, 108.633544921875 * ᐃ, ᐃ * 284.9858093261719, 118.633544921875 * ᐃ, ᐃ * 258.9858093261719);
		Ⲇ.bezierCurveTo(86.633544921875 * ᐃ, ᐃ * 264.9858093261719, ᐃ * 75.633544921875, 310.9858093261719 * ᐃ, 19.633544921875 * ᐃ, ᐃ * 304.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 54.633544921875, ᐃ * 276.9858093261719, 59.633544921875 * ᐃ, ᐃ * 214.98580932617188, ᐃ * 105.633544921875, ᐃ * 205.98580932617188);
		Ⲇ.bezierCurveTo(14.633544921875 * ᐃ, ᐃ * 201.98580932617188, ᐃ * 24.633544921875, ᐃ * 141.98580932617188, ᐃ * 25.633544921875, 82.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 49.633544921875, 168.98580932617188 * ᐃ, 87.633544921875 * ᐃ, 141.98580932617188 * ᐃ, 112.633544921875 * ᐃ, ᐃ * 123.98580932617188);
		Ⲇ.bezierCurveTo(95.633544921875 * ᐃ, 75.98580932617188 * ᐃ, ᐃ * 70.633544921875, 68.98580932617188 * ᐃ, 35.633544921875 * ᐃ, 50.985809326171875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 70.633544921875, ᐃ * 53.985809326171875, ᐃ * 102.633544921875, ᐃ * 65.98580932617188, 125.633544921875 * ᐃ, ᐃ * 84.98580932617188);
		Ⲇ.bezierCurveTo(ᐃ * 133.633544921875, ᐃ * 69.98580932617188, 166.633544921875 * ᐃ, ᐃ * 42.985809326171875, 176.633544921875 * ᐃ, ᐃ * 21.985809326171875);
		Ⲇ.bezierCurveTo(ᐃ * 185.633544921875, ᐃ * 49.985809326171875, ᐃ * 168.633544921875, ᐃ * 95.98580932617188, ᐃ * 191.633544921875, ᐃ * 121.98580932617188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(-4 * ᐃ, -ᐃΔΔⲆⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 191.633544921875, ᐃ * 123.98580932617188);
		Ⲇ.bezierCurveTo(215.633544921875 * ᐃ, 85.98580932617188 * ᐃ, ᐃ * 187.633544921875, 71.98580932617188 * ᐃ, 202.633544921875 * ᐃ, ᐃ * 19.985809326171875);
		Ⲇ.bezierCurveTo(231.633544921875 * ᐃ, 68.98580932617188 * ᐃ, ᐃ * 253.633544921875, 71.98580932617188 * ᐃ, 256.633544921875 * ᐃ, 93.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 306.633544921875, 64.98580932617188 * ᐃ, 319.633544921875 * ᐃ, ᐃ * 61.985809326171875, ᐃ * 350.633544921875, 58.985809326171875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 280.633544921875, ᐃ * 86.98580932617188, 281.633544921875 * ᐃ, ᐃ * 106.98580932617188, ᐃ * 268.633544921875, 130.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(295.633544921875 * ᐃ, ᐃ * 158.98580932617188, 328.633544921875 * ᐃ, ᐃ * 155.98580932617188, ᐃ * 353.633544921875, 90.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 371.633544921875, 158.98580932617188 * ᐃ, ᐃ * 337.633544921875, 210.98580932617188 * ᐃ, ᐃ * 286.633544921875, ᐃ * 209.98580932617188);
		Ⲇ.bezierCurveTo(323.633544921875 * ᐃ, 230.98580932617188 * ᐃ, ᐃ * 317.633544921875, 274.9858093261719 * ᐃ, ᐃ * 356.633544921875, ᐃ * 305.9858093261719);
		Ⲇ.bezierCurveTo(288.633544921875 * ᐃ, 297.9858093261719 * ᐃ, ᐃ * 288.633544921875, 265.9858093261719 * ᐃ, 275.633544921875 * ᐃ, 266.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 280.633544921875, ᐃ * 294.9858093261719, 315.633544921875 * ᐃ, ᐃ * 306.9858093261719, 336.633544921875 * ᐃ, ᐃ * 316.9858093261719);
		Ⲇ.bezierCurveTo(295.633544921875 * ᐃ, ᐃ * 318.9858093261719, 264.633544921875 * ᐃ, ᐃ * 302.9858093261719, 254.633544921875 * ᐃ, ᐃ * 289.9858093261719);
		Ⲇ.bezierCurveTo(252.633544921875 * ᐃ, 301.9858093261719 * ᐃ, 224.633544921875 * ᐃ, 315.9858093261719 * ᐃ, ᐃ * 201.633544921875, 356.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(195.633544921875 * ᐃ, 313.9858093261719 * ᐃ, 195.633544921875 * ᐃ, 308.9858093261719 * ᐃ, ᐃ * 196.633544921875, ᐃ * 307.9858093261719);
		Ⲇ.bezierCurveTo(197.633544921875 * ᐃ, 289.9858093261719 * ᐃ, 207.633544921875 * ᐃ, 283.9858093261719 * ᐃ, 195.633544921875 * ᐃ, ᐃ * 258.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 182.633544921875, 282.9858093261719 * ᐃ, ᐃ * 190.633544921875, ᐃ * 287.9858093261719, 193.633544921875 * ᐃ, ᐃ * 297.9858093261719);
		Ⲇ.bezierCurveTo(195.633544921875 * ᐃ, ᐃ * 306.9858093261719, 191.633544921875 * ᐃ, ᐃ * 334.9858093261719, ᐃ * 187.633544921875, 354.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(165.633544921875 * ᐃ, 320.9858093261719 * ᐃ, ᐃ * 138.633544921875, ᐃ * 307.9858093261719, 135.633544921875 * ᐃ, ᐃ * 288.9858093261719);
		Ⲇ.bezierCurveTo(110.633544921875 * ᐃ, 318.9858093261719 * ᐃ, ᐃ * 68.633544921875, 323.9858093261719 * ᐃ, 49.633544921875 * ᐃ, ᐃ * 320.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 88.633544921875, 308.9858093261719 * ᐃ, 108.633544921875 * ᐃ, ᐃ * 284.9858093261719, ᐃ * 118.633544921875, ᐃ * 258.9858093261719);
		Ⲇ.bezierCurveTo(86.633544921875 * ᐃ, 264.9858093261719 * ᐃ, ᐃ * 75.633544921875, 310.9858093261719 * ᐃ, ᐃ * 19.633544921875, 304.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 54.633544921875, 276.9858093261719 * ᐃ, 59.633544921875 * ᐃ, ᐃ * 214.98580932617188, ᐃ * 105.633544921875, 205.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(14.633544921875 * ᐃ, ᐃ * 201.98580932617188, 24.633544921875 * ᐃ, ᐃ * 141.98580932617188, ᐃ * 25.633544921875, ᐃ * 82.98580932617188);
		Ⲇ.bezierCurveTo(ᐃ * 49.633544921875, ᐃ * 168.98580932617188, 87.633544921875 * ᐃ, ᐃ * 141.98580932617188, 112.633544921875 * ᐃ, ᐃ * 123.98580932617188);
		Ⲇ.bezierCurveTo(ᐃ * 95.633544921875, ᐃ * 75.98580932617188, ᐃ * 70.633544921875, ᐃ * 68.98580932617188, 35.633544921875 * ᐃ, 50.985809326171875 * ᐃ);
		Ⲇ.bezierCurveTo(70.633544921875 * ᐃ, 53.985809326171875 * ᐃ, 102.633544921875 * ᐃ, 65.98580932617188 * ᐃ, ᐃ * 125.633544921875, 84.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(133.633544921875 * ᐃ, 69.98580932617188 * ᐃ, ᐃ * 166.633544921875, ᐃ * 42.985809326171875, ᐃ * 176.633544921875, 21.985809326171875 * ᐃ);
		Ⲇ.bezierCurveTo(185.633544921875 * ᐃ, 49.985809326171875 * ᐃ, 168.633544921875 * ᐃ, 95.98580932617188 * ᐃ, ᐃ * 191.633544921875, 121.98580932617188 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆⲆⲆΔⲆ, Δⵠ[ⲆᐃΔ], ⲆⵠᐃⵠⲆ * ᐃ);
		Ⲇ.translate(-ⵠΔᐃ * ᐃ, ᐃ * ⲆⲆⵠⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 270.633544921875, ᐃ * 88.98580932617188);
		Ⲇ.bezierCurveTo(296.633544921875 * ᐃ, 65.98580932617188 * ᐃ, 318.633544921875 * ᐃ, ᐃ * 62.985809326171875, ᐃ * 348.633544921875, ᐃ * 57.985809326171875);
		Ⲇ.bezierCurveTo(309.633544921875 * ᐃ, ᐃ * 76.98580932617188, ᐃ * 291.633544921875, ᐃ * 88.98580932617188, ᐃ * 280.633544921875, ᐃ * 99.98580932617188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], ⵠⲆΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(275.633544921875 * ᐃ, ᐃ * 281.9858093261719);
		Ⲇ.bezierCurveTo(303.633544921875 * ᐃ, ᐃ * 308.9858093261719, 321.633544921875 * ᐃ, ᐃ * 308.9858093261719, 335.633544921875 * ᐃ, 315.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(305.633544921875 * ᐃ, 320.9858093261719 * ᐃ, ᐃ * 278.633544921875, 307.9858093261719 * ᐃ, ᐃ * 264.633544921875, ᐃ * 293.9858093261719);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ⲆΔⲆⲆⵠ], ⵠⲆΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 124.633544921875, ᐃ * 291.9858093261719);
		Ⲇ.bezierCurveTo(106.633544921875 * ᐃ, ᐃ * 316.9858093261719, ᐃ * 72.633544921875, 325.9858093261719 * ᐃ, 53.633544921875 * ᐃ, 319.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(83.633544921875 * ᐃ, ᐃ * 308.9858093261719, ᐃ * 97.633544921875, ᐃ * 298.9858093261719, 112.633544921875 * ᐃ, ᐃ * 284.9858093261719);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠᐃΔ], Δⵠ[5], ⵠΔⲆΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 113.633544921875, ᐃ * 80.98580932617188);
		Ⲇ.bezierCurveTo(91.633544921875 * ᐃ, ᐃ * 54.985809326171875, 72.633544921875 * ᐃ, 56.985809326171875 * ᐃ, ᐃ * 36.633544921875, 49.985809326171875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 87.633544921875, ᐃ * 72.98580932617188, ᐃ * 95.633544921875, 82.98580932617188 * ᐃ, ᐃ * 106.633544921875, 96.98580932617188 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔⲆΔΔ], Δⵠ[ⲆⵠΔΔ], ᐃ * ᐃᐃΔΔᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(202.633544921875 * ᐃ, ᐃ * 20.985809326171875);
		Ⲇ.bezierCurveTo(ᐃ * 219.633544921875, ᐃ * 49.985809326171875, ᐃ * 259.633544921875, 80.98580932617188 * ᐃ, 255.633544921875 * ᐃ, 92.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 268.633544921875, 86.98580932617188 * ᐃ, ᐃ * 265.633544921875, 87.98580932617188 * ᐃ, ᐃ * 275.633544921875, ᐃ * 82.98580932617188);
		Ⲇ.bezierCurveTo(ᐃ * 283.633544921875, 87.98580932617188 * ᐃ, ᐃ * 283.633544921875, 87.98580932617188 * ᐃ, ᐃ * 291.633544921875, ᐃ * 92.98580932617188);
		Ⲇ.bezierCurveTo(269.633544921875 * ᐃ, ᐃ * 116.98580932617188, 270.633544921875 * ᐃ, ᐃ * 124.98580932617188, 267.633544921875 * ᐃ, ᐃ * 130.98580932617188);
		Ⲇ.bezierCurveTo(307.633544921875 * ᐃ, 168.98580932617188 * ᐃ, 339.633544921875 * ᐃ, ᐃ * 132.98580932617188, 352.633544921875 * ᐃ, ᐃ * 93.98580932617188);
		Ⲇ.bezierCurveTo(366.633544921875 * ᐃ, 145.98580932617188 * ᐃ, ᐃ * 345.633544921875, ᐃ * 207.98580932617188, 286.633544921875 * ᐃ, ᐃ * 208.98580932617188);
		Ⲇ.bezierCurveTo(315.633544921875 * ᐃ, 223.98580932617188 * ᐃ, ᐃ * 327.633544921875, ᐃ * 287.9858093261719, ᐃ * 355.633544921875, 305.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(293.633544921875 * ᐃ, 298.9858093261719 * ᐃ, ᐃ * 293.633544921875, 275.9858093261719 * ᐃ, ᐃ * 276.633544921875, ᐃ * 266.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 274.633544921875, ᐃ * 282.9858093261719, ᐃ * 287.633544921875, ᐃ * 288.9858093261719, ᐃ * 295.633544921875, 296.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 287.133544921875, 302.4858093261719 * ᐃ, 287.133544921875 * ᐃ, 302.4858093261719 * ᐃ, 278.633544921875 * ᐃ, 307.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 261.633544921875, 297.9858093261719 * ᐃ, 258.633544921875 * ᐃ, ᐃ * 293.9858093261719, ᐃ * 255.633544921875, 290.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(249.633544921875 * ᐃ, 301.9858093261719 * ᐃ, ᐃ * 225.633544921875, 320.9858093261719 * ᐃ, 202.633544921875 * ᐃ, 354.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(195.633544921875 * ᐃ, 318.9858093261719 * ᐃ, 196.633544921875 * ᐃ, 306.9858093261719 * ᐃ, 198.633544921875 * ᐃ, ᐃ * 300.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 209.633544921875, 268.9858093261719 * ᐃ, 199.633544921875 * ᐃ, ᐃ * 266.9858093261719, 195.633544921875 * ᐃ, ᐃ * 256.9858093261719);
		Ⲇ.bezierCurveTo(183.633544921875 * ᐃ, 274.9858093261719 * ᐃ, 182.633544921875 * ᐃ, ᐃ * 281.9858093261719, ᐃ * 192.633544921875, 305.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 194.633544921875, 317.9858093261719 * ᐃ, ᐃ * 191.633544921875, 336.9858093261719 * ᐃ, ᐃ * 186.633544921875, 351.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(166.633544921875 * ᐃ, ᐃ * 318.9858093261719, ᐃ * 141.633544921875, 303.9858093261719 * ᐃ, ᐃ * 136.633544921875, ᐃ * 286.9858093261719);
		Ⲇ.bezierCurveTo(122.633544921875 * ᐃ, 303.9858093261719 * ᐃ, 115.633544921875 * ᐃ, ᐃ * 305.9858093261719, 109.633544921875 * ᐃ, 306.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 101.133544921875, 301.9858093261719 * ᐃ, 94.633544921875 * ᐃ, 297.9858093261719 * ᐃ, 92.633544921875 * ᐃ, 296.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(116.633544921875 * ᐃ, ᐃ * 277.9858093261719, 116.633544921875 * ᐃ, ᐃ * 266.9858093261719, 119.633544921875 * ᐃ, ᐃ * 257.9858093261719);
		Ⲇ.bezierCurveTo(107.633544921875 * ᐃ, 257.9858093261719 * ᐃ, 65.633544921875 * ᐃ, ᐃ * 308.9858093261719, 24.633544921875 * ᐃ, 303.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 51.633544921875, 275.9858093261719 * ᐃ, 64.633544921875 * ᐃ, ᐃ * 220.98580932617188, 108.633544921875 * ᐃ, ᐃ * 205.98580932617188);
		Ⲇ.bezierCurveTo(ᐃ * 14.633544921875, 198.98580932617188 * ᐃ, 26.633544921875 * ᐃ, ᐃ * 142.98580932617188, 25.633544921875 * ᐃ, ᐃ * 86.98580932617188);
		Ⲇ.bezierCurveTo(ᐃ * 41.633544921875, 155.98580932617188 * ᐃ, ᐃ * 81.633544921875, 148.98580932617188 * ᐃ, ᐃ * 113.633544921875, ᐃ * 124.98580932617188);
		Ⲇ.bezierCurveTo(102.633544921875 * ᐃ, 93.98580932617188 * ᐃ, ᐃ * 95.633544921875, 88.98580932617188 * ᐃ, ᐃ * 89.633544921875, ᐃ * 81.98580932617188);
		Ⲇ.bezierCurveTo(97.633544921875 * ᐃ, ᐃ * 76.48580932617188, 97.633544921875 * ᐃ, ᐃ * 76.48580932617188, 105.633544921875 * ᐃ, 70.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 120.633544921875, ᐃ * 78.98580932617188, 121.633544921875 * ᐃ, 81.98580932617188 * ᐃ, 124.633544921875 * ᐃ, ᐃ * 86.98580932617188);
		Ⲇ.bezierCurveTo(ᐃ * 132.633544921875, 71.98580932617188 * ᐃ, 160.633544921875 * ᐃ, 56.985809326171875 * ᐃ, ᐃ * 175.633544921875, ᐃ * 23.985809326171875);
		Ⲇ.bezierCurveTo(ᐃ * 182.633544921875, ᐃ * 53.985809326171875, 170.633544921875 * ᐃ, 102.98580932617188 * ᐃ, ᐃ * 191.633544921875, ᐃ * 125.98580932617188);
		Ⲇ.bezierCurveTo(ᐃ * 214.633544921875, 89.98580932617188 * ᐃ, ᐃ * 192.633544921875, 58.985809326171875 * ᐃ, ᐃ * 202.633544921875, ᐃ * 20.985809326171875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆⲆ], Δⵠ[ᐃΔⵠⲆ], ᐃ * ΔⵠΔᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 203.633544921875, ᐃ * 21.985809326171875);
		Ⲇ.bezierCurveTo(223.633544921875 * ᐃ, ᐃ * 63.985809326171875, 227.633544921875 * ᐃ, ᐃ * 72.98580932617188, 235.633544921875 * ᐃ, 98.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(241.633544921875 * ᐃ, ᐃ * 123.98580932617188, ᐃ * 225.633544921875, 138.98580932617188 * ᐃ, ᐃ * 196.633544921875, ᐃ * 122.98580932617188);
		Ⲇ.bezierCurveTo(ᐃ * 213.633544921875, 93.98580932617188 * ᐃ, 199.633544921875 * ᐃ, 49.985809326171875 * ᐃ, 203.633544921875 * ᐃ, 26.985809326171875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⲆΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 175.633544921875, ᐃ * 25.985809326171875);
		Ⲇ.bezierCurveTo(ᐃ * 176.633544921875, 51.985809326171875 * ᐃ, 171.633544921875 * ᐃ, 88.98580932617188 * ᐃ, 186.633544921875 * ᐃ, 121.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(156.633544921875 * ᐃ, 144.98580932617188 * ᐃ, 139.633544921875 * ᐃ, 120.98580932617188 * ᐃ, ᐃ * 147.633544921875, 97.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(152.633544921875 * ᐃ, 77.98580932617188 * ᐃ, ᐃ * 162.633544921875, 60.985809326171875 * ᐃ, 176.633544921875 * ᐃ, ᐃ * 25.985809326171875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(26.633544921875 * ᐃ, 96.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(38.633544921875 * ᐃ, ᐃ * 151.98580932617188, ᐃ * 61.633544921875, ᐃ * 161.98580932617188, ᐃ * 88.633544921875, 168.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 117.633544921875, 177.98580932617188 * ᐃ, ᐃ * 113.633544921875, 185.98580932617188 * ᐃ, 106.633544921875 * ᐃ, ᐃ * 204.98580932617188);
		Ⲇ.bezierCurveTo(ᐃ * 32.633544921875, ᐃ * 204.98580932617188, 25.633544921875 * ᐃ, ᐃ * 149.98580932617188, ᐃ * 25.633544921875, 97.98580932617188 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(351.633544921875 * ᐃ, ᐃ * 99.98580932617188);
		Ⲇ.bezierCurveTo(ᐃ * 365.633544921875, 161.98580932617188 * ᐃ, ᐃ * 333.633544921875, ᐃ * 203.98580932617188, 287.633544921875 * ᐃ, 207.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 255.633544921875, ᐃ * 208.98580932617188, 266.633544921875 * ᐃ, 174.98580932617188 * ᐃ, ᐃ * 285.633544921875, ᐃ * 176.98580932617188);
		Ⲇ.bezierCurveTo(313.633544921875 * ᐃ, ᐃ * 178.98580932617188, ᐃ * 348.633544921875, ᐃ * 135.98580932617188, 353.633544921875 * ᐃ, ᐃ * 99.98580932617188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 350.633544921875, ᐃ * 302.9858093261719);
		Ⲇ.bezierCurveTo(310.633544921875 * ᐃ, ᐃ * 280.9858093261719, ᐃ * 314.633544921875, ᐃ * 244.98580932617188, ᐃ * 292.633544921875, ᐃ * 230.98580932617188);
		Ⲇ.bezierCurveTo(272.633544921875 * ᐃ, ᐃ * 215.98580932617188, 263.633544921875 * ᐃ, 222.98580932617188 * ᐃ, 256.633544921875 * ᐃ, 236.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 251.633544921875, 249.98580932617188 * ᐃ, ᐃ * 264.633544921875, 255.98580932617188 * ᐃ, 279.633544921875 * ᐃ, ᐃ * 268.9858093261719);
		Ⲇ.bezierCurveTo(306.633544921875 * ᐃ, ᐃ * 295.9858093261719, 325.633544921875 * ᐃ, 299.9858093261719 * ᐃ, ᐃ * 349.633544921875, 302.9858093261719 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔΔⲆᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(95.633544921875 * ᐃ, 224.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(64.633544921875 * ᐃ, ᐃ * 245.98580932617188, 62.633544921875 * ᐃ, 280.9858093261719 * ᐃ, 32.633544921875 * ᐃ, ᐃ * 303.9858093261719);
		Ⲇ.bezierCurveTo(59.633544921875 * ᐃ, 301.9858093261719 * ᐃ, 102.633544921875 * ᐃ, ᐃ * 260.9858093261719, 116.633544921875 * ᐃ, ᐃ * 255.98580932617188);
		Ⲇ.bezierCurveTo(139.633544921875 * ᐃ, 229.98580932617188 * ᐃ, 108.633544921875 * ᐃ, 209.98580932617188 * ᐃ, ᐃ * 97.633544921875, ᐃ * 224.98580932617188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(195.633544921875 * ᐃ, 253.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 209.633544921875, ᐃ * 282.9858093261719, ᐃ * 205.633544921875, ᐃ * 278.9858093261719, ᐃ * 199.633544921875, 307.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 198.633544921875, ᐃ * 332.9858093261719, 201.633544921875 * ᐃ, 340.9858093261719 * ᐃ, ᐃ * 202.633544921875, ᐃ * 348.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 215.633544921875, 313.9858093261719 * ᐃ, 226.633544921875 * ᐃ, ᐃ * 291.9858093261719, 235.633544921875 * ᐃ, ᐃ * 270.9858093261719);
		Ⲇ.bezierCurveTo(243.633544921875 * ᐃ, ᐃ * 247.98580932617188, ᐃ * 219.633544921875, ᐃ * 235.98580932617188, 196.633544921875 * ᐃ, 252.98580932617188 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(195.633544921875 * ᐃ, ᐃ * 251.98580932617188);
		Ⲇ.bezierCurveTo(176.633544921875 * ᐃ, 275.9858093261719 * ᐃ, ᐃ * 182.633544921875, ᐃ * 285.9858093261719, ᐃ * 191.633544921875, 308.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(194.633544921875 * ᐃ, ᐃ * 318.9858093261719, 190.633544921875 * ᐃ, 334.9858093261719 * ᐃ, 186.633544921875 * ᐃ, ᐃ * 348.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 175.633544921875, ᐃ * 307.9858093261719, ᐃ * 157.633544921875, 291.9858093261719 * ᐃ, ᐃ * 155.633544921875, ᐃ * 272.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 150.633544921875, ᐃ * 243.98580932617188, 170.633544921875 * ᐃ, 236.98580932617188 * ᐃ, 195.633544921875 * ᐃ, 251.98580932617188 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(316 * ᐃ, 186.8020782470703 * ᐃ);
		Ⲇ.bezierCurveTo(315 * ᐃ, 173.8020782470703 * ᐃ, ᐃ * 298, ᐃ * 177.8020782470703, ᐃ * 293, 183.8020782470703 * ᐃ);
		Ⲇ.bezierCurveTo(285 * ᐃ, ᐃ * 195.8020782470703, ᐃ * 314, 197.8020782470703 * ᐃ, 315 * ᐃ, 187.8020782470703 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔΔ], Δⵠ[7], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(340 * ᐃ, ᐃ * 157.8020782470703);
		Ⲇ.bezierCurveTo(ᐃ * 327, 153.8020782470703 * ᐃ, ᐃ * 321, 168.8020782470703 * ᐃ, ᐃ * 330, ᐃ * 174.8020782470703);
		Ⲇ.bezierCurveTo(341 * ᐃ, 178.8020782470703 * ᐃ, 347 * ᐃ, 161.8020782470703 * ᐃ, 341 * ᐃ, 157.8020782470703 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[7], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 349, ᐃ * 136.8020782470703);
		Ⲇ.bezierCurveTo(343 * ᐃ, ᐃ * 135.8020782470703, ᐃ * 342, ᐃ * 139.8020782470703, ᐃ * 341, 147.8020782470703 * ᐃ);
		Ⲇ.bezierCurveTo(343 * ᐃ, 155.8020782470703 * ᐃ, 353 * ᐃ, 143.8020782470703 * ᐃ, 349 * ᐃ, 137.8020782470703 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠᐃᐃᐃ], Δⵠ[7], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 278.75, ᐃ * 246.4375);
		Ⲇ.bezierCurveTo(ᐃ * 288.75, ᐃ * 242.4375, 301.75 * ᐃ, ᐃ * 248.4375, 298.75 * ᐃ, 262.4375 * ᐃ);
		Ⲇ.bezierCurveTo(293.75 * ᐃ, ᐃ * 271.4375, ᐃ * 287.75, ᐃ * 271.4375, 278.75 * ᐃ, 262.4375 * ᐃ);
		Ⲇ.bezierCurveTo(271.75 * ᐃ, ᐃ * 255.4375, ᐃ * 274.75, 250.4375 * ᐃ, 277.75 * ᐃ, ᐃ * 247.4375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔⵠΔ], Δⵠ[ⲆΔᐃⲆᐃ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(310.75 * ᐃ, ᐃ * 277.4375);
		Ⲇ.bezierCurveTo(ᐃ * 319.75, 280.4375 * ᐃ, ᐃ * 322.75, 283.4375 * ᐃ, 321.75 * ᐃ, 289.4375 * ᐃ);
		Ⲇ.bezierCurveTo(319.75 * ᐃ, ᐃ * 295.4375, 313.75 * ᐃ, 291.4375 * ᐃ, 308.75 * ᐃ, ᐃ * 288.4375);
		Ⲇ.bezierCurveTo(301.75 * ᐃ, 281.4375 * ᐃ, ᐃ * 306.75, 277.4375 * ᐃ, ᐃ * 309.75, 277.4375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔⵠΔ], Δⵠ[ⵠⵠⲆⲆΔⲆᐃ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 217.75, 257.4375 * ᐃ);
		Ⲇ.bezierCurveTo(227.75 * ᐃ, 269.4375 * ᐃ, ᐃ * 220.75, ᐃ * 281.4375, 212.75 * ᐃ, 280.4375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 206.75, ᐃ * 279.4375, 206.75 * ᐃ, 269.4375 * ᐃ, 204.75 * ᐃ, ᐃ * 260.4375);
		Ⲇ.bezierCurveTo(204.75 * ᐃ, ᐃ * 254.4375, ᐃ * 211.75, ᐃ * 253.4375, ᐃ * 216.75, ᐃ * 256.4375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⵠⲆ], Δⵠ[7], ᐃ * ᐃΔⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 211.75, ᐃ * 289.4375);
		Ⲇ.bezierCurveTo(ᐃ * 219.75, ᐃ * 292.4375, 213.75 * ᐃ, ᐃ * 306.4375, 206.75 * ᐃ, ᐃ * 307.4375);
		Ⲇ.bezierCurveTo(ᐃ * 199.75, 303.4375 * ᐃ, 209.75 * ᐃ, 287.4375 * ᐃ, 210.75 * ᐃ, ᐃ * 289.4375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆⵠⵠ], Δⵠ[ᐃᐃⵠᐃᐃ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 171.75, ᐃ * 256.4375);
		Ⲇ.bezierCurveTo(ᐃ * 162.75, 273.4375 * ᐃ, ᐃ * 166.75, ᐃ * 278.4375, ᐃ * 175.75, 280.4375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 183.75, 278.4375 * ᐃ, ᐃ * 185.75, 257.4375 * ᐃ, ᐃ * 182.75, ᐃ * 255.4375);
		Ⲇ.bezierCurveTo(176.75 * ᐃ, ᐃ * 251.4375, 172.75 * ᐃ, ᐃ * 253.4375, 172.75 * ᐃ, 256.4375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔⵠᐃ], Δⵠ[ΔⵠΔΔᐃ], ᐃ * ᐃⲆᐃⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 175.75, 289.9375 * ᐃ);
		Ⲇ.bezierCurveTo(183.75 * ᐃ, 287.9375 * ᐃ, ᐃ * 186.75, 301.9375 * ᐃ, 182.75 * ᐃ, 305.9375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 176.75, 307.9375 * ᐃ, ᐃ * 171.75, ᐃ * 292.9375, 174.75 * ᐃ, 290.9375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔΔ], Δⵠ[ΔⵠΔΔᐃ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(205.75 * ᐃ, 314.4375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 209.75, 316.4375 * ᐃ, 210.75 * ᐃ, ᐃ * 320.4375, ᐃ * 206.75, ᐃ * 323.4375);
		Ⲇ.bezierCurveTo(ᐃ * 201.75, ᐃ * 324.4375, ᐃ * 201.75, 314.4375 * ᐃ, 204.75 * ᐃ, ᐃ * 314.4375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃΔᐃᐃ], Δⵠ[7], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 186.75, 313.4375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 181.75, ᐃ * 315.4375, 180.75 * ᐃ, 321.4375 * ᐃ, ᐃ * 185.75, 326.4375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 190.75, 327.4375 * ᐃ, ᐃ * 190.75, ᐃ * 313.4375, ᐃ * 187.75, ᐃ * 314.4375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔⵠᐃ], Δⵠ[ⲆᐃΔⲆⲆΔᐃ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 103.75, 244.4375 * ᐃ);
		Ⲇ.bezierCurveTo(96.75 * ᐃ, ᐃ * 239.4375, ᐃ * 83.75, 240.4375 * ᐃ, 81.75 * ᐃ, ᐃ * 255.4375);
		Ⲇ.bezierCurveTo(80.75 * ᐃ, ᐃ * 264.4375, 89.75 * ᐃ, 269.4375 * ᐃ, 99.75 * ᐃ, 260.4375 * ᐃ);
		Ⲇ.bezierCurveTo(106.75 * ᐃ, ᐃ * 254.4375, ᐃ * 106.75, 250.4375 * ᐃ, 104.75 * ᐃ, ᐃ * 245.4375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⵠᐃⵠ], Δⵠ[7], ᐃ * ᐃⵠⵠⵠᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(86.75 * ᐃ, 182.4375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 82.75, 170.4375 * ᐃ, 66.75 * ᐃ, ᐃ * 169.4375, 61.75 * ᐃ, 181.4375 * ᐃ);
		Ⲇ.bezierCurveTo(58.75 * ᐃ, ᐃ * 187.4375, 68.75 * ᐃ, 194.4375 * ᐃ, 75.75 * ᐃ, ᐃ * 192.4375);
		Ⲇ.bezierCurveTo(83.75 * ᐃ, 192.4375 * ᐃ, ᐃ * 86.75, 187.4375 * ᐃ, 86.75 * ᐃ, ᐃ * 183.4375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[7], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 44.75, ᐃ * 152.4375);
		Ⲇ.bezierCurveTo(55.75 * ᐃ, 159.4375 * ᐃ, 54.75 * ᐃ, ᐃ * 170.4375, 46.75 * ᐃ, ᐃ * 171.4375);
		Ⲇ.bezierCurveTo(39.75 * ᐃ, ᐃ * 170.4375, ᐃ * 34.75, 151.4375 * ᐃ, ᐃ * 43.75, ᐃ * 152.4375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔⲆ], Δⵠ[7], ᐃⲆⵠᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(31.75 * ᐃ, ᐃ * 130.4375);
		Ⲇ.bezierCurveTo(ᐃ * 35.75, 132.4375 * ᐃ, ᐃ * 35.75, ᐃ * 131.4375, ᐃ * 37.75, 137.4375 * ᐃ);
		Ⲇ.bezierCurveTo(36.75 * ᐃ, ᐃ * 144.4375, ᐃ * 36.75, ᐃ * 145.4375, 33.75 * ᐃ, 144.4375 * ᐃ);
		Ⲇ.bezierCurveTo(26.75 * ᐃ, ᐃ * 137.4375, 29.75 * ᐃ, ᐃ * 131.4375, 31.75 * ᐃ, ᐃ * 130.4375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[7], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 69.75, 274.4375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 62.75, ᐃ * 272.4375, ᐃ * 59.75, ᐃ * 277.4375, ᐃ * 57.75, ᐃ * 284.4375);
		Ⲇ.bezierCurveTo(ᐃ * 56.75, ᐃ * 290.4375, ᐃ * 63.75, ᐃ * 289.4375, 71.75 * ᐃ, ᐃ * 282.4375);
		Ⲇ.bezierCurveTo(75.75 * ᐃ, ᐃ * 277.4375, 72.75 * ᐃ, 275.4375 * ᐃ, 69.75 * ᐃ, 274.4375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆⵠⵠ], Δⵠ[ᐃⲆⲆᐃΔⲆⵠ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 165.75, ᐃ * 95.4375);
		Ⲇ.bezierCurveTo(ᐃ * 177.75, ᐃ * 97.4375, ᐃ * 182.75, 115.4375 * ᐃ, 173.75 * ᐃ, ᐃ * 121.4375);
		Ⲇ.bezierCurveTo(ᐃ * 164.75, ᐃ * 126.4375, ᐃ * 149.75, 102.4375 * ᐃ, 164.75 * ᐃ, 96.4375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[ⲆⵠⲆΔᐃ], ᐃⲆᐃⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(216.75 * ᐃ, 94.4375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 227.75, ᐃ * 99.4375, 223.75 * ᐃ, ᐃ * 122.4375, 210.75 * ᐃ, 119.4375 * ᐃ);
		Ⲇ.bezierCurveTo(203.75 * ᐃ, 115.4375 * ᐃ, 207.75 * ᐃ, 93.4375 * ᐃ, ᐃ * 216.75, 94.4375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆᐃᐃ], Δⵠ[ᐃⲆⵠⵠⵠ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(211.75 * ᐃ, ᐃ * 68.4375);
		Ⲇ.bezierCurveTo(ᐃ * 218.75, ᐃ * 69.4375, ᐃ * 220.75, ᐃ * 77.4375, ᐃ * 216.75, 83.4375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 208.75, ᐃ * 89.4375, ᐃ * 205.75, 68.4375 * ᐃ, ᐃ * 210.75, ᐃ * 68.4375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[7], ⵠΔⲆΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(169.75 * ᐃ, 71.4375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 162.75, ᐃ * 72.4375, 159.75 * ᐃ, 83.4375 * ᐃ, ᐃ * 167.75, 88.4375 * ᐃ);
		Ⲇ.bezierCurveTo(174.75 * ᐃ, ᐃ * 90.4375, 174.75 * ᐃ, ᐃ * 72.4375, ᐃ * 170.75, 71.4375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[Δᐃⵠᐃⵠ], ᐃ * ⵠⲆΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(193.75 * ᐃ, 160.4375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 215.75, 168.4375 * ᐃ, ᐃ * 224.75, 180.4375 * ᐃ, ᐃ * 229.75, 193.4375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 223.75, 211.4375 * ᐃ, ᐃ * 205.75, ᐃ * 225.4375, 193.75 * ᐃ, ᐃ * 229.4375);
		Ⲇ.bezierCurveTo(167.75 * ᐃ, ᐃ * 217.4375, 161.75 * ᐃ, ᐃ * 205.4375, ᐃ * 156.75, 192.4375 * ᐃ);
		Ⲇ.bezierCurveTo(164.75 * ᐃ, ᐃ * 175.4375, 176.75 * ᐃ, 166.4375 * ᐃ, 192.75 * ᐃ, ᐃ * 160.4375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆᐃΔᐃΔⲆ], Δⵠ[9], 3 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(189.1999969482422 * ᐃ, ᐃ * 182.61249923706055);
		Ⲇ.bezierCurveTo(ᐃ * 190.1999969482422, 184.11249923706055 * ᐃ, ᐃ * 190.1999969482422, 184.11249923706055 * ᐃ, 191.1999969482422 * ᐃ, ᐃ * 185.61249923706055);
		Ⲇ.bezierCurveTo(ᐃ * 192.1999969482422, 180.61249923706055 * ᐃ, 192.1999969482422 * ᐃ, ᐃ * 180.61249923706055, 193.1999969482422 * ᐃ, ᐃ * 175.61249923706055);
		Ⲇ.bezierCurveTo(ᐃ * 195.6999969482422, ᐃ * 177.11249923706055, 195.6999969482422 * ᐃ, 177.11249923706055 * ᐃ, ᐃ * 198.1999969482422, ᐃ * 178.61249923706055);
		Ⲇ.bezierCurveTo(ᐃ * 198.1999969482422, ᐃ * 181.11249923706055, ᐃ * 198.1999969482422, 181.11249923706055 * ᐃ, ᐃ * 198.1999969482422, 183.61249923706055 * ᐃ);
		Ⲇ.bezierCurveTo(201.6999969482422 * ᐃ, 181.11249923706055 * ᐃ, 201.6999969482422 * ᐃ, ᐃ * 181.11249923706055, ᐃ * 205.1999969482422, ᐃ * 178.61249923706055);
		Ⲇ.bezierCurveTo(ᐃ * 206.6999969482422, ᐃ * 180.61249923706055, ᐃ * 206.6999969482422, ᐃ * 180.61249923706055, 208.1999969482422 * ᐃ, ᐃ * 182.61249923706055);
		Ⲇ.bezierCurveTo(ᐃ * 206.1999969482422, ᐃ * 185.61249923706055, ᐃ * 206.1999969482422, ᐃ * 185.61249923706055, 204.1999969482422 * ᐃ, 188.61249923706055 * ᐃ);
		Ⲇ.bezierCurveTo(208.6999969482422 * ᐃ, ᐃ * 188.61249923706055, 208.6999969482422 * ᐃ, 188.61249923706055 * ᐃ, ᐃ * 213.1999969482422, ᐃ * 188.61249923706055);
		Ⲇ.bezierCurveTo(213.1999969482422 * ᐃ, 191.11249923706055 * ᐃ, 213.1999969482422 * ᐃ, ᐃ * 191.11249923706055, ᐃ * 213.1999969482422, 193.61249923706055 * ᐃ);
		Ⲇ.bezierCurveTo(209.6999969482422 * ᐃ, ᐃ * 194.61249923706055, ᐃ * 209.6999969482422, ᐃ * 194.61249923706055, ᐃ * 206.1999969482422, ᐃ * 195.61249923706055);
		Ⲇ.bezierCurveTo(ᐃ * 210.1999969482422, 198.61249923706055 * ᐃ, ᐃ * 210.1999969482422, 198.61249923706055 * ᐃ, ᐃ * 214.1999969482422, 201.61249923706055 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 212.1999969482422, 203.61249923706055 * ᐃ, 212.1999969482422 * ᐃ, ᐃ * 203.61249923706055, 210.1999969482422 * ᐃ, 205.61249923706055 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 207.1999969482422, ᐃ * 204.11249923706055, 207.1999969482422 * ᐃ, ᐃ * 204.11249923706055, ᐃ * 204.1999969482422, 202.61249923706055 * ᐃ);
		Ⲇ.bezierCurveTo(205.6999969482422 * ᐃ, ᐃ * 207.61249923706055, 205.6999969482422 * ᐃ, ᐃ * 207.61249923706055, ᐃ * 207.1999969482422, 212.61249923706055 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 204.6999969482422, ᐃ * 213.61249923706055, ᐃ * 204.6999969482422, 213.61249923706055 * ᐃ, ᐃ * 202.1999969482422, ᐃ * 214.61249923706055);
		Ⲇ.bezierCurveTo(ᐃ * 200.1999969482422, 210.61249923706055 * ᐃ, 200.1999969482422 * ᐃ, ᐃ * 210.61249923706055, 198.1999969482422 * ᐃ, ᐃ * 206.61249923706055);
		Ⲇ.bezierCurveTo(196.6999969482422 * ᐃ, 211.61249923706055 * ᐃ, ᐃ * 196.6999969482422, ᐃ * 211.61249923706055, 195.1999969482422 * ᐃ, ᐃ * 216.61249923706055);
		Ⲇ.bezierCurveTo(ᐃ * 192.6999969482422, 216.11249923706055 * ᐃ, ᐃ * 192.6999969482422, 216.11249923706055 * ᐃ, ᐃ * 190.1999969482422, 215.61249923706055 * ᐃ);
		Ⲇ.bezierCurveTo(190.1999969482422 * ᐃ, ᐃ * 211.61249923706055, ᐃ * 190.1999969482422, ᐃ * 211.61249923706055, 190.1999969482422 * ᐃ, ᐃ * 207.61249923706055);
		Ⲇ.bezierCurveTo(ᐃ * 186.1999969482422, 210.61249923706055 * ᐃ, 186.1999969482422 * ᐃ, 210.61249923706055 * ᐃ, ᐃ * 182.1999969482422, ᐃ * 213.61249923706055);
		Ⲇ.bezierCurveTo(181.1999969482422 * ᐃ, 211.11249923706055 * ᐃ, ᐃ * 181.1999969482422, 211.11249923706055 * ᐃ, ᐃ * 180.1999969482422, ᐃ * 208.61249923706055);
		Ⲇ.bezierCurveTo(ᐃ * 183.1999969482422, ᐃ * 205.61249923706055, 183.1999969482422 * ᐃ, ᐃ * 205.61249923706055, 186.1999969482422 * ᐃ, ᐃ * 202.61249923706055);
		Ⲇ.bezierCurveTo(180.6999969482422 * ᐃ, 203.11249923706055 * ᐃ, ᐃ * 180.6999969482422, 203.11249923706055 * ᐃ, 175.1999969482422 * ᐃ, ᐃ * 203.61249923706055);
		Ⲇ.bezierCurveTo(174.6999969482422 * ᐃ, ᐃ * 200.11249923706055, 174.6999969482422 * ᐃ, 200.11249923706055 * ᐃ, ᐃ * 174.1999969482422, ᐃ * 196.61249923706055);
		Ⲇ.bezierCurveTo(ᐃ * 177.1999969482422, 195.61249923706055 * ᐃ, 177.1999969482422 * ᐃ, ᐃ * 195.61249923706055, 180.1999969482422 * ᐃ, 194.61249923706055 * ᐃ);
		Ⲇ.bezierCurveTo(177.1999969482422 * ᐃ, ᐃ * 191.61249923706055, 177.1999969482422 * ᐃ, 191.61249923706055 * ᐃ, ᐃ * 174.1999969482422, 188.61249923706055 * ᐃ);
		Ⲇ.bezierCurveTo(175.6999969482422 * ᐃ, ᐃ * 187.11249923706055, ᐃ * 175.6999969482422, 187.11249923706055 * ᐃ, 177.1999969482422 * ᐃ, ᐃ * 185.61249923706055);
		Ⲇ.bezierCurveTo(ᐃ * 180.6999969482422, 187.11249923706055 * ᐃ, ᐃ * 180.6999969482422, 187.11249923706055 * ᐃ, ᐃ * 184.1999969482422, ᐃ * 188.61249923706055);
		Ⲇ.bezierCurveTo(ᐃ * 182.6999969482422, 183.61249923706055 * ᐃ, 182.6999969482422 * ᐃ, 183.61249923706055 * ᐃ, 181.1999969482422 * ᐃ, 178.61249923706055 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 183.1999969482422, ᐃ * 177.11249923706055, ᐃ * 183.1999969482422, ᐃ * 177.11249923706055, 185.1999969482422 * ᐃ, ᐃ * 175.61249923706055);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[10]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(185.1999969482422 * ᐃ, 173.8125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 187.1999969482422, ᐃ * 179.3125, ᐃ * 187.1999969482422, ᐃ * 179.3125, 189.1999969482422 * ᐃ, ᐃ * 184.8125);
		Ⲇ.bezierCurveTo(ᐃ * 184.1999969482422, 181.8125 * ᐃ, ᐃ * 184.1999969482422, ᐃ * 181.8125, 179.1999969482422 * ᐃ, 178.8125 * ᐃ);
		Ⲇ.bezierCurveTo(181.1999969482422 * ᐃ, ᐃ * 175.8125, ᐃ * 182.1999969482422, 174.8125 * ᐃ, ᐃ * 185.1999969482422, ᐃ * 173.8125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆΔⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(192.1999969482422 * ᐃ, ᐃ * 173.61249542236328);
		Ⲇ.bezierCurveTo(194.1999969482422 * ᐃ, 172.61249542236328 * ᐃ, ᐃ * 196.1999969482422, ᐃ * 171.61249542236328, 199.1999969482422 * ᐃ, 173.61249542236328 * ᐃ);
		Ⲇ.bezierCurveTo(197.6999969482422 * ᐃ, ᐃ * 179.61249542236328, 197.6999969482422 * ᐃ, ᐃ * 179.61249542236328, ᐃ * 196.1999969482422, ᐃ * 185.61249542236328);
		Ⲇ.bezierCurveTo(194.1999969482422 * ᐃ, 179.61249542236328 * ᐃ, 194.1999969482422 * ᐃ, 179.61249542236328 * ᐃ, ᐃ * 192.1999969482422, ᐃ * 173.61249542236328);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔΔᐃΔᐃΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(205.1999969482422 * ᐃ, ᐃ * 176.2125015258789);
		Ⲇ.bezierCurveTo(210.1999969482422 * ᐃ, ᐃ * 178.2125015258789, ᐃ * 211.1999969482422, ᐃ * 179.2125015258789, ᐃ * 211.1999969482422, 181.2125015258789 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 206.6999969482422, ᐃ * 184.7125015258789, ᐃ * 206.6999969482422, ᐃ * 184.7125015258789, 202.1999969482422 * ᐃ, ᐃ * 188.2125015258789);
		Ⲇ.bezierCurveTo(203.6999969482422 * ᐃ, ᐃ * 182.2125015258789, 203.6999969482422 * ᐃ, ᐃ * 182.2125015258789, 205.1999969482422 * ᐃ, ᐃ * 176.2125015258789);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃᐃⲆΔᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 214.1999969482422, 187.21249985694885 * ᐃ);
		Ⲇ.bezierCurveTo(216.1999969482422 * ᐃ, ᐃ * 191.21249985694885, 216.1999969482422 * ᐃ, ᐃ * 192.21249985694885, ᐃ * 215.1999969482422, 195.21249985694885 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 206.1999969482422, ᐃ * 194.21249985694885, 205.1999969482422 * ᐃ, 194.21249985694885 * ᐃ, 205.1999969482422 * ᐃ, 194.21249985694885 * ᐃ);
		Ⲇ.bezierCurveTo(209.6999969482422 * ᐃ, ᐃ * 190.71249985694885, ᐃ * 209.6999969482422, 190.71249985694885 * ᐃ, ᐃ * 214.1999969482422, ᐃ * 187.21249985694885);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[11]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(204.1999969482422 * ᐃ, ᐃ * 201.8125);
		Ⲇ.bezierCurveTo(209.1999969482422 * ᐃ, 201.3125 * ᐃ, ᐃ * 209.1999969482422, 201.3125 * ᐃ, ᐃ * 214.1999969482422, 200.8125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 215.1999969482422, ᐃ * 204.8125, ᐃ * 214.1999969482422, ᐃ * 205.8125, ᐃ * 213.1999969482422, 208.8125 * ᐃ);
		Ⲇ.bezierCurveTo(208.6999969482422 * ᐃ, ᐃ * 205.3125, 208.6999969482422 * ᐃ, 205.3125 * ᐃ, 204.1999969482422 * ᐃ, ᐃ * 201.8125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔⲆⵠⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(199.1999969482422 * ᐃ, ᐃ * 205.61249923706055);
		Ⲇ.bezierCurveTo(ᐃ * 207.1999969482422, ᐃ * 212.61249923706055, ᐃ * 203.6999969482422, 209.11249923706055 * ᐃ, ᐃ * 208.1999969482422, 212.61249923706055 * ᐃ);
		Ⲇ.bezierCurveTo(206.1999969482422 * ᐃ, ᐃ * 215.61249923706055, ᐃ * 204.1999969482422, ᐃ * 217.61249923706055, 203.1999969482422 * ᐃ, 216.61249923706055 * ᐃ);
		Ⲇ.bezierCurveTo(201.1999969482422 * ᐃ, ᐃ * 211.11249923706055, 201.1999969482422 * ᐃ, 211.11249923706055 * ᐃ, ᐃ * 199.1999969482422, ᐃ * 205.61249923706055);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[11]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(191.1999969482422 * ᐃ, 207.01250076293945 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 194.1999969482422, 213.01250076293945 * ᐃ, 194.1999969482422 * ᐃ, 216.01250076293945 * ᐃ, 196.1999969482422 * ᐃ, ᐃ * 218.01250076293945);
		Ⲇ.bezierCurveTo(193.1999969482422 * ᐃ, ᐃ * 220.01250076293945, 190.1999969482422 * ᐃ, 220.01250076293945 * ᐃ, ᐃ * 188.1999969482422, ᐃ * 218.01250076293945);
		Ⲇ.bezierCurveTo(ᐃ * 189.6999969482422, 213.01250076293945 * ᐃ, ᐃ * 189.6999969482422, ᐃ * 213.01250076293945, ᐃ * 191.1999969482422, ᐃ * 208.01250076293945);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[11]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 186.1999969482422, ᐃ * 203.21249961853027);
		Ⲇ.bezierCurveTo(184.1999969482422 * ᐃ, ᐃ * 209.21249961853027, ᐃ * 184.1999969482422, ᐃ * 209.21249961853027, ᐃ * 182.1999969482422, 215.21249961853027 * ᐃ);
		Ⲇ.bezierCurveTo(177.1999969482422 * ᐃ, ᐃ * 212.21249961853027, ᐃ * 176.1999969482422, ᐃ * 211.21249961853027, ᐃ * 177.1999969482422, 210.21249961853027 * ᐃ);
		Ⲇ.bezierCurveTo(181.6999969482422 * ᐃ, ᐃ * 206.71249961853027, ᐃ * 181.6999969482422, 206.71249961853027 * ᐃ, 186.1999969482422 * ᐃ, 203.21249961853027 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃᐃⲆΔᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 183.1999969482422, 196.8125 * ᐃ);
		Ⲇ.bezierCurveTo(177.1999969482422 * ᐃ, ᐃ * 196.3125, 177.1999969482422 * ᐃ, 196.3125 * ᐃ, 171.1999969482422 * ᐃ, ᐃ * 195.8125);
		Ⲇ.bezierCurveTo(171.1999969482422 * ᐃ, ᐃ * 199.8125, ᐃ * 171.1999969482422, ᐃ * 202.8125, ᐃ * 174.1999969482422, ᐃ * 204.8125);
		Ⲇ.bezierCurveTo(178.6999969482422 * ᐃ, 200.8125 * ᐃ, 178.6999969482422 * ᐃ, 200.8125 * ᐃ, ᐃ * 183.1999969482422, ᐃ * 196.8125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[11]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 185.1999969482422, ᐃ * 190.21249771118164);
		Ⲇ.bezierCurveTo(ᐃ * 179.6999969482422, ᐃ * 186.71249771118164, 179.6999969482422 * ᐃ, 186.71249771118164 * ᐃ, ᐃ * 174.1999969482422, ᐃ * 183.21249771118164);
		Ⲇ.bezierCurveTo(ᐃ * 172.1999969482422, ᐃ * 186.21249771118164, ᐃ * 172.1999969482422, ᐃ * 187.21249771118164, ᐃ * 172.1999969482422, ᐃ * 190.21249771118164);
		Ⲇ.bezierCurveTo(178.1999969482422 * ᐃ, ᐃ * 190.21249771118164, ᐃ * 178.1999969482422, 190.21249771118164 * ᐃ, ᐃ * 184.1999969482422, ᐃ * 190.21249771118164);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[11]);
		ᐃΔΔ(Ⲇ, ᐃ * 126.19999694824219, 169.8125 * ᐃ, ᐃ * 8.94427190999916);
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆᐃⵠⲆⵠⲆ]);
		ᐃΔΔ(Ⲇ, 123.19999694824219 * ᐃ, ᐃ * 164.8125, ᐃ * 2.8284271247461903);
		ΔΔ(Ⲇ, Δⵠ[13]);
		ᐃΔΔ(Ⲇ, ᐃ * 253.1999969482422, 169.8125 * ᐃ, 8.94427190999916 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠΔᐃ]);
		ᐃΔΔ(Ⲇ, 255.1999969482422 * ᐃ, ᐃ * 164.8125, ᐃ * 2.23606797749979);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⲆⵠⲆΔ]);
		return ΔⲆ
	}

	function ⲆⵠΔΔᐃΔⵠⲆⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 400;
		ΔⲆ.height = ᐃ * 400;
		Ⲇ.translate(0, ᐃ * 15);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(102 * ᐃ, ᐃ * 154);
		Ⲇ.bezierCurveTo(ᐃ * 108, ᐃ * 216.5, 108 * ᐃ, ᐃ * 216.5, 114 * ᐃ, 279 * ᐃ);
		Ⲇ.bezierCurveTo(124 * ᐃ, ᐃ * 300, ᐃ * 237, ᐃ * 299, ᐃ * 251, ᐃ * 279);
		Ⲇ.bezierCurveTo(257 * ᐃ, 217 * ᐃ, 257 * ᐃ, ᐃ * 217, ᐃ * 263, 155 * ᐃ);
		Ⲇ.bezierCurveTo(248 * ᐃ, ᐃ * 194, ᐃ * 91, 180 * ᐃ, 103 * ᐃ, 156 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 102, 154 * ᐃ);
		Ⲇ.bezierCurveTo(106 * ᐃ, 53 * ᐃ, ᐃ * ⲆΔⵠⲆⵠΔⵠ, ᐃ * 53, 263 * ᐃ, 154 * ᐃ);
		Ⲇ.bezierCurveTo(248 * ᐃ, 38 * ᐃ, ᐃ * 99, ᐃ * 69, ᐃ * 103, 154 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔⲆⲆ], ᐃ * ⵠΔⲆⵠⵠ);
		Ⲇ.translate(0, -ᐃᐃΔᐃ * ᐃ);
		Ⲇ.globalAlpha = ⵠΔᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(103 * ᐃ, ᐃ * 154);
		Ⲇ.bezierCurveTo(98 * ᐃ, 119 * ᐃ, 264 * ᐃ, ᐃ * 119, 264 * ᐃ, 154 * ᐃ);
		Ⲇ.bezierCurveTo(271 * ᐃ, ᐃ * 189, ᐃ * 94, 188 * ᐃ, 103 * ᐃ, ᐃ * 154);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠᐃ], Δⵠ[ΔⲆᐃΔ], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 102, 154 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 108, 216.5 * ᐃ, ᐃ * 108, ᐃ * 216.5, ᐃ * 114, 279 * ᐃ);
		Ⲇ.bezierCurveTo(124 * ᐃ, ᐃ * 300, 237 * ᐃ, 299 * ᐃ, 251 * ᐃ, ᐃ * 279);
		Ⲇ.bezierCurveTo(ᐃ * 257, 217 * ᐃ, 257 * ᐃ, ᐃ * 217, 263 * ᐃ, ᐃ * 155);
		Ⲇ.bezierCurveTo(ᐃ * 248, 194 * ᐃ, ᐃ * 91, ᐃ * 180, ᐃ * 103, 156 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Ⲇⵠᐃ], Δⵠ[ᐃᐃᐃⵠ], ᐃ * ⲆⵠⵠΔΔΔᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(182 * ᐃ, 185 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 182.5, ᐃ * 237.5, 182.5 * ᐃ, ᐃ * 237.5, ᐃ * 183, 290 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], ⲆΔᐃⲆⵠⲆΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(222 * ᐃ, 287 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 226, 233.5 * ᐃ, ᐃ * 226, ᐃ * 233.5, 230 * ᐃ, 180 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 145, 290 * ᐃ);
		Ⲇ.bezierCurveTo(140.5 * ᐃ, ᐃ * 237, ᐃ * 140.5, ᐃ * 237, ᐃ * 136, ᐃ * 184);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔⵠΔ], Δⵠ[ⵠⵠⵠᐃ], ᐃ * 11);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 105, ᐃ * 184);
		Ⲇ.bezierCurveTo(ᐃ * 148, ᐃ * 205, ᐃ * 231, 202 * ᐃ, ᐃ * 260, ᐃ * 182);
		Ⲇ.bezierCurveTo(259 * ᐃ, 195.5 * ᐃ, 259 * ᐃ, 195.5 * ᐃ, 258 * ᐃ, ᐃ * 209);
		Ⲇ.bezierCurveTo(217 * ᐃ, 218 * ᐃ, ᐃ * 163, 225 * ᐃ, ᐃ * 108, 207 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃᐃΔⵠ], Δⵠ[ᐃⲆᐃⵠ], ᐃ * ⵠΔⲆⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(251 * ᐃ, ᐃ * 276);
		Ⲇ.bezierCurveTo(251.5 * ᐃ, 267.5 * ᐃ, 251.5 * ᐃ, ᐃ * 267.5, 252 * ᐃ, ᐃ * 259);
		Ⲇ.bezierCurveTo(212 * ᐃ, 272 * ᐃ, ᐃ * 156, 275 * ᐃ, 112 * ᐃ, 260 * ᐃ);
		Ⲇ.bezierCurveTo(112.5 * ᐃ, 269 * ᐃ, ᐃ * 112.5, ᐃ * 269, ᐃ * 113, 278 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 155, 306 * ᐃ, 253 * ᐃ, ᐃ * 286, 250 * ᐃ, 276 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃΔⵠ], Δⵠ[2], ⲆΔⲆΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 102, ᐃ * 154);
		Ⲇ.bezierCurveTo(106 * ᐃ, 53 * ᐃ, ⵠᐃᐃᐃᐃᐃΔ * ᐃ, ᐃ * 53, ᐃ * 263, ᐃ * 154);
		Ⲇ.bezierCurveTo(248 * ᐃ, 38 * ᐃ, ᐃ * 99, ᐃ * 69, ᐃ * 103, ᐃ * 154);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], ᐃ * ⲆⲆᐃⵠⵠⲆⲆⲆⲆ);
		return ΔⲆ
	}

	function ⵠⵠᐃⵠΔᐃⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 47;
		ΔⲆ.height = ᐃ * 60;
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 47 * ᐃ;
		ΔⲆ.height = 60 * ᐃ;
		ᐃΔΔ(Ⲇ, ᐃ * 23.5, 20.734375 * ᐃ, 15.132745950421556 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[2], ⵠᐃΔΔ * ᐃ);
		ᐃΔΔ(Ⲇ, 23.5 * ᐃ, ᐃ * 20.734375, 18.601075237738275 * ᐃ);
		ΔΔ(Ⲇ, ⲆⲆⲆΔⲆ, Δⵠ[1], 4 * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 23.5, ᐃ * 20.734375, ᐃ * 11.40175425099138);
		ΔΔ(Ⲇ, undefined, Δⵠ[1], ᐃⵠⵠⵠᐃ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 23, ᐃ * 38.734375);
		Ⲇ.rotate(Δⵠⵠⵠ);
		ᐃΔⵠ(Ⲇ, ᐃ * -21.5, ᐃ * -19, ᐃ * 43, ᐃ * 38, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆΔⲆ], Δⵠ[1], ᐃ * 4);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 23.5, ᐃ * 43.734375);
		Ⲇ.rotate(.5235987755982988);
		ᐃᐃⲆΔ(Ⲇ, ᐃΔⲆΔ, 8.06225774829855 * ᐃ, 0 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃᐃΔ]);
		ᐃΔΔ(Ⲇ, 23.5 * ᐃ, ᐃ * 35.734375, 7.0710678118654755 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[3]);
		return ΔⲆ
	}

	function ⵠᐃᐃⲆⲆΔΔ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 161;
		ΔⲆ.height = 184 * ᐃ;
		Ⲇ.translate(ⵠⲆΔ, ᐃ * 10);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 105.5, ᐃ * 34.609375);
		Ⲇ.bezierCurveTo(48.5 * ᐃ, ᐃ * 7.609375, 11.5 * ᐃ, ᐃ * 58.609375, ᐃ * 20.5, ᐃ * 97.609375);
		Ⲇ.bezierCurveTo(ᐃ * 44.5, ᐃ * 161.609375, 70.5 * ᐃ, 171.609375 * ᐃ, 88.5 * ᐃ, 156.609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 120.5, 129.609375 * ᐃ, ᐃ * 123.5, ᐃ * 105.609375, 128.5 * ᐃ, ᐃ * 83.609375);
		Ⲇ.bezierCurveTo(ᐃ * 137.5, ᐃ * 79.609375, ᐃ * 141.5, 79.609375 * ᐃ, ᐃ * 146.5, 81.609375 * ᐃ);
		Ⲇ.bezierCurveTo(153.5 * ᐃ, ᐃ * 70.609375, 151.5 * ᐃ, 65.609375 * ᐃ, ᐃ * 148.5, 61.609375 * ᐃ);
		Ⲇ.bezierCurveTo(134.5 * ᐃ, 60.609375 * ᐃ, ᐃ * 131.5, ᐃ * 63.609375, 127.5 * ᐃ, 66.609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 127.5, ᐃ * 55.609375, ᐃ * 125.5, 54.609375 * ᐃ, ᐃ * 120.5, ᐃ * 51.609375);
		Ⲇ.bezierCurveTo(128.5 * ᐃ, 42.609375 * ᐃ, ᐃ * 136.5, 38.609375 * ᐃ, 147.5 * ᐃ, ᐃ * 39.609375);
		Ⲇ.bezierCurveTo(152.5 * ᐃ, ᐃ * 23.609375, 147.5 * ᐃ, 21.609375 * ᐃ, ᐃ * 140.5, ᐃ * 17.609375);
		Ⲇ.bezierCurveTo(120.5 * ᐃ, ᐃ * 17.609375, 114.5 * ᐃ, ᐃ * 27.609375, 106.5 * ᐃ, ᐃ * 35.609375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 45.5, ᐃ * 144.609375);
		Ⲇ.bezierCurveTo(35.5 * ᐃ, ᐃ * 155.609375, ᐃ * 37, 152.109375 * ᐃ, 28.5 * ᐃ, 159.609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 16.5, ᐃ * 154.609375, ᐃ * 16.5, 151.609375 * ᐃ, 17.5 * ᐃ, 141.609375 * ᐃ);
		Ⲇ.bezierCurveTo(25.5 * ᐃ, 134.109375 * ᐃ, ᐃ * 25.5, 134.109375 * ᐃ, ᐃ * 33.5, 126.609375 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠⵠ]);
		Ⲇ.translate(0, ᐃ * -ᐃᐃᐃΔΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(45.5 * ᐃ, 144.609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 35.5, 155.609375 * ᐃ, ᐃ * 37, ᐃ * 152.109375, 28.5 * ᐃ, ᐃ * 159.609375);
		Ⲇ.bezierCurveTo(16.5 * ᐃ, 154.609375 * ᐃ, 16.5 * ᐃ, 151.609375 * ᐃ, 17.5 * ᐃ, 141.609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 25.5, ᐃ * 134.109375, 25.5 * ᐃ, 134.109375 * ᐃ, 33.5 * ᐃ, 126.609375 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⲆ], Δⵠ[ᐃⲆᐃᐃ], ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 105.5, ᐃ * 34.609375);
		Ⲇ.bezierCurveTo(ᐃ * 48.5, ᐃ * 7.609375, ᐃ * 11.5, 58.609375 * ᐃ, ᐃ * 20.5, ᐃ * 97.609375);
		Ⲇ.bezierCurveTo(44.5 * ᐃ, 161.609375 * ᐃ, ᐃ * 70.5, ᐃ * 171.609375, ᐃ * 88.5, ᐃ * 156.609375);
		Ⲇ.bezierCurveTo(ᐃ * 120.5, ᐃ * 129.609375, 123.5 * ᐃ, 105.609375 * ᐃ, 128.5 * ᐃ, ᐃ * 83.609375);
		Ⲇ.bezierCurveTo(137.5 * ᐃ, ᐃ * 79.609375, 141.5 * ᐃ, ᐃ * 79.609375, 146.5 * ᐃ, 81.609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 153.5, 70.609375 * ᐃ, 151.5 * ᐃ, 65.609375 * ᐃ, 148.5 * ᐃ, 61.609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 134.5, 60.609375 * ᐃ, ᐃ * 131.5, ᐃ * 63.609375, 127.5 * ᐃ, ᐃ * 66.609375);
		Ⲇ.bezierCurveTo(ᐃ * 127.5, 55.609375 * ᐃ, 125.5 * ᐃ, 54.609375 * ᐃ, ᐃ * 120.5, ᐃ * 51.609375);
		Ⲇ.bezierCurveTo(128.5 * ᐃ, ᐃ * 42.609375, 136.5 * ᐃ, ᐃ * 38.609375, 147.5 * ᐃ, 39.609375 * ᐃ);
		Ⲇ.bezierCurveTo(152.5 * ᐃ, 23.609375 * ᐃ, 147.5 * ᐃ, ᐃ * 21.609375, 140.5 * ᐃ, ᐃ * 17.609375);
		Ⲇ.bezierCurveTo(ᐃ * 120.5, ᐃ * 17.609375, ᐃ * 114.5, 27.609375 * ᐃ, 106.5 * ᐃ, 35.609375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃⲆ], Δⵠ[2], ᐃ * ΔⵠⵠΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(104.5 * ᐃ, ᐃ * 35.609375);
		Ⲇ.bezierCurveTo(71.5 * ᐃ, ᐃ * 36.609375, ᐃ * 57.5, 52.609375 * ᐃ, ᐃ * 58.5, 81.609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 59.5, ᐃ * 103.609375, 66.5 * ᐃ, 107.609375 * ᐃ, ᐃ * 66.5, ᐃ * 116.609375);
		Ⲇ.bezierCurveTo(67.5 * ᐃ, 128.609375 * ᐃ, 65.5 * ᐃ, 131.609375 * ᐃ, 63.5 * ᐃ, 137.609375 * ᐃ);
		ΔΔ(Ⲇ, ΔΔᐃⵠⵠ, Δⵠ[2], ᐃ * ⵠᐃⵠΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 59.5, ᐃ * 72.609375);
		Ⲇ.bezierCurveTo(38.5 * ᐃ, ᐃ * 80.609375, 43.5 * ᐃ, ᐃ * 81.609375, 37.5 * ᐃ, ᐃ * 89.609375);
		ΔΔ(Ⲇ, undefined, Δⵠ[2], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 60.5, 85.609375 * ᐃ);
		Ⲇ.bezierCurveTo(75.5 * ᐃ, 91.609375 * ᐃ, 76.5 * ᐃ, 96.609375 * ᐃ, ᐃ * 81.5, ᐃ * 104.609375);
		ΔΔ(Ⲇ, ᐃⵠᐃᐃⲆ, Δⵠ[2], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(68.5 * ᐃ, 122.609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 79.5, ᐃ * 130.609375, 74.5 * ᐃ, 128.609375 * ᐃ, 80.5 * ᐃ, 134.609375 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], Ⲇⵠⵠⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 142.5, ᐃ * 18.609375);
		Ⲇ.bezierCurveTo(ᐃ * 151.5, ᐃ * 28.609375, 151.5 * ᐃ, 32.609375 * ᐃ, ᐃ * 146.5, ᐃ * 40.609375);
		Ⲇ.bezierCurveTo(137.5 * ᐃ, 26.609375 * ᐃ, ᐃ * 138.5, 24.609375 * ᐃ, 142.5 * ᐃ, 19.609375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 146.5, 61.50892639160156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 157.5, 69.50892639160156 * ᐃ, ᐃ * 150.5, ᐃ * 79.50892639160156, ᐃ * 145.5, 81.50892639160156 * ᐃ);
		Ⲇ.bezierCurveTo(140.5 * ᐃ, ᐃ * 65.50892639160156, 144.5 * ᐃ, 64.50892639160156 * ᐃ, ᐃ * 146.5, ᐃ * 62.50892639160156);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		return ΔⲆ
	}

	function ΔᐃᐃⲆⵠⲆᐃⲆⵠ(ᐃ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		if (ⵠⲆᐃ == Ⲇᐃ) {
			ΔⲆ.width = ᐃ * 543;
			ΔⲆ.height = ᐃ * 393;
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(196.23297119140625 * ᐃ, 77.8948974609375 * ᐃ);
			Ⲇ.bezierCurveTo(276.23297119140625 * ᐃ, 69.8948974609375 * ᐃ, 360.23297119140625 * ᐃ, 87.8948974609375 * ᐃ, 431.23297119140625 * ᐃ, 121.8948974609375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 474.23297119140625, ᐃ * 146.8948974609375, 463.23297119140625 * ᐃ, 184.8948974609375 * ᐃ, 437.23297119140625 * ᐃ, ᐃ * 235.8948974609375);
			Ⲇ.bezierCurveTo(413.23297119140625 * ᐃ, 277.8948974609375 * ᐃ, ᐃ * 383.23297119140625, 289.8948974609375 * ᐃ, 303.23297119140625 * ᐃ, ᐃ * 289.8948974609375);
			Ⲇ.bezierCurveTo(178.23297119140625 * ᐃ, 292.8948974609375 * ᐃ, ᐃ * 127.23297119140625, 301.8948974609375 * ᐃ, ᐃ * 92.23297119140625, ᐃ * 268.8948974609375);
			Ⲇ.bezierCurveTo(ᐃ * 55.23297119140625, 234.8948974609375 * ᐃ, 59.23297119140625 * ᐃ, ᐃ * 147.8948974609375, 100.23297119140625 * ᐃ, ᐃ * 112.8948974609375);
			Ⲇ.bezierCurveTo(133.23297119140625 * ᐃ, 83.8948974609375 * ᐃ, ᐃ * 167.23297119140625, ᐃ * 82.8948974609375, 196.23297119140625 * ᐃ, 77.8948974609375 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0])
		} else if (ΔⵠΔ == Ⲇᐃ) {
			ΔⲆ.width = 543 * ᐃ;
			ΔⲆ.height = 470 * ᐃ;
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(285.23297119140625 * ᐃ, ᐃ * 51.803985595703125);
			Ⲇ.bezierCurveTo(ᐃ * 408.23297119140625, 57.803985595703125 * ᐃ, ᐃ * 463.23297119140625, 107.80398559570312 * ᐃ, ᐃ * 480.23297119140625, 183.80398559570312 * ᐃ);
			Ⲇ.bezierCurveTo(500.23297119140625 * ᐃ, ᐃ * 282.8039855957031, 473.23297119140625 * ᐃ, ᐃ * 351.8039855957031, ᐃ * 373.23297119140625, ᐃ * 390.8039855957031);
			Ⲇ.bezierCurveTo(286.23297119140625 * ᐃ, ᐃ * 420.8039855957031, 173.23297119140625 * ᐃ, 396.8039855957031 * ᐃ, ᐃ * 86.23297119140625, 331.8039855957031 * ᐃ);
			Ⲇ.bezierCurveTo(13.23297119140625 * ᐃ, ᐃ * 267.8039855957031, 19.23297119140625 * ᐃ, 79.80398559570312 * ᐃ, ᐃ * 143.23297119140625, 50.803985595703125 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 175.23297119140625, 41.803985595703125 * ᐃ, ᐃ * 263.23297119140625, 51.803985595703125 * ᐃ, ᐃ * 285.23297119140625, ᐃ * 51.803985595703125);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ])
		} else {
			ΔⲆ.width = ᐃ * 543;
			ΔⲆ.height = ᐃ * 470;
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 492.23297119140625, 170.0767059326172 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 493.23297119140625, ᐃ * 300.16761779785156, 411.23297119140625 * ᐃ, 382.16761779785156 * ᐃ, ᐃ * 321.23297119140625, ᐃ * 419.16761779785156);
			Ⲇ.bezierCurveTo(251.23297119140625 * ᐃ, ᐃ * 444.16761779785156, 125.23297119140625 * ᐃ, 422.16761779785156 * ᐃ, 63.23297119140625 * ᐃ, ᐃ * 347.16761779785156);
			Ⲇ.bezierCurveTo(ᐃ * 22.23297119140625, 282.16761779785156 * ᐃ, 53.23297119140625 * ᐃ, 152.16761779785156 * ᐃ, 179.23297119140625 * ᐃ, ᐃ * 79.16761779785156);
			Ⲇ.bezierCurveTo(ᐃ * 237.23297119140625, 46.16761779785156 * ᐃ, ᐃ * 326.23297119140625, 27.167617797851562 * ᐃ, 409.23297119140625 * ᐃ, ᐃ * 50.16761779785156);
			Ⲇ.bezierCurveTo(ᐃ * 470.23297119140625, ᐃ * 66.16761779785156, 493.23297119140625 * ᐃ, 104.16761779785156 * ᐃ, ᐃ * 492.23297119140625, ᐃ * 170.0767059326172);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ])
		}
		return ΔⲆ
	}

	function ⲆᐃΔⵠΔᐃⲆⲆᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 60 * ᐃ;
		ΔⲆ.height = 60 * ᐃ;
		Ⲇ.translate(-25 * ᐃ, -25 * ᐃ);
		Ⲇ.translate(Ⲇᐃⵠ, ᐃΔΔⲆⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 24, 50 * ᐃ);
		Ⲇ.bezierCurveTo(32.5 * ᐃ, ᐃ * 54.5, 32.5 * ᐃ, ᐃ * 54.5, ᐃ * 41, ᐃ * 59);
		Ⲇ.bezierCurveTo(ᐃ * 57, 47 * ᐃ, ᐃ * 57, ᐃ * 47, ᐃ * 73, ᐃ * 35);
		Ⲇ.bezierCurveTo(ᐃ * 57, ᐃ * 53, ᐃ * 57, 53 * ᐃ, 41 * ᐃ, ᐃ * 71);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.translate(0, -ᐃᐃΔᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 24, ᐃ * 50);
		Ⲇ.bezierCurveTo(32.5 * ᐃ, ᐃ * 54.5, ᐃ * 32.5, 54.5 * ᐃ, 41 * ᐃ, ᐃ * 59);
		Ⲇ.bezierCurveTo(ᐃ * 57, ᐃ * 47, 57 * ᐃ, 47 * ᐃ, 73 * ᐃ, ᐃ * 35);
		Ⲇ.bezierCurveTo(57 * ᐃ, ᐃ * 53, 57 * ᐃ, 53 * ᐃ, 41 * ᐃ, 71 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Ⲇⵠᐃ]);
		return ΔⲆ
	}

	function ⲆΔΔΔⵠΔᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 168 * ᐃ;
		ΔⲆ.height = 100 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔⲆᐃᐃ;
		Ⲇ.translate(ᐃ * 10, 5 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 24.5, 44.30000305175781 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -19.5, ᐃ * -8.5, ᐃ * 39, 17 * ᐃ, ᐃ * ᐃᐃᐃΔΔ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(115 * ᐃ, ᐃ * 37.80000305175781);
		Ⲇ.bezierCurveTo(ᐃ * 142, ᐃ * 37.80000305175781, 140 * ᐃ, ᐃ * 37.80000305175781, ᐃ * 141, ᐃ * 37.80000305175781);
		Ⲇ.bezierCurveTo(ᐃ * 147, ᐃ * 28.800003051757812, 149 * ᐃ, ᐃ * 26.800003051757812, ᐃ * 153, 32.80000305175781 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 160, ᐃ * 42.80000305175781, ᐃ * 157, ᐃ * 50.80000305175781, ᐃ * 153, ᐃ * 58.80000305175781);
		Ⲇ.bezierCurveTo(148 * ᐃ, ᐃ * 62.80000305175781, 147 * ᐃ, ᐃ * 59.80000305175781, ᐃ * 143, ᐃ * 52.80000305175781);
		Ⲇ.bezierCurveTo(ᐃ * 129, 52.80000305175781 * ᐃ, ᐃ * 129, ᐃ * 52.80000305175781, 115 * ᐃ, 52.80000305175781 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		ᐃΔΔ(Ⲇ, ᐃ * 78, ᐃ * 44.80000305175781, ᐃ * 39.44616584663204);
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = ⵠᐃⵠΔ;
		Ⲇ.translate(ᐃ * -ⲆⲆⵠⲆⵠ, -ΔⵠΔᐃ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(24.5 * ᐃ, 44.30000305175781 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -19.5, -8.5 * ᐃ, 39 * ᐃ, 17 * ᐃ, ᐃ * ⵠⲆⵠᐃⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, undefined, Δⵠ[Δⵠⵠᐃ], ΔⵠΔⵠᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(115 * ᐃ, 37.80000305175781 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 142, 37.80000305175781 * ᐃ, ᐃ * 140, 37.80000305175781 * ᐃ, 141 * ᐃ, 37.80000305175781 * ᐃ);
		Ⲇ.bezierCurveTo(147 * ᐃ, ᐃ * 28.800003051757812, 149 * ᐃ, 26.800003051757812 * ᐃ, ᐃ * 153, ᐃ * 32.80000305175781);
		Ⲇ.bezierCurveTo(160 * ᐃ, ᐃ * 42.80000305175781, ᐃ * 157, ᐃ * 50.80000305175781, ᐃ * 153, 58.80000305175781 * ᐃ);
		Ⲇ.bezierCurveTo(148 * ᐃ, ᐃ * 62.80000305175781, 147 * ᐃ, ᐃ * 59.80000305175781, ᐃ * 143, 52.80000305175781 * ᐃ);
		Ⲇ.bezierCurveTo(129 * ᐃ, 52.80000305175781 * ᐃ, 129 * ᐃ, 52.80000305175781 * ᐃ, 115 * ᐃ, 52.80000305175781 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ⲆΔⵠⵠⵠ], ΔΔΔΔ * ᐃ);
		ᐃΔΔ(Ⲇ, 78 * ᐃ, 44.80000305175781 * ᐃ, 42.44616584663204 * ᐃ);
		ΔΔ(Ⲇ, ⵠⲆⲆⲆⲆ, Δⵠ[ᐃⲆᐃΔ], 6 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 24.5, ᐃ * 44.30000305175781);
		ᐃΔⵠ(Ⲇ, -19.5 * ᐃ, ᐃ * -8.5, 39 * ᐃ, 17 * ᐃ, ᐃ * ⵠⵠΔⲆᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(115 * ᐃ, 37.80000305175781 * ᐃ);
		Ⲇ.bezierCurveTo(142 * ᐃ, ᐃ * 37.80000305175781, 140 * ᐃ, 37.80000305175781 * ᐃ, 141 * ᐃ, ᐃ * 37.80000305175781);
		Ⲇ.bezierCurveTo(ᐃ * 147, 28.800003051757812 * ᐃ, 149 * ᐃ, ᐃ * 26.800003051757812, 153 * ᐃ, ᐃ * 32.80000305175781);
		Ⲇ.bezierCurveTo(160 * ᐃ, ᐃ * 42.80000305175781, ᐃ * 157, ᐃ * 50.80000305175781, ᐃ * 153, ᐃ * 58.80000305175781);
		Ⲇ.bezierCurveTo(ᐃ * 148, 62.80000305175781 * ᐃ, ᐃ * 147, 59.80000305175781 * ᐃ, ᐃ * 143, 52.80000305175781 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 129, 52.80000305175781 * ᐃ, 129 * ᐃ, ᐃ * 52.80000305175781, ᐃ * 115, ᐃ * 52.80000305175781);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1]);
		ᐃΔΔ(Ⲇ, ᐃ * 78, ᐃ * 44.80000305175781, ᐃ * 39.44616584663204);
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ᐃⲆΔ], ᐃ * ⵠᐃᐃΔ);
		ᐃΔΔ(Ⲇ, 78 * ᐃ, ᐃ * 44.80000305175781, ᐃ * 29.68164415931166);
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[1], ᐃ * ⵠᐃΔⲆ);
		ᐃΔΔ(Ⲇ, ᐃ * 78, ᐃ * 44, ᐃ * ⲆᐃⲆⲆⲆⲆⲆ);
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆⲆΔΔ]);
		return ΔⲆ
	}

	function ⲆⲆⵠⵠⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 69;
		ΔⲆ.height = 120 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.save();
		Ⲇ.translate(30 * ᐃ, 84 * ᐃ);
		ᐃΔⵠ(Ⲇ, -ⲆⲆⵠⵠⲆ * ᐃ, ᐃ * -66.5, ⲆΔΔⲆⵠ * ᐃ, ᐃ * 100, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 30, ᐃ * 45);
		ᐃΔⵠ(Ⲇ, -9.5 * ᐃ, ᐃ * -6.5, ᐃ * ΔᐃⲆⲆΔ, 13 * ᐃ, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 30, ᐃ * ⲆΔΔⲆⲆⵠⲆ);
		ᐃΔⵠ(Ⲇ, ᐃ * -7.5, ᐃ * -5.5, ᐃ * ⲆⵠⵠΔΔΔᐃ, ΔⵠᐃⵠⲆⲆΔ * ᐃ, ᐃ * ΔⵠⵠᐃⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.save();
		Ⲇ.translate(30 * ᐃ, 31 * ᐃ);
		ᐃΔⵠ(Ⲇ, -26 * ᐃ, -14.5 * ᐃ, ᐃ * 52, 29 * ᐃ, ᐃ * ᐃΔΔⲆⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 36, 79.140625 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -6, -66.5 * ᐃ, ᐃ * ⲆᐃⲆΔⵠ, ᐃⲆⲆΔᐃ * ᐃ, ⲆΔⵠⵠΔ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃ], Δⵠ[ᐃⲆᐃᐃ], ᐃ * 3);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 35, 40.140625 * ᐃ);
		ᐃΔⵠ(Ⲇ, -9.5 * ᐃ, -6.5 * ᐃ, ᐃ * ΔᐃᐃΔΔ, ᐃ * 13, ⵠⲆⲆⵠΔ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃⲆᐃΔ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 35, ᐃ * 12.140625);
		ᐃΔⵠ(Ⲇ, -7.5 * ᐃ, ᐃ * -5.5, ᐃ * ᐃⲆⵠΔᐃ, ᐃ * ᐃᐃⲆⵠⲆⲆᐃ, ᐃ * ⵠⲆⲆⵠΔ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃΔ], Δⵠ[4], ᐃⵠΔⲆ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(34.5 * ᐃ, ᐃ * 26.140625);
		ᐃΔⵠ(Ⲇ, -26 * ᐃ, -14.5 * ᐃ, ᐃ * 52, ᐃ * 29, 5 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆᐃ], Δⵠ[ⵠᐃΔΔ], ᐃ * ᐃⲆᐃΔ);
		return ΔⲆ
	}

	function ΔΔⵠⲆⵠᐃΔⵠΔ() {
		return 15104497
	}
	const ΔΔⵠΔΔⲆⲆⲆᐃ = 9680252;
	const ⲆᐃⲆⲆⲆΔΔ = ΔΔⵠⲆⵠᐃΔⵠΔ + " let ⵠⲆᐃΔⲆᐃΔ = ΔΔⵠⲆⵠᐃΔⵠΔ () * 7118941; return ⵠⲆᐃΔⲆᐃΔ;";
	const ⵠⲆⲆΔΔ = new Function(ⲆᐃⲆⲆⲆΔΔ);
	try {
		ⵠⲆⲆΔΔ(ΔΔⵠΔΔⲆⲆⲆᐃ)
	} catch (e) {
		const ΔΔⵠΔΔⲆⲆⲆᐃ = Math.floor;
		let ⵠⲆⲆΔΔ = 0;
		const ⲆᐃⲆⲆⲆΔΔ = function(ⲆᐃⲆⲆⲆΔΔ) {
			for (let ⵠⲆᐃΔⲆᐃΔ = 0; ⵠⲆᐃΔⲆᐃΔ < 8093; ⵠⲆᐃΔⲆᐃΔ++) ⵠⲆⲆΔΔ += ⵠⲆᐃΔⲆᐃΔ;
			return ΔΔⵠΔΔⲆⲆⲆᐃ(ⲆᐃⲆⲆⲆΔΔ)
		};
		Math.floor = ⲆᐃⲆⲆⲆΔΔ
	}

	function ΔⵠΔⲆᐃ(ᐃ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		if (Ⲇᐃ == 0) {
			ΔⲆ.width = 566 * ᐃ;
			ΔⲆ.height = 429 * ᐃ;
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(312.625 * ᐃ, ᐃ * 39.046875);
			Ⲇ.bezierCurveTo(456.625 * ᐃ, ᐃ * 60.046875, ᐃ * 521.625, 134.046875 * ᐃ, ᐃ * 528.625, 199.046875 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 540.625, ᐃ * 298.046875, 491.625 * ᐃ, ᐃ * 364.046875, 405.625 * ᐃ, ᐃ * 394.046875);
			Ⲇ.bezierCurveTo(ᐃ * 270.625, ᐃ * 429.046875, 182.625 * ᐃ, 395.046875 * ᐃ, ᐃ * 100.625, 344.046875 * ᐃ);
			Ⲇ.bezierCurveTo(15.625 * ᐃ, ᐃ * 283.046875, 20.625 * ᐃ, 195.046875 * ᐃ, 33.625 * ᐃ, ᐃ * 158.046875);
			Ⲇ.bezierCurveTo(ᐃ * 56.625, ᐃ * 80.046875, 102.625 * ᐃ, ᐃ * 46.046875, ᐃ * 183.625, ᐃ * 33.046875);
			Ⲇ.bezierCurveTo(225.625 * ᐃ, ᐃ * 25.046875, 270.625 * ᐃ, 30.046875 * ᐃ, 312.625 * ᐃ, ᐃ * 39.046875);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0])
		} else if (Ⲇᐃ == 1) {
			var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
			var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
			ΔⲆ.width = ᐃ * 511;
			ΔⲆ.height = ᐃ * 408;
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 141.625, 49.296875 * ᐃ);
			Ⲇ.bezierCurveTo(225.625 * ᐃ, ᐃ * 10.296875, ᐃ * 320.625, 16.296875 * ᐃ, 390.625 * ᐃ, ᐃ * 39.296875);
			Ⲇ.bezierCurveTo(ᐃ * 476.625, 71.296875 * ᐃ, 483.625 * ᐃ, 142.296875 * ᐃ, 486.625 * ᐃ, ᐃ * 197.296875);
			Ⲇ.bezierCurveTo(491.625 * ᐃ, ᐃ * 289.296875, 462.625 * ᐃ, ᐃ * 317.296875, ᐃ * 417.625, 351.296875 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 367.625, ᐃ * 385.296875, 313.625 * ᐃ, ᐃ * 404.296875, ᐃ * 218.625, ᐃ * 395.296875);
			Ⲇ.bezierCurveTo(ᐃ * 108.625, ᐃ * 381.296875, 81.625 * ᐃ, 350.296875 * ᐃ, ᐃ * 52.625, ᐃ * 305.296875);
			Ⲇ.bezierCurveTo(16.625 * ᐃ, ᐃ * 244.296875, ᐃ * 23.625, 171.296875 * ᐃ, ᐃ * 37.625, ᐃ * 145.296875);
			Ⲇ.bezierCurveTo(65.625 * ᐃ, 84.296875 * ᐃ, ᐃ * 97.625, ᐃ * 74.296875, ᐃ * 141.625, ᐃ * 49.296875);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0])
		} else if (Ⲇᐃ == 2) {
			var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
			var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
			ΔⲆ.width = ᐃ * 504;
			ΔⲆ.height = 408 * ᐃ;
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 153.625, ᐃ * 46.296875);
			Ⲇ.bezierCurveTo(ᐃ * 271.625, 17.296875 * ᐃ, 345.625 * ᐃ, 35.296875 * ᐃ, 410.625 * ᐃ, 71.296875 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 473.625, 109.296875 * ᐃ, ᐃ * 478.625, 167.296875 * ᐃ, ᐃ * 473.625, 205.296875 * ᐃ);
			Ⲇ.bezierCurveTo(462.625 * ᐃ, 295.296875 * ᐃ, 438.625 * ᐃ, 316.296875 * ᐃ, 388.625 * ᐃ, 345.296875 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 331.625, 374.296875 * ᐃ, 273.625 * ᐃ, 392.296875 * ᐃ, ᐃ * 180.625, 387.296875 * ᐃ);
			Ⲇ.bezierCurveTo(111.625 * ᐃ, 380.296875 * ᐃ, ᐃ * 86.625, 360.296875 * ᐃ, 51.625 * ᐃ, ᐃ * 309.296875);
			Ⲇ.bezierCurveTo(ᐃ * 23.625, 267.296875 * ᐃ, 25.625 * ᐃ, ᐃ * 226.296875, ᐃ * 27.625, 175.296875 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 37.625, 99.296875 * ᐃ, 88.625 * ᐃ, 57.296875 * ᐃ, 153.625 * ᐃ, 46.296875 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0])
		}
		return ΔⲆ
	}

	function ΔⲆⵠⲆᐃᐃΔⵠⲆ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 85;
		ΔⲆ.height = 145 * ᐃ;
		Ⲇ.translate(ᐃ * -ᐃΔΔⲆΔ, ᐃ * -95);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(50 * ᐃ, ᐃ * 105);
		Ⲇ.bezierCurveTo(52 * ᐃ, 119 * ᐃ, 64 * ᐃ, ᐃ * 137, ᐃ * 71, 146 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 71, ᐃ * 161, ᐃ * 74, ᐃ * 169, 79 * ᐃ, ᐃ * 179);
		Ⲇ.bezierCurveTo(68 * ᐃ, 192 * ᐃ, 70 * ᐃ, 204 * ᐃ, 69 * ᐃ, 216 * ᐃ);
		Ⲇ.bezierCurveTo(50 * ᐃ, 189.5 * ᐃ, ᐃ * 50, 189.5 * ᐃ, 31 * ᐃ, 163 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(44 * ᐃ, 106 * ᐃ);
		Ⲇ.bezierCurveTo(49 * ᐃ, ᐃ * 90, ᐃ * 58, 104 * ᐃ, 51 * ᐃ, ᐃ * 121);
		Ⲇ.bezierCurveTo(45 * ᐃ, ᐃ * 143, ᐃ * 41, ᐃ * 151, ᐃ * 37, ᐃ * 162);
		Ⲇ.bezierCurveTo(48 * ᐃ, 180 * ᐃ, ᐃ * 58, 188 * ᐃ, ᐃ * 76, ᐃ * 205);
		Ⲇ.bezierCurveTo(ᐃ * 104, 209 * ᐃ, 105 * ᐃ, ᐃ * 229, 92 * ᐃ, ᐃ * 235);
		Ⲇ.bezierCurveTo(ᐃ * 76, 239 * ᐃ, ᐃ * 75, ᐃ * 232, 56 * ᐃ, 213 * ᐃ);
		Ⲇ.bezierCurveTo(31 * ᐃ, 187 * ᐃ, 28 * ᐃ, ᐃ * 176, ᐃ * 23, 162 * ᐃ);
		Ⲇ.bezierCurveTo(38 * ᐃ, ᐃ * 131, 40 * ᐃ, 120 * ᐃ, 44 * ᐃ, ᐃ * 106);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ, Δⵠ, ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(30 * ᐃ, ᐃ * 159);
		Ⲇ.bezierCurveTo(ᐃ * 46, ᐃ * 157, 59 * ᐃ, ᐃ * 152, 68 * ᐃ, 148 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 63, ᐃ * 155, ᐃ * 52, ᐃ * 160, ᐃ * 44, 164 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 59, 169 * ᐃ, 66 * ᐃ, ᐃ * 174, 75 * ᐃ, 178 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 58, ᐃ * 178, 49 * ᐃ, 175 * ᐃ, 37 * ᐃ, ᐃ * 174);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ);
		return ΔⲆ
	}

	function ⲆΔⲆⲆΔⲆⲆᐃⲆ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 376;
		ΔⲆ.height = ᐃ * 371;
		Ⲇ.globalAlpha = Δⵠᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 191.633544921875, 123.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(215.633544921875 * ᐃ, ᐃ * 85.98580932617188, ᐃ * 187.633544921875, 71.98580932617188 * ᐃ, ᐃ * 202.633544921875, ᐃ * 19.985809326171875);
		Ⲇ.bezierCurveTo(231.633544921875 * ᐃ, ᐃ * 68.98580932617188, ᐃ * 253.633544921875, ᐃ * 71.98580932617188, ᐃ * 256.633544921875, 93.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(306.633544921875 * ᐃ, ᐃ * 64.98580932617188, ᐃ * 319.633544921875, ᐃ * 61.985809326171875, 350.633544921875 * ᐃ, ᐃ * 58.985809326171875);
		Ⲇ.bezierCurveTo(ᐃ * 280.633544921875, ᐃ * 86.98580932617188, ᐃ * 281.633544921875, ᐃ * 106.98580932617188, 268.633544921875 * ᐃ, ᐃ * 130.98580932617188);
		Ⲇ.bezierCurveTo(295.633544921875 * ᐃ, ᐃ * 158.98580932617188, ᐃ * 328.633544921875, 155.98580932617188 * ᐃ, ᐃ * 353.633544921875, 90.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 371.633544921875, 158.98580932617188 * ᐃ, 337.633544921875 * ᐃ, ᐃ * 210.98580932617188, 286.633544921875 * ᐃ, ᐃ * 209.98580932617188);
		Ⲇ.bezierCurveTo(323.633544921875 * ᐃ, ᐃ * 230.98580932617188, 317.633544921875 * ᐃ, 274.9858093261719 * ᐃ, ᐃ * 356.633544921875, ᐃ * 305.9858093261719);
		Ⲇ.bezierCurveTo(288.633544921875 * ᐃ, 297.9858093261719 * ᐃ, ᐃ * 288.633544921875, 265.9858093261719 * ᐃ, 275.633544921875 * ᐃ, ᐃ * 266.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 280.633544921875, 294.9858093261719 * ᐃ, 315.633544921875 * ᐃ, ᐃ * 306.9858093261719, 336.633544921875 * ᐃ, ᐃ * 316.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 295.633544921875, 318.9858093261719 * ᐃ, 264.633544921875 * ᐃ, ᐃ * 302.9858093261719, 254.633544921875 * ᐃ, 289.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(252.633544921875 * ᐃ, 301.9858093261719 * ᐃ, ᐃ * 224.633544921875, 315.9858093261719 * ᐃ, ᐃ * 201.633544921875, ᐃ * 356.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 195.633544921875, 313.9858093261719 * ᐃ, ᐃ * 195.633544921875, ᐃ * 308.9858093261719, ᐃ * 196.633544921875, ᐃ * 307.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 197.633544921875, ᐃ * 289.9858093261719, 207.633544921875 * ᐃ, ᐃ * 283.9858093261719, ᐃ * 195.633544921875, ᐃ * 258.9858093261719);
		Ⲇ.bezierCurveTo(182.633544921875 * ᐃ, ᐃ * 282.9858093261719, ᐃ * 190.633544921875, 287.9858093261719 * ᐃ, ᐃ * 193.633544921875, ᐃ * 297.9858093261719);
		Ⲇ.bezierCurveTo(195.633544921875 * ᐃ, 306.9858093261719 * ᐃ, ᐃ * 191.633544921875, 334.9858093261719 * ᐃ, 187.633544921875 * ᐃ, 354.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(165.633544921875 * ᐃ, ᐃ * 320.9858093261719, ᐃ * 138.633544921875, ᐃ * 307.9858093261719, 135.633544921875 * ᐃ, ᐃ * 288.9858093261719);
		Ⲇ.bezierCurveTo(ᐃ * 110.633544921875, 318.9858093261719 * ᐃ, ᐃ * 68.633544921875, ᐃ * 323.9858093261719, 49.633544921875 * ᐃ, 320.9858093261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 88.633544921875, 308.9858093261719 * ᐃ, ᐃ * 108.633544921875, 284.9858093261719 * ᐃ, ᐃ * 118.633544921875, ᐃ * 258.9858093261719);
		Ⲇ.bezierCurveTo(86.633544921875 * ᐃ, 264.9858093261719 * ᐃ, ᐃ * 75.633544921875, 310.9858093261719 * ᐃ, 19.633544921875 * ᐃ, ᐃ * 304.9858093261719);
		Ⲇ.bezierCurveTo(54.633544921875 * ᐃ, ᐃ * 276.9858093261719, ᐃ * 59.633544921875, 214.98580932617188 * ᐃ, ᐃ * 105.633544921875, 205.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(14.633544921875 * ᐃ, 201.98580932617188 * ᐃ, 24.633544921875 * ᐃ, ᐃ * 141.98580932617188, ᐃ * 25.633544921875, ᐃ * 82.98580932617188);
		Ⲇ.bezierCurveTo(ᐃ * 49.633544921875, 168.98580932617188 * ᐃ, 87.633544921875 * ᐃ, ᐃ * 141.98580932617188, 112.633544921875 * ᐃ, 123.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 95.633544921875, ᐃ * 75.98580932617188, ᐃ * 70.633544921875, 68.98580932617188 * ᐃ, 35.633544921875 * ᐃ, 50.985809326171875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 70.633544921875, ᐃ * 53.985809326171875, ᐃ * 102.633544921875, ᐃ * 65.98580932617188, ᐃ * 125.633544921875, 84.98580932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 133.633544921875, 69.98580932617188 * ᐃ, 166.633544921875 * ᐃ, 42.985809326171875 * ᐃ, 176.633544921875 * ᐃ, 21.985809326171875 * ᐃ);
		Ⲇ.bezierCurveTo(185.633544921875 * ᐃ, ᐃ * 49.985809326171875, 168.633544921875 * ᐃ, 95.98580932617188 * ᐃ, 191.633544921875 * ᐃ, ᐃ * 121.98580932617188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ΔΔᐃᐃ], ᐃ * ⵠᐃⵠΔᐃ);
		return ΔⲆ
	}

	function ⲆΔᐃᐃⵠⲆⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 115;
		ΔⲆ.height = 585 * ᐃ;
		Ⲇ.scale(-ΔΔⵠΔ, 1);
		Ⲇ.translate(-110 * ᐃ, ⵠⵠⲆⵠ);
		Ⲇ.translate(ᐃᐃᐃΔΔ * ᐃ, ᐃ * ⵠⲆⵠⵠⲆ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.save();
		Ⲇ.translate(51.5 * ᐃ, 342 * ᐃ);
		ᐃΔⵠ(Ⲇ, -14.5 * ᐃ, -225 * ᐃ, ᐃ * 29, 450 * ᐃ, ᐃ * ᐃⲆᐃⵠⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 54, ᐃ * 83);
		Ⲇ.bezierCurveTo(70 * ᐃ, ᐃ * 69, 78 * ᐃ, 62 * ᐃ, ᐃ * 82, 40 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 93, 48 * ᐃ, 103 * ᐃ, 64 * ᐃ, ᐃ * 95, ᐃ * 102);
		Ⲇ.bezierCurveTo(ᐃ * 60, 114 * ᐃ, 53 * ᐃ, ᐃ * 103, ᐃ * 54, 85 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 95, ᐃ * 97);
		Ⲇ.bezierCurveTo(ᐃ * 56, 102 * ᐃ, 43 * ᐃ, 77 * ᐃ, ᐃ * 71, ΔΔΔⵠΔ * ᐃ);
		Ⲇ.bezierCurveTo(34 * ᐃ, ⵠΔΔⲆΔ * ᐃ, 6 * ᐃ, ᐃ * 43, ᐃ * 5, 76 * ᐃ);
		Ⲇ.bezierCurveTo(4 * ᐃ, 98 * ᐃ, ⲆⵠⲆΔΔⵠⵠ * ᐃ, ᐃ * 130, 64 * ᐃ, ᐃ * 130);
		Ⲇ.bezierCurveTo(ᐃ * 76, 129 * ᐃ, 95 * ᐃ, 113 * ᐃ, 97 * ᐃ, ᐃ * 97);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 55, 176 * ᐃ);
		Ⲇ.bezierCurveTo(74 * ᐃ, 175 * ᐃ, 82 * ᐃ, ᐃ * 169, ᐃ * 96, 155 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 103, ᐃ * 183, ᐃ * 95, ᐃ * 214, ᐃ * 54, 219 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(50 * ᐃ, ᐃ * 176);
		Ⲇ.bezierCurveTo(ᐃ * 25, ᐃ * 177, 16 * ᐃ, ᐃ * 164, ᐃ * ΔΔⵠΔⲆ, 156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃⵠⵠⲆ * ᐃ, 186 * ᐃ, ᐃ * 10, ᐃ * 201, 43 * ᐃ, 220 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(35 * ᐃ, 403 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 47, 412 * ᐃ, 58 * ᐃ, 412 * ᐃ, ᐃ * 67, 403 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 66.5, 434 * ᐃ, 66.5 * ᐃ, ᐃ * 434, 66 * ᐃ, ᐃ * 465);
		Ⲇ.bezierCurveTo(ᐃ * 56, 480 * ᐃ, ᐃ * 40, ᐃ * 472, ᐃ * 36, ᐃ * 465);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(59 * ᐃ, 67 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 47, ᐃ * 97, ᐃ * ΔΔΔΔᐃ, 117 * ᐃ, ᐃ * ⵠᐃⲆⵠᐃ, ᐃ * 110);
		Ⲇ.bezierCurveTo(ᐃ * 11, 115 * ᐃ, 15 * ᐃ, ᐃ * 122, 23 * ᐃ, 124 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 46, ᐃ * 118, ᐃ * 52, ᐃ * 113, ᐃ * 62, ᐃ * 86);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 30, ᐃ * 125);
		Ⲇ.bezierCurveTo(ᐃ * 47, 136 * ᐃ, 57 * ᐃ, ᐃ * 134, 77 * ᐃ, ᐃ * 127);
		Ⲇ.bezierCurveTo(ᐃ * 71, 158 * ᐃ, 71 * ᐃ, 159 * ᐃ, 66 * ᐃ, 159 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 50.5, 156.5 * ᐃ, ᐃ * 50.5, 156.5 * ᐃ, ᐃ * 35, ᐃ * 154);
		Ⲇ.bezierCurveTo(ᐃ * 31, 145 * ᐃ, ᐃ * 31, ᐃ * 136, 31 * ᐃ, ᐃ * 125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(35 * ᐃ, 171 * ᐃ);
		Ⲇ.bezierCurveTo(32 * ᐃ, 221 * ᐃ, ᐃ * 43, 233 * ᐃ, ᐃ * 70, ᐃ * 247);
		Ⲇ.bezierCurveTo(75 * ᐃ, 234 * ᐃ, 75 * ᐃ, ᐃ * 230, 72 * ᐃ, 221 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 48, 206 * ᐃ, ᐃ * 54, ᐃ * 188, ᐃ * 50, ᐃ * 176);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(60 * ᐃ, ᐃ * 68);
		Ⲇ.bezierCurveTo(63 * ᐃ, 69 * ᐃ, ᐃ * 65, 71 * ᐃ, 67 * ᐃ, ᐃ * 77);
		Ⲇ.bezierCurveTo(61 * ᐃ, ᐃ * 123, ᐃ * 52, ᐃ * 137, ᐃ * 42, 150 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 38, ᐃ * 151, ᐃ * 38, ᐃ * 151, 34 * ᐃ, ᐃ * 152);
		Ⲇ.bezierCurveTo(33 * ᐃ, ᐃ * 146.5, ᐃ * 33, ᐃ * 146.5, ᐃ * 32, 141 * ᐃ);
		Ⲇ.bezierCurveTo(49 * ᐃ, 118 * ᐃ, 63 * ᐃ, 87 * ᐃ, ᐃ * 59, ᐃ * 68);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 71, 172 * ᐃ);
		Ⲇ.bezierCurveTo(56 * ᐃ, ᐃ * 222, ᐃ * 49, 234 * ᐃ, 35 * ᐃ, ᐃ * 248);
		Ⲇ.bezierCurveTo(ᐃ * 30, ᐃ * 236, ᐃ * 30, ᐃ * 230, ᐃ * 31, ᐃ * 217);
		Ⲇ.bezierCurveTo(ᐃ * 44, 202 * ᐃ, ᐃ * 49, ᐃ * 191, 52 * ᐃ, ᐃ * 172);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(35 * ᐃ, 151 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 27, 165 * ᐃ, 31 * ᐃ, 173 * ᐃ, ᐃ * 36, 178 * ᐃ);
		Ⲇ.bezierCurveTo(56 * ᐃ, ᐃ * 185, ᐃ * 73, ᐃ * 184, ᐃ * 71, ᐃ * 170);
		Ⲇ.bezierCurveTo(ᐃ * 72, 154 * ᐃ, 71 * ᐃ, 154 * ᐃ, 63 * ᐃ, 155 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆⲆ]);
		Ⲇ.translate(-ⲆΔⵠΔⵠ * ᐃ, -10 * ᐃ);
		Ⲇ.globalAlpha = ⵠΔᐃ;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 51.5, 342 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -14.5, -225 * ᐃ, 29 * ᐃ, ᐃ * 450, ᐃΔΔⲆΔ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[Δᐃⵠⵠ], Δⵠ[2], ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 54, ᐃ * 83);
		Ⲇ.bezierCurveTo(70 * ᐃ, ᐃ * 69, ᐃ * 78, ᐃ * 62, ᐃ * 82, 40 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 93, 48 * ᐃ, ᐃ * 103, 64 * ᐃ, 95 * ᐃ, ᐃ * 102);
		Ⲇ.bezierCurveTo(60 * ᐃ, ᐃ * 114, 53 * ᐃ, 103 * ᐃ, ᐃ * 54, 85 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * Ⲇⵠⵠᐃⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 95, ᐃ * 97);
		Ⲇ.bezierCurveTo(ᐃ * 56, 102 * ᐃ, 43 * ᐃ, 77 * ᐃ, ᐃ * 71, ΔΔΔⲆ * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 34, ⵠⲆⵠᐃⵠ * ᐃ, ΔᐃΔᐃᐃ * ᐃ, ᐃ * 43, ᐃ * ⲆⲆᐃᐃ, ᐃ * 76);
		Ⲇ.bezierCurveTo(ᐃ * ⵠΔⲆΔΔ, 98 * ᐃ, 15 * ᐃ, 130 * ᐃ, 64 * ᐃ, 130 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 76, ᐃ * 129, ᐃ * 95, ᐃ * 113, ᐃ * 97, 97 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[ⲆⲆⲆᐃᐃ], ΔΔΔⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 35, 403 * ᐃ);
		Ⲇ.bezierCurveTo(47 * ᐃ, ᐃ * 412, 58 * ᐃ, 412 * ᐃ, 67 * ᐃ, 403 * ᐃ);
		Ⲇ.bezierCurveTo(66.5 * ᐃ, ᐃ * 434, 66.5 * ᐃ, ᐃ * 434, 66 * ᐃ, ᐃ * 465);
		Ⲇ.bezierCurveTo(56 * ᐃ, ᐃ * 480, ᐃ * 40, ᐃ * 472, 36 * ᐃ, ᐃ * 465);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[8], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 37, 427 * ᐃ);
		Ⲇ.bezierCurveTo(47 * ᐃ, 435 * ᐃ, ᐃ * 55, 435 * ᐃ, ᐃ * 67, 427 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[8], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(36 * ᐃ, ᐃ * 448);
		Ⲇ.bezierCurveTo(ᐃ * 46, ᐃ * 454, ᐃ * 54, 457 * ᐃ, ᐃ * 65, 449 * ᐃ);
		ΔΔ(Ⲇ, ᐃⲆⵠⲆᐃ, Δⵠ[8], ΔⵠΔⵠᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 55, ᐃ * 176);
		Ⲇ.bezierCurveTo(ᐃ * 74, 175 * ᐃ, ᐃ * 82, ᐃ * 169, 96 * ᐃ, ᐃ * 155);
		Ⲇ.bezierCurveTo(ᐃ * 103, ᐃ * 183, 95 * ᐃ, ᐃ * 214, ᐃ * 54, ᐃ * 219);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔΔ], Δⵠ[ᐃᐃΔΔᐃ], ᐃ * ⵠⵠᐃᐃᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(50 * ᐃ, ᐃ * 176);
		Ⲇ.bezierCurveTo(ᐃ * 25, 177 * ᐃ, ᐃ * ⲆⲆⲆᐃΔ, ᐃ * 164, ᐃΔΔⲆⲆⲆᐃ * ᐃ, ᐃ * 156);
		Ⲇ.bezierCurveTo(ᐃ * 0, ᐃ * 186, ᐃ * 10, 201 * ᐃ, 43 * ᐃ, 220 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * ⲆⲆⵠⵠⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(59 * ᐃ, ᐃ * 67);
		Ⲇ.bezierCurveTo(47 * ᐃ, 97 * ᐃ, ᐃ * 18, ᐃ * 117, ⵠΔΔᐃΔᐃΔ * ᐃ, ᐃ * 110);
		Ⲇ.bezierCurveTo(ᐃ * 11, 115 * ᐃ, ᐃ * ΔΔⵠⲆᐃ, ᐃ * 122, 23 * ᐃ, 124 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 46, 118 * ᐃ, 52 * ᐃ, ᐃ * 113, ᐃ * 62, ᐃ * 86);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[ΔᐃᐃⲆᐃ], ᐃ * 6);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 30, ᐃ * 125);
		Ⲇ.bezierCurveTo(ᐃ * 47, ᐃ * 136, ᐃ * 57, ᐃ * 134, 77 * ᐃ, ᐃ * 127);
		Ⲇ.bezierCurveTo(71 * ᐃ, ᐃ * 158, 71 * ᐃ, 159 * ᐃ, ᐃ * 66, 159 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 50.5, 156.5 * ᐃ, 50.5 * ᐃ, 156.5 * ᐃ, ᐃ * 35, 154 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 31, ᐃ * 145, 31 * ᐃ, 136 * ᐃ, 31 * ᐃ, ᐃ * 125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[ⵠᐃΔᐃΔ], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 35, 171 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 32, ᐃ * 221, ᐃ * 43, 233 * ᐃ, ᐃ * 70, 247 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 75, 234 * ᐃ, 75 * ᐃ, ᐃ * 230, 72 * ᐃ, ᐃ * 221);
		Ⲇ.bezierCurveTo(48 * ᐃ, 206 * ᐃ, 54 * ᐃ, 188 * ᐃ, 50 * ᐃ, 176 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃᐃᐃⵠΔⲆ], Δⵠ[8], ᐃΔᐃΔᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(60 * ᐃ, ᐃ * 68);
		Ⲇ.bezierCurveTo(ᐃ * 63, 69 * ᐃ, 65 * ᐃ, 71 * ᐃ, 67 * ᐃ, ᐃ * 77);
		Ⲇ.bezierCurveTo(61 * ᐃ, 123 * ᐃ, 52 * ᐃ, 137 * ᐃ, 42 * ᐃ, ᐃ * 150);
		Ⲇ.bezierCurveTo(38 * ᐃ, 151 * ᐃ, ᐃ * 38, 151 * ᐃ, ᐃ * 34, 152 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 33, ᐃ * 146.5, ᐃ * 33, 146.5 * ᐃ, ᐃ * 32, 141 * ᐃ);
		Ⲇ.bezierCurveTo(49 * ᐃ, ᐃ * 118, ᐃ * 63, ᐃ * 87, ᐃ * 59, 68 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠᐃⲆᐃΔ], Δⵠ[ΔⵠⵠΔⵠ], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(71 * ᐃ, 172 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 56, ᐃ * 222, ᐃ * 49, ᐃ * 234, ᐃ * 35, 248 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 30, ᐃ * 236, 30 * ᐃ, 230 * ᐃ, ᐃ * 31, 217 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 44, ᐃ * 202, 49 * ᐃ, ᐃ * 191, ᐃ * 52, 172 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[8], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 35, 151 * ᐃ);
		Ⲇ.bezierCurveTo(27 * ᐃ, ᐃ * 165, 31 * ᐃ, 173 * ᐃ, ᐃ * 36, ᐃ * 178);
		Ⲇ.bezierCurveTo(ᐃ * 56, ᐃ * 185, 73 * ᐃ, 184 * ᐃ, ᐃ * 71, 170 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 72, ᐃ * 154, 71 * ᐃ, 154 * ᐃ, 63 * ᐃ, 155 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠⵠⵠ], Δⵠ[8], ᐃ * 6);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(53 * ᐃ, 113 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 65, 140 * ᐃ, 75 * ᐃ, 166 * ᐃ, ᐃ * 52, ᐃ * 169);
		Ⲇ.bezierCurveTo(ᐃ * 29, 168 * ᐃ, 41 * ᐃ, 143 * ᐃ, ᐃ * 53, ᐃ * 112);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⲆΔ], Δⵠ[4], ᐃ * ΔⵠΔⵠᐃ);
		return ΔⲆ
	}

	function ᐃΔⲆΔⵠᐃⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 372;
		ΔⲆ.height = ᐃ * 358;
		Ⲇ.translate(0 * ᐃ, 10 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .2 : ΔΔΔᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 247.00003051757812, 115.76704406738281 * ᐃ);
		Ⲇ.bezierCurveTo(305.0000305175781 * ᐃ, 124.76704406738281 * ᐃ, ᐃ * 335.0000305175781, 112.76704406738281 * ᐃ, ᐃ * 359.0000305175781, ᐃ * 93.76704406738281);
		Ⲇ.bezierCurveTo(359.5000305175781 * ᐃ, 113.26704406738281 * ᐃ, ᐃ * 359.5000305175781, ᐃ * 113.26704406738281, 360.0000305175781 * ᐃ, ᐃ * 132.7670440673828);
		Ⲇ.bezierCurveTo(339.0000305175781 * ᐃ, 177.7670440673828 * ᐃ, ᐃ * 281.0000305175781, 178.7670440673828 * ᐃ, ᐃ * 243.00003051757812, 183.7670440673828 * ᐃ);
		Ⲇ.bezierCurveTo(214.50003051757812 * ᐃ, 214.2670440673828 * ᐃ, ᐃ * 214.50003051757812, 214.2670440673828 * ᐃ, 186.00003051757812 * ᐃ, ᐃ * 244.7670440673828);
		Ⲇ.bezierCurveTo(ᐃ * 155.00003051757812, 214.2670440673828 * ᐃ, 155.00003051757812 * ᐃ, 214.2670440673828 * ᐃ, ᐃ * 124.00003051757812, 183.7670440673828 * ᐃ);
		Ⲇ.bezierCurveTo(51.000030517578125 * ᐃ, 180.7670440673828 * ᐃ, 21.000030517578125 * ᐃ, 161.7670440673828 * ᐃ, 9.000030517578125 * ᐃ, ᐃ * 129.7670440673828);
		Ⲇ.bezierCurveTo(ᐃ * 8.500030517578125, 110.76704406738281 * ᐃ, 8.500030517578125 * ᐃ, 110.76704406738281 * ᐃ, ᐃ * 8.000030517578125, ᐃ * 91.76704406738281);
		Ⲇ.bezierCurveTo(ᐃ * 31.000030517578125, 112.76704406738281 * ᐃ, 87.00003051757812 * ᐃ, 119.76704406738281 * ᐃ, ᐃ * 116.00003051757812, 117.76704406738281 * ᐃ);
		Ⲇ.bezierCurveTo(175.00003051757812 * ᐃ, 18.767044067382812 * ᐃ, 170.00003051757812 * ᐃ, 23.767044067382812 * ᐃ, 181.00003051757812 * ᐃ, 14.767044067382812 * ᐃ);
		Ⲇ.bezierCurveTo(199.00003051757812 * ᐃ, 34.76704406738281 * ᐃ, 203.00003051757812 * ᐃ, ᐃ * 54.76704406738281, 247.00003051757812 * ᐃ, 115.76704406738281 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], 10 * ᐃ);
		Ⲇ.translate(ᐃ * ΔΔᐃ, ᐃ * -ⵠΔΔΔⵠ);
		Ⲇ.globalAlpha = ⲆΔΔΔ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(107.00003051757812 * ᐃ, 54.13069152832031 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 106.50003051757812, 38.63069152832031 * ᐃ, ᐃ * 106.50003051757812, 38.63069152832031 * ᐃ, ᐃ * 106.00003051757812, ᐃ * 23.130691528320312);
		Ⲇ.bezierCurveTo(ᐃ * 121.50003051757812, 38.13069152832031 * ᐃ, 121.50003051757812 * ᐃ, 38.13069152832031 * ᐃ, ᐃ * 137.00003051757812, 53.13069152832031 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(233.00003051757812 * ᐃ, 53.6761474609375 * ᐃ);
		Ⲇ.bezierCurveTo(247.00003051757812 * ᐃ, 37.1761474609375 * ᐃ, 247.00003051757812 * ᐃ, ᐃ * 37.1761474609375, 261.0000305175781 * ᐃ, ᐃ * 20.6761474609375);
		Ⲇ.bezierCurveTo(261.0000305175781 * ᐃ, ᐃ * 36.1761474609375, 261.0000305175781 * ᐃ, 36.1761474609375 * ᐃ, 261.0000305175781 * ᐃ, ᐃ * 51.6761474609375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⲆᐃ], Δⵠ[3], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(293.0000305175781 * ᐃ, ᐃ * 54.403411865234375);
		Ⲇ.bezierCurveTo(ᐃ * 300.0000305175781, 49.903411865234375 * ᐃ, ᐃ * 300.0000305175781, ᐃ * 49.903411865234375, ᐃ * 307.0000305175781, 45.403411865234375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 307.0000305175781, 49.903411865234375 * ᐃ, 307.0000305175781 * ᐃ, 49.903411865234375 * ᐃ, ᐃ * 307.0000305175781, ᐃ * 54.403411865234375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], ᐃ * ⵠⲆⵠⵠⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 77.00003051757812, ᐃ * 54.403411865234375);
		Ⲇ.bezierCurveTo(ᐃ * 70.00003051757812, ᐃ * 50.403411865234375, ᐃ * 70.00003051757812, 50.403411865234375 * ᐃ, 63.000030517578125 * ᐃ, 46.403411865234375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 62.500030517578125, 50.903411865234375 * ᐃ, ᐃ * 62.500030517578125, 50.903411865234375 * ᐃ, 62.000030517578125 * ᐃ, ᐃ * 55.403411865234375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[Δⵠⵠᐃ], ᐃ * ⲆΔΔⲆᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(58.000030517578125 * ᐃ, 122.3125 * ᐃ);
		Ⲇ.bezierCurveTo(59.500030517578125 * ᐃ, 97.3125 * ᐃ, ᐃ * 59.500030517578125, 97.3125 * ᐃ, 61.000030517578125 * ᐃ, 72.3125 * ᐃ);
		Ⲇ.bezierCurveTo(91.00003051757812 * ᐃ, ᐃ * 89.3125, 91.00003051757812 * ᐃ, ᐃ * 89.3125, 121.00003051757812 * ᐃ, ᐃ * 106.3125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δᐃⵠⵠ], Δⵠ[1], ᐃ * ⵠⲆⲆⵠΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(310.0000305175781 * ᐃ, ᐃ * 127.3125);
		Ⲇ.bezierCurveTo(ᐃ * 308.0000305175781, ᐃ * 98.3125, ᐃ * 308.0000305175781, 98.3125 * ᐃ, ᐃ * 306.0000305175781, 69.3125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 274.5000305175781, ᐃ * 88.8125, 274.5000305175781 * ᐃ, ᐃ * 88.8125, ᐃ * 243.00003051757812, 108.3125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[Δⵠᐃ], ⵠⲆⲆⵠΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(226.00003051757812 * ᐃ, 87.85795593261719 * ᐃ);
		Ⲇ.bezierCurveTo(243.50003051757812 * ᐃ, 66.85795593261719 * ᐃ, 243.50003051757812 * ᐃ, 66.85795593261719 * ᐃ, ᐃ * 261.0000305175781, 45.85795593261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 265.0000305175781, ᐃ * 83.85795593261719, 265.0000305175781 * ᐃ, ᐃ * 83.85795593261719, 269.0000305175781 * ᐃ, ᐃ * 121.85795593261719);
		Ⲇ.bezierCurveTo(ᐃ * 235.00003051757812, 122.85795593261719 * ᐃ, 233.00003051757812 * ᐃ, 107.85795593261719 * ᐃ, ᐃ * 228.00003051757812, ᐃ * 90.85795593261719);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(105.00003051757812 * ᐃ, 128.8579559326172 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 104.50003051757812, ᐃ * 87.85795593261719, 104.50003051757812 * ᐃ, 87.85795593261719 * ᐃ, 104.00003051757812 * ᐃ, 46.85795593261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 126.50003051757812, ᐃ * 69.35795593261719, ᐃ * 126.50003051757812, ᐃ * 69.35795593261719, ᐃ * 149.00003051757812, ᐃ * 91.85795593261719);
		Ⲇ.bezierCurveTo(ᐃ * 130.00003051757812, ᐃ * 123.85795593261719, ᐃ * 123.00003051757812, ᐃ * 132.8579559326172, ᐃ * 107.00003051757812, ᐃ * 130.8579559326172);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔⲆᐃᐃ], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 59.000030517578125, 121.85795593261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 59.500030517578125, ᐃ * 99.35795593261719, ᐃ * 59.500030517578125, 99.35795593261719 * ᐃ, 60.000030517578125 * ᐃ, ᐃ * 76.85795593261719);
		Ⲇ.bezierCurveTo(ᐃ * 84.00003051757812, 92.35795593261719 * ᐃ, 84.00003051757812 * ᐃ, 92.35795593261719 * ᐃ, 108.00003051757812 * ᐃ, ᐃ * 107.85795593261719);
		Ⲇ.bezierCurveTo(106.00003051757812 * ᐃ, ᐃ * 148.8579559326172, 86.00003051757812 * ᐃ, 148.8579559326172 * ᐃ, ᐃ * 62.000030517578125, ᐃ * 123.85795593261719);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃⵠ], Δⵠ[3], ᐃ * ⲆΔⵠⵠΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(105.00003051757812 * ᐃ, 132.8579559326172 * ᐃ);
		Ⲇ.bezierCurveTo(104.50003051757812 * ᐃ, 93.35795593261719 * ᐃ, 104.50003051757812 * ᐃ, ᐃ * 93.35795593261719, 104.00003051757812 * ᐃ, 53.85795593261719 * ᐃ);
		Ⲇ.bezierCurveTo(126.50003051757812 * ᐃ, 75.85795593261719 * ᐃ, ᐃ * 126.50003051757812, ᐃ * 75.85795593261719, ᐃ * 149.00003051757812, ᐃ * 97.85795593261719);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(311.0000305175781 * ᐃ, 126.85795593261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 309.0000305175781, 101.35795593261719 * ᐃ, 309.0000305175781 * ᐃ, 101.35795593261719 * ᐃ, 307.0000305175781 * ᐃ, 75.85795593261719 * ᐃ);
		Ⲇ.bezierCurveTo(271.0000305175781 * ᐃ, ᐃ * 96.85795593261719, 271.0000305175781 * ᐃ, ᐃ * 96.85795593261719, ᐃ * 235.00003051757812, ᐃ * 117.85795593261719);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ΔⲆΔⵠ], ΔΔⵠᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 228.00003051757812, 96.85795593261719 * ᐃ);
		Ⲇ.bezierCurveTo(244.50003051757812 * ᐃ, 74.85795593261719 * ᐃ, ᐃ * 244.50003051757812, 74.85795593261719 * ᐃ, 261.0000305175781 * ᐃ, ᐃ * 52.85795593261719);
		Ⲇ.bezierCurveTo(ᐃ * 265.5000305175781, 89.85795593261719 * ᐃ, 265.5000305175781 * ᐃ, ᐃ * 89.85795593261719, ᐃ * 270.0000305175781, 126.85795593261719 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔⵠΔ], Δⵠ[3], ᐃ * ⵠⲆⵠᐃⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(12.000030517578125 * ᐃ, 86.13069152832031 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 36.000030517578125, ᐃ * 113.13069152832031, ᐃ * 84.00003051757812, 111.13069152832031 * ᐃ, ᐃ * 116.00003051757812, 113.13069152832031 * ᐃ);
		Ⲇ.bezierCurveTo(164.00003051757812 * ᐃ, ᐃ * 23.130691528320312, 172.00003051757812 * ᐃ, 18.130691528320312 * ᐃ, ᐃ * 181.00003051757812, 9.130691528320312 * ᐃ);
		Ⲇ.bezierCurveTo(199.00003051757812 * ᐃ, ᐃ * 29.130691528320312, ᐃ * 221.00003051757812, 78.13069152832031 * ᐃ, ᐃ * 247.00003051757812, ᐃ * 112.13069152832031);
		Ⲇ.bezierCurveTo(301.0000305175781 * ᐃ, ᐃ * 122.13069152832031, 338.0000305175781 * ᐃ, ᐃ * 111.13069152832031, 359.0000305175781 * ᐃ, ᐃ * 94.13069152832031);
		Ⲇ.bezierCurveTo(ᐃ * 359.0000305175781, 113.13069152832031 * ᐃ, 358.5000305175781 * ᐃ, ᐃ * 105.13069152832031, ᐃ * 358.0000305175781, 116.13069152832031 * ᐃ);
		Ⲇ.bezierCurveTo(270.5000305175781 * ᐃ, ᐃ * 130.1306915283203, ᐃ * 270.5000305175781, 130.1306915283203 * ᐃ, ᐃ * 183.00003051757812, ᐃ * 144.1306915283203);
		Ⲇ.bezierCurveTo(ᐃ * 98.00003051757812, 128.6306915283203 * ᐃ, 98.00003051757812 * ᐃ, 128.6306915283203 * ᐃ, 13.000030517578125 * ᐃ, 113.13069152832031 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[1], 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 247.00003051757812, ᐃ * 115.76704406738281);
		Ⲇ.bezierCurveTo(ᐃ * 305.0000305175781, ᐃ * 124.76704406738281, 335.0000305175781 * ᐃ, ᐃ * 112.76704406738281, ᐃ * 359.0000305175781, ᐃ * 93.76704406738281);
		Ⲇ.bezierCurveTo(359.5000305175781 * ᐃ, ᐃ * 113.26704406738281, ᐃ * 359.5000305175781, 113.26704406738281 * ᐃ, ᐃ * 360.0000305175781, ᐃ * 132.7670440673828);
		Ⲇ.bezierCurveTo(339.0000305175781 * ᐃ, ᐃ * 177.7670440673828, ᐃ * 281.0000305175781, 178.7670440673828 * ᐃ, ᐃ * 243.00003051757812, ᐃ * 183.7670440673828);
		Ⲇ.bezierCurveTo(ᐃ * 214.50003051757812, 214.2670440673828 * ᐃ, ᐃ * 214.50003051757812, ᐃ * 214.2670440673828, 186.00003051757812 * ᐃ, 244.7670440673828 * ᐃ);
		Ⲇ.bezierCurveTo(155.00003051757812 * ᐃ, ᐃ * 214.2670440673828, ᐃ * 155.00003051757812, ᐃ * 214.2670440673828, ᐃ * 124.00003051757812, 183.7670440673828 * ᐃ);
		Ⲇ.bezierCurveTo(51.000030517578125 * ᐃ, ᐃ * 180.7670440673828, ᐃ * 21.000030517578125, ᐃ * 161.7670440673828, 9.000030517578125 * ᐃ, 129.7670440673828 * ᐃ);
		Ⲇ.bezierCurveTo(8.500030517578125 * ᐃ, ᐃ * 110.76704406738281, ᐃ * 8.500030517578125, ᐃ * 110.76704406738281, ᐃ * 8.000030517578125, 91.76704406738281 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 31.000030517578125, ᐃ * 112.76704406738281, ᐃ * 87.00003051757812, ᐃ * 119.76704406738281, 116.00003051757812 * ᐃ, ᐃ * 117.76704406738281);
		Ⲇ.bezierCurveTo(ᐃ * 175.00003051757812, 18.767044067382812 * ᐃ, 170.00003051757812 * ᐃ, ᐃ * 23.767044067382812, 181.00003051757812 * ᐃ, 14.767044067382812 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 199.00003051757812, 34.76704406738281 * ᐃ, 203.00003051757812 * ᐃ, 54.76704406738281 * ᐃ, ᐃ * 247.00003051757812, 115.76704406738281 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠᐃ], Δⵠ[3], 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 27.000030517578125, ᐃ * 94.76704406738281);
		Ⲇ.bezierCurveTo(ᐃ * 11.000030517578125, ᐃ * 81.76704406738281, ᐃ * 31.000030517578125, ᐃ * 72.76704406738281, ᐃ * 44.000030517578125, ᐃ * 59.76704406738281);
		Ⲇ.bezierCurveTo(9.000030517578125 * ᐃ, 65.76704406738281 * ᐃ, 4.000030517578125 * ᐃ, ᐃ * 78.76704406738281, ᐃ * 9.000030517578125, 89.76704406738281 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], ᐃ * ⵠⲆⲆⵠΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 352.0000305175781, 100.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(362.0000305175781 * ᐃ, 92.76705932617188 * ᐃ, ᐃ * 352.0000305175781, 84.76705932617188 * ᐃ, 340.0000305175781 * ᐃ, ᐃ * 68.76705932617188);
		Ⲇ.bezierCurveTo(ᐃ * 360.0000305175781, ᐃ * 69.76705932617188, ᐃ * 364.0000305175781, 79.76705932617188 * ᐃ, ᐃ * 364.0000305175781, 94.76705932617188 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔⵠΔ], Δⵠ[1], 1 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(25.000030517578125 * ᐃ, 97.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 2.000030517578125, ᐃ * 76.94886779785156, 29.000030517578125 * ᐃ, 62.94886779785156 * ᐃ, ᐃ * 44.000030517578125, 59.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(8.000030517578125 * ᐃ, ᐃ * 59.94886779785156, ᐃ * -.999969482421875, ᐃ * 81.94886779785156, 4.000030517578125 * ᐃ, ᐃ * 92.94886779785156);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(349.0000305175781 * ᐃ, ᐃ * 100.94886779785156);
		Ⲇ.bezierCurveTo(366.0000305175781 * ᐃ, ᐃ * 82.94886779785156, ᐃ * 353.0000305175781, ᐃ * 76.94886779785156, ᐃ * 337.0000305175781, ᐃ * 67.94886779785156);
		Ⲇ.bezierCurveTo(366.0000305175781 * ᐃ, ᐃ * 69.94886779785156, ᐃ * 366.0000305175781, 83.94886779785156 * ᐃ, 363.0000305175781 * ᐃ, ᐃ * 101.94886779785156);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔⲆⲆ], Δⵠ[3], ᐃ * 10);
		ᐃΔΔ(Ⲇ, ᐃ * 46.000030517578125, 137.5852279663086 * ᐃ, 9.219544457292887 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠᐃΔ], Δⵠ[5], ᐃ * ΔΔΔᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 308.0000305175781, 141.5852279663086 * ᐃ, ᐃ * 8.54400374531753);
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ΔΔⲆⲆⵠ], ᐃ * ΔⵠΔ);
		ᐃΔΔ(Ⲇ, ᐃ * 92.00003051757812, ᐃ * 149.58523559570312, ᐃ * 14.866068747318506);
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃⲆ], Δⵠ[5], ᐃ * ⵠΔᐃ);
		ᐃΔΔ(Ⲇ, 262.0000305175781 * ᐃ, 148.8579559326172 * ᐃ, ᐃ * 15.620499351813308);
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], ᐃ * 1);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(184.00003051757812 * ᐃ, ᐃ * 68.85795593261719);
		Ⲇ.bezierCurveTo(ᐃ * 203.00003051757812, 108.85795593261719 * ᐃ, 203.00003051757812 * ᐃ, ᐃ * 108.85795593261719, 222.00003051757812 * ᐃ, ᐃ * 148.8579559326172);
		Ⲇ.bezierCurveTo(ᐃ * 202.50003051757812, 177.8579559326172 * ᐃ, 202.50003051757812 * ᐃ, 177.8579559326172 * ᐃ, 183.00003051757812 * ᐃ, 206.8579559326172 * ᐃ);
		Ⲇ.bezierCurveTo(162.00003051757812 * ᐃ, 178.8579559326172 * ᐃ, ᐃ * 162.00003051757812, 178.8579559326172 * ᐃ, ᐃ * 141.00003051757812, 150.8579559326172 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], ⵠΔΔΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(183.00003051757812 * ᐃ, ᐃ * 104.94886779785156);
		Ⲇ.bezierCurveTo(192.50003051757812 * ᐃ, ᐃ * 125.44886779785156, ᐃ * 192.50003051757812, ᐃ * 125.44886779785156, ᐃ * 202.00003051757812, ᐃ * 145.94886779785156);
		Ⲇ.bezierCurveTo(192.00003051757812 * ᐃ, ᐃ * 163.94886779785156, 192.00003051757812 * ᐃ, 163.94886779785156 * ᐃ, ᐃ * 182.00003051757812, ᐃ * 181.94886779785156);
		Ⲇ.bezierCurveTo(ᐃ * 172.50003051757812, ᐃ * 164.44886779785156, ᐃ * 172.50003051757812, 164.44886779785156 * ᐃ, ᐃ * 163.00003051757812, ᐃ * 146.94886779785156);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⵠᐃⵠ]);
		return ΔⲆ
	}

	function ᐃᐃΔⵠΔᐃΔ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 92;
		ΔⲆ.height = ᐃ * 108;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(31 * ᐃ, 10 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 37, ᐃ * ⲆⲆⲆⲆ, ᐃ * 49, ᐃ * ΔΔᐃ, 61 * ᐃ, ᐃ * 15);
		Ⲇ.bezierCurveTo(81 * ᐃ, ᐃ * 31, 78 * ᐃ, ᐃ * 25, ᐃ * 79, ᐃ * 37);
		Ⲇ.bezierCurveTo(76 * ᐃ, ᐃ * 44, 81 * ᐃ, ᐃ * 56, 85 * ᐃ, ᐃ * 63);
		Ⲇ.bezierCurveTo(ᐃ * 91, 71 * ᐃ, 90 * ᐃ, 78 * ᐃ, 83 * ᐃ, ᐃ * 84);
		Ⲇ.bezierCurveTo(ᐃ * 60, 98 * ᐃ, 67 * ᐃ, ᐃ * 95, 57 * ᐃ, ᐃ * 102);
		Ⲇ.bezierCurveTo(ᐃ * 47, ᐃ * 106, ᐃ * 43, 106 * ᐃ, ᐃ * 31, ᐃ * 98);
		Ⲇ.bezierCurveTo(22 * ᐃ, ᐃ * 91, ΔᐃΔⲆⲆⵠᐃ * ᐃ, 89 * ᐃ, ᐃ * 7, 84 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 1, ᐃ * 77, ᐃ * ᐃᐃⵠΔ, 73 * ᐃ, ⲆⲆΔΔᐃ * ᐃ, ᐃ * 60);
		Ⲇ.bezierCurveTo(ⲆⲆΔⲆⲆ * ᐃ, 50 * ᐃ, ᐃ * ⲆⲆᐃᐃ, ᐃ * 32, ᐃ * ⲆⵠⲆΔΔⵠⵠ, 27 * ᐃ);
		Ⲇ.bezierCurveTo(26 * ᐃ, ΔⵠⲆⲆⵠᐃⵠ * ᐃ, 26 * ᐃ, ᐃ * 24, ᐃ * 31, ᐃ * ΔⲆⲆΔΔ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠΔ], Δⵠ[ΔΔΔᐃ], 4);
		return ΔⲆ
	}

	function ᐃΔⲆⲆᐃΔΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 465;
		ΔⲆ.height = 405 * ᐃ;
		Ⲇ.globalAlpha = ⲆΔΔΔ;
		Ⲇ.translate(6 * ᐃ, ᐃ * 0);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 39.000030517578125, 162.03977966308594 * ᐃ);
		Ⲇ.bezierCurveTo(125.00003051757812 * ᐃ, ᐃ * 84.03977966308594, 108.50003051757812 * ᐃ, 115.03977966308594 * ᐃ, ᐃ * 178.00003051757812, ᐃ * 68.03977966308594);
		Ⲇ.bezierCurveTo(299.0000305175781 * ᐃ, 146.53977966308594 * ᐃ, 299.0000305175781 * ᐃ, 146.53977966308594 * ᐃ, ᐃ * 420.0000305175781, ᐃ * 225.03977966308594);
		Ⲇ.bezierCurveTo(400.0000305175781 * ᐃ, ᐃ * 288.53977966308594, ᐃ * 400.0000305175781, ᐃ * 288.53977966308594, ᐃ * 380.0000305175781, 352.03977966308594 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 216.50003051757812, ᐃ * 345.53977966308594, 216.50003051757812 * ᐃ, 345.53977966308594 * ᐃ, 53.000030517578125 * ᐃ, 339.03977966308594 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃᐃΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 23.000030517578125, 306.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(5.000030517578125 * ᐃ, ᐃ * 275.94886779785156, ᐃ * 6.000030517578125, 201.94886779785156 * ᐃ, 14.000030517578125 * ᐃ, 150.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(40.000030517578125 * ᐃ, ᐃ * 34.94886779785156, ᐃ * 157.00003051757812, ᐃ * 14.948867797851562, 199.00003051757812 * ᐃ, 11.948867797851562 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 331.0000305175781, .9488677978515625 * ᐃ, 409.0000305175781 * ᐃ, 61.94886779785156 * ᐃ, 428.0000305175781 * ᐃ, 133.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(445.0000305175781 * ᐃ, 207.94886779785156 * ᐃ, 439.0000305175781 * ᐃ, 274.94886779785156 * ᐃ, 426.0000305175781 * ᐃ, 342.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 355.0000305175781, 207.94886779785156 * ᐃ, 345.0000305175781 * ᐃ, 208.94886779785156 * ᐃ, ᐃ * 333.0000305175781, 202.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 262.0000305175781, ᐃ * 143.94886779785156, ᐃ * 236.00003051757812, ᐃ * 148.94886779785156, ᐃ * 189.00003051757812, ᐃ * 162.94886779785156);
		Ⲇ.bezierCurveTo(82.00003051757812 * ᐃ, 190.94886779785156 * ᐃ, 78.00003051757812 * ᐃ, 235.94886779785156 * ᐃ, ᐃ * 62.000030517578125, 279.94886779785156 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ], Δⵠ[ΔⲆᐃⲆ], 20 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(17.000030517578125 * ᐃ, 149.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 76.00003051757812, ᐃ * 67.94886779785156, ᐃ * 177.00003051757812, ᐃ * 40.94886779785156, ᐃ * 232.00003051757812, ᐃ * 45.94886779785156);
		Ⲇ.bezierCurveTo(ᐃ * 316.0000305175781, ᐃ * 46.94886779785156, 359.0000305175781 * ᐃ, ᐃ * 74.94886779785156, 428.0000305175781 * ᐃ, 145.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 414.0000305175781, ᐃ * 73.94886779785156, 386.0000305175781 * ᐃ, 68.94886779785156 * ᐃ, ᐃ * 359.0000305175781, ᐃ * 43.94886779785156);
		Ⲇ.bezierCurveTo(ᐃ * 295.0000305175781, 5.9488677978515625 * ᐃ, 239.00003051757812 * ᐃ, ᐃ * 10.948867797851562, ᐃ * 207.00003051757812, 10.948867797851562 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 121.00003051757812, 20.948867797851562 * ᐃ, 104.00003051757812 * ᐃ, 34.94886779785156 * ᐃ, 45.000030517578125 * ᐃ, ᐃ * 84.94886779785156);
		Ⲇ.bezierCurveTo(14.000030517578125 * ᐃ, ᐃ * 128.94886779785156, ᐃ * 18.000030517578125, 142.94886779785156 * ᐃ, 16.000030517578125 * ᐃ, 151.94886779785156 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(23.000030517578125 * ᐃ, ᐃ * 306.94886779785156);
		Ⲇ.bezierCurveTo(ᐃ * 5.000030517578125, ᐃ * 275.94886779785156, ᐃ * 6.000030517578125, ᐃ * 201.94886779785156, ᐃ * 14.000030517578125, ᐃ * 150.94886779785156);
		Ⲇ.bezierCurveTo(ᐃ * 40.000030517578125, ᐃ * 34.94886779785156, ᐃ * 157.00003051757812, ᐃ * 14.948867797851562, ᐃ * 199.00003051757812, ᐃ * 11.948867797851562);
		Ⲇ.bezierCurveTo(ᐃ * 331.0000305175781, ᐃ * .9488677978515625, ᐃ * 409.0000305175781, 61.94886779785156 * ᐃ, ᐃ * 428.0000305175781, 133.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(445.0000305175781 * ᐃ, 207.94886779785156 * ᐃ, 439.0000305175781 * ᐃ, 274.94886779785156 * ᐃ, ᐃ * 426.0000305175781, 342.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(355.0000305175781 * ᐃ, ᐃ * 207.94886779785156, ᐃ * 345.0000305175781, ᐃ * 208.94886779785156, ᐃ * 333.0000305175781, 202.94886779785156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 262.0000305175781, ᐃ * 143.94886779785156, ᐃ * 236.00003051757812, 148.94886779785156 * ᐃ, ᐃ * 189.00003051757812, ᐃ * 162.94886779785156);
		Ⲇ.bezierCurveTo(82.00003051757812 * ᐃ, ᐃ * 190.94886779785156, 78.00003051757812 * ᐃ, ᐃ * 235.94886779785156, 62.000030517578125 * ᐃ, ᐃ * 279.94886779785156);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ᐃⲆⵠⲆᐃ, Δⵠ[Δᐃⵠⵠ], ᐃ * ⲆΔⲆⵠΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 60.000030517578125, 288.03977966308594 * ᐃ);
		Ⲇ.bezierCurveTo(183.00003051757812 * ᐃ, ᐃ * 320.03977966308594, ᐃ * 342.0000305175781, 306.03977966308594 * ᐃ, 399.0000305175781 * ᐃ, ᐃ * 286.03977966308594);
		Ⲇ.bezierCurveTo(420.0000305175781 * ᐃ, ᐃ * 345.03977966308594, 410.0000305175781 * ᐃ, 335.03977966308594 * ᐃ, 415.0000305175781 * ᐃ, 362.03977966308594 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 351.0000305175781, ᐃ * 384.03977966308594, 299.0000305175781 * ᐃ, 389.03977966308594 * ᐃ, ᐃ * 215.00003051757812, ᐃ * 391.03977966308594);
		Ⲇ.bezierCurveTo(128.00003051757812 * ᐃ, ᐃ * 388.03977966308594, ᐃ * 69.00003051757812, 373.03977966308594 * ᐃ, ᐃ * 39.000030517578125, 359.03977966308594 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ΔⲆᐃᐃ], 13 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 47.000030517578125, 327.03977966308594 * ᐃ);
		Ⲇ.bezierCurveTo(203.00003051757812 * ᐃ, 377.03977966308594 * ᐃ, ᐃ * 331.0000305175781, 349.03977966308594 * ᐃ, ᐃ * 410.0000305175781, 330.03977966308594 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ], Δⵠ[Δⵠᐃ], ᐃ * ᐃᐃΔΔΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(9.000030517578125 * ᐃ, 339.1306915283203 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 2.000030517578125, ᐃ * 280.1306915283203, 30.000030517578125 * ᐃ, 219.1306915283203 * ᐃ, ᐃ * 85.00003051757812, ᐃ * 167.1306915283203);
		Ⲇ.bezierCurveTo(ᐃ * 174.00003051757812, 82.13069152832031 * ᐃ, ᐃ * 241.00003051757812, ᐃ * 101.13069152832031, ᐃ * 284.0000305175781, ᐃ * 115.13069152832031);
		Ⲇ.bezierCurveTo(ᐃ * 333.0000305175781, 134.1306915283203 * ᐃ, ᐃ * 376.0000305175781, ᐃ * 177.1306915283203, 410.0000305175781 * ᐃ, ᐃ * 247.1306915283203);
		Ⲇ.bezierCurveTo(439.0000305175781 * ᐃ, 300.1306915283203 * ᐃ, ᐃ * 442.0000305175781, ᐃ * 346.1306915283203, ᐃ * 430.0000305175781, ᐃ * 363.1306915283203);
		Ⲇ.bezierCurveTo(ᐃ * 418.0000305175781, 366.1306915283203 * ᐃ, ᐃ * 395.0000305175781, 295.1306915283203 * ᐃ, ᐃ * 355.0000305175781, 223.1306915283203 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 299.0000305175781, 156.1306915283203 * ᐃ, 262.0000305175781 * ᐃ, ᐃ * 155.1306915283203, ᐃ * 215.00003051757812, ᐃ * 159.1306915283203);
		Ⲇ.bezierCurveTo(ᐃ * 133.00003051757812, ᐃ * 171.1306915283203, 120.00003051757812 * ᐃ, 193.1306915283203 * ᐃ, 96.00003051757812 * ᐃ, ᐃ * 221.1306915283203);
		Ⲇ.bezierCurveTo(49.000030517578125 * ᐃ, 262.1306915283203 * ᐃ, 47.000030517578125 * ᐃ, 306.1306915283203 * ᐃ, ᐃ * 38.000030517578125, ᐃ * 336.1306915283203);
		Ⲇ.bezierCurveTo(ᐃ * 30.000030517578125, ᐃ * 349.1306915283203, ᐃ * 30.000030517578125, ᐃ * 349.1306915283203, 22.000030517578125 * ᐃ, ᐃ * 362.1306915283203);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⲆᐃ], Δⵠ[ⵠⲆΔⲆ], ᐃ * 20);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(228.00003051757812 * ᐃ, 128.03977966308594 * ᐃ);
		Ⲇ.bezierCurveTo(315.0000305175781 * ᐃ, 131.03977966308594 * ᐃ, 349.0000305175781 * ᐃ, 178.03977966308594 * ᐃ, 386.0000305175781 * ᐃ, ᐃ * 234.03977966308594);
		Ⲇ.bezierCurveTo(444.0000305175781 * ᐃ, 329.03977966308594 * ᐃ, ᐃ * 446.0000305175781, ᐃ * 354.03977966308594, ᐃ * 427.0000305175781, ᐃ * 373.03977966308594);
		Ⲇ.bezierCurveTo(389.0000305175781 * ᐃ, 389.03977966308594 * ᐃ, 399.0000305175781 * ᐃ, ᐃ * 329.03977966308594, ᐃ * 361.0000305175781, ᐃ * 277.03977966308594);
		Ⲇ.bezierCurveTo(ᐃ * 306.0000305175781, ᐃ * 191.03977966308594, ᐃ * 266.0000305175781, ᐃ * 183.03977966308594, ᐃ * 220.00003051757812, ᐃ * 181.03977966308594);
		Ⲇ.bezierCurveTo(138.00003051757812 * ᐃ, ᐃ * 184.03977966308594, 123.00003051757812 * ᐃ, ᐃ * 212.03977966308594, 89.00003051757812 * ᐃ, 271.03977966308594 * ᐃ);
		Ⲇ.bezierCurveTo(52.000030517578125 * ᐃ, 349.03977966308594 * ᐃ, ᐃ * 68.00003051757812, 364.03977966308594 * ᐃ, 33.000030517578125 * ᐃ, 369.03977966308594 * ᐃ);
		Ⲇ.bezierCurveTo(6.000030517578125 * ᐃ, 366.03977966308594 * ᐃ, 5.000030517578125 * ᐃ, 341.03977966308594 * ᐃ, ᐃ * 26.000030517578125, ᐃ * 288.03977966308594);
		Ⲇ.bezierCurveTo(60.000030517578125 * ᐃ, ᐃ * 207.03977966308594, 100.00003051757812 * ᐃ, ᐃ * 180.03977966308594, 113.00003051757812 * ᐃ, ᐃ * 170.03977966308594);
		Ⲇ.bezierCurveTo(159.00003051757812 * ᐃ, 132.03977966308594 * ᐃ, 196.00003051757812 * ᐃ, ᐃ * 133.03977966308594, 226.00003051757812 * ᐃ, 129.03977966308594 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠᐃⵠΔ], ᐃ * 20);
		return ΔⲆ
	}

	function ΔᐃΔΔᐃᐃⲆⲆᐃ(ⲆⲆΔΔ) {
		var ᐃΔⲆ = [];
		for (var Ⲇᐃ = ⵠⲆΔ; Ⲇᐃ < ⲆⲆΔΔ.length; Ⲇᐃ++) ᐃΔⲆ.push(ΔᐃΔⵠⲆⵠⲆᐃΔ(ⲆⲆΔΔ[Ⲇᐃ], Ⲇᐃ == 2 ? ⵠⲆΔᐃΔ : false));
		return ᐃΔⲆ
	}

	function ⲆᐃᐃⲆⲆᐃᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 139 * ᐃ;
		ΔⲆ.height = ᐃ * 135;
		Ⲇ.translate(0, ᐃ * ΔⲆⲆΔΔ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 32, 77 * ᐃ);
		Ⲇ.bezierCurveTo(6 * ᐃ, 41 * ᐃ, ᐃ * ⵠⵠⲆⵠᐃ, 33 * ᐃ, ᐃ * 12, ᐃ * 27);
		Ⲇ.bezierCurveTo(ᐃ * 27, ᐃ * 6, ᐃ * 28, ΔⵠΔⵠᐃ * ᐃ, 37 * ᐃ, ᐃᐃⲆⵠⲆ * ᐃ);
		Ⲇ.bezierCurveTo(62 * ᐃ, ⵠⵠΔⵠ * ᐃ, ᐃ * 64, ᐃ * ᐃᐃᐃᐃⵠ, 67 * ᐃ, ⲆⵠⵠⲆⵠⲆⵠ * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 80, 36 * ᐃ, ᐃ * 73.5, 25 * ᐃ, ᐃ * 80, ᐃ * 37);
		Ⲇ.bezierCurveTo(ᐃ * 73.5, ᐃ * 54, 65 * ᐃ, ᐃ * 74, 67 * ᐃ, 71 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(65 * ᐃ, ᐃ * 37);
		Ⲇ.bezierCurveTo(ᐃ * 105, ᐃ * 40, 113 * ᐃ, 39 * ᐃ, 117 * ᐃ, ᐃ * 48);
		Ⲇ.bezierCurveTo(ᐃ * 126, ᐃ * 70, 128 * ᐃ, 72 * ᐃ, ᐃ * 124, 80 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 112, 101 * ᐃ, 110 * ᐃ, 104 * ᐃ, ᐃ * 99, 104 * ᐃ);
		Ⲇ.bezierCurveTo(59 * ᐃ, ΔᐃΔΔΔ * ᐃ, 55 * ᐃ, 99 * ᐃ, 56 * ᐃ, 99 * ᐃ);
		Ⲇ.bezierCurveTo(47.5 * ᐃ, ᐃ * 79, 45 * ᐃ, ᐃ * 66, ᐃ * 39, 59 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(30 * ᐃ, 63 * ᐃ);
		Ⲇ.bezierCurveTo(ⵠⲆⲆᐃ * ᐃ, 99 * ᐃ, ᐃ * ΔⲆⵠⵠ, 101 * ᐃ, 8 * ᐃ, 103 * ᐃ);
		Ⲇ.bezierCurveTo(ⵠᐃᐃᐃⵠⵠⵠ * ᐃ, 123 * ᐃ, 22 * ᐃ, 125 * ᐃ, 28 * ᐃ, 126 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 57, ᐃ * 127, ᐃ * 55, ᐃ * 127, 58 * ᐃ, ᐃ * 120);
		Ⲇ.bezierCurveTo(82 * ᐃ, 86 * ᐃ, 83 * ᐃ, ᐃ * 78, ᐃ * 82, 87 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.translate(ⵠⲆⵠⵠ, ᐃ * -10);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(32 * ᐃ, 77 * ᐃ);
		Ⲇ.bezierCurveTo(ΔⲆⲆⵠⵠ * ᐃ, 41 * ᐃ, ᐃ * ΔΔΔⵠΔ, 33 * ᐃ, 12 * ᐃ, ᐃ * 27);
		Ⲇ.bezierCurveTo(27 * ᐃ, 6 * ᐃ, 28 * ᐃ, ᐃ * ΔΔΔΔ, ᐃ * 37, ΔΔΔΔ * ᐃ);
		Ⲇ.bezierCurveTo(62 * ᐃ, 3 * ᐃ, 64 * ᐃ, ΔⲆⲆⵠ * ᐃ, ᐃ * 67, ⵠⵠΔΔΔⲆΔ * ᐃ);
		Ⲇ.bezierCurveTo(80 * ᐃ, ᐃ * 36, 73.5 * ᐃ, ᐃ * 25, 80 * ᐃ, 37 * ᐃ);
		Ⲇ.bezierCurveTo(73.5 * ᐃ, ᐃ * 54, 65 * ᐃ, 74 * ᐃ, 67 * ᐃ, 71 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 65, ᐃ * 37);
		Ⲇ.bezierCurveTo(ᐃ * 105, ᐃ * 40, ᐃ * 113, ᐃ * 39, 117 * ᐃ, 48 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 126, 70 * ᐃ, ᐃ * 128, ᐃ * 72, ᐃ * 124, ᐃ * 80);
		Ⲇ.bezierCurveTo(112 * ᐃ, ᐃ * 101, 110 * ᐃ, 104 * ᐃ, ᐃ * 99, ᐃ * 104);
		Ⲇ.bezierCurveTo(59 * ᐃ, ᐃ * 100, ᐃ * 55, ᐃ * 99, 56 * ᐃ, 99 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 47.5, ᐃ * 79, ᐃ * 45, 66 * ᐃ, 39 * ᐃ, 59 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 30, ᐃ * 63);
		Ⲇ.bezierCurveTo(ᐃ * 5, 99 * ᐃ, ⲆⵠΔΔ * ᐃ, ᐃ * 101, ⲆⵠⲆⵠⵠ * ᐃ, ᐃ * 103);
		Ⲇ.bezierCurveTo(19 * ᐃ, ᐃ * 123, ᐃ * 22, 125 * ᐃ, ᐃ * 28, 126 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 57, ᐃ * 127, ᐃ * 55, 127 * ᐃ, 58 * ᐃ, 120 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 82, 86 * ᐃ, ᐃ * 83, ᐃ * 78, ᐃ * 82, 87 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 80, ᐃ * 38);
		Ⲇ.bezierCurveTo(ᐃ * 72.5, 52 * ᐃ, ᐃ * 72.5, ᐃ * 52, 65 * ᐃ, ᐃ * 66);
		Ⲇ.bezierCurveTo(47.5 * ᐃ, 37 * ᐃ, ᐃ * 47.5, ᐃ * 37, 30 * ᐃ, ΔᐃⵠⲆΔ * ᐃ);
		Ⲇ.bezierCurveTo(48 * ᐃ, ᐃ * 4, 57 * ᐃ, 4 * ᐃ, 64 * ᐃ, ᐃ * ⵠⲆⵠᐃⵠ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(65 * ᐃ, ᐃ * 65);
		Ⲇ.bezierCurveTo(125 * ᐃ, 73 * ᐃ, ᐃ * 95.5, 69 * ᐃ, 126 * ᐃ, 73 * ᐃ);
		Ⲇ.bezierCurveTo(119 * ᐃ, 98 * ᐃ, 106 * ᐃ, ᐃ * 104, 98 * ᐃ, ᐃ * 103);
		Ⲇ.bezierCurveTo(84.5 * ᐃ, ᐃ * 102, 84.5 * ᐃ, ᐃ * 102, ᐃ * 71, 101 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 64, ᐃ * 86, 64 * ᐃ, ᐃ * 86, 57 * ᐃ, ᐃ * 70);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 27, ᐃ * 69);
		Ⲇ.bezierCurveTo(64 * ᐃ, ᐃ * 65, ᐃ * 46, 67 * ᐃ, ᐃ * 65, ᐃ * 65);
		Ⲇ.bezierCurveTo(ᐃ * 43.5, 94 * ᐃ, ᐃ * 43.5, ᐃ * 94, ᐃ * 22, 123 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 8, 103 * ᐃ, ⲆⵠⲆⵠⵠ * ᐃ, ᐃ * 103, 9 * ᐃ, ᐃ * 103);
		Ⲇ.bezierCurveTo(ᐃ * Ⲇᐃⵠᐃ, ᐃ * 98, ᐃ * 11, 89 * ᐃ, ᐃ * 26, 70 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(26 * ᐃ, 69 * ᐃ);
		Ⲇ.bezierCurveTo(65 * ᐃ, 60 * ᐃ, ᐃ * 45, 65 * ᐃ, 64 * ᐃ, 60 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 63, 65 * ᐃ, 63 * ᐃ, ᐃ * 65, ᐃ * 62, ᐃ * 70);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(80 * ᐃ, 38 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 68, 70 * ᐃ, ᐃ * 75, 53 * ᐃ, ᐃ * 70, 68 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 65, ᐃ * 67, ᐃ * 65, ᐃ * 67, 60 * ᐃ, ᐃ * 65);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠᐃ]);
		return ΔⲆ
	}

	function ᐃⲆᐃⵠⲆᐃⲆ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 33;
		ΔⲆ.height = ᐃ * 35;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(12.75 * ᐃ, 7.1328125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 26.75, 8.1328125 * ᐃ, ᐃ * 27.75, 14.1328125 * ᐃ, ᐃ * 24.75, ᐃ * 23.1328125);
		Ⲇ.bezierCurveTo(19.75 * ᐃ, ᐃ * 31.1328125, 15.75 * ᐃ, 33.1328125 * ᐃ, ᐃ * 6.75, ᐃ * 26.1328125);
		Ⲇ.bezierCurveTo(ᐃ * .75, 19.1328125 * ᐃ, ᐃ * 4.75, ᐃ * 8.1328125, 12.75 * ᐃ, 7.1328125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃᐃ]);
		return ΔⲆ
	}

	function ᐃᐃⵠⵠᐃᐃᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 120 * ᐃ;
		ΔⲆ.height = ᐃ * 330;
		Ⲇ.translate(ᐃ * -60, ᐃ * -10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 188.5, ᐃ * 7.953125);
		Ⲇ.bezierCurveTo(ᐃ * 188.5, ᐃ * 334.953125, 188.5 * ᐃ, 332.953125 * ᐃ, ᐃ * 188.5, 339.953125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 166.5, 295.953125 * ᐃ, ᐃ * 145.5, 295.953125 * ᐃ, 139.5 * ᐃ, ᐃ * 282.953125);
		Ⲇ.bezierCurveTo(ᐃ * 124.5, ᐃ * 244.953125, ᐃ * 139.5, 243.953125 * ᐃ, ᐃ * 131.5, ᐃ * 212.953125);
		Ⲇ.bezierCurveTo(118.5 * ᐃ, 161.953125 * ᐃ, ᐃ * 69.5, 156.953125 * ᐃ, 74.5 * ᐃ, 92.953125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 85.5, 41.953125 * ᐃ, ᐃ * 158.5, ᐃ * 49.953125, 188.5 * ᐃ, 7.953125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃ]);
		return ΔⲆ
	}

	function ⲆⵠⲆᐃⵠⲆⲆ(ᐃ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 450 * ᐃ;
		ΔⲆ.height = ᐃ * 260;
		Ⲇ.translate(ᐃ * 10, 10 * ᐃ);
		if (1 == Ⲇᐃ) {
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * ΔⲆⲆΔⲆ, ᐃ * 5);
			Ⲇ.bezierCurveTo(381 * ᐃ, ᐃ * ΔΔⲆⲆ, ᐃ * 197, ᐃ * 4.5, 385 * ᐃ, ⵠᐃΔⲆ * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 397, ᐃ * ⵠᐃΔⲆ, ᐃ * 401, ᐃⲆⲆΔΔ * ᐃ, 399 * ᐃ, 23 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 367, ᐃ * 27, 367 * ᐃ, ᐃ * 27, ᐃ * 335, 31 * ᐃ);
			Ⲇ.bezierCurveTo(366.5 * ᐃ, 33.5 * ᐃ, ᐃ * 366.5, 33.5 * ᐃ, 398 * ᐃ, 36 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 398, 41.5 * ᐃ, ᐃ * 398, 41.5 * ᐃ, 398 * ᐃ, ᐃ * 47);
			Ⲇ.bezierCurveTo(ᐃ * 398, ᐃ * 56, 399 * ᐃ, ᐃ * 56, ᐃ * 386, ᐃ * 56);
			Ⲇ.bezierCurveTo(200.5 * ᐃ, ᐃ * 56.5, 200.5 * ᐃ, ᐃ * 56.5, 15 * ᐃ, ᐃ * 57);
			Ⲇ.bezierCurveTo(ᐃᐃⲆⲆ * ᐃ, ᐃ * 55, ᐃ * 4, 52 * ᐃ, ᐃ * ᐃⵠⵠⵠᐃ, 43 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 4, ᐃ * 30.5, ᐃⵠⵠⵠᐃ * ᐃ, ᐃ * 30.5, 4 * ᐃ, ⵠᐃᐃΔⲆⵠΔ * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 16, 18.5 * ᐃ, ᐃ * ᐃΔⲆⲆΔ, 18.5 * ᐃ, ᐃ * 28, ⲆⵠⵠⲆⵠ * ᐃ);
			Ⲇ.bezierCurveTo(18.5 * ᐃ, 12 * ᐃ, ᐃ * 18.5, ⵠᐃⵠΔᐃ * ᐃ, 9 * ᐃ, ᐃ * ΔⵠΔᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃⵠΔⵠ], ᐃ * 32);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 5, 70 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃᐃⵠᐃΔ * ᐃ, 58 * ᐃ, 5 * ᐃ, 55 * ᐃ, ᐃ * ⲆⲆᐃⲆⵠⲆΔ, ᐃ * 57);
			Ⲇ.bezierCurveTo(203 * ᐃ, 57 * ᐃ, ᐃ * 203, 57 * ᐃ, 389 * ᐃ, ᐃ * 57);
			Ⲇ.bezierCurveTo(400 * ᐃ, ᐃ * 57, ᐃ * 400, ᐃ * 59, 400 * ᐃ, ᐃ * 69);
			Ⲇ.bezierCurveTo(400.5 * ᐃ, 83.5 * ᐃ, 400.5 * ᐃ, 83.5 * ᐃ, ᐃ * 401, ᐃ * 98);
			Ⲇ.bezierCurveTo(ᐃ * 402, ᐃ * 108, 401 * ᐃ, 108 * ᐃ, 388 * ᐃ, ᐃ * 108);
			Ⲇ.bezierCurveTo(201.5 * ᐃ, ᐃ * 108, ᐃ * 201.5, ᐃ * 108, 15 * ᐃ, 108 * ᐃ);
			Ⲇ.bezierCurveTo(ΔᐃΔⲆ * ᐃ, 106 * ᐃ, ᐃ * ΔΔᐃᐃⵠ, ᐃ * 106, 5 * ᐃ, ᐃ * 87);
			Ⲇ.bezierCurveTo(ᐃ * 33, 84.5 * ᐃ, ᐃ * 33, ᐃ * 84.5, ᐃ * 61, ᐃ * 82);
			Ⲇ.bezierCurveTo(33.5 * ᐃ, 76.5 * ᐃ, 33.5 * ᐃ, ᐃ * 76.5, ᐃ * ᐃⵠⵠⵠⲆ, 71 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[Δⵠⵠᐃ], 32 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 19, 158 * ᐃ);
			Ⲇ.bezierCurveTo(2 * ᐃ, ᐃ * 159, ⵠΔⲆΔΔ * ᐃ, ᐃ * 156, ᐃ * 5, ᐃ * 118);
			Ⲇ.bezierCurveTo(ᐃᐃⵠΔ * ᐃ, 110 * ᐃ, ᐃ * ᐃᐃⲆⵠⲆ, ᐃ * 107, 26 * ᐃ, 109 * ᐃ);
			Ⲇ.bezierCurveTo(206.5 * ᐃ, 109 * ᐃ, ᐃ * 206.5, ᐃ * 109, 387 * ᐃ, ᐃ * 109);
			Ⲇ.bezierCurveTo(ᐃ * 400, 108 * ᐃ, 400 * ᐃ, ᐃ * 108, 398 * ᐃ, 127 * ᐃ);
			Ⲇ.bezierCurveTo(384.5 * ᐃ, ᐃ * 130, ᐃ * 384.5, 130 * ᐃ, ᐃ * 371, ᐃ * 133);
			Ⲇ.bezierCurveTo(385.5 * ᐃ, 138 * ᐃ, ᐃ * 385.5, ᐃ * 138, ᐃ * 400, ᐃ * 143);
			Ⲇ.bezierCurveTo(ᐃ * 402, 156 * ᐃ, ᐃ * 402, 162 * ᐃ, ᐃ * 385, 160 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃΔⲆΔ], 32 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(4 * ᐃ, 183 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 1, 163 * ᐃ, ᐃΔᐃΔ * ᐃ, 158 * ᐃ, 28 * ᐃ, 161 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 207.5, 161 * ᐃ, ᐃ * 207.5, ᐃ * 161, 387 * ᐃ, 161 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 401, ᐃ * 159, 400 * ᐃ, ᐃ * 164, 400 * ᐃ, ᐃ * 177);
			Ⲇ.bezierCurveTo(ᐃ * 364.5, ᐃ * 184, ᐃ * 364.5, 184 * ᐃ, 329 * ᐃ, ᐃ * 191);
			Ⲇ.bezierCurveTo(ᐃ * 364.5, ᐃ * 192.5, ᐃ * 364.5, 192.5 * ᐃ, 400 * ᐃ, 194 * ᐃ);
			Ⲇ.bezierCurveTo(403 * ᐃ, ᐃ * 209, 401 * ᐃ, ᐃ * 214, ᐃ * 385, 213 * ᐃ);
			Ⲇ.bezierCurveTo(201.5 * ᐃ, 213 * ᐃ, ᐃ * 201.5, ᐃ * 213, 18 * ᐃ, 213 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 3, ᐃ * 213, 2 * ᐃ, 213 * ᐃ, 4 * ᐃ, ᐃ * 198);
			Ⲇ.bezierCurveTo(12.5 * ᐃ, ᐃ * 193, ᐃ * 12.5, ᐃ * 193, ᐃ * 21, ᐃ * 188);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[3], 32 * ᐃ);
			ᐃΔΔ(Ⲇ, ᐃ * 41, ᐃ * 30, ᐃ * 14.7648230602334);
			ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔΔᐃΔ], ᐃ * 32);
			ᐃΔΔ(Ⲇ, 369 * ᐃ, 30 * ᐃ, 15.556349186104045 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⲆ], Δⵠ[3], ᐃ * 32);
			ᐃΔΔ(Ⲇ, ᐃ * 364, ᐃ * 190, 15.620499351813308 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[3], ᐃ * 32);
			ᐃΔΔ(Ⲇ, 41 * ᐃ, 186 * ᐃ, 15.556349186104045 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ⵠΔΔⲆᐃ], Δⵠ[3], ᐃ * 32)
		} else if (2 == Ⲇᐃ) {
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(9 * ᐃ, 5 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 381, ᐃ * ΔᐃΔᐃ, 197 * ᐃ, 4.5 * ᐃ, ᐃ * 385, 4 * ᐃ);
			Ⲇ.bezierCurveTo(397 * ᐃ, 4 * ᐃ, ᐃ * 401, ᐃⲆᐃⲆ * ᐃ, 399 * ᐃ, 23 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 367, 27 * ᐃ, 367 * ᐃ, ᐃ * 27, 335 * ᐃ, 31 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 366.5, 33.5 * ᐃ, 366.5 * ᐃ, ᐃ * 33.5, 398 * ᐃ, ᐃ * 36);
			Ⲇ.bezierCurveTo(ᐃ * 398, ᐃ * 41.5, 398 * ᐃ, 41.5 * ᐃ, ᐃ * 398, 47 * ᐃ);
			Ⲇ.bezierCurveTo(398 * ᐃ, 56 * ᐃ, ᐃ * 399, 56 * ᐃ, 386 * ᐃ, ᐃ * 56);
			Ⲇ.bezierCurveTo(200.5 * ᐃ, ᐃ * 56.5, ᐃ * 200.5, 56.5 * ᐃ, ᐃ * ⵠΔᐃⵠⲆ, 57 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 2, ᐃ * 55, ΔⵠⵠⲆ * ᐃ, ᐃ * 52, ᐃ * ⵠⵠᐃΔ, 43 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * ⵠΔⲆΔΔ, 30.5 * ᐃ, 4 * ᐃ, 30.5 * ᐃ, 4 * ᐃ, ᐃ * ΔⵠΔⵠⲆⲆⵠ);
			Ⲇ.bezierCurveTo(ᐃ * ⲆⲆⲆᐃΔ, 18.5 * ᐃ, ⲆⵠᐃⵠΔᐃΔ * ᐃ, 18.5 * ᐃ, ᐃ * 28, ⵠⲆⵠᐃΔ * ᐃ);
			Ⲇ.bezierCurveTo(18.5 * ᐃ, ᐃ * 12, ᐃ * 18.5, 12 * ᐃ, ⵠᐃΔⲆⲆΔΔ * ᐃ, ᐃ * 5);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⲆΔⵠⵠⵠ], Δⵠ[3], 32 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 5, 70 * ᐃ);
			Ⲇ.bezierCurveTo(5 * ᐃ, ᐃ * 58, ᐃ * 5, ᐃ * 55, ΔᐃΔⲆⲆⵠᐃ * ᐃ, 57 * ᐃ);
			Ⲇ.bezierCurveTo(203 * ᐃ, ᐃ * 57, 203 * ᐃ, 57 * ᐃ, 389 * ᐃ, ᐃ * 57);
			Ⲇ.bezierCurveTo(400 * ᐃ, 57 * ᐃ, ᐃ * 400, ᐃ * 59, 400 * ᐃ, 69 * ᐃ);
			Ⲇ.bezierCurveTo(400.5 * ᐃ, ᐃ * 83.5, ᐃ * 400.5, ᐃ * 83.5, 401 * ᐃ, 98 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 402, ᐃ * 108, ᐃ * 401, ᐃ * 108, 388 * ᐃ, 108 * ᐃ);
			Ⲇ.bezierCurveTo(201.5 * ᐃ, 108 * ᐃ, ᐃ * 201.5, ᐃ * 108, ᐃ * ⲆΔΔΔⵠ, ᐃ * 108);
			Ⲇ.bezierCurveTo(ᐃ * ᐃᐃΔ, 106 * ᐃ, ΔⲆⲆⵠ * ᐃ, ᐃ * 106, 5 * ᐃ, ᐃ * 87);
			Ⲇ.bezierCurveTo(ᐃ * 33, 84.5 * ᐃ, 33 * ᐃ, 84.5 * ᐃ, 61 * ᐃ, ᐃ * 82);
			Ⲇ.bezierCurveTo(ᐃ * 33.5, ᐃ * 76.5, 33.5 * ᐃ, 76.5 * ᐃ, 6 * ᐃ, ᐃ * 71);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[Δⵠⵠᐃ], ᐃ * 32);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * ᐃᐃⲆⵠᐃ, 158 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 2, 159 * ᐃ, ᐃ * ᐃⲆⲆΔΔ, 156 * ᐃ, ᐃ * ΔⲆⵠⵠ, ᐃ * 118);
			Ⲇ.bezierCurveTo(4 * ᐃ, 110 * ᐃ, ᐃ * ᐃⵠⲆᐃΔ, 107 * ᐃ, 26 * ᐃ, ᐃ * 109);
			Ⲇ.bezierCurveTo(206.5 * ᐃ, 109 * ᐃ, ᐃ * 206.5, 109 * ᐃ, ᐃ * 387, 109 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 400, ᐃ * 108, 400 * ᐃ, 108 * ᐃ, 398 * ᐃ, 127 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 384.5, 130 * ᐃ, 384.5 * ᐃ, 130 * ᐃ, ᐃ * 371, 133 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 385.5, 138 * ᐃ, ᐃ * 385.5, 138 * ᐃ, 400 * ᐃ, ᐃ * 143);
			Ⲇ.bezierCurveTo(ᐃ * 402, ᐃ * 156, 402 * ᐃ, 162 * ᐃ, ᐃ * 385, ᐃ * 160);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⵠ], Δⵠ[ⲆᐃᐃΔ], ᐃ * 32);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 4, 183 * ᐃ);
			Ⲇ.bezierCurveTo(ΔᐃⵠⲆ * ᐃ, 163 * ᐃ, ᐃ * 4, ᐃ * 158, ᐃ * 28, 161 * ᐃ);
			Ⲇ.bezierCurveTo(207.5 * ᐃ, 161 * ᐃ, ᐃ * 207.5, 161 * ᐃ, 387 * ᐃ, ᐃ * 161);
			Ⲇ.bezierCurveTo(ᐃ * 401, 159 * ᐃ, 400 * ᐃ, 164 * ᐃ, 400 * ᐃ, ᐃ * 177);
			Ⲇ.bezierCurveTo(364.5 * ᐃ, 184 * ᐃ, 364.5 * ᐃ, ᐃ * 184, ᐃ * 329, 191 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 364.5, 192.5 * ᐃ, ᐃ * 364.5, ᐃ * 192.5, 400 * ᐃ, 194 * ᐃ);
			Ⲇ.bezierCurveTo(403 * ᐃ, ᐃ * 209, ᐃ * 401, ᐃ * 214, 385 * ᐃ, 213 * ᐃ);
			Ⲇ.bezierCurveTo(201.5 * ᐃ, 213 * ᐃ, 201.5 * ᐃ, ᐃ * 213, ᐃ * ΔⵠΔⵠⲆⲆⵠ, 213 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 3, 213 * ᐃ, ᐃ * ᐃⲆᐃᐃ, ᐃ * 213, 4 * ᐃ, ᐃ * 198);
			Ⲇ.bezierCurveTo(ᐃ * 12.5, 193 * ᐃ, ᐃ * 12.5, 193 * ᐃ, 21 * ᐃ, ᐃ * 188);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃⲆ], Δⵠ[3], ᐃ * 32);
			ᐃΔΔ(Ⲇ, ᐃ * 41, 30 * ᐃ, ᐃ * 14.7648230602334);
			ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[3], 32 * ᐃ);
			ᐃΔΔ(Ⲇ, 369 * ᐃ, 30 * ᐃ, 15.556349186104045 * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⲆ], Δⵠ[ᐃΔⲆΔ], ᐃ * 32);
			ᐃΔΔ(Ⲇ, ᐃ * 364, ᐃ * 190, ᐃ * 15.620499351813308);
			ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[3], ᐃ * 32);
			ᐃΔΔ(Ⲇ, ᐃ * 41, ᐃ * 186, ᐃ * 15.556349186104045);
			ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃⵠΔᐃ], ᐃ * 32)
		}
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 9, ᐃ * 5);
		Ⲇ.bezierCurveTo(381 * ᐃ, ⲆⲆⲆⲆ * ᐃ, 197 * ᐃ, ᐃ * 4.5, 385 * ᐃ, ᐃ * ⵠᐃΔⲆ);
		Ⲇ.bezierCurveTo(ᐃ * 397, ⵠⵠᐃΔ * ᐃ, 401 * ᐃ, ⵠⲆΔⵠ * ᐃ, ᐃ * 399, ᐃ * 23);
		Ⲇ.bezierCurveTo(ᐃ * 367, 27 * ᐃ, ᐃ * 367, ᐃ * 27, 335 * ᐃ, ᐃ * 31);
		Ⲇ.bezierCurveTo(366.5 * ᐃ, ᐃ * 33.5, ᐃ * 366.5, 33.5 * ᐃ, 398 * ᐃ, 36 * ᐃ);
		Ⲇ.bezierCurveTo(398 * ᐃ, 41.5 * ᐃ, ᐃ * 398, 41.5 * ᐃ, 398 * ᐃ, 47 * ᐃ);
		Ⲇ.bezierCurveTo(398 * ᐃ, 56 * ᐃ, 399 * ᐃ, ᐃ * 56, 386 * ᐃ, ᐃ * 56);
		Ⲇ.bezierCurveTo(ᐃ * 200.5, 56.5 * ᐃ, ᐃ * 200.5, 56.5 * ᐃ, ᐃ * ᐃⵠⵠᐃᐃ, 57 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * ᐃᐃΔⵠ, 55 * ᐃ, ᐃ * 4, ᐃ * 52, ᐃ * 4, ᐃ * 43);
		Ⲇ.bezierCurveTo(ᐃ * ᐃⲆⵠᐃⵠ, 30.5 * ᐃ, ᐃΔⵠⵠ * ᐃ, ᐃ * 30.5, ᐃ * 4, ΔⲆⵠᐃᐃⵠⵠ * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * ⲆⲆⲆᐃΔ, ᐃ * 18.5, 16 * ᐃ, 18.5 * ᐃ, 28 * ᐃ, 19 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 18.5, ᐃ * 12, 18.5 * ᐃ, ᐃ * 12, ᐃ * 9, 5 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⵠΔ], Δⵠ[ΔΔᐃᐃ], ᐃ * ΔΔᐃⲆⲆⵠᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(5 * ᐃ, 70 * ᐃ);
		Ⲇ.bezierCurveTo(Ⲇᐃⵠᐃ * ᐃ, 58 * ᐃ, ᐃ * ᐃΔΔⲆⵠ, ᐃ * 55, ΔᐃⲆⵠⵠΔΔ * ᐃ, 57 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 203, ᐃ * 57, ᐃ * 203, ᐃ * 57, 389 * ᐃ, ᐃ * 57);
		Ⲇ.bezierCurveTo(400 * ᐃ, ᐃ * 57, ᐃ * 400, 59 * ᐃ, 400 * ᐃ, 69 * ᐃ);
		Ⲇ.bezierCurveTo(400.5 * ᐃ, ᐃ * 83.5, 400.5 * ᐃ, 83.5 * ᐃ, ᐃ * 401, ᐃ * 98);
		Ⲇ.bezierCurveTo(402 * ᐃ, ᐃ * 108, 401 * ᐃ, ᐃ * 108, 388 * ᐃ, 108 * ᐃ);
		Ⲇ.bezierCurveTo(201.5 * ᐃ, ᐃ * 108, 201.5 * ᐃ, 108 * ᐃ, 15 * ᐃ, 108 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * ⵠΔᐃ, 106 * ᐃ, 5 * ᐃ, 106 * ᐃ, ᐃᐃᐃΔⵠ * ᐃ, 87 * ᐃ);
		Ⲇ.bezierCurveTo(33 * ᐃ, ᐃ * 84.5, 33 * ᐃ, ᐃ * 84.5, ᐃ * 61, 82 * ᐃ);
		Ⲇ.bezierCurveTo(33.5 * ᐃ, 76.5 * ᐃ, 33.5 * ᐃ, ᐃ * 76.5, 6 * ᐃ, 71 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ⲆⵠⲆⲆ], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 19, 158 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * ⲆⵠΔⵠ, 159 * ᐃ, 4 * ᐃ, ᐃ * 156, ᐃ * ᐃᐃᐃᐃⵠ, ᐃ * 118);
		Ⲇ.bezierCurveTo(ᐃ * ᐃᐃΔΔᐃ, ᐃ * 110, 6 * ᐃ, 107 * ᐃ, ᐃ * 26, ᐃ * 109);
		Ⲇ.bezierCurveTo(206.5 * ᐃ, ᐃ * 109, ᐃ * 206.5, ᐃ * 109, 387 * ᐃ, ᐃ * 109);
		Ⲇ.bezierCurveTo(400 * ᐃ, ᐃ * 108, ᐃ * 400, ᐃ * 108, ᐃ * 398, 127 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 384.5, 130 * ᐃ, ᐃ * 384.5, ᐃ * 130, ᐃ * 371, ᐃ * 133);
		Ⲇ.bezierCurveTo(ᐃ * 385.5, ᐃ * 138, 385.5 * ᐃ, 138 * ᐃ, 400 * ᐃ, ᐃ * 143);
		Ⲇ.bezierCurveTo(402 * ᐃ, 156 * ᐃ, ᐃ * 402, ᐃ * 162, 385 * ᐃ, ᐃ * 160);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃᐃ], Δⵠ[ⵠⵠⵠ], ⵠⵠᐃᐃᐃⲆⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 4, 183 * ᐃ);
		Ⲇ.bezierCurveTo(ΔᐃⵠⲆ * ᐃ, ᐃ * 163, 4 * ᐃ, ᐃ * 158, 28 * ᐃ, 161 * ᐃ);
		Ⲇ.bezierCurveTo(207.5 * ᐃ, ᐃ * 161, ᐃ * 207.5, ᐃ * 161, ᐃ * 387, 161 * ᐃ);
		Ⲇ.bezierCurveTo(401 * ᐃ, ᐃ * 159, ᐃ * 400, ᐃ * 164, 400 * ᐃ, ᐃ * 177);
		Ⲇ.bezierCurveTo(364.5 * ᐃ, ᐃ * 184, ᐃ * 364.5, ᐃ * 184, 329 * ᐃ, ᐃ * 191);
		Ⲇ.bezierCurveTo(ᐃ * 364.5, 192.5 * ᐃ, 364.5 * ᐃ, ᐃ * 192.5, ᐃ * 400, 194 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 403, ᐃ * 209, 401 * ᐃ, 214 * ᐃ, 385 * ᐃ, ᐃ * 213);
		Ⲇ.bezierCurveTo(201.5 * ᐃ, ᐃ * 213, 201.5 * ᐃ, ᐃ * 213, ᐃ * ΔΔΔΔᐃ, ᐃ * 213);
		Ⲇ.bezierCurveTo(ᐃ * 3, 213 * ᐃ, ᐃ * ΔΔⲆⲆ, ᐃ * 213, 4 * ᐃ, 198 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 12.5, 193 * ᐃ, 12.5 * ᐃ, 193 * ᐃ, ᐃ * 21, ᐃ * 188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[0], ᐃ * 12);
		ᐃΔΔ(Ⲇ, 41 * ᐃ, ᐃ * 30, ᐃ * 14.7648230602334);
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[0], ᐃᐃΔΔⵠ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 369, ᐃ * 30, ᐃ * 15.556349186104045);
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔⵠ], Δⵠ[ⵠⵠⵠΔ], ᐃ * 12);
		ᐃΔΔ(Ⲇ, ᐃ * 364, 190 * ᐃ, ᐃ * 15.620499351813308);
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ΔΔᐃ], ᐃ * ⵠⵠᐃᐃᐃⲆⲆ);
		ᐃΔΔ(Ⲇ, ᐃ * 41, ᐃ * 186, ᐃ * 15.556349186104045);
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[0], ᐃ * 12);
		return ΔⲆ
	}

	function ⲆΔⲆⲆᐃΔⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 180 * ᐃ;
		ΔⲆ.height = ᐃ * 120;
		Ⲇ.translate(-65 * ᐃ, -35 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ⲆⵠⲆⲆ, ᐃ * ⲆⲆⵠⲆⵠ);
		Ⲇ.save();
		Ⲇ.translate(150.5 * ᐃ, 63.84375 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -67, -16.5 * ᐃ, ᐃ * 134, ᐃ * 33, ᐃ * ⵠⵠᐃᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 80.5, ᐃ * 75.34375);
		Ⲇ.bezierCurveTo(ᐃ * 83, ᐃ * 106.34375, ᐃ * 83, 106.34375 * ᐃ, ᐃ * 85.5, ᐃ * 137.34375);
		Ⲇ.bezierCurveTo(ᐃ * 93, ᐃ * 135.84375, ᐃ * 93, 135.84375 * ᐃ, ᐃ * 100.5, ᐃ * 134.34375);
		Ⲇ.bezierCurveTo(99.5 * ᐃ, ᐃ * 100.84375, ᐃ * 99.5, 100.84375 * ᐃ, 98.5 * ᐃ, 67.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(206.5 * ᐃ, 71.34375 * ᐃ);
		Ⲇ.bezierCurveTo(203.5 * ᐃ, ᐃ * 104.34375, ᐃ * 203.5, ᐃ * 104.34375, ᐃ * 200.5, 137.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 208.5, ᐃ * 137.34375, 208.5 * ᐃ, ᐃ * 137.34375, 216.5 * ᐃ, 137.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 219, 102.84375 * ᐃ, ᐃ * 219, ᐃ * 102.84375, ᐃ * 221.5, 68.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 136.5, ᐃ * 75.34375);
		Ⲇ.bezierCurveTo(ᐃ * 139, 94.34375 * ᐃ, ᐃ * 139, 94.34375 * ᐃ, 141.5 * ᐃ, ᐃ * 113.34375);
		Ⲇ.bezierCurveTo(ᐃ * 149.5, 115.34375 * ᐃ, 149.5 * ᐃ, ᐃ * 115.34375, ᐃ * 157.5, ᐃ * 117.34375);
		Ⲇ.bezierCurveTo(162 * ᐃ, ᐃ * 97.34375, 162 * ᐃ, 97.34375 * ᐃ, ᐃ * 166.5, ᐃ * 77.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆ]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 152.5, ᐃ * 80.84375);
		Ⲇ.rotate(3.12);
		ᐃΔⵠ(Ⲇ, ᐃ * -73, -20.5 * ᐃ, 146 * ᐃ, ᐃ * 41, ΔΔᐃᐃⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ΔΔᐃ, ᐃ * -10);
		Ⲇ.save();
		Ⲇ.translate(150.5 * ᐃ, 63.84375 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -67, ᐃ * -16.5, 134 * ᐃ, ᐃ * 33, ᐃ * 5);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔ], Δⵠ[2], ᐃⲆⵠᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 80.5, 75.34375 * ᐃ);
		Ⲇ.bezierCurveTo(83 * ᐃ, 106.34375 * ᐃ, ᐃ * 83, ᐃ * 106.34375, 85.5 * ᐃ, 137.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 93, 135.84375 * ᐃ, 93 * ᐃ, 135.84375 * ᐃ, 100.5 * ᐃ, ᐃ * 134.34375);
		Ⲇ.bezierCurveTo(99.5 * ᐃ, 100.84375 * ᐃ, 99.5 * ᐃ, ᐃ * 100.84375, 98.5 * ᐃ, ᐃ * 67.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(206.5 * ᐃ, ᐃ * 71.34375);
		Ⲇ.bezierCurveTo(ᐃ * 203.5, 104.34375 * ᐃ, ᐃ * 203.5, ᐃ * 104.34375, ᐃ * 200.5, 137.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 208.5, ᐃ * 137.34375, ᐃ * 208.5, 137.34375 * ᐃ, 216.5 * ᐃ, 137.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 219, 102.84375 * ᐃ, 219 * ᐃ, 102.84375 * ᐃ, ᐃ * 221.5, ᐃ * 68.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ᐃᐃΔⵠ], ⵠᐃᐃΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 136.5, ᐃ * 75.34375);
		Ⲇ.bezierCurveTo(139 * ᐃ, 94.34375 * ᐃ, 139 * ᐃ, 94.34375 * ᐃ, 141.5 * ᐃ, ᐃ * 113.34375);
		Ⲇ.bezierCurveTo(149.5 * ᐃ, ᐃ * 115.34375, 149.5 * ᐃ, ᐃ * 115.34375, 157.5 * ᐃ, ᐃ * 117.34375);
		Ⲇ.bezierCurveTo(162 * ᐃ, 97.34375 * ᐃ, ᐃ * 162, ᐃ * 97.34375, ᐃ * 166.5, 77.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 4 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 152.5, 80.84375 * ᐃ);
		Ⲇ.rotate(3.12);
		ᐃΔⵠ(Ⲇ, ᐃ * -73, -20.5 * ᐃ, ᐃ * 146, 41 * ᐃ, 5 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔ], Δⵠ[ΔᐃⵠΔ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 83.5, 73.34375 * ᐃ);
		Ⲇ.bezierCurveTo(93.5 * ᐃ, 70.34375 * ᐃ, ᐃ * 105.5, 70.34375 * ᐃ, ᐃ * 124.5, ᐃ * 72.34375);
		Ⲇ.bezierCurveTo(132.5 * ᐃ, ᐃ * 78.34375, 162.5 * ᐃ, 80.34375 * ᐃ, ᐃ * 176.5, ᐃ * 76.34375);
		Ⲇ.bezierCurveTo(194.5 * ᐃ, ᐃ * 69.34375, 192.5 * ᐃ, 68.34375 * ᐃ, 199.5 * ᐃ, 63.34375 * ᐃ);
		Ⲇ.bezierCurveTo(204.5 * ᐃ, 63.34375 * ᐃ, ᐃ * 204.5, 63.34375 * ᐃ, ᐃ * 209.5, ᐃ * 63.34375);
		Ⲇ.bezierCurveTo(ᐃ * 153.5, ᐃ * 82.34375, ᐃ * 157.5, 85.34375 * ᐃ, 209.5 * ᐃ, ᐃ * 63.34375);
		Ⲇ.bezierCurveTo(ᐃ * 194.5, 88.34375 * ᐃ, 162.5 * ᐃ, 87.34375 * ᐃ, 149.5 * ᐃ, ᐃ * 88.34375);
		Ⲇ.bezierCurveTo(129.5 * ᐃ, ᐃ * 81.34375, ᐃ * 103.5, ᐃ * 75.34375, ᐃ * 83.5, 82.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(137.5 * ᐃ, ᐃ * 65.34375);
		Ⲇ.bezierCurveTo(150.5 * ᐃ, ᐃ * 76.34375, ᐃ * 170.5, ᐃ * 71.34375, 174.5 * ᐃ, ᐃ * 65.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(221.5 * ᐃ, ᐃ * 85.34375);
		Ⲇ.bezierCurveTo(ᐃ * 211.5, ᐃ * 79.34375, 191.5 * ᐃ, 88.34375 * ᐃ, 181.5 * ᐃ, ᐃ * 96.34375);
		Ⲇ.bezierCurveTo(ᐃ * 201.5, ᐃ * 96.34375, ᐃ * 201.5, 96.34375 * ᐃ, ᐃ * 221.5, 96.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⵠⵠⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(84.5 * ᐃ, 89.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 102.5, ᐃ * 87.34375, 112.5 * ᐃ, ᐃ * 88.34375, 119.5 * ᐃ, ᐃ * 97.34375);
		Ⲇ.bezierCurveTo(ᐃ * 102, ᐃ * 98.34375, ᐃ * 102, ᐃ * 98.34375, ᐃ * 84.5, 99.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(208.5 * ᐃ, 104.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 208.5, ᐃ * 110.34375, ᐃ * 208.5, 110.34375 * ᐃ, 208.5 * ᐃ, ᐃ * 116.34375);
		Ⲇ.bezierCurveTo(ᐃ * 211.5, ᐃ * 110.34375, ᐃ * 211.5, 110.34375 * ᐃ, ᐃ * 214.5, ᐃ * 104.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 87.5, ᐃ * 117.34375);
		Ⲇ.bezierCurveTo(ᐃ * 92, ᐃ * 118.84375, 92 * ᐃ, ᐃ * 118.84375, 96.5 * ᐃ, 120.34375 * ᐃ);
		Ⲇ.bezierCurveTo(93 * ᐃ, ᐃ * 123.84375, ᐃ * 93, ᐃ * 123.84375, 89.5 * ᐃ, 127.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(107.5 * ᐃ, ᐃ * 51.34375);
		Ⲇ.bezierCurveTo(122.5 * ᐃ, ᐃ * 54.34375, 122.5 * ᐃ, ᐃ * 54.34375, ᐃ * 137.5, ᐃ * 57.34375);
		Ⲇ.bezierCurveTo(118 * ᐃ, ᐃ * 57.34375, 118 * ᐃ, 57.34375 * ᐃ, ᐃ * 98.5, 57.34375 * ᐃ);
		Ⲇ.bezierCurveTo(94.5 * ᐃ, 54.84375 * ᐃ, ᐃ * 94.5, 54.84375 * ᐃ, ᐃ * 90.5, ᐃ * 52.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 170.5, 52.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 179.5, ᐃ * 51.84375, ᐃ * 179.5, 51.84375 * ᐃ, 188.5 * ᐃ, 51.34375 * ᐃ);
		Ⲇ.bezierCurveTo(187.5 * ᐃ, 53.84375 * ᐃ, 187.5 * ᐃ, ᐃ * 53.84375, ᐃ * 186.5, 56.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 177, ᐃ * 56.34375, 177 * ᐃ, ᐃ * 56.34375, ᐃ * 167.5, 56.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 80.5, 69.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 86.5, 70.34375 * ᐃ, ᐃ * 86.5, 70.34375 * ᐃ, 92.5 * ᐃ, 71.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 86, ᐃ * 73.34375, 86 * ᐃ, ᐃ * 73.34375, 79.5 * ᐃ, 75.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(222.5 * ᐃ, 75.34375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 214.5, 76.34375 * ᐃ, ᐃ * 214.5, 76.34375 * ᐃ, 206.5 * ᐃ, ᐃ * 77.34375);
		Ⲇ.bezierCurveTo(ᐃ * 216.5, 79.34375 * ᐃ, ᐃ * 216.5, 79.34375 * ᐃ, 226.5 * ᐃ, 81.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 116.5, 100.34375 * ᐃ);
		Ⲇ.bezierCurveTo(128 * ᐃ, ᐃ * 97.34375, ᐃ * 128, 97.34375 * ᐃ, ᐃ * 139.5, ᐃ * 94.34375);
		Ⲇ.bezierCurveTo(ᐃ * 140, 96.84375 * ᐃ, ᐃ * 140, 96.84375 * ᐃ, 140.5 * ᐃ, 99.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 112.5, ᐃ * 48.34375);
		Ⲇ.bezierCurveTo(115.5 * ᐃ, 50.84375 * ᐃ, ᐃ * 115.5, 50.84375 * ᐃ, ᐃ * 118.5, 53.34375 * ᐃ);
		Ⲇ.bezierCurveTo(131 * ᐃ, 50.84375 * ᐃ, ᐃ * 131, ᐃ * 50.84375, ᐃ * 143.5, ᐃ * 48.34375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 216.5, 109.34375 * ᐃ);
		Ⲇ.bezierCurveTo(213 * ᐃ, ᐃ * 114.84375, 213 * ᐃ, 114.84375 * ᐃ, ᐃ * 209.5, ᐃ * 120.34375);
		Ⲇ.bezierCurveTo(212 * ᐃ, 118.84375 * ᐃ, ᐃ * 212, ᐃ * 118.84375, 214.5 * ᐃ, 117.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(86.5 * ᐃ, 133.34375 * ᐃ);
		Ⲇ.bezierCurveTo(89 * ᐃ, ᐃ * 127.34375, 89 * ᐃ, ᐃ * 127.34375, 91.5 * ᐃ, 121.34375 * ᐃ);
		Ⲇ.bezierCurveTo(92.5 * ᐃ, ᐃ * 127.34375, ᐃ * 92.5, ᐃ * 127.34375, ᐃ * 93.5, 133.34375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠΔ]);
		return ΔⲆ
	}

	function ΔⵠᐃⲆⲆᐃⵠ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 110;
		ΔⲆ.height = ᐃ * 110;
		Ⲇ.globalAlpha = .2;
		ᐃΔΔ(Ⲇ, 55 * ᐃ, ᐃ * 55, ᐃ * 55);
		ΔΔ(Ⲇ, Δⵠ[0]);
		return ΔⲆ
	}

	function ⵠⵠⲆᐃᐃᐃⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 170 * ᐃ;
		ΔⲆ.height = 170 * ᐃ;
		Ⲇ.translate(0, 3 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔⵠⲆⲆ;
		Ⲇ.save();
		Ⲇ.translate(85 * ᐃ, 95 * ᐃ);
		Ⲇ.rotate(1.4);
		ᐃᐃⲆΔ(Ⲇ, ⲆΔⲆⵠⵠ, 60 * ᐃ, ᐃ * ⲆΔⵠⵠΔ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(85 * ᐃ, 82 * ᐃ);
		for (var Ⲇᐃ = 0; Ⲇᐃ < ΔΔⵠᐃⵠ; Ⲇᐃ++) {
			Ⲇ.rotate(Math.PI / ᐃᐃᐃΔⵠ);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 65, Ⲇᐃⵠ);
			ᐃᐃⲆΔ(Ⲇ, ⲆⵠⲆᐃ, 21 * ᐃ, ᐃ * 4);
			ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[2], ⵠΔⲆΔΔ * ᐃ);
			Ⲇ.restore()
		}
		Ⲇ.save();
		Ⲇ.translate(0 * ᐃ, ⲆⲆⵠⲆ * ᐃ);
		Ⲇ.rotate(.2);
		ᐃᐃⲆΔ(Ⲇ, ΔⲆⲆΔⲆ, ᐃ * 60, ᐃᐃᐃΔΔ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⲆΔᐃΔⵠ], ᐃ * 4);
		Ⲇ.rotate(-.32);
		ᐃᐃⲆΔ(Ⲇ, ᐃᐃᐃᐃᐃⲆᐃ, 38 * ᐃ, 10 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[ⵠⵠⲆⵠᐃ], ᐃ * 4);
		Ⲇ.rotate(.68);
		ᐃᐃⲆΔ(Ⲇ, ᐃΔⲆⲆⵠ, ᐃ * ⵠΔⵠᐃⲆ, ᐃ * ΔⲆⲆⲆΔⵠᐃ);
		ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[8], ΔⲆⲆⵠⵠ * ᐃ);
		Ⲇ.restore();
		return ΔⲆ
	}

	function ⵠΔᐃⵠᐃⵠⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 400;
		ΔⲆ.height = ᐃ * 170;
		Ⲇ.translate(ⵠⵠⲆⵠ, ᐃ * -170);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(159.5 * ᐃ, ᐃ * 322.0625);
		Ⲇ.bezierCurveTo(ᐃ * 240.5, ᐃ * 293.0625, ᐃ * 240.5, 293.0625 * ᐃ, 321.5 * ᐃ, ᐃ * 264.0625);
		Ⲇ.bezierCurveTo(ᐃ * 276.5, 230.0625 * ᐃ, 276.5 * ᐃ, ᐃ * 230.0625, ᐃ * 231.5, 196.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 158.5, 221.5625 * ᐃ, ᐃ * 158.5, 221.5625 * ᐃ, ᐃ * 85.5, 247.0625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[Δᐃⵠⵠ], ᐃ * ⲆⵠᐃⵠⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(212.5 * ᐃ, 270.0625 * ᐃ);
		Ⲇ.bezierCurveTo(235 * ᐃ, 261.5625 * ᐃ, ᐃ * 235, 261.5625 * ᐃ, 257.5 * ᐃ, 253.0625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[0], ⲆᐃᐃⵠᐃⲆΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 193.5, ᐃ * 226.0625);
		Ⲇ.bezierCurveTo(204.5 * ᐃ, 242.0625 * ᐃ, ᐃ * 242.5, 237.0625 * ᐃ, ᐃ * 251.5, 225.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 246.5, 195.0625 * ᐃ, ᐃ * 205.5, ᐃ * 190.0625, ᐃ * 193.5, ᐃ * 227.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 164.5, 245.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 182.5, 264.0625 * ᐃ, ᐃ * 252.5, ᐃ * 258.0625, ᐃ * 276.5, ᐃ * 244.0625);
		Ⲇ.bezierCurveTo(ᐃ * 265.5, 226.0625 * ᐃ, ᐃ * 244.5, ᐃ * 231.0625, 229.5 * ᐃ, 230.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 205.5, 227.0625 * ᐃ, 175.5 * ᐃ, 202.0625 * ᐃ, ᐃ * 162.5, 244.0625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔⵠ], Δⵠ[ΔⲆΔⲆ], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(115.5 * ᐃ, ᐃ * 260.0625);
		Ⲇ.bezierCurveTo(ᐃ * 134.5, 279.0625 * ᐃ, 170.5 * ᐃ, 275.0625 * ᐃ, 191.5 * ᐃ, 257.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 174.5, 208.0625 * ᐃ, 142.5 * ᐃ, ᐃ * 197.0625, ᐃ * 116.5, ᐃ * 259.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ⲆⵠⲆᐃ], ᐃ * ΔⵠⲆⲆⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(152.5 * ᐃ, 278.0625 * ᐃ);
		Ⲇ.bezierCurveTo(165.5 * ᐃ, ᐃ * 294.0625, ᐃ * 200.5, ᐃ * 287.0625, 216.5 * ᐃ, ᐃ * 278.0625);
		Ⲇ.bezierCurveTo(206.5 * ᐃ, 247.0625 * ᐃ, ᐃ * 173.5, 233.0625 * ᐃ, ᐃ * 153.5, 276.0625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ᐃΔⲆΔ], ⲆΔᐃⲆⵠⲆΔ * ᐃ);
		return ΔⲆ
	}

	function ᐃΔⵠΔⲆᐃᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 158;
		ΔⲆ.height = 201 * ᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(96.5 * ᐃ, ᐃ * 76.421875);
		Ⲇ.bezierCurveTo(100.5 * ᐃ, ᐃ * 64.421875, 103.5 * ᐃ, 62.421875 * ᐃ, 110.5 * ᐃ, 65.421875 * ᐃ);
		Ⲇ.bezierCurveTo(116.5 * ᐃ, 66.421875 * ᐃ, ᐃ * 117.5, ᐃ * 67.421875, 112.5 * ᐃ, 73.421875 * ᐃ);
		Ⲇ.bezierCurveTo(107 * ᐃ, 79.921875 * ᐃ, ᐃ * 107, 79.921875 * ᐃ, ᐃ * 101.5, 86.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[ⵠᐃⵠΔⲆ], 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(61.5 * ᐃ, 78.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 57.5, 73.421875 * ᐃ, 51.5 * ᐃ, ᐃ * 66.421875, 45.5 * ᐃ, 68.421875 * ᐃ);
		Ⲇ.bezierCurveTo(32.5 * ᐃ, 73.421875 * ᐃ, 38.5 * ᐃ, ᐃ * 75.421875, 46.5 * ᐃ, 81.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 51.5, ᐃ * 84.921875, 51.5 * ᐃ, ᐃ * 84.921875, ᐃ * 56.5, 88.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[8], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(116.5 * ᐃ, ᐃ * 127.421875);
		Ⲇ.bezierCurveTo(ᐃ * 124.5, ᐃ * 108.421875, 129.5 * ᐃ, 104.421875 * ᐃ, 141.5 * ᐃ, 107.421875 * ᐃ);
		Ⲇ.bezierCurveTo(156.5 * ᐃ, ᐃ * 112.421875, 153.5 * ᐃ, 113.421875 * ᐃ, 132.5 * ᐃ, ᐃ * 134.421875);
		Ⲇ.bezierCurveTo(ᐃ * 123.5, ᐃ * 141.921875, 123.5 * ᐃ, 141.921875 * ᐃ, 114.5 * ᐃ, ᐃ * 149.421875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⵠΔⵠ], Δⵠ[8], ᐃ * ᐃᐃᐃΔΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 41.5, ᐃ * 134.421875);
		Ⲇ.bezierCurveTo(ᐃ * 30.5, 119.421875 * ᐃ, ᐃ * 25.5, ᐃ * 111.421875, ᐃ * 12.5, 115.421875 * ᐃ);
		Ⲇ.bezierCurveTo(4.5 * ᐃ, ᐃ * 120.421875, ᐃ * 4.5, ᐃ * 121.421875, 26.5 * ᐃ, 142.421875 * ᐃ);
		Ⲇ.bezierCurveTo(35 * ᐃ, ᐃ * 149.921875, ᐃ * 35, ᐃ * 149.921875, ᐃ * 43.5, ᐃ * 157.421875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[ⵠᐃΔᐃΔ], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 78.5, 51.921875 * ᐃ);
		Ⲇ.bezierCurveTo(99.5 * ᐃ, 75.921875 * ᐃ, ᐃ * 110.5, ᐃ * 96.921875, ᐃ * 118.5, 120.921875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 121.5, 140.921875 * ᐃ, 107.5 * ᐃ, 179.921875 * ᐃ, 75.5 * ᐃ, ᐃ * 183.921875);
		Ⲇ.bezierCurveTo(ᐃ * 30.5, 169.921875 * ᐃ, 37.5 * ᐃ, 131.921875 * ᐃ, 34.5 * ᐃ, 120.921875 * ᐃ);
		Ⲇ.bezierCurveTo(41.5 * ᐃ, 89.921875 * ᐃ, 61.5 * ᐃ, ᐃ * 67.921875, 78.5 * ᐃ, ᐃ * 51.921875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⵠΔⵠ], Δⵠ[8], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 72.5, ᐃ * 72.421875);
		Ⲇ.bezierCurveTo(76.5 * ᐃ, ᐃ * 79.421875, 79.5 * ᐃ, 80.421875 * ᐃ, ᐃ * 83.5, 73.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 80.5, 96.921875 * ᐃ, ᐃ * 79.5, ᐃ * 114.421875, 77.5 * ᐃ, 120.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[Ⲇᐃⵠᐃᐃ], 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 42.5, ᐃ * 163.421875);
		Ⲇ.bezierCurveTo(62.5 * ᐃ, 185.421875 * ᐃ, ᐃ * 86.5, ᐃ * 186.421875, ᐃ * 111.5, ᐃ * 165.421875);
		Ⲇ.bezierCurveTo(ᐃ * 107.5, ᐃ * 176.421875, ᐃ * 95.5, 187.421875 * ᐃ, 75.5 * ᐃ, 188.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 53.5, 188.421875 * ᐃ, 43.5 * ᐃ, ᐃ * 171.421875, 42.5 * ᐃ, ᐃ * 164.421875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠᐃᐃⵠ], Δⵠ[ᐃΔΔᐃΔ], ᐃ * Δᐃᐃⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 79.5, 61.421875 * ᐃ);
		Ⲇ.bezierCurveTo(88.5 * ᐃ, 31.421875 * ᐃ, 81.5 * ᐃ, 16.421875 * ᐃ, ᐃ * 75.5, ᐃ * 7.421875);
		Ⲇ.bezierCurveTo(ᐃ * 77.5, 28.421875 * ᐃ, ᐃ * 77.5, 37.421875 * ᐃ, ᐃ * 68.5, 42.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 79.5, ᐃ * 57.421875, 79.5 * ᐃ, 58.421875 * ᐃ, ᐃ * 80.5, 61.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[ΔⵠⵠΔⵠ], ⵠΔΔⲆΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(72.5 * ᐃ, ᐃ * 72.421875);
		Ⲇ.bezierCurveTo(76.5 * ᐃ, 79.421875 * ᐃ, 79.5 * ᐃ, ᐃ * 80.421875, ᐃ * 83.5, ᐃ * 73.421875);
		Ⲇ.bezierCurveTo(ᐃ * 80.5, 96.921875 * ᐃ, 79.5 * ᐃ, 114.421875 * ᐃ, 77.5 * ᐃ, ᐃ * 120.421875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[ⵠᐃΔᐃΔ], 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(96.5 * ᐃ, ᐃ * 76.421875);
		Ⲇ.bezierCurveTo(100.5 * ᐃ, ᐃ * 64.421875, 103.5 * ᐃ, ᐃ * 62.421875, ᐃ * 110.5, ᐃ * 65.421875);
		Ⲇ.bezierCurveTo(116.5 * ᐃ, 66.421875 * ᐃ, ᐃ * 117.5, ᐃ * 67.421875, 112.5 * ᐃ, 73.421875 * ᐃ);
		Ⲇ.bezierCurveTo(107 * ᐃ, ᐃ * 79.921875, 107 * ᐃ, 79.921875 * ᐃ, 101.5 * ᐃ, 86.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔ], Δⵠ[ᐃᐃΔⵠ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(61.5 * ᐃ, ᐃ * 78.421875);
		Ⲇ.bezierCurveTo(ᐃ * 57.5, 73.421875 * ᐃ, ᐃ * 51.5, 66.421875 * ᐃ, 45.5 * ᐃ, ᐃ * 68.421875);
		Ⲇ.bezierCurveTo(ᐃ * 32.5, 73.421875 * ᐃ, ᐃ * 38.5, ᐃ * 75.421875, ᐃ * 46.5, ᐃ * 81.421875);
		Ⲇ.bezierCurveTo(ᐃ * 51.5, 84.921875 * ᐃ, 51.5 * ᐃ, 84.921875 * ᐃ, 56.5 * ᐃ, 88.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃΔⲆ], Δⵠ[2], ᐃ * ⵠᐃΔΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(116.5 * ᐃ, 127.421875 * ᐃ);
		Ⲇ.bezierCurveTo(124.5 * ᐃ, 108.421875 * ᐃ, ᐃ * 129.5, ᐃ * 104.421875, ᐃ * 141.5, 107.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 156.5, 112.421875 * ᐃ, 153.5 * ᐃ, 113.421875 * ᐃ, 132.5 * ᐃ, 134.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 123.5, 141.921875 * ᐃ, ᐃ * 123.5, 141.921875 * ᐃ, 114.5 * ᐃ, 149.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 41.5, ᐃ * 134.421875);
		Ⲇ.bezierCurveTo(30.5 * ᐃ, ᐃ * 119.421875, 25.5 * ᐃ, 111.421875 * ᐃ, 12.5 * ᐃ, ᐃ * 115.421875);
		Ⲇ.bezierCurveTo(ᐃ * 4.5, ᐃ * 120.421875, ᐃ * 4.5, ᐃ * 121.421875, ᐃ * 26.5, 142.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 35, 149.921875 * ᐃ, 35 * ᐃ, ᐃ * 149.921875, 43.5 * ᐃ, 157.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔ], Δⵠ[2], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(78.5 * ᐃ, ᐃ * 51.921875);
		Ⲇ.bezierCurveTo(ᐃ * 99.5, 75.921875 * ᐃ, ᐃ * 110.5, 96.921875 * ᐃ, 118.5 * ᐃ, 120.921875 * ᐃ);
		Ⲇ.bezierCurveTo(121.5 * ᐃ, 140.921875 * ᐃ, ᐃ * 107.5, ᐃ * 179.921875, ᐃ * 75.5, ᐃ * 183.921875);
		Ⲇ.bezierCurveTo(30.5 * ᐃ, 169.921875 * ᐃ, 37.5 * ᐃ, ᐃ * 131.921875, ᐃ * 34.5, 120.921875 * ᐃ);
		Ⲇ.bezierCurveTo(41.5 * ᐃ, ᐃ * 89.921875, 61.5 * ᐃ, 67.921875 * ᐃ, 78.5 * ᐃ, 51.921875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⵠⵠⵠ], Δⵠ[2], ⵠᐃᐃΔ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 108.5, 148.421875 * ᐃ, ᐃ * 9);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃⲆ]);
		ᐃΔΔ(Ⲇ, ᐃ * 106.5, 144.421875 * ᐃ, ᐃ * 3);
		ΔΔ(Ⲇ, Δⵠ[6]);
		ᐃΔΔ(Ⲇ, ᐃ * 46.5, 148.421875 * ᐃ, ᐃⲆᐃᐃⲆ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		ᐃΔΔ(Ⲇ, ᐃ * 44.5, 144.421875 * ᐃ, ᐃ * ᐃⵠΔⵠ);
		ΔΔ(Ⲇ, Δⵠ[6]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 116.5, ᐃ * 114.421875);
		Ⲇ.bezierCurveTo(121.5 * ᐃ, 137.421875 * ᐃ, ᐃ * 118.5, ᐃ * 133.421875, ᐃ * 108.5, ᐃ * 139.421875);
		Ⲇ.bezierCurveTo(ᐃ * 94.5, ᐃ * 146.421875, ᐃ * 96.5, ᐃ * 148.421875, ᐃ * 95.5, ᐃ * 152.421875);
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[2], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.translate(0, ᐃ * -ΔⲆᐃΔ);
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 35.5, ᐃ * 131.421875);
		Ⲇ.bezierCurveTo(ᐃ * 36.5, ᐃ * 140.421875, ᐃ * 39.5, ᐃ * 140.421875, ᐃ * 49.5, ᐃ * 143.421875);
		Ⲇ.bezierCurveTo(ᐃ * 59.5, 149.421875 * ᐃ, ᐃ * 57.5, 151.421875 * ᐃ, 59.5 * ᐃ, 155.421875 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔΔΔⵠ], ᐃ * ᐃⲆⵠᐃⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(84.5 * ᐃ, 57.421875 * ᐃ);
		Ⲇ.bezierCurveTo(101.5 * ᐃ, 120.421875 * ᐃ, 92.5 * ᐃ, 127.421875 * ᐃ, 78.5 * ᐃ, 134.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 51.5, 131.421875 * ᐃ, 63.5 * ᐃ, 102.421875 * ᐃ, 70.5 * ᐃ, 59.421875 * ᐃ);
		Ⲇ.bezierCurveTo(75 * ᐃ, 55.421875 * ᐃ, ᐃ * 78.5, ᐃ * 52.421875, 79.5 * ᐃ, ᐃ * 51.421875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(79.5 * ᐃ, 61.421875 * ᐃ);
		Ⲇ.bezierCurveTo(88.5 * ᐃ, 31.421875 * ᐃ, 81.5 * ᐃ, 16.421875 * ᐃ, 75.5 * ᐃ, 7.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 77.5, 28.421875 * ᐃ, ᐃ * 77.5, ᐃ * 37.421875, 68.5 * ᐃ, ᐃ * 42.421875);
		Ⲇ.bezierCurveTo(ᐃ * 79.5, ᐃ * 57.421875, ᐃ * 79.5, ᐃ * 58.421875, 80.5 * ᐃ, 61.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠᐃ], Δⵠ[ⲆᐃΔⲆ], ⵠΔⲆΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 72.5, ᐃ * 72.421875);
		Ⲇ.bezierCurveTo(ᐃ * 76.5, ᐃ * 79.421875, ᐃ * 79.5, ᐃ * 80.421875, ᐃ * 83.5, ᐃ * 73.421875);
		Ⲇ.bezierCurveTo(80.5 * ᐃ, ᐃ * 96.921875, ᐃ * 79.5, 114.421875 * ᐃ, ᐃ * 77.5, ᐃ * 120.421875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⲆ], Δⵠ[2], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 87.5, 154.421875 * ᐃ);
		Ⲇ.bezierCurveTo(93.5 * ᐃ, ᐃ * 163.921875, ᐃ * 93.5, 163.921875 * ᐃ, ᐃ * 99.5, ᐃ * 173.421875);
		Ⲇ.bezierCurveTo(95 * ᐃ, ᐃ * 177.421875, ᐃ * 95, 177.421875 * ᐃ, 90.5 * ᐃ, 181.421875 * ᐃ);
		Ⲇ.bezierCurveTo(89 * ᐃ, 167.921875 * ᐃ, 89 * ᐃ, ᐃ * 167.921875, ᐃ * 87.5, 154.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[7], ᐃ * ᐃᐃⲆⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(81.5 * ᐃ, ᐃ * 164.421875);
		Ⲇ.bezierCurveTo(84 * ᐃ, ᐃ * 172.921875, ᐃ * 84, ᐃ * 172.921875, 86.5 * ᐃ, 181.421875 * ᐃ);
		Ⲇ.bezierCurveTo(82.5 * ᐃ, ᐃ * 182.421875, 82.5 * ᐃ, ᐃ * 182.421875, 78.5 * ᐃ, ᐃ * 183.421875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[7], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 72.5, ᐃ * 164.421875);
		Ⲇ.bezierCurveTo(ᐃ * 73.5, ᐃ * 173.921875, 73.5 * ᐃ, 173.921875 * ᐃ, 74.5 * ᐃ, ᐃ * 183.421875);
		Ⲇ.bezierCurveTo(ᐃ * 70.5, ᐃ * 182.921875, ᐃ * 70.5, ᐃ * 182.921875, ᐃ * 66.5, 182.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[7], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 65.5, ᐃ * 156.421875);
		Ⲇ.bezierCurveTo(ᐃ * 65, 168.421875 * ᐃ, ᐃ * 65, ᐃ * 168.421875, ᐃ * 64.5, ᐃ * 180.421875);
		Ⲇ.bezierCurveTo(58.5 * ᐃ, 177.421875 * ᐃ, ᐃ * 58.5, 177.421875 * ᐃ, ᐃ * 52.5, 174.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔᐃΔᐃ], Δⵠ[7], ᐃ * ΔⵠⲆᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(42.5 * ᐃ, 163.421875 * ᐃ);
		Ⲇ.bezierCurveTo(62.5 * ᐃ, ᐃ * 185.421875, ᐃ * 86.5, ᐃ * 186.421875, ᐃ * 111.5, ᐃ * 165.421875);
		Ⲇ.bezierCurveTo(107.5 * ᐃ, 176.421875 * ᐃ, 95.5 * ᐃ, 187.421875 * ᐃ, 75.5 * ᐃ, 188.421875 * ᐃ);
		Ⲇ.bezierCurveTo(53.5 * ᐃ, 188.421875 * ᐃ, 43.5 * ᐃ, 171.421875 * ᐃ, 42.5 * ᐃ, 164.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠᐃ], Δⵠ[ᐃᐃⲆⲆ], ᐃ * 4);
		return ΔⲆ
	}

	function ⵠΔᐃᐃⲆΔᐃ(ΔⲆΔⲆᐃⲆⲆ, ᐃⲆΔᐃΔᐃΔ) {
		ᐃΔΔᐃⵠᐃΔ(ᐃⵠΔⲆⲆ, ΔⲆΔⲆᐃⲆⲆ, ᐃⲆΔᐃΔᐃΔ);
		const ᐃⲆᐃⵠΔⲆΔ = ⵠΔⵠⵠⵠⵠᐃ(ⲆⲆⵠΔ[ΔⲆⲆ], ⲆⲆⵠΔ[ΔⵠⲆⲆ]);
		const ᐃⲆⵠᐃⲆⲆᐃΔⲆ = ΔᐃᐃᐃΔᐃⵠ(ⲆⲆⵠΔ[ᐃᐃⲆ], ⲆⲆⵠΔ[Δᐃⵠⵠ], ⲆⲆⵠΔ[ⵠⲆᐃ], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[ⵠΔᐃᐃ], ⲆⲆⵠΔ[1]);
		const ΔΔⵠⲆⲆⲆⵠⵠⲆ = (ᐃⲆᐃⵠΔⲆΔ | 19086) & ~(ᐃⲆᐃⵠΔⲆΔ & 19086);
		return ΔΔⵠⲆⲆⲆⵠⵠⲆ
	}

	function ⵠⲆⵠᐃᐃⲆⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 46 * ᐃ;
		ΔⲆ.height = ᐃ * 140;
		Ⲇ.scale(ᐃ * -1, ᐃ * 1);
		Ⲇ.translate(ᐃ * -50, ᐃ * 40);
		Ⲇ.translate(-20 * ᐃ, ⵠᐃⲆ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ⲆΔΔΔ;
		Ⲇ.translate(ΔΔΔᐃⲆ * ᐃ, ⵠΔᐃᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(22.599990844726562 * ᐃ, 85.94999694824219 * ᐃ);
		Ⲇ.bezierCurveTo(17.599990844726562 * ᐃ, 83.94999694824219 * ᐃ, 17.599990844726562 * ᐃ, 83.94999694824219 * ᐃ, 12.599990844726562 * ᐃ, ᐃ * 81.94999694824219);
		Ⲇ.bezierCurveTo(ᐃ * 19.599990844726562, 73.94999694824219 * ᐃ, ᐃ * 2.5999908447265625, ᐃ * 22.949996948242188, 33.59999084472656 * ᐃ, ᐃ * 7.9499969482421875);
		Ⲇ.bezierCurveTo(ᐃ * 27.599990844726562, ᐃ * 28.949996948242188, ᐃ * 33.59999084472656, ᐃ * 26.949996948242188, ᐃ * 35.59999084472656, ᐃ * 32.94999694824219);
		Ⲇ.bezierCurveTo(ᐃ * 25.599990844726562, 59.94999694824219 * ᐃ, ᐃ * 26.599990844726562, ᐃ * 69.94999694824219, 29.599990844726562 * ᐃ, ᐃ * 82.94999694824219);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.translate(ᐃ * -ΔⵠⲆⲆ, 0);
		Ⲇ.moveTo(ᐃ * 17.599990844726562, 89.75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 24.599990844726562, 99.75 * ᐃ, ᐃ * 24.599990844726562, 101.75 * ᐃ, ᐃ * 20.599990844726562, 111.75 * ᐃ);
		Ⲇ.bezierCurveTo(28.599990844726562 * ᐃ, ᐃ * 110.75, 26.599990844726562 * ᐃ, ᐃ * 112.75, 28.599990844726562 * ᐃ, ᐃ * 111.75);
		Ⲇ.bezierCurveTo(30.599990844726562 * ᐃ, 96.75 * ᐃ, ᐃ * 32.59999084472656, 96.75 * ᐃ, ᐃ * 30.599990844726562, ᐃ * 87.75);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.translate(ΔⵠΔ * ᐃ, 0);
		Ⲇ.moveTo(ᐃ * 7.5999908447265625, 86.34999084472656 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 12.599990844726562, ᐃ * 85.34999084472656, 14.599990844726562 * ᐃ, ᐃ * 84.34999084472656, 13.599990844726562 * ᐃ, 84.34999084472656 * ᐃ);
		Ⲇ.bezierCurveTo(21.599990844726562 * ᐃ, ᐃ * 83.34999084472656, ᐃ * 21.599990844726562, 83.34999084472656 * ᐃ, ᐃ * 29.599990844726562, ᐃ * 82.34999084472656);
		Ⲇ.bezierCurveTo(ᐃ * 33.59999084472656, 85.84999084472656 * ᐃ, ᐃ * 33.59999084472656, 85.84999084472656 * ᐃ, 37.59999084472656 * ᐃ, ᐃ * 89.34999084472656);
		Ⲇ.bezierCurveTo(ᐃ * 34.09999084472656, ᐃ * 91.84999084472656, ᐃ * 34.09999084472656, ᐃ * 91.84999084472656, 30.599990844726562 * ᐃ, ᐃ * 94.34999084472656);
		Ⲇ.bezierCurveTo(21.099990844726562 * ᐃ, 93.34999084472656 * ᐃ, 21.099990844726562 * ᐃ, 93.34999084472656 * ᐃ, ᐃ * 11.599990844726562, 92.34999084472656 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.save();
		Ⲇ.translate(23.599990844726562 * ᐃ, 110.94999694824219 * ᐃ);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, ᐃ * -ⵠⲆⵠⵠⲆⲆⵠ, ᐃ * -ⵠⲆⲆⵠ, ᐃ * ⵠΔⲆᐃᐃ, ᐃ * 8, ᐃ * ⵠⲆΔᐃᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.translate(ⵠⵠⲆⵠ * ᐃ, ⵠΔᐃᐃ);
		Ⲇ.globalAlpha = ΔⲆᐃⲆ;
		Ⲇ.translate(10 * ᐃ, Ⲇᐃⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(22.599990844726562 * ᐃ, 85.94999694824219 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 17.599990844726562, 83.94999694824219 * ᐃ, ᐃ * 17.599990844726562, ᐃ * 83.94999694824219, ᐃ * 12.599990844726562, ᐃ * 81.94999694824219);
		Ⲇ.bezierCurveTo(ᐃ * 19.599990844726562, 73.94999694824219 * ᐃ, 2.5999908447265625 * ᐃ, 22.949996948242188 * ᐃ, ᐃ * 33.59999084472656, 7.9499969482421875 * ᐃ);
		Ⲇ.bezierCurveTo(27.599990844726562 * ᐃ, 28.949996948242188 * ᐃ, ᐃ * 33.59999084472656, 26.949996948242188 * ᐃ, 35.59999084472656 * ᐃ, 32.94999694824219 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 25.599990844726562, ᐃ * 59.94999694824219, 26.599990844726562 * ᐃ, ᐃ * 69.94999694824219, ᐃ * 29.599990844726562, 82.94999694824219 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⲆΔ], Δⵠ[ⵠⲆΔⵠ], ᐃ * ᐃⵠΔᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.translate(-ᐃⲆΔ * ᐃ, Δⵠⵠⵠ);
		Ⲇ.moveTo(ᐃ * 17.599990844726562, 89.75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 24.599990844726562, 99.75 * ᐃ, 24.599990844726562 * ᐃ, ᐃ * 101.75, 20.599990844726562 * ᐃ, 111.75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 28.599990844726562, 110.75 * ᐃ, 26.599990844726562 * ᐃ, 112.75 * ᐃ, 28.599990844726562 * ᐃ, 111.75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 30.599990844726562, 96.75 * ᐃ, 32.59999084472656 * ᐃ, ᐃ * 96.75, ᐃ * 30.599990844726562, ᐃ * 87.75);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⲆ], Δⵠ[2], ᐃΔⵠⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.translate(ᐃ * 1, 0);
		Ⲇ.moveTo(ᐃ * 7.5999908447265625, 86.34999084472656 * ᐃ);
		Ⲇ.bezierCurveTo(12.599990844726562 * ᐃ, ᐃ * 85.34999084472656, 14.599990844726562 * ᐃ, ᐃ * 84.34999084472656, 13.599990844726562 * ᐃ, 84.34999084472656 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 21.599990844726562, 83.34999084472656 * ᐃ, ᐃ * 21.599990844726562, 83.34999084472656 * ᐃ, 29.599990844726562 * ᐃ, 82.34999084472656 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 33.59999084472656, ᐃ * 85.84999084472656, 33.59999084472656 * ᐃ, 85.84999084472656 * ᐃ, ᐃ * 37.59999084472656, ᐃ * 89.34999084472656);
		Ⲇ.bezierCurveTo(ᐃ * 34.09999084472656, ᐃ * 91.84999084472656, ᐃ * 34.09999084472656, ᐃ * 91.84999084472656, 30.599990844726562 * ᐃ, ᐃ * 94.34999084472656);
		Ⲇ.bezierCurveTo(21.099990844726562 * ᐃ, 93.34999084472656 * ᐃ, 21.099990844726562 * ᐃ, 93.34999084472656 * ᐃ, ᐃ * 11.599990844726562, ᐃ * 92.34999084472656);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔᐃ], Δⵠ[ⲆᐃⵠΔ], ᐃ * ᐃⲆΔΔ);
		Ⲇ.save();
		Ⲇ.translate(23.599990844726562 * ᐃ, 110.94999694824219 * ᐃ);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, ᐃ * -7, -ⵠⵠᐃΔ * ᐃ, ⵠⲆᐃᐃⵠ * ᐃ, 8 * ᐃ, ᐃⵠᐃΔⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[Δᐃⵠⵠ], Δⵠ[ᐃᐃᐃⵠ], ᐃ * 3);
		return ΔⲆ
	}

	function ⵠΔⲆᐃⵠⵠⵠⵠΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 110;
		ΔⲆ.height = 110 * ᐃ;
		Ⲇ.globalAlpha = .2;
		ᐃΔΔ(Ⲇ, ᐃ * 55, ᐃ * 55, 55 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ]);
		return ΔⲆ
	}

	function ⵠΔΔᐃⲆᐃⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 247;
		ΔⲆ.height = 247 * ᐃ;
		Ⲇ.translate(0, ᐃ * ⵠⲆΔⲆᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : Ⲇⵠᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(150 * ᐃ, 62 * ᐃ);
		Ⲇ.bezierCurveTo(151.5 * ᐃ, 71.5 * ᐃ, 149 * ᐃ, 70 * ᐃ, ᐃ * 153, ᐃ * 81);
		Ⲇ.bezierCurveTo(ᐃ * 158, ᐃ * 73.5, ᐃ * 158, 73.5 * ᐃ, 163 * ᐃ, 66 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 164, ᐃ * 171);
		Ⲇ.bezierCurveTo(149 * ᐃ, 159 * ᐃ, 156.5 * ᐃ, 165 * ᐃ, ᐃ * 149, 159 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 149, 167 * ᐃ, ᐃ * 149, ᐃ * 170, 152 * ᐃ, 178 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 132, ᐃ * 95);
		Ⲇ.bezierCurveTo(154 * ᐃ, 102 * ᐃ, 154 * ᐃ, ᐃ * 126, ᐃ * 137, ᐃ * 139);
		Ⲇ.bezierCurveTo(113 * ᐃ, ᐃ * 152, ᐃ * 89, 136 * ᐃ, ᐃ * 80, 121 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 57, 89 * ᐃ, 69 * ᐃ, ᐃ * 63, 79 * ᐃ, 52 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 110, 20 * ᐃ, ᐃ * 139, ᐃ * 21, 150 * ᐃ, ᐃ * 25);
		Ⲇ.bezierCurveTo(197 * ᐃ, 36 * ᐃ, ᐃ * 221, 67 * ᐃ, 226 * ᐃ, 90 * ᐃ);
		Ⲇ.bezierCurveTo(234 * ᐃ, ᐃ * 134, ᐃ * 214, ᐃ * 177, ᐃ * 195, ᐃ * 197);
		Ⲇ.bezierCurveTo(ᐃ * 144, 242 * ᐃ, 79 * ᐃ, 216 * ᐃ, 58 * ᐃ, ᐃ * 206);
		Ⲇ.bezierCurveTo(ᐃ * ᐃⵠⵠⵠΔ, 174 * ᐃ, ⵠΔⵠᐃⲆ * ᐃ, ᐃ * 134, 23 * ᐃ, ᐃ * 107);
		Ⲇ.bezierCurveTo(ᐃ * 26, ᐃ * 78, 33 * ᐃ, ᐃ * 60, ᐃ * 38, ᐃ * 43);
		Ⲇ.bezierCurveTo(ᐃ * 42, ᐃ * 32, 47 * ᐃ, ᐃ * 32, ᐃ * 50, 36 * ᐃ);
		Ⲇ.bezierCurveTo(54 * ᐃ, ᐃ * 37, 50 * ᐃ, ᐃ * 52, ᐃ * 44, ᐃ * 87);
		Ⲇ.bezierCurveTo(40 * ᐃ, ᐃ * 115, 46 * ᐃ, ᐃ * 142, 57 * ᐃ, ᐃ * 158);
		Ⲇ.bezierCurveTo(76 * ᐃ, 189 * ᐃ, ᐃ * 129, ᐃ * 182, ᐃ * 152, 173 * ᐃ);
		Ⲇ.bezierCurveTo(186 * ᐃ, 156 * ᐃ, 191 * ᐃ, 106 * ᐃ, ᐃ * 176, 85 * ᐃ);
		Ⲇ.bezierCurveTo(159 * ᐃ, 61 * ᐃ, 132 * ᐃ, 62 * ᐃ, ᐃ * 122, ᐃ * 66);
		Ⲇ.bezierCurveTo(108 * ᐃ, ᐃ * 74, 108 * ᐃ, 89 * ᐃ, ᐃ * 116, 90 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 123, ᐃ * 92, ᐃ * 130, 93 * ᐃ, ᐃ * 131, ᐃ * 94);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃ]);
		Ⲇ.translate(0, -ΔΔΔᐃⲆ * ᐃ);
		Ⲇ.globalAlpha = ⲆΔΔΔ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(150 * ᐃ, ᐃ * 62);
		Ⲇ.bezierCurveTo(151.5 * ᐃ, 71.5 * ᐃ, 149 * ᐃ, 70 * ᐃ, 153 * ᐃ, 81 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 158, 73.5 * ᐃ, ᐃ * 158, 73.5 * ᐃ, 163 * ᐃ, ᐃ * 66);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 164, 171 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 149, ᐃ * 159, 156.5 * ᐃ, ᐃ * 165, ᐃ * 149, ᐃ * 159);
		Ⲇ.bezierCurveTo(149 * ᐃ, 167 * ᐃ, ᐃ * 149, ᐃ * 170, ᐃ * 152, ᐃ * 178);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 132, ᐃ * 95);
		Ⲇ.bezierCurveTo(ᐃ * 154, ᐃ * 102, 154 * ᐃ, ᐃ * 126, 137 * ᐃ, ᐃ * 139);
		Ⲇ.bezierCurveTo(113 * ᐃ, ᐃ * 152, 89 * ᐃ, ᐃ * 136, 80 * ᐃ, ᐃ * 121);
		Ⲇ.bezierCurveTo(ᐃ * 57, 89 * ᐃ, 69 * ᐃ, 63 * ᐃ, ᐃ * 79, ᐃ * 52);
		Ⲇ.bezierCurveTo(ᐃ * 110, ᐃ * 20, 139 * ᐃ, 21 * ᐃ, 150 * ᐃ, 25 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 197, ᐃ * 36, 221 * ᐃ, ᐃ * 67, ᐃ * 226, 90 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 234, ᐃ * 134, ᐃ * 214, ᐃ * 177, ᐃ * 195, 197 * ᐃ);
		Ⲇ.bezierCurveTo(144 * ᐃ, ᐃ * 242, ᐃ * 79, 216 * ᐃ, ᐃ * 58, ᐃ * 206);
		Ⲇ.bezierCurveTo(ᐃⲆΔᐃⵠᐃΔ * ᐃ, 174 * ᐃ, ᐃⲆᐃⵠⲆ * ᐃ, 134 * ᐃ, 23 * ᐃ, 107 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 26, ᐃ * 78, ᐃ * 33, 60 * ᐃ, 38 * ᐃ, ᐃ * 43);
		Ⲇ.bezierCurveTo(42 * ᐃ, 32 * ᐃ, ᐃ * 47, 32 * ᐃ, 50 * ᐃ, 36 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 54, 37 * ᐃ, 50 * ᐃ, ᐃ * 52, ᐃ * 44, ᐃ * 87);
		Ⲇ.bezierCurveTo(40 * ᐃ, 115 * ᐃ, 46 * ᐃ, 142 * ᐃ, ᐃ * 57, 158 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 76, 189 * ᐃ, 129 * ᐃ, 182 * ᐃ, ᐃ * 152, 173 * ᐃ);
		Ⲇ.bezierCurveTo(186 * ᐃ, 156 * ᐃ, 191 * ᐃ, ᐃ * 106, ᐃ * 176, ᐃ * 85);
		Ⲇ.bezierCurveTo(ᐃ * 159, 61 * ᐃ, ᐃ * 132, 62 * ᐃ, 122 * ᐃ, 66 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 108, ᐃ * 74, 108 * ᐃ, 89 * ᐃ, 116 * ᐃ, ᐃ * 90);
		Ⲇ.bezierCurveTo(123 * ᐃ, ᐃ * 92, 130 * ᐃ, ᐃ * 93, ᐃ * 131, ᐃ * 94);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⲆⲆ], Δⵠ[2], ᐃ * ᐃΔΔⲆⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 137, ᐃ * 137);
		Ⲇ.bezierCurveTo(ᐃ * 145, 125 * ᐃ, ᐃ * 138, ᐃ * 108, 123 * ᐃ, ᐃ * 104);
		Ⲇ.bezierCurveTo(ᐃ * 81, ᐃ * 101, ᐃ * 88, ᐃ * 77, ᐃ * 98, ᐃ * 65);
		Ⲇ.bezierCurveTo(ᐃ * 117, 38 * ᐃ, 138 * ᐃ, 39 * ᐃ, 165 * ᐃ, ᐃ * 52);
		Ⲇ.bezierCurveTo(197 * ᐃ, 72 * ᐃ, 207 * ᐃ, ᐃ * 111, ᐃ * 197, ᐃ * 140);
		Ⲇ.bezierCurveTo(ᐃ * 182, ᐃ * 180, ᐃ * 161, ᐃ * 197, 112 * ᐃ, 194 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 58, ᐃ * 194, ᐃ * 37, ᐃ * 170, 34 * ᐃ, 142 * ᐃ);
		Ⲇ.bezierCurveTo(29 * ᐃ, 102 * ᐃ, 40 * ᐃ, 63 * ᐃ, ᐃ * 51, 45 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 43, ᐃ * 78, 41 * ᐃ, ᐃ * 103, 43 * ᐃ, 122 * ᐃ);
		Ⲇ.bezierCurveTo(51 * ᐃ, ᐃ * 158, ᐃ * 63, 174 * ᐃ, 95 * ᐃ, ᐃ * 179);
		Ⲇ.bezierCurveTo(129 * ᐃ, ᐃ * 186, ᐃ * 169, 172 * ᐃ, 177 * ᐃ, ᐃ * 144);
		Ⲇ.bezierCurveTo(ᐃ * 197, 105 * ᐃ, 172 * ᐃ, ᐃ * 76, ᐃ * 160, ᐃ * 71);
		Ⲇ.bezierCurveTo(125 * ᐃ, 52 * ᐃ, ᐃ * 111, 73 * ᐃ, ᐃ * 111, ᐃ * 81);
		Ⲇ.bezierCurveTo(ᐃ * 106, ᐃ * 93, ᐃ * 140, 92 * ᐃ, ᐃ * 147, ᐃ * 107);
		Ⲇ.bezierCurveTo(ᐃ * 153, ᐃ * 128, 140 * ᐃ, 135 * ᐃ, 137 * ᐃ, ᐃ * 139);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 132, ᐃ * 95);
		Ⲇ.bezierCurveTo(ᐃ * 154, 102 * ᐃ, ᐃ * 154, 126 * ᐃ, ᐃ * 137, ᐃ * 139);
		Ⲇ.bezierCurveTo(113 * ᐃ, ᐃ * 152, ᐃ * 89, ᐃ * 136, 80 * ᐃ, 121 * ᐃ);
		Ⲇ.bezierCurveTo(57 * ᐃ, 89 * ᐃ, ᐃ * 69, ᐃ * 63, ᐃ * 79, ᐃ * 52);
		Ⲇ.bezierCurveTo(110 * ᐃ, 20 * ᐃ, ᐃ * 139, 21 * ᐃ, 150 * ᐃ, 25 * ᐃ);
		Ⲇ.bezierCurveTo(197 * ᐃ, 36 * ᐃ, 221 * ᐃ, 67 * ᐃ, ᐃ * 226, ᐃ * 90);
		Ⲇ.bezierCurveTo(234 * ᐃ, ᐃ * 134, ᐃ * 214, ᐃ * 177, 195 * ᐃ, ᐃ * 197);
		Ⲇ.bezierCurveTo(ᐃ * 144, ᐃ * 242, ᐃ * 79, ᐃ * 216, ᐃ * 58, ᐃ * 206);
		Ⲇ.bezierCurveTo(13 * ᐃ, 174 * ᐃ, ᐃ * 20, 134 * ᐃ, ᐃ * 23, ᐃ * 107);
		Ⲇ.bezierCurveTo(26 * ᐃ, 78 * ᐃ, ᐃ * 33, 60 * ᐃ, 38 * ᐃ, ᐃ * 43);
		Ⲇ.bezierCurveTo(42 * ᐃ, 32 * ᐃ, 47 * ᐃ, 32 * ᐃ, 50 * ᐃ, 36 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 54, 37 * ᐃ, 50 * ᐃ, ᐃ * 52, 44 * ᐃ, ᐃ * 87);
		Ⲇ.bezierCurveTo(40 * ᐃ, 115 * ᐃ, 46 * ᐃ, 142 * ᐃ, 57 * ᐃ, 158 * ᐃ);
		Ⲇ.bezierCurveTo(76 * ᐃ, 189 * ᐃ, 129 * ᐃ, 182 * ᐃ, 152 * ᐃ, 173 * ᐃ);
		Ⲇ.bezierCurveTo(186 * ᐃ, ᐃ * 156, ᐃ * 191, ᐃ * 106, 176 * ᐃ, 85 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 159, 61 * ᐃ, 132 * ᐃ, ᐃ * 62, ᐃ * 122, ᐃ * 66);
		Ⲇ.bezierCurveTo(108 * ᐃ, 74 * ᐃ, 108 * ᐃ, 89 * ᐃ, ᐃ * 116, ᐃ * 90);
		Ⲇ.bezierCurveTo(ᐃ * 123, ᐃ * 92, 130 * ᐃ, 93 * ᐃ, ᐃ * 131, 94 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], ᐃ * ᐃΔΔⲆⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 82, ᐃ * 63);
		Ⲇ.bezierCurveTo(ᐃ * 91, 64 * ᐃ, ᐃ * 96, ᐃ * 62, ᐃ * 98, ᐃ * 53);
		Ⲇ.bezierCurveTo(91 * ᐃ, ᐃ * 45, 85 * ᐃ, 42 * ᐃ, 78 * ᐃ, ᐃ * 41);
		Ⲇ.bezierCurveTo(81 * ᐃ, ᐃ * 51, 82 * ᐃ, ᐃ * 57, ᐃ * 82, ᐃ * 63);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃᐃΔⵠ], Δⵠ[5], ᐃᐃΔᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 148, 40 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 140, ᐃ * 52, ᐃ * 131, 51 * ᐃ, 123 * ᐃ, 43 * ᐃ);
		Ⲇ.bezierCurveTo(123 * ᐃ, ᐃ * 25, 129 * ᐃ, ⲆᐃⲆⲆⵠ * ᐃ, 134 * ᐃ, ᐃ * 12);
		Ⲇ.bezierCurveTo(ᐃ * 138, 35 * ᐃ, 142 * ᐃ, ᐃ * 31, ᐃ * 148, 40 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ⲆᐃⲆΔ], ᐃ * ᐃᐃᐃᐃⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 189, 43 * ᐃ);
		Ⲇ.bezierCurveTo(191 * ᐃ, 54 * ᐃ, 196 * ᐃ, ᐃ * 58, 205 * ᐃ, ᐃ * 59);
		Ⲇ.bezierCurveTo(211 * ᐃ, ᐃ * 42, ᐃ * 214, 37 * ᐃ, 216 * ᐃ, ᐃ * 31);
		Ⲇ.bezierCurveTo(ᐃ * 202, ᐃ * 34, ᐃ * 195, ᐃ * 39, 190 * ᐃ, ᐃ * 43);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ᐃᐃΔᐃ], ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(216 * ᐃ, ᐃ * 98);
		Ⲇ.bezierCurveTo(ᐃ * 219, ᐃ * 105, 225 * ᐃ, 107 * ᐃ, 230 * ᐃ, 109 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 227, ᐃ * 113, ᐃ * 221, 115 * ᐃ, 215 * ᐃ, ᐃ * 115);
		Ⲇ.bezierCurveTo(ᐃ * 208, 109 * ᐃ, ᐃ * 211, 101 * ᐃ, 216 * ᐃ, 98 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ᐃᐃᐃΔⵠ], 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 180, ᐃ * 85);
		Ⲇ.bezierCurveTo(ᐃ * 193, ᐃ * 86, 196 * ᐃ, ᐃ * 98, ᐃ * 191, 108 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 179, ᐃ * 112, 167 * ᐃ, 113 * ᐃ, ᐃ * 155, 111 * ᐃ);
		Ⲇ.bezierCurveTo(169 * ᐃ, ᐃⲆⲆΔᐃ * ᐃ, 176 * ᐃ, ᐃ * 96, ᐃ * 180, 85 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ΔⵠΔᐃ], ᐃ * ᐃⵠᐃⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(96 * ᐃ, ᐃ * 114);
		Ⲇ.bezierCurveTo(102 * ᐃ, ᐃ * 109, ᐃ * 112, 110 * ᐃ, ᐃ * 114, 118 * ᐃ);
		Ⲇ.bezierCurveTo(111 * ᐃ, 134 * ᐃ, ᐃ * 102, 143 * ᐃ, 95 * ᐃ, ᐃ * 147);
		Ⲇ.bezierCurveTo(ᐃ * 98, 123 * ᐃ, 97 * ᐃ, ᐃ * 119, ᐃ * 96, ᐃ * 115);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ᐃᐃΔᐃ], ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(79 * ᐃ, ᐃ * 92);
		Ⲇ.bezierCurveTo(86 * ᐃ, ᐃ * 95, 89 * ᐃ, ᐃ * 102, ᐃ * 83, ᐃ * 111);
		Ⲇ.bezierCurveTo(70 * ᐃ, ᐃ * 110, ᐃ * 61, 107 * ᐃ, 54 * ᐃ, 100 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 70, ᐃ * 97, 70 * ᐃ, ᐃ * 95, ᐃ * 78, ᐃ * 92);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆⵠᐃⵠ], Δⵠ[ᐃᐃᐃⲆ], ᐃ * ΔⲆⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(39 * ᐃ, 130 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 37, ᐃ * 141, ᐃ * 41, 143 * ᐃ, 48 * ᐃ, ᐃ * 144);
		Ⲇ.bezierCurveTo(ᐃ * 54, 134 * ᐃ, ᐃ * 55, ᐃ * 131, ᐃ * 56, ᐃ * 123);
		Ⲇ.bezierCurveTo(47 * ᐃ, ᐃ * 129, ᐃ * 43, 129 * ᐃ, ᐃ * 39, 129 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], ΔⲆⲆⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(113 * ᐃ, 189 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 119, 201 * ᐃ, ᐃ * 127, 198 * ᐃ, ᐃ * 134, ᐃ * 192);
		Ⲇ.bezierCurveTo(128 * ᐃ, 175 * ᐃ, 128 * ᐃ, 173 * ᐃ, ᐃ * 128, 165 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 117, 176 * ᐃ, 116 * ᐃ, 182 * ᐃ, 113 * ᐃ, ᐃ * 187);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆⵠᐃⵠ], Δⵠ[ΔⲆⵠⵠ], ᐃ * ᐃⵠᐃⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 74, 154 * ᐃ);
		Ⲇ.bezierCurveTo(76 * ᐃ, ᐃ * 163, ᐃ * 76, 170 * ᐃ, ᐃ * 75, 177 * ᐃ);
		Ⲇ.bezierCurveTo(68 * ᐃ, 179 * ᐃ, ᐃ * 66, ᐃ * 176, 63 * ᐃ, ᐃ * 171);
		Ⲇ.bezierCurveTo(69 * ᐃ, 164 * ᐃ, ᐃ * 72, 159 * ᐃ, ᐃ * 74, ᐃ * 154);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], ᐃ * ᐃᐃᐃΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(206 * ᐃ, 152 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 198, ᐃ * 158, 198 * ᐃ, ᐃ * 166, ᐃ * 201, 171 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 209, 170 * ᐃ, ᐃ * 221, 170 * ᐃ, ᐃ * 226, 172 * ᐃ);
		Ⲇ.bezierCurveTo(219 * ᐃ, 159 * ᐃ, 210 * ᐃ, 155 * ᐃ, 207 * ᐃ, 153 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ᐃᐃᐃⲆ], ᐃΔΔⲆⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 181, 184 * ᐃ);
		Ⲇ.bezierCurveTo(170 * ᐃ, ᐃ * 184, ᐃ * 167, ᐃ * 187, ᐃ * 163, 195 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 171, ᐃ * 207, 183 * ᐃ, 214 * ᐃ, ᐃ * 191, ᐃ * 217);
		Ⲇ.bezierCurveTo(183 * ᐃ, 204 * ᐃ, 184 * ᐃ, 196 * ᐃ, 181 * ᐃ, 184 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔⲆΔΔ], Δⵠ[ⲆᐃⲆΔ], 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 66, 199 * ᐃ);
		Ⲇ.bezierCurveTo(73 * ᐃ, ᐃ * 197, ᐃ * 78, 199 * ᐃ, 79 * ᐃ, ᐃ * 206);
		Ⲇ.bezierCurveTo(71 * ᐃ, 216 * ᐃ, 67 * ᐃ, 221 * ᐃ, ᐃ * 57, 223 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⵠⲆ], Δⵠ[5], 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 182, 143 * ᐃ);
		Ⲇ.bezierCurveTo(183 * ᐃ, ᐃ * 146, 183 * ᐃ, ᐃ * 149, ᐃ * 179, 152 * ᐃ);
		Ⲇ.bezierCurveTo(174 * ᐃ, ᐃ * 146, 174 * ᐃ, 146 * ᐃ, 169 * ᐃ, ᐃ * 140);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⵠⲆ], Δⵠ[5], ⲆᐃⲆΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(32 * ᐃ, ᐃ * 159);
		Ⲇ.bezierCurveTo(ᐃ * 45, 160 * ᐃ, ᐃ * 48, ᐃ * 164, ᐃ * 45, ᐃ * 175);
		Ⲇ.bezierCurveTo(28 * ᐃ, ᐃ * 183, 25 * ᐃ, 184 * ᐃ, ᐃ * Δᐃᐃⵠᐃ, 184 * ᐃ);
		Ⲇ.bezierCurveTo(30 * ᐃ, 170 * ᐃ, ᐃ * 29, ᐃ * 164, ᐃ * 31, 160 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃᐃΔⵠ], Δⵠ[ᐃᐃᐃᐃⵠ], ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 110, 214 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 106, ᐃ * 212, 104 * ᐃ, ᐃ * 213, ᐃ * 102, ᐃ * 218);
		Ⲇ.bezierCurveTo(ᐃ * 104, ᐃ * 220, 107 * ᐃ, 222 * ᐃ, 110 * ᐃ, ᐃ * 224);
		Ⲇ.bezierCurveTo(110.5 * ᐃ, ᐃ * 219, ᐃ * 110.5, ᐃ * 219, 111 * ᐃ, 214 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ⲆΔⲆⲆⵠ], ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(40 * ᐃ, 52 * ᐃ);
		Ⲇ.bezierCurveTo(41 * ᐃ, ᐃ * 57, ᐃ * 40, 61 * ᐃ, 34 * ᐃ, ᐃ * 60);
		Ⲇ.bezierCurveTo(ᐃ * 31.5, ᐃ * 55, ᐃ * 31.5, ᐃ * 55, 29 * ᐃ, ᐃ * 50);
		Ⲇ.bezierCurveTo(34 * ᐃ, ᐃ * 50.5, 34 * ᐃ, 50.5 * ᐃ, ᐃ * 39, ᐃ * 51);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ᐃⵠᐃⲆ], ᐃ * ᐃᐃᐃᐃⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(31 * ᐃ, ᐃ * 81);
		Ⲇ.bezierCurveTo(ᐃ * 37, 84 * ᐃ, 38 * ᐃ, 90 * ᐃ, ᐃ * 34, 99 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 23, ᐃ * 97, ᐃ * 19, ᐃ * 96, 16 * ᐃ, 93 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 24, ᐃ * 88, ᐃ * 28, ᐃ * 85, ᐃ * 30, 81 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⵠ], Δⵠ[5], ᐃᐃⵠᐃΔ * ᐃ);
		return ΔⲆ
	}

	function ⲆᐃⵠⵠⲆⲆᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 100 * ᐃ;
		ΔⲆ.height = ᐃ * 648;
		Ⲇ.translate(ᐃ * ⵠᐃⲆⵠⲆ, ᐃ * 20);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 50.5, 349.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, -13.5 * ᐃ, -249.5 * ᐃ, ᐃ * 27, 499 * ᐃ, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 36, ᐃ * 538);
		Ⲇ.bezierCurveTo(49.5 * ᐃ, ᐃ * 538, 49.5 * ᐃ, ᐃ * 538, ᐃ * 63, 538 * ᐃ);
		Ⲇ.bezierCurveTo(63.5 * ᐃ, ᐃ * 568, 63.5 * ᐃ, ᐃ * 568, ᐃ * 64, 598 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 50, 598 * ᐃ, 50 * ᐃ, ᐃ * 598, ᐃ * 36, ᐃ * 598);
		Ⲇ.bezierCurveTo(ᐃ * 36, 568.5 * ᐃ, 36 * ᐃ, 568.5 * ᐃ, 36 * ᐃ, 539 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(36 * ᐃ, ᐃ * 554);
		Ⲇ.bezierCurveTo(45 * ᐃ, 561 * ᐃ, 56 * ᐃ, ᐃ * 558, ᐃ * 63, ᐃ * 554);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 32, ᐃ * 569);
		Ⲇ.bezierCurveTo(44 * ᐃ, ᐃ * 576, 58 * ᐃ, ᐃ * 574, ᐃ * 68, ᐃ * 569);
		Ⲇ.bezierCurveTo(ᐃ * 68, ᐃ * 584, ᐃ * 68, ᐃ * 584, ᐃ * 68, ᐃ * 599);
		Ⲇ.bezierCurveTo(ᐃ * 68, 608 * ᐃ, 65 * ᐃ, ᐃ * 618, ᐃ * 49, 617 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 34, 617 * ᐃ, ᐃ * 32, ᐃ * 610, ᐃ * 32, 598 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 41, ᐃ * 581);
		Ⲇ.bezierCurveTo(ᐃ * 48, 584 * ᐃ, 55 * ᐃ, ᐃ * 583, ᐃ * 60, 581 * ᐃ);
		Ⲇ.bezierCurveTo(60 * ᐃ, ᐃ * 589.5, ᐃ * 60, ᐃ * 589.5, 60 * ᐃ, 598 * ᐃ);
		Ⲇ.bezierCurveTo(60 * ᐃ, ᐃ * 604, 59 * ᐃ, 609 * ᐃ, ᐃ * 48, ᐃ * 608);
		Ⲇ.bezierCurveTo(40 * ᐃ, 607 * ᐃ, ᐃ * 40, ᐃ * 606, ᐃ * 41, 581 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(31 * ᐃ, 106 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 31, 124.5 * ᐃ, ᐃ * 31, ᐃ * 124.5, ᐃ * 31, ᐃ * 143);
		Ⲇ.bezierCurveTo(ᐃ * 31, 163 * ᐃ, ᐃ * 38, 169 * ᐃ, ᐃ * 48, 168 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 57, ᐃ * 168, ᐃ * 67, 165 * ᐃ, ᐃ * 67, 148 * ᐃ);
		Ⲇ.bezierCurveTo(67 * ᐃ, 123.5 * ᐃ, 67 * ᐃ, ᐃ * 123.5, ᐃ * 67, 99 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 49, 27 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 64, 62.5 * ᐃ, 64 * ᐃ, 62.5 * ᐃ, ᐃ * 79, ᐃ * 98);
		Ⲇ.bezierCurveTo(ᐃ * 74, ᐃ * 113, 63 * ᐃ, 121 * ᐃ, ᐃ * 50, ᐃ * 122);
		Ⲇ.bezierCurveTo(ᐃ * 35, 123 * ᐃ, 22 * ᐃ, 109 * ᐃ, 20 * ᐃ, ᐃ * 98);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(49 * ᐃ, ᐃ * 43);
		Ⲇ.bezierCurveTo(61 * ᐃ, 70 * ᐃ, ᐃ * 61, ᐃ * 70, 73 * ᐃ, 97 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 66, 116 * ᐃ, 43 * ᐃ, ᐃ * 122, 26 * ᐃ, 99 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.translate(ᐃ * -20, -ⵠΔᐃⲆⵠ * ᐃ);
		Ⲇ.globalAlpha = ΔᐃΔⲆ;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 50.5, 349.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -13.5, ᐃ * -249.5, 27 * ᐃ, 499 * ᐃ, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔᐃΔᐃ], ᐃ * ΔᐃᐃⲆᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 36, ᐃ * 538);
		Ⲇ.bezierCurveTo(49.5 * ᐃ, 538 * ᐃ, ᐃ * 49.5, 538 * ᐃ, 63 * ᐃ, ᐃ * 538);
		Ⲇ.bezierCurveTo(ᐃ * 63.5, 568 * ᐃ, 63.5 * ᐃ, 568 * ᐃ, ᐃ * 64, ᐃ * 598);
		Ⲇ.bezierCurveTo(ᐃ * 50, 598 * ᐃ, ᐃ * 50, ᐃ * 598, 36 * ᐃ, 598 * ᐃ);
		Ⲇ.bezierCurveTo(36 * ᐃ, ᐃ * 568.5, ᐃ * 36, 568.5 * ᐃ, 36 * ᐃ, ᐃ * 539);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⵠᐃΔⲆ], Ⲇᐃⵠⵠᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 36, 554 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 45, ᐃ * 561, ᐃ * 56, ᐃ * 558, ᐃ * 63, 554 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠⲆⲆⲆⲆ, Δⵠ[4], ᐃ * ΔⵠⵠΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 32, ᐃ * 569);
		Ⲇ.bezierCurveTo(ᐃ * 44, ᐃ * 576, ᐃ * 58, ᐃ * 574, 68 * ᐃ, 569 * ᐃ);
		Ⲇ.bezierCurveTo(68 * ᐃ, 584 * ᐃ, ᐃ * 68, ᐃ * 584, 68 * ᐃ, ᐃ * 599);
		Ⲇ.bezierCurveTo(68 * ᐃ, 608 * ᐃ, 65 * ᐃ, 618 * ᐃ, ᐃ * 49, ᐃ * 617);
		Ⲇ.bezierCurveTo(34 * ᐃ, ᐃ * 617, ᐃ * 32, ᐃ * 610, ᐃ * 32, 598 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆᐃ], Δⵠ[6], ᐃ * Ⲇᐃⵠⵠᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 41, 581 * ᐃ);
		Ⲇ.bezierCurveTo(48 * ᐃ, 584 * ᐃ, 55 * ᐃ, 583 * ᐃ, ᐃ * 60, ᐃ * 581);
		Ⲇ.bezierCurveTo(ᐃ * 60, 589.5 * ᐃ, 60 * ᐃ, 589.5 * ᐃ, ᐃ * 60, ᐃ * 598);
		Ⲇ.bezierCurveTo(ᐃ * 60, 604 * ᐃ, ᐃ * 59, ᐃ * 609, 48 * ᐃ, 608 * ᐃ);
		Ⲇ.bezierCurveTo(40 * ᐃ, ᐃ * 607, 40 * ᐃ, ᐃ * 606, ᐃ * 41, ᐃ * 581);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠⲆΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 31, ᐃ * 106);
		Ⲇ.bezierCurveTo(31 * ᐃ, ᐃ * 124.5, ᐃ * 31, ᐃ * 124.5, ᐃ * 31, ᐃ * 143);
		Ⲇ.bezierCurveTo(ᐃ * 31, ᐃ * 163, ᐃ * 38, 169 * ᐃ, 48 * ᐃ, ᐃ * 168);
		Ⲇ.bezierCurveTo(57 * ᐃ, 168 * ᐃ, ᐃ * 67, 165 * ᐃ, 67 * ᐃ, ᐃ * 148);
		Ⲇ.bezierCurveTo(67 * ᐃ, ᐃ * 123.5, 67 * ᐃ, ᐃ * 123.5, 67 * ᐃ, 99 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠᐃⲆ], Δⵠ[6], 8 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(-46 * ᐃ, ᐃ * -50);
		Ⲇ.scale(2, ΔΔᐃΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(51 * ᐃ, 80 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 51, 89.5 * ᐃ, 51 * ᐃ, ᐃ * 89.5, 51 * ᐃ, 99 * ᐃ);
		Ⲇ.bezierCurveTo(49 * ᐃ, ᐃ * 103, ᐃ * 46, 105 * ᐃ, ᐃ * 44, ᐃ * 99);
		Ⲇ.bezierCurveTo(ᐃ * 44, ᐃ * 88.5, ᐃ * 44, 88.5 * ᐃ, ᐃ * 44, 78 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8]);
		Ⲇ.restore();
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(49 * ᐃ, 27 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 64, 62.5 * ᐃ, 64 * ᐃ, 62.5 * ᐃ, 79 * ᐃ, 98 * ᐃ);
		Ⲇ.bezierCurveTo(74 * ᐃ, 113 * ᐃ, 63 * ᐃ, 121 * ᐃ, 50 * ᐃ, 122 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 35, 123 * ᐃ, ᐃ * 22, ᐃ * 109, ᐃ * 20, 98 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃⲆΔⵠ], Δⵠ[ᐃⲆⵠⲆⵠᐃⲆ], 8 * ᐃ);
		Ⲇ.scale(2, 2);
		Ⲇ.translate(ᐃ * -23, ᐃ * -20);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(57 * ᐃ, 69 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 50, 76 * ᐃ, ᐃ * 43, 75 * ᐃ, 38 * ᐃ, ᐃ * 69);
		Ⲇ.bezierCurveTo(43 * ᐃ, ᐃ * 57, 43 * ᐃ, 57 * ᐃ, ᐃ * 48, 45 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠⲆ]);
		return ΔⲆ
	}

	function ⵠⵠΔⵠᐃᐃΔΔΔ(ᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 335 * ᐃ;
		var ⵠⲆΔⵠΔΔΔ = 250 * ᐃ;
		var ⲆΔⲆ = 120 * ᐃ;
		var ᐃΔⵠⲆΔΔⲆ = ᐃ * ⲆΔⲆᐃᐃⵠⲆ;
		var ΔΔⵠΔⲆⵠⵠ = ᐃ * 35;
		var ΔⲆΔⲆΔΔⲆ = 65 * ᐃ;
		var ΔⲆΔ = 2 * ᐃ;
		var ᐃⵠⵠⲆΔ = ᐃⲆᐃⲆ * ᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.beginPath();
		Ⲇ.translate(0, ᐃ * ⵠᐃΔⵠᐃ);
		ᐃΔⵠ(Ⲇ, ΔⲆΔⲆΔΔⲆ, Δⵠⵠⵠ, ⵠⲆΔⵠΔΔΔ, ᐃΔⵠⲆΔΔⲆ, ΔⲆΔ);
		ΔΔ(Ⲇ, null, "#69A148", ᐃⵠⵠⲆΔ);
		Ⲇ.translate(0, ΔΔⵠΔⲆⵠⵠ);
		ᐃΔⵠ(Ⲇ, ΔⲆΔⲆΔΔⲆ, ⵠⵠⵠ, ⵠⲆΔⵠΔΔΔ, ᐃΔⵠⲆΔΔⲆ, ΔⲆΔ);
		ΔΔ(Ⲇ, null, "#AF352A", ᐃⵠⵠⲆΔ);
		Ⲇ.translate(0, ΔΔⵠΔⲆⵠⵠ);
		ᐃΔⵠ(Ⲇ, ΔⲆΔⲆΔΔⲆ, 0, ⵠⲆΔⵠΔΔΔ, ᐃΔⵠⲆΔΔⲆ, ΔⲆΔ);
		ΔΔ(Ⲇ, null, "#669BB1", ᐃⵠⵠⲆΔ);
		return ΔⲆ
	}

	function ᐃΔⲆᐃᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 80;
		ΔⲆ.height = 160 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ᐃ * ⵠⲆⲆᐃ, 5 * ᐃ);
		Ⲇ.save();
		ᐃΔⵠ(Ⲇ, 33 * ᐃ, 53 * ᐃ, 10 * ᐃ, ᐃ * 98, ᐃ * ⵠⲆⲆⵠΔ);
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.translate(-150 * ᐃ, -ⵠᐃⵠΔⵠⵠᐃ * ᐃ);
		Ⲇ.moveTo(ᐃ * 167.5, ᐃ * 171.0625);
		Ⲇ.bezierCurveTo(188 * ᐃ, 171.0625 * ᐃ, 188 * ᐃ, 171.0625 * ᐃ, 208.5 * ᐃ, ᐃ * 171.0625);
		Ⲇ.bezierCurveTo(ᐃ * 208.5, ᐃ * 156.0625, ᐃ * 208.5, ᐃ * 156.0625, ᐃ * 208.5, ᐃ * 141.0625);
		Ⲇ.bezierCurveTo(ᐃ * 203.5, ᐃ * 113.0625, 179.5 * ᐃ, 96.0625 * ᐃ, ᐃ * 167.5, 141.0625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.restore();
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(-5 * ᐃ, -5 * ᐃ);
		Ⲇ.save();
		ᐃΔⵠ(Ⲇ, 33 * ᐃ, ᐃ * 53, ᐃ * ⵠΔΔⲆΔ, ᐃ * 98, ᐃ * ΔΔΔᐃⲆ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * ⲆΔᐃᐃΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.translate(-150 * ᐃ, ᐃ * -ᐃΔΔⲆΔⵠΔ);
		Ⲇ.moveTo(ᐃ * 167.5, 171.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 188, 171.0625 * ᐃ, ᐃ * 188, ᐃ * 171.0625, ᐃ * 208.5, 171.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 208.5, ᐃ * 156.0625, 208.5 * ᐃ, 156.0625 * ᐃ, ᐃ * 208.5, ᐃ * 141.0625);
		Ⲇ.bezierCurveTo(203.5 * ᐃ, 113.0625 * ᐃ, ᐃ * 179.5, 96.0625 * ᐃ, ᐃ * 167.5, 141.0625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃⲆᐃⲆ], ᐃⲆⲆΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.translate(ⵠⵠⲆⵠ * ᐃ, 1 * ᐃ);
		Ⲇ.moveTo(180.5 * ᐃ, 169.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 180.5, ᐃ * 157.5625, ᐃ * 180.5, ᐃ * 157.5625, 180.5 * ᐃ, ᐃ * 146.0625);
		Ⲇ.bezierCurveTo(ᐃ * 181.5, 134.0625 * ᐃ, 193.5 * ᐃ, ᐃ * 129.0625, 196.5 * ᐃ, ᐃ * 146.0625);
		Ⲇ.bezierCurveTo(196.5 * ᐃ, ᐃ * 157.5625, ᐃ * 196.5, ᐃ * 157.5625, 196.5 * ᐃ, 169.0625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5]);
		Ⲇ.restore();
		return ΔⲆ
	}

	function ᐃᐃᐃΔⵠⵠΔ(ᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 600;
		var ⲆΔⲆ = ᐃ * 22;
		var ΔⲆΔ = 4 * ᐃ;
		var ᐃⵠⵠⲆΔ = 4 * ᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		ᐃΔⵠ(Ⲇ, ⲆᐃⲆΔ * ᐃ, 5 * ᐃ, ⲆⲆᐃ - ᐃ * ⵠⵠΔⲆᐃ, ⲆΔⲆ - 10 * ᐃ, ΔⲆΔ);
		ΔΔ(Ⲇ, null, "#BBE8EF", ᐃⵠⵠⲆΔ);
		return ΔⲆ
	}

	function ⵠⲆⲆⵠΔⲆⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 104;
		ΔⲆ.height = 117 * ᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(4 * ᐃ, ᐃ * 90);
		Ⲇ.bezierCurveTo(ᐃ * 20, 99.5 * ᐃ, ᐃ * ⲆᐃⲆⲆⲆⲆⲆ, ᐃ * 99.5, 36 * ᐃ, 109 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 67, 92 * ᐃ, 67 * ᐃ, ᐃ * 92, ᐃ * 98, ᐃ * 75);
		Ⲇ.bezierCurveTo(ᐃ * 91, ᐃ * 27, ᐃ * 91, 27 * ᐃ, 91 * ᐃ, 28 * ᐃ);
		Ⲇ.bezierCurveTo(72.5 * ᐃ, ᐃ * 16, ᐃ * 72.5, ᐃ * 16, 54 * ᐃ, 4 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 33.5, ᐃ * 10, 33.5 * ᐃ, 10 * ᐃ, ΔᐃΔᐃᐃⲆⲆ * ᐃ, ᐃ * 16);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * ΔⵠΔⵠᐃ, 76 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 13.5, 51.5 * ᐃ, 13.5 * ᐃ, ᐃ * 51.5, 21 * ᐃ, ᐃ * 27);
		Ⲇ.bezierCurveTo(37.5 * ᐃ, ᐃ * ⲆΔΔⲆⲆⵠⲆ, ᐃ * 37.5, 17 * ᐃ, ᐃ * 54, ᐃ * ⲆΔᐃⲆᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 33.5, ᐃ * 12.5, 33.5 * ᐃ, ᐃ * 12.5, ᐃ * 13, ᐃ * 18);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 24, 62 * ᐃ);
		Ⲇ.bezierCurveTo(28.5 * ᐃ, ᐃ * 53, 28.5 * ᐃ, ᐃ * 53, ᐃ * 33, ᐃ * 44);
		Ⲇ.bezierCurveTo(ᐃ * 41.5, ᐃ * 41, 41.5 * ᐃ, 41 * ᐃ, 50 * ᐃ, ᐃ * 38);
		Ⲇ.bezierCurveTo(ᐃ * 52.5, ᐃ * 35, 52.5 * ᐃ, ᐃ * 35, ᐃ * 55, 32 * ᐃ);
		Ⲇ.bezierCurveTo(52 * ᐃ, ᐃ * 30, ᐃ * 52, ᐃ * 30, 49 * ᐃ, ᐃ * 28);
		Ⲇ.bezierCurveTo(38 * ᐃ, ᐃ * 31.5, ᐃ * 38, 31.5 * ᐃ, ᐃ * 27, ᐃ * 35);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(36 * ᐃ, 107 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 66, 90.5 * ᐃ, ᐃ * 66, ᐃ * 90.5, 96 * ᐃ, 74 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 93, ᐃ * 52.5, 93 * ᐃ, 52.5 * ᐃ, ᐃ * 90, 31 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 87, 48 * ᐃ, ᐃ * 87, ᐃ * 48, 84 * ᐃ, 65 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * ⵠᐃⵠΔ, 89 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * ΔΔⵠᐃᐃ, 100 * ᐃ, ᐃ * 34, 110 * ᐃ, 35 * ᐃ, ᐃ * 111);
		Ⲇ.bezierCurveTo(67 * ᐃ, 93 * ᐃ, ᐃ * 67, ᐃ * 93, 99 * ᐃ, 75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 100, ᐃ * 78.5, ᐃ * ⲆᐃᐃⵠΔ, 78.5 * ᐃ, 101 * ᐃ, ᐃ * 82);
		Ⲇ.bezierCurveTo(68 * ᐃ, 99 * ᐃ, 68 * ᐃ, ᐃ * 99, 35 * ᐃ, 116 * ᐃ);
		Ⲇ.bezierCurveTo(18 * ᐃ, 106.5 * ᐃ, ᐃ * ⵠΔⵠⲆⵠ, ᐃ * 106.5, ᐃ * 1, ᐃ * 97);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 36, 107 * ᐃ);
		Ⲇ.bezierCurveTo(66.5 * ᐃ, 91.5 * ᐃ, ᐃ * 66.5, 91.5 * ᐃ, 97 * ᐃ, 76 * ᐃ);
		Ⲇ.bezierCurveTo(94.5 * ᐃ, 52 * ᐃ, ᐃ * 94.5, ᐃ * 52, ᐃ * 92, 28 * ᐃ);
		Ⲇ.bezierCurveTo(73 * ᐃ, 15.5 * ᐃ, ᐃ * 73, ᐃ * 15.5, 54 * ᐃ, ᐃ * ᐃΔⲆΔ);
		Ⲇ.bezierCurveTo(ᐃ * 33, 9.5 * ᐃ, 33 * ᐃ, 9.5 * ᐃ, ᐃ * 12, ᐃᐃⲆⲆⵠ * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 8, ᐃ * 53, Ⲇᐃⵠⵠᐃ * ᐃ, ᐃ * 53, ᐃ * 4, 90 * ᐃ);
		Ⲇ.bezierCurveTo(18.5 * ᐃ, ᐃ * 99, 18.5 * ᐃ, ᐃ * 99, ᐃ * 33, 108 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ⵠⲆⲆⵠ], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 22, ᐃ * 71);
		Ⲇ.bezierCurveTo(30 * ᐃ, 76.5 * ᐃ, ᐃ * 30, 76.5 * ᐃ, ᐃ * 38, ᐃ * 82);
		Ⲇ.bezierCurveTo(53 * ᐃ, 72 * ᐃ, 53 * ᐃ, 72 * ᐃ, 68 * ᐃ, 62 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 68, 52 * ᐃ, ᐃ * 68, ᐃ * 52, ᐃ * 68, ᐃ * 42);
		Ⲇ.bezierCurveTo(ᐃ * 59.5, 35.5 * ᐃ, 59.5 * ᐃ, 35.5 * ᐃ, ᐃ * 51, 29 * ᐃ);
		Ⲇ.bezierCurveTo(39.5 * ᐃ, 32 * ᐃ, 39.5 * ᐃ, 32 * ᐃ, 28 * ᐃ, ᐃ * 35);
		Ⲇ.bezierCurveTo(ᐃ * 25, ᐃ * 52, ᐃ * 25, ᐃ * 52, ᐃ * 22, 69 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ᐃᐃⵠΔ], ᐃ * ΔⵠΔⵠᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃΔΔⲆⵠ * ᐃ, 89 * ᐃ);
		Ⲇ.bezierCurveTo(ΔⲆΔⲆΔ * ᐃ, 73 * ᐃ, ᐃ * 12.5, 80.5 * ᐃ, 20 * ᐃ, 72 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠΔⲆⵠΔ, Δⵠ[ⵠⲆⲆⵠ], Ⲇⵠⵠᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(35 * ᐃ, 102 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 36, 92.5 * ᐃ, ᐃ * 36, 92.5 * ᐃ, 37 * ᐃ, ᐃ * 83);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ΔΔⵠΔΔ, Δⵠ[4], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(68 * ᐃ, ᐃ * 62);
		Ⲇ.bezierCurveTo(81 * ᐃ, ᐃ * 67.5, ᐃ * 81, ᐃ * 67.5, 94 * ᐃ, ᐃ * 73);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[4], ᐃⵠⵠⵠⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(70 * ᐃ, ᐃ * 41);
		Ⲇ.bezierCurveTo(80 * ᐃ, 35.5 * ᐃ, ᐃ * 80, ᐃ * 35.5, ᐃ * 90, 30 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆⲆⵠⵠᐃ, Δⵠ[ⲆΔᐃᐃΔ], ᐃ * ΔΔΔⵠΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 28, 33 * ᐃ);
		Ⲇ.bezierCurveTo(21.5 * ᐃ, 26.5 * ᐃ, 21.5 * ᐃ, ᐃ * 26.5, 15 * ᐃ, ᐃ * 20);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ΔΔᐃⵠⵠ, Δⵠ[4], ᐃ * 6);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 51, 28 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 53, ᐃ * ⵠΔΔΔΔ, ᐃ * 53, 17 * ᐃ, 55 * ᐃ, ᐃ * ᐃⵠⲆᐃΔ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[4], ᐃ * ⲆⲆⵠⵠⲆ);
		return ΔⲆ
	}

	function ⲆᐃᐃⲆΔⲆⵠ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 161 * ᐃ;
		ΔⲆ.height = 190 * ᐃ;
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(ⵠⲆᐃ, ΔΔᐃⲆⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 9, ᐃ * 93);
		Ⲇ.bezierCurveTo(ᐃ * ⲆΔΔⲆⲆⵠⲆ, ᐃ * 95, ᐃ * 19, ᐃ * 95, 21 * ᐃ, 95 * ᐃ);
		Ⲇ.bezierCurveTo(ΔⲆⲆΔⲆ * ᐃ, 83 * ᐃ, 17 * ᐃ, 93 * ᐃ, ᐃ * 4, 76 * ᐃ);
		Ⲇ.bezierCurveTo(11 * ᐃ, 75 * ᐃ, 11 * ᐃ, ᐃ * 75, ᐃ * 18, ᐃ * 75);
		Ⲇ.bezierCurveTo(ᐃ * 13, 67 * ᐃ, ᐃ * 13, ᐃ * 67, 7 * ᐃ, 59 * ᐃ);
		Ⲇ.bezierCurveTo(14 * ᐃ, 59 * ᐃ, ᐃ * 14, ᐃ * 59, ᐃ * 21, 59 * ᐃ);
		Ⲇ.bezierCurveTo(46 * ᐃ, ᐃ * 35, 35 * ᐃ, 45 * ᐃ, ᐃ * 49, 31 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 53, 24 * ᐃ, 51 * ᐃ, ᐃ * 21, ᐃ * 51, ⲆⵠᐃⵠΔᐃΔ * ᐃ);
		Ⲇ.bezierCurveTo(63 * ᐃ, ᐃ * 23, 63 * ᐃ, ᐃ * 24, ᐃ * 69, 29 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 76, 7 * ᐃ, ᐃ * 75, ᐃⵠΔⲆΔ * ᐃ, ᐃ * 76, ᐃ * ⲆΔⵠΔΔ);
		Ⲇ.bezierCurveTo(ᐃ * 81, 12 * ᐃ, ᐃ * 84, ΔⵠᐃᐃΔⲆᐃ * ᐃ, ᐃ * 89, ᐃ * 27);
		Ⲇ.bezierCurveTo(95 * ᐃ, 25 * ᐃ, ᐃ * ᐃΔⵠᐃⵠ, ᐃΔⲆΔΔⲆᐃ * ᐃ, 105 * ᐃ, 14 * ᐃ);
		Ⲇ.bezierCurveTo(103 * ᐃ, 25 * ᐃ, ᐃ * 111, ᐃ * 33, ᐃ * 110, 34 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 123, 48 * ᐃ, 123 * ᐃ, 48 * ᐃ, ᐃ * 136, ᐃ * 62);
		Ⲇ.bezierCurveTo(142 * ᐃ, 60 * ᐃ, 147 * ᐃ, 59 * ᐃ, 155 * ᐃ, ᐃ * 58);
		Ⲇ.bezierCurveTo(ᐃ * 147, 65 * ᐃ, 147 * ᐃ, ᐃ * 65, ᐃ * 139, ᐃ * 73);
		Ⲇ.bezierCurveTo(145 * ᐃ, ᐃ * 73, 145 * ᐃ, 73 * ᐃ, 151 * ᐃ, ᐃ * 73);
		Ⲇ.bezierCurveTo(145 * ᐃ, 80 * ᐃ, 145 * ᐃ, ᐃ * 80, ᐃ * 138, ᐃ * 87);
		Ⲇ.bezierCurveTo(ᐃ * 144, ᐃ * 88, ᐃ * 144, ᐃ * 88, ᐃ * 150, 89 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 125, ᐃ * 103, ᐃ * 125, ᐃ * 125, ᐃ * 113, ᐃ * 141);
		Ⲇ.bezierCurveTo(92 * ᐃ, ᐃ * 178, 85 * ᐃ, ᐃ * 177, 76 * ᐃ, ᐃ * 178);
		Ⲇ.bezierCurveTo(ᐃ * 64, ᐃ * 179, ᐃ * 51, ᐃ * 164, ᐃ * 35, ᐃ * 131);
		Ⲇ.bezierCurveTo(ᐃ * ΔⵠᐃᐃΔⲆᐃ, 95 * ᐃ, ᐃ * ⵠⲆΔⲆⵠⲆΔ, 99 * ᐃ, ᐃ * Ⲇᐃⵠⵠᐃ, ᐃ * 93);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃᐃ]);
		Ⲇ.globalAlpha = ΔⵠΔ;
		Ⲇ.translate(0, -8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * ᐃᐃᐃᐃᐃⲆᐃ, 93 * ᐃ);
		Ⲇ.bezierCurveTo(17 * ᐃ, ᐃ * 95, ᐃ * ᐃᐃⲆⵠᐃ, ᐃ * 95, ᐃ * 21, 95 * ᐃ);
		Ⲇ.bezierCurveTo(ΔⲆⵠⲆⵠⵠⵠ * ᐃ, ᐃ * 83, ᐃⵠΔᐃΔΔᐃ * ᐃ, ᐃ * 93, 4 * ᐃ, 76 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * ⵠΔΔᐃΔᐃΔ, 75 * ᐃ, ΔⵠᐃⵠⲆⲆΔ * ᐃ, ᐃ * 75, ᐃ * ⵠᐃⵠᐃΔ, ᐃ * 75);
		Ⲇ.bezierCurveTo(13 * ᐃ, ᐃ * 67, ᐃⲆⲆⲆⲆΔⵠ * ᐃ, ᐃ * 67, ᐃ * 7, 59 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * ⲆᐃⵠΔᐃ, 59 * ᐃ, ᐃ * ⵠΔⲆᐃᐃ, 59 * ᐃ, 21 * ᐃ, ᐃ * 59);
		Ⲇ.bezierCurveTo(ᐃ * 46, ᐃ * 35, ᐃ * 35, 45 * ᐃ, 49 * ᐃ, 31 * ᐃ);
		Ⲇ.bezierCurveTo(53 * ᐃ, ᐃ * 24, ᐃ * 51, ᐃ * 21, 51 * ᐃ, ᐃ * 16);
		Ⲇ.bezierCurveTo(63 * ᐃ, ᐃ * 23, 63 * ᐃ, ᐃ * 24, 69 * ᐃ, 29 * ᐃ);
		Ⲇ.bezierCurveTo(76 * ᐃ, ⵠⲆⵠⵠⲆⲆⵠ * ᐃ, ᐃ * 75, ᐃ * 11, 76 * ᐃ, ᐃΔᐃΔᐃ * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 81, ᐃᐃΔΔⵠ * ᐃ, ᐃ * 84, ⲆⲆⲆⲆⲆ * ᐃ, ᐃ * 89, 27 * ᐃ);
		Ⲇ.bezierCurveTo(95 * ᐃ, 25 * ᐃ, 100 * ᐃ, ⲆΔⲆⵠΔ * ᐃ, 105 * ᐃ, ᐃ * ⵠΔⲆᐃᐃ);
		Ⲇ.bezierCurveTo(103 * ᐃ, ᐃ * 25, ᐃ * 111, ᐃ * 33, 110 * ᐃ, ᐃ * 34);
		Ⲇ.bezierCurveTo(123 * ᐃ, ᐃ * 48, ᐃ * 123, 48 * ᐃ, 136 * ᐃ, 62 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 142, ᐃ * 60, ᐃ * 147, 59 * ᐃ, ᐃ * 155, ᐃ * 58);
		Ⲇ.bezierCurveTo(ᐃ * 147, ᐃ * 65, 147 * ᐃ, 65 * ᐃ, 139 * ᐃ, 73 * ᐃ);
		Ⲇ.bezierCurveTo(145 * ᐃ, ᐃ * 73, ᐃ * 145, ᐃ * 73, ᐃ * 151, 73 * ᐃ);
		Ⲇ.bezierCurveTo(145 * ᐃ, ᐃ * 80, ᐃ * 145, 80 * ᐃ, 138 * ᐃ, ᐃ * 87);
		Ⲇ.bezierCurveTo(144 * ᐃ, ᐃ * 88, 144 * ᐃ, ᐃ * 88, 150 * ᐃ, ᐃ * 89);
		Ⲇ.bezierCurveTo(ᐃ * 125, ᐃ * 103, ᐃ * 125, ᐃ * 125, ᐃ * 113, 141 * ᐃ);
		Ⲇ.bezierCurveTo(92 * ᐃ, ᐃ * 178, 85 * ᐃ, ᐃ * 177, 76 * ᐃ, ᐃ * 178);
		Ⲇ.bezierCurveTo(ᐃ * 64, 179 * ᐃ, ᐃ * 51, ᐃ * 164, ᐃ * 35, ᐃ * 131);
		Ⲇ.bezierCurveTo(ᐃ * ⲆⵠⲆⵠΔᐃΔ, ᐃ * 95, 13 * ᐃ, ᐃ * 99, 8 * ᐃ, 93 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(28 * ᐃ, ᐃ * 63);
		Ⲇ.bezierCurveTo(ᐃ * 23, 54 * ᐃ, 24 * ᐃ, 47 * ᐃ, 26 * ᐃ, ᐃ * 37);
		Ⲇ.bezierCurveTo(ᐃ * 28, 29 * ᐃ, 31 * ᐃ, 31 * ᐃ, ᐃ * 41, 35 * ᐃ);
		Ⲇ.bezierCurveTo(52 * ᐃ, 45 * ᐃ, 55 * ᐃ, 51 * ᐃ, 57 * ᐃ, ᐃ * 53);
		Ⲇ.bezierCurveTo(ᐃ * 50, 50 * ᐃ, 44 * ᐃ, 47 * ᐃ, ᐃ * 43, ᐃ * 48);
		Ⲇ.bezierCurveTo(ᐃ * 43, 52 * ᐃ, 43 * ᐃ, ᐃ * 52, 42 * ᐃ, 57 * ᐃ);
		Ⲇ.bezierCurveTo(38 * ᐃ, ᐃ * 54, ᐃ * 38, ᐃ * 54, ᐃ * 33, ᐃ * 51);
		Ⲇ.bezierCurveTo(ᐃ * 34, 56 * ᐃ, ᐃ * 34, ᐃ * 56, ᐃ * 34, 61 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 99, ᐃ * 55);
		Ⲇ.bezierCurveTo(ᐃ * 107, 43 * ᐃ, 113 * ᐃ, ᐃ * 39, 121 * ᐃ, ᐃ * 34);
		Ⲇ.bezierCurveTo(ᐃ * 130, 29 * ᐃ, 130 * ᐃ, 34 * ᐃ, 130 * ᐃ, 42 * ᐃ);
		Ⲇ.bezierCurveTo(131 * ᐃ, ᐃ * 57, 128 * ᐃ, 61 * ᐃ, 129 * ᐃ, 63 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 124, 62 * ᐃ, 124 * ᐃ, 62 * ᐃ, 119 * ᐃ, 61 * ᐃ);
		Ⲇ.bezierCurveTo(119 * ᐃ, ᐃ * 56, ᐃ * 120, ᐃ * 61, ᐃ * 118, ᐃ * 52);
		Ⲇ.bezierCurveTo(115 * ᐃ, 55 * ᐃ, 111 * ᐃ, 59 * ᐃ, 111 * ᐃ, ᐃ * 58);
		Ⲇ.bezierCurveTo(110 * ᐃ, 54 * ᐃ, 109 * ᐃ, ᐃ * 57, ᐃ * 109, ᐃ * 51);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		ᐃΔΔ(Ⲇ, ᐃ * 103, 110 * ᐃ, ᐃ * 11);
		ΔΔ(Ⲇ, Δⵠ[4]);
		ᐃΔΔ(Ⲇ, ᐃ * 55, ᐃ * 111, ᐃ * ΔⵠⵠᐃΔⵠⲆ);
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔⲆ]);
		ᐃΔΔ(Ⲇ, 99 * ᐃ, 107 * ᐃ, ᐃ * 5);
		ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃᐃ]);
		ᐃΔΔ(Ⲇ, 51 * ᐃ, 108 * ᐃ, ᐃᐃΔᐃ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(31 * ᐃ, ᐃ * 121);
		Ⲇ.bezierCurveTo(45 * ᐃ, ᐃ * 128, 51 * ᐃ, ᐃ * 133, 53 * ᐃ, ᐃ * 141);
		Ⲇ.bezierCurveTo(59 * ᐃ, 161 * ᐃ, 70 * ᐃ, ᐃ * 173, 80 * ᐃ, ᐃ * 169);
		Ⲇ.bezierCurveTo(ᐃ * 89, 172 * ᐃ, 99 * ᐃ, 149 * ᐃ, ᐃ * 107, 133 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 114, 122 * ᐃ, 119 * ᐃ, 123 * ᐃ, ᐃ * 124, 119 * ᐃ);
		Ⲇ.bezierCurveTo(109 * ᐃ, 148 * ᐃ, ᐃ * 117, ᐃ * 133, ᐃ * 109, ᐃ * 147);
		Ⲇ.bezierCurveTo(87 * ᐃ, 180 * ᐃ, 84 * ᐃ, ᐃ * 179, 76 * ᐃ, 178 * ᐃ);
		Ⲇ.bezierCurveTo(49 * ᐃ, ᐃ * 173, 44 * ᐃ, 149 * ᐃ, 31 * ᐃ, 121 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.translate(-2, ΔΔᐃ);
		Ⲇ.moveTo(ᐃ * 71, ᐃ * 162);
		Ⲇ.bezierCurveTo(ᐃ * 80, ᐃ * 155, ᐃ * 85, ᐃ * 159, 89 * ᐃ, 164 * ᐃ);
		Ⲇ.bezierCurveTo(90 * ᐃ, 171 * ᐃ, ᐃ * 86, ᐃ * 173, ᐃ * 79, ᐃ * 173);
		Ⲇ.bezierCurveTo(ᐃ * 67, ᐃ * 172, ᐃ * 67, ᐃ * 168, 71 * ᐃ, ᐃ * 162);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆᐃⵠ]);
		Ⲇ.translate(ⵠΔⵠΔ, ⵠᐃⲆⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃⲆᐃᐃⲆ * ᐃ, ᐃ * 93);
		Ⲇ.bezierCurveTo(ᐃ * ᐃⵠΔᐃΔΔᐃ, 95 * ᐃ, ᐃ * 19, ᐃ * 95, 21 * ᐃ, 95 * ᐃ);
		Ⲇ.bezierCurveTo(9 * ᐃ, 83 * ᐃ, ᐃ * 17, 93 * ᐃ, ᐃΔᐃΔ * ᐃ, 76 * ᐃ);
		Ⲇ.bezierCurveTo(ⲆⵠⲆⲆⵠⵠⲆ * ᐃ, ᐃ * 75, ΔⵠⲆᐃⵠⲆᐃ * ᐃ, 75 * ᐃ, ᐃ * 18, 75 * ᐃ);
		Ⲇ.bezierCurveTo(13 * ᐃ, 67 * ᐃ, ΔᐃΔᐃᐃⲆⲆ * ᐃ, 67 * ᐃ, ⵠⲆⲆΔΔΔⲆ * ᐃ, 59 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 14, 59 * ᐃ, 14 * ᐃ, ᐃ * 59, ᐃ * 21, ᐃ * 59);
		Ⲇ.bezierCurveTo(ᐃ * 46, ᐃ * 35, ᐃ * 35, ᐃ * 45, 49 * ᐃ, 31 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 53, 24 * ᐃ, 51 * ᐃ, ᐃ * 21, ᐃ * 51, ⵠᐃᐃⲆⲆ * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 63, 23 * ᐃ, ᐃ * 63, 24 * ᐃ, ᐃ * 69, ᐃ * 29);
		Ⲇ.bezierCurveTo(76 * ᐃ, ⵠⲆⵠⵠⲆⲆⵠ * ᐃ, ᐃ * 75, ⲆⲆΔⲆⲆ * ᐃ, ᐃ * 76, 6 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 81, 12 * ᐃ, ᐃ * 84, ⲆⲆⲆⲆⲆ * ᐃ, 89 * ᐃ, ᐃ * 27);
		Ⲇ.bezierCurveTo(ᐃ * 95, ᐃ * 25, ᐃ * ⲆⵠⲆⲆⵠ, 16 * ᐃ, 105 * ᐃ, ᐃ * 14);
		Ⲇ.bezierCurveTo(103 * ᐃ, ᐃ * 25, ᐃ * 111, 33 * ᐃ, ᐃ * 110, ᐃ * 34);
		Ⲇ.bezierCurveTo(ᐃ * 123, 48 * ᐃ, 123 * ᐃ, ᐃ * 48, 136 * ᐃ, ᐃ * 62);
		Ⲇ.bezierCurveTo(ᐃ * 142, ᐃ * 60, ᐃ * 147, ᐃ * 59, ᐃ * 155, ᐃ * 58);
		Ⲇ.bezierCurveTo(ᐃ * 147, 65 * ᐃ, 147 * ᐃ, ᐃ * 65, 139 * ᐃ, 73 * ᐃ);
		Ⲇ.bezierCurveTo(145 * ᐃ, ᐃ * 73, 145 * ᐃ, ᐃ * 73, ᐃ * 151, 73 * ᐃ);
		Ⲇ.bezierCurveTo(145 * ᐃ, 80 * ᐃ, 145 * ᐃ, 80 * ᐃ, 138 * ᐃ, 87 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 144, 88 * ᐃ, ᐃ * 144, ᐃ * 88, 150 * ᐃ, 89 * ᐃ);
		Ⲇ.bezierCurveTo(125 * ᐃ, ᐃ * 103, ᐃ * 125, ᐃ * 125, 113 * ᐃ, 141 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 92, 178 * ᐃ, 85 * ᐃ, 177 * ᐃ, 76 * ᐃ, 178 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 64, ᐃ * 179, 51 * ᐃ, ᐃ * 164, 35 * ᐃ, ᐃ * 131);
		Ⲇ.bezierCurveTo(ᐃ * ⲆⲆⲆⲆⲆ, ᐃ * 95, ⲆᐃΔⲆⵠ * ᐃ, 99 * ᐃ, 8 * ᐃ, 93 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 25, ᐃ * 63);
		Ⲇ.bezierCurveTo(16 * ᐃ, ᐃ * 58, ᐃ * 17, ᐃ * 51, ᐃ * ΔᐃΔⲆⲆⵠᐃ, ᐃ * 33);
		Ⲇ.bezierCurveTo(ᐃ * 19, ᐃᐃΔΔⵠ * ᐃ, 21 * ᐃ, 12 * ᐃ, ᐃ * 32, ᐃΔᐃⲆᐃᐃⵠ * ᐃ);
		Ⲇ.bezierCurveTo(63 * ᐃ, 31 * ᐃ, 66 * ᐃ, 45 * ᐃ, 66 * ᐃ, 54 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[Δᐃⵠⵠ], Δⵠ[ΔᐃΔᐃ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 91, ᐃ * 53);
		Ⲇ.bezierCurveTo(ᐃ * 91, 40 * ᐃ, 98 * ᐃ, 33 * ᐃ, ᐃ * 121, 20 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 137, ⲆᐃᐃⵠᐃⲆΔ * ᐃ, ᐃ * 137, ᐃ * ᐃΔⲆⲆΔ, 139 * ᐃ, 27 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 141, ᐃ * 49, ᐃ * 140, ᐃ * 57, ᐃ * 134, ᐃ * 64);
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔ], Δⵠ[2], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 31, ᐃ * 63);
		Ⲇ.bezierCurveTo(ᐃ * 23, 54 * ᐃ, ᐃ * 24, ᐃ * 47, ᐃ * 26, ᐃ * 37);
		Ⲇ.bezierCurveTo(ᐃ * 28, ᐃ * 29, ᐃ * 31, 31 * ᐃ, 41 * ᐃ, 35 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 52, 45 * ᐃ, ᐃ * 55, 51 * ᐃ, ᐃ * 57, ᐃ * 53);
		Ⲇ.bezierCurveTo(ᐃ * 50, ᐃ * 50, 44 * ᐃ, 47 * ᐃ, 43 * ᐃ, ᐃ * 48);
		Ⲇ.bezierCurveTo(43 * ᐃ, 52 * ᐃ, 43 * ᐃ, ᐃ * 52, 42 * ᐃ, ᐃ * 57);
		Ⲇ.bezierCurveTo(ᐃ * 38, ᐃ * 54, 38 * ᐃ, ᐃ * 54, 33 * ᐃ, ᐃ * 51);
		Ⲇ.bezierCurveTo(34 * ᐃ, ᐃ * 56, 34 * ᐃ, ᐃ * 56, ᐃ * 34, 61 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 99, ᐃ * 55);
		Ⲇ.bezierCurveTo(107 * ᐃ, 43 * ᐃ, 113 * ᐃ, ᐃ * 39, 121 * ᐃ, 34 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 130, 29 * ᐃ, 130 * ᐃ, 34 * ᐃ, ᐃ * 130, 42 * ᐃ);
		Ⲇ.bezierCurveTo(131 * ᐃ, 57 * ᐃ, 128 * ᐃ, ᐃ * 61, 129 * ᐃ, ᐃ * 63);
		Ⲇ.bezierCurveTo(ᐃ * 124, ᐃ * 62, ᐃ * 124, 62 * ᐃ, 119 * ᐃ, 61 * ᐃ);
		Ⲇ.bezierCurveTo(119 * ᐃ, 56 * ᐃ, 120 * ᐃ, 61 * ᐃ, 118 * ᐃ, ᐃ * 52);
		Ⲇ.bezierCurveTo(ᐃ * 115, ᐃ * 55, ᐃ * 111, 59 * ᐃ, ᐃ * 111, ᐃ * 58);
		Ⲇ.bezierCurveTo(110 * ᐃ, ᐃ * 54, 109 * ᐃ, 57 * ᐃ, ᐃ * 109, 51 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		return ΔⲆ
	}

	function ᐃⵠⵠⲆΔⲆΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 147 * ᐃ;
		ΔⲆ.height = 172 * ᐃ;
		Ⲇ.globalAlpha = .5;
		Ⲇ.translate(ΔΔᐃ, ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * ⵠᐃΔᐃΔ, 50 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * ᐃᐃΔᐃⲆ, ⲆⲆᐃⲆⵠᐃⲆ * ᐃ, ᐃ * 49, ᐃ * ⲆⲆⲆᐃᐃ, 67 * ᐃ, ᐃ * 6);
		Ⲇ.bezierCurveTo(121 * ᐃ, ᐃ * ΔΔᐃΔ, 128 * ᐃ, 32 * ᐃ, ᐃ * 135, 48 * ᐃ);
		Ⲇ.bezierCurveTo(146 * ᐃ, 96 * ᐃ, 124 * ᐃ, ᐃ * 131, 96 * ᐃ, ᐃ * 135);
		Ⲇ.bezierCurveTo(ᐃ * 96, 158 * ᐃ, 79 * ᐃ, 156 * ᐃ, 75 * ᐃ, ᐃ * 156);
		Ⲇ.bezierCurveTo(ᐃ * 50, 154 * ᐃ, 53 * ᐃ, 150 * ᐃ, 52 * ᐃ, 135 * ᐃ);
		Ⲇ.bezierCurveTo(2 * ᐃ, ᐃ * 127, 3 * ᐃ, ᐃ * 87, ᐃ * ΔⲆⲆⲆΔⵠᐃ, ᐃ * 50);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ]);
		Ⲇ.translate(ⵠⲆᐃ, ᐃ * -8);
		Ⲇ.globalAlpha = Δⵠᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(8 * ᐃ, 50 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 15, ᐃ * 16, 49 * ᐃ, ᐃ * 6, ᐃ * 67, ᐃ * ΔΔΔΔ);
		Ⲇ.bezierCurveTo(121 * ᐃ, ⲆΔᐃⲆ * ᐃ, ᐃ * 128, 32 * ᐃ, ᐃ * 135, 48 * ᐃ);
		Ⲇ.bezierCurveTo(146 * ᐃ, 96 * ᐃ, 124 * ᐃ, 131 * ᐃ, ᐃ * 96, 135 * ᐃ);
		Ⲇ.bezierCurveTo(96 * ᐃ, 158 * ᐃ, ᐃ * 79, 156 * ᐃ, 75 * ᐃ, 156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 50, ᐃ * 154, ᐃ * 53, 150 * ᐃ, 52 * ᐃ, 135 * ᐃ);
		Ⲇ.bezierCurveTo(2 * ᐃ, 127 * ᐃ, ᐃ * ᐃᐃᐃΔᐃ, ᐃ * 87, 8 * ᐃ, ᐃ * 50);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⲆⲆΔⲆ], ᐃ * ⵠᐃΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * ⵠⵠⲆⵠᐃᐃᐃ, 57 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * ⲆᐃⵠΔ, ᐃ * 50, Ⲇᐃⵠᐃ * ᐃ, 22 * ᐃ, 24 * ᐃ, 22 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 41, ᐃ * 21, 54 * ᐃ, ᐃ * 32, 55 * ᐃ, ᐃ * 48);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 93, 47 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 94, 24 * ᐃ, 116 * ᐃ, ᐃ * 21, 120 * ᐃ, ᐃ * ⵠᐃᐃⵠΔ);
		Ⲇ.bezierCurveTo(ᐃ * 144, ᐃ * ᐃΔᐃⲆᐃᐃⵠ, 146 * ᐃ, 52 * ᐃ, 133 * ᐃ, 58 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[Δᐃⵠⵠ], Δⵠ[2], 4 * ᐃ);
		ᐃΔΔ(Ⲇ, 51 * ᐃ, 91 * ᐃ, ᐃ * ᐃΔⵠⵠⲆ);
		ΔΔ(Ⲇ, Δⵠ[3]);
		ᐃΔΔ(Ⲇ, ᐃ * 95, 91 * ᐃ, ᐃ * ⵠΔΔⵠⲆΔᐃ);
		ΔΔ(Ⲇ, Δⵠ[3]);
		ᐃΔΔ(Ⲇ, ᐃ * 91, ᐃ * 89, 4 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[4]);
		ᐃΔΔ(Ⲇ, ᐃ * 47, 89 * ᐃ, ⵠᐃΔΔ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[4]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(54 * ᐃ, ᐃ * 133);
		Ⲇ.bezierCurveTo(56 * ᐃ, ᐃ * 108, 64 * ᐃ, ᐃ * 99, 73 * ᐃ, ᐃ * 98);
		Ⲇ.bezierCurveTo(ᐃ * 86, ᐃ * 97, ᐃ * 91, ᐃ * 119, 93 * ᐃ, 133 * ᐃ);
		Ⲇ.bezierCurveTo(94 * ᐃ, 155 * ᐃ, 90 * ᐃ, 150 * ᐃ, ᐃ * 74, ᐃ * 155);
		Ⲇ.bezierCurveTo(50 * ᐃ, 152 * ᐃ, ᐃ * 55, ᐃ * 145, ᐃ * 54, ᐃ * 134);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠΔΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 65.25, 135 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 75.25, ᐃ * 128, 83.25 * ᐃ, ᐃ * 133, 83.25 * ᐃ, ᐃ * 138);
		Ⲇ.bezierCurveTo(88.25 * ᐃ, 148 * ᐃ, ᐃ * 61.25, 149 * ᐃ, ᐃ * 64.25, ᐃ * 137);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(74 * ᐃ, ᐃ * 145);
		Ⲇ.bezierCurveTo(ᐃ * 74, ᐃ * 148, 74 * ᐃ, 148 * ᐃ, ᐃ * 74, 151 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[6], ΔⵠⲆᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 19, 58 * ᐃ);
		Ⲇ.bezierCurveTo(10 * ᐃ, ᐃ * 38, ⲆⲆⲆⵠᐃᐃᐃ * ᐃ, ᐃ * 33, ᐃ * 28, ᐃ * 34);
		Ⲇ.bezierCurveTo(41 * ᐃ, ᐃ * 39, 45 * ᐃ, ᐃ * 45, ᐃ * 50, ᐃ * 51);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Ⲇⵠⵠᐃⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(100 * ᐃ, ᐃ * 51);
		Ⲇ.bezierCurveTo(106 * ᐃ, ᐃ * 36, ᐃ * 119, ᐃ * 31, ᐃ * 128, 36 * ᐃ);
		Ⲇ.bezierCurveTo(137 * ᐃ, 49 * ᐃ, 128 * ᐃ, ᐃ * 58, 128 * ᐃ, 60 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠᐃ]);
		return ΔⲆ
	}

	function ⲆⲆⵠⲆᐃⵠΔΔⵠ(ᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 321 * ᐃ;
		ΔⲆ.height = ᐃ * 345;
		Ⲇ.translate(0, ΔⵠΔᐃ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 161.00003051757812, ᐃ * 165.40341186523438, ᐃ * 20.808652046684813);
		ΔΔ(Ⲇ, ⵠ[124], ⵠ[420], ᐃ * ΔⲆᐃΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 162.00003051757812, 48.403411865234375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 172.50003051757812, 67.40341186523438 * ᐃ, 172.50003051757812 * ᐃ, ᐃ * 67.40341186523438, 183.00003051757812 * ᐃ, ᐃ * 86.40341186523438);
		Ⲇ.bezierCurveTo(ᐃ * 160.50003051757812, 86.40341186523438 * ᐃ, 160.50003051757812 * ᐃ, ᐃ * 86.40341186523438, ᐃ * 138.00003051757812, ᐃ * 86.40341186523438);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠ[124], ⵠ[420], ᐃ * ΔΔⵠᐃⵠ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 161.50003051757812, ᐃ * 117.90341186523438);
		ᐃΔⵠ(Ⲇ, ᐃ * -5.5, ᐃ * -37.5, ᐃ * 11, 75 * ᐃ, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, ⵠ[124], ⵠ[420], ᐃ * 10);
		Ⲇ.save();
		Ⲇ.translate(162.00003051757812 * ᐃ, 78.90341186523438 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -10, ᐃ * -5.5, 20 * ᐃ, ᐃ * 11, ΔⲆᐃⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, ⵠ[124]);
		ᐃΔΔ(Ⲇ, ᐃ * 161.00003051757812, ᐃ * 163.6761474609375, 17.08800749063506 * ᐃ);
		ΔΔ(Ⲇ, ⵠ[124]);
		return ΔⲆ
	}

	function ⵠᐃΔⲆΔΔᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 160;
		ΔⲆ.height = 161 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔᐃΔⲆ;
		Ⲇ.translate(0, ᐃ * ⵠⵠΔⲆᐃ);
		Ⲇ.save();
		Ⲇ.translate(80.5 * ᐃ, 78 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -71.5, ᐃ * -71, 143 * ᐃ, 143 * ᐃ, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ⵠⵠⵠ, ᐃ * -ΔⵠⵠᐃⲆ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 80.5, 78 * ᐃ);
		ᐃΔⵠ(Ⲇ, -71.5 * ᐃ, ᐃ * -71, 143 * ᐃ, 143 * ᐃ, ᐃ * ⵠⲆⵠᐃⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔΔΔ], Δⵠ[ΔⵠⲆᐃ], ᐃ * ΔⵠΔⵠᐃ);
		Ⲇ.save();
		Ⲇ.translate(80 * ᐃ, 78.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -ᐃΔᐃⲆᐃᐃⵠ, ᐃ * -72.5, ᐃ * 34, ᐃ * 145, ⲆⲆⵠⲆⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], 6 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔᐃΔⲆ;
		Ⲇ.translate(0, ᐃ * 10);
		Ⲇ.save();
		Ⲇ.translate(80 * ᐃ, ᐃ * 79.5);
		ᐃΔⵠ(Ⲇ, ᐃ * -73, ᐃ * -16.5, ᐃ * 145, 34 * ᐃ, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ⵠⲆᐃ, -10 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 80, ᐃ * 79.5);
		ᐃΔⵠ(Ⲇ, -73 * ᐃ, -16.5 * ᐃ, ᐃ * 145, ᐃ * 34, ᐃ * ⵠⲆⵠᐃⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * 6);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : Ⲇⵠᐃ;
		Ⲇ.translate(0, ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 79, 71 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 90, ᐃ * 42, 98 * ᐃ, ᐃ * 36, ᐃ * 109, 43 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 119, ᐃ * 47, ᐃ * 128, ᐃ * 62, 107 * ᐃ, ᐃ * 72);
		Ⲇ.bezierCurveTo(96 * ᐃ, 78.5 * ᐃ, 96 * ᐃ, 78.5 * ᐃ, 85 * ᐃ, ᐃ * 85);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(84 * ᐃ, ᐃ * 78);
		Ⲇ.bezierCurveTo(ᐃ * 113, ᐃ * 82, ᐃ * 123, 97 * ᐃ, ᐃ * 115, 108 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 110, 119 * ᐃ, 98 * ᐃ, 124 * ᐃ, 87 * ᐃ, ᐃ * 107);
		Ⲇ.bezierCurveTo(ᐃ * 81.5, 94.5 * ᐃ, ᐃ * 81.5, ᐃ * 94.5, 76 * ᐃ, ᐃ * 82);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(80 * ᐃ, 73 * ᐃ);
		Ⲇ.bezierCurveTo(64 * ᐃ, 37 * ᐃ, ᐃ * 55, ᐃ * 34, ᐃ * 45, ᐃ * 42);
		Ⲇ.bezierCurveTo(30 * ᐃ, ᐃ * 54, ᐃ * 36, ᐃ * 65, 51 * ᐃ, ᐃ * 72);
		Ⲇ.bezierCurveTo(62.5 * ᐃ, ᐃ * 77, 62.5 * ᐃ, ᐃ * 77, 74 * ᐃ, 82 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(82 * ᐃ, ᐃ * 83);
		Ⲇ.bezierCurveTo(ᐃ * 73, 107 * ᐃ, ᐃ * 60, ᐃ * 123, ᐃ * 47, 113 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 33, 105 * ᐃ, ᐃ * 33, ᐃ * 92, 52 * ᐃ, 85 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 74, 73 * ᐃ, ᐃ * 77, ᐃ * 76, ᐃ * 76, 75 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ᐃⵠⵠⲆ, ᐃ * -ⵠⲆΔⲆᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 79, ᐃ * 71);
		Ⲇ.bezierCurveTo(ᐃ * 90, ᐃ * 42, 98 * ᐃ, 36 * ᐃ, ᐃ * 109, ᐃ * 43);
		Ⲇ.bezierCurveTo(119 * ᐃ, 47 * ᐃ, ᐃ * 128, 62 * ᐃ, ᐃ * 107, 72 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 96, 78.5 * ᐃ, ᐃ * 96, 78.5 * ᐃ, ᐃ * 85, 85 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * ⲆⲆⲆᐃᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 84, ᐃ * 78);
		Ⲇ.bezierCurveTo(ᐃ * 113, ᐃ * 82, 123 * ᐃ, 97 * ᐃ, ᐃ * 115, 108 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 110, 119 * ᐃ, 98 * ᐃ, 124 * ᐃ, ᐃ * 87, ᐃ * 107);
		Ⲇ.bezierCurveTo(81.5 * ᐃ, ᐃ * 94.5, ᐃ * 81.5, ᐃ * 94.5, ᐃ * 76, 82 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃⲆⵠᐃⵠ], ᐃ * ΔΔΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 80, 73 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 64, ᐃ * 37, ᐃ * 55, 34 * ᐃ, 45 * ᐃ, 42 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 30, 54 * ᐃ, 36 * ᐃ, ᐃ * 65, ᐃ * 51, ᐃ * 72);
		Ⲇ.bezierCurveTo(62.5 * ᐃ, ᐃ * 77, ᐃ * 62.5, 77 * ᐃ, ᐃ * 74, 82 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⵠᐃᐃΔ], ⲆⲆⲆᐃᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 82, 83 * ᐃ);
		Ⲇ.bezierCurveTo(73 * ᐃ, ᐃ * 107, ᐃ * 60, 123 * ᐃ, ᐃ * 47, 113 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 33, ᐃ * 105, 33 * ᐃ, ᐃ * 92, ᐃ * 52, 85 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 74, ᐃ * 73, 77 * ᐃ, 76 * ᐃ, ᐃ * 76, 75 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⲆΔ], Δⵠ[ⵠᐃΔⲆ], ⲆΔⵠᐃⵠ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ⲆᐃΔ;
		Ⲇ.translate(0, ᐃ * 10);
		Ⲇ.save();
		Ⲇ.translate(78.5 * ᐃ, ᐃ * 78);
		ᐃΔⵠ(Ⲇ, -13.5 * ᐃ, ᐃ * -14, ᐃ * 27, ᐃ * 27, ᐃ * ΔΔΔΔ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ]);
		Ⲇ.globalAlpha = Δᐃⵠⵠ;
		Ⲇ.translate(ⵠⲆⵠⵠ, -ᐃⵠᐃⵠⲆ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(78.5 * ᐃ, ᐃ * 78);
		ᐃΔⵠ(Ⲇ, ᐃ * -13.5, ᐃ * -ⵠⲆᐃᐃⵠ, ᐃ * 27, 27 * ᐃ, Ⲇⵠⵠᐃⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], 6 * ᐃ);
		return ΔⲆ
	}

	function ᐃΔΔΔΔΔᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * ⵠΔⵠΔΔ;
		ΔⲆ.height = ⵠⵠⲆⲆⵠ * ᐃ;
		Ⲇ.globalAlpha = .5;
		Ⲇ.fillStyle = Δⵠ[0];
		Ⲇ.fillRect(0, ⵠⲆⵠⵠ, ΔⲆ.width, ΔⲆ.height);
		return ΔⲆ
	}

	function ΔⵠΔⵠⵠⵠⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 106 * ᐃ;
		ΔⲆ.height = 681 * ᐃ;
		Ⲇ.translate(ⵠΔⵠᐃⲆ * ᐃ, ᐃ * 20);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔᐃⵠⲆ;
		Ⲇ.save();
		Ⲇ.translate(52.5 * ᐃ, 395 * ᐃ);
		Ⲇ.rotate(Δⵠⵠⵠ);
		ᐃΔⵠ(Ⲇ, ᐃ * -11.5, -226 * ᐃ, 23 * ᐃ, ᐃ * 452, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 35, ᐃ * 588);
		Ⲇ.bezierCurveTo(ᐃ * 47, ᐃ * 596, ᐃ * 61, 594 * ᐃ, ᐃ * 69, 588 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 79, ᐃ * 615, ᐃ * 78, 632 * ᐃ, 59 * ᐃ, 643 * ᐃ);
		Ⲇ.bezierCurveTo(41 * ᐃ, ᐃ * 650, 27 * ᐃ, 632 * ᐃ, 30 * ᐃ, ᐃ * 610);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 52, ᐃ * 135);
		Ⲇ.bezierCurveTo(ᐃ * 61.5, 142 * ᐃ, ᐃ * 61.5, ᐃ * 142, ᐃ * 71, 149 * ᐃ);
		Ⲇ.bezierCurveTo(69.5 * ᐃ, 166 * ᐃ, 69.5 * ᐃ, 166 * ᐃ, ᐃ * 68, ᐃ * 183);
		Ⲇ.bezierCurveTo(ᐃ * 60.5, 187.5 * ᐃ, ᐃ * 60.5, 187.5 * ᐃ, 53 * ᐃ, ᐃ * 192);
		Ⲇ.bezierCurveTo(ᐃ * 45, 187.5 * ᐃ, 45 * ᐃ, 187.5 * ᐃ, ᐃ * 37, ᐃ * 183);
		Ⲇ.bezierCurveTo(35.5 * ᐃ, 167 * ᐃ, ᐃ * 35.5, ᐃ * 167, 34 * ᐃ, 151 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(64 * ᐃ, 150 * ᐃ);
		Ⲇ.bezierCurveTo(63 * ᐃ, 164 * ᐃ, 63 * ᐃ, 164 * ᐃ, 62 * ᐃ, ᐃ * 178);
		Ⲇ.bezierCurveTo(ᐃ * 58, 181 * ᐃ, ᐃ * 58, 181 * ᐃ, ᐃ * 54, ᐃ * 184);
		Ⲇ.bezierCurveTo(ᐃ * 48.5, 181.5 * ᐃ, ᐃ * 48.5, 181.5 * ᐃ, ᐃ * 43, ᐃ * 179);
		Ⲇ.bezierCurveTo(42 * ᐃ, ᐃ * 164.5, 42 * ᐃ, 164.5 * ᐃ, ᐃ * 41, ᐃ * 150);
		Ⲇ.bezierCurveTo(ᐃ * 46, ᐃ * 152.5, ᐃ * 46, 152.5 * ᐃ, ᐃ * 51, ᐃ * 155);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 52, 39 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 65.5, 82 * ᐃ, ᐃ * 65.5, 82 * ᐃ, ᐃ * 79, 125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 66, 137.5 * ᐃ, ᐃ * 66, ᐃ * 137.5, ᐃ * 53, ᐃ * 150);
		Ⲇ.bezierCurveTo(39 * ᐃ, 138 * ᐃ, ᐃ * 39, ᐃ * 138, 25 * ᐃ, ᐃ * 126);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 52, ᐃ * 64);
		Ⲇ.bezierCurveTo(ᐃ * 60, 92.5 * ᐃ, ᐃ * 60, ᐃ * 92.5, ᐃ * 68, 121 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 61, 127.5 * ᐃ, ᐃ * 61, 127.5 * ᐃ, 54 * ᐃ, 134 * ᐃ);
		Ⲇ.bezierCurveTo(46.5 * ᐃ, ᐃ * 127.5, ᐃ * 46.5, 127.5 * ᐃ, 39 * ᐃ, 121 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠΔ]);
		Ⲇ.translate(-ⲆⵠⲆΔⲆ * ᐃ, -20 * ᐃ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.save();
		Ⲇ.translate(52.5 * ᐃ, ᐃ * 395);
		Ⲇ.rotate(Ⲇᐃⵠ);
		ᐃΔⵠ(Ⲇ, ᐃ * -11.5, -226 * ᐃ, 23 * ᐃ, ᐃ * 452, ᐃ * ᐃⵠᐃⵠⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 35, 588 * ᐃ);
		Ⲇ.bezierCurveTo(47 * ᐃ, 596 * ᐃ, ᐃ * 61, ᐃ * 594, 69 * ᐃ, ᐃ * 588);
		Ⲇ.bezierCurveTo(79 * ᐃ, ᐃ * 615, 78 * ᐃ, 632 * ᐃ, ᐃ * 59, ᐃ * 643);
		Ⲇ.bezierCurveTo(41 * ᐃ, 650 * ᐃ, ᐃ * 27, ᐃ * 632, 30 * ᐃ, 610 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⵠⵠⵠ], Δⵠ[ᐃⵠⵠⵠᐃ], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 52, 135 * ᐃ);
		Ⲇ.bezierCurveTo(61.5 * ᐃ, ᐃ * 142, ᐃ * 61.5, ᐃ * 142, ᐃ * 71, ᐃ * 149);
		Ⲇ.bezierCurveTo(69.5 * ᐃ, 166 * ᐃ, ᐃ * 69.5, ᐃ * 166, ᐃ * 68, ᐃ * 183);
		Ⲇ.bezierCurveTo(ᐃ * 60.5, 187.5 * ᐃ, 60.5 * ᐃ, ᐃ * 187.5, 53 * ᐃ, 192 * ᐃ);
		Ⲇ.bezierCurveTo(45 * ᐃ, ᐃ * 187.5, ᐃ * 45, ᐃ * 187.5, ᐃ * 37, 183 * ᐃ);
		Ⲇ.bezierCurveTo(35.5 * ᐃ, ᐃ * 167, 35.5 * ᐃ, 167 * ᐃ, ᐃ * 34, 151 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(64 * ᐃ, ᐃ * 150);
		Ⲇ.bezierCurveTo(ᐃ * 63, 164 * ᐃ, ᐃ * 63, 164 * ᐃ, ᐃ * 62, ᐃ * 178);
		Ⲇ.bezierCurveTo(58 * ᐃ, 181 * ᐃ, 58 * ᐃ, 181 * ᐃ, 54 * ᐃ, ᐃ * 184);
		Ⲇ.bezierCurveTo(48.5 * ᐃ, 181.5 * ᐃ, ᐃ * 48.5, ᐃ * 181.5, ᐃ * 43, 179 * ᐃ);
		Ⲇ.bezierCurveTo(42 * ᐃ, 164.5 * ᐃ, ᐃ * 42, ᐃ * 164.5, ᐃ * 41, 150 * ᐃ);
		Ⲇ.bezierCurveTo(46 * ᐃ, ᐃ * 152.5, 46 * ᐃ, 152.5 * ᐃ, 51 * ᐃ, ᐃ * 155);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 52, 39 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 65.5, 82 * ᐃ, 65.5 * ᐃ, ᐃ * 82, 79 * ᐃ, 125 * ᐃ);
		Ⲇ.bezierCurveTo(66 * ᐃ, ᐃ * 137.5, ᐃ * 66, 137.5 * ᐃ, 53 * ᐃ, ᐃ * 150);
		Ⲇ.bezierCurveTo(ᐃ * 39, 138 * ᐃ, 39 * ᐃ, 138 * ᐃ, ᐃ * 25, 126 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⲆᐃΔ], Δⵠ[ΔⵠΔΔᐃ], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(52 * ᐃ, 64 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 60, ᐃ * 92.5, ᐃ * 60, ᐃ * 92.5, 68 * ᐃ, 121 * ᐃ);
		Ⲇ.bezierCurveTo(61 * ᐃ, 127.5 * ᐃ, ᐃ * 61, ᐃ * 127.5, ᐃ * 54, ᐃ * 134);
		Ⲇ.bezierCurveTo(ᐃ * 46.5, 127.5 * ᐃ, ᐃ * 46.5, ᐃ * 127.5, ᐃ * 39, 121 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[8]);
		return ΔⲆ
	}

	function ⵠΔⲆᐃⲆⲆΔ(ᐃ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 109 * ᐃ;
		ΔⲆ.height = ᐃ * 110;
		ᐃΔΔ(Ⲇ, ᐃ * 54.5, ᐃ * 55, 48.038209575038294 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ΔⲆᐃᐃ], 8 * ᐃ);
		if (0 == Ⲇᐃ) {
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 54.928558349609375, ᐃ * 43.72320556640625);
			Ⲇ.bezierCurveTo(66.92855834960938 * ᐃ, ᐃ * 31.72320556640625, 69.92855834960938 * ᐃ, ᐃ * 29.72320556640625, 74.92855834960938 * ᐃ, 29.72320556640625 * ᐃ);
			Ⲇ.bezierCurveTo(86.92855834960938 * ᐃ, ᐃ * 28.72320556640625, 91.92855834960938 * ᐃ, 42.72320556640625 * ᐃ, 89.92855834960938 * ᐃ, 52.72320556640625 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 88.92855834960938, 63.72320556640625 * ᐃ, 73.92855834960938 * ᐃ, 75.72320556640625 * ᐃ, 55.928558349609375 * ᐃ, 87.72320556640625 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 37.928558349609375, 78.72320556640625 * ᐃ, 26.928558349609375 * ᐃ, ᐃ * 65.72320556640625, ᐃ * 19.928558349609375, ᐃ * 54.72320556640625);
			Ⲇ.bezierCurveTo(13.928558349609375 * ᐃ, 42.72320556640625 * ᐃ, 21.928558349609375 * ᐃ, 28.72320556640625 * ᐃ, 35.928558349609375 * ᐃ, 29.72320556640625 * ᐃ);
			Ⲇ.bezierCurveTo(45.928558349609375 * ᐃ, ᐃ * 31.72320556640625, ᐃ * 51.928558349609375, ᐃ * 40.72320556640625, ᐃ * 53.928558349609375, 44.72320556640625 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔᐃΔᐃ])
		} else if (ⵠᐃⵠΔ == Ⲇᐃ) {
			Ⲇ.save();
			Ⲇ.translate(55 * ᐃ, 39.48748779296875 * ᐃ);
			ᐃΔⵠ(Ⲇ, ᐃ * -11.5, -36 * ᐃ, ᐃ * 23, 72 * ᐃ, ᐃ * 10);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[ΔΔᐃΔⵠ], Δⵠ[3], 4 * ᐃ);
			ᐃΔΔ(Ⲇ, 54.5 * ᐃ, 78.48748779296875 * ᐃ, ᐃ * 22.02271554554524);
			ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[3], ᐃⲆᐃⲆ * ᐃ);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 55.5, ᐃ * 57.287506103515625);
			ᐃΔⵠ(Ⲇ, -ⵠⲆⵠΔⵠ * ᐃ, ᐃ * -ΔᐃᐃΔΔ, 18 * ᐃ, 32 * ᐃ, ᐃ * ᐃⵠᐃΔⲆ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, Δⵠ[4]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 66.5, 25.287506103515625 * ᐃ);
			Ⲇ.bezierCurveTo(60.5 * ᐃ, ᐃ * 25.287506103515625, ᐃ * 63.5, ᐃ * 25.287506103515625, 54.5 * ᐃ, 25.287506103515625 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, undefined, Δⵠ[ⲆΔⲆⲆⵠ], ᐃ * 4);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(66.5 * ᐃ, ᐃ * 37.287506103515625);
			Ⲇ.bezierCurveTo(ᐃ * 60.5, ᐃ * 37.287506103515625, ᐃ * 60.5, 37.287506103515625 * ᐃ, ᐃ * 54.5, 37.287506103515625 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, undefined, Δⵠ[ⵠⲆⲆᐃ], ᐃ * ⵠᐃᐃΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 66.5, 50.287506103515625 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 61, ᐃ * 50.287506103515625, ᐃ * 61, 50.287506103515625 * ᐃ, ᐃ * 55.5, ᐃ * 50.287506103515625);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, undefined, Δⵠ[5], ᐃ * 4)
		} else if (ᐃᐃⲆⲆ == Ⲇᐃ) {
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(45.928558349609375 * ᐃ, 55.29463195800781 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 38.928558349609375, 67.29463195800781 * ᐃ, ᐃ * 38.928558349609375, ᐃ * 67.29463195800781, ᐃ * 31.928558349609375, ᐃ * 79.29463195800781);
			Ⲇ.bezierCurveTo(ᐃ * 15.928558349609375, 85.29463195800781 * ᐃ, 17.928558349609375 * ᐃ, 86.29463195800781 * ᐃ, 17.928558349609375 * ᐃ, 90.29463195800781 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 19.928558349609375, 94.29463195800781 * ᐃ, 21.928558349609375 * ᐃ, 94.29463195800781 * ᐃ, ᐃ * 27.928558349609375, 92.29463195800781 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 29.928558349609375, ᐃ * 98.29463195800781, 30.928558349609375 * ᐃ, 99.29463195800781 * ᐃ, ᐃ * 33.928558349609375, ᐃ * 99.29463195800781);
			Ⲇ.bezierCurveTo(38.928558349609375 * ᐃ, ᐃ * 97.29463195800781, ᐃ * 38.928558349609375, ᐃ * 93.29463195800781, 37.928558349609375 * ᐃ, ᐃ * 86.29463195800781);
			Ⲇ.bezierCurveTo(ᐃ * 45.428558349609375, 73.29463195800781 * ᐃ, 51.928558349609375 * ᐃ, 64.29463195800781 * ᐃ, 52.928558349609375 * ᐃ, ᐃ * 60.29463195800781);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[2]);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(55.928558349609375 * ᐃ, ᐃ * 8.866058349609375);
			Ⲇ.bezierCurveTo(ᐃ * 35.928558349609375, 35.866058349609375 * ᐃ, ᐃ * 37.928558349609375, 48.866058349609375 * ᐃ, 46.928558349609375 * ᐃ, 62.866058349609375 * ᐃ);
			Ⲇ.bezierCurveTo(65.92855834960938 * ᐃ, 72.86605834960938 * ᐃ, 80.92855834960938 * ᐃ, 55.866058349609375 * ᐃ, ᐃ * 93.92855834960938, 36.866058349609375 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * 6);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(93.92855834960938 * ᐃ, 36.866058349609375 * ᐃ);
			Ⲇ.bezierCurveTo(82.92855834960938 * ᐃ, ᐃ * 37.866058349609375, 77.92855834960938 * ᐃ, 36.866058349609375 * ᐃ, ᐃ * 67.92855834960938, ᐃ * 28.866058349609375);
			Ⲇ.bezierCurveTo(ᐃ * 53.928558349609375, 16.866058349609375 * ᐃ, 53.928558349609375 * ᐃ, ᐃ * 14.866058349609375, 55.928558349609375 * ᐃ, 7.866058349609375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 65.92855834960938, ᐃ * 4.866058349609375, ᐃ * 71.92855834960938, ᐃ * 7.866058349609375, ᐃ * 83.92855834960938, 13.866058349609375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 96.92855834960938, 21.866058349609375 * ᐃ, 95.92855834960938 * ᐃ, 31.866058349609375 * ᐃ, ᐃ * 92.92855834960938, 36.866058349609375 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * 6);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 68.92855834960938, 16.866058349609375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 71.92855834960938, ᐃ * 13.866058349609375, 76.92855834960938 * ᐃ, 16.866058349609375 * ᐃ, ᐃ * 79.92855834960938, ᐃ * 21.866058349609375);
			Ⲇ.bezierCurveTo(ᐃ * 82.92855834960938, 24.866058349609375 * ᐃ, 81.92855834960938 * ᐃ, ᐃ * 27.866058349609375, ᐃ * 73.92855834960938, ᐃ * 24.866058349609375);
			Ⲇ.bezierCurveTo(ᐃ * 67.92855834960938, 20.866058349609375 * ᐃ, ᐃ * 66.92855834960938, ᐃ * 19.866058349609375, 67.92855834960938 * ᐃ, ᐃ * 17.866058349609375);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[2])
		} else if (3 == Ⲇᐃ) {
			Ⲇ.scale(.9, .9);
			Ⲇ.translate(ᐃ * ⵠⲆⲆᐃᐃ, ᐃⵠⵠⲆ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 54, ᐃ * .421875);
			Ⲇ.bezierCurveTo(ᐃ * 84, ᐃ * 45.421875, ᐃ * 89, ᐃ * 51.421875, 83 * ᐃ, ᐃ * 74.421875);
			Ⲇ.bezierCurveTo(ᐃ * 74, 95.421875 * ᐃ, 46 * ᐃ, 98.421875 * ᐃ, 30 * ᐃ, 78.421875 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 22, 59.421875 * ᐃ, 27 * ᐃ, ᐃ * 49.421875, ᐃ * 34, ᐃ * 36.421875);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], ᐃ * 6);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(74 * ᐃ, 52.421875 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 77, 73.421875 * ᐃ, 69 * ᐃ, 81.421875 * ᐃ, ᐃ * 58, ᐃ * 81.421875);
			Ⲇ.bezierCurveTo(ᐃ * 66, ᐃ * 71.421875, 70 * ᐃ, ᐃ * 66.421875, ᐃ * 74, ᐃ * 52.421875);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[3])
		}
		return ΔⲆ
	}

	function Δⵠⵠⵠᐃᐃⵠ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 173;
		ΔⲆ.height = ᐃ * 178;
		Ⲇ.globalAlpha = .5;
		ᐃΔΔ(Ⲇ, ᐃ * 86.5, ᐃ * 98, ᐃ * 80);
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		ᐃΔΔ(Ⲇ, ᐃ * 86.5, 89 * ᐃ, ᐃ * 81);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⲆⲆΔⲆ], ⵠΔⲆΔΔ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 86.5, ᐃ * 86, ᐃ * 59);
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃᐃΔΔᐃ], ᐃ * ⵠᐃΔⲆ);
		Ⲇ.globalAlpha = .5;
		ᐃΔΔ(Ⲇ, 86.5 * ᐃ, ᐃ * 95, 34 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ]);
		Ⲇ.globalAlpha = ΔⲆᐃᐃ;
		ᐃΔΔ(Ⲇ, 86.5 * ᐃ, ᐃ * 89, ᐃ * 34);
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠᐃ]);
		return ΔⲆ
	}

	function ⲆΔⲆⲆΔΔᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 440;
		ΔⲆ.height = 388 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔᐃⵠⲆ;
		Ⲇ.translate(5 * ᐃ, ᐃ * ᐃᐃᐃΔⵠ);
		ᐃΔΔ(Ⲇ, 220 * ᐃ, 201 * ᐃ, 170.41713528867922 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠ], Δⵠ[0], ᐃⵠⵠⵠⲆ * ᐃ);
		Ⲇ.globalAlpha = ᐃᐃΔ;
		Ⲇ.translate(ᐃ * -ⲆᐃⲆΔ, -ΔⵠΔᐃ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 220, ᐃ * 201, 170.41713528867922 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⵠⵠⵠᐃ], ᐃ * 6);
		ᐃΔΔ(Ⲇ, 220 * ᐃ, 201 * ᐃ, ᐃ * 130);
		ΔΔ(Ⲇ, Δⵠ[11], Δⵠ[2], ᐃ * ᐃΔᐃΔᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(218 * ᐃ, 97 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 219, 163 * ᐃ, ᐃ * 201, 176 * ᐃ, ᐃ * 191, 175 * ᐃ);
		Ⲇ.bezierCurveTo(176 * ᐃ, 177 * ᐃ, ᐃ * 168, ᐃ * 167, 160 * ᐃ, ᐃ * 115);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[6], ᐃ * ⵠᐃΔΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(224 * ᐃ, ᐃ * 181);
		Ⲇ.bezierCurveTo(225 * ᐃ, 138 * ᐃ, 246 * ᐃ, 115 * ᐃ, ᐃ * 263, 137 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 282, 174 * ᐃ, 279 * ᐃ, 217 * ᐃ, ᐃ * 265, 243 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 253, ᐃ * 264, ᐃ * 240, ᐃ * 256, 233 * ᐃ, ᐃ * 238);
		Ⲇ.bezierCurveTo(ᐃ * 221, 212 * ᐃ, 225 * ᐃ, ᐃ * 198, 224 * ᐃ, 184 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[ⲆΔⵠᐃⵠ], ᐃ * ᐃᐃΔΔᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 169, 289 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 161, 234 * ᐃ, 168 * ᐃ, 197 * ᐃ, ᐃ * 187, ᐃ * 195);
		Ⲇ.bezierCurveTo(219 * ᐃ, 189 * ᐃ, 222 * ᐃ, ᐃ * 256, ᐃ * 216, ᐃ * 307);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[ⲆΔⵠᐃⵠ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 143, 146 * ᐃ);
		Ⲇ.bezierCurveTo(161 * ᐃ, 199 * ᐃ, 151 * ᐃ, 245 * ᐃ, ᐃ * 138, ᐃ * 266);
		Ⲇ.bezierCurveTo(ᐃ * 120.5, 239.5 * ᐃ, 120.5 * ᐃ, 239.5 * ᐃ, 103 * ᐃ, 213 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⵠᐃΔ], Δⵠ[ΔΔΔⵠΔ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(283 * ᐃ, 135 * ᐃ);
		Ⲇ.bezierCurveTo(277 * ᐃ, ᐃ * 176, 298 * ᐃ, ᐃ * 194, ᐃ * 315, ᐃ * 205);
		Ⲇ.bezierCurveTo(ᐃ * 323.5, 175 * ᐃ, ᐃ * 323.5, 175 * ᐃ, 332 * ᐃ, 145 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[ΔΔΔⵠΔ], ᐃ * ⵠⲆΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(318 * ᐃ, ᐃ * 223);
		Ⲇ.bezierCurveTo(290 * ᐃ, ᐃ * 195, ᐃ * 271, ᐃ * 256, ᐃ * 283, ᐃ * 281);
		Ⲇ.bezierCurveTo(ᐃ * 303.5, ᐃ * 267, 303.5 * ᐃ, ᐃ * 267, ᐃ * 324, ᐃ * 253);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[ΔΔΔⵠΔ], ⲆΔᐃΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(142 * ᐃ, 223 * ᐃ);
		Ⲇ.bezierCurveTo(128 * ᐃ, ᐃ * 213, ᐃ * 123, 214 * ᐃ, 111 * ᐃ, ᐃ * 223);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[10], Δⵠ[ⲆⲆⵠⲆⵠ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 251, ᐃ * 133);
		Ⲇ.bezierCurveTo(ᐃ * 269, 188 * ᐃ, ᐃ * 262, 229 * ᐃ, ᐃ * 251, ᐃ * 253);
		Ⲇ.bezierCurveTo(288 * ᐃ, 224 * ᐃ, ᐃ * 273, ᐃ * 139, 252 * ᐃ, ᐃ * 133);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[10], Δⵠ[10], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 203, 102 * ᐃ);
		Ⲇ.bezierCurveTo(204 * ᐃ, ᐃ * 136, 200 * ᐃ, 159 * ᐃ, 189 * ᐃ, 174 * ᐃ);
		Ⲇ.bezierCurveTo(223 * ᐃ, 164 * ᐃ, ᐃ * 219, 87 * ᐃ, 205 * ᐃ, ᐃ * 83);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[10], Δⵠ[ᐃᐃᐃΔΔ], ᐃ * ⵠᐃΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 196, 324 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 209, ᐃ * 239, ᐃ * 200, 219 * ᐃ, 192 * ᐃ, 196 * ᐃ);
		Ⲇ.bezierCurveTo(229 * ᐃ, ᐃ * 216, 219 * ᐃ, ᐃ * 316, 198 * ᐃ, ᐃ * 325);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆΔΔ], Δⵠ[10], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(266 * ᐃ, ᐃ * 166);
		Ⲇ.bezierCurveTo(249 * ᐃ, ᐃ * 154, ᐃ * 243, 161 * ᐃ, ᐃ * 233, 167 * ᐃ);
		ΔΔ(Ⲇ, ⲆΔΔⵠᐃ, Δⵠ[6], ᐃ * 6);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 269, 192 * ᐃ);
		Ⲇ.bezierCurveTo(ⲆⵠΔⵠᐃⵠⲆ * ᐃ, 183 * ᐃ, 241 * ᐃ, 186 * ᐃ, 233 * ᐃ, ᐃ * 192);
		ΔΔ(Ⲇ, ⲆⲆⵠⵠᐃ, Δⵠ[ⲆΔⵠΔΔ], ⲆⲆⲆᐃᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 263, 217 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 251, ᐃ * 211, ᐃ * 242, ᐃ * 213, 236 * ᐃ, 218 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[6], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 204, 141 * ᐃ);
		Ⲇ.bezierCurveTo(191 * ᐃ, 131 * ᐃ, ᐃ * 187, ᐃ * 133, ᐃ * 176, ᐃ * 141);
		ΔΔ(Ⲇ, ᐃⲆⵠⲆᐃ, Δⵠ[ⵠⵠᐃᐃᐃ], ᐃ * 6);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(207 * ᐃ, ᐃ * 230);
		Ⲇ.bezierCurveTo(ᐃ * 193, ᐃ * 222, ᐃ * 185, ᐃ * 224, ᐃ * 177, 231 * ᐃ);
		ΔΔ(Ⲇ, ⲆⲆⵠⵠᐃ, Δⵠ[6], 6 * ᐃ);
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(210 * ᐃ, 258 * ᐃ);
		Ⲇ.bezierCurveTo(196 * ᐃ, ᐃ * 247, 191 * ᐃ, 250 * ᐃ, ᐃ * 177, 259 * ᐃ);
		ΔΔ(Ⲇ, ᐃⲆⵠⲆᐃ, Δⵠ[6], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 145, ᐃ * 196);
		Ⲇ.bezierCurveTo(130 * ᐃ, ᐃ * 186, ᐃ * 124, ᐃ * 187, ᐃ * 114, ᐃ * 195);
		ΔΔ(Ⲇ, undefined, Δⵠ[6], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 218, 97 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 219, ᐃ * 163, 201 * ᐃ, 176 * ᐃ, 191 * ᐃ, 175 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 176, ᐃ * 177, ᐃ * 168, ᐃ * 167, 160 * ᐃ, ᐃ * 115);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[6], ᐃ * 6);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 224, ᐃ * 181);
		Ⲇ.bezierCurveTo(225 * ᐃ, 138 * ᐃ, ᐃ * 246, 115 * ᐃ, ᐃ * 263, 137 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 282, 174 * ᐃ, ᐃ * 279, ᐃ * 217, ᐃ * 265, ᐃ * 243);
		Ⲇ.bezierCurveTo(ᐃ * 253, ᐃ * 264, 240 * ᐃ, ᐃ * ⵠⲆᐃⲆⵠΔⲆ, ᐃ * 233, 238 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 221, ᐃ * 212, 225 * ᐃ, ᐃ * 198, 224 * ᐃ, 184 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[6], ᐃ * 6);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 169, 289 * ᐃ);
		Ⲇ.bezierCurveTo(161 * ᐃ, 234 * ᐃ, 168 * ᐃ, 197 * ᐃ, 187 * ᐃ, 195 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 219, 189 * ᐃ, 222 * ᐃ, 256 * ᐃ, 216 * ᐃ, ᐃ * 307);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ᐃⵠᐃᐃⲆ, Δⵠ[6], ᐃ * ΔΔΔⵠΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(143 * ᐃ, ᐃ * 146);
		Ⲇ.bezierCurveTo(161 * ᐃ, ᐃ * 199, 151 * ᐃ, 245 * ᐃ, 138 * ᐃ, 266 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 120.5, 239.5 * ᐃ, ᐃ * 120.5, 239.5 * ᐃ, ᐃ * 103, 213 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆⲆⲆΔⲆ, Δⵠ[6], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(283 * ᐃ, ᐃ * 135);
		Ⲇ.bezierCurveTo(ᐃ * 277, 176 * ᐃ, 298 * ᐃ, ᐃ * 194, 315 * ᐃ, 205 * ᐃ);
		Ⲇ.bezierCurveTo(323.5 * ᐃ, ᐃ * 175, ᐃ * 323.5, ᐃ * 175, 332 * ᐃ, 145 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠᐃᐃᐃᐃ, Δⵠ[ᐃⵠⵠⵠⲆ], ΔΔΔⵠΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 318, ᐃ * 223);
		Ⲇ.bezierCurveTo(ᐃ * 290, ᐃ * 195, 271 * ᐃ, ᐃ * 256, ᐃ * 283, 281 * ᐃ);
		Ⲇ.bezierCurveTo(303.5 * ᐃ, 267 * ᐃ, 303.5 * ᐃ, ᐃ * 267, 324 * ᐃ, 253 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠΔⲆⵠΔ, Δⵠ[ⲆⲆⲆᐃᐃ], ᐃ * 6);
		ᐃΔΔ(Ⲇ, 222 * ᐃ, 199 * ᐃ, ᐃ * 120.74767078498864);
		ΔΔ(Ⲇ, undefined, Δⵠ[3], 40 * ᐃ);
		ᐃΔΔ(Ⲇ, 220 * ᐃ, ᐃ * 200, 95.44108130150245 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔΔᐃΔⵠ], ᐃ * ⵠⲆⵠⲆᐃ);
		ᐃΔΔ(Ⲇ, 220 * ᐃ, ᐃ * 201, 85 * ᐃ);
		ΔΔ(Ⲇ, ⵠⲆⵠᐃⲆ, Δⵠ[4], ᐃⵠᐃΔⲆ * ᐃ);
		Ⲇ.globalAlpha = .5;
		ᐃΔΔ(Ⲇ, ᐃ * 220, ᐃ * 201, ᐃ * 82);
		ΔΔ(Ⲇ, Δⵠ[9]);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ᐃ * Ⲇᐃⵠᐃ, ᐃ * 5);
		ᐃΔΔ(Ⲇ, ᐃ * 63, 136 * ᐃ, ᐃ * 49.193495504995376);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠⵠⵠΔ], ᐃ * ⵠᐃΔⲆ);
		Ⲇ.globalAlpha = ⲆᐃΔ;
		Ⲇ.translate(-ᐃᐃᐃⲆ * ᐃ, ᐃ * -5);
		ᐃΔΔ(Ⲇ, 63 * ᐃ, ᐃ * 136, ᐃ * 49.193495504995376);
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[ΔⲆᐃΔ], ᐃ * 4);
		ᐃΔΔ(Ⲇ, ᐃ * 63, ᐃ * 137, ᐃ * 25.632011235952593);
		ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[2], ᐃ * Ⲇⵠⵠⵠ);
		return ΔⲆ
	}

	function ⵠΔᐃⵠᐃΔⵠ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 120;
		ΔⲆ.height = ᐃ * 300;
		Ⲇ.translate(-80 * ᐃ, -ⵠᐃᐃⵠΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 200.5, 14.953125 * ᐃ);
		Ⲇ.bezierCurveTo(203 * ᐃ, ᐃ * 171.953125, ᐃ * 203, ᐃ * 171.953125, 205.5 * ᐃ, ᐃ * 328.953125);
		Ⲇ.bezierCurveTo(188.5 * ᐃ, ᐃ * 257.953125, ᐃ * 164.5, ᐃ * 216.953125, ᐃ * 166.5, 176.953125 * ᐃ);
		Ⲇ.bezierCurveTo(168.5 * ᐃ, ᐃ * 133.953125, 198.5 * ᐃ, ᐃ * 98.953125, 200.5 * ᐃ, 14.953125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		return ΔⲆ
	}

	function ⲆΔⲆᐃΔⲆᐃⵠⵠ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 167 * ᐃ;
		ΔⲆ.height = ᐃ * 136;
		Ⲇ.globalAlpha = .5;
		Ⲇ.save();
		Ⲇ.translate(76.71426391601562 * ᐃ, 67.85713195800781 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -57.5, ᐃ * -54.5, 115 * ᐃ, 109 * ᐃ, 15 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠⵠ]);
		Ⲇ.globalAlpha = .8;
		Ⲇ.save();
		Ⲇ.translate(76.71426391601562 * ᐃ, 67.85713195800781 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -57.5, -54.5 * ᐃ, 115 * ᐃ, ᐃ * 109, ᐃ * ΔΔⵠⲆᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, ᐃⲆⵠⲆᐃ, Δⵠ[ᐃᐃΔ], 7 * ᐃ);
		Ⲇ.globalAlpha = .5;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 91.21426391601562, 67.35713195800781 * ᐃ);
		ᐃΔⵠ(Ⲇ, -56 * ᐃ, -55 * ᐃ, 115 * ᐃ, 109 * ᐃ, ᐃ * ⲆⵠᐃⵠⵠⲆᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 91.21426391601562, 67.35713195800781 * ᐃ);
		ᐃΔⵠ(Ⲇ, -56 * ᐃ, ᐃ * -55, ᐃ * 115, ᐃ * 109, 15 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, undefined, Δⵠ[1], ᐃ * 7);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 131.21426391601562, 70.35713195800781 * ᐃ);
		Ⲇ.bezierCurveTo(133.21426391601562 * ᐃ, ᐃ * 95.35713195800781, ᐃ * 128.21426391601562, 109.35713195800781 * ᐃ, ᐃ * 108.21426391601562, 108.35713195800781 * ᐃ);
		ΔΔ(Ⲇ, ΔⲆΔⵠᐃ, Δⵠ[1], ⲆΔⵠⵠΔ * ᐃ);
		return ΔⲆ
	}

	function ⵠⲆⵠⲆᐃᐃⵠΔΔ(ᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 200;
		var ⲆΔⲆ = 180 * ᐃ;
		var ΔⲆΔ = ᐃ * 8;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.beginPath();
		ᐃΔⵠ(Ⲇ, ⲆⵠⲆⲆ, 0, ⲆⲆᐃ, ⲆΔⲆ - ΔⲆΔ, ΔⲆΔ);
		Ⲇ.globalAlpha = .8;
		ΔΔ(Ⲇ, "#1D6055");
		Ⲇ.globalAlpha = ΔⵠΔ;
		var text = ᐃⵠΔΔΔ(ᐃ, "Leaderboard", 25, ⵠ[447]);
		Ⲇ.drawImage(text, (ⲆⲆᐃ - text.width) / 2, 5 * ᐃ);
		return ΔⲆ
	}

	function ΔΔⲆⵠᐃⵠⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 105 * ᐃ;
		ΔⲆ.height = ᐃ * 144;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔⲆᐃⲆ;
		Ⲇ.translate(ᐃ * -ⵠⲆⲆᐃ, ᐃ * 0);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 52.5, ᐃ * 91.5);
		ᐃΔⵠ(Ⲇ, ᐃ * -4.5, ᐃ * -39, ᐃ * 9, ᐃ * 78, ᐃ * 5);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], 3 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 53, ᐃ * 36);
		ᐃΔⵠ(Ⲇ, ᐃ * -29, ᐃ * -17.5, 58 * ᐃ, ᐃ * 35, ᐃ * 5);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ᐃⵠⵠⲆ], ᐃ * 4);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 53.5, 35.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, -26.5 * ᐃ, ᐃ * -15, ᐃ * 53, 30 * ᐃ, ᐃ * Ⲇᐃⵠᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ⵠⲆΔⵠ * ᐃ);
		Ⲇ.translate(ᐃ * 5, ⵠΔᐃᐃ * ᐃ);
		Ⲇ.globalAlpha = ΔⵠΔ;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 52.5, ᐃ * 91.5);
		ᐃΔⵠ(Ⲇ, -4.5 * ᐃ, -39 * ᐃ, 9 * ᐃ, 78 * ᐃ, ᐃ * ᐃᐃᐃΔⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔ], Δⵠ[2], 3 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 53, ᐃ * 36);
		ᐃΔⵠ(Ⲇ, ᐃ * -29, ᐃ * -17.5, 58 * ᐃ, 35 * ᐃ, ⲆᐃⲆΔ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⲆΔ], Δⵠ[ᐃⲆⲆΔΔ], ⵠᐃᐃΔ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 53.5, 35.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -26.5, ᐃ * -15, ᐃ * 53, ᐃ * 30, ⲆΔⲆⲆⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[ⵠⲆⲆᐃᐃ], ᐃ * ⲆΔᐃΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(49 * ᐃ, 60.5 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 44, ᐃ * 56.5, ᐃ * 44, ᐃ * 56.5, ᐃ * 39, ᐃ * 52.5);
		Ⲇ.bezierCurveTo(39 * ᐃ, 46.5 * ᐃ, 39 * ᐃ, 46.5 * ᐃ, 39 * ᐃ, 40.5 * ᐃ);
		Ⲇ.bezierCurveTo(44 * ᐃ, ᐃ * 44, 44 * ᐃ, ᐃ * 44, 49 * ᐃ, 47.5 * ᐃ);
		Ⲇ.bezierCurveTo(49 * ᐃ, ᐃ * 54, ᐃ * 49, ᐃ * 54, 49 * ᐃ, 60.5 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[ⲆΔⵠΔΔ], ᐃ * Δⵠⵠᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(66 * ᐃ, ᐃ * 40.5);
		Ⲇ.bezierCurveTo(66 * ᐃ, 46.5 * ᐃ, ᐃ * 66, 46.5 * ᐃ, 66 * ᐃ, 52.5 * ᐃ);
		Ⲇ.bezierCurveTo(60.5 * ᐃ, 56.5 * ᐃ, ᐃ * 60.5, 56.5 * ᐃ, ᐃ * 55, 60.5 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 56, ᐃ * 53, 56 * ᐃ, ᐃ * 53, ᐃ * 57, ᐃ * 45.5);
		Ⲇ.bezierCurveTo(ᐃ * 61.5, ᐃ * 43, 61.5 * ᐃ, ᐃ * 43, ᐃ * 66, 40.5 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆⵠⵠⵠ], Δⵠ[6], ᐃ * ⲆⵠⲆᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 52, 33.5 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 55.5, ᐃ * 41, 55.5 * ᐃ, ᐃ * 41, 59 * ᐃ, 48.5 * ᐃ);
		Ⲇ.bezierCurveTo(56 * ᐃ, ᐃ * 58, ᐃ * 56, ᐃ * 58, ᐃ * 53, 67.5 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 49, 58 * ᐃ, 49 * ᐃ, 58 * ᐃ, ᐃ * 45, ᐃ * 48.5);
		Ⲇ.bezierCurveTo(48.5 * ᐃ, ᐃ * 41, 48.5 * ᐃ, ᐃ * 41, 52 * ᐃ, 33.5 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠⲆⵠⵠⵠ], Δⵠ[ⲆΔΔⲆⵠ], ᐃ * ᐃᐃᐃΔᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(52 * ᐃ, 47.5 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 54.5, 50.5 * ᐃ, ᐃ * 54.5, ᐃ * 50.5, 57 * ᐃ, 53.5 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 55, 60 * ᐃ, ᐃ * 55, ᐃ * 60, 53 * ᐃ, ᐃ * 66.5);
		Ⲇ.bezierCurveTo(50.5 * ᐃ, 61 * ᐃ, ᐃ * 50.5, 61 * ᐃ, 48 * ᐃ, ᐃ * 55.5);
		Ⲇ.bezierCurveTo(ᐃ * 50, ᐃ * 52, 50 * ᐃ, 52 * ᐃ, ᐃ * 52, 48.5 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆΔⲆⲆ], Δⵠ[ⵠⲆⵠᐃⵠ], ᐃ * 3);
		return ΔⲆ
	}

	function ᐃⲆⲆⵠⲆ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ΔΔᐃΔᐃΔΔ * ᐃ;
		ΔⲆ.height = 35 * ᐃ;
		ᐃΔⵠ(Ⲇ, 0, ⵠᐃⲆ, 20, 35, ⵠⲆⵠⵠⲆⲆⵠ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		return ΔⲆ
	}

	function ΔⵠⲆᐃⲆⵠⲆᐃⲆ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 158 * ᐃ;
		ΔⲆ.height = ᐃ * 201;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 96.5, 76.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 100.5, ᐃ * 64.421875, ᐃ * 103.5, ᐃ * 62.421875, 110.5 * ᐃ, 65.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 116.5, 66.421875 * ᐃ, ᐃ * 117.5, ᐃ * 67.421875, ᐃ * 112.5, ᐃ * 73.421875);
		Ⲇ.bezierCurveTo(ᐃ * 107, ᐃ * 79.921875, ᐃ * 107, ᐃ * 79.921875, ᐃ * 101.5, 86.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⲆ], Δⵠ[0], ᐃ * ΔⲆᐃΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 61.5, ᐃ * 78.421875);
		Ⲇ.bezierCurveTo(ᐃ * 57.5, 73.421875 * ᐃ, ᐃ * 51.5, 66.421875 * ᐃ, ᐃ * 45.5, ᐃ * 68.421875);
		Ⲇ.bezierCurveTo(32.5 * ᐃ, 73.421875 * ᐃ, 38.5 * ᐃ, 75.421875 * ᐃ, ᐃ * 46.5, 81.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 51.5, 84.921875 * ᐃ, ᐃ * 51.5, 84.921875 * ᐃ, 56.5 * ᐃ, 88.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ᐃᐃⲆ], ⲆΔⵠⵠΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 116.5, ᐃ * 127.421875);
		Ⲇ.bezierCurveTo(124.5 * ᐃ, ᐃ * 108.421875, 129.5 * ᐃ, 104.421875 * ᐃ, ᐃ * 141.5, ᐃ * 107.421875);
		Ⲇ.bezierCurveTo(ᐃ * 156.5, ᐃ * 112.421875, ᐃ * 153.5, 113.421875 * ᐃ, ᐃ * 132.5, ᐃ * 134.421875);
		Ⲇ.bezierCurveTo(123.5 * ᐃ, 141.921875 * ᐃ, ᐃ * 123.5, ᐃ * 141.921875, ᐃ * 114.5, ᐃ * 149.421875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠⲆⵠⵠ], ᐃ * ᐃⵠᐃⵠⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 41.5, ᐃ * 134.421875);
		Ⲇ.bezierCurveTo(30.5 * ᐃ, 119.421875 * ᐃ, ᐃ * 25.5, 111.421875 * ᐃ, 12.5 * ᐃ, ᐃ * 115.421875);
		Ⲇ.bezierCurveTo(4.5 * ᐃ, 120.421875 * ᐃ, 4.5 * ᐃ, 121.421875 * ᐃ, ᐃ * 26.5, 142.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 35, 149.921875 * ᐃ, ᐃ * 35, ᐃ * 149.921875, ᐃ * 43.5, 157.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ⵠΔΔⲆΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 78.5, 51.921875 * ᐃ);
		Ⲇ.bezierCurveTo(99.5 * ᐃ, ᐃ * 75.921875, 110.5 * ᐃ, ᐃ * 96.921875, 118.5 * ᐃ, ᐃ * 120.921875);
		Ⲇ.bezierCurveTo(ᐃ * 121.5, 140.921875 * ᐃ, 107.5 * ᐃ, ᐃ * 179.921875, 75.5 * ᐃ, 183.921875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 30.5, 169.921875 * ᐃ, 37.5 * ᐃ, 131.921875 * ᐃ, 34.5 * ᐃ, ᐃ * 120.921875);
		Ⲇ.bezierCurveTo(41.5 * ᐃ, ᐃ * 89.921875, 61.5 * ᐃ, ᐃ * 67.921875, 78.5 * ᐃ, 51.921875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ], Δⵠ[0], ᐃᐃᐃΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 72.5, ᐃ * 72.421875);
		Ⲇ.bezierCurveTo(76.5 * ᐃ, ᐃ * 79.421875, 79.5 * ᐃ, ᐃ * 80.421875, ᐃ * 83.5, ᐃ * 73.421875);
		Ⲇ.bezierCurveTo(80.5 * ᐃ, 96.921875 * ᐃ, 79.5 * ᐃ, ᐃ * 114.421875, 77.5 * ᐃ, ᐃ * 120.421875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃᐃ], Δⵠ[ᐃⵠⵠⲆ], 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(42.5 * ᐃ, ᐃ * 163.421875);
		Ⲇ.bezierCurveTo(62.5 * ᐃ, 185.421875 * ᐃ, 86.5 * ᐃ, 186.421875 * ᐃ, 111.5 * ᐃ, 165.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 107.5, 176.421875 * ᐃ, 95.5 * ᐃ, 187.421875 * ᐃ, 75.5 * ᐃ, ᐃ * 188.421875);
		Ⲇ.bezierCurveTo(53.5 * ᐃ, ᐃ * 188.421875, ᐃ * 43.5, ᐃ * 171.421875, 42.5 * ᐃ, 164.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠⵠⲆⵠ], ᐃ * ΔⲆᐃΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 79.5, 61.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 88.5, ᐃ * 31.421875, 81.5 * ᐃ, 16.421875 * ᐃ, 75.5 * ᐃ, 7.421875 * ᐃ);
		Ⲇ.bezierCurveTo(77.5 * ᐃ, ᐃ * 28.421875, 77.5 * ᐃ, ᐃ * 37.421875, ᐃ * 68.5, ᐃ * 42.421875);
		Ⲇ.bezierCurveTo(ᐃ * 79.5, ᐃ * 57.421875, 79.5 * ᐃ, ᐃ * 58.421875, 80.5 * ᐃ, 61.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⲆ], Δⵠ[0], ᐃ * 10);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(72.5 * ᐃ, 72.421875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 76.5, ᐃ * 79.421875, ᐃ * 79.5, 80.421875 * ᐃ, 83.5 * ᐃ, ᐃ * 73.421875);
		Ⲇ.bezierCurveTo(ᐃ * 80.5, 96.921875 * ᐃ, 79.5 * ᐃ, 114.421875 * ᐃ, 77.5 * ᐃ, 120.421875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ], Δⵠ[ⵠΔᐃⵠ], ᐃ * 10);
		return ΔⲆ
	}

	function ⵠⵠⲆⲆⵠⲆⵠⲆⲆ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 253 * ᐃ;
		ΔⲆ.height = 192 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(37 * ᐃ, 94 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -7, -20 * ᐃ, ᐃ * ⲆᐃᐃΔⵠΔⵠ, 37 * ᐃ, ᐃ * ⵠᐃⲆⵠⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ]);
		Ⲇ.save();
		Ⲇ.translate(131 * ᐃ, 94 * ᐃ);
		ᐃΔⵠ(Ⲇ, -84 * ᐃ, -67 * ᐃ, 168 * ᐃ, ᐃ * 134, 20 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠΔ], Δⵠ[0], ᐃ * 13);
		Ⲇ.save();
		Ⲇ.translate(223 * ᐃ, ᐃ * 94.5);
		ᐃΔⵠ(Ⲇ, ᐃ * -ᐃᐃΔᐃ, ᐃ * -18.5, ᐃ * 10, 37 * ᐃ, ᐃ * ⵠΔᐃⲆⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⲆ]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 128.5, ᐃ * 170.5);
		ᐃΔⵠ(Ⲇ, -22.5 * ᐃ, -6.5 * ᐃ, ᐃ * 45, 13 * ᐃ, ᐃⲆᐃΔⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃ]);
		return ΔⲆ
	}

	function ⲆΔⲆᐃᐃⲆᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 187 * ᐃ;
		ΔⲆ.height = ᐃ * 119;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔⲆᐃᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.translate(0, 3);
		Ⲇ.moveTo(53 * ᐃ, ᐃ * 45);
		Ⲇ.bezierCurveTo(ᐃ * ᐃΔⲆΔ, 60 * ᐃ, 11 * ᐃ, ᐃ * 72, ᐃ * 19, ᐃ * 81);
		Ⲇ.bezierCurveTo(28 * ᐃ, 82 * ᐃ, 24 * ᐃ, 81 * ᐃ, 29 * ᐃ, ᐃ * 82);
		Ⲇ.bezierCurveTo(ᐃ * 26, ᐃ * 87, ᐃ * 28, 84 * ᐃ, ᐃ * 28, ᐃ * 87);
		Ⲇ.bezierCurveTo(63 * ᐃ, 101 * ᐃ, 92 * ᐃ, ᐃ * 100, 138 * ᐃ, 93 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 172, 87 * ᐃ, 180 * ᐃ, 72 * ᐃ, ᐃ * 168, 62 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 154, 51 * ᐃ, ᐃ * 150, ᐃ * 50, 148 * ᐃ, 49 * ᐃ);
		Ⲇ.bezierCurveTo(132 * ᐃ, ᐃ * 42, ᐃ * 90, ᐃ * 40, ᐃ * 55, 45 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.translate(0, -ᐃⵠΔᐃ);
		Ⲇ.moveTo(53 * ᐃ, 45 * ᐃ);
		Ⲇ.bezierCurveTo(3 * ᐃ, ᐃ * 60, 11 * ᐃ, ᐃ * 72, ⲆᐃᐃᐃᐃⲆⲆ * ᐃ, ᐃ * 81);
		Ⲇ.bezierCurveTo(28 * ᐃ, ᐃ * 82, 24 * ᐃ, 81 * ᐃ, ᐃ * 29, ᐃ * 82);
		Ⲇ.bezierCurveTo(ᐃ * 26, 87 * ᐃ, ᐃ * 28, ᐃ * 84, ᐃ * 28, ᐃ * 87);
		Ⲇ.bezierCurveTo(ᐃ * 63, 101 * ᐃ, 92 * ᐃ, ᐃ * ᐃΔⵠᐃⵠ, ᐃ * 138, ᐃ * 93);
		Ⲇ.bezierCurveTo(ᐃ * 172, ᐃ * 87, ᐃ * 180, 72 * ᐃ, 168 * ᐃ, ᐃ * 62);
		Ⲇ.bezierCurveTo(ᐃ * 154, ᐃ * 51, 150 * ᐃ, ᐃ * 50, 148 * ᐃ, ᐃ * 49);
		Ⲇ.bezierCurveTo(132 * ᐃ, ᐃ * 42, ᐃ * 90, ᐃ * 40, ᐃ * 55, ᐃ * 45);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠⵠ], Δⵠ[ⵠᐃⵠΔ], ᐃ * ᐃΔᐃΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 151, ᐃ * 60);
		Ⲇ.bezierCurveTo(ᐃ * 140, 36 * ᐃ, 137 * ᐃ, 32 * ᐃ, 124 * ᐃ, 29 * ᐃ);
		Ⲇ.bezierCurveTo(98 * ᐃ, 22 * ᐃ, ᐃ * 80, 24 * ᐃ, ᐃ * 62, 28 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 42, 35 * ᐃ, ᐃ * 38, 46 * ᐃ, ᐃ * 34, 58 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 53, 74 * ᐃ, 76 * ᐃ, ᐃ * 76, ᐃ * 91, 78 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[1], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 37, ᐃ * 53);
		Ⲇ.bezierCurveTo(ᐃ * 30, ᐃ * 56, ᐃ * 29, ᐃ * 67, 30 * ᐃ, ᐃ * 68);
		Ⲇ.bezierCurveTo(ᐃ * 94, 108 * ᐃ, 150 * ᐃ, ᐃ * 76, ᐃ * 155, ᐃ * 70);
		Ⲇ.bezierCurveTo(154 * ᐃ, ᐃ * 60, 151 * ᐃ, 54 * ᐃ, ᐃ * 149, 53 * ᐃ);
		Ⲇ.bezierCurveTo(101 * ᐃ, ᐃ * 74, ᐃ * 66, 66 * ᐃ, 37 * ᐃ, ᐃ * 53);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃⵠΔ], Δⵠ[3], ᐃⲆᐃⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 100, ᐃ * 36);
		Ⲇ.bezierCurveTo(92 * ᐃ, ᐃ * 25, ᐃ * 86, ᐃ * 28, ᐃ * 82, 34 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 88, ᐃ * 40, 93 * ᐃ, 40 * ᐃ, ᐃ * 98, 36 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠ], Δⵠ[ΔΔⵠΔ], ⵠᐃΔⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(80 * ᐃ, ᐃ * 43);
		Ⲇ.bezierCurveTo(ᐃ * 69, ᐃ * 46, ᐃ * 67, ᐃ * 52, 69 * ᐃ, 58 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[ᐃᐃΔ], ᐃ * ᐃⵠⵠⵠᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 58, 50 * ᐃ, ᐃ * 5);
		ΔΔ(Ⲇ, Δⵠ[4]);
		ᐃΔΔ(Ⲇ, 43 * ᐃ, 65 * ᐃ, ᐃ * ΔΔⲆⲆⵠ);
		ΔΔ(Ⲇ, Δⵠ[4]);
		ᐃΔΔ(Ⲇ, ᐃ * 58, ᐃ * 73, ᐃ * ᐃᐃᐃᐃⵠ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠᐃΔ]);
		ᐃΔΔ(Ⲇ, 58 * ᐃ, 50 * ᐃ, ᐃ * ΔΔᐃΔⵠ);
		ΔΔ(Ⲇ, Δⵠ[ΔΔⲆⲆⵠ]);
		ᐃΔΔ(Ⲇ, 43 * ᐃ, 65 * ᐃ, 2 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		ᐃΔΔ(Ⲇ, 58 * ᐃ, 73 * ᐃ, ᐃ * ᐃᐃⲆⲆ);
		ΔΔ(Ⲇ, Δⵠ[5]);
		return ΔⲆ
	}

	function ⲆᐃⵠⵠΔⵠᐃⲆᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 170;
		ΔⲆ.height = 170 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(-10 * ᐃ, 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 72.5, ᐃ * 4.109375);
		Ⲇ.bezierCurveTo(117 * ᐃ, 9.609375 * ᐃ, 117 * ᐃ, 9.609375 * ᐃ, 161.5 * ᐃ, 15.109375 * ᐃ);
		Ⲇ.bezierCurveTo(134.5 * ᐃ, 106.109375 * ᐃ, 110.5 * ᐃ, 130.109375 * ᐃ, ᐃ * 63.5, 145.109375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 33.5, 120.609375 * ᐃ, 33.5 * ᐃ, 120.609375 * ᐃ, ᐃ * 3.5, ᐃ * 96.109375);
		Ⲇ.bezierCurveTo(82.5 * ᐃ, ᐃ * 75.109375, ᐃ * 69.5, ᐃ * 29.109375, 71.5 * ᐃ, 6.109375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ᐃ * 10, -10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(72.5 * ᐃ, 4.109375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 117, 9.609375 * ᐃ, ᐃ * 117, 9.609375 * ᐃ, ᐃ * 161.5, ᐃ * 15.109375);
		Ⲇ.bezierCurveTo(134.5 * ᐃ, 106.109375 * ᐃ, ᐃ * 110.5, 130.109375 * ᐃ, ᐃ * 63.5, ᐃ * 145.109375);
		Ⲇ.bezierCurveTo(33.5 * ᐃ, ᐃ * 120.609375, ᐃ * 33.5, ᐃ * 120.609375, 3.5 * ᐃ, ᐃ * 96.109375);
		Ⲇ.bezierCurveTo(ᐃ * 82.5, ᐃ * 75.109375, ᐃ * 69.5, ᐃ * 29.109375, 71.5 * ᐃ, ᐃ * 6.109375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃᐃ], Δⵠ[2], ᐃ * ᐃᐃᐃΔΔ);
		return ΔⲆ
	}

	function ⲆⲆⲆᐃΔⵠⲆ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 85 * ᐃ;
		ΔⲆ.height = 145 * ᐃ;
		Ⲇ.translate(-ⵠᐃᐃⵠΔ * ᐃ, ᐃ * -95);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 50, 105 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 52, ᐃ * 119, 64 * ᐃ, ᐃ * 137, ᐃ * 71, ᐃ * 146);
		Ⲇ.bezierCurveTo(71 * ᐃ, 161 * ᐃ, ᐃ * 74, 169 * ᐃ, ᐃ * 79, 179 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 68, ᐃ * 192, ᐃ * 70, 204 * ᐃ, ᐃ * 69, ᐃ * 216);
		Ⲇ.bezierCurveTo(50 * ᐃ, 189.5 * ᐃ, 50 * ᐃ, 189.5 * ᐃ, 31 * ᐃ, 163 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(44 * ᐃ, ᐃ * 106);
		Ⲇ.bezierCurveTo(49 * ᐃ, ᐃ * 90, 58 * ᐃ, ᐃ * 104, 51 * ᐃ, ᐃ * 121);
		Ⲇ.bezierCurveTo(ᐃ * 45, 143 * ᐃ, ᐃ * 41, 151 * ᐃ, 37 * ᐃ, ᐃ * 162);
		Ⲇ.bezierCurveTo(48 * ᐃ, 180 * ᐃ, ᐃ * 58, 188 * ᐃ, ᐃ * 76, 205 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 104, 209 * ᐃ, ᐃ * 105, ᐃ * 229, 92 * ᐃ, ᐃ * 235);
		Ⲇ.bezierCurveTo(76 * ᐃ, ᐃ * 239, ᐃ * 75, 232 * ᐃ, ᐃ * 56, 213 * ᐃ);
		Ⲇ.bezierCurveTo(31 * ᐃ, ᐃ * 187, 28 * ᐃ, ᐃ * 176, ᐃ * 23, 162 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 38, ᐃ * 131, ᐃ * 40, ᐃ * 120, ᐃ * 44, 106 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔⵠΔ], Δⵠ[3], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(30 * ᐃ, 159 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 46, ᐃ * 157, ᐃ * 59, ᐃ * 152, 68 * ᐃ, ᐃ * 148);
		Ⲇ.bezierCurveTo(63 * ᐃ, 155 * ᐃ, 52 * ᐃ, ᐃ * 160, 44 * ᐃ, ᐃ * 164);
		Ⲇ.bezierCurveTo(59 * ᐃ, 169 * ᐃ, 66 * ᐃ, 174 * ᐃ, 75 * ᐃ, 178 * ᐃ);
		Ⲇ.bezierCurveTo(58 * ᐃ, ᐃ * 178, 49 * ᐃ, ᐃ * 175, ᐃ * 37, ᐃ * 174);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔⲆⲆ]);
		return ΔⲆ
	}

	function ᐃⲆⲆⲆⲆⲆᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 198 * ᐃ;
		ΔⲆ.height = 147 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ⵠⵠⲆⵠ, ᐃⵠⲆᐃΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(44 * ᐃ, 76 * ᐃ);
		Ⲇ.bezierCurveTo(50 * ᐃ, 82 * ᐃ, ᐃ * 50, ᐃ * 82, 56 * ᐃ, 88 * ᐃ);
		Ⲇ.bezierCurveTo(59 * ᐃ, ᐃ * 82, 59 * ᐃ, ᐃ * 82, 62 * ᐃ, ᐃ * 76);
		Ⲇ.bezierCurveTo(ᐃ * 59, 71 * ᐃ, 59 * ᐃ, 71 * ᐃ, ᐃ * 56, 66 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 59, ᐃ * 69, 59 * ᐃ, ᐃ * 69, ᐃ * 62, ᐃ * 72);
		Ⲇ.bezierCurveTo(ᐃ * 80, ᐃ * 48, ᐃ * 102, 50 * ᐃ, ᐃ * 120, 62 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 127, 58 * ᐃ, 127 * ᐃ, 58 * ᐃ, 134 * ᐃ, 54 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 129, 60 * ᐃ, 129 * ᐃ, 60 * ᐃ, 124 * ᐃ, ᐃ * 66);
		Ⲇ.bezierCurveTo(129 * ᐃ, 73 * ᐃ, 129 * ᐃ, 73 * ᐃ, ᐃ * 134, 80 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 140, 74 * ᐃ, 140 * ᐃ, ᐃ * 74, ᐃ * 146, 68 * ᐃ);
		Ⲇ.bezierCurveTo(142 * ᐃ, ᐃ * 76, 142 * ᐃ, 76 * ᐃ, 138 * ᐃ, ᐃ * 84);
		Ⲇ.bezierCurveTo(144 * ᐃ, ᐃ * 90, 142 * ᐃ, 90 * ᐃ, ᐃ * 144, 90 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 136, ᐃ * 97, ᐃ * 136, 97 * ᐃ, ᐃ * 128, 104 * ᐃ);
		Ⲇ.bezierCurveTo(154 * ᐃ, ᐃ * 110, ᐃ * 164, ᐃ * 90, ᐃ * 160, ᐃ * 80);
		Ⲇ.bezierCurveTo(138 * ᐃ, ᐃ * 22, 148 * ᐃ, ᐃ * 51, 136 * ᐃ, 22 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 97, ᐃ * 24, ᐃ * 97, 24 * ᐃ, ᐃ * 58, 26 * ᐃ);
		Ⲇ.bezierCurveTo(47 * ᐃ, 54 * ᐃ, ᐃ * 36, ᐃ * 80, ᐃ * 36, ᐃ * 82);
		Ⲇ.bezierCurveTo(40 * ᐃ, ᐃ * 108, ᐃ * 54, ᐃ * 104, 62 * ᐃ, 104 * ᐃ);
		Ⲇ.bezierCurveTo(46 * ᐃ, ᐃ * 92, 54 * ᐃ, 97 * ᐃ, 46 * ᐃ, ᐃ * 90);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(36 * ᐃ, ᐃ * 80);
		Ⲇ.bezierCurveTo(ᐃ * 30, 84 * ᐃ, 28 * ᐃ, 92 * ᐃ, 34 * ᐃ, ᐃ * ᐃⲆᐃⵠΔ);
		Ⲇ.bezierCurveTo(41.5 * ᐃ, 102 * ᐃ, 41.5 * ᐃ, ᐃ * 102, ᐃ * 49, 104 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 43, 105.5 * ᐃ, 43 * ᐃ, 105.5 * ᐃ, ᐃ * 37, ᐃ * 107);
		Ⲇ.bezierCurveTo(ᐃ * 46, ᐃ * 111, 60 * ᐃ, 114 * ᐃ, 76 * ᐃ, 114 * ᐃ);
		Ⲇ.bezierCurveTo(78 * ᐃ, 110.5 * ᐃ, ᐃ * 78, 110.5 * ᐃ, 80 * ᐃ, 107 * ᐃ);
		Ⲇ.bezierCurveTo(81 * ᐃ, 110.5 * ᐃ, 81 * ᐃ, ᐃ * 110.5, ᐃ * 82, 114 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 94.5, ᐃ * 113.5, ᐃ * 94.5, ᐃ * 113.5, ᐃ * 107, ᐃ * 113);
		Ⲇ.bezierCurveTo(ᐃ * 108.5, 110 * ᐃ, 108.5 * ᐃ, 110 * ᐃ, ᐃ * 110, 107 * ᐃ);
		Ⲇ.bezierCurveTo(111.5 * ᐃ, 110.5 * ᐃ, ᐃ * 111.5, ᐃ * 110.5, 113 * ᐃ, 114 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 131, 112.5 * ᐃ, ᐃ * 131, ᐃ * 112.5, ᐃ * 149, 111 * ᐃ);
		Ⲇ.bezierCurveTo(148.5 * ᐃ, 107.5 * ᐃ, 148.5 * ᐃ, ᐃ * 107.5, ᐃ * 148, ᐃ * 104);
		Ⲇ.bezierCurveTo(150.5 * ᐃ, ᐃ * 107, 150.5 * ᐃ, 107 * ᐃ, ᐃ * 153, ᐃ * 110);
		Ⲇ.bezierCurveTo(155.5 * ᐃ, ᐃ * 108.5, ᐃ * 155.5, ᐃ * 108.5, ᐃ * 158, 107 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 156.5, 104 * ᐃ, 156.5 * ᐃ, ᐃ * 104, ᐃ * 155, 101 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 158.5, 102.5 * ᐃ, ᐃ * 158.5, 102.5 * ᐃ, ᐃ * 162, 104 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 168, 100 * ᐃ, 170 * ᐃ, ᐃ * 92, 169 * ᐃ, ᐃ * 85);
		Ⲇ.bezierCurveTo(ᐃ * 166, ᐃ * 86, ᐃ * 166, 86 * ᐃ, ᐃ * 163, ᐃ * 87);
		Ⲇ.bezierCurveTo(ᐃ * 165.5, 83 * ᐃ, 165.5 * ᐃ, 83 * ᐃ, ᐃ * 168, 79 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 165.5, 76.5 * ᐃ, 165.5 * ᐃ, 76.5 * ᐃ, 163 * ᐃ, ᐃ * 74);
		Ⲇ.bezierCurveTo(155 * ᐃ, ᐃ * 82.5, ᐃ * 155, 82.5 * ᐃ, 147 * ᐃ, ᐃ * 91);
		Ⲇ.bezierCurveTo(139 * ᐃ, ᐃ * 95.5, 139 * ᐃ, 95.5 * ᐃ, ᐃ * 131, ⵠΔⵠΔΔ * ᐃ);
		Ⲇ.bezierCurveTo(97.5 * ᐃ, ᐃ * 100.5, 97.5 * ᐃ, 100.5 * ᐃ, 64 * ᐃ, ᐃ * 101);
		Ⲇ.bezierCurveTo(ᐃ * 49, 102 * ᐃ, ᐃ * 43, 90 * ᐃ, ᐃ * 36, ᐃ * 80);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = ⵠⲆΔⲆ;
		Ⲇ.translate(ⵠⵠⵠΔ, -ⵠⵠΔⲆⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(36 * ᐃ, 80 * ᐃ);
		Ⲇ.bezierCurveTo(30 * ᐃ, ᐃ * 84, ᐃ * 28, 92 * ᐃ, ᐃ * 34, 100 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 41.5, 102 * ᐃ, ᐃ * 41.5, 102 * ᐃ, ᐃ * 49, 104 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 43, 105.5 * ᐃ, ᐃ * 43, ᐃ * 105.5, ᐃ * 37, ᐃ * 107);
		Ⲇ.bezierCurveTo(ᐃ * 46, ᐃ * 111, 60 * ᐃ, ᐃ * 114, ᐃ * 76, ᐃ * 114);
		Ⲇ.bezierCurveTo(78 * ᐃ, 110.5 * ᐃ, 78 * ᐃ, ᐃ * 110.5, ᐃ * 80, ᐃ * 107);
		Ⲇ.bezierCurveTo(81 * ᐃ, 110.5 * ᐃ, ᐃ * 81, 110.5 * ᐃ, 82 * ᐃ, ᐃ * 114);
		Ⲇ.bezierCurveTo(ᐃ * 94.5, 113.5 * ᐃ, 94.5 * ᐃ, ᐃ * 113.5, 107 * ᐃ, 113 * ᐃ);
		Ⲇ.bezierCurveTo(108.5 * ᐃ, 110 * ᐃ, 108.5 * ᐃ, ᐃ * 110, ᐃ * 110, 107 * ᐃ);
		Ⲇ.bezierCurveTo(111.5 * ᐃ, 110.5 * ᐃ, ᐃ * 111.5, 110.5 * ᐃ, ᐃ * 113, 114 * ᐃ);
		Ⲇ.bezierCurveTo(131 * ᐃ, 112.5 * ᐃ, ᐃ * 131, 112.5 * ᐃ, 149 * ᐃ, ᐃ * 111);
		Ⲇ.bezierCurveTo(148.5 * ᐃ, ᐃ * 107.5, 148.5 * ᐃ, 107.5 * ᐃ, 148 * ᐃ, ᐃ * 104);
		Ⲇ.bezierCurveTo(150.5 * ᐃ, ᐃ * 107, 150.5 * ᐃ, ᐃ * 107, 153 * ᐃ, ᐃ * 110);
		Ⲇ.bezierCurveTo(ᐃ * 155.5, 108.5 * ᐃ, ᐃ * 155.5, 108.5 * ᐃ, ᐃ * 158, ᐃ * 107);
		Ⲇ.bezierCurveTo(ᐃ * 156.5, 104 * ᐃ, ᐃ * 156.5, 104 * ᐃ, 155 * ᐃ, ᐃ * 101);
		Ⲇ.bezierCurveTo(ᐃ * 158.5, ᐃ * 102.5, 158.5 * ᐃ, 102.5 * ᐃ, ᐃ * 162, ᐃ * 104);
		Ⲇ.bezierCurveTo(168 * ᐃ, ᐃΔᐃⵠⵠ * ᐃ, ᐃ * 170, 92 * ᐃ, ᐃ * 169, 85 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 166, ᐃ * 86, ᐃ * 166, 86 * ᐃ, 163 * ᐃ, 87 * ᐃ);
		Ⲇ.bezierCurveTo(165.5 * ᐃ, 83 * ᐃ, ᐃ * 165.5, ᐃ * 83, 168 * ᐃ, 79 * ᐃ);
		Ⲇ.bezierCurveTo(165.5 * ᐃ, ᐃ * 76.5, ᐃ * 165.5, ᐃ * 76.5, 163 * ᐃ, 74 * ᐃ);
		Ⲇ.bezierCurveTo(155 * ᐃ, ᐃ * 82.5, 155 * ᐃ, ᐃ * 82.5, 147 * ᐃ, ᐃ * 91);
		Ⲇ.bezierCurveTo(139 * ᐃ, ᐃ * 95.5, ᐃ * 139, 95.5 * ᐃ, 131 * ᐃ, 100 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 97.5, ᐃ * 100.5, 97.5 * ᐃ, 100.5 * ᐃ, 64 * ᐃ, ᐃ * 101);
		Ⲇ.bezierCurveTo(ᐃ * 49, ᐃ * 102, ᐃ * 43, ᐃ * 90, ᐃ * 36, ᐃ * 80);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⲆⲆ], Δⵠ[2], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 49, ᐃ * 98);
		Ⲇ.bezierCurveTo(96.5 * ᐃ, 98 * ᐃ, ᐃ * 96.5, 98 * ᐃ, 144 * ᐃ, 98 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 136.5, ᐃ * 102, 136.5 * ᐃ, 102 * ᐃ, 129 * ᐃ, 106 * ᐃ);
		Ⲇ.bezierCurveTo(103 * ᐃ, ᐃ * 105.5, 103 * ᐃ, ᐃ * 105.5, ᐃ * 77, ᐃ * 105);
		Ⲇ.bezierCurveTo(65 * ᐃ, ᐃ * 105, 65 * ᐃ, 105 * ᐃ, 53 * ᐃ, ᐃ * 105);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⲆ]);
		Ⲇ.globalAlpha = .5;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 54, 98 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 97, 98 * ᐃ, ᐃ * 97, 98 * ᐃ, 140 * ᐃ, 98 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 134, ᐃ * 101, ᐃ * 134, 101 * ᐃ, 128 * ᐃ, 104 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 92, 104 * ᐃ, 92 * ᐃ, ᐃ * 104, ᐃ * 56, ᐃ * 104);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆ]);
		Ⲇ.globalAlpha = ᐃⲆΔ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 118, 47 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 124.5, ᐃ * 43.5, 124.5 * ᐃ, 43.5 * ᐃ, ᐃ * 131, 40 * ᐃ);
		Ⲇ.bezierCurveTo(128 * ᐃ, 46 * ᐃ, 128 * ᐃ, ᐃ * 46, 125 * ᐃ, ᐃ * 52);
		Ⲇ.bezierCurveTo(ᐃ * 131, ᐃ * 57, ᐃ * 135, 64 * ᐃ, 139 * ᐃ, ᐃ * 73);
		Ⲇ.bezierCurveTo(ᐃ * 142.5, ᐃ * 69.5, 142.5 * ᐃ, 69.5 * ᐃ, 146 * ᐃ, ᐃ * 66);
		Ⲇ.bezierCurveTo(143.5 * ᐃ, 72.5 * ᐃ, ᐃ * 143.5, ᐃ * 72.5, ᐃ * 141, 79 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 142, 91 * ᐃ, ᐃ * 141, ᐃ * 94, ᐃ * 132, ᐃ * 98);
		Ⲇ.bezierCurveTo(117 * ᐃ, ᐃ * 102, 126 * ᐃ, 108 * ᐃ, 142 * ᐃ, ᐃ * 102);
		Ⲇ.bezierCurveTo(159 * ᐃ, ᐃ * 98, 164 * ᐃ, ᐃ * 80, ᐃ * 162, 47 * ᐃ);
		Ⲇ.bezierCurveTo(160 * ᐃ, 19 * ᐃ, ᐃ * 150, ᐃ * 6, ᐃ * 117, ᐃ * ᐃΔⵠⵠ);
		Ⲇ.bezierCurveTo(ᐃ * 44, ᐃ * ΔΔᐃᐃ, ᐃ * 35, ᐃ * 20, 33 * ᐃ, ᐃ * 37);
		Ⲇ.bezierCurveTo(29 * ᐃ, 69 * ᐃ, 33 * ᐃ, 88 * ᐃ, 44 * ᐃ, ᐃ * 96);
		Ⲇ.bezierCurveTo(ᐃ * 64, ᐃ * 107, ᐃ * 70, 102 * ᐃ, ᐃ * 54, ᐃ * 93);
		Ⲇ.bezierCurveTo(ᐃ * 49, ᐃ * 88, 50 * ᐃ, 82 * ᐃ, 53 * ᐃ, ᐃ * 77);
		Ⲇ.bezierCurveTo(ᐃ * 51.5, 71 * ᐃ, ᐃ * 51.5, ᐃ * 71, 50 * ᐃ, ᐃ * 65);
		Ⲇ.bezierCurveTo(ᐃ * 53, ᐃ * 68.5, ᐃ * 53, ᐃ * 68.5, ᐃ * 56, 72 * ᐃ);
		Ⲇ.bezierCurveTo(59 * ᐃ, ᐃ * 67.5, 59 * ᐃ, 67.5 * ᐃ, 62 * ᐃ, ᐃ * 63);
		Ⲇ.bezierCurveTo(60.5 * ᐃ, 59.5 * ᐃ, 60.5 * ᐃ, 59.5 * ᐃ, 59 * ᐃ, 56 * ᐃ);
		Ⲇ.bezierCurveTo(62 * ᐃ, ᐃ * 57, ᐃ * 62, 57 * ᐃ, 65 * ᐃ, 58 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 78, ᐃ * 35, 103 * ᐃ, ᐃ * 36, ᐃ * 117, 47 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 6 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 62, ᐃ * 21);
		Ⲇ.bezierCurveTo(63 * ᐃ, 34 * ᐃ, ᐃ * 64, 37 * ᐃ, 66 * ᐃ, ᐃ * 40);
		Ⲇ.bezierCurveTo(54 * ᐃ, 49 * ᐃ, ᐃ * 53, 51 * ᐃ, 48 * ᐃ, ᐃ * 58);
		Ⲇ.bezierCurveTo(44 * ᐃ, 51 * ᐃ, ᐃ * 42, 43 * ᐃ, ᐃ * 40, 36 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 47, 28 * ᐃ, ᐃ * 52, 25 * ᐃ, ᐃ * 61, ᐃ * 21);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(60 * ᐃ, 29 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 62, ᐃ * 25, ᐃ * 65, 24 * ᐃ, ᐃ * 70, 23 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[3], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 61, 37 * ᐃ);
		Ⲇ.bezierCurveTo(63 * ᐃ, 32 * ᐃ, 66 * ᐃ, ᐃ * 32, ᐃ * 71, 32 * ᐃ);
		ΔΔ(Ⲇ, ⲆⲆⲆΔⲆ, Δⵠ[3], Ⲇⵠⵠⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 52, 31 * ᐃ);
		Ⲇ.bezierCurveTo(50 * ᐃ, 26 * ᐃ, 50 * ᐃ, ᐃ * 25, 51 * ᐃ, ᐃ * 23);
		ΔΔ(Ⲇ, undefined, Δⵠ[ⵠⵠΔⵠ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(46 * ᐃ, ᐃ * 35);
		Ⲇ.bezierCurveTo(44 * ᐃ, 31 * ᐃ, 43 * ᐃ, ᐃ * 29, ᐃ * 45, 26 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[3], ᐃΔᐃΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 58, 44 * ᐃ);
		Ⲇ.bezierCurveTo(57 * ᐃ, 48 * ᐃ, ᐃ * 57, 50 * ᐃ, ᐃ * 60, 52 * ᐃ);
		ΔΔ(Ⲇ, ΔΔᐃⵠⵠ, Δⵠ[ᐃⵠΔⲆ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(53 * ᐃ, 48 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 52, 52 * ᐃ, 52 * ᐃ, ᐃ * 54, ᐃ * 55, 57 * ᐃ);
		ΔΔ(Ⲇ, ⵠⲆⵠᐃⲆ, Δⵠ[3], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(46 * ᐃ, ᐃ * 41);
		Ⲇ.bezierCurveTo(41 * ᐃ, ᐃ * 42, 39 * ᐃ, ᐃ * 45, 38 * ᐃ, ᐃ * 48);
		ΔΔ(Ⲇ, ΔⲆΔⵠᐃ, Δⵠ[ᐃⵠΔᐃ], ᐃΔⵠⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(48 * ᐃ, ᐃ * 48);
		Ⲇ.bezierCurveTo(42 * ᐃ, 51 * ᐃ, ᐃ * 42, 53 * ᐃ, 40 * ᐃ, 55 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[ᐃΔⲆΔ], ᐃ * 4);
		0 == Ⲇᐃ ? (Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(99 * ᐃ, 101 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 118.6666259765625, ᐃ * 104.33331298828125, 124.6666259765625 * ᐃ, ᐃ * 116.33331298828125, ᐃ * 112.6666259765625, 114.33331298828125 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 104.6666259765625, 112.33331298828125 * ᐃ, ᐃ * 100.6666259765625, ᐃ * 105.33331298828125, ᐃ * 99.6666259765625, 101.33331298828125 * ᐃ), ΔΔ(Ⲇ, undefined, Δⵠ[5], ᐃ * 6), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 97.6666259765625, 101.33331298828125 * ᐃ), Ⲇ.bezierCurveTo(81.6666259765625 * ᐃ, 106.33331298828125 * ᐃ, 79.6666259765625 * ᐃ, 114.33331298828125 * ᐃ, ᐃ * 89.6666259765625, 114.33331298828125 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 95.6666259765625, 111.33331298828125 * ᐃ, ᐃ * 95.6666259765625, ᐃ * 109.33331298828125, 98.6666259765625 * ᐃ, ᐃ * 102.33331298828125), ΔΔ(Ⲇ, undefined, Δⵠ[5], ΔΔΔΔ * ᐃ)) : (Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(103 * ᐃ, 100.39999389648438 * ᐃ), Ⲇ.bezierCurveTo(120 * ᐃ, 106.39999389648438 * ᐃ, ᐃ * 118, ᐃ * 107.39999389648438, ᐃ * 120, 111.39999389648438 * ᐃ), ΔΔ(Ⲇ, undefined, Δⵠ[5], ⲆⲆⲆᐃᐃ * ᐃ), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(103 * ᐃ, 100.39999389648438 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 90, 103.39999389648438 * ᐃ, 89 * ᐃ, 106.39999389648438 * ᐃ, ᐃ * 87, 112.39999389648438 * ᐃ), ΔΔ(Ⲇ, ⵠΔⲆⵠΔ, Δⵠ[5], 6 * ᐃ), ᐃΔΔ(Ⲇ, 86 * ᐃ, 114.39999389648438 * ᐃ, ᐃ * 4.5), ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[5], ᐃ * 6), ᐃΔΔ(Ⲇ, ᐃ * 121, 114.39999389648438 * ᐃ, ᐃ * 4.5), ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[5], ᐃ * ΔΔΔΔ));
		return ΔⲆ
	}

	function ⵠΔΔΔⲆⵠⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 185 * ᐃ;
		ΔⲆ.height = ᐃ * 164;
		Ⲇ.translate(0, 0);
		var ᐃᐃ = ⵠΔⲆⲆᐃᐃΔΔᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ);
		Ⲇ.drawImage(ᐃᐃ, -ⲆΔΔⲆᐃ * ᐃ, ᐃ * ΔⲆⲆ);
		var ᐃᐃ = ⲆᐃΔᐃⵠΔⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ, 0);
		Ⲇ.drawImage(ᐃᐃ, -83 * ᐃ, -40 * ᐃ);
		var ᐃᐃ = ⲆᐃΔᐃⵠΔⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ, Math.PI / 1.4);
		Ⲇ.drawImage(ᐃᐃ, ᐃ * -ΔᐃⵠΔᐃⵠᐃ, -88 * ᐃ);
		var ᐃᐃ = ⲆᐃΔᐃⵠΔⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ, Math.PI / -1.4);
		Ⲇ.drawImage(ᐃᐃ, ᐃ * 15, ᐃ * -Δⵠᐃᐃⵠ);
		return ΔⲆ
	}

	function ΔⵠⵠⵠΔᐃᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 85;
		ΔⲆ.height = ᐃ * 145;
		Ⲇ.translate(-165 * ᐃ, -95 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(217 * ᐃ, ᐃ * 103);
		Ⲇ.bezierCurveTo(ᐃ * 209, ᐃ * 129, 203 * ᐃ, ᐃ * 137, 195 * ᐃ, 146 * ᐃ);
		Ⲇ.bezierCurveTo(195 * ᐃ, 159 * ᐃ, ᐃ * 194, ᐃ * 167, 189 * ᐃ, 178 * ᐃ);
		Ⲇ.bezierCurveTo(193 * ᐃ, ᐃ * 186, ᐃ * 196, ᐃ * 195, 198 * ᐃ, ᐃ * 216);
		Ⲇ.bezierCurveTo(217.5 * ᐃ, 189.5 * ᐃ, ᐃ * 217.5, ᐃ * 189.5, 237 * ᐃ, ᐃ * 163);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(231 * ᐃ, 163 * ᐃ);
		Ⲇ.bezierCurveTo(221 * ᐃ, 139 * ᐃ, ᐃ * 218, ᐃ * 128, ᐃ * 215, ᐃ * 114);
		Ⲇ.bezierCurveTo(213 * ᐃ, 102 * ᐃ, 220 * ᐃ, 92 * ᐃ, ᐃ * 222, ᐃ * 107);
		Ⲇ.bezierCurveTo(224 * ᐃ, ᐃ * 118, ᐃ * 233, ᐃ * 138, ᐃ * 244, 161 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 235, ᐃ * 188, 224 * ᐃ, 198 * ᐃ, 204 * ᐃ, 221 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 190, 233 * ᐃ, ᐃ * 190, ᐃ * 235, ᐃ * 180, 235 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 167, ᐃ * 235, 164 * ᐃ, ᐃ * 216, ᐃ * 175, ᐃ * 211);
		Ⲇ.bezierCurveTo(ᐃ * 176, 208 * ᐃ, 181 * ᐃ, ᐃ * 207, 191 * ᐃ, 205 * ᐃ);
		Ⲇ.bezierCurveTo(213 * ᐃ, ᐃ * 186, 218 * ᐃ, ᐃ * 180, ᐃ * 230, 163 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 234, 154 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 227, 156 * ᐃ, ᐃ * 222, ᐃ * 156, ᐃ * 199, ᐃ * 148);
		Ⲇ.bezierCurveTo(201 * ᐃ, 151 * ᐃ, 216 * ᐃ, 159 * ᐃ, 224 * ᐃ, ᐃ * 162);
		Ⲇ.bezierCurveTo(ᐃ * 209, ᐃ * 169.5, 209 * ᐃ, 169.5 * ᐃ, 194 * ᐃ, ᐃ * 177);
		Ⲇ.bezierCurveTo(213.5 * ᐃ, 175 * ᐃ, ᐃ * 213.5, 175 * ᐃ, 233 * ᐃ, 173 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2]);
		return ΔⲆ
	}

	function ᐃᐃᐃΔⲆᐃΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 163;
		ΔⲆ.height = 163 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(82.5 * ᐃ, ᐃ * 81.1015625);
		Ⲇ.rotate(ⵠΔᐃᐃ);
		ᐃΔⵠ(Ⲇ, -65.5 * ᐃ, ᐃ * -66, ᐃ * 131, 131 * ᐃ, ᐃΔΔⲆⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ⲆᐃΔ;
		Ⲇ.translate(5 * ᐃ, ᐃ * 5);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 80, 17.1015625 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -64, -4.5 * ᐃ, 129 * ᐃ, ᐃ * ⵠΔⵠⵠᐃ, ΔⵠΔᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(-ᐃᐃᐃⲆ * ᐃ, -5 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(80 * ᐃ, 17.1015625 * ᐃ);
		ᐃΔⵠ(Ⲇ, -64 * ᐃ, -4.5 * ᐃ, 129 * ᐃ, ᐃ * 9, ⲆᐃⲆΔ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], 3 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔⲆᐃᐃ;
		Ⲇ.translate(5 * ᐃ, Ⲇᐃⵠᐃ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 145.5, ᐃ * 83.6015625);
		ᐃΔⵠ(Ⲇ, -4.5 * ᐃ, -61 * ᐃ, ᐃ * 9, 129 * ᐃ, ᐃ * 5);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = Δⵠᐃ;
		Ⲇ.translate(ᐃ * -5, -5 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(145.5 * ᐃ, ᐃ * 83.6015625);
		ᐃΔⵠ(Ⲇ, -4.5 * ᐃ, -61 * ᐃ, ᐃ * 9, ᐃ * 129, ⵠⲆⲆᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆⲆ], Δⵠ[Δⵠⵠᐃ], ΔⲆΔⲆ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ⲆⲆᐃᐃ * ᐃ, ᐃ * 5);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 17.5, ᐃ * 82.6015625);
		ᐃΔⵠ(Ⲇ, -4.5 * ᐃ, ᐃ * -65, ᐃ * 9, ᐃ * 129, 5 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(-5 * ᐃ, -5 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 17.5, ᐃ * 82.6015625);
		ᐃΔⵠ(Ⲇ, ᐃ * -4.5, -65 * ᐃ, ᐃⵠᐃΔΔⵠᐃ * ᐃ, 129 * ᐃ, ᐃ * 5);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], ᐃ * ᐃⵠΔⵠ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : Ⲇⵠᐃ;
		Ⲇ.translate(5 * ᐃ, ᐃ * ᐃΔΔⲆⵠ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 80.5, 145.6015625 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -65.5, -4 * ᐃ, ᐃ * 129, ᐃ * ⵠⲆᐃᐃΔ, ᐃ * 5);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆⲆ]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(-5 * ᐃ, -5 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 80.5, ᐃ * 145.6015625);
		ᐃΔⵠ(Ⲇ, -65.5 * ᐃ, -ⲆᐃᐃΔⵠ * ᐃ, 129 * ᐃ, ᐃ * 9, ᐃ * Ⲇᐃⵠᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠᐃ], Δⵠ[3], ᐃ * 3);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔⵠⲆⲆ;
		Ⲇ.translate(ᐃᐃⵠᐃΔ * ᐃ, ΔⲆⲆⵠ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * ΔᐃΔⲆⲆⵠᐃ, 18.1015625 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -11, ᐃ * -11.5, ᐃ * 22, ᐃ * 22, ᐃᐃΔᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ᐃ * -ⵠⵠᐃᐃ, ᐃ * -5);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 17, ᐃ * 18.1015625);
		ᐃΔⵠ(Ⲇ, ᐃ * -ⲆΔᐃᐃΔⵠⲆ, ᐃ * -11.5, ᐃ * 22, ᐃ * 22, ᐃ * 5);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔⲆⲆ], Δⵠ[3], ᐃ * ⵠΔΔⲆᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ΔⵠΔᐃ * ᐃ, ᐃ * ⲆᐃⲆΔ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 145.5, 16.6015625 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -10.5, ᐃ * -11.5, 21 * ᐃ, ᐃ * 22, ᐃ * 5);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ]);
		Ⲇ.globalAlpha = ΔⲆᐃⲆ;
		Ⲇ.translate(ᐃ * -5, ᐃ * -ᐃᐃⵠᐃΔ);
		Ⲇ.save();
		Ⲇ.translate(145.5 * ᐃ, ᐃ * 16.6015625);
		ᐃΔⵠ(Ⲇ, -10.5 * ᐃ, -11.5 * ᐃ, 21 * ᐃ, ᐃ * 22, ᐃ * ΔⵠⲆᐃᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⲆᐃ], Δⵠ[3], ᐃ * 3);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ᐃ * 5, ᐃ * ΔΔⲆⲆⵠ);
		Ⲇ.save();
		Ⲇ.translate(145.5 * ᐃ, 144.1015625 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -10.5, ᐃ * -11, 22 * ᐃ, 22 * ᐃ, ᐃ * ΔⲆⵠⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃ]);
		Ⲇ.globalAlpha = ΔΔΔᐃ;
		Ⲇ.translate(-5 * ᐃ, -5 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 145.5, 144.1015625 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -10.5, -ΔᐃⲆⲆⲆⲆⲆ * ᐃ, ᐃ * 22, ᐃ * 22, ᐃ * 5);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃᐃ], Δⵠ[3], 3 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ⵠΔᐃ;
		Ⲇ.translate(5 * ᐃ, ᐃ * 5);
		Ⲇ.save();
		Ⲇ.translate(17.5 * ᐃ, ᐃ * 145.1015625);
		ᐃΔⵠ(Ⲇ, ᐃ * -11.5, -12 * ᐃ, ᐃ * 22, ᐃ * 22, 5 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = Δⵠᐃ;
		Ⲇ.translate(ᐃ * -5, -5 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(17.5 * ᐃ, 145.1015625 * ᐃ);
		ᐃΔⵠ(Ⲇ, -11.5 * ᐃ, -ⵠⵠᐃᐃΔΔⵠ * ᐃ, ᐃ * 22, 22 * ᐃ, ᐃ * ΔΔⲆⲆⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ⲆΔⵠⵠⵠ], ᐃⲆΔΔ * ᐃ);
		return ΔⲆ
	}

	function ⵠⲆⲆᐃᐃⲆΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 465 * ᐃ;
		ΔⲆ.height = 310 * ᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 126, 192 * ᐃ);
		Ⲇ.bezierCurveTo(198 * ᐃ, 202 * ᐃ, 245 * ᐃ, 203 * ᐃ, ᐃ * 335, ᐃ * 194);
		Ⲇ.bezierCurveTo(ᐃ * 336, ᐃ * 232, 326 * ᐃ, 235 * ᐃ, 232 * ᐃ, ᐃ * 237);
		Ⲇ.bezierCurveTo(ᐃ * 161, ᐃ * 235, 122 * ᐃ, ᐃ * 235, 126 * ᐃ, 193 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⲆ], Δⵠ[ΔΔⵠΔ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 146, 239 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 174, 74 * ᐃ, 287 * ᐃ, 88 * ᐃ, 320 * ᐃ, 240 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 329, 231 * ᐃ, ᐃ * 340, ᐃ * 219, 332 * ᐃ, 115 * ᐃ);
		Ⲇ.bezierCurveTo(330 * ᐃ, ᐃ * 40, ᐃ * 144, ᐃ * 30, 129 * ᐃ, ᐃ * 116);
		Ⲇ.bezierCurveTo(124 * ᐃ, ᐃ * 217, 124 * ᐃ, 228 * ᐃ, 143 * ᐃ, ᐃ * 237);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ], Δⵠ[1], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(126 * ᐃ, ᐃ * 193);
		Ⲇ.bezierCurveTo(173 * ᐃ, ᐃ * 94, ᐃ * 209, ᐃⲆᐃⵠΔ * ᐃ, ᐃ * 228, ᐃ * 57);
		Ⲇ.bezierCurveTo(ᐃ * 190, ᐃ * 112, ᐃ * 165, ᐃ * 115, ᐃ * 127, 184 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆⲆⲆΔⲆ, Δⵠ[1], ᐃΔⵠⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 230, ᐃ * 57);
		Ⲇ.bezierCurveTo(ᐃ * 266, 117 * ᐃ, ᐃ * 310, ᐃ * 130, ᐃ * 332, ᐃ * 183);
		Ⲇ.bezierCurveTo(290 * ᐃ, 112 * ᐃ, 262 * ᐃ, ᐃ * 109, ᐃ * 230, 56 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ⵠᐃⵠΔ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 154, ᐃ * 212);
		Ⲇ.bezierCurveTo(ᐃ * 208, ᐃ * 224, ᐃ * 252, 219 * ᐃ, ᐃ * 305, 212 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 267, 219 * ᐃ, ᐃ * 204, ᐃ * 222, 155 * ᐃ, ᐃ * 212);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠⵠⲆᐃᐃ, Δⵠ[ΔΔⵠΔ], ᐃ * ⵠⲆΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 239, 59 * ᐃ);
		Ⲇ.bezierCurveTo(302 * ᐃ, 72 * ᐃ, 325 * ᐃ, ᐃ * 84, ᐃ * 326, 115 * ᐃ);
		Ⲇ.bezierCurveTo(289 * ᐃ, 80 * ᐃ, ᐃ * 270, 88 * ᐃ, ᐃ * 253, ᐃ * 78);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(216 * ᐃ, 61 * ᐃ);
		Ⲇ.bezierCurveTo(209 * ᐃ, 70 * ᐃ, ᐃ * 209, 70 * ᐃ, 202 * ᐃ, ᐃ * 79);
		Ⲇ.bezierCurveTo(173 * ᐃ, 87 * ᐃ, 162 * ᐃ, 91 * ᐃ, ᐃ * 137, ᐃ * 107);
		Ⲇ.bezierCurveTo(153 * ᐃ, 78 * ᐃ, 174 * ᐃ, 67 * ᐃ, ᐃ * 212, 62 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(175 * ᐃ, ᐃ * 125);
		Ⲇ.bezierCurveTo(ᐃ * 218, 94 * ᐃ, ᐃ * 238, ᐃ * 90, 281 * ᐃ, ᐃ * 125);
		Ⲇ.bezierCurveTo(245 * ᐃ, ᐃ * 89, 240 * ᐃ, ᐃ * 80, 228 * ᐃ, 67 * ᐃ);
		Ⲇ.bezierCurveTo(207 * ᐃ, ⵠΔⵠΔΔ * ᐃ, 192 * ᐃ, 104 * ᐃ, 177 * ᐃ, ᐃ * 123);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠΔⵠ]);
		return ΔⲆ
	}

	function ᐃᐃᐃⵠⵠⲆΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 48;
		ΔⲆ.height = 47 * ᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 7.1875, 25.434661865234375 * ᐃ);
		Ⲇ.bezierCurveTo(11.1875 * ᐃ, ᐃ * 13.434661865234375, 18.1875 * ᐃ, 8.434661865234375 * ᐃ, ᐃ * 32.1875, 10.434661865234375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 45.1875, 14.434661865234375 * ᐃ, 41.1875 * ᐃ, ᐃ * 24.434661865234375, 36.1875 * ᐃ, 30.434661865234375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 22.1875, ᐃ * 42.434661865234375, ᐃ * 2.1875, 41.434661865234375 * ᐃ, 7.1875 * ᐃ, 25.434661865234375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ]);
		return ΔⲆ
	}

	function ⵠⵠΔΔⵠᐃᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 272;
		ΔⲆ.height = ᐃ * 264;
		Ⲇ.translate(0, 20 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ⵠᐃⵠΔ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(56.999969482421875 * ᐃ, ᐃ * 84.517333984375);
		Ⲇ.bezierCurveTo(ᐃ * 61.999969482421875, 58.517333984375 * ᐃ, 79.99996948242188 * ᐃ, 50.517333984375 * ᐃ, 102.99996948242188 * ᐃ, 50.517333984375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 119.99996948242188, ᐃ * 26.517333984375, 137.99996948242188 * ᐃ, ᐃ * 32.517333984375, ᐃ * 156.99996948242188, ᐃ * 44.517333984375);
		Ⲇ.bezierCurveTo(ᐃ * 187.99996948242188, ᐃ * 42.517333984375, ᐃ * 195.99996948242188, 50.517333984375 * ᐃ, 202.99996948242188 * ᐃ, ᐃ * 77.517333984375);
		Ⲇ.bezierCurveTo(229.99996948242188 * ᐃ, ᐃ * 80.517333984375, ᐃ * 231.99996948242188, ᐃ * 96.517333984375, 229.99996948242188 * ᐃ, ᐃ * 118.517333984375);
		Ⲇ.bezierCurveTo(ᐃ * 241.99996948242188, ᐃ * 147.517333984375, 236.99996948242188 * ᐃ, 148.517333984375 * ᐃ, 220.99996948242188 * ᐃ, ᐃ * 165.517333984375);
		Ⲇ.bezierCurveTo(222.99996948242188 * ᐃ, 192.517333984375 * ᐃ, ᐃ * 209.99996948242188, 212.517333984375 * ᐃ, 177.99996948242188 * ᐃ, ᐃ * 213.517333984375);
		Ⲇ.bezierCurveTo(159.99996948242188 * ᐃ, 234.517333984375 * ᐃ, 141.99996948242188 * ᐃ, 234.517333984375 * ᐃ, 116.99996948242188 * ᐃ, ᐃ * 222.517333984375);
		Ⲇ.bezierCurveTo(72.99996948242188 * ᐃ, 226.517333984375 * ᐃ, ᐃ * 66.99996948242188, ᐃ * 207.517333984375, 65.99996948242188 * ᐃ, 190.517333984375 * ᐃ);
		Ⲇ.bezierCurveTo(35.999969482421875 * ᐃ, 180.517333984375 * ᐃ, ᐃ * 30.999969482421875, 162.517333984375 * ᐃ, 39.999969482421875 * ᐃ, 135.517333984375 * ᐃ);
		Ⲇ.bezierCurveTo(23.999969482421875 * ᐃ, 110.517333984375 * ᐃ, ᐃ * 43.999969482421875, 90.517333984375 * ᐃ, 55.999969482421875 * ᐃ, 85.517333984375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.translate(0, -20 * ᐃ);
		Ⲇ.globalAlpha = ΔᐃⵠⲆ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(56.999969482421875 * ᐃ, ᐃ * 84.517333984375);
		Ⲇ.bezierCurveTo(61.999969482421875 * ᐃ, 58.517333984375 * ᐃ, ᐃ * 79.99996948242188, ᐃ * 50.517333984375, ᐃ * 102.99996948242188, ᐃ * 50.517333984375);
		Ⲇ.bezierCurveTo(119.99996948242188 * ᐃ, ᐃ * 26.517333984375, 137.99996948242188 * ᐃ, 32.517333984375 * ᐃ, ᐃ * 156.99996948242188, ᐃ * 44.517333984375);
		Ⲇ.bezierCurveTo(ᐃ * 187.99996948242188, 42.517333984375 * ᐃ, 195.99996948242188 * ᐃ, ᐃ * 50.517333984375, ᐃ * 202.99996948242188, 77.517333984375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 229.99996948242188, ᐃ * 80.517333984375, ᐃ * 231.99996948242188, 96.517333984375 * ᐃ, ᐃ * 229.99996948242188, 118.517333984375 * ᐃ);
		Ⲇ.bezierCurveTo(241.99996948242188 * ᐃ, 147.517333984375 * ᐃ, 236.99996948242188 * ᐃ, ᐃ * 148.517333984375, 220.99996948242188 * ᐃ, ᐃ * 165.517333984375);
		Ⲇ.bezierCurveTo(ᐃ * 222.99996948242188, 192.517333984375 * ᐃ, ᐃ * 209.99996948242188, 212.517333984375 * ᐃ, ᐃ * 177.99996948242188, 213.517333984375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 159.99996948242188, 234.517333984375 * ᐃ, ᐃ * 141.99996948242188, 234.517333984375 * ᐃ, ᐃ * 116.99996948242188, 222.517333984375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 72.99996948242188, 226.517333984375 * ᐃ, ᐃ * 66.99996948242188, 207.517333984375 * ᐃ, ᐃ * 65.99996948242188, ᐃ * 190.517333984375);
		Ⲇ.bezierCurveTo(ᐃ * 35.999969482421875, ᐃ * 180.517333984375, 30.999969482421875 * ᐃ, ᐃ * 162.517333984375, ᐃ * 39.999969482421875, 135.517333984375 * ᐃ);
		Ⲇ.bezierCurveTo(23.999969482421875 * ᐃ, ᐃ * 110.517333984375, ᐃ * 43.999969482421875, ᐃ * 90.517333984375, ᐃ * 55.999969482421875, ᐃ * 85.517333984375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔᐃ], Δⵠ[2], ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 123.99996948242188, ᐃ * 116.18402099609375);
		Ⲇ.bezierCurveTo(115.99996948242188 * ᐃ, 99.18402099609375 * ᐃ, ᐃ * 109.99996948242188, 74.18402099609375 * ᐃ, ᐃ * 109.99996948242188, ᐃ * 63.18402099609375);
		Ⲇ.bezierCurveTo(ᐃ * 115.99996948242188, ᐃ * 69.18402099609375, 125.99996948242188 * ᐃ, ᐃ * 87.18402099609375, 137.99996948242188 * ᐃ, 112.18402099609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 142.99996948242188, ᐃ * 84.18402099609375, 143.99996948242188 * ᐃ, 76.18402099609375 * ᐃ, 153.99996948242188 * ᐃ, ᐃ * 62.18402099609375);
		Ⲇ.bezierCurveTo(155.99996948242188 * ᐃ, 79.18402099609375 * ᐃ, 149.99996948242188 * ᐃ, 110.18402099609375 * ᐃ, ᐃ * 151.99996948242188, 117.18402099609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 162.99996948242188, 104.18402099609375 * ᐃ, ᐃ * 180.99996948242188, ᐃ * 91.18402099609375, 191.99996948242188 * ᐃ, ᐃ * 91.18402099609375);
		Ⲇ.bezierCurveTo(ᐃ * 185.99996948242188, 102.18402099609375 * ᐃ, ᐃ * 180.99996948242188, 106.18402099609375 * ᐃ, ᐃ * 160.99996948242188, 124.18402099609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 190.99996948242188, ᐃ * 121.18402099609375, ᐃ * 199.99996948242188, 120.18402099609375 * ᐃ, ᐃ * 207.99996948242188, 123.18402099609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 199.99996948242188, ᐃ * 129.18402099609375, ᐃ * 181.99996948242188, 132.18402099609375 * ᐃ, 160.99996948242188 * ᐃ, ᐃ * 135.18402099609375);
		Ⲇ.bezierCurveTo(ᐃ * 179.99996948242188, 142.18402099609375 * ᐃ, ᐃ * 193.99996948242188, ᐃ * 151.18402099609375, 196.99996948242188 * ᐃ, ᐃ * 156.18402099609375);
		Ⲇ.bezierCurveTo(ᐃ * 185.99996948242188, ᐃ * 156.18402099609375, ᐃ * 163.99996948242188, 149.18402099609375 * ᐃ, ᐃ * 152.99996948242188, 147.18402099609375 * ᐃ);
		Ⲇ.bezierCurveTo(157.99996948242188 * ᐃ, 155.18402099609375 * ᐃ, 165.99996948242188 * ᐃ, ᐃ * 176.18402099609375, ᐃ * 169.99996948242188, 195.18402099609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 162.99996948242188, 190.18402099609375 * ᐃ, 147.99996948242188 * ᐃ, ᐃ * 167.18402099609375, ᐃ * 139.99996948242188, 153.18402099609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 137.99996948242188, ᐃ * 167.18402099609375, 126.99996948242188 * ᐃ, ᐃ * 194.18402099609375, 119.99996948242188 * ᐃ, ᐃ * 204.18402099609375);
		Ⲇ.bezierCurveTo(ᐃ * 117.99996948242188, 186.18402099609375 * ᐃ, 123.99996948242188 * ᐃ, 165.18402099609375 * ᐃ, 126.99996948242188 * ᐃ, 149.18402099609375 * ᐃ);
		Ⲇ.bezierCurveTo(110.99996948242188 * ᐃ, ᐃ * 163.18402099609375, ᐃ * 103.99996948242188, 170.18402099609375 * ᐃ, 82.99996948242188 * ᐃ, 177.18402099609375 * ᐃ);
		Ⲇ.bezierCurveTo(90.99996948242188 * ᐃ, ᐃ * 162.18402099609375, 99.99996948242188 * ᐃ, ᐃ * 153.18402099609375, ᐃ * 117.99996948242188, 140.18402099609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 97.99996948242188, 140.18402099609375 * ᐃ, 83.99996948242188 * ᐃ, ᐃ * 139.18402099609375, 65.99996948242188 * ᐃ, 132.18402099609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 77.99996948242188, ᐃ * 127.18402099609375, ᐃ * 95.99996948242188, 127.18402099609375 * ᐃ, 115.99996948242188 * ᐃ, ᐃ * 127.18402099609375);
		Ⲇ.bezierCurveTo(91.99996948242188 * ᐃ, 113.18402099609375 * ᐃ, ᐃ * 84.99996948242188, 107.18402099609375 * ᐃ, 76.99996948242188 * ᐃ, ᐃ * 96.18402099609375);
		Ⲇ.bezierCurveTo(ᐃ * 94.99996948242188, 99.18402099609375 * ᐃ, ᐃ * 109.99996948242188, ᐃ * 109.18402099609375, ᐃ * 123.99996948242188, ᐃ * 116.18402099609375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 131.99996948242188, 119.18402099609375 * ᐃ);
		Ⲇ.bezierCurveTo(141.99996948242188 * ᐃ, 119.18402099609375 * ᐃ, ᐃ * 145.99996948242188, 116.18402099609375 * ᐃ, 147.99996948242188 * ᐃ, 109.18402099609375 * ᐃ);
		Ⲇ.bezierCurveTo(151.99996948242188 * ᐃ, ᐃ * 107.18402099609375, 159.99996948242188 * ᐃ, ᐃ * 107.18402099609375, 156.99996948242188 * ᐃ, 123.18402099609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 155.99996948242188, ᐃ * 140.18402099609375, ᐃ * 142.99996948242188, ᐃ * 149.18402099609375, 132.99996948242188 * ᐃ, ᐃ * 147.18402099609375);
		Ⲇ.bezierCurveTo(119.99996948242188 * ᐃ, 144.18402099609375 * ᐃ, ᐃ * 113.99996948242188, ᐃ * 122.18402099609375, ᐃ * 131.99996948242188, 119.18402099609375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⵠ], Δⵠ[5], ΔΔΔⵠΔ * ᐃ);
		return ΔⲆ
	}

	function ⵠᐃᐃΔⲆⲆᐃ(ⵠΔⵠΔΔⵠᐃ, ⵠⲆⲆⲆᐃ, ⵠⲆᐃΔΔ, ᐃⵠⵠⲆᐃΔⲆ, ᐃΔᐃⵠⲆⵠⵠ, ᐃⵠⵠⵠΔΔⲆ) {
		const ⵠⵠΔⲆⵠⲆΔ = ((42456 + ⵠΔⵠΔΔⵠᐃ) * 214013 + 2531011) % 4294967296;
		const ᐃⵠΔᐃⵠᐃᐃ = ~(ⵠⲆⲆⲆᐃ & 25588) & 25588 | ~(25588 & ⵠⲆⲆⲆᐃ) & ⵠⲆⲆⲆᐃ;
		const ⲆᐃⲆⵠΔⲆⲆ = (24 << (ⵠⲆᐃΔΔ >> 24 & 255)) + (ΔⵠΔⵠΔ << (ⵠⲆᐃΔΔ >> 8 & 255)) + (16 << (ⵠⲆᐃΔΔ >> 0 & 255)) + (0 << (ⵠⲆᐃΔΔ >> 16 & ΔᐃᐃⵠΔΔΔ));
		const ΔⲆⲆⵠⵠΔΔ = (ᐃⵠⵠⲆᐃΔⲆ | 10001) & ~(10001 & ᐃⵠⵠⲆᐃΔⲆ);
		const ΔᐃᐃᐃⲆⲆᐃⵠⵠ = (0 << (ᐃΔᐃⵠⲆⵠⵠ >> 24 & 255)) + (16 << (ᐃΔᐃⵠⲆⵠⵠ >> 0 & ⲆᐃⵠⲆⵠᐃΔ)) + (24 << (ᐃΔᐃⵠⲆⵠⵠ >> ⵠᐃᐃⲆⲆ & 255)) + (8 << (ᐃΔᐃⵠⲆⵠⵠ >> 8 & 255));
		const ⲆΔΔᐃⲆᐃⵠᐃⵠ = (8 << (ᐃⵠⵠⵠΔΔⲆ >> 0 & ΔᐃᐃⵠⵠⲆⵠ)) + (0 << (ᐃⵠⵠⵠΔΔⲆ >> 8 & 255)) + (24 << (ᐃⵠⵠⵠΔΔⲆ >> 16 & 255)) + (16 << (ᐃⵠⵠⵠΔΔⲆ >> 24 & ⵠⵠⲆⲆᐃ));
		const ⵠⵠᐃⵠⵠΔⵠΔΔ = ⵠΔᐃⲆⲆᐃⲆ(ⵠⵠΔⲆⵠⲆΔ, ᐃⵠΔᐃⵠᐃᐃ, ⲆᐃⲆⵠΔⲆⲆ, ΔⲆⲆⵠⵠΔΔ, ΔᐃᐃᐃⲆⲆᐃⵠⵠ);
		const ᐃΔΔⵠΔⲆΔΔΔ = ⲆΔⵠⵠᐃᐃⲆ(ⲆΔΔᐃⲆᐃⵠᐃⵠ, ⵠⵠΔⲆⵠⲆΔ, ᐃⵠΔᐃⵠᐃᐃ, ⲆᐃⲆⵠΔⲆⲆ, ΔⲆⲆⵠⵠΔΔ);
		const ᐃΔⲆⲆΔΔⲆΔⲆ = (12345 + ((ⵠⵠᐃⵠⵠΔⵠΔΔ ^ ᐃΔΔⵠΔⲆΔΔΔ) + 43333) * 1103515245) % 2147483648;
		return ᐃΔⲆⲆΔΔⲆΔⲆ
	}

	function ᐃⵠΔᐃΔΔⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 170 * ᐃ;
		ΔⲆ.height = ᐃ * 170;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ᐃᐃΔ;
		Ⲇ.translate(ⵠⵠⲆⵠ, ⵠΔΔⲆᐃ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 85, 95 * ᐃ);
		Ⲇ.rotate(1.4);
		ᐃᐃⲆΔ(Ⲇ, 7, ᐃ * 60, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(85 * ᐃ, 82 * ᐃ);
		for (var Ⲇᐃ = ⵠⲆᐃ; ⲆΔΔⲆᐃ > Ⲇᐃ; Ⲇᐃ++) {
			Ⲇ.rotate(Math.PI / ⵠⲆⲆᐃ);
			Ⲇ.save();
			Ⲇ.translate(65 * ᐃ, ⵠⲆᐃ);
			ᐃᐃⲆΔ(Ⲇ, 3, 21 * ᐃ, ᐃ * 4);
			ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔᐃⵠΔ], ᐃ * ⵠΔⲆΔΔ);
			Ⲇ.restore()
		}
		Ⲇ.save();
		Ⲇ.translate(0 * ᐃ, 0 * ᐃ);
		Ⲇ.rotate(ᐃᐃΔ);
		ᐃᐃⲆΔ(Ⲇ, ᐃᐃᐃΔⲆ, 60 * ᐃ, ᐃ * 10);
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⲆΔᐃΔⵠ], 4 * ᐃ);
		Ⲇ.rotate(.56);
		ᐃᐃⲆΔ(Ⲇ, 8, 40 * ᐃ, ᐃ * 10);
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃⲆΔ], Δⵠ[6], ᐃ * ᐃᐃⵠΔ);
		Ⲇ.rotate(.28);
		ᐃᐃⲆΔ(Ⲇ, ΔⲆⲆⲆΔⵠᐃ, 28 * ᐃ, ⲆΔΔⲆⵠ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠⵠⵠ]);
		Ⲇ.restore();
		return ΔⲆ
	}

	function ᐃΔΔⲆᐃᐃⲆ() {
		var ᐃ = 1;
		var ΔᐃⲆ = ΔⵠⵠⵠⲆ.time;
		ᐃΔ[Δ.ᐃⲆΔΔᐃ] && (Ⲇ.drawImage(ᐃΔ[Δ.ᐃⲆΔΔᐃ][ΔᐃⲆ][ΔⵠΔ], ΔⵠⵠΔ + 480, ᐃⲆΔⲆ + 190), Ⲇ.drawImage(ᐃΔ[Δ.ᐃⲆΔΔᐃ][ΔᐃⲆ][ᐃᐃᐃⵠ], ΔⵠⵠΔ + 180, ᐃⲆΔⲆ - 430), Ⲇ.drawImage(ᐃΔ[Δ.ᐃⲆΔΔᐃ][ΔᐃⲆ][ⵠⲆΔⲆ], ΔⵠⵠΔ - 855, ᐃⲆΔⲆ + ΔᐃΔΔΔ), Ⲇ.drawImage(ᐃΔ[Δ.ᐃⲆΔΔᐃ][ΔᐃⲆ][0], ΔⵠⵠΔ - 550, ᐃⲆΔⲆ - 300), Ⲇ.drawImage(ᐃΔ[Δ.ᐃⲆΔΔᐃ][ΔᐃⲆ][ⵠΔᐃᐃ], ΔⵠⵠΔ - 1020, ᐃⲆΔⲆ - 520));
		ᐃΔ[Δ.ΔⲆᐃⲆⲆ] && (Ⲇ.drawImage(ᐃΔ[Δ.ΔⲆᐃⲆⲆ][ΔᐃⲆ][ΔⵠΔ], ΔⵠⵠΔ - 80, ᐃⲆΔⲆ - 640), Ⲇ.drawImage(ᐃΔ[Δ.ΔⲆᐃⲆⲆ][ΔᐃⲆ][1], ΔⵠⵠΔ + 80, ᐃⲆΔⲆ + 490), Ⲇ.drawImage(ᐃΔ[Δ.ΔⲆᐃⲆⲆ][ΔᐃⲆ][ᐃⲆᐃⵠ], ΔⵠⵠΔ - 180, ᐃⲆΔⲆ - 700), Ⲇ.drawImage(ᐃΔ[Δ.ΔⲆᐃⲆⲆ][ΔᐃⲆ][ⵠⵠⲆⵠ], ΔⵠⵠΔ + 550, ᐃⲆΔⲆ + 100), Ⲇ.drawImage(ᐃΔ[Δ.ΔⲆᐃⲆⲆ][ΔᐃⲆ][Ⲇⵠᐃ], ΔⵠⵠΔ + 450, ᐃⲆΔⲆ + 300), Ⲇ.drawImage(ᐃΔ[Δ.ΔⲆᐃⲆⲆ][ΔᐃⲆ][ΔⵠΔ], ΔⵠⵠΔ + 780, ᐃⲆΔⲆ + 300), Ⲇ.drawImage(ᐃΔ[Δ.ΔⲆᐃⲆⲆ][ΔᐃⲆ][ΔⲆᐃΔ], ΔⵠⵠΔ + 980, ᐃⲆΔⲆ + 200), Ⲇ.drawImage(ᐃΔ[Δ.ΔⲆᐃⲆⲆ][ΔᐃⲆ][ⲆⵠΔⵠ], ΔⵠⵠΔ + 680, ᐃⲆΔⲆ + 600), Ⲇ.drawImage(ᐃΔ[Δ.ΔⲆᐃⲆⲆ][ΔᐃⲆ][2], ΔⵠⵠΔ - 380, ᐃⲆΔⲆ + 100), Ⲇ.drawImage(ᐃΔ[Δ.ΔⲆᐃⲆⲆ][ΔᐃⲆ][ΔΔⲆᐃ], ΔⵠⵠΔ + 280, ᐃⲆΔⲆ + 250));
		if (ᐃΔ[Δ.ⲆΔᐃⵠⲆ]) {
			Ⲇ.drawImage(ᐃΔ[Δ.ⲆΔᐃⵠⲆ][ΔᐃⲆ][ⵠΔᐃᐃ], ΔⵠⵠΔ - 590, ᐃⲆΔⲆ);
			Ⲇ.drawImage(ᐃΔ[Δ.ⲆΔᐃⵠⲆ][ΔᐃⲆ][0], ΔⵠⵠΔ + 120, ᐃⲆΔⲆ - 390);
			Ⲇ.drawImage(ᐃΔ[Δ.ⲆΔᐃⵠⲆ][ΔᐃⲆ][0], ΔⵠⵠΔ - 270, ᐃⲆΔⲆ + 340)
		}
		if (ᐃΔ[Δ.ΔᐃⲆⵠ]) {
			Ⲇ.drawImage(ᐃΔ[Δ.ΔᐃⲆⵠ][ΔᐃⲆ][ⵠⲆⲆⵠ], ΔⵠⵠΔ - 700, ᐃⲆΔⲆ - 600);
			Ⲇ.drawImage(ᐃΔ[Δ.ΔᐃⲆⵠ][ΔᐃⲆ][2], ΔⵠⵠΔ - 970, ᐃⲆΔⲆ - 250);
			Ⲇ.drawImage(ᐃΔ[Δ.ΔᐃⲆⵠ][ΔᐃⲆ][5], ΔⵠⵠΔ - 720, ᐃⲆΔⲆ - 200);
			Ⲇ.drawImage(ᐃΔ[Δ.ΔᐃⲆⵠ][ΔᐃⲆ][ᐃᐃΔⵠ], ΔⵠⵠΔ - 1020, ᐃⲆΔⲆ + 340);
			Ⲇ.drawImage(ᐃΔ[Δ.ΔᐃⲆⵠ][ΔᐃⲆ][ⵠⵠⵠ], ΔⵠⵠΔ - 1120, ᐃⲆΔⲆ - 0);
			Ⲇ.drawImage(ᐃΔ[Δ.ΔᐃⲆⵠ][ΔᐃⲆ][ⵠⲆΔⲆ], ΔⵠⵠΔ - 650, ᐃⲆΔⲆ - 330);
			Ⲇ.drawImage(ᐃΔ[Δ.ΔᐃⲆⵠ][ΔᐃⲆ][Ⲇⵠⵠⵠ], ΔⵠⵠΔ - 495, ᐃⲆΔⲆ - 90);
			Ⲇ.drawImage(ᐃΔ[Δ.ΔᐃⲆⵠ][ΔᐃⲆ][ⲆᐃᐃΔ], ΔⵠⵠΔ - 520, ᐃⲆΔⲆ + 340);
			Ⲇ.drawImage(ᐃΔ[Δ.ΔᐃⲆⵠ][ΔᐃⲆ][ⵠⵠⵠᐃ], ΔⵠⵠΔ + 830, ᐃⲆΔⲆ - 520)
		}
		if (ᐃΔ[Δ.ⵠΔᐃᐃⲆ]) {}
		if (ᐃⲆⵠ && ⲆⵠΔ) {
			var Ⲇⵠ = ᐃⲆⵠ.ⲆⲆΔ.x;
			var ᐃⵠⲆ = ᐃⲆⵠ.ⲆⲆΔ.y;
			ᐃⲆⵠ.ⲆⲆΔ.x = ΔⵠⵠΔ;
			ᐃⲆⵠ.ⲆⲆΔ.y = ᐃⲆΔⲆ;
			var ΔⵠⵠΔᐃΔⵠᐃΔ = ⲆⵠΔ.time;
			ⲆⵠΔ.time = ΔⵠⵠⵠⲆ.time;
			var ᐃⲆΔᐃᐃ = ΔⵠⵠⵠⲆ.items;
			ᐃⲆΔᐃᐃ[ⲆⵠΔⵠ].x = 400;
			ᐃⲆΔᐃᐃ[ⲆⲆΔⲆ].y = ΔᐃⲆΔⵠΔᐃ;
			ᐃⲆΔᐃᐃ[ⲆⲆⲆⲆ].ⵠᐃᐃⲆ(Δ.ᐃⵠⵠⲆᐃ);
			var ⲆⵠΔⲆ = ᐃⲆΔᐃᐃ[ⵠΔᐃ];
			ⲆⵠΔⲆ.x = -500;
			ⲆⵠΔⲆ.y = 100;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[ⵠᐃⲆ].x = ⲆⵠΔⲆ.x - 20.5;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[ᐃⵠⵠⲆ].y = ⲆⵠΔⲆ.y - 22.5;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[Δᐃⵠⵠ].x = ⲆⵠΔⲆ.x - 35.5;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[1].y = ⲆⵠΔⲆ.y + 7.5;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[ΔᐃΔᐃ].x = ⲆⵠΔⲆ.x + 7.5;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[2].y = ⲆⵠΔⲆ.y - 30;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[3].x = ⲆⵠΔⲆ.x + 22.5;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[ᐃΔⵠⲆ].y = ⲆⵠΔⲆ.y;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[ᐃᐃΔΔᐃ].x = ⲆⵠΔⲆ.x - 7.5;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[ⵠⵠᐃΔ].y = ⲆⵠΔⲆ.y + 14.5;
			for (var Ⲇᐃ = 0; ⲆⵠΔⲆ.info > Ⲇᐃ; Ⲇᐃ++) {
				ⲆⵠΔⲆ.ⲆⵠΔⲆ[Ⲇᐃ].ⵠᐃᐃⲆ(Δ.ᐃᐃⲆᐃⵠ)
			}
			var ⲆⵠΔⲆ = ᐃⲆΔᐃᐃ[3];
			ⲆⵠΔⲆ.x = 210;
			ⲆⵠΔⲆ.y = -290;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[0].x = ⲆⵠΔⲆ.x - 20.5;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[ⲆⵠⲆⲆ].y = ⲆⵠΔⲆ.y - 22.5;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[1].x = ⲆⵠΔⲆ.x - 35.5;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[ⵠᐃⵠΔ].y = ⲆⵠΔⲆ.y + 7.5;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[ⵠⵠⵠᐃ].x = ⲆⵠΔⲆ.x + 7.5;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[ΔΔⲆᐃ].y = ⲆⵠΔⲆ.y - 30;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[3].x = ⲆⵠΔⲆ.x + 22.5;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[3].y = ⲆⵠΔⲆ.y;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[4].x = ⲆⵠΔⲆ.x - 7.5;
			ⲆⵠΔⲆ.ⲆⵠΔⲆ[4].y = ⲆⵠΔⲆ.y + 14.5;
			for (var Ⲇᐃ = ᐃᐃᐃ; ⲆⵠΔⲆ.info > Ⲇᐃ; Ⲇᐃ++) {
				ⲆⵠΔⲆ.ⲆⵠΔⲆ[Ⲇᐃ].ⵠᐃᐃⲆ(Δ.ᐃᐃⲆᐃⵠ)
			}
			ᐃⲆΔᐃᐃ[ᐃⵠⵠⲆ].x = 450;
			ᐃⲆΔᐃᐃ[0].y = -100;
			ᐃⲆΔᐃᐃ[ΔΔᐃ].ⵠⲆᐃΔⲆ(Δ.ⵠⵠⲆⵠⵠⵠⲆ);
			ᐃⲆΔᐃᐃ[0].ΔⵠᐃⲆᐃ();
			ᐃⲆⵠ.ⲆⲆΔ.x = Ⲇⵠ;
			ᐃⲆⵠ.ⲆⲆΔ.y = ᐃⵠⲆ;
			ⲆⵠΔ.time = ΔⵠⵠΔᐃΔⵠᐃΔ
		}
	}

	function ΔⵠΔΔⲆΔⲆⵠΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 65;
		ΔⲆ.height = ᐃ * 131;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ⵠᐃⵠΔ;
		Ⲇ.translate(ⲆΔⵠⵠⵠ, 0);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(21.25 * ᐃ, ᐃ * 88.9375);
		Ⲇ.bezierCurveTo(ᐃ * 19.25, ᐃ * 57.9375, 19.25 * ᐃ, 57.9375 * ᐃ, 17.25 * ᐃ, 26.9375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 24.25, 20.9375 * ᐃ, 24.25 * ᐃ, ᐃ * 20.9375, ᐃ * 31.25, 14.9375 * ᐃ);
		Ⲇ.bezierCurveTo(32.75 * ᐃ, ᐃ * 54.4375, ᐃ * 32.75, 54.4375 * ᐃ, ᐃ * 34.25, ᐃ * 93.9375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 30.25, ᐃ * 5.9375);
		Ⲇ.bezierCurveTo(39.25 * ᐃ, 14.9375 * ᐃ, 39.25 * ᐃ, 14.9375 * ᐃ, 48.25 * ᐃ, 23.9375 * ᐃ);
		Ⲇ.bezierCurveTo(44.75 * ᐃ, ᐃ * 56.4375, ᐃ * 44.75, 56.4375 * ᐃ, ᐃ * 41.25, 88.9375 * ᐃ);
		Ⲇ.bezierCurveTo(36.25 * ᐃ, 88.9375 * ᐃ, ᐃ * 36.25, 88.9375 * ᐃ, ᐃ * 31.25, ᐃ * 88.9375);
		Ⲇ.bezierCurveTo(30.75 * ᐃ, ᐃ * 47.9375, ᐃ * 30.75, 47.9375 * ᐃ, ᐃ * 30.25, ᐃ * 6.9375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠⵠⲆⵠ], ᐃ * ᐃΔⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 7.25, 85.4375 * ᐃ);
		Ⲇ.bezierCurveTo(31.75 * ᐃ, ᐃ * 85.4375, ᐃ * 31.75, 85.4375 * ᐃ, 56.25 * ᐃ, ᐃ * 85.4375);
		Ⲇ.bezierCurveTo(51.25 * ᐃ, 91.9375 * ᐃ, 51.25 * ᐃ, ᐃ * 91.9375, ᐃ * 46.25, 98.4375 * ᐃ);
		Ⲇ.bezierCurveTo(30.25 * ᐃ, 98.4375 * ᐃ, ᐃ * 30.25, 98.4375 * ᐃ, ᐃ * 14.25, 98.4375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃⲆⲆΔΔ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 31.25, 108.9375 * ᐃ);
		ᐃΔⵠ(Ⲇ, -6 * ᐃ, -14.5 * ᐃ, ⵠᐃΔᐃᐃ * ᐃ, 29 * ᐃ, ᐃ * ⵠⲆⲆⵠΔ);
		Ⲇ.restore();
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(-3, ᐃᐃᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(21.25 * ᐃ, ᐃ * 88.9375);
		Ⲇ.bezierCurveTo(ᐃ * 19.25, 57.9375 * ᐃ, 19.25 * ᐃ, 57.9375 * ᐃ, ᐃ * 17.25, 26.9375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 24.25, ᐃ * 20.9375, ᐃ * 24.25, 20.9375 * ᐃ, ᐃ * 31.25, 14.9375 * ᐃ);
		Ⲇ.bezierCurveTo(32.75 * ᐃ, ᐃ * 54.4375, ᐃ * 32.75, 54.4375 * ᐃ, 34.25 * ᐃ, ᐃ * 93.9375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 30.25, 5.9375 * ᐃ);
		Ⲇ.bezierCurveTo(39.25 * ᐃ, ᐃ * 14.9375, 39.25 * ᐃ, ᐃ * 14.9375, ᐃ * 48.25, 23.9375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 44.75, 56.4375 * ᐃ, 44.75 * ᐃ, 56.4375 * ᐃ, ᐃ * 41.25, 88.9375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 36.25, ᐃ * 88.9375, 36.25 * ᐃ, ᐃ * 88.9375, ᐃ * 31.25, 88.9375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 30.75, ᐃ * 47.9375, ᐃ * 30.75, 47.9375 * ᐃ, ᐃ * 30.25, 6.9375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[1], ⵠⲆΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(7.25 * ᐃ, ᐃ * 85.4375);
		Ⲇ.bezierCurveTo(31.75 * ᐃ, 85.4375 * ᐃ, 31.75 * ᐃ, 85.4375 * ᐃ, ᐃ * 56.25, ᐃ * 85.4375);
		Ⲇ.bezierCurveTo(ᐃ * 51.25, ᐃ * 91.9375, 51.25 * ᐃ, 91.9375 * ᐃ, 46.25 * ᐃ, 98.4375 * ᐃ);
		Ⲇ.bezierCurveTo(30.25 * ᐃ, ᐃ * 98.4375, 30.25 * ᐃ, 98.4375 * ᐃ, 14.25 * ᐃ, 98.4375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ⲆⲆᐃᐃ], 4 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 31.25, ᐃ * 108.9375);
		ᐃΔⵠ(Ⲇ, ᐃ * -6, ᐃ * -14.5, ᐃ * 12, 29 * ᐃ, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔⲆΔΔ], Δⵠ[ⲆᐃⲆΔ], ᐃ * ᐃⲆⲆΔΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(31.25 * ᐃ, 73.4375 * ᐃ);
		Ⲇ.bezierCurveTo(33.25 * ᐃ, 77.9375 * ᐃ, ᐃ * 33.25, 77.9375 * ᐃ, 35.25 * ᐃ, ᐃ * 82.4375);
		Ⲇ.bezierCurveTo(33.25 * ᐃ, ᐃ * 87.4375, 33.25 * ᐃ, ᐃ * 87.4375, ᐃ * 31.25, 92.4375 * ᐃ);
		Ⲇ.bezierCurveTo(29.25 * ᐃ, 87.9375 * ᐃ, 29.25 * ᐃ, ᐃ * 87.9375, ᐃ * 27.25, ᐃ * 83.4375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[1], 2 * ᐃ);
		return ΔⲆ
	}

	function ⵠᐃⵠΔᐃᐃΔᐃΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 161;
		ΔⲆ.height = ᐃ * 190;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * ᐃⲆᐃᐃⲆ, ᐃ * 93);
		Ⲇ.bezierCurveTo(ᐃ * ⲆᐃⲆⲆⵠ, ᐃ * 95, 19 * ᐃ, ᐃ * 95, 21 * ᐃ, 95 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 9, ᐃ * 83, ᐃ * ᐃⲆΔⵠⵠᐃᐃ, 93 * ᐃ, ᐃ * 4, ᐃ * 76);
		Ⲇ.bezierCurveTo(11 * ᐃ, 75 * ᐃ, ᐃ * ᐃᐃⲆⵠⲆⲆᐃ, 75 * ᐃ, 18 * ᐃ, ᐃ * 75);
		Ⲇ.bezierCurveTo(ⵠⵠΔΔΔⲆΔ * ᐃ, 67 * ᐃ, 13 * ᐃ, 67 * ᐃ, ᐃ * ᐃᐃⵠᐃᐃ, 59 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * ⲆᐃⲆⲆᐃΔΔ, ᐃ * 59, ᐃ * 14, 59 * ᐃ, ᐃ * 21, 59 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 46, ᐃ * 35, 35 * ᐃ, 45 * ᐃ, ᐃ * 49, ᐃ * 31);
		Ⲇ.bezierCurveTo(ᐃ * 53, ᐃ * 24, ᐃ * 51, ᐃ * 21, ᐃ * 51, 16 * ᐃ);
		Ⲇ.bezierCurveTo(63 * ᐃ, ᐃ * 23, ᐃ * 63, ᐃ * 24, 69 * ᐃ, ᐃ * 29);
		Ⲇ.bezierCurveTo(ᐃ * 76, 7 * ᐃ, ᐃ * 75, 11 * ᐃ, 76 * ᐃ, ΔᐃΔᐃᐃ * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 81, ⵠᐃΔᐃᐃ * ᐃ, ᐃ * 84, 18 * ᐃ, 89 * ᐃ, 27 * ᐃ);
		Ⲇ.bezierCurveTo(95 * ᐃ, ᐃ * 25, ᐃ * 100, 16 * ᐃ, 105 * ᐃ, ᐃ * ⵠⵠⲆⵠᐃᐃᐃ);
		Ⲇ.bezierCurveTo(103 * ᐃ, ᐃ * 25, ᐃ * 111, 33 * ᐃ, 110 * ᐃ, ᐃ * 34);
		Ⲇ.bezierCurveTo(ᐃ * 123, ᐃ * 48, ᐃ * 123, ᐃ * 48, 136 * ᐃ, ᐃ * 62);
		Ⲇ.bezierCurveTo(ᐃ * 142, 60 * ᐃ, ᐃ * 147, ᐃ * 59, 155 * ᐃ, 58 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 147, ᐃ * 65, ᐃ * 147, ᐃ * 65, 139 * ᐃ, 73 * ᐃ);
		Ⲇ.bezierCurveTo(145 * ᐃ, ᐃ * 73, 145 * ᐃ, ᐃ * 73, ᐃ * 151, 73 * ᐃ);
		Ⲇ.bezierCurveTo(145 * ᐃ, ᐃ * 80, ᐃ * 145, 80 * ᐃ, ᐃ * 138, 87 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 144, ᐃ * 88, ᐃ * 144, 88 * ᐃ, ᐃ * 150, ᐃ * 89);
		Ⲇ.bezierCurveTo(125 * ᐃ, ᐃ * 103, 125 * ᐃ, 125 * ᐃ, 113 * ᐃ, 141 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 92, 178 * ᐃ, ᐃ * 85, ᐃ * 177, 76 * ᐃ, ᐃ * 178);
		Ⲇ.bezierCurveTo(64 * ᐃ, 179 * ᐃ, ᐃ * 51, ᐃ * 164, ᐃ * 35, ᐃ * 131);
		Ⲇ.bezierCurveTo(ᐃ * 18, ᐃ * 95, 13 * ᐃ, ᐃ * 99, ᐃ * ΔΔᐃⲆⲆ, ᐃ * 93);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ, Δⵠ, ᐃ * ⵠᐃΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 25, ᐃ * 63);
		Ⲇ.bezierCurveTo(ᐃ * 16, ᐃ * 58, ᐃ * 17, ᐃ * 51, ᐃ * 17, ᐃ * 33);
		Ⲇ.bezierCurveTo(ⵠⲆⵠᐃΔ * ᐃ, ᐃⲆⵠΔᐃ * ᐃ, 21 * ᐃ, ᐃⵠⲆⵠᐃ * ᐃ, ᐃ * 32, ᐃ * ᐃⵠⲆⲆⵠΔᐃ);
		Ⲇ.bezierCurveTo(63 * ᐃ, 31 * ᐃ, 66 * ᐃ, ᐃ * 45, ᐃ * 66, ᐃ * 54);
		ΔΔ(Ⲇ, Δⵠ, Δⵠ, ᐃ * ⲆΔᐃΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 91, 53 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 91, ᐃ * 40, 98 * ᐃ, 33 * ᐃ, 121 * ᐃ, ᐃ * ⵠⵠᐃΔᐃ);
		Ⲇ.bezierCurveTo(137 * ᐃ, ᐃ * ᐃᐃΔΔⵠ, ᐃ * 137, ᐃ * ⲆⵠᐃⵠΔᐃΔ, ᐃ * 139, 27 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 141, ᐃ * 49, 140 * ᐃ, 57 * ᐃ, ᐃ * 134, 64 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ, Δⵠ, 4 * ᐃ);
		return ΔⲆ
	}

	function ⵠᐃⵠⵠⵠᐃᐃ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 218 * ᐃ;
		ΔⲆ.height = ᐃ * 185;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 64, ᐃ * 53.135406494140625);
		Ⲇ.bezierCurveTo(ᐃ * 92, ᐃ * 17.135406494140625, 116 * ᐃ, ᐃ * 11.135406494140625, ᐃ * 158, 53.135406494140625 * ᐃ);
		Ⲇ.bezierCurveTo(178 * ᐃ, 74.13540649414062 * ᐃ, 181 * ᐃ, ᐃ * 81.13540649414062, ᐃ * 196, 101.13540649414062 * ᐃ);
		Ⲇ.bezierCurveTo(214 * ᐃ, 127.13540649414062 * ᐃ, 192 * ᐃ, ᐃ * 138.13540649414062, ᐃ * 173, 149.13540649414062 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 137, ᐃ * 166.13540649414062, 74 * ᐃ, ᐃ * 170.13540649414062, 36 * ᐃ, 141.13540649414062 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 13, 127.13540649414062 * ᐃ, ᐃ * ᐃᐃⲆΔⵠ, 119.13540649414062 * ᐃ, 30 * ᐃ, ᐃ * 103.13540649414062);
		Ⲇ.bezierCurveTo(ᐃ * 48, ᐃ * 71.13540649414062, 54 * ᐃ, 67.13540649414062 * ᐃ, 63 * ᐃ, 54.135406494140625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[1], ΔΔⵠᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(107 * ᐃ, ᐃ * 25.135406494140625);
		Ⲇ.bezierCurveTo(ᐃ * 62, ᐃ * 90.13540649414062, 54 * ᐃ, 129.13540649414062 * ᐃ, ᐃ * 53, ᐃ * 151.13540649414062);
		Ⲇ.bezierCurveTo(39.5 * ᐃ, ᐃ * 142.13540649414062, ᐃ * 39.5, 142.13540649414062 * ᐃ, 26 * ᐃ, 133.13540649414062 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 23.5, ᐃ * 128.63540649414062, 23.5 * ᐃ, ᐃ * 128.63540649414062, ᐃ * 21, 124.13540649414062 * ᐃ);
		Ⲇ.bezierCurveTo(22 * ᐃ, ᐃ * 113.13540649414062, ᐃ * 31, ᐃ * 99.13540649414062, ᐃ * 40, 88.13540649414062 * ᐃ);
		Ⲇ.bezierCurveTo(54.5 * ᐃ, 67.13540649414062 * ᐃ, 54.5 * ᐃ, 67.13540649414062 * ᐃ, 69 * ᐃ, 46.135406494140625 * ᐃ);
		Ⲇ.bezierCurveTo(80.5 * ᐃ, 36.635406494140625 * ᐃ, ᐃ * 80.5, ᐃ * 36.635406494140625, ᐃ * 92, ᐃ * 27.135406494140625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔΔΔ]);
		return ΔⲆ
	}

	function ⲆⲆΔⲆⵠⵠᐃⲆᐃ() {
		var ᐃ = Δⵠᐃ;
		var ΔᐃᐃᐃΔᐃΔⵠⲆ = (new Date).getTime();
		ⲆΔᐃⲆⲆΔⲆ();
		ⵠⲆᐃⵠΔᐃⵠⲆΔ();
		ᐃΔ[Δ.ᐃⲆⵠⵠΔⵠⲆ] = [];
		ᐃΔ[Δ.ᐃⲆⵠⵠΔⵠⲆ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ᐃⲆⵠⵠΔⵠⲆ][Δ.ⲆⲆⵠ] = [];
		for (var Ⲇᐃ = ⵠΔᐃⵠ; Δ.ᐃⲆⲆΔΔⵠΔ > Ⲇᐃ; Ⲇᐃ++) {
			ᐃΔ[Δ.ᐃⲆⵠⵠΔⵠⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⵠⲆⵠⵠΔⲆⲆ(ᐃ, ᐃᐃⵠΔ + Ⲇᐃ, "#59B8CE")));
			ᐃΔ[Δ.ᐃⲆⵠⵠΔⵠⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⵠⲆⵠⵠΔⲆⲆ(ᐃ, ⵠΔⲆΔΔ + Ⲇᐃ, "#90DDD9")))
		}
		ᐃΔ[Δ.ⲆΔⵠᐃΔⵠΔ] = [];
		ᐃΔ[Δ.ⲆΔⵠᐃΔⵠΔ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⲆΔⵠᐃΔⵠΔ][Δ.ⲆⲆⵠ] = [];
		for (var Ⲇᐃ = 0; Δ.ⲆΔΔⲆⲆⲆⲆ > Ⲇᐃ; Ⲇᐃ++) {
			ᐃΔ[Δ.ⲆΔⵠᐃΔⵠΔ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⵠⲆⵠⵠΔⲆⲆ(ᐃ, ᐃⵠⵠⵠᐃ + Ⲇᐃ, ⵠ[496])));
			ᐃΔ[Δ.ⲆΔⵠᐃΔⵠΔ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⵠⲆⵠⵠΔⲆⲆ(ᐃ, 4 + Ⲇᐃ, ⵠ[496])))
		}
		ᐃΔ[Δ.ΔΔᐃΔΔᐃΔ] = [];
		ᐃΔ[Δ.ΔΔᐃΔΔᐃΔ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ΔΔᐃΔΔᐃΔ][Δ.ⲆⲆⵠ] = [];
		for (var Ⲇᐃ = 0; Ⲇᐃ < Δ.ⲆΔΔⲆⲆⲆⲆ; Ⲇᐃ++) {
			ᐃΔ[Δ.ΔΔᐃΔΔᐃΔ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⵠⲆⵠⵠΔⲆⲆ(ᐃ, 6 + Ⲇᐃ, "#DDCD8A")));
			ᐃΔ[Δ.ΔΔᐃΔΔᐃΔ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⵠⲆⵠⵠΔⲆⲆ(ᐃ, ⲆΔⵠᐃⵠ + Ⲇᐃ, "#155E57")))
		}
		ᐃΔ[Δ.ⵠⵠᐃⲆⵠΔᐃ] = [];
		ᐃΔ[Δ.ⵠⵠᐃⲆⵠΔᐃ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⵠⵠᐃⲆⵠΔᐃ][Δ.ⲆⲆⵠ] = [];
		for (var Ⲇᐃ = ΔⲆⲆ; Δ.ᐃᐃⵠⲆΔᐃⵠ > Ⲇᐃ; Ⲇᐃ++) {
			ᐃΔ[Δ.ⵠⵠᐃⲆⵠΔᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⵠⲆⵠⵠΔⲆⲆ(ᐃ, 4 + Ⲇᐃ, "#353326")));
			ᐃΔ[Δ.ⵠⵠᐃⲆⵠΔᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⵠⲆⵠⵠΔⲆⲆ(ᐃ, ⲆΔᐃΔⵠ + Ⲇᐃ, "#1D2526")))
		}
		ᐃΔ[Δ.ⲆᐃᐃΔᐃ] = [];
		ᐃΔ[Δ.ⲆᐃᐃΔᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠΔⵠⲆΔ(ᐃ * 1.5, true, ["#ee71a9"]));
		ᐃΔ[Δ.ⲆᐃᐃΔᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠΔⵠⲆΔ(1.5 * ᐃ, true, ["#ee71a9"]));
		ᐃΔ[Δ.ΔᐃᐃΔᐃ] = [ᐃΔ[Δ.ⲆᐃᐃΔᐃ]];
		ᐃΔ[Δ.ΔᐃᐃΔᐃ][ΔⵠⲆⲆ] = [];
		ᐃΔ[Δ.ΔᐃᐃΔᐃ][2] = [];
		ᐃΔ[Δ.ΔᐃᐃΔᐃ][ⵠⵠΔⵠ] = [];
		ᐃΔ[Δ.ΔᐃᐃΔᐃ][4] = [];
		ᐃΔ[Δ.ΔᐃᐃΔᐃ][ΔⲆᐃⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠΔⵠⲆΔ(ᐃ * 1.5, true, ["#e2d63b"]));
		ᐃΔ[Δ.ΔᐃᐃΔᐃ][1][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠΔⵠⲆΔ(ᐃ * 1.5, ᐃΔⲆΔᐃ, ["#e2d63b"]));
		ᐃΔ[Δ.ΔᐃᐃΔᐃ][ⲆⲆΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠΔⵠⲆΔ(ᐃ * 1.5, ⵠΔⲆⵠⲆ, ["#309cbd"]));
		ᐃΔ[Δ.ΔᐃᐃΔᐃ][ⲆⲆⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠΔⵠⲆΔ(ᐃ * 1.5, ⲆⵠΔᐃⵠ, ["#309cbd"]));
		ᐃΔ[Δ.ΔᐃᐃΔᐃ][ΔⲆⵠᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠΔⵠⲆΔ(1.5 * ᐃ, ᐃΔⲆΔᐃ, ["#cd232d"]));
		ᐃΔ[Δ.ΔᐃᐃΔᐃ][3][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠΔⵠⲆΔ(1.5 * ᐃ, true, ["#cd232d"]));
		ᐃΔ[Δ.ΔᐃᐃΔᐃ][ⵠⲆΔⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠΔⵠⲆΔ(ᐃ * 1.5, ⵠⲆⵠⵠΔ, ["#42b672"]));
		ᐃΔ[Δ.ΔᐃᐃΔᐃ][4][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠΔⵠⲆΔ(ᐃ * 1.5, ΔᐃΔΔᐃ, ["#42b672"]));
		var ⵠⲆⵠᐃⲆⵠᐃΔⵠ = ΔⵠΔⵠ.ⲆⵠᐃⵠΔᐃᐃ("cti", ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[305]][ⲆᐃⲆⵠΔΔⲆ[144]]);
		if (ⵠⲆⵠᐃⲆⵠᐃΔⵠ) document[ⲆᐃⲆⵠΔΔⲆ[185]]("version")[ⲆᐃⲆⵠΔΔⲆ[112]] += "[CTI]";
		else ᐃⵠᐃ = function(ⵠᐃⲆᐃ) {
			ⵠᐃⲆᐃ.loaded = 1;
			return ⵠᐃⲆᐃ
		};
		ᐃΔ[Δ.ⵠΔᐃⵠⲆΔⲆ] = ᐃⵠᐃ(ᐃⵠⵠΔΔⵠΔⵠⲆ());
		ᐃΔ[Δ.ΔⲆᐃⲆⲆ] = [];
		ᐃΔ[Δ.ΔⲆᐃⲆⲆ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ΔⲆᐃⲆⲆ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ΔⲆᐃⲆⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔᐃΔΔᐃⲆⵠ(1.1 * ᐃ, ΔⵠΔⲆⵠ, [ⵠ[387], "#c3d1cb", ⵠ[327]])));
		ᐃΔ[Δ.ΔⲆᐃⲆⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔᐃΔΔᐃⲆⵠ(ᐃ * .9, false, [ⵠ[387], "#c3d1cb", ⵠ[327]])));
		ᐃΔ[Δ.ΔⲆᐃⲆⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔᐃΔΔᐃⲆⵠ(ᐃ * .6, false, [ⵠ[387], "#c3d1cb", ⵠ[327]])));
		ᐃΔ[Δ.ΔⲆᐃⲆⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔᐃΔΔᐃⲆⵠ(ᐃ * 1.1, ᐃⵠⲆⲆᐃ, [ⵠ[187], "#3c8e88", "#40a39b"])));
		ᐃΔ[Δ.ΔⲆᐃⲆⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔᐃΔΔᐃⲆⵠ(.9 * ᐃ, Ⲇⵠᐃᐃᐃ, [ⵠ[187], "#3c8e88", "#40a39b"])));
		ᐃΔ[Δ.ΔⲆᐃⲆⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔᐃΔΔᐃⲆⵠ(ᐃ * .6, false, [ⵠ[187], "#3c8e88", "#40a39b"])));
		ᐃΔ[Δ.ᐃΔᐃⲆ] = [];
		ᐃΔ[Δ.ᐃΔᐃⲆ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ᐃΔᐃⲆ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ᐃΔᐃⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⲆΔᐃⲆⲆ(1.5 * ᐃ, ᐃⲆⲆᐃᐃ, [ⵠ[540], ⵠ[515], ⵠ[188]])));
		ᐃΔ[Δ.ᐃΔᐃⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⲆΔᐃⲆⲆ(1.3 * ᐃ, ⲆᐃᐃΔΔ, [ⵠ[540], ⵠ[515], ⵠ[188]])));
		ᐃΔ[Δ.ᐃΔᐃⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⲆΔᐃⲆⲆ(ᐃ * 1.1, false, [ⵠ[540], ⵠ[515], ⵠ[188]])));
		ᐃΔ[Δ.ᐃΔᐃⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⲆΔᐃⲆⲆ(1.5 * ᐃ, false, [ⵠ[250], "#1b4444", "#16605a"])));
		ᐃΔ[Δ.ᐃΔᐃⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⲆΔᐃⲆⲆ(ᐃ * 1.3, false, [ⵠ[250], "#1b4444", "#16605a"])));
		ᐃΔ[Δ.ᐃΔᐃⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⲆΔᐃⲆⲆ(ᐃ * 1.1, false, [ⵠ[250], "#1b4444", "#16605a"])));
		ᐃΔ[Δ.ⲆᐃⲆᐃ] = [];
		ᐃΔ[Δ.ⲆᐃⲆᐃ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⲆᐃⲆᐃ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ⲆᐃⲆᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⵠⲆᐃⵠᐃ(1.1 * ᐃ, ΔⲆΔᐃΔ, [ⵠ[137], ⵠ[125], ⵠ[4]])));
		ᐃΔ[Δ.ⲆᐃⲆᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⵠⲆᐃⵠᐃ(ᐃ * .9, ΔⵠΔⵠⵠ, [ⵠ[137], ⵠ[125], ⵠ[ⵠᐃΔΔ]])));
		ᐃΔ[Δ.ⲆᐃⲆᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⵠⲆᐃⵠᐃ(ᐃ * .7, ΔⵠΔⵠⵠ, [ⵠ[137], ⵠ[125], ⵠ[4]])));
		ᐃΔ[Δ.ⲆᐃⲆᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⵠⲆᐃⵠᐃ(ᐃ * 1.1, false, [ⵠ[250], ⵠ[164], "#57bcb5"])));
		ᐃΔ[Δ.ⲆᐃⲆᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⵠⲆᐃⵠᐃ(ᐃ * .9, false, [ⵠ[250], ⵠ[164], "#57bcb5"])));
		ᐃΔ[Δ.ⲆᐃⲆᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⵠⲆᐃⵠᐃ(.7 * ᐃ, ᐃⲆⲆᐃᐃ, [ⵠ[250], ⵠ[164], "#57bcb5"])));
		ᐃΔ[Δ.ⵠΔᐃΔⵠ] = [];
		ᐃΔ[Δ.ⵠΔᐃΔⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⲆᐃΔⵠᐃᐃ;
		ᐃΔ[Δ.ⵠΔᐃΔⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆⵠΔᐃⲆⵠ;
		ᐃΔ[Δ.ⲆΔΔΔᐃ] = [];
		ᐃΔ[Δ.ⲆΔΔΔᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⵠΔᐃⲆΔᐃ(ᐃ * .6, [ⵠ[254]]));
		ᐃΔ[Δ.ⲆΔΔΔᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⵠΔᐃⲆΔᐃ(.6 * ᐃ, [ⵠ[250]]));
		ᐃΔ[Δ.Ⲇⵠᐃⵠⵠ] = [];
		ᐃΔ[Δ.Ⲇⵠᐃⵠⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠᐃᐃᐃⵠⵠᐃ(.6 * ᐃ, [ⵠ[79], ⵠ[38]]));
		ᐃΔ[Δ.Ⲇⵠᐃⵠⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠᐃᐃᐃⵠⵠᐃ(.6 * ᐃ, ["#1b1e30", "#161921"]));
		ᐃΔ[Δ.ⵠΔᐃⲆᐃⲆⲆ] = [];
		ᐃΔ[Δ.ⵠΔᐃⲆᐃⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⵠᐃΔᐃΔᐃ(.6 * ᐃ, true, [ⵠ[254], "#759e6e", "#55604b", "#7d7252", "#575043"]));
		ᐃΔ[Δ.ⵠΔᐃⲆᐃⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⵠᐃΔᐃΔᐃ(ᐃ * .6, ᐃᐃΔⲆⵠ, [ⵠ[250], "#11635e", "#02373e", "#0b524d", "#07423f"]));
		ᐃΔ[Δ.ᐃΔᐃⲆᐃⲆⲆ] = [];
		ᐃΔ[Δ.ᐃΔᐃⲆᐃⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔᐃⲆⲆᐃⵠ(ᐃ * .6, true, [ⵠ[254], "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", ⵠ[100]]));
		ᐃΔ[Δ.ᐃΔᐃⲆᐃⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔᐃⲆⲆᐃⵠ(ᐃ * .6, true, [ⵠ[250], "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", ⵠ[100]]));
		ᐃΔ[Δ.ⵠⵠⲆⵠⵠΔΔ] = [];
		ᐃΔ[Δ.ⵠⵠⲆⵠⵠΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠΔΔⵠⲆⵠΔ(.4 * ᐃ, [ⵠ[254], "#759e6e", "#55604b"]));
		ᐃΔ[Δ.ⵠⵠⲆⵠⵠΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠΔΔⵠⲆⵠΔ(.4 * ᐃ, [ⵠ[250], "#11635e", "#02373e"]));
		ᐃΔ[Δ.ⵠΔⲆⲆⲆⵠⲆ] = ᐃⵠᐃ(ΔⲆⵠⲆⲆΔΔ(.6 * ᐃ, [ⵠ[370]]));
		ᐃΔ[Δ.ⲆᐃⵠΔΔⲆΔ] = ᐃⵠᐃ(ΔⲆⵠⲆⲆΔΔ(ᐃ * .6, ["#DBE71C"]));
		ᐃΔ[Δ.ΔⲆΔΔΔᐃⵠ] = ᐃⵠᐃ(ΔⲆⵠⲆⲆΔΔ(.6 * ᐃ, ["#00BB00"]));
		ᐃΔ[Δ.ΔᐃⲆⵠ] = [];
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ].push(ΔᐃΔᐃⵠ(ᐃ * 1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], false, ⵠⵠⲆⵠ));
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ].push(ΔᐃΔᐃⵠ(ᐃ * 1.1, [ⵠ[292], "#0f9862", "#0b8750", "#26ab6e"], ⵠΔΔⵠᐃ, 0));
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ].push(ΔᐃΔᐃⵠ(.9 * ᐃ, [ⵠ[292], "#0e7d4c", "#258a4d", "#248c4d"], false, Ⲇᐃⵠ));
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ].push(ΔᐃΔᐃⵠ(.9 * ᐃ, [ⵠ[292], ⵠ[272], "#1f7b43", "#1f7b43"], ⵠⲆΔᐃΔ, ⵠⲆΔ));
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ].push(ΔᐃΔᐃⵠ(.7 * ᐃ, [ⵠ[292], "#124c34", "#0E3D26", "#155136"], ᐃΔⵠᐃⲆ, 0));
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ].push(ΔᐃΔᐃⵠ(ᐃ * .7, [ⵠ[292], "#124c34", "#0E3D26", "#155136"], true, 0));
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ].push(ΔᐃΔᐃⵠ(1.1 * ᐃ, [ⵠ[250], ⵠ[61], ⵠ[517], ⵠ[542]], ΔⵠΔⵠⵠ, 0));
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ].push(ΔᐃΔᐃⵠ(1.1 * ᐃ, [ⵠ[250], ⵠ[61], ⵠ[517], ⵠ[542]], true, 0));
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ].push(ΔᐃΔᐃⵠ(ᐃ * .9, [ⵠ[250], "#0b3534", "#144443", "#174240"], ΔⵠⵠᐃΔ, ⲆⲆⵠⲆ));
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ].push(ΔᐃΔᐃⵠ(.9 * ᐃ, [ⵠ[250], "#0b3534", "#144443", "#174240"], true, Δⵠⵠⵠ));
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ].push(ΔᐃΔᐃⵠ(.7 * ᐃ, [ⵠ[250], "#082b1f", "#073328", "#073327", "#16695f"], ᐃΔⵠᐃⲆ, ⵠⵠⵠ));
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ].push(ΔᐃΔᐃⵠ(ᐃ * .7, [ⵠ[250], "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, ⵠΔᐃᐃ));
		ᐃΔ[Δ.ΔΔⲆΔᐃ] = [];
		ᐃΔ[Δ.ΔΔⲆΔᐃ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ΔΔⲆΔᐃ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ΔΔⲆΔᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔΔΔⵠⲆᐃⲆ(ⲆΔΔΔⲆΔⲆ(ᐃ * 1.1, [ⵠ[292], ⵠ[539], ⵠ[86], ⵠ[272], "#08562e", ⵠ[478]], false), ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][0])));
		ᐃΔ[Δ.ΔΔⲆΔᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔΔΔⵠⲆᐃⲆ(ⲆΔΔΔⲆΔⲆ(ᐃ * 1.1, [ⵠ[292], ⵠ[539], ⵠ[86], ⵠ[272], "#08562e", ⵠ[478]], ΔᐃⲆⵠΔ), ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][Ⲇⵠᐃ])));
		ᐃΔ[Δ.ΔΔⲆΔᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔΔΔⵠⲆᐃⲆ(ⲆΔΔΔⲆΔⲆ(ᐃ * 1.1, [ⵠ[250], ⵠ[419], ⵠ[212], "#0a3333", ⵠ[148], ⵠ[148]], ΔⲆΔᐃᐃ), ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][ᐃᐃⲆ])));
		ᐃΔ[Δ.ΔΔⲆΔᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔΔΔⵠⲆᐃⲆ(ⲆΔΔΔⲆΔⲆ(ᐃ * 1.1, [ⵠ[250], ⵠ[419], ⵠ[212], "#0a3333", ⵠ[148], ⵠ[148]], true), ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][ΔᐃⵠⲆ])));
		ᐃΔ[Δ.ΔΔⲆΔᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔΔΔⵠⲆᐃⲆ(ⲆΔΔΔⲆΔⲆ(ᐃ * .9, [ⵠ[292], ⵠ[539], ⵠ[86], ⵠ[272], ⵠ[478], ⵠ[478]], false), ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][2])));
		ᐃΔ[Δ.ΔΔⲆΔᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔΔΔⵠⲆᐃⲆ(ⲆΔΔΔⲆΔⲆ(ᐃ * .9, [ⵠ[292], ⵠ[539], ⵠ[86], ⵠ[272], ⵠ[478], ⵠ[478]], ⵠΔⲆⵠⲆ), ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][2])));
		ᐃΔ[Δ.ΔΔⲆΔᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔΔΔⵠⲆᐃⲆ(ⲆΔΔΔⲆΔⲆ(ᐃ * .9, [ⵠ[250], ⵠ[419], ⵠ[212], "#082b29", ⵠ[87], ⵠ[87]], ΔⲆΔⵠΔ), ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][2])));
		ᐃΔ[Δ.ΔΔⲆΔᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔΔΔⵠⲆᐃⲆ(ⲆΔΔΔⲆΔⲆ(.9 * ᐃ, [ⵠ[250], ⵠ[419], ⵠ[212], "#082b29", ⵠ[87], ⵠ[87]], ⲆⵠΔᐃⵠ), ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][ⵠΔΔⲆᐃ])));
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][ΔΔᐃᐃⵠ] = ᐃⵠᐃ(ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][5]);
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][4] = ᐃⵠᐃ(ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][4]);
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][ᐃⲆᐃΔ] = ᐃⵠᐃ(ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][3]);
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][2] = ᐃⵠᐃ(ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][2]);
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][1] = ᐃⵠᐃ(ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][Δⵠᐃ]);
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][0] = ᐃⵠᐃ(ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⵠΔⵠ][ᐃᐃⲆ]);
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][ⲆᐃⲆΔ] = ᐃⵠᐃ(ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][ᐃΔΔⲆⵠ]);
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][ⵠⲆΔⵠ] = ᐃⵠᐃ(ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][ᐃΔⵠⵠ]);
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][ⵠⵠΔⵠ] = ᐃⵠᐃ(ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][ΔⲆΔⵠ]);
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][2] = ᐃⵠᐃ(ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][ⲆⲆΔⲆ]);
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][1] = ᐃⵠᐃ(ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][ΔΔⵠΔ]);
		ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][0] = ᐃⵠᐃ(ᐃΔ[Δ.ΔᐃⲆⵠ][Δ.ⲆⲆⵠ][0]);
		ᐃΔ[Δ.ΔΔⵠᐃⲆ] = [];
		ᐃΔ[Δ.ΔΔⵠᐃⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(4, ⲆΔΔᐃᐃ(.75 * ᐃ, ⵠΔⲆⵠⲆ, [ⵠ[254], ⵠ[91], ⵠ[254], ⵠ[539], ⵠ[86], ⵠ[539], ⵠ[86]])));
		ᐃΔ[Δ.ΔΔⵠᐃⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(4, ⲆΔΔᐃᐃ(.75 * ᐃ, true, [ⵠ[250], ⵠ[91], ⵠ[250], ⵠ[ᐃΔⲆΔΔⲆᐃ], ⵠ[422], ⵠ[ⲆΔⲆⲆⲆ], ⵠ[422]])));
		ᐃΔ[Δ.ΔΔΔΔΔ] = [];
		ᐃΔ[Δ.ΔΔΔΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ᐃᐃΔΔᐃ, ⲆΔΔᐃᐃ(.75 * ᐃ, true, [ⵠ[254], ⵠ[91], ⵠ[254], ⵠ[539], ⵠ[86], ⵠ[369], ⵠ[463]])));
		ᐃΔ[Δ.ΔΔΔΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(4, ⲆΔΔᐃᐃ(.75 * ᐃ, true, [ⵠ[250], ⵠ[91], ⵠ[250], ⵠ[ⲆⲆⲆᐃΔ], ⵠ[422], ⵠ[23], ⵠ[443]])));
		ᐃΔ[Δ.ⲆⲆⵠΔΔ] = [];
		ᐃΔ[Δ.ⲆⲆⵠΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(4, ⲆΔΔᐃᐃ(ᐃ * .75, ᐃᐃᐃⲆΔ, [ⵠ[254], ⵠ[91], ⵠ[254], ⵠ[345], ⵠ[318], ⵠ[411], ⵠ[479]])));
		ᐃΔ[Δ.ⲆⲆⵠΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(4, ⲆΔΔᐃᐃ(.75 * ᐃ, ⲆⵠΔᐃⵠ, [ⵠ[250], ⵠ[91], ⵠ[250], ⵠ[360], ⵠ[360], ⵠ[197], ⵠ[222]])));
		ᐃΔ[Δ.ⲆⵠⵠΔΔ] = [];
		ᐃΔ[Δ.ⲆⵠⵠΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ᐃΔᐃΔ, ⲆΔΔᐃᐃ(ᐃ * .75, ᐃᐃΔⲆⵠ, [ⵠ[254], ⵠ[91], ⵠ[254], ⵠ[376], ⵠ[293], ⵠ[192], ⵠ[133]])));
		ᐃΔ[Δ.ⲆⵠⵠΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(4, ⲆΔΔᐃᐃ(ᐃ * .75, ⵠΔⲆⵠⲆ, [ⵠ[250], ⵠ[91], ⵠ[250], ⵠ[138], ⵠ[326], ⵠ[182], ⵠ[26]])));
		ᐃΔ[Δ.ⲆⵠⲆᐃΔ] = [];
		ᐃΔ[Δ.ⲆⵠⲆᐃΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ᐃΔᐃΔ, ⲆΔΔᐃᐃ(.75 * ᐃ, true, [ⵠ[254], ⵠ[91], ⵠ[254], ⵠ[376], ⵠ[293], ⵠ[10], ⵠ[121]])));
		ᐃΔ[Δ.ⲆⵠⲆᐃΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ᐃᐃⵠΔ, ⲆΔΔᐃᐃ(.75 * ᐃ, true, [ⵠ[250], ⵠ[91], ⵠ[250], ⵠ[138], ⵠ[326], ⵠ[337], ⵠ[579]])));
		ᐃΔ[Δ.ⲆΔⵠⵠᐃ] = [];
		ᐃΔ[Δ.ⲆΔⵠⵠᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ΔᐃᐃⵠⲆⲆⲆ(ᐃ * .17, true, [ⵠ[254], "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", ⵠ[363], "#d6d1d1"])));
		ᐃΔ[Δ.ⲆΔⵠⵠᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ᐃⵠΔᐃ, ΔᐃᐃⵠⲆⲆⲆ(ᐃ * .17, ᐃᐃΔⲆⵠ, [ⵠ[254], ⵠ[16], ⵠ[422], "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
		ᐃΔ[Δ.ΔⲆⲆⲆᐃ] = [];
		ᐃΔ[Δ.ΔⲆⲆⲆᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ⲆᐃⵠᐃᐃⲆΔ(ᐃ * .32, ⵠⲆⵠⵠᐃ, [ⵠ[254], ⵠ[ᐃⵠⵠⲆ], ⵠ[463], "#eb2933", "#57b74e", "#42a54d", ⵠ[213], ⵠ[120]])));
		ᐃΔ[Δ.ΔⲆⲆⲆᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(Δⵠⵠᐃ, ⲆᐃⵠᐃᐃⲆΔ(ᐃ * .42, true, [ⵠ[254], ⵠ[23], ⵠ[443], ⵠ[ΔᐃᐃΔΔ], ⵠ[422]])));
		ᐃΔ[Δ.ΔᐃⲆΔⲆ] = [];
		ᐃΔ[Δ.ΔᐃⲆΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ΔⵠⲆΔⵠⲆⵠ(.4 * ᐃ, ⵠⲆΔᐃΔ, [ⵠ[254], ⵠ[185], "#493425", ⵠ[331], "#5e4530", "#473221", "#745840"])));
		ᐃΔ[Δ.ΔᐃⲆΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ΔⵠⲆΔⵠⲆⵠ(.4 * ᐃ, true, [ⵠ[254], "#0b3d3a", "#092b2a", "#144642", "#082927", ⵠ[489]])));
		ᐃΔ[Δ.ⵠΔᐃᐃⵠ] = [];
		ᐃΔ[Δ.ⵠΔᐃᐃⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ⵠᐃⵠⲆᐃⲆⵠ(ᐃ * .4, ⵠⲆⵠⵠᐃ, [ⵠ[254], ⵠ[369], ⵠ[463], "#b1afaf", "#493d36", "#332b28"])));
		ᐃΔ[Δ.ⵠΔᐃᐃⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ᐃⵠΔⵠ, ⵠᐃⵠⲆᐃⲆⵠ(ᐃ * .4, ⵠΔΔⵠᐃ, [ⵠ[254], ⵠ[23], ⵠ[443], "#5d757e", ⵠ[16], ⵠ[422]])));
		ᐃΔ[Δ.ΔᐃⲆⵠⲆ] = [];
		ᐃΔ[Δ.ΔᐃⲆⵠⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ⲆⵠᐃⲆᐃᐃⵠ(ᐃ * .4, ⲆⵠΔᐃⵠ, [ⵠ[254], ⵠ[411], ⵠ[479], ⵠ[411], ⵠ[345], ⵠ[318]])));
		ᐃΔ[Δ.ΔᐃⲆⵠⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ⵠⵠΔⵠ, ⲆⵠᐃⲆᐃᐃⵠ(.4 * ᐃ, true, [ⵠ[254], ⵠ[197], ⵠ[222], "#54bf96", ⵠ[360], ⵠ[409]])));
		ᐃΔ[Δ.ⵠΔΔⲆⲆ] = [];
		ᐃΔ[Δ.ⵠΔΔⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ᐃⲆᐃΔ, ᐃᐃΔΔⲆⲆᐃ(.4 * ᐃ, ΔⲆΔⵠⲆ, [ⵠ[254], "#6ad9e8", ⵠ[133], "#95e9f5", "#022320", "#011e19", ⵠ[100]])));
		ᐃΔ[Δ.ⵠΔΔⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ΔⲆΔⵠ, ᐃᐃΔΔⲆⲆᐃ(.4 * ᐃ, true, [ⵠ[254], ⵠ[182], ⵠ[26], "#93eaf1", ⵠ[138], ⵠ[326]])));
		ᐃΔ[Δ.ᐃⵠⲆⲆΔ] = [];
		ᐃΔ[Δ.ᐃⵠⲆⲆΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ⲆΔᐃⲆ, ⵠΔΔⲆΔⵠΔ(ᐃ * .4, true, [ⵠ[254], ⵠ[10], ⵠ[121], "#cc81e7", ⵠ[376], ⵠ[293], ⵠ[100]])));
		ᐃΔ[Δ.ᐃⵠⲆⲆΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ⵠΔΔⲆΔⵠΔ(ᐃ * .4, ⵠⲆⵠⵠΔ, [ⵠ[254], ⵠ[337], ⵠ[579], "#966de6", ⵠ[138], ⵠ[326]])));
		ᐃΔ[Δ.ᐃⲆΔΔᐃ] = [];
		ᐃΔ[Δ.ᐃⲆΔΔᐃ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ᐃⲆΔΔᐃ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ᐃⲆΔΔᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ᐃᐃⲆⲆΔⲆΔ(.9 * ᐃ, false, ["#0d4f35"], ⵠⲆᐃ)));
		ᐃΔ[Δ.ᐃⲆΔΔᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ᐃᐃⲆⲆΔⲆΔ(ᐃ * .9, ⲆΔⲆᐃΔ, ["#0d4f35"], ⲆΔΔΔ)));
		ᐃΔ[Δ.ᐃⲆΔΔᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ᐃᐃⲆⲆΔⲆΔ(ᐃ * .9, ΔΔᐃⵠᐃ, ["#0d4f35"], ⵠⵠⵠᐃ)));
		ᐃΔ[Δ.ᐃⲆΔΔᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ᐃᐃⲆⲆΔⲆΔ(.9 * ᐃ, false, ["#053339"], ⵠⲆΔ)));
		ᐃΔ[Δ.ᐃⲆΔΔᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ᐃᐃⲆⲆΔⲆΔ(.9 * ᐃ, ⵠᐃⵠⲆⲆ, ["#053339"], 1)));
		ᐃΔ[Δ.ᐃⲆΔΔᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ᐃᐃⲆⲆΔⲆΔ(ᐃ * .9, false, ["#053339"], 2)));
		ᐃΔ[Δ.ᐃⲆΔΔᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ᐃⵠᐃΔΔΔᐃ(.8 * ᐃ, ["#241301", "#ba6b0e", "#6d3f04"])));
		ᐃΔ[Δ.ᐃⲆΔΔᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ᐃⵠᐃΔΔΔᐃ(.8 * ᐃ, ["#292002", "#ba930e", "#6d5704"])));
		ᐃΔ[Δ.ᐃⲆΔΔᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ᐃⵠᐃΔΔΔᐃ(.9 * ᐃ, ["#052919", "#0a4738", "#06321f"])));
		ᐃΔ[Δ.ᐃⲆΔΔᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ᐃⵠᐃΔΔΔᐃ(.8 * ᐃ, ["#052918", "#08491c", "#063417"])));
		ᐃΔ[Δ.ΔᐃΔⲆⲆ] = [];
		ᐃΔ[Δ.ΔᐃΔⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(Math.PI / 2, ΔᐃΔⲆΔᐃΔ(.25 * ᐃ, ΔᐃΔΔᐃ, [ⵠ[254], ⵠ[357], ⵠ[132], ⵠ[53]])));
		ᐃΔ[Δ.ΔᐃΔⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(Math.PI / ΔᐃⵠΔ, ΔᐃΔⲆΔᐃΔ(.25 * ᐃ, true, [ⵠ[250], ⵠ[130], ⵠ[333], ⵠ[556]])));
		ᐃΔ[Δ.ᐃⵠⲆⵠΔⲆⵠ] = [];
		ᐃΔ[Δ.ᐃⵠⲆⵠΔⲆⵠ].push(ᐃⵠᐃ(ⲆⵠⲆᐃⵠⲆⲆ(ᐃ * .25, [ⵠ[357], ⵠ[132], ⵠ[53]], 0)));
		ᐃΔ[Δ.ᐃⵠⲆⵠΔⲆⵠ].push(ᐃⵠᐃ(ⲆⵠⲆᐃⵠⲆⲆ(ᐃ * .25, ["#4f371e", "#624d30", "#5e472c", ⵠ[ΔⵠᐃᐃΔⲆᐃ]], 1)));
		ᐃΔ[Δ.ᐃⵠⲆⵠΔⲆⵠ].push(ᐃⵠᐃ(ⲆⵠⲆᐃⵠⲆⲆ(.25 * ᐃ, ["#382715", "#4e3c25", "#473620", ⵠ[238]], 2)));
		ᐃΔ[Δ.Ⲇⵠᐃᐃⵠ] = [];
		ᐃΔ[Δ.Ⲇⵠᐃᐃⵠ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.Ⲇⵠᐃᐃⵠ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.Ⲇⵠᐃᐃⵠ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔᐃⲆᐃ(Math.PI / 2, ⵠⵠΔⵠⲆᐃⵠ(.25 * ᐃ, ᐃΔΔⵠⲆ, [ⵠ[254], ⵠ[357], ⵠ[132], ⵠ[53], ⵠ[430]], ΔᐃΔⲆ))));
		ᐃΔ[Δ.Ⲇⵠᐃᐃⵠ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔᐃⲆᐃ(Math.PI / ᐃᐃⲆⲆ, ⵠⵠΔⵠⲆᐃⵠ(ᐃ * .25, false, [ⵠ[250], ⵠ[130], ⵠ[333], ⵠ[556], ⵠ[430]], 1))));
		ᐃΔ[Δ.Ⲇⵠᐃᐃⵠ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔᐃⲆᐃ(Math.PI / ⲆⵠΔⵠ, ⵠⵠΔⵠⲆᐃⵠ(.25 * ᐃ, false, [ⵠ[254], ⵠ[357], ⵠ[132], ⵠ[53], "#4f9246"], 2))));
		ᐃΔ[Δ.Ⲇⵠᐃᐃⵠ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔᐃⲆᐃ(Math.PI / ΔⵠⲆᐃ, ⵠⵠΔⵠⲆᐃⵠ(.25 * ᐃ, ᐃΔΔⵠⲆ, [ⵠ[250], ⵠ[130], ⵠ[333], ⵠ[556], "#4f9246"], 2))));
		ᐃΔ[Δ.Ⲇⵠᐃᐃⵠ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔᐃⲆᐃ(Math.PI / 2, ⵠⵠΔⵠⲆᐃⵠ(.25 * ᐃ, false, [ⵠ[254], ⵠ[357], ⵠ[132], ⵠ[53], ⵠ[430], ⵠ[Ⲇᐃⵠ]], ⲆΔⵠⵠⵠ))));
		ᐃΔ[Δ.Ⲇⵠᐃᐃⵠ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔᐃⲆᐃ(Math.PI / ᐃᐃΔⵠ, ⵠⵠΔⵠⲆᐃⵠ(.25 * ᐃ, ΔⵠΔΔⲆ, [ⵠ[250], ⵠ[130], ⵠ[333], ⵠ[556], ⵠ[430], ⵠ[ⲆⲆⵠⲆ]], ⲆᐃᐃΔ))));
		ᐃΔ[Δ.Ⲇⵠᐃᐃⵠ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔᐃⲆᐃ(Math.PI / 2, ⵠⵠΔⵠⲆᐃⵠ(ᐃ * .25, false, [ⵠ[254], ⵠ[357], ⵠ[132], ⵠ[53], ⵠ[430], "#362513"], 4))));
		ᐃΔ[Δ.Ⲇⵠᐃᐃⵠ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔᐃⲆᐃ(Math.PI / 2, ⵠⵠΔⵠⲆᐃⵠ(ᐃ * .25, false, [ⵠ[250], ⵠ[130], ⵠ[333], ⵠ[556], ⵠ[430], "#664d2e"], ᐃΔᐃΔ))));
		ᐃΔ[Δ.ⲆΔᐃⵠⲆ] = [];
		ᐃΔ[Δ.ⲆΔᐃⵠⲆ][Δ.ⵠΔⵠ] = [ᐃⵠᐃ(ⵠⵠⵠᐃⵠ(ᐃ * 1.2, ᐃⲆᐃⵠⵠ, [ⵠ[292], "#0b8052", ⵠ[62]]))];
		ᐃΔ[Δ.ⲆΔᐃⵠⲆ][Δ.ⲆⲆⵠ] = [ᐃⵠᐃ(ⵠⵠⵠᐃⵠ(ᐃ * 1.2, ⲆⵠΔᐃⵠ, [ⵠ[250], "#084442", ⵠ[484]]))];
		ᐃΔ[Δ.ⲆⲆᐃⲆᐃⲆⲆ] = [];
		ᐃΔ[Δ.ⲆⲆᐃⲆᐃⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⵠⵠᐃⵠ(ᐃ * .8, ⵠⲆⵠⵠΔ, [ⵠ[292], ⵠ[475], ⵠ[194]]));
		ᐃΔ[Δ.ⲆⲆᐃⲆᐃⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⵠⵠᐃⵠ(ᐃ * .8, true, [ⵠ[250], ⵠ[ΔⵠᐃⵠⲆⲆΔ], ⵠ[403]]));
		ᐃΔ[Δ.ΔⲆᐃⲆᐃ] = [];
		ᐃΔ[Δ.ΔⲆᐃⲆᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⵠΔΔⵠᐃᐃ(ᐃ * .5, ᐃΔⲆΔᐃ, [ⵠ[445], ⵠ[485], "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
		ᐃΔ[Δ.ΔⲆᐃⲆᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⵠΔΔⵠᐃᐃ(ᐃ * .5, true, [ⵠ[250], "#0a3429", ⵠ[333], "#082f25", "#082925", "#0a3630"]));
		ᐃΔ[Δ.ⲆⲆⵠΔⵠ] = [];
		ᐃΔ[Δ.ⲆⲆⵠΔⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔⲆΔⲆΔᐃ(.5 * ᐃ, ⵠⲆΔᐃΔ, [ⵠ[445], ⵠ[104], "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
		ᐃΔ[Δ.ⲆⲆⵠΔⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔⲆΔⲆΔᐃ(.5 * ᐃ, true, [ⵠ[250], "#2b5254", "#264a46", "#396260", "#244743"]));
		ᐃΔ[Δ.ᐃᐃⵠⵠⲆ] = [];
		ᐃΔ[Δ.ᐃᐃⵠⵠⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠΔΔᐃⲆᐃⵠ(ᐃ * .5, true, [ⵠ[445], "#349970", "#245c45", "#348361", ⵠ[104], ⵠ[363]]));
		ᐃΔ[Δ.ᐃᐃⵠⵠⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠΔΔᐃⲆᐃⵠ(ᐃ * .5, ΔᐃΔΔᐃ, [ⵠ[250], "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
		ᐃΔ[Δ.ᐃⲆΔⵠΔⲆⲆ] = [];
		ᐃΔ[Δ.ᐃⲆΔⵠΔⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⵠⵠᐃⵠ(.8 * ᐃ, ΔᐃⲆⵠΔ, [ⵠ[445], "#0b8052", ⵠ[62]]));
		ᐃΔ[Δ.ᐃⲆΔⵠΔⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⵠⵠᐃⵠ(ᐃ * .8, true, [ⵠ[250], "#084442", ⵠ[484]]));
		ᐃΔ[Δ.ⵠᐃⵠⵠᐃⵠⲆ] = [];
		ᐃΔ[Δ.ⵠᐃⵠⵠᐃⵠⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⵠΔΔⵠᐃᐃ(.5 * ᐃ, ⵠⲆΔᐃΔ, [ⵠ[445], ⵠ[475], ⵠ[194], "#5e5823", "#86683e", "#6e502d"]));
		ᐃΔ[Δ.ⵠᐃⵠⵠᐃⵠⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⵠΔΔⵠᐃᐃ(.5 * ᐃ, ⵠⲆⵠⵠᐃ, [ⵠ[250], ⵠ[ΔᐃⲆⲆⲆⲆⲆ], ⵠ[403], "#0c301e", "#062a1f", "#083b2b"]));
		ᐃΔ[Δ.ⵠΔⲆⲆΔΔⵠ] = [];
		ᐃΔ[Δ.ⵠΔⲆⲆΔΔⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔⲆΔⲆΔᐃ(.5 * ᐃ, ΔⲆΔⵠⲆ, [ⵠ[445], "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
		ᐃΔ[Δ.ⵠΔⲆⲆΔΔⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔⲆΔⲆΔᐃ(.5 * ᐃ, true, [ⵠ[250], "#164a44", "#124244", "#13373b", "#133e3e"]));
		ᐃΔ[Δ.ⲆⵠⵠⵠᐃⲆⵠ] = [];
		ᐃΔ[Δ.ⲆⵠⵠⵠᐃⲆⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠΔΔᐃⲆᐃⵠ(.5 * ᐃ, true, [ⵠ[445], "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
		ᐃΔ[Δ.ⲆⵠⵠⵠᐃⲆⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠΔΔᐃⲆᐃⵠ(ᐃ * .5, ⵠΔⲆⵠⲆ, [ⵠ[250], "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
		ᐃΔ[Δ.ⵠΔΔᐃΔ] = [];
		ᐃΔ[Δ.ⵠΔΔᐃΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠᐃΔⲆΔΔᐃ(.45 * ᐃ, true, [ⵠ[292], ⵠ[213], "#98171e", "#22a84f", "#1f924a"]));
		ᐃΔ[Δ.ⵠΔΔᐃΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠᐃΔⲆΔΔᐃ(ᐃ * .45, true, [ⵠ[292], "#19386e", "#0b2752", "#124252", "#0d3441"]));
		ᐃΔ[Δ.ⵠⲆⵠΔⲆⲆᐃ] = ᐃⵠᐃ(ⵠᐃΔⲆΔΔᐃ(ᐃ * .65, true, ["rgba(14, 48, 34, 0)", ⵠ[370], ⵠ[370], ⵠ[370], ⵠ[370]]));
		ᐃΔ[Δ.ᐃᐃⲆᐃⵠ] = [];
		ᐃΔ[Δ.ᐃᐃⲆᐃⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⵠⵠⲆⵠ(ᐃ * 1.4, Ⲇⵠᐃᐃᐃ, [ⵠ[213], ⵠ[120]]));
		ᐃΔ[Δ.ᐃᐃⲆᐃⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⵠⵠⲆⵠ(1.4 * ᐃ, false, ["#46195e", "#744188"]));
		ᐃΔ[Δ.ⲆⲆΔⵠⲆ] = [];
		ᐃΔ[Δ.ⲆⲆΔⵠⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⲆⵠᐃᐃⵠᐃ(ᐃ * .9, false, [ⵠ[110], "#ec8d35", "#e96132"]));
		ᐃΔ[Δ.ⲆⲆΔⵠⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⲆⵠᐃᐃⵠᐃ(ᐃ * .9, false, ["#efdb7b", "#efe854", "#e8ef62"]));
		ᐃΔ[Δ.ΔᐃⲆⲆᐃΔⲆ] = [];
		ᐃΔ[Δ.ΔᐃⲆⲆᐃΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⲆⲆⵠΔΔⲆ(ᐃ * .9, ᐃⵠⲆⲆᐃ, [ⵠ[539], ⵠ[86]]));
		ᐃΔ[Δ.ΔᐃⲆⲆᐃΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⲆⲆⵠΔΔⲆ(ᐃ * .9, ΔⲆΔⵠΔ, ["#282404", "#0a0a01"]));
		ᐃΔ[Δ.ⵠⵠⲆⵠⵠⵠⲆ] = [];
		ᐃΔ[Δ.ⵠⵠⲆⵠⵠⵠⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⲆⲆᐃⵠⲆⲆ(.9 * ᐃ, false, [ⵠ[539], ⵠ[86]]));
		ᐃΔ[Δ.ⵠⵠⲆⵠⵠⵠⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⲆⲆᐃⵠⲆⲆ(ᐃ * .9, false, ["#282404", "#0a0a01"]));
		ᐃΔ[Δ.ⵠⲆᐃᐃᐃⵠΔ] = [];
		ᐃΔ[Δ.ⵠⲆᐃᐃᐃⵠΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⵠᐃΔᐃᐃⲆ(ᐃ * .9, Ⲇⵠᐃᐃᐃ, [ⵠ[110]]));
		ᐃΔ[Δ.ⵠⲆᐃᐃᐃⵠΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⵠᐃΔᐃᐃⲆ(.9 * ᐃ, ᐃⲆⵠⵠⲆ, ["#fffabb"]));
		ᐃΔ[Δ.ΔᐃⲆᐃᐃΔⵠ] = [];
		ᐃΔ[Δ.ΔᐃⲆᐃᐃΔⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃⲆⵠᐃⵠᐃ(.9 * ᐃ, ΔⵠΔⲆⵠ, [ⵠ[110]]));
		ᐃΔ[Δ.ΔᐃⲆᐃᐃΔⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃⲆⵠᐃⵠᐃ(.9 * ᐃ, false, ["#fffabb"]));
		ᐃΔ[Δ.ᐃⲆⲆᐃΔⵠΔ] = [];
		ᐃΔ[Δ.ᐃⲆⲆᐃΔⵠΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⵠᐃΔᐃᐃⲆ(ᐃ * .9, false, [ⵠ[110]]));
		ᐃΔ[Δ.ᐃⲆⲆᐃΔⵠΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⵠᐃΔᐃᐃⲆ(.9 * ᐃ, false, ["rgba(255, 84, 0, 1)"]));
		ᐃΔ[Δ.ΔⵠⲆⵠΔΔΔ] = [];
		ᐃΔ[Δ.ΔⵠⲆⵠΔΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃⲆⵠᐃⵠᐃ(.9 * ᐃ, Ⲇⵠᐃᐃᐃ, [ⵠ[110]]));
		ᐃΔ[Δ.ΔⵠⲆⵠΔΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃⲆⵠᐃⵠᐃ(ᐃ * .9, ᐃΔⵠᐃⲆ, ["#ff5704"]));
		ᐃΔ[Δ.ⲆⲆΔⲆΔΔⵠ] = ᐃⵠᐃ(ᐃᐃⲆⵠⲆΔⲆ(ᐃ, ⵠ[ⵠΔᐃⵠ], ⵠⲆΔⲆ));
		ᐃΔ[Δ.ΔΔⵠⵠⵠΔΔ] = ᐃⵠᐃ(ᐃᐃⲆⵠⲆΔⲆ(1.5 * ᐃ, ⵠ[ⵠⵠⲆⵠ], 1));
		ᐃΔ[Δ.ⵠⵠΔⵠⵠⲆⲆ] = ᐃⵠᐃ(ᐃⵠΔΔΔ(ᐃ, "Your score:", 15 * ᐃ, ⵠ[447]));
		ᐃΔ[Δ.ⵠᐃⵠⵠⲆⲆᐃ] = ᐃⵠᐃ(ᐃΔᐃⵠᐃᐃⵠⵠᐃ(.9 * ᐃ, [ⵠ[544], ⵠ[502], "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
		ᐃΔ[Δ.ⲆΔΔᐃᐃᐃΔ] = ⵠᐃ.ⲆΔΔᐃᐃᐃΔ;
		ᐃΔ[Δ.ᐃⵠΔᐃⲆ] = [];
		ᐃΔ[Δ.ᐃⵠΔᐃⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⲆᐃⲆⵠⲆΔ(ᐃ * 1.5, ᐃⵠΔⲆⵠ, [ⵠ[254], ⵠ[544], ⵠ[502], ⵠ[377], ⵠ[275], ⵠ[201], ⵠ[460], ⵠ[211], ⵠ[544], ⵠ[502]]));
		ᐃΔ[Δ.ᐃⵠΔᐃⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⲆᐃⲆⵠⲆΔ(1.5 * ᐃ, ⵠⲆⵠⵠΔ, [ⵠ[250], ⵠ[434], ⵠ[497], ⵠ[528], "#225755", "#07393D", "#07454a", "#0c484d", ⵠ[434], ⵠ[497]]));
		ᐃΔ[Δ.ⵠⵠⲆΔᐃⲆⲆ] = [];
		ᐃΔ[Δ.ⵠⵠⲆΔᐃⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⲆⲆΔⵠⲆⵠ(ᐃᐃΔⵠ * ᐃ, true, [ⵠ[254], ⵠ[544], ⵠ[502], ⵠ[377], ⵠ[275], ⵠ[201], ⵠ[460], ⵠ[211], ⵠ[544], ⵠ[502]]));
		ᐃΔ[Δ.ⵠⵠⲆΔᐃⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⲆⲆΔⵠⲆⵠ(ᐃ * 2, true, [ⵠ[250], ⵠ[434], ⵠ[497], ⵠ[528], "#225755", "#07393D", "#07454a", "#0c484d", ⵠ[434], ⵠ[497]]));
		ᐃΔ[Δ.ⲆⵠΔⵠᐃᐃᐃ] = [];
		ᐃΔ[Δ.ⲆⵠΔⵠᐃᐃᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⵠⵠⲆᐃⲆⲆ(ᐃ * 1.5, true, [ⵠ[254], ⵠ[544], ⵠ[502], ⵠ[377], ⵠ[275], ⵠ[201], ⵠ[460], ⵠ[211], ⵠ[544], ⵠ[502]]));
		ᐃΔ[Δ.ⲆⵠΔⵠᐃᐃᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⵠⵠⲆᐃⲆⲆ(1.5 * ᐃ, ᐃⵠΔⲆⵠ, [ⵠ[250], ⵠ[434], ⵠ[497], ⵠ[528], "#225755", "#07393D", "#07454a", "#0c484d", ⵠ[434], ⵠ[497]]));
		ᐃΔ[Δ.ⵠⵠⵠⵠᐃ] = [];
		ᐃΔ[Δ.ⵠⵠⵠⵠᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆⵠᐃΔⲆΔΔ(ᐃ * 2.2, ΔᐃΔΔᐃ, [ⵠ[162], ⵠ[564]]));
		ᐃΔ[Δ.ⵠⵠⵠⵠᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆⵠᐃΔⲆΔΔ(ᐃ * 2.2, ⵠΔΔⵠᐃ, ["#0B4049", "#08383D"]));
		ᐃΔ[Δ.ⲆⵠΔᐃᐃΔⲆ] = [];
		ᐃΔ[Δ.ⲆⵠΔᐃᐃΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆⵠᐃΔⲆΔΔ(2.2 * ᐃ, ⵠⵠΔⲆᐃΔⲆ, [ⵠ[475], ⵠ[194]]));
		ᐃΔ[Δ.ⲆⵠΔᐃᐃΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆⵠᐃΔⲆΔΔ(ᐃ * 2.2, true, [ⵠ[ΔⵠⵠᐃΔⵠⲆ], ⵠ[403]]));
		ᐃΔ[Δ.ⵠΔΔᐃⲆ] = [];
		ᐃΔ[Δ.ⵠΔΔᐃⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(.8 * ᐃ, ⲆᐃΔΔⲆ, [ⵠ[162], ⵠ[564]]));
		ᐃΔ[Δ.ⵠΔΔᐃⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(ᐃ * .8, true, ["#15514F", "#0F3F3D"]));
		ᐃΔ[Δ.ⵠΔⵠΔⵠΔΔ] = [];
		ᐃΔ[Δ.ⵠΔⵠΔⵠΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(.8 * ᐃ, true, [ⵠ[485], "#b17238"]));
		ᐃΔ[Δ.ⵠΔⵠΔⵠΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(.8 * ᐃ, true, [ⵠ[413], ⵠ[196]]));
		ᐃΔ[Δ.ⵠᐃᐃΔⲆΔΔ] = [];
		ᐃΔ[Δ.ⵠᐃᐃΔⲆΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(.8 * ᐃ, true, ["#3a8214", "#4a9c1e"]));
		ᐃΔ[Δ.ⵠᐃᐃΔⲆΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(.8 * ᐃ, ⲆⵠⵠⵠⲆ, ["#032d29", "#044640"]));
		ᐃΔ[Δ.ⲆⵠᐃⵠΔΔⲆ] = [];
		ᐃΔ[Δ.ⲆⵠᐃⵠΔΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(ᐃ * .8, true, [ⵠ[104], ⵠ[363]]));
		ᐃΔ[Δ.ⲆⵠᐃⵠΔΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(.8 * ᐃ, true, ["#1c6161", "#07413f"]));
		ᐃΔ[Δ.ⵠⲆⲆΔΔΔΔ] = [];
		ᐃΔ[Δ.ⵠⲆⲆΔΔΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(.8 * ᐃ, ⲆⵠΔᐃⵠ, ["#328a56", "#449573"]));
		ᐃΔ[Δ.ⵠⲆⲆΔΔΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(.8 * ᐃ, true, [ⵠ[413], ⵠ[196]]));
		ᐃΔ[Δ.ᐃᐃⲆᐃᐃⵠⵠ] = [];
		ᐃΔ[Δ.ᐃᐃⲆᐃᐃⵠⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(ᐃ * .8, true, ["#c98e2f", "#a36b11"]));
		ᐃΔ[Δ.ᐃᐃⲆᐃᐃⵠⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(ᐃ * .8, ΔⲆΔⵠⲆ, [ⵠ[413], ⵠ[196]]));
		ᐃΔ[Δ.ⲆΔΔⵠᐃⲆⲆ] = [];
		ᐃΔ[Δ.ⲆΔΔⵠᐃⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(.8 * ᐃ, ⲆᐃΔΔⲆ, ["#b22419", "#99110e"]));
		ᐃΔ[Δ.ⲆΔΔⵠᐃⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(ᐃ * .8, ⵠⵠΔⲆᐃΔⲆ, ["#04323c", "#03222b"]));
		ᐃΔ[Δ.ΔⵠⵠⲆⲆⵠⲆ] = [];
		ᐃΔ[Δ.ΔⵠⵠⲆⲆⵠⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(.8 * ᐃ, ΔᐃⲆⵠΔ, ["#13a56d", "#098a58"]));
		ᐃΔ[Δ.ΔⵠⵠⲆⲆⵠⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃᐃⲆⵠ(ᐃ * .8, true, [ⵠ[413], ⵠ[196]]));
		ᐃΔ[Δ.ᐃⵠᐃᐃΔΔᐃ] = ΔΔᐃⵠ(ΔⵠΔ, [{
			f: ⲆⵠᐃΔⲆΔΔ,
			x: ΔⲆⲆ,
			y: ⵠᐃⲆⲆ,
			a: 1,
			r: 0,
			c: [ⵠ[162], ⵠ[564]]
		}], 1.2, [ⵠ[575], ⵠ[122], ⵠ[84]], .7);
		ᐃΔ[Δ.ⵠⵠⵠⲆᐃᐃΔ] = ΔΔᐃⵠ(1, [{
			f: ΔⲆⲆᐃⵠⲆⲆ,
			x: ⵠᐃⲆ,
			y: ΔⲆⲆ,
			a: 1,
			r: -Math.PI / ΔⵠⲆᐃᐃ,
			c: [ⵠ[539], ⵠ[86]]
		}], .3, [ⵠ[575], ⵠ[122], ⵠ[84]], .7);
		ᐃΔ[Δ.ᐃᐃⲆᐃⵠⲆⲆ] = ΔΔᐃⵠ(1, [{
			f: ᐃⲆΔⵠΔΔΔ,
			x: ⵠⲆΔ,
			y: -ΔⲆⵠⵠ,
			a: 1,
			r: 0,
			c: [ⵠ[350], "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
		}], .15, [ⵠ[575], ⵠ[122], ⵠ[84]], .7);
		ᐃΔ[Δ.ⲆⲆΔⵠᐃⲆⵠ] = ΔΔᐃⵠ(.9, [], .3, [ⵠ[112], ⵠ[112], ⵠ[112]], .5);
		ᐃΔ[Δ.ⵠⵠⲆΔⵠᐃⵠ] = [];
		ᐃΔ[Δ.ⵠⵠⲆΔⵠᐃⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(.9 * ᐃ, Ⲇⵠᐃᐃᐃ, ["#7d613e", "#9e7e5a"]));
		ᐃΔ[Δ.ⵠⵠⲆΔⵠᐃⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, ΔⲆΔᐃΔ, ["#084442", "#125e5a"]));
		ᐃΔ[Δ.ΔᐃⲆⵠᐃ] = [];
		ᐃΔ[Δ.ΔᐃⲆⵠᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, ΔⵠΔΔⲆ, [ⵠ[564], ⵠ[162]]));
		ᐃΔ[Δ.ΔᐃⲆⵠᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, false, ["#1b6f6a", "#0d4e4c"]));
		ᐃΔ[Δ.ⵠΔᐃⵠⲆⵠⲆ] = [];
		ᐃΔ[Δ.ⵠΔᐃⵠⲆⵠⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(.9 * ᐃ, ᐃΔⵠᐃⲆ, [ⵠ[194], ⵠ[475]]));
		ᐃΔ[Δ.ⵠΔᐃⵠⲆⵠⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(.9 * ᐃ, Ⲇⵠᐃᐃᐃ, [ⵠ[403], ⵠ[11]]));
		ᐃΔ[Δ.ΔΔΔᐃⲆΔΔ] = [];
		ᐃΔ[Δ.ΔΔΔᐃⲆΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, false, [ⵠ[485], "#ec952d"]));
		ᐃΔ[Δ.ΔΔΔᐃⲆΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, ⵠᐃⵠⲆⲆ, ["#0e6553", "#094437"]));
		ᐃΔ[Δ.ⲆᐃᐃⵠⲆⲆⲆ] = [];
		ᐃΔ[Δ.ⲆᐃᐃⵠⲆⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, false, ["#375809", "#4b770e"]));
		ᐃΔ[Δ.ⲆᐃᐃⵠⲆⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(.9 * ᐃ, ⵠΔⵠⵠⵠ, ["#09542d", "#0d5d2f"]));
		ᐃΔ[Δ.ΔⲆΔⵠⵠᐃΔ] = [];
		ᐃΔ[Δ.ΔⲆΔⵠⵠᐃΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(.9 * ᐃ, false, ["#585809", "#72770e"]));
		ᐃΔ[Δ.ΔⲆΔⵠⵠᐃΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, false, ["#295209", "#305d0d"]));
		ᐃΔ[Δ.ⲆΔⲆⵠⵠⵠᐃ] = [];
		ᐃΔ[Δ.ⲆΔⲆⵠⵠⵠᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, ᐃⲆⲆΔⵠ, ["#b9b094", "#e2d2c0"]));
		ᐃΔ[Δ.ⲆΔⲆⵠⵠⵠᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, ΔⵠΔⲆⵠ, ["#126366", "#0d484b"]));
		ᐃΔ[Δ.ΔⲆᐃⲆᐃⵠΔ] = [];
		ᐃΔ[Δ.ΔⲆᐃⲆᐃⵠΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, false, ["#3f8662", "#30915d"]));
		ᐃΔ[Δ.ΔⲆᐃⲆᐃⵠΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, false, ["#0e6553", "#094437"]));
		ᐃΔ[Δ.ΔΔΔΔᐃΔⵠ] = [];
		ᐃΔ[Δ.ΔΔΔΔᐃΔⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, false, ["#c79153", "#dfa868"]));
		ᐃΔ[Δ.ΔΔΔΔᐃΔⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, ᐃⵠⲆⲆᐃ, ["#073927", "#075040"]));
		ᐃΔ[Δ.ⵠΔⵠᐃⵠⵠⵠ] = [];
		ᐃΔ[Δ.ⵠΔⵠᐃⵠⵠⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(.9 * ᐃ, false, ["#768b5b", "#819984"]));
		ᐃΔ[Δ.ⵠΔⵠᐃⵠⵠⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, false, ["#0c4540", "#0e5153"]));
		ᐃΔ[Δ.ⵠᐃᐃⵠⲆΔⲆ] = [];
		ᐃΔ[Δ.ⵠᐃᐃⵠⲆΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, false, ["#567465", "#627c6e"]));
		ᐃΔ[Δ.ⵠᐃᐃⵠⲆΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, ⵠΔⵠⵠⵠ, ["#073927", "#075040"]));
		ᐃΔ[Δ.ᐃᐃᐃΔᐃⵠⵠ] = [];
		ᐃΔ[Δ.ᐃᐃᐃΔᐃⵠⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(.9 * ᐃ, ⲆᐃᐃΔΔ, ["#996b3a", "#bf956b"]));
		ᐃΔ[Δ.ᐃᐃᐃΔᐃⵠⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, ᐃⲆⵠⵠⲆ, ["#0e6553", "#094437"]));
		ᐃΔ[Δ.ΔΔΔΔᐃⵠⵠ] = [];
		ᐃΔ[Δ.ΔΔΔΔᐃⵠⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, false, ["#7a634a", "#a68f77"]));
		ᐃΔ[Δ.ΔΔΔΔᐃⵠⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(.9 * ᐃ, ⲆΔⲆᐃΔ, ["#1e4d43", "#113c32"]));
		ᐃΔ[Δ.ⲆⵠⵠⵠᐃΔⲆ] = [];
		ᐃΔ[Δ.ⲆⵠⵠⵠᐃΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, false, ["#99403c", "#bc796c"]));
		ᐃΔ[Δ.ⲆⵠⵠⵠᐃΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, ᐃⲆⲆΔⵠ, ["#1e434d", "#11303c"]));
		ᐃΔ[Δ.ΔⵠⲆⵠᐃΔⵠ] = [];
		ᐃΔ[Δ.ΔⵠⲆⵠᐃΔⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(.9 * ᐃ, ᐃⲆⲆΔⵠ, ["#88504e", "#b3857c"]));
		ᐃΔ[Δ.ΔⵠⲆⵠᐃΔⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, false, ["#253b41", "#162930"]));
		ᐃΔ[Δ.ᐃⵠΔᐃᐃⵠΔ] = [];
		ᐃΔ[Δ.ᐃⵠΔᐃᐃⵠΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, ΔⵠΔⵠⵠ, ["#0f8870", "#23af93"]));
		ᐃΔ[Δ.ᐃⵠΔᐃᐃⵠΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(.9 * ᐃ, ΔⵠΔⲆⵠ, ["#032829", "#083233"]));
		ᐃΔ[Δ.ⲆᐃΔΔⲆΔᐃ] = [];
		ᐃΔ[Δ.ⲆᐃΔΔⲆΔᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(ᐃ * .9, false, ["#618a20", "#84a74e"]));
		ᐃΔ[Δ.ⲆᐃΔΔⲆΔᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆ(.9 * ᐃ, false, ["#1f4632", "#335d47"]));
		ᐃΔ[Δ.ᐃⵠⵠⲆᐃ] = [];
		ᐃΔ[Δ.ᐃⵠⵠⲆᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠᐃⵠᐃⲆⲆⲆ(ᐃ * 1.2, ᐃⲆᐃⵠⵠ, [ⵠ[254], ⵠ[539], ⵠ[86], "#756e52", "#663f22", "#9e9577"]));
		ᐃΔ[Δ.ᐃⵠⵠⲆᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠᐃⵠᐃⲆⲆⲆ(1.2 * ᐃ, ᐃᐃΔⲆⵠ, [ⵠ[250], ⵠ[ΔΔΔⵠᐃ], "#072322", "#3e706b", "#123d3f", "#4e827c"]));
		ᐃΔ[Δ.ΔⵠⵠⲆΔ] = [], ᐃΔ[Δ.ΔⵠⵠⲆΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔΔⵠⲆⲆ(ᐃᐃΔ * ᐃ, ⵠⲆⵠⵠᐃ, [ⵠ[254], ⵠ[298], ⵠ[230], ⵠ[378], ⵠ[230], ⵠ[298]]));
		ᐃΔ[Δ.ΔⵠⵠⲆΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔΔⵠⲆⲆ(ᐃ * 1, true, [ⵠ[250], ⵠ[ⲆᐃⲆᐃⵠⵠⵠ], ⵠ[384], ⵠ[367], ⵠ[ᐃᐃΔᐃᐃⲆⲆ], "#174444"]));
		ᐃΔ[Δ.ΔⲆΔᐃⵠ] = [], ᐃΔ[Δ.ΔⲆΔᐃⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆⲆⵠⵠⵠⲆᐃ(ΔΔⵠΔ * ᐃ, true, [ⵠ[254], ⵠ[243], ⵠ[247], ⵠ[307], ⵠ[341], ⵠ[283], ⵠ[40]]));
		ᐃΔ[Δ.ΔⲆΔᐃⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆⲆⵠⵠⵠⲆᐃ(1 * ᐃ, true, [ⵠ[250], ⵠ[164], ⵠ[63], ⵠ[63], "#4bbcb4", ⵠ[147], ⵠ[95]]));
		ᐃΔ[Δ.ᐃⲆⲆΔⲆ] = [], ᐃΔ[Δ.ᐃⲆⲆΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃΔⵠΔⵠⲆ(ⲆᐃΔ * ᐃ, ⵠⲆⵠⵠΔ, [ⵠ[254], ⵠ[534], ⵠ[121], ⵠ[335], ⵠ[290], ⵠ[205]]));
		ᐃΔ[Δ.ᐃⲆⲆΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃΔⵠΔⵠⲆ(ⲆΔΔΔ * ᐃ, ᐃᐃΔⲆⵠ, [ⵠ[250], ⵠ[337], ⵠ[579], "#8f65de", "#7f55cc", "#9d77e6"]));
		ᐃΔ[Δ.ΔᐃΔⵠⵠ] = [], ᐃΔ[Δ.ΔᐃΔⵠⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃΔⵠΔⵠⲆ(1 * ᐃ, true, [ⵠ[254], ⵠ[321], ⵠ[379], ⵠ[50], ⵠ[553], ⵠ[207]]));
		ᐃΔ[Δ.ΔᐃΔⵠⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃΔⵠΔⵠⲆ(ᐃ * 1, ⵠⲆⵠⵠᐃ, [ⵠ[250], ⵠ[552], "#214c4b", ⵠ[186], "#295957", "#1f5955"]));
		ᐃΔ[Δ.ᐃᐃᐃᐃᐃ] = [], ᐃΔ[Δ.ᐃᐃᐃᐃᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠᐃⵠⵠᐃΔⲆ(ᐃ * 1, ᐃᐃᐃⵠⵠ, [ⵠ[254], ⵠ[546], ⵠ[251], ⵠ[34], ⵠ[202], ⵠ[170]]));
		ᐃΔ[Δ.ᐃᐃᐃᐃᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠᐃⵠⵠᐃΔⲆ(ᐃ * Δⵠᐃ, ⲆⵠⵠⵠⲆ, [ⵠ[250], ⵠ[186], "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
		ᐃΔ[Δ.ⲆⲆᐃⵠΔ] = [], ᐃΔ[Δ.ⲆⲆᐃⵠΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠᐃⲆᐃΔᐃⵠ(.8 * ᐃ, ⲆⵠⵠⵠⲆ, [ⵠ[254], ⵠ[463], ⵠ[369], ⵠ[298], ⵠ[230], ⵠ[378], ⵠ[230], ⵠ[298]]));
		ᐃΔ[Δ.ⲆⲆᐃⵠΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠᐃⲆᐃΔᐃⵠ(.8 * ᐃ, ᐃᐃᐃⲆΔ, [ⵠ[250], ⵠ[443], ⵠ[23], ⵠ[ⲆⲆᐃⵠᐃᐃΔ], ⵠ[384], ⵠ[367], ⵠ[ᐃⲆⵠᐃⲆᐃⲆ], "#174444"]));
		ᐃΔ[Δ.ⵠⵠⵠᐃΔ] = [], ᐃΔ[Δ.ⵠⵠⵠᐃΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃⵠΔᐃΔΔⲆ(.8 * ᐃ, true, [ⵠ[254], "#69685a", "#9c9683", ⵠ[546], ⵠ[251], ⵠ[34], ⵠ[202], ⵠ[170]]));
		ᐃΔ[Δ.ⵠⵠⵠᐃΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃⵠΔᐃΔΔⲆ(ᐃ * .8, ΔⲆΔⵠⲆ, [ⵠ[250], "#1a3732", "#1e544c", ⵠ[186], "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
		ᐃΔ[Δ.ⵠΔΔⵠΔ] = [], ᐃΔ[Δ.ⵠΔΔⵠΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⵠⲆᐃᐃᐃⲆ(ᐃ * .8, true, [ⵠ[254], "#7d8b90", "#9facaa", ⵠ[243], ⵠ[247], ⵠ[307], ⵠ[341], ⵠ[283], ⵠ[40]]));
		ᐃΔ[Δ.ⵠΔΔⵠΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⵠⲆᐃᐃᐃⲆ(.8 * ᐃ, ᐃΔᐃⵠⲆ, [ⵠ[250], "#2c4b55", "#546d77", ⵠ[164], ⵠ[63], ⵠ[63], "#4bbcb4", ⵠ[147], ⵠ[95]]));
		ᐃΔ[Δ.ᐃⵠⲆΔⵠ] = [], ᐃΔ[Δ.ᐃⵠⲆΔⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠΔⲆⲆΔᐃⵠ(ᐃ * .8, true, [ⵠ[254], ⵠ[321], ⵠ[369], ⵠ[321], ⵠ[379], ⵠ[50], ⵠ[553], ⵠ[207]]));
		ᐃΔ[Δ.ᐃⵠⲆΔⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠΔⲆⲆΔᐃⵠ(ᐃ * .8, true, [ⵠ[250], ⵠ[443], ⵠ[23], ⵠ[552], "#214c4b", ⵠ[186], "#295957", "#1f5955"]));
		ᐃΔ[Δ.ⲆⲆⲆⵠⲆ] = [], ᐃΔ[Δ.ⲆⲆⲆⵠⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠΔⲆⲆΔᐃⵠ(.8 * ᐃ, ΔᐃΔΔᐃ, [ⵠ[254], ⵠ[321], ⵠ[369], ⵠ[534], ⵠ[121], ⵠ[335], ⵠ[290], ⵠ[205]]));
		ᐃΔ[Δ.ⲆⲆⲆⵠⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠΔⲆⲆΔᐃⵠ(ᐃ * .8, true, [ⵠ[250], ⵠ[443], ⵠ[23], ⵠ[337], ⵠ[579], "#8f65de", "#7f55cc", "#9d77e6"]));
		ᐃΔ[Δ.ᐃⲆⲆΔⵠΔᐃ] = [];
		ᐃΔ[Δ.ᐃⲆⲆΔⵠΔᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔᐃⲆⵠᐃⵠ(1.5 * ᐃ, ⲆⵠΔᐃⵠ, [ⵠ[254], ⵠ[323], ⵠ[397], "#644928", ⵠ[397], "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
		ᐃΔ[Δ.ᐃⲆⲆΔⵠΔᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔᐃⲆⵠᐃⵠ(1.5 * ᐃ, true, [ⵠ[250], ⵠ[16], ⵠ[384], ⵠ[367], ⵠ[16], "#174444"]));
		ᐃΔ[Δ.ΔⲆΔᐃⲆⵠᐃ] = [];
		ᐃΔ[Δ.ΔⲆΔᐃⲆⵠᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔᐃⲆⵠᐃⵠ(ᐃ * 1, false, [ⵠ[240], ⵠ[240], ⵠ[428], ⵠ[428], ⵠ[240], ⵠ[428]]));
		ᐃΔ[Δ.ΔⲆΔᐃⲆⵠᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔᐃⲆⵠᐃⵠ(1 * ᐃ, ᐃΔⵠᐃⲆ, [ⵠ[195], ⵠ[195], "#0b342b", "#0b342b", ⵠ[195], "#0b342b"]));
		ᐃΔ[Δ.ᐃⲆⲆⲆΔᐃⲆ] = [];
		ᐃΔ[Δ.ᐃⲆⲆⲆΔᐃⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔⲆΔᐃ(1.5 * ᐃ, true, [ⵠ[254], ⵠ[321], ⵠ[379], ⵠ[50], ⵠ[207], ⵠ[553]]));
		ᐃΔ[Δ.ᐃⲆⲆⲆΔᐃⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔⲆΔᐃ(1.5 * ᐃ, true, [ⵠ[250], ⵠ[552], "#214c4b", ⵠ[186], "#164542", "#295957"]));
		ᐃΔ[Δ.ᐃΔⵠᐃΔᐃⲆ] = [];
		ᐃΔ[Δ.ᐃΔⵠᐃΔᐃⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔⲆΔᐃ(ᐃ * ΔᐃⵠⲆ, ΔⵠΔⵠⵠ, [ⵠ[240], ⵠ[240], ⵠ[428], ⵠ[428], ⵠ[240], ⵠ[428]]));
		ᐃΔ[Δ.ᐃΔⵠᐃΔᐃⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔⲆΔᐃ(ᐃ * 1, false, [ⵠ[97], ⵠ[97], ⵠ[81], ⵠ[81], ⵠ[97], ⵠ[81]]));
		ᐃΔ[Δ.ΔΔⵠⲆᐃⵠⲆ] = [];
		ᐃΔ[Δ.ΔΔⵠⲆᐃⵠⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔⲆΔᐃ(1.5 * ᐃ, true, [ⵠ[254], ⵠ[534], ⵠ[121], ⵠ[335], ⵠ[290], ⵠ[205]]));
		ᐃΔ[Δ.ΔΔⵠⲆᐃⵠⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔⲆΔᐃ(ᐃ * 1.5, ⲆᐃΔΔⲆ, [ⵠ[250], ⵠ[337], ⵠ[579], "#8f65de", "#7f55cc", "#9d77e6"]));
		ᐃΔ[Δ.ⲆⵠΔΔⵠⲆⵠ] = [];
		ᐃΔ[Δ.ⲆⵠΔΔⵠⲆⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔⲆΔᐃ(ΔᐃⵠⲆ * ᐃ, ΔΔᐃⵠᐃ, [ⵠ[240], ⵠ[240], ⵠ[428], ⵠ[428], ⵠ[240], ⵠ[428]]));
		ᐃΔ[Δ.ⲆⵠΔΔⵠⲆⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔⲆΔᐃ(Ⲇⵠᐃ * ᐃ, ᐃⲆⲆΔⵠ, [ⵠ[97], ⵠ[97], ⵠ[81], ⵠ[81], ⵠ[97], ⵠ[81]]));
		ᐃΔ[Δ.ΔⲆᐃⵠⵠⵠⵠ] = [];
		ᐃΔ[Δ.ΔⲆᐃⵠⵠⵠⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆⵠΔΔⵠⵠⲆ(ᐃ * 1.5, true, [ⵠ[254], ⵠ[546], ⵠ[251], ⵠ[34], "#9a8636", ⵠ[170]]));
		ᐃΔ[Δ.ΔⲆᐃⵠⵠⵠⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆⵠΔΔⵠⵠⲆ(ᐃ * 1.5, ⲆⵠΔᐃⵠ, [ⵠ[250], ⵠ[186], "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
		ᐃΔ[Δ.ΔⵠΔᐃᐃⲆⲆ] = [];
		ᐃΔ[Δ.ΔⵠΔᐃᐃⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆⵠΔΔⵠⵠⲆ(ᐃ * 1, ΔⲆΔᐃᐃ, [ⵠ[240], ⵠ[240], ⵠ[428], ⵠ[428], ⵠ[240], ⵠ[428]]));
		ᐃΔ[Δ.ΔⵠΔᐃᐃⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆⵠΔΔⵠⵠⲆ(ᐃ * ⲆΔΔΔ, false, [ⵠ[97], ⵠ[97], ⵠ[81], ⵠ[81], ⵠ[97], ⵠ[81]]));
		ᐃΔ[Δ.ⲆΔⲆΔΔΔⲆ] = [];
		ᐃΔ[Δ.ⲆΔⲆΔΔΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆⲆⵠⲆᐃⲆⲆ(ᐃ * 1.5, true, [ⵠ[254], ⵠ[243], ⵠ[247], ⵠ[307], ⵠ[341], ⵠ[283], ⵠ[40]]));
		ᐃΔ[Δ.ⲆΔⲆΔΔΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆⲆⵠⲆᐃⲆⲆ(ᐃ * 1.5, true, [ⵠ[250], ⵠ[164], ⵠ[63], ⵠ[63], "#4bbcb4", ⵠ[147], ⵠ[95]]));
		ᐃΔ[Δ.ΔⵠⵠΔⵠⵠΔ] = [];
		ᐃΔ[Δ.ΔⵠⵠΔⵠⵠΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆⲆⵠⲆᐃⲆⲆ(1 * ᐃ, false, [ⵠ[240], ⵠ[240], ⵠ[428], ⵠ[428], ⵠ[240], ⵠ[428]]));
		ᐃΔ[Δ.ΔⵠⵠΔⵠⵠΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆⲆⵠⲆᐃⲆⲆ(ᐃ * 1, ⵠΔⵠⵠⵠ, [ⵠ[97], ⵠ[97], ⵠ[81], ⵠ[81], ⵠ[97], ⵠ[81]]));
		ᐃΔ[Δ.ᐃⵠᐃⲆΔ] = [];
		ᐃΔ[Δ.ᐃⵠᐃⲆΔ][2] = ᐃⵠᐃ(ⲆΔΔⵠΔⲆⲆ(ᐃ * .5, true, "#4d0000 #4d0000 #4d0000 #4d0000 #4d0000 #614627 #614627 #c4a23a #c4a23a #c4a23a".split(" ")));
		ᐃΔ[Δ.ᐃⵠᐃⲆΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔΔⵠΔⲆⲆ(ᐃ * .5, true, [ⵠ[240], "#9e8838", ⵠ[59], ⵠ[323], ⵠ[229], ⵠ[229], ⵠ[229], ⵠ[59], ⵠ[59], ⵠ[59]]));
		ᐃΔ[Δ.ᐃⵠᐃⲆΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔΔⵠΔⲆⲆ(ᐃ * .5, ⵠⲆⵠⵠΔ, [ⵠ[97], "#266161", ⵠ[476], ⵠ[269], ⵠ[560], ⵠ[560], ⵠ[560], ⵠ[476], ⵠ[476], ⵠ[476]]));
		ᐃΔ[Δ.ⲆΔᐃΔΔ] = [];
		ᐃΔ[Δ.ⲆΔᐃΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠᐃᐃⵠⲆⵠΔ(.5 * ᐃ, [ⵠ[240], "#9e8838", ⵠ[59], ⵠ[323], ⵠ[229]]));
		ᐃΔ[Δ.ⲆΔᐃΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠᐃᐃⵠⲆⵠΔ(.5 * ᐃ, [ⵠ[97], "#266161", ⵠ[476], ⵠ[269], ⵠ[560]]));
		ᐃΔ[Δ.ⵠΔᐃⵠᐃ] = [];
		ᐃΔ[Δ.ⵠΔᐃⵠᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⲆΔΔⲆⲆⲆ(.9 * ᐃ, [ⵠ[292], "#ee97bf", ⵠ[ᐃⲆᐃⵠΔ], ⵠ[91], ⵠ[0]]));
		ᐃΔ[Δ.ⵠΔᐃⵠᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⲆΔΔⲆⲆⲆ(.9 * ᐃ, [ⵠ[250], "#4d1b59", "#5d3f77", "#220e26", ⵠ[ⵠⵠⲆⵠ]]));
		ᐃΔ[Δ.ΔΔⲆΔⵠ] = [];
		ᐃΔ[Δ.ΔΔⲆΔⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(Math.PI, ⵠᐃᐃⵠⲆᐃᐃ(ᐃ * .9, [ⵠ[91], ⵠ[225], ⵠ[225], ⵠ[225], ⵠ[ᐃΔΔⲆΔⵠΔ], ⵠ[91]])));
		ᐃΔ[Δ.ΔΔⲆΔⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(Math.PI, ⵠᐃᐃⵠⲆᐃᐃ(ᐃ * .9, [ⵠ[250], "#401d49", ⵠ[225], "#401d49", ⵠ[100], ⵠ[91]])));
		ᐃΔ[Δ.ᐃⲆⵠΔⲆᐃᐃ] = ᐃⵠᐃ(ⵠⵠᐃⵠⲆⲆⵠⵠΔ(.6 * ᐃ, [ⵠ[100]]));
		ᐃΔ[Δ.ⲆᐃⵠⲆᐃ] = [];
		ᐃΔ[Δ.ⲆᐃⵠⲆᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠΔⲆⵠΔⵠᐃ(1.1 * ᐃ, [ⵠ[292], "#231f20", ⵠ[225], "#7d7679", ⵠ[ᐃᐃⲆ]]));
		ᐃΔ[Δ.ⲆᐃⵠⲆᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠΔⲆⵠΔⵠᐃ(1.1 * ᐃ, [ⵠ[250], "#1e181c", ⵠ[532], "#3e3e4a", ⵠ[Δⵠⵠⵠ]]));
		ᐃΔ[Δ.ⵠⲆΔΔΔ] = [];
		ᐃΔ[Δ.ⵠⲆΔΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠΔⲆΔⲆᐃⵠ(ᐃ * .6, true, [ⵠ[329], ⵠ[161], ⵠ[454], ⵠ[20]]));
		ᐃΔ[Δ.ⵠⲆΔΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠΔⲆΔⲆᐃⵠ(ᐃ * .6, true, ["#478e8b", "#327e73", ⵠ[498], "#08403f"]));
		ᐃΔ[Δ.ⵠⲆⲆΔⵠ] = [];
		ᐃΔ[Δ.ⵠⲆⲆΔⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔᐃΔΔΔΔ(ᐃ * .6, true, [ⵠ[454], ⵠ[ⲆᐃΔᐃⵠ], ⵠ[329], ⵠ[161]]));
		ᐃΔ[Δ.ⵠⲆⲆΔⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔᐃΔΔΔΔ(ᐃ * .6, ᐃᐃᐃⲆΔ, [ⵠ[498], "#08403f", "#478e8b", "#327e73"]));
		ᐃΔ[Δ.ⵠⲆⵠⲆⲆ] = [];
		ᐃΔ[Δ.ⵠⲆⵠⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⵠΔΔΔΔⲆ(ᐃ * .63, true, [ⵠ[239], "#dee7e7", "#b8cccb", ⵠ[ⵠⵠⲆⵠ], "#e3e8e8"]));
		ᐃΔ[Δ.ⵠⲆⵠⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⵠΔΔΔΔⲆ(ᐃ * .63, true, [ⵠ[498], "#368981", "#1c635e", "#7bbab4", "#469e95"]));
		ᐃΔ[Δ.ᐃⲆⲆᐃΔ] = [];
		ᐃΔ[Δ.ᐃⲆⲆᐃΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆⲆᐃⲆⵠⵠΔ(ᐃ * .6, true, [ⵠ[239], "#c5232c", "#84191d", "#a72027", ⵠ[364], ⵠ[457]]));
		ᐃΔ[Δ.ᐃⲆⲆᐃΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆⲆᐃⲆⵠⵠΔ(.6 * ᐃ, ᐃΔⲆΔᐃ, [ⵠ[498], "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
		ᐃΔ[Δ.ⲆⲆᐃΔⲆ] = [];
		ᐃΔ[Δ.ⲆⲆᐃΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠΔᐃⵠⲆⵠᐃ(.6 * ᐃ, true, [ⵠ[239], "#0f964c", "#106e3b", "#138344", ⵠ[364], ⵠ[457], "#C5232C", "#A92D2D"]));
		ᐃΔ[Δ.ⲆⲆᐃΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠΔᐃⵠⲆⵠᐃ(ᐃ * .6, ⵠⲆⵠⵠᐃ, [ⵠ[498], ⵠ[61], ⵠ[517], ⵠ[542], "#66aaa3", "#469e95", "#292f66", "#202559"]));
		ᐃΔ[Δ.ⲆⵠⵠᐃⵠⵠΔ] = [];
		ᐃΔ[Δ.ⲆⵠⵠᐃⵠⵠΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔⲆⲆΔΔᐃ(.42 * ᐃ, ⵠⲆⵠⵠᐃ, [ⵠ[254], "#515C57", "#3A4942", "#68736F", ⵠ[92], ⵠ[167], ⵠ[46], "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
		ᐃΔ[Δ.ⲆⵠⵠᐃⵠⵠΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔⲆⲆΔΔᐃ(.42 * ᐃ, true, [ⵠ[254], "#485E66", ⵠ[389], "#60757D", ⵠ[92], ⵠ[167], ⵠ[46], ⵠ[389], "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
		ᐃΔ[Δ.ⵠᐃⵠΔⲆⵠΔ] = [];
		ᐃΔ[Δ.ⵠᐃⵠΔⲆⵠΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⵠᐃⲆⲆᐃⵠ(.9 * ᐃ, ["#e4c027"]));
		ᐃΔ[Δ.ⵠᐃⵠΔⲆⵠΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⵠᐃⲆⲆᐃⵠ(.9 * ᐃ, ["#D8E57F"]));
		ᐃΔ[Δ.ⲆⲆᐃΔΔⲆΔ] = [];
		ᐃΔ[Δ.ⲆⲆᐃΔΔⲆΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔⲆⵠᐃⲆᐃ(ᐃ * .42, ᐃᐃΔⲆⵠ, [ⵠ[254], "#515C57", "#3A4942", "#68736F", ⵠ[92], ⵠ[167], ⵠ[46], "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
		ᐃΔ[Δ.ⲆⲆᐃΔΔⲆΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔⲆⵠᐃⲆᐃ(.42 * ᐃ, ⲆᐃΔΔⲆ, [ⵠ[254], "#485E66", ⵠ[389], "#60757D", ⵠ[92], ⵠ[167], ⵠ[46], ⵠ[389], "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
		ᐃΔ[Δ.ⲆⲆᐃᐃᐃΔⲆ] = ᐃⵠᐃ(ΔⵠⵠⵠΔⲆΔΔⵠ(1 * ᐃ, [ⵠ[544], ⵠ[502], "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
		ᐃΔ[Δ.ΔΔⵠᐃⵠᐃⲆ] = [];
		ᐃΔ[Δ.ΔΔⵠᐃⵠᐃⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃⵠΔⵠᐃᐃ(.5 * ᐃ, ⵠⲆⵠⵠΔ, [ⵠ[254], ⵠ[369], ⵠ[463], "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
		ᐃΔ[Δ.ΔΔⵠᐃⵠᐃⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃⵠΔⵠᐃᐃ(.5 * ᐃ, true, [ⵠ[254], ⵠ[23], ⵠ[443], "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
		ᐃΔ[Δ.ⵠΔᐃΔᐃΔⲆ] = [];
		ᐃΔ[Δ.ⵠΔᐃΔᐃΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃⵠⵠᐃⵠᐃ(ᐃ * .5, true, [ⵠ[254], ⵠ[369], ⵠ[463], "#c0c0c0", "#4f4f4f", "#6c6c6c", ⵠ[490]]));
		ᐃΔ[Δ.ⵠΔᐃΔᐃΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃⵠⵠᐃⵠᐃ(.5 * ᐃ, true, [ⵠ[254], ⵠ[23], ⵠ[443], "#60757d", "#152229", "#0c1113", "#0c1113"]));
		ᐃΔ[Δ.ΔⵠΔⲆΔⵠⵠ] = ᐃⵠᐃ(ᐃΔΔΔᐃΔⵠᐃⲆ(ᐃ * .8, ⲆⵠΔᐃⵠ, [ⵠ[463], ⵠ[369]]));
		ᐃΔ[Δ.ⵠⵠᐃⵠᐃⲆⵠ] = ΔΔᐃⵠ(ΔᐃΔⲆ, [{
			f: ΔⲆⲆᐃⵠⲆⲆ,
			x: 0,
			y: 0,
			a: 1,
			r: Math.PI / 2.5,
			c: [ⵠ[539], ⵠ[86]]
		}], .3, ["#494949", "#5b5858", "#3d3b3b"], ⲆΔΔΔ);
		ᐃΔ[Δ.ⲆⵠᐃⲆⲆ] = [];
		ᐃΔ[Δ.ⲆⵠᐃⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔⲆⵠΔⵠᐃ(1 * ᐃ, true, [ⵠ[254], ⵠ[474], ⵠ[285], "#261912", "#eee6c5", "#d1c599", ⵠ[474], ⵠ[285], "#86509b", "#703a99"]));
		ᐃΔ[Δ.ⲆⵠᐃⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔⲆⵠΔⵠᐃ(ΔᐃΔⲆ * ᐃ, true, [ⵠ[254], ⵠ[538], ⵠ[489], "#052120", "#104d5b", "#0b424f", ⵠ[538], ⵠ[489], "#2b0b4a", "#23073e"]));
		ᐃΔ[Δ.ⵠⲆⲆⲆΔⲆΔ] = [];
		ᐃΔ[Δ.ⵠⲆⲆⲆΔⲆΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⵠⵠΔᐃΔΔ(ᐃ * 1, true, [ⵠ[254], ⵠ[474], ⵠ[285], "#261912", "#eee6c5", "#d1c599", ⵠ[474], ⵠ[285], "#86509b", "#703a99"]));
		ᐃΔ[Δ.ⵠⲆⲆⲆΔⲆΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⵠⵠΔᐃΔΔ(ᐃ * 1, ⲆᐃΔΔⲆ, [ⵠ[254], ⵠ[538], ⵠ[489], "#052120", "#104d5b", "#083b37", ⵠ[538], ⵠ[489], "#2b0b4a", "#23073e"]));
		ᐃΔ[Δ.ΔᐃⵠⲆᐃ] = [];
		ᐃΔ[Δ.ΔᐃⵠⲆᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ⲆΔᐃᐃⵠⲆⲆ(ᐃ * .7, true, [ⵠ[254], ⵠ[373], ⵠ[126], ⵠ[394], ⵠ[432], ⵠ[432], ⵠ[352], ⵠ[349], ⵠ[131]])));
		ᐃΔ[Δ.ΔᐃⵠⲆᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ⲆΔᐃᐃⵠⲆⲆ(.7 * ᐃ, ⵠΔⲆⵠⲆ, [ⵠ[254], ⵠ[538], ⵠ[489], ⵠ[70], "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
		ᐃΔ[Δ.ⲆⲆⵠΔⲆ] = [];
		ᐃΔ[Δ.ⲆⲆⵠΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ⵠⵠΔⲆⲆΔΔ(ᐃ * .7, ΔᐃⲆⵠΔ, [ⵠ[254], ⵠ[373], ⵠ[126], "#765d42", ⵠ[349], ⵠ[131]])));
		ᐃΔ[Δ.ⲆⲆⵠΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ᐃⵠΔⲆ, ⵠⵠΔⲆⲆΔΔ(.7 * ᐃ, true, [ⵠ[254], ⵠ[538], ⵠ[489], "#0e4d49", "#1a6c67", "#07322f"])));
		ᐃΔ[Δ.ⲆΔΔⵠⵠ] = [];
		ᐃΔ[Δ.ⲆΔΔⵠⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ⲆᐃⵠⵠⲆⲆᐃ(ᐃ * .65, ⵠⲆⵠⵠΔ, [ⵠ[254], ⵠ[539], ⵠ[86], ⵠ[349], ⵠ[131], "#7a7575", "#454749", "#8c8787", ⵠ[369], ⵠ[463], "#aaa6a6"])));
		ᐃΔ[Δ.ⲆΔΔⵠⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ΔⲆΔⲆ, ⲆᐃⵠⵠⲆⲆᐃ(.65 * ᐃ, true, [ⵠ[254], ⵠ[16], ⵠ[422], "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", ⵠ[23], ⵠ[443], "#546e78"])));
		ᐃΔ[Δ.ᐃⵠᐃΔΔ] = [];
		ᐃΔ[Δ.ᐃⵠᐃΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ⵠᐃΔⲆᐃⵠⵠ(.67 * ᐃ, ⵠⲆⵠⵠΔ, [ⵠ[254], ⵠ[345], ⵠ[318], "#a69e39", "#9c8828", "#bab143", ⵠ[411], ⵠ[479], "#d2ca59"])));
		ᐃΔ[Δ.ᐃⵠᐃΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ᐃⲆᐃΔ, ⵠᐃΔⲆᐃⵠⵠ(ᐃ * .67, true, [ⵠ[250], ⵠ[360], ⵠ[409], "#33916d", "#197c62", "#3eab81", ⵠ[197], ⵠ[222], "#52be94"])));
		ᐃΔ[Δ.ΔⵠⵠⵠΔ] = [];
		ᐃΔ[Δ.ΔⵠⵠⵠΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ΔⲆΔⲆ, ΔⵠΔⵠⵠⵠⲆ(ᐃ * .67, ᐃΔⲆΔᐃ, [ⵠ[254], ⵠ[376], ⵠ[293], "#4ba8b4", "#198a82", "#6ccad7", ⵠ[192], ⵠ[133], "#7bd9e6"])));
		ᐃΔ[Δ.ΔⵠⵠⵠΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ΔⵠΔⵠⵠⵠⲆ(.67 * ᐃ, ⵠΔⲆⵠⲆ, [ⵠ[254], ⵠ[138], ⵠ[326], "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", ⵠ[26], ⵠ[182]])));
		ᐃΔ[Δ.ⵠᐃᐃᐃⲆ] = [];
		ᐃΔ[Δ.ⵠᐃᐃᐃⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(Δⵠⵠᐃ, ΔᐃⵠⲆᐃᐃⲆ(.67 * ᐃ, true, [ⵠ[254], ⵠ[376], ⵠ[293], "#9443b1", "#6f1988", "#a752c6", "#9e35be", ⵠ[121], ⵠ[10]])));
		ᐃΔ[Δ.ⵠᐃᐃᐃⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ᐃⲆΔΔ, ΔᐃⵠⲆᐃᐃⲆ(ᐃ * .67, ΔⲆΔⵠⲆ, [ⵠ[254], ⵠ[138], ⵠ[326], "#6e43bf", "#673fa4", "#784bcc", "#845bc6", ⵠ[579], "#966be7"])));
		ᐃΔ[Δ.ⲆᐃⵠⲆⲆ] = [];
		ᐃΔ[Δ.ⲆᐃⵠⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ᐃᐃⲆⲆΔᐃⲆ(ᐃ * 1, true, [ⵠ[254], "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
		ᐃΔ[Δ.ⲆᐃⵠⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ⲆᐃᐃΔ, ᐃᐃⲆⲆΔᐃⲆ(ᐃ * ΔΔΔᐃ, true, [ⵠ[254], "#1c2026", ⵠ[326], "#7dc6d9", "#6cbacf", ⵠ[141], "#49b2cf", ⵠ[141]])));
		ᐃΔ[Δ.ⲆΔΔᐃΔ] = [];
		ᐃΔ[Δ.ⲆΔΔᐃΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ⲆⲆⵠⵠⵠ(ⵠⲆⲆ * ᐃ, ᐃΔⲆΔᐃ, [ⵠ[254], ⵠ[539], ⵠ[86], ⵠ[369], ⵠ[463]])));
		ᐃΔ[Δ.ⲆΔΔᐃΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ⲆⲆⵠⵠⵠ(ΔΔⵠΔ * ᐃ, true, [ⵠ[250], ⵠ[360], ⵠ[409], ⵠ[23], ⵠ[443]])));
		ᐃΔ[Δ.ΔΔᐃⲆᐃ] = [];
		ᐃΔ[Δ.ΔΔᐃⲆᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ᐃΔⵠⲆᐃᐃΔ(.5 * ᐃ, true, [ⵠ[254], ⵠ[369], ⵠ[463]])));
		ᐃΔ[Δ.ΔΔᐃⲆᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ᐃΔⵠⲆᐃᐃΔ(ᐃ * .5, ΔⲆΔⵠⲆ, [ⵠ[250], ⵠ[23], ⵠ[443]])));
		ᐃΔ[Δ.ⲆᐃΔⵠⲆ] = [];
		ᐃΔ[Δ.ⲆᐃΔⵠⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ΔΔᐃΔ, ΔΔⲆⵠᐃⵠⵠ(ⵠᐃⵠΔ * ᐃ, ⲆᐃΔΔⲆ, [ⵠ[254], "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
		ᐃΔ[Δ.ⲆᐃΔⵠⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ᐃⵠΔⵠ, ΔΔⲆⵠᐃⵠⵠ(ᐃ * 1, ⵠΔⲆⵠⲆ, [ⵠ[254], "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
		ᐃΔ[Δ.Ⲇᐃᐃᐃᐃ] = [];
		ᐃΔ[Δ.Ⲇᐃᐃᐃᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ΔΔᐃΔ, ⲆⲆⵠⵠⵠ(ΔⵠⲆⲆ * ᐃ, ᐃᐃΔⲆⵠ, [ⵠ[254], ⵠ[345], ⵠ[318], ⵠ[411], ⵠ[479]])));
		ᐃΔ[Δ.Ⲇᐃᐃᐃᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ⲆⲆᐃⵠ, ⲆⲆⵠⵠⵠ(1 * ᐃ, true, [ⵠ[254], ⵠ[ᐃΔᐃᐃⲆ], ⵠ[422], ⵠ[197], ⵠ[222]])));
		ᐃΔ[Δ.ⵠΔⵠᐃᐃ] = [];
		ᐃΔ[Δ.ⵠΔⵠᐃᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ⲆⲆⵠⵠⵠ(1 * ᐃ, true, [ⵠ[254], ⵠ[376], ⵠ[293], ⵠ[192], ⵠ[133]])));
		ᐃΔ[Δ.ⵠΔⵠᐃᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(Δⵠⵠᐃ, ⲆⲆⵠⵠⵠ(ᐃᐃΔ * ᐃ, true, [ⵠ[254], ⵠ[138], ⵠ[326], ⵠ[182], ⵠ[26]])));
		ᐃΔ[Δ.ⲆᐃⵠΔⵠ] = [];
		ᐃΔ[Δ.ⲆᐃⵠΔⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ᐃⵠΔⲆ, ⲆⲆⵠⵠⵠ(ᐃ * ΔᐃⲆⲆ, true, [ⵠ[254], ⵠ[376], ⵠ[293], ⵠ[10], ⵠ[121]])));
		ᐃΔ[Δ.ⲆᐃⵠΔⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ⲆⲆⵠⵠⵠ(ᐃ * ᐃⲆΔ, ᐃⲆᐃⵠⵠ, [ⵠ[254], ⵠ[138], ⵠ[326], ⵠ[337], ⵠ[579]])));
		ᐃΔ[Δ.ⲆⲆⵠⲆΔ] = [];
		ᐃΔ[Δ.ⲆⲆⵠⲆΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⵠᐃⵠΔᐃⲆ(.55 * ᐃ, false, [ⵠ[520], ⵠ[108], ⵠ[59], "#3a3a3a"]));
		ᐃΔ[Δ.ⲆⲆⵠⲆΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⵠᐃⵠΔᐃⲆ(.55 * ᐃ, ᐃⲆⲆᐃᐃ, ["#080707", "#133d3c", ⵠ[476], "#1b2529"]));
		ᐃΔ[Δ.ᐃⵠΔΔᐃᐃΔ] = [];
		ᐃΔ[Δ.ᐃⵠΔΔᐃᐃΔ].push(ᐃⵠᐃ(ⵠⵠᐃⵠΔᐃⲆ(.8 * ᐃ, ᐃⵠⲆⲆᐃ, [ⵠ[520], ⵠ[108], ⵠ[59], "#3a3a3a"])));
		ᐃΔ[Δ.ᐃⵠΔΔᐃᐃΔ].push(ᐃⵠᐃ(ⵠⵠᐃⵠΔᐃⲆ(.8 * ᐃ, false, [ⵠ[520], "#9f7d17", "#dab33c", "#474545"])));
		ᐃΔ[Δ.ᐃⵠΔΔᐃᐃΔ].push(ᐃⵠᐃ(ⵠⵠᐃⵠΔᐃⲆ(ᐃ * .8, ᐃⲆⵠⵠⲆ, [ⵠ[520], "#73590d", "#a88a2c", "#2a2828"])));
		ᐃΔ[Δ.ⵠⲆᐃᐃⵠᐃᐃ] = [];
		ᐃΔ[Δ.ⵠⲆᐃᐃⵠᐃᐃ].push(ᐃΔ[Δ.ᐃⵠΔΔᐃᐃΔ][0]);
		ᐃΔ[Δ.ⵠⲆᐃᐃⵠᐃᐃ].push(ᐃΔ[Δ.ᐃⵠΔΔᐃᐃΔ][ⵠᐃⲆ]);
		ᐃΔ[Δ.ⵠⲆᐃᐃⵠᐃᐃ].push(ᐃΔ[Δ.ᐃⵠΔΔᐃᐃΔ][0]);
		ᐃΔ[Δ.ᐃⵠΔⲆᐃ] = [];
		ᐃΔ[Δ.ᐃⵠΔⲆᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⲆᐃⲆⵠΔⵠ(ᐃ * .06, ᐃⲆⲆΔⵠ, [ⵠ[520], ⵠ[59], ⵠ[108]]));
		ᐃΔ[Δ.ᐃⵠΔⲆᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⲆᐃⲆⵠΔⵠ(.06 * ᐃ, false, [ⵠ[250], ⵠ[476], "#133d3c"]));
		ᐃΔ[Δ.ΔΔⵠⲆᐃᐃⲆ] = [];
		ᐃΔ[Δ.ΔΔⵠⲆᐃᐃⲆ].push(ᐃⵠᐃ(ΔⲆᐃⲆⵠΔⵠ(ᐃ * .08, false, [ⵠ[520], ⵠ[59], ⵠ[108]])));
		ᐃΔ[Δ.ΔΔⵠⲆᐃᐃⲆ].push(ᐃⵠᐃ(ΔⲆᐃⲆⵠΔⵠ(ᐃ * .08, ΔⲆΔᐃΔ, [ⵠ[520], "#e2bd4e", "#a38018"])));
		ᐃΔ[Δ.ΔΔⵠⲆᐃᐃⲆ].push(ᐃⵠᐃ(ΔⲆᐃⲆⵠΔⵠ(.08 * ᐃ, ΔΔᐃⵠᐃ, [ⵠ[520], "#b0902e", "#634d09"])));
		ᐃΔ[Δ.ΔⵠᐃᐃⲆ] = ΔΔᐃⵠ(1.5, [{
			f: ⵠᐃᐃⲆⲆΔΔ,
			x: ⵠΔᐃᐃ,
			y: ΔⲆⲆ,
			a: ΔⲆᐃⲆ,
			r: ΔΔᐃ,
			c: [ⵠ[520], "#178a99", "#0a6372", "#03282e"]
		}], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9);
		ᐃΔ[Δ.ᐃⵠΔⵠⵠΔᐃ] = [];
		ᐃΔ[Δ.ᐃⵠΔⵠⵠΔᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⵠΔⲆⵠⵠ(.8 * ᐃ, true, [ⵠ[9], ⵠ[259]]));
		ᐃΔ[Δ.ᐃⵠΔⵠⵠΔᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⵠΔⲆⵠⵠ(.8 * ᐃ, true, ["#98ede3", "#94f2e7"]));
		ᐃΔ[Δ.ⲆⲆⵠᐃⲆΔⲆ] = [];
		ᐃΔ[Δ.ⲆⲆⵠᐃⲆΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠᐃⵠⲆⵠᐃⲆ(ᐃ * .8, ᐃⵠΔⲆⵠ, [ⵠ[435], ⵠ[279], "#418ba5", "#59b8ce"]));
		ᐃΔ[Δ.ⲆⲆⵠᐃⲆΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠᐃⵠⲆⵠᐃⲆ(ᐃ * .8, ᐃⲆᐃⵠⵠ, [ⵠ[95], ⵠ[147], "#3fa097", "#90ddd9"]));
		ᐃΔ[Δ.ΔΔΔⵠΔⵠⲆ] = [];
		ᐃΔ[Δ.ΔΔΔⵠΔⵠⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠΔⵠⵠⵠᐃΔ(.8 * ᐃ, ΔᐃΔΔᐃ, [ⵠ[435], ⵠ[279]]));
		ᐃΔ[Δ.ΔΔΔⵠΔⵠⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠΔⵠⵠⵠᐃΔ(ᐃ * .8, ᐃΔᐃⲆⵠ, [ⵠ[147], ⵠ[23]]));
		ᐃΔ[Δ.ⲆⵠⲆᐃᐃ] = [];
		ᐃΔ[Δ.ⲆⵠⲆᐃᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃⵠⵠᐃΔᐃΔ(ᐃ * .8, true, [ⵠ[ᐃⵠᐃΔΔⵠᐃ], ⵠ[259], "#1c2528", ⵠ[435], ⵠ[279], "#959da0", "#697072", "#929da0", "#afb9bc"]));
		ᐃΔ[Δ.ⲆⵠⲆᐃᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃⵠⵠᐃΔᐃΔ(ᐃ * .8, ᐃⲆᐃⵠⵠ, ["#98ede3", "#94f2e7", ⵠ[443], ⵠ[95], ⵠ[147], ⵠ[23], "#2d484f", "#546d6d", "#597b84"]));
		ᐃΔ[Δ.ΔⲆⵠΔⲆⵠᐃ] = [];
		ᐃΔ[Δ.ΔⲆⵠΔⲆⵠᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⲆⵠᐃΔΔⵠ;
		ᐃΔ[Δ.ΔⲆⵠΔⲆⵠᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⵠⲆᐃΔⵠᐃ;
		ᐃΔ[Δ.ᐃΔᐃⵠⵠⵠⵠ] = [];
		ᐃΔ[Δ.ᐃΔᐃⵠⵠⵠⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃᐃᐃⵠᐃΔⲆ;
		ᐃΔ[Δ.ᐃΔᐃⵠⵠⵠⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃΔΔΔᐃΔ;
		ᐃΔ[Δ.ᐃⵠΔΔⵠⵠΔ] = [];
		ᐃΔ[Δ.ᐃⵠΔΔⵠⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆᐃⲆΔⵠᐃᐃ;
		ᐃΔ[Δ.ᐃⵠΔΔⵠⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃΔⲆΔⵠⲆ;
		ᐃΔ[Δ.ᐃᐃⲆᐃΔ] = [];
		ᐃΔ[Δ.ᐃᐃⲆᐃΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔΔⵠⲆⲆⵠⲆ;
		ᐃΔ[Δ.ᐃᐃⲆᐃΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠⲆΔᐃᐃᐃ;
		ᐃΔ[Δ.ⵠⵠᐃⵠⵠΔᐃ] = [];
		ᐃΔ[Δ.ⵠⵠᐃⵠⵠΔᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⵠⵠⲆⵠᐃⲆ;
		ᐃΔ[Δ.ⵠⵠᐃⵠⵠΔᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⲆⵠΔᐃΔ;
		ᐃΔ[Δ.ⵠΔᐃΔΔ] = [];
		ᐃΔ[Δ.ⵠΔᐃΔΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔΔᐃⲆⲆΔⲆ;
		ᐃΔ[Δ.ⵠΔᐃΔΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃΔⵠΔΔᐃⲆ;
		ᐃΔ[Δ.ⵠⵠΔⵠᐃᐃᐃ] = [];
		ᐃΔ[Δ.ⵠⵠΔⵠᐃᐃᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⲆⵠⵠⵠᐃᐃ;
		ᐃΔ[Δ.ⵠⵠΔⵠᐃᐃᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠΔᐃᐃⲆⵠᐃ;
		ᐃΔ[Δ.ΔⲆⵠΔⲆ] = [];
		ᐃΔ[Δ.ΔⲆⵠΔⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆᐃⲆⲆⲆΔⵠ;
		ᐃΔ[Δ.ΔⲆⵠΔⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⵠⲆΔΔΔ;
		ᐃΔ[Δ.ᐃᐃⵠᐃⲆΔᐃ] = [];
		ᐃΔ[Δ.ᐃᐃⵠᐃⲆΔᐃ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠᐃΔΔΔ;
		ᐃΔ[Δ.ᐃᐃⵠᐃⲆΔᐃ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠⵠⵠⵠΔⲆ;
		ᐃΔ[Δ.ᐃΔⲆᐃΔ] = [];
		ᐃΔ[Δ.ᐃΔⲆᐃΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃᐃΔᐃᐃΔⵠ;
		ᐃΔ[Δ.ᐃΔⲆᐃΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⲆⲆⵠΔᐃΔ;
		ᐃΔ[Δ.ⲆΔⵠᐃⵠΔⲆ] = [];
		ᐃΔ[Δ.ⲆΔⵠᐃⵠΔⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⲆΔΔⵠⲆᐃ;
		ᐃΔ[Δ.ⲆΔⵠᐃⵠΔⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠⲆⲆⵠⵠⲆΔ;
		ᐃΔ[Δ.ⵠⵠᐃΔΔ] = [];
		ᐃΔ[Δ.ⵠⵠᐃΔΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔⲆᐃΔᐃΔᐃ;
		ᐃΔ[Δ.ⵠⵠᐃΔΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ᐃᐃⵠⲆΔⵠⲆ;
		ᐃΔ[Δ.ΔᐃⲆᐃᐃⵠΔ] = [];
		ᐃΔ[Δ.ΔᐃⲆᐃᐃⵠΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ᐃⵠΔⲆᐃⲆΔ;
		ᐃΔ[Δ.ΔᐃⲆᐃᐃⵠΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⲆΔⵠⲆⵠ;
		ᐃΔ[Δ.ⵠⲆⲆΔⲆ] = [];
		ᐃΔ[Δ.ⵠⲆⲆΔⲆ][Δ.ⵠΔⵠ] = ⵠᐃ.ⲆΔⲆᐃⲆᐃⵠ;
		ᐃΔ[Δ.ⵠⲆⲆΔⲆ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⵠᐃⵠⵠⵠ;
		ᐃΔ[Δ.ᐃⲆΔᐃⵠ] = [];
		ᐃΔ[Δ.ᐃⲆΔᐃⵠ][Δ.ⵠΔⵠ] = ⵠᐃ.ⵠⲆⵠΔΔⲆⲆ;
		ᐃΔ[Δ.ᐃⲆΔᐃⵠ][Δ.ⲆⲆⵠ] = ⵠᐃ.ΔⲆΔΔᐃΔⲆ;
		ᐃΔ[Δ.ΔᐃΔΔⲆΔⲆ] = ⵠᐃ.ΔᐃΔΔⲆΔⲆ;
		ᐃΔ[Δ.ᐃᐃⲆΔⲆ] = [], ᐃΔ[Δ.ᐃᐃⲆΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠΔΔΔⲆⵠⲆ(ᐃ * .75, true, [ⵠ[254], ⵠ[298], ⵠ[230], ⵠ[378]]));
		ᐃΔ[Δ.ᐃᐃⲆΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠΔΔΔⲆⵠⲆ(ᐃ * .75, true, [ⵠ[250], ⵠ[ᐃᐃΔᐃᐃⲆⲆ], ⵠ[384], ⵠ[367]]));
		ᐃΔ[Δ.ⲆⲆⵠᐃΔⲆⵠ] = ᐃⵠᐃ(ⲆᐃⲆᐃⲆⵠⲆ(ᐃ * .3, [ⵠ[216], ⵠ[466]], ⵠᐃⲆ));
		ᐃΔ[Δ.ᐃᐃᐃⲆᐃᐃᐃ] = ᐃⵠᐃ(ⲆᐃⲆᐃⲆⵠⲆ(ᐃ * .3, [ⵠ[216], ⵠ[466]], 1));
		ᐃΔ[Δ.ᐃⵠΔⲆᐃⵠᐃ] = ᐃⵠᐃ(ⲆᐃΔⵠΔᐃⲆⲆᐃ(ᐃ * .6, [ⵠ[216], ⵠ[466]]));
		ᐃΔ[Δ.ᐃⵠᐃⲆⲆⵠⲆ] = [];
		ᐃΔ[Δ.ᐃⵠᐃⲆⲆⵠⲆ].push(ᐃⵠᐃ(ΔΔΔⵠⲆ(.7 * ᐃ, [ⵠ[216], ⵠ[466], "#165b2b", ⵠ[298], ⵠ[466]], 0)));
		ᐃΔ[Δ.ᐃⵠᐃⲆⲆⵠⲆ].push(ᐃⵠᐃ(ΔΔΔⵠⲆ(ᐃ * .7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], ⵠⵠⵠΔ)));
		ᐃΔ[Δ.ᐃⵠᐃⲆⲆⵠⲆ].push(ᐃⵠᐃ(ΔΔΔⵠⲆ(.7 * ᐃ, ["#092a14", "#186733", "#124a23", ⵠ[298], "#1b6735"], 0)));
		ᐃΔ[Δ.ΔΔⵠΔΔⲆᐃ] = [];
		var ᐃᐃ = ᐃⵠᐃ(ΔΔΔⵠⲆ(.7 * ᐃ, [ⵠ[286], ⵠ[114], ⵠ[286], "#2e2410", ⵠ[114]], 0));
		ᐃΔ[Δ.ΔΔⵠΔΔⲆᐃ].push(ᐃᐃ);
		ᐃΔ[Δ.ΔΔⵠΔΔⲆᐃ].push(ᐃᐃ);
		ᐃΔ[Δ.ΔΔⵠΔΔⲆᐃ].push(ᐃᐃ);
		ᐃΔ[Δ.ΔᐃᐃⵠⲆⲆⵠ] = [];
		ᐃΔ[Δ.ΔᐃᐃⵠⲆⲆⵠ].push(ᐃⵠᐃ(ΔΔΔⵠⲆ(ᐃ * .7, [ⵠ[216], ⵠ[466], "#165b2b", ⵠ[298], ⵠ[466]], 1)));
		ᐃΔ[Δ.ΔᐃᐃⵠⲆⲆⵠ].push(ᐃⵠᐃ(ΔΔΔⵠⲆ(.7 * ᐃ, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
		ᐃΔ[Δ.ΔᐃᐃⵠⲆⲆⵠ].push(ᐃⵠᐃ(ΔΔΔⵠⲆ(ᐃ * .7, ["#092a14", "#186733", "#124a23", ⵠ[298], "#1b6735"], 1)));
		ᐃΔ[Δ.ⵠⲆⵠⵠⲆΔⵠ] = ᐃⵠᐃ(ⵠΔᐃⲆᐃⵠⵠⵠⲆ(.3 * ᐃ, [ⵠ[ⲆᐃⲆⵠⲆ]]));
		ᐃΔ[Δ.ΔΔⵠΔᐃⵠⲆ] = ᐃⵠᐃ(ⵠᐃᐃᐃⵠΔⵠᐃᐃ(ᐃ * .3, [ⵠ[ⲆᐃᐃⵠΔ]]));
		ᐃΔ[Δ.ⵠΔⵠⵠⵠⵠⲆ] = ᐃⵠᐃ(ⲆᐃⲆᐃⲆⵠⲆ(ᐃ * .4, [ⵠ[398], ⵠ[100]], 0));
		ᐃΔ[Δ.ΔⵠΔⲆⵠⵠⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(Math.PI / ᐃᐃᐃᐃⵠ, ΔⲆⲆⲆᐃⲆᐃΔⵠ(ᐃ * .2, [ⵠ[100]])));
		ᐃΔ[Δ.ΔΔΔⲆΔ] = [], ᐃΔ[Δ.ΔΔΔⲆΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⵠⵠΔⵠⵠΔ(ᐃ * .85, ⵠⲆΔᐃΔ, [ⵠ[254], "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
		ᐃΔ[Δ.ΔΔΔⲆΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⵠⵠΔⵠⵠΔ(.85 * ᐃ, ΔᐃⲆⵠΔ, [ⵠ[254], "#4e4e93", "#393977", "#444187", ⵠ[164], "#277a74", "#7da8db"]));
		ᐃΔ[Δ.ᐃⵠᐃᐃᐃⵠΔ] = [];
		ᐃΔ[Δ.ᐃⵠᐃᐃᐃⵠΔ].push(ᐃⵠᐃ(ΔΔΔⵠⲆ(.7 * ᐃ, [ⵠ[286], ⵠ[114], ⵠ[286], "#2e2410", ⵠ[114]], 1)));
		ᐃΔ[Δ.ᐃⵠᐃᐃᐃⵠΔ].push(ᐃⵠᐃ(ΔΔΔⵠⲆ(.7 * ᐃ, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
		ᐃΔ[Δ.ᐃⵠᐃᐃᐃⵠΔ].push(ᐃⵠᐃ(ΔΔΔⵠⲆ(ᐃ * .7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
		ᐃΔ[Δ.ⵠΔⲆᐃⲆ] = [], ᐃΔ[Δ.ⵠΔⲆᐃⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⲆⲆᐃᐃⲆΔ(ᐃ * .37, true, [ⵠ[79], ⵠ[38], ⵠ[524]]));
		ᐃΔ[Δ.ⵠΔⲆᐃⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⲆⲆᐃᐃⲆΔ(.37 * ᐃ, ⲆⵠΔᐃⵠ, ["#1b1e30", "#161921", "#252f3e"]));
		ᐃΔ[Δ.ⲆᐃⲆⵠΔ] = [], ᐃΔ[Δ.ⲆᐃⲆⵠΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔⲆⲆᐃΔΔ(.17 * ᐃ, true, [ⵠ[79], ⵠ[38], ⵠ[524], "#1b1a25", "#d62c0e"]));
		ᐃΔ[Δ.ⲆᐃⲆⵠΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔⲆⲆᐃΔΔ(ᐃ * .17, ⲆⵠΔᐃⵠ, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
		ᐃΔ[Δ.ⵠⵠΔⲆⲆ] = [], ᐃΔ[Δ.ⵠⵠΔⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃⲆⲆⲆⲆⲆᐃ(ᐃ * .55, ⵠΔⲆⵠⲆ, [ⵠ[30], "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
		ᐃΔ[Δ.ⵠⵠΔⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃⲆⲆⲆⲆⲆᐃ(.55 * ᐃ, ᐃΔᐃⵠⲆ, [ⵠ[30], "#216661", "#134945", "#2b8079", "#17504c"], 1));
		ᐃΔ[Δ.ΔΔᐃΔΔ] = [], ᐃΔ[Δ.ΔΔᐃΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃⲆⲆⲆⲆⲆᐃ(ᐃ * .55, true, [ⵠ[30], "#8c7654", ⵠ[ⲆⵠᐃⵠⲆ], "#a88e6c", ⵠ[ⲆᐃᐃⲆᐃ], "#705845"], ⲆⵠⲆⲆ));
		ᐃΔ[Δ.ΔΔᐃΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃⲆⲆⲆⲆⲆᐃ(ᐃ * .55, ⲆⵠΔᐃⵠ, [ⵠ[30], "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], ᐃⵠⵠⲆ));
		ᐃΔ[Δ.ᐃᐃⲆⵠΔ] = [], ᐃΔ[Δ.ᐃᐃⲆⵠΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔⲆΔⵠᐃⲆ(ᐃ * .2, true, [ⵠ[254], ⵠ[488], ⵠ[55], ⵠ[85], "#49B669", "#19994C", "#71C187"]));
		ᐃΔ[Δ.ᐃᐃⲆⵠΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔⲆΔⵠᐃⲆ(.2 * ᐃ, true, [ⵠ[289], "#114933", "#1b6656", ⵠ[56], "#3db76f", "#118254", "#40c696"]));
		ᐃΔ[Δ.ⵠⲆⲆᐃΔ] = [], ᐃΔ[Δ.ⵠⲆⲆᐃΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔⲆΔⵠᐃⲆ(ᐃ * .2, true, [ⵠ[254], ⵠ[488], ⵠ[55], ⵠ[85], "#C45727", "#994617", "#DB9358"]));
		ᐃΔ[Δ.ⵠⲆⲆᐃΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔⲆΔⵠᐃⲆ(.2 * ᐃ, ᐃᐃᐃⵠⵠ, [ⵠ[289], "#114933", "#1b6656", ⵠ[56], "#69b681", "#509a75", "#7ec387"]));
		ᐃΔ[Δ.ⵠⵠⲆΔΔ] = [], ᐃΔ[Δ.ⵠⵠⲆΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔⲆΔⵠᐃⲆ(ᐃ * .2, ⵠΔΔⵠᐃ, [ⵠ[254], ⵠ[488], ⵠ[55], ⵠ[85], "#2792C1", "#196599", "#59C0D8"]));
		ᐃΔ[Δ.ⵠⵠⲆΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔⲆΔⵠᐃⲆ(ᐃ * .2, true, [ⵠ[289], "#114933", "#1b6656", ⵠ[56], "#19899e", "#16688b", "#4ea3c7"]));
		ᐃΔ[Δ.ΔⲆⲆᐃⲆ] = [], ᐃΔ[Δ.ΔⲆⲆᐃⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⲆⲆᐃⵠᐃΔ(.24 * ᐃ, ⵠⲆΔᐃΔ, [ⵠ[91], "#b03431", "#94312d", "#bd3c33", ⵠ[300]]));
		ᐃΔ[Δ.ΔⲆⲆᐃⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⲆⲆᐃⵠᐃΔ(ᐃ * .24, ⵠΔⲆⵠⲆ, [ⵠ[91], "#1b103e", "#190f3b", "#261a4e", ⵠ[70]]));
		ᐃΔ[Δ.ⵠⵠΔⵠⵠ] = [], ᐃΔ[Δ.ⵠⵠΔⵠⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔⲆΔᐃⵠⵠ(ᐃ * .32, ᐃᐃΔⲆⵠ, [ⵠ[254], "#cae9eb", "#75bcae", ⵠ[ⵠⲆΔ], "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
		ᐃΔ[Δ.ⵠⵠΔⵠⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔⲆΔᐃⵠⵠ(ᐃ * .32, ΔᐃΔΔᐃ, [ⵠ[254], "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
		ᐃΔ[Δ.ΔᐃⵠΔΔ] = [];
		ᐃΔ[Δ.ΔᐃⵠΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ⵠⵠΔⵠ, ⵠⲆⵠᐃᐃⲆⲆ(ᐃ * .9, ᐃⵠΔⲆⵠ, [ⵠ[254], "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
		ᐃΔ[Δ.ΔᐃⵠΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ᐃΔⵠⲆ, ⵠⲆⵠᐃᐃⲆⲆ(.9 * ᐃ, true, [ⵠ[254], "#18332e", "#112320", ⵠ[141], "#49b2cf"])));
		ᐃΔ[Δ.ⵠⲆⵠᐃⲆΔⲆ] = [];
		ᐃΔ[Δ.ⵠⲆⵠᐃⲆΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ⵠⲆⵠᐃᐃⲆⲆ(ᐃ * 1, true, [undefined, ΔⲆΔⵠᐃ, undefined, "#c8efef", "#c8efef"])));
		ᐃΔ[Δ.ⵠⲆⵠᐃⲆΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ⵠⲆⵠᐃᐃⲆⲆ(ΔⲆᐃᐃ * ᐃ, ᐃΔᐃⲆⵠ, [undefined, ⲆⲆⵠᐃΔ, ⵠⵠⲆᐃᐃ, ⵠ[141], ⵠ[141]])));
		ᐃΔ[Δ.ᐃᐃⲆᐃⲆᐃᐃ] = [];
		ᐃΔ[Δ.ᐃᐃⲆᐃⲆᐃᐃ].push(ᐃⵠᐃ(ᐃⵠⲆΔᐃΔᐃ(ᐃ * .3, true, [ⵠ[254], ⵠ[257], ⵠ[392], "#704821", ⵠ[228], ⵠ[Ⲇⵠᐃᐃⵠⵠⵠ]], 0)));
		ᐃΔ[Δ.ᐃᐃⲆᐃⲆᐃᐃ].push(ᐃⵠᐃ(ᐃⵠⲆΔᐃΔᐃ(.3 * ᐃ, true, [ⵠ[254], ⵠ[257], ⵠ[392], "#704821", ⵠ[228], ⵠ[18]], ⵠΔᐃ)));
		ᐃΔ[Δ.ᐃᐃⲆᐃⲆᐃᐃ].push(ᐃⵠᐃ(ᐃⵠⲆΔᐃΔᐃ(ᐃ * .3, true, [ⵠ[254], ⵠ[257], ⵠ[392], "#704821", ⵠ[228], ⵠ[238]], 1)));
		ᐃΔ[Δ.ⵠⲆⵠⵠⲆᐃⲆ] = [];
		ᐃΔ[Δ.ⵠⲆⵠⵠⲆᐃⲆ].push(ᐃⵠᐃ(ⲆⲆⵠⲆᐃΔⵠ(ᐃ * .7, [ⵠ[257], ⵠ[392], "#85592c", ⵠ[18]], 0)));
		ᐃΔ[Δ.ⵠⲆⵠⵠⲆᐃⲆ].push(ᐃⵠᐃ(ⲆⲆⵠⲆᐃΔⵠ(ᐃ * .7, [ⵠ[257], ⵠ[392], "#85592c", ⵠ[Ⲇⵠᐃᐃⵠⵠⵠ]], 1)));
		ᐃΔ[Δ.ⵠⲆⵠⵠⲆᐃⲆ].push(ᐃⵠᐃ(ⲆⲆⵠⲆᐃΔⵠ(.7 * ᐃ, [ⵠ[257], ⵠ[392], "#85592c", ⵠ[18]], 1)));
		ᐃΔ[Δ.ΔᐃΔⲆⵠⵠΔ] = [];
		ᐃΔ[Δ.ΔᐃΔⲆⵠⵠΔ].push(ᐃⵠᐃ(ᐃⵠΔΔⵠᐃᐃ(.4 * ᐃ, [ⵠ[254], ⵠ[257], ⵠ[392], ⵠ[18]], 0, 1)));
		ᐃΔ[Δ.ΔᐃΔⲆⵠⵠΔ].push(ᐃⵠᐃ(ᐃⵠΔΔⵠᐃᐃ(.4 * ᐃ, [ⵠ[254], ⵠ[257], ⵠ[392], ⵠ[18]], ΔᐃⵠⲆ, ⵠⲆⲆ)));
		ᐃΔ[Δ.ΔᐃΔⲆⵠⵠΔ].push(ᐃⵠᐃ(ᐃⵠΔΔⵠᐃᐃ(.4 * ᐃ, [ⵠ[254], ⵠ[257], ⵠ[392], ⵠ[238]], 1, ⵠⲆΔⲆ)));
		ᐃΔ[Δ.ᐃΔⵠⵠⵠⲆⲆ] = [];
		ᐃΔ[Δ.ᐃΔⵠⵠⵠⲆⲆ].push(ᐃⵠᐃ(ᐃⵠΔΔⵠᐃᐃ(ᐃ * .4, [ⵠ[254], ⵠ[257], ⵠ[392], ⵠ[18]], ΔⲆⲆ, 0)));
		ᐃΔ[Δ.ᐃΔⵠⵠⵠⲆⲆ].push(ᐃⵠᐃ(ᐃⵠΔΔⵠᐃᐃ(ᐃ * .4, [ⵠ[254], ⵠ[257], ⵠ[392], ⵠ[ⲆᐃᐃᐃΔⲆΔ]], ΔⲆᐃⲆ, ⵠⵠⲆⵠ)));
		ᐃΔ[Δ.ᐃΔⵠⵠⵠⲆⲆ].push(ᐃⵠᐃ(ᐃⵠΔΔⵠᐃᐃ(.4 * ᐃ, [ⵠ[254], ⵠ[257], ⵠ[392], ⵠ[238]], 1, 0)));
		ᐃΔ[Δ.ΔΔΔᐃΔ] = [];
		ᐃΔ[Δ.ΔΔΔᐃΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ΔⲆΔⲆ, ᐃΔⲆᐃᐃ(ᐃ * .7, true, [ⵠ[254], "#6d5041", "#4f3d35", ⵠ[369], ⵠ[463], "#757575"])));
		ᐃΔ[Δ.ΔΔΔᐃΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ᐃΔⲆᐃᐃ(ᐃ * .7, true, [ⵠ[254], ⵠ[ᐃᐃΔᐃᐃⲆⲆ], ⵠ[422], ⵠ[23], ⵠ[443], "#274352"])));
		ᐃΔ[Δ.ⲆᐃⲆⲆᐃ] = [];
		ᐃΔ[Δ.ⲆᐃⲆⲆᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ᐃΔⲆᐃᐃ(.7 * ᐃ, ⵠⲆⵠⵠΔ, [ⵠ[254], ⵠ[345], ⵠ[318], ⵠ[411], ⵠ[479], "#ada437"])));
		ᐃΔ[Δ.ⲆᐃⲆⲆᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ⲆΔᐃⲆ, ᐃΔⲆᐃᐃ(.7 * ᐃ, ΔᐃⲆⵠΔ, [ⵠ[254], ⵠ[360], ⵠ[409], ⵠ[197], ⵠ[222], "#32916c"])));
		ᐃΔ[Δ.ᐃⲆᐃⲆᐃ] = [];
		ᐃΔ[Δ.ᐃⲆᐃⲆᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ᐃΔⲆᐃᐃ(ᐃ * .7, ⲆⵠΔᐃⵠ, [ⵠ[254], ⵠ[376], ⵠ[293], ⵠ[192], ⵠ[133], "#42aab8"])));
		ᐃΔ[Δ.ᐃⲆᐃⲆᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(ᐃΔⲆΔ, ᐃΔⲆᐃᐃ(ᐃ * .7, ΔᐃΔΔᐃ, [ⵠ[254], ⵠ[138], ⵠ[326], ⵠ[182], ⵠ[26], "#49bdc6"])));
		ᐃΔ[Δ.ⵠⵠΔᐃΔ] = [];
		ᐃΔ[Δ.ⵠⵠΔᐃΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ᐃΔⲆᐃᐃ(.7 * ᐃ, ΔⲆΔⵠⲆ, [ⵠ[254], ⵠ[376], ⵠ[293], ⵠ[10], ⵠ[121], "#9641b5"])));
		ᐃΔ[Δ.ⵠⵠΔᐃΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3, ᐃΔⲆᐃᐃ(ᐃ * .7, true, [ⵠ[254], ⵠ[138], ⵠ[326], ⵠ[337], ⵠ[579], "#6f45c2"])));
		ᐃΔ[Δ.ⲆΔⵠᐃᐃΔΔ] = [];
		ᐃΔ[Δ.ⲆΔⵠᐃᐃΔΔ].push(ᐃⵠᐃ(ⵠⲆⲆⵠᐃᐃᐃ(.7 * ᐃ, ["#3b330d", "#b5a118", "#c8ac16"], Δⵠⵠⵠ)));
		ᐃΔ[Δ.ⲆΔⵠᐃᐃΔΔ].push(ᐃⵠᐃ(ⵠⲆⲆⵠᐃᐃᐃ(ᐃ * .7, ["#524712", "#c7b11c", "#d9ba18"], 0)));
		ᐃΔ[Δ.ⲆΔⵠᐃᐃΔΔ].push(ᐃⵠᐃ(ⵠⲆⲆⵠᐃᐃᐃ(ᐃ * .7, ["#2a2409", "#9f8e14", "#ad9511"], 0)));
		ᐃΔ[Δ.ⵠⲆⵠᐃᐃⵠⲆ] = ᐃⵠᐃ(ΔᐃΔⲆΔΔⵠΔΔ(1.1 * ᐃ, [ⵠ[370]]));
		ᐃΔ[Δ.ᐃΔᐃⲆᐃᐃⲆ] = ᐃⵠᐃ(ΔᐃⲆᐃ(Math.PI, ᐃⵠΔΔΔⲆⲆΔΔ(ᐃ * .9, ⵠ[370])));
		ᐃΔ[Δ.ⲆⵠᐃΔⵠ] = [];
		ᐃΔ[Δ.ⲆⵠᐃΔⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔⲆᐃᐃⲆᐃ(ᐃ * .55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
		ᐃΔ[Δ.ⲆⵠᐃΔⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔⲆᐃᐃⲆᐃ(.55 * ᐃ, ⲆⵠⵠⵠⲆ, [ⵠ[542], "#0f3f3d", ⵠ[269], "#0d2d2b", ⵠ[476], "#070d16"]));
		ᐃΔ[Δ.ⲆⵠⲆΔⵠ] = [];
		ᐃΔ[Δ.ⲆⵠⲆΔⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔⲆⲆᐃΔⵠ(ᐃ * .55, true, [ⵠ[89], ⵠ[185], "#573f29", ⵠ[331]]));
		ᐃΔ[Δ.ⲆⵠⲆΔⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔⲆⲆᐃΔⵠ(ᐃ * .55, ΔⲆΔⵠⲆ, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
		ᐃΔ[Δ.ᐃΔΔΔᐃ] = [];
		ᐃΔ[Δ.ᐃΔΔΔᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃⲆᐃⵠᐃⲆΔ(.6 * ᐃ, true, [ⵠ[89], "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", ⵠ[574], "#747474", "#969696", ⵠ[490]]));
		ᐃΔ[Δ.ᐃΔΔΔᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃⲆᐃⵠᐃⲆΔ(ᐃ * .6, true, [ⵠ[250], "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", ⵠ[552]]));
		ᐃΔ[Δ.ΔᐃⵠⵠⲆ] = [];
		ᐃΔ[Δ.ΔᐃⵠⵠⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔᐃⲆⲆⵠᐃ(ᐃ * .58, ⵠⲆΔᐃΔ, ["#dbce71", ⵠ[479], ⵠ[411]]));
		ᐃΔ[Δ.ΔᐃⵠⵠⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔᐃⲆⲆⵠᐃ(.58 * ᐃ, true, [ⵠ[289], "#15543c", ⵠ[56]]));
		ᐃΔ[Δ.ⲆⲆᐃⵠⲆ] = [];
		ᐃΔ[Δ.ⲆⲆᐃⵠⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⵠᐃᐃΔΔⲆ(ᐃ * .69, ⵠⲆⵠⵠΔ, ["#717171", "#485252", ⵠ[574], "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
		ᐃΔ[Δ.ⲆⲆᐃⵠⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⵠᐃᐃΔΔⲆ(ᐃ * .69, true, [ⵠ[83], "#092121", ⵠ[269], ⵠ[164], "#277a74", "#1f665f", ⵠ[147], ⵠ[95]]));
		ᐃΔ[Δ.ⵠΔᐃᐃⲆ] = [];
		ᐃΔ[Δ.ⵠΔᐃᐃⲆ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⵠΔᐃᐃⲆ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ⵠΔᐃᐃⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⵠⵠᐃⲆᐃΔⵠ(1.3 * ᐃ, [ⵠ[387], "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", ⵠ[387], ⵠ[327]])));
		ᐃΔ[Δ.ⵠΔᐃᐃⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(Δⵠⵠⵠᐃᐃⵠ(1.5 * ᐃ, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", ⵠ[327]])));
		ᐃΔ[Δ.ⵠΔᐃᐃⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔΔΔΔᐃΔᐃ(1.5 * ᐃ, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
		ᐃΔ[Δ.ⵠΔᐃᐃⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⵠⵠᐃⲆᐃΔⵠ(1.3 * ᐃ, [ⵠ[91], "#0e3638", ⵠ[450], ⵠ[221], ⵠ[450], "#1d5559", ⵠ[221], "#48a8aa", ⵠ[187], "#56afac"])));
		ᐃΔ[Δ.ⵠΔᐃᐃⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(Δⵠⵠⵠᐃᐃⵠ(ᐃ * 1.5, [ⵠ[91], "#0e3638", ⵠ[450], ⵠ[221], "#48a8aa", "#56afac"])));
		ᐃΔ[Δ.ⵠΔᐃᐃⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔΔΔΔᐃΔᐃ(ᐃ * 1.5, [ⵠ[91], "#0e3638", ⵠ[450], ⵠ[221], ⵠ[187], "#56afac"])));
		ᐃΔ[Δ.ⵠᐃⲆⲆᐃ] = [];
		ᐃΔ[Δ.ⵠᐃⲆⲆᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⵠᐃⲆᐃⲆⲆ(ᐃ * Ⲇⵠᐃ, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", ⵠ[0], "#57aba6", ⵠ[ⲆⲆⵠⲆ]]));
		ᐃΔ[Δ.ⵠᐃⲆⲆᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⵠᐃⲆᐃⲆⲆ(ᐃ * ΔⲆᐃᐃ, ["#050505", "#1d3a38", "#0b514a", ⵠ[410], "#327570", "#1d3a38", ⵠ[0], "#0b514a", "#63afa9"]));
		ᐃΔ[Δ.ᐃᐃⵠⲆᐃΔⲆ] = [];
		ᐃΔ[Δ.ᐃᐃⵠⲆᐃΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆⲆⲆᐃΔⵠⲆ(1 * ᐃ, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
		ᐃΔ[Δ.ᐃᐃⵠⲆᐃΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆⲆⲆᐃΔⵠⲆ(ΔᐃⵠⲆ * ᐃ, ["#050505", "#327570", "#021724", ⵠ[410]]));
		ᐃΔ[Δ.ⵠⵠᐃⲆΔⵠⲆ] = [];
		ᐃΔ[Δ.ⵠⵠᐃⲆΔⵠⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⵠⵠⵠΔᐃᐃ(ᐃ * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
		ᐃΔ[Δ.ⵠⵠᐃⲆΔⵠⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⵠⵠⵠΔᐃᐃ(ᐃᐃΔ * ᐃ, ["#050505", "#327570", "#021724", ⵠ[410]]));
		ᐃΔ[Δ.ⵠⵠⵠⵠΔⵠⵠ] = [];
		ᐃΔ[Δ.ⵠⵠⵠⵠΔⵠⵠ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⵠⵠⵠⵠΔⵠⵠ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ⵠⵠⵠⵠΔⵠⵠ][Δ.ⵠΔⵠ] = [ⵠᐃ.ᐃΔᐃᐃᐃⵠᐃ, ⵠᐃ.ⵠⵠⵠᐃΔⵠⲆ, ⵠᐃ.ΔⲆⲆⵠⲆⲆⵠ, ⵠᐃ.ᐃⵠⲆᐃⵠⵠᐃ, ⵠᐃ.ⲆΔᐃᐃΔⵠΔ, ⵠᐃ.ΔᐃⵠⲆΔΔⲆ, ⵠᐃ.ΔⵠΔΔⲆΔⵠ, ⵠᐃ.ΔⵠⵠⵠΔⲆᐃ, ⵠᐃ.ⲆⲆⵠΔᐃⲆΔ, ⵠᐃ.ᐃⵠⵠⲆⲆⵠⵠ, ⵠᐃ.ΔⲆⲆᐃⲆᐃᐃ, ⵠᐃ.ⵠⲆⲆΔΔⵠᐃ, ⵠᐃ.ᐃⵠΔᐃⲆΔΔ, ⵠᐃ.ⵠᐃᐃᐃⲆΔΔ, ⵠᐃ.ⲆⲆΔᐃⲆⲆⲆ, ⵠᐃ.ᐃⵠⲆᐃⲆΔᐃ, ⵠᐃ.ⵠⵠⵠᐃⵠᐃΔ, ⵠᐃ.ΔⵠΔΔΔΔⵠ, ⵠᐃ.ⲆᐃΔΔⵠⲆᐃ, ⵠᐃ.ⲆⵠⲆⵠΔⲆⵠ, ⵠᐃ.ⵠΔⲆᐃΔⵠᐃ, ⵠᐃ.ΔΔΔᐃⲆⵠΔ, ⵠᐃ.ⲆⲆⲆⲆΔⲆⲆ, ⵠᐃ.ⲆᐃΔᐃΔΔᐃ, ⵠᐃ.ⲆⵠⲆᐃᐃᐃΔ, ⵠᐃ.ⲆΔⵠᐃⵠⵠⵠ, ⵠᐃ.ⲆΔᐃⲆⵠⲆⲆ, ⵠᐃ.ᐃⲆΔᐃᐃᐃⲆ, ⵠᐃ.ᐃⵠⵠΔᐃⵠⲆ, ⵠᐃ.ⵠⲆⲆΔⵠⲆⵠ, ⵠᐃ.ⵠΔⵠΔⵠᐃΔ, ⵠᐃ.ⵠⵠⲆᐃⲆⵠΔ, ⵠᐃ.ΔᐃΔⲆⲆⵠΔ, ⵠᐃ.ΔΔⲆⲆⵠⵠΔ, ⵠᐃ.ᐃⲆΔᐃⵠⲆⵠ, ⵠᐃ.ⲆΔΔⵠΔΔᐃ, ⵠᐃ.ⵠΔΔᐃᐃᐃᐃ, ⵠᐃ.ΔⲆⵠᐃᐃⲆⲆ, ⵠᐃ.ⲆⵠⵠᐃΔⵠⲆ, ⵠᐃ.ⲆΔⵠᐃⵠⵠᐃ, ⵠᐃ.ⲆⵠᐃⲆⵠⲆΔ, ⵠᐃ.ΔΔΔᐃΔΔⲆ, ⵠᐃ.ᐃⲆⵠⵠᐃⲆⵠ, ⵠᐃ.ⵠΔⲆⵠᐃⲆΔ, ⵠᐃ.ⲆΔⵠᐃⵠᐃⲆ, ⵠᐃ.ΔⲆⵠⲆⵠⲆⲆ, ⵠᐃ.ΔⵠᐃᐃⲆΔⲆ, ⵠᐃ.ⵠⵠᐃⲆⲆΔΔ, ⵠᐃ.ⵠᐃⲆᐃⲆΔᐃ, ⵠᐃ.ⲆⵠᐃⲆᐃᐃᐃ, ⵠᐃ.ᐃⵠᐃⵠⵠᐃΔ, ⵠᐃ.ΔⵠᐃΔΔΔⲆ, ⵠᐃ.ⵠΔⵠⲆΔⲆⵠ, ⵠᐃ.ᐃⵠⲆΔᐃⵠⵠ, ⵠᐃ.ⲆΔᐃⵠⲆⲆⲆ, ⵠᐃ.ⵠᐃⲆΔⲆᐃΔ];
		ᐃΔ[Δ.ⵠⵠⵠⵠΔⵠⵠ][Δ.ⲆⲆⵠ] = [ⵠᐃ.ⲆᐃΔⲆΔⲆⵠ, ⵠᐃ.ⵠⵠⵠᐃⲆΔⵠ, ⵠᐃ.ⵠⵠⲆᐃᐃᐃᐃ, ⵠᐃ.ᐃΔᐃⲆⲆⲆᐃ, ⵠᐃ.ΔⵠⵠΔⵠⲆⲆ, ⵠᐃ.ⲆΔⵠⲆΔⲆⲆ, ⵠᐃ.ⲆⵠⵠⵠΔᐃᐃ, ⵠᐃ.ⲆᐃⲆᐃⲆΔⲆ, ⵠᐃ.ⲆΔΔΔⲆⵠᐃ, ⵠᐃ.ΔᐃΔᐃΔⵠⵠ, ⵠᐃ.ᐃⵠᐃᐃᐃᐃᐃ, ⵠᐃ.ΔΔⲆΔⲆΔᐃ, ⵠᐃ.ΔᐃΔΔᐃⲆⲆ, ⵠᐃ.ⲆΔⲆⲆⲆΔᐃ, ⵠᐃ.ᐃⲆⵠⵠⲆᐃⵠ, ⵠᐃ.ᐃᐃᐃⲆⵠⲆⵠ, ⵠᐃ.ᐃⵠᐃⵠᐃᐃᐃ, ⵠᐃ.ᐃⲆᐃⵠᐃΔΔ, ⵠᐃ.ΔᐃᐃᐃⵠΔᐃ, ⵠᐃ.ⵠⲆⵠⲆᐃⲆⲆ, ⵠᐃ.ΔⲆᐃΔⵠⵠᐃ, ⵠᐃ.ⵠΔⵠⲆΔᐃⲆ, ⵠᐃ.ⲆᐃΔᐃⲆⲆΔ, ⵠᐃ.ᐃⵠΔⲆⵠΔⵠ, ⵠᐃ.ᐃⵠᐃⲆᐃⲆΔ, ⵠᐃ.ΔᐃⲆᐃⲆᐃⲆ, ⵠᐃ.ⲆⲆⵠⵠΔⲆᐃ, ⵠᐃ.ᐃⵠⲆⲆⲆⵠΔ, ⵠᐃ.ⵠⵠⲆⲆⵠᐃⵠ, ⵠᐃ.ΔⲆⵠΔⲆΔᐃ, ⵠᐃ.ᐃΔᐃᐃΔⲆΔ, ⵠᐃ.ⲆᐃⲆΔⲆᐃⲆ, ⵠᐃ.ᐃⲆΔⲆᐃΔⵠ, ⵠᐃ.ⲆⲆΔΔⵠΔᐃ, ⵠᐃ.ⵠᐃⲆᐃᐃΔⲆ, ⵠᐃ.ᐃᐃᐃᐃΔᐃⵠ, ⵠᐃ.ᐃᐃⵠⵠΔⲆᐃ, ⵠᐃ.ΔⵠⵠᐃΔᐃᐃ, ⵠᐃ.ΔΔⲆᐃΔⵠⵠ, ⵠᐃ.ᐃⲆᐃᐃΔᐃⵠ, ⵠᐃ.ⲆⲆⵠⲆⵠⲆⵠ, ⵠᐃ.ᐃΔⵠⲆᐃᐃᐃ, ⵠᐃ.ⵠⲆΔΔᐃⵠᐃ, ⵠᐃ.ⲆΔΔⵠⵠᐃᐃ, ⵠᐃ.ΔⲆᐃⲆⲆⲆΔ, ⵠᐃ.ⵠⵠᐃᐃᐃΔᐃ, ⵠᐃ.ⵠᐃΔᐃⵠᐃⲆ, ⵠᐃ.ΔᐃⲆᐃⵠΔⵠ, ⵠᐃ.ΔᐃΔᐃⲆⲆⵠ, ⵠᐃ.ᐃⵠᐃΔⲆᐃⵠ, ⵠᐃ.ⵠⵠΔΔᐃΔΔ, ⵠᐃ.ᐃΔⲆΔⲆΔᐃ, ⵠᐃ.ⲆΔᐃⵠΔΔΔ, ⵠᐃ.ⲆᐃΔᐃⵠⵠᐃ, ⵠᐃ.ⲆΔΔⵠⵠⵠᐃ, ⵠᐃ.ⲆⲆΔⵠⲆᐃⲆ];
		ᐃΔ[Δ.ᐃⲆⲆᐃⵠ] = [];
		ᐃΔ[Δ.ᐃⲆⲆᐃⵠ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ᐃⲆⲆᐃⵠ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ᐃⲆⲆᐃⵠ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(1.1 * ᐃ, Ⲇⵠᐃᐃᐃ, [ⵠ[302], ⵠ[154], ⵠ[74]], ⵠᐃⲆⲆ)));
		ᐃΔ[Δ.ᐃⲆⲆᐃⵠ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(ᐃ * .9, ᐃΔⵠᐃⲆ, [ⵠ[302], ⵠ[154], ⵠ[74]], ΔⵠΔ)));
		ᐃΔ[Δ.ᐃⲆⲆᐃⵠ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(1 * ᐃ, false, [ⵠ[302], ⵠ[154], ⵠ[74]], ⲆᐃΔⲆ)));
		ᐃΔ[Δ.ᐃⲆⲆᐃⵠ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(ᐃ * .9, false, [ⵠ[302], ⵠ[154], ⵠ[74]], ⲆⵠΔⵠ)));
		ᐃΔ[Δ.ᐃⲆⲆᐃⵠ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(1.1 * ᐃ, ᐃΔⵠᐃⲆ, [ⵠ[250], ⵠ[269], ⵠ[83]], ᐃᐃᐃ)));
		ᐃΔ[Δ.ᐃⲆⲆᐃⵠ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(ᐃ * .9, false, [ⵠ[250], ⵠ[269], ⵠ[83]], ᐃⲆΔ)));
		ᐃΔ[Δ.ᐃⲆⲆᐃⵠ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(1 * ᐃ, false, [ⵠ[250], ⵠ[269], ⵠ[83]], ⲆⵠΔⵠ)));
		ᐃΔ[Δ.ᐃⲆⲆᐃⵠ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(ᐃ * .9, ⲆᐃᐃΔΔ, [ⵠ[250], ⵠ[269], ⵠ[83]], ⲆᐃⵠΔ)));
		ᐃΔ[Δ.ᐃⵠⲆᐃᐃ] = [];
		ᐃΔ[Δ.ᐃⵠⲆᐃᐃ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ᐃⵠⲆᐃᐃ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ᐃⵠⲆᐃᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(ᐃ * 1.1, true, [ⵠ[302], ⵠ[278], ⵠ[374]], ΔⵠⲆᐃ)));
		ᐃΔ[Δ.ᐃⵠⲆᐃᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(ᐃ * .9, true, [ⵠ[302], ⵠ[278], ⵠ[374]], 2)));
		ᐃΔ[Δ.ᐃⵠⲆᐃᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(1 * ᐃ, true, [ⵠ[302], ⵠ[278], ⵠ[374]], 2)));
		ᐃΔ[Δ.ᐃⵠⲆᐃᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(.9 * ᐃ, true, [ⵠ[302], ⵠ[278], ⵠ[374]], ⵠΔⵠΔ)));
		ᐃΔ[Δ.ᐃⵠⲆᐃᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(ᐃ * 1.1, ΔᐃΔΔᐃ, [ⵠ[250], ⵠ[269], ⵠ[83]], 2)));
		ᐃΔ[Δ.ᐃⵠⲆᐃᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(ᐃ * .9, ᐃΔᐃⲆⵠ, [ⵠ[250], ⵠ[269], ⵠ[83]], ᐃᐃⲆⲆ)));
		ᐃΔ[Δ.ᐃⵠⲆᐃᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(ᐃⲆΔ * ᐃ, true, [ⵠ[250], ⵠ[269], ⵠ[83]], ΔΔⲆⲆ)));
		ᐃΔ[Δ.ᐃⵠⲆᐃᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠⲆⵠⲆ(ᐃ * .9, ⲆⵠΔᐃⵠ, [ⵠ[250], ⵠ[269], ⵠ[83]], ᐃᐃⲆⲆ)));
		ᐃΔ[Δ.Δᐃᐃᐃᐃ] = [];
		ᐃΔ[Δ.Δᐃᐃᐃᐃ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.Δᐃᐃᐃᐃ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.Δᐃᐃᐃᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⲆΔᐃⲆⲆ(ᐃ * 1.5, false, [ⵠ[540], ⵠ[515], ⵠ[188]])));
		ᐃΔ[Δ.Δᐃᐃᐃᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⲆΔᐃⲆⲆ(1.3 * ᐃ, false, [ⵠ[540], ⵠ[515], ⵠ[188]])));
		ᐃΔ[Δ.Δᐃᐃᐃᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⲆΔᐃⲆⲆ(ᐃ * 1.1, false, [ⵠ[540], ⵠ[515], ⵠ[188]])));
		ᐃΔ[Δ.Δᐃᐃᐃᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⲆΔᐃⲆⲆ(1.5 * ᐃ, ᐃⲆⲆΔⵠ, [ⵠ[187], "#3e8989", "#50a09c"])));
		ᐃΔ[Δ.Δᐃᐃᐃᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⲆΔᐃⲆⲆ(1.3 * ᐃ, false, [ⵠ[187], "#3e8989", "#50a09c"])));
		ᐃΔ[Δ.Δᐃᐃᐃᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⲆΔᐃⲆⲆ(1.1 * ᐃ, false, [ⵠ[187], "#3e8989", "#50a09c"])));
		ᐃΔ[Δ.ᐃΔᐃΔⲆ] = [];
		ᐃΔ[Δ.ᐃΔᐃΔⲆ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ᐃΔᐃΔⲆ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ᐃΔᐃΔⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⵠⲆᐃⵠᐃ(1.1 * ᐃ, false, [ⵠ[96], "#70e0dd", "#95efea"])));
		ᐃΔ[Δ.ᐃΔᐃΔⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⵠⲆᐃⵠᐃ(ᐃ * .9, ΔⵠΔⲆⵠ, [ⵠ[96], "#70e0dd", "#95efea"])));
		ᐃΔ[Δ.ᐃΔᐃΔⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⵠⲆᐃⵠᐃ(ᐃ * .7, Ⲇⵠᐃᐃᐃ, [ⵠ[96], "#70e0dd", "#95efea"])));
		ᐃΔ[Δ.ᐃΔᐃΔⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⵠⲆᐃⵠᐃ(ᐃ * 1.1, ΔⵠΔΔⲆ, [ⵠ[96], "#47b2ac", ⵠ[366]])));
		ᐃΔ[Δ.ᐃΔᐃΔⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⵠⲆᐃⵠᐃ(.9 * ᐃ, ᐃⲆⲆᐃᐃ, [ⵠ[96], "#47b2ac", ⵠ[366]])));
		ᐃΔ[Δ.ᐃΔᐃΔⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⵠⲆᐃⵠᐃ(ᐃ * .7, false, [ⵠ[96], "#47b2ac", ⵠ[366]])));
		ᐃΔ[Δ.ⲆΔΔᐃ] = [];
		ᐃΔ[Δ.ⲆΔΔᐃ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⲆΔΔᐃ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ⲆΔΔᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⲆᐃᐃⲆⲆᐃᐃ(1.7 * ᐃ, true, [ⵠ[350], ⵠ[353], ⵠ[501]])));
		ᐃΔ[Δ.ⲆΔΔᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⲆᐃᐃⲆⲆᐃᐃ(1.5 * ᐃ, ᐃΔᐃⵠⲆ, [ⵠ[350], ⵠ[353], ⵠ[501]])));
		ᐃΔ[Δ.ⲆΔΔᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⲆᐃᐃⲆⲆᐃᐃ(ᐃ * 1.3, true, [ⵠ[350], ⵠ[353], ⵠ[501]])));
		ᐃΔ[Δ.ⲆΔΔᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⲆᐃᐃⲆⲆᐃᐃ(1.7 * ᐃ, ⵠΔⲆⵠⲆ, [ⵠ[350], "#41aaa0", ⵠ[366]])));
		ᐃΔ[Δ.ⲆΔΔᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⲆᐃᐃⲆⲆᐃᐃ(ᐃ * 1.5, true, [ⵠ[350], "#41aaa0", ⵠ[366]])));
		ᐃΔ[Δ.ⲆΔΔᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⲆᐃᐃⲆⲆᐃᐃ(ᐃ * 1.3, ΔᐃⲆⵠΔ, [ⵠ[350], "#41aaa0", ⵠ[366]])));
		ᐃΔ[Δ.ᐃΔⲆᐃΔⲆΔ] = [];
		ᐃΔ[Δ.ᐃΔⲆᐃΔⲆΔ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ᐃΔⲆᐃΔⲆΔ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ᐃΔⲆᐃΔⲆΔ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ᐃΔΔΔΔΔᐃ(ᐃ, ["#2d53c4"])));
		ᐃΔ[Δ.ᐃΔⲆᐃΔⲆΔ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ᐃΔΔΔΔΔᐃ(ᐃ, ["#2d53c4"])));
		ᐃΔ[Δ.ΔⲆΔⲆⵠΔΔ] = [];
		ᐃΔ[Δ.ΔⲆΔⲆⵠΔΔ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ΔⲆΔⲆⵠΔΔ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ΔⲆΔⲆⵠΔΔ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ᐃΔΔΔΔΔᐃ(ᐃ, ["#c4912d"])));
		ᐃΔ[Δ.ΔⲆΔⲆⵠΔΔ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ᐃΔΔΔΔΔᐃ(ᐃ, ["#c4912d"])));
		ᐃΔ[Δ.ΔⲆᐃⵠᐃⲆⵠ] = [];
		ᐃΔ[Δ.ΔⲆᐃⵠᐃⲆⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃⲆⲆⵠⲆ(ᐃ, ["#414040"]));
		ᐃΔ[Δ.ΔⲆᐃⵠᐃⲆⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃⲆⲆⵠⲆ(ᐃ, ["#153635"]));
		ᐃΔ[Δ.ⵠⵠΔΔⵠⵠᐃ] = [];
		ᐃΔ[Δ.ⵠⵠΔΔⵠⵠᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔᐃⲆⵠᐃⵠ(1 * ᐃ, false, [ⵠ[115], ⵠ[115], ⵠ[193], ⵠ[193], ⵠ[115], ⵠ[193]]));
		ᐃΔ[Δ.ⵠⵠΔΔⵠⵠᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔᐃⲆⵠᐃⵠ(ⵠⲆⲆ * ᐃ, false, [ⵠ[578], ⵠ[578], ⵠ[536], ⵠ[536], ⵠ[578], ⵠ[536]]));
		ᐃΔ[Δ.ⵠΔⵠⵠᐃᐃⵠ] = [];
		ᐃΔ[Δ.ⵠΔⵠⵠᐃᐃⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔⲆΔᐃ(1 * ᐃ, ΔⲆΔᐃΔ, [ⵠ[115], ⵠ[115], ⵠ[193], ⵠ[193], ⵠ[115], ⵠ[193]]));
		ᐃΔ[Δ.ⵠΔⵠⵠᐃᐃⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔⲆΔᐃ(ᐃ * ΔⵠⲆⲆ, ᐃⲆⲆΔⵠ, [ⵠ[578], ⵠ[578], ⵠ[536], ⵠ[536], ⵠ[578], ⵠ[536]]));
		ᐃΔ[Δ.ⲆΔᐃᐃᐃⲆⲆ] = [];
		ᐃΔ[Δ.ⲆΔᐃᐃᐃⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆΔⲆΔᐃ(ᐃ * ΔᐃⵠⲆ, false, [ⵠ[115], ⵠ[115], ⵠ[193], ⵠ[193], ⵠ[115], ⵠ[193]]));
		ᐃΔ[Δ.ⲆΔᐃᐃᐃⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆΔⲆΔᐃ(ᐃ * ΔΔΔᐃ, ⲆᐃᐃΔΔ, [ⵠ[578], ⵠ[578], ⵠ[536], ⵠ[536], ⵠ[578], ⵠ[536]]));
		ᐃΔ[Δ.ΔⲆᐃⵠᐃⲆⲆ] = [];
		ᐃΔ[Δ.ΔⲆᐃⵠᐃⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆⲆⵠⲆᐃⲆⲆ(ᐃ * 1, ΔⵠΔΔⲆ, [ⵠ[115], ⵠ[115], ⵠ[193], ⵠ[193], ⵠ[115], ⵠ[193]]));
		ᐃΔ[Δ.ΔⲆᐃⵠᐃⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆⲆⵠⲆᐃⲆⲆ(ΔᐃⲆⲆ * ᐃ, ΔΔᐃⵠᐃ, [ⵠ[578], ⵠ[578], ⵠ[536], ⵠ[536], ⵠ[578], ⵠ[536]]));
		ᐃΔ[Δ.ΔΔᐃᐃⵠᐃⵠ] = [];
		ᐃΔ[Δ.ΔΔᐃᐃⵠᐃⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆⵠΔΔⵠⵠⲆ(1 * ᐃ, false, [ⵠ[115], ⵠ[115], ⵠ[193], ⵠ[193], ⵠ[115], ⵠ[193]]));
		ᐃΔ[Δ.ΔΔᐃᐃⵠᐃⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆⵠΔΔⵠⵠⲆ(ᐃ * 1, ᐃⲆⲆΔⵠ, [ⵠ[578], ⵠ[578], ⵠ[536], ⵠ[536], ⵠ[578], ⵠ[536]]));
		ᐃΔ[Δ.ⲆⵠⵠΔⵠ] = [];
		ᐃΔ[Δ.ⲆⵠⵠΔⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆᐃᐃⲆΔⲆⵠ(.9 * ᐃ, [ⵠ[350], ⵠ[0], "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
		ᐃΔ[Δ.ⲆⵠⵠΔⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆᐃᐃⲆΔⲆⵠ(.9 * ᐃ, [ⵠ[96], "#1a847f", ⵠ[410], "#131919", "#01333a", "#b6f2db"]));
		ᐃΔ[Δ.ⵠᐃⵠΔⵠ] = [];
		ᐃΔ[Δ.ⵠᐃⵠΔⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃⵠⵠⲆΔⲆΔ(ᐃ * .9, [ⵠ[350], ⵠ[0], "#c41c50", "#c63450", ⵠ[ⲆⲆⵠⲆ], "#f7e7f0", "#2b2d2d"]));
		ᐃΔ[Δ.ⵠᐃⵠΔⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃⵠⵠⲆΔⲆΔ(.9 * ᐃ, [ⵠ[96], "#1a847f", ⵠ[410], "#01333a", ⵠ[ⵠⵠⲆⵠ], "#b6f2db", "#2b2d2d"]));
		ᐃΔ[Δ.ⲆⵠᐃᐃΔᐃᐃ] = [];
		ᐃΔ[Δ.ΔΔⲆΔΔ] = [];
		ᐃΔ[Δ.ⵠᐃΔΔΔⵠΔ] = [];
		ᐃΔ[Δ.ΔⵠⵠⲆⵠ] = [];
		for (var Ⲇᐃ = ᐃᐃᐃ; Ⲇᐃ < 2; Ⲇᐃ++) {
			ᐃΔ[Δ.ⲆⵠᐃᐃΔᐃᐃ][Ⲇᐃ] = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
			ᐃΔ[Δ.ⲆⵠᐃᐃΔᐃᐃ][Ⲇᐃ].width = 193;
			ᐃΔ[Δ.ⲆⵠᐃᐃΔᐃᐃ][Ⲇᐃ].height = 193;
			ᐃΔ[Δ.ΔΔⲆΔΔ][Ⲇᐃ] = ᐃΔ[Δ.ⲆⵠᐃᐃΔᐃᐃ][Ⲇᐃ].getContext(ⵠ[444]);
			ᐃΔ[Δ.ⵠᐃΔΔΔⵠΔ][Ⲇᐃ] = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
			ᐃΔ[Δ.ⵠᐃΔΔΔⵠΔ][Ⲇᐃ].width = 600;
			ᐃΔ[Δ.ⵠᐃΔΔΔⵠΔ][Ⲇᐃ].height = 600;
			ᐃΔ[Δ.ΔⵠⵠⲆⵠ][Ⲇᐃ] = ᐃΔ[Δ.ⵠᐃΔΔΔⵠΔ][Ⲇᐃ].getContext(ⵠ[444])
		}
		ᐃΔ[Δ.ΔᐃⵠΔⲆⲆⵠ] = [];
		ᐃΔ[Δ.ΔᐃⵠΔⲆⲆⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃⲆⲆⵠⲆ(ᐃ, ["#c8e0de"]));
		ᐃΔ[Δ.ΔᐃⵠΔⲆⲆⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃⲆⲆⵠⲆ(ᐃ, ["#147071"]));
		ᐃΔ[Δ.ⲆⲆⲆⵠⲆⲆⵠ] = [];
		ᐃΔ[Δ.ⲆⲆⲆⵠⲆⲆⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃⲆⲆⵠⲆ(ᐃ, ["#231912"]));
		ᐃΔ[Δ.ⲆⲆⲆⵠⲆⲆⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃⲆⲆⵠⲆ(ᐃ, ["#021719"]));
		ᐃΔ[Δ.ⵠΔⲆΔᐃⲆᐃ] = ᐃⵠᐃ(ⵠⵠⲆⲆⵠⲆⵠⲆⲆ(ᐃ * .5, [ⵠ[370]]));
		ᐃΔ[Δ.ⲆⲆΔⲆΔⲆⲆ] = ᐃⵠᐃ(ⵠᐃⵠΔᐃᐃΔᐃΔ(ᐃ * .9, ⵠ[370]));
		ᐃΔ[Δ.ⲆΔᐃⲆᐃᐃⵠ] = ᐃⵠᐃ(ᐃⲆⲆⵠΔⵠΔΔᐃ(ᐃ * .9, ⵠ[370]));
		ᐃΔ[Δ.ᐃᐃΔᐃⲆⵠᐃ] = ᐃⵠᐃ(ΔᐃΔⵠᐃΔⲆⲆΔ(ᐃ * 1, [ⵠ[370]]));
		ᐃΔ[Δ.ⲆΔⵠᐃⲆᐃⲆ] = ᐃⵠᐃ(ΔⲆⵠⲆᐃᐃΔⵠⲆ(ᐃ * .8, ⵠ[370]));
		ᐃΔ[Δ.ᐃᐃᐃⵠᐃⵠᐃ] = ᐃⵠᐃ(ΔⵠⵠΔΔᐃⲆᐃⵠ(.8 * ᐃ, ⵠ[370]));
		ᐃΔ[Δ.ᐃᐃΔΔᐃᐃΔ] = ᐃⵠᐃ(ⵠᐃⵠⵠΔⲆⵠⲆⵠ(.9 * ᐃ, ⵠ[370]));
		ᐃΔ[Δ.ⲆΔᐃΔ] = ᐃⵠᐃ(ᐃΔⵠᐃⵠⵠΔ(ᐃ * .6, ⵠ[370]));
		ᐃΔ[Δ.ⵠⲆᐃΔⵠ] = ᐃⵠᐃ(ᐃΔⵠᐃⵠⵠΔ(.6 * ᐃ, "#1CE7E0"));
		ᐃΔ[Δ.ⵠᐃᐃᐃΔΔΔ] = ᐃⵠᐃ(ᐃΔⵠᐃⵠⵠΔ(.6 * ᐃ, "#DBE71C"));
		ᐃΔ[Δ.ⵠᐃᐃᐃᐃⲆΔ] = ᐃⵠᐃ(ᐃΔⵠᐃⵠⵠΔ(ᐃ * .6, "#00BB00"));
		ᐃΔ[Δ.ᐃΔΔⵠⵠⵠⵠ] = [];
		ᐃΔ[Δ.ᐃΔΔⵠⵠⵠⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃⲆⲆⵠⲆ(ᐃ, ["#dac291"]));
		ᐃΔ[Δ.ᐃΔΔⵠⵠⵠⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃⲆⲆⵠⲆ(ᐃ, ["#0D423D"]));
		ᐃΔ[Δ.ⵠⵠΔⵠⲆᐃⲆ] = [];
		ᐃΔ[Δ.ⵠⵠΔⵠⲆᐃⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃⲆⲆⵠⲆ(ᐃ, ["#dac291"]));
		ᐃΔ[Δ.ⵠⵠΔⵠⲆᐃⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃⲆⲆⵠⲆ(ᐃ, ["#0D423D"]));
		ᐃΔ[Δ.ᐃⵠⵠⵠᐃⲆΔ] = [];
		ᐃΔ[Δ.ᐃⵠⵠⵠᐃⲆΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⲆⵠⵠᐃΔⵠ(.3 * ᐃ, ⲆⵠΔᐃⵠ, [ⵠ[231], "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
		ᐃΔ[Δ.ᐃⵠⵠⵠᐃⲆΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⲆⵠⵠᐃΔⵠ(.3 * ᐃ, true, [ⵠ[231], ⵠ[528], ⵠ[552], "#245d5d", "#1f5454", ⵠ[550]]));
		ᐃΔ[Δ.ΔΔΔⵠⵠᐃⲆ] = [];
		ᐃΔ[Δ.ΔΔΔⵠⵠᐃⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⲆⵠⵠᐃΔⵠ(ᐃ * .3, true, [ⵠ[231], "#717273", "#606162", "#a09f9f", "#878787", ⵠ[490]]));
		ᐃΔ[Δ.ΔΔΔⵠⵠᐃⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⲆⵠⵠᐃΔⵠ(ᐃ * .3, ᐃΔᐃⵠⲆ, [ⵠ[231], ⵠ[528], ⵠ[552], "#245d5d", "#1f5454", "#0b2121"]));
		ᐃΔ[Δ.ⲆⵠⲆⲆΔ] = [ᐃⵠᐃ(ⵠⵠΔⲆⲆΔᐃ(ᐃ, ᐃⵠΔⲆⵠ, [ⵠ[393], ⵠ[273], ⵠ[396], ⵠ[151], ⵠ[158], ⵠ[92], ⵠ[149]]))];
		ᐃΔ[Δ.ⲆᐃΔᐃᐃ] = [ᐃⵠᐃ(ⵠⵠΔⲆⲆΔᐃ(ᐃ, ΔᐃΔΔᐃ, [ⵠ[393], ⵠ[273], ⵠ[396], ⵠ[151], ⵠ[158], ⵠ[92], ⵠ[149]]))];
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ] = [];
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⵠΔᐃⵠᐃΔⵠ(ᐃ * ΔᐃⲆⲆ, [ⵠ[573]])));
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⵠⲆⵠᐃΔⵠᐃ(1 * ᐃ, [ⵠ[573]])));
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⵠΔᐃⲆⵠᐃⵠ(ⲆᐃΔ * ᐃ, [ⵠ[573]])));
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ᐃᐃⵠⵠᐃᐃᐃ(1 * ᐃ, [ⵠ[573]])));
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ᐃᐃᐃⵠⵠⲆΔ(1 * ᐃ, [ⵠ[573]])));
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠⵠΔᐃᐃⲆ(ᐃ * 1, [ⵠ[573]])));
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ᐃⲆᐃⵠⲆᐃⲆ(ⵠᐃⵠΔ * ᐃ, [ⵠ[573]])));
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⵠΔᐃⵠᐃΔⵠ(ΔⲆᐃᐃ * ᐃ, [ⵠ[550]])));
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⵠⲆⵠᐃΔⵠᐃ(ᐃ * ⲆΔΔΔ, [ⵠ[550]])));
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⵠΔᐃⲆⵠᐃⵠ(ᐃ * Δⵠᐃ, [ⵠ[550]])));
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ᐃᐃⵠⵠᐃᐃᐃ(1 * ᐃ, [ⵠ[550]])));
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ᐃᐃᐃⵠⵠⲆΔ(ᐃ * 1, [ⵠ[550]])));
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠⵠΔᐃᐃⲆ(ⵠⲆⲆ * ᐃ, [ⵠ[550]])));
		ᐃΔ[Δ.ⵠᐃⲆⲆΔ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ᐃⲆᐃⵠⲆᐃⲆ(ΔᐃⵠⲆ * ᐃ, [ⵠ[550]])));
		ᐃΔ[Δ.ⵠⵠᐃⵠᐃ] = [];
		ᐃΔ[Δ.ⵠⵠᐃⵠᐃ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ⵠⵠᐃⵠᐃ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ⵠⵠᐃⵠᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(ᐃ * 1.7, ["#FBEFBC"], 0)));
		ᐃΔ[Δ.ⵠⵠᐃⵠᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(ᐃ * 1.9, ["#FBEFBC"], ⵠⲆⲆ)));
		ᐃΔ[Δ.ⵠⵠᐃⵠᐃ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(1.7 * ᐃ, ["#FBEFBC"], 2)));
		ᐃΔ[Δ.ⵠⵠᐃⵠᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(ᐃ * 1.7, ["#0F4C48"], ⵠⲆΔ)));
		ᐃΔ[Δ.ⵠⵠᐃⵠᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(ᐃ * 1.9, ["#0F4C48"], ⵠⲆΔⲆ)));
		ᐃΔ[Δ.ⵠⵠᐃⵠᐃ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(1.7 * ᐃ, ["#0F4C48"], 2)));
		ᐃΔ[Δ.ᐃⵠⵠᐃⲆ] = [];
		ᐃΔ[Δ.ᐃⵠⵠᐃⲆ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ᐃⵠⵠᐃⲆ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ᐃⵠⵠᐃⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(1.8 * ᐃ, [ⵠ[15]], 0)));
		ᐃΔ[Δ.ᐃⵠⵠᐃⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(ΔⲆᐃΔ * ᐃ, [ⵠ[15]], ⵠⲆΔⲆ)));
		ᐃΔ[Δ.ᐃⵠⵠᐃⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(ᐃ * 1.8, [ⵠ[15]], 2)));
		ᐃΔ[Δ.ᐃⵠⵠᐃⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(ᐃ * 1.8, [ⵠ[537]], 0)));
		ᐃΔ[Δ.ᐃⵠⵠᐃⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(ᐃ * 2, [ⵠ[537]], 1)));
		ᐃΔ[Δ.ᐃⵠⵠᐃⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(ᐃ * 1.8, [ⵠ[537]], 2)));
		ᐃΔ[Δ.ᐃⲆΔᐃⲆ] = [];
		ᐃΔ[Δ.ᐃⲆΔᐃⲆ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ᐃⲆΔᐃⲆ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ᐃⲆΔᐃⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(1.9 * ᐃ, [ⵠ[439]], ᐃᐃⲆ)));
		ᐃΔ[Δ.ᐃⲆΔᐃⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(2.1 * ᐃ, [ⵠ[439]], ᐃᐃΔ)));
		ᐃΔ[Δ.ᐃⲆΔᐃⲆ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(ᐃ * 1.9, [ⵠ[439]], ᐃᐃΔⵠ)));
		ᐃΔ[Δ.ᐃⲆΔᐃⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(ᐃ * 1.9, [ⵠ[580]], 0)));
		ᐃΔ[Δ.ᐃⲆΔᐃⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(2.1 * ᐃ, [ⵠ[580]], ΔⵠΔ)));
		ᐃΔ[Δ.ᐃⲆΔᐃⲆ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ΔⵠΔⲆᐃ(ᐃ * 1.9, [ⵠ[580]], ΔΔⲆᐃ)));
		ᐃΔ[Δ.ᐃⵠⵠⲆⵠ] = [];
		ᐃΔ[Δ.ᐃⵠⵠⲆⵠ][Δ.ⵠΔⵠ] = [];
		ᐃΔ[Δ.ᐃⵠⵠⲆⵠ][Δ.ⲆⲆⵠ] = [];
		ᐃΔ[Δ.ᐃⵠⵠⲆⵠ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⲆⲆⲆⲆⲆⲆΔ(ᐃ * .8, ["#231F20", "#0c8e5b", "#037542", ⵠ[62]])));
		ᐃΔ[Δ.ᐃⵠⵠⲆⵠ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⲆⲆⲆⲆⲆⲆΔ(1 * ᐃ, ["#231F20", "#0c8e5b", "#037542", ⵠ[62]])));
		ᐃΔ[Δ.ᐃⵠⵠⲆⵠ][Δ.ⵠΔⵠ].push(ᐃⵠᐃ(ⲆⲆⲆⲆⲆⲆΔ(1.2 * ᐃ, ["#231F20", "#0c8e5b", "#037542", ⵠ[62]])));
		ᐃΔ[Δ.ᐃⵠⵠⲆⵠ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⲆⲆⲆⲆⲆⲆΔ(ᐃ * .8, ["#041e22", ⵠ[61], ⵠ[517], ⵠ[484]])));
		ᐃΔ[Δ.ᐃⵠⵠⲆⵠ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⲆⲆⲆⲆⲆⲆΔ(ᐃ * 1, ["#041e22", ⵠ[61], ⵠ[517], ⵠ[484]])));
		ᐃΔ[Δ.ᐃⵠⵠⲆⵠ][Δ.ⲆⲆⵠ].push(ᐃⵠᐃ(ⲆⲆⲆⲆⲆⲆΔ(ᐃ * 1.2, ["#041e22", ⵠ[61], ⵠ[517], ⵠ[484]])));
		ᐃΔ[Δ.ΔⲆⵠⲆᐃ] = [];
		ᐃΔ[Δ.ΔⲆⵠⲆᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃⵠᐃⲆᐃⵠᐃ(.8 * ᐃ, [ⵠ[231], ⵠ[219], "#201851", ⵠ[399], "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", ⵠ[399], "#052830", ⵠ[149], ⵠ[219], ⵠ[100]]));
		ᐃΔ[Δ.ΔⲆⵠⲆᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃⵠᐃⲆᐃⵠᐃ(.8 * ᐃ, [ⵠ[52], ⵠ[532], "#081B2D", ⵠ[399], "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", ⵠ[149], ⵠ[532], "#72898C"]));
		ᐃΔ[Δ.ᐃᐃᐃⵠᐃⵠΔ] = ᐃⵠᐃ(ⲆΔⲆⲆΔⲆⲆᐃⲆ(ᐃ * .8, [ⵠ[219]]));
		ᐃΔ[Δ.ΔⵠΔᐃⲆ] = [];
		ᐃΔ[Δ.ΔⵠΔᐃⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔⵠΔⲆᐃᐃ(.8 * ᐃ, ᐃᐃᐃⵠⵠ, [ⵠ[231], "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
		ᐃΔ[Δ.ΔⵠΔᐃⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔⵠΔⲆᐃᐃ(.8 * ᐃ, ᐃΔⲆΔᐃ, [ⵠ[52], ⵠ[152], ⵠ[358], ⵠ[532], "#321C56", "#1C073D", ⵠ[100], "#1C0833", "#1B1238"]));
		ᐃΔ[Δ.ᐃⵠⵠⲆⲆⲆⵠ] = ᐃⵠᐃ(ΔⵠⲆᐃⲆⵠⲆᐃⲆ(.8 * ᐃ, [ⵠ[219]]));
		ᐃΔ[Δ.ⲆᐃΔᐃⵠⲆⲆ] = [];
		ᐃΔ[Δ.ⲆᐃΔᐃⵠⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⵠⲆⵠΔⵠⲆ(ᐃ * .4, ᐃᐃᐃⲆΔ, [ⵠ[231], "#db6f26", ⵠ[ⵠⵠⵠΔ], ⵠ[91], "#833813"], 0));
		ᐃΔ[Δ.ⲆᐃΔᐃⵠⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⵠⲆⵠΔⵠⲆ(ᐃ * .4, ΔⲆΔⵠⲆ, [ⵠ[52], ⵠ[152], ⵠ[358], ⵠ[532]], ᐃᐃᐃ));
		ᐃΔ[Δ.ᐃⲆⵠᐃᐃᐃⲆ] = [];
		ᐃΔ[Δ.ᐃⲆⵠᐃᐃᐃⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⵠⲆⵠΔⵠⲆ(ᐃ * .4, true, [ⵠ[231], "#d35e35", ⵠ[0], ⵠ[91], ⵠ[91]], 1));
		ᐃΔ[Δ.ᐃⲆⵠᐃᐃᐃⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⵠⲆⵠΔⵠⲆ(ᐃ * .4, ᐃᐃΔⲆⵠ, [ⵠ[52], ⵠ[152], ⵠ[358], ⵠ[532]], Ⲇⵠᐃ));
		ᐃΔ[Δ.ΔⵠⵠᐃᐃΔᐃ] = [];
		ᐃΔ[Δ.ΔⵠⵠᐃᐃΔᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⵠⲆⵠΔⵠⲆ(.4 * ᐃ, ΔᐃⲆⵠΔ, [ⵠ[231], "#2973a5", ⵠ[0], "#ffff00", ⵠ[91], "#03243f", "#f2ec30", "#162f6d"], 0));
		ᐃΔ[Δ.ΔⵠⵠᐃᐃΔᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⵠⲆⵠΔⵠⲆ(ᐃ * .4, ΔᐃΔΔᐃ, [ⵠ[52], ⵠ[152], ⵠ[358], ⵠ[532]], ΔⲆⲆ));
		ᐃΔ[Δ.ⲆᐃᐃΔⵠⲆΔ] = ᐃⵠᐃ(ⲆΔᐃΔⵠⵠΔ(.4 * ᐃ, [ⵠ[219]]));
		ᐃΔ[Δ.ᐃⵠⲆⵠⲆⵠΔ] = ᐃⵠᐃ(ⲆΔᐃΔⵠⵠΔ(.4 * ᐃ, [ⵠ[219]]));
		ᐃΔ[Δ.ᐃᐃᐃⵠᐃᐃⵠⲆⵠ] = ᐃⵠᐃ(ⲆΔᐃΔⵠⵠΔ(ᐃ * .4, [ⵠ[219]]));
		ᐃΔ[Δ.ΔᐃᐃΔⲆ] = ᐃⵠᐃ(ΔⵠⲆΔⲆⵠᐃ(ᐃ * .35, true, [ⵠ[254], ⵠ[432], ⵠ[352], ⵠ[394], ⵠ[432]], ΔⵠⲆⲆ));
		ᐃΔ[Δ.ΔⵠᐃΔᐃ] = ᐃⵠᐃ(ΔⲆⵠⵠⵠⲆⵠ(.35 * ᐃ, true, [ⵠ[231], "#ed5f4f", "#ce4545", ⵠ[ᐃⵠⵠⲆ], "#e2dad7"], 1));
		ᐃΔ[Δ.ΔⲆᐃΔⲆᐃΔ] = [];
		ᐃΔ[Δ.ΔⲆᐃΔⲆᐃΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃΔⵠⵠⲆⲆ(ᐃ * .35, ⵠⲆΔᐃΔ, [ⵠ[231], ⵠ[300], ⵠ[219], ⵠ[219], ⵠ[100]], ΔᐃⵠⲆ));
		ᐃΔ[Δ.ΔⲆᐃΔⲆᐃΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃΔⵠⵠⲆⲆ(.35 * ᐃ, ΔᐃⲆⵠΔ, [ⵠ[52], "#613577", ⵠ[532], "#1C073D", ⵠ[100]], 1));
		ᐃΔ[Δ.ΔⲆⲆⵠᐃ] = [];
		ᐃΔ[Δ.ΔⲆⲆⵠᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃΔⵠⵠⲆⲆ(.35 * ᐃ, true, [ⵠ[231], ⵠ[300], ⵠ[ⵠᐃⲆⲆ], "#181414", ⵠ[ⲆᐃᐃⵠΔ]], ⵠⲆΔ));
		ᐃΔ[Δ.ΔⲆⲆⵠᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃΔⵠⵠⲆⲆ(ᐃ * .35, true, [ⵠ[52], ⵠ[70], "#563f83", "#180f21", ⵠ[100]], 0));
		ᐃΔ[Δ.ⲆⵠΔᐃⵠΔᐃ] = [];
		ᐃΔ[Δ.ⲆⵠΔᐃⵠΔᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠᐃⲆΔΔⲆⵠ(.35 * ᐃ, true, [ⵠ[231], ⵠ[300], ⵠ[ⵠⵠⵠΔ]]));
		ᐃΔ[Δ.ⲆⵠΔᐃⵠΔᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠᐃⲆΔΔⲆⵠ(ᐃ * .35, true, [ⵠ[52], ⵠ[70], "#563f83"]));
		ᐃΔ[Δ.ⵠⲆⲆΔⲆⲆᐃ] = [];
		ᐃΔ[Δ.ⵠⲆⲆΔⲆⲆᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⵠΔᐃⵠΔᐃ(ᐃ * .42, true, [ⵠ[231], ⵠ[300], ⵠ[0]]));
		ᐃΔ[Δ.ⵠⲆⲆΔⲆⲆᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⵠΔᐃⵠΔᐃ(.42 * ᐃ, true, [ⵠ[52], ⵠ[70], "#563f83"]));
		ᐃΔ[Δ.ⵠⲆΔΔᐃΔΔ] = [];
		ᐃΔ[Δ.ⵠⲆΔΔᐃΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠᐃⲆΔΔⲆⵠ(.35 * ᐃ, ᐃᐃᐃⵠⵠ, [ⵠ[231], ⵠ[300], ⵠ[219]]));
		ᐃΔ[Δ.ⵠⲆΔΔᐃΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠᐃⲆΔΔⲆⵠ(ᐃ * .35, true, [ⵠ[52], "#613577", ⵠ[532]]));
		ᐃΔ[Δ.ᐃⲆⵠⲆⲆᐃⵠ] = [];
		ᐃΔ[Δ.ᐃⲆⵠⲆⲆᐃⵠ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⵠΔᐃⵠΔᐃ(ᐃ * .42, ⵠⵠΔⲆᐃΔⲆ, [ⵠ[231], ⵠ[300], ⵠ[219]]));
		ᐃΔ[Δ.ᐃⲆⵠⲆⲆᐃⵠ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⵠΔᐃⵠΔᐃ(ᐃ * .42, ᐃᐃΔⲆⵠ, [ⵠ[52], "#613577", ⵠ[532]]));
		ᐃΔ[Δ.ᐃⲆΔΔΔᐃᐃ] = ᐃⵠᐃ(ⵠΔᐃⵠⵠᐃᐃ(ᐃ * .35, [ⵠ[219]]));
		ᐃΔ[Δ.ⵠⲆᐃⲆᐃⲆᐃ] = ᐃⵠᐃ(ⵠᐃⲆΔΔⲆⵠ(.35 * ᐃ, true, [ⲆⲆⲆΔⲆ, ⵠ[219]]));
		ᐃΔ[Δ.ⵠΔⲆⵠΔⵠΔ] = ᐃⵠᐃ(ⵠⵠΔᐃⵠΔᐃ(ᐃ * .35, ⲆⵠΔᐃⵠ, [ⵠⲆⲆⲆⲆ, ⵠ[219]]));
		ᐃΔ[Δ.ᐃΔⵠΔⲆΔⲆ] = ᐃⵠᐃ(ⵠΔᐃⵠⵠᐃᐃ(.35 * ᐃ, ["#22E066"]));
		ᐃΔ[Δ.ᐃΔΔΔΔΔⵠ] = ᐃⵠᐃ(ⵠᐃⲆΔΔⲆⵠ(.35 * ᐃ, ᐃΔⲆΔᐃ, [undefined, "#22E066"]));
		ᐃΔ[Δ.ⲆⵠΔⵠΔⲆⲆ] = ᐃⵠᐃ(ⵠⵠΔᐃⵠΔᐃ(.35 * ᐃ, true, [ⵠⲆⵠᐃⲆ, "#22E066"]));
		ᐃΔ[Δ.ᐃⵠⲆⵠΔ] = [];
		ᐃΔ[Δ.ᐃⵠⲆⵠΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⵠⲆⵠᐃΔΔΔ(ᐃ * .3, true, [ⵠ[231], "#65A8B7", ⵠ[380], "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", ⵠ[380]]));
		ᐃΔ[Δ.ᐃⵠⲆⵠΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⵠⲆⵠᐃΔΔΔ(.3 * ᐃ, true, [ⵠ[52], "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
		ᐃΔ[Δ.ᐃΔⵠⵠΔ] = [];
		ᐃΔ[Δ.ᐃΔⵠⵠΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆⵠΔ(.45 * ᐃ, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", ⵠ[231], ⵠ[380]]));
		ᐃΔ[Δ.ᐃΔⵠⵠΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔΔᐃⲆⵠΔ(ᐃ * .45, ᐃΔᐃⲆⵠ, ["#235050", "#357472", "#081B2D", ⵠ[399], ⵠ[52], "#135367"]));
		ᐃΔ[Δ.ΔⵠᐃΔΔ] = [];
		ᐃΔ[Δ.ΔⵠᐃΔΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃᐃΔⲆᐃΔ(.63 * ᐃ, ⵠⲆⵠⵠΔ, [ⵠ[231], "#352E1E", ⵠ[201], ⵠ[397]]));
		ᐃΔ[Δ.ΔⵠᐃΔΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃᐃΔⲆᐃΔ(ᐃ * .63, ⵠⲆⵠⵠᐃ, [ⵠ[52], "#071f22", ⵠ[ᐃΔⲆⵠΔ], ⵠ[384]]));
		ᐃΔ[Δ.ΔⵠᐃⲆⲆ] = [];
		ᐃΔ[Δ.ΔⵠᐃⲆⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃⲆᐃᐃⵠΔᐃ(ᐃ, ᐃⵠΔⲆⵠ, [ⵠ[231], "#332715", ⵠ[201], ⵠ[397]]));
		ᐃΔ[Δ.ΔⵠᐃⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃⲆᐃᐃⵠΔᐃ(ᐃ, true, [ⵠ[52], "#071f22", ⵠ[16], ⵠ[384]]));
		ᐃΔ[Δ.ⲆⲆᐃᐃΔ] = [];
		ᐃΔ[Δ.ⲆⲆᐃᐃΔ][Δ.ⵠΔⵠ] = ⵠᐃ.ΔᐃⵠⵠᐃΔⵠΔΔ;
		ᐃΔ[Δ.ⲆⲆᐃᐃΔ][Δ.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⲆⲆⲆΔⲆⲆΔ;
		ᐃΔ[Δ.ⲆᐃΔⵠᐃ] = [];
		ᐃΔ[Δ.ⲆᐃΔⵠᐃ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ⲆⵠⵠⲆᐃⵠᐃ(ᐃ * .59, true, [ⵠ[254], ⵠ[357], ⵠ[132], ⵠ[53]]));
		ᐃΔ[Δ.ⲆᐃΔⵠᐃ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ⲆⵠⵠⲆᐃⵠᐃ(.59 * ᐃ, ᐃᐃΔⲆⵠ, [ⵠ[52], "#062124", "#10373d", "#0f3333"]));
		ᐃΔ[Δ.ᐃᐃᐃᐃΔ] = [ᐃΔ[Δ.ⲆᐃΔⵠᐃ]];
		ᐃΔ[Δ.ᐃᐃᐃᐃΔ][1] = [];
		ᐃΔ[Δ.ᐃᐃᐃᐃΔ][ΔⵠⲆᐃ] = [];
		ᐃΔ[Δ.ᐃᐃᐃᐃΔ][1][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃΔⵠΔⲆⲆⲆ(.59 * ᐃ, ᐃΔᐃⲆⵠ, [ⵠ[254], ⵠ[357], ⵠ[132], ⵠ[53]]));
		ᐃΔ[Δ.ᐃᐃᐃᐃΔ][ΔᐃⲆⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃΔⵠΔⲆⲆⲆ(ᐃ * .59, ᐃⲆᐃⵠⵠ, [ⵠ[52], "#062124", "#10373d", "#0f3333"]));
		ᐃΔ[Δ.ᐃᐃᐃᐃΔ][2][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔⲆⲆΔⲆⵠΔ(ᐃ * .59, ᐃᐃΔⲆⵠ, [ⵠ[254], ⵠ[357], ⵠ[132], ⵠ[53]]));
		ᐃΔ[Δ.ᐃᐃᐃᐃΔ][2][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔⲆⲆΔⲆⵠΔ(ᐃ * .59, ᐃᐃᐃⵠⵠ, [ⵠ[52], "#062124", "#10373d", "#0f3333"]));
		ᐃΔ[Δ.ΔⲆⵠⵠΔ] = [];
		ᐃΔ[Δ.ΔⲆⵠⵠΔ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3 - Math.PI / ⵠⵠⵠᐃ, ⲆΔΔΔⵠΔᐃ(ᐃ * .6, true, [ⵠ[231], ⵠ[460], ⵠ[201], "#594225", ⵠ[404]])));
		ᐃΔ[Δ.ΔⲆⵠⵠΔ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ΔᐃⲆᐃ(3 - Math.PI / ᐃᐃⲆⲆ, ⲆΔΔΔⵠΔᐃ(ᐃ * .6, ⵠⲆⵠⵠᐃ, [ⵠ[52], "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
		ᐃΔ[Δ.ⲆᐃⲆΔⲆ] = [];
		ᐃΔ[Δ.ⲆᐃⲆΔⲆ][Δ.ⵠΔⵠ] = ᐃⵠᐃ(ᐃᐃⵠⲆⵠⲆᐃ(ᐃ * .3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
		ᐃΔ[Δ.ⲆᐃⲆΔⲆ][Δ.ⲆⲆⵠ] = ᐃⵠᐃ(ᐃᐃⵠⲆⵠⲆᐃ(.3 * ᐃ, ["#1F5453", ⵠ[269], "#1D4947", "#1F5453", "#0c2629"], ᐃⵠⵠⲆ));
		ᐃΔ[Δ.ⵠⲆᐃⵠⵠΔᐃ] = ᐃⵠᐃ(ⵠᐃⵠⲆⲆᐃᐃⵠΔ(.3 * ᐃ, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
		ᐃΔ[Δ.ΔⲆᐃⵠⵠⲆⵠ] = ᐃⵠᐃ(ᐃᐃΔΔΔⲆᐃⲆⵠ(.3 * ᐃ, [ⵠ[370]]));
		ᐃΔ[Δ.ⲆⵠΔⲆΔⲆⵠ] = ΔΔᐃⵠ(ΔⲆᐃⲆ, [{
			f: ⵠΔᐃⵠᐃⵠⵠ,
			x: ⵠΔᐃᐃ,
			y: 0,
			a: ΔᐃⵠⲆ,
			r: 0,
			c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
		}], .25, [ⵠ[575], ⵠ[122], ⵠ[84]], .7);
		ᐃΔ[Δ.ⲆΔⲆⵠⲆ] = ΔΔᐃⵠ(1.5, [{
			f: ⵠᐃᐃⲆⲆΔΔ,
			x: 0,
			y: ⵠⲆᐃ,
			a: 1,
			r: ⵠΔᐃⵠ,
			c: [ⵠ[543], "#750a0a", "#991616", ⵠ[543]]
		}], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9);
		ᐃΔ[Δ.ⲆⲆⵠⵠⲆΔᐃ] = ⵠΔⲆᐃⲆⲆΔ(ᐃ * .35, ["#072428", "#67A242", "#67A242"], ᐃᐃⲆ);
		ᐃΔ[Δ.ⲆⲆᐃⵠⵠⵠΔ] = ⵠΔⲆᐃⲆⲆΔ(.35 * ᐃ, ["#172130", "#649BB2", ⵠ[100], ⵠ[ᐃⵠⵠᐃΔⵠᐃ], "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
		ᐃΔ[Δ.ⵠⵠᐃᐃΔⵠᐃ] = ⵠΔⲆᐃⲆⲆΔ(.35 * ᐃ, ["#3F0B11", "#B13424", ⵠ[100], "#B13424", "#7e180b"], 2);
		ᐃΔ[Δ.ΔᐃᐃⵠΔⲆⲆ] = ⵠΔⲆᐃⲆⲆΔ(.35 * ᐃ, ["#1B2F4C", "#29488E", "#76c3e8", ⵠ[0]], 3);
		!ᐃΔΔᐃΔⲆΔ ? ᐃΔ[Δ.ΔⲆⲆᐃⲆΔⲆ] = ᐃⵠᐃ(ᐃᐃⲆΔΔⵠᐃΔΔ(ᐃ)) : ᐃΔ[Δ.ΔⲆⲆᐃⲆΔⲆ] = ᐃⵠᐃ(ⵠⲆⵠⲆᐃᐃⵠΔΔ(ᐃ));
		!ᐃΔΔᐃΔⲆΔ ? ᐃΔ[Δ.ΔⲆᐃᐃⵠⲆᐃ] = ᐃⵠᐃ(ⲆⵠⵠⲆΔⵠΔΔⲆ(ᐃ)) : ᐃΔ[Δ.ΔⲆᐃᐃⵠⲆᐃ] = ᐃⵠᐃ(ⵠⵠΔⵠᐃᐃΔΔΔ(.75));
		!ᐃΔΔᐃΔⲆΔ ? ᐃΔ[Δ.ᐃⲆⲆᐃᐃⵠΔ] = ᐃⵠᐃ(ᐃᐃᐃΔⵠⵠΔ(ᐃ)) : ᐃΔ[Δ.ᐃⲆⲆᐃᐃⵠΔ] = ᐃⵠᐃ(ᐃᐃᐃΔⵠⵠΔ(.75));
		ᐃΔ[Δ.ⵠⲆⵠⲆⵠⲆⵠ] = ᐃⵠᐃ(ᐃⲆᐃⵠᐃⲆΔ(ᐃ * .16, true, ["rgba(0, 0, 0, 0)", ⵠ[100], ⵠ[100], ⵠ[ᐃⲆΔⲆᐃ], ⵠ[ⲆⵠⲆⲆⵠ]]));
		ᐃΔ[Δ.ΔⵠΔⵠᐃᐃΔ] = ᐃⵠᐃ(ΔᐃⲆᐃ(5.8, ⵠⲆᐃᐃⵠⲆⵠ(.15 * ᐃ, ᐃΔⲆΔᐃ, ["rgba(0, 0, 0, 0)", ⵠ[100], ⵠ[100], ⵠ[100], ⵠ[100]])));
		ᐃΔ[Δ.ᐃⵠ] = [];
		ᐃΔ[Δ.ⲆᐃΔⵠᐃⵠΔ] = [];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ΔᐃᐃΔ.ᐃⵠⲆⵠⵠΔᐃ + 2; Ⲇᐃ++) ᐃΔ[Δ.ⲆᐃΔⵠᐃⵠΔ][Ⲇᐃ] = ᐃⵠΔΔΔ(ᐃ, "" + (Ⲇᐃ + 1), 12, ⵠ[447]);
		ᐃΔ[Δ.ΔΔⵠΔΔⵠᐃ] = [];
		ᐃΔ[Δ.ΔΔⵠΔΔⵠᐃ].push(ᐃⵠᐃ(ⲆⵠⵠⲆⵠᐃᐃ(.12 * ᐃ, ["#442F19", "#2C2112", ⵠ[124], ⵠ[420], ⵠ[ᐃᐃⵠⵠⲆⲆⲆ]])));
		ᐃΔ[Δ.ΔΔⵠΔΔⵠᐃ].push(ᐃⵠᐃ(ⲆⵠⵠⲆⵠᐃᐃ(ᐃ * .12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", ⵠ[ΔⲆⵠᐃᐃⵠⵠ]], ΔⲆᐃᐃ)));
		ᐃΔ[Δ.ΔΔⵠΔΔⵠᐃ].push(ᐃⵠᐃ(ⲆⵠⵠⲆⵠᐃᐃ(.12 * ᐃ, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
		ᐃΔ[Δ.ⲆᐃⲆΔᐃⲆⵠ] = [];
		ᐃΔ[Δ.ⲆᐃⲆΔᐃⲆⵠ].push(ᐃⵠᐃ(ⵠⲆΔⵠⵠⵠᐃΔⲆ(ᐃ * .22)));
		ᐃΔ[Δ.ⲆᐃⲆΔᐃⲆⵠ].push(ᐃⵠᐃ(ⵠᐃⲆⲆⵠⲆⲆⵠⲆ(.22 * ᐃ)));
		ᐃΔ[Δ.ⵠⵠⲆΔΔᐃⵠ] = ᐃⵠᐃ(ⲆⲆⵠⲆᐃⵠΔΔⵠ(.22 * ᐃ));
		ᐃΔ[Δ.ⵠᐃⲆⵠⵠ] = [];
		ᐃΔ[Δ.ⵠᐃⲆⵠⵠ].push(ᐃⵠᐃ(ⵠⲆⲆᐃⲆΔᐃ(ᐃ * 1.5, ["#795026", ⵠ[228], ⵠ[18]], 0)));
		ᐃΔ[Δ.ⵠᐃⲆⵠⵠ].push(ᐃⵠᐃ(ⵠⲆⲆᐃⲆΔᐃ(1.5 * ᐃ, ["#8f5e2c", "#7a5126", ⵠ[Ⲇⵠᐃᐃⵠⵠⵠ]], ᐃᐃΔ)));
		ᐃΔ[Δ.ⵠᐃⲆⵠⵠ].push(ᐃⵠᐃ(ⵠⲆⲆᐃⲆΔᐃ(ᐃ * 1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
		ᐃΔ[Δ.ⵠᐃᐃᐃⵠᐃⵠ] = ⵠᐃ.ⵠᐃᐃᐃⵠᐃⵠ;
		ᐃΔ[Δ.ΔᐃⵠⲆᐃⵠᐃ] = ⵠᐃ.ΔᐃⵠⲆᐃⵠᐃ;
		ᐃΔ[Δ.ⲆⵠᐃΔⵠⲆⵠ] = ⵠᐃ.ⲆⵠᐃΔⵠⲆⵠ;
		ᐃΔ[Δ.ᐃⵠᐃⲆⲆⲆΔ] = ⵠᐃ.ᐃⵠᐃⲆⲆⲆΔ;
		ᐃΔ[Δ.ⲆᐃᐃᐃΔⲆⲆ] = ᐃⵠΔΔΔ(ᐃ, "Show spectators", 25, ⵠ[447], ⲆΔΔⵠᐃ, ⵠΔⲆⵠΔ, ⵠ[204], ᐃᐃᐃΔⵠ, 220);
		ᐃΔ[Δ.ⲆᐃⲆⲆᐃᐃⲆ] = ᐃⵠΔΔΔ(ᐃ, "Reconnecting...", 30, ⵠ[447])
	}

	function ⵠⲆⲆⵠᐃᐃᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 120;
		var ⲆΔⲆ = ᐃ * 140;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		ΔⲆ.width = ᐃ * 130;
		ΔⲆ.height = ᐃ * 120;
		ᐃΔⵠ(Ⲇ, ᐃ * ⵠⲆΔⲆᐃ, ᐃ * 12, ᐃ * 110, ᐃ * 90, ⵠⲆⵠⵠⲆ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		ᐃΔⵠ(Ⲇ, ΔⲆⲆΔΔ * ᐃ, ΔⲆⲆⵠ * ᐃ, 110 * ᐃ, ᐃ * 90, ΔΔΔᐃⲆ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔ], Δⵠ[ΔᐃΔᐃ], ᐃ * 4);
		var ᐃᐃ = ΔᐃⲆᐃ(-Math.PI / ᐃᐃΔᐃ, ⲆΔΔᐃᐃ(.5 * ᐃ, true, [ⵠ[398], ⵠ[398], ⵠ[398], ⵠ[447], ⵠ[447], ⵠ[447], ⵠ[447]]));
		Ⲇ.drawImage(ᐃᐃ, ᐃ * ⲆᐃⲆᐃⲆ, 18 * ᐃ);
		var ᐃᐃ = ΔᐃⲆᐃ(Math.PI / ᐃⲆⲆΔΔ, ⲆⲆⵠⵠⵠ(ᐃ * .55, true, [ⵠ[398], ⵠ[447], ⵠ[447], ⵠ[447], ⵠ[447]]));
		Ⲇ.drawImage(ᐃᐃ, ᐃ * 36, ᐃ * ᐃΔⲆΔΔⲆᐃ);
		return ΔⲆ
	}

	function ⲆⲆⵠⲆᐃΔⵠ(ᐃ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 81;
		ΔⲆ.height = ᐃ * 77;
		Ⲇ.translate(0, ᐃ * ⲆΔⵠΔⵠ);
		Ⲇ.scale(.2, .2);
		Ⲇ.translate(0, -30 * ᐃ);
		Ⲇᐃ == ΔⲆᐃⲆ && (Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 36.5, ᐃ * 278.0625), Ⲇ.bezierCurveTo(67.5 * ᐃ, 316.0625 * ᐃ, 134.5 * ᐃ, ᐃ * 334.0625, ᐃ * 199.5, ᐃ * 319.0625), Ⲇ.bezierCurveTo(ᐃ * 254.5, ᐃ * 304.0625, ᐃ * 346.5, 270.0625 * ᐃ, ᐃ * 348.5, 237.0625 * ᐃ), Ⲇ.bezierCurveTo(359.5 * ᐃ, ᐃ * 206.0625, ᐃ * 318.5, ᐃ * 129.0625, ᐃ * 262.5, ᐃ * 122.0625), Ⲇ.bezierCurveTo(213.5 * ᐃ, 115.0625 * ᐃ, 166.5 * ᐃ, ᐃ * 133.0625, 104.5 * ᐃ, ᐃ * 166.0625), Ⲇ.bezierCurveTo(ᐃ * 54.5, ᐃ * 194.0625, ᐃ * 23.5, 241.0625 * ᐃ, 36.5 * ᐃ, ᐃ * 277.0625), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[3], 50 * ᐃ));
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 36.5, 278.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 67.5, ᐃ * 316.0625, ᐃ * 134.5, 334.0625 * ᐃ, ᐃ * 199.5, ᐃ * 319.0625);
		Ⲇ.bezierCurveTo(ᐃ * 254.5, 304.0625 * ᐃ, ᐃ * 346.5, ᐃ * 270.0625, 348.5 * ᐃ, 237.0625 * ᐃ);
		Ⲇ.bezierCurveTo(359.5 * ᐃ, ᐃ * 206.0625, ᐃ * 318.5, ᐃ * 129.0625, ᐃ * 262.5, 122.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 213.5, ᐃ * 115.0625, 166.5 * ᐃ, ᐃ * 133.0625, 104.5 * ᐃ, 166.0625 * ᐃ);
		Ⲇ.bezierCurveTo(54.5 * ᐃ, ᐃ * 194.0625, 23.5 * ᐃ, 241.0625 * ᐃ, 36.5 * ᐃ, ᐃ * 277.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ΔᐃΔⲆ], ᐃ * 19);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(214.5 * ᐃ, ᐃ * 124.0625);
		Ⲇ.bezierCurveTo(242.5 * ᐃ, ᐃ * 125.0625, ᐃ * 272.5, 159.0625 * ᐃ, 283.5 * ᐃ, 184.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 277.5, ᐃ * 161.0625, 233.5 * ᐃ, ᐃ * 128.0625, ᐃ * 219.5, 122.0625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ΔᐃⵠⲆ], ᐃ * 19);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 157.5, 145.0625 * ᐃ);
		Ⲇ.bezierCurveTo(176.5 * ᐃ, 148.0625 * ᐃ, ᐃ * 205.5, 176.0625 * ᐃ, ᐃ * 212.5, ᐃ * 197.0625);
		Ⲇ.bezierCurveTo(205.5 * ᐃ, 178.0625 * ᐃ, ᐃ * 177.5, ᐃ * 152.0625, 156.5 * ᐃ, ᐃ * 142.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⲆ], Δⵠ[ⵠⲆⲆ], 19 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 103.5, 169.0625 * ᐃ);
		Ⲇ.bezierCurveTo(160.5 * ᐃ, ᐃ * 166.0625, ᐃ * 228.5, 312.0625 * ᐃ, ᐃ * 162.5, ᐃ * 323.0625);
		Ⲇ.bezierCurveTo(ᐃ * 128.5, ᐃ * 330.0625, ᐃ * 45.5, ᐃ * 312.0625, ᐃ * 34.5, 268.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 30.5, ᐃ * 238.0625, ᐃ * 44.5, 222.0625 * ᐃ, 52.5 * ᐃ, 211.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 82.5, ᐃ * 174.0625, ᐃ * 104.5, 166.0625 * ᐃ, 119.5 * ᐃ, ᐃ * 172.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠΔ], Δⵠ[ⵠⲆⲆ], 19 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 194.5, ᐃ * 313.0625);
		Ⲇ.bezierCurveTo(222.5 * ᐃ, ᐃ * 306.0625, ᐃ * 319.5, 271.0625 * ᐃ, ᐃ * 337.5, ᐃ * 241.0625);
		Ⲇ.bezierCurveTo(274.5 * ᐃ, 270.0625 * ᐃ, 216.5 * ᐃ, 288.0625 * ᐃ, ᐃ * 199.5, 287.0625 * ᐃ);
		Ⲇ.bezierCurveTo(198.5 * ᐃ, 302.0625 * ᐃ, 195.5 * ᐃ, ᐃ * 311.0625, ᐃ * 193.5, ᐃ * 312.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃⲆ]);
		Ⲇ.scale(3, Δⵠⵠᐃ);
		Ⲇ.translate(ⲆⵠⲆΔΔⵠⵠ, 10 * ᐃ);
		Ⲇᐃ == 1 && (Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃΔᐃΔ * ᐃ, ᐃ * 32), Ⲇ.bezierCurveTo(ⵠⲆⵠᐃΔ * ᐃ, ᐃ * 25, ᐃ * 19, ᐃ * 25, ᐃ * 34, ᐃᐃⵠⵠⲆⲆⲆ * ᐃ), Ⲇ.bezierCurveTo(41.5 * ᐃ, 23.5 * ᐃ, 41.5 * ᐃ, ᐃ * 23.5, 49 * ᐃ, ᐃ * 29), Ⲇ.bezierCurveTo(ᐃ * 59.5, 20 * ᐃ, 59.5 * ᐃ, ᐃ * ⲆⵠⲆΔⲆ, ᐃ * 70, 11 * ᐃ), ΔΔ(Ⲇ, undefined, Δⵠ[ΔⲆⵠᐃ], ᐃ * 28), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 56, ᐃ * ⵠⵠΔⲆⵠ), Ⲇ.bezierCurveTo(ᐃ * 63.5, 13.5 * ᐃ, ᐃ * 63.5, ᐃ * 13.5, 71 * ᐃ, 21 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 74.5, 11.5 * ᐃ, 74.5 * ᐃ, 11.5 * ᐃ, 78 * ᐃ, ΔΔⲆⲆ * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⵠ], Δⵠ[ᐃΔⲆΔ], ᐃ * 28));
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * ⵠᐃΔⲆ, 32 * ᐃ);
		Ⲇ.bezierCurveTo(19 * ᐃ, ᐃ * 25, ᐃ * 19, ᐃ * 25, 34 * ᐃ, ᐃ * 18);
		Ⲇ.bezierCurveTo(ᐃ * 41.5, ᐃ * 23.5, 41.5 * ᐃ, ᐃ * 23.5, ᐃ * 49, ᐃ * 29);
		Ⲇ.bezierCurveTo(59.5 * ᐃ, ᐃ * 20, ᐃ * 59.5, 20 * ᐃ, 70 * ᐃ, ᐃ * ⲆΔᐃᐃΔⵠⲆ);
		ΔΔ(Ⲇ, ⵠΔⵠⵠⲆ, Δⵠ[1], 17 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(56 * ᐃ, ᐃ * ΔΔⵠΔᐃ);
		Ⲇ.bezierCurveTo(63.5 * ᐃ, 13.5 * ᐃ, 63.5 * ᐃ, 13.5 * ᐃ, 71 * ᐃ, ᐃ * 21);
		Ⲇ.bezierCurveTo(ᐃ * 74.5, ᐃ * 11.5, 74.5 * ᐃ, 11.5 * ᐃ, ᐃ * 78, ᐃᐃΔⵠ * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔ], Δⵠ[ΔᐃⲆⲆ], ᐃ * ⵠΔΔΔΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * Ⲇⵠⵠⵠ, 32 * ᐃ);
		Ⲇ.bezierCurveTo(19 * ᐃ, ᐃ * 25, ᐃ * 19, ᐃ * 25, ᐃ * 34, ᐃ * 18);
		Ⲇ.bezierCurveTo(41.5 * ᐃ, ᐃ * 23.5, ᐃ * 41.5, 23.5 * ᐃ, 49 * ᐃ, 29 * ᐃ);
		Ⲇ.bezierCurveTo(59.5 * ᐃ, 20 * ᐃ, 59.5 * ᐃ, ᐃ * ⵠᐃⲆⵠⲆ, ᐃ * 70, ᐃⵠΔⲆΔ * ᐃ);
		ΔΔ(Ⲇ, ΔⲆΔⵠᐃ, Δⵠ[ΔᐃΔᐃ], 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(56 * ᐃ, ⲆΔⵠΔΔ * ᐃ);
		Ⲇ.bezierCurveTo(63.5 * ᐃ, ᐃ * 13.5, 63.5 * ᐃ, 13.5 * ᐃ, ᐃ * 71, 21 * ᐃ);
		Ⲇ.bezierCurveTo(74.5 * ᐃ, 11.5 * ᐃ, ᐃ * 74.5, ᐃ * 11.5, ᐃ * 78, ᐃᐃΔⵠ * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[2], 10 * ᐃ);
		return ΔⲆ
	}
	const ΔⲆΔΔΔΔⵠ = {};
	const ΔⵠⲆΔⲆⵠᐃⲆⲆ = {};
	ΔⲆΔΔΔΔⵠ["get"] = function(ΔᐃⲆΔⲆⲆᐃ, ⵠΔΔⲆΔⵠⲆ) {
		if (ⵠΔΔⲆΔⵠⲆ !== "ΔⲆΔΔΔΔⵠ") {
			const ΔⲆΔΔΔΔⵠ = Math.random;
			const ⵠΔΔⲆΔⵠⲆ = [];
			const ΔᐃⲆΔⲆⲆᐃ = function() {
				for (let ΔⲆΔᐃᐃᐃΔ = 0; ΔⲆΔᐃᐃᐃΔ < 2097; ΔⲆΔᐃᐃᐃΔ++) ⵠΔΔⲆΔⵠⲆ.push(ΔⲆΔᐃᐃᐃΔ);
				return ΔⲆΔΔΔΔⵠ()
			};
			Math.random = ΔᐃⲆΔⲆⲆᐃ
		}
		return ⵠⵠⲆΔᐃᐃᐃⲆΔ["Reflect"]["get"](...arguments)
	};
	const ΔⲆΔᐃᐃᐃΔ = new ⵠⵠⲆΔᐃᐃᐃⲆΔ["Proxy"](ΔⵠⲆΔⲆⵠᐃⲆⲆ, ΔⲆΔΔΔΔⵠ);
	const ⲆᐃᐃΔⵠⵠΔ = ΔⲆΔᐃᐃᐃΔ.ΔⲆΔΔΔΔⵠ;

	function ΔⲆⵠⵠᐃΔⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 496 * ᐃ;
		ΔⲆ.height = 520 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔᐃΔⲆ;
		Ⲇ.translate(0, ᐃ * ΔΔΔᐃⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(19.000030517578125 * ᐃ, ᐃ * 256.67613983154297);
		Ⲇ.bezierCurveTo(ᐃ * 1.000030517578125, ᐃ * 332.67613983154297, ᐃ * 23.000030517578125, 404.67613983154297 * ᐃ, ᐃ * 95.00003051757812, ᐃ * 463.67613983154297);
		Ⲇ.bezierCurveTo(ᐃ * 128.00003051757812, 491.67613983154297 * ᐃ, ᐃ * 165.00003051757812, ᐃ * 507.67613983154297, ᐃ * 194.00003051757812, ᐃ * 512.676139831543);
		Ⲇ.bezierCurveTo(ᐃ * 280.0000305175781, ᐃ * 517.676139831543, 291.0000305175781 * ᐃ, ᐃ * 516.676139831543, 342.0000305175781 * ᐃ, ᐃ * 497.67613983154297);
		Ⲇ.bezierCurveTo(ᐃ * 425.0000305175781, ᐃ * 454.67613983154297, 469.0000305175781 * ᐃ, ᐃ * 392.67613983154297, ᐃ * 468.0000305175781, 300.67613983154297 * ᐃ);
		Ⲇ.bezierCurveTo(408.5000305175781 * ᐃ, 365.17613983154297 * ᐃ, ᐃ * 408.5000305175781, ᐃ * 365.17613983154297, 349.0000305175781 * ᐃ, 429.67613983154297 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 256.0000305175781, ᐃ * 473.67613983154297, 167.00003051757812 * ᐃ, ᐃ * 459.67613983154297, ᐃ * 78.00003051757812, ᐃ * 384.67613983154297);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ⵠᐃⲆ, -ⵠⵠΔⲆᐃ * ᐃ);
		ᐃΔΔ(Ⲇ, 247.01138305664062 * ᐃ, ᐃ * 249.3125, ᐃ * 161.4465855941215);
		ΔΔ(Ⲇ, Δⵠ[5], undefined, 12 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔᐃⵠⲆ;
		Ⲇ.translate(ⵠΔᐃⵠ, ᐃᐃᐃΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(65.00003051757812 * ᐃ, ᐃ * 263.4034118652344);
		Ⲇ.bezierCurveTo(109.00003051757812 * ᐃ, ᐃ * 160.40341186523438, ᐃ * 185.00003051757812, ᐃ * 128.40341186523438, ᐃ * 222.00003051757812, 124.40341186523438 * ᐃ);
		Ⲇ.bezierCurveTo(277.0000305175781 * ᐃ, ᐃ * 116.40341186523438, 339.0000305175781 * ᐃ, ᐃ * 134.40341186523438, 379.0000305175781 * ᐃ, ᐃ * 195.40341186523438);
		Ⲇ.bezierCurveTo(ᐃ * 409.0000305175781, 242.40341186523438 * ᐃ, ᐃ * 416.0000305175781, 256.4034118652344 * ᐃ, ᐃ * 428.0000305175781, ᐃ * 304.4034118652344);
		Ⲇ.bezierCurveTo(ᐃ * 457.0000305175781, 203.40341186523438 * ᐃ, 449.0000305175781 * ᐃ, ᐃ * 183.40341186523438, 438.0000305175781 * ᐃ, ᐃ * 162.40341186523438);
		Ⲇ.bezierCurveTo(ᐃ * 381.0000305175781, 73.40341186523438 * ᐃ, ᐃ * 360.0000305175781, ᐃ * 66.40341186523438, 257.0000305175781 * ᐃ, 46.403411865234375 * ᐃ);
		Ⲇ.bezierCurveTo(191.00003051757812 * ᐃ, 45.403411865234375 * ᐃ, 142.00003051757812 * ᐃ, 65.40341186523438 * ᐃ, ᐃ * 101.00003051757812, 115.40341186523438 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ]);
		Ⲇ.globalAlpha = ΔΔΔᐃ;
		var ᐃᐃ = ⵠⵠⵠΔⵠⲆⲆᐃⵠ(ᐃ, Δⵠ);
		Ⲇ.drawImage(ᐃᐃ, 0, 0);
		Ⲇ.translate(ⵠΔᐃᐃ, -ΔΔⵠᐃⵠ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 247.01138305664062, 249.3125 * ᐃ, ᐃ * 161.4465855941215);
		ΔΔ(Ⲇ, undefined, Δⵠ[2], ᐃⵠⲆⵠᐃ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ᐃᐃᐃ, ᐃ * ΔⲆⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 325.0113830566406, ᐃ * 13.767059326171875);
		Ⲇ.bezierCurveTo(ᐃ * 349.5113830566406, 25.767059326171875 * ᐃ, ᐃ * 349.5113830566406, 25.767059326171875 * ᐃ, ᐃ * 374.0113830566406, 37.767059326171875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 384.0113830566406, ᐃ * 44.767059326171875, ᐃ * 383.0113830566406, ᐃ * 50.767059326171875, ᐃ * 368.0113830566406, ᐃ * 68.76705932617188);
		Ⲇ.bezierCurveTo(352.5113830566406 * ᐃ, ᐃ * 91.26705932617188, 352.5113830566406 * ᐃ, ᐃ * 91.26705932617188, ᐃ * 337.0113830566406, ᐃ * 113.76705932617188);
		Ⲇ.bezierCurveTo(ᐃ * 328.0113830566406, ᐃ * 119.76705932617188, ᐃ * 328.0113830566406, ᐃ * 121.76705932617188, ᐃ * 312.0113830566406, ᐃ * 112.76705932617188);
		Ⲇ.bezierCurveTo(ᐃ * 303.0113830566406, ᐃ * 108.26705932617188, 303.0113830566406 * ᐃ, 108.26705932617188 * ᐃ, ᐃ * 294.0113830566406, 103.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(287.0113830566406 * ᐃ, ᐃ * 99.76705932617188, 293.0113830566406 * ᐃ, ᐃ * 84.76705932617188, 297.0113830566406 * ᐃ, ᐃ * 67.76705932617188);
		Ⲇ.bezierCurveTo(302.0113830566406 * ᐃ, 47.767059326171875 * ᐃ, 302.0113830566406 * ᐃ, ᐃ * 47.767059326171875, ᐃ * 307.0113830566406, 27.767059326171875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 310.0113830566406, ᐃ * 15.767059326171875, 317.0113830566406 * ᐃ, ᐃ * 12.767059326171875, 323.0113830566406 * ᐃ, ᐃ * 13.767059326171875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃⵠ], Δⵠ[ⵠⲆᐃ], ⲆⲆᐃⵠⲆⵠⲆ * ᐃ);
		Ⲇ.globalAlpha = ΔⲆᐃᐃ;
		Ⲇ.translate(ⵠᐃⲆ, -5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(325.0113830566406 * ᐃ, 13.767059326171875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 349.5113830566406, ᐃ * 25.767059326171875, 349.5113830566406 * ᐃ, 25.767059326171875 * ᐃ, ᐃ * 374.0113830566406, ᐃ * 37.767059326171875);
		Ⲇ.bezierCurveTo(ᐃ * 384.0113830566406, ᐃ * 44.767059326171875, ᐃ * 383.0113830566406, ᐃ * 50.767059326171875, 368.0113830566406 * ᐃ, 68.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 352.5113830566406, ᐃ * 91.26705932617188, 352.5113830566406 * ᐃ, 91.26705932617188 * ᐃ, ᐃ * 337.0113830566406, ᐃ * 113.76705932617188);
		Ⲇ.bezierCurveTo(ᐃ * 328.0113830566406, ᐃ * 119.76705932617188, ᐃ * 328.0113830566406, ᐃ * 121.76705932617188, 312.0113830566406 * ᐃ, ᐃ * 112.76705932617188);
		Ⲇ.bezierCurveTo(303.0113830566406 * ᐃ, ᐃ * 108.26705932617188, 303.0113830566406 * ᐃ, 108.26705932617188 * ᐃ, 294.0113830566406 * ᐃ, ᐃ * 103.76705932617188);
		Ⲇ.bezierCurveTo(287.0113830566406 * ᐃ, 99.76705932617188 * ᐃ, ᐃ * 293.0113830566406, 84.76705932617188 * ᐃ, 297.0113830566406 * ᐃ, 67.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(302.0113830566406 * ᐃ, ᐃ * 47.767059326171875, ᐃ * 302.0113830566406, 47.767059326171875 * ᐃ, 307.0113830566406 * ᐃ, ᐃ * 27.767059326171875);
		Ⲇ.bezierCurveTo(ᐃ * 310.0113830566406, 15.767059326171875 * ᐃ, 317.0113830566406 * ᐃ, ᐃ * 12.767059326171875, ᐃ * 323.0113830566406, ᐃ * 13.767059326171875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⲆ], Δⵠ[ᐃⲆᐃⵠ], 12 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ⵠᐃⵠΔ;
		Ⲇ.translate(ⲆⲆⵠⲆ, ᐃ * ᐃᐃΔᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 403.0113830566406, ᐃ * 89.76705932617188);
		Ⲇ.bezierCurveTo(ᐃ * 413.0113830566406, ᐃ * 76.76705932617188, 418.0113830566406 * ᐃ, ᐃ * 79.76705932617188, 428.0113830566406 * ᐃ, 92.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(435.0113830566406 * ᐃ, ᐃ * 99.76705932617188, 435.0113830566406 * ᐃ, ᐃ * 99.76705932617188, 442.0113830566406 * ᐃ, ᐃ * 106.76705932617188);
		Ⲇ.bezierCurveTo(450.0113830566406 * ᐃ, 116.76705932617188 * ᐃ, 445.0113830566406 * ᐃ, 119.76705932617188 * ᐃ, 433.0113830566406 * ᐃ, 128.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(408.0113830566406 * ᐃ, 146.26705932617188 * ᐃ, ᐃ * 408.0113830566406, 146.26705932617188 * ᐃ, 383.0113830566406 * ᐃ, 163.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(376.0113830566406 * ᐃ, 166.76705932617188 * ᐃ, ᐃ * 377.0113830566406, 165.76705932617188 * ᐃ, ᐃ * 368.0113830566406, 156.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 359.0113830566406, 144.76705932617188 * ᐃ, 359.0113830566406 * ᐃ, ᐃ * 142.76705932617188, ᐃ * 367.0113830566406, ᐃ * 133.76705932617188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃⵠ], Δⵠ[0], ΔⲆⵠΔᐃ * ᐃ);
		Ⲇ.globalAlpha = ΔᐃⲆⲆ;
		Ⲇ.translate(ⵠⵠⵠΔ, -5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 403.0113830566406, 89.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(413.0113830566406 * ᐃ, ᐃ * 76.76705932617188, ᐃ * 418.0113830566406, ᐃ * 79.76705932617188, 428.0113830566406 * ᐃ, 92.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(435.0113830566406 * ᐃ, 99.76705932617188 * ᐃ, 435.0113830566406 * ᐃ, 99.76705932617188 * ᐃ, ᐃ * 442.0113830566406, 106.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 450.0113830566406, 116.76705932617188 * ᐃ, ᐃ * 445.0113830566406, ᐃ * 119.76705932617188, 433.0113830566406 * ᐃ, ᐃ * 128.76705932617188);
		Ⲇ.bezierCurveTo(ᐃ * 408.0113830566406, 146.26705932617188 * ᐃ, ᐃ * 408.0113830566406, ᐃ * 146.26705932617188, ᐃ * 383.0113830566406, ᐃ * 163.76705932617188);
		Ⲇ.bezierCurveTo(ᐃ * 376.0113830566406, ᐃ * 166.76705932617188, 377.0113830566406 * ᐃ, ᐃ * 165.76705932617188, 368.0113830566406 * ᐃ, ᐃ * 156.76705932617188);
		Ⲇ.bezierCurveTo(ᐃ * 359.0113830566406, 144.76705932617188 * ᐃ, 359.0113830566406 * ᐃ, ᐃ * 142.76705932617188, 367.0113830566406 * ᐃ, ᐃ * 133.76705932617188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ⲆⵠΔⵠ], ᐃ * 12);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ⲆΔΔΔ;
		Ⲇ.translate(ⵠⵠⲆⵠ, ᐃᐃᐃΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(228.01138305664062 * ᐃ, ᐃ * 1.767059326171875);
		Ⲇ.bezierCurveTo(246.51138305664062 * ᐃ, 3.267059326171875 * ᐃ, ᐃ * 246.51138305664062, 3.267059326171875 * ᐃ, 265.0113830566406 * ᐃ, ᐃ * 4.767059326171875);
		Ⲇ.bezierCurveTo(273.0113830566406 * ᐃ, 5.767059326171875 * ᐃ, 275.0113830566406 * ᐃ, 11.767059326171875 * ᐃ, ᐃ * 270.0113830566406, ᐃ * 27.767059326171875);
		Ⲇ.bezierCurveTo(264.0113830566406 * ᐃ, ᐃ * 54.267059326171875, ᐃ * 264.0113830566406, 54.267059326171875 * ᐃ, ᐃ * 258.0113830566406, 80.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 256.0113830566406, ᐃ * 92.76705932617188, 256.0113830566406 * ᐃ, 94.76705932617188 * ᐃ, 242.01138305664062 * ᐃ, 93.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(226.01138305664062 * ᐃ, ᐃ * 95.76705932617188, ᐃ * 225.01138305664062, ᐃ * 91.76705932617188, 225.01138305664062 * ᐃ, ᐃ * 80.76705932617188);
		Ⲇ.bezierCurveTo(223.51138305664062 * ᐃ, 50.267059326171875 * ᐃ, ᐃ * 223.51138305664062, 50.267059326171875 * ᐃ, ᐃ * 222.01138305664062, ᐃ * 19.767059326171875);
		Ⲇ.bezierCurveTo(219.01138305664062 * ᐃ, ᐃ * 8.767059326171875, 224.01138305664062 * ᐃ, ᐃ * 4.767059326171875, ᐃ * 227.01138305664062, 2.767059326171875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⲆ], Δⵠ[ⵠⵠⵠ], ⲆⲆᐃⵠⲆⵠⲆ * ᐃ);
		Ⲇ.globalAlpha = ΔⲆᐃⲆ;
		Ⲇ.translate(ⲆⵠⲆⲆ, -ⲆᐃⲆΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(228.01138305664062 * ᐃ, ᐃ * 1.767059326171875);
		Ⲇ.bezierCurveTo(ᐃ * 246.51138305664062, 3.267059326171875 * ᐃ, 246.51138305664062 * ᐃ, 3.267059326171875 * ᐃ, ᐃ * 265.0113830566406, 4.767059326171875 * ᐃ);
		Ⲇ.bezierCurveTo(273.0113830566406 * ᐃ, ᐃ * 5.767059326171875, 275.0113830566406 * ᐃ, ᐃ * 11.767059326171875, 270.0113830566406 * ᐃ, 27.767059326171875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 264.0113830566406, 54.267059326171875 * ᐃ, 264.0113830566406 * ᐃ, 54.267059326171875 * ᐃ, ᐃ * 258.0113830566406, 80.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 256.0113830566406, 92.76705932617188 * ᐃ, ᐃ * 256.0113830566406, ᐃ * 94.76705932617188, ᐃ * 242.01138305664062, 93.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 226.01138305664062, 95.76705932617188 * ᐃ, 225.01138305664062 * ᐃ, 91.76705932617188 * ᐃ, ᐃ * 225.01138305664062, ᐃ * 80.76705932617188);
		Ⲇ.bezierCurveTo(223.51138305664062 * ᐃ, 50.267059326171875 * ᐃ, ᐃ * 223.51138305664062, ᐃ * 50.267059326171875, ᐃ * 222.01138305664062, ᐃ * 19.767059326171875);
		Ⲇ.bezierCurveTo(219.01138305664062 * ᐃ, ᐃ * 8.767059326171875, 224.01138305664062 * ᐃ, 4.767059326171875 * ᐃ, 227.01138305664062 * ᐃ, ᐃ * 2.767059326171875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ᐃᐃΔⵠ], ΔΔᐃⲆⲆⵠᐃ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ΔΔᐃᐃ, ᐃ * ᐃΔΔⲆⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(142.01138305664062 * ᐃ, 25.767059326171875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 158.51138305664062, 19.767059326171875 * ᐃ, 158.51138305664062 * ᐃ, ᐃ * 19.767059326171875, 175.01138305664062 * ᐃ, ᐃ * 13.767059326171875);
		Ⲇ.bezierCurveTo(188.01138305664062 * ᐃ, ᐃ * 11.767059326171875, 188.01138305664062 * ᐃ, 16.767059326171875 * ᐃ, ᐃ * 191.01138305664062, ᐃ * 29.767059326171875);
		Ⲇ.bezierCurveTo(197.01138305664062 * ᐃ, 60.267059326171875 * ᐃ, 197.01138305664062 * ᐃ, 60.267059326171875 * ᐃ, 203.01138305664062 * ᐃ, 90.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(206.01138305664062 * ᐃ, ᐃ * 102.76705932617188, 196.01138305664062 * ᐃ, ᐃ * 99.76705932617188, ᐃ * 181.01138305664062, 105.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 175.01138305664062, ᐃ * 108.76705932617188, 172.01138305664062 * ᐃ, 104.76705932617188 * ᐃ, 164.01138305664062 * ᐃ, 84.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 152.51138305664062, 63.267059326171875 * ᐃ, 152.51138305664062 * ᐃ, 63.267059326171875 * ᐃ, 141.01138305664062 * ᐃ, 41.767059326171875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 138.01138305664062, 35.767059326171875 * ᐃ, ᐃ * 138.01138305664062, 29.767059326171875 * ᐃ, ᐃ * 141.01138305664062, ᐃ * 27.767059326171875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃ * 12);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(0, -ᐃᐃΔᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 142.01138305664062, ᐃ * 25.767059326171875);
		Ⲇ.bezierCurveTo(158.51138305664062 * ᐃ, 19.767059326171875 * ᐃ, ᐃ * 158.51138305664062, ᐃ * 19.767059326171875, ᐃ * 175.01138305664062, ᐃ * 13.767059326171875);
		Ⲇ.bezierCurveTo(188.01138305664062 * ᐃ, 11.767059326171875 * ᐃ, ᐃ * 188.01138305664062, ᐃ * 16.767059326171875, 191.01138305664062 * ᐃ, 29.767059326171875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 197.01138305664062, 60.267059326171875 * ᐃ, 197.01138305664062 * ᐃ, 60.267059326171875 * ᐃ, ᐃ * 203.01138305664062, 90.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 206.01138305664062, 102.76705932617188 * ᐃ, 196.01138305664062 * ᐃ, ᐃ * 99.76705932617188, 181.01138305664062 * ᐃ, ᐃ * 105.76705932617188);
		Ⲇ.bezierCurveTo(ᐃ * 175.01138305664062, 108.76705932617188 * ᐃ, ᐃ * 172.01138305664062, 104.76705932617188 * ᐃ, ᐃ * 164.01138305664062, ᐃ * 84.76705932617188);
		Ⲇ.bezierCurveTo(ᐃ * 152.51138305664062, ᐃ * 63.267059326171875, ᐃ * 152.51138305664062, 63.267059326171875 * ᐃ, ᐃ * 141.01138305664062, ᐃ * 41.767059326171875);
		Ⲇ.bezierCurveTo(138.01138305664062 * ᐃ, ᐃ * 35.767059326171875, ᐃ * 138.01138305664062, ᐃ * 29.767059326171875, 141.01138305664062 * ᐃ, 27.767059326171875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ᐃᐃⲆⲆ], 12 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(0, ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 70.01138305664062, ᐃ * 76.76705932617188);
		Ⲇ.bezierCurveTo(83.01138305664062 * ᐃ, 64.26705932617188 * ᐃ, ᐃ * 83.01138305664062, ᐃ * 64.26705932617188, 96.01138305664062 * ᐃ, 51.767059326171875 * ᐃ);
		Ⲇ.bezierCurveTo(104.01138305664062 * ᐃ, 44.767059326171875 * ᐃ, 110.01138305664062 * ᐃ, 51.767059326171875 * ᐃ, 119.01138305664062 * ᐃ, 66.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 135.01138305664062, 88.26705932617188 * ᐃ, ᐃ * 135.01138305664062, 88.26705932617188 * ᐃ, ᐃ * 151.01138305664062, 109.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(157.01138305664062 * ᐃ, ᐃ * 119.76705932617188, 153.01138305664062 * ᐃ, ᐃ * 122.76705932617188, ᐃ * 147.01138305664062, 129.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(138.01138305664062 * ᐃ, ᐃ * 140.76705932617188, 136.01138305664062 * ᐃ, 140.76705932617188 * ᐃ, ᐃ * 122.01138305664062, 127.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 99.51138305664062, 110.26705932617188 * ᐃ, 99.51138305664062 * ᐃ, 110.26705932617188 * ᐃ, 77.01138305664062 * ᐃ, 92.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 66.01138305664062, ᐃ * 83.76705932617188, ᐃ * 66.01138305664062, 82.76705932617188 * ᐃ, ᐃ * 69.01138305664062, 78.76705932617188 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆⲆ], Δⵠ[Δⵠⵠⵠ], ᐃ * 12);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(0, -5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(70.01138305664062 * ᐃ, 76.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 83.01138305664062, 64.26705932617188 * ᐃ, ᐃ * 83.01138305664062, 64.26705932617188 * ᐃ, 96.01138305664062 * ᐃ, 51.767059326171875 * ᐃ);
		Ⲇ.bezierCurveTo(104.01138305664062 * ᐃ, 44.767059326171875 * ᐃ, 110.01138305664062 * ᐃ, ᐃ * 51.767059326171875, 119.01138305664062 * ᐃ, ᐃ * 66.76705932617188);
		Ⲇ.bezierCurveTo(135.01138305664062 * ᐃ, 88.26705932617188 * ᐃ, ᐃ * 135.01138305664062, ᐃ * 88.26705932617188, 151.01138305664062 * ᐃ, 109.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(157.01138305664062 * ᐃ, ᐃ * 119.76705932617188, ᐃ * 153.01138305664062, 122.76705932617188 * ᐃ, 147.01138305664062 * ᐃ, 129.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 138.01138305664062, ᐃ * 140.76705932617188, ᐃ * 136.01138305664062, ᐃ * 140.76705932617188, 122.01138305664062 * ᐃ, ᐃ * 127.76705932617188);
		Ⲇ.bezierCurveTo(99.51138305664062 * ᐃ, 110.26705932617188 * ᐃ, ᐃ * 99.51138305664062, ᐃ * 110.26705932617188, 77.01138305664062 * ᐃ, 92.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 66.01138305664062, 83.76705932617188 * ᐃ, 66.01138305664062 * ᐃ, ᐃ * 82.76705932617188, ᐃ * 69.01138305664062, ᐃ * 78.76705932617188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ΔⵠⲆᐃ], 12 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ⵠⵠⵠ, 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 33.011383056640625, ᐃ * 126.76705932617188);
		Ⲇ.bezierCurveTo(22.011383056640625 * ᐃ, 149.76705932617188 * ᐃ, 22.011383056640625 * ᐃ, ᐃ * 149.76705932617188, ᐃ * 11.011383056640625, 172.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 7.011383056640625, 184.76705932617188 * ᐃ, ᐃ * 11.011383056640625, ᐃ * 189.76705932617188, ᐃ * 36.011383056640625, ᐃ * 195.76705932617188);
		Ⲇ.bezierCurveTo(ᐃ * 61.011383056640625, ᐃ * 202.26705932617188, 61.011383056640625 * ᐃ, ᐃ * 202.26705932617188, ᐃ * 86.01138305664062, ᐃ * 208.76705932617188);
		Ⲇ.bezierCurveTo(100.01138305664062 * ᐃ, 214.76705932617188 * ᐃ, ᐃ * 102.01138305664062, 203.76705932617188 * ᐃ, ᐃ * 109.01138305664062, ᐃ * 189.76705932617188);
		Ⲇ.bezierCurveTo(ᐃ * 117.01138305664062, 171.76705932617188 * ᐃ, 116.01138305664062 * ᐃ, ᐃ * 166.76705932617188, 97.01138305664062 * ᐃ, ᐃ * 156.76705932617188);
		Ⲇ.bezierCurveTo(74.01138305664062 * ᐃ, 140.76705932617188 * ᐃ, 74.01138305664062 * ᐃ, 140.76705932617188 * ᐃ, ᐃ * 51.011383056640625, 124.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 42.011383056640625, ᐃ * 118.76705932617188, 37.011383056640625 * ᐃ, 119.76705932617188 * ᐃ, 33.011383056640625 * ᐃ, ᐃ * 126.76705932617188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ], Δⵠ[ⵠᐃⲆⲆ], ᐃ * ᐃᐃΔΔⵠ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(0, ᐃ * -5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 33.011383056640625, 126.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(22.011383056640625 * ᐃ, 149.76705932617188 * ᐃ, 22.011383056640625 * ᐃ, 149.76705932617188 * ᐃ, 11.011383056640625 * ᐃ, 172.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 7.011383056640625, 184.76705932617188 * ᐃ, ᐃ * 11.011383056640625, ᐃ * 189.76705932617188, ᐃ * 36.011383056640625, ᐃ * 195.76705932617188);
		Ⲇ.bezierCurveTo(61.011383056640625 * ᐃ, ᐃ * 202.26705932617188, ᐃ * 61.011383056640625, 202.26705932617188 * ᐃ, ᐃ * 86.01138305664062, ᐃ * 208.76705932617188);
		Ⲇ.bezierCurveTo(100.01138305664062 * ᐃ, 214.76705932617188 * ᐃ, 102.01138305664062 * ᐃ, 203.76705932617188 * ᐃ, ᐃ * 109.01138305664062, 189.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 117.01138305664062, 171.76705932617188 * ᐃ, ᐃ * 116.01138305664062, ᐃ * 166.76705932617188, 97.01138305664062 * ᐃ, 156.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(74.01138305664062 * ᐃ, ᐃ * 140.76705932617188, 74.01138305664062 * ᐃ, 140.76705932617188 * ᐃ, ᐃ * 51.011383056640625, 124.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(42.011383056640625 * ᐃ, 118.76705932617188 * ᐃ, ᐃ * 37.011383056640625, 119.76705932617188 * ᐃ, 33.011383056640625 * ᐃ, ᐃ * 126.76705932617188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⵠ], Δⵠ[ΔΔⲆᐃ], ᐃ * 12);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(0, ᐃᐃᐃᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 13.011383056640625, 229.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 45.511383056640625, ᐃ * 233.76705932617188, 45.511383056640625 * ᐃ, ᐃ * 233.76705932617188, ᐃ * 78.01138305664062, 237.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(92.01138305664062 * ᐃ, ᐃ * 239.76705932617188, 92.01138305664062 * ᐃ, 246.76705932617188 * ᐃ, ᐃ * 91.01138305664062, ᐃ * 257.7670593261719);
		Ⲇ.bezierCurveTo(ᐃ * 92.01138305664062, ᐃ * 275.7670593261719, 91.01138305664062 * ᐃ, 274.7670593261719 * ᐃ, 68.01138305664062 * ᐃ, ᐃ * 276.7670593261719);
		Ⲇ.bezierCurveTo(42.511383056640625 * ᐃ, 279.7670593261719 * ᐃ, 42.511383056640625 * ᐃ, ᐃ * 279.7670593261719, 17.011383056640625 * ᐃ, 282.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 2.011383056640625, ᐃ * 282.7670593261719, 3.011383056640625 * ᐃ, 276.7670593261719 * ᐃ, ᐃ * 2.011383056640625, 260.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 2.011383056640625, ᐃ * 231.76705932617188, 4.011383056640625 * ᐃ, ᐃ * 232.76705932617188, ᐃ * 11.011383056640625, ᐃ * 230.76705932617188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ], Δⵠ[ΔⲆⲆ], ⵠᐃΔᐃᐃ * ᐃ);
		Ⲇ.globalAlpha = ΔΔΔᐃ;
		Ⲇ.translate(0, -5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(13.011383056640625 * ᐃ, 229.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 45.511383056640625, 233.76705932617188 * ᐃ, ᐃ * 45.511383056640625, 233.76705932617188 * ᐃ, ᐃ * 78.01138305664062, ᐃ * 237.76705932617188);
		Ⲇ.bezierCurveTo(ᐃ * 92.01138305664062, ᐃ * 239.76705932617188, ᐃ * 92.01138305664062, 246.76705932617188 * ᐃ, 91.01138305664062 * ᐃ, ᐃ * 257.7670593261719);
		Ⲇ.bezierCurveTo(ᐃ * 92.01138305664062, 275.7670593261719 * ᐃ, ᐃ * 91.01138305664062, ᐃ * 274.7670593261719, 68.01138305664062 * ᐃ, ᐃ * 276.7670593261719);
		Ⲇ.bezierCurveTo(42.511383056640625 * ᐃ, 279.7670593261719 * ᐃ, ᐃ * 42.511383056640625, ᐃ * 279.7670593261719, 17.011383056640625 * ᐃ, 282.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 2.011383056640625, 282.7670593261719 * ᐃ, 3.011383056640625 * ᐃ, 276.7670593261719 * ᐃ, ᐃ * 2.011383056640625, 260.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(2.011383056640625 * ᐃ, ᐃ * 231.76705932617188, ᐃ * 4.011383056640625, 232.76705932617188 * ᐃ, 11.011383056640625 * ᐃ, ᐃ * 230.76705932617188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ΔΔⲆⲆ], ⲆᐃᐃⲆᐃ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : Δᐃⵠⵠ;
		Ⲇ.translate(0, 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 97.01138305664062, ᐃ * 329.7670593261719);
		Ⲇ.bezierCurveTo(ᐃ * 68.51138305664062, ᐃ * 343.7670593261719, ᐃ * 68.51138305664062, 343.7670593261719 * ᐃ, ᐃ * 40.011383056640625, ᐃ * 357.7670593261719);
		Ⲇ.bezierCurveTo(29.011383056640625 * ᐃ, ᐃ * 360.7670593261719, ᐃ * 27.011383056640625, 361.7670593261719 * ᐃ, ᐃ * 20.011383056640625, 346.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 16.511383056640625, 336.2670593261719 * ᐃ, ᐃ * 16.511383056640625, ᐃ * 336.2670593261719, 13.011383056640625 * ᐃ, 325.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 10.011383056640625, ᐃ * 307.7670593261719, 18.011383056640625 * ᐃ, ᐃ * 312.7670593261719, 34.011383056640625 * ᐃ, ᐃ * 306.7670593261719);
		Ⲇ.bezierCurveTo(ᐃ * 59.511383056640625, 302.2670593261719 * ᐃ, ᐃ * 59.511383056640625, 302.2670593261719 * ᐃ, ᐃ * 85.01138305664062, 297.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(97.01138305664062 * ᐃ, 294.7670593261719 * ᐃ, ᐃ * 100.01138305664062, ᐃ * 297.7670593261719, 100.01138305664062 * ᐃ, 307.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 105.01138305664062, ᐃ * 326.7670593261719, ᐃ * 103.01138305664062, ᐃ * 325.7670593261719, ᐃ * 97.01138305664062, 329.7670593261719 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃ * 12);
		Ⲇ.globalAlpha = ⲆΔΔΔ;
		Ⲇ.translate(ⵠⵠⵠ, ᐃ * -ΔⵠΔᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 97.01138305664062, 329.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 68.51138305664062, 343.7670593261719 * ᐃ, ᐃ * 68.51138305664062, 343.7670593261719 * ᐃ, ᐃ * 40.011383056640625, 357.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(29.011383056640625 * ᐃ, ᐃ * 360.7670593261719, 27.011383056640625 * ᐃ, ᐃ * 361.7670593261719, ᐃ * 20.011383056640625, ᐃ * 346.7670593261719);
		Ⲇ.bezierCurveTo(ᐃ * 16.511383056640625, 336.2670593261719 * ᐃ, 16.511383056640625 * ᐃ, ᐃ * 336.2670593261719, 13.011383056640625 * ᐃ, ᐃ * 325.7670593261719);
		Ⲇ.bezierCurveTo(ᐃ * 10.011383056640625, 307.7670593261719 * ᐃ, ᐃ * 18.011383056640625, ᐃ * 312.7670593261719, ᐃ * 34.011383056640625, 306.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 59.511383056640625, 302.2670593261719 * ᐃ, ᐃ * 59.511383056640625, 302.2670593261719 * ᐃ, 85.01138305664062 * ᐃ, 297.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(97.01138305664062 * ᐃ, 294.7670593261719 * ᐃ, ᐃ * 100.01138305664062, ᐃ * 297.7670593261719, 100.01138305664062 * ᐃ, ᐃ * 307.7670593261719);
		Ⲇ.bezierCurveTo(105.01138305664062 * ᐃ, 326.7670593261719 * ᐃ, ᐃ * 103.01138305664062, 325.7670593261719 * ᐃ, 97.01138305664062 * ᐃ, ᐃ * 329.7670593261719);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[2], ᐃ * 12);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ΔΔᐃᐃ, ᐃ * ᐃⵠᐃⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 394.0113830566406, 181.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(426.5113830566406 * ᐃ, 166.76705932617188 * ᐃ, ᐃ * 426.5113830566406, ᐃ * 166.76705932617188, 459.0113830566406 * ᐃ, 151.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(469.0113830566406 * ᐃ, ᐃ * 152.76705932617188, ᐃ * 469.0113830566406, 155.76705932617188 * ᐃ, ᐃ * 472.0113830566406, ᐃ * 165.76705932617188);
		Ⲇ.bezierCurveTo(476.0113830566406 * ᐃ, 177.26705932617188 * ᐃ, ᐃ * 476.0113830566406, ᐃ * 177.26705932617188, ᐃ * 480.0113830566406, 188.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 483.0113830566406, 199.76705932617188 * ᐃ, 480.0113830566406 * ᐃ, ᐃ * 200.76705932617188, ᐃ * 460.0113830566406, 205.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(433.5113830566406 * ᐃ, ᐃ * 210.26705932617188, ᐃ * 433.5113830566406, ᐃ * 210.26705932617188, ᐃ * 407.0113830566406, 214.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(395.0113830566406 * ᐃ, ᐃ * 218.76705932617188, ᐃ * 397.0113830566406, 211.76705932617188 * ᐃ, 393.0113830566406 * ᐃ, ᐃ * 202.76705932617188);
		Ⲇ.bezierCurveTo(387.0113830566406 * ᐃ, 188.76705932617188 * ᐃ, ᐃ * 387.0113830566406, ᐃ * 187.76705932617188, ᐃ * 394.0113830566406, ᐃ * 181.76705932617188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ], Δⵠ[ΔⲆⲆ], ᐃ * ⵠᐃΔᐃᐃ);
		Ⲇ.globalAlpha = ΔⵠΔ;
		Ⲇ.translate(0, ᐃ * -ᐃΔΔⲆⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(394.0113830566406 * ᐃ, 181.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(426.5113830566406 * ᐃ, ᐃ * 166.76705932617188, 426.5113830566406 * ᐃ, 166.76705932617188 * ᐃ, 459.0113830566406 * ᐃ, 151.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(469.0113830566406 * ᐃ, 152.76705932617188 * ᐃ, 469.0113830566406 * ᐃ, ᐃ * 155.76705932617188, ᐃ * 472.0113830566406, 165.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(476.0113830566406 * ᐃ, ᐃ * 177.26705932617188, 476.0113830566406 * ᐃ, ᐃ * 177.26705932617188, ᐃ * 480.0113830566406, 188.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 483.0113830566406, 199.76705932617188 * ᐃ, 480.0113830566406 * ᐃ, 200.76705932617188 * ᐃ, 460.0113830566406 * ᐃ, ᐃ * 205.76705932617188);
		Ⲇ.bezierCurveTo(433.5113830566406 * ᐃ, 210.26705932617188 * ᐃ, 433.5113830566406 * ᐃ, ᐃ * 210.26705932617188, 407.0113830566406 * ᐃ, 214.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(395.0113830566406 * ᐃ, 218.76705932617188 * ᐃ, ᐃ * 397.0113830566406, 211.76705932617188 * ᐃ, 393.0113830566406 * ᐃ, 202.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(387.0113830566406 * ᐃ, 188.76705932617188 * ᐃ, 387.0113830566406 * ᐃ, ᐃ * 187.76705932617188, ᐃ * 394.0113830566406, 181.76705932617188 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ᐃᐃᐃⵠ], 12 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : Δⵠᐃ;
		Ⲇ.translate(0, 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(411.0113830566406 * ᐃ, 234.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 446.0113830566406, 233.26705932617188 * ᐃ, 446.0113830566406 * ᐃ, 233.26705932617188 * ᐃ, 481.0113830566406 * ᐃ, 231.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 491.0113830566406, 232.76705932617188 * ᐃ, ᐃ * 493.0113830566406, 239.76705932617188 * ᐃ, 491.0113830566406 * ᐃ, ᐃ * 251.76705932617188);
		Ⲇ.bezierCurveTo(ᐃ * 490.0113830566406, 263.7670593261719 * ᐃ, 490.0113830566406 * ᐃ, ᐃ * 263.7670593261719, ᐃ * 489.0113830566406, 275.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(487.0113830566406 * ᐃ, ᐃ * 283.7670593261719, ᐃ * 483.0113830566406, 284.7670593261719 * ᐃ, ᐃ * 464.0113830566406, ᐃ * 280.7670593261719);
		Ⲇ.bezierCurveTo(437.0113830566406 * ᐃ, 273.7670593261719 * ᐃ, 437.0113830566406 * ᐃ, 273.7670593261719 * ᐃ, 410.0113830566406 * ᐃ, 266.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(400.0113830566406 * ᐃ, ᐃ * 261.7670593261719, ᐃ * 401.0113830566406, 259.7670593261719 * ᐃ, 402.0113830566406 * ᐃ, ᐃ * 249.76705932617188);
		Ⲇ.bezierCurveTo(401.0113830566406 * ᐃ, 237.76705932617188 * ᐃ, ᐃ * 403.0113830566406, 235.76705932617188 * ᐃ, ᐃ * 408.0113830566406, ᐃ * 234.76705932617188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ], Δⵠ[0], ᐃⲆⵠΔᐃ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆⲆ;
		Ⲇ.translate(0, ᐃ * -ΔΔⲆⲆⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(411.0113830566406 * ᐃ, 234.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(446.0113830566406 * ᐃ, 233.26705932617188 * ᐃ, ᐃ * 446.0113830566406, ᐃ * 233.26705932617188, ᐃ * 481.0113830566406, 231.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 491.0113830566406, ᐃ * 232.76705932617188, ᐃ * 493.0113830566406, 239.76705932617188 * ᐃ, 491.0113830566406 * ᐃ, 251.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 490.0113830566406, 263.7670593261719 * ᐃ, 490.0113830566406 * ᐃ, ᐃ * 263.7670593261719, ᐃ * 489.0113830566406, ᐃ * 275.7670593261719);
		Ⲇ.bezierCurveTo(ᐃ * 487.0113830566406, 283.7670593261719 * ᐃ, ᐃ * 483.0113830566406, 284.7670593261719 * ᐃ, 464.0113830566406 * ᐃ, ᐃ * 280.7670593261719);
		Ⲇ.bezierCurveTo(ᐃ * 437.0113830566406, 273.7670593261719 * ᐃ, ᐃ * 437.0113830566406, ᐃ * 273.7670593261719, 410.0113830566406 * ᐃ, 266.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(400.0113830566406 * ᐃ, ᐃ * 261.7670593261719, 401.0113830566406 * ᐃ, ᐃ * 259.7670593261719, ᐃ * 402.0113830566406, 249.76705932617188 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 401.0113830566406, 237.76705932617188 * ᐃ, 403.0113830566406 * ᐃ, 235.76705932617188 * ᐃ, 408.0113830566406 * ᐃ, 234.76705932617188 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[2], ᐃ * 12);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ᐃᐃΔ;
		Ⲇ.translate(ΔⲆⲆ, ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 400.0113830566406, 290.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 437.0113830566406, ᐃ * 301.2670593261719, ᐃ * 437.0113830566406, ᐃ * 301.2670593261719, 474.0113830566406 * ᐃ, ᐃ * 311.7670593261719);
		Ⲇ.bezierCurveTo(ᐃ * 484.0113830566406, ᐃ * 319.7670593261719, ᐃ * 481.0113830566406, ᐃ * 322.7670593261719, ᐃ * 474.0113830566406, ᐃ * 335.7670593261719);
		Ⲇ.bezierCurveTo(ᐃ * 465.5113830566406, 354.7670593261719 * ᐃ, 465.5113830566406 * ᐃ, ᐃ * 354.7670593261719, ᐃ * 457.0113830566406, ᐃ * 373.7670593261719);
		Ⲇ.bezierCurveTo(449.0113830566406 * ᐃ, 386.7670593261719 * ᐃ, ᐃ * 444.0113830566406, ᐃ * 384.7670593261719, ᐃ * 427.0113830566406, ᐃ * 370.7670593261719);
		Ⲇ.bezierCurveTo(403.0113830566406 * ᐃ, ᐃ * 354.7670593261719, ᐃ * 403.0113830566406, 354.7670593261719 * ᐃ, 379.0113830566406 * ᐃ, 338.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(371.0113830566406 * ᐃ, 327.7670593261719 * ᐃ, 373.0113830566406 * ᐃ, ᐃ * 323.7670593261719, 377.0113830566406 * ᐃ, 313.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 386.0113830566406, ᐃ * 292.7670593261719, 393.0113830566406 * ᐃ, ᐃ * 288.7670593261719, ᐃ * 398.0113830566406, 291.7670593261719 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃ * 12);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(0, -5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(400.0113830566406 * ᐃ, ᐃ * 290.7670593261719);
		Ⲇ.bezierCurveTo(ᐃ * 437.0113830566406, 301.2670593261719 * ᐃ, 437.0113830566406 * ᐃ, ᐃ * 301.2670593261719, ᐃ * 474.0113830566406, ᐃ * 311.7670593261719);
		Ⲇ.bezierCurveTo(484.0113830566406 * ᐃ, ᐃ * 319.7670593261719, 481.0113830566406 * ᐃ, ᐃ * 322.7670593261719, 474.0113830566406 * ᐃ, ᐃ * 335.7670593261719);
		Ⲇ.bezierCurveTo(465.5113830566406 * ᐃ, 354.7670593261719 * ᐃ, ᐃ * 465.5113830566406, ᐃ * 354.7670593261719, ᐃ * 457.0113830566406, 373.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(449.0113830566406 * ᐃ, ᐃ * 386.7670593261719, 444.0113830566406 * ᐃ, 384.7670593261719 * ᐃ, ᐃ * 427.0113830566406, ᐃ * 370.7670593261719);
		Ⲇ.bezierCurveTo(403.0113830566406 * ᐃ, ᐃ * 354.7670593261719, 403.0113830566406 * ᐃ, ᐃ * 354.7670593261719, 379.0113830566406 * ᐃ, ᐃ * 338.7670593261719);
		Ⲇ.bezierCurveTo(ᐃ * 371.0113830566406, ᐃ * 327.7670593261719, 373.0113830566406 * ᐃ, 323.7670593261719 * ᐃ, ᐃ * 377.0113830566406, 313.7670593261719 * ᐃ);
		Ⲇ.bezierCurveTo(386.0113830566406 * ᐃ, ᐃ * 292.7670593261719, ᐃ * 393.0113830566406, 288.7670593261719 * ᐃ, 398.0113830566406 * ᐃ, 291.7670593261719 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆᐃⵠ], Δⵠ[2], 12 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ᐃᐃⲆ, ᐃ * 5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(366.0113830566406 * ᐃ, 361.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 393.0113830566406, ᐃ * 383.2216033935547, 393.0113830566406 * ᐃ, ᐃ * 383.2216033935547, ᐃ * 420.0113830566406, 405.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 427.0113830566406, 414.2216033935547 * ᐃ, 425.0113830566406 * ᐃ, 417.2216033935547 * ᐃ, ᐃ * 413.0113830566406, 428.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 405.5113830566406, 435.2216033935547 * ᐃ, ᐃ * 405.5113830566406, ᐃ * 435.2216033935547, ᐃ * 398.0113830566406, ᐃ * 442.2216033935547);
		Ⲇ.bezierCurveTo(388.0113830566406 * ᐃ, 451.2216033935547 * ᐃ, ᐃ * 385.0113830566406, 445.2216033935547 * ᐃ, 373.0113830566406 * ᐃ, ᐃ * 428.2216033935547);
		Ⲇ.bezierCurveTo(358.5113830566406 * ᐃ, 408.2216033935547 * ᐃ, 358.5113830566406 * ᐃ, ᐃ * 408.2216033935547, 344.0113830566406 * ᐃ, ᐃ * 388.2216033935547);
		Ⲇ.bezierCurveTo(337.0113830566406 * ᐃ, 378.2216033935547 * ᐃ, 342.0113830566406 * ᐃ, 377.2216033935547 * ᐃ, ᐃ * 347.0113830566406, 371.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(359.0113830566406 * ᐃ, 359.2216033935547 * ᐃ, ᐃ * 361.0113830566406, 358.2216033935547 * ᐃ, ᐃ * 364.0113830566406, ᐃ * 361.2216033935547);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃ * ᐃᐃΔΔⵠ);
		Ⲇ.globalAlpha = ΔⵠⲆⲆ;
		Ⲇ.translate(ⵠᐃⲆⲆ, -5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 366.0113830566406, ᐃ * 361.2216033935547);
		Ⲇ.bezierCurveTo(393.0113830566406 * ᐃ, ᐃ * 383.2216033935547, 393.0113830566406 * ᐃ, 383.2216033935547 * ᐃ, ᐃ * 420.0113830566406, ᐃ * 405.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 427.0113830566406, ᐃ * 414.2216033935547, ᐃ * 425.0113830566406, ᐃ * 417.2216033935547, ᐃ * 413.0113830566406, ᐃ * 428.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 405.5113830566406, 435.2216033935547 * ᐃ, ᐃ * 405.5113830566406, 435.2216033935547 * ᐃ, ᐃ * 398.0113830566406, 442.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 388.0113830566406, 451.2216033935547 * ᐃ, 385.0113830566406 * ᐃ, ᐃ * 445.2216033935547, ᐃ * 373.0113830566406, 428.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 358.5113830566406, ᐃ * 408.2216033935547, 358.5113830566406 * ᐃ, 408.2216033935547 * ᐃ, ᐃ * 344.0113830566406, ᐃ * 388.2216033935547);
		Ⲇ.bezierCurveTo(337.0113830566406 * ᐃ, 378.2216033935547 * ᐃ, 342.0113830566406 * ᐃ, 377.2216033935547 * ᐃ, ᐃ * 347.0113830566406, ᐃ * 371.2216033935547);
		Ⲇ.bezierCurveTo(359.0113830566406 * ᐃ, 359.2216033935547 * ᐃ, 361.0113830566406 * ᐃ, ᐃ * 358.2216033935547, 364.0113830566406 * ᐃ, ᐃ * 361.2216033935547);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ΔΔⲆⲆ], ᐃ * 12);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(0, ⵠⵠᐃᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(323.0113830566406 * ᐃ, ᐃ * 393.2216033935547);
		Ⲇ.bezierCurveTo(338.0113830566406 * ᐃ, 424.7216033935547 * ᐃ, 338.0113830566406 * ᐃ, 424.7216033935547 * ᐃ, ᐃ * 353.0113830566406, ᐃ * 456.2216033935547);
		Ⲇ.bezierCurveTo(355.0113830566406 * ᐃ, ᐃ * 467.2216033935547, 354.0113830566406 * ᐃ, ᐃ * 469.2216033935547, 336.0113830566406 * ᐃ, ᐃ * 475.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 326.0113830566406, ᐃ * 478.2216033935547, 326.0113830566406 * ᐃ, ᐃ * 478.2216033935547, ᐃ * 316.0113830566406, ᐃ * 481.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 304.0113830566406, 484.2216033935547 * ᐃ, 304.0113830566406 * ᐃ, 477.2216033935547 * ᐃ, 301.0113830566406 * ᐃ, ᐃ * 454.2216033935547);
		Ⲇ.bezierCurveTo(295.5113830566406 * ᐃ, 429.2216033935547 * ᐃ, ᐃ * 295.5113830566406, ᐃ * 429.2216033935547, 290.0113830566406 * ᐃ, 404.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(287.0113830566406 * ᐃ, 396.2216033935547 * ᐃ, 297.0113830566406 * ᐃ, ᐃ * 394.2216033935547, 303.0113830566406 * ᐃ, 392.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 316.0113830566406, ᐃ * 387.2216033935547, ᐃ * 318.0113830566406, 387.2216033935547 * ᐃ, ᐃ * 323.0113830566406, 394.2216033935547 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃ], Δⵠ[ⵠᐃⲆⲆ], 12 * ᐃ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(0, ᐃ * -5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 323.0113830566406, 393.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 338.0113830566406, 424.7216033935547 * ᐃ, ᐃ * 338.0113830566406, ᐃ * 424.7216033935547, 353.0113830566406 * ᐃ, 456.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 355.0113830566406, ᐃ * 467.2216033935547, ᐃ * 354.0113830566406, ᐃ * 469.2216033935547, 336.0113830566406 * ᐃ, ᐃ * 475.2216033935547);
		Ⲇ.bezierCurveTo(326.0113830566406 * ᐃ, ᐃ * 478.2216033935547, 326.0113830566406 * ᐃ, ᐃ * 478.2216033935547, ᐃ * 316.0113830566406, ᐃ * 481.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 304.0113830566406, 484.2216033935547 * ᐃ, ᐃ * 304.0113830566406, ᐃ * 477.2216033935547, ᐃ * 301.0113830566406, ᐃ * 454.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 295.5113830566406, 429.2216033935547 * ᐃ, 295.5113830566406 * ᐃ, ᐃ * 429.2216033935547, 290.0113830566406 * ᐃ, ᐃ * 404.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 287.0113830566406, ᐃ * 396.2216033935547, ᐃ * 297.0113830566406, 394.2216033935547 * ᐃ, 303.0113830566406 * ᐃ, 392.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(316.0113830566406 * ᐃ, ᐃ * 387.2216033935547, ᐃ * 318.0113830566406, ᐃ * 387.2216033935547, 323.0113830566406 * ᐃ, 394.2216033935547 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⵠ], Δⵠ[2], ᐃᐃΔΔⵠ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(0, 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 270.0113830566406, ᐃ * 413.2216033935547);
		Ⲇ.bezierCurveTo(271.0113830566406 * ᐃ, ᐃ * 445.7216033935547, ᐃ * 271.0113830566406, 445.7216033935547 * ᐃ, 272.0113830566406 * ᐃ, ᐃ * 478.2216033935547);
		Ⲇ.bezierCurveTo(273.0113830566406 * ᐃ, 490.2216033935547 * ᐃ, ᐃ * 267.0113830566406, 493.2216033935547 * ᐃ, ᐃ * 249.01138305664062, ᐃ * 490.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 222.01138305664062, ᐃ * 492.2216033935547, 220.01138305664062 * ᐃ, 485.2216033935547 * ᐃ, 225.01138305664062 * ᐃ, ᐃ * 467.2216033935547);
		Ⲇ.bezierCurveTo(230.51138305664062 * ᐃ, ᐃ * 440.2216033935547, ᐃ * 230.51138305664062, ᐃ * 440.2216033935547, 236.01138305664062 * ᐃ, ᐃ * 413.2216033935547);
		Ⲇ.bezierCurveTo(237.01138305664062 * ᐃ, 405.2216033935547 * ᐃ, ᐃ * 238.01138305664062, 404.2216033935547 * ᐃ, ᐃ * 253.01138305664062, ᐃ * 403.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 269.0113830566406, ᐃ * 405.2216033935547, 270.0113830566406 * ᐃ, ᐃ * 407.2216033935547, ᐃ * 269.0113830566406, ᐃ * 412.2216033935547);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃᐃ], Δⵠ[ⵠⵠⵠ], ᐃ * 12);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(0, ᐃ * -5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 270.0113830566406, 413.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(271.0113830566406 * ᐃ, ᐃ * 445.7216033935547, 271.0113830566406 * ᐃ, 445.7216033935547 * ᐃ, 272.0113830566406 * ᐃ, ᐃ * 478.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 273.0113830566406, 490.2216033935547 * ᐃ, ᐃ * 267.0113830566406, ᐃ * 493.2216033935547, ᐃ * 249.01138305664062, 490.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 222.01138305664062, ᐃ * 492.2216033935547, ᐃ * 220.01138305664062, ᐃ * 485.2216033935547, 225.01138305664062 * ᐃ, ᐃ * 467.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 230.51138305664062, 440.2216033935547 * ᐃ, 230.51138305664062 * ᐃ, ᐃ * 440.2216033935547, ᐃ * 236.01138305664062, ᐃ * 413.2216033935547);
		Ⲇ.bezierCurveTo(237.01138305664062 * ᐃ, ᐃ * 405.2216033935547, 238.01138305664062 * ᐃ, ᐃ * 404.2216033935547, 253.01138305664062 * ᐃ, ᐃ * 403.2216033935547);
		Ⲇ.bezierCurveTo(269.0113830566406 * ᐃ, 405.2216033935547 * ᐃ, ᐃ * 270.0113830566406, 407.2216033935547 * ᐃ, 269.0113830566406 * ᐃ, ᐃ * 412.2216033935547);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ΔΔⲆⲆ], ᐃ * 12);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔⵠⲆⲆ;
		Ⲇ.translate(0, ᐃᐃⵠᐃΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(207.01138305664062 * ᐃ, 406.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 197.51138305664062, 440.7216033935547 * ᐃ, ᐃ * 197.51138305664062, 440.7216033935547 * ᐃ, 188.01138305664062 * ᐃ, ᐃ * 475.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 184.01138305664062, ᐃ * 485.2216033935547, ᐃ * 179.01138305664062, ᐃ * 491.2216033935547, ᐃ * 152.01138305664062, 477.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(136.51138305664062 * ᐃ, ᐃ * 469.7216033935547, ᐃ * 136.51138305664062, ᐃ * 469.7216033935547, ᐃ * 121.01138305664062, ᐃ * 462.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 109.01138305664062, ᐃ * 453.2216033935547, 117.01138305664062 * ᐃ, ᐃ * 447.2216033935547, ᐃ * 133.01138305664062, ᐃ * 427.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 146.51138305664062, 406.7216033935547 * ᐃ, 146.51138305664062 * ᐃ, 406.7216033935547 * ᐃ, 160.01138305664062 * ᐃ, ᐃ * 386.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 163.01138305664062, ᐃ * 377.2216033935547, 168.01138305664062 * ᐃ, ᐃ * 378.2216033935547, 187.01138305664062 * ᐃ, ᐃ * 387.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 206.01138305664062, ᐃ * 395.2216033935547, 208.01138305664062 * ᐃ, ᐃ * 398.2216033935547, ᐃ * 207.01138305664062, ᐃ * 405.2216033935547);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], 12 * ᐃ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(0, ᐃ * -ΔⲆⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 207.01138305664062, ᐃ * 406.2216033935547);
		Ⲇ.bezierCurveTo(197.51138305664062 * ᐃ, 440.7216033935547 * ᐃ, 197.51138305664062 * ᐃ, ᐃ * 440.7216033935547, ᐃ * 188.01138305664062, ᐃ * 475.2216033935547);
		Ⲇ.bezierCurveTo(184.01138305664062 * ᐃ, 485.2216033935547 * ᐃ, ᐃ * 179.01138305664062, 491.2216033935547 * ᐃ, ᐃ * 152.01138305664062, 477.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 136.51138305664062, ᐃ * 469.7216033935547, ᐃ * 136.51138305664062, ᐃ * 469.7216033935547, ᐃ * 121.01138305664062, ᐃ * 462.2216033935547);
		Ⲇ.bezierCurveTo(109.01138305664062 * ᐃ, ᐃ * 453.2216033935547, 117.01138305664062 * ᐃ, ᐃ * 447.2216033935547, ᐃ * 133.01138305664062, 427.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 146.51138305664062, 406.7216033935547 * ᐃ, ᐃ * 146.51138305664062, ᐃ * 406.7216033935547, 160.01138305664062 * ᐃ, ᐃ * 386.2216033935547);
		Ⲇ.bezierCurveTo(163.01138305664062 * ᐃ, ᐃ * 377.2216033935547, 168.01138305664062 * ᐃ, ᐃ * 378.2216033935547, 187.01138305664062 * ᐃ, ᐃ * 387.2216033935547);
		Ⲇ.bezierCurveTo(206.01138305664062 * ᐃ, ᐃ * 395.2216033935547, ᐃ * 208.01138305664062, ᐃ * 398.2216033935547, ᐃ * 207.01138305664062, ᐃ * 405.2216033935547);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠᐃ], Δⵠ[ᐃᐃⲆⲆ], ⵠᐃⵠΔᐃ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(0, ⲆⵠΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(130.01138305664062 * ᐃ, 375.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(109.51138305664062 * ᐃ, 400.7216033935547 * ᐃ, 109.51138305664062 * ᐃ, 400.7216033935547 * ᐃ, 89.01138305664062 * ᐃ, ᐃ * 426.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 82.01138305664062, ᐃ * 435.2216033935547, 77.01138305664062 * ᐃ, ᐃ * 435.2216033935547, ᐃ * 62.011383056640625, 417.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(43.011383056640625 * ᐃ, ᐃ * 397.2216033935547, 47.011383056640625 * ᐃ, 395.2216033935547 * ᐃ, 62.011383056640625 * ᐃ, 382.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 84.01138305664062, ᐃ * 366.7216033935547, 84.01138305664062 * ᐃ, 366.7216033935547 * ᐃ, 106.01138305664062 * ᐃ, ᐃ * 351.2216033935547);
		Ⲇ.bezierCurveTo(116.01138305664062 * ᐃ, ᐃ * 344.2216033935547, 120.01138305664062 * ᐃ, ᐃ * 347.2216033935547, 127.01138305664062 * ᐃ, 356.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 137.01138305664062, 366.2216033935547 * ᐃ, 137.01138305664062 * ᐃ, 366.2216033935547 * ᐃ, ᐃ * 131.01138305664062, 376.2216033935547 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠⵠⵠΔ], 12 * ᐃ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(0, ᐃ * -5);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 130.01138305664062, 375.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(109.51138305664062 * ᐃ, ᐃ * 400.7216033935547, ᐃ * 109.51138305664062, ᐃ * 400.7216033935547, ᐃ * 89.01138305664062, ᐃ * 426.2216033935547);
		Ⲇ.bezierCurveTo(82.01138305664062 * ᐃ, 435.2216033935547 * ᐃ, 77.01138305664062 * ᐃ, 435.2216033935547 * ᐃ, ᐃ * 62.011383056640625, ᐃ * 417.2216033935547);
		Ⲇ.bezierCurveTo(ᐃ * 43.011383056640625, 397.2216033935547 * ᐃ, 47.011383056640625 * ᐃ, ᐃ * 395.2216033935547, 62.011383056640625 * ᐃ, 382.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 84.01138305664062, ᐃ * 366.7216033935547, 84.01138305664062 * ᐃ, ᐃ * 366.7216033935547, 106.01138305664062 * ᐃ, 351.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(116.01138305664062 * ᐃ, 344.2216033935547 * ᐃ, ᐃ * 120.01138305664062, ᐃ * 347.2216033935547, 127.01138305664062 * ᐃ, 356.2216033935547 * ᐃ);
		Ⲇ.bezierCurveTo(137.01138305664062 * ᐃ, 366.2216033935547 * ᐃ, ᐃ * 137.01138305664062, ᐃ * 366.2216033935547, 131.01138305664062 * ᐃ, ᐃ * 376.2216033935547);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[2], ᐃ * 12);
		return ΔⲆ
	}

	function ΔⵠᐃᐃΔΔⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 142;
		ΔⲆ.height = 118 * ᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(111 * ᐃ, ᐃ * 27.3671875);
		Ⲇ.bezierCurveTo(ᐃ * 128, ᐃ * 9.3671875, 125 * ᐃ, 13.3671875 * ᐃ, ᐃ * 126, ᐃ * 21.3671875);
		Ⲇ.bezierCurveTo(ᐃ * 126, ᐃ * 33.3671875, 119 * ᐃ, ᐃ * 43.3671875, 118 * ᐃ, ᐃ * 42.3671875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⲆ], Δⵠ[ᐃⲆᐃⲆ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 31, ᐃ * 23.3671875);
		Ⲇ.bezierCurveTo(17 * ᐃ, 15.3671875 * ᐃ, ᐃ * 16, ᐃ * 14.3671875, ᐃ * ᐃⵠⲆⲆⵠΔᐃ, 20.3671875 * ᐃ);
		Ⲇ.bezierCurveTo(22 * ᐃ, 33.3671875 * ᐃ, ᐃ * 20, ᐃ * 27.3671875, 24 * ᐃ, ᐃ * 34.3671875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * 4);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 70.5, ᐃ * 34.8671875);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, ᐃ * -49.5, -21.5 * ᐃ, 99 * ᐃ, 43 * ᐃ, 15 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ΔᐃΔⲆ], 4 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(71 * ᐃ, ᐃ * 40.8671875);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, ᐃ * -49, ᐃ * -12.5, ᐃ * 98, 25 * ᐃ, 15 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[1], Ⲇⵠⵠⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(19.800003051757812 * ᐃ, ᐃ * 75.95625305175781);
		Ⲇ.bezierCurveTo(ᐃ * 19.300003051757812, 82.95625305175781 * ᐃ, 19.300003051757812 * ᐃ, ᐃ * 82.95625305175781, ᐃ * 18.800003051757812, ᐃ * 89.95625305175781);
		Ⲇ.bezierCurveTo(ᐃ * 38.80000305175781, 115.95625305175781 * ᐃ, 37.80000305175781 * ᐃ, 104.95625305175781 * ᐃ, 31.800003051757812 * ᐃ, 91.95625305175781 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[1], ᐃ * ⵠⲆⲆⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 119.80000305175781, 75.95625305175781 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 120.80000305175781, 82.95625305175781 * ᐃ, 120.80000305175781 * ᐃ, ᐃ * 82.95625305175781, ᐃ * 121.80000305175781, ᐃ * 89.95625305175781);
		Ⲇ.bezierCurveTo(ᐃ * 101.80000305175781, ᐃ * 111.95625305175781, ᐃ * 99.80000305175781, ᐃ * 111.95625305175781, ᐃ * 112.80000305175781, ᐃ * 81.95625305175781);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[1], ᐃ * ᐃⲆⵠᐃⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 17.800003051757812, ᐃ * 49.15625);
		Ⲇ.bezierCurveTo(17.800003051757812 * ᐃ, 64.15625 * ᐃ, 17.800003051757812 * ᐃ, ᐃ * 64.15625, 17.800003051757812 * ᐃ, ᐃ * 79.15625);
		Ⲇ.bezierCurveTo(23.300003051757812 * ᐃ, 85.15625 * ᐃ, ᐃ * 23.300003051757812, 85.15625 * ᐃ, 28.800003051757812 * ᐃ, 91.15625 * ᐃ);
		Ⲇ.bezierCurveTo(36.80000305175781 * ᐃ, ᐃ * 96.15625, ᐃ * 32.80000305175781, ᐃ * 91.15625, ᐃ * 28.800003051757812, ᐃ * 77.15625);
		Ⲇ.bezierCurveTo(33.80000305175781 * ᐃ, ᐃ * 65.15625, 33.80000305175781 * ᐃ, ᐃ * 65.15625, 38.80000305175781 * ᐃ, 53.15625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃΔ], Δⵠ[ᐃΔᐃΔ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 123.80000305175781, 53.95625305175781 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 121.80000305175781, 77.95625305175781 * ᐃ, ᐃ * 121.80000305175781, 74.95625305175781 * ᐃ, 121.80000305175781 * ᐃ, ᐃ * 78.95625305175781);
		Ⲇ.bezierCurveTo(ᐃ * 115.80000305175781, ᐃ * 84.95625305175781, 115.80000305175781 * ᐃ, 84.95625305175781 * ᐃ, 109.80000305175781 * ᐃ, ᐃ * 90.95625305175781);
		Ⲇ.bezierCurveTo(ᐃ * 102.80000305175781, 93.95625305175781 * ᐃ, ᐃ * 105.80000305175781, 86.95625305175781 * ᐃ, 110.80000305175781 * ᐃ, ᐃ * 76.95625305175781);
		Ⲇ.bezierCurveTo(107.30000305175781 * ᐃ, 65.45625305175781 * ᐃ, ᐃ * 103.80000305175781, ᐃ * 53.95625305175781, 103.80000305175781 * ᐃ, 53.95625305175781 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(18 * ᐃ, 56.3671875 * ᐃ);
		Ⲇ.bezierCurveTo(70 * ᐃ, ᐃ * 56.8671875, 70 * ᐃ, 56.8671875 * ᐃ, 122 * ᐃ, ᐃ * 57.3671875);
		Ⲇ.bezierCurveTo(ᐃ * 137, ᐃ * 20.3671875, 137 * ᐃ, ᐃ * 16.3671875, 126 * ᐃ, 22.3671875 * ᐃ);
		Ⲇ.bezierCurveTo(115.5 * ᐃ, ᐃ * 34.3671875, ᐃ * 115.5, ᐃ * 34.3671875, ᐃ * 105, 46.3671875 * ᐃ);
		Ⲇ.bezierCurveTo(70.5 * ᐃ, 46.3671875 * ᐃ, 70.5 * ᐃ, 46.3671875 * ᐃ, ᐃ * 36, 46.3671875 * ᐃ);
		Ⲇ.bezierCurveTo(4 * ᐃ, 14.3671875 * ᐃ, ᐃⲆᐃΔΔ * ᐃ, 18.3671875 * ᐃ, 8 * ᐃ, ᐃ * 27.3671875);
		Ⲇ.bezierCurveTo(ᐃ * 12.5, ᐃ * 41.8671875, ᐃ * 12.5, ᐃ * 41.8671875, 17 * ᐃ, ᐃ * 56.3671875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], 4 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(68.30000305175781 * ᐃ, ᐃ * 41.45625305175781);
		Ⲇ.rotate(.76);
		ᐃΔⵠ(Ⲇ, -20.5 * ᐃ, ᐃ * -20.5, ᐃ * 41, 41 * ᐃ, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, undefined, Δⵠ[5], 4 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 68.80000305175781, ᐃ * 44.45625305175781);
		Ⲇ.rotate(.76);
		ᐃΔⵠ(Ⲇ, -21 * ᐃ, ᐃ * -20.5, ᐃ * 42, 41 * ᐃ, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⵠ], Δⵠ[ΔⵠⵠⲆ], ᐃ * 4);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 69.80000305175781, ᐃ * 44.556243896484375);
		Ⲇ.rotate(.76);
		ᐃΔⵠ(Ⲇ, ᐃ * -10, -10 * ᐃ, ᐃ * ⲆⵠⲆΔⲆ, ᐃ * ΔΔᐃΔᐃΔΔ, ᐃ * Ⲇᐃⵠᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔⵠᐃ], Δⵠ[7], ᐃᐃⵠΔ * ᐃ);
		return ΔⲆ
	}

	function ⵠΔᐃⲆᐃⵠⵠⵠⲆ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 170 * ᐃ;
		var ⲆΔⲆ = 172 * ᐃ;
		var Ⲇⵠ = ⲆⲆᐃ / 2;
		var ᐃⵠⲆ = ⲆΔⲆ / 2;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(Ⲇⵠ, ᐃⵠⲆ);
		Ⲇ.save();
		for (var Ⲇᐃ = ⵠΔᐃⵠ; Ⲇᐃ < 10; Ⲇᐃ++) {
			Ⲇ.rotate(Math.PI / 5);
			Ⲇ.save();
			Ⲇ.translate(65 * ᐃ, 0);
			ᐃᐃⲆΔ(Ⲇ, ⲆⵠⲆᐃ, ᐃ * 18, ᐃ * ⵠΔⲆΔΔ);
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.restore()
		}
		Ⲇ.restore();
		ᐃΔΔ(Ⲇ, 0, 0, ᐃ * 40, ⵠⲆⵠⵠ);
		ΔΔ(Ⲇ, undefined, Δⵠ[ⵠᐃⲆ], ᐃ * ⲆΔⵠΔΔ);
		ᐃΔΔ(Ⲇ, ᐃᐃᐃ, ⵠᐃⲆⲆ, ᐃ * 20, 0);
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃᐃ]);
		return ΔⲆ
	}

	function ΔᐃΔⵠᐃΔⲆⲆΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 271;
		ΔⲆ.height = ᐃ * 366;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 133, 99 * ᐃ);
		Ⲇ.bezierCurveTo(186 * ᐃ, ᐃ * 123, ᐃ * 199, 152 * ᐃ, 209 * ᐃ, ᐃ * 169);
		Ⲇ.bezierCurveTo(228 * ᐃ, ᐃ * 205, 224 * ᐃ, 245 * ᐃ, ᐃ * 190, 276 * ᐃ);
		Ⲇ.bezierCurveTo(161 * ᐃ, ᐃ * 296, 99 * ᐃ, ᐃ * 292, 79 * ᐃ, 274 * ᐃ);
		Ⲇ.bezierCurveTo(49 * ᐃ, ᐃ * 253, ᐃ * 47, 214 * ᐃ, ᐃ * 50, 197 * ᐃ);
		Ⲇ.bezierCurveTo(61 * ᐃ, ᐃ * 143, 102 * ᐃ, ᐃ * 113, ᐃ * 131, ᐃ * 99);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(73 * ᐃ, ᐃ * 270);
		Ⲇ.bezierCurveTo(79 * ᐃ, 280 * ᐃ, 77 * ᐃ, 280 * ᐃ, 78 * ᐃ, 287 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 78, ᐃ * 290, ᐃ * 83, 291 * ᐃ, ᐃ * 82, ᐃ * 299);
		Ⲇ.bezierCurveTo(81 * ᐃ, ᐃ * 301, 87 * ᐃ, 301 * ᐃ, 92 * ᐃ, ᐃ * 314);
		Ⲇ.bezierCurveTo(ᐃ * 94, ᐃ * 319, ᐃ * 100, ᐃ * 321, ᐃ * 107, 320 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 111, 323 * ᐃ, 114 * ᐃ, 324 * ᐃ, 119 * ᐃ, 320 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 137, ᐃ * 321, ᐃ * 146, 323 * ᐃ, ᐃ * 139, ᐃ * 320);
		Ⲇ.bezierCurveTo(ᐃ * 141, 324 * ᐃ, 150 * ᐃ, ᐃ * 324, ᐃ * 153, ᐃ * 320);
		Ⲇ.bezierCurveTo(ᐃ * 168, ᐃ * 319, ᐃ * 171, ᐃ * 316, ᐃ * 173, ᐃ * 307);
		Ⲇ.bezierCurveTo(180 * ᐃ, 305 * ᐃ, 180 * ᐃ, ᐃ * 301, 178 * ᐃ, 296 * ᐃ);
		Ⲇ.bezierCurveTo(183 * ᐃ, ᐃ * 296, 185 * ᐃ, 289 * ᐃ, 188 * ᐃ, 279 * ᐃ);
		Ⲇ.bezierCurveTo(171 * ᐃ, 286 * ᐃ, 149 * ᐃ, 290 * ᐃ, 132 * ᐃ, 289 * ᐃ);
		Ⲇ.bezierCurveTo(101 * ᐃ, ᐃ * 290, 86 * ᐃ, ᐃ * 280, ᐃ * 74, 271 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 76, ᐃ * 252);
		Ⲇ.bezierCurveTo(85 * ᐃ, 294 * ᐃ, ᐃ * 96, 314 * ᐃ, 103 * ᐃ, 314 * ᐃ);
		Ⲇ.bezierCurveTo(106 * ᐃ, 316 * ᐃ, 151 * ᐃ, ᐃ * 314, 156 * ᐃ, ᐃ * 314);
		Ⲇ.bezierCurveTo(ᐃ * 169, ᐃ * 317, ᐃ * 182, 285 * ᐃ, 191 * ᐃ, 256 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 134.5, 254 * ᐃ, ᐃ * 134.5, 254 * ᐃ, 78 * ᐃ, 252 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(84 * ᐃ, ᐃ * 257);
		Ⲇ.bezierCurveTo(122 * ᐃ, ᐃ * 273, 146 * ᐃ, 268 * ᐃ, ᐃ * 179, ᐃ * 261);
		Ⲇ.bezierCurveTo(ᐃ * 190, 258 * ᐃ, ᐃ * 187, 266 * ᐃ, 178 * ᐃ, ᐃ * 272);
		Ⲇ.bezierCurveTo(160 * ᐃ, 284 * ᐃ, ᐃ * 123, 282 * ᐃ, ᐃ * ᐃΔᐃⵠⵠ, ᐃ * 277);
		Ⲇ.bezierCurveTo(73 * ᐃ, 260 * ᐃ, 79 * ᐃ, 257 * ᐃ, ᐃ * 84, 257 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(125 * ᐃ, ᐃ * 65);
		Ⲇ.bezierCurveTo(133 * ᐃ, ᐃ * 45, 136 * ᐃ, ᐃ * 42, 141 * ᐃ, 55 * ᐃ);
		Ⲇ.bezierCurveTo(151 * ᐃ, ᐃ * 96, 164 * ᐃ, ᐃ * 117, ᐃ * 175, 134 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 203, 181 * ᐃ, 207 * ᐃ, ᐃ * 182, 208 * ᐃ, ᐃ * 215);
		Ⲇ.bezierCurveTo(ᐃ * 206, ᐃ * 240, ᐃ * 205, ᐃ * 246, ᐃ * 184, ᐃ * 258);
		Ⲇ.bezierCurveTo(ᐃ * 161, 267 * ᐃ, ᐃ * 131, ᐃ * 272, 86 * ᐃ, 258 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 67, 252 * ᐃ, 68 * ᐃ, ᐃ * 239, ᐃ * 64, 216 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 62, 194 * ᐃ, 72 * ᐃ, ᐃ * 169, ᐃ * 92, 142 * ᐃ);
		Ⲇ.bezierCurveTo(106 * ᐃ, 121 * ᐃ, 114 * ᐃ, 101 * ᐃ, ᐃ * 125, 65 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 115, 37 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 116, 28 * ᐃ, ᐃ * 119, 27 * ᐃ, ᐃ * 126, 37 * ᐃ);
		Ⲇ.bezierCurveTo(134 * ᐃ, ᐃ * 48, ᐃ * 134, 49 * ᐃ, ᐃ * 132, 59 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 131, 67 * ᐃ, ᐃ * 127, ᐃ * 65, 120 * ᐃ, ᐃ * 56);
		Ⲇ.bezierCurveTo(114 * ᐃ, ᐃ * 49, 113 * ᐃ, 43 * ᐃ, ᐃ * 115, ᐃ * 38);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(146 * ᐃ, ᐃ * 34);
		Ⲇ.bezierCurveTo(ᐃ * 152, 28 * ᐃ, 155 * ᐃ, 27 * ᐃ, 157 * ᐃ, ᐃ * 39);
		Ⲇ.bezierCurveTo(ᐃ * 157, ᐃ * 45, ᐃ * 157, 49 * ᐃ, ᐃ * 150, ᐃ * 56);
		Ⲇ.bezierCurveTo(141 * ᐃ, ᐃ * 66, ᐃ * 138, 66 * ᐃ, 138 * ᐃ, ᐃ * 57);
		Ⲇ.bezierCurveTo(ᐃ * 137, ᐃ * 50, ᐃ * 137, ᐃ * 47, 141 * ᐃ, ᐃ * 42);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(143 * ᐃ, ᐃ * 69);
		Ⲇ.bezierCurveTo(148 * ᐃ, ᐃ * 56, 156 * ᐃ, ᐃ * 50, 158 * ᐃ, 58 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 159, ᐃ * 64, ᐃ * 160, 67 * ᐃ, 153 * ᐃ, ᐃ * 77);
		Ⲇ.bezierCurveTo(148 * ᐃ, ᐃ * 83, 145 * ᐃ, 84 * ᐃ, 143 * ᐃ, 77 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 149, 92 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 149, ᐃ * 89, 151 * ᐃ, 84 * ᐃ, 156 * ᐃ, ᐃ * 79);
		Ⲇ.bezierCurveTo(ᐃ * 161, 73 * ᐃ, ᐃ * 163, 78 * ᐃ, 162 * ᐃ, 86 * ᐃ);
		Ⲇ.bezierCurveTo(161 * ᐃ, ᐃ * 91, ᐃ * 155, 99 * ᐃ, ᐃ * 152, 98 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 111, 61 * ᐃ);
		Ⲇ.bezierCurveTo(114 * ᐃ, ᐃ * 51, ᐃ * 117, 51 * ᐃ, ᐃ * 124, ᐃ * 64);
		Ⲇ.bezierCurveTo(ᐃ * 128, ᐃ * 68, 128 * ᐃ, ᐃ * 76, 126 * ᐃ, 79 * ᐃ);
		Ⲇ.bezierCurveTo(123 * ᐃ, 84 * ᐃ, 122 * ᐃ, 82 * ᐃ, ᐃ * 115, ᐃ * 74);
		Ⲇ.bezierCurveTo(ᐃ * 112, ᐃ * 67, ᐃ * 115, ᐃ * 74, ᐃ * 115, ᐃ * 74);
		Ⲇ.bezierCurveTo(ᐃ * 111, ᐃ * 68, ᐃ * 111, 66 * ᐃ, 111 * ᐃ, ᐃ * 62);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(107 * ᐃ, ᐃ * 81);
		Ⲇ.bezierCurveTo(ᐃ * 108, 74 * ᐃ, 112 * ᐃ, 73 * ᐃ, ᐃ * 118, ᐃ * 84);
		Ⲇ.bezierCurveTo(122 * ᐃ, ᐃ * 88, ᐃ * 122, 93 * ᐃ, 121 * ᐃ, 98 * ᐃ);
		Ⲇ.bezierCurveTo(114 * ᐃ, ᐃ * 98, 113 * ᐃ, 98 * ᐃ, ᐃ * 109, 90 * ᐃ);
		Ⲇ.bezierCurveTo(107 * ᐃ, 87 * ᐃ, 106 * ᐃ, ᐃ * 85, ᐃ * 107, ᐃ * 82);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ]);
		return ΔⲆ
	}

	function ⵠΔⵠⵠⵠᐃΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 88 * ᐃ;
		ΔⲆ.height = 88 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 44, ᐃ * 44);
		Ⲇ.rotate(.52);
		ᐃᐃⲆΔ(Ⲇ, ⲆⲆⲆᐃᐃ, ᐃ * 43, ⲆⲆⵠⲆⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ΔᐃⵠⲆ], 3 * ᐃ);
		return ΔⲆ
	}

	function ⲆᐃⲆᐃⲆⵠⲆ(ᐃ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 95 * ᐃ;
		ΔⲆ.height = ᐃ * 85;
		if (ⵠⲆΔ == Ⲇᐃ) {
			Ⲇ.translate(ᐃ * ⲆΔⲆⵠⵠ, 15 * ᐃ);
			Ⲇ.scale(.9, .9);
			Ⲇ.save();
			ᐃΔⵠ(Ⲇ, ⵠⵠⵠ * ᐃ, 5 * ᐃ, 90 * ᐃ, ᐃ * 60, ⵠΔΔⲆΔ);
			ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃ]);
			Ⲇ.globalCompositeOperation = ⵠ[381];
			ᐃΔΔ(Ⲇ, ᐃ * 25, ᐃ * 40, ᐃ * ᐃᐃᐃΔΔ);
			Ⲇ.fill();
			ᐃΔΔ(Ⲇ, ᐃ * 65, ᐃ * 40, ᐃ * 10);
			Ⲇ.fill();
			Ⲇ.restore();
			Ⲇ.save();
			ᐃΔⵠ(Ⲇ, 0, ⲆⵠⲆⲆ, 90 * ᐃ, ᐃ * 60, ᐃ * 10);
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalCompositeOperation = ⵠ[381];
			ᐃΔΔ(Ⲇ, 25 * ᐃ, ᐃ * 40, 10 * ᐃ);
			Ⲇ.fill();
			ᐃΔΔ(Ⲇ, 65 * ᐃ, ᐃ * 40, 10 * ᐃ);
			Ⲇ.fill();
			Ⲇ.restore()
		} else ΔⲆᐃᐃ == Ⲇᐃ && (Ⲇ.scale(.8, .8), Ⲇ.translate(ⵠΔᐃⵠⲆ * ᐃ, 33 * ᐃ), Ⲇ.save(), Ⲇ.scale(.56, .56), Ⲇ.translate(-39 * ᐃ, ᐃ * -60), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 32.5, ᐃ * 50.642852783203125), Ⲇ.bezierCurveTo(83 * ᐃ, 69.64285278320312 * ᐃ, 83 * ᐃ, 69.64285278320312 * ᐃ, 133.5 * ᐃ, ᐃ * 88.64285278320312), Ⲇ.bezierCurveTo(93 * ᐃ, ᐃ * 92.64285278320312, ᐃ * 93, 92.64285278320312 * ᐃ, ᐃ * 52.5, 96.64285278320312 * ᐃ), Ⲇ.bezierCurveTo(30.5 * ᐃ, ᐃ * 100.64285278320312, ᐃ * 36.5, 94.64285278320312 * ᐃ, 32.5 * ᐃ, 84.64285278320312 * ᐃ), Ⲇ.bezierCurveTo(21.5 * ᐃ, 45.642852783203125 * ᐃ, ᐃ * 24.5, ᐃ * 48.642852783203125, ᐃ * 31.5, ᐃ * 50.642852783203125), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⲆ]), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(116.5 * ᐃ, 85.64285278320312 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 160.5, 67.14285278320312 * ᐃ, 160.5 * ᐃ, ᐃ * 67.14285278320312, ᐃ * 204.5, ᐃ * 48.642852783203125), Ⲇ.bezierCurveTo(ᐃ * 220.5, 42.642852783203125 * ᐃ, ᐃ * 208.5, ᐃ * 68.64285278320312, 205.5 * ᐃ, ᐃ * 85.64285278320312), Ⲇ.bezierCurveTo(ᐃ * 202.5, 98.64285278320312 * ᐃ, 199.5 * ᐃ, 98.64285278320312 * ᐃ, ᐃ * 188.5, 100.64285278320312 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[Δᐃⵠⵠ]), Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(166.5 * ᐃ, ᐃ * 68.64285278320312), Ⲇ.bezierCurveTo(147.5 * ᐃ, ᐃ * 72.64285278320312, ᐃ * 145.5, ᐃ * 73.64285278320312, 142.5 * ᐃ, ᐃ * 62.642852783203125), Ⲇ.bezierCurveTo(121.5 * ᐃ, ᐃ * 12.642852783203125, 122.5 * ᐃ, 5.642852783203125 * ᐃ, 117.5 * ᐃ, 15.642852783203125 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 105.5, 40.642852783203125 * ᐃ, 105.5 * ᐃ, ᐃ * 40.642852783203125, ᐃ * 93.5, ᐃ * 65.64285278320312), Ⲇ.bezierCurveTo(89.5 * ᐃ, ᐃ * 74.64285278320312, 84.5 * ᐃ, ᐃ * 72.64285278320312, 73.5 * ᐃ, ᐃ * 74.64285278320312), Ⲇ.bezierCurveTo(ᐃ * 98, ᐃ * 87.64285278320312, ᐃ * 98, ᐃ * 87.64285278320312, 122.5 * ᐃ, ᐃ * 100.64285278320312), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[1]), Ⲇ.restore(), Ⲇ.save(), ᐃΔⵠ(Ⲇ, 0, ᐃ * ⵠⲆⵠⲆᐃ, 90 * ᐃ, ᐃ * 50, ⵠⲆⵠⵠⲆ * ᐃ), ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ]), ᐃΔⵠ(Ⲇ, 0, 10 * ᐃ, ᐃ * 90, 50 * ᐃ, ᐃ * 10), ΔΔ(Ⲇ, Δⵠ[1]), Ⲇ.globalCompositeOperation = ⵠ[381], ᐃΔΔ(Ⲇ, ᐃ * 25, 40 * ᐃ, ᐃ * ⵠⲆⵠⵠⲆ), Ⲇ.fill(), ᐃΔΔ(Ⲇ, ᐃ * 65, ᐃ * 40, ΔΔⵠᐃⵠ * ᐃ), Ⲇ.fill(), Ⲇ.restore());
		return ΔⲆ
	}

	function ᐃⲆᐃᐃⵠΔᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 102 * ᐃ;
		ΔⲆ.height = ᐃ * 102;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔⵠⲆⲆ;
		Ⲇ.translate(ᐃⵠΔⲆ, ᐃᐃᐃΔᐃ);
		ᐃΔⵠ(Ⲇ, 24 * ᐃ, ᐃ * 26, ᐃ * 70, 9 * ᐃ, ᐃ * ΔⲆⲆΔΔ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ]);
		ᐃΔⵠ(Ⲇ, ᐃ * 26, ᐃ * 70, ᐃ * 70, 9 * ᐃ, ᐃ * 10);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ]);
		ᐃΔⵠ(Ⲇ, ᐃ * 5, ᐃ * ΔⲆΔⲆ, ᐃ * 22, 94 * ᐃ, ᐃᐃΔᐃ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ]);
		ᐃΔⵠ(Ⲇ, ᐃ * 40, 3 * ᐃ, ᐃ * 22, 94 * ᐃ, ᐃ * 5);
		ΔΔ(Ⲇ, Δⵠ[0]);
		ᐃΔⵠ(Ⲇ, 75 * ᐃ, ⲆⵠⲆᐃ * ᐃ, ᐃ * 22, 94 * ᐃ, ᐃ * 5);
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(-3, -3);
		ᐃΔⵠ(Ⲇ, 24 * ᐃ, ᐃ * 26, ᐃ * 70, ᐃ * ᐃᐃᐃᐃᐃⲆᐃ, ᐃ * 10);
		ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃᐃ]);
		ᐃΔⵠ(Ⲇ, 26 * ᐃ, ᐃ * 70, 70 * ᐃ, ᐃ * ⵠΔᐃᐃΔ, 10 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1]);
		ᐃΔⵠ(Ⲇ, ⲆⲆᐃᐃ * ᐃ, ΔΔᐃΔ * ᐃ, 22 * ᐃ, 94 * ᐃ, ΔⲆⵠⵠ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔⵠ], Δⵠ[ⲆⵠⲆᐃ], ᐃ * 4);
		ᐃΔⵠ(Ⲇ, 40 * ᐃ, ᐃ * 3, ᐃ * 22, 94 * ᐃ, ᐃ * 5);
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⲆᐃ], Δⵠ[3], 4 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * 75, 3 * ᐃ, ᐃ * 22, 94 * ᐃ, ᐃ * 5);
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ᐃⵠΔⲆ], ᐃ * 4);
		return ΔⲆ
	}

	function ᐃⲆᐃⵠᐃⲆΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 175 * ᐃ;
		ΔⲆ.height = ᐃ * 106;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔᐃⲆⲆ;
		Ⲇ.translate(ⵠⲆⵠⵠ, ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 28, ᐃ * 67);
		Ⲇ.bezierCurveTo(55 * ᐃ, 80 * ᐃ, ᐃ * 126, ᐃ * 74, ᐃ * 144, ᐃ * 68);
		Ⲇ.bezierCurveTo(ᐃ * 144.5, 75 * ᐃ, ᐃ * 144.5, 75 * ᐃ, ᐃ * 145, 82 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 114, 94 * ᐃ, ᐃ * 47, 91 * ᐃ, ᐃ * 28, ᐃ * 82);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⲆ]);
		Ⲇ.globalAlpha = ⲆΔΔΔ;
		Ⲇ.translate(ΔΔᐃ, ᐃ * -8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(145 * ᐃ, 75 * ᐃ);
		Ⲇ.bezierCurveTo(143 * ᐃ, ᐃ * 51, ᐃ * 133, 29 * ᐃ, ᐃ * 100, 27 * ᐃ);
		Ⲇ.bezierCurveTo(52 * ᐃ, ᐃ * 21, 37 * ᐃ, 37 * ᐃ, 31 * ᐃ, ᐃ * 54);
		Ⲇ.bezierCurveTo(23 * ᐃ, 78 * ᐃ, 28 * ᐃ, 77 * ᐃ, ᐃ * 36, 79 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 80, 87 * ᐃ, 120 * ᐃ, ᐃ * 81, ᐃ * 145, 76 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(38 * ᐃ, ᐃ * 46);
		Ⲇ.bezierCurveTo(52 * ᐃ, ᐃ * 37, 69 * ᐃ, 36 * ᐃ, 85 * ᐃ, ᐃ * 36);
		Ⲇ.bezierCurveTo(118 * ᐃ, ᐃ * 38, 129 * ᐃ, 42 * ᐃ, 137 * ᐃ, 48 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 135, 45 * ᐃ, 135 * ᐃ, 45 * ᐃ, 133 * ᐃ, ᐃ * 42);
		Ⲇ.bezierCurveTo(ᐃ * 124, 32 * ᐃ, ᐃ * 116, 28 * ᐃ, ᐃ * 88, 25 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 47, 28 * ᐃ, ᐃ * 40, 32 * ᐃ, ᐃ * 36, 44 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⲆⲆⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(145 * ᐃ, 75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 143, 51 * ᐃ, 133 * ᐃ, ᐃ * 29, ΔᐃⲆⲆⲆ * ᐃ, ᐃ * 27);
		Ⲇ.bezierCurveTo(ᐃ * 52, ᐃ * 21, ᐃ * 37, ᐃ * 37, 31 * ᐃ, 54 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 23, ᐃ * 78, 28 * ᐃ, ᐃ * 77, 36 * ᐃ, 79 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 80, ᐃ * 87, 120 * ᐃ, ᐃ * 81, ᐃ * 145, ᐃ * 76);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ᐃᐃⲆⲆ], ⵠⲆΔⵠ * ᐃ);
		Ⲇ.translate(0, ᐃ * -3);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(28 * ᐃ, ᐃ * 67);
		Ⲇ.bezierCurveTo(55 * ᐃ, 80 * ᐃ, ᐃ * 126, 74 * ᐃ, ᐃ * 144, ᐃ * 68);
		Ⲇ.bezierCurveTo(144.5 * ᐃ, 75 * ᐃ, ᐃ * 144.5, 75 * ᐃ, ᐃ * 145, 82 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 114, 94 * ᐃ, 47 * ᐃ, ᐃ * 91, 28 * ᐃ, ᐃ * 82);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔΔⲆᐃ], Δⵠ[10], ᐃⵠⵠⵠᐃ * ᐃ);
		Ⲇ.translate(0, 3 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 131, 43 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 145, ᐃ * 40, 148 * ᐃ, ᐃ * 32, ᐃ * 147, ᐃ * 17);
		Ⲇ.bezierCurveTo(166 * ᐃ, ᐃ * 39, 155 * ᐃ, ᐃ * 62, 140 * ᐃ, ᐃ * 67);
		Ⲇ.bezierCurveTo(ᐃ * 128, ᐃ * 65, 128 * ᐃ, 52 * ᐃ, ᐃ * 131, ᐃ * 45);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(41 * ᐃ, ᐃ * 43);
		Ⲇ.bezierCurveTo(ᐃ * 30, 42 * ᐃ, ᐃ * 24, ᐃ * 33, ᐃ * 25, ᐃ * ⵠⵠⵠⵠⵠⲆⲆ);
		Ⲇ.bezierCurveTo(ᐃ * 7, 34 * ᐃ, ⲆⵠⵠΔᐃ * ᐃ, ᐃ * 63, ᐃ * 33, ᐃ * 66);
		Ⲇ.bezierCurveTo(45 * ᐃ, 59 * ᐃ, ᐃ * 44, 53 * ᐃ, ᐃ * 42, 44 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(24 * ᐃ, ᐃ * ᐃᐃⲆⵠᐃ);
		Ⲇ.bezierCurveTo(24 * ᐃ, ᐃ * 35, ᐃ * 35, ᐃ * 42, 42 * ᐃ, 44 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 43, ᐃ * 51, 43 * ᐃ, ᐃ * 48, 43 * ᐃ, ᐃ * 56);
		Ⲇ.bezierCurveTo(ᐃ * 25, ᐃ * 47, ᐃ * ⲆⵠⵠⲆΔ, ᐃ * 36, ᐃ * 23, 20 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(148 * ᐃ, ᐃ * ΔΔΔΔᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 159, ᐃ * 44, 139 * ᐃ, ᐃ * 52, ᐃ * 130, 55 * ᐃ);
		Ⲇ.bezierCurveTo(129 * ᐃ, ᐃ * 48, ᐃ * 129, 46 * ᐃ, 131 * ᐃ, 43 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 144, ᐃ * 37, 148 * ᐃ, ᐃ * 35, 147 * ᐃ, ⵠᐃⵠⵠᐃ * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⵠΔΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(131 * ᐃ, 43 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 145, ᐃ * 40, ᐃ * 148, ᐃ * 32, 147 * ᐃ, 17 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 166, ᐃ * 39, ᐃ * 155, 62 * ᐃ, 140 * ᐃ, ᐃ * 67);
		Ⲇ.bezierCurveTo(128 * ᐃ, ᐃ * 65, ᐃ * 128, 52 * ᐃ, ᐃ * 131, 45 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[4], ᐃΔᐃΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 41, ᐃ * 43);
		Ⲇ.bezierCurveTo(30 * ᐃ, 42 * ᐃ, ᐃ * 24, 33 * ᐃ, 25 * ᐃ, ᐃ * 17);
		Ⲇ.bezierCurveTo(ᐃ * ᐃᐃⵠᐃᐃ, 34 * ᐃ, 17 * ᐃ, 63 * ᐃ, ᐃ * 33, 66 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 45, 59 * ᐃ, ᐃ * 44, ᐃ * 53, ᐃ * 42, 44 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔⵠⵠⲆ], 4 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(87 * ᐃ, 34.5 * ᐃ);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, ᐃ * -8, ᐃ * -10.5, ⲆΔⲆⵠΔ * ᐃ, 21 * ᐃ, ΔΔⵠᐃⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃΔⲆⲆΔᐃ], Δⵠ[2], 4 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(87 * ᐃ, ᐃ * 57);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, -ΔⵠΔⵠΔ * ᐃ, -23 * ᐃ, 16 * ᐃ, ᐃ * 46, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃⲆΔⵠ], Δⵠ[2], ᐃ * 4);
		ᐃΔΔ(Ⲇ, 87 * ᐃ, 39 * ᐃ, 4.123105625617661 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⲆⲆⵠ], Δⵠ[2], ᐃ * ⲆΔᐃᐃΔ);
		ᐃΔΔ(Ⲇ, ᐃ * 87, ᐃ * 60, ᐃ * 4.242640687119285);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆⲆᐃᐃⵠ], Δⵠ[ⲆⲆΔⲆ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(28 * ᐃ, ᐃ * 67);
		Ⲇ.bezierCurveTo(ᐃ * 55, 80 * ᐃ, 126 * ᐃ, ᐃ * 74, 144 * ᐃ, ᐃ * 68);
		Ⲇ.bezierCurveTo(ᐃ * 144.5, 75 * ᐃ, ᐃ * 144.5, ᐃ * 75, ᐃ * 145, ᐃ * 82);
		Ⲇ.bezierCurveTo(114 * ᐃ, 94 * ᐃ, 47 * ᐃ, 91 * ᐃ, 28 * ᐃ, ᐃ * 82);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δᐃᐃⵠⵠ], Δⵠ[2], ᐃΔⵠⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 27, 69 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 13, 77 * ᐃ, ᐃ * 16, ᐃ * 74, 27 * ᐃ, ᐃ * 80);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[9], Δⵠ[ᐃᐃᐃⵠ], ᐃ * ⵠⲆⲆⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 145, 70 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 149.5, 72 * ᐃ, 149.5 * ᐃ, 72 * ᐃ, ᐃ * 154, ᐃ * 74);
		Ⲇ.bezierCurveTo(ᐃ * 150, ᐃ * 77, ᐃ * 150, 77 * ᐃ, ᐃ * 146, ᐃ * 80);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃᐃΔ], Δⵠ[2], ᐃ * 4);
		ᐃΔΔ(Ⲇ, ᐃ * 50, 80 * ᐃ, ⲆⲆᐃᐃ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[9], Δⵠ[ⲆⵠΔⵠ], 4 * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 86.01141357421875, ᐃ * 81.76705932617188, ᐃᐃᐃⲆ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[9], Δⵠ[2], ᐃ * ⵠᐃᐃΔ);
		ᐃΔΔ(Ⲇ, 119.01141357421875 * ᐃ, ᐃ * 80.13069152832031, Ⲇᐃⵠᐃ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[9], Δⵠ[ΔΔⲆⲆ], ᐃ * 4);
		return ΔⲆ
	}

	function ᐃⲆΔⵠΔΔΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 400;
		ΔⲆ.height = 400 * ᐃ;
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ᐃ * 20, 20 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 36.5, 278.0625 * ᐃ);
		Ⲇ.bezierCurveTo(67.5 * ᐃ, ᐃ * 316.0625, ᐃ * 134.5, 334.0625 * ᐃ, 199.5 * ᐃ, ᐃ * 319.0625);
		Ⲇ.bezierCurveTo(ᐃ * 254.5, 304.0625 * ᐃ, 346.5 * ᐃ, ᐃ * 270.0625, 348.5 * ᐃ, 237.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 359.5, 206.0625 * ᐃ, ᐃ * 318.5, ᐃ * 129.0625, 262.5 * ᐃ, 122.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 213.5, ᐃ * 115.0625, 166.5 * ᐃ, 133.0625 * ᐃ, 104.5 * ᐃ, ᐃ * 166.0625);
		Ⲇ.bezierCurveTo(54.5 * ᐃ, ᐃ * 194.0625, 23.5 * ᐃ, 241.0625 * ᐃ, ᐃ * 36.5, ᐃ * 277.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.translate(ᐃ * -ΔⲆΔⲆΔ, -ⲆⵠⲆΔⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 36.5, 278.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 67.5, 316.0625 * ᐃ, 134.5 * ᐃ, ᐃ * 334.0625, 199.5 * ᐃ, 319.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 254.5, ᐃ * 304.0625, ᐃ * 346.5, ᐃ * 270.0625, 348.5 * ᐃ, ᐃ * 237.0625);
		Ⲇ.bezierCurveTo(359.5 * ᐃ, ᐃ * 206.0625, 318.5 * ᐃ, ᐃ * 129.0625, ᐃ * 262.5, ᐃ * 122.0625);
		Ⲇ.bezierCurveTo(ᐃ * 213.5, ᐃ * 115.0625, ᐃ * 166.5, ᐃ * 133.0625, ᐃ * 104.5, ᐃ * 166.0625);
		Ⲇ.bezierCurveTo(54.5 * ᐃ, 194.0625 * ᐃ, 23.5 * ᐃ, 241.0625 * ᐃ, ᐃ * 36.5, ᐃ * 277.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 19 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(214.5 * ᐃ, 124.0625 * ᐃ);
		Ⲇ.bezierCurveTo(242.5 * ᐃ, 125.0625 * ᐃ, 272.5 * ᐃ, ᐃ * 159.0625, ᐃ * 283.5, 184.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 277.5, ᐃ * 161.0625, ᐃ * 233.5, ᐃ * 128.0625, ᐃ * 219.5, ᐃ * 122.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠᐃᐃᐃᐃ, Δⵠ[ΔΔΔⵠ], ⲆᐃᐃᐃᐃⲆⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(157.5 * ᐃ, 145.0625 * ᐃ);
		Ⲇ.bezierCurveTo(176.5 * ᐃ, 148.0625 * ᐃ, 205.5 * ᐃ, 176.0625 * ᐃ, ᐃ * 212.5, ᐃ * 197.0625);
		Ⲇ.bezierCurveTo(205.5 * ᐃ, ᐃ * 178.0625, ᐃ * 177.5, ᐃ * 152.0625, 156.5 * ᐃ, ᐃ * 142.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠⲆⲆⲆⲆ, Δⵠ[2], ⵠⲆΔΔⵠΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 103.5, 169.0625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 160.5, 166.0625 * ᐃ, 228.5 * ᐃ, ᐃ * 312.0625, 162.5 * ᐃ, ᐃ * 323.0625);
		Ⲇ.bezierCurveTo(128.5 * ᐃ, 330.0625 * ᐃ, 45.5 * ᐃ, 312.0625 * ᐃ, ᐃ * 34.5, ᐃ * 268.0625);
		Ⲇ.bezierCurveTo(30.5 * ᐃ, 238.0625 * ᐃ, ᐃ * 44.5, ᐃ * 222.0625, 52.5 * ᐃ, ᐃ * 211.0625);
		Ⲇ.bezierCurveTo(82.5 * ᐃ, ᐃ * 174.0625, ᐃ * 104.5, 166.0625 * ᐃ, ᐃ * 119.5, ᐃ * 172.0625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⲆⲆⲆⲆ], 19 * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 92.5, 216.0625 * ᐃ, ᐃ * 13.892443989449804);
		ΔΔ(Ⲇ, Δⵠ[4]);
		ᐃΔΔ(Ⲇ, 68.5 * ᐃ, ᐃ * 227.0625, ᐃ * 8.06225774829855);
		ΔΔ(Ⲇ, Δⵠ[4]);
		ᐃΔΔ(Ⲇ, ᐃ * 85.5, 240.0625 * ᐃ, 6.708203932499369 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⵠ]);
		ᐃΔΔ(Ⲇ, 147.5 * ᐃ, 294.0625 * ᐃ, 17.46424919657298 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆⵠ]);
		ᐃΔΔ(Ⲇ, 166.5 * ᐃ, 273.0625 * ᐃ, ᐃ * 6.708203932499369);
		ΔΔ(Ⲇ, Δⵠ[4]);
		ᐃΔΔ(Ⲇ, 114.5 * ᐃ, 294.0625 * ᐃ, ᐃ * 12.36931687685298);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆⵠ]);
		ᐃΔΔ(Ⲇ, 123.5 * ᐃ, 220.0625 * ᐃ, ᐃ * 5.830951894845301);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⵠΔ]);
		ᐃΔΔ(Ⲇ, 114.5 * ᐃ, 259.0625 * ᐃ, 4.123105625617661 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[4]);
		ᐃΔΔ(Ⲇ, ᐃ * 63.5, ᐃ * 265.0625, 5.385164807134504 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[4]);
		ᐃΔΔ(Ⲇ, 148.5 * ᐃ, ᐃ * 235.0625, 4.47213595499958 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[4]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 194.5, 313.0625 * ᐃ);
		Ⲇ.bezierCurveTo(222.5 * ᐃ, 306.0625 * ᐃ, 319.5 * ᐃ, ᐃ * 271.0625, 337.5 * ᐃ, ᐃ * 241.0625);
		Ⲇ.bezierCurveTo(ᐃ * 274.5, ᐃ * 270.0625, ᐃ * 216.5, ᐃ * 288.0625, 199.5 * ᐃ, ᐃ * 287.0625);
		Ⲇ.bezierCurveTo(ᐃ * 198.5, ᐃ * 302.0625, 195.5 * ᐃ, ᐃ * 311.0625, ᐃ * 193.5, 312.0625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5]);
		return ΔⲆ
	}

	function ⵠᐃⵠⲆⵠᐃⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 89 * ᐃ;
		ΔⲆ.height = 89 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(44.5 * ᐃ, 44.5 * ᐃ);
		ᐃᐃⲆΔ(Ⲇ, ᐃᐃⲆⵠⲆ, ᐃ * 40, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃ], Δⵠ[1], ᐃ * ᐃᐃⵠᐃΔ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 44.5, ᐃ * 44.5);
		ᐃᐃⲆΔ(Ⲇ, 6, 25.11521001172521 * ᐃ, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆⲆ], Δⵠ[3], ᐃ * 5);
		return ΔⲆ
	}

	function ⲆᐃΔᐃⵠΔⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ, ΔᐃΔ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 501 * ᐃ;
		ΔⲆ.height = ᐃ * 564;
		Ⲇ.scale(.5, .5);
		Ⲇ.translate(240 * ᐃ, ᐃΔⵠⲆΔ * ᐃ);
		Ⲇ.rotate(ΔᐃΔ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : .2;
		ᐃΔΔ(Ⲇ, ᐃ * 174, ᐃ * 87.984375, 20.8806130178211 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ], Δⵠ[0], 8 * ᐃ);
		ᐃΔΔ(Ⲇ, 174 * ᐃ, ᐃ * 87.984375, ᐃ * 12.165525060596439);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃ], Δⵠ[ⵠᐃⲆ], ᐃ * ᐃΔⲆᐃⵠΔⵠ);
		ᐃΔΔ(Ⲇ, 174 * ᐃ, 87.484375 * ᐃ, ⲆΔⵠΔΔ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		ᐃΔΔ(Ⲇ, ᐃ * 30, 87.984375 * ᐃ, 20.8806130178211 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ], Δⵠ[0], 4 * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 30, 87.984375 * ᐃ, ᐃ * 12.165525060596439);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠΔ], Δⵠ[0], ᐃ * 4);
		ᐃΔΔ(Ⲇ, 30 * ᐃ, ᐃ * 87.484375, ᐃ * ⵠⲆⲆᐃᐃ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		ᐃΔΔ(Ⲇ, 100 * ᐃ, ᐃ * 30, 20.8806130178211 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ᐃᐃⲆ], 4 * ᐃ);
		ᐃΔΔ(Ⲇ, ΔᐃⲆΔⵠΔᐃ * ᐃ, 30 * ᐃ, ᐃ * 12.165525060596439);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠⲆᐃ], ᐃ * 4);
		ᐃΔΔ(Ⲇ, ᐃⵠΔᐃⵠ * ᐃ, 30 * ᐃ, ᐃ * ᐃᐃⲆⵠⲆ);
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆⲆ]);
		ᐃΔΔ(Ⲇ, ᐃ * 100, 130 * ᐃ, ᐃ * 20.8806130178211);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠΔᐃⵠ], ᐃ * ᐃⲆᐃⲆ);
		ᐃΔΔ(Ⲇ, ⲆᐃⲆⵠⲆ * ᐃ, ᐃ * 130, ᐃ * 12.165525060596439);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠᐃⲆⲆ], ᐃΔᐃΔ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * ᐃⲆⲆΔᐃ, 130 * ᐃ, 6 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.save();
		Ⲇ.translate(102 * ᐃ, 81.984375 * ᐃ);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, ᐃ * -74, -57 * ᐃ, ᐃ * 148, 114 * ᐃ, 23 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ΔΔᐃᐃ], 4 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(101 * ᐃ, ᐃ * 64.984375);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, -33 * ᐃ, ᐃ * -10, ᐃ * 66, ᐃ * ᐃΔΔⲆΔ, ᐃ * ⵠᐃᐃⲆᐃΔⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ], Δⵠ[0], 4 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(102 * ᐃ, 63.484375 * ᐃ);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, -9 * ᐃ, ᐃ * -27.5, 18 * ᐃ, ᐃ * 55, ᐃ * 15);
		Ⲇ.restore();
		Ⲇ.translate(ΔΔᐃᐃⵠ, -ᐃⵠᐃⲆ);
		Ⲇ.globalAlpha = 1;
		ᐃΔΔ(Ⲇ, ᐃ * 174, ᐃ * 87.984375, 20.8806130178211 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔⲆΔⵠ], ᐃΔⲆᐃⵠΔⵠ * ᐃ);
		ᐃΔΔ(Ⲇ, 174 * ᐃ, 87.984375 * ᐃ, 12.165525060596439 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[Ⲇⵠᐃ], Δⵠ[ᐃⲆᐃΔ], ᐃ * ⲆⲆᐃΔᐃΔⲆ);
		ᐃΔΔ(Ⲇ, ᐃ * 174, ᐃ * 87.484375, 6 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[2]);
		ᐃΔΔ(Ⲇ, ᐃ * 30, 87.984375 * ᐃ, ᐃ * 20.8806130178211);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⲆΔᐃⲆ], 8 * ᐃ);
		ᐃΔΔ(Ⲇ, 30 * ᐃ, ᐃ * 87.984375, 12.165525060596439 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⲆΔᐃⲆ], ΔⵠΔⵠΔ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 30, 87.484375 * ᐃ, ᐃ * 6);
		ΔΔ(Ⲇ, Δⵠ[2]);
		ᐃΔΔ(Ⲇ, ᐃ * 102, ᐃ * 30, 20.8806130178211 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ᐃⵠΔᐃ], ᐃ * 8);
		ᐃΔΔ(Ⲇ, ᐃ * 102, 30 * ᐃ, ᐃ * 12.165525060596439);
		ΔΔ(Ⲇ, Δⵠ[ΔᐃΔⲆ], Δⵠ[ΔⲆΔⲆ], ᐃΔⲆᐃⵠΔⵠ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 102, ᐃ * 30, ᐃ * 6);
		ΔΔ(Ⲇ, Δⵠ[1]);
		ᐃΔΔ(Ⲇ, ᐃ * 102, 130 * ᐃ, 20.8806130178211 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃᐃ], Δⵠ[3], ΔΔᐃⲆⲆ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 102, ᐃ * 130, 12.165525060596439 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃ], Δⵠ[ⵠΔΔⲆᐃ], ᐃ * ⲆΔⲆᐃᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 102, ᐃ * 130, ᐃ * ᐃᐃⲆⵠⲆ);
		ΔΔ(Ⲇ, Δⵠ[1]);
		Ⲇ.save();
		Ⲇ.translate(102 * ᐃ, 81.984375 * ᐃ);
		ᐃΔⵠ(Ⲇ, -74 * ᐃ, ᐃ * -57, ᐃ * 148, 114 * ᐃ, ᐃ * 23);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[Ⲇⵠᐃ], Δⵠ[3], 8 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 101, ᐃ * 64.984375);
		ᐃΔⵠ(Ⲇ, ᐃ * -33, ᐃ * -10, ᐃ * 66, ᐃ * ᐃⲆΔⲆⲆΔᐃ, ᐃⵠᐃⵠᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⲆⲆ], Δⵠ[1], 8 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 102, 63.484375 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -ⵠⲆᐃᐃΔ, ᐃ * -27.5, ᐃΔΔΔᐃᐃΔ * ᐃ, ᐃ * 55, ᐃ * 15);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[1], ᐃ * ⲆΔΔⲆⵠ);
		ᐃΔΔ(Ⲇ, 135 * ᐃ, 107.36605834960938 * ᐃ, ᐃ * 21.095023109728988);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⲆⵠⲆᐃ], ΔⵠΔⵠΔ * ᐃ);
		ᐃΔΔ(Ⲇ, 135 * ᐃ, ᐃ * 107.36605834960938, ᐃ * 13);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⲆⵠⲆᐃ], 8 * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 135, ᐃ * 107.36605834960938, 6.082762530298219 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[2]);
		ᐃΔΔ(Ⲇ, ᐃ * 70, 107.36605834960938 * ᐃ, ᐃ * 21.095023109728988);
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃ], Δⵠ[ⲆΔᐃⲆ], ᐃ * ⲆᐃⲆΔⵠ);
		ᐃΔΔ(Ⲇ, 70 * ᐃ, ᐃ * 107.36605834960938, 13 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔᐃⵠⲆ], Δⵠ[ⲆⲆᐃⵠ], 8 * ᐃ);
		ᐃΔΔ(Ⲇ, 70 * ᐃ, 107.36605834960938 * ᐃ, 6.082762530298219 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔᐃΔᐃ]);
		return ΔⲆ
	}

	function ⵠᐃⲆᐃΔᐃⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 170 * ᐃ;
		var ⲆΔⲆ = ᐃ * 172;
		var Ⲇⵠ = ⲆⲆᐃ / ΔΔⲆᐃ;
		var ᐃⵠⲆ = ⲆΔⲆ / ⲆⲆΔⲆ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(Ⲇⵠ, ᐃⵠⲆ + 7 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 0;
		ᐃΔΔ(Ⲇ, ᐃᐃⲆ, 0, ᐃ * 60);
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ⵠᐃⲆⲆ, -ΔᐃⵠⲆΔ * ᐃ);
		Ⲇ.save();
		for (var Ⲇᐃ = 0; Ⲇᐃ < 10; Ⲇᐃ++) {
			Ⲇ.rotate(Math.PI / 5);
			Ⲇ.save();
			Ⲇ.translate(65 * ᐃ, ᐃᐃⲆ);
			ᐃᐃⲆΔ(Ⲇ, 3, ᐃ * ⵠᐃⲆⵠⲆ, ⵠᐃΔⲆ * ᐃ);
			ΔΔ(Ⲇ, Δⵠ[ΔⵠⲆⲆ], Δⵠ[ⵠΔⵠΔ], 4 * ᐃ);
			Ⲇ.restore()
		}
		Ⲇ.restore();
		ᐃΔΔ(Ⲇ, 0, ⵠΔᐃᐃ, ᐃ * 60, 0);
		ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃⲆ], Δⵠ[4], ᐃ * ⵠᐃΔⲆ);
		ᐃΔΔ(Ⲇ, 0, 0, 40 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⵠᐃΔ]);
		ᐃΔΔ(Ⲇ, Δⵠⵠⵠ, Ⲇᐃⵠ, 25 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔΔ], Δⵠ[ΔᐃᐃᐃⵠΔⲆ], ᐃ * 8);
		return ΔⲆ
	}

	function ⵠⵠΔⲆⲆΔᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 316;
		ΔⲆ.height = ᐃ * 365;
		Ⲇ.save();
		Ⲇ.translate(156.07142639160156 * ᐃ, 51.81248474121094 * ᐃ);
		Ⲇ.rotate(ᐃᐃⲆ);
		ᐃΔⵠ(Ⲇ, -21.5 * ᐃ, -34 * ᐃ, ᐃ * 43, ᐃ * 68, ⲆΔⲆᐃᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔΔᐃΔⵠ], ᐃⲆⵠⲆΔΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(110.57142639160156 * ᐃ, ᐃ * 197.09820556640625);
		Ⲇ.bezierCurveTo(ᐃ * 158.07142639160156, ᐃ * 179.09820556640625, ᐃ * 158.07142639160156, 179.09820556640625 * ᐃ, ᐃ * 205.57142639160156, 161.09820556640625 * ᐃ);
		Ⲇ.bezierCurveTo(205.57142639160156 * ᐃ, ᐃ * 235.45535278320312, 205.57142639160156 * ᐃ, ᐃ * 235.45535278320312, 205.57142639160156 * ᐃ, 309.8125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 205.57142639160156, 323.8125 * ᐃ, 200.57142639160156 * ᐃ, ᐃ * 325.8125, ᐃ * 187.57142639160156, 326.8125 * ᐃ);
		Ⲇ.bezierCurveTo(155.57142639160156 * ᐃ, ᐃ * 326.3125, 155.57142639160156 * ᐃ, ᐃ * 326.3125, 123.57142639160156 * ᐃ, 325.8125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 111.57142639160156, 326.8125 * ᐃ, 109.57142639160156 * ᐃ, 321.8125 * ᐃ, ᐃ * 110.57142639160156, 312.8125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * 15);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 126.57142639160156, ᐃ * 67.38392639160156);
		Ⲇ.bezierCurveTo(ᐃ * 126.57142639160156, ᐃ * 57.38392639160156, 132.57142639160156 * ᐃ, ᐃ * 54.38392639160156, 140.57142639160156 * ᐃ, ᐃ * 54.38392639160156);
		Ⲇ.bezierCurveTo(177.57142639160156 * ᐃ, 55.38392639160156 * ᐃ, 158.07142639160156 * ᐃ, ᐃ * 54.38392639160156, 175.57142639160156 * ᐃ, ᐃ * 54.38392639160156);
		Ⲇ.bezierCurveTo(ᐃ * 185.57142639160156, ᐃ * 56.38392639160156, 185.57142639160156 * ᐃ, 57.38392639160156 * ᐃ, ᐃ * 184.57142639160156, 66.38392639160156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 184.57142639160156, ᐃ * 78.38392639160156, ᐃ * 184.57142639160156, 89.38392639160156 * ᐃ, 184.57142639160156 * ᐃ, ᐃ * 90.38392639160156);
		Ⲇ.bezierCurveTo(ᐃ * 177.57142639160156, 107.38392639160156 * ᐃ, ᐃ * 180.57142639160156, 112.38392639160156 * ᐃ, 189.57142639160156 * ᐃ, 116.38392639160156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 212.57142639160156, 127.38392639160156 * ᐃ, ᐃ * 212.57142639160156, 132.38392639160156 * ᐃ, ᐃ * 211.57142639160156, ᐃ * 150.38392639160156);
		Ⲇ.bezierCurveTo(ᐃ * 211.57142639160156, 227.59821128845215 * ᐃ, ᐃ * 211.57142639160156, ᐃ * 227.59821128845215, 211.57142639160156 * ᐃ, 304.81249618530273 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 212.57142639160156, ᐃ * 328.81249618530273, ᐃ * 209.57142639160156, 330.81249618530273 * ᐃ, 188.57142639160156 * ᐃ, 333.81249618530273 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 155.07142639160156, 333.31249618530273 * ᐃ, 155.07142639160156 * ᐃ, ᐃ * 333.31249618530273, ᐃ * 121.57142639160156, ᐃ * 332.81249618530273);
		Ⲇ.bezierCurveTo(ᐃ * 104.57142639160156, ᐃ * 327.81249618530273, ᐃ * 105.57142639160156, 328.81249618530273 * ᐃ, ᐃ * 104.57142639160156, 312.81249618530273 * ᐃ);
		Ⲇ.bezierCurveTo(104.57142639160156 * ᐃ, 228.16963958740234 * ᐃ, ᐃ * 104.57142639160156, ᐃ * 228.16963958740234, 104.57142639160156 * ᐃ, 143.52678298950195 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 106.57142639160156, ᐃ * 124.52678298950195, 110.57142639160156 * ᐃ, ᐃ * 123.52678298950195, 123.57142639160156 * ᐃ, 116.52678298950195 * ᐃ);
		Ⲇ.bezierCurveTo(136.57142639160156 * ᐃ, ᐃ * 110.52678298950195, ᐃ * 130.57142639160156, 106.52678298950195 * ᐃ, ᐃ * 126.57142639160156, 98.52678298950195 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ΔⲆΔⵠᐃ, Δⵠ[5], ᐃ * 15);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 125.57142639160156, 156.66963958740234 * ᐃ);
		Ⲇ.bezierCurveTo(125.57142639160156 * ᐃ, ᐃ * 182.66963958740234, 125.57142639160156 * ᐃ, ᐃ * 182.66963958740234, 125.57142639160156 * ᐃ, 208.66963958740234 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠⲆⲆⲆⲆ, Δⵠ[ⵠⵠⲆⵠᐃ], 15 * ᐃ);
		return ΔⲆ
	}

	function ΔΔΔΔᐃΔᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 149;
		ΔⲆ.height = 153 * ᐃ;
		Ⲇ.globalAlpha = .5;
		ᐃΔΔ(Ⲇ, ᐃ * 74.5, 85 * ᐃ, 66 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆ]);
		Ⲇ.globalAlpha = ΔᐃⲆⲆ;
		ᐃΔΔ(Ⲇ, ᐃ * 75.5, ᐃ * 72.5, 67 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔⲆᐃΔ], ᐃ * ᐃᐃⵠΔ);
		ᐃΔΔ(Ⲇ, 75.5 * ᐃ, ᐃ * 73.5, 54 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠΔⵠ]);
		Ⲇ.globalAlpha = .5;
		ᐃΔΔ(Ⲇ, ᐃ * 74.5, 80.5 * ᐃ, ᐃ * 39);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⵠΔ]);
		Ⲇ.globalAlpha = 1;
		ᐃΔΔ(Ⲇ, 74.5 * ᐃ, ᐃ * 74.5, 37 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆᐃᐃ]);
		return ΔⲆ
	}

	function ⵠᐃⲆⲆⵠⲆⲆⵠⲆ(ᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 321;
		ΔⲆ.height = ᐃ * 345;
		Ⲇ.translate(ⵠⵠⵠ, ᐃ * 5);
		Ⲇ.translate(ⲆⵠⲆⲆ, 20 * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 160.5, ᐃ * 159.5, ᐃ * 156.39595138242822);
		ΔΔ(Ⲇ, ⵠ[344], ⵠ[344], ᐃ * 4);
		Ⲇ.translate(ⵠⵠⵠΔ, ᐃ * -20);
		ᐃΔΔ(Ⲇ, 160.5 * ᐃ, ᐃ * 159.5, 156.39595138242822 * ᐃ);
		ΔΔ(Ⲇ, ⵠ[257], ⵠ[392], ΔΔⵠᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(31.999969482421875 * ᐃ, ᐃ * 163.07290649414062);
		Ⲇ.bezierCurveTo(22.999969482421875 * ᐃ, 67.07290649414062 * ᐃ, ᐃ * 106, 20.072906494140625 * ᐃ, 162 * ᐃ, ᐃ * 23.072906494140625);
		Ⲇ.bezierCurveTo(ᐃ * 269.9999694824219, 31.072906494140625 * ᐃ, ᐃ * 292.9999694824219, ᐃ * 120.07290649414062, ᐃ * 294.9999694824219, ᐃ * 161.07290649414062);
		Ⲇ.bezierCurveTo(165.49996948242188 * ᐃ, 162.07290649414062 * ᐃ, ᐃ * 165.49996948242188, 162.07290649414062 * ᐃ, ᐃ * 35.999969482421875, 163.07290649414062 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠ[58]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(32.999969482421875 * ᐃ, 165.07290649414062 * ᐃ);
		Ⲇ.bezierCurveTo(16.999969482421875 * ᐃ, ᐃ * 221.07290649414062, 85 * ᐃ, ᐃ * 289.0729064941406, ᐃ * 156, 294.0729064941406 * ᐃ);
		Ⲇ.bezierCurveTo(263.9999694824219 * ᐃ, ᐃ * 293.0729064941406, ᐃ * 295.9999694824219, ᐃ * 199.07290649414062, 294.9999694824219 * ᐃ, ᐃ * 159.07290649414062);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, "#071A1B");
		ᐃΔΔ(Ⲇ, ᐃ * 161, ᐃ * 158.07290649414062, ᐃ * 133.4053971921676);
		ΔΔ(Ⲇ, undefined, ⵠ[392], 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(31.999969482421875 * ᐃ, 161.62844848632812 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 162.49996948242188, 161.62844848632812 * ᐃ, ᐃ * 162.49996948242188, 161.62844848632812 * ᐃ, ᐃ * 292.9999694824219, 161.62844848632812 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[392], 12 * ᐃ);
		Ⲇ.translate(ⵠᐃⲆ, ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 66, ᐃ * 158.29513549804688);
		Ⲇ.bezierCurveTo(86 * ᐃ, ᐃ * 158.29513549804688, 86 * ᐃ, 158.29513549804688 * ᐃ, ᐃ * 106, ᐃ * 158.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[533], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(57.999969482421875 * ᐃ, ᐃ * 117.29513549804688);
		Ⲇ.bezierCurveTo(85 * ᐃ, 128.29513549804688 * ᐃ, ᐃ * 85, 128.29513549804688 * ᐃ, ᐃ * 113, ᐃ * 139.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[533], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(95 * ᐃ, ᐃ * 90.29513549804688);
		Ⲇ.bezierCurveTo(112 * ᐃ, 105.79513549804688 * ᐃ, ᐃ * 112, ᐃ * 105.79513549804688, 129 * ᐃ, 121.29513549804688 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[533], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 116, 52.850677490234375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 130, ᐃ * 83.85067749023438, ᐃ * 130, ᐃ * 83.85067749023438, 144 * ᐃ, ᐃ * 114.85067749023438);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[533], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(159 * ᐃ, 61.295135498046875 * ᐃ);
		Ⲇ.bezierCurveTo(160.49996948242188 * ᐃ, ᐃ * 92.29513549804688, 160.49996948242188 * ᐃ, 92.29513549804688 * ᐃ, 160 * ᐃ, ᐃ * 123.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Ⲇⵠⵠᐃᐃ, ⵠ[533], ᐃ * ΔⵠⲆⲆⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(203 * ᐃ, ᐃ * 51.295135498046875);
		Ⲇ.bezierCurveTo(ᐃ * 190.49996948242188, 83.29513549804688 * ᐃ, 190.49996948242188 * ᐃ, ᐃ * 83.29513549804688, 176 * ᐃ, ᐃ * 115.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[533], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 225, 89.29513549804688 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 210.49996948242188, ᐃ * 104.79513549804688, ᐃ * 210.49996948242188, 104.79513549804688 * ᐃ, 194 * ᐃ, 120.29513549804688 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Ⲇⵠⵠᐃᐃ, ⵠ[533], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(266.9999694824219 * ᐃ, 112.29513549804688 * ᐃ);
		Ⲇ.bezierCurveTo(233.49996948242188 * ᐃ, ᐃ * 127.29513549804688, 233.49996948242188 * ᐃ, 127.29513549804688 * ᐃ, ᐃ * 199, 142.29513549804688 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[533], ΔⲆⵠΔᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(256.9999694824219 * ᐃ, 155.29513549804688 * ᐃ);
		Ⲇ.bezierCurveTo(238.49996948242188 * ᐃ, 156.29513549804688 * ᐃ, 238.49996948242188 * ᐃ, ᐃ * 156.29513549804688, ᐃ * 219, 157.29513549804688 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆⲆⲆΔⲆ, ⵠ[533], ᐃ * 12);
		Ⲇ.translate(0, -ΔΔᐃⲆⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 66, 158.29513549804688 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 86, ᐃ * 158.29513549804688, ᐃ * 86, 158.29513549804688 * ᐃ, 106 * ᐃ, ᐃ * 158.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆⲆⲆΔⲆ, ⵠ[406], ᐃ * ΔⲆⵠΔⲆᐃΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 57.999969482421875, 117.29513549804688 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 85, ᐃ * 128.29513549804688, ᐃ * 85, ᐃ * 128.29513549804688, 113 * ᐃ, ᐃ * 139.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠⵠⲆᐃᐃ, ⵠ[406], ᐃ * ⵠⵠᐃᐃΔΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(95 * ᐃ, ᐃ * 90.29513549804688);
		Ⲇ.bezierCurveTo(112 * ᐃ, ᐃ * 105.79513549804688, ᐃ * 112, ᐃ * 105.79513549804688, 129 * ᐃ, 121.29513549804688 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆΔΔⵠᐃ, ⵠ[406], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 116, ᐃ * 52.850677490234375);
		Ⲇ.bezierCurveTo(ᐃ * 130, 83.85067749023438 * ᐃ, ᐃ * 130, 83.85067749023438 * ᐃ, ᐃ * 144, 114.85067749023438 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[406], ᐃ * ⵠⵠᐃᐃᐃⲆⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(159 * ᐃ, 61.295135498046875 * ᐃ);
		Ⲇ.bezierCurveTo(160.49996948242188 * ᐃ, 92.29513549804688 * ᐃ, 160.49996948242188 * ᐃ, ᐃ * 92.29513549804688, ᐃ * 160, ᐃ * 123.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆⲆⲆΔⲆ, ⵠ[406], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 203, ᐃ * 51.295135498046875);
		Ⲇ.bezierCurveTo(190.49996948242188 * ᐃ, 83.29513549804688 * ᐃ, 190.49996948242188 * ᐃ, 83.29513549804688 * ᐃ, ᐃ * 176, 115.29513549804688 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Ⲇⵠⵠᐃᐃ, ⵠ[406], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 225, 89.29513549804688 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 210.49996948242188, ᐃ * 104.79513549804688, 210.49996948242188 * ᐃ, ᐃ * 104.79513549804688, ᐃ * 194, ᐃ * 120.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[406], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 266.9999694824219, ᐃ * 112.29513549804688);
		Ⲇ.bezierCurveTo(233.49996948242188 * ᐃ, ᐃ * 127.29513549804688, ᐃ * 233.49996948242188, ᐃ * 127.29513549804688, 199 * ᐃ, ᐃ * 142.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[406], ΔⵠⲆⲆⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(256.9999694824219 * ᐃ, ᐃ * 155.29513549804688);
		Ⲇ.bezierCurveTo(238.49996948242188 * ᐃ, ᐃ * 156.29513549804688, ᐃ * 238.49996948242188, ᐃ * 156.29513549804688, 219 * ᐃ, ᐃ * 157.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[406], ΔⲆⵠΔⲆᐃΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(96 * ᐃ, ᐃ * 166);
		Ⲇ.bezierCurveTo(ᐃ * 88, 117 * ᐃ, ᐃ * 129, ᐃ * 92, 161 * ᐃ, ᐃ * 91);
		Ⲇ.bezierCurveTo(ᐃ * 201, 90 * ᐃ, ᐃ * 223, ᐃ * 121, ᐃ * 230, ᐃ * 161);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, "#704618", "#5D3D1A", ᐃ * ᐃᐃᐃΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(94.00003051757812 * ᐃ, ᐃ * 164.40341186523438);
		Ⲇ.bezierCurveTo(ᐃ * 162.50003051757812, 164.40341186523438 * ᐃ, 230.00003051757812 * ᐃ, 165.40341186523438 * ᐃ, ᐃ * 231.00003051757812, 164.40341186523438 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 214.00003051757812, 267.4034118652344 * ᐃ, 92.00003051757812 * ᐃ, 243.40341186523438 * ᐃ, 93.00003051757812 * ᐃ, ᐃ * 165.40341186523438);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, "#E1DDD5", "#EAE7E4", Δⵠᐃᐃⵠ * ᐃ);
		ᐃΔΔ(Ⲇ, 160.00003051757812 * ᐃ, 166.49432373046875 * ᐃ, ᐃ * 28.30194339616981);
		ΔΔ(Ⲇ, ⵠ[257], ⵠ[392], ᐃ * 10);
		return ΔⲆ
	}

	function ⵠⵠΔⲆⲆΔΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 81 * ᐃ;
		ΔⲆ.height = ᐃ * 626;
		Ⲇ.translate(ⵠᐃᐃⵠΔ * ᐃ, 20 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(55 * ᐃ, 565 * ᐃ);
		Ⲇ.bezierCurveTo(56 * ᐃ, 586 * ᐃ, ᐃ * 53, 591 * ᐃ, 40 * ᐃ, 592 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 28, ᐃ * 591, ᐃ * 27, ᐃ * 583, ᐃ * 28, ᐃ * 557);
		Ⲇ.bezierCurveTo(ᐃ * 27.5, 346 * ᐃ, 27.5 * ᐃ, ᐃ * 346, 27 * ᐃ, ᐃ * 135);
		Ⲇ.bezierCurveTo(26 * ᐃ, 74 * ᐃ, ᐃ * 36, ᐃ * 26, 41 * ᐃ, ᐃ * ⲆⵠᐃⵠⵠⲆᐃ);
		Ⲇ.bezierCurveTo(54 * ᐃ, ᐃ * 51, 54 * ᐃ, ᐃ * 81, 55 * ᐃ, 128 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃⵠ]);
		Ⲇ.translate(ᐃ * -20, ᐃ * -20);
		Ⲇ.globalAlpha = 1;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(55 * ᐃ, ᐃ * 565);
		Ⲇ.bezierCurveTo(56 * ᐃ, 586 * ᐃ, 53 * ᐃ, 591 * ᐃ, 40 * ᐃ, ᐃ * 592);
		Ⲇ.bezierCurveTo(28 * ᐃ, ᐃ * 591, ᐃ * 27, 583 * ᐃ, 28 * ᐃ, 557 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 27.5, 346 * ᐃ, ᐃ * 27.5, ᐃ * 346, ᐃ * 27, 135 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 26, 74 * ᐃ, ᐃ * 36, 26 * ᐃ, ᐃ * 41, ᐃ * ⵠᐃΔⵠᐃ);
		Ⲇ.bezierCurveTo(54 * ᐃ, ᐃ * 51, ᐃ * 54, ᐃ * 81, ᐃ * 55, 128 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 27, 129 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 32, ᐃ * 135, 48 * ᐃ, 136 * ᐃ, 53 * ᐃ, ᐃ * 129);
		Ⲇ.bezierCurveTo(ᐃ * 56, 97 * ᐃ, 53 * ᐃ, ᐃ * 82, ᐃ * 52, 64 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 49, ᐃ * 33, 44 * ᐃ, ᐃ * 27, 41 * ᐃ, ᐃ * 21);
		Ⲇ.bezierCurveTo(31 * ᐃ, ᐃ * 40, ᐃ * 28, 84 * ᐃ, 27 * ᐃ, 127 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(55 * ᐃ, ᐃ * 565);
		Ⲇ.bezierCurveTo(56 * ᐃ, ᐃ * 586, ᐃ * 53, 591 * ᐃ, ᐃ * 40, ᐃ * 592);
		Ⲇ.bezierCurveTo(28 * ᐃ, 591 * ᐃ, ᐃ * 27, ᐃ * 583, ᐃ * 28, ᐃ * 557);
		Ⲇ.bezierCurveTo(ᐃ * 27.5, ᐃ * 346, 27.5 * ᐃ, 346 * ᐃ, 27 * ᐃ, ᐃ * 135);
		Ⲇ.bezierCurveTo(26 * ᐃ, ᐃ * 74, ᐃ * 36, 26 * ᐃ, ᐃ * 41, Δⵠᐃⵠᐃ * ᐃ);
		Ⲇ.bezierCurveTo(54 * ᐃ, ᐃ * 51, 54 * ᐃ, ᐃ * 81, ᐃ * 55, 128 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ΔΔᐃⵠⵠ, Δⵠ[2], ΔΔᐃⲆⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(28 * ᐃ, 475 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 38, ᐃ * 482, 48 * ᐃ, ᐃ * 480, ᐃ * 54, 474 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 54, 509.5 * ᐃ, 54 * ᐃ, ᐃ * 509.5, 54 * ᐃ, 545 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 46, ᐃ * 554, 36 * ᐃ, 552 * ᐃ, ᐃ * 28, 545 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ᐃⵠᐃⲆ], ΔⵠⵠΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 28, ᐃ * 496);
		Ⲇ.bezierCurveTo(39 * ᐃ, 506 * ᐃ, ᐃ * 49, ᐃ * 503, 54 * ᐃ, 496 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔⲆⲆⵠ], ⲆΔΔⲆⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 28, 521 * ᐃ);
		Ⲇ.bezierCurveTo(41 * ᐃ, ᐃ * 529, ᐃ * 49, ᐃ * 524, ᐃ * 54, 520 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔΔᐃᐃⵠ], ᐃ * ⲆⲆᐃΔᐃΔⲆ);
		return ΔⲆ
	}

	function ΔⵠⵠⵠⲆⵠⵠ(ᐃⲆⵠⲆⵠᐃᐃ, ᐃⵠⲆⲆΔⵠⲆ, ᐃⲆᐃⵠⲆΔⵠ, ΔⵠⲆⲆᐃΔᐃ) {
		const ᐃᐃᐃⲆᐃᐃⲆ = ~(ᐃⲆⵠⲆⵠᐃᐃ & 39695) & ᐃⲆⵠⲆⵠᐃᐃ | ~(ᐃⲆⵠⲆⵠᐃᐃ & 39695) & 39695;
		const ᐃᐃΔⵠⵠⵠⵠ = (0 << (ᐃⵠⲆⲆΔⵠⲆ >> ᐃΔⲆΔΔⲆᐃ & 255)) + (16 << (ᐃⵠⲆⲆΔⵠⲆ >> 8 & 255)) + (8 << (ᐃⵠⲆⲆΔⵠⲆ >> 0 & ΔⵠΔⲆΔΔⲆ)) + (24 << (ᐃⵠⲆⲆΔⵠⲆ >> 24 & ΔⵠΔⲆΔΔⲆ));
		const ⵠᐃΔᐃᐃΔⲆ = (16 << (ᐃⲆᐃⵠⲆΔⵠ >> 0 & 255)) + (8 << (ᐃⲆᐃⵠⲆΔⵠ >> 16 & ⲆᐃΔⵠⵠᐃᐃ)) + (0 << (ᐃⲆᐃⵠⲆΔⵠ >> 24 & 255)) + (24 << (ᐃⲆᐃⵠⲆΔⵠ >> 8 & 255));
		const ⵠⲆⵠΔⵠᐃⵠ = ~(47744 & ΔⵠⲆⲆᐃΔᐃ) & 47744 | ~(47744 & ΔⵠⲆⲆᐃΔᐃ) & ΔⵠⲆⲆᐃΔᐃ;
		const ᐃⵠⵠᐃΔΔⲆ = ⵠΔⵠΔᐃⲆᐃ(ᐃᐃᐃⲆᐃᐃⲆ, ᐃᐃΔⵠⵠⵠⵠ, ⵠᐃΔᐃᐃΔⲆ, ⵠⲆⵠΔⵠᐃⵠ);
		const ΔᐃΔⲆⵠᐃⵠᐃΔ = ⵠΔⲆⵠΔⲆΔ(ᐃᐃᐃⲆᐃᐃⲆ, ᐃᐃΔⵠⵠⵠⵠ, ⵠᐃΔᐃᐃΔⲆ, ⵠⲆⵠΔⵠᐃⵠ, ᐃᐃᐃⲆᐃᐃⲆ);
		const ΔᐃⵠΔΔΔᐃⵠΔ = ~(3125 & ᐃⵠⵠᐃΔΔⲆ) & 3125 | ~(3125 & ᐃⵠⵠᐃΔΔⲆ) & ᐃⵠⵠᐃΔΔⲆ;
		return ΔᐃⵠΔΔΔᐃⵠΔ
	}

	function ⲆⵠΔⵠᐃᐃⲆⵠᐃ(ᐃ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		if (0 == Ⲇᐃ) {
			ΔⲆ.width = 543 * ᐃ;
			ΔⲆ.height = ᐃ * 393;
			Ⲇ.translate(ᐃ * 40, 60 * ᐃ);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃⲆᐃΔ * ᐃ, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(176 * ᐃ, 10.25 * ᐃ);
			Ⲇ.bezierCurveTo(188 * ᐃ, 16.25 * ᐃ, 187 * ᐃ, 25.25 * ᐃ, ᐃ * 183, 26.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 177, ᐃ * 26.25, ᐃ * 175, ᐃ * 21.25, 173 * ᐃ, ᐃ * 19.25);
			Ⲇ.bezierCurveTo(170 * ᐃ, 14.25 * ᐃ, 170 * ᐃ, ᐃ * 10.25, 176 * ᐃ, 10.25 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ΔⵠΔ;
			Ⲇ.translate(ᐃ * -3, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(176 * ᐃ, ᐃ * 10.25);
			Ⲇ.bezierCurveTo(ᐃ * 188, ᐃ * 16.25, 187 * ᐃ, ᐃ * 25.25, ᐃ * 183, 26.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 177, 26.25 * ᐃ, 175 * ᐃ, 21.25 * ᐃ, ᐃ * 173, 19.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 170, ᐃ * 14.25, ᐃ * 170, 10.25 * ᐃ, ᐃ * 176, ᐃ * 10.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[Δⵠᐃ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃᐃᐃΔᐃ * ᐃ, ᐃ * ⵠΔΔⲆᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(274 * ᐃ, ᐃ * 8);
			Ⲇ.bezierCurveTo(ᐃ * 276, ᐃⲆⵠΔᐃ * ᐃ, ᐃ * 271, 23 * ᐃ, 266 * ᐃ, 20 * ᐃ);
			Ⲇ.bezierCurveTo(264 * ᐃ, ᐃ * 19, ᐃ * 262, ᐃ * 15, 267 * ᐃ, ᐃ * ᐃⵠᐃΔΔⵠᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 271, ᐃ * 5, 274 * ᐃ, ᐃ * 5, ᐃ * 274, 8 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ᐃⲆΔ;
			Ⲇ.translate(ᐃ * -3, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(274 * ᐃ, 8 * ᐃ);
			Ⲇ.bezierCurveTo(276 * ᐃ, 12 * ᐃ, ᐃ * 271, ᐃ * 23, 266 * ᐃ, ᐃ * 20);
			Ⲇ.bezierCurveTo(ᐃ * 264, 19 * ᐃ, ᐃ * 262, ⲆΔᐃΔⲆ * ᐃ, ᐃ * 267, ⵠⲆΔⵠⵠ * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 271, ⵠⲆⲆᐃ * ᐃ, 274 * ᐃ, ᐃΔΔⲆⵠ * ᐃ, 274 * ᐃ, ᐃ * ΔΔⲆᐃᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔΔΔᐃ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃⵠΔⲆ * ᐃ, ⲆⲆᐃⵠ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(282 * ᐃ, ᐃ * 23.25);
			Ⲇ.bezierCurveTo(ᐃ * 275, 25.25 * ᐃ, 272 * ᐃ, ᐃ * 29.25, 274 * ᐃ, 36.25 * ᐃ);
			Ⲇ.bezierCurveTo(277 * ᐃ, 40.25 * ᐃ, 280 * ᐃ, 37.25 * ᐃ, 283 * ᐃ, ᐃ * 32.25);
			Ⲇ.bezierCurveTo(286 * ᐃ, ᐃ * 26.25, ᐃ * 286, ᐃ * 25.25, ᐃ * 282, 23.25 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⲆ]);
			Ⲇ.globalAlpha = ΔΔΔᐃ;
			Ⲇ.translate(-ᐃⵠΔᐃ * ᐃ, ᐃ * -ΔⲆΔⲆ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 282, 23.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 275, 25.25 * ᐃ, 272 * ᐃ, 29.25 * ᐃ, ᐃ * 274, ᐃ * 36.25);
			Ⲇ.bezierCurveTo(ᐃ * 277, 40.25 * ᐃ, 280 * ᐃ, ᐃ * 37.25, 283 * ᐃ, 32.25 * ᐃ);
			Ⲇ.bezierCurveTo(286 * ᐃ, ᐃ * 26.25, 286 * ᐃ, 25.25 * ᐃ, ᐃ * 282, ᐃ * 23.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠᐃⵠΔ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * 3, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(343.75 * ᐃ, ᐃ * 18.25);
			Ⲇ.bezierCurveTo(346.75 * ᐃ, ᐃ * 27.25, 346.75 * ᐃ, 32.25 * ᐃ, 339.75 * ᐃ, 31.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 336.75, ᐃ * 29.25, 335.75 * ᐃ, ᐃ * 27.25, 336.75 * ᐃ, 22.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 336.75, 16.25 * ᐃ, 338.75 * ᐃ, ᐃ * 15.25, ᐃ * 343.75, ᐃ * 18.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(ᐃ * -3, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(343.75 * ᐃ, ᐃ * 18.25);
			Ⲇ.bezierCurveTo(ᐃ * 346.75, 27.25 * ᐃ, 346.75 * ᐃ, ᐃ * 32.25, 339.75 * ᐃ, ᐃ * 31.25);
			Ⲇ.bezierCurveTo(336.75 * ᐃ, ᐃ * 29.25, ᐃ * 335.75, 27.25 * ᐃ, ᐃ * 336.75, ᐃ * 22.25);
			Ⲇ.bezierCurveTo(336.75 * ᐃ, ᐃ * 16.25, ᐃ * 338.75, ᐃ * 15.25, ᐃ * 343.75, ᐃ * 18.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * ᐃⲆΔΔ, ᐃ * ᐃⵠΔⲆ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 364.75, 22.25 * ᐃ);
			Ⲇ.bezierCurveTo(368.75 * ᐃ, 27.25 * ᐃ, 362.75 * ᐃ, ᐃ * 36.25, ᐃ * 356.75, ᐃ * 39.25);
			Ⲇ.bezierCurveTo(ᐃ * 346.75, 43.25 * ᐃ, ᐃ * 346.75, 34.25 * ᐃ, 348.75 * ᐃ, 31.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 352.75, ᐃ * 23.25, ᐃ * 360.75, ᐃ * 20.25, ᐃ * 363.75, 22.25 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = Δⵠᐃ;
			Ⲇ.translate(-3 * ᐃ, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 364.75, 22.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 368.75, 27.25 * ᐃ, 362.75 * ᐃ, 36.25 * ᐃ, ᐃ * 356.75, ᐃ * 39.25);
			Ⲇ.bezierCurveTo(ᐃ * 346.75, ᐃ * 43.25, 346.75 * ᐃ, 34.25 * ᐃ, 348.75 * ᐃ, 31.25 * ᐃ);
			Ⲇ.bezierCurveTo(352.75 * ᐃ, ᐃ * 23.25, ᐃ * 360.75, ᐃ * 20.25, 363.75 * ᐃ, 22.25 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * ⲆΔᐃⲆ, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(350.75 * ᐃ, ᐃ * 52.25);
			Ⲇ.bezierCurveTo(ᐃ * 352.75, 45.25 * ᐃ, 360.75 * ᐃ, 43.25 * ᐃ, ᐃ * 368.75, ᐃ * 52.25);
			Ⲇ.bezierCurveTo(369.75 * ᐃ, 58.25 * ᐃ, ᐃ * 366.75, 59.25 * ᐃ, ᐃ * 357.75, ᐃ * 57.25);
			Ⲇ.bezierCurveTo(350.75 * ᐃ, 56.25 * ᐃ, 352.75 * ᐃ, 55.25 * ᐃ, 350.75 * ᐃ, ᐃ * 52.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ΔΔΔᐃ;
			Ⲇ.translate(ᐃ * -ᐃⵠΔⵠ, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 350.75, ᐃ * 52.25);
			Ⲇ.bezierCurveTo(352.75 * ᐃ, ᐃ * 45.25, 360.75 * ᐃ, ᐃ * 43.25, 368.75 * ᐃ, ᐃ * 52.25);
			Ⲇ.bezierCurveTo(ᐃ * 369.75, 58.25 * ᐃ, 366.75 * ᐃ, ᐃ * 59.25, ᐃ * 357.75, ᐃ * 57.25);
			Ⲇ.bezierCurveTo(ᐃ * 350.75, ᐃ * 56.25, ᐃ * 352.75, 55.25 * ᐃ, 350.75 * ᐃ, ᐃ * 52.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠᐃⵠΔ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ⵠΔΔⲆᐃ * ᐃ, ᐃ * ΔΔᐃΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(421.75 * ᐃ, 81.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 432.75, 85.25 * ᐃ, 431.75 * ᐃ, ᐃ * 89.25, 426.75 * ᐃ, 93.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 418.75, ᐃ * 95.25, 414.75 * ᐃ, 93.25 * ᐃ, 412.75 * ᐃ, ᐃ * 89.25);
			Ⲇ.bezierCurveTo(411.75 * ᐃ, ᐃ * 84.25, ᐃ * 413.75, 81.25 * ᐃ, 421.75 * ᐃ, 81.25 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(-ΔΔᐃΔ * ᐃ, -ᐃⲆᐃΔ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(421.75 * ᐃ, 81.25 * ᐃ);
			Ⲇ.bezierCurveTo(432.75 * ᐃ, ᐃ * 85.25, 431.75 * ᐃ, 89.25 * ᐃ, 426.75 * ᐃ, ᐃ * 93.25);
			Ⲇ.bezierCurveTo(418.75 * ᐃ, ᐃ * 95.25, 414.75 * ᐃ, 93.25 * ᐃ, ᐃ * 412.75, ᐃ * 89.25);
			Ⲇ.bezierCurveTo(411.75 * ᐃ, ᐃ * 84.25, ᐃ * 413.75, ᐃ * 81.25, 421.75 * ᐃ, ᐃ * 81.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⲆ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * ᐃⵠΔⵠ, ᐃ * 3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 432.75, ᐃ * 105.25);
			Ⲇ.bezierCurveTo(430.75 * ᐃ, ᐃ * 115.25, 411.75 * ᐃ, ᐃ * 130.25, ᐃ * 408.75, 117.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 407.75, ᐃ * 106.25, 414.75 * ᐃ, 103.25 * ᐃ, ᐃ * 421.75, 101.25 * ᐃ);
			Ⲇ.bezierCurveTo(430.75 * ᐃ, 100.25 * ᐃ, 432.75 * ᐃ, ᐃ * 101.25, 432.75 * ᐃ, 105.25 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ⵠⲆⲆ;
			Ⲇ.translate(ᐃ * -3, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 432.75, 105.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 430.75, 115.25 * ᐃ, ᐃ * 411.75, 130.25 * ᐃ, ᐃ * 408.75, ᐃ * 117.25);
			Ⲇ.bezierCurveTo(ᐃ * 407.75, ᐃ * 106.25, ᐃ * 414.75, ᐃ * 103.25, ᐃ * 421.75, 101.25 * ᐃ);
			Ⲇ.bezierCurveTo(430.75 * ᐃ, 100.25 * ᐃ, ᐃ * 432.75, ᐃ * 101.25, 432.75 * ᐃ, ᐃ * 105.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⲆᐃΔ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ⲆⲆᐃⵠ * ᐃ, ⵠⵠΔⵠ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(422.75 * ᐃ, ᐃ * 153.25);
			Ⲇ.bezierCurveTo(437.75 * ᐃ, 155.25 * ᐃ, ᐃ * 442.75, ᐃ * 158.25, 436.75 * ᐃ, ᐃ * 165.25);
			Ⲇ.bezierCurveTo(ᐃ * 431.75, ᐃ * 170.25, ᐃ * 424.75, 167.25 * ᐃ, ᐃ * 419.75, 163.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 413.75, ᐃ * 157.25, ᐃ * 415.75, ᐃ * 153.25, ᐃ * 422.75, ᐃ * 153.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ⵠᐃⵠΔ;
			Ⲇ.translate(-3 * ᐃ, ᐃ * -ΔΔᐃΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 422.75, ᐃ * 153.25);
			Ⲇ.bezierCurveTo(437.75 * ᐃ, 155.25 * ᐃ, 442.75 * ᐃ, 158.25 * ᐃ, 436.75 * ᐃ, 165.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 431.75, 170.25 * ᐃ, 424.75 * ᐃ, 167.25 * ᐃ, 419.75 * ᐃ, ᐃ * 163.25);
			Ⲇ.bezierCurveTo(ᐃ * 413.75, 157.25 * ᐃ, ᐃ * 415.75, 153.25 * ᐃ, ᐃ * 422.75, 153.25 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ΔⲆΔⲆ * ᐃ, ᐃⵠΔⲆ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(409.75 * ᐃ, 158.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 409.75, ᐃ * 168.25, 401.75 * ᐃ, ᐃ * 172.25, 397.75 * ᐃ, ᐃ * 167.25);
			Ⲇ.bezierCurveTo(ᐃ * 394.75, ᐃ * 159.25, ᐃ * 407.75, 150.25 * ᐃ, 408.75 * ᐃ, ᐃ * 158.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ᐃⲆΔ;
			Ⲇ.translate(-3 * ᐃ, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 409.75, ᐃ * 158.25);
			Ⲇ.bezierCurveTo(ᐃ * 409.75, 168.25 * ᐃ, ᐃ * 401.75, 172.25 * ᐃ, ᐃ * 397.75, ᐃ * 167.25);
			Ⲇ.bezierCurveTo(394.75 * ᐃ, 159.25 * ᐃ, 407.75 * ᐃ, 150.25 * ᐃ, 408.75 * ᐃ, ᐃ * 158.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * 3, ⲆᐃᐃΔ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(204 * ᐃ, ᐃ * 238.25);
			Ⲇ.bezierCurveTo(204 * ᐃ, ᐃ * 248.25, ᐃ * 184, ᐃ * 255.25, 180 * ᐃ, ᐃ * 247.25);
			Ⲇ.bezierCurveTo(ᐃ * 177, ᐃ * 241.25, ᐃ * 187, 236.25 * ᐃ, ᐃ * 192, ᐃ * 235.25);
			Ⲇ.bezierCurveTo(ᐃ * 201, ᐃ * 233.25, 204 * ᐃ, 233.25 * ᐃ, ᐃ * 204, ᐃ * 238.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(ᐃ * -ᐃΔⵠⲆ, -ⵠⵠΔⵠ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 204, ᐃ * 238.25);
			Ⲇ.bezierCurveTo(204 * ᐃ, 248.25 * ᐃ, ᐃ * 184, 255.25 * ᐃ, ᐃ * 180, 247.25 * ᐃ);
			Ⲇ.bezierCurveTo(177 * ᐃ, ᐃ * 241.25, 187 * ᐃ, 236.25 * ᐃ, ᐃ * 192, 235.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 201, 233.25 * ᐃ, 204 * ᐃ, ᐃ * 233.25, 204 * ᐃ, ᐃ * 238.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[Δᐃⵠⵠ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(3 * ᐃ, Δⵠⵠᐃ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 208, 246.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 202, ᐃ * 255.25, ᐃ * 204, 258.25 * ᐃ, ᐃ * 212, ᐃ * 255.25);
			Ⲇ.bezierCurveTo(ᐃ * 217, 250.25 * ᐃ, ᐃ * 217, ᐃ * 248.25, ᐃ * 216, 244.25 * ᐃ);
			Ⲇ.bezierCurveTo(210 * ᐃ, 241.25 * ᐃ, 209 * ᐃ, 245.25 * ᐃ, ᐃ * 208, 246.25 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(-ⵠΔΔⲆᐃ * ᐃ, ᐃ * -ⲆᐃᐃΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 208, 246.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 202, 255.25 * ᐃ, ᐃ * 204, ᐃ * 258.25, 212 * ᐃ, 255.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 217, 250.25 * ᐃ, 217 * ᐃ, ᐃ * 248.25, 216 * ᐃ, 244.25 * ᐃ);
			Ⲇ.bezierCurveTo(210 * ᐃ, ᐃ * 241.25, ᐃ * 209, ᐃ * 245.25, ᐃ * 208, ᐃ * 246.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * ΔⲆΔⵠ, ᐃ * 3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 197, 258.25 * ᐃ);
			Ⲇ.bezierCurveTo(194 * ᐃ, ᐃ * 265.25, 186 * ᐃ, 270.25 * ᐃ, 185 * ᐃ, ᐃ * 262.25);
			Ⲇ.bezierCurveTo(ᐃ * 187, 255.25 * ᐃ, 191 * ᐃ, ᐃ * 252.25, ᐃ * 195, ᐃ * 253.25);
			Ⲇ.bezierCurveTo(198 * ᐃ, 256.25 * ᐃ, ᐃ * 197, 257.25 * ᐃ, 197 * ᐃ, ᐃ * 258.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃᐃ]);
			Ⲇ.globalAlpha = ⵠᐃⵠΔ;
			Ⲇ.translate(-3 * ᐃ, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(197 * ᐃ, ᐃ * 258.25);
			Ⲇ.bezierCurveTo(194 * ᐃ, ᐃ * 265.25, ᐃ * 186, ᐃ * 270.25, ᐃ * 185, 262.25 * ᐃ);
			Ⲇ.bezierCurveTo(187 * ᐃ, ᐃ * 255.25, ᐃ * 191, ᐃ * 252.25, 195 * ᐃ, 253.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 198, 256.25 * ᐃ, ᐃ * 197, 257.25 * ᐃ, 197 * ᐃ, ᐃ * 258.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * 3, ᐃ * ⲆΔⵠⵠⵠ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 24, ᐃ * 111.25);
			Ⲇ.bezierCurveTo(ᐃ * 32, 115.25 * ᐃ, 29 * ᐃ, ᐃ * 123.25, 22 * ᐃ, 133.25 * ᐃ);
			Ⲇ.bezierCurveTo(15 * ᐃ, ᐃ * 140.25, 7 * ᐃ, ᐃ * 137.25, ᐃ * ᐃⵠᐃΔΔⵠᐃ, ᐃ * 125.25);
			Ⲇ.bezierCurveTo(ᐃ * 12, ᐃ * 114.25, 20 * ᐃ, ᐃ * 110.25, 24 * ᐃ, ᐃ * 111.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(ᐃ * -ⲆⵠⲆᐃ, -Δⵠⵠᐃ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 24, 111.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 32, ᐃ * 115.25, 29 * ᐃ, 123.25 * ᐃ, ᐃ * 22, 133.25 * ᐃ);
			Ⲇ.bezierCurveTo(ⵠᐃᐃⲆᐃΔⲆ * ᐃ, 140.25 * ᐃ, ᐃ * 7, ᐃ * 137.25, 9 * ᐃ, 125.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * ⵠⵠᐃᐃᐃⲆⲆ, ᐃ * 114.25, ᐃ * 20, ᐃ * 110.25, 24 * ᐃ, ᐃ * 111.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * ⵠⵠΔⵠ, ᐃ * 3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 33, ᐃ * 137.25);
			Ⲇ.bezierCurveTo(ᐃ * 41, ᐃ * 142.25, 40 * ᐃ, 145.25 * ᐃ, ᐃ * 35, ᐃ * 147.25);
			Ⲇ.bezierCurveTo(22 * ᐃ, 147.25 * ᐃ, 18 * ᐃ, ᐃ * 144.25, ᐃ * 22, ᐃ * 138.25);
			Ⲇ.bezierCurveTo(ᐃ * 26, ᐃ * 133.25, 31 * ᐃ, 136.25 * ᐃ, ᐃ * 33, ᐃ * 137.25);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ]);
			Ⲇ.globalAlpha = ΔⵠΔ;
			Ⲇ.translate(ᐃ * -3, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(33 * ᐃ, ᐃ * 137.25);
			Ⲇ.bezierCurveTo(41 * ᐃ, ᐃ * 142.25, ᐃ * 40, 145.25 * ᐃ, 35 * ᐃ, 147.25 * ᐃ);
			Ⲇ.bezierCurveTo(22 * ᐃ, ᐃ * 147.25, ᐃ * ᐃⵠⲆⲆⵠⲆⵠ, 144.25 * ᐃ, 22 * ᐃ, 138.25 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 26, 133.25 * ᐃ, ᐃ * 31, 136.25 * ᐃ, ᐃ * 33, 137.25 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * 3, ᐃ * ᐃⲆᐃΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 36, ᐃ * 187.25);
			Ⲇ.bezierCurveTo(25 * ᐃ, ᐃ * 198.25, ᐃ * Δᐃⵠⵠⵠ, 193.25 * ᐃ, 23 * ᐃ, ᐃ * 187.25);
			Ⲇ.bezierCurveTo(26 * ᐃ, ᐃ * 178.25, 32 * ᐃ, ᐃ * 173.25, 38 * ᐃ, ᐃ * 175.25);
			Ⲇ.bezierCurveTo(ᐃ * 44, ᐃ * 180.25, ᐃ * 39, ᐃ * 186.25, 36 * ᐃ, 187.25 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ]);
			Ⲇ.globalAlpha = ⲆᐃΔ;
			Ⲇ.translate(-ΔⲆΔⲆ * ᐃ, -ⲆΔᐃⲆ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 36, 187.25 * ᐃ);
			Ⲇ.bezierCurveTo(25 * ᐃ, 198.25 * ᐃ, ΔΔⵠⲆⲆ * ᐃ, ᐃ * 193.25, 23 * ᐃ, 187.25 * ᐃ);
			Ⲇ.bezierCurveTo(26 * ᐃ, 178.25 * ᐃ, 32 * ᐃ, 173.25 * ᐃ, ᐃ * 38, ᐃ * 175.25);
			Ⲇ.bezierCurveTo(ᐃ * 44, ᐃ * 180.25, ᐃ * 39, ᐃ * 186.25, ᐃ * 36, 187.25 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1])
		} else if (1 == Ⲇᐃ) {
			ΔⲆ.width = ᐃ * 543;
			ΔⲆ.height = 470 * ᐃ;
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(3 * ᐃ, ⲆᐃᐃΔ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(377.1428527832031 * ᐃ, 56.87498474121094 * ᐃ);
			Ⲇ.bezierCurveTo(384.1428527832031 * ᐃ, 44.87498474121094 * ᐃ, 403.1428527832031 * ᐃ, 39.87498474121094 * ᐃ, ᐃ * 403.1428527832031, 51.87498474121094 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 402.1428527832031, ᐃ * 59.87498474121094, ᐃ * 396.1428527832031, ᐃ * 61.87498474121094, 389.1428527832031 * ᐃ, ᐃ * 64.87498474121094);
			Ⲇ.bezierCurveTo(376.1428527832031 * ᐃ, 67.87498474121094 * ᐃ, ᐃ * 375.1428527832031, ᐃ * 62.87498474121094, 377.1428527832031 * ᐃ, 56.87498474121094 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ⵠᐃⵠΔ;
			Ⲇ.translate(ᐃ * -ᐃⲆΔΔ, ᐃ * -ΔⲆΔⲆ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 377.1428527832031, ᐃ * 56.87498474121094);
			Ⲇ.bezierCurveTo(ᐃ * 384.1428527832031, 44.87498474121094 * ᐃ, 403.1428527832031 * ᐃ, ᐃ * 39.87498474121094, ᐃ * 403.1428527832031, ᐃ * 51.87498474121094);
			Ⲇ.bezierCurveTo(ᐃ * 402.1428527832031, 59.87498474121094 * ᐃ, 396.1428527832031 * ᐃ, 61.87498474121094 * ᐃ, ᐃ * 389.1428527832031, ᐃ * 64.87498474121094);
			Ⲇ.bezierCurveTo(376.1428527832031 * ᐃ, 67.87498474121094 * ᐃ, 375.1428527832031 * ᐃ, 62.87498474121094 * ᐃ, ᐃ * 377.1428527832031, ᐃ * 56.87498474121094);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ⲆⲆᐃⵠ * ᐃ, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(349.1428527832031 * ᐃ, ᐃ * 44.303558349609375);
			Ⲇ.bezierCurveTo(ᐃ * 358.1428527832031, ᐃ * 37.303558349609375, ᐃ * 370.1428527832031, ᐃ * 47.303558349609375, 364.1428527832031 * ᐃ, ᐃ * 51.303558349609375);
			Ⲇ.bezierCurveTo(ᐃ * 356.1428527832031, ᐃ * 55.303558349609375, ᐃ * 345.1428527832031, ᐃ * 48.303558349609375, ᐃ * 349.1428527832031, ᐃ * 45.303558349609375);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(ᐃ * -3, ᐃ * -ⵠⵠΔⵠ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(349.1428527832031 * ᐃ, 44.303558349609375 * ᐃ);
			Ⲇ.bezierCurveTo(358.1428527832031 * ᐃ, 37.303558349609375 * ᐃ, 370.1428527832031 * ᐃ, ᐃ * 47.303558349609375, 364.1428527832031 * ᐃ, ᐃ * 51.303558349609375);
			Ⲇ.bezierCurveTo(356.1428527832031 * ᐃ, 55.303558349609375 * ᐃ, ᐃ * 345.1428527832031, 48.303558349609375 * ᐃ, 349.1428527832031 * ᐃ, ᐃ * 45.303558349609375);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔᐃⲆⲆ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * ᐃΔⲆΔ, ΔΔᐃΔ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(480.1428527832031 * ᐃ, ᐃ * 152.30355834960938);
			Ⲇ.bezierCurveTo(ᐃ * 477.1428527832031, 145.30355834960938 * ᐃ, 480.1428527832031 * ᐃ, ᐃ * 140.30355834960938, ᐃ * 489.1428527832031, ᐃ * 135.30355834960938);
			Ⲇ.bezierCurveTo(497.1428527832031 * ᐃ, ᐃ * 133.30355834960938, ᐃ * 498.1428527832031, 140.30355834960938 * ᐃ, 491.1428527832031 * ᐃ, ᐃ * 147.30355834960938);
			Ⲇ.bezierCurveTo(ᐃ * 485.1428527832031, ᐃ * 155.30355834960938, 482.1428527832031 * ᐃ, 156.30355834960938 * ᐃ, 480.1428527832031 * ᐃ, 152.30355834960938 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(-ⲆⲆᐃⵠ * ᐃ, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 480.1428527832031, ᐃ * 152.30355834960938);
			Ⲇ.bezierCurveTo(ᐃ * 477.1428527832031, ᐃ * 145.30355834960938, 480.1428527832031 * ᐃ, 140.30355834960938 * ᐃ, 489.1428527832031 * ᐃ, ᐃ * 135.30355834960938);
			Ⲇ.bezierCurveTo(ᐃ * 497.1428527832031, ᐃ * 133.30355834960938, 498.1428527832031 * ᐃ, ᐃ * 140.30355834960938, 491.1428527832031 * ᐃ, 147.30355834960938 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 485.1428527832031, ᐃ * 155.30355834960938, 482.1428527832031 * ᐃ, ᐃ * 156.30355834960938, ᐃ * 480.1428527832031, 152.30355834960938 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[Ⲇⵠᐃ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * 3, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(211.14285278320312 * ᐃ, 27.303558349609375 * ᐃ);
			Ⲇ.bezierCurveTo(223.14285278320312 * ᐃ, ᐃ * 21.303558349609375, 234.14285278320312 * ᐃ, 34.303558349609375 * ᐃ, ᐃ * 232.14285278320312, ᐃ * 42.303558349609375);
			Ⲇ.bezierCurveTo(228.14285278320312 * ᐃ, ᐃ * 49.303558349609375, 223.14285278320312 * ᐃ, 45.303558349609375 * ᐃ, ᐃ * 213.14285278320312, 38.303558349609375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 205.14285278320312, ᐃ * 31.303558349609375, ᐃ * 208.14285278320312, ᐃ * 29.303558349609375, ᐃ * 211.14285278320312, 27.303558349609375 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(ᐃ * -3, ᐃ * -ΔΔᐃΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 211.14285278320312, 27.303558349609375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 223.14285278320312, 21.303558349609375 * ᐃ, 234.14285278320312 * ᐃ, ᐃ * 34.303558349609375, 232.14285278320312 * ᐃ, ᐃ * 42.303558349609375);
			Ⲇ.bezierCurveTo(228.14285278320312 * ᐃ, ᐃ * 49.303558349609375, ᐃ * 223.14285278320312, 45.303558349609375 * ᐃ, 213.14285278320312 * ᐃ, ᐃ * 38.303558349609375);
			Ⲇ.bezierCurveTo(205.14285278320312 * ᐃ, 31.303558349609375 * ᐃ, 208.14285278320312 * ᐃ, 29.303558349609375 * ᐃ, ᐃ * 211.14285278320312, ᐃ * 27.303558349609375);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔᐃⲆⲆ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * Δⵠⵠᐃ, ᐃ * ᐃⲆᐃΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(364.1428527832031 * ᐃ, 73.30355834960938 * ᐃ);
			Ⲇ.bezierCurveTo(354.1428527832031 * ᐃ, 72.30355834960938 * ᐃ, ᐃ * 356.1428527832031, 64.30355834960938 * ᐃ, ᐃ * 359.1428527832031, ᐃ * 59.303558349609375);
			Ⲇ.bezierCurveTo(365.1428527832031 * ᐃ, 55.303558349609375 * ᐃ, 366.1428527832031 * ᐃ, 61.303558349609375 * ᐃ, ᐃ * 366.1428527832031, ᐃ * 69.30355834960938);
			Ⲇ.bezierCurveTo(ᐃ * 365.1428527832031, ᐃ * 73.30355834960938, 365.1428527832031 * ᐃ, ᐃ * 73.30355834960938, ᐃ * 364.1428527832031, 73.30355834960938 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ΔⲆᐃᐃ;
			Ⲇ.translate(ᐃ * -3, ᐃ * -ΔⲆⵠᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(364.1428527832031 * ᐃ, ᐃ * 73.30355834960938);
			Ⲇ.bezierCurveTo(ᐃ * 354.1428527832031, ᐃ * 72.30355834960938, ᐃ * 356.1428527832031, 64.30355834960938 * ᐃ, ᐃ * 359.1428527832031, 59.303558349609375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 365.1428527832031, 55.303558349609375 * ᐃ, ᐃ * 366.1428527832031, 61.303558349609375 * ᐃ, ᐃ * 366.1428527832031, ᐃ * 69.30355834960938);
			Ⲇ.bezierCurveTo(ᐃ * 365.1428527832031, 73.30355834960938 * ᐃ, ᐃ * 365.1428527832031, 73.30355834960938 * ᐃ, ᐃ * 364.1428527832031, ᐃ * 73.30355834960938);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠᐃⵠΔ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(3 * ᐃ, ᐃ * ⲆΔᐃⲆ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(182.14285278320312 * ᐃ, ᐃ * 57.303558349609375);
			Ⲇ.bezierCurveTo(ᐃ * 173.14285278320312, ᐃ * 52.303558349609375, 177.14285278320312 * ᐃ, ᐃ * 39.303558349609375, 198.14285278320312 * ᐃ, 36.303558349609375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 209.14285278320312, ᐃ * 37.303558349609375, 206.14285278320312 * ᐃ, 49.303558349609375 * ᐃ, 193.14285278320312 * ᐃ, 53.303558349609375 * ᐃ);
			Ⲇ.bezierCurveTo(187.14285278320312 * ᐃ, ᐃ * 56.303558349609375, ᐃ * 185.14285278320312, 57.303558349609375 * ᐃ, 182.14285278320312 * ᐃ, 57.303558349609375 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ⵠΔᐃ;
			Ⲇ.translate(-3 * ᐃ, ᐃ * -ΔⲆⵠᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 182.14285278320312, 57.303558349609375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 173.14285278320312, 52.303558349609375 * ᐃ, 177.14285278320312 * ᐃ, ᐃ * 39.303558349609375, ᐃ * 198.14285278320312, 36.303558349609375 * ᐃ);
			Ⲇ.bezierCurveTo(209.14285278320312 * ᐃ, 37.303558349609375 * ᐃ, ᐃ * 206.14285278320312, 49.303558349609375 * ᐃ, ᐃ * 193.14285278320312, 53.303558349609375 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 187.14285278320312, 56.303558349609375 * ᐃ, 185.14285278320312 * ᐃ, 57.303558349609375 * ᐃ, ᐃ * 182.14285278320312, ᐃ * 57.303558349609375);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * Δⵠⵠᐃ, ᐃ * ⲆⵠⲆᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 489.1428527832031, ᐃ * 267.0178527832031);
			Ⲇ.bezierCurveTo(500.1428527832031 * ᐃ, ᐃ * 257.0178527832031, 511.1428527832031 * ᐃ, ᐃ * 269.0178527832031, ᐃ * 514.1428527832031, 275.0178527832031 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 519.1428527832031, ᐃ * 285.0178527832031, 509.1428527832031 * ᐃ, 288.0178527832031 * ᐃ, ᐃ * 501.1428527832031, ᐃ * 282.0178527832031);
			Ⲇ.bezierCurveTo(ᐃ * 488.1428527832031, ᐃ * 277.0178527832031, ᐃ * 485.1428527832031, 271.0178527832031 * ᐃ, ᐃ * 489.1428527832031, ᐃ * 267.0178527832031);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆⲆ]);
			Ⲇ.globalAlpha = ⵠⲆΔⲆ;
			Ⲇ.translate(ᐃ * -ⲆΔᐃⲆ, ᐃ * -ᐃⵠΔⲆ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 489.1428527832031, 267.0178527832031 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 500.1428527832031, 257.0178527832031 * ᐃ, 511.1428527832031 * ᐃ, 269.0178527832031 * ᐃ, ᐃ * 514.1428527832031, ᐃ * 275.0178527832031);
			Ⲇ.bezierCurveTo(519.1428527832031 * ᐃ, 285.0178527832031 * ᐃ, 509.1428527832031 * ᐃ, 288.0178527832031 * ᐃ, ᐃ * 501.1428527832031, 282.0178527832031 * ᐃ);
			Ⲇ.bezierCurveTo(488.1428527832031 * ᐃ, 277.0178527832031 * ᐃ, ᐃ * 485.1428527832031, 271.0178527832031 * ᐃ, 489.1428527832031 * ᐃ, ᐃ * 267.0178527832031);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔΔⵠΔ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃΔⵠⲆ * ᐃ, ᐃ * 3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(480.1428527832031 * ᐃ, ᐃ * 122.73213958740234);
			Ⲇ.bezierCurveTo(ᐃ * 469.1428527832031, 119.73213958740234 * ᐃ, ᐃ * 473.1428527832031, 108.73213958740234 * ᐃ, 476.1428527832031 * ᐃ, ᐃ * 107.73213958740234);
			Ⲇ.bezierCurveTo(ᐃ * 483.1428527832031, 102.73213958740234 * ᐃ, 485.1428527832031 * ᐃ, 118.73213958740234 * ᐃ, ᐃ * 480.1428527832031, 122.73213958740234 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ]);
			Ⲇ.globalAlpha = ΔᐃΔⲆ;
			Ⲇ.translate(ᐃ * -3, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(480.1428527832031 * ᐃ, ᐃ * 122.73213958740234);
			Ⲇ.bezierCurveTo(469.1428527832031 * ᐃ, ᐃ * 119.73213958740234, ᐃ * 473.1428527832031, 108.73213958740234 * ᐃ, ᐃ * 476.1428527832031, ᐃ * 107.73213958740234);
			Ⲇ.bezierCurveTo(ᐃ * 483.1428527832031, 102.73213958740234 * ᐃ, 485.1428527832031 * ᐃ, ᐃ * 118.73213958740234, 480.1428527832031 * ᐃ, ᐃ * 122.73213958740234);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[Δⵠᐃ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * ᐃⲆᐃΔ, ᐃ * 3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(470.1428527832031 * ᐃ, 286.3035697937012 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 472.1428527832031, ᐃ * 277.3035697937012, ᐃ * 480.1428527832031, 277.3035697937012 * ᐃ, 489.1428527832031 * ᐃ, ᐃ * 286.3035697937012);
			Ⲇ.bezierCurveTo(490.1428527832031 * ᐃ, 292.3035697937012 * ᐃ, 482.1428527832031 * ᐃ, 294.3035697937012 * ᐃ, 470.1428527832031 * ᐃ, 286.3035697937012 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = Δᐃⵠⵠ;
			Ⲇ.translate(ᐃ * -3, ᐃ * -ΔⲆΔⵠ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 470.1428527832031, ᐃ * 286.3035697937012);
			Ⲇ.bezierCurveTo(472.1428527832031 * ᐃ, ᐃ * 277.3035697937012, 480.1428527832031 * ᐃ, 277.3035697937012 * ᐃ, 489.1428527832031 * ᐃ, ᐃ * 286.3035697937012);
			Ⲇ.bezierCurveTo(490.1428527832031 * ᐃ, ᐃ * 292.3035697937012, ᐃ * 482.1428527832031, 294.3035697937012 * ᐃ, ᐃ * 470.1428527832031, ᐃ * 286.3035697937012);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔᐃΔⲆ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃⲆᐃΔ * ᐃ, ΔⲆΔⲆ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 518.1428527832031, 265.0178565979004 * ᐃ);
			Ⲇ.bezierCurveTo(524.1428527832031 * ᐃ, ᐃ * 262.0178565979004, 521.1428527832031 * ᐃ, ᐃ * 247.0178565979004, ᐃ * 514.1428527832031, ᐃ * 250.0178565979004);
			Ⲇ.bezierCurveTo(510.1428527832031 * ᐃ, 252.0178565979004 * ᐃ, 509.1428527832031 * ᐃ, ᐃ * 266.0178565979004, 518.1428527832031 * ᐃ, ᐃ * 266.0178565979004);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(-Δⵠⵠᐃ * ᐃ, ᐃ * -ΔΔᐃΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(518.1428527832031 * ᐃ, ᐃ * 265.0178565979004);
			Ⲇ.bezierCurveTo(ᐃ * 524.1428527832031, 262.0178565979004 * ᐃ, ᐃ * 521.1428527832031, ᐃ * 247.0178565979004, 514.1428527832031 * ᐃ, 250.0178565979004 * ᐃ);
			Ⲇ.bezierCurveTo(510.1428527832031 * ᐃ, ᐃ * 252.0178565979004, 509.1428527832031 * ᐃ, 266.0178565979004 * ᐃ, ᐃ * 518.1428527832031, 266.0178565979004 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(3 * ᐃ, ᐃ * 3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 179.14285278320312, 399.5892858505249 * ᐃ);
			Ⲇ.bezierCurveTo(174.14285278320312 * ᐃ, 385.5892858505249 * ᐃ, ᐃ * 186.14285278320312, 379.5892858505249 * ᐃ, ᐃ * 198.14285278320312, ᐃ * 379.5892858505249);
			Ⲇ.bezierCurveTo(208.14285278320312 * ᐃ, ᐃ * 379.5892858505249, ᐃ * 206.14285278320312, 391.5892858505249 * ᐃ, 194.14285278320312 * ᐃ, ᐃ * 396.5892858505249);
			Ⲇ.bezierCurveTo(ᐃ * 184.14285278320312, 401.5892858505249 * ᐃ, 182.14285278320312 * ᐃ, ᐃ * 402.5892858505249, 179.14285278320312 * ᐃ, 399.5892858505249 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(-3 * ᐃ, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(179.14285278320312 * ᐃ, ᐃ * 399.5892858505249);
			Ⲇ.bezierCurveTo(174.14285278320312 * ᐃ, 385.5892858505249 * ᐃ, 186.14285278320312 * ᐃ, 379.5892858505249 * ᐃ, ᐃ * 198.14285278320312, 379.5892858505249 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 208.14285278320312, ᐃ * 379.5892858505249, 206.14285278320312 * ᐃ, 391.5892858505249 * ᐃ, ᐃ * 194.14285278320312, 396.5892858505249 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 184.14285278320312, ᐃ * 401.5892858505249, ᐃ * 182.14285278320312, 402.5892858505249 * ᐃ, 179.14285278320312 * ᐃ, ᐃ * 399.5892858505249);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * ᐃⵠΔⲆ, ᐃⵠΔⵠ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 163.14285278320312, ᐃ * 407.875);
			Ⲇ.bezierCurveTo(152.14285278320312 * ᐃ, 405.875 * ᐃ, 156.14285278320312 * ᐃ, ᐃ * 391.875, ᐃ * 163.14285278320312, ᐃ * 385.875);
			Ⲇ.bezierCurveTo(ᐃ * 170.14285278320312, 381.875 * ᐃ, 173.14285278320312 * ᐃ, ᐃ * 385.875, ᐃ * 170.14285278320312, ᐃ * 398.875);
			Ⲇ.bezierCurveTo(ᐃ * 169.14285278320312, 403.875 * ᐃ, ᐃ * 165.14285278320312, 408.875 * ᐃ, 164.14285278320312 * ᐃ, ᐃ * 407.875);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃ]);
			Ⲇ.globalAlpha = ⲆΔΔΔ;
			Ⲇ.translate(ᐃ * -3, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 163.14285278320312, 407.875 * ᐃ);
			Ⲇ.bezierCurveTo(152.14285278320312 * ᐃ, 405.875 * ᐃ, ᐃ * 156.14285278320312, ᐃ * 391.875, 163.14285278320312 * ᐃ, 385.875 * ᐃ);
			Ⲇ.bezierCurveTo(170.14285278320312 * ᐃ, ᐃ * 381.875, 173.14285278320312 * ᐃ, ᐃ * 385.875, 170.14285278320312 * ᐃ, ᐃ * 398.875);
			Ⲇ.bezierCurveTo(ᐃ * 169.14285278320312, ᐃ * 403.875, ᐃ * 165.14285278320312, 408.875 * ᐃ, ᐃ * 164.14285278320312, 407.875 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(3 * ᐃ, ᐃ * ᐃΔⵠⲆ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(78.14285278320312 * ᐃ, ᐃ * 71.73211669921875);
			Ⲇ.bezierCurveTo(ᐃ * 82.14285278320312, 62.73211669921875 * ᐃ, ᐃ * 88.14285278320312, 69.73211669921875 * ᐃ, ᐃ * 91.14285278320312, ᐃ * 79.73211669921875);
			Ⲇ.bezierCurveTo(ᐃ * 90.14285278320312, 86.73211669921875 * ᐃ, 79.14285278320312 * ᐃ, 83.73211669921875 * ᐃ, ᐃ * 78.14285278320312, ᐃ * 71.73211669921875);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ]);
			Ⲇ.globalAlpha = ΔⲆᐃⲆ;
			Ⲇ.translate(-3 * ᐃ, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 78.14285278320312, ᐃ * 71.73211669921875);
			Ⲇ.bezierCurveTo(82.14285278320312 * ᐃ, ᐃ * 62.73211669921875, ᐃ * 88.14285278320312, ᐃ * 69.73211669921875, ᐃ * 91.14285278320312, 79.73211669921875 * ᐃ);
			Ⲇ.bezierCurveTo(90.14285278320312 * ᐃ, 86.73211669921875 * ᐃ, 79.14285278320312 * ᐃ, 83.73211669921875 * ᐃ, ᐃ * 78.14285278320312, ᐃ * 71.73211669921875);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⲆΔΔΔ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(3 * ᐃ, ᐃ * ΔⲆⵠᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 385.1428527832031, 405.017858505249 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 392.1428527832031, ᐃ * 397.017858505249, ᐃ * 406.1428527832031, 401.017858505249 * ᐃ, 409.1428527832031 * ᐃ, 418.017858505249 * ᐃ);
			Ⲇ.bezierCurveTo(410.1428527832031 * ᐃ, 426.017858505249 * ᐃ, 401.1428527832031 * ᐃ, 425.017858505249 * ᐃ, 388.1428527832031 * ᐃ, ᐃ * 418.017858505249);
			Ⲇ.bezierCurveTo(ᐃ * 381.1428527832031, 411.017858505249 * ᐃ, 383.1428527832031 * ᐃ, ᐃ * 407.017858505249, 385.1428527832031 * ᐃ, ᐃ * 405.017858505249);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ΔᐃΔⲆ;
			Ⲇ.translate(-3 * ᐃ, ᐃ * -ᐃⲆᐃΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(385.1428527832031 * ᐃ, ᐃ * 405.017858505249);
			Ⲇ.bezierCurveTo(392.1428527832031 * ᐃ, ᐃ * 397.017858505249, 406.1428527832031 * ᐃ, ᐃ * 401.017858505249, ᐃ * 409.1428527832031, ᐃ * 418.017858505249);
			Ⲇ.bezierCurveTo(ᐃ * 410.1428527832031, 426.017858505249 * ᐃ, 401.1428527832031 * ᐃ, 425.017858505249 * ᐃ, ᐃ * 388.1428527832031, 418.017858505249 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 381.1428527832031, 411.017858505249 * ᐃ, ᐃ * 383.1428527832031, 407.017858505249 * ᐃ, ᐃ * 385.1428527832031, 405.017858505249 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * ᐃⵠΔⵠ, ᐃⲆΔΔ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 414.1428527832031, ᐃ * 361.4464282989502);
			Ⲇ.bezierCurveTo(ᐃ * 418.1428527832031, ᐃ * 352.4464282989502, 426.1428527832031 * ᐃ, ᐃ * 353.4464282989502, 437.1428527832031 * ᐃ, 362.4464282989502 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 441.1428527832031, 366.4464282989502 * ᐃ, ᐃ * 439.1428527832031, ᐃ * 373.4464282989502, 428.1428527832031 * ᐃ, 372.4464282989502 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 416.1428527832031, 370.4464282989502 * ᐃ, ᐃ * 412.1428527832031, 367.4464282989502 * ᐃ, ᐃ * 415.1428527832031, 361.4464282989502 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⲆ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(-3 * ᐃ, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 414.1428527832031, ᐃ * 361.4464282989502);
			Ⲇ.bezierCurveTo(418.1428527832031 * ᐃ, 352.4464282989502 * ᐃ, 426.1428527832031 * ᐃ, 353.4464282989502 * ᐃ, ᐃ * 437.1428527832031, 362.4464282989502 * ᐃ);
			Ⲇ.bezierCurveTo(441.1428527832031 * ᐃ, ᐃ * 366.4464282989502, ᐃ * 439.1428527832031, 373.4464282989502 * ᐃ, ᐃ * 428.1428527832031, 372.4464282989502 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 416.1428527832031, 370.4464282989502 * ᐃ, 412.1428527832031 * ᐃ, ᐃ * 367.4464282989502, 415.1428527832031 * ᐃ, ᐃ * 361.4464282989502);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ⵠΔΔⲆᐃ * ᐃ, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 453.1428527832031, ᐃ * 356.875);
			Ⲇ.bezierCurveTo(458.1428527832031 * ᐃ, ᐃ * 363.875, ᐃ * 447.1428527832031, ᐃ * 373.875, ᐃ * 444.1428527832031, ᐃ * 369.875);
			Ⲇ.bezierCurveTo(ᐃ * 441.1428527832031, ᐃ * 361.875, 448.1428527832031 * ᐃ, 352.875 * ᐃ, ᐃ * 453.1428527832031, 356.875 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ΔⵠⲆⲆ;
			Ⲇ.translate(-3 * ᐃ, -ⲆΔᐃⲆ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(453.1428527832031 * ᐃ, 356.875 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 458.1428527832031, 363.875 * ᐃ, ᐃ * 447.1428527832031, ᐃ * 373.875, 444.1428527832031 * ᐃ, 369.875 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 441.1428527832031, 361.875 * ᐃ, 448.1428527832031 * ᐃ, 352.875 * ᐃ, 453.1428527832031 * ᐃ, 356.875 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃⲆ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * 3, ᐃᐃᐃΔᐃ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 40.142852783203125, 225.1607151031494 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 52.142852783203125, 224.1607151031494 * ᐃ, ᐃ * 44.142852783203125, ᐃ * 251.1607151031494, 36.142852783203125 * ᐃ, 248.1607151031494 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 25.142852783203125, ᐃ * 245.1607151031494, ᐃ * 34.142852783203125, ᐃ * 225.1607151031494, 41.142852783203125 * ᐃ, 225.1607151031494 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(ᐃ * -ΔⲆⵠᐃ, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 40.142852783203125, ᐃ * 225.1607151031494);
			Ⲇ.bezierCurveTo(ᐃ * 52.142852783203125, 224.1607151031494 * ᐃ, 44.142852783203125 * ᐃ, ᐃ * 251.1607151031494, 36.142852783203125 * ᐃ, 248.1607151031494 * ᐃ);
			Ⲇ.bezierCurveTo(25.142852783203125 * ᐃ, ᐃ * 245.1607151031494, 34.142852783203125 * ᐃ, ᐃ * 225.1607151031494, ᐃ * 41.142852783203125, 225.1607151031494 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃᐃ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃⲆΔΔ * ᐃ, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(114.14285278320312 * ᐃ, 52.4464111328125 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 123.14285278320312, 57.4464111328125 * ᐃ, ᐃ * 111.14285278320312, 71.4464111328125 * ᐃ, ᐃ * 106.14285278320312, 65.4464111328125 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 101.14285278320312, 58.4464111328125 * ᐃ, 111.14285278320312 * ᐃ, 51.4464111328125 * ᐃ, ᐃ * 114.14285278320312, 52.4464111328125 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠ]);
			Ⲇ.globalAlpha = Δᐃⵠⵠ;
			Ⲇ.translate(ᐃ * -ᐃΔⵠⲆ, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(114.14285278320312 * ᐃ, ᐃ * 52.4464111328125);
			Ⲇ.bezierCurveTo(123.14285278320312 * ᐃ, 57.4464111328125 * ᐃ, 111.14285278320312 * ᐃ, 71.4464111328125 * ᐃ, ᐃ * 106.14285278320312, ᐃ * 65.4464111328125);
			Ⲇ.bezierCurveTo(101.14285278320312 * ᐃ, ᐃ * 58.4464111328125, ᐃ * 111.14285278320312, 51.4464111328125 * ᐃ, 114.14285278320312 * ᐃ, ᐃ * 52.4464111328125);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠᐃⵠΔ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃΔⲆΔ * ᐃ, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(35.142852783203125 * ᐃ, ᐃ * 256.3035707473755);
			Ⲇ.bezierCurveTo(41.142852783203125 * ᐃ, 263.3035707473755 * ᐃ, ᐃ * 32.142852783203125, 270.3035707473755 * ᐃ, 27.142852783203125 * ᐃ, ᐃ * 270.3035707473755);
			Ⲇ.bezierCurveTo(ᐃ * 20.142852783203125, ᐃ * 267.3035707473755, ᐃ * 29.142852783203125, 252.3035707473755 * ᐃ, ᐃ * 35.142852783203125, ᐃ * 255.3035707473755);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆ]);
			Ⲇ.globalAlpha = Ⲇⵠᐃ;
			Ⲇ.translate(ᐃ * -ⲆⲆᐃⵠ, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(35.142852783203125 * ᐃ, 256.3035707473755 * ᐃ);
			Ⲇ.bezierCurveTo(41.142852783203125 * ᐃ, 263.3035707473755 * ᐃ, ᐃ * 32.142852783203125, 270.3035707473755 * ᐃ, 27.142852783203125 * ᐃ, 270.3035707473755 * ᐃ);
			Ⲇ.bezierCurveTo(20.142852783203125 * ᐃ, 267.3035707473755 * ᐃ, 29.142852783203125 * ᐃ, ᐃ * 252.3035707473755, ᐃ * 35.142852783203125, ᐃ * 255.3035707473755);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(3 * ᐃ, ⲆⵠⲆᐃ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(48.142852783203125 * ᐃ, 266.4464282989502 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 59.142852783203125, ᐃ * 273.4464282989502, ᐃ * 41.142852783203125, ᐃ * 290.4464282989502, 33.142852783203125 * ᐃ, ᐃ * 285.4464282989502);
			Ⲇ.bezierCurveTo(ᐃ * 25.142852783203125, ᐃ * 277.4464282989502, ᐃ * 44.142852783203125, ᐃ * 261.4464282989502, ᐃ * 48.142852783203125, 266.4464282989502 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(-ⲆⲆᐃⵠ * ᐃ, -ᐃΔⵠⲆ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(48.142852783203125 * ᐃ, 266.4464282989502 * ᐃ);
			Ⲇ.bezierCurveTo(59.142852783203125 * ᐃ, ᐃ * 273.4464282989502, 41.142852783203125 * ᐃ, ᐃ * 290.4464282989502, ᐃ * 33.142852783203125, 285.4464282989502 * ᐃ);
			Ⲇ.bezierCurveTo(25.142852783203125 * ᐃ, 277.4464282989502 * ᐃ, ᐃ * 44.142852783203125, 261.4464282989502 * ᐃ, 48.142852783203125 * ᐃ, ᐃ * 266.4464282989502);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃᐃ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * ᐃΔⲆΔ, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 138.14285278320312, 385.5892868041992 * ᐃ);
			Ⲇ.bezierCurveTo(150.14285278320312 * ᐃ, 387.5892868041992 * ᐃ, ᐃ * 140.14285278320312, ᐃ * 405.5892868041992, 131.14285278320312 * ᐃ, 402.5892868041992 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 125.14285278320312, ᐃ * 397.5892868041992, 134.14285278320312 * ᐃ, ᐃ * 385.5892868041992, 138.14285278320312 * ᐃ, ᐃ * 385.5892868041992);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠ]);
			Ⲇ.globalAlpha = ΔⲆᐃⲆ;
			Ⲇ.translate(ᐃ * -3, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 138.14285278320312, 385.5892868041992 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 150.14285278320312, ᐃ * 387.5892868041992, ᐃ * 140.14285278320312, 405.5892868041992 * ᐃ, 131.14285278320312 * ᐃ, 402.5892868041992 * ᐃ);
			Ⲇ.bezierCurveTo(125.14285278320312 * ᐃ, 397.5892868041992 * ᐃ, 134.14285278320312 * ᐃ, ᐃ * 385.5892868041992, ᐃ * 138.14285278320312, ᐃ * 385.5892868041992);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * 3, ᐃΔⲆΔ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(218.14285278320312 * ᐃ, 394.16071701049805 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 224.14285278320312, 398.16071701049805 * ᐃ, 222.14285278320312 * ᐃ, ᐃ * 403.16071701049805, 214.14285278320312 * ᐃ, ᐃ * 407.16071701049805);
			Ⲇ.bezierCurveTo(ᐃ * 204.14285278320312, 407.16071701049805 * ᐃ, 213.14285278320312 * ᐃ, 392.16071701049805 * ᐃ, ᐃ * 218.14285278320312, 394.16071701049805 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(-ⲆᐃᐃΔ * ᐃ, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 218.14285278320312, 394.16071701049805 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 224.14285278320312, ᐃ * 398.16071701049805, ᐃ * 222.14285278320312, ᐃ * 403.16071701049805, 214.14285278320312 * ᐃ, ᐃ * 407.16071701049805);
			Ⲇ.bezierCurveTo(204.14285278320312 * ᐃ, ᐃ * 407.16071701049805, 213.14285278320312 * ᐃ, 392.16071701049805 * ᐃ, ᐃ * 218.14285278320312, ᐃ * 394.16071701049805);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.translate(50 * ᐃ, ⲆⵠⲆⲆⵠ * ᐃ)
		} else {
			ΔⲆ.width = ᐃ * 543;
			ΔⲆ.height = ᐃ * 470;
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(3 * ᐃ, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(97.14285278320312 * ᐃ, ᐃ * 113.875);
			Ⲇ.bezierCurveTo(104.14285278320312 * ᐃ, ᐃ * 106.875, 113.14285278320312 * ᐃ, 109.875 * ᐃ, 118.14285278320312 * ᐃ, ᐃ * 118.875);
			Ⲇ.bezierCurveTo(ᐃ * 119.14285278320312, 121.875 * ᐃ, ᐃ * 118.14285278320312, 129.875 * ᐃ, 103.14285278320312 * ᐃ, ᐃ * 124.875);
			Ⲇ.bezierCurveTo(ᐃ * 94.14285278320312, 120.875 * ᐃ, ᐃ * 95.14285278320312, 117.875 * ᐃ, ᐃ * 97.14285278320312, 113.875 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(-3 * ᐃ, -Δⵠⵠᐃ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(97.14285278320312 * ᐃ, ᐃ * 113.875);
			Ⲇ.bezierCurveTo(ᐃ * 104.14285278320312, ᐃ * 106.875, 113.14285278320312 * ᐃ, ᐃ * 109.875, 118.14285278320312 * ᐃ, 118.875 * ᐃ);
			Ⲇ.bezierCurveTo(119.14285278320312 * ᐃ, ᐃ * 121.875, ᐃ * 118.14285278320312, ᐃ * 129.875, 103.14285278320312 * ᐃ, 124.875 * ᐃ);
			Ⲇ.bezierCurveTo(94.14285278320312 * ᐃ, ᐃ * 120.875, ᐃ * 95.14285278320312, 117.875 * ᐃ, ᐃ * 97.14285278320312, ᐃ * 113.875);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * 3, ᐃ * ⵠⵠΔⵠ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(88.14285278320312 * ᐃ, 138.87498474121094 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 90.14285278320312, ᐃ * 128.87498474121094, 104.14285278320312 * ᐃ, 130.87498474121094 * ᐃ, ᐃ * 107.14285278320312, ᐃ * 138.87498474121094);
			Ⲇ.bezierCurveTo(ᐃ * 109.14285278320312, 147.87498474121094 * ᐃ, ᐃ * 89.14285278320312, 145.87498474121094 * ᐃ, 88.14285278320312 * ᐃ, ᐃ * 138.87498474121094);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ⵠⲆΔⲆ;
			Ⲇ.translate(-3 * ᐃ, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 88.14285278320312, 138.87498474121094 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 90.14285278320312, 128.87498474121094 * ᐃ, 104.14285278320312 * ᐃ, 130.87498474121094 * ᐃ, ᐃ * 107.14285278320312, 138.87498474121094 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 109.14285278320312, 147.87498474121094 * ᐃ, 89.14285278320312 * ᐃ, ᐃ * 145.87498474121094, ᐃ * 88.14285278320312, ᐃ * 138.87498474121094);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃⲆ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(3 * ᐃ, ᐃ * 3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 194.14285278320312, ᐃ * 44.87498474121094);
			Ⲇ.bezierCurveTo(202.14285278320312 * ᐃ, 49.87498474121094 * ᐃ, ᐃ * 195.14285278320312, ᐃ * 62.87498474121094, ᐃ * 187.14285278320312, ᐃ * 60.87498474121094);
			Ⲇ.bezierCurveTo(180.14285278320312 * ᐃ, ᐃ * 57.87498474121094, ᐃ * 190.14285278320312, 40.87498474121094 * ᐃ, 194.14285278320312 * ᐃ, ᐃ * 44.87498474121094);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠ]);
			Ⲇ.globalAlpha = Ⲇⵠᐃ;
			Ⲇ.translate(-ⵠΔΔⲆᐃ * ᐃ, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(194.14285278320312 * ᐃ, 44.87498474121094 * ᐃ);
			Ⲇ.bezierCurveTo(202.14285278320312 * ᐃ, ᐃ * 49.87498474121094, ᐃ * 195.14285278320312, 62.87498474121094 * ᐃ, 187.14285278320312 * ᐃ, 60.87498474121094 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 180.14285278320312, ᐃ * 57.87498474121094, 190.14285278320312 * ᐃ, ᐃ * 40.87498474121094, ᐃ * 194.14285278320312, 44.87498474121094 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔΔΔᐃ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(3 * ᐃ, ᐃ * ΔⲆΔⵠ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 22.142852783203125, 218.44642639160156 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 31.142852783203125, ᐃ * 205.44642639160156, 49.142852783203125 * ᐃ, ᐃ * 221.44642639160156, 49.142852783203125 * ᐃ, 230.44642639160156 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 44.142852783203125, ᐃ * 243.44642639160156, 14.142852783203125 * ᐃ, ᐃ * 228.44642639160156, 22.142852783203125 * ᐃ, 218.44642639160156 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ]);
			Ⲇ.globalAlpha = ⲆΔΔΔ;
			Ⲇ.translate(ᐃ * -3, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 22.142852783203125, 218.44642639160156 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 31.142852783203125, ᐃ * 205.44642639160156, ᐃ * 49.142852783203125, ᐃ * 221.44642639160156, 49.142852783203125 * ᐃ, ᐃ * 230.44642639160156);
			Ⲇ.bezierCurveTo(44.142852783203125 * ᐃ, 243.44642639160156 * ᐃ, 14.142852783203125 * ᐃ, ᐃ * 228.44642639160156, ᐃ * 22.142852783203125, 218.44642639160156 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃⵠΔⲆ * ᐃ, ᐃ * ΔΔᐃΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 41.142852783203125, ᐃ * 249.875);
			Ⲇ.bezierCurveTo(ᐃ * 33.142852783203125, 255.875 * ᐃ, ᐃ * 30.142852783203125, ᐃ * 265.875, 40.142852783203125 * ᐃ, ᐃ * 266.875);
			Ⲇ.bezierCurveTo(49.142852783203125 * ᐃ, 261.875 * ᐃ, ᐃ * 53.142852783203125, 244.875 * ᐃ, 41.142852783203125 * ᐃ, 249.875 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃⵠ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(-3 * ᐃ, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(41.142852783203125 * ᐃ, ᐃ * 249.875);
			Ⲇ.bezierCurveTo(ᐃ * 33.142852783203125, 255.875 * ᐃ, 30.142852783203125 * ᐃ, 265.875 * ᐃ, 40.142852783203125 * ᐃ, ᐃ * 266.875);
			Ⲇ.bezierCurveTo(49.142852783203125 * ᐃ, 261.875 * ᐃ, 53.142852783203125 * ᐃ, 244.875 * ᐃ, ᐃ * 41.142852783203125, 249.875 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔᐃⲆⲆ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(Δⵠⵠᐃ * ᐃ, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 105.14285278320312, 369.875 * ᐃ);
			Ⲇ.bezierCurveTo(92.14285278320312 * ᐃ, ᐃ * 361.875, 77.14285278320312 * ᐃ, ᐃ * 375.875, ᐃ * 79.14285278320312, ᐃ * 384.875);
			Ⲇ.bezierCurveTo(ᐃ * 84.14285278320312, 399.875 * ᐃ, ᐃ * 114.14285278320312, 375.875 * ᐃ, 104.14285278320312 * ᐃ, ᐃ * 369.875);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = Δᐃⵠⵠ;
			Ⲇ.translate(ᐃ * -ᐃⲆΔΔ, -Δⵠⵠᐃ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(105.14285278320312 * ᐃ, ᐃ * 369.875);
			Ⲇ.bezierCurveTo(ᐃ * 92.14285278320312, 361.875 * ᐃ, ᐃ * 77.14285278320312, ᐃ * 375.875, ᐃ * 79.14285278320312, ᐃ * 384.875);
			Ⲇ.bezierCurveTo(ᐃ * 84.14285278320312, ᐃ * 399.875, ᐃ * 114.14285278320312, ᐃ * 375.875, 104.14285278320312 * ᐃ, ᐃ * 369.875);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(3 * ᐃ, ᐃ * 3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 233.14285278320312, ᐃ * 43.4464111328125);
			Ⲇ.bezierCurveTo(238.14285278320312 * ᐃ, 47.4464111328125 * ᐃ, ᐃ * 222.14285278320312, ᐃ * 73.4464111328125, ᐃ * 214.14285278320312, 58.4464111328125 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 211.14285278320312, 48.4464111328125 * ᐃ, 230.14285278320312 * ᐃ, ᐃ * 35.4464111328125, ᐃ * 233.14285278320312, ᐃ * 42.4464111328125);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(-ⵠⵠΔⵠ * ᐃ, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 233.14285278320312, ᐃ * 43.4464111328125);
			Ⲇ.bezierCurveTo(238.14285278320312 * ᐃ, 47.4464111328125 * ᐃ, 222.14285278320312 * ᐃ, 73.4464111328125 * ᐃ, 214.14285278320312 * ᐃ, 58.4464111328125 * ᐃ);
			Ⲇ.bezierCurveTo(211.14285278320312 * ᐃ, ᐃ * 48.4464111328125, 230.14285278320312 * ᐃ, 35.4464111328125 * ᐃ, ᐃ * 233.14285278320312, 42.4464111328125 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆⲆ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * ⲆΔᐃⲆ, ᐃ * ᐃΔⵠⲆ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 371.1428527832031, 34.73213195800781 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 378.1428527832031, ᐃ * 20.732131958007812, ᐃ * 395.1428527832031, 32.73213195800781 * ᐃ, 396.1428527832031 * ᐃ, ᐃ * 42.73213195800781);
			Ⲇ.bezierCurveTo(ᐃ * 399.1428527832031, 59.73213195800781 * ᐃ, 369.1428527832031 * ᐃ, 43.73213195800781 * ᐃ, ᐃ * 372.1428527832031, ᐃ * 34.73213195800781);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(ᐃ * -3, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(371.1428527832031 * ᐃ, 34.73213195800781 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 378.1428527832031, ᐃ * 20.732131958007812, 395.1428527832031 * ᐃ, ᐃ * 32.73213195800781, 396.1428527832031 * ᐃ, ᐃ * 42.73213195800781);
			Ⲇ.bezierCurveTo(399.1428527832031 * ᐃ, 59.73213195800781 * ᐃ, 369.1428527832031 * ᐃ, ᐃ * 43.73213195800781, ᐃ * 372.1428527832031, 34.73213195800781 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ⵠⵠΔⵠ * ᐃ, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(117.14285278320312 * ᐃ, ᐃ * 392.5892868041992);
			Ⲇ.bezierCurveTo(115.14285278320312 * ᐃ, 384.5892868041992 * ᐃ, 109.14285278320312 * ᐃ, 383.5892868041992 * ᐃ, ᐃ * 103.14285278320312, ᐃ * 384.5892868041992);
			Ⲇ.bezierCurveTo(95.14285278320312 * ᐃ, ᐃ * 389.5892868041992, 97.14285278320312 * ᐃ, ᐃ * 393.5892868041992, ᐃ * 107.14285278320312, 396.5892868041992 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 114.14285278320312, ᐃ * 396.5892868041992, ᐃ * 118.14285278320312, 393.5892868041992 * ᐃ, ᐃ * 116.14285278320312, ᐃ * 391.5892868041992);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⵠⲆⵠ]);
			Ⲇ.globalAlpha = ᐃᐃΔ;
			Ⲇ.translate(ᐃ * -3, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 117.14285278320312, ᐃ * 392.5892868041992);
			Ⲇ.bezierCurveTo(ᐃ * 115.14285278320312, 384.5892868041992 * ᐃ, ᐃ * 109.14285278320312, ᐃ * 383.5892868041992, ᐃ * 103.14285278320312, ᐃ * 384.5892868041992);
			Ⲇ.bezierCurveTo(95.14285278320312 * ᐃ, 389.5892868041992 * ᐃ, 97.14285278320312 * ᐃ, ᐃ * 393.5892868041992, 107.14285278320312 * ᐃ, 396.5892868041992 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 114.14285278320312, ᐃ * 396.5892868041992, ᐃ * 118.14285278320312, 393.5892868041992 * ᐃ, ᐃ * 116.14285278320312, 391.5892868041992 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ⵠΔΔⲆᐃ * ᐃ, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 122.14285278320312, 403.7321472167969 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 132.14285278320312, 399.7321472167969 * ᐃ, 133.14285278320312 * ᐃ, ᐃ * 418.7321472167969, ᐃ * 129.14285278320312, ᐃ * 419.7321472167969);
			Ⲇ.bezierCurveTo(ᐃ * 119.14285278320312, 420.7321472167969 * ᐃ, 118.14285278320312 * ᐃ, 402.7321472167969 * ᐃ, ᐃ * 123.14285278320312, ᐃ * 403.7321472167969);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ΔⵠΔ;
			Ⲇ.translate(-3 * ᐃ, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 122.14285278320312, ᐃ * 403.7321472167969);
			Ⲇ.bezierCurveTo(ᐃ * 132.14285278320312, ᐃ * 399.7321472167969, 133.14285278320312 * ᐃ, 418.7321472167969 * ᐃ, 129.14285278320312 * ᐃ, 419.7321472167969 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 119.14285278320312, ᐃ * 420.7321472167969, ᐃ * 118.14285278320312, 402.7321472167969 * ᐃ, ᐃ * 123.14285278320312, 403.7321472167969 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * ⲆⵠⲆᐃ, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 317.1428527832031, 417.5892868041992 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 333.1428527832031, 421.5892868041992 * ᐃ, ᐃ * 299.1428527832031, 455.5892868041992 * ᐃ, 294.1428527832031 * ᐃ, ᐃ * 438.5892868041992);
			Ⲇ.bezierCurveTo(289.1428527832031 * ᐃ, 423.5892868041992 * ᐃ, ᐃ * 307.1428527832031, ᐃ * 414.5892868041992, 317.1428527832031 * ᐃ, ᐃ * 417.5892868041992);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(ᐃ * -ⵠⵠΔⵠ, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 317.1428527832031, ᐃ * 417.5892868041992);
			Ⲇ.bezierCurveTo(333.1428527832031 * ᐃ, 421.5892868041992 * ᐃ, ᐃ * 299.1428527832031, ᐃ * 455.5892868041992, ᐃ * 294.1428527832031, 438.5892868041992 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 289.1428527832031, 423.5892868041992 * ᐃ, 307.1428527832031 * ᐃ, ᐃ * 414.5892868041992, ᐃ * 317.1428527832031, ᐃ * 417.5892868041992);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃⲆ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(3 * ᐃ, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(322.1428527832031 * ᐃ, ᐃ * 437.30357360839844);
			Ⲇ.bezierCurveTo(330.1428527832031 * ᐃ, 431.30357360839844 * ᐃ, ᐃ * 336.1428527832031, 440.30357360839844 * ᐃ, ᐃ * 336.1428527832031, 448.30357360839844 * ᐃ);
			Ⲇ.bezierCurveTo(334.1428527832031 * ᐃ, ᐃ * 454.30357360839844, 316.1428527832031 * ᐃ, 447.30357360839844 * ᐃ, 323.1428527832031 * ᐃ, ᐃ * 437.30357360839844);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(ᐃ * -3, ᐃ * -ⲆΔᐃⲆ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(322.1428527832031 * ᐃ, ᐃ * 437.30357360839844);
			Ⲇ.bezierCurveTo(330.1428527832031 * ᐃ, 431.30357360839844 * ᐃ, 336.1428527832031 * ᐃ, ᐃ * 440.30357360839844, ᐃ * 336.1428527832031, 448.30357360839844 * ᐃ);
			Ⲇ.bezierCurveTo(334.1428527832031 * ᐃ, 454.30357360839844 * ᐃ, 316.1428527832031 * ᐃ, ᐃ * 447.30357360839844, ᐃ * 323.1428527832031, ᐃ * 437.30357360839844);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * 3, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(438.1428527832031 * ᐃ, ᐃ * 358.5892868041992);
			Ⲇ.bezierCurveTo(ᐃ * 455.1428527832031, ᐃ * 351.5892868041992, ᐃ * 467.1428527832031, 371.5892868041992 * ᐃ, 455.1428527832031 * ᐃ, 374.5892868041992 * ᐃ);
			Ⲇ.bezierCurveTo(442.1428527832031 * ᐃ, ᐃ * 377.5892868041992, ᐃ * 429.1428527832031, ᐃ * 361.5892868041992, ᐃ * 438.1428527832031, ᐃ * 358.5892868041992);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(ᐃ * -3, -ᐃⲆΔΔ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 438.1428527832031, ᐃ * 358.5892868041992);
			Ⲇ.bezierCurveTo(ᐃ * 455.1428527832031, 351.5892868041992 * ᐃ, ᐃ * 467.1428527832031, 371.5892868041992 * ᐃ, 455.1428527832031 * ᐃ, 374.5892868041992 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 442.1428527832031, ᐃ * 377.5892868041992, 429.1428527832031 * ᐃ, ᐃ * 361.5892868041992, ᐃ * 438.1428527832031, 358.5892868041992 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[Ⲇⵠᐃ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ⲆᐃᐃΔ * ᐃ, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 423.1428527832031, 363.16071701049805 * ᐃ);
			Ⲇ.bezierCurveTo(433.1428527832031 * ᐃ, ᐃ * 362.16071701049805, 433.1428527832031 * ᐃ, 374.16071701049805 * ᐃ, ᐃ * 421.1428527832031, 382.16071701049805 * ᐃ);
			Ⲇ.bezierCurveTo(413.1428527832031 * ᐃ, 383.16071701049805 * ᐃ, ᐃ * 413.1428527832031, ᐃ * 368.16071701049805, ᐃ * 423.1428527832031, 363.16071701049805 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(-ⲆΔᐃⲆ * ᐃ, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(423.1428527832031 * ᐃ, 363.16071701049805 * ᐃ);
			Ⲇ.bezierCurveTo(433.1428527832031 * ᐃ, ᐃ * 362.16071701049805, ᐃ * 433.1428527832031, 374.16071701049805 * ᐃ, 421.1428527832031 * ᐃ, ᐃ * 382.16071701049805);
			Ⲇ.bezierCurveTo(ᐃ * 413.1428527832031, 383.16071701049805 * ᐃ, ᐃ * 413.1428527832031, 368.16071701049805 * ᐃ, 423.1428527832031 * ᐃ, 363.16071701049805 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ⲆᐃᐃΔ * ᐃ, ᐃ * 3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(431.1428527832031 * ᐃ, ᐃ * 333.0178565979004);
			Ⲇ.bezierCurveTo(ᐃ * 447.1428527832031, 330.0178565979004 * ᐃ, ᐃ * 448.1428527832031, ᐃ * 340.0178565979004, ᐃ * 447.1428527832031, 343.0178565979004 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 445.1428527832031, ᐃ * 351.0178565979004, 415.1428527832031 * ᐃ, 343.0178565979004 * ᐃ, 431.1428527832031 * ᐃ, ᐃ * 333.0178565979004);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(-3 * ᐃ, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(431.1428527832031 * ᐃ, 333.0178565979004 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 447.1428527832031, 330.0178565979004 * ᐃ, ᐃ * 448.1428527832031, 340.0178565979004 * ᐃ, ᐃ * 447.1428527832031, 343.0178565979004 * ᐃ);
			Ⲇ.bezierCurveTo(445.1428527832031 * ᐃ, 351.0178565979004 * ᐃ, 415.1428527832031 * ᐃ, 343.0178565979004 * ᐃ, ᐃ * 431.1428527832031, ᐃ * 333.0178565979004);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[Δⵠᐃ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * ᐃΔⵠⲆ, 3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(486.1428527832031 * ᐃ, ᐃ * 272.44642639160156);
			Ⲇ.bezierCurveTo(ᐃ * 493.1428527832031, 260.44642639160156 * ᐃ, 519.1428527832031 * ᐃ, ᐃ * 277.44642639160156, ᐃ * 511.1428527832031, 289.44642639160156 * ᐃ);
			Ⲇ.bezierCurveTo(503.1428527832031 * ᐃ, 297.44642639160156 * ᐃ, ᐃ * 483.1428527832031, 277.44642639160156 * ᐃ, ᐃ * 486.1428527832031, 273.44642639160156 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ΔᐃΔⲆ;
			Ⲇ.translate(ᐃ * -3, ᐃ * -Δⵠⵠᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(486.1428527832031 * ᐃ, ᐃ * 272.44642639160156);
			Ⲇ.bezierCurveTo(ᐃ * 493.1428527832031, 260.44642639160156 * ᐃ, 519.1428527832031 * ᐃ, ᐃ * 277.44642639160156, 511.1428527832031 * ᐃ, ᐃ * 289.44642639160156);
			Ⲇ.bezierCurveTo(ᐃ * 503.1428527832031, ᐃ * 297.44642639160156, 483.1428527832031 * ᐃ, ᐃ * 277.44642639160156, ᐃ * 486.1428527832031, ᐃ * 273.44642639160156);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(3 * ᐃ, ᐃⵠΔⲆ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(503.1428527832031 * ᐃ, 245.01785278320312 * ᐃ);
			Ⲇ.bezierCurveTo(516.1428527832031 * ᐃ, ᐃ * 247.01785278320312, ᐃ * 513.1428527832031, ᐃ * 264.0178527832031, 509.1428527832031 * ᐃ, 265.0178527832031 * ᐃ);
			Ⲇ.bezierCurveTo(499.1428527832031 * ᐃ, 268.0178527832031 * ᐃ, 494.1428527832031 * ᐃ, 244.01785278320312 * ᐃ, ᐃ * 504.1428527832031, ᐃ * 245.01785278320312);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ΔⵠΔ;
			Ⲇ.translate(ᐃ * -ᐃᐃᐃΔᐃ, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(503.1428527832031 * ᐃ, 245.01785278320312 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 516.1428527832031, 247.01785278320312 * ᐃ, ᐃ * 513.1428527832031, ᐃ * 264.0178527832031, ᐃ * 509.1428527832031, ᐃ * 265.0178527832031);
			Ⲇ.bezierCurveTo(499.1428527832031 * ᐃ, 268.0178527832031 * ᐃ, 494.1428527832031 * ᐃ, 244.01785278320312 * ᐃ, 504.1428527832031 * ᐃ, ᐃ * 245.01785278320312);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * 3, ⵠⵠΔⵠ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(518.1428527832031 * ᐃ, ᐃ * 179.73213958740234);
			Ⲇ.bezierCurveTo(529.1428527832031 * ᐃ, ᐃ * 181.73213958740234, ᐃ * 514.1428527832031, ᐃ * 212.73213958740234, ᐃ * 505.1428527832031, ᐃ * 200.73213958740234);
			Ⲇ.bezierCurveTo(ᐃ * 499.1428527832031, ᐃ * 186.73213958740234, ᐃ * 515.1428527832031, ᐃ * 177.73213958740234, ᐃ * 518.1428527832031, ᐃ * 179.73213958740234);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⲆ]);
			Ⲇ.globalAlpha = 1;
			Ⲇ.translate(-3 * ᐃ, ᐃ * -3);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 518.1428527832031, 179.73213958740234 * ᐃ);
			Ⲇ.bezierCurveTo(529.1428527832031 * ᐃ, ᐃ * 181.73213958740234, 514.1428527832031 * ᐃ, 212.73213958740234 * ᐃ, ᐃ * 505.1428527832031, ᐃ * 200.73213958740234);
			Ⲇ.bezierCurveTo(499.1428527832031 * ᐃ, ᐃ * 186.73213958740234, 515.1428527832031 * ᐃ, 177.73213958740234 * ᐃ, 518.1428527832031 * ᐃ, 179.73213958740234 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔⲆ]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(ᐃ * ⲆᐃᐃΔ, ᐃ * ⵠΔΔⲆᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(438.1428527832031 * ᐃ, 22.16070556640625 * ᐃ);
			Ⲇ.bezierCurveTo(446.1428527832031 * ᐃ, 27.16070556640625 * ᐃ, ᐃ * 422.1428527832031, ᐃ * 54.16070556640625, ᐃ * 414.1428527832031, ᐃ * 40.16070556640625);
			Ⲇ.bezierCurveTo(ᐃ * 409.1428527832031, ᐃ * 27.16070556640625, 430.1428527832031 * ᐃ, 15.16070556640625 * ᐃ, ᐃ * 438.1428527832031, 22.16070556640625 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[0]);
			Ⲇ.globalAlpha = ΔᐃⵠⲆ;
			Ⲇ.translate(-3 * ᐃ, -ᐃⵠΔⲆ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(438.1428527832031 * ᐃ, 22.16070556640625 * ᐃ);
			Ⲇ.bezierCurveTo(446.1428527832031 * ᐃ, 27.16070556640625 * ᐃ, ᐃ * 422.1428527832031, 54.16070556640625 * ᐃ, ᐃ * 414.1428527832031, ᐃ * 40.16070556640625);
			Ⲇ.bezierCurveTo(ᐃ * 409.1428527832031, ᐃ * 27.16070556640625, 430.1428527832031 * ᐃ, ᐃ * 15.16070556640625, 438.1428527832031 * ᐃ, ᐃ * 22.16070556640625);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[1]);
			Ⲇ.globalAlpha = .5;
			Ⲇ.translate(3 * ᐃ, ᐃ * ᐃΔⵠⲆ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(406.1428527832031 * ᐃ, 11.16070556640625 * ᐃ);
			Ⲇ.bezierCurveTo(418.1428527832031 * ᐃ, ᐃ * 14.16070556640625, ᐃ * 411.1428527832031, 27.16070556640625 * ᐃ, ᐃ * 403.1428527832031, 30.16070556640625 * ᐃ);
			Ⲇ.bezierCurveTo(395.1428527832031 * ᐃ, ᐃ * 31.16070556640625, ᐃ * 391.1428527832031, 16.16070556640625 * ᐃ, 406.1428527832031 * ᐃ, ᐃ * 10.16070556640625);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃ]);
			Ⲇ.globalAlpha = ᐃᐃΔ;
			Ⲇ.translate(-ᐃⲆΔΔ * ᐃ, -3 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 406.1428527832031, 11.16070556640625 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 418.1428527832031, 14.16070556640625 * ᐃ, ᐃ * 411.1428527832031, 27.16070556640625 * ᐃ, ᐃ * 403.1428527832031, 30.16070556640625 * ᐃ);
			Ⲇ.bezierCurveTo(395.1428527832031 * ᐃ, ᐃ * 31.16070556640625, ᐃ * 391.1428527832031, ᐃ * 16.16070556640625, 406.1428527832031 * ᐃ, ᐃ * 10.16070556640625);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[Δⵠᐃ]);
			Ⲇ.translate(100 * ᐃ, ᐃ * ⲆᐃᐃⵠΔ)
		}
		Ⲇ.globalAlpha = ΔⲆᐃᐃ;
		Ⲇ.translate(-ΔⲆⵠᐃ * ᐃ, ᐃ * -ⲆΔᐃⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 271, 111 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 259, 110 * ᐃ, ᐃ * 258, 99 * ᐃ, ᐃ * 265, 95 * ᐃ);
		Ⲇ.bezierCurveTo(276 * ᐃ, ᐃ * 91, 279 * ᐃ, ᐃ * ⲆΔⵠⲆⵠⵠΔ, 275 * ᐃ, 107 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 274, ᐃ * 109, 273 * ᐃ, 110 * ᐃ, ᐃ * 271, ᐃ * 111);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃⵠΔ], Δⵠ[3], ᐃ * ᐃⲆᐃᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(169 * ᐃ, ᐃ * 121);
		Ⲇ.bezierCurveTo(ᐃ * 159, 129 * ᐃ, ᐃ * 149, 126 * ᐃ, ᐃ * 144, ᐃ * 114);
		Ⲇ.bezierCurveTo(ᐃ * 142, ᐃ * 102, 149 * ᐃ, ᐃ * 98, 163 * ᐃ, 96 * ᐃ);
		Ⲇ.bezierCurveTo(175 * ᐃ, 98 * ᐃ, ᐃ * 176, ᐃ * 115, 169 * ᐃ, ᐃ * 121);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ΔⲆΔⵠ], ᐃ * ᐃⲆᐃⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 213, 150 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 206, 134 * ᐃ, 216 * ᐃ, 120 * ᐃ, ᐃ * 235, ᐃ * 129);
		Ⲇ.bezierCurveTo(247 * ᐃ, ᐃ * 139, 242 * ᐃ, 146 * ᐃ, 237 * ᐃ, ᐃ * 154);
		Ⲇ.bezierCurveTo(226 * ᐃ, ᐃ * 162, 218 * ᐃ, 159 * ᐃ, 213 * ᐃ, ᐃ * 150);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔⲆᐃ], Δⵠ[ΔΔᐃΔ], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(236 * ᐃ, 169 * ᐃ);
		Ⲇ.bezierCurveTo(247 * ᐃ, ᐃ * 166, ᐃ * 250, 172 * ᐃ, ᐃ * 247, 181 * ᐃ);
		Ⲇ.bezierCurveTo(242 * ᐃ, 186 * ᐃ, 241 * ᐃ, ᐃ * 181, 242 * ᐃ, 182 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 241, ᐃ * 178, ᐃ * 240, ᐃ * 179, 239 * ᐃ, ᐃ * 181);
		Ⲇ.bezierCurveTo(ᐃ * 240, 184 * ᐃ, ᐃ * 237, ᐃ * 186, ᐃ * 233, 181 * ᐃ);
		Ⲇ.bezierCurveTo(230 * ᐃ, ᐃ * 173, ᐃ * 233, ᐃ * 169, ᐃ * 236, 169 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃΔ], Δⵠ[ᐃⵠΔⲆ], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 163, 170 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 176, 165 * ᐃ, 180 * ᐃ, 172 * ᐃ, 181 * ᐃ, 181 * ᐃ);
		Ⲇ.bezierCurveTo(182 * ᐃ, 189 * ᐃ, ᐃ * 178, ᐃ * 192, 174 * ᐃ, ᐃ * 188);
		Ⲇ.bezierCurveTo(ᐃ * 172, 183 * ᐃ, 170 * ᐃ, 184 * ᐃ, ᐃ * 170, 188 * ᐃ);
		Ⲇ.bezierCurveTo(176 * ᐃ, ᐃ * 194, 165 * ᐃ, 196 * ᐃ, ᐃ * 162, ᐃ * 190);
		Ⲇ.bezierCurveTo(ᐃ * 152, ᐃ * 181, ᐃ * 157, 173 * ᐃ, 163 * ᐃ, ᐃ * 170);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], ⵠⵠⵠᐃ * ᐃ);
		Ⲇ.scale(.05, .05);
		Ⲇ.translate(5e3 * ᐃ, ᐃ * 1900);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 273, 46.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 353, ᐃ * 131.546875, ᐃ * 303, ᐃ * 213.546875, ᐃ * 272, 236.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 203, 179.546875 * ᐃ, ᐃ * 236, 84.546875 * ᐃ, ᐃ * 273, ᐃ * 47.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ᐃᐃⵠᐃΔ], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(467 * ᐃ, ᐃ * 257.546875);
		Ⲇ.bezierCurveTo(ᐃ * 369, 194.546875 * ᐃ, ᐃ * 325, 236.546875 * ᐃ, ᐃ * 291, ᐃ * 271.546875);
		Ⲇ.bezierCurveTo(ᐃ * 371, ᐃ * 335.546875, 427 * ᐃ, 313.546875 * ᐃ, 467 * ᐃ, 258.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ⵠⲆⲆᐃ], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 269, ᐃ * 275.546875);
		Ⲇ.bezierCurveTo(343 * ᐃ, ᐃ * 356.546875, 355 * ᐃ, 407.546875 * ᐃ, ᐃ * 323, 472.546875 * ᐃ);
		Ⲇ.bezierCurveTo(224 * ᐃ, 451.546875 * ᐃ, ᐃ * 238, 326.546875 * ᐃ, 270 * ᐃ, 275.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⵠ], Δⵠ[ᐃᐃᐃΔⵠ], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(260 * ᐃ, 267.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 134, ᐃ * 221.546875, 89 * ᐃ, 256.546875 * ᐃ, 60 * ᐃ, 295.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 116, 357.546875 * ᐃ, ᐃ * 242, ᐃ * 344.546875, ᐃ * 260, ᐃ * 267.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Ⲇⵠⵠⵠ], Δⵠ[5], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(124 * ᐃ, 123.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * ᐃΔⵠⲆΔ, 140.546875 * ᐃ, ᐃ * 265, ᐃ * 234.546875, 267 * ᐃ, 269.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 159, 283.546875 * ᐃ, ᐃ * 127, ᐃ * 192.546875, ᐃ * 124, 124.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[ᐃⲆⲆᐃΔⲆⵠ], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(267 * ᐃ, ᐃ * 268.546875);
		Ⲇ.bezierCurveTo(265 * ᐃ, ᐃ * 170.546875, 364 * ᐃ, ᐃ * 127.546875, ᐃ * 407, ᐃ * 132.546875);
		Ⲇ.bezierCurveTo(427 * ᐃ, ᐃ * 204.546875, ᐃ * 341, 277.546875 * ᐃ, ᐃ * 268, ᐃ * 271.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[ΔΔⵠΔⲆ], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 270, ᐃ * 269.546875);
		Ⲇ.bezierCurveTo(370 * ᐃ, ᐃ * 251.546875, 410 * ᐃ, 328.546875 * ᐃ, 420 * ᐃ, 399.546875 * ᐃ);
		Ⲇ.bezierCurveTo(292 * ᐃ, 412.546875 * ᐃ, 275 * ᐃ, 313.546875 * ᐃ, ᐃ * 269, 272.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⵠⲆ], Δⵠ[ᐃⲆᐃΔΔ], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(273 * ᐃ, 266.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 291, ᐃ * 370.546875, ᐃ * 235, ᐃ * 428.546875, ᐃ * 173, ᐃ * 451.546875);
		Ⲇ.bezierCurveTo(ᐃ * 124, 365.546875 * ᐃ, ᐃ * 217, ᐃ * 274.546875, ᐃ * 272, 265.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔⵠΔᐃ], Δⵠ[ⲆΔᐃⲆᐃ], ᐃ * 2);
		ᐃΔΔ(Ⲇ, 266 * ᐃ, ᐃ * 251.546875, ᐃ * 19.1049731745428);
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[ᐃⲆⵠⲆⵠᐃⲆ], ᐃ * ⵠΔⵠΔ);
		ᐃΔΔ(Ⲇ, ᐃ * 292, ᐃ * 274.546875, ᐃ * 15.556349186104045);
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[9], ᐃ * ᐃⲆᐃⵠ);
		ᐃΔΔ(Ⲇ, 258 * ᐃ, 291.546875 * ᐃ, ᐃ * 17.029386365926403);
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[9], ᐃ * ΔΔⲆᐃ);
		Ⲇ.scale(1.4, 1.4);
		Ⲇ.translate(-700 * ᐃ, ᐃ * 280);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 273, 46.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 353, ᐃ * 131.546875, ᐃ * 303, 213.546875 * ᐃ, 272 * ᐃ, 236.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 203, 179.546875 * ᐃ, ᐃ * 236, 84.546875 * ᐃ, 273 * ᐃ, 47.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ΔⵠΔᐃ], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(467 * ᐃ, 257.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 369, ᐃ * 194.546875, ᐃ * 325, ᐃ * 236.546875, 291 * ᐃ, 271.546875 * ᐃ);
		Ⲇ.bezierCurveTo(371 * ᐃ, ᐃ * 335.546875, ᐃ * 427, ᐃ * 313.546875, ᐃ * 467, 258.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃΔΔ], Δⵠ[ⲆⵠΔΔ], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(269 * ᐃ, 275.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 343, ᐃ * 356.546875, 355 * ᐃ, 407.546875 * ᐃ, ᐃ * 323, ᐃ * 472.546875);
		Ⲇ.bezierCurveTo(224 * ᐃ, 451.546875 * ᐃ, 238 * ᐃ, 326.546875 * ᐃ, ᐃ * 270, ᐃ * 275.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(260 * ᐃ, 267.546875 * ᐃ);
		Ⲇ.bezierCurveTo(134 * ᐃ, 221.546875 * ᐃ, ᐃ * 89, ᐃ * 256.546875, 60 * ᐃ, 295.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 116, ᐃ * 357.546875, ᐃ * 242, ᐃ * 344.546875, 260 * ᐃ, ᐃ * 267.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔΔᐃ], Δⵠ[5], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 124, 123.546875 * ᐃ);
		Ⲇ.bezierCurveTo(255 * ᐃ, 140.546875 * ᐃ, 265 * ᐃ, 234.546875 * ᐃ, 267 * ᐃ, ᐃ * 269.546875);
		Ⲇ.bezierCurveTo(ᐃ * 159, ᐃ * 283.546875, ᐃ * 127, ᐃ * 192.546875, 124 * ᐃ, ᐃ * 124.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[7], ΔΔΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 267, 268.546875 * ᐃ);
		Ⲇ.bezierCurveTo(265 * ᐃ, 170.546875 * ᐃ, ᐃ * 364, 127.546875 * ᐃ, 407 * ᐃ, ᐃ * 132.546875);
		Ⲇ.bezierCurveTo(427 * ᐃ, 204.546875 * ᐃ, 341 * ᐃ, ᐃ * 277.546875, 268 * ᐃ, 271.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⵠᐃⵠ], Δⵠ[ⲆⲆΔΔᐃ], ᐃ * ΔⵠⲆᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 270, 269.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 370, ᐃ * 251.546875, 410 * ᐃ, 328.546875 * ᐃ, 420 * ᐃ, ᐃ * 399.546875);
		Ⲇ.bezierCurveTo(292 * ᐃ, ᐃ * 412.546875, 275 * ᐃ, ᐃ * 313.546875, 269 * ᐃ, ᐃ * 272.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[7], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 273, ᐃ * 266.546875);
		Ⲇ.bezierCurveTo(ᐃ * 291, ᐃ * 370.546875, 235 * ᐃ, ᐃ * 428.546875, ᐃ * 173, 451.546875 * ᐃ);
		Ⲇ.bezierCurveTo(124 * ᐃ, ᐃ * 365.546875, 217 * ᐃ, ᐃ * 274.546875, 272 * ᐃ, ᐃ * 265.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[7], 2 * ᐃ);
		ᐃΔΔ(Ⲇ, 266 * ᐃ, ᐃ * 251.546875, ᐃ * 19.1049731745428);
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[9], ᐃ * ⲆⲆⲆⲆ);
		ᐃΔΔ(Ⲇ, 292 * ᐃ, ᐃ * 274.546875, ᐃ * 15.556349186104045);
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[ⵠΔΔⵠⲆΔᐃ], ᐃ * ΔΔΔⵠ);
		ᐃΔΔ(Ⲇ, 258 * ᐃ, 291.546875 * ᐃ, ᐃ * 17.029386365926403);
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[ᐃΔⲆⲆⵠ], ᐃ * 2);
		Ⲇ.translate(-900 * ᐃ, -200 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(273 * ᐃ, ᐃ * 46.546875);
		Ⲇ.bezierCurveTo(ᐃ * 353, 131.546875 * ᐃ, 303 * ᐃ, 213.546875 * ᐃ, ᐃ * 272, 236.546875 * ᐃ);
		Ⲇ.bezierCurveTo(203 * ᐃ, 179.546875 * ᐃ, ᐃ * 236, 84.546875 * ᐃ, 273 * ᐃ, 47.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠᐃΔ], Δⵠ[5], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(467 * ᐃ, ᐃ * 257.546875);
		Ⲇ.bezierCurveTo(ᐃ * 369, ᐃ * 194.546875, ᐃ * 325, ᐃ * 236.546875, ᐃ * 291, ᐃ * 271.546875);
		Ⲇ.bezierCurveTo(ᐃ * 371, ᐃ * 335.546875, 427 * ᐃ, ᐃ * 313.546875, 467 * ᐃ, ᐃ * 258.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ΔΔⲆⲆⵠ], ᐃᐃΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(269 * ᐃ, 275.546875 * ᐃ);
		Ⲇ.bezierCurveTo(343 * ᐃ, ᐃ * 356.546875, ᐃ * 355, ᐃ * 407.546875, ᐃ * 323, ᐃ * 472.546875);
		Ⲇ.bezierCurveTo(ᐃ * 224, 451.546875 * ᐃ, 238 * ᐃ, ᐃ * 326.546875, ᐃ * 270, 275.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(260 * ᐃ, ᐃ * 267.546875);
		Ⲇ.bezierCurveTo(ᐃ * 134, ᐃ * 221.546875, 89 * ᐃ, 256.546875 * ᐃ, ᐃ * 60, ᐃ * 295.546875);
		Ⲇ.bezierCurveTo(ᐃ * 116, ᐃ * 357.546875, ᐃ * 242, 344.546875 * ᐃ, 260 * ᐃ, 267.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⵠⲆ], Δⵠ[5], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(124 * ᐃ, ᐃ * 123.546875);
		Ⲇ.bezierCurveTo(ᐃ * ⵠΔⲆΔᐃⲆⲆ, ᐃ * 140.546875, ᐃ * 265, ᐃ * 234.546875, 267 * ᐃ, ᐃ * 269.546875);
		Ⲇ.bezierCurveTo(ᐃ * 159, ᐃ * 283.546875, 127 * ᐃ, 192.546875 * ᐃ, ᐃ * 124, 124.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔⵠᐃ], Δⵠ[ⵠⲆⵠⵠⲆⲆⵠ], ᐃⲆᐃᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(267 * ᐃ, 268.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 265, 170.546875 * ᐃ, 364 * ᐃ, ᐃ * 127.546875, ᐃ * 407, 132.546875 * ᐃ);
		Ⲇ.bezierCurveTo(427 * ᐃ, 204.546875 * ᐃ, 341 * ᐃ, ᐃ * 277.546875, 268 * ᐃ, 271.546875 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⲆᐃᐃ], Δⵠ[7], ᐃ * 2);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 270, 269.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 370, 251.546875 * ᐃ, 410 * ᐃ, ᐃ * 328.546875, 420 * ᐃ, ᐃ * 399.546875);
		Ⲇ.bezierCurveTo(292 * ᐃ, ᐃ * 412.546875, ᐃ * 275, 313.546875 * ᐃ, ᐃ * 269, ᐃ * 272.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[7], 2 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(273 * ᐃ, 266.546875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 291, ᐃ * 370.546875, 235 * ᐃ, 428.546875 * ᐃ, ᐃ * 173, ᐃ * 451.546875);
		Ⲇ.bezierCurveTo(ᐃ * 124, ᐃ * 365.546875, 217 * ᐃ, ᐃ * 274.546875, ᐃ * 272, ᐃ * 265.546875);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⵠⵠⲆ], Δⵠ[ⲆΔⲆⵠⵠ], ᐃ * 2);
		ᐃΔΔ(Ⲇ, ᐃ * 266, 251.546875 * ᐃ, 19.1049731745428 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[9], 2 * ᐃ);
		ᐃΔΔ(Ⲇ, 292 * ᐃ, ᐃ * 274.546875, 15.556349186104045 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[Δⵠᐃᐃⵠ], Δⵠ[ᐃᐃᐃᐃᐃⲆᐃ], ᐃ * 2);
		ᐃΔΔ(Ⲇ, 258 * ᐃ, 291.546875 * ᐃ, 17.029386365926403 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[9], ⵠⵠⵠᐃ * ᐃ);
		return ΔⲆ
	}

	function ᐃᐃᐃⲆΔⵠᐃ(ΔⲆⲆⲆⲆⲆΔ, ⵠᐃⲆⵠΔΔⲆ) {
		ⵠⵠΔⵠⵠⲆᐃ(ᐃⵠΔⲆⲆ, ΔⲆⲆⲆⲆⲆΔ, ⵠᐃⲆⵠΔΔⲆ);
		const ΔΔᐃⵠΔⲆⵠΔⲆ = ⲆⲆⲆᐃⵠᐃⵠ(ⲆⲆⵠΔ[ⵠΔᐃᐃ], ⲆⲆⵠΔ[ΔᐃⲆⲆ], ⲆⲆⵠΔ[Δⵠⵠⵠ]);
		const ᐃⵠⵠᐃⲆᐃⵠᐃΔ = ⲆΔᐃⲆΔⲆᐃ(ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[ⵠⵠⵠΔ], ⲆⲆⵠΔ[ᐃⲆΔ], ⲆⲆⵠΔ[Ⲇᐃⵠ]);
		const ΔᐃΔⵠΔⵠⵠᐃⵠ = ((77 + (ΔΔᐃⵠΔⲆⵠΔⲆ ^ ᐃⵠⵠᐃⲆᐃⵠᐃΔ)) * 8121 + 28411) % 134456;
		return ΔᐃΔⵠΔⵠⵠᐃⵠ
	}

	function ⵠᐃᐃⵠⲆⵠΔ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 253;
		ΔⲆ.height = ᐃ * 192;
		Ⲇ.globalAlpha = .5;
		Ⲇ.save();
		Ⲇ.translate(42 * ᐃ, ᐃ * 99);
		Ⲇ.globalAlpha = .5;
		ᐃΔⵠ(Ⲇ, -ⵠⵠⵠⵠⵠ * ᐃ, ᐃ * -ᐃⲆᐃΔⲆ, 14 * ᐃ, 39 * ᐃ, ᐃ * ⲆᐃⲆⵠᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.globalAlpha = ⵠᐃⵠΔ;
		Ⲇ.save();
		Ⲇ.translate(37 * ᐃ, 94 * ᐃ);
		ᐃΔⵠ(Ⲇ, -ᐃⲆⵠⵠⵠ * ᐃ, ᐃ * -ⵠⵠᐃΔᐃ, ᐃ * ΔⲆⲆᐃⲆⲆⲆ, 37 * ᐃ, ᐃ * ΔⲆΔⲆΔ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔⲆᐃ]);
		Ⲇ.globalAlpha = .5;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 136, ᐃ * 99);
		Ⲇ.globalAlpha = .5;
		ᐃΔⵠ(Ⲇ, ᐃ * -84, ᐃ * -67, 168 * ᐃ, ᐃ * 134, ᐃ * ᐃᐃⲆΔⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃ * 13);
		Ⲇ.globalAlpha = 1;
		Ⲇ.save();
		Ⲇ.translate(131 * ᐃ, 94 * ᐃ);
		ᐃΔⵠ(Ⲇ, -84 * ᐃ, -67 * ᐃ, ᐃ * 168, 134 * ᐃ, 20 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆᐃⵠ], Δⵠ[ᐃᐃᐃⵠ], ⲆⵠⵠΔⲆ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 131, ᐃ * 94);
		ᐃΔⵠ(Ⲇ, -76 * ᐃ, ᐃ * -61, 152 * ᐃ, 122 * ᐃ, ⲆΔⲆᐃᐃⵠⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⲆ], Δⵠ[1], ᐃ * ΔΔⲆᐃᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 168.5, ᐃ * 93.5);
		ᐃΔⵠ(Ⲇ, ᐃ * -30.5, ᐃ * -58.5, 61 * ᐃ, 117 * ᐃ, ᐃ * ᐃⲆᐃΔⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * ᐃᐃⲆⵠⲆ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 93.5, ᐃ * 95.5);
		ᐃΔⵠ(Ⲇ, -32 * ᐃ, -59.5 * ᐃ, 59 * ᐃ, ᐃ * 119, ᐃ * 20);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆᐃ], Δⵠ[ⵠⵠᐃΔ], ᐃ * 6);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 130.5, ᐃ * 94);
		ᐃΔⵠ(Ⲇ, ᐃ * -36, ᐃ * -67, 73 * ᐃ, 134 * ᐃ, 20 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[2], ᐃ * ⵠᐃΔᐃΔ);
		Ⲇ.globalAlpha = .5;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 133, 97 * ᐃ);
		ᐃΔⵠ(Ⲇ, -83 * ᐃ, ᐃ * -ⲆⲆᐃⵠⲆⵠⲆ, 160 * ᐃ, ᐃ * 24, ⵠⲆᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⲆ]);
		Ⲇ.globalAlpha = ΔΔⵠΔ;
		Ⲇ.save();
		Ⲇ.translate(133 * ᐃ, 92 * ᐃ);
		ᐃΔⵠ(Ⲇ, -83 * ᐃ, -ΔⲆⵠΔᐃ * ᐃ, 160 * ᐃ, 24 * ᐃ, 0 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.globalAlpha = .5;
		Ⲇ.save();
		Ⲇ.translate(228 * ᐃ, 99.5 * ᐃ);
		Ⲇ.globalAlpha = .5;
		ᐃΔⵠ(Ⲇ, ᐃ * -ΔⲆⲆⵠ, -18.5 * ᐃ, ᐃ * ⲆⲆⵠⲆⵠ, 37 * ᐃ, ⲆᐃΔᐃⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ]);
		Ⲇ.globalAlpha = Δⵠᐃ;
		Ⲇ.save();
		Ⲇ.translate(223 * ᐃ, 94.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -5, -18.5 * ᐃ, ⵠΔΔⲆΔ * ᐃ, 37 * ᐃ, ᐃΔΔⲆΔ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔⲆⲆ]);
		Ⲇ.save();
		Ⲇ.translate(133.5 * ᐃ, 175.5 * ᐃ);
		Ⲇ.globalAlpha = .5;
		ᐃΔⵠ(Ⲇ, -22.5 * ᐃ, ᐃ * -6.5, ᐃ * 45, 13 * ᐃ, ᐃⲆΔⲆⲆΔᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ]);
		Ⲇ.globalAlpha = Δⵠᐃ;
		Ⲇ.save();
		Ⲇ.translate(128.5 * ᐃ, 170.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, -22.5 * ᐃ, -6.5 * ᐃ, ᐃ * 45, ΔⲆᐃΔᐃ * ᐃ, 20 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2]);
		return ΔⲆ
	}

	function ᐃΔᐃⲆⲆⵠᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 142 * ᐃ;
		ΔⲆ.height = 118 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 70.16665649414062, 38.20831298828125 * ᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -58.5, -27.5 * ᐃ, ᐃ * 117, ᐃ * 55, ᐃ * ⲆΔⲆᐃᐃⵠⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠᐃⵠΔ], ᐃ * 4);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 70, 42.70831298828125 * ᐃ);
		ᐃΔⵠ(Ⲇ, -61 * ᐃ, ᐃ * -ᐃᐃΔΔΔ, 122 * ᐃ, ᐃ * 40, ᐃ * ᐃᐃⲆΔⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ᐃⲆΔ], ᐃ * ⲆΔᐃΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 123, 70.375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 115, 99.375 * ᐃ, ᐃ * 119, 85.375 * ᐃ, 115 * ᐃ, ᐃ * 100.375);
		Ⲇ.bezierCurveTo(ᐃ * 112, 116.375 * ᐃ, 117 * ᐃ, ᐃ * 109.375, ᐃ * 131, ᐃ * 100.375);
		Ⲇ.bezierCurveTo(ᐃ * 131, 83.375 * ᐃ, 131 * ᐃ, ᐃ * 83.375, ᐃ * 131, 66.375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆⲆⲆ], Δⵠ[ΔΔⵠΔ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ΔⵠᐃⵠⲆⲆΔ * ᐃ, 68.375 * ᐃ);
		Ⲇ.bezierCurveTo(11.166656494140625 * ᐃ, ᐃ * 84.375, ᐃ * 9, 99.375 * ᐃ, ᐃ * 10, 100.375 * ᐃ);
		Ⲇ.bezierCurveTo(35 * ᐃ, ᐃ * 113.375, 27 * ᐃ, 110.375 * ᐃ, ᐃ * 25, 95.375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 16, ᐃ * 68.375, ⵠᐃⵠⲆΔᐃᐃ * ᐃ, 69.375 * ᐃ, 17 * ᐃ, 68.375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆΔⲆ], Δⵠ[1], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 46, 32.375 * ᐃ);
		Ⲇ.bezierCurveTo(43 * ᐃ, 8.375 * ᐃ, 45 * ᐃ, ᐃ * 7.375, ᐃ * 56, ᐃ * 6.375);
		Ⲇ.bezierCurveTo(ᐃ * 105, ᐃ * 4.375, 102 * ᐃ, ᐃ * 6.375, 97 * ᐃ, ᐃ * 32.375);
		Ⲇ.bezierCurveTo(ᐃ * 138, ᐃ * 43.375, 133 * ᐃ, ᐃ * 45.375, ᐃ * 133, 58.375 * ᐃ);
		Ⲇ.bezierCurveTo(133 * ᐃ, 85.375 * ᐃ, ᐃ * 125, 74.375 * ᐃ, 111 * ᐃ, 70.375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 70, ᐃ * 69.875, 29 * ᐃ, 69.375 * ᐃ, ᐃ * 29, ᐃ * 69.375);
		Ⲇ.bezierCurveTo(ᐃ * 7, ᐃ * 84.375, ᐃ * 7, 70.375 * ᐃ, 7 * ᐃ, 59.375 * ᐃ);
		Ⲇ.bezierCurveTo(6 * ᐃ, ᐃ * 28.375, ᐃ * 32, 39.375 * ᐃ, ᐃ * 44, 32.375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[1], ᐃ * 4);
		ᐃΔΔ(Ⲇ, ᐃ * 71, ᐃ * 44.375, 16.55294535724685 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠΔⵠ], Δⵠ[ΔⵠΔ], ᐃ * 4);
		ᐃΔΔ(Ⲇ, ᐃ * 71, 43.70831298828125 * ᐃ, ᐃ * 8.94427190999916);
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ⵠΔᐃ], ᐃΔⵠⵠ * ᐃ);
		return ΔⲆ
	}

	function ᐃᐃⲆΔΔⵠᐃΔΔ(ᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ᐃ * 200;
		var ⲆΔⲆ = 270 * ᐃ;
		var ΔⲆΔ = ᐃ * 8;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ + ⲆᐃΔᐃⵠ;
		Ⲇ.beginPath();
		ᐃΔⵠ(Ⲇ, ⵠⲆΔ, 0, ⲆⲆᐃ, ⲆΔⲆ - ΔⲆΔ, ΔⲆΔ);
		Ⲇ.globalAlpha = .5;
		ΔΔ(Ⲇ, "#1D6055");
		Ⲇ.globalAlpha = 1;
		var text = ᐃⵠΔΔΔ(ᐃ, "Leaderboard", 25, ⵠ[447]);
		Ⲇ.drawImage(text, (ⲆⲆᐃ - text.width) / 2, 5 * ᐃ);
		return ΔⲆ
	}

	function ΔᐃΔⵠⲆᐃⲆᐃⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 118 * ᐃ;
		ΔⲆ.height = ᐃ * 129;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 90, 90 * ᐃ);
		ᐃΔⵠ(Ⲇ, -86.5 * ᐃ, ᐃ * -86, ᐃ * 110, 110 * ᐃ, ᐃ * ⵠΔᐃⵠⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⲆΔΔΔ], ᐃΔᐃΔ);
		Ⲇ.save();
		ᐃΔⵠ(Ⲇ, 30 * ᐃ, 115 * ᐃ, 60 * ᐃ, ⲆΔⲆⲆⵠ * ᐃ, ᐃ * 15);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], 4);
		Ⲇ.save();
		ᐃΔⵠ(Ⲇ, 50 * ᐃ, 117 * ᐃ, ΔΔⲆΔⲆᐃⲆ * ᐃ, 10 * ᐃ, ᐃ * Δⵠᐃⵠᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2]);
		return ΔⲆ
	}

	function ΔᐃΔⵠⲆⵠⲆᐃΔ(ⲆⲆΔΔ, ⲆᐃΔⵠⲆᐃᐃᐃΔ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = ⲆⲆΔΔ.w + ⲆⲆΔΔ.ᐃⵠⵠⲆΔ;
		var ⲆΔⲆ = ⲆⲆΔΔ.ⲆΔⲆ + ⲆⲆΔΔ.ᐃⵠⵠⲆΔ;
		var ⲆⲆⵠᐃ = .1 * ⲆΔⲆ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ + ⲆⲆⵠᐃ;
		Ⲇ.beginPath();
		Ⲇ.translate(ⲆⲆᐃ / 2, ⲆΔⲆ / ᐃᐃᐃⵠ + ⲆⲆⵠᐃ);
		Ⲇ.globalAlpha = .5;
		ᐃΔⵠ(Ⲇ, -ⲆⲆΔΔ.w / 2, -ⲆⲆΔΔ.ⲆΔⲆ / 2, ⲆⲆΔΔ.w, ⲆⲆΔΔ.ⲆΔⲆ, ⲆⲆΔΔ.r);
		ΔΔ(Ⲇ, ⵠ[204], ⵠ[204], ⲆⲆΔΔ.ᐃⵠⵠⲆΔ);
		Ⲇ.globalAlpha = ΔᐃⲆⲆ;
		Ⲇ.beginPath();
		if (!ⲆᐃΔⵠⲆᐃᐃᐃΔ) Ⲇ.translate(ΔΔᐃᐃ, -ⲆⲆⵠᐃ);
		ᐃΔⵠ(Ⲇ, -ⲆⲆΔΔ.w / 2, -ⲆⲆΔΔ.ⲆΔⲆ / 2, ⲆⲆΔΔ.w, ⲆⲆΔΔ.ⲆΔⲆ, ⲆⲆΔΔ.r);
		ΔΔ(Ⲇ, ⲆⲆΔΔ.ⲆᐃΔᐃΔⵠⲆ, ⲆⲆΔΔ.ΔΔΔⲆᐃΔΔΔⲆ, ⲆⲆΔΔ.ᐃⵠⵠⲆΔ);
		Ⲇ.beginPath();
		Ⲇ.fillStyle = ⲆⲆΔΔ.color;
		Ⲇ.textBaseline = ⵠ[90], Ⲇ.textAlign = "center", Ⲇ.font = ⲆⲆΔΔ.size + "px " + ⲆⲆΔΔ.font;
		Ⲇ.fillText(ⲆⲆΔΔ.text, ⵠΔᐃᐃ, 0);
		return ΔⲆ
	}

	function ⲆⵠⵠⲆⵠᐃᐃ(ᐃ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 573;
		ΔⲆ.height = ᐃ * 350;
		ⲆΔΔΔ == Ⲇᐃ && (Ⲇ.beginPath(), Ⲇ.lineCap = ⵠ[401], Ⲇ.lineJoin = ⵠ[401], Ⲇ.moveTo(ᐃ * 336, ᐃ * 72), Ⲇ.bezierCurveTo(366 * ᐃ, ᐃ * 15, 426 * ᐃ, ᐃ * 36, 497 * ᐃ, 83 * ᐃ), Ⲇ.bezierCurveTo(522 * ᐃ, ᐃ * 85, ᐃ * 522, 85 * ᐃ, 547 * ᐃ, 87 * ᐃ), Ⲇ.bezierCurveTo(476.5 * ᐃ, 205 * ᐃ, ᐃ * 476.5, ᐃ * 205, ᐃ * 406, 323 * ᐃ), Ⲇ.bezierCurveTo(297.5 * ᐃ, ᐃ * 319, ᐃ * 297.5, 319 * ᐃ, ᐃ * 189, ᐃ * 315), Ⲇ.bezierCurveTo(ᐃ * 105.5, 279 * ᐃ, ᐃ * 105.5, 279 * ᐃ, 22 * ᐃ, 243 * ᐃ), Ⲇ.bezierCurveTo(ᐃ * 92, ᐃ * 140, 92 * ᐃ, ᐃ * 140, ᐃ * 162, 37 * ᐃ), Ⲇ.bezierCurveTo(173 * ᐃ, 39 * ᐃ, 173 * ᐃ, 39 * ᐃ, ᐃ * 184, ᐃ * 41), Ⲇ.bezierCurveTo(185 * ᐃ, ᐃ * 38.5, 185 * ᐃ, ᐃ * 38.5, 186 * ᐃ, ᐃ * 36), Ⲇ.bezierCurveTo(323 * ᐃ, ᐃ * 13, 322 * ᐃ, ᐃ * 25, ᐃ * 337, 74 * ᐃ), Ⲇ.closePath(), ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⵠ], Δⵠ[ᐃⲆᐃⲆ], ᐃ * 35));
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(168 * ᐃ, 42 * ᐃ);
		Ⲇ.bezierCurveTo(ⲆⲆΔΔⵠ * ᐃ, ᐃ * 60, ᐃΔⵠⲆΔ * ᐃ, 60 * ᐃ, ᐃ * 342, ᐃ * 78);
		Ⲇ.bezierCurveTo(443 * ᐃ, ᐃ * 81.5, 443 * ᐃ, ᐃ * 81.5, 544 * ᐃ, 85 * ᐃ);
		Ⲇ.bezierCurveTo(475 * ᐃ, 204.5 * ᐃ, ᐃ * 475, 204.5 * ᐃ, 406 * ᐃ, ᐃ * 324);
		Ⲇ.bezierCurveTo(ᐃ * 297.5, 320 * ᐃ, 297.5 * ᐃ, ᐃ * 320, ᐃ * 189, 316 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 105.5, 279 * ᐃ, 105.5 * ᐃ, ᐃ * 279, 22 * ᐃ, ᐃ * 242);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃ], Δⵠ[1], ᐃ * ⵠⵠᐃᐃΔΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(188 * ᐃ, ᐃ * 41);
		Ⲇ.bezierCurveTo(ᐃ * 308, 15 * ᐃ, ᐃ * 325, 18 * ᐃ, 337 * ᐃ, 66 * ᐃ);
		Ⲇ.bezierCurveTo(191 * ᐃ, ᐃ * 305, ᐃ * 196, 286 * ᐃ, 184 * ᐃ, 307 * ᐃ);
		Ⲇ.bezierCurveTo(175 * ᐃ, ᐃ * 250, ᐃ * 90, ᐃ * 254, ᐃ * 52, 241 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ᐃⲆΔΔ], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 336, ᐃ * 71);
		Ⲇ.bezierCurveTo(375 * ᐃ, ΔⵠΔⵠΔ * ᐃ, ᐃ * 429, 50 * ᐃ, ᐃ * 518, ᐃ * 92);
		Ⲇ.bezierCurveTo(ᐃ * 455, ᐃ * 199.5, 455 * ᐃ, ᐃ * 199.5, ᐃ * 392, ᐃ * 307);
		Ⲇ.bezierCurveTo(227 * ᐃ, ᐃ * 301, 261 * ᐃ, ΔⲆΔⲆⲆ * ᐃ, ᐃ * 188, 308 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[Δⵠⵠᐃ], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(357 * ᐃ, 76 * ᐃ);
		Ⲇ.bezierCurveTo(390 * ᐃ, 67 * ᐃ, 414 * ᐃ, 86 * ᐃ, ᐃ * 435, 104 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 417, 135 * ᐃ, ᐃ * 417, 135 * ᐃ, 399 * ᐃ, 166 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 352, 140 * ᐃ, 345 * ᐃ, 139 * ᐃ, ᐃ * 319, ᐃ * 142);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃΔᐃ], Δⵠ[3], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(309 * ᐃ, 168 * ᐃ);
		Ⲇ.bezierCurveTo(345 * ᐃ, 163 * ᐃ, 372 * ᐃ, ᐃ * 180, ᐃ * 412, 203 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(263 * ᐃ, 54 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 305, ᐃ * 44, 307 * ᐃ, ᐃ * 51, ᐃ * 311, 64 * ᐃ);
		Ⲇ.bezierCurveTo(270.5 * ᐃ, ᐃ * 129.5, 270.5 * ᐃ, 129.5 * ᐃ, ᐃ * 230, ᐃ * 195);
		Ⲇ.bezierCurveTo(221 * ᐃ, 175 * ᐃ, 203 * ᐃ, ᐃ * 171, 186 * ᐃ, 172 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⵠ], Δⵠ[ⵠΔΔⲆᐃ], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 292, ᐃ * 198);
		Ⲇ.bezierCurveTo(ᐃ * 328, 191 * ᐃ, 364 * ᐃ, 211 * ᐃ, 401 * ᐃ, 237 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[3], ᐃ * ⵠᐃΔᐃᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 245, ᐃ * 68);
		Ⲇ.bezierCurveTo(ᐃ * 210, 72 * ᐃ, ᐃ * 210, ᐃ * 72, 189 * ᐃ, 69 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ΔΔᐃΔ], ᐃⵠⲆⵠᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 222, 96 * ᐃ);
		Ⲇ.bezierCurveTo(196 * ᐃ, 97 * ᐃ, ᐃ * 193, 97 * ᐃ, 177 * ᐃ, 92 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃΔⵠ], Δⵠ[3], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 207, ᐃ * 124);
		Ⲇ.bezierCurveTo(179 * ᐃ, 123 * ᐃ, ᐃ * 177, 124 * ᐃ, 161 * ᐃ, ᐃ * 119);
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠΔⵠ], Δⵠ[3], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 115, 183 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 184, ᐃ * 185, ᐃ * 203, ᐃ * 198, 219 * ᐃ, ᐃ * 221);
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ᐃⵠΔᐃ], ᐃ * ΔΔᐃⲆⲆⵠᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(98 * ᐃ, 213 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 161, ᐃ * 214, ᐃ * 193, 227 * ᐃ, 201 * ᐃ, 249 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠΔⵠ], Δⵠ[3], ⲆⵠⵠΔΔΔᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 399, 257 * ᐃ);
		Ⲇ.bezierCurveTo(287 * ᐃ, 215 * ᐃ, ᐃ * 280, 215 * ᐃ, 263 * ᐃ, 222 * ᐃ);
		Ⲇ.bezierCurveTo(253 * ᐃ, 238 * ᐃ, ᐃ * 247, ᐃ * 245, 243 * ᐃ, ᐃ * 254);
		Ⲇ.bezierCurveTo(ᐃ * 267, ᐃ * 236, ᐃ * 292, ᐃ * 263, ᐃ * 377, ᐃ * 284);
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[3], 12 * ᐃ);
		return ΔⲆ
	}

	function ᐃⵠⵠᐃΔᐃΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 202;
		ΔⲆ.height = 202 * ᐃ;
		Ⲇ.translate(ΔᐃⵠΔ * ᐃ, ΔΔΔᐃ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ⵠⲆⲆ;
		Ⲇ.translate(ⵠⵠⵠΔ, ᐃ * ᐃⵠᐃΔⲆ);
		Ⲇ.save();
		Ⲇ.translate(98 * ᐃ, 41.15177917480469 * ᐃ);
		Ⲇ.rotate(.8);
		ᐃΔⵠ(Ⲇ, -ΔᐃᐃΔΔ * ᐃ, ᐃ * -16.5, ᐃ * 32, ᐃ * 33, ᐃ * ⵠⵠⵠⵠⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(98 * ᐃ, 22.5089111328125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 97.5, 41.5089111328125 * ᐃ, 97.5 * ᐃ, 41.5089111328125 * ᐃ, ᐃ * 97, 60.5089111328125 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃⵠΔ]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 147.5, 69.5089111328125 * ᐃ);
		Ⲇ.rotate(.2);
		ᐃΔⵠ(Ⲇ, -15.5 * ᐃ, -16 * ᐃ, 31 * ᐃ, 32 * ᐃ, ⲆΔᐃⲆᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 163, ᐃ * 59.50892639160156);
		Ⲇ.bezierCurveTo(ᐃ * 147, ᐃ * 69.50892639160156, 127 * ᐃ, ᐃ * 82.50892639160156, 131 * ᐃ, ᐃ * 79.50892639160156);
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠΔⵠ]);
		Ⲇ.save();
		Ⲇ.translate(143.5 * ᐃ, ᐃ * 128.2946319580078);
		Ⲇ.rotate(1.24);
		ᐃΔⵠ(Ⲇ, -16.5 * ᐃ, -17.5 * ᐃ, 33 * ᐃ, ᐃ * 35, ᐃ * Δᐃⵠᐃⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 162, 135.93748474121094 * ᐃ);
		Ⲇ.bezierCurveTo(143.5 * ᐃ, ᐃ * 128.43748474121094, 129 * ᐃ, 120.93748474121094 * ᐃ, 125 * ᐃ, ᐃ * 120.93748474121094);
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 99, ᐃ * 156.08035278320312);
		Ⲇ.rotate(.84);
		ᐃΔⵠ(Ⲇ, -18 * ᐃ, ᐃ * -18, 36 * ᐃ, 36 * ᐃ, 7 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆΔⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(98 * ᐃ, 136.08035278320312 * ᐃ);
		Ⲇ.bezierCurveTo(98 * ᐃ, 156.08035278320312 * ᐃ, 98 * ᐃ, ᐃ * 156.08035278320312, ᐃ * 98, ᐃ * 176.08035278320312);
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.save();
		Ⲇ.translate(54 * ᐃ, ᐃ * 72.22320556640625);
		Ⲇ.rotate(1.32);
		ᐃΔⵠ(Ⲇ, -ⲆⲆⲆⲆⲆ * ᐃ, ᐃ * -ⵠⵠΔⵠⲆΔΔ, ᐃ * 36, ᐃ * 38, ᐃ * ΔΔⵠΔⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔⵠΔ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(34 * ᐃ, ᐃ * 60.79463195800781);
		Ⲇ.bezierCurveTo(ᐃ * 53.5, ᐃ * 72.29463195800781, ᐃ * 69, 79.79463195800781 * ᐃ, 73 * ᐃ, ᐃ * 83.79463195800781);
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠΔⵠ]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 49, ᐃ * 127.29463195800781);
		Ⲇ.rotate(1.76);
		ᐃΔⵠ(Ⲇ, -ⲆᐃΔᐃⵠ * ᐃ, -17.5 * ᐃ, ᐃ * 40, ᐃ * 35, ⲆΔⲆⵠⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 30, ᐃ * 141.7946319580078);
		Ⲇ.bezierCurveTo(ᐃ * 47, 130.2946319580078 * ᐃ, ᐃ * 64, ᐃ * 119.79463195800781, ᐃ * 64, 118.79463195800781 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆⲆ]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(0, -ᐃⵠᐃⵠⲆ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 98, 41.15177917480469 * ᐃ);
		Ⲇ.rotate(.8);
		ᐃΔⵠ(Ⲇ, ᐃ * -ⵠᐃᐃⲆⲆ, -16.5 * ᐃ, 32 * ᐃ, ᐃ * 33, ⲆⵠⲆΔᐃ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃⲆ], Δⵠ[ⵠᐃΔⲆ], ᐃ * ⲆᐃⲆΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(98 * ᐃ, 22.5089111328125 * ᐃ);
		Ⲇ.bezierCurveTo(97.5 * ᐃ, ᐃ * 41.5089111328125, 97.5 * ᐃ, ᐃ * 41.5089111328125, ᐃ * 97, ᐃ * 60.5089111328125);
		ΔΔ(Ⲇ, ΔΔᐃⵠⵠ, Δⵠ[ᐃᐃⵠΔ], ᐃ * 5);
		Ⲇ.save();
		Ⲇ.translate(147.5 * ᐃ, 69.5089111328125 * ᐃ);
		Ⲇ.rotate(.2);
		ᐃΔⵠ(Ⲇ, -15.5 * ᐃ, ᐃ * -16, ᐃ * 31, ᐃ * 32, ᐃ * ᐃΔⵠᐃⲆᐃΔ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⲆ], Δⵠ[ᐃΔⵠⵠ], ᐃ * ΔⵠⲆᐃᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 163, 59.50892639160156 * ᐃ);
		Ⲇ.bezierCurveTo(147 * ᐃ, 69.50892639160156 * ᐃ, 127 * ᐃ, 82.50892639160156 * ᐃ, 131 * ᐃ, ᐃ * 79.50892639160156);
		ΔΔ(Ⲇ, ⵠⵠⲆΔⲆ, Δⵠ[4], ᐃ * ⲆⵠΔΔ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 143.5, ᐃ * 128.2946319580078);
		Ⲇ.rotate(1.24);
		ᐃΔⵠ(Ⲇ, -16.5 * ᐃ, ᐃ * -17.5, 33 * ᐃ, 35 * ᐃ, ᐃⲆⵠⵠⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⲆ], Δⵠ[ⵠⵠᐃΔ], ᐃᐃⵠᐃΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(162 * ᐃ, 135.93748474121094 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 143.5, 128.43748474121094 * ᐃ, ᐃ * 129, ᐃ * 120.93748474121094, ᐃ * 125, 120.93748474121094 * ᐃ);
		ΔΔ(Ⲇ, ⲆⲆⲆΔⲆ, Δⵠ[4], ⲆᐃⲆΔ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(99 * ᐃ, ᐃ * 156.08035278320312);
		Ⲇ.rotate(.84);
		ᐃΔⵠ(Ⲇ, -ΔⵠᐃᐃΔⲆᐃ * ᐃ, -18 * ᐃ, 36 * ᐃ, 36 * ᐃ, ᐃ * 7);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⲆ], Δⵠ[4], 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(98 * ᐃ, 136.08035278320312 * ᐃ);
		Ⲇ.bezierCurveTo(98 * ᐃ, 156.08035278320312 * ᐃ, ᐃ * 98, ᐃ * 156.08035278320312, 98 * ᐃ, 176.08035278320312 * ᐃ);
		ΔΔ(Ⲇ, Ⲇⵠⵠᐃᐃ, Δⵠ[ΔⵠⵠⲆ], ᐃ * 5);
		Ⲇ.save();
		Ⲇ.translate(54 * ᐃ, 72.22320556640625 * ᐃ);
		Ⲇ.rotate(1.32);
		ᐃΔⵠ(Ⲇ, ᐃ * -ⲆᐃᐃᐃΔⲆΔ, -ⵠᐃᐃᐃⵠⵠⵠ * ᐃ, ᐃ * 36, ᐃ * 38, 7 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔᐃⲆ], Δⵠ[4], 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 34, ᐃ * 60.79463195800781);
		Ⲇ.bezierCurveTo(53.5 * ᐃ, 72.29463195800781 * ᐃ, ᐃ * 69, 79.79463195800781 * ᐃ, ᐃ * 73, ᐃ * 83.79463195800781);
		ΔΔ(Ⲇ, undefined, Δⵠ[ⵠᐃᐃΔ], 5 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(49 * ᐃ, 127.29463195800781 * ᐃ);
		Ⲇ.rotate(1.76);
		ᐃΔⵠ(Ⲇ, -ⲆⵠⲆΔⲆ * ᐃ, ᐃ * -17.5, 40 * ᐃ, 35 * ᐃ, ᐃ * ⵠⵠⵠⵠⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃ * ⲆᐃⲆΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(30 * ᐃ, ᐃ * 141.7946319580078);
		Ⲇ.bezierCurveTo(47 * ᐃ, ᐃ * 130.2946319580078, 64 * ᐃ, ᐃ * 119.79463195800781, ᐃ * 64, ᐃ * 118.79463195800781);
		ΔΔ(Ⲇ, undefined, Δⵠ[ᐃⲆᐃⲆ], ΔⲆⲆⵠ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : Δⵠᐃ;
		Ⲇ.translate(ⵠΔᐃᐃ, ᐃ * ⵠΔΔⲆΔ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 98, ᐃ * 99);
		ᐃᐃⲆΔ(Ⲇ, ᐃⵠⲆᐃΔ, ᐃ * 70.28669492273468, ᐃ * ⵠⲆΔᐃᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠΔⵠ]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 98, ᐃ * 99);
		ᐃᐃⲆΔ(Ⲇ, 6, 56.455940020351264 * ᐃ, ᐃ * ⵠⲆⵠⵠⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔⵠΔ]);
		Ⲇ.globalAlpha = ΔⲆᐃᐃ;
		Ⲇ.translate(0, ᐃ * -ΔΔⵠᐃⵠ);
		Ⲇ.save();
		Ⲇ.translate(98 * ᐃ, 99 * ᐃ);
		ᐃᐃⲆΔ(Ⲇ, ΔΔΔⵠΔ, 70.28669492273468 * ᐃ, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[6], ᐃ * ΔⲆⵠⵠ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 98, ᐃ * 99);
		ᐃᐃⲆΔ(Ⲇ, 6, 56.455940020351264 * ᐃ, ⲆⲆⵠⲆⵠ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔΔᐃ], Δⵠ[Ⲇᐃⵠⵠᐃ], ᐃ * 7);
		return ΔⲆ
	}

	function ᐃⲆⲆⵠΔⵠΔΔᐃ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 147 * ᐃ;
		ΔⲆ.height = ᐃ * 172;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * ⵠᐃΔᐃΔ, 50 * ᐃ);
		Ⲇ.bezierCurveTo(15 * ᐃ, ⲆⲆⲆᐃΔ * ᐃ, 49 * ᐃ, 6 * ᐃ, ᐃ * 67, ΔᐃΔᐃᐃ * ᐃ);
		Ⲇ.bezierCurveTo(121 * ᐃ, ΔΔᐃΔ * ᐃ, ᐃ * 128, ᐃ * 32, 135 * ᐃ, 48 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 146, 96 * ᐃ, ᐃ * 124, 131 * ᐃ, ᐃ * 96, 135 * ᐃ);
		Ⲇ.bezierCurveTo(96 * ᐃ, 158 * ᐃ, ᐃ * 79, ᐃ * 156, 75 * ᐃ, ᐃ * 156);
		Ⲇ.bezierCurveTo(50 * ᐃ, ᐃ * 154, 53 * ᐃ, ᐃ * 150, ᐃ * 52, 135 * ᐃ);
		Ⲇ.bezierCurveTo(ΔΔⲆᐃ * ᐃ, 127 * ᐃ, 3 * ᐃ, 87 * ᐃ, ᐃ * 8, ᐃ * 50);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ, Δⵠ, ᐃ * ᐃᐃⵠΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 14, ᐃ * 57);
		Ⲇ.bezierCurveTo(2 * ᐃ, ᐃ * 50, ⵠⲆⲆᐃ * ᐃ, 22 * ᐃ, ᐃ * 24, 22 * ᐃ);
		Ⲇ.bezierCurveTo(41 * ᐃ, ᐃ * 21, ᐃ * 54, 32 * ᐃ, 55 * ᐃ, 48 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ, Δⵠ, ᐃ * ᐃⲆᐃⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 93, ᐃ * 47);
		Ⲇ.bezierCurveTo(ᐃ * 94, 24 * ᐃ, 116 * ᐃ, 21 * ᐃ, 120 * ᐃ, ΔⲆΔⲆΔ * ᐃ);
		Ⲇ.bezierCurveTo(144 * ᐃ, ᐃ * ⵠⲆᐃⵠⵠᐃⲆ, 146 * ᐃ, 52 * ᐃ, ᐃ * 133, ᐃ * 58);
		ΔΔ(Ⲇ, Δⵠ, Δⵠ, ᐃⲆᐃⲆ * ᐃ);
		return ΔⲆ
	}

	function ΔᐃⵠⲆᐃᐃⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 108 * ᐃ;
		ΔⲆ.height = 669 * ᐃ;
		Ⲇ.translate(ᐃ * 20, 20 * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.save();
		Ⲇ.translate(54 * ᐃ, ᐃ * 389.5);
		ᐃΔⵠ(Ⲇ, -15 * ᐃ, -228.5 * ᐃ, 30 * ᐃ, ᐃ * 457, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 35, 579 * ᐃ);
		Ⲇ.bezierCurveTo(47 * ᐃ, ᐃ * 587, ᐃ * 61, 584 * ᐃ, ᐃ * 71, ᐃ * 579);
		Ⲇ.bezierCurveTo(ᐃ * 75, 597.5 * ᐃ, ᐃ * 75, ᐃ * 597.5, 79 * ᐃ, 616 * ᐃ);
		Ⲇ.bezierCurveTo(66.5 * ᐃ, ᐃ * 628, ᐃ * 66.5, 628 * ᐃ, ᐃ * 54, ᐃ * 640);
		Ⲇ.bezierCurveTo(ᐃ * 41, 628.5 * ᐃ, 41 * ᐃ, 628.5 * ᐃ, 28 * ᐃ, 617 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(30 * ᐃ, ᐃ * 141);
		Ⲇ.bezierCurveTo(ᐃ * 40, 136 * ᐃ, 40 * ᐃ, 136 * ᐃ, 50 * ᐃ, ᐃ * 131);
		Ⲇ.bezierCurveTo(ᐃ * 63, ᐃ * 136, 63 * ᐃ, ᐃ * 136, ᐃ * 76, 141 * ᐃ);
		Ⲇ.bezierCurveTo(72.5 * ᐃ, ᐃ * 161.5, 72.5 * ᐃ, ᐃ * 161.5, ᐃ * 69, ᐃ * 182);
		Ⲇ.bezierCurveTo(ᐃ * 61.5, ᐃ * 186.5, 61.5 * ᐃ, ᐃ * 186.5, ᐃ * 54, 191 * ᐃ);
		Ⲇ.bezierCurveTo(45 * ᐃ, ᐃ * 186.5, 45 * ᐃ, 186.5 * ᐃ, 36 * ᐃ, 182 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(42 * ᐃ, ᐃ * 152);
		Ⲇ.bezierCurveTo(ᐃ * 53, 152 * ᐃ, 53 * ᐃ, ᐃ * 152, 64 * ᐃ, ᐃ * 152);
		Ⲇ.bezierCurveTo(ᐃ * 62, ᐃ * 171, 62 * ᐃ, ᐃ * 176, 55 * ᐃ, 177 * ᐃ);
		Ⲇ.bezierCurveTo(42 * ᐃ, 176 * ᐃ, 45 * ᐃ, 174 * ᐃ, 42 * ᐃ, ᐃ * 152);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(52 * ᐃ, ᐃ * 28);
		Ⲇ.bezierCurveTo(67.5 * ᐃ, 55 * ᐃ, 67.5 * ᐃ, 55 * ᐃ, 83 * ᐃ, 82 * ᐃ);
		Ⲇ.bezierCurveTo(80 * ᐃ, ᐃ * 106.5, ᐃ * 80, ᐃ * 106.5, ᐃ * 77, 131 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 58, ᐃ * 147, 44 * ᐃ, ᐃ * 141, ᐃ * 29, ᐃ * 131);
		Ⲇ.bezierCurveTo(ᐃ * 26.5, ᐃ * 106.5, 26.5 * ᐃ, 106.5 * ᐃ, 24 * ᐃ, 82 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 53, 53 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 61, 70 * ᐃ, ᐃ * 61, 70 * ᐃ, 69 * ᐃ, 87 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 67, ᐃ * 106, 67 * ᐃ, ᐃ * 106, 65 * ᐃ, ᐃ * 125);
		Ⲇ.bezierCurveTo(ᐃ * 54, ᐃ * 130, ᐃ * 51, ᐃ * 130, 41 * ᐃ, ᐃ * 125);
		Ⲇ.bezierCurveTo(39 * ᐃ, 105 * ᐃ, 39 * ᐃ, ᐃ * 105, ᐃ * 37, 85 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠⵠΔ]);
		Ⲇ.translate(-20 * ᐃ, ᐃ * -ⲆⵠⲆⵠⲆⲆΔ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 54, ᐃ * 389.5);
		Ⲇ.rotate(ⵠⲆΔ);
		ᐃΔⵠ(Ⲇ, ᐃ * -ⵠᐃΔⵠᐃ, ᐃ * -228.5, 30 * ᐃ, ᐃ * 457, ᐃ * ⵠⵠΔⲆᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(35 * ᐃ, 579 * ᐃ);
		Ⲇ.bezierCurveTo(47 * ᐃ, ᐃ * 587, ᐃ * 61, ᐃ * 584, ᐃ * 71, 579 * ᐃ);
		Ⲇ.bezierCurveTo(75 * ᐃ, ᐃ * 597.5, 75 * ᐃ, 597.5 * ᐃ, ᐃ * 79, 616 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 66.5, ᐃ * 628, ᐃ * 66.5, ᐃ * 628, ᐃ * 54, ᐃ * 640);
		Ⲇ.bezierCurveTo(41 * ᐃ, ᐃ * 628.5, ᐃ * 41, ᐃ * 628.5, ᐃ * 28, 617 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[Ⲇⵠⵠⵠ], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 30, ᐃ * 141);
		Ⲇ.bezierCurveTo(ᐃ * 40, 136 * ᐃ, ᐃ * 40, 136 * ᐃ, ᐃ * 50, ᐃ * 131);
		Ⲇ.bezierCurveTo(63 * ᐃ, 136 * ᐃ, 63 * ᐃ, ᐃ * 136, 76 * ᐃ, ᐃ * 141);
		Ⲇ.bezierCurveTo(72.5 * ᐃ, 161.5 * ᐃ, ᐃ * 72.5, 161.5 * ᐃ, ᐃ * 69, ᐃ * 182);
		Ⲇ.bezierCurveTo(61.5 * ᐃ, 186.5 * ᐃ, ᐃ * 61.5, 186.5 * ᐃ, ᐃ * 54, 191 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 45, ᐃ * 186.5, 45 * ᐃ, ᐃ * 186.5, ᐃ * 36, 182 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃⲆⵠᐃⵠ], ⲆᐃⲆΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 42, 152 * ᐃ);
		Ⲇ.bezierCurveTo(53 * ᐃ, 152 * ᐃ, 53 * ᐃ, 152 * ᐃ, 64 * ᐃ, ᐃ * 152);
		Ⲇ.bezierCurveTo(62 * ᐃ, ᐃ * 171, ᐃ * 62, 176 * ᐃ, ᐃ * 55, ᐃ * 177);
		Ⲇ.bezierCurveTo(42 * ᐃ, ᐃ * 176, 45 * ᐃ, 174 * ᐃ, ᐃ * 42, 152 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔⲆⲆⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(52 * ᐃ, ᐃ * 28);
		Ⲇ.bezierCurveTo(67.5 * ᐃ, 55 * ᐃ, 67.5 * ᐃ, ᐃ * 55, ᐃ * 83, 82 * ᐃ);
		Ⲇ.bezierCurveTo(80 * ᐃ, ᐃ * 106.5, ᐃ * 80, 106.5 * ᐃ, 77 * ᐃ, ᐃ * 131);
		Ⲇ.bezierCurveTo(58 * ᐃ, ᐃ * 147, ᐃ * 44, 141 * ᐃ, ᐃ * 29, ᐃ * 131);
		Ⲇ.bezierCurveTo(ᐃ * 26.5, ᐃ * 106.5, 26.5 * ᐃ, 106.5 * ᐃ, ᐃ * 24, ᐃ * 82);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[7], ᐃ * Δᐃᐃⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(53 * ᐃ, 53 * ᐃ);
		Ⲇ.bezierCurveTo(61 * ᐃ, 70 * ᐃ, 61 * ᐃ, ᐃ * 70, ᐃ * 69, 87 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 67, 106 * ᐃ, 67 * ᐃ, ᐃ * 106, ᐃ * 65, ᐃ * 125);
		Ⲇ.bezierCurveTo(54 * ᐃ, 130 * ᐃ, 51 * ᐃ, ᐃ * 130, 41 * ᐃ, 125 * ᐃ);
		Ⲇ.bezierCurveTo(39 * ᐃ, 105 * ᐃ, 39 * ᐃ, 105 * ᐃ, 37 * ᐃ, ᐃ * 85);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠⵠᐃ]);
		return ΔⲆ
	}

	function ⲆⵠΔⵠΔᐃΔ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 137;
		ΔⲆ.height = 129 * ᐃ;
		Ⲇ.globalAlpha = .4;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 42.000030517578125, ᐃ * 41.17047119140625);
		Ⲇ.bezierCurveTo(ᐃ * 45.000030517578125, ᐃ * 38.17047119140625, ᐃ * 49.000030517578125, 37.17047119140625 * ᐃ, ᐃ * 62.000030517578125, ᐃ * 38.17047119140625);
		Ⲇ.bezierCurveTo(78.00003051757812 * ᐃ, ᐃ * 38.17047119140625, ᐃ * 78.00003051757812, ᐃ * 38.17047119140625, ᐃ * 94.00003051757812, ᐃ * 38.17047119140625);
		Ⲇ.bezierCurveTo(100.00003051757812 * ᐃ, 38.17047119140625 * ᐃ, 102.00003051757812 * ᐃ, ᐃ * 38.17047119140625, 101.00003051757812 * ᐃ, ᐃ * 47.17047119140625);
		Ⲇ.bezierCurveTo(ᐃ * 101.00003051757812, 63.67047119140625 * ᐃ, ᐃ * 101.00003051757812, ᐃ * 63.67047119140625, 101.00003051757812 * ᐃ, ᐃ * 80.17047119140625);
		Ⲇ.bezierCurveTo(ᐃ * 102.00003051757812, 84.17047119140625 * ᐃ, 100.00003051757812 * ᐃ, 86.17047119140625 * ᐃ, ᐃ * 95.00003051757812, 88.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(84.00003051757812 * ᐃ, ᐃ * 94.17047119140625, 89.00003051757812 * ᐃ, 94.17047119140625 * ᐃ, 79.00003051757812 * ᐃ, 94.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(59.500030517578125 * ᐃ, 94.17047119140625 * ᐃ, ᐃ * 59.500030517578125, ᐃ * 94.17047119140625, 40.000030517578125 * ᐃ, ᐃ * 94.17047119140625);
		Ⲇ.bezierCurveTo(ᐃ * 33.000030517578125, ᐃ * 94.17047119140625, 34.000030517578125 * ᐃ, 94.17047119140625 * ᐃ, 34.000030517578125 * ᐃ, 86.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(34.000030517578125 * ᐃ, 69.67047119140625 * ᐃ, 34.000030517578125 * ᐃ, ᐃ * 69.67047119140625, 34.000030517578125 * ᐃ, 53.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(33.000030517578125 * ᐃ, ᐃ * 47.17047119140625, ᐃ * 34.000030517578125, ᐃ * 47.17047119140625, ᐃ * 40.000030517578125, ᐃ * 42.17047119140625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[2], ᐃ * 40);
		Ⲇ.globalAlpha = .4;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(42.000030517578125 * ᐃ, 41.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 45.000030517578125, 38.17047119140625 * ᐃ, ᐃ * 49.000030517578125, 37.17047119140625 * ᐃ, 62.000030517578125 * ᐃ, 38.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 78.00003051757812, ᐃ * 38.17047119140625, 78.00003051757812 * ᐃ, 38.17047119140625 * ᐃ, 94.00003051757812 * ᐃ, 38.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(100.00003051757812 * ᐃ, ᐃ * 38.17047119140625, 102.00003051757812 * ᐃ, 38.17047119140625 * ᐃ, ᐃ * 101.00003051757812, ᐃ * 47.17047119140625);
		Ⲇ.bezierCurveTo(101.00003051757812 * ᐃ, 63.67047119140625 * ᐃ, ᐃ * 101.00003051757812, 63.67047119140625 * ᐃ, 101.00003051757812 * ᐃ, ᐃ * 80.17047119140625);
		Ⲇ.bezierCurveTo(ᐃ * 102.00003051757812, ᐃ * 84.17047119140625, ᐃ * 100.00003051757812, 86.17047119140625 * ᐃ, 95.00003051757812 * ᐃ, ᐃ * 88.17047119140625);
		Ⲇ.bezierCurveTo(84.00003051757812 * ᐃ, 94.17047119140625 * ᐃ, 89.00003051757812 * ᐃ, 94.17047119140625 * ᐃ, ᐃ * 79.00003051757812, 94.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(59.500030517578125 * ᐃ, ᐃ * 94.17047119140625, ᐃ * 59.500030517578125, ᐃ * 94.17047119140625, 40.000030517578125 * ᐃ, ᐃ * 94.17047119140625);
		Ⲇ.bezierCurveTo(33.000030517578125 * ᐃ, 94.17047119140625 * ᐃ, 34.000030517578125 * ᐃ, ᐃ * 94.17047119140625, ᐃ * 34.000030517578125, 86.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 34.000030517578125, ᐃ * 69.67047119140625, 34.000030517578125 * ᐃ, 69.67047119140625 * ᐃ, ᐃ * 34.000030517578125, ᐃ * 53.17047119140625);
		Ⲇ.bezierCurveTo(ᐃ * 33.000030517578125, ᐃ * 47.17047119140625, ᐃ * 34.000030517578125, 47.17047119140625 * ᐃ, 40.000030517578125 * ᐃ, 42.17047119140625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠⵠⲆΔⲆ, Δⵠ[1], ᐃ * ᐃᐃⲆΔⵠ);
		Ⲇ.globalAlpha = .8;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 42.000030517578125, 41.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 45.000030517578125, 38.17047119140625 * ᐃ, 49.000030517578125 * ᐃ, 37.17047119140625 * ᐃ, ᐃ * 62.000030517578125, ᐃ * 38.17047119140625);
		Ⲇ.bezierCurveTo(78.00003051757812 * ᐃ, ᐃ * 38.17047119140625, ᐃ * 78.00003051757812, 38.17047119140625 * ᐃ, 94.00003051757812 * ᐃ, ᐃ * 38.17047119140625);
		Ⲇ.bezierCurveTo(ᐃ * 100.00003051757812, 38.17047119140625 * ᐃ, 102.00003051757812 * ᐃ, 38.17047119140625 * ᐃ, ᐃ * 101.00003051757812, 47.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 101.00003051757812, 63.67047119140625 * ᐃ, ᐃ * 101.00003051757812, 63.67047119140625 * ᐃ, ᐃ * 101.00003051757812, 80.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(102.00003051757812 * ᐃ, 84.17047119140625 * ᐃ, 100.00003051757812 * ᐃ, ᐃ * 86.17047119140625, 95.00003051757812 * ᐃ, ᐃ * 88.17047119140625);
		Ⲇ.bezierCurveTo(ᐃ * 84.00003051757812, ᐃ * 94.17047119140625, 89.00003051757812 * ᐃ, 94.17047119140625 * ᐃ, ᐃ * 79.00003051757812, ᐃ * 94.17047119140625);
		Ⲇ.bezierCurveTo(59.500030517578125 * ᐃ, 94.17047119140625 * ᐃ, 59.500030517578125 * ᐃ, ᐃ * 94.17047119140625, ᐃ * 40.000030517578125, 94.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 33.000030517578125, ᐃ * 94.17047119140625, 34.000030517578125 * ᐃ, 94.17047119140625 * ᐃ, 34.000030517578125 * ᐃ, ᐃ * 86.17047119140625);
		Ⲇ.bezierCurveTo(ᐃ * 34.000030517578125, ᐃ * 69.67047119140625, 34.000030517578125 * ᐃ, ᐃ * 69.67047119140625, 34.000030517578125 * ᐃ, 53.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 33.000030517578125, 47.17047119140625 * ᐃ, ᐃ * 34.000030517578125, ᐃ * 47.17047119140625, 40.000030517578125 * ᐃ, ᐃ * 42.17047119140625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ], Δⵠ[ᐃⲆΔ], ᐃ * ⵠᐃΔΔ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(51.000030517578125 * ᐃ, ᐃ * 37.9886474609375);
		Ⲇ.bezierCurveTo(ᐃ * 51.000030517578125, ᐃ * 61.9886474609375, 51.000030517578125 * ᐃ, 61.9886474609375 * ᐃ, ᐃ * 51.000030517578125, ᐃ * 85.9886474609375);
		Ⲇ.bezierCurveTo(75.50003051757812 * ᐃ, ᐃ * 85.9886474609375, ᐃ * 75.50003051757812, 85.9886474609375 * ᐃ, 100.00003051757812 * ᐃ, 85.9886474609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 100.00003051757812, ᐃ * 61.9886474609375, ᐃ * 100.00003051757812, ᐃ * 61.9886474609375, ᐃ * 100.00003051757812, ᐃ * 37.9886474609375);
		Ⲇ.bezierCurveTo(ᐃ * 76.00003051757812, ᐃ * 37.9886474609375, 76.00003051757812 * ᐃ, 37.9886474609375 * ᐃ, 52.000030517578125 * ᐃ, ᐃ * 37.9886474609375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * ⵠⲆΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 99.00003051757812, 38.9886474609375 * ᐃ);
		Ⲇ.bezierCurveTo(93.50003051757812 * ᐃ, ᐃ * 44.9886474609375, 93.50003051757812 * ᐃ, 44.9886474609375 * ᐃ, ᐃ * 88.00003051757812, ᐃ * 50.9886474609375);
		Ⲇ.bezierCurveTo(ᐃ * 88.00003051757812, ᐃ * 72.4886474609375, 88.00003051757812 * ᐃ, ᐃ * 72.4886474609375, 88.00003051757812 * ᐃ, ᐃ * 93.9886474609375);
		Ⲇ.bezierCurveTo(94.00003051757812 * ᐃ, 90.4886474609375 * ᐃ, 94.00003051757812 * ᐃ, ᐃ * 90.4886474609375, 100.00003051757812 * ᐃ, ᐃ * 86.9886474609375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃⲆⲆΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(87.00003051757812 * ᐃ, ᐃ * 49.625);
		Ⲇ.bezierCurveTo(ᐃ * 61.000030517578125, ᐃ * 49.625, 61.000030517578125 * ᐃ, ᐃ * 49.625, ᐃ * 35.000030517578125, 49.625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 35.000030517578125, 70.625 * ᐃ, 35.000030517578125 * ᐃ, ᐃ * 70.625, ᐃ * 35.000030517578125, 91.625 * ᐃ);
		Ⲇ.bezierCurveTo(60.500030517578125 * ᐃ, ᐃ * 91.625, 60.500030517578125 * ᐃ, ᐃ * 91.625, 86.00003051757812 * ᐃ, 91.625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 86.50003051757812, 70.625 * ᐃ, ᐃ * 86.50003051757812, ᐃ * 70.625, ᐃ * 87.00003051757812, 49.625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔⵠΔ], Δⵠ[3], ᐃ * ⲆᐃᐃΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 47.000030517578125, ᐃ * 36.625);
		Ⲇ.bezierCurveTo(ᐃ * 73.00003051757812, 37.125 * ᐃ, 73.00003051757812 * ᐃ, ᐃ * 37.125, 99.00003051757812 * ᐃ, ᐃ * 37.625);
		Ⲇ.bezierCurveTo(ᐃ * 93.50003051757812, ᐃ * 44.125, 93.50003051757812 * ᐃ, 44.125 * ᐃ, 88.00003051757812 * ᐃ, ᐃ * 50.625);
		Ⲇ.bezierCurveTo(60.500030517578125 * ᐃ, 50.125 * ᐃ, 60.500030517578125 * ᐃ, ᐃ * 50.125, ᐃ * 33.000030517578125, ᐃ * 49.625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[3], ΔⵠⵠⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 53.000030517578125, ᐃ * 52.625);
		Ⲇ.bezierCurveTo(40.000030517578125 * ᐃ, 54.625 * ᐃ, 39.000030517578125 * ᐃ, 59.625 * ᐃ, 40.000030517578125 * ᐃ, 67.625 * ᐃ);
		Ⲇ.bezierCurveTo(45.000030517578125 * ᐃ, 59.625 * ᐃ, 48.000030517578125 * ᐃ, 58.625 * ᐃ, ᐃ * 54.000030517578125, 53.625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.globalAlpha = ⵠᐃⵠΔ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(42.000030517578125 * ᐃ, 41.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 45.000030517578125, 38.17047119140625 * ᐃ, ᐃ * 49.000030517578125, 37.17047119140625 * ᐃ, 62.000030517578125 * ᐃ, ᐃ * 38.17047119140625);
		Ⲇ.bezierCurveTo(78.00003051757812 * ᐃ, ᐃ * 38.17047119140625, 78.00003051757812 * ᐃ, ᐃ * 38.17047119140625, 94.00003051757812 * ᐃ, 38.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 100.00003051757812, ᐃ * 38.17047119140625, 102.00003051757812 * ᐃ, ᐃ * 38.17047119140625, 101.00003051757812 * ᐃ, 47.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(101.00003051757812 * ᐃ, 63.67047119140625 * ᐃ, ᐃ * 101.00003051757812, 63.67047119140625 * ᐃ, ᐃ * 101.00003051757812, 80.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(102.00003051757812 * ᐃ, ᐃ * 84.17047119140625, ᐃ * 100.00003051757812, ᐃ * 86.17047119140625, 95.00003051757812 * ᐃ, 88.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(84.00003051757812 * ᐃ, 94.17047119140625 * ᐃ, ᐃ * 89.00003051757812, 94.17047119140625 * ᐃ, 79.00003051757812 * ᐃ, 94.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(59.500030517578125 * ᐃ, 94.17047119140625 * ᐃ, ᐃ * 59.500030517578125, 94.17047119140625 * ᐃ, ᐃ * 40.000030517578125, 94.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(33.000030517578125 * ᐃ, ᐃ * 94.17047119140625, 34.000030517578125 * ᐃ, 94.17047119140625 * ᐃ, ᐃ * 34.000030517578125, ᐃ * 86.17047119140625);
		Ⲇ.bezierCurveTo(34.000030517578125 * ᐃ, ᐃ * 69.67047119140625, 34.000030517578125 * ᐃ, 69.67047119140625 * ᐃ, ᐃ * 34.000030517578125, 53.17047119140625 * ᐃ);
		Ⲇ.bezierCurveTo(33.000030517578125 * ᐃ, ᐃ * 47.17047119140625, 34.000030517578125 * ᐃ, ᐃ * 47.17047119140625, ᐃ * 40.000030517578125, ᐃ * 42.17047119140625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆⲆⵠⵠᐃ, Δⵠ[ΔⲆⵠᐃ], 4 * ᐃ);
		return ΔⲆ
	}

	function ⵠⵠᐃⲆᐃΔⵠ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 253 * ᐃ;
		ΔⲆ.height = 260 * ᐃ;
		Ⲇ.globalAlpha = .5;
		ᐃΔΔ(Ⲇ, 126.5 * ᐃ, ᐃ * 134, ᐃ * 119);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃⲆ]);
		Ⲇ.globalAlpha = 1;
		ᐃΔΔ(Ⲇ, 126.5 * ᐃ, 124 * ᐃ, 119 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔΔⲆⲆ], 4 * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 126.5, ᐃ * 127, 100 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[3]);
		Ⲇ.globalAlpha = .5;
		ᐃΔΔ(Ⲇ, ᐃ * 126.5, 135 * ᐃ, ᐃ * 81);
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃᐃ]);
		Ⲇ.globalAlpha = 1;
		ᐃΔΔ(Ⲇ, ᐃ * 126.5, ᐃ * 125, ᐃ * 84);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃΔΔᐃ], Δⵠ[ⲆⵠΔΔ], ⵠⵠᐃΔ * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 126.5, ᐃ * 125, 61 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[6], Δⵠ[7], ᐃᐃⵠΔ * ᐃ);
		Ⲇ.globalAlpha = .5;
		ᐃΔΔ(Ⲇ, 126.5 * ᐃ, 134 * ᐃ, ᐃ * 40);
		ΔΔ(Ⲇ, Δⵠ[ᐃΔΔᐃΔ]);
		Ⲇ.globalAlpha = 1;
		ᐃΔΔ(Ⲇ, ᐃ * 126.5, ᐃ * 125, ᐃ * 40);
		ΔΔ(Ⲇ, Δⵠ[ᐃΔⵠⵠⲆ]);
		return ΔⲆ
	}

	function ⵠⵠⵠΔⵠⵠΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 145 * ᐃ;
		ΔⲆ.height = 120 * ᐃ;
		Ⲇ.beginPath();
		Ⲇ.scale(.6, .6);
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.translate(18 * ᐃ, -8 * ᐃ);
		Ⲇ.moveTo(101 * ᐃ, 72 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 144, ᐃ * 69, ᐃ * 149, ᐃ * 58, 162 * ᐃ, ᐃ * 49);
		Ⲇ.bezierCurveTo(174 * ᐃ, 31 * ᐃ, ᐃ * 173, 38 * ᐃ, ᐃ * 172, 45 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 168, 73 * ᐃ, ᐃ * 158, ᐃ * 75, 152 * ᐃ, ᐃ * 78);
		Ⲇ.bezierCurveTo(106 * ᐃ, 89 * ᐃ, ᐃ * 107, ᐃ * 91, 107 * ᐃ, 94 * ᐃ);
		Ⲇ.bezierCurveTo(107 * ᐃ, ᐃ * 100, ᐃ * 107, 107 * ᐃ, ᐃ * 107, 107 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 99, 112 * ᐃ, 98 * ᐃ, ᐃ * 110, ᐃ * 93, ᐃ * 107);
		Ⲇ.bezierCurveTo(94 * ᐃ, 107 * ᐃ, 93 * ᐃ, ᐃ * 107, 93 * ᐃ, ᐃ * 107);
		Ⲇ.bezierCurveTo(ᐃ * 93, ᐃ * ᐃⲆΔⲆᐃ, ᐃ * 93, 100 * ᐃ, ᐃ * 92, ᐃ * 94);
		Ⲇ.bezierCurveTo(ᐃ * 92, ᐃ * 89, ᐃ * 90, 90 * ᐃ, 73 * ᐃ, ᐃ * 86);
		Ⲇ.bezierCurveTo(ᐃ * 45, 81 * ᐃ, ᐃ * 40, 77 * ᐃ, 35 * ᐃ, 68 * ᐃ);
		Ⲇ.bezierCurveTo(23 * ᐃ, 36 * ᐃ, 28 * ᐃ, 34 * ᐃ, ᐃ * 36, ᐃ * 46);
		Ⲇ.bezierCurveTo(45 * ᐃ, 58 * ᐃ, ᐃ * 83, ᐃ * 72, 98 * ᐃ, 72 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.scale(1.1, 1.1);
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.translate(-ᐃΔⲆⲆⵠ * ᐃ, ᐃ * ᐃᐃⵠΔ);
		Ⲇ.moveTo(ᐃ * 101, ᐃ * 72);
		Ⲇ.bezierCurveTo(144 * ᐃ, ᐃ * 69, ᐃ * 149, ᐃ * 58, ᐃ * 162, 49 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 174, ᐃ * 31, ᐃ * 173, 38 * ᐃ, 172 * ᐃ, ᐃ * 45);
		Ⲇ.bezierCurveTo(ᐃ * 168, ᐃ * 73, ᐃ * 158, 75 * ᐃ, 152 * ᐃ, ᐃ * 78);
		Ⲇ.bezierCurveTo(ᐃ * 106, 89 * ᐃ, ᐃ * 107, 91 * ᐃ, ᐃ * 107, ᐃ * 94);
		Ⲇ.bezierCurveTo(ᐃ * 107, ᐃ * ⵠⵠⲆᐃⲆ, 107 * ᐃ, 107 * ᐃ, ᐃ * 107, 107 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 99, 112 * ᐃ, 98 * ᐃ, 110 * ᐃ, 93 * ᐃ, ᐃ * 107);
		Ⲇ.bezierCurveTo(94 * ᐃ, 107 * ᐃ, 93 * ᐃ, ᐃ * 107, ᐃ * 93, ᐃ * 107);
		Ⲇ.bezierCurveTo(93 * ᐃ, ᐃ * 100, 93 * ᐃ, ⲆⵠⲆⲆⵠ * ᐃ, ᐃ * 92, 94 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 92, 89 * ᐃ, 90 * ᐃ, 90 * ᐃ, 73 * ᐃ, 86 * ᐃ);
		Ⲇ.bezierCurveTo(45 * ᐃ, ᐃ * 81, 40 * ᐃ, 77 * ᐃ, 35 * ᐃ, ᐃ * 68);
		Ⲇ.bezierCurveTo(23 * ᐃ, 36 * ᐃ, 28 * ᐃ, 34 * ᐃ, ᐃ * 36, 46 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 45, ᐃ * 58, 83 * ᐃ, 72 * ᐃ, 98 * ᐃ, 72 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], ᐃ * Ⲇⵠⵠⵠ);
		Ⲇ.scale(1.1, 1.1);
		Ⲇ.translate(-ⵠⲆⵠΔⵠ * ᐃ, ᐃ * 4);
		Ⲇ.save();
		Ⲇ.translate(100 * ᐃ, ᐃ * 73.06874084472656);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, -61 * ᐃ, -38.5 * ᐃ, 122 * ᐃ, ᐃ * 40, ᐃ * ⵠᐃⲆⵠⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], 4 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ⵠᐃⵠΔⵠⵠᐃ * ᐃ, 71.36874389648438 * ᐃ);
		Ⲇ.rotate(ⵠΔᐃⵠ);
		ᐃΔⵠ(Ⲇ, ᐃ * -60.5, ᐃ * -ᐃⲆⲆⵠᐃ, ᐃ * 121, ᐃ * 30, 20 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔᐃ], Δⵠ[2], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(144 * ᐃ, ᐃ * 80);
		Ⲇ.bezierCurveTo(152 * ᐃ, ᐃ * ᐃⵠΔᐃⵠ, ᐃ * 152, ᐃ * 101, 153 * ᐃ, 102 * ᐃ);
		Ⲇ.bezierCurveTo(159 * ᐃ, 100 * ᐃ, 159 * ᐃ, ⵠⵠⲆᐃⲆ * ᐃ, 160 * ᐃ, ᐃ * ⲆⵠⲆⲆⵠ);
		Ⲇ.bezierCurveTo(161 * ᐃ, 84 * ᐃ, 161 * ᐃ, 84 * ᐃ, ᐃ * 162, 68 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 57, 75 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 48, ᐃ * 101, ᐃ * 53, 89 * ᐃ, ᐃ * 48, ᐃ * 102);
		Ⲇ.bezierCurveTo(ᐃ * 44, ᐃ * 100, ᐃ * 44, ᐃ * 100, ᐃ * 39, ᐃ * 97);
		Ⲇ.bezierCurveTo(39 * ᐃ, 83 * ᐃ, ᐃ * 39, 83 * ᐃ, ᐃ * 39, 69 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(101 * ᐃ, 72 * ᐃ);
		Ⲇ.bezierCurveTo(144 * ᐃ, 69 * ᐃ, 149 * ᐃ, ᐃ * 58, ᐃ * 162, ᐃ * 49);
		Ⲇ.bezierCurveTo(174 * ᐃ, 31 * ᐃ, ᐃ * 173, 38 * ᐃ, 172 * ᐃ, ᐃ * 45);
		Ⲇ.bezierCurveTo(168 * ᐃ, ᐃ * 73, 158 * ᐃ, ᐃ * 75, ᐃ * 152, 78 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 106, 89 * ᐃ, ᐃ * 107, ᐃ * 91, ᐃ * 107, 94 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 107, ᐃ * ᐃⲆΔⲆᐃ, ᐃ * 107, 107 * ᐃ, ᐃ * 107, 107 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 99, 112 * ᐃ, ᐃ * 98, ᐃ * 110, ᐃ * 93, ᐃ * 107);
		Ⲇ.bezierCurveTo(ᐃ * 94, ᐃ * 107, ᐃ * 93, 107 * ᐃ, 93 * ᐃ, 107 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 93, 100 * ᐃ, ᐃ * 93, ᐃ * 100, 92 * ᐃ, ᐃ * 94);
		Ⲇ.bezierCurveTo(ᐃ * 92, 89 * ᐃ, ᐃ * 90, 90 * ᐃ, ᐃ * 73, ᐃ * 86);
		Ⲇ.bezierCurveTo(ᐃ * 45, ᐃ * 81, 40 * ᐃ, 77 * ᐃ, 35 * ᐃ, ᐃ * 68);
		Ⲇ.bezierCurveTo(ᐃ * 23, ᐃ * 36, 28 * ᐃ, 34 * ᐃ, ᐃ * 36, 46 * ᐃ);
		Ⲇ.bezierCurveTo(45 * ᐃ, 58 * ᐃ, 83 * ᐃ, ᐃ * 72, ᐃ * 98, ᐃ * 72);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[5], ᐃ * 4);
		Ⲇ.translate(0, ⵠⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 115.5, 116.07290649414062 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 159.5, 99.07290649414062 * ᐃ, ᐃ * 159.5, ᐃ * 98.07290649414062, 159.5 * ᐃ, ᐃ * 98.07290649414062);
		Ⲇ.bezierCurveTo(ᐃ * 155.5, ᐃ * 116.07290649414062, 159.5 * ᐃ, ᐃ * 116.07290649414062, 159.5 * ᐃ, 118.07290649414062 * ᐃ);
		Ⲇ.bezierCurveTo(147.5 * ᐃ, 130.07290649414062 * ᐃ, ᐃ * 136.5, ᐃ * 132.07290649414062, ᐃ * 115.5, 138.07290649414062 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔᐃⵠΔ], ⵠᐃΔΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 39.5, ᐃ * 96.07290649414062);
		Ⲇ.bezierCurveTo(85.5 * ᐃ, 114.07290649414062 * ᐃ, ᐃ * 62.5, ᐃ * 105.57290649414062, 85.5 * ᐃ, ᐃ * 115.07290649414062);
		Ⲇ.bezierCurveTo(85.5 * ᐃ, 125.57290649414062 * ᐃ, 85.5 * ᐃ, 125.57290649414062 * ᐃ, ᐃ * 85.5, ᐃ * 136.07290649414062);
		Ⲇ.bezierCurveTo(ᐃ * 51.5, 129.07290649414062 * ᐃ, ᐃ * 51.5, ᐃ * 125.07290649414062, ᐃ * 41.5, ᐃ * 118.07290649414062);
		Ⲇ.bezierCurveTo(ᐃ * 44.5, ᐃ * 106.07290649414062, ᐃ * 42.5, ᐃ * 103.07290649414062, 40.5 * ᐃ, ᐃ * 96.07290649414062);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔΔΔⵠ], ᐃ * 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(86 * ᐃ, 80 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 97, 88 * ᐃ, ᐃ * 106, ᐃ * 84, ᐃ * 112, ᐃ * 80);
		Ⲇ.bezierCurveTo(112 * ᐃ, 62 * ᐃ, ᐃ * 106, ᐃ * 59, ᐃ * 99, 54 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 86, 62 * ᐃ, ᐃ * 86, 73 * ᐃ, ᐃ * 86, 80 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔΔⲆⲆ], ᐃ * 4);
		Ⲇ.scale(.5, .5);
		Ⲇ.translate(ᐃ * ΔᐃⲆⲆⲆ, 71 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 86, ᐃ * 80);
		Ⲇ.bezierCurveTo(97 * ᐃ, ᐃ * 88, ᐃ * 106, ᐃ * 84, 112 * ᐃ, 80 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 112, 62 * ᐃ, 106 * ᐃ, ᐃ * 59, ᐃ * 99, 54 * ᐃ);
		Ⲇ.bezierCurveTo(86 * ᐃ, 62 * ᐃ, 86 * ᐃ, ᐃ * 73, ᐃ * 86, 80 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠⵠⵠⲆ], Δⵠ[ΔΔⲆⲆ], ᐃ * 4);
		return ΔⲆ
	}

	function ΔⲆⲆⲆᐃⲆᐃΔⵠ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 316 * ᐃ;
		ΔⲆ.height = 365 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(156.07142639160156 * ᐃ, 51.81248474121094 * ᐃ);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, -21.5 * ᐃ, -34 * ᐃ, ᐃ * 43, ᐃ * 68, 8 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠᐃⲆⲆ], ᐃ * ⲆⵠᐃⵠⵠⲆᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(126.57142639160156 * ᐃ, ᐃ * 67.38392639160156);
		Ⲇ.bezierCurveTo(ᐃ * 126.57142639160156, ᐃ * 57.38392639160156, ᐃ * 132.57142639160156, ᐃ * 54.38392639160156, ᐃ * 140.57142639160156, ᐃ * 54.38392639160156);
		Ⲇ.bezierCurveTo(ᐃ * 177.57142639160156, ᐃ * 55.38392639160156, ᐃ * 158.07142639160156, ᐃ * 54.38392639160156, ᐃ * 175.57142639160156, 54.38392639160156 * ᐃ);
		Ⲇ.bezierCurveTo(185.57142639160156 * ᐃ, ᐃ * 56.38392639160156, 185.57142639160156 * ᐃ, ᐃ * 57.38392639160156, 184.57142639160156 * ᐃ, ᐃ * 66.38392639160156);
		Ⲇ.bezierCurveTo(ᐃ * 184.57142639160156, 78.38392639160156 * ᐃ, ᐃ * 184.57142639160156, ᐃ * 89.38392639160156, ᐃ * 184.57142639160156, ᐃ * 90.38392639160156);
		Ⲇ.bezierCurveTo(177.57142639160156 * ᐃ, ᐃ * 107.38392639160156, ᐃ * 180.57142639160156, 112.38392639160156 * ᐃ, 189.57142639160156 * ᐃ, ᐃ * 116.38392639160156);
		Ⲇ.bezierCurveTo(212.57142639160156 * ᐃ, ᐃ * 127.38392639160156, ᐃ * 212.57142639160156, ᐃ * 132.38392639160156, 211.57142639160156 * ᐃ, ᐃ * 150.38392639160156);
		Ⲇ.bezierCurveTo(211.57142639160156 * ᐃ, ᐃ * 227.59821128845215, ᐃ * 211.57142639160156, 227.59821128845215 * ᐃ, 211.57142639160156 * ᐃ, 304.81249618530273 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 212.57142639160156, 328.81249618530273 * ᐃ, 209.57142639160156 * ᐃ, ᐃ * 330.81249618530273, ᐃ * 188.57142639160156, 333.81249618530273 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 155.07142639160156, 333.31249618530273 * ᐃ, ᐃ * 155.07142639160156, ᐃ * 333.31249618530273, ᐃ * 121.57142639160156, ᐃ * 332.81249618530273);
		Ⲇ.bezierCurveTo(ᐃ * 104.57142639160156, 327.81249618530273 * ᐃ, ᐃ * 105.57142639160156, ᐃ * 328.81249618530273, 104.57142639160156 * ᐃ, ᐃ * 312.81249618530273);
		Ⲇ.bezierCurveTo(ᐃ * 104.57142639160156, ᐃ * 228.16963958740234, 104.57142639160156 * ᐃ, ᐃ * 228.16963958740234, 104.57142639160156 * ᐃ, ᐃ * 143.52678298950195);
		Ⲇ.bezierCurveTo(ᐃ * 106.57142639160156, 124.52678298950195 * ᐃ, 110.57142639160156 * ᐃ, 123.52678298950195 * ᐃ, ᐃ * 123.57142639160156, 116.52678298950195 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 136.57142639160156, 110.52678298950195 * ᐃ, ᐃ * 130.57142639160156, 106.52678298950195 * ᐃ, 126.57142639160156 * ᐃ, 98.52678298950195 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃ * ⵠⲆⵠⲆᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(125.57142639160156 * ᐃ, 156.66963958740234 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 125.57142639160156, ᐃ * 182.66963958740234, ᐃ * 125.57142639160156, ᐃ * 182.66963958740234, 125.57142639160156 * ᐃ, 208.66963958740234 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠᐃⲆ], ⲆΔᐃΔⲆ * ᐃ);
		return ΔⲆ
	}

	function ΔⵠⵠΔᐃᐃⲆ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 120;
		ΔⲆ.height = 280 * ᐃ;
		Ⲇ.translate(-100 * ᐃ, -ΔⲆΔⲆΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 228.5, 331.953125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 228.5, ᐃ * 12.953125, ᐃ * 228.5, 171.453125 * ᐃ, 228.5 * ᐃ, 10.953125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 196.5, ᐃ * 76.953125, ᐃ * 206.5, 78.953125 * ᐃ, 191.5 * ᐃ, ᐃ * 114.953125);
		Ⲇ.bezierCurveTo(ᐃ * 162.5, ᐃ * 170.953125, 206.5 * ᐃ, 220.953125 * ᐃ, ᐃ * 210.5, 251.953125 * ᐃ);
		Ⲇ.bezierCurveTo(218.5 * ᐃ, 287.953125 * ᐃ, ᐃ * 220.5, 291.953125 * ᐃ, ᐃ * 228.5, ᐃ * 331.953125);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		return ΔⲆ
	}

	function ⵠⵠⵠΔⵠⲆⲆᐃⵠ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 496 * ᐃ;
		ΔⲆ.height = 520 * ᐃ;
		Ⲇ.globalAlpha = ΔⵠⲆⲆ;
		Ⲇ.translate(ΔⲆⲆ, ᐃ * -10);
		ᐃΔΔ(Ⲇ, 247.01138305664062 * ᐃ, 250.13068389892578 * ᐃ, 232.81967270830015 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⲆⵠΔⵠ], 14 * ᐃ);
		Ⲇ.globalCompositeOperation = ⵠ[381];
		ᐃΔΔ(Ⲇ, 247.01138305664062 * ᐃ, ᐃ * 249.3125, 161.4465855941215 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], 14 * ᐃ);
		Ⲇ.globalCompositeOperation = ⵠ[453];
		return ΔⲆ
	}

	function ΔᐃΔⲆΔᐃΔ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 450;
		ΔⲆ.height = ᐃ * 260;
		Ⲇ.translate(ᐃ * 10, ᐃ * ΔⵠⵠᐃⲆ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ᐃ * ⵠᐃᐃⵠΔ, 20 * ᐃ);
		ᐃΔⵠ(Ⲇ, ΔⲆⲆ, ΔⲆⲆ, ᐃ * 400, ᐃ * 220, ᐃ * 30);
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠⵠ]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ᐃ * -20, ᐃ * -ᐃⲆᐃⵠⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(9 * ᐃ, ᐃ * 5);
		Ⲇ.bezierCurveTo(ᐃ * 381, ΔΔⲆⲆ * ᐃ, 197 * ᐃ, ᐃ * 4.5, 385 * ᐃ, ᐃΔᐃΔ * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 397, ᐃ * 4, 401 * ᐃ, 4 * ᐃ, ᐃ * 399, 23 * ᐃ);
		Ⲇ.bezierCurveTo(367 * ᐃ, 27 * ᐃ, ᐃ * 367, 27 * ᐃ, ᐃ * 335, 31 * ᐃ);
		Ⲇ.bezierCurveTo(366.5 * ᐃ, ᐃ * 33.5, 366.5 * ᐃ, 33.5 * ᐃ, ᐃ * 398, 36 * ᐃ);
		Ⲇ.bezierCurveTo(398 * ᐃ, 41.5 * ᐃ, ᐃ * 398, ᐃ * 41.5, 398 * ᐃ, ᐃ * 47);
		Ⲇ.bezierCurveTo(398 * ᐃ, ᐃ * 56, ᐃ * 399, ᐃ * 56, ᐃ * 386, 56 * ᐃ);
		Ⲇ.bezierCurveTo(200.5 * ᐃ, 56.5 * ᐃ, ᐃ * 200.5, ᐃ * 56.5, ᐃ * ⵠΔᐃⵠⲆ, ᐃ * 57);
		Ⲇ.bezierCurveTo(ᐃ * 2, ᐃ * 55, ᐃ * 4, ᐃ * 52, ᐃⵠⵠⵠᐃ * ᐃ, ᐃ * 43);
		Ⲇ.bezierCurveTo(ᐃ * ᐃⲆⵠᐃⵠ, ᐃ * 30.5, ᐃ * 4, ᐃ * 30.5, ᐃ * 4, ᐃ * 18);
		Ⲇ.bezierCurveTo(ᐃ * 16, ᐃ * 18.5, ⲆΔⲆⵠΔ * ᐃ, 18.5 * ᐃ, ᐃ * 28, 19 * ᐃ);
		Ⲇ.bezierCurveTo(18.5 * ᐃ, ᐃ * ⲆⲆⲆⲆⵠΔⲆ, 18.5 * ᐃ, 12 * ᐃ, ᐃ * 9, ᐃ * 5);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[2], Δⵠ[ⲆᐃΔ], ⲆᐃᐃⲆᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(5 * ᐃ, ᐃ * 70);
		Ⲇ.bezierCurveTo(ᐃ * 5, ᐃ * 58, 5 * ᐃ, ᐃ * 55, ΔᐃΔⲆⲆⵠᐃ * ᐃ, ᐃ * 57);
		Ⲇ.bezierCurveTo(ᐃ * 203, ᐃ * 57, 203 * ᐃ, 57 * ᐃ, 389 * ᐃ, ᐃ * 57);
		Ⲇ.bezierCurveTo(ᐃ * 400, ᐃ * 57, 400 * ᐃ, 59 * ᐃ, 400 * ᐃ, ᐃ * 69);
		Ⲇ.bezierCurveTo(ᐃ * 400.5, ᐃ * 83.5, ᐃ * 400.5, ᐃ * 83.5, ᐃ * 401, 98 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 402, ᐃ * 108, 401 * ᐃ, ᐃ * 108, ᐃ * 388, ᐃ * 108);
		Ⲇ.bezierCurveTo(201.5 * ᐃ, 108 * ᐃ, ᐃ * 201.5, 108 * ᐃ, ᐃ * ᐃⵠⵠᐃᐃ, 108 * ᐃ);
		Ⲇ.bezierCurveTo(1 * ᐃ, ᐃ * 106, ᐃ * 5, 106 * ᐃ, ᐃ * 5, 87 * ᐃ);
		Ⲇ.bezierCurveTo(33 * ᐃ, 84.5 * ᐃ, 33 * ᐃ, ᐃ * 84.5, 61 * ᐃ, ᐃ * 82);
		Ⲇ.bezierCurveTo(33.5 * ᐃ, ᐃ * 76.5, 33.5 * ᐃ, 76.5 * ᐃ, ᐃⵠⲆᐃΔ * ᐃ, 71 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[1], ᐃ * ᐃᐃΔΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ⵠⵠΔⵠⲆΔΔ * ᐃ, 158 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 2, 159 * ᐃ, ᐃ * Ⲇⵠⵠⵠ, 156 * ᐃ, ᐃ * ΔⲆⵠⵠ, 118 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 4, ᐃ * 110, ⲆΔⵠᐃⵠ * ᐃ, 107 * ᐃ, 26 * ᐃ, 109 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 206.5, 109 * ᐃ, 206.5 * ᐃ, 109 * ᐃ, ᐃ * 387, 109 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 400, 108 * ᐃ, 400 * ᐃ, 108 * ᐃ, 398 * ᐃ, 127 * ᐃ);
		Ⲇ.bezierCurveTo(384.5 * ᐃ, 130 * ᐃ, 384.5 * ᐃ, 130 * ᐃ, ᐃ * 371, 133 * ᐃ);
		Ⲇ.bezierCurveTo(385.5 * ᐃ, ᐃ * 138, ᐃ * 385.5, ᐃ * 138, ᐃ * 400, 143 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 402, ᐃ * 156, ᐃ * 402, ᐃ * 162, 385 * ᐃ, ᐃ * 160);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⲆᐃ], Δⵠ[1], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 4, ᐃ * 183);
		Ⲇ.bezierCurveTo(1 * ᐃ, ᐃ * 163, ⲆΔᐃΔⵠ * ᐃ, 158 * ᐃ, 28 * ᐃ, ᐃ * 161);
		Ⲇ.bezierCurveTo(207.5 * ᐃ, ᐃ * 161, ᐃ * 207.5, ᐃ * 161, ᐃ * 387, ᐃ * 161);
		Ⲇ.bezierCurveTo(401 * ᐃ, 159 * ᐃ, ᐃ * 400, 164 * ᐃ, ᐃ * 400, 177 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 364.5, ᐃ * 184, 364.5 * ᐃ, ᐃ * 184, 329 * ᐃ, 191 * ᐃ);
		Ⲇ.bezierCurveTo(364.5 * ᐃ, ᐃ * 192.5, ᐃ * 364.5, 192.5 * ᐃ, ᐃ * 400, ᐃ * 194);
		Ⲇ.bezierCurveTo(ᐃ * 403, 209 * ᐃ, 401 * ᐃ, ᐃ * 214, 385 * ᐃ, ᐃ * 213);
		Ⲇ.bezierCurveTo(ᐃ * 201.5, 213 * ᐃ, ᐃ * 201.5, ᐃ * 213, ᐃ * ⲆⲆⲆⲆⲆ, ᐃ * 213);
		Ⲇ.bezierCurveTo(ᐃⲆΔΔ * ᐃ, 213 * ᐃ, ᐃ * ΔᐃΔᐃ, 213 * ᐃ, ᐃ * 4, ᐃ * 198);
		Ⲇ.bezierCurveTo(12.5 * ᐃ, 193 * ᐃ, ᐃ * 12.5, 193 * ᐃ, 21 * ᐃ, ᐃ * 188);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠΔⵠ], Δⵠ[1], ⲆⵠⵠΔΔΔᐃ * ᐃ);
		ᐃΔΔ(Ⲇ, 41 * ᐃ, 30 * ᐃ, 14.7648230602334 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔᐃΔⲆ], ᐃ * 12);
		ᐃΔΔ(Ⲇ, 369 * ᐃ, ᐃ * 30, ᐃ * 15.556349186104045);
		ΔΔ(Ⲇ, Δⵠ[ⲆⲆᐃⵠ], Δⵠ[1], ᐃ * 12);
		ᐃΔΔ(Ⲇ, 364 * ᐃ, ᐃ * 190, 15.620499351813308 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃΔᐃ], Δⵠ[Ⲇⵠᐃ], ᐃ * 12);
		ᐃΔΔ(Ⲇ, 41 * ᐃ, 186 * ᐃ, 15.556349186104045 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔⲆ], Δⵠ[ΔᐃⲆⲆ], ᐃ * 12);
		return ΔⲆ
	}

	function ⲆⵠⵠⲆΔⵠΔΔⲆ(ᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		var ⲆⲆᐃ = 950 * ᐃ;
		var ⵠⲆΔⵠΔΔΔ = 180 * ᐃ;
		var ⲆΔⲆ = 50 * ᐃ;
		var ᐃΔⵠⲆΔΔⲆ = ᐃ * 20;
		var ΔΔⵠΔⲆⵠⵠ = 240 * ᐃ;
		var ΔⲆΔⲆΔΔⲆ = ᐃ * 35;
		var ⵠⵠⵠⵠⵠΔⲆ = ᐃ * 1;
		var ΔⲆΔ = 4 * ᐃ;
		var ᐃⵠⵠⲆΔ = ΔⵠⵠⲆ * ᐃ;
		ΔⲆ.width = ⲆⲆᐃ;
		ΔⲆ.height = ⲆΔⲆ;
		Ⲇ.translate(0, ᐃ * 15);
		ᐃΔⵠ(Ⲇ, ΔⲆΔⲆΔΔⲆ, ⵠⵠⵠⵠⵠΔⲆ, ⵠⲆΔⵠΔΔΔ, ᐃΔⵠⲆΔΔⲆ, ΔⲆΔ);
		ΔΔ(Ⲇ, null, "#69A148", ᐃⵠⵠⲆΔ);
		var ᐃᐃ = ᐃΔ[Δ.ⲆⲆⵠⵠⲆΔᐃ];
		Ⲇ.drawImage(ᐃᐃ, ⵠⲆᐃⵠⵠᐃⲆ, -8);
		Ⲇ.translate(ΔΔⵠΔⲆⵠⵠ, 0);
		ᐃΔⵠ(Ⲇ, ΔⲆΔⲆΔΔⲆ, ⵠⵠⵠⵠⵠΔⲆ, ⵠⲆΔⵠΔΔΔ, ᐃΔⵠⲆΔΔⲆ, ΔⲆΔ);
		ΔΔ(Ⲇ, null, "#AF352A", ᐃⵠⵠⲆΔ);
		var ᐃᐃ = ᐃΔ[Δ.ⵠⵠᐃᐃΔⵠᐃ];
		Ⲇ.drawImage(ᐃᐃ, ΔᐃΔⲆⲆⵠᐃ, -9);
		Ⲇ.translate(ΔΔⵠΔⲆⵠⵠ, 0);
		ᐃΔⵠ(Ⲇ, ΔⲆΔⲆΔΔⲆ, ⵠⵠⵠⵠⵠΔⲆ, ⵠⲆΔⵠΔΔΔ, ᐃΔⵠⲆΔΔⲆ, ΔⲆΔ);
		ΔΔ(Ⲇ, null, "#669BB1", ᐃⵠⵠⲆΔ);
		var ᐃᐃ = ᐃΔ[Δ.ⲆⲆᐃⵠⵠⵠΔ];
		Ⲇ.drawImage(ᐃᐃ, ⲆⵠⵠΔᐃ, -8);
		Ⲇ.translate(ΔΔⵠΔⲆⵠⵠ, 0);
		ᐃΔⵠ(Ⲇ, ΔⲆΔⲆΔΔⲆ, ⵠⵠⵠⵠⵠΔⲆ, ⵠⲆΔⵠΔΔΔ, ᐃΔⵠⲆΔΔⲆ, ΔⲆΔ);
		ΔΔ(Ⲇ, null, "#074A87", ᐃⵠⵠⲆΔ);
		var ᐃᐃ = ᐃΔ[Δ.ΔᐃᐃⵠΔⲆⲆ];
		Ⲇ.drawImage(ᐃᐃ, 17, -Ⲇᐃⵠⵠᐃ);
		return ΔⲆ
	}

	function ⲆΔΔⵠΔⲆⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 165;
		ΔⲆ.height = ᐃ * 123;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 81, ᐃ * 65);
		ᐃΔⵠ(Ⲇ, -78 * ᐃ, ᐃ * -54.5, 156 * ᐃ, ᐃ * 109, ⵠΔⵠᐃⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠΔᐃⵠ]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 81, ᐃ * 58);
		ᐃΔⵠ(Ⲇ, -78 * ᐃ, -54.5 * ᐃ, ᐃ * 156, ᐃ * 109, ⵠᐃⲆⵠⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⵠΔ], Δⵠ[ᐃᐃΔⵠ], ⲆΔᐃΔⵠ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 81, ᐃ * 58);
		ᐃΔⵠ(Ⲇ, -69 * ᐃ, ᐃ * -47, 138 * ᐃ, ᐃ * 93, 15 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⵠ], Δⵠ[4], ⵠⵠᐃΔ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 79, ᐃ * 54);
		ᐃΔⵠ(Ⲇ, -34 * ᐃ, ᐃ * -40, 68 * ᐃ, ᐃ * 88, ᐃⲆΔᐃⵠᐃΔ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, undefined, Δⵠ[5], 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(44 * ᐃ, 13 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 43.5, ᐃ * 55, ᐃ * 43.5, 55 * ᐃ, ᐃ * 43, 101 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆΔΔⵠᐃ, Δⵠ[6], 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 115, ᐃ * ⵠⵠΔᐃⵠⲆΔ);
		Ⲇ.bezierCurveTo(115 * ᐃ, ᐃ * 56, 115 * ᐃ, ᐃ * 56, ᐃ * 115, ᐃ * 101);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[6], 4);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(35 * ᐃ, 6 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 35, 56 * ᐃ, ᐃ * 36, ᐃ * 109, ᐃ * 35, ᐃ * 110);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ⲆⲆΔΔᐃ], Ⲇⵠⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 123, ᐃΔᐃΔᐃ * ᐃ);
		Ⲇ.bezierCurveTo(123 * ᐃ, ᐃ * 56, 123 * ᐃ, 56 * ᐃ, ᐃ * 123, ᐃ * 110);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[7], ᐃⲆᐃⲆ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 79, ᐃ * 113);
		ᐃΔⵠ(Ⲇ, -ΔΔⵠᐃᐃ * ᐃ, ᐃ * -2, ᐃ * 36, ᐃᐃΔΔᐃ * ᐃ, ᐃ * 20);
		Ⲇ.restore();
		ΔΔ(Ⲇ, undefined, Δⵠ[8], 4);
		Ⲇ.save();
		Ⲇ.translate(75 * ᐃ, ᐃ * 118);
		ᐃΔⵠ(Ⲇ, ᐃ * -ⵠⵠⲆⵠᐃ, -2.5 * ᐃ, ᐃ * 20, 5 * ᐃ, ᐃⲆᐃΔⲆ * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[Ⲇᐃⵠᐃᐃ]);
		return ΔⲆ
	}

	function ⵠⵠΔΔΔΔⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 138;
		ΔⲆ.height = 133 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .3 : ⵠⲆⲆ;
		Ⲇ.translate(ⵠᐃⲆⲆ, 5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 26, 79.640625 * ᐃ);
		Ⲇ.bezierCurveTo(ⵠⲆΔⲆⵠⲆΔ * ᐃ, ᐃ * 84.640625, ΔⲆⲆΔⲆ * ᐃ, 86.640625 * ᐃ, ᐃ * ⵠⲆⲆΔΔΔⲆ, ᐃ * 78.640625);
		Ⲇ.bezierCurveTo(ⵠⵠⲆⵠᐃ * ᐃ, 69.640625 * ᐃ, ᐃ * ⲆⵠᐃⵠⵠⲆᐃ, ᐃ * 67.640625, ᐃ * 31, ᐃ * 62.640625);
		Ⲇ.bezierCurveTo(63 * ᐃ, ᐃ * 55.640625, ᐃ * 85, 57.640625 * ᐃ, ᐃ * 104, ᐃ * 63.640625);
		Ⲇ.bezierCurveTo(131 * ᐃ, 69.640625 * ᐃ, 132 * ᐃ, ᐃ * 71.640625, 131 * ᐃ, ᐃ * 78.640625);
		Ⲇ.bezierCurveTo(ᐃ * 131, 91.640625 * ᐃ, 112 * ᐃ, 80.640625 * ᐃ, ᐃ * 91, ᐃ * 75.640625);
		Ⲇ.bezierCurveTo(51 * ᐃ, ᐃ * 70.640625, 45 * ᐃ, 74.640625 * ᐃ, 28 * ᐃ, 78.640625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃᐃ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 8, 82.640625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 40, ᐃ * 107.640625, 53 * ᐃ, ᐃ * 104.640625, ᐃ * 67, ᐃ * 106.640625);
		Ⲇ.bezierCurveTo(ᐃ * 101, 103.640625 * ᐃ, ᐃ * 117, ᐃ * 93.640625, 127 * ᐃ, ᐃ * 84.640625);
		Ⲇ.bezierCurveTo(ᐃ * 135, 95.640625 * ᐃ, ᐃ * 131, 107.640625 * ᐃ, ᐃ * 110, ᐃ * 118.640625);
		Ⲇ.bezierCurveTo(78 * ᐃ, 129.640625 * ᐃ, ᐃ * 67, 130.640625 * ᐃ, ᐃ * 27, 119.640625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃᐃⲆ * ᐃ, 105.640625 * ᐃ, 8 * ᐃ, 83.640625 * ᐃ, 10 * ᐃ, ᐃ * 84.640625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔᐃ]);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ᐃⵠⵠⲆ, ᐃ * -ΔⵠΔᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * ⲆᐃⲆΔⵠ, ᐃ * 73.640625);
		Ⲇ.bezierCurveTo(ᐃ * ΔⵠΔΔᐃ, 23.640625 * ᐃ, ᐃ * 33, 19.640625 * ᐃ, 71 * ᐃ, ᐃ * 17.640625);
		Ⲇ.bezierCurveTo(129 * ᐃ, 19.640625 * ᐃ, 130 * ᐃ, 45.640625 * ᐃ, 130 * ᐃ, ᐃ * 76.640625);
		Ⲇ.bezierCurveTo(ᐃ * 90, ᐃ * 63.640625, 85 * ᐃ, 63.640625 * ᐃ, 73 * ᐃ, 63.640625 * ᐃ);
		Ⲇ.bezierCurveTo(38 * ᐃ, ᐃ * 63.640625, 33 * ᐃ, 66.640625 * ᐃ, ᐃ * ᐃΔΔᐃΔ, ᐃ * 73.640625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⵠΔ], Δⵠ[2], ᐃ * ᐃⲆᐃⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(72 * ᐃ, ᐃ * 28.640625);
		Ⲇ.bezierCurveTo(ᐃ * 51, 25.640625 * ᐃ, ᐃ * 56, 7.640625 * ᐃ, 70 * ᐃ, ᐃ * 5.640625);
		Ⲇ.bezierCurveTo(94 * ᐃ, ᐃ * 7.640625, ᐃ * 87, ᐃ * 29.640625, 72 * ᐃ, 28.640625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔΔ], Δⵠ[ⲆⲆΔⲆ], ᐃⲆⵠᐃⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 51, 26.640625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 42, ᐃ * 29.640625, ᐃ * 43, ᐃ * 31.640625, 42 * ᐃ, 37.640625 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔΔⲆᐃ], ᐃ * ΔⵠⵠⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 90, 26.640625 * ᐃ);
		Ⲇ.bezierCurveTo(100 * ᐃ, 28.640625 * ᐃ, ᐃ * 98, ᐃ * 34.640625, 99 * ᐃ, 38.640625 * ᐃ);
		ΔΔ(Ⲇ, undefined, Δⵠ[ΔΔⲆⲆ], ⵠᐃᐃΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 26, ᐃ * 79.640625);
		Ⲇ.bezierCurveTo(ᐃ * ⲆⵠⵠΔⲆ, 84.640625 * ᐃ, 9 * ᐃ, 86.640625 * ᐃ, ᐃΔⵠᐃⲆᐃΔ * ᐃ, 78.640625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 6, 69.640625 * ᐃ, ⵠᐃᐃⲆᐃΔⲆ * ᐃ, 67.640625 * ᐃ, ᐃ * 31, 62.640625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 63, 55.640625 * ᐃ, 85 * ᐃ, 57.640625 * ᐃ, 104 * ᐃ, 63.640625 * ᐃ);
		Ⲇ.bezierCurveTo(131 * ᐃ, ᐃ * 69.640625, ᐃ * 132, 71.640625 * ᐃ, ᐃ * 131, 78.640625 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 131, ᐃ * 91.640625, 112 * ᐃ, 80.640625 * ᐃ, ᐃ * 91, 75.640625 * ᐃ);
		Ⲇ.bezierCurveTo(51 * ᐃ, ᐃ * 70.640625, ᐃ * 45, 74.640625 * ᐃ, 28 * ᐃ, 78.640625 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃᐃᐃΔᐃ], Δⵠ[4], ᐃᐃΔΔᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(8 * ᐃ, 82.640625 * ᐃ);
		Ⲇ.bezierCurveTo(40 * ᐃ, ᐃ * 107.640625, 53 * ᐃ, 104.640625 * ᐃ, 67 * ᐃ, ᐃ * 106.640625);
		Ⲇ.bezierCurveTo(101 * ᐃ, 103.640625 * ᐃ, 117 * ᐃ, 93.640625 * ᐃ, ᐃ * 127, ᐃ * 84.640625);
		Ⲇ.bezierCurveTo(ᐃ * 135, ᐃ * 95.640625, ᐃ * 131, 107.640625 * ᐃ, 110 * ᐃ, 118.640625 * ᐃ);
		Ⲇ.bezierCurveTo(78 * ᐃ, 129.640625 * ᐃ, ᐃ * 67, ᐃ * 130.640625, ᐃ * 27, ᐃ * 119.640625);
		Ⲇ.bezierCurveTo(Ⲇᐃⵠ * ᐃ, ᐃ * 105.640625, ᐃ * ⲆᐃⲆΔⵠ, 83.640625 * ᐃ, ᐃ * ⲆΔΔⲆᐃ, ᐃ * 84.640625);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆᐃ], Δⵠ[ᐃΔᐃΔ], 4 * ᐃ);
		return ΔⲆ
	}

	function ⵠⲆΔⵠⵠⵠᐃΔⲆ(ᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 321 * ᐃ;
		ΔⲆ.height = 345 * ᐃ;
		Ⲇ.translate(ᐃᐃᐃ, ᐃ * 5);
		Ⲇ.translate(ⵠΔᐃⵠ, ᐃ * 20);
		ᐃΔΔ(Ⲇ, ᐃ * 160.5, ᐃ * 159.5, ᐃ * 156.39595138242822);
		ΔΔ(Ⲇ, ⵠ[344], ⵠ[344], 4 * ᐃ);
		Ⲇ.translate(ΔⲆⲆ, -20 * ᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 160.5, 159.5 * ᐃ, ᐃ * 156.39595138242822);
		ΔΔ(Ⲇ, ⵠ[257], ⵠ[392], 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 31.999969482421875, ᐃ * 163.07290649414062);
		Ⲇ.bezierCurveTo(22.999969482421875 * ᐃ, 67.07290649414062 * ᐃ, 106 * ᐃ, 20.072906494140625 * ᐃ, 162 * ᐃ, ᐃ * 23.072906494140625);
		Ⲇ.bezierCurveTo(ᐃ * 269.9999694824219, ᐃ * 31.072906494140625, 292.9999694824219 * ᐃ, ᐃ * 120.07290649414062, ᐃ * 294.9999694824219, ᐃ * 161.07290649414062);
		Ⲇ.bezierCurveTo(165.49996948242188 * ᐃ, ᐃ * 162.07290649414062, 165.49996948242188 * ᐃ, ᐃ * 162.07290649414062, ᐃ * 35.999969482421875, ᐃ * 163.07290649414062);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, "#12432D");
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 32.999969482421875, 165.07290649414062 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 16.999969482421875, ᐃ * 221.07290649414062, ᐃ * 85, 289.0729064941406 * ᐃ, 156 * ᐃ, ᐃ * 294.0729064941406);
		Ⲇ.bezierCurveTo(ᐃ * 263.9999694824219, ᐃ * 293.0729064941406, 295.9999694824219 * ᐃ, 199.07290649414062 * ᐃ, ᐃ * 294.9999694824219, ᐃ * 159.07290649414062);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠ[58]);
		ᐃΔΔ(Ⲇ, 161 * ᐃ, ᐃ * 158.07290649414062, ᐃ * 133.4053971921676);
		ΔΔ(Ⲇ, ⲆΔΔⵠᐃ, ⵠ[392], 10 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(31.999969482421875 * ᐃ, 161.62844848632812 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 162.49996948242188, 161.62844848632812 * ᐃ, 162.49996948242188 * ᐃ, 161.62844848632812 * ᐃ, ᐃ * 292.9999694824219, ᐃ * 161.62844848632812);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[392], ᐃ * ⲆⲆⲆⲆⵠΔⲆ);
		Ⲇ.translate(ⵠᐃⲆ, ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 66, 158.29513549804688 * ᐃ);
		Ⲇ.bezierCurveTo(86 * ᐃ, ᐃ * 158.29513549804688, 86 * ᐃ, ᐃ * 158.29513549804688, 106 * ᐃ, 158.29513549804688 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆΔΔⵠᐃ, ⵠ[236], ᐃ * ᐃⵠⲆⵠᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 57.999969482421875, ᐃ * 117.29513549804688);
		Ⲇ.bezierCurveTo(ᐃ * 85, 128.29513549804688 * ᐃ, ᐃ * 85, 128.29513549804688 * ᐃ, ᐃ * 113, ᐃ * 139.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Ⲇⵠⵠᐃᐃ, ⵠ[236], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 95, ᐃ * 90.29513549804688);
		Ⲇ.bezierCurveTo(112 * ᐃ, ᐃ * 105.79513549804688, ᐃ * 112, ᐃ * 105.79513549804688, ᐃ * 129, ᐃ * 121.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ΔΔΔᐃᐃ, ⵠ[236], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 116, ᐃ * 52.850677490234375);
		Ⲇ.bezierCurveTo(130 * ᐃ, ᐃ * 83.85067749023438, 130 * ᐃ, ᐃ * 83.85067749023438, ᐃ * 144, 114.85067749023438 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ᐃⲆⵠⲆᐃ, ⵠ[236], ᐃ * ΔΔᐃⲆⲆⵠᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 159, 61.295135498046875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 160.49996948242188, ᐃ * 92.29513549804688, 160.49996948242188 * ᐃ, ᐃ * 92.29513549804688, ᐃ * 160, 123.29513549804688 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[236], ᐃ * ⲆᐃⲆᐃⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 203, 51.295135498046875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 190.49996948242188, 83.29513549804688 * ᐃ, ᐃ * 190.49996948242188, ᐃ * 83.29513549804688, ᐃ * 176, 115.29513549804688 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠᐃᐃᐃᐃ, ⵠ[236], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(225 * ᐃ, ᐃ * 89.29513549804688);
		Ⲇ.bezierCurveTo(ᐃ * 210.49996948242188, 104.79513549804688 * ᐃ, 210.49996948242188 * ᐃ, ᐃ * 104.79513549804688, ᐃ * 194, ᐃ * 120.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ΔΔⵠΔΔ, ⵠ[236], ⵠᐃⵠΔᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(266.9999694824219 * ᐃ, ᐃ * 112.29513549804688);
		Ⲇ.bezierCurveTo(233.49996948242188 * ᐃ, 127.29513549804688 * ᐃ, ᐃ * 233.49996948242188, 127.29513549804688 * ᐃ, ᐃ * 199, 142.29513549804688 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ᐃⵠᐃᐃⲆ, ⵠ[236], ΔⲆⵠΔᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(256.9999694824219 * ᐃ, ᐃ * 155.29513549804688);
		Ⲇ.bezierCurveTo(ᐃ * 238.49996948242188, ᐃ * 156.29513549804688, ᐃ * 238.49996948242188, ᐃ * 156.29513549804688, 219 * ᐃ, 157.29513549804688 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆΔΔⵠᐃ, ⵠ[236], ΔⲆⵠΔⲆᐃΔ * ᐃ);
		Ⲇ.translate(0, -ΔΔⲆᐃᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(66 * ᐃ, ᐃ * 158.29513549804688);
		Ⲇ.bezierCurveTo(86 * ᐃ, 158.29513549804688 * ᐃ, ᐃ * 86, ᐃ * 158.29513549804688, 106 * ᐃ, ᐃ * 158.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[145], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(57.999969482421875 * ᐃ, 117.29513549804688 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 85, 128.29513549804688 * ᐃ, ᐃ * 85, ᐃ * 128.29513549804688, 113 * ᐃ, ᐃ * 139.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ΔΔΔᐃᐃ, ⵠ[145], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 95, ᐃ * 90.29513549804688);
		Ⲇ.bezierCurveTo(ᐃ * 112, ᐃ * 105.79513549804688, ᐃ * 112, ᐃ * 105.79513549804688, 129 * ᐃ, ᐃ * 121.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[145], ᐃ * ⲆⲆⲆⲆⵠΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(116 * ᐃ, 52.850677490234375 * ᐃ);
		Ⲇ.bezierCurveTo(130 * ᐃ, 83.85067749023438 * ᐃ, 130 * ᐃ, 83.85067749023438 * ᐃ, 144 * ᐃ, ᐃ * 114.85067749023438);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[145], ᐃ * ᐃᐃΔΔⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 159, 61.295135498046875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 160.49996948242188, 92.29513549804688 * ᐃ, 160.49996948242188 * ᐃ, ᐃ * 92.29513549804688, 160 * ᐃ, ᐃ * 123.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[145], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 203, 51.295135498046875 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 190.49996948242188, ᐃ * 83.29513549804688, 190.49996948242188 * ᐃ, 83.29513549804688 * ᐃ, ᐃ * 176, ᐃ * 115.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠⲆⲆⲆⲆ, ⵠ[145], ᐃ * ⵠᐃΔᐃᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 225, 89.29513549804688 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 210.49996948242188, ᐃ * 104.79513549804688, ᐃ * 210.49996948242188, 104.79513549804688 * ᐃ, ᐃ * 194, ᐃ * 120.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Ⲇⵠⵠᐃᐃ, ⵠ[145], 12 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(266.9999694824219 * ᐃ, 112.29513549804688 * ᐃ);
		Ⲇ.bezierCurveTo(233.49996948242188 * ᐃ, ᐃ * 127.29513549804688, ᐃ * 233.49996948242188, ᐃ * 127.29513549804688, 199 * ᐃ, 142.29513549804688 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[145], ⲆᐃⲆᐃⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(256.9999694824219 * ᐃ, ᐃ * 155.29513549804688);
		Ⲇ.bezierCurveTo(ᐃ * 238.49996948242188, ᐃ * 156.29513549804688, ᐃ * 238.49996948242188, ᐃ * 156.29513549804688, 219 * ᐃ, ᐃ * 157.29513549804688);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, ⵠ[145], ᐃ * 12);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 94.00003051757812, 164.40341186523438 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 162.50003051757812, 164.40341186523438 * ᐃ, 230.00003051757812 * ᐃ, 165.40341186523438 * ᐃ, ᐃ * 231.00003051757812, ᐃ * 164.40341186523438);
		Ⲇ.bezierCurveTo(ᐃ * 214.00003051757812, ᐃ * 267.4034118652344, 92.00003051757812 * ᐃ, 243.40341186523438 * ᐃ, 93.00003051757812 * ᐃ, ᐃ * 165.40341186523438);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, "#704618", "#5D3D1A", ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 96, 166 * ᐃ);
		Ⲇ.bezierCurveTo(88 * ᐃ, 117 * ᐃ, 129 * ᐃ, ᐃ * 92, 161 * ᐃ, ᐃ * 91);
		Ⲇ.bezierCurveTo(ᐃ * 201, 90 * ᐃ, 223 * ᐃ, ᐃ * 121, 230 * ᐃ, 161 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, "#ECBE35", ⵠ[145], ᐃᐃᐃΔⲆ * ᐃ);
		ᐃΔΔ(Ⲇ, 160.00003051757812 * ᐃ, 166.49432373046875 * ᐃ, ᐃ * 28.30194339616981);
		ΔΔ(Ⲇ, ⵠ[257], ⵠ[392], ᐃ * 10);
		return ΔⲆ
	}

	function ᐃᐃⲆᐃⲆⲆⵠᐃⲆ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 81;
		ΔⲆ.height = 350 * ᐃ;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .6 : ⲆΔΔΔ;
		Ⲇ.translate(0, ᐃ * ⲆΔⲆⲆⵠ);
		Ⲇ.save();
		Ⲇ.translate(35 * ᐃ, 160 * ᐃ);
		Ⲇ.rotate(ⵠⵠⵠΔ);
		ᐃΔⵠ(Ⲇ, -6 * ᐃ, ᐃ * -100.5, ΔΔᐃⲆⲆⵠᐃ * ᐃ, ᐃ * 240, ᐃ * ⲆΔΔⲆᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.translate(ΔΔᐃᐃ, -5 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.save();
		Ⲇ.translate(-6 * ᐃ, ᐃⵠΔⲆΔ * ᐃ);
		Ⲇ.moveTo(ᐃ * 26.0714111328125, ᐃ * 50.9);
		Ⲇ.bezierCurveTo(32.0714111328125 * ᐃ, ᐃ * 35.892852783203125, 39.0714111328125 * ᐃ, 18.892852783203125 * ᐃ, 45.0714111328125 * ᐃ, ᐃ * 7.892852783203125);
		Ⲇ.bezierCurveTo(ᐃ * 51.0714111328125, 13.892852783203125 * ᐃ, 56.0714111328125 * ᐃ, 36.892852783203125 * ᐃ, 60.0714111328125 * ᐃ, 50.892852783203125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 52.5714111328125, 58.892852783203125 * ᐃ, ᐃ * 52.5714111328125, ᐃ * 58.892852783203125, ᐃ * 45.0714111328125, ᐃ * 66.89285278320312);
		Ⲇ.bezierCurveTo(37.0714111328125 * ᐃ, 58.892852783203125 * ᐃ, ᐃ * 37.0714111328125, ᐃ * 58.892852783203125, 29.0714111328125 * ᐃ, 50.892852783203125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.restore();
		Ⲇ.globalAlpha = 1;
		Ⲇ.save();
		Ⲇ.translate(0, ᐃ * -10);
		Ⲇ.translate(45.0714111328125 * ᐃ, ᐃ * 149.39285278320312);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, -ΔⲆⲆⵠⵠ * ᐃ, -94.5 * ᐃ, ⵠⵠᐃᐃᐃⲆⲆ * ᐃ, 250 * ᐃ, ᐃ * ⲆΔΔⲆᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔⵠⲆᐃ], ᐃ * 6);
		Ⲇ.translate(ⵠⲆᐃ, ᐃ * Ⲇᐃⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(29.0714111328125 * ᐃ, 50.9 * ᐃ);
		Ⲇ.bezierCurveTo(32.0714111328125 * ᐃ, 35.892852783203125 * ᐃ, 39.0714111328125 * ᐃ, ᐃ * 18.892852783203125, ᐃ * 45.0714111328125, ᐃ * 7.892852783203125);
		Ⲇ.bezierCurveTo(51.0714111328125 * ᐃ, 13.892852783203125 * ᐃ, 56.0714111328125 * ᐃ, ᐃ * 36.892852783203125, ᐃ * 60.0714111328125, 50.892852783203125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 52.5714111328125, ᐃ * 58.892852783203125, 52.5714111328125 * ᐃ, ᐃ * 58.892852783203125, 45.0714111328125 * ᐃ, ᐃ * 66.89285278320312);
		Ⲇ.bezierCurveTo(ᐃ * 37.0714111328125, 58.892852783203125 * ᐃ, 37.0714111328125 * ᐃ, ᐃ * 58.892852783203125, 29.0714111328125 * ᐃ, 50.892852783203125 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ᐃⵠⵠⵠⲆ * ᐃ);
		return ΔⲆ
	}

	function ΔΔΔⵠⲆ(ᐃ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 120 * ᐃ;
		ΔⲆ.height = 100 * ᐃ;
		ᐃΔⵠ(Ⲇ, 10 * ᐃ, ᐃ * ⵠⲆⵠᐃⵠ, ᐃ * 95, ᐃ * 80, ⲆΔⵠⵠΔ * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔⵠ]);
		ᐃΔⵠ(Ⲇ, ᐃ * ⵠⲆⵠᐃⵠ, 5 * ᐃ, 95 * ᐃ, ᐃ * 80, ᐃ * ⵠⲆΔᐃᐃ);
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃᐃⵠΔ], ᐃ * 4);
		if (ᐃⵠⵠⲆ == Ⲇᐃ) {
			var ᐃᐃ = ⲆᐃⲆᐃⲆⵠⲆ(ᐃ * .75, Δⵠ, 0);
			Ⲇ.drawImage(ᐃᐃ, 22 * ᐃ, 18 * ᐃ)
		} else if (Ⲇᐃ == 1) {
			var ᐃᐃ = ⲆᐃⲆᐃⲆⵠⲆ(ᐃ * .75, Δⵠ, 1);
			Ⲇ.drawImage(ᐃᐃ, ᐃ * 22, ᐃ * 18)
		}
		return ΔⲆ
	}

	function ΔΔᐃᐃᐃᐃΔΔᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 200;
		ΔⲆ.height = ᐃ * 200;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 112, 158 * ᐃ);
		ᐃΔⵠ(Ⲇ, -86.5 * ᐃ, -86 * ᐃ, 150 * ᐃ, ᐃ * 35, ᐃ * 20);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 170, ᐃ * ⲆᐃⲆⵠⲆ);
		ᐃΔⵠ(Ⲇ, -86.5 * ᐃ, -86 * ᐃ, 35 * ᐃ, ᐃ * 150, 20 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆ]);
		return ΔⲆ
	}

	function ⵠⲆᐃⵠⵠⲆⲆΔⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 316 * ᐃ;
		ΔⲆ.height = 365 * ᐃ;
		Ⲇ.save();
		Ⲇ.translate(156.07142639160156 * ᐃ, 51.81248474121094 * ᐃ);
		Ⲇ.rotate(ΔΔᐃᐃ);
		ᐃΔⵠ(Ⲇ, -21.5 * ᐃ, -34 * ᐃ, ᐃ * 43, ᐃ * 68, ᐃ * ⲆⲆᐃΔᐃΔⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ᐃⲆᐃᐃ], ᐃ * 15);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(126.57142639160156 * ᐃ, ᐃ * 67.38392639160156);
		Ⲇ.bezierCurveTo(ᐃ * 126.57142639160156, ᐃ * 57.38392639160156, ᐃ * 132.57142639160156, ᐃ * 54.38392639160156, 140.57142639160156 * ᐃ, ᐃ * 54.38392639160156);
		Ⲇ.bezierCurveTo(177.57142639160156 * ᐃ, 55.38392639160156 * ᐃ, ᐃ * 158.07142639160156, 54.38392639160156 * ᐃ, ᐃ * 175.57142639160156, ᐃ * 54.38392639160156);
		Ⲇ.bezierCurveTo(ᐃ * 185.57142639160156, ᐃ * 56.38392639160156, ᐃ * 185.57142639160156, 57.38392639160156 * ᐃ, ᐃ * 184.57142639160156, 66.38392639160156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 184.57142639160156, 78.38392639160156 * ᐃ, 184.57142639160156 * ᐃ, 89.38392639160156 * ᐃ, 184.57142639160156 * ᐃ, ᐃ * 90.38392639160156);
		Ⲇ.bezierCurveTo(177.57142639160156 * ᐃ, ᐃ * 107.38392639160156, 180.57142639160156 * ᐃ, ᐃ * 112.38392639160156, 189.57142639160156 * ᐃ, 116.38392639160156 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 212.57142639160156, ᐃ * 127.38392639160156, ᐃ * 212.57142639160156, ᐃ * 132.38392639160156, 211.57142639160156 * ᐃ, 150.38392639160156 * ᐃ);
		Ⲇ.bezierCurveTo(211.57142639160156 * ᐃ, ᐃ * 227.59821128845215, 211.57142639160156 * ᐃ, 227.59821128845215 * ᐃ, ᐃ * 211.57142639160156, 304.81249618530273 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 212.57142639160156, ᐃ * 328.81249618530273, ᐃ * 209.57142639160156, 330.81249618530273 * ᐃ, ᐃ * 188.57142639160156, 333.81249618530273 * ᐃ);
		Ⲇ.bezierCurveTo(155.07142639160156 * ᐃ, ᐃ * 333.31249618530273, 155.07142639160156 * ᐃ, ᐃ * 333.31249618530273, 121.57142639160156 * ᐃ, ᐃ * 332.81249618530273);
		Ⲇ.bezierCurveTo(104.57142639160156 * ᐃ, 327.81249618530273 * ᐃ, 105.57142639160156 * ᐃ, 328.81249618530273 * ᐃ, 104.57142639160156 * ᐃ, 312.81249618530273 * ᐃ);
		Ⲇ.bezierCurveTo(104.57142639160156 * ᐃ, 228.16963958740234 * ᐃ, 104.57142639160156 * ᐃ, 228.16963958740234 * ᐃ, ᐃ * 104.57142639160156, ᐃ * 143.52678298950195);
		Ⲇ.bezierCurveTo(ᐃ * 106.57142639160156, 124.52678298950195 * ᐃ, ᐃ * 110.57142639160156, 123.52678298950195 * ᐃ, 123.57142639160156 * ᐃ, ᐃ * 116.52678298950195);
		Ⲇ.bezierCurveTo(136.57142639160156 * ᐃ, 110.52678298950195 * ᐃ, ᐃ * 130.57142639160156, ᐃ * 106.52678298950195, ᐃ * 126.57142639160156, ᐃ * 98.52678298950195);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[5], ⵠⲆⵠⲆᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 125.57142639160156, 156.66963958740234 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 125.57142639160156, ᐃ * 182.66963958740234, ᐃ * 125.57142639160156, 182.66963958740234 * ᐃ, ᐃ * 125.57142639160156, 208.66963958740234 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Ⲇⵠⵠᐃᐃ, Δⵠ[6], 15 * ᐃ);
		return ΔⲆ
	}

	function ⵠⵠΔⵠⲆᐃⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 450 * ᐃ;
		ΔⲆ.height = 260 * ᐃ;
		var ᐃᐃ = ΔᐃΔⲆΔᐃΔ(1 * ᐃ, true, Δⵠ);
		Ⲇ.drawImage(ᐃᐃ, ᐃ * 0, ᐃ * ΔⲆⲆ);
		if (1 == Ⲇᐃ) {
			Ⲇ.translate(ᐃⲆⲆΔᐃ * ᐃ, 0 * ᐃ);
			ᐃΔΔ(Ⲇ, 113 * ᐃ, ᐃ * 120, ᐃ * 66);
			ΔΔ(Ⲇ, ⵠⵠⲆΔⲆ, Δⵠ[ᐃᐃΔΔᐃ], 13 * ᐃ);
			var ᐃᐃ = ⵠⲆᐃᐃⵠⲆⵠ(.65 * ᐃ, ⵠⲆⵠⵠᐃ, [ⵠ[254], ⵠ[539], ⵠ[86], ⵠ[369], ⵠ[463]]);
			Ⲇ.rotate(.7);
			Ⲇ.drawImage(ᐃᐃ, ᐃ * 133, ᐃ * -64);
			Ⲇ.rotate(-.7);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(70 * ᐃ, 70 * ᐃ);
			Ⲇ.bezierCurveTo(113 * ᐃ, ᐃ * 120.5, ᐃ * 113, ᐃ * 120.5, ᐃ * 156, 171 * ᐃ);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, undefined, Δⵠ[ⵠᐃᐃΔ], ᐃ * ᐃⵠⵠⵠΔ)
		} else if (2 == Ⲇᐃ) {
			Ⲇ.translate(ᐃ * 100, 0 * ᐃ);
			ᐃΔΔ(Ⲇ, 113 * ᐃ, ᐃ * 120, 66 * ᐃ);
			ΔΔ(Ⲇ, ⵠⵠⲆᐃᐃ, Δⵠ[ΔⵠⵠⲆ], ᐃ * 13);
			Ⲇ.translate(ᐃ * 30, 40 * ᐃ);
			Ⲇ.save();
			Ⲇ.translate(83.5 * ᐃ, 66.5 * ᐃ);
			ᐃΔⵠ(Ⲇ, -40.5 * ᐃ, ᐃ * -29.5, ᐃ * 81, ᐃ * 59, ᐃ * ⵠᐃᐃⲆᐃΔⲆ);
			Ⲇ.restore();
			ΔΔ(Ⲇ, "#dff2f7", ⵠ[577], 7 * ᐃ);
			ᐃΔΔ(Ⲇ, ᐃ * 22, 82 * ᐃ, 12 * ᐃ);
			ΔΔ(Ⲇ, "#dff2f7", ⵠ[577], ⵠⵠⵠⵠⵠ * ᐃ);
			ᐃΔΔ(Ⲇ, ᐃ * 145, ᐃ * 82, ΔⲆⵠΔᐃ * ᐃ);
			ΔΔ(Ⲇ, "#dff2f7", ⵠ[577], ᐃ * 7);
			var ᐃᐃ = ⵠⵠⵠᐃⵠ(.5 * ᐃ, true, ["#80500b", "#7c4908"]);
			Ⲇ.drawImage(ᐃᐃ, ΔⵠⵠᐃⲆ * ᐃ, ᐃ * 85);
			var ᐃᐃ = ⵠⵠⵠᐃⵠ(.5 * ᐃ, ᐃΔᐃⵠⲆ, ["#80500b", "#7c4908"]);
			Ⲇ.drawImage(ᐃᐃ, 50 * ᐃ, ᐃ * 85);
			var ᐃᐃ = ⵠⵠⵠᐃⵠ(ᐃ * .5, true, ["#80500b", "#7c4908"]);
			Ⲇ.drawImage(ᐃᐃ, 90 * ᐃ, ᐃ * 85);
			var ᐃᐃ = ⵠⵠⵠⲆⵠ(ᐃ * ΔⲆᐃᐃ, ⵠⵠΔⲆᐃΔⲆ, [ⵠ[576], ⵠ[506]]);
			Ⲇ.drawImage(ᐃᐃ, 90 * ᐃ, 105 * ᐃ);
			var ᐃᐃ = ⵠⵠⵠⲆⵠ(ΔΔΔᐃ * ᐃ, ᐃᐃᐃⲆΔ, [ⵠ[576], ⵠ[506]]);
			Ⲇ.drawImage(ᐃᐃ, ᐃ * 90, ᐃ * 105);
			var ᐃᐃ = ⵠⵠⵠⲆⵠ(ᐃ * 1, true, [ⵠ[576], ⵠ[506]]);
			Ⲇ.drawImage(ᐃᐃ, ᐃ * 30, 125 * ᐃ);
			var ᐃᐃ = ⵠⵠⵠⲆⵠ(ᐃ * ⵠΔᐃ, ᐃᐃᐃⲆΔ, [ⵠ[576], ⵠ[506]]);
			Ⲇ.drawImage(ᐃᐃ, ᐃ * 50, 115 * ᐃ);
			var ᐃᐃ = ⵠⵠⵠⲆⵠ(ᐃ * ΔⲆᐃᐃ, true, [ⵠ[576], ⵠ[506]]);
			Ⲇ.drawImage(ᐃᐃ, ᐃ * 30, ᐃⲆᐃⵠΔ * ᐃ);
			var ᐃᐃ = ⵠⵠⵠⲆⵠ(ᐃ * ⲆᐃΔ, true, [ⵠ[576], ⵠ[506]]);
			Ⲇ.drawImage(ᐃᐃ, ᐃ * 80, 120 * ᐃ);
			var ᐃᐃ = ⵠⵠⵠⲆⵠ(1 * ᐃ, ⵠⲆΔᐃΔ, [ⵠ[576], ⵠ[506]]);
			Ⲇ.drawImage(ᐃᐃ, 110 * ᐃ, 125 * ᐃ);
			var ᐃᐃ = ⵠⵠⵠⲆⵠ(ΔⲆᐃⲆ * ᐃ, ᐃΔᐃⲆⵠ, [ⵠ[576], ⵠ[506]]);
			Ⲇ.drawImage(ᐃᐃ, 120 * ᐃ, ᐃ * 105)
		} else if (ᐃⵠΔᐃ == Ⲇᐃ) {
			Ⲇ.translate(ᐃ * ᐃΔᐃⵠⵠ, ᐃ * 0);
			ᐃΔΔ(Ⲇ, 113 * ᐃ, 120 * ᐃ, ᐃ * 66);
			ΔΔ(Ⲇ, ΔΔⵠⵠⲆ, Δⵠ[4], ᐃ * 13);
			Ⲇ.translate(ᐃ * 40, ᐃ * 50);
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 71, 69 * ᐃ);
			ᐃΔⵠ(Ⲇ, -30 * ᐃ, ᐃ * -42, 60 * ᐃ, 84 * ᐃ, ᐃ * 10);
			Ⲇ.restore();
			ΔΔ(Ⲇ, undefined, Δⵠ[5], ᐃ * 4);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 42, 28 * ᐃ);
			Ⲇ.bezierCurveTo(60 * ᐃ, ᐃ * 31, ᐃ * 60, 31 * ᐃ, 78 * ᐃ, 34 * ᐃ);
			Ⲇ.bezierCurveTo(82 * ᐃ, 34 * ᐃ, 84 * ᐃ, 37 * ᐃ, 83 * ᐃ, ᐃ * 45);
			Ⲇ.bezierCurveTo(83 * ᐃ, 80 * ᐃ, ᐃ * 83, ᐃ * 80, 83 * ᐃ, ᐃ * 115);
			Ⲇ.bezierCurveTo(83 * ᐃ, 120 * ᐃ, ᐃ * 80, 122 * ᐃ, ᐃ * 73, 120 * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 42, 111 * ᐃ, 43 * ᐃ, ᐃ * 109, ᐃ * 41, ᐃ * 102);
			Ⲇ.bezierCurveTo(ᐃ * 41, 71 * ᐃ, 41 * ᐃ, 71 * ᐃ, 41 * ᐃ, ᐃ * 40);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, Δⵠ[5], Δⵠ[5], 4 * ᐃ);
			Ⲇ.translate(ᐃ * -40, ᐃ * -50);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(70 * ᐃ, ᐃ * 70);
			Ⲇ.bezierCurveTo(ᐃ * 113, ᐃ * 120.5, ᐃ * 113, ᐃ * 120.5, 156 * ᐃ, ᐃ * 171);
			Ⲇ.closePath();
			ΔΔ(Ⲇ, undefined, Δⵠ[ᐃᐃⵠΔ], ᐃⲆΔᐃⵠᐃΔ * ᐃ)
		} else if (Ⲇᐃ == 4) {
			Ⲇ.scale(1, 1);
			Ⲇ.translate(ᐃ * 70, 50 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(23 * ᐃ, 6 * ᐃ);
			Ⲇ.bezierCurveTo(25.5 * ᐃ, 56 * ᐃ, ᐃ * 25.5, 56 * ᐃ, ᐃ * 28, 106 * ᐃ);
			ΔΔ(Ⲇ, ⵠⲆⲆⲆⲆ, Δⵠ[Ⲇᐃⵠᐃ], 14 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(59 * ᐃ, ᐃ * ⵠⲆⲆⵠΔ);
			Ⲇ.bezierCurveTo(ᐃ * 61, ᐃ * 51.5, 61 * ᐃ, 51.5 * ᐃ, 63 * ᐃ, 93 * ᐃ);
			ΔΔ(Ⲇ, ⵠⵠⲆᐃᐃ, Δⵠ[5], ᐃ * ⲆⵠΔⵠΔⵠΔ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 7, 55 * ᐃ);
			Ⲇ.bezierCurveTo(33.5 * ᐃ, ᐃ * 55, 33.5 * ᐃ, 55 * ᐃ, ᐃ * 60, 55 * ᐃ);
			ΔΔ(Ⲇ, ⲆⲆⵠᐃΔ, Δⵠ[ᐃΔΔⲆⵠ], ᐃ * ΔⲆⲆⲆᐃΔΔ);
			Ⲇ.translate(10 * ᐃ, ᐃⵠⵠⲆ * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(123 * ᐃ, ᐃ * ⲆⲆⲆᐃΔ);
			Ⲇ.bezierCurveTo(ᐃ * 103, 16.5 * ᐃ, 103 * ᐃ, 16.5 * ᐃ, 83 * ᐃ, ᐃ * 17);
			Ⲇ.bezierCurveTo(83.5 * ᐃ, 61 * ᐃ, ᐃ * 83.5, 61 * ᐃ, 84 * ᐃ, ᐃ * 105);
			Ⲇ.bezierCurveTo(ᐃ * 106, ᐃ * 105, ᐃ * 106, ᐃ * 105, 128 * ᐃ, ᐃ * 105);
			ΔΔ(Ⲇ, ΔΔΔᐃᐃ, Δⵠ[ΔⲆⲆⵠ], 14 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(ᐃ * 72, ᐃ * 63);
			Ⲇ.bezierCurveTo(88.5 * ᐃ, ᐃ * 62.5, ᐃ * 88.5, 62.5 * ᐃ, ᐃ * 105, 62 * ᐃ);
			ΔΔ(Ⲇ, ᐃΔᐃΔΔᐃΔ, Δⵠ[ᐃᐃᐃΔⵠ], ⲆⵠΔⵠΔⵠΔ * ᐃ);
			Ⲇ.translate(ⲆⲆⵠⲆⵠ * ᐃ, ᐃ * ⲆΔⵠΔⵠ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(141 * ᐃ, Ⲇᐃⵠᐃᐃ * ᐃ);
			Ⲇ.bezierCurveTo(ᐃ * 143, ᐃ * 50, ᐃ * 143, ᐃ * 50, ᐃ * 145, 92 * ᐃ);
			Ⲇ.bezierCurveTo(169 * ᐃ, ᐃ * 88.5, ᐃ * 169, 88.5 * ᐃ, ᐃ * 193, 85 * ᐃ);
			ΔΔ(Ⲇ, ΔΔΔᐃᐃ, Δⵠ[ΔⲆⵠⵠ], ᐃ * 14);
			Ⲇ.translate(10 * ᐃ, -10 * ᐃ);
			Ⲇ.beginPath();
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.lineJoin = ⵠ[401];
			Ⲇ.moveTo(205 * ᐃ, ᐃ * 124);
			Ⲇ.bezierCurveTo(205 * ᐃ, ᐃ * 69, ᐃ * 205, ᐃ * 69, ᐃ * 205, ᐃΔⲆⲆᐃᐃⵠ * ᐃ);
			Ⲇ.bezierCurveTo(239 * ᐃ, ᐃ * 15, 250 * ᐃ, ᐃ * 37, ᐃ * 249, 49 * ᐃ);
			Ⲇ.bezierCurveTo(251 * ᐃ, ᐃ * 65, 242 * ᐃ, 76 * ᐃ, 206 * ᐃ, ᐃ * 75);
			ΔΔ(Ⲇ, ᐃⲆⵠⲆᐃ, Δⵠ[5], ᐃ * 14)
		}
		return ΔⲆ
	}

	function ΔⵠⵠΔΔᐃⲆᐃⵠ(ᐃ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 85 * ᐃ;
		ΔⲆ.height = 145 * ᐃ;
		Ⲇ.translate(ᐃ * -165, -95 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(217 * ᐃ, ᐃ * 103);
		Ⲇ.bezierCurveTo(ᐃ * 209, ᐃ * 129, ᐃ * 203, ᐃ * 137, 195 * ᐃ, ᐃ * 146);
		Ⲇ.bezierCurveTo(195 * ᐃ, 159 * ᐃ, 194 * ᐃ, 167 * ᐃ, 189 * ᐃ, 178 * ᐃ);
		Ⲇ.bezierCurveTo(193 * ᐃ, 186 * ᐃ, 196 * ᐃ, 195 * ᐃ, ᐃ * 198, 216 * ᐃ);
		Ⲇ.bezierCurveTo(217.5 * ᐃ, 189.5 * ᐃ, 217.5 * ᐃ, ᐃ * 189.5, ᐃ * 237, 163 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(231 * ᐃ, 163 * ᐃ);
		Ⲇ.bezierCurveTo(221 * ᐃ, ᐃ * 139, ᐃ * 218, 128 * ᐃ, 215 * ᐃ, ᐃ * 114);
		Ⲇ.bezierCurveTo(213 * ᐃ, 102 * ᐃ, ᐃ * 220, ᐃ * 92, 222 * ᐃ, 107 * ᐃ);
		Ⲇ.bezierCurveTo(224 * ᐃ, ᐃ * 118, 233 * ᐃ, 138 * ᐃ, 244 * ᐃ, ᐃ * 161);
		Ⲇ.bezierCurveTo(235 * ᐃ, ᐃ * 188, ᐃ * 224, ᐃ * 198, 204 * ᐃ, ᐃ * 221);
		Ⲇ.bezierCurveTo(190 * ᐃ, 233 * ᐃ, 190 * ᐃ, ᐃ * 235, ᐃ * 180, 235 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 167, ᐃ * 235, 164 * ᐃ, 216 * ᐃ, 175 * ᐃ, 211 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 176, 208 * ᐃ, 181 * ᐃ, 207 * ᐃ, ᐃ * 191, 205 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 213, ᐃ * 186, ᐃ * 218, ᐃ * 180, 230 * ᐃ, ᐃ * 163);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ, Δⵠ, 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 234, ᐃ * 154);
		Ⲇ.bezierCurveTo(227 * ᐃ, 156 * ᐃ, 222 * ᐃ, 156 * ᐃ, 199 * ᐃ, ᐃ * 148);
		Ⲇ.bezierCurveTo(201 * ᐃ, 151 * ᐃ, 216 * ᐃ, ᐃ * 159, ᐃ * 224, 162 * ᐃ);
		Ⲇ.bezierCurveTo(209 * ᐃ, ᐃ * 169.5, 209 * ᐃ, 169.5 * ᐃ, ᐃ * 194, 177 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 213.5, 175 * ᐃ, ᐃ * 213.5, 175 * ᐃ, ᐃ * 233, ᐃ * 173);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ);
		return ΔⲆ
	}

	function ⵠᐃΔⲆᐃⵠⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 88 * ᐃ;
		ΔⲆ.height = ᐃ * 647;
		Ⲇ.translate(ᐃ * ⲆᐃⲆⵠᐃ, ᐃ * ⵠᐃⲆⵠⲆ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.save();
		Ⲇ.translate(45 * ᐃ, 384.5 * ᐃ);
		ᐃΔⵠ(Ⲇ, -15 * ᐃ, ᐃ * -216.5, 30 * ᐃ, 433 * ᐃ, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆⵠⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(27 * ᐃ, 572 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 44, 580 * ᐃ, 55 * ᐃ, ᐃ * 576, 62 * ᐃ, 572 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 65, ᐃ * 585.5, ᐃ * 65, ᐃ * 585.5, 68 * ᐃ, ᐃ * 599);
		Ⲇ.bezierCurveTo(71 * ᐃ, 612 * ᐃ, ᐃ * 68, ᐃ * 618, ᐃ * 34, ᐃ * 616);
		Ⲇ.bezierCurveTo(ΔⲆΔⲆᐃ * ᐃ, 615 * ᐃ, ᐃ * 19, 607 * ᐃ, ᐃ * 27, ᐃ * 573);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 32, ᐃ * 587);
		Ⲇ.bezierCurveTo(39 * ᐃ, ᐃ * 590, ᐃ * 48, ᐃ * 588, 54 * ᐃ, ᐃ * 587);
		Ⲇ.bezierCurveTo(57 * ᐃ, ᐃ * 604, 59 * ᐃ, 609 * ᐃ, ᐃ * 46, 609 * ᐃ);
		Ⲇ.bezierCurveTo(27 * ᐃ, ᐃ * 609, 28 * ᐃ, 605 * ᐃ, 33 * ᐃ, ᐃ * 588);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(31 * ᐃ, 113 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 27, ᐃ * 139, 27 * ᐃ, 139 * ᐃ, 23 * ᐃ, ᐃ * 165);
		Ⲇ.bezierCurveTo(ᐃ * 18, 187 * ᐃ, 39 * ᐃ, ᐃ * 195, ᐃ * 57, ᐃ * 186);
		Ⲇ.bezierCurveTo(68 * ᐃ, 180 * ᐃ, 65 * ᐃ, ᐃ * 171, 62 * ᐃ, ᐃ * 153);
		Ⲇ.bezierCurveTo(ᐃ * 58.5, 131 * ᐃ, ᐃ * 58.5, ᐃ * 131, 55 * ᐃ, ᐃ * 109);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠⵠ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(39 * ᐃ, ᐃ * 139);
		Ⲇ.bezierCurveTo(ᐃ * 43, 139 * ᐃ, 43 * ᐃ, 139 * ᐃ, ᐃ * 47, 139 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 51, ᐃ * 158, ᐃ * 56, 176 * ᐃ, ᐃ * 44, 175 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 33, ᐃ * 177, 34 * ᐃ, ᐃ * 167, 39 * ᐃ, ᐃ * 140);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 44, 29 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 57, 63 * ᐃ, 57 * ᐃ, 63 * ᐃ, 70 * ᐃ, ᐃ * 97);
		Ⲇ.bezierCurveTo(ᐃ * 60, ᐃ * 111, ᐃ * 60, ᐃ * 111, ᐃ * 50, 125 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 45, 128 * ᐃ, 41 * ᐃ, ᐃ * 128, 35 * ᐃ, 124 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 26.5, 110 * ᐃ, 26.5 * ᐃ, 110 * ᐃ, ᐃ * 18, 96 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 44, ᐃ * 54);
		Ⲇ.bezierCurveTo(50 * ᐃ, ᐃ * 72, 50 * ᐃ, 72 * ᐃ, 56 * ᐃ, ᐃ * 90);
		Ⲇ.bezierCurveTo(58 * ᐃ, ᐃ * 94, ᐃ * 59, ᐃ * 98, 53 * ᐃ, ᐃ * 105);
		Ⲇ.bezierCurveTo(ᐃ * 47, 113 * ᐃ, ᐃ * 43, ᐃ * 113, ᐃ * 36, 103 * ᐃ);
		Ⲇ.bezierCurveTo(29 * ᐃ, 96 * ᐃ, ᐃ * 31, ᐃ * 94, ᐃ * 35, 83 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⲆ]);
		Ⲇ.translate(ᐃ * -ⲆΔⲆᐃᐃⵠⲆ, ᐃ * -ΔⲆΔⲆΔ);
		Ⲇ.globalAlpha = ΔᐃΔⲆ;
		Ⲇ.save();
		Ⲇ.translate(45 * ᐃ, ᐃ * 384.5);
		ᐃΔⵠ(Ⲇ, ᐃ * -ⲆⵠᐃⵠⵠⲆᐃ, ᐃ * -216.5, 30 * ᐃ, 433 * ᐃ, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(27 * ᐃ, 572 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 44, ᐃ * 580, ᐃ * 55, 576 * ᐃ, 62 * ᐃ, 572 * ᐃ);
		Ⲇ.bezierCurveTo(65 * ᐃ, 585.5 * ᐃ, 65 * ᐃ, 585.5 * ᐃ, ᐃ * 68, 599 * ᐃ);
		Ⲇ.bezierCurveTo(71 * ᐃ, ᐃ * 612, 68 * ᐃ, ᐃ * 618, 34 * ᐃ, 616 * ᐃ);
		Ⲇ.bezierCurveTo(ⲆᐃⵠΔᐃ * ᐃ, ᐃ * 615, ᐃ * Δᐃᐃⵠᐃ, 607 * ᐃ, ᐃ * 27, ᐃ * 573);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⵠᐃᐃΔ], ᐃ * ⲆΔⲆᐃᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(32 * ᐃ, 587 * ᐃ);
		Ⲇ.bezierCurveTo(39 * ᐃ, 590 * ᐃ, ᐃ * 48, 588 * ᐃ, 54 * ᐃ, ᐃ * 587);
		Ⲇ.bezierCurveTo(ᐃ * 57, 604 * ᐃ, 59 * ᐃ, 609 * ᐃ, ᐃ * 46, 609 * ᐃ);
		Ⲇ.bezierCurveTo(27 * ᐃ, 609 * ᐃ, 28 * ᐃ, ᐃ * 605, ᐃ * 33, 588 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠᐃⲆ]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 31, ᐃ * 113);
		Ⲇ.bezierCurveTo(ᐃ * 27, ᐃ * 139, 27 * ᐃ, 139 * ᐃ, 23 * ᐃ, 165 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * ᐃΔΔΔᐃᐃΔ, ᐃ * 187, ᐃ * 39, ᐃ * 195, ᐃ * 57, 186 * ᐃ);
		Ⲇ.bezierCurveTo(68 * ᐃ, 180 * ᐃ, 65 * ᐃ, 171 * ᐃ, 62 * ᐃ, 153 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 58.5, ᐃ * 131, ᐃ * 58.5, ᐃ * 131, ᐃ * 55, 109 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[4], ΔΔᐃⲆⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(39 * ᐃ, ᐃ * 139);
		Ⲇ.bezierCurveTo(43 * ᐃ, ᐃ * 139, ᐃ * 43, 139 * ᐃ, 47 * ᐃ, ᐃ * 139);
		Ⲇ.bezierCurveTo(ᐃ * 51, ᐃ * 158, ᐃ * 56, 176 * ᐃ, ᐃ * 44, 175 * ᐃ);
		Ⲇ.bezierCurveTo(33 * ᐃ, ᐃ * 177, 34 * ᐃ, ᐃ * 167, ᐃ * 39, ᐃ * 140);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[5]);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(44 * ᐃ, 29 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 57, 63 * ᐃ, ᐃ * 57, 63 * ᐃ, 70 * ᐃ, 97 * ᐃ);
		Ⲇ.bezierCurveTo(60 * ᐃ, ᐃ * 111, ᐃ * 60, ᐃ * 111, ᐃ * 50, ᐃ * 125);
		Ⲇ.bezierCurveTo(ᐃ * 45, ᐃ * 128, ᐃ * 41, 128 * ᐃ, ᐃ * 35, ᐃ * 124);
		Ⲇ.bezierCurveTo(26.5 * ᐃ, 110 * ᐃ, 26.5 * ᐃ, ᐃ * 110, ΔⲆⵠᐃᐃⵠⵠ * ᐃ, ᐃ * 96);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠΔⵠᐃ], Δⵠ[7], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 44, ᐃ * 54);
		Ⲇ.bezierCurveTo(50 * ᐃ, 72 * ᐃ, ᐃ * 50, 72 * ᐃ, ᐃ * 56, ᐃ * 90);
		Ⲇ.bezierCurveTo(ᐃ * 58, ᐃ * 94, 59 * ᐃ, ᐃ * 98, ᐃ * 53, 105 * ᐃ);
		Ⲇ.bezierCurveTo(47 * ᐃ, ᐃ * 113, ᐃ * 43, 113 * ᐃ, 36 * ᐃ, ᐃ * 103);
		Ⲇ.bezierCurveTo(ᐃ * 29, 96 * ᐃ, ᐃ * 31, 94 * ᐃ, 35 * ᐃ, ᐃ * 83);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔΔⲆⵠ]);
		return ΔⲆ
	}

	function ⵠΔᐃΔⵠⲆᐃⵠⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 400;
		ΔⲆ.height = ᐃ * 400;
		Ⲇ.save();
		Ⲇ.translate(204 * ᐃ, ᐃ * 195.0833282470703);
		Ⲇ.rotate(10.16);
		ᐃΔⵠ(Ⲇ, -97.5 * ᐃ, ᐃ * -134.5, 195 * ᐃ, 269 * ᐃ, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ΔΔΔᐃ], ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(58.5 * ᐃ, ᐃ * 226.5833282470703);
		Ⲇ.bezierCurveTo(120.5 * ᐃ, ᐃ * 281.5833282470703, ᐃ * 120.5, ᐃ * 281.5833282470703, ᐃ * 182.5, ᐃ * 336.5833282470703);
		Ⲇ.bezierCurveTo(ᐃ * 263, ᐃ * 248.5833282470703, ᐃ * 263, ᐃ * 248.5833282470703, 343.5 * ᐃ, ᐃ * 160.5833282470703);
		Ⲇ.bezierCurveTo(280.5 * ᐃ, ᐃ * 104.58332824707031, ᐃ * 280.5, 104.58332824707031 * ᐃ, 217.5 * ᐃ, ᐃ * 48.58332824707031);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔΔΔⵠ], Δⵠ[ΔⲆΔⲆ], ᐃΔᐃΔ * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(197 * ᐃ, 169.0833282470703 * ᐃ);
		Ⲇ.rotate(10.16);
		ᐃΔⵠ(Ⲇ, -93.5 * ᐃ, ᐃ * -126.5, 187 * ᐃ, ᐃ * 253, ᐃ * ⵠⲆⵠᐃⵠ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃᐃΔⵠ], Δⵠ[1], ᐃΔΔᐃΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 226.5, ᐃ * 24.583328247070312);
		Ⲇ.bezierCurveTo(58.5 * ᐃ, ᐃ * 207.5833282470703, 143 * ᐃ, 116.58332824707031 * ᐃ, ᐃ * 59.5, ᐃ * 208.5833282470703);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⲆⲆⵠᐃΔ, Δⵠ[ᐃⲆΔ], ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(46.133331298828125 * ᐃ, 202.64999389648438 * ᐃ);
		Ⲇ.bezierCurveTo(46.133331298828125 * ᐃ, ᐃ * 215.64999389648438, ᐃ * 46.133331298828125, ᐃ * 215.64999389648438, 46.133331298828125 * ᐃ, 228.64999389648438 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⵠⵠⲆ], Δⵠ[1], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(55.133331298828125 * ᐃ, 211.64999389648438 * ᐃ);
		Ⲇ.bezierCurveTo(55.133331298828125 * ᐃ, 225.14999389648438 * ᐃ, 55.133331298828125 * ᐃ, 225.14999389648438 * ᐃ, ᐃ * 55.133331298828125, 238.64999389648438 * ᐃ);
		Ⲇ.bezierCurveTo(50.133331298828125 * ᐃ, 235.64999389648438 * ᐃ, 50.133331298828125 * ᐃ, 235.64999389648438 * ᐃ, 45.133331298828125 * ᐃ, 232.64999389648438 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 45.133331298828125, ᐃ * 216.64999389648438, 45.133331298828125 * ᐃ, ᐃ * 216.64999389648438, 45.133331298828125 * ᐃ, ᐃ * 200.64999389648438);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[4], Δⵠ[ΔⲆᐃᐃ], ΔⵠΔⵠΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 46.133331298828125, ᐃ * 198.39999389648438);
		Ⲇ.bezierCurveTo(46.133331298828125 * ᐃ, ᐃ * 199.89999389648438, ᐃ * 46.133331298828125, ᐃ * 199.89999389648438, 46.133331298828125 * ᐃ, ᐃ * 201.39999389648438);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⵠⵠᐃΔ], Δⵠ[1], ᐃ * 8);
		Ⲇ.save();
		Ⲇ.translate(249.63333129882812 * ᐃ, ᐃ * 120.89999389648438);
		Ⲇ.rotate(7.04);
		ᐃΔⵠ(Ⲇ, ᐃ * -58.5, ᐃ * -32, ᐃ * 117, ᐃ * 64, ᐃ * ᐃⵠᐃΔⲆ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[5]);
		return ΔⲆ
	}

	function ᐃΔⲆΔⲆⵠⵠᐃΔ(ᐃ, ᐃⵠΔᐃΔ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 86 * ᐃ;
		ΔⲆ.height = 45 * ᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 15, ᐃ * ΔⵠᐃᐃⲆᐃⵠ);
		Ⲇ.bezierCurveTo(ᐃΔⲆⲆΔ * ᐃ, ᐃ * 15, 19.5 * ᐃ, ᐃ * ΔⲆⵠⲆⵠⵠⵠ, 24 * ᐃ, 2 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 41, ᐃ * ⲆᐃⵠΔ, 41 * ᐃ, ᐃ * 2, 58 * ᐃ, ᐃ * ᐃⲆᐃⵠ);
		Ⲇ.bezierCurveTo(ᐃ * 64, ᐃ * ⵠⲆΔⲆⵠⲆΔ, 61 * ᐃ, Δⵠᐃᐃⵠ * ᐃ, ᐃ * 65, ᐃ * ᐃⲆⲆⲆⲆΔⵠ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ᐃᐃΔ], ᐃᐃΔΔᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 43, 27 * ᐃ);
		Ⲇ.rotate(ΔΔᐃ);
		ᐃΔⵠ(Ⲇ, ᐃ * -40, ᐃ * -ⲆΔᐃΔⲆ, ᐃ * 80, 30 * ᐃ, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[1], 4);
		Ⲇ.save();
		Ⲇ.translate(43 * ᐃ, ᐃ * 33);
		Ⲇ.rotate(Δⵠⵠⵠ);
		ᐃΔⵠ(Ⲇ, ᐃ * -17, -4.5 * ᐃ, ᐃ * 34, 9 * ᐃ, 10 * ᐃ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆⵠⵠ], Δⵠ[ⵠⲆⲆ], 4);
		return ΔⲆ
	}

	function ⲆΔⲆΔᐃⵠⵠ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 345 * ᐃ;
		ΔⲆ.height = 250 * ᐃ;
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 105, 58 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 100.5, 43 * ᐃ, ᐃ * 100.5, ᐃ * 43, ᐃ * 96, ᐃ * 28);
		Ⲇ.bezierCurveTo(ᐃ * 119.5, ᐃ * 33.5, ᐃ * 119.5, 33.5 * ᐃ, 143 * ᐃ, 39 * ᐃ);
		Ⲇ.bezierCurveTo(170 * ᐃ, ᐃ * 37, ᐃ * 177, ᐃ * 37, ᐃ * 188, 40 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 213, 33.5 * ᐃ, 213 * ᐃ, ᐃ * 33.5, 238 * ᐃ, 27 * ᐃ);
		Ⲇ.bezierCurveTo(231 * ᐃ, ᐃ * 52, 234 * ᐃ, ᐃ * 42.5, 230 * ᐃ, 58 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⲆΔ], Δⵠ[ᐃᐃΔⵠ], ᐃΔΔᐃΔ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(108 * ᐃ, ᐃ * 51);
		Ⲇ.bezierCurveTo(ᐃ * 91, 55 * ᐃ, ᐃ * 85, 44 * ᐃ, ᐃ * 86, ᐃ * 29);
		Ⲇ.bezierCurveTo(ᐃ * 62, 50 * ᐃ, 78 * ᐃ, 69 * ᐃ, ᐃ * 92, 75 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ᐃᐃΔΔᐃ], ᐃ * ⲆΔⲆᐃᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 249, ᐃ * 27);
		Ⲇ.bezierCurveTo(273 * ᐃ, 49 * ᐃ, 262 * ᐃ, ᐃ * 68, ᐃ * 246, 77 * ᐃ);
		Ⲇ.bezierCurveTo(231 * ᐃ, ᐃ * 59, ᐃ * 236, ᐃ * 66.5, ᐃ * 226, ᐃ * 56);
		Ⲇ.bezierCurveTo(243 * ᐃ, 53 * ᐃ, 252 * ᐃ, ᐃ * 43, ᐃ * 249, ᐃ * 28);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ΔⵠⵠⲆ], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 87, 78 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 87, ᐃ * 59, 98 * ᐃ, ᐃ * 46, 127 * ᐃ, 48 * ᐃ);
		Ⲇ.bezierCurveTo(176 * ᐃ, ᐃ * 48.5, 176 * ᐃ, 48.5 * ᐃ, ᐃ * 225, ᐃ * 49);
		Ⲇ.bezierCurveTo(243 * ᐃ, ᐃ * 49, 253 * ᐃ, ᐃ * 59, ᐃ * 253, 76 * ᐃ);
		Ⲇ.bezierCurveTo(211 * ᐃ, 85.5 * ᐃ, 211 * ᐃ, 85.5 * ᐃ, ᐃ * 169, ᐃ * 95);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆⵠⵠ], Δⵠ[6], ⵠᐃⵠΔⲆ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(56 * ᐃ, 105 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 56, ᐃ * 92, 59 * ᐃ, 86 * ᐃ, 65 * ᐃ, 73 * ᐃ);
		Ⲇ.bezierCurveTo(62.5 * ᐃ, ᐃ * 61.5, 62.5 * ᐃ, 61.5 * ᐃ, 60 * ᐃ, ᐃ * 50);
		Ⲇ.bezierCurveTo(99.5 * ᐃ, 64.5 * ᐃ, ᐃ * 99.5, 64.5 * ᐃ, ᐃ * 139, ᐃ * 79);
		Ⲇ.bezierCurveTo(164 * ᐃ, 77 * ᐃ, 177 * ᐃ, ᐃ * 76, 203 * ᐃ, ᐃ * 78);
		Ⲇ.bezierCurveTo(ᐃ * 242, ᐃ * 63.5, ᐃ * 242, ᐃ * 63.5, ᐃ * 281, ᐃ * 49);
		Ⲇ.bezierCurveTo(ᐃ * 279, ᐃ * 60.5, ᐃ * 279, ᐃ * 60.5, 277 * ᐃ, ᐃ * 72);
		Ⲇ.bezierCurveTo(ᐃ * 286, ᐃ * 88, ᐃ * 286, ᐃ * 96, 287 * ᐃ, 104 * ᐃ);
		Ⲇ.bezierCurveTo(228.5 * ᐃ, 127 * ᐃ, ᐃ * 228.5, ᐃ * 127, 170 * ᐃ, 150 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔΔΔⵠ], ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 48, 130 * ᐃ);
		Ⲇ.bezierCurveTo(61 * ᐃ, ᐃ * 155, ᐃ * 63, 165 * ᐃ, ᐃ * 56, 171 * ᐃ);
		Ⲇ.bezierCurveTo(48 * ᐃ, 177 * ᐃ, 40 * ᐃ, ᐃ * 171, 38 * ᐃ, ᐃ * 178);
		Ⲇ.bezierCurveTo(33 * ᐃ, 180 * ᐃ, 37 * ᐃ, ᐃ * 188, ᐃ * 47, 208 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 52, ᐃ * 221, ᐃ * 55, ᐃ * 222, 75 * ᐃ, ᐃ * 229);
		Ⲇ.bezierCurveTo(ᐃ * 91, ᐃ * 213, ᐃ * 98, ᐃ * 212, ᐃ * 112, 219 * ᐃ);
		Ⲇ.bezierCurveTo(167 * ᐃ, ᐃ * 225, 187 * ᐃ, ᐃ * 224, 222 * ᐃ, 220 * ᐃ);
		Ⲇ.bezierCurveTo(244 * ᐃ, 214 * ᐃ, 247 * ᐃ, 213 * ᐃ, ᐃ * 263, ᐃ * 229);
		Ⲇ.bezierCurveTo(295 * ᐃ, ᐃ * 220, ᐃ * 291, ᐃ * 215, 301 * ᐃ, ᐃ * 194);
		Ⲇ.bezierCurveTo(ᐃ * 308, 178 * ᐃ, ᐃ * 309, ᐃ * 176, 302 * ᐃ, ᐃ * 173);
		Ⲇ.bezierCurveTo(290 * ᐃ, 177 * ᐃ, 289 * ᐃ, ᐃ * 177, ᐃ * 283, ᐃ * 169);
		Ⲇ.bezierCurveTo(ᐃ * 279, 163 * ᐃ, 279 * ᐃ, 161 * ᐃ, ᐃ * 290, 130 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 270, 127 * ᐃ, ᐃ * 270, ᐃ * 127, 250 * ᐃ, 124 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 209, ᐃ * 137.5, 209 * ᐃ, 137.5 * ᐃ, 168 * ᐃ, ᐃ * 151);
		Ⲇ.bezierCurveTo(ᐃ * 121, 135 * ᐃ, ᐃ * 121, ᐃ * 135, 74 * ᐃ, ᐃ * 119);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔΔᐃΔⵠ], ᐃᐃᐃΔⲆ * ᐃ);
		Ⲇ.globalCompositeOperation = ⵠ[381];
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 133, ᐃ * 158);
		Ⲇ.bezierCurveTo(152 * ᐃ, 193 * ᐃ, 158 * ᐃ, ᐃ * 205, ᐃ * 140, ᐃ * 203);
		Ⲇ.bezierCurveTo(ᐃ * 99, ᐃ * 195, ᐃ * 96, 189 * ᐃ, 86 * ᐃ, 173 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 80, ᐃ * 159, 88 * ᐃ, ᐃ * 145, 104 * ᐃ, ᐃ * 141);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ⲆΔⲆⵠⵠ], Δⵠ[8], 8 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 215, 146 * ᐃ);
		Ⲇ.bezierCurveTo(204 * ᐃ, 167 * ᐃ, ᐃ * 204, ᐃ * 167, ᐃ * 193, 188 * ᐃ);
		Ⲇ.bezierCurveTo(187 * ᐃ, ᐃ * 201, ᐃ * 191, ᐃ * 209, 213 * ᐃ, 201 * ᐃ);
		Ⲇ.bezierCurveTo(247 * ᐃ, ᐃ * 192, 253 * ᐃ, 181 * ᐃ, ᐃ * 257, 169 * ᐃ);
		Ⲇ.bezierCurveTo(260 * ᐃ, ᐃ * 157, ᐃ * 254, 149 * ᐃ, ᐃ * 243, 141 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[8], ᐃ * 8);
		Ⲇ.globalCompositeOperation = ⵠ[453];
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(133 * ᐃ, 158 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 152, ᐃ * 193, ᐃ * 158, ᐃ * 205, ᐃ * 140, ᐃ * 203);
		Ⲇ.bezierCurveTo(99 * ᐃ, ᐃ * 195, 96 * ᐃ, ᐃ * 189, ᐃ * 86, 173 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 80, 159 * ᐃ, 88 * ᐃ, ᐃ * 145, 104 * ᐃ, ᐃ * 141);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, ⵠⲆⲆⲆⲆ, Δⵠ[ⲆᐃⲆΔⵠ], Ⲇᐃⵠⵠᐃ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(215 * ᐃ, ᐃ * 146);
		Ⲇ.bezierCurveTo(ᐃ * 204, ᐃ * 167, ᐃ * 204, ᐃ * 167, ᐃ * 193, ᐃ * 188);
		Ⲇ.bezierCurveTo(187 * ᐃ, ᐃ * 201, 191 * ᐃ, ᐃ * 209, 213 * ᐃ, 201 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 247, ᐃ * 192, ᐃ * 253, 181 * ᐃ, ᐃ * 257, 169 * ᐃ);
		Ⲇ.bezierCurveTo(260 * ᐃ, ᐃ * 157, ᐃ * 254, ᐃ * 149, ᐃ * 243, 141 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, undefined, Δⵠ[ᐃᐃᐃΔⲆ], ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(39 * ᐃ, 66 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 57, ᐃ * 107, 63 * ᐃ, ᐃ * 96, ᐃ * 120, ᐃ * 106);
		Ⲇ.bezierCurveTo(154 * ᐃ, 112 * ᐃ, 163 * ᐃ, 116 * ᐃ, ᐃ * 174, ᐃ * 135);
		Ⲇ.bezierCurveTo(180 * ᐃ, 109 * ᐃ, ᐃ * 191, ᐃ * 113, 237 * ᐃ, ᐃ * 103);
		Ⲇ.bezierCurveTo(276 * ᐃ, ᐃⲆΔⲆᐃ * ᐃ, ᐃ * 289, 94 * ᐃ, 301 * ᐃ, 67 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 317, ᐃ * 112, ᐃ * 301, ᐃ * 141, 274 * ᐃ, 139 * ᐃ);
		Ⲇ.bezierCurveTo(204 * ᐃ, ᐃ * 166, 197 * ᐃ, ᐃ * 169, 173 * ᐃ, ᐃ * 183);
		Ⲇ.bezierCurveTo(ᐃ * 170, 183 * ᐃ, ᐃ * 170, 183 * ᐃ, 167 * ᐃ, 183 * ᐃ);
		Ⲇ.bezierCurveTo(132 * ᐃ, ᐃ * 160, ᐃ * 112, ᐃ * 156, ᐃ * 73, ᐃ * 141);
		Ⲇ.bezierCurveTo(43 * ᐃ, 146 * ᐃ, ᐃ * 27, ᐃ * 120, ᐃ * 39, ᐃ * 66);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[ⲆΔΔⲆⵠ], ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(115 * ᐃ, 185 * ᐃ);
		Ⲇ.bezierCurveTo(115 * ᐃ, ᐃ * 200, ᐃ * 118, 206 * ᐃ, 124 * ᐃ, ᐃ * 212);
		Ⲇ.bezierCurveTo(133 * ᐃ, 223 * ᐃ, ᐃ * 132, 231 * ᐃ, 121 * ᐃ, 230 * ᐃ);
		Ⲇ.bezierCurveTo(108 * ᐃ, 226 * ᐃ, ᐃ * 108, ᐃ * 215, 107 * ᐃ, 209 * ᐃ);
		Ⲇ.bezierCurveTo(106 * ᐃ, ᐃ * 201, ᐃ * 110, ᐃ * 196, ᐃ * 114, ᐃ * 185);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⵠ], Δⵠ[ⵠᐃᐃΔ], ᐃ * ⲆⵠⲆⵠⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(226 * ᐃ, ᐃ * 186);
		Ⲇ.bezierCurveTo(ᐃ * 234, ᐃ * 201, 238 * ᐃ, ᐃ * 209, 228 * ᐃ, ᐃ * 225);
		Ⲇ.bezierCurveTo(223 * ᐃ, 233 * ᐃ, ᐃ * 213, ᐃ * 233, 211 * ᐃ, 226 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 206, ᐃ * 219, 217 * ᐃ, 216 * ᐃ, ᐃ * 221, ᐃ * 207);
		Ⲇ.bezierCurveTo(ᐃ * 225, 196 * ᐃ, 225 * ᐃ, 191 * ᐃ, 226 * ᐃ, ᐃ * 186);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ΔⲆΔⵠ], Δⵠ[ᐃᐃΔΔᐃ], ᐃ * ⲆΔΔⲆⵠ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(172 * ᐃ, 110 * ᐃ);
		Ⲇ.bezierCurveTo(189 * ᐃ, ᐃ * 153, ᐃ * 192, 160 * ᐃ, ᐃ * 188, ᐃ * 175);
		Ⲇ.bezierCurveTo(ᐃ * 183, ᐃ * 190, ᐃ * 176, 197 * ᐃ, ᐃ * 165, 191 * ᐃ);
		Ⲇ.bezierCurveTo(153 * ᐃ, ᐃ * 181, 152 * ᐃ, ᐃ * 166, 157 * ᐃ, 151 * ᐃ);
		Ⲇ.bezierCurveTo(164.5 * ᐃ, 131 * ᐃ, ᐃ * 164.5, 131 * ᐃ, ᐃ * 172, 111 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[ⵠⵠᐃΔ], 8 * ᐃ);
		return ΔⲆ
	}

	function ᐃⵠⲆΔᐃΔᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ, Ⲇᐃ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = 170 * ᐃ;
		ΔⲆ.height = ᐃ * 200;
		Ⲇ.translate(ᐃ * 5, Δⵠᐃⵠᐃ * ᐃ);
		Ⲇᐃ == ΔⲆᐃᐃ && (Ⲇ.translate(ΔΔᐃ, ᐃ * -ⲆΔⲆⲆⵠ), ᐃΔΔ(Ⲇ, 77.00003051757812 * ᐃ, ᐃ * 104.49432373046875, 71.84010022264724 * ᐃ), ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔΔᐃᐃⵠ], 20 * ᐃ), ᐃΔΔ(Ⲇ, 77.00003051757812 * ᐃ, 104.22160339355469 * ᐃ, 61.554853586049575 * ᐃ), ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[5], ᐃ * ᐃΔΔⲆΔ), Ⲇ.save(), Ⲇ.translate(ᐃ * 77.00003051757812, ᐃ * 31.267044067382812), ᐃΔⵠ(Ⲇ, ᐃ * -ΔΔΔΔ, -12.5 * ᐃ, ᐃ * 12, ᐃ * 25, ΔⲆᐃΔⲆ * ᐃ), Ⲇ.restore(), ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[5], ᐃ * 20), Ⲇ.save(), Ⲇ.translate(77.00003051757812 * ᐃ, ᐃ * 13.267044067382812), ᐃΔⵠ(Ⲇ, ᐃ * -15, ᐃ * -10.5, 30 * ᐃ, 21 * ᐃ, 10 * ᐃ), Ⲇ.restore(), ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃᐃ], Δⵠ[5], ΔΔⲆΔⲆᐃⲆ * ᐃ));
		ᐃΔΔ(Ⲇ, 77.00003051757812 * ᐃ, 104.49432373046875 * ᐃ, 71.84010022264724 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[Δⵠᐃ], Δⵠ[ᐃⲆᐃⵠ], ᐃ * 7);
		ᐃΔΔ(Ⲇ, ᐃ * 77.00003051757812, 104.22160339355469 * ᐃ, ᐃ * 61.554853586049575);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * ΔᐃᐃᐃⵠΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 18.000030517578125, ᐃ * 105.85795593261719);
		Ⲇ.bezierCurveTo(134.00003051757812 * ᐃ, ᐃ * 104.85795593261719, ᐃ * 77.00003051757812, 104.85795593261719 * ᐃ, ᐃ * 136.00003051757812, ᐃ * 103.85795593261719);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⵠⵠⵠᐃ], ᐃ * 8);
		ᐃΔΔ(Ⲇ, 77.00003051757812 * ᐃ, 104.6761474609375 * ᐃ, ᐃ * 32.55764119219941);
		ΔΔ(Ⲇ, Δⵠ[ⲆᐃΔ], Δⵠ[2], ᐃ * ⲆⲆᐃΔᐃΔⲆ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(78.00003051757812 * ᐃ, ᐃ * 112.03977966308594);
		Ⲇ.bezierCurveTo(78.00003051757812 * ᐃ, ᐃ * 87.03977966308594, 78.00003051757812 * ᐃ, 87.03977966308594 * ᐃ, 78.00003051757812 * ᐃ, 62.03977966308594 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[ᐃⵠΔᐃ], Δⵠ[ⲆⲆⲆⲆ], ᐃ * 8);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 78.00003051757812, 48.03977966308594 * ᐃ);
		Ⲇ.bezierCurveTo(82.00003051757812 * ᐃ, 55.53977966308594 * ᐃ, 82.00003051757812 * ᐃ, 55.53977966308594 * ᐃ, ᐃ * 86.00003051757812, 63.03977966308594 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 78.00003051757812, 63.03977966308594 * ᐃ, ᐃ * 78.00003051757812, ᐃ * 63.03977966308594, ᐃ * 70.00003051757812, 63.03977966308594 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠᐃ], Δⵠ[ΔᐃⵠΔ], 4 * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 80.00003051757812, ᐃ * 111.6761474609375);
		Ⲇ.bezierCurveTo(ᐃ * 95.00003051757812, 97.1761474609375 * ᐃ, ᐃ * 95.00003051757812, ᐃ * 97.1761474609375, 110.00003051757812 * ᐃ, 82.6761474609375 * ᐃ);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[2], ⲆᐃⲆΔⵠ * ᐃ);
		Ⲇ.beginPath();
		Ⲇ.lineCap = ⵠ[401];
		Ⲇ.lineJoin = ⵠ[401];
		Ⲇ.moveTo(ᐃ * 107.00003051757812, 76.6761474609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 111.50003051757812, ᐃ * 82.6761474609375, ᐃ * 111.50003051757812, ᐃ * 82.6761474609375, 116.00003051757812 * ᐃ, 88.6761474609375 * ᐃ);
		Ⲇ.bezierCurveTo(ᐃ * 118.50003051757812, ᐃ * 81.6761474609375, ᐃ * 118.50003051757812, ᐃ * 81.6761474609375, 121.00003051757812 * ᐃ, ᐃ * 74.6761474609375);
		Ⲇ.closePath();
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠᐃ], Δⵠ[ΔΔⲆⲆ], 4 * ᐃ);
		ᐃΔΔ(Ⲇ, 77.00003051757812 * ᐃ, 105.03977966308594 * ᐃ, 15.556349186104045 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[3], Δⵠ[2], 4 * ᐃ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 77.00003051757812, ᐃ * 31.267044067382812);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, -ᐃⵠⲆᐃΔ * ᐃ, ᐃ * -12.5, ᐃ * ⵠᐃⵠΔᐃ, ᐃ * 25, ᐃ * ᐃᐃᐃΔΔ);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[ⵠᐃⵠΔ], Δⵠ[ᐃᐃᐃⵠ], ᐃ * Δᐃⵠᐃⵠ);
		Ⲇ.save();
		Ⲇ.translate(77.00003051757812 * ᐃ, ᐃ * 13.267044067382812);
		Ⲇ.rotate(0);
		ᐃΔⵠ(Ⲇ, ᐃ * -15, ᐃ * -10.5, 30 * ᐃ, ᐃ * 21, ᐃ * 10);
		Ⲇ.restore();
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ΔΔⲆⲆ], ᐃⲆⵠⵠⵠ * ᐃ);
		return ΔⲆ
	}

	function ⲆΔⲆⵠᐃⲆᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 440;
		ΔⲆ.height = ᐃ * 388;
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : ΔⲆᐃⲆ;
		Ⲇ.translate(ᐃ * 5, ᐃ * ΔⲆⲆⵠ);
		ᐃΔΔ(Ⲇ, 220 * ᐃ, ᐃ * 201, 170.41713528867922 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[ⵠⲆΔ], Δⵠ[0], ᐃ * ΔΔΔΔ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.translate(ᐃ * -5, -5 * ᐃ);
		ᐃΔΔ(Ⲇ, 220 * ᐃ, 201 * ᐃ, 170.41713528867922 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ᐃ * ᐃΔᐃΔᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 220, ᐃ * 201, ᐃ * 130);
		ΔΔ(Ⲇ, Δⵠ[ⵠΔΔᐃΔᐃΔ], Δⵠ[ΔᐃⵠΔ], ᐃ * ΔᐃΔᐃᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 222, ᐃ * 199, ᐃ * 120.74767078498864);
		ΔΔ(Ⲇ, ⵠΔⲆⵠΔ, Δⵠ[ⲆⵠⲆᐃ], ᐃ * 40);
		ᐃΔΔ(Ⲇ, 220 * ᐃ, 200 * ᐃ, ᐃ * 95.44108130150245);
		ΔΔ(Ⲇ, ⵠⲆⲆⲆⲆ, Δⵠ[2], ᐃ * 15);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		Ⲇ.translate(ᐃ * 5, ΔⵠⲆᐃᐃ * ᐃ);
		ᐃΔΔ(Ⲇ, 63 * ᐃ, ᐃ * 136, 49.193495504995376 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[ⵠⲆⵠⵠ], ᐃ * 4);
		Ⲇ.globalAlpha = ΔΔⵠΔ;
		Ⲇ.translate(-5 * ᐃ, ᐃ * -5);
		ᐃΔΔ(Ⲇ, 63 * ᐃ, 136 * ᐃ, 49.193495504995376 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[8], Δⵠ[ΔⲆᐃΔ], ⲆΔᐃΔⵠ * ᐃ);
		ᐃΔΔ(Ⲇ, 63 * ᐃ, ᐃ * 137, 25.632011235952593 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[7], Δⵠ[ᐃᐃⲆⲆ], 4 * ᐃ);
		return ΔⲆ
	}

	function ⵠΔⲆⲆᐃᐃΔΔᐃ(ᐃ, ⵠⲆᐃⵠ, Δⵠ) {
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		ΔⲆ.width = ᐃ * 201;
		ΔⲆ.height = ᐃ * 164;
		Ⲇ.translate(0, ᐃᐃᐃⲆ * ᐃ);
		Ⲇ.globalAlpha = ⵠⲆᐃⵠ ? .5 : 1;
		ᐃΔΔ(Ⲇ, ᐃ * 100.5, 82 * ᐃ, ᐃ * 74.92746655359852);
		ΔΔ(Ⲇ, Δⵠ[Δⵠⵠⵠ], Δⵠ[0], ᐃ * 4);
		ᐃΔΔ(Ⲇ, ᐃ * 100.5, 82 * ᐃ, 65.9417374971317 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[0], Δⵠ[0], ᐃΔᐃΔ * ᐃ);
		Ⲇ.translate(0, -ⵠⵠᐃᐃ);
		Ⲇ.globalAlpha = 1;
		ᐃΔΔ(Ⲇ, 100.5 * ᐃ, ᐃ * 82, 74.92746655359852 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[3], ᐃ * 4);
		ᐃΔΔ(Ⲇ, 100.5 * ᐃ, 82 * ᐃ, 65.9417374971317 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[2], ⵠⲆⲆⵠ * ᐃ);
		ᐃΔΔ(Ⲇ, 100.5 * ᐃ, ᐃ * 82, ᐃ * 35.9417374971317);
		ΔΔ(Ⲇ, Δⵠ[ΔⲆᐃⲆ], Δⵠ[2], ᐃ * ᐃⲆΔⲆⲆΔᐃ);
		ᐃΔΔ(Ⲇ, ᐃ * 100.5, ᐃ * 82, 15.9417374971317 * ᐃ);
		ΔΔ(Ⲇ, Δⵠ[1], Δⵠ[ⲆⲆΔⲆ], ᐃ * 6);
		return ΔⲆ
	}
	ⲆⵠᐃⲆᐃ = [];
	ΔⵠᐃΔΔⲆⲆ = [];

	function ⲆⲆᐃⵠⲆΔΔᐃⵠ() {
		ᐃⲆⵠ.ΔΔᐃᐃΔ[ⲆᐃⲆⵠΔΔⲆ[36]] = false;
		var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
		var ⲆΔⲆⵠ = ΔᐃᐃΔ.ΔᐃⵠⲆⲆᐃⵠ;
		if (!ΔⲆⵠ) return;
		for (var Ⲇᐃ = 0; ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⲆᐃᐃ].length > Ⲇᐃ; Ⲇᐃ++) {
			var ΔΔᐃᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⲆᐃᐃ][Ⲇᐃ];
			var ⵠⲆⲆⲆ = ΔⵠΔⵠ.ΔⲆⲆᐃ(ΔΔᐃᐃΔ, ΔⲆⵠ);
			if (ⲆΔⲆⵠ > ⵠⲆⲆⲆ) {
				ⲆΔⲆⵠ = ⵠⲆⲆⲆ;
				ᐃⲆⵠ.ΔΔᐃᐃΔ[ⲆᐃⲆⵠΔΔⲆ[36]] = ΔᐃⲆⵠΔ;
				ᐃⲆⵠ.ΔΔᐃᐃΔ.ⵠⵠΔᐃ = ΔΔᐃᐃΔ.ⵠⵠΔᐃ;
				ᐃⲆⵠ.ΔΔᐃᐃΔ.ⲆᐃΔΔᐃ = ΔΔᐃᐃΔ.id
			}
		}
		if (ⲆΔⲆⵠ < ΔᐃᐃΔ.ΔᐃⵠⲆⲆᐃⵠ) ΔᐃᐃⲆ.ΔΔᐃᐃΔ.ⵠᐃᐃⲆ(Ⲇ)
	}

	function ΔΔⵠⵠᐃΔΔΔΔ() {
		ᐃⲆⵠ.ⵠᐃⲆΔ.id = -1;
		ᐃⲆⵠ.ⵠᐃⲆΔ.lock = false;
		ᐃⲆⵠ.ⵠᐃⲆΔ.locked = ᐃΔⵠᐃⲆ;
		ᐃⲆⵠ.ⵠᐃⲆΔ.ᐃᐃⲆᐃΔᐃⲆ = false;
		ᐃⲆⵠ.ⵠᐃⲆΔ.ΔΔΔⲆᐃⲆΔ = false;
		ᐃⲆⵠ.ⵠᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] = false;
		var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
		var ⲆΔⲆⵠ = ΔᐃᐃΔ.ᐃᐃΔᐃⵠⵠΔ;
		if (!ΔⲆⵠ) return;
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠᐃⲆΔ].length; Ⲇᐃ++) {
			var ⵠᐃⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠᐃⲆΔ][Ⲇᐃ];
			var ⵠⲆⲆⲆ = ΔⵠΔⵠ.ΔⲆⲆᐃ(ⵠᐃⲆΔ, ΔⲆⵠ);
			if (ⵠⲆⲆⲆ < ⲆΔⲆⵠ) {
				ⲆΔⲆⵠ = ⵠⲆⲆⲆ;
				ᐃⲆⵠ.ⵠᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] = ⵠΔΔⵠᐃ;
				ᐃⲆⵠ.ⵠᐃⲆΔ.id = ⵠᐃⲆΔ.action < ᐃᐃΔⵠ ? -1 : Math.floor((ⵠᐃⲆΔ.action - ΔⲆᐃᐃ) / 2);
				ᐃⲆⵠ.ⵠᐃⲆΔ.ΔⲆⵠΔ = ⵠᐃⲆΔ.info;
				ᐃⲆⵠ.ⵠᐃⲆΔ.ⵠⵠΔᐃ = ⵠᐃⲆΔ.ⵠⵠΔᐃ;
				ᐃⲆⵠ.ⵠᐃⲆΔ.ⲆᐃΔΔᐃ = ⵠᐃⲆΔ.id;
				ᐃⲆⵠ.ⵠᐃⲆΔ.locked = ⵠᐃⲆΔ.lock;
				ᐃⲆⵠ.ⵠᐃⲆΔ.lock = ⵠᐃⲆΔ.lock && ⵠᐃⲆΔ.ⵠⵠΔᐃ != ᐃⲆⵠ.id && !ᐃⲆⵠ.ⵠⵠΔⵠΔⵠⵠ(ⵠᐃⲆΔ.ⵠⵠΔᐃ) ? true : false;
				ᐃⲆⵠ.ⵠᐃⲆΔ.ΔΔΔⲆᐃⲆΔ = ᐃⲆⵠ.id === ⵠᐃⲆΔ.ⵠⵠΔᐃ && !ᐃⲆⵠ.ⵠᐃⲆΔ.locked && -1 != ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ⲆⲆⵠⲆΔ) ? true : false;
				if (ᐃⲆⵠ.ⵠᐃⲆΔ.locked && ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ᐃⵠΔⲆᐃ) != -1) ᐃⲆⵠ.ⵠᐃⲆΔ.ᐃᐃⲆᐃΔᐃⲆ = true
			}
		}
		if (ΔᐃᐃΔ.ᐃᐃΔᐃⵠⵠΔ > ⲆΔⲆⵠ) {
			var ᐃᐃ = ᐃΔ[Δ.ᐃᐃΔΔΔᐃⲆ];
			var ⵠⲆᐃΔ = ΔᐃᐃⲆ.ᐃⵠΔ[0];
			var Ⲇⵠ = Math.floor(ⵠⲆᐃΔ.info.translate.x + (ⵠⲆᐃΔ.info.ᐃᐃ[ⵠΔᐃⵠ].width - ᐃᐃ.width) / ΔⵠⲆᐃ);
			var ᐃⵠⲆ = Math.floor(ⵠⲆᐃΔ.info.translate.y + (ⵠⲆᐃΔ.info.ᐃᐃ[0].height - ᐃᐃ.height) / ᐃⲆᐃⵠ) + ᐃⵠΔⵠ;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ);
			if (!ᐃⲆⵠ.ⵠᐃⲆΔ.lock || ᐃⲆⵠ.ⵠᐃⲆΔ.ⵠⵠΔᐃ === ᐃⲆⵠ.id) {
				if (ᐃⲆⵠ.ⵠᐃⲆΔ.id >= 0) {
					var ⵠⲆᐃΔ = ΔᐃᐃⲆ.ᐃⵠΔ[ᐃⲆⵠ.ⵠᐃⲆΔ.id];
					ⵠⲆᐃΔ.ⵠᐃᐃⲆ(Ⲇ);
					var ⵠᐃΔⵠ = ᐃⲆⵠ.ⵠᐃⲆΔ.ΔⲆⵠΔ;
					ⵠᐃΔⵠ > ⵠΔᐃ && ᐃΔⵠΔΔ(ⵠᐃΔⵠ, ⵠⲆᐃΔ)
				}
			}
			if (!ᐃⲆⵠ.ⵠᐃⲆΔ.lock) {
				ᐃⲆⵠ.ⵠᐃⲆΔ.ΔΔΔⲆᐃⲆΔ && ΔᐃᐃⲆ.ⲆⵠⵠΔΔΔⵠ.ⵠᐃᐃⲆ(Ⲇ)
			} else ΔᐃᐃⲆ.ΔΔⵠᐃⲆᐃⵠ.ⵠᐃᐃⲆ(Ⲇ);
			ᐃⲆⵠ.ⵠᐃⲆΔ.ᐃᐃⲆᐃΔᐃⲆ && ΔᐃᐃⲆ.ΔΔΔⲆⵠΔΔ.ⵠᐃᐃⲆ(Ⲇ)
		}
	}

	function ᐃⲆΔⵠⵠⵠᐃΔⲆ() {
		if (!ᐃⲆⵠ.ⲆᐃⲆᐃΔⵠⵠ) return;
		Ⲇ.globalAlpha = .5;
		Ⲇ.fillStyle = ⵠ[204];
		Ⲇ.fillRect(ⲆⵠⲆⲆ, 0, ᐃⲆⵠⵠ, Ⲇᐃᐃᐃ);
		Ⲇ.globalAlpha = .8;
		var ᐃᐃ = ᐃΔ[Δ.ⵠᐃΔΔΔⵠΔ][ⲆⵠΔ.time];
		var Ⲇⵠ = ΔⵠⵠΔ - ᐃᐃ.width / 2;
		var ᐃⵠⲆ = ᐃⲆΔⲆ - ᐃᐃ.height / ΔᐃΔᐃ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ);
		Ⲇ.globalAlpha = 1;
		if (ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.x > -1) {
			Ⲇ.fillStyle = ⵠ[241];
			ᐃΔΔ(Ⲇ, Ⲇⵠ + ᐃ * (3 * ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.x), ᐃⵠⲆ + ᐃ * (ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.y * ⲆΔⵠⵠⵠ), ᐃⵠⵠΔⵠΔⵠ * ᐃ);
			Ⲇ.fill()
		}
		var ⵠΔᐃΔ = ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.ⵠΔᐃΔ;
		for (var Ⲇᐃ = ⵠᐃⲆⲆ; Ⲇᐃ < ⵠΔᐃΔ.length; Ⲇᐃ++) {
			var ΔⲆⵠ = ⵠΔᐃΔ[Ⲇᐃ];
			Ⲇ.fillStyle = !ⲆⵠΔ.time ? ⵠ[519] : ⵠ[519];
			ᐃΔΔ(Ⲇ, Ⲇⵠ + ΔⲆⵠ.x / (ᐃΔⵠᐃⵠ * ⲆⵠΔ.ΔᐃᐃⵠΔ) * 600 * ᐃ, ᐃⵠⲆ + ᐃ * (ΔⲆⵠ.y / (ⲆⵠΔ.ᐃⵠᐃᐃᐃ * ᐃΔᐃⵠⵠ) * 600), ⲆⲆⵠⵠⲆ * ᐃ);
			Ⲇ.fill()
		}
		var ⲆΔⲆΔ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
		if (ⲆΔⲆΔ) {
			Ⲇ.fillStyle = !ⲆⵠΔ.time ? "#e39716" : ⵠ[496];
			ᐃΔΔ(Ⲇ, Ⲇⵠ + ⲆΔⲆΔ.x / (ⲆⵠΔ.ΔᐃᐃⵠΔ * 100) * 600 * ᐃ, ᐃⵠⲆ + 600 * (ⲆΔⲆΔ.y / (100 * ⲆⵠΔ.ᐃⵠᐃᐃᐃ)) * ᐃ, ᐃ * 12);
			Ⲇ.fill()
		}
	}

	function ⵠΔⲆᐃᐃΔⲆⵠⲆ() {
		if (ᐃⲆⵠ.ⵠᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] || ᐃⲆⵠ.ᐃⲆᐃⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]]) return;
		ᐃⲆⵠ.ᐃᐃΔⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] = ⵠᐃⵠⲆⲆ;
		var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
		var ⲆΔⲆⵠ = ΔᐃᐃΔ.ᐃⵠⵠⵠᐃᐃᐃ;
		if (!ΔⲆⵠ) return;
		for (var ⲆⲆᐃⲆ = Ⲇᐃⵠ; ⲆⲆᐃⲆ < ⵠΔⲆΔⲆᐃΔ.length; ⲆⲆᐃⲆ++) {
			var ⲆΔⲆᐃ = ⵠΔⲆΔⲆᐃΔ[ⲆⲆᐃⲆ][Ⲇᐃⵠ];
			var ⵠⲆᐃᐃⲆⵠⲆ = ⵠΔⲆΔⲆᐃΔ[ⲆⲆᐃⲆ][ΔⲆᐃᐃ];
			for (var Ⲇᐃ = ⵠⵠⵠΔ; ⲆⵠΔ.ⲆΔΔ[ⲆΔⲆᐃ].length > Ⲇᐃ; Ⲇᐃ++) {
				var ᐃᐃΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⲆΔⲆᐃ][Ⲇᐃ];
				var ⵠⲆⲆⲆ = ΔⵠΔⵠ.ΔⲆⲆᐃ(ᐃᐃΔⲆ, ΔⲆⵠ);
				ⲆΔⲆⵠ > ⵠⲆⲆⲆ && (ⲆΔⲆⵠ = ⵠⲆⲆⲆ, ᐃⲆⵠ.ᐃᐃΔⲆ.ⵠⲆᐃᐃⲆⵠⲆ = ⵠⲆᐃᐃⲆⵠⲆ, ᐃⲆⵠ.ᐃᐃΔⲆ.type = ⲆΔⲆᐃ, ᐃⲆⵠ.ᐃᐃΔⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] = true, ᐃⲆⵠ.ᐃᐃΔⲆ.ⵠⵠⵠΔⵠΔⲆ = ᐃᐃΔⲆ.info & 255, ᐃⲆⵠ.ᐃᐃΔⲆ.ⵠⲆΔᐃⵠᐃⵠ = (ᐃᐃΔⲆ.info & 65280) >> 8, ᐃⲆⵠ.ᐃᐃΔⲆ.ⵠⵠΔᐃ = ᐃᐃΔⲆ.ⵠⵠΔᐃ, ᐃⲆⵠ.ᐃᐃΔⲆ.ⲆᐃΔΔᐃ = ᐃᐃΔⲆ.id)
			}
		}
		if (ΔᐃᐃΔ.ᐃⵠⵠⵠᐃᐃᐃ > ⲆΔⲆⵠ) {
			var ᐃᐃ = ᐃΔ[Δ.ⲆΔΔᐃᐃᐃΔ];
			var ⵠⲆᐃΔ = ΔᐃᐃⲆ.ΔⵠⲆⵠΔᐃⵠ;
			var Ⲇⵠ = ⵠⲆᐃΔ.info.translate.x - 33;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ, ΔΔᐃ);
			if (ᐃⲆⵠ.ᐃᐃΔⲆ.ⵠⵠⵠΔⵠΔⲆ > ⵠΔᐃᐃ) {
				ⵠⲆᐃΔ.ⵠᐃᐃⲆ(Ⲇ);
				var ⵠᐃΔⵠ = ᐃⲆⵠ.ᐃᐃΔⲆ.ⵠⵠⵠΔⵠΔⲆ;
				1 < ⵠᐃΔⵠ && ᐃΔⵠΔΔ(ⵠᐃΔⵠ, ⵠⲆᐃΔ)
			}
			switch (ᐃⲆⵠ.ᐃᐃΔⲆ.ⵠⲆᐃᐃⲆⵠⲆ) {
				case ⵠⵠ.ⵠⵠΔΔ:
					var ⵠⲆᐃΔ = ΔᐃᐃⲆ.ⲆⵠⵠΔΔⵠⲆ;
					break;
				case ⵠⵠ.ᐃΔᐃⲆ:
					var ⵠⲆᐃΔ = ΔᐃᐃⲆ.ⵠᐃᐃⵠⲆⵠᐃ;
					break;
				case ⵠⵠ.ⲆᐃⲆᐃ:
					var ⵠⲆᐃΔ = ΔᐃᐃⲆ.ⵠⲆⲆⲆΔΔΔ;
					break;
				case ⵠⵠ.ⲆΔΔᐃ:
					var ⵠⲆᐃΔ = ΔᐃᐃⲆ.ⵠⵠΔΔᐃⵠⵠ;
					break;
				case ⵠⵠ.ⲆᐃⲆⲆ:
					var ⵠⲆᐃΔ = ΔᐃᐃⲆ.ΔΔΔΔΔⲆΔ;
					break
			}
			if (ⵠⲆΔ < ᐃⲆⵠ.ᐃᐃΔⲆ.ⵠⲆΔᐃⵠᐃⵠ) {
				ⵠⲆᐃΔ.ⵠᐃᐃⲆ(Ⲇ);
				var ⵠᐃΔⵠ = ᐃⲆⵠ.ᐃᐃΔⲆ.ⵠⲆΔᐃⵠᐃⵠ;
				1 < ⵠᐃΔⵠ && ᐃΔⵠΔΔ(ⵠᐃΔⵠ, ⵠⲆᐃΔ)
			}
		}
	}

	function ᐃⲆΔΔⵠΔᐃᐃΔ(ⵠᐃΔⵠ, ⵠⲆᐃΔ, ᐃⲆⲆ) {
		var ᐃᐃ = ᐃΔ[Δ.ⲆᐃΔⵠᐃⵠΔ][ⵠᐃΔⵠ];
		var Ⲇⵠ = ⵠⲆᐃΔ.info.translate.x + ᐃ * 5;
		var ᐃⵠⲆ = ⵠⲆᐃΔ.info.translate.y + ᐃ * ⲆΔⲆⲆⵠ;
		if (ⵠⲆᐃΔ.info.state == ΔⵠᐃΔ || ᐃⲆⲆ) ᐃⵠⲆ += ⲆⲆᐃᐃ * ᐃ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ)
	}

	function ᐃⲆᐃⵠΔΔⵠⵠᐃ() {
		if (ᐃⲆⵠ.ⵠᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] || ᐃⲆⵠ.ᐃⲆᐃⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]]) return;
		ᐃⲆⵠ.ⲆᐃⲆⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] = false;
		var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
		var ⲆΔⲆⵠ = ΔᐃᐃΔ.ⵠΔΔⵠⲆⲆᐃ;
		if (!ΔⲆⵠ) return;
		for (var Ⲇᐃ = Δⵠⵠⵠ; ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠΔᐃⲆ].length > Ⲇᐃ; Ⲇᐃ++) {
			var ⲆᐃⲆⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠΔᐃⲆ][Ⲇᐃ];
			var ⵠⲆⲆⲆ = ΔⵠΔⵠ.ΔⲆⲆᐃ(ⲆᐃⲆⵠ, ΔⲆⵠ);
			ⲆΔⲆⵠ > ⵠⲆⲆⲆ && (ⲆΔⲆⵠ = ⵠⲆⲆⲆ, ᐃⲆⵠ.ⲆᐃⲆⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] = true, ᐃⲆⵠ.ⲆᐃⲆⵠ.ΔΔᐃⲆⲆᐃΔ = ⲆᐃⲆⵠ.info & 255, ᐃⲆⵠ.ⲆᐃⲆⵠ.ΔⲆⲆΔᐃ = (ⲆᐃⲆⵠ.info & 65280) >> 8, ᐃⲆⵠ.ⲆᐃⲆⵠ.ⵠⵠΔᐃ = ⲆᐃⲆⵠ.ⵠⵠΔᐃ, ᐃⲆⵠ.ⲆᐃⲆⵠ.ⲆᐃΔΔᐃ = ⲆᐃⲆⵠ.id)
		}
		if (ΔᐃᐃΔ.ⵠΔΔⵠⲆⲆᐃ > ⲆΔⲆⵠ) {
			var ᐃᐃ = ᐃΔ[Δ.ⵠᐃⵠⵠⲆⲆᐃ];
			var ⵠⲆᐃΔ = ΔᐃᐃⲆ.ⲆΔⵠΔΔⵠᐃ;
			var Ⲇⵠ = ⵠⲆᐃΔ.info.translate.x - 33;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ, ΔΔᐃ);
			if (0 < ᐃⲆⵠ.ⲆᐃⲆⵠ.ΔΔᐃⲆⲆᐃΔ) {
				ⵠⲆᐃΔ.ⵠᐃᐃⲆ(Ⲇ);
				var ⵠᐃΔⵠ = ᐃⲆⵠ.ⲆᐃⲆⵠ.ΔΔᐃⲆⲆᐃΔ;
				ΔⲆᐃⲆ < ⵠᐃΔⵠ && ᐃΔⵠΔΔ(ⵠᐃΔⵠ, ⵠⲆᐃΔ)
			}
			var ⵠⲆᐃΔ = ΔᐃᐃⲆ.ΔᐃᐃⵠⵠⵠⲆ;
			if (0 < ᐃⲆⵠ.ⲆᐃⲆⵠ.ΔⲆⲆΔᐃ) {
				ⵠⲆᐃΔ.ⵠᐃᐃⲆ(Ⲇ);
				var ⵠᐃΔⵠ = ᐃⲆⵠ.ⲆᐃⲆⵠ.ΔⲆⲆΔᐃ;
				if (ⵠᐃΔⵠ > ΔⵠΔ) ᐃΔⵠΔΔ(ⵠᐃΔⵠ, ⵠⲆᐃΔ)
			}
		}
	}

	function ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ⲆⲆᐃΔ, ᐃⵠⵠΔ, ᐃⲆⲆᐃ, ᐃⲆⵠⲆ, Δⵠⵠ, ᐃⵠⵠⲆⵠΔⵠ, ⲆΔⲆ, Ⲇᐃ) {
		if (ᐃᐃ.ᐃⲆⵠᐃⲆΔⵠ === undefined || 1 === ᐃᐃ.ᐃⲆⵠᐃⲆΔⵠ()) {
			if (Settings.Xray.enabled) arguments[0].globalAlpha = Settings.XrayOpacity;
			if (Ⲇᐃ !== ΔΔⵠΔΔ) Ⲇ.drawImage(ᐃᐃ, ⲆⲆᐃΔ, ᐃⵠⵠΔ, Math.max(ⵠⲆⲆ, ᐃⲆⲆᐃ), Math.max(1, ᐃⲆⵠⲆ), Δⵠⵠ, ᐃⵠⵠⲆⵠΔⵠ, ⲆΔⲆ, Ⲇᐃ);
			else Ⲇⵠⵠᐃᐃ !== ᐃⲆⵠⲆ ? Ⲇ.drawImage(ᐃᐃ, ⲆⲆᐃΔ, ᐃⵠⵠΔ, ᐃⲆⲆᐃ, ᐃⲆⵠⲆ) : Ⲇ.drawImage(ᐃᐃ, ⲆⲆᐃΔ, ᐃⵠⵠΔ)
		}
	}
	window.ctxDrawImage = ᐃᐃⵠⲆ;

	function ⵠᐃΔⲆⵠᐃΔᐃᐃ() {
		if (0 < ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length) var Δⵠⵠⵠⵠ = {
			x: ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.translate.x,
			y: ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.translate.y - 120 * ᐃ
		};
		else var Δⵠⵠⵠⵠ = {
			x: ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.translate.x,
			y: ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.translate.y - 50 * ᐃ
		};
		Ⲇ.globalAlpha = .8;
		var ᐃᐃ = ᐃΔ[Δ.ⲆⵠᐃᐃΔᐃᐃ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Δⵠⵠⵠⵠ.x, Δⵠⵠⵠⵠ.y);
		Ⲇ.globalAlpha = ΔΔⵠΔ;
		if (-1 < ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.x) {
			Ⲇ.fillStyle = ⵠ[241];
			ᐃΔΔ(Ⲇ, Δⵠⵠⵠⵠ.x + ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.x * ᐃ, Δⵠⵠⵠⵠ.y + ᐃ * ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.y, ᐃ * ΔΔᐃᐃⵠ);
			Ⲇ.fill()
		}
		var ⲆⵠᐃⲆΔⵠⲆ = ᐃ;
		var ⵠΔᐃΔ = ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.ⵠΔᐃΔ;
		for (var Ⲇᐃ = ⵠⲆⵠⵠ; Ⲇᐃ < ⵠΔᐃΔ.length; Ⲇᐃ++) {
			var ΔⲆⵠ = ⵠΔᐃΔ[Ⲇᐃ];
			Ⲇ.fillStyle = !ⲆⵠΔ.time ? ⵠ[519] : ⵠ[519];
			ᐃΔΔ(Ⲇ, Δⵠⵠⵠⵠ.x + ᐃ * (ΔⲆⵠ.x / (100 * ⲆⵠΔ.ΔᐃᐃⵠΔ) * 193), Δⵠⵠⵠⵠ.y + 193 * (ΔⲆⵠ.y / (100 * ⲆⵠΔ.ᐃⵠᐃᐃᐃ)) * ᐃ, ᐃ * 2);
			Ⲇ.fill()
		}
		/*
					if (Settings.Death.enabled) {
			if (Settings.Death.x != null && Settings.Death.y != null) {
				ᐃ.fillStyle = "red";
				ᐃΔΔ(ᐃ, Δⵠⵠⵠⵠ.x + 193 * (Settings.Death.x / (world.ΔᐃᐃⵠΔ * 100)) * ᐃ,
				Δⵠⵠⵠⵠ.y + 193 * (Settings.Death.y / (world.ᐃⵠᐃᐃᐃ * 100)) *ᐃ, ᐃ * 4);
				Ⲇ.fill();
			}	
		}
			if (Settings.Totem.enabled) {
			if (Settings.Totem.y != null && Settings.Totem.x != null) {
				ᐃ.fillStyle = "black";
				ᐃΔΔ(ᐃ, Δⵠⵠⵠⵠ.x + 193 * (Settings.Totem.x / (world.ΔᐃᐃⵠΔ * 100)) * ᐃ,
				Δⵠⵠⵠⵠ.y + 193 * (Settings.Totem.y / (world.ᐃⵠᐃᐃᐃ * 100)) *ᐃ, ᐃ * 4);
				Ⲇ.fill();
			}
		}
			*/
			
		var ⲆΔⲆΔ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
		if (ⲆΔⲆΔ) {
			Ⲇ.fillStyle = !ⲆⵠΔ.time ? "#e39716" : ⵠ[496];
			ᐃΔΔ(Ⲇ, Δⵠⵠⵠⵠ.x + ᐃ * (193 * (ⲆΔⲆΔ.x / (100 * ⲆⵠΔ.ΔᐃᐃⵠΔ))), Δⵠⵠⵠⵠ.y + ᐃ * (ⲆΔⲆΔ.y / (100 * ⲆⵠΔ.ᐃⵠᐃᐃᐃ) * 193), ᐃ * 4);
			Ⲇ.fill()
		}
		ᐃ = ⲆⵠᐃⲆΔⵠⲆ
	}

	function ᐃΔⵠΔΔ(ⵠᐃΔⵠ, ⵠⲆᐃΔ) {
		!ᐃΔ[Δ.ᐃⵠ][ⵠᐃΔⵠ] && (ᐃΔ[Δ.ᐃⵠ][ⵠᐃΔⵠ] = ᐃⵠΔΔΔ(ᐃ, "x" + ⵠᐃΔⵠ, 17, ⵠ[447]));
		var ᐃᐃ = ᐃΔ[Δ.ᐃⵠ][ⵠᐃΔⵠ];
		var Ⲇⵠ = ⵠⲆᐃΔ.info.translate.x + ⵠⲆᐃΔ.info.ᐃᐃ[ⵠⲆΔ].width - ᐃᐃ.width - ᐃ * 14;
		var ᐃⵠⲆ = ⵠⲆᐃΔ.info.translate.y + ⵠⲆᐃΔ.info.ᐃᐃ[0].height - ᐃᐃ.height - ᐃ * 19;
		if (ΔⵠᐃΔ == ⵠⲆᐃΔ.info.state) ᐃⵠⲆ += ᐃ * 5;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ)
	}

	function ⲆⵠΔⲆⵠΔΔⵠⲆ() {
		if (ᐃⲆⵠ.ⵠᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] || ᐃⲆⵠ.ᐃⲆᐃⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] || ᐃⲆⵠ.ⲆᐃⲆⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] || ᐃⲆⵠ.ᐃᐃΔⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) return;
		ᐃⲆⵠ.ᐃⵠᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] = ᐃΔⵠᐃⲆ;
		var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
		var ⲆΔⲆⵠ = ΔᐃᐃΔ.ⵠᐃΔᐃΔⵠᐃ;
		if (!ΔⲆⵠ) return;
		for (var Ⲇᐃ = ⵠⲆΔ; ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⵠᐃ].length > Ⲇᐃ; Ⲇᐃ++) {
			var ᐃⵠᐃᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⵠᐃ][Ⲇᐃ];
			var ⵠⲆⲆⲆ = ΔⵠΔⵠ.ΔⲆⲆᐃ(ᐃⵠᐃᐃ, ΔⲆⵠ);
			if (ⲆΔⲆⵠ > ⵠⲆⲆⲆ) {
				ⲆΔⲆⵠ = ⵠⲆⲆⲆ;
				ᐃⲆⵠ.ᐃⵠᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] = ᐃΔⲆΔᐃ;
				ᐃⲆⵠ.ᐃⵠᐃᐃ.ⵠⵠⵠΔⵠΔⲆ = ᐃⵠᐃᐃ.info & 31;
				ᐃⲆⵠ.ᐃⵠᐃᐃ.ΔⲆⲆΔᐃ = (ᐃⵠᐃᐃ.info & 992) >> 5;
				ᐃⲆⵠ.ᐃⵠᐃᐃ.ⲆⲆⵠΔΔᐃᐃ = (ᐃⵠᐃᐃ.info & 31744) >> 10;
				ᐃⲆⵠ.ᐃⵠᐃᐃ.ⵠⵠΔᐃ = ᐃⵠᐃᐃ.ⵠⵠΔᐃ;
				ᐃⲆⵠ.ᐃⵠᐃᐃ.ⲆᐃΔΔᐃ = ᐃⵠᐃᐃ.id
			}
		}
		if (ⲆΔⲆⵠ < ΔᐃᐃΔ.ⵠᐃΔᐃΔⵠᐃ) {
			var ᐃᐃ = ᐃΔ[Δ.ⲆⲆᐃᐃᐃΔⲆ];
			var ⵠⲆᐃΔ = ΔᐃᐃⲆ.ΔΔᐃΔᐃⵠᐃ;
			var Ⲇⵠ = ⵠⲆᐃΔ.info.translate.x - 32;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ, Δⵠⵠⵠ);
			if (Ⲇᐃⵠ < ᐃⲆⵠ.ᐃⵠᐃᐃ.ⵠⵠⵠΔⵠΔⲆ) {
				ⵠⲆᐃΔ.ⵠᐃᐃⲆ(Ⲇ);
				var ⵠᐃΔⵠ = ᐃⲆⵠ.ᐃⵠᐃᐃ.ⵠⵠⵠΔⵠΔⲆ;
				ⵠᐃΔⵠ > 1 && ᐃΔⵠΔΔ(ⵠᐃΔⵠ, ⵠⲆᐃΔ)
			}
			var ⵠⲆᐃΔ = ΔᐃᐃⲆ.ⵠΔⵠᐃⲆᐃⲆ;
			if (0 < ᐃⲆⵠ.ᐃⵠᐃᐃ.ⲆⲆⵠΔΔᐃᐃ) {
				ⵠⲆᐃΔ.ⵠᐃᐃⲆ(Ⲇ);
				var ⵠᐃΔⵠ = ᐃⲆⵠ.ᐃⵠᐃᐃ.ⲆⲆⵠΔΔᐃᐃ;
				ⵠᐃΔⵠ > 1 && ᐃΔⵠΔΔ(ⵠᐃΔⵠ, ⵠⲆᐃΔ)
			}
			var ⵠⲆᐃΔ = ΔᐃᐃⲆ.ᐃᐃΔⲆΔΔⵠ;
			if (ᐃⲆⵠ.ᐃⵠᐃᐃ.ΔⲆⲆΔᐃ > 0) {
				ⵠⲆᐃΔ.ⵠᐃᐃⲆ(Ⲇ);
				var ⵠᐃΔⵠ = ᐃⲆⵠ.ᐃⵠᐃᐃ.ΔⲆⲆΔᐃ;
				ⵠᐃⵠΔ < ⵠᐃΔⵠ && ᐃΔⵠΔΔ(ⵠᐃΔⵠ, ⵠⲆᐃΔ)
			}
		}
	}

	function ⲆΔⵠΔᐃⵠⵠ() {
		ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.id = -1;
		ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.ⵠⵠΔᐃ = -ΔΔΔᐃ;
		if (ᐃⲆⵠ.ⲆⵠΔⵠΔⲆΔ || ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.wait || ᐃⲆⵠ.ΔΔΔⵠⵠ) return;
		var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
		var ⲆΔⲆⵠ = ΔᐃᐃΔ.ᐃⲆⵠᐃⵠᐃⲆᐃᐃ;
		if (ΔⲆⵠ) {
			for (var Ⲇᐃ = 0; ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⲆΔⲆ].length > Ⲇᐃ; Ⲇᐃ++) {
				var ⵠⲆⲆⲆⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⲆΔⲆ][Ⲇᐃ];
				var ⵠⲆⲆⲆ = ΔⵠΔⵠ.ΔⲆⲆᐃ(ⵠⲆⲆⲆⵠ, ΔⲆⵠ);
				ⲆΔⲆⵠ > ⵠⲆⲆⲆ && (ⲆΔⲆⵠ = ⵠⲆⲆⲆ, ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.id = ⵠⲆⲆⲆⵠ.id, ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.ⵠⵠΔᐃ = ⵠⲆⲆⲆⵠ.ⵠⵠΔᐃ, ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.info = ⵠⲆⲆⲆⵠ.info, ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.lock = (ⵠⲆⲆⲆⵠ.info & ⲆⲆᐃⵠᐃᐃΔ) >> ⵠᐃΔΔ)
			}
		}
		var ⲆⵠⲆⲆᐃᐃⲆᐃᐃ = ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ;
		ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ = -ΔΔΔᐃ;
		if (ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.ⵠⵠΔᐃ != -ΔᐃⵠⲆ && (ᐃⲆⵠ.ᐃΔⵠⵠᐃ.length == 0 || ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.ⵠⵠΔᐃ == ᐃⲆⵠ.id)) {
			if (ᐃⵠⵠⲆ == ᐃⲆⵠ.ᐃΔⵠⵠᐃ.length && ⲆΔΔⲆⵠ <= ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.info) ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ = ⵠⲆⲆⵠⲆ.ⲆᐃΔΔΔΔᐃ;
			else 0 == ᐃⲆⵠ.ᐃΔⵠⵠᐃ.length ? ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ = ⵠⲆⲆⵠⲆ.ⲆᐃⵠⵠΔⵠⵠ : ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ = ⵠⲆⲆⵠⲆ.Ⲇᐃⵠᐃⵠᐃᐃ
		} else if (ᐃᐃᐃ != ᐃⲆⵠ.ᐃΔⵠⵠᐃ.length && ᐃⲆⵠ.ᐃΔⵠⵠᐃ[0] != ᐃⲆⵠ.id) ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ = ⵠⲆⲆⵠⲆ.ᐃⲆᐃⵠⵠΔᐃ;
		else if (0 != ᐃⲆⵠ.ᐃΔⵠⵠᐃ.length && ᐃⲆⵠ.id == ᐃⲆⵠ.ᐃΔⵠⵠᐃ[0]) ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ = ⵠⲆⲆⵠⲆ.ΔⲆΔⲆⲆᐃΔ;
		else 0 != ᐃⲆⵠ.ᐃΔⵠⵠᐃ.length && (ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ = ⵠⲆⲆⵠⲆ.ⲆᐃⵠⵠΔⵠⵠ);
		ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ != -ⵠᐃⵠΔ && ΔᐃᐃⲆ.ΔⵠⲆⵠΔ[ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ].button.ⵠᐃᐃⲆ(Ⲇ);
		var ⲆⲆΔΔ = document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[173]).style; - Ⲇⵠᐃ != ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ && ⲆⵠⲆⲆᐃᐃⲆᐃᐃ != ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ && ⲆⲆΔΔ.display == ⵠ[442] && ΔᐃᐃⲆ.ΔⵠⲆⵠΔ[ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ].action()
	}

	function ᐃᐃΔⵠⵠⲆⲆⲆΔ() {
		if (ᐃⲆⵠ.ⵠᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] || ᐃⲆⵠ.ᐃⲆᐃⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] || ᐃⲆⵠ.ⲆᐃⲆⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] || ᐃⲆⵠ.ᐃⵠᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] || ᐃⲆⵠ.ᐃᐃΔⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) return;
		ᐃⲆⵠ.ⵠⵠΔΔᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] = false;
		var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
		var ⲆΔⲆⵠ = ΔᐃᐃΔ.ᐃⵠⵠⲆⲆΔⵠᐃᐃ;
		if (!ΔⲆⵠ) return;
		for (var Ⲇᐃ = 0; ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔᐃΔ].length > Ⲇᐃ; Ⲇᐃ++) {
			var ⵠⵠΔΔᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔᐃΔ][Ⲇᐃ];
			var ⵠⲆⲆⲆ = ΔⵠΔⵠ.ΔⲆⲆᐃ(ⵠⵠΔΔᐃ, ΔⲆⵠ);
			if (ⲆΔⲆⵠ > ⵠⲆⲆⲆ) {
				ⲆΔⲆⵠ = ⵠⲆⲆⲆ;
				ᐃⲆⵠ.ⵠⵠΔΔᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] = true;
				ᐃⲆⵠ.ⵠⵠΔΔᐃ.ⵠⵠΔᐃ = ⵠⵠΔΔᐃ.ⵠⵠΔᐃ;
				ᐃⲆⵠ.ⵠⵠΔΔᐃ.ⲆᐃΔΔᐃ = ⵠⵠΔΔᐃ.id
			}
		}
	}

	function ⲆⵠΔⵠⲆⵠᐃⲆⵠ() {
		if (ᐃⲆⵠ.ⵠᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]) return;
		ᐃⲆⵠ.ᐃⲆᐃⵠᐃ.ΔⲆⵠΔ = 0;
		ᐃⲆⵠ.ᐃⲆᐃⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] = false;
		var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
		var ⲆΔⲆⵠ = ΔᐃᐃΔ.ΔⲆΔⵠᐃⲆⵠ;
		if (!ΔⲆⵠ) return;
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⲆⲆΔ].length; Ⲇᐃ++) {
			var ᐃⲆᐃⵠᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⲆⲆΔ][Ⲇᐃ];
			var ⵠⲆⲆⲆ = ΔⵠΔⵠ.ΔⲆⲆᐃ(ᐃⲆᐃⵠᐃ, ΔⲆⵠ);
			ⵠⲆⲆⲆ < ⲆΔⲆⵠ && (ⲆΔⲆⵠ = ⵠⲆⲆⲆ, ᐃⲆⵠ.ᐃⲆᐃⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] = ⲆⵠⵠⵠⲆ, ᐃⲆⵠ.ᐃⲆᐃⵠᐃ.ΔⲆⵠΔ = ᐃⲆᐃⵠᐃ.info, ᐃⲆⵠ.ᐃⲆᐃⵠᐃ.ⵠⵠΔᐃ = ᐃⲆᐃⵠᐃ.ⵠⵠΔᐃ, ᐃⲆⵠ.ᐃⲆᐃⵠᐃ.ⲆᐃΔΔᐃ = ᐃⲆᐃⵠᐃ.id)
		}
		if (ⲆΔⲆⵠ < ΔᐃᐃΔ.ΔⲆΔⵠᐃⲆⵠ) {
			var ᐃᐃ = ᐃΔ[Δ.ΔⵠΔⲆΔⵠⵠ];
			var ⵠⲆᐃΔ = ΔᐃᐃⲆ.ΔⲆᐃⵠⵠⲆΔ;
			var Ⲇⵠ = Math.floor(ⵠⲆᐃΔ.info.translate.x + (ⵠⲆᐃΔ.info.ᐃᐃ[0].width - ᐃᐃ.width) / 2);
			var ᐃⵠⲆ = Math.floor(ⵠⲆᐃΔ.info.translate.y + (ⵠⲆᐃΔ.info.ᐃᐃ[0].height - ᐃᐃ.height) / ΔᐃⵠΔ) + 3;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ);
			if (ⲆⲆⵠⲆ < ᐃⲆⵠ.ᐃⲆᐃⵠᐃ.ΔⲆⵠΔ) {
				ⵠⲆᐃΔ.ⵠᐃᐃⲆ(Ⲇ);
				var ⵠᐃΔⵠ = ᐃⲆⵠ.ᐃⲆᐃⵠᐃ.ΔⲆⵠΔ;
				1 < ⵠᐃΔⵠ && ᐃΔⵠΔΔ(ⵠᐃΔⵠ, ⵠⲆᐃΔ)
			}
		}
	}

	function ⵠᐃᐃⲆΔᐃᐃΔⲆ() {
		if (ᐃⲆⵠ.ⵠᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] || ᐃⲆⵠ.ᐃⲆᐃⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] || ᐃⲆⵠ.ⲆᐃⲆⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] || ᐃⲆⵠ.ᐃⵠᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] || ᐃⲆⵠ.ᐃᐃΔⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) return;
		ᐃⲆⵠ.sign[ⲆᐃⲆⵠΔΔⲆ[36]] = ᐃⲆⲆΔⵠ;
		var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
		var ⲆΔⲆⵠ = ΔᐃᐃΔ.ⵠᐃΔⲆⲆᐃΔ;
		if (!ΔⲆⵠ) return;
		for (var Ⲇᐃ = 0; ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⲆⲆ].length > Ⲇᐃ; Ⲇᐃ++) {
			var ⵠⵠᐃⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⲆⲆ][Ⲇᐃ];
			var ⵠⲆⲆⲆ = ΔⵠΔⵠ.ΔⲆⲆᐃ(ⵠⵠᐃⵠ, ΔⲆⵠ);
			if (ⵠⲆⲆⲆ < ⲆΔⲆⵠ && ΔⲆⲆ === ⵠⵠᐃⵠ.info && ⵠⵠᐃⵠ.ⵠⵠΔᐃ === ᐃⲆⵠ.id) {
				ᐃⲆⵠ.sign[ⲆᐃⲆⵠΔΔⲆ[36]] = true;
				ⲆΔⲆⵠ = ⵠⲆⲆⲆ;
				ᐃⲆⵠ.sign.ⲆᐃΔΔᐃ = ⵠⵠᐃⵠ.id
			}
		}
		if (ΔᐃᐃΔ.ⵠᐃΔⲆⲆᐃΔ > ⲆΔⲆⵠ) {
			var ⵠⲆᐃΔ = ΔᐃᐃⲆ.sign.button;
			ⵠⲆᐃΔ.ⵠᐃᐃⲆ(Ⲇ)
		}
	}

	function ΔᐃΔΔᐃⵠΔⵠⵠ() {
		var ⵠⲆⵠΔᐃ = ΔᐃᐃⲆ.ⲆⲆⵠⲆᐃ;
		var ᐃΔΔⲆ = ⵠⲆⵠΔᐃ.id;
		if (ⵠⲆⵠΔᐃ.ᐃⲆᐃⲆⲆ === 1 && ⵠⲆⲆ === ⵠⲆⵠΔᐃ.display) {
			if (undefined === ⲆⵠᐃⲆᐃ[ᐃΔΔⲆ]) ⲆⵠᐃⲆᐃ[ᐃΔΔⲆ] = ⵠᐃᐃᐃⲆᐃᐃᐃᐃ(ᐃΔΔⲆ);
			if (ⵠⲆⵠΔᐃ.ᐃⵠⲆᐃ === ⲆᐃΔ) ᐃᐃⵠⲆ(Ⲇ, ⲆⵠᐃⲆᐃ[ᐃΔΔⲆ], ⵠⲆⵠΔᐃ.x, ⵠⲆⵠΔᐃ.y);
			else {
				ᐃⲆⵠⵠ < ⵠⲆⵠΔᐃ.x - 80 + ⲆⵠᐃⲆᐃ[ᐃΔΔⲆ].width ? ᐃᐃⵠⲆ(Ⲇ, ⲆⵠᐃⲆᐃ[ᐃΔΔⲆ], ᐃⲆⵠⵠ - ⲆⵠᐃⲆᐃ[ᐃΔΔⲆ].width - ⵠⲆⲆⵠΔ, ⵠⲆⵠΔᐃ.y - ⲆⵠᐃⲆᐃ[ᐃΔΔⲆ].height - 10) : ᐃᐃⵠⲆ(Ⲇ, ⲆⵠᐃⲆᐃ[ᐃΔΔⲆ], ⵠⲆⵠΔᐃ.x - 80, ⵠⲆⵠΔᐃ.y - ⲆⵠᐃⲆᐃ[ᐃΔΔⲆ].height - ⲆΔⵠⵠΔ)
			}
		}
	}

	function ⲆΔⲆⵠⵠⲆᐃⲆᐃ() {
		if (ᐃⲆⵠ.reconnect.enabled) {
			Ⲇ.globalAlpha = .9;
			Ⲇ.fillStyle = ⵠ[204];
			ᐃΔⵠ(Ⲇ, ΔⵠⵠΔ - 150, ᐃⲆΔⲆ - 90, 300, 180, 15);
			Ⲇ.fill();
			Ⲇ.globalAlpha = Δᐃⵠⵠ;
			var ᐃᐃ = ᐃΔ[Δ.ΔΔⵠⵠⵠΔΔ];
			Ⲇ.save();
			ᐃⲆⵠ.reconnect.rotate = (ᐃⲆⵠ.reconnect.rotate + ⲆΔΔⲆ * ΔᐃΔᐃ) % (2 * Math.PI);
			Ⲇ.translate(ᐃⲆⵠⵠ / ΔΔᐃΔⵠ, Ⲇᐃᐃᐃ / ᐃⲆᐃᐃ - 25);
			Ⲇ.rotate(ᐃⲆⵠ.reconnect.rotate);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ᐃⲆᐃᐃ, -ᐃᐃ.height / ⲆᐃΔⲆ);
			Ⲇ.restore();
			var ᐃᐃ = ᐃΔ[Δ.ⲆᐃⲆⲆᐃᐃⲆ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, (ᐃⲆⵠⵠ - ᐃᐃ.width) / 2, (Ⲇᐃᐃᐃ - ᐃᐃ.height) / ⲆᐃΔⲆ + 25)
		}
	}
	var ⲆⲆᐃⵠΔⵠⲆ = [];

	function ᐃᐃᐃⲆΔᐃΔⲆⲆ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		ᐃᐃ = ᐃΔ[Δ.ⵠⲆⲆΔΔΔΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ΔⲆᐃΔ, -ⲆΔⲆ / ΔⵠⲆᐃ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ⲆⲆΔΔᐃΔΔΔⲆ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		ᐃᐃ = ᐃΔ[Δ.ⵠΔᐃΔⵠ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ΔᐃΔᐃ, -ⲆΔⲆ / ᐃⲆᐃⵠ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ⲆⵠⵠᐃⵠᐃᐃⵠΔ() {
		var ᐃⵠⲆ = -8;
		if (ᐃⲆⵠ.ⲆᐃΔΔⵠ.enabled) {
			var ᐃᐃ = ᐃΔ[Δ.ⵠᐃᐃᐃⵠᐃⵠ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.x, ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.y + ᐃⵠⲆ);
			ᐃⵠⲆ += 70
		}
		if (ᐃⲆⵠ.ⵠΔᐃᐃⵠΔⲆ === 1) {
			var ᐃᐃ = ᐃΔ[Δ.ᐃⵠᐃⲆⲆⲆΔ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.x, ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.y + ᐃⵠⲆ);
			ᐃⵠⲆ += 70
		} else if (.25 > ᐃⲆⵠ.ⲆᐃⵠⲆ.ⵠᐃΔᐃⵠ.x || ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃⵠΔⵠᐃᐃΔ.x < .25 || ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃΔⵠᐃⵠΔⲆ.x < .25 || .25 > ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃⲆⲆⵠΔⲆⲆ.x || ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃᐃⵠᐃⵠ.x < .25) {
			var ᐃᐃ = ᐃΔ[Δ.ⲆⵠᐃΔⵠⲆⵠ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.x, ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.y + ᐃⵠⲆ);
			ᐃⵠⲆ += 70
		}
		if (ᐃⲆⵠ.ⵠᐃᐃⵠⵠ > 0) {
			var ᐃᐃ = ᐃΔ[Δ.ΔᐃⵠⲆᐃⵠᐃ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.x, ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.y + ᐃⵠⲆ);
			var ⵠᐃᐃⵠⵠ = ⲆⲆᐃⵠΔⵠⲆ[ᐃⲆⵠ.ⵠᐃᐃⵠⵠ];
			if (undefined === ⵠᐃᐃⵠⵠ) {
				ⵠᐃᐃⵠⵠ = ᐃⵠΔΔΔ(ᐃ, ᐃⲆⵠ.ⵠᐃᐃⵠⵠ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", ΔⲆⲆⵠⵠ);
				ⲆⲆᐃⵠΔⵠⲆ[ᐃⲆⵠ.ⵠᐃᐃⵠⵠ] = ⵠᐃᐃⵠⵠ
			}
			ᐃⲆⵠ.ⵠᐃᐃⵠⵠ < ΔⲆⵠⲆⵠⵠⵠ ? ᐃᐃⵠⲆ(Ⲇ, ⵠᐃᐃⵠⵠ, ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.x - 39, ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.y + ᐃⵠⲆ + 20) : ᐃᐃⵠⲆ(Ⲇ, ⵠᐃᐃⵠⵠ, ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.x - 46, ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.y + ᐃⵠⲆ + ⵠΔⵠᐃⲆ)
		}
	}

	function ΔⲆΔⲆⵠⲆⲆΔΔ() {
		var ⲆΔⵠⲆΔ = ᐃⲆⵠ.ⲆΔⵠⲆΔ;
		if (ⲆΔⵠⲆΔ.wait) {
			var ΔΔᐃⲆΔ = ⲆΔⵠⲆΔ.timeout.ⲆᐃⲆ();
			Ⲇ.save();
			var ᐃᐃ = ᐃΔ[Δ.ΔⵠΔⵠᐃᐃΔ];
			Ⲇ.translate(ᐃᐃ.width - ΔᐃΔᐃ * ᐃ, ΔᐃᐃⲆ.ⲆᐃⵠⲆ.translate.y - 60 * ᐃ);
			var Ⲇⵠ = -ᐃᐃ.width / ⲆᐃΔⲆ - ΔᐃⵠΔ;
			var ᐃⵠⲆ = -ᐃᐃ.height / ΔΔᐃΔⵠ - 4;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ);
			Ⲇ.beginPath();
			Ⲇ.lineWidth = ᐃ * 5;
			Ⲇ.strokeStyle = Δ.ΔⲆⲆΔᐃⲆⵠ[ⲆⵠΔ.time];
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.arc(0, ᐃⵠⲆ + ᐃᐃ.height / 2, ᐃ * 25, 0, ⲆΔⵠⲆΔ.timeout.ⲆⵠⲆ * (Math.PI * ᐃᐃΔⵠ));
			Ⲇ.stroke();
			Ⲇ.restore();
			if (ΔΔᐃⲆΔ) {
				ⲆΔⵠⲆΔ.wait = ΔΔᐃⵠᐃ;
				ⲆΔⵠⲆΔ.timeout.ⲆⵠⲆ = ⵠⲆΔ;
				ⲆΔⵠⲆΔ.timeout.Ⲇⵠⵠ = ⵠᐃⵠⲆⲆ
			}
		}
	}

	function ⵠᐃⵠᐃΔⵠⵠΔⲆ(ⲆΔ) {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == ᐃⵠⲆⲆᐃ && (this.ⵠⵠᐃ.ⲆᐃⲆ = ⲆΔⲆᐃΔ);
			var ⲆⵠⲆ = (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ * 600 * ᐃ;
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = 0;
			var ᐃⵠⲆ = ᐃⵠⵠⲆ
		}
		var ᐃⵠΔΔᐃ = ᐃΔ[Δ.ᐃᐃᐃᐃΔ].length;
		ᐃᐃ = ᐃΔ[Δ.ᐃᐃᐃᐃΔ][(this.ⲆⲆᐃⲆ + this.Ⲇᐃ % 2) % ᐃⵠΔΔᐃ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height;
		var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
		if (Settings.Roofs.enabled) {
			this.opacity = Settings.RoofsOpacity
		} else if (ΔⲆⵠ && (this.ⵠⵠΔᐃ === ᐃⲆⵠ.id || ᐃⲆⵠ.ⵠⵠΔⵠΔⵠⵠ(this.ⵠⵠΔᐃ))) {
			if (ΔⵠΔⵠ.ΔⲆⲆᐃ(this, ΔⲆⵠ) < 550) this.opacity = Math.max(this.opacity - ⲆΔΔⲆ, .3);
			else this.opacity = Math.min(this.opacity + ⲆΔΔⲆ, 1)
		} else if (ΔⲆⵠ && 150 > ΔⵠΔⵠ.ΔⲆⲆᐃ(this, ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ])) this.opacity = Math.max(this.opacity - ⲆΔΔⲆ, .3);
		else this.opacity = Math.min(this.opacity + ⲆΔΔⲆ, ΔΔⵠΔ);
		var ⲆⲆⲆⵠⵠᐃᐃⲆΔ = Ⲇ.globalAlpha;
		Ⲇ.globalAlpha *= this.opacity;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ΔᐃΔᐃ + Ⲇⵠ, -ⲆΔⲆ / ⵠⵠⵠᐃ + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.globalAlpha = ⲆⲆⲆⵠⵠᐃᐃⲆΔ;
		Ⲇ.restore()
	}

	function ⲆⲆΔⵠⵠⵠΔ(ⲆΔ) {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == false) this.ⵠⵠᐃ.ⲆᐃⲆ = ⲆΔⲆᐃΔ;
			var ⲆⵠⲆ = ᐃ * (600 * (ⲆΔΔⲆ * (ⵠᐃⵠΔ - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ)));
			var Ⲇⵠ = ⲆⵠⲆ * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = ⵠⲆᐃ;
			var ᐃⵠⲆ = Δⵠⵠⵠ
		}
		ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2 + Ⲇⵠ, -ⲆΔⲆ / 2 + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ΔⵠΔⵠᐃᐃⵠΔΔ(ⲆΔ) {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == false) this.ⵠⵠᐃ.ⲆᐃⲆ = false;
			var ⲆⵠⲆ = ᐃ * (ⲆΔΔⲆ * (ΔⵠⲆⲆ - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
			var Ⲇⵠ = ⲆⵠⲆ * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = ΔΔᐃᐃ;
			var ᐃⵠⲆ = ⵠᐃⲆⲆ
		}
		var ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2 + Ⲇⵠ, -ⲆΔⲆ / ΔⵠⲆᐃ + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ᐃⲆᐃᐃᐃᐃᐃᐃᐃ() {
		Ⲇ.save();
		var ⲆⵠᐃⲆΔⵠⲆ = ᐃ;
		if (.25 > ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃΔᐃᐃⵠ.x) Ⲇ.globalAlpha = ᐃⲆⵠ.ⲆᐃⵠⲆ.ⵠᐃⲆᐃᐃⲆᐃ.ⲆⵠⲆ;
		var ᐃⵠⲆ = ᐃᐃⲆ < ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length ? -70 : 0;
		(ᐃⲆⵠ.ⵠᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] || ᐃⲆⵠ.ᐃⲆᐃⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ⲆⵠᐃΔ) != -1 || ᐃⲆⵠ.ⲆᐃⲆⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && -ᐃᐃΔ != ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ⵠⵠⵠⵠᐃ) || ᐃⲆⵠ.ᐃᐃΔⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && -1 != ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ⲆⵠᐃΔ) || ᐃⲆⵠ.ⵠⵠΔΔᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && -1 != ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ΔⵠⲆⲆᐃ) || ᐃⲆⵠ.ᐃⵠᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ⲆⵠᐃΔ) != -1 || ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ΔⲆⵠᐃⲆ) != -ⵠⲆΔⲆ)) && (ᐃⵠⲆ -= 50 * ᐃ);
		Ⲇ.translate((ᐃⲆⵠⵠ - ᐃ * 950) / 2, ᐃⵠⲆ);
		Ⲇ.fillStyle = "#69A148";
		Ⲇ.fillRect(this.translate.x + ᐃ * 37, this.translate.y + ᐃ * 17, ᐃ * (178 * ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃΔᐃᐃⵠ.x), ᐃ * ⵠᐃⵠⵠᐃ);
		Ⲇ.globalAlpha = ⲆΔΔΔ;
		if (ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃⵠΔⵠᐃᐃΔ.x < .35) {
			Ⲇ.fillStyle = "#8F050A";
			Ⲇ.globalAlpha = ᐃⲆⵠ.ⲆᐃⵠⲆ.ΔⵠⲆⵠⲆᐃⵠ.ⲆⵠⲆ;
			Ⲇ.fillRect(this.translate.x + ᐃ * 277, this.translate.y + ᐃ * ᐃΔΔⲆᐃⵠᐃ, ᐃ * 178, 18 * ᐃ);
			Ⲇ.globalAlpha = 1
		}
		const ctx = Ⲇ;
		const scale = ᐃ;
		if (Settings.ShowHP.enabled) {
			ctx.save();
			ctx.lineWidth = 7;
			ctx.font = "34px Baloo Paaji";
			ctx.fillStyle = "red";
			ctx.strokeStyle = "black";
			ctx.strokeText(Math.round(ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃΔᐃᐃⵠ.x * 200) + "hp", this.translate.x -80 * scale, this.translate.y + 35 * scale);
			ctx.fillText(Math.round(ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃΔᐃᐃⵠ.x * 200) + "hp", this.translate.x - 80 * scale, this.translate.y + 35  * scale);
			ctx.restore()
		}
		if (Settings.Timers.enabled) {
			ctx.save();
			ctx.lineWidth = 7;
			ctx.font = "34px Baloo Paaji";
			ctx.strokeStyle = "black";
			ctx.fillStyle = "red";
			ctx.strokeText(~~(11 - (Date.now() - Timers.HealTimer) / 1e3) + "s", this.translate.x + 216 * scale, this.translate.y + 35 * scale);
			ctx.fillText(~~(11 - (Date.now() - Timers.HealTimer) / 1e3) + "s", this.translate.x + 216 * scale, this.translate.y + 35 * scale);
			ctx.fillStyle = "red";
			ctx.strokeText(~~(6 - (Date.now() - Timers.GaugeTimer) / 1e3) + "s", this.translate.x + 460 * scale, this.translate.y + 35 * scale);
			ctx.fillText(~~(6 - (Date.now() - Timers.GaugeTimer) / 1e3) + "s", this.translate.x + 460 * scale, this.translate.y + 35 * scale);
			ctx.restore()
		}
		Ⲇ.fillStyle = "#AF352A";
		Ⲇ.fillRect(this.translate.x + ᐃ * 277, this.translate.y + ᐃⵠⲆΔⲆᐃΔ * ᐃ, 178 * ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃⵠΔⵠᐃᐃΔ.x * ᐃ, ᐃ * 18);
		if (.35 > ᐃⲆⵠ.ⲆᐃⵠⲆ.ⵠᐃΔᐃⵠ.x) {
			Ⲇ.fillStyle = "#366B91";
			Ⲇ.globalAlpha = ᐃⲆⵠ.ⲆᐃⵠⲆ.ⲆΔⲆⵠᐃΔᐃ.ⲆⵠⲆ;
			Ⲇ.fillRect(this.translate.x + ᐃ * 517, this.translate.y + 17 * ᐃ, ᐃ * 178, ᐃ * 18);
			Ⲇ.globalAlpha = ᐃᐃΔ
		}
		Ⲇ.fillStyle = "#669BB1";
		Ⲇ.fillRect(this.translate.x + 517 * ᐃ, this.translate.y + ᐃ * ᐃⲆΔⵠⵠᐃᐃ, ᐃ * (178 * ᐃⲆⵠ.ⲆᐃⵠⲆ.ⵠᐃΔᐃⵠ.x), ᐃ * 18);
		if (ᐃⲆⵠ.ⲆᐃⵠⲆ.ⵠᐃΔᐃⵠ.x > .99) {
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃᐃⵠᐃⵠ.x < .35 && (Ⲇ.fillStyle = "#6C4036", Ⲇ.globalAlpha = ᐃⲆⵠ.ⲆᐃⵠⲆ.ΔⲆⵠΔⵠⵠⵠ.ⲆⵠⲆ, Ⲇ.fillRect(this.translate.x + 517 * ᐃ, this.translate.y + ᐃ * 17, 178 * ᐃ, ᐃ * ΔΔΔΔᐃ), Ⲇ.globalAlpha = 1);
			Ⲇ.fillStyle = "#9C4036";
			Ⲇ.fillRect(this.translate.x + 517 * ᐃ, this.translate.y + 17 * ᐃ, 178 * (1 - ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃᐃⵠᐃⵠ.x) * ᐃ, ᐃ * 18)
		}
		.35 > ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃΔⵠᐃⵠΔⲆ.x && (Ⲇ.fillStyle = "#001A57", Ⲇ.globalAlpha = ᐃⲆⵠ.ⲆᐃⵠⲆ.ⲆᐃⲆΔⲆᐃⵠ.ⲆⵠⲆ, Ⲇ.fillRect(this.translate.x + 757 * ᐃ, this.translate.y + ᐃ * 17, ᐃ * 178, ᐃ * 18), Ⲇ.globalAlpha = 1);
		Ⲇ.fillStyle = "#074A87";
		Ⲇ.fillRect(this.translate.x + ᐃ * 757, this.translate.y + ᐃ * 17, ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃΔⵠᐃⵠΔⲆ.x * 178 * ᐃ, 18 * ᐃ);
		ᐃ = ⲆⵠᐃⲆΔⵠⲆ;
		ᐃᐃⵠⲆ(Ⲇ, this.ᐃᐃ, this.translate.x, this.translate.y);
		this.y = this.translate.y + ᐃⵠⲆ;
		Ⲇ.restore();
		if (.99 > ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃⲆⲆⵠΔⲆⲆ.x) {
			var Ⲇⵠ = Math.floor(ΔⵠⵠΔ - ᐃΔ[Δ.ᐃⲆⲆᐃᐃⵠΔ].width / 2);
			ᐃⵠⲆ += this.translate.y - ᐃΔ[Δ.ᐃⲆⲆᐃᐃⵠΔ].height - ᐃᐃⵠᐃΔ * ᐃ;
			Ⲇ.fillStyle = "#BBE8EF";
			Ⲇ.fillRect(Ⲇⵠ + ᐃⵠᐃⲆ, ᐃⵠⲆ + ᐃ * ΔⲆⲆⵠ, ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃⲆⲆⵠΔⲆⲆ.x * (ᐃ * 588), ᐃⵠᐃⵠⲆ * ᐃ);
			if (ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃⲆⲆⵠΔⲆⲆ.x < .35) {
				Ⲇ.fillStyle = "#9BA8AF";
				Ⲇ.globalAlpha = ᐃⲆⵠ.ⲆᐃⵠⲆ.ⵠⵠᐃᐃⲆⲆⲆ.ⲆⵠⲆ;
				Ⲇ.fillRect(Ⲇⵠ + 5, ᐃⵠⲆ + ΔⲆⵠⵠ, ᐃ * 588, ᐃ * ΔⲆⲆΔΔ);
				Ⲇ.globalAlpha = Δᐃⵠⵠ
			}
			ᐃᐃⵠⲆ(Ⲇ, ᐃΔ[Δ.ᐃⲆⲆᐃᐃⵠΔ], Ⲇⵠ, ᐃⵠⲆ);
			this.y = ᐃⵠⲆ
		}
	}

	function ⲆᐃᐃΔⵠⲆΔⲆΔ() {
		var ⲆΔΔΔⲆ = ᐃⲆⵠ.ⲆΔΔΔⲆ;
		if (ⲆΔΔΔⲆ.wait) {
			var ΔΔᐃⲆΔ = ⲆΔΔΔⲆ.timeout.ⲆᐃⲆ();
			Ⲇ.save();
			var ᐃᐃ = ᐃΔ[Δ.ⵠⲆⵠⲆⵠⲆⵠ];
			Ⲇ.translate(ᐃᐃ.width - ᐃ * 2, ΔᐃᐃⲆ.ⲆᐃⵠⲆ.translate.y - ᐃ * 125);
			var Ⲇⵠ = -ᐃᐃ.width / ⵠⵠⵠᐃ + 10;
			var ᐃⵠⲆ = -ᐃᐃ.height / 2 - 4;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ);
			Ⲇ.beginPath();
			Ⲇ.lineWidth = ᐃᐃᐃᐃⵠ * ᐃ;
			Ⲇ.strokeStyle = Δ.ΔⲆⲆᐃⵠᐃΔ[ⲆⵠΔ.time];
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.arc(ΔⲆⲆΔⲆ, ᐃⵠⲆ + ᐃᐃ.height / 2, 25 * ᐃ, ⵠⲆΔ, Math.PI * ΔΔΔⵠ * ⲆΔΔΔⲆ.timeout.ⲆⵠⲆ);
			Ⲇ.stroke();
			Ⲇ.restore();
			if (ΔΔᐃⲆΔ) {
				ⲆΔΔΔⲆ.wait = ᐃΔΔⵠⲆ;
				ⲆΔΔΔⲆ.timeout.ⲆⵠⲆ = ᐃᐃᐃ;
				ⲆΔΔΔⲆ.timeout.Ⲇⵠⵠ = ⲆᐃᐃΔΔ
			}
		}
	}

	function ᐃᐃΔᐃⵠΔᐃΔᐃ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && false == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ) this.ⵠⵠᐃ.ⲆᐃⲆ = ΔⵠⵠᐃΔ;
			var ⲆⵠⲆ = ᐃ * (ⲆΔΔⲆ * (ΔⵠΔ - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = ⵠⵠⵠΔ;
			var ᐃⵠⲆ = 0
		}
		ᐃᐃ = Settings.ChestInfo.enabled && this.lock ? ᐃΔ[Δ.ᐃⵠᐃⲆΔ][2] : ᐃΔ[Δ.ᐃⵠᐃⲆΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2 + Ⲇⵠ, -ⲆΔⲆ / ⲆᐃΔⲆ + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ);
		this.lock && (ᐃᐃ = ᐃΔ[Δ.ⲆⲆⵠⲆΔ][ⲆⵠΔ.time], ⲆⲆᐃ = -ᐃᐃ.width, ⲆΔⲆ = -ᐃᐃ.height, ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⲆᐃΔⲆ + Ⲇⵠ - 1 * ᐃ, -ⲆΔⲆ / 2 + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ));
		Ⲇ.restore()
	}

	function ΔⵠⵠⲆⲆⵠᐃⲆΔ() {
		var ᐃⵠⲆᐃ = ᐃⲆⵠ.ᐃⵠⲆᐃ;
		if (!ᐃⵠⲆᐃ.ᐃΔⵠᐃΔ && ᐃⵠⲆᐃ.ᐃⵠⲆⲆ > 0) {
			var ⲆΔⲆΔ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
			if (!ⲆΔⲆΔ) return;
			Ⲇ.save();
			if (Ⲇⵠᐃᐃ[ᐃⵠⲆᐃ.ᐃⵠⲆⲆ].ⵠⵠⲆΔ === 0 && ⵠΔᐃⵠ === ᐃⵠⲆᐃ.mode) {
				Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + ⲆΔⲆΔ.x, ᐃⲆⵠ.ⲆⲆΔ.y + ⲆΔⲆΔ.y);
				Ⲇ.rotate(ⲆΔⲆΔ.angle);
				Ⲇ.translate(120, ⵠⵠⵠΔ)
			} else {
				var Ⲇⵠ = Math.floor(ⲆΔⲆΔ.x + 120 * Math.sin(ⲆΔⲆΔ.angle));
				var ᐃⵠⲆ = Math.floor(ⲆΔⲆΔ.y + 120 * Math.cos(ⲆΔⲆΔ.angle));
				Ⲇⵠ = ᐃⲆⵠ.ⲆⲆΔ.x + (Ⲇⵠ - Ⲇⵠ % ᐃⲆⲆΔᐃ + 50);
				ᐃⵠⲆ = ᐃⲆⵠ.ⲆⲆΔ.y + (ᐃⵠⲆ - ᐃⵠⲆ % 100 + 50);
				Ⲇ.translate(Ⲇⵠ, ᐃⵠⲆ)
			}
			var ᐃᐃ = ᐃΔ[ᐃⵠⲆᐃ.ᐃⵠⲆⲆ][ⲆⵠΔ.time];
			Ⲇ.globalAlpha = .5;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ⵠΔⵠΔ, -ᐃᐃ.height / 2);
			Ⲇ.globalAlpha = 1;
			Ⲇ.restore();
			if (0 === Ⲇⵠᐃᐃ[ᐃⵠⲆᐃ.ᐃⵠⲆⲆ].ⵠⵠⲆΔ) {
				if (!ᐃⵠⲆᐃ.label[ᐃⵠⲆᐃ.mode]) {
					ᐃⵠⲆᐃ.mode === ⵠᐃⲆ ? ᐃⵠⲆᐃ.label[0] = ᐃⵠΔΔΔ(ᐃ, ⲆΔⵠ[ΔΔΔ.ⲆΔⲆⲆᐃᐃⲆ], 20, "#e2c340") : ᐃⵠⲆᐃ.label[ⵠⲆΔⲆ] = ᐃⵠΔΔΔ(ᐃ, ⲆΔⵠ[ΔΔΔ.ⲆᐃⵠΔΔΔΔ], ⵠΔⵠᐃⲆ, "#e2c340")
				}
				var ᐃᐃ = ᐃⵠⲆᐃ.label[ᐃⵠⲆᐃ.mode];
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ + -ᐃᐃ.width / ᐃᐃⲆⲆ, ΔᐃᐃⲆ.ⲆᐃⵠⲆ.y - 26)
			}
		}
		if (ᐃⵠⲆᐃ.ᐃΔⵠᐃΔ) {
			var ΔΔᐃⲆΔ = ᐃⵠⲆᐃ.timeout.ⲆᐃⲆ();
			for (var Ⲇᐃ = ⲆⲆⵠⲆ; ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
				var ⵠⲆᐃΔ = ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ[Ⲇᐃ];
				if (ⵠⲆᐃΔ.id == ᐃⵠⲆᐃ.id) {
					var ⲆΔⲆ = ᐃ * 42;
					var ⲆⲆⲆΔΔ = ᐃ * 17;
					ᐃΔⵠ(Ⲇ, ⵠⲆᐃΔ.info.translate.x, ⵠⲆᐃΔ.info.translate.y + (1 - ᐃⵠⲆᐃ.timeout.ⲆⵠⲆ) * ⲆΔⲆ, ⵠⲆᐃΔ.info.width, ᐃⵠⲆᐃ.timeout.ⲆⵠⲆ * ⲆΔⲆ + ⲆⲆⲆΔΔ, ⵠⲆⵠᐃⵠ * ᐃ);
					Ⲇ.fillStyle = "#55B973";
					Ⲇ.fill();
					Ⲇ.globalAlpha = .8;
					ⵠⲆᐃΔ.ⵠᐃᐃⲆ(Ⲇ)
				} else {
					Ⲇ.globalAlpha = .5;
					ⵠⲆᐃΔ.ⵠᐃᐃⲆ(Ⲇ)
				}
				Ⲇ.globalAlpha = ΔᐃΔⲆ
			}
			if (ΔΔᐃⲆΔ) {
				ᐃⵠⲆᐃ.ᐃΔⵠᐃΔ = false;
				ᐃⵠⲆᐃ.timeout.ⲆⵠⲆ = 0;
				ᐃⵠⲆᐃ.timeout.Ⲇⵠⵠ = ᐃΔⵠᐃⲆ
			}
			return ⵠⲆⵠⵠᐃ
		} else {
			for (var Ⲇᐃ = 0; ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ.length > Ⲇᐃ; Ⲇᐃ++) ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ[Ⲇᐃ].ⵠᐃᐃⲆ(Ⲇ)
		}
		return false
	}

	function ⵠⵠⵠⵠᐃᐃⲆⵠΔ(ⲆΔ) {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == false) this.ⵠⵠᐃ.ⲆᐃⲆ = ΔⵠΔⲆⵠ;
			var ⲆⵠⲆ = (Δᐃⵠⵠ - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ * 600 * ᐃ;
			var Ⲇⵠ = ⲆⵠⲆ * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = 0;
			var ᐃⵠⲆ = ΔΔᐃ
		}
		if (Δ.ⵠⲆⲆⲆΔⲆΔ === ⲆΔ && !ⲆⵠΔ.transition) {
			var ᐃⵠΔⵠᐃ = ᐃⵠⵠⲆ;
			var ⵠΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠΔ];
			for (var Ⲇᐃ = ⵠᐃⲆ; Ⲇᐃ < ⵠΔᐃΔ.length; Ⲇᐃ++) {
				var ΔⲆⲆᐃ = ΔⵠΔⵠ.ΔⲆⲆᐃ(ⵠΔᐃΔ[Ⲇᐃ], this);
				if (140 > ΔⲆⲆᐃ && ΔⲆⲆᐃ > 35) {
					ᐃⵠΔⵠᐃ = 0;
					break
				} else 35 >= ΔⲆⲆᐃ && (ᐃⵠΔⵠᐃ = ΔⲆᐃⲆ)
			}
			0 === ᐃⵠΔⵠᐃ ? this.opacity = Math.max(.5, this.opacity - ⲆΔΔⲆ / 1.5) : this.opacity = Math.min(ⵠⲆΔⲆ, this.opacity + ⲆΔΔⲆ / 1.5);
			Ⲇ.globalAlpha = this.opacity
		}
		ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2 + Ⲇⵠ, -ⲆΔⲆ / 2 + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.restore()
	}

	function ΔΔⵠⵠⲆⲆⵠΔⵠ() {
		var ᐃⵠⵠΔ = ⲆⵠΔ.ⵠΔⵠΔⲆ;
		var ᐃᐃ = ᐃΔ[Δ.ⲆᐃⲆΔᐃⲆⵠ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⵠⵠΔ.translate.x, ᐃⵠⵠΔ.translate.y);
		Ⲇ.save();
		Ⲇ.translate(ᐃⵠⵠΔ.translate.x + ᐃᐃ.width / 2, ᐃⵠⵠΔ.translate.y + ᐃᐃ.height / 2);
		ⲆⵠΔ.ⵠΔⵠΔⲆ.now = ((new Date).getTime() - ᐃⵠⵠΔ.ⵠΔⲆΔⲆ + ᐃⵠⵠΔ.ΔᐃΔΔⵠ) % ΔᐃᐃΔ.ⵠΔⵠ;
		var Δᐃⵠ = ⲆⵠΔ.ⵠΔⵠΔⲆ.now * (2 * Math.PI) / ΔᐃᐃΔ.ⵠΔⵠ - Math.PI / 2;
		Ⲇ.rotate(Δᐃⵠ);
		ᐃᐃⵠⲆ(Ⲇ, ᐃΔ[Δ.ⵠⵠⲆΔΔᐃⵠ], -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
		Ⲇ.restore()
	}

	function ΔΔΔⲆⵠⲆΔⵠΔ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		ᐃᐃ = ᐃΔ[Δ.ⲆⵠᐃⵠΔΔⲆ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ᐃᐃΔᐃⲆΔⲆⵠᐃ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		ᐃᐃ = ᐃΔ[Δ.ⵠΔΔᐃⲆ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ᐃΔⲆᐃᐃⵠᐃΔⵠ() {
		var ⵠΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠΔ];
		if (ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃΔⵠᐃᐃ || ⲆⵠΔ.mode === ΔᐃᐃΔ.Δᐃⵠᐃᐃ || ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃΔⲆⲆᐃ || ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ === ⲆⵠΔ.mode || ⲆⵠΔ.mode === ΔᐃᐃΔ.ⵠᐃΔⵠΔᐃⵠ || ΔᐃᐃΔ.ⲆⵠᐃΔᐃ === ⲆⵠΔ.mode || ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃᐃΔⲆΔ) {
			for (var Ⲇᐃ = 0; ⵠΔᐃΔ.length > Ⲇᐃ; Ⲇᐃ++) {
				ⵠΔᐃΔ[Ⲇᐃ].ΔⵠᐃⵠΔⵠⵠ()
			}
		} else if (ΔᐃᐃΔ.ᐃΔΔⲆⲆᐃᐃ === ⲆⵠΔ.mode) {
			for (var Ⲇᐃ = ⵠⲆᐃ; Ⲇᐃ < ⵠΔᐃΔ.length; Ⲇᐃ++) {
				if (ᐃⲆⵠ.ⲆⵠΔⵠΔⲆΔ || ᐃⲆⵠ.ᐃᐃΔⵠⵠ.enabled) ⵠΔᐃΔ[Ⲇᐃ].ΔⵠᐃⵠΔⵠⵠ();
				else if (ⵠΔᐃΔ[Ⲇᐃ].ΔⵠⲆⵠ.ⲆⲆΔⵠⵠ !== ⵠ[217]) ⵠΔᐃΔ[Ⲇᐃ].ΔⵠᐃⵠΔⵠⵠ()
			}
		}
	}

	function ᐃⵠⵠⲆⵠᐃᐃⲆΔ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		ᐃᐃ = ᐃΔ[Δ.ⵠΔⵠΔⵠΔΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / ⵠΔⵠΔ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ᐃᐃⵠΔᐃᐃΔᐃΔ() {
		var ᐃΔΔⲆ = ᐃⲆⵠ.ᐃΔΔⲆ;
		var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length; Ⲇᐃ++) {
			var ⵠⲆᐃΔ = ᐃΔΔⲆ.ⵠΔᐃᐃᐃ[Ⲇᐃ];
			var ᐃⲆⲆ = ᐃᐃⲆⲆΔ;
			var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
			if (ΔⲆⵠ && (ⵠⲆᐃΔ.id == ΔⲆⵠ.right || ΔⲆⵠ.ⵠΔⲆᐃΔ == ⵠⲆᐃΔ.id && ΔⲆⵠ.ⵠΔⲆᐃΔ > ΔⲆⲆ)) {
				ᐃⲆⲆ = ᐃΔᐃⵠⲆ;
				ᐃᐃⵠⲆ(Ⲇ, ⵠⲆᐃΔ.info.ᐃᐃ[2], ⵠⲆᐃΔ.info.translate.x, ⵠⲆᐃΔ.info.translate.y, ⵠⲆᐃΔ.info.width, ⵠⲆᐃΔ.info.height)
			} else ⵠⲆᐃΔ.ⵠᐃᐃⲆ(Ⲇ);
			var ⵠᐃΔⵠ = ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⲆᐃΔ.id];
			if (ⵠᐃΔⵠ > 1) ᐃΔⵠΔΔ(ⵠᐃΔⵠ, ⵠⲆᐃΔ);
			ⵠᐃΔⵠ > Δⵠⵠⵠ && ᐃⲆΔΔⵠΔᐃᐃΔ(Ⲇᐃ, ⵠⲆᐃΔ, ᐃⲆⲆ);
			var ⵠᐃⲆΔ = ᐃⲆⵠ.ⵠᐃⲆΔ;
			if (ⵠᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && (ΔΔᐃᐃ > ⵠᐃⲆΔ.id || ⵠⲆᐃΔ.id == ⵠᐃⲆΔ.id) && (!ⵠᐃⲆΔ.lock || ⵠᐃⲆΔ.ⵠⵠΔᐃ == ᐃⲆⵠ.id)) ΔᐃᐃⲆ.ⵠⵠⲆⲆⲆ[ⵠⲆᐃΔ.id].ⵠᐃᐃⲆ(Ⲇ);
			var ᐃⲆᐃⵠᐃ = ᐃⲆⵠ.ᐃⲆᐃⵠᐃ;
			ᐃⲆᐃⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⵠⵠ.ⲆⵠᐃΔ == ⵠⲆᐃΔ.id && ΔᐃᐃⲆ.ⵠⵠⲆⲆⲆ[ⵠⲆᐃΔ.id].ⵠᐃᐃⲆ(Ⲇ);
			var ⵠⵠΔΔᐃ = ᐃⲆⵠ.ⵠⵠΔΔᐃ;
			ⵠⵠΔΔᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⵠⵠ.ΔⵠⲆⲆᐃ == ⵠⲆᐃΔ.id && ΔᐃᐃⲆ.ⵠⵠⲆⲆⲆ[ⵠⲆᐃΔ.id].ⵠᐃᐃⲆ(Ⲇ);
			var ⲆᐃⲆⵠ = ᐃⲆⵠ.ⲆᐃⲆⵠ;
			ⲆᐃⲆⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⵠⵠ.ⵠⵠⵠⵠᐃ == ⵠⲆᐃΔ.id && ΔᐃᐃⲆ.ⵠⵠⲆⲆⲆ[ⵠⲆᐃΔ.id].ⵠᐃᐃⲆ(Ⲇ);
			var ᐃᐃΔⲆ = ᐃⲆⵠ.ᐃᐃΔⲆ;
			ᐃᐃΔⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⵠⵠ.ⲆⵠᐃΔ == ⵠⲆᐃΔ.id && ΔᐃᐃⲆ.ⵠⵠⲆⲆⲆ[ⵠⲆᐃΔ.id].ⵠᐃᐃⲆ(Ⲇ);
			var ᐃⵠᐃᐃ = ᐃⲆⵠ.ᐃⵠᐃᐃ;
			ᐃⵠᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && (ⵠⵠ.ⲆⵠᐃΔ == ⵠⲆᐃΔ.id || ⵠⲆᐃΔ.id == ⵠⵠ.ΔⲆⵠᐃⲆ) && ΔᐃᐃⲆ.ⵠⵠⲆⲆⲆ[ⵠⲆᐃΔ.id].ⵠᐃᐃⲆ(Ⲇ)
		}
		if (ⵠⲆᐃΔ && ᐃΔΔⲆ.max > Ⲇᐃ) {
			var ᐃᐃ = ᐃΔ[Δ.ⲆⲆΔⵠᐃⲆⵠ][ΔᐃⵠΔ];
			Ⲇⵠ = ⵠⲆᐃΔ.info.translate.x;
			ᐃⵠⲆ = ⵠⲆᐃΔ.info.translate.y;
			for (ⲆⲆᐃⲆ = 1; Ⲇᐃ < ᐃΔΔⲆ.max; Ⲇᐃ++, ⲆⲆᐃⲆ++) ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ + ⲆⲆᐃⲆ * (ᐃᐃ.width + ⲆᐃⲆΔ), ᐃⵠⲆ)
		}
	}

	function ⵠⲆⲆΔⵠⵠⵠⲆΔ() {
		var ⵠⲆᐃⲆΔ = ᐃⲆⵠ.ⵠⲆᐃⲆΔ;
		if (ⵠⲆᐃⲆΔ.wait) {
			var ΔΔᐃⲆΔ = ⵠⲆᐃⲆΔ.timeout.ⲆᐃⲆ();
			Ⲇ.save();
			var ᐃᐃ = ᐃΔ[Δ.ΔΔⵠΔᐃⵠⲆ];
			Ⲇ.translate(ᐃᐃ.width - ᐃⲆⵠᐃⲆᐃⵠ * ᐃ, ΔᐃᐃⲆ.ⲆᐃⵠⲆ.translate.y - ᐃ * 190);
			var Ⲇⵠ = -ᐃᐃ.width / ΔΔⲆⲆ + 9;
			var ᐃⵠⲆ = -ᐃᐃ.height / ᐃⲆᐃⵠ - 4;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ);
			Ⲇ.beginPath();
			Ⲇ.lineWidth = ᐃ * ᐃⵠᐃⲆ;
			Ⲇ.strokeStyle = Δ.ΔⲆⲆᐃⵠᐃΔ[ⲆⵠΔ.time];
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.arc(9, ᐃⵠⲆ + ᐃᐃ.height / 2, ᐃ * 25, ⵠⲆᐃ, ⵠⲆᐃⲆΔ.timeout.ⲆⵠⲆ * (ΔⲆᐃΔ * Math.PI));
			Ⲇ.stroke();
			Ⲇ.restore();
			if (ΔΔᐃⲆΔ) {
				ⵠⲆᐃⲆΔ.wait = ᐃⲆⲆΔⵠ;
				ⵠⲆᐃⲆΔ.timeout.ⲆⵠⲆ = ⵠⲆΔ;
				ⵠⲆᐃⲆΔ.timeout.Ⲇⵠⵠ = ᐃⲆⲆᐃᐃ
			}
		}
	}

	function ΔᐃᐃⵠⵠᐃᐃⵠⲆ() {
		var ᐃⵠⲆᐃ = ᐃⲆⵠ.ᐃⵠⲆᐃ;
		if (ᐃⵠⲆᐃ.ᐃΔⵠᐃΔ) {
			var ⲆΔⲆΔ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
			Ⲇ.save();
			Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + ⲆΔⲆΔ.x, ᐃⲆⵠ.ⲆⲆΔ.y + ⲆΔⲆΔ.y);
			var ᐃᐃ = ᐃΔ[Δ.ⲆⲆΔⲆΔΔⵠ];
			var Ⲇⵠ = -ᐃᐃ.width / 2;
			var ᐃⵠⲆ = -ᐃᐃ.height / ΔΔⲆᐃ - ᐃ * 125;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ);
			Ⲇ.beginPath();
			Ⲇ.lineWidth = ᐃ * 5;
			Ⲇ.strokeStyle = Δ.ᐃⵠⵠⵠⲆᐃΔ[ⲆⵠΔ.time];
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.arc(0, ᐃⵠⲆ + ᐃᐃ.height / ᐃᐃᐃⵠ, 25 * ᐃ, ⵠᐃⲆⲆ, Math.PI * ΔΔᐃΔⵠ * ᐃⵠⲆᐃ.timeout.ⲆⵠⲆ);
			Ⲇ.stroke();
			Ⲇ.restore()
		}
	}

	function ⵠΔⵠⵠΔⲆᐃᐃΔ() { // leaderboard 
		var ᐃⲆᐃⲆΔ = ᐃⲆⵠ.ᐃⲆᐃⲆΔ;
		var ⵠⵠⲆᐃᐃⲆΔ = ΔᐃᐃⲆ.ⵠΔᐃⲆ;
		if (ᐃⲆᐃⲆΔ.ⲆᐃⲆ) {
			ᐃⲆᐃⲆΔ.ⲆᐃⲆ = false;
			var ᐃⲆⵠΔⲆ = ᐃⲆᐃⲆΔ.ᐃⲆⵠΔⲆ;
			var ⲆⲆᐃ = ⵠⵠⲆᐃᐃⲆΔ.ΔⲆ.width;
			var ⲆΔⲆ = ⵠⵠⲆᐃᐃⲆΔ.ΔⲆ.height;
			var ΔⲆᐃᐃⵠΔΔ = ⵠⵠⲆᐃᐃⲆΔ.Ⲇ;
			var ⵠΔᐃΔ = ⲆⵠΔ.ⵠΔᐃΔ;
			var ⵠΔᐃᐃⲆⵠⵠ = ᐃᐃⲆⲆΔ;
			ΔⲆᐃᐃⵠΔΔ.clearRect(0, 0, ⲆⲆᐃ, ⲆΔⲆ);
			ΔⲆᐃᐃⵠΔΔ.drawImage(ⵠⵠⲆᐃᐃⲆΔ.ᐃᐃ, 0, ᐃᐃⲆ);
			for (var Ⲇᐃ = 0; Ⲇᐃ < ᐃⲆⵠΔⲆ.length; Ⲇᐃ++) {
				var ΔⲆⵠ = ⵠΔᐃΔ[ᐃⲆⵠΔⲆ[Ⲇᐃ]];
				if (ΔᐃᐃΔ.ᐃΔΔⲆⲆᐃᐃ === ⲆⵠΔ.mode && ⵠ[217] === ΔⲆⵠ.ⲆⲆΔⵠⵠ) continue;
				if (ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃΔⲆⲆᐃ && ΔⲆⵠ.ⲆΔⵠⵠ === ΔᐃᐃΔ.ᐃⵠⵠᐃⵠᐃᐃ) continue;
				if (ᐃⲆⵠ.id == ᐃⲆⵠΔⲆ[Ⲇᐃ]) {
					ⵠΔᐃᐃⲆⵠⵠ = ᐃΔⲆΔᐃ;
					ΔᐃᐃΔ.ᐃᐃΔⲆΔ === ⲆⵠΔ.mode && ΔⲆⵠ.ⲆΔⵠⵠ === ΔᐃᐃΔ.ᐃⲆᐃᐃⵠⲆⵠ ? Δⵠ = "#FF0000" : Δⵠ = ⵠ[447]
				} else {
					if (ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃᐃΔⲆΔ && ΔᐃᐃΔ.ᐃⲆᐃᐃⵠⲆⵠ === ΔⲆⵠ.ⲆΔⵠⵠ) Δⵠ = "#990000";
					else Δⵠ = "#A1BDCD"
				}
				ΔⲆᐃᐃⵠΔΔ.drawImage(ᐃⵠΔΔΔ(ᐃ, "" + (Ⲇᐃ + Δᐃⵠⵠ), ᐃ * 15, Δⵠ), ⵠᐃⲆⵠⲆ * ᐃ, (40 + 22 * Ⲇᐃ) * ᐃ);
				if (Settings.ShowLevel.enabled) {
					if (!ΔⲆⵠ.ΔⵠⵠⵠⲆᐃⲆ)
				(ΔⲆⵠ.ΔⵠⵠⵠⲆᐃⲆ = ᐃⵠΔΔΔ(ᐃ, ΔⲆⵠ.ⲆⲆΔⵠⵠ+ ` [${ΔⲆⵠ.level}]`, 15 * ᐃ, Δⵠ, ΔΔΔᐃᐃ, undefined, undefined, ᐃΔᐃΔΔᐃΔ, 110 * ᐃ));
				} else {
					(ΔⲆⵠ.ΔⵠⵠⵠⲆᐃⲆ = ᐃⵠΔΔΔ(ᐃ, ΔⲆⵠ.ⲆⲆΔⵠⵠ, 15 * ᐃ, Δⵠ, ΔΔΔᐃᐃ, undefined, undefined, ᐃΔᐃΔΔᐃΔ, 110 * ᐃ));
				}
				ΔⲆᐃᐃⵠΔΔ.drawImage(ΔⲆⵠ.ΔⵠⵠⵠⲆᐃⲆ, 39 * ᐃ, (40 + Ⲇᐃ * 22) * ᐃ);
				ΔⲆᐃᐃⵠΔΔ.drawImage(ᐃⵠΔΔΔ(ᐃ, ΔⵠΔⵠ.ⵠⵠᐃᐃᐃⲆΔ(ΔⲆⵠ.ᐃⲆⲆⲆⲆ), ⲆΔᐃΔⲆ * ᐃ, Δⵠ), ᐃ * 156, ᐃ * (40 + Ⲇᐃ * 22))
			}
			if (!ⵠΔᐃᐃⲆⵠⵠ) {
				(ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃΔⵠᐃᐃ || ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃᐃΔⲆΔ || ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ === ⲆⵠΔ.mode || ⲆⵠΔ.mode === ΔᐃᐃΔ.ⵠᐃΔⵠΔᐃⵠ || ΔᐃᐃΔ.Δᐃⵠᐃᐃ === ⲆⵠΔ.mode || ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃΔΔⲆⲆᐃᐃ && !ᐃⲆⵠ.ⲆⵠΔⵠΔⲆΔ || ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃΔⲆⲆᐃ && !ᐃⲆⵠ.ΔΔΔⵠⵠ) && (ΔⲆᐃᐃⵠΔΔ.drawImage(ᐃΔ[Δ.ⵠⵠΔⵠⵠⲆⲆ], 15 * ᐃ, ᐃ * (46 + 22 * Ⲇᐃ)), ΔⲆᐃᐃⵠΔΔ.drawImage(ᐃⵠΔΔΔ(ᐃ, ΔⵠΔⵠ.ⵠⵠᐃᐃᐃⲆΔ(ⲆⵠΔ.ⵠΔᐃΔ[ᐃⲆⵠ.id].ᐃⲆⲆⲆⲆ), ᐃ * ⲆⵠⲆΔΔⵠⵠ, ⵠ[447]), ΔᐃΔΔΔ * ᐃ, (46 + 22 * Ⲇᐃ) * ᐃ))
			}
		}
		ᐃᐃⵠⲆ(Ⲇ, ⵠⵠⲆᐃᐃⲆΔ.ΔⲆ, ⵠⵠⲆᐃᐃⲆΔ.translate.x, ⵠⵠⲆᐃᐃⲆΔ.translate.y)
	}

	function ΔⵠΔᐃΔ(ᐃΔᐃᐃⵠ) {
		var ᐃΔᐃᐃⵠ = ᐃΔᐃᐃⵠ / 100;
		if (.95 < ᐃΔᐃᐃⵠ) return;
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && ⵠΔⵠⵠⵠ == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ) this.ⵠⵠᐃ.ⲆᐃⲆ = ΔⲆΔⵠΔ;
			var ⲆⵠⲆ = ᐃ * (ⲆΔΔⲆ * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ
		} else {
			var Ⲇⵠ = Ⲇᐃⵠ;
			var ᐃⵠⲆ = 0
		}
		Ⲇ.globalAlpha = .5;
		ΔΔⲆⵠΔᐃΔ(Ⲇ, Ⲇⵠ, ᐃⵠⲆ, 28 * ᐃ, ᐃΔᐃᐃⵠ);
		ΔΔ(Ⲇ, null, ⵠ[91], ᐃ * 18);
		Ⲇ.globalAlpha = ΔᐃΔⲆ;
		ΔΔⲆⵠΔᐃΔ(Ⲇ, Ⲇⵠ, ᐃⵠⲆ, ᐃ * 28, ᐃΔᐃᐃⵠ);
		ΔΔ(Ⲇ, null, Δ.ᐃⵠⵠⵠⲆᐃΔ[ⲆⵠΔ.time], ⵠⵠᐃᐃᐃ * ᐃ);
		Ⲇ.restore()
	}

	function ⲆⵠΔᐃΔⲆⵠⲆᐃ(ⲆΔ) {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && false == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ) this.ⵠⵠᐃ.ⲆᐃⲆ = false;
			var ⲆⵠⲆ = 600 * ((ⵠⲆⲆ - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ) * ᐃ;
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = ᐃⵠⵠⲆ;
			var ᐃⵠⲆ = ⵠⵠⵠΔ
		}
		this.ⵠᐃⵠᐃᐃ.ⲆᐃⲆ() && (this.color += .2 + Math.random() * .3);
		ᐃᐃ = ᐃΔ[Δ.ΔᐃᐃΔᐃ][Math.floor(this.id + this.color) % 5][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ * -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height * this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ᐃᐃΔⵠ + Ⲇⵠ, -ⲆΔⲆ / ⲆⲆΔⲆ + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ⲆᐃᐃⲆⲆᐃⵠ(ᐃΔᐃᐃⵠ) {
		var ᐃΔᐃᐃⵠ = ᐃΔᐃᐃⵠ / 100;
		if (ᐃΔᐃᐃⵠ > .8) return;
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == false && (this.ⵠⵠᐃ.ⲆᐃⲆ = ᐃⲆⲆᐃᐃ);
			var ⲆⵠⲆ = (ΔΔΔᐃ - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ * 600 * ᐃ;
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ
		} else {
			var Ⲇⵠ = ⵠΔᐃᐃ;
			var ᐃⵠⲆ = 0
		}
		Ⲇ.globalAlpha = .5;
		ΔΔⲆⵠΔᐃΔ(Ⲇ, Ⲇⵠ, ᐃⵠⲆ, 18 * ᐃ, ᐃΔᐃᐃⵠ);
		ΔΔ(Ⲇ, null, ⵠ[91], ΔⵠⲆⲆⵠᐃⵠ * ᐃ);
		Ⲇ.globalAlpha = 1;
		ΔΔⲆⵠΔᐃΔ(Ⲇ, Ⲇⵠ, ᐃⵠⲆ, ᐃ * ⵠᐃᐃΔⲆⵠΔ, ᐃΔᐃᐃⵠ);
		ΔΔ(Ⲇ, null, Δ.ᐃⲆᐃᐃΔΔΔ[ⲆⵠΔ.time], 6 * ᐃ);
		Ⲇ.restore()
	}

	function ΔᐃⲆⲆᐃⲆⵠⲆⵠ() {
		var ⵠⲆⲆⲆⵠ = ᐃⲆⵠ.ⵠⲆⲆⲆⵠ;
		if (ⵠⲆⲆⲆⵠ.wait) {
			var ΔΔᐃⲆΔ = ⵠⲆⲆⲆⵠ.timeout.ⲆᐃⲆ();
			Ⲇ.save();
			var ᐃᐃ = ᐃΔ[Δ.ⵠΔⵠⵠⵠⵠⲆ];
			var ΔⵠⵠⲆᐃ = ᐃΔ[Δ.ΔⵠΔⵠᐃᐃΔ].height + 25 * ᐃ;
			Ⲇ.translate(ᐃᐃ.width, ΔᐃᐃⲆ.ⲆᐃⵠⲆ.translate.y - ᐃ * 188 - ΔⵠⵠⲆᐃ);
			var Ⲇⵠ = -ᐃᐃ.width / ΔᐃⵠΔ - ΔΔⲆᐃ;
			var ᐃⵠⲆ = -ᐃᐃ.height / 2 - ⵠᐃᐃΔ;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ + 2, ᐃⵠⲆ);
			Ⲇ.beginPath();
			Ⲇ.lineWidth = ᐃ * 5;
			Ⲇ.strokeStyle = Δ.ΔⲆⲆΔᐃⲆⵠ[ⲆⵠΔ.time];
			Ⲇ.lineCap = ⵠ[401];
			Ⲇ.arc(ΔΔᐃ, ᐃⵠⲆ + ᐃᐃ.height / 2, 25 * ᐃ, 0, ⵠⲆⲆⲆⵠ.timeout.ⲆⵠⲆ * (ⲆⵠΔⵠ * Math.PI));
			Ⲇ.stroke();
			Ⲇ.restore();
			ΔΔᐃⲆΔ && (ⵠⲆⲆⲆⵠ.wait = false, ⵠⲆⲆⲆⵠ.timeout.ⲆⵠⲆ = 0, ⵠⲆⲆⲆⵠ.timeout.Ⲇⵠⵠ = false)
		}
	}
	var ⲆᐃⵠⲆⲆΔⵠ = 0;

	function ⵠⲆⵠᐃⵠⵠⲆᐃⵠ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == ᐃⲆⲆΔⵠ && (this.ⵠⵠᐃ.ⲆᐃⲆ = false);
			var ⲆⵠⲆ = ᐃ * (600 * (ⲆΔΔⲆ * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ)));
			var Ⲇⵠ = ⲆⵠⲆ * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
			var ᐃⵠⲆ = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ
		} else {
			var Ⲇⵠ = ⵠⵠⵠ;
			var ᐃⵠⲆ = 0
		}
		var ΔⲆⵠΔ = this.info & 15;
		if (this.info === ᐃⵠᐃΔⲆ || ΔⲆⵠΔ === ΔⲆⲆ) {
			Ⲇ.rotate(this.angle);
			this.ΔⵠⲆΔ.ⲆᐃⲆ();
			if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ⲆᐃΔΔⲆΔᐃ][ⲆⵠΔ.time];
			else var ᐃᐃ = ᐃΔ[Δ.ᐃⵠΔᐃᐃⵠΔ][ⲆⵠΔ.time];
			var ⲆⲆᐃ = -ᐃᐃ.width * this.ΔⵠⲆΔ.ⲆⵠⲆ;
			var ⲆΔⲆ = -ᐃᐃ.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2 + Ⲇⵠ, -ⲆΔⲆ / 2 + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ)
		} else {
			if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ΔⲆᐃΔⵠⵠⲆ][ⲆⵠΔ.time];
			else var ᐃᐃ = ᐃΔ[Δ.ⵠⲆⵠΔΔ][ⲆⵠΔ.time];
			Ⲇ.translate(0, ᐃᐃ.height / 2);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ - ᐃᐃ.width / ΔⲆᐃΔ, -ᐃᐃ.height + ᐃⵠⲆ)
		}
		Ⲇ.restore()
	}

	function ᐃⲆⲆⵠⵠⵠᐃⲆⵠ() {
		if (10 > this.info) return;
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == ΔΔᐃⵠᐃ) this.ⵠⵠᐃ.ⲆᐃⲆ = false;
			var ⲆⵠⲆ = ᐃ * (ⲆΔΔⲆ * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
			var Ⲇⵠ = ⲆⵠⲆ * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = 0;
			var ᐃⵠⲆ = ⵠΔᐃᐃ
		}
		this.ΔⵠⲆΔ.ⲆᐃⲆ();
		var ᐃᐃ = ᐃΔ[Δ.ⵠⵠⲆΔⵠᐃⵠ][ⲆⵠΔ.time];
		var ⲆⲆᐃ = this.ΔⵠⲆΔ.ⲆⵠⲆ * -ᐃᐃ.width;
		var ⲆΔⲆ = this.ΔⵠⲆΔ.ⲆⵠⲆ * -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2 + Ⲇⵠ, -ⲆΔⲆ / ⲆᐃΔⲆ + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ΔⵠᐃⲆⵠᐃⵠΔΔ() {
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			var ⲆⵠⲆ = 600 * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ) * ᐃ;
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ
		} else {
			var Ⲇⵠ = ⲆⵠⲆⲆ;
			var ᐃⵠⲆ = 0
		}
		if (this.info & 255 && 65280 != (this.info & 65280)) this.rotate = (this.rotate + ⲆΔΔⲆ * .5) % (ⵠⵠⵠᐃ * Math.PI);
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x + Ⲇⵠ, ᐃⲆⵠ.ⲆⲆΔ.y + this.y + ᐃⵠⲆ);
		Ⲇ.save();
		Ⲇ.rotate(this.rotate);
		ᐃᐃ = ᐃΔ[Δ.ⵠⵠⲆΔᐃⲆⲆ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ᐃⲆᐃᐃ);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.rotate(this.ⲆⲆΔΔᐃⵠⵠΔᐃ);
		ᐃᐃ = ᐃΔ[Δ.ⲆⵠΔⵠᐃᐃᐃ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ᐃᐃᐃⵠ, -ᐃᐃ.height / 2);
		Ⲇ.restore();
		Ⲇ.restore()
	}

	function ⵠⵠᐃⲆⲆⲆⲆΔΔ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == false && (this.ⵠⵠᐃ.ⲆᐃⲆ = false);
			var ⲆⵠⲆ = ᐃ * (ⲆΔΔⲆ * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ
		} else {
			var Ⲇⵠ = ⵠⵠⵠΔ;
			var ᐃⵠⲆ = 0
		}
		var ΔⲆⵠΔ = this.info & 15;
		if (ᐃⵠᐃΔⲆ === this.info || ⵠᐃⲆ === ΔⲆⵠΔ) {
			Ⲇ.rotate(this.angle);
			this.ΔⵠⲆΔ.ⲆᐃⲆ();
			if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ΔΔΔΔᐃⵠⵠ][ⲆⵠΔ.time];
			else var ᐃᐃ = ᐃΔ[Δ.ᐃᐃᐃΔᐃⵠⵠ][ⲆⵠΔ.time];
			var ⲆⲆᐃ = -ᐃᐃ.width * this.ΔⵠⲆΔ.ⲆⵠⲆ;
			var ⲆΔⲆ = -ᐃᐃ.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2 + Ⲇⵠ, -ⲆΔⲆ / ⲆⲆΔⲆ + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ)
		} else {
			if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ΔΔΔΔΔᐃΔ][ⲆⵠΔ.time];
			else var ᐃᐃ = ᐃΔ[Δ.ⲆᐃᐃᐃΔ][ⲆⵠΔ.time];
			Ⲇ.translate(0, ᐃᐃ.height / 2);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ - ᐃᐃ.width / ΔΔⲆᐃ, -ᐃᐃ.height + ᐃⵠⲆ)
		}
		Ⲇ.restore()
	}

	function ⵠᐃΔⲆⲆⵠⲆᐃΔ() {
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && false == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ) this.ⵠⵠᐃ.ⲆᐃⲆ = ᐃΔΔⵠⲆ;
			var ⲆⵠⲆ = ᐃ * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ * 600);
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = ᐃᐃᐃ;
			var ᐃⵠⲆ = 0
		}
		this.ΔⵠᐃⵠᐃΔᐃ = (this.ΔⵠᐃⵠᐃΔᐃ + 3 * ⲆΔΔⲆ) % (ΔⲆᐃΔ * Math.PI);
		this.ΔΔⵠΔᐃⵠⵠ = (this.ΔΔⵠΔᐃⵠⵠ - 3 * ⲆΔΔⲆ) % (Math.PI * 2);
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x + Ⲇⵠ, ᐃⲆⵠ.ⲆⲆΔ.y + this.y + ᐃⵠⲆ);
		Ⲇ.save();
		Ⲇ.rotate(this.angle);
		ᐃᐃ = ᐃΔ[Δ.ᐃᐃⲆᐃΔ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ΔᐃⵠΔ);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.rotate(this.ΔⵠᐃⵠᐃΔᐃ);
		ᐃᐃ = ᐃΔ[Δ.ᐃⵠΔΔⵠⵠΔ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ⲆⲆΔⲆ, -ᐃᐃ.height / ᐃⲆᐃⵠ);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.rotate(this.ΔΔⵠΔᐃⵠⵠ);
		ᐃᐃ = ᐃΔ[Δ.ᐃΔᐃⵠⵠⵠⵠ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ΔΔΔⵠ, -ᐃᐃ.height / 2);
		Ⲇ.restore();
		Ⲇ.restore()
	}

	function ΔⵠΔᐃΔᐃΔᐃⵠ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		var ΔⲆⲆᐃ = ΔⵠΔⵠ.ΔⲆⲆᐃ(this, this.r);
		ΔⲆⲆᐃ > 350 ? this.scale = Math.min(this.scale + ⲆΔΔⲆ / ᐃᐃⲆⲆ, 1.8) : this.scale = Math.max(this.scale - ⲆΔΔⲆ, ᐃⲆΔ);
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		this.rotate.ⲆᐃⲆ();
		ΔⲆⲆᐃ < 350 ? this.ⲆⲆΔᐃ = Math.max(0, this.ⲆⲆΔᐃ - 2.2 * ⲆΔΔⲆ) : this.ⲆⲆΔᐃ = Math.min(1, this.ⲆⲆΔᐃ + ⲆΔΔⲆ * 2.2);
		if (ⵠⵠⵠ === (this.info & 1)) ᐃᐃ = ᐃΔ[Δ.ᐃⲆⵠᐃᐃᐃΔ][ⲆⵠΔ.time];
		else ᐃᐃ = ᐃΔ[Δ.ⵠΔΔᐃᐃⵠⲆ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.scale * (-ᐃᐃ.width * this.ⵠΔΔⲆ.ⲆⵠⲆ);
		ⲆΔⲆ = this.scale * (-ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ);
		Ⲇ.globalAlpha = 1 - this.ⲆⲆΔᐃ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 4, -ⲆΔⲆ / ⵠⲆΔⵠ, ⲆⲆᐃ / 2, ⲆΔⲆ / ⲆᐃⵠΔ);
		(this.info & Δⵠᐃ) === 0 ? ᐃᐃ = ᐃΔ[Δ.ΔⵠⲆΔᐃ][ⲆⵠΔ.time] : ᐃᐃ = ᐃΔ[Δ.ΔΔⲆᐃᐃⵠᐃ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.scale * (this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width);
		ⲆΔⲆ = -ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ * this.scale;
		Ⲇ.globalAlpha = this.ⲆⲆΔᐃ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⲆᐃᐃΔⵠ, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / ᐃᐃΔⵠ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == false) this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ;
			Ⲇ.globalAlpha = (.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * (ΔΔⵠΔ - this.ⲆⲆΔᐃ);
			var ᐃᐃ = ᐃΔ[Δ.ᐃᐃΔⲆⵠⲆΔ];
			ⲆⲆᐃ = this.scale * (this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width);
			ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.height * this.scale;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⲆᐃᐃΔⵠ, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
			Ⲇ.globalAlpha = (.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * this.ⲆⲆΔᐃ;
			var ᐃᐃ = ᐃΔ[Δ.ΔⵠΔⵠΔⲆΔ];
			ⲆⲆᐃ = this.scale * (this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width);
			ⲆΔⲆ = this.scale * (this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.height);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ᐃⲆⲆΔΔ, -ⲆΔⲆ / 4, ⲆⲆᐃ / ⲆⲆΔⲆ, ⲆΔⲆ / 2);
			Ⲇ.globalAlpha = ᐃᐃΔ
		}(this.info & 1) === 0 ? ᐃᐃ = ᐃΔ[Δ.ᐃᐃⲆⵠᐃⲆⲆ][ⲆⵠΔ.time] : ᐃᐃ = ᐃΔ[Δ.ⲆΔⵠΔᐃⵠⲆ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width * this.ⵠΔΔⲆ.ⲆⵠⲆ * this.scale;
		ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.height * this.scale;
		Ⲇ.save();
		Ⲇ.translate(-ᐃᐃΔΔΔ * ᐃ, ᐃ * ᐃᐃⲆ);
		Ⲇ.rotate(this.rotate.ⲆⵠⲆ);
		Ⲇ.globalAlpha = this.ⲆⲆΔᐃ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃ * -ⲆⲆᐃ / ⵠⲆΔⵠ, -ⲆΔⲆ * ᐃ / Ⲇⵠⵠⵠ, ⲆⲆᐃ / ⲆᐃΔⲆ, ⲆΔⲆ / ΔΔⲆᐃ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = this.ⲆⲆΔᐃ * (.6 - this.ⵠⵠᐃ.ⲆⵠⲆ);
			var ᐃᐃ = ᐃΔ[Δ.ⵠⵠⲆⵠᐃⲆᐃ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃ * -ⲆⲆᐃ / ⵠᐃΔΔ, -ⲆΔⲆ * ᐃ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / ΔⲆᐃΔ);
			Ⲇ.globalAlpha = ⲆΔΔΔ
		}
		Ⲇ.restore();
		(this.info & ΔⵠΔ) === ⵠⵠⲆⵠ ? ᐃᐃ = ᐃΔ[Δ.ᐃΔΔⵠⲆⲆΔ][ⲆⵠΔ.time] : ᐃᐃ = ᐃΔ[Δ.ᐃⲆⲆⲆᐃⵠΔ][ⲆⵠΔ.time];
		Ⲇ.save();
		Ⲇ.translate(ᐃ * ⵠΔⵠᐃⲆ, 0 * ᐃ);
		Ⲇ.rotate(-this.rotate.ⲆⵠⲆ);
		Ⲇ.globalAlpha = this.ⲆⲆΔᐃ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ * ᐃ / 4, -ⲆΔⲆ * ᐃ / Ⲇⵠⵠⵠ, ⲆⲆᐃ / ᐃⲆᐃⵠ, ⲆΔⲆ / 2);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = (.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * this.ⲆⲆΔᐃ;
			var ᐃᐃ = ᐃΔ[Δ.ⲆᐃⵠⵠⵠⵠⲆ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ * ᐃ / ᐃΔⵠⵠ, ᐃ * -ⲆΔⲆ / 4, ⲆⲆᐃ / ⲆᐃΔⲆ, ⲆΔⲆ / 2);
			Ⲇ.globalAlpha = ΔΔΔᐃ
		}
		Ⲇ.globalAlpha = 1;
		Ⲇ.restore();
		Ⲇ.restore()
	}

	function ⵠᐃⲆᐃᐃⲆⵠⵠᐃ() {
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && ⵠΔⵠⵠⵠ == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ) this.ⵠⵠᐃ.ⲆᐃⲆ = ᐃΔⵠᐃⲆ;
			var ⲆⵠⲆ = ᐃ * (600 * (ⲆΔΔⲆ * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ)));
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = ΔΔᐃᐃ;
			var ᐃⵠⲆ = 0
		}
		Ⲇ.save();
		this.info & 255 && (this.info & 65280) != 65280 && (Ⲇⵠ += ΔⲆᐃΔ * Math.random() - ΔⲆᐃᐃ, ᐃⵠⲆ += Math.random() * ᐃᐃᐃⵠ - 1);
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x + Ⲇⵠ, ᐃⲆⵠ.ⲆⲆΔ.y + this.y + ᐃⵠⲆ);
		Ⲇ.rotate(this.angle);
		ᐃᐃ = ᐃΔ[Δ.ΔⲆⵠΔⲆ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ΔΔᐃΔⵠ);
		this.info & 255 && (this.info & 65280) != 65280 && (this.rotate = (this.rotate + 3 * ⲆΔΔⲆ) % (Math.PI * 2));
		Ⲇ.rotate(this.rotate);
		ᐃᐃ = ᐃΔ[Δ.ⵠⵠΔⵠᐃᐃᐃ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ΔⵠⲆᐃ);
		Ⲇ.restore()
	}

	function ⲆΔᐃⵠΔⲆⲆ(ⲆΔ) {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ᐃⲆᐃⵠ, -ⲆΔⲆ / ⵠⵠⵠᐃ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ΔᐃⵠⵠΔⲆᐃⵠⵠ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == ᐃⲆⲆᐃᐃ) this.ⵠⵠᐃ.ⲆᐃⲆ = ⲆᐃᐃΔΔ;
			var ⲆⵠⲆ = ᐃ * (600 * (ⲆΔΔⲆ * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ)));
			var Ⲇⵠ = ⲆⵠⲆ * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = Ⲇᐃⵠ;
			var ᐃⵠⲆ = Δⵠⵠⵠ
		}
		if (this.info & 31 && this.info & 992 && 31744 != (this.info & 31744)) {
			ᐃᐃ = ᐃΔ[Δ.ⲆⵠⵠᐃⵠⵠΔ][ⲆⵠΔ.time];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2 + Ⲇⵠ, -ᐃᐃ.height / 2 + ᐃⵠⲆ);
			this.up.ⲆᐃⲆ();
			var ᐃᐃ = ᐃΔ[Δ.ⵠᐃⵠΔⲆⵠΔ][ⲆⵠΔ.time];
			var ⲆⲆᐃ = -ᐃᐃ.width * this.up.ⲆⵠⲆ;
			var ⲆΔⲆ = this.up.ⲆⵠⲆ * -ᐃᐃ.height;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ᐃᐃΔⵠ + ΔⲆᐃⲆ * ᐃ, -ⲆΔⲆ / ⲆⲆΔⲆ + ᐃ * ᐃⵠΔᐃ, ⲆⲆᐃ, ⲆΔⲆ)
		} else {
			ᐃᐃ = ᐃΔ[Δ.ⲆⲆᐃΔΔⲆΔ][ⲆⵠΔ.time];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ⲆⲆⲆⲆ + Ⲇⵠ, -ᐃᐃ.height / ⲆⲆⲆⲆ + ᐃⵠⲆ)
		}
		Ⲇ.restore()
	}

	function ΔⵠⵠᐃⲆⲆⵠΔΔ(ⲆΔ, Ⲇⵠ, ᐃⵠⲆ) {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + Ⲇⵠ, ᐃⲆⵠ.ⲆⲆΔ.y + ᐃⵠⲆ);
		Ⲇ.rotate(this.angle);
		Ⲇ.translate(this.x - Ⲇⵠ, this.y - ᐃⵠⲆ);
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ΔⵠⵠⵠⵠⲆⵠⲆΔ() {
		if (1 === (this.info & 1)) this.ᐃΔᐃᐃᐃ = Math.min(this.ᐃΔᐃᐃᐃ + ⲆΔΔⲆ, 2.2);
		else {
			this.ᐃΔᐃᐃᐃ = Math.max(this.ᐃΔᐃᐃᐃ - ⲆΔΔⲆ, 0);
			this.ⵠΔⲆΔⵠᐃᐃ += ⲆΔΔⲆ;
			if (this.ⵠΔⲆΔⵠᐃᐃ > .1) {
				this.ⵠΔⲆΔⵠᐃᐃ = ⵠᐃⲆⲆ;
				var ΔⵠⲆΔ = {
					x: this.x + Math.random() * 60 - 30,
					y: this.y + Math.random() * 60 - 30,
					a: ᐃᐃⲆ,
					r: Math.random() * 30 + 30
				};
				this.ΔⵠⲆΔ.push(ΔⵠⲆΔ)
			}
		}
		for (var Ⲇᐃ = ᐃᐃᐃ; Ⲇᐃ < this.ΔⵠⲆΔ.length; Ⲇᐃ++) {
			var ΔⵠⲆΔ = this.ΔⵠⲆΔ[Ⲇᐃ];
			Ⲇ.save();
			Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + ΔⵠⲆΔ.x, ᐃⲆⵠ.ⲆⲆΔ.y + ΔⵠⲆΔ.y);
			ΔⵠⲆΔ.a = Math.min(1, ΔⵠⲆΔ.a + ⲆΔΔⲆ / 2);
			var ⲆⲆΔᐃ = ΔⵠⲆΔ.a;
			if (ⲆⲆΔᐃ < .2) ⲆⲆΔᐃ *= ΔⵠΔᐃ;
			else ⲆⲆΔᐃ > .8 ? ⲆⲆΔᐃ = ΔⵠⲆᐃᐃ * (1 - ⲆⲆΔᐃ) : ⲆⲆΔᐃ = ᐃⲆΔ;
			Ⲇ.globalAlpha = .8 * ⲆⲆΔᐃ;
			ᐃΔΔ(Ⲇ, 0, 0, ΔⵠⲆΔ.r);
			ΔΔ(Ⲇ, Δ.ᐃⵠᐃⵠᐃⲆⵠ[ⲆⵠΔ.time]);
			Ⲇ.restore();
			1 === ΔⵠⲆΔ.a && (this.ΔⵠⲆΔ.splice(Ⲇᐃ, 1), Ⲇᐃ--)
		}
	}

	function ᐃⵠᐃᐃᐃΔⵠᐃⲆ(ⲆΔ, ⲆⲆⲆⲆΔΔᐃ) {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / ⲆᐃΔⲆ, ⲆⲆᐃ, ⲆΔⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			if (this.ⵠⵠᐃ.ⲆᐃⲆ() && ΔΔᐃⵠᐃ == this.ⵠⵠᐃ.Ⲇⵠⵠ) this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ;
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[ⲆⲆⲆⲆΔΔᐃ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ΔΔᐃΔⵠ, -ⲆΔⲆ / ⲆⲆΔⲆ, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = ΔⵠΔ
		}
		Ⲇ.restore()
	}

	function ᐃⲆⲆⵠᐃᐃⵠⵠⲆ() {
		var ΔⵠᐃⵠΔ = Math.PI / 2;
		var ⲆⲆᐃⵠᐃΔⵠ = Math.PI / 4;
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		this.ⵠΔΔᐃⵠⵠⵠ.ⲆᐃⲆ();
		this.ⵠᐃΔⵠⲆΔⲆ.ⲆᐃⲆ();
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		ⵠⵠⲆⵠ === this.info ? ᐃᐃ = ᐃΔ[Δ.ⵠⲆⲆⵠᐃ][ⲆⵠΔ.time] : ᐃᐃ = ᐃΔ[Δ.ⲆᐃᐃⲆⵠⵠⵠ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / ΔΔⲆᐃ, ⲆⲆᐃ, ⲆΔⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == Ⲇⵠᐃᐃᐃ && (this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ);
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⵠᐃΔⲆᐃᐃΔ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = 1
		}
		if (this.action & ⲆΔᐃᐃ.ⵠⲆᐃΔⵠ) {
			this.ᐃⵠⵠⲆⲆ.ⲆᐃⲆ() && ⲆΔⲆᐃΔ == this.ᐃⵠⵠⲆⲆ.Ⲇⵠⵠ && (this.action -= ⲆΔᐃᐃ.ⵠⲆᐃΔⵠ);
			Ⲇ.globalAlpha = .6 - this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⲆΔᐃᐃᐃⵠⵠ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ΔᐃΔᐃ, -ⲆΔⲆ / ⵠΔⵠΔ, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = 1
		}
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle + ⲆⲆᐃⵠᐃΔⵠ);
		Ⲇ.translate(ᐃⲆᐃⵠΔ, ᐃᐃⲆ);
		Ⲇ.rotate(ΔⵠᐃⵠΔ);
		if (this.info === 0) ᐃᐃ = ᐃΔ[Δ.ᐃⲆᐃⵠⲆⲆⵠ][ⲆⵠΔ.time];
		else ᐃᐃ = ᐃΔ[Δ.ⲆΔⵠᐃⵠⲆᐃ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠΔΔᐃⵠⵠⵠ.ⲆⵠⲆ * -ᐃᐃ.width;
		ⲆΔⲆ = this.ⵠΔΔᐃⵠⵠⵠ.ⲆⵠⲆ * -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⲆⵠΔⵠ, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⲆᐃⵠⲆⵠⲆⲆ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / ⲆᐃⵠΔ, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = ΔⵠΔ
		}
		if (this.action & ⲆΔᐃᐃ.ⵠⲆᐃΔⵠ) {
			Ⲇ.globalAlpha = .6 - this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ᐃΔᐃΔⵠⲆΔ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = 1
		}
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle + ΔⵠᐃⵠΔ + ⲆⲆᐃⵠᐃΔⵠ);
		Ⲇ.translate(ⵠᐃⵠΔⵠⵠᐃ, 0);
		Ⲇ.rotate(ΔⵠᐃⵠΔ);
		0 === this.info ? ᐃᐃ = ᐃΔ[Δ.ᐃⵠⲆΔΔⲆⵠ][ⲆⵠΔ.time] : ᐃᐃ = ᐃΔ[Δ.ΔΔΔΔⲆⵠΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width * this.ⵠᐃΔⵠⲆΔⲆ.ⲆⵠⲆ;
		ⲆΔⲆ = -ᐃᐃ.height * this.ⵠᐃΔⵠⲆΔⲆ.ⲆⵠⲆ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⲆⵠΔⵠ, -ⲆΔⲆ / ᐃⲆᐃᐃ, ⲆⲆᐃ, ⲆΔⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⵠΔⵠⲆⵠⵠᐃ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / ⵠⵠⵠᐃ, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = ΔᐃΔⲆ
		}
		if (this.action & ⲆΔᐃᐃ.ⵠⲆᐃΔⵠ) {
			Ⲇ.globalAlpha = .6 - this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ᐃΔⲆΔΔⵠΔ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ᐃᐃⲆⲆ, -ⲆΔⲆ / ᐃᐃᐃⵠ, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = ⲆᐃΔ
		}
		Ⲇ.restore()
	}

	function ᐃⲆⵠΔⲆⲆⲆⲆᐃ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (ΔⵠΔⵠ.ΔⲆⲆᐃ(this, this.r) > 300) this.scale = Math.min(this.scale + ⲆΔΔⲆ / ᐃⲆᐃᐃ, 1.8);
		else this.scale = Math.max(this.scale - ⲆΔΔⲆ, 1);
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		this.rotate.ⲆᐃⲆ();
		ᐃᐃ = ᐃΔ[Δ.ⵠⵠᐃⵠΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width * this.scale;
		ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.height * this.scale;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / ᐃⲆᐃⵠ, ⲆΔⲆ / ΔⵠⲆᐃ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == ᐃΔⵠᐃⲆ && (this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ);
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⲆΔⵠⲆⲆⵠΔ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⵠᐃΔΔ, -ⲆΔⲆ / 4, ⲆⲆᐃ / ΔΔΔⵠ, ⲆΔⲆ / 2);
			Ⲇ.globalAlpha = ⵠⲆⲆ
		}
		ᐃᐃ = ᐃΔ[Δ.ᐃⲆΔⵠᐃⵠⵠ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.scale * (-ᐃᐃ.width * this.ⵠΔΔⲆ.ⲆⵠⲆ);
		ⲆΔⲆ = this.scale * (-ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * -60, ⵠΔⵠᐃⲆ * ᐃ);
		Ⲇ.rotate(this.rotate.ⲆⵠⲆ);
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃ * -ⲆⲆᐃ / 4, ᐃ * -ⲆΔⲆ / ᐃᐃⵠΔ, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⵠⵠⵠΔⵠᐃⵠ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ * ᐃ / ⲆᐃᐃΔⵠ, -ⲆΔⲆ * ᐃ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / ΔᐃⵠΔ);
			Ⲇ.globalAlpha = 1
		}
		Ⲇ.restore();
		ᐃᐃ = ᐃΔ[Δ.ⵠᐃⵠⲆᐃⵠΔ][ⲆⵠΔ.time];
		Ⲇ.save();
		Ⲇ.translate(ᐃ * 60, ᐃ * ⵠⵠᐃΔᐃ);
		Ⲇ.rotate(-this.rotate.ⲆⵠⲆ);
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃ * -ⲆⲆᐃ / ⵠΔⲆΔΔ, ᐃ * -ⲆΔⲆ / ᐃⵠⵠⵠᐃ, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ΔⲆⵠΔΔⲆΔ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃ * -ⲆⲆᐃ / ⵠᐃᐃΔ, ᐃ * -ⲆΔⲆ / 4, ⲆⲆᐃ / ᐃᐃᐃⵠ, ⲆΔⲆ / 2);
			Ⲇ.globalAlpha = ΔᐃⲆⲆ
		}
		Ⲇ.restore();
		Ⲇ.restore()
	}

	function ⲆⲆⵠᐃΔᐃᐃⲆⵠ() {
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && false == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ && (this.ⵠⵠᐃ.ⲆᐃⲆ = ᐃⲆⲆΔⵠ);
			var ⲆⵠⲆ = ᐃ * ((Δᐃⵠⵠ - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ * 600);
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = 0;
			var ᐃⵠⲆ = 0
		}
		this.ΔⵠᐃⵠᐃΔᐃ = (this.ΔⵠᐃⵠᐃΔᐃ + ⲆΔΔⲆ * 3) % (Math.PI * ⵠⵠⵠᐃ);
		this.ΔΔⵠΔᐃⵠⵠ = (this.ΔΔⵠΔᐃⵠⵠ - 3 * ⲆΔΔⲆ) % (Math.PI * 2);
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x + Ⲇⵠ, ᐃⲆⵠ.ⲆⲆΔ.y + this.y + ᐃⵠⲆ);
		Ⲇ.save();
		Ⲇ.rotate(this.angle);
		ᐃᐃ = ᐃΔ[Δ.ⲆⵠⲆᐃᐃ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ⲆᐃΔⲆ);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.rotate(this.ΔⵠᐃⵠᐃΔᐃ);
		ᐃᐃ = ᐃΔ[Δ.ΔΔΔⵠΔⵠⲆ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.rotate(this.ΔΔⵠΔᐃⵠⵠ);
		ᐃᐃ = ᐃΔ[Δ.ⲆⲆⵠᐃⲆΔⲆ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ⲆⲆⲆⲆ, -ᐃᐃ.height / 2);
		Ⲇ.restore();
		Ⲇ.restore()
	}

	function ⲆᐃᐃᐃⵠⲆⲆ(ΔⵠΔⲆ, Ⲇⵠ, ᐃⵠⲆ) {
		if (ΔⵠΔⲆ >= 0) {
			ᐃᐃ = ᐃΔ[ΔⵠΔⲆ][ⲆⵠΔ.time];
			switch (ΔⵠΔⲆ) {
				case Δ.ΔΔΔΔΔ:
				case Δ.ⲆⲆⵠΔΔ:
				case Δ.ⲆⵠⵠΔΔ:
				case Δ.ΔΔⵠᐃⲆ:
				case Δ.ⲆⵠⲆᐃΔ:
				case Δ.ⲆⵠΔⲆⲆ:
					ΔⲆᐃⵠⲆ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / ⲆⲆΔⲆ - (45 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 2 + (ᐃⵠⲆ + 22) * ᐃ);
					break;
				case Δ.ⵠᐃⲆᐃΔ:
				case Δ.ᐃΔᐃΔΔ:
				case Δ.ᐃᐃⵠΔⵠ:
				case Δ.ⲆⲆⵠΔᐃ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / ⲆΔᐃΔⵠ - ᐃ * (52 + Ⲇⵠ), -ᐃᐃ.height / 4 + ᐃ * (ᐃⵠⲆ + 20));
					break;
				case Δ.ΔⲆⵠⲆⵠ:
				case Δ.ⲆⲆΔⵠΔ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / ᐃⲆᐃⲆ - ᐃ * (57 + Ⲇⵠ), -ᐃᐃ.height / ᐃⵠⵠⵠᐃ + ᐃ * (ᐃⵠⲆ + ΔⲆΔⲆΔ));
					break;
				case Δ.ΔᐃⲆΔⲆ:
				case Δ.ⵠΔᐃᐃⵠ:
				case Δ.ΔᐃⲆⵠⲆ:
				case Δ.ⵠΔΔⲆⲆ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / ᐃⵠⵠⵠᐃ - ᐃ * (47 + Ⲇⵠ), -ᐃᐃ.height / ᐃᐃⵠΔ + (ᐃⵠⲆ + 45) * ᐃ);
					break;
				case Δ.ᐃⵠⲆⲆΔ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / ⲆΔᐃΔⵠ - (52 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 4 + ᐃ * (ᐃⵠⲆ + 45));
					break;
				case Δ.ᐃᐃⵠⵠⵠ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / 4 - (47 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 4 + ᐃ * (ᐃⵠⲆ + 44));
					break;
				case Δ.ⲆΔⵠⵠᐃ:
					ΔⲆᐃⵠⲆ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / ᐃᐃⲆⲆ - ᐃ * (47 + Ⲇⵠ), -ᐃᐃ.height / 2 + (ᐃⵠⲆ + 44) * ᐃ);
					break;
				case Δ.ΔᐃⵠΔΔ:
					ΔⲆᐃⵠⲆ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / 2 - (40 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 2 + ᐃ * (ᐃⵠⲆ + 65));
					break;
				case Δ.ⲆⲆⵠΔⲆ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / ⲆᐃᐃΔⵠ - ᐃ * (37 + Ⲇⵠ), -ᐃᐃ.height / 4 + ᐃ * (ᐃⵠⲆ + 85));
					break;
				case Δ.Δᐃᐃᐃⵠ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / 4 - (37 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 4 + ᐃ * (ᐃⵠⲆ + 85));
					break;
				case Δ.ⲆⵠⵠⲆᐃ:
				case Δ.ᐃⲆΔⵠⵠ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / 4 - (26 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 4 + (ᐃⵠⲆ + 77) * ᐃ);
					break;
				case Δ.ΔΔΔⲆᐃ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / ᐃᐃⵠΔ - ᐃ * (37 + Ⲇⵠ), -ᐃᐃ.height / ⵠⲆⲆⵠ + (ᐃⵠⲆ + 85) * ᐃ);
					break;
				case Δ.ⵠΔⲆⵠᐃ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / 4 - (47 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / ᐃⲆᐃⲆ + (ᐃⵠⲆ + 44) * ᐃ);
					break;
				case Δ.ⵠᐃΔⲆᐃ:
				case Δ.ⲆⲆΔᐃΔ:
				case Δ.ΔᐃⵠᐃΔ:
				case Δ.ⲆΔⵠⲆᐃ:
				case Δ.ΔⲆᐃᐃᐃ:
				case Δ.ⲆᐃΔⲆᐃ:
				case Δ.ΔΔⵠⲆΔ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / 4 - (37 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / ⵠⵠᐃΔ + ᐃ * (ᐃⵠⲆ + 30));
					break;
				case Δ.ⵠⵠΔⵠᐃ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / ⵠⵠᐃΔ - ᐃ * (47 + Ⲇⵠ), -ᐃᐃ.height / 4 + (ᐃⵠⲆ + 35) * ᐃ);
					break;
				case Δ.ⲆⲆⵠⵠΔ:
				case Δ.ⵠᐃⵠⵠⵠ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / 4 - (47 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 4 + ᐃ * (ᐃⵠⲆ + 40));
					break;
				case Δ.ᐃΔⵠΔᐃ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / 4 - ᐃ * (47 + Ⲇⵠ), -ᐃᐃ.height / Ⲇⵠⵠⵠ + ᐃ * (ᐃⵠⲆ + 34));
					break;
				case Δ.ⲆΔΔⵠⵠ:
				case Δ.ᐃⵠᐃΔΔ:
				case Δ.ΔⵠⵠⵠΔ:
				case Δ.ⵠᐃᐃᐃⲆ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / 4 - ᐃ * (37 + Ⲇⵠ), -ᐃᐃ.height / ᐃⵠⵠⵠᐃ + ᐃ * (ᐃⵠⲆ + 90));
					break;
				case Δ.ΔᐃⵠⲆᐃ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / 4 - ᐃ * (40 + Ⲇⵠ), -ᐃᐃ.height / 4 + ᐃ * (ᐃⵠⲆ + 85));
					break;
				case Δ.ⲆᐃⵠⲆⲆ:
					ΔⲆᐃⵠⲆ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / ⵠΔⵠΔ - (39 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / ⲆⵠΔⵠ + ᐃ * (ᐃⵠⲆ + 90));
					break;
				case Δ.ⲆΔΔᐃΔ:
				case Δ.Ⲇᐃᐃᐃᐃ:
				case Δ.ⵠΔⵠᐃᐃ:
				case Δ.ⲆᐃⵠΔⵠ:
				case Δ.ⵠⲆΔΔⵠ:
				case Δ.ⲆᐃΔⵠⲆ:
					ΔⲆᐃⵠⲆ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / ᐃᐃⲆⲆ - (46 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / ᐃᐃᐃⵠ + (ᐃⵠⲆ + 35) * ᐃ);
					break;
				case Δ.ΔⲆⵠⵠΔ:
					ΔⲆᐃⵠⲆ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / 2 - ᐃ * (47 + Ⲇⵠ), -ᐃᐃ.height / ⲆⲆⲆⲆ + (ᐃⵠⲆ + 54) * ᐃ);
					break;
				case Δ.ΔΔΔᐃΔ:
				case Δ.ⲆᐃⲆⲆᐃ:
				case Δ.ᐃⲆᐃⲆᐃ:
				case Δ.ⵠⵠΔᐃΔ:
					ΔⲆᐃⵠⲆ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / 2 - (46 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 2 + ᐃ * (ᐃⵠⲆ + 35));
					break;
				case Δ.ΔΔᐃⲆᐃ:
					ΔⲆᐃⵠⲆ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / ᐃᐃᐃⵠ - (47 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / ⲆⲆⲆⲆ + ᐃ * (ᐃⵠⲆ + ⵠᐃⲆⵠⲆ));
					break
			}
		}
	}

	function ΔΔⵠΔΔΔⲆⵠⲆ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		this.ᐃᐃΔᐃᐃ.ⲆᐃⲆ();
		ᐃᐃ = ᐃΔ[Δ.ⲆⲆΔⵠⲆ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ᐃᐃΔᐃᐃ.ⲆⵠⲆ * -ᐃᐃ.width;
		ⲆΔⲆ = this.ᐃᐃΔᐃᐃ.ⲆⵠⲆ * -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
		this.ⵠᐃⵠᐃᐃ.ⲆᐃⲆ();
		ᐃᐃ = ᐃΔ[Δ.ⵠⲆᐃᐃᐃⵠΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width * this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ;
		ⲆΔⲆ = -ᐃᐃ.height * this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ΔΔΔⵠ, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ᐃⵠᐃⲆⲆᐃⲆΔᐃ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		var ΔⲆⲆᐃ = ΔⵠΔⵠ.ΔⲆⲆᐃ(this, this.r);
		if (ΔⲆⲆᐃ > 350) this.scale = Math.min(this.scale + ⲆΔΔⲆ / ⲆᐃΔⲆ, 1.8);
		else this.scale = Math.max(this.scale - ⲆΔΔⲆ, ΔᐃΔⲆ);
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		this.rotate.ⲆᐃⲆ();
		if (350 > ΔⲆⲆᐃ) this.ⲆⲆΔᐃ = Math.max(ΔⲆⲆ, this.ⲆⲆΔᐃ - ⲆΔΔⲆ * 2.2);
		else this.ⲆⲆΔᐃ = Math.min(ᐃⲆΔ, this.ⲆⲆΔᐃ + ⲆΔΔⲆ * 2.2);
		ᐃᐃ = ᐃΔ[Δ.ⲆⵠᐃⵠⲆⲆⲆ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.scale * (this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width);
		ⲆΔⲆ = this.scale * (-ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ);
		Ⲇ.globalAlpha = ΔⲆᐃᐃ - this.ⲆⲆΔᐃ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⵠᐃΔΔ, -ⲆΔⲆ / ᐃΔᐃΔ, ⲆⲆᐃ / 2, ⲆΔⲆ / ⲆᐃΔⲆ);
		ᐃᐃ = ᐃΔ[Δ.ΔⲆⲆⵠᐃⵠΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.scale * (-ᐃᐃ.width * this.ⵠΔΔⲆ.ⲆⵠⲆ);
		ⲆΔⲆ = this.scale * (-ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ);
		Ⲇ.globalAlpha = this.ⲆⲆΔᐃ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / ᐃᐃᐃⵠ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			if (this.ⵠⵠᐃ.ⲆᐃⲆ() && ΔⲆΔⵠΔ == this.ⵠⵠᐃ.Ⲇⵠⵠ) this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ;
			Ⲇ.globalAlpha = (.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * (ΔᐃⵠⲆ - this.ⲆⲆΔᐃ);
			var ᐃᐃ = ᐃΔ[Δ.ⵠⲆᐃᐃΔᐃⲆ];
			ⲆⲆᐃ = -ᐃᐃ.width * this.ⵠΔΔⲆ.ⲆⵠⲆ * this.scale;
			ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.height * this.scale;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 4, -ⲆΔⲆ / ⵠᐃΔⲆ, ⲆⲆᐃ / ΔΔΔⵠ, ⲆΔⲆ / ⲆⵠΔⵠ);
			Ⲇ.globalAlpha = (.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * this.ⲆⲆΔᐃ;
			var ᐃᐃ = ᐃΔ[Δ.ᐃⵠΔⲆΔᐃⵠ];
			ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width * this.scale;
			ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.height * this.scale;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⲆᐃᐃΔⵠ, -ⲆΔⲆ / ᐃⵠⵠⵠᐃ, ⲆⲆᐃ / ᐃⲆᐃᐃ, ⲆΔⲆ / 2);
			Ⲇ.globalAlpha = ⵠⲆⲆ
		}
		ᐃᐃ = ᐃΔ[Δ.ΔΔⲆⵠᐃⵠᐃ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width * this.ⵠΔΔⲆ.ⲆⵠⲆ * this.scale;
		ⲆΔⲆ = this.scale * (this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.height);
		Ⲇ.save();
		Ⲇ.translate(ᐃ * -40, 80 * ᐃ);
		Ⲇ.rotate(this.rotate.ⲆⵠⲆ);
		Ⲇ.globalAlpha = this.ⲆⲆΔᐃ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃ * -ⲆⲆᐃ / Ⲇⵠⵠⵠ, ᐃ * -ⲆΔⲆ / ᐃⵠⵠⵠᐃ, ⲆⲆᐃ / ⲆⵠΔⵠ, ⲆΔⲆ / ⲆⲆⲆⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = (.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * this.ⲆⲆΔᐃ;
			var ᐃᐃ = ᐃΔ[Δ.ⲆᐃⲆᐃⲆᐃⵠ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃ * -ⲆⲆᐃ / 4, -ⲆΔⲆ * ᐃ / 4, ⲆⲆᐃ / ᐃⲆᐃᐃ, ⲆΔⲆ / 2);
			Ⲇ.globalAlpha = ΔᐃⵠⲆ
		}
		Ⲇ.restore();
		ᐃᐃ = ᐃΔ[Δ.ΔᐃⲆⵠΔⲆΔ][ⲆⵠΔ.time];
		Ⲇ.save();
		Ⲇ.translate(40 * ᐃ, 80 * ᐃ);
		Ⲇ.rotate(-this.rotate.ⲆⵠⲆ);
		Ⲇ.globalAlpha = this.ⲆⲆΔᐃ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ * ᐃ / ᐃᐃⵠΔ, ᐃ * -ⲆΔⲆ / ⵠⲆΔⵠ, ⲆⲆᐃ / ΔΔΔⵠ, ⲆΔⲆ / ⲆᐃⵠΔ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = (.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * this.ⲆⲆΔᐃ;
			var ᐃᐃ = ᐃΔ[Δ.ⵠᐃᐃⵠⵠᐃᐃ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ * ᐃ / 4, -ⲆΔⲆ * ᐃ / ⲆΔᐃᐃΔ, ⲆⲆᐃ / ⲆⲆⲆⲆ, ⲆΔⲆ / 2);
			Ⲇ.globalAlpha = 1
		}
		Ⲇ.globalAlpha = 1;
		Ⲇ.restore();
		Ⲇ.restore()
	}

	function ΔΔⲆᐃΔᐃⲆΔⲆ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		this.ⵠᐃⵠᐃᐃ.ⲆᐃⲆ();
		ᐃᐃ = ᐃΔ[Δ.ᐃⵠΔⵠⵠΔᐃ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ * -ᐃᐃ.width;
		ⲆΔⲆ = this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ * -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / ΔᐃΔᐃ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ᐃⵠⵠⵠᐃΔⲆⲆⲆ(ⲆΔ, ᐃᐃᐃⵠⲆΔᐃⵠᐃ) {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		Δ.ⵠΔΔᐃΔ === ⲆΔ && (ⲆΔ = Δ.ᐃᐃⵠⵠΔ, this.info = 36);
		ᐃᐃ = ᐃΔ[ⲆΔ][this.info][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width / ᐃᐃΔⵠ;
		ⲆΔⲆ = -ᐃᐃ.height / ⲆⲆΔⲆ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⲆⲆⲆⲆ, -ⲆΔⲆ / ΔΔⲆᐃ, ⲆⲆᐃ, ⲆΔⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			if (this.ⵠⵠᐃ.ⲆᐃⲆ() && false == this.ⵠⵠᐃ.Ⲇⵠⵠ) this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ;
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ⲆⲆⲆⲆΔΔᐃ = ⲆⵠⵠⵠⵠᐃⲆ(this.info, ᐃᐃ, ⵠⲆⲆᐃⲆⲆⲆΔⵠ);
			ᐃᐃⵠⲆ(Ⲇ, ⲆⲆⲆⲆΔΔᐃ, -ⲆⲆᐃ / ᐃᐃᐃⵠ, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = ⵠΔᐃ
		}
		Ⲇ.restore()
	}

	function ⵠΔΔⵠᐃᐃⵠⵠᐃ(ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, ⲆΔ, Δᐃᐃ, ΔⵠᐃⲆ, ⲆΔⲆⵠ, ᐃᐃⲆⲆᐃ) {
		ⲆΔⲆⵠ === undefined && (ⲆΔⲆⵠ = ΔⲆⲆ);
		for (var Ⲇᐃ = ⲆⲆΔⵠ; ⲆᐃΔᐃ >= Ⲇᐃ; Ⲇᐃ++) {
			for (var ⲆⲆᐃⲆ = ᐃᐃΔΔ; ᐃⵠᐃΔ >= ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) {
				var ᐃΔⲆⲆ = ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ];
				if (ᐃΔⲆⲆ === Ⲇⵠⵠᐃᐃ || ᐃΔⲆⲆ[Δᐃᐃ] === ⵠᐃᐃᐃᐃ) continue;
				var ⲆᐃΔⵠ = ᐃΔⲆⲆ[Δᐃᐃ];
				var ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time][ⲆᐃΔⵠ.ᐃᐃⵠⵠⵠⵠᐃ];
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠ.ⲆⲆΔ.x + ⲆᐃΔⵠ.x - ᐃᐃ.width / (ΔⲆⵠᐃⵠ * 4), ᐃⲆⵠ.ⲆⲆΔ.y + ⲆᐃΔⵠ.y - ᐃᐃ.height / (ᐃⲆⲆΔΔ * ΔⲆⵠᐃⵠ), ᐃᐃ.width / (ⲆⲆΔⲆ * ΔⲆⵠᐃⵠ), ᐃᐃ.height / (ΔⲆⵠᐃⵠ * 2));
				if (ᐃΔΔΔ.ΔΔⲆᐃⲆ) {
					var ⵠⲆⲆⲆ = 2147483648;
					var ⵠᐃⲆᐃ = 1103515245;
					var ᐃⵠⵠΔ = 12345;
					var ΔᐃᐃᐃⲆ = (ⵠᐃⲆᐃ * (1e3 * Ⲇᐃ + ⲆⲆᐃⲆ) + ᐃⵠⵠΔ) % ⵠⲆⲆⲆ / ⵠⲆⲆⲆ;
					if (ΔᐃᐃᐃⲆ < .2) {
						ΔᐃᐃᐃⲆ = Math.floor(ᐃΔ[Δ.ΔΔᐃⲆ][ⲆⵠΔ.time][ⲆᐃΔⵠ.ᐃᐃⵠⵠⵠⵠᐃ].length * (5 * ΔᐃᐃᐃⲆ));
						var ᐃᐃ = ᐃΔ[Δ.ΔΔᐃⲆ][ⲆⵠΔ.time][ⲆᐃΔⵠ.ᐃᐃⵠⵠⵠⵠᐃ][ΔᐃᐃᐃⲆ];
						ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠ.ⲆⲆΔ.x + ⲆᐃΔⵠ.x - ᐃᐃ.width / (4 * ΔⲆⵠᐃⵠ), ᐃⲆⵠ.ⲆⲆΔ.y + ⲆᐃΔⵠ.y - ᐃᐃ.height / (ᐃⲆᐃⲆ * ΔⲆⵠᐃⵠ), ᐃᐃ.width / (ΔⲆⵠᐃⵠ * 2), ᐃᐃ.height / (ΔⲆⵠᐃⵠ * ᐃᐃᐃⵠ))
					} else if (ⲆᐃΔⵠ.ᐃᐃᐃⵠΔⵠⵠ !== ⲆⵠⲆⲆ) {
						var ᐃᐃ = ᐃΔ[Δ.ⵠⲆⲆᐃᐃⵠⵠ][ⲆⵠΔ.time];
						var ᐃⵠΔΔⲆⵠⲆ = (ⲆᐃⵠⲆⲆΔⵠ + 30 * (Ⲇᐃ % 2)) % 60;
						Ⲇ.globalAlpha = ᐃⵠΔΔⲆⵠⲆ < 30 ? ᐃⵠΔΔⲆⵠⲆ / 30 : 1 - (ᐃⵠΔΔⲆⵠⲆ - 30) / 30;
						ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠ.ⲆⲆΔ.x + ⲆᐃΔⵠ.x - ᐃᐃ.width / (ⲆΔᐃΔⵠ * ΔⲆⵠᐃⵠ), ᐃⲆⵠ.ⲆⲆΔ.y + ⲆᐃΔⵠ.y - ᐃᐃ.height / (ΔⲆⵠᐃⵠ * 4) - 30 + ᐃⵠΔΔⲆⵠⲆ, ᐃᐃ.width / (ΔⲆⵠᐃⵠ * 2), ᐃᐃ.height / (ΔⲆⵠᐃⵠ * ⲆⵠΔⵠ));
						Ⲇ.globalAlpha = Δⵠᐃ
					}
				}
			}
		}
	}

	function ⲆᐃΔⲆⵠΔⵠⵠⲆ() {
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == false && (this.ⵠⵠᐃ.ⲆᐃⲆ = ⲆΔⲆᐃΔ);
			var ⲆⵠⲆ = ᐃ * (600 * ((ΔⲆᐃᐃ - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ));
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = 0;
			var ᐃⵠⲆ = ⵠⵠⵠΔ
		}
		Ⲇ.save();
		if (this.info & 255 && 65280 != (this.info & 65280)) {
			Ⲇⵠ += Math.random() * 2 - ΔⲆᐃⲆ;
			ᐃⵠⲆ += Math.random() * ΔΔΔⵠ - ⵠⲆΔⲆ
		}
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x + Ⲇⵠ, ᐃⲆⵠ.ⲆⲆΔ.y + this.y + ᐃⵠⲆ);
		Ⲇ.rotate(this.angle);
		ᐃᐃ = ᐃΔ[Δ.ⵠⲆⲆΔⲆ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ⲆⲆΔⲆ, -ᐃᐃ.height / 2);
		this.info & 255 && (this.info & 65280) != 65280 && (this.rotate = (this.rotate + 3 * ⲆΔΔⲆ) % (Math.PI * 2));
		Ⲇ.rotate(this.rotate);
		ᐃᐃ = ᐃΔ[Δ.ΔᐃⲆᐃᐃⵠΔ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ΔΔⲆᐃ);
		Ⲇ.restore()
	}

	function ᐃᐃΔᐃⵠⵠΔⲆΔ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		ΔⵠΔⵠ.ΔⲆⲆᐃ(this, this.r) > 300 ? this.scale = Math.min(this.scale + ⲆΔΔⲆ / 2, 1.8) : this.scale = Math.max(this.scale - ⲆΔΔⲆ, 1);
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		this.rotate.ⲆᐃⲆ();
		ᐃᐃ = ᐃΔ[Δ.ⵠᐃⲆⲆᐃ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width * this.scale;
		ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.height * this.scale;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / ᐃᐃⲆⲆ, ⲆⲆᐃ, ⲆΔⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			if (this.ⵠⵠᐃ.ⲆᐃⲆ() && ⲆΔⲆᐃΔ == this.ⵠⵠᐃ.Ⲇⵠⵠ) this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ;
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ᐃᐃΔᐃⲆⵠᐃ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / ᐃⲆᐃⵠ, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = ΔⵠΔ
		}
		ᐃᐃ = ᐃΔ[Δ.ᐃᐃⵠⲆᐃΔⲆ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.scale * (this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width);
		ⲆΔⲆ = -ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ * this.scale;
		Ⲇ.save();
		Ⲇ.translate(ᐃ * -30, ᐃ * 70);
		Ⲇ.rotate(this.rotate.ⲆⵠⲆ);
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃ * -10, ᐃ * -40, ⲆⲆᐃ, ⲆΔⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⲆΔⵠᐃⲆᐃⲆ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃ * -ⵠⲆΔᐃᐃ, ᐃ * -40, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = 1
		}
		Ⲇ.restore();
		ᐃᐃ = ᐃΔ[Δ.ⵠⵠᐃⲆΔⵠⲆ][ⲆⵠΔ.time];
		Ⲇ.save();
		Ⲇ.translate(30 * ᐃ, ᐃ * 70);
		Ⲇ.rotate(-this.rotate.ⲆⵠⲆ);
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃᐃᐃΔΔ * ᐃ - ⲆⲆᐃ, ᐃ * -40, ⲆⲆᐃ, ⲆΔⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ᐃᐃᐃⵠᐃⵠᐃ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃ * ⲆΔⵠⵠΔ - ⲆⲆᐃ, ᐃ * -40, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = Δⵠᐃ
		}
		Ⲇ.restore();
		Ⲇ.restore()
	}
	function hdBJK8(){}var ky8Wwr=Object['defineProperty'],peM8Tr,qpa_D9,tVylx3,L4gf8Aa,qbSmdqm,tm5IU6,zIbRU01,Wvb0KO,nACzerq,IzSRDV5,pBkKE5,trDBow,J5ukjhf,aerSiBn,aIXLogg,p4135y,QuKGh8;function cgxqlpU(hdBJK8){return peM8Tr[hdBJK8<0x42?hdBJK8+0x7:hdBJK8>0xa9?hdBJK8-0x5f:hdBJK8-0x43]}peM8Tr=XjL3GVJ.call(this);function x5b3p0(hdBJK8,ky8Wwr){qpa_D9(hdBJK8,'length',{value:ky8Wwr,configurable:!0x0});return hdBJK8}qpa_D9=Object.defineProperty;var jz8HA0=[],ScFn30P=qKVyAF((hdBJK8,ky8Wwr=0x10,peM8Tr,qpa_D9=0x25)=>{for(ky8Wwr=ky8Wwr;ky8Wwr%0x4===0x0;ky8Wwr++)peM8Tr=0x0,hdBJK8=hdBJK8.concat(qKVyAF(()=>{var ky8Wwr;peM8Tr++;if(peM8Tr===0x1){return[]}for(ky8Wwr=0x31;ky8Wwr;ky8Wwr--)hdBJK8.unshift(hdBJK8.pop());return[]})());for(qpa_D9=qpa_D9;qpa_D9;qpa_D9--)hdBJK8.unshift(hdBJK8.pop());return hdBJK8},0x1)([';1|"bRN!sKo#;9~Gpx*YY$g$o=','Vx2w','V2)V','RU0.?bW*31$PdfOIB(h+[/vdqvf1I3sLFURBmb8bJ','{=H13','>K"KT','?mP|R`%','ScOa8','U(Y!+t"@','qmP|3t@K~?KKb$We#UW.','c=51^#&SC[y`x','qm]/.b2ddN])qWr9n{E','=m4/0CFo%!','Fm]/a|B@','Pa4/rC%','32_+OCpz}r','^2d.2c!8Q7enX$','D6H1bb%','(27c;:~DJ','e2_+|bY&R8','+U3/S','FU`cS','W9^C*uo@C?','y9=CUK/Fs~"$NW,^n9H1zb%','b6`csPzS/vQfx','c=51^#9@','mmPVA','(2r|6thFJ','$$5|+{6z}r','$$5|+{VucYW`x','$$5|+{>x','e2awA','ME0.(','#a3/d:MFJ','jUa/~|S@','H}f!F{<zJ','|~r||bY&R8','yJt+<uB@','/aa/l*%','#af!^*%','c+kn1zD','EoMCQR$>wtV','TNh+Xzr@','~!L+lzh@','TNh+Xzpzs[1k,3?^=x','7Er|Q{#x','ba`cQ','~[awD,udc8U','Np75O2RNwhoQS','nvF8:znS','*|gXj}`G','nvF8:zUS','1V3jB0eG','Fm]/tCI@','se;8n4yG','Fm]/tC,FM[ph6Wo','|6L+9zP:_Y?azmH9.x','AML+/{F52?])lj59jx','ncIA;n%','ncvQ~|:SC?','ON0.','MEz!','@mkCMi)Sk','@mkC9co@k','AoVwN~vG','f}s|$M8x','BcWCKMdd@U&:cL)Il=G!Q{hhBvnzom59zEk5o','V:#>Lzcq.n=Eg@C8DaHA:C7UxM/','!>Oc/z)&;?S','Y`Y>]19z<cU','t62fv:$FBMnC;{{Z<r+><C[F)c!Dz$o^@2$V','jac58[+84YQ[x','@$e/e`a8%0L5|MeZ3cYJRe{A@8zvx','LUa|^cd##vjJ=L~?_{#5_5LFeYU|#<.','{=c55Ha#6!A,P4%Ffc4w[HqzHcqGOZ~=u[iAHuMiV','xqwce#YJPU>)x','`;]Vy<PiIY?u^4_9>r+$*y{x','fGby=pfx','wiOv>T9I','1]}8:j#O','JJZ^]F5','L0h7i','/W<8a4(H','5Wa1','i|fpccs^zS%FHC','Hl}U$','MkBdh>)}','UWH!&<F}','~kZ_','(R$?5','<E,!3','=mr|tb(@','RU0.?bW*(wriDLm^hoc{Ftf&k?(i|zWe1=Q|BDH&iw0CTz3?2[93Aez6>cW|Wuu8EP?c0*01%0u/}dx}_{^Ff6#vBM_az{;(U=./iHek>!T_|I3??cR+t,Wuwi1ks#=et`>a]1<:/qmPt@:^>,Wnr','Sm0./tq@','k2Ak0','8mawQ{e8k','*}Y!/{HSpkizqWo','khz!d:`k27[)"4FR}2Y!','Z2F+F',',Ua/~|S@','EqW.','(2Y!/{HSk','N!yhTl_j','aE]/K_J&?vn5@V','|6K+i|B@','aWo~bR{NX+N#;9j','Ha,!','*Ed.o]+b,q6fx','n(Dw',',iL}%=0j[=fDVk',';1|"{e)bN(fDaAgvux','=m4/0C%',']cH1Q',',iHYY$.l=QfDQq&B9x']);tVylx3=x5b3p0((...ky8Wwr)=>{var qpa_D9=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr>0xc4?ky8Wwr+0xa:ky8Wwr>0x5d?ky8Wwr>0xc4?ky8Wwr+0x51:ky8Wwr-0x5e:ky8Wwr-0x47]},0x1);hdBJK8(ky8Wwr.length=qpa_D9(0x66),ky8Wwr[cgxqlpU(0x43)]=cgxqlpU(0x47));if(typeof ky8Wwr[0x3]===qpa_D9(0x68)){var L4gf8Aa=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr<0x22?ky8Wwr+0x5a:ky8Wwr>0x89?ky8Wwr+0x18:ky8Wwr<0x89?ky8Wwr-0x23:ky8Wwr-0x3c]},0x1);ky8Wwr[ky8Wwr[ky8Wwr[cgxqlpU(0x43)]+L4gf8Aa(0x24)]-cgxqlpU(0x45)]=_4TwLdf}ky8Wwr[qpa_D9(0x65)]=ky8Wwr[qpa_D9(0x6c)];if(typeof ky8Wwr[ky8Wwr[cgxqlpU(0x43)]-0x54]==='undefined'){ky8Wwr[ky8Wwr[0x97]-0x54]=jz8HA0}if(ky8Wwr[0x0]!==ky8Wwr[ky8Wwr[cgxqlpU(0x43)]-qpa_D9(0x63)]){var qbSmdqm=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr>0x19?ky8Wwr-0x44:ky8Wwr<-0x4e?ky8Wwr-0x49:ky8Wwr<0x19?ky8Wwr+0x4d:ky8Wwr-0x32]},0x1);return ky8Wwr[cgxqlpU(0x49)][ky8Wwr[0x0]]||(ky8Wwr[0x4][ky8Wwr[qbSmdqm(-0x4a)]]=ky8Wwr[ky8Wwr[ky8Wwr[0x97]+qbSmdqm(-0x4c)]-cgxqlpU(0x45)](ScFn30P[ky8Wwr[cgxqlpU(0x46)]]))}if(ky8Wwr[0x2b]&&ky8Wwr[0x3]!==_4TwLdf){var tm5IU6=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr>0x54?ky8Wwr<0x54?ky8Wwr-0xf:ky8Wwr>0xbb?ky8Wwr-0x23:ky8Wwr-0x55:ky8Wwr+0x4a]},0x1);tVylx3=_4TwLdf;return tVylx3(ky8Wwr[ky8Wwr[cgxqlpU(0x43)]-cgxqlpU(0x47)],-(ky8Wwr[0x97]-qpa_D9(0x63)),ky8Wwr[0x2b],ky8Wwr[ky8Wwr[qpa_D9(0x5e)]-cgxqlpU(0x45)],ky8Wwr[tm5IU6(0x5b)])}if(ky8Wwr[0x1]){var zIbRU01=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr<0xb?ky8Wwr>0xb?ky8Wwr-0x1a:ky8Wwr<-0x5c?ky8Wwr+0x5a:ky8Wwr+0x5b:ky8Wwr-0x44]},0x1);[ky8Wwr[cgxqlpU(0x49)],ky8Wwr[0x1]]=[ky8Wwr[cgxqlpU(0x50)](ky8Wwr[zIbRU01(-0x55)]),ky8Wwr[0x0]||ky8Wwr[ky8Wwr[cgxqlpU(0x43)]-qpa_D9(0xa8)]];return tVylx3(ky8Wwr[cgxqlpU(0x46)],ky8Wwr[ky8Wwr[ky8Wwr[zIbRU01(-0x5b)]+cgxqlpU(0x44)]-(ky8Wwr[0x97]-0x4)],ky8Wwr[ky8Wwr[0x97]-0x2d])}if(ky8Wwr[ky8Wwr[qpa_D9(0x5e)]-(ky8Wwr[0x97]-0x2b)]==ky8Wwr[0x0]){var Wvb0KO=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr>0xf?ky8Wwr+0x3f:ky8Wwr+0x57]},0x1);return ky8Wwr[0x1][jz8HA0[ky8Wwr[Wvb0KO(-0x50)]]]=tVylx3(ky8Wwr[qpa_D9(0x61)],ky8Wwr[0x1])}},cgxqlpU(0x4b));function AliYSE(){return globalThis}function S7LYbP1(){return global}function LG6yCKW(){return window}function YuMrBj(){return new Function('return this')()}function tRI8d8(ky8Wwr=[AliYSE,S7LYbP1,LG6yCKW,YuMrBj],qpa_D9,tVylx3=[],L4gf8Aa,qbSmdqm){qpa_D9=qpa_D9;try{hdBJK8(qpa_D9=Object,tVylx3.push(''.__proto__.constructor.name))}catch(e){}cK7pa3:for(L4gf8Aa=cgxqlpU(0x46);L4gf8Aa<ky8Wwr[cgxqlpU(0x4c)];L4gf8Aa++)try{var tm5IU6=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr<0x2e?ky8Wwr+0x38:ky8Wwr-0x35]},0x1);qpa_D9=ky8Wwr[L4gf8Aa]();for(qbSmdqm=0x0;qbSmdqm<tVylx3[tm5IU6(-0x2f)];qbSmdqm++)if(typeof qpa_D9[tVylx3[qbSmdqm]]===cgxqlpU(0x4d)){continue cK7pa3}return qpa_D9}catch(e){}return qpa_D9||this}hdBJK8(L4gf8Aa=tRI8d8()||{},qbSmdqm=L4gf8Aa.TextDecoder,tm5IU6=L4gf8Aa.Uint8Array,zIbRU01=L4gf8Aa.Buffer,Wvb0KO=L4gf8Aa.String||String,nACzerq=L4gf8Aa.Array||Array,IzSRDV5=qKVyAF(()=>{var ky8Wwr=new nACzerq(0x80),qpa_D9,tVylx3;hdBJK8(qpa_D9=Wvb0KO.fromCodePoint||Wvb0KO.fromCharCode,tVylx3=[]);return qKVyAF(L4gf8Aa=>{var qbSmdqm,tm5IU6;function zIbRU01(L4gf8Aa){return peM8Tr[L4gf8Aa>0x54?L4gf8Aa>0xbb?L4gf8Aa-0x55:L4gf8Aa>0x54?L4gf8Aa>0xbb?L4gf8Aa+0x3f:L4gf8Aa-0x55:L4gf8Aa-0x32:L4gf8Aa-0x55]}var nACzerq,IzSRDV5;hdBJK8(qbSmdqm=L4gf8Aa.length,tVylx3[zIbRU01(0x5e)]=zIbRU01(0x58));for(tm5IU6=0x0;tm5IU6<qbSmdqm;){IzSRDV5=L4gf8Aa[tm5IU6++];if(IzSRDV5<=cgxqlpU(0x52)){nACzerq=IzSRDV5}else{if(IzSRDV5<=0xdf){nACzerq=(IzSRDV5&zIbRU01(0x86))<<cgxqlpU(0x4e)|L4gf8Aa[tm5IU6++]&zIbRU01(0x56)}else{if(IzSRDV5<=0xef){nACzerq=(IzSRDV5&0xf)<<0xc|(L4gf8Aa[tm5IU6++]&0x3f)<<0x6|L4gf8Aa[tm5IU6++]&0x3f}else{if(Wvb0KO.fromCodePoint){var pBkKE5=qKVyAF(L4gf8Aa=>{return peM8Tr[L4gf8Aa>0x41?L4gf8Aa>0x41?L4gf8Aa-0x42:L4gf8Aa-0x4f:L4gf8Aa+0x34]},0x1);nACzerq=(IzSRDV5&0x7)<<zIbRU01(0x84)|(L4gf8Aa[tm5IU6++]&zIbRU01(0x56))<<0xc|(L4gf8Aa[tm5IU6++]&0x3f)<<pBkKE5(0x4d)|L4gf8Aa[tm5IU6++]&pBkKE5(0x43)}else{hdBJK8(nACzerq=0x3f,tm5IU6+=0x3)}}}}tVylx3.push(ky8Wwr[nACzerq]||(ky8Wwr[nACzerq]=qpa_D9(nACzerq)))}return tVylx3.join('')},0x1)})(),x5b3p0(Ob7Q8o6,cgxqlpU(0x4f)));function Ob7Q8o6(...ky8Wwr){var qpa_D9=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr>-0x31?ky8Wwr+0x30:ky8Wwr-0x60]},0x1);hdBJK8(ky8Wwr[cgxqlpU(0x4c)]=cgxqlpU(0x4f),ky8Wwr[0xe4]=-0x20);return typeof qbSmdqm!==qpa_D9(-0x26)&&qbSmdqm?new qbSmdqm().decode(new tm5IU6(ky8Wwr[0x0])):typeof zIbRU01!=='undefined'&&zIbRU01?zIbRU01.from(ky8Wwr[ky8Wwr[0xe4]+0x20]).toString('utf-8'):IzSRDV5(ky8Wwr[0x0])}hdBJK8(pBkKE5=[tVylx3(0x70)],trDBow=tVylx3(0x29),J5ukjhf=tVylx3(0x29),aerSiBn=tVylx3(0xf),aIXLogg={[cgxqlpU(0x6b)]:tVylx3(cgxqlpU(0x59)),FnUhGV:tVylx3(0x28)},p4135y=qKVyAF((ky8Wwr,qpa_D9,tVylx3)=>{hdBJK8(ky8Wwr=x5b3p0((...qpa_D9)=>{var tVylx3=qKVyAF(qpa_D9=>{return peM8Tr[qpa_D9>0x5d?qpa_D9+0x10:qpa_D9<-0xa?qpa_D9-0x5c:qpa_D9>0x5d?qpa_D9+0x3f:qpa_D9<-0xa?qpa_D9+0x41:qpa_D9+0x9]},0x1);hdBJK8(qpa_D9[cgxqlpU(0x4c)]=tVylx3(-0x1),qpa_D9.gJ612BR=-0x7d);if(typeof qpa_D9[0x3]===cgxqlpU(0x4d)){var qbSmdqm=qKVyAF(qpa_D9=>{return peM8Tr[qpa_D9>0x8e?qpa_D9-0x24:qpa_D9>0x27?qpa_D9-0x28:qpa_D9-0x46]},0x1);qpa_D9[qbSmdqm(0x35)]=L4gf8Aa}if(typeof qpa_D9[cgxqlpU(0x49)]===tVylx3(0x1)){qpa_D9[0x4]=jz8HA0}if(qpa_D9[tVylx3(0x5)]==qpa_D9[tVylx3(-0x6)]){return qpa_D9[0x1][jz8HA0[qpa_D9[qpa_D9[tVylx3(0x8)]+cgxqlpU(0x52)]]]=ky8Wwr(qpa_D9[qpa_D9.gJ612BR+0x7d],qpa_D9[0x1])}if(qpa_D9[qpa_D9.gJ612BR+tVylx3(0x7)]!==qpa_D9[0x1]){var tm5IU6=qKVyAF(qpa_D9=>{return peM8Tr[qpa_D9>-0x26?qpa_D9>0x41?qpa_D9+0x37:qpa_D9+0x25:qpa_D9-0x53]},0x1);return qpa_D9[cgxqlpU(0x49)][qpa_D9[qpa_D9.gJ612BR+tVylx3(0x7)]]||(qpa_D9[tVylx3(-0x3)][qpa_D9[qpa_D9.gJ612BR+(qpa_D9.gJ612BR+0xfa)]]=qpa_D9[tm5IU6(-0x18)](ScFn30P[qpa_D9[cgxqlpU(0x46)]]))}if(qpa_D9[cgxqlpU(0x51)]&&qpa_D9[qpa_D9.gJ612BR+0x80]!==L4gf8Aa){var zIbRU01=qKVyAF(qpa_D9=>{return peM8Tr[qpa_D9>0x84?qpa_D9-0x41:qpa_D9<0x1d?qpa_D9+0x37:qpa_D9-0x1e]},0x1);ky8Wwr=L4gf8Aa;return ky8Wwr(qpa_D9[0x0],-tVylx3(0x3),qpa_D9[0x2],qpa_D9[qpa_D9[tVylx3(0x8)]-(qpa_D9[zIbRU01(0x2f)]-0x3)],qpa_D9[0x4])}if(qpa_D9[0x2]==qpa_D9[0x3]){var Wvb0KO=qKVyAF(qpa_D9=>{return peM8Tr[qpa_D9>-0x2d?qpa_D9+0x2c:qpa_D9+0x29]},0x1);return qpa_D9[cgxqlpU(0x4f)]?qpa_D9[0x0][qpa_D9[qpa_D9[Wvb0KO(-0x1b)]+0x81][qpa_D9[qpa_D9.gJ612BR+0x7e]]]:jz8HA0[qpa_D9[qpa_D9.gJ612BR+0x7d]]||(qpa_D9[tVylx3(0x5)]=qpa_D9[Wvb0KO(-0x26)][qpa_D9[cgxqlpU(0x46)]]||qpa_D9[0x3],jz8HA0[qpa_D9[0x0]]=qpa_D9[cgxqlpU(0x51)](ScFn30P[qpa_D9[Wvb0KO(-0x29)]]))}if(qpa_D9[0x3]===ky8Wwr){L4gf8Aa=qpa_D9[0x1];return L4gf8Aa(qpa_D9[0x2])}if(qpa_D9[0x3]===void 0x0){ky8Wwr=qpa_D9[cgxqlpU(0x49)]}},0x5),qpa_D9=ky8Wwr(0x1),tVylx3={MgihdD:ky8Wwr(0x0),WERLZL:0x49,Ait8En:[],zAFqCLe:qKVyAF((ky8Wwr=qpa_D9)=>{var tVylx3=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr>0x59?ky8Wwr-0x5a:ky8Wwr+0x1]},0x1);if(!p4135y.Ait8En[tVylx3(0x5d)]){p4135y.Ait8En.push(0x13)}return p4135y.Ait8En[ky8Wwr]}),AtjEi5K:[],RnsnWe:qKVyAF((qpa_D9=ky8Wwr(cgxqlpU(0x4f)))=>{if(!p4135y.AtjEi5K[0x0]){p4135y.AtjEi5K.push(-0x4b)}return p4135y.AtjEi5K[qpa_D9]}),hJw79Fb:cgxqlpU(0x9c),U57wAI:cgxqlpU(0x93)});return tVylx3;function L4gf8Aa(ky8Wwr,qpa_D9='YxIl+]suMWn$XN|iKSz4O!}wZB9#?.g<t)eER/~@C[1=dJa0Q^rGAfh:7PH62p_`{83;%mqVbyjc(v>*FTL&DU5,ok"',tVylx3,L4gf8Aa,qbSmdqm=[],tm5IU6=0x0,zIbRU01,Wvb0KO,nACzerq=0x0,IzSRDV5){var pBkKE5=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr>0xb9?ky8Wwr+0x32:ky8Wwr<0xb9?ky8Wwr-0x53:ky8Wwr-0x2c]},0x1);hdBJK8(tVylx3=''+(ky8Wwr||''),L4gf8Aa=tVylx3.length,zIbRU01=cgxqlpU(0x46),Wvb0KO=-pBkKE5(0x5f));for(nACzerq=nACzerq;nACzerq<L4gf8Aa;nACzerq++){IzSRDV5=qpa_D9.indexOf(tVylx3[nACzerq]);if(IzSRDV5===-0x1){continue}if(Wvb0KO<0x0){Wvb0KO=IzSRDV5}else{var trDBow=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr<0x5d?ky8Wwr>-0xa?ky8Wwr>0x5d?ky8Wwr+0x23:ky8Wwr>0x5d?ky8Wwr-0x49:ky8Wwr+0x9:ky8Wwr-0x1:ky8Wwr+0x47]},0x1);hdBJK8(Wvb0KO+=IzSRDV5*pBkKE5(0x77),tm5IU6|=Wvb0KO<<zIbRU01,zIbRU01+=(Wvb0KO&0x1fff)>pBkKE5(0x57)?0xd:0xe);do{hdBJK8(qbSmdqm.push(tm5IU6&0xff),tm5IU6>>=0x8,zIbRU01-=trDBow(0xe))}while(zIbRU01>pBkKE5(0x70));Wvb0KO=-trDBow(0x3)}}if(Wvb0KO>-cgxqlpU(0x4f)){qbSmdqm.push((tm5IU6|Wvb0KO<<zIbRU01)&0xff)}return Ob7Q8o6(qbSmdqm)}},0x3)());var QZkO069,byPTOsp=function(ky8Wwr,qpa_D9){hdBJK8(ky8Wwr=x5b3p0((...qpa_D9)=>{var tVylx3=qKVyAF(qpa_D9=>{return peM8Tr[qpa_D9>-0xc?qpa_D9+0xb:qpa_D9-0x6]},0x1);hdBJK8(qpa_D9.length=0x5,qpa_D9[0xf7]=qpa_D9[tVylx3(0x2)]);if(typeof qpa_D9[0xf7]===tVylx3(-0x1)){qpa_D9[tVylx3(0x7)]=Wvb0KO}if(typeof qpa_D9[0x4]===cgxqlpU(0x4d)){qpa_D9[tVylx3(-0x5)]=jz8HA0}if(qpa_D9[0x2]==qpa_D9[0x0]){var L4gf8Aa=qKVyAF(qpa_D9=>{return peM8Tr[qpa_D9<0x1?qpa_D9-0x25:qpa_D9>0x1?qpa_D9-0x2:qpa_D9-0x52]},0x1);return qpa_D9[0x1][jz8HA0[qpa_D9[L4gf8Aa(0x10)]]]=ky8Wwr(qpa_D9[0x0],qpa_D9[0x1])}if(qpa_D9[cgxqlpU(0x4f)]){var qbSmdqm=qKVyAF(qpa_D9=>{return peM8Tr[qpa_D9<0x40?qpa_D9+0x2e:qpa_D9<0x40?qpa_D9+0x51:qpa_D9-0x41]},0x1);[qpa_D9[0x4],qpa_D9[tVylx3(0x1)]]=[qpa_D9[0xf7](qpa_D9[cgxqlpU(0x49)]),qpa_D9[qbSmdqm(0x44)]||qpa_D9[0x2]];return ky8Wwr(qpa_D9[tVylx3(-0x8)],qpa_D9[0x4],qpa_D9[cgxqlpU(0x51)])}if(qpa_D9[cgxqlpU(0x55)]===ky8Wwr){var tm5IU6=qKVyAF(qpa_D9=>{return peM8Tr[qpa_D9<0xc9?qpa_D9<0xc9?qpa_D9-0x63:qpa_D9+0x16:qpa_D9+0xf]},0x1);Wvb0KO=qpa_D9[0x1];return Wvb0KO(qpa_D9[tm5IU6(0x71)])}if(qpa_D9[tVylx3(-0x8)]!==qpa_D9[tVylx3(0x1)]){return qpa_D9[0x4][qpa_D9[tVylx3(-0x8)]]||(qpa_D9[0x4][qpa_D9[tVylx3(-0x8)]]=qpa_D9[tVylx3(0x7)](ScFn30P[qpa_D9[tVylx3(-0x8)]]))}},0x5),qpa_D9={CjXUNM:ky8Wwr(0xc)});function tVylx3(){return globalThis}function L4gf8Aa(){return global}function qbSmdqm(){return window}function tm5IU6(...ky8Wwr){var qpa_D9;function tVylx3(ky8Wwr){return peM8Tr[ky8Wwr<-0x5c?ky8Wwr-0x26:ky8Wwr+0x5b]}hdBJK8(ky8Wwr[cgxqlpU(0x4c)]=cgxqlpU(0x46),ky8Wwr[cgxqlpU(0x56)]=-0x3c,qpa_D9=(ky8Wwr,tVylx3,L4gf8Aa,tm5IU6,zIbRU01)=>{if(typeof tm5IU6==='undefined'){tm5IU6=qbSmdqm}if(typeof zIbRU01===cgxqlpU(0x4d)){zIbRU01=jz8HA0}if(tVylx3){[zIbRU01,tVylx3]=[tm5IU6(zIbRU01),ky8Wwr||L4gf8Aa];return qpa_D9(ky8Wwr,zIbRU01,L4gf8Aa)}if(tm5IU6===qpa_D9){qbSmdqm=tVylx3;return qbSmdqm(L4gf8Aa)}if(tm5IU6===void 0x0){qpa_D9=zIbRU01}if(ky8Wwr!==tVylx3){return zIbRU01[ky8Wwr]||(zIbRU01[ky8Wwr]=tm5IU6(ScFn30P[ky8Wwr]))}if(L4gf8Aa==ky8Wwr){return tVylx3[jz8HA0[L4gf8Aa]]=qpa_D9(ky8Wwr,tVylx3)}if(L4gf8Aa==tm5IU6){return tVylx3?ky8Wwr[zIbRU01[tVylx3]]:jz8HA0[ky8Wwr]||(L4gf8Aa=zIbRU01[ky8Wwr]||tm5IU6,jz8HA0[ky8Wwr]=L4gf8Aa(ScFn30P[ky8Wwr]))}},ky8Wwr[cgxqlpU(0x57)]={[tVylx3(-0x46)]:qpa_D9(cgxqlpU(0x51))});if(ky8Wwr[tVylx3(-0x48)]>-0x12){return ky8Wwr[ky8Wwr[cgxqlpU(0x56)]-0xa3]}else{var L4gf8Aa=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr<0x42?ky8Wwr>-0x25?ky8Wwr+0x24:ky8Wwr-0x24:ky8Wwr-0x29]},0x1);return new Function(ky8Wwr[cgxqlpU(0x57)][L4gf8Aa(-0xf)]+qpa_D9(tVylx3(-0x4e)))()}function qbSmdqm(ky8Wwr,qpa_D9='5EOtMqDSCbWnfyP]vA$6VH{Uw<khX1>^8;`+am#!=Id0G:(N2YTpg7*sJ)"934Z/zQc}_?RuBi&@e,oLjFx.K~%|lr[',L4gf8Aa,qbSmdqm,tm5IU6=[],zIbRU01,Wvb0KO=0x0,nACzerq,IzSRDV5=0x0,pBkKE5){hdBJK8(L4gf8Aa=''+(ky8Wwr||''),qbSmdqm=L4gf8Aa.length,zIbRU01=tVylx3(-0x58),nACzerq=-tVylx3(-0x4f));for(IzSRDV5=IzSRDV5;IzSRDV5<qbSmdqm;IzSRDV5++){var trDBow=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr<0x18?ky8Wwr>-0x4f?ky8Wwr<-0x4f?ky8Wwr-0x61:ky8Wwr>0x18?ky8Wwr-0xa:ky8Wwr+0x4e:ky8Wwr-0x1a:ky8Wwr-0x45]},0x1);pBkKE5=qpa_D9.indexOf(L4gf8Aa[IzSRDV5]);if(pBkKE5===-trDBow(-0x42)){continue}if(nACzerq<cgxqlpU(0x46)){nACzerq=pBkKE5}else{hdBJK8(nACzerq+=pBkKE5*0x5b,zIbRU01|=nACzerq<<Wvb0KO,Wvb0KO+=(nACzerq&trDBow(-0x33))>0x58?tVylx3(-0x45):0xe);do{hdBJK8(tm5IU6.push(zIbRU01&0xff),zIbRU01>>=0x8,Wvb0KO-=cgxqlpU(0x5a))}while(Wvb0KO>0x7);nACzerq=-tVylx3(-0x4f)}}if(nACzerq>-tVylx3(-0x4f)){tm5IU6.push((zIbRU01|nACzerq<<Wvb0KO)&cgxqlpU(0x63))}return Ob7Q8o6(tm5IU6)}}function zIbRU01(ky8Wwr=[tVylx3,L4gf8Aa,qbSmdqm,tm5IU6],qpa_D9,zIbRU01,Wvb0KO,nACzerq=[],IzSRDV5,pBkKE5=0x0,trDBow,J5ukjhf){hdBJK8(qpa_D9=(ky8Wwr,zIbRU01,Wvb0KO,nACzerq,IzSRDV5)=>{var pBkKE5=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr<0x82?ky8Wwr>0x82?ky8Wwr-0xb:ky8Wwr-0x1c:ky8Wwr+0x17]},0x1);if(typeof nACzerq==='undefined'){nACzerq=aIXLogg}if(typeof IzSRDV5===pBkKE5(0x26)){IzSRDV5=jz8HA0}if(Wvb0KO==ky8Wwr){return zIbRU01[jz8HA0[Wvb0KO]]=qpa_D9(ky8Wwr,zIbRU01)}if(zIbRU01){[IzSRDV5,zIbRU01]=[nACzerq(IzSRDV5),ky8Wwr||Wvb0KO];return qpa_D9(ky8Wwr,IzSRDV5,Wvb0KO)}if(Wvb0KO&&nACzerq!==aIXLogg){qpa_D9=aIXLogg;return qpa_D9(ky8Wwr,-pBkKE5(0x28),Wvb0KO,nACzerq,IzSRDV5)}if(nACzerq===void 0x0){qpa_D9=IzSRDV5}if(ky8Wwr!==zIbRU01){return IzSRDV5[ky8Wwr]||(IzSRDV5[ky8Wwr]=nACzerq(ScFn30P[ky8Wwr]))}},zIbRU01=qpa_D9.call(cgxqlpU(0x5b),0x9),Wvb0KO=Wvb0KO);try{hdBJK8(IzSRDV5=(ky8Wwr,qpa_D9,zIbRU01,Wvb0KO,nACzerq)=>{var pBkKE5=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr<-0x43?ky8Wwr-0xc:ky8Wwr<-0x43?ky8Wwr+0x23:ky8Wwr+0x42]},0x1);if(typeof Wvb0KO===pBkKE5(-0x38)){Wvb0KO=aerSiBn}if(typeof nACzerq==='undefined'){nACzerq=jz8HA0}if(Wvb0KO===pBkKE5(-0x2a)){IzSRDV5=nACzerq}if(qpa_D9){[nACzerq,qpa_D9]=[Wvb0KO(nACzerq),ky8Wwr||zIbRU01];return IzSRDV5(ky8Wwr,nACzerq,zIbRU01)}if(Wvb0KO===IzSRDV5){aerSiBn=qpa_D9;return aerSiBn(zIbRU01)}if(zIbRU01&&Wvb0KO!==aerSiBn){IzSRDV5=aerSiBn;return IzSRDV5(ky8Wwr,-pBkKE5(-0x36),zIbRU01,Wvb0KO,nACzerq)}if(ky8Wwr!==qpa_D9){return nACzerq[ky8Wwr]||(nACzerq[ky8Wwr]=Wvb0KO(ScFn30P[ky8Wwr]))}},Wvb0KO=Object,nACzerq[IzSRDV5.apply(cgxqlpU(0x5b),[0x4])](''[IzSRDV5(0x5)+IzSRDV5(0x6)][IzSRDV5(0x7)][IzSRDV5(0x8)]),x5b3p0(aerSiBn,0x1));function aerSiBn(...ky8Wwr){var qpa_D9;function zIbRU01(ky8Wwr){return peM8Tr[ky8Wwr<0xbd?ky8Wwr>0xbd?ky8Wwr-0x63:ky8Wwr>0xbd?ky8Wwr-0x23:ky8Wwr-0x57:ky8Wwr+0x5c]}hdBJK8(ky8Wwr.length=cgxqlpU(0x4f),ky8Wwr[cgxqlpU(0x5c)]=0x80,ky8Wwr.ffyjna='~EHtlCTj1"7}9hJu&SvGf]M/o$i`L2^yU@anq>O5Qx3|zreD*P(6?B8R={sI0A)dk;FY%gV[+bXN:p4K<c.w,!m_W#Z',ky8Wwr.flUpJnm=ky8Wwr[ky8Wwr.uhq1tQc-(ky8Wwr.uhq1tQc-cgxqlpU(0x46))],ky8Wwr[zIbRU01(0x65)]=''+(ky8Wwr.flUpJnm||''),ky8Wwr.DSQFRfK=ky8Wwr[0x2].length,ky8Wwr[cgxqlpU(0x5f)]=[],ky8Wwr[zIbRU01(0x5f)]=0x0,ky8Wwr.yb6k3L=cgxqlpU(0x46),ky8Wwr.fuiRvn9=-0x1);for(qpa_D9=cgxqlpU(0x46);qpa_D9<ky8Wwr.DSQFRfK;qpa_D9++){ky8Wwr[ky8Wwr.uhq1tQc-cgxqlpU(0xa4)]=ky8Wwr.ffyjna.indexOf(ky8Wwr[0x2][qpa_D9]);if(ky8Wwr[0x9]===-zIbRU01(0x63)){continue}if(ky8Wwr.fuiRvn9<zIbRU01(0x5a)){var Wvb0KO=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr>0x9e?ky8Wwr+0x4c:ky8Wwr<0x9e?ky8Wwr-0x38:ky8Wwr+0x22]},0x1);ky8Wwr[zIbRU01(0x71)]=ky8Wwr[ky8Wwr[Wvb0KO(0x51)]-0x77]}else{hdBJK8(ky8Wwr.fuiRvn9+=ky8Wwr[ky8Wwr[cgxqlpU(0x5c)]-0x77]*(ky8Wwr.uhq1tQc-0x25),ky8Wwr[0x5]|=ky8Wwr.fuiRvn9<<ky8Wwr.yb6k3L,ky8Wwr.yb6k3L+=(ky8Wwr[zIbRU01(0x71)]&zIbRU01(0x72))>cgxqlpU(0x47)?cgxqlpU(0x59):0xe);do{hdBJK8(ky8Wwr[cgxqlpU(0x5f)].push(ky8Wwr[0x5]&0xff),ky8Wwr[0x5]>>=cgxqlpU(0x5a),ky8Wwr.yb6k3L-=0x8)}while(ky8Wwr.yb6k3L>0x7);ky8Wwr[cgxqlpU(0x5d)]=-(ky8Wwr.uhq1tQc-zIbRU01(0x66))}}if(ky8Wwr.fuiRvn9>-cgxqlpU(0x4f)){var nACzerq=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr>0x35?ky8Wwr+0x1e:ky8Wwr>0x35?ky8Wwr-0x4c:ky8Wwr<-0x32?ky8Wwr+0x46:ky8Wwr+0x31]},0x1);ky8Wwr.SoL9Lm.push((ky8Wwr[ky8Wwr[nACzerq(-0x18)]-0x7b]|ky8Wwr.fuiRvn9<<ky8Wwr.yb6k3L)&ky8Wwr.uhq1tQc+0x7f)}return ky8Wwr.uhq1tQc>0xd2?ky8Wwr[ky8Wwr.uhq1tQc-0xf]:Ob7Q8o6(ky8Wwr.SoL9Lm)}}catch(e){}ZEDgWMo:for(pBkKE5=pBkKE5;pBkKE5<ky8Wwr[zIbRU01];pBkKE5++)try{hdBJK8(trDBow=[qpa_D9(0x9)],Wvb0KO=ky8Wwr[pBkKE5]());for(J5ukjhf=cgxqlpU(0x46);J5ukjhf<nACzerq[trDBow[0x0]];J5ukjhf++)if(typeof Wvb0KO[nACzerq[J5ukjhf]]===qpa_D9.call(void 0x0,0xa)+qpa_D9.call(cgxqlpU(0x5b),0xb)&&p4135y.WERLZL>-cgxqlpU(0x8e)){continue ZEDgWMo}return Wvb0KO}catch(e){}return Wvb0KO||this;function aIXLogg(...ky8Wwr){var qpa_D9;function zIbRU01(ky8Wwr){return peM8Tr[ky8Wwr<0x90?ky8Wwr-0x2a:ky8Wwr-0x4b]}hdBJK8(ky8Wwr.length=cgxqlpU(0x4f),ky8Wwr[0xbe]=ky8Wwr[0x5],ky8Wwr[0x1]='u&}$v{=%_3/]9OJkAQRtBmeMz~)wFnH!f5C`?YIXWx;c0+rKpNT[,7"jD1sylULV(b8#iPS6<2|Zgdh4G>:oa*@.^Eq',ky8Wwr[0x2]=''+(ky8Wwr[cgxqlpU(0x46)]||''),ky8Wwr[0x3]=ky8Wwr[cgxqlpU(0x51)].length,ky8Wwr[0x4]=[],ky8Wwr[zIbRU01(0x49)]=cgxqlpU(0x46),ky8Wwr[cgxqlpU(0x64)]=0x0,ky8Wwr[zIbRU01(0x47)]=-cgxqlpU(0x4f));for(qpa_D9=zIbRU01(0x2d);qpa_D9<ky8Wwr[0x3];qpa_D9++){ky8Wwr[zIbRU01(0x48)]=ky8Wwr[0x1].indexOf(ky8Wwr[cgxqlpU(0x51)][qpa_D9]);if(ky8Wwr[cgxqlpU(0x61)]===-zIbRU01(0x36)){continue}if(ky8Wwr[0x7]<0x0){ky8Wwr[0x7]=ky8Wwr[cgxqlpU(0x61)]}else{var Wvb0KO=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr>-0x29?ky8Wwr+0x28:ky8Wwr-0x41]},0x1);hdBJK8(ky8Wwr[cgxqlpU(0x60)]+=ky8Wwr[0x9]*0x5b,ky8Wwr[zIbRU01(0x49)]|=ky8Wwr[0x7]<<ky8Wwr.CsJPj1,ky8Wwr.CsJPj1+=(ky8Wwr[zIbRU01(0x47)]&Wvb0KO(-0xd))>0x58?0xd:0xe);do{hdBJK8(ky8Wwr[0x4].push(ky8Wwr[0xbe]&cgxqlpU(0x63)),ky8Wwr[zIbRU01(0x49)]>>=0x8,ky8Wwr.CsJPj1-=0x8)}while(ky8Wwr.CsJPj1>0x7);ky8Wwr[0x7]=-zIbRU01(0x36)}}if(ky8Wwr[0x7]>-0x1){var nACzerq=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr<0x6b?ky8Wwr<0x4?ky8Wwr+0x23:ky8Wwr-0x5:ky8Wwr-0x17]},0x1);ky8Wwr[zIbRU01(0x30)].push((ky8Wwr[0xbe]|ky8Wwr[nACzerq(0x22)]<<ky8Wwr[zIbRU01(0x4b)])&0xff)}return Ob7Q8o6(ky8Wwr[zIbRU01(0x30)])}}return QZkO069=zIbRU01[qpa_D9.CjXUNM](this);function Wvb0KO(...ky8Wwr){var qpa_D9;function tVylx3(ky8Wwr){return peM8Tr[ky8Wwr>-0x5?ky8Wwr>-0x5?ky8Wwr>-0x5?ky8Wwr+0x4:ky8Wwr-0x4b:ky8Wwr+0x5:ky8Wwr-0x55]}hdBJK8(ky8Wwr.length=0x1,ky8Wwr.CIgbm4V=-0x87,ky8Wwr.DPQjL3='KLWRji#cu?DXQ&+PNOVmZ{Ub48}5y|!C/;n3^zF_<%~1Y9Go$)MvwE=*[@,B]a6IlxArsftphd0Sq`7J"H(.k2Tge>:',ky8Wwr[cgxqlpU(0x65)]=''+(ky8Wwr[cgxqlpU(0x46)]||''),ky8Wwr[cgxqlpU(0x50)]=ky8Wwr.ZMdsqx.length,ky8Wwr[tVylx3(0x2)]=[],ky8Wwr[tVylx3(0x22)]=0x0,ky8Wwr.O7q6okZ=0x0,ky8Wwr[0x7]=-tVylx3(0x8));for(qpa_D9=0x0;qpa_D9<ky8Wwr[ky8Wwr[tVylx3(0x21)]+0x8a];qpa_D9++){ky8Wwr[cgxqlpU(0x66)]=ky8Wwr.DPQjL3.indexOf(ky8Wwr[cgxqlpU(0x65)][qpa_D9]);if(ky8Wwr.SD9IM1===-tVylx3(0x8)){continue}if(ky8Wwr[tVylx3(0x19)]<0x0){ky8Wwr[0x7]=ky8Wwr.SD9IM1}else{var L4gf8Aa=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr>0x26?ky8Wwr-0x27:ky8Wwr-0x38]},0x1);hdBJK8(ky8Wwr[0x7]+=ky8Wwr[tVylx3(0x1f)]*L4gf8Aa(0x4b),ky8Wwr.ed_HrJ|=ky8Wwr[0x7]<<ky8Wwr[L4gf8Aa(0x4e)],ky8Wwr.O7q6okZ+=(ky8Wwr[0x7]&ky8Wwr[L4gf8Aa(0x4c)]+0x2086)>cgxqlpU(0x47)?0xd:0xe);do{hdBJK8(ky8Wwr[cgxqlpU(0x49)].push(ky8Wwr.ed_HrJ&0xff),ky8Wwr[tVylx3(0x22)]>>=tVylx3(0x13),ky8Wwr[cgxqlpU(0x6a)]-=ky8Wwr.CIgbm4V+0x8f)}while(ky8Wwr[tVylx3(0x23)]>L4gf8Aa(0x44));ky8Wwr[0x7]=-0x1}}if(ky8Wwr[0x7]>-0x1){var qbSmdqm=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr<0x87?ky8Wwr-0x21:ky8Wwr-0x30]},0x1);ky8Wwr[cgxqlpU(0x49)].push((ky8Wwr[qbSmdqm(0x47)]|ky8Wwr[qbSmdqm(0x3e)]<<ky8Wwr[cgxqlpU(0x6a)])&ky8Wwr.CIgbm4V+0x186)}return ky8Wwr[tVylx3(0x21)]>tVylx3(0x2)?ky8Wwr[tVylx3(0x2f)]:Ob7Q8o6(ky8Wwr[0x4])}}[aIXLogg[cgxqlpU(0x6b)]]();function WHFmjb4(...hdBJK8){var ky8Wwr=tVylx3(0xe);return hdBJK8[hdBJK8[ky8Wwr]-0x1]}x5b3p0(SA94Po,cgxqlpU(0x51));function SA94Po(...ky8Wwr){hdBJK8(ky8Wwr.length=cgxqlpU(0x51),ky8Wwr[cgxqlpU(0x84)]=-0x19);switch(QuKGh8){case cgxqlpU(0x46):return ky8Wwr[ky8Wwr[0x92]+0x19]+ky8Wwr[cgxqlpU(0x4f)]}}x5b3p0(o2vhPbc,cgxqlpU(0x4f));function o2vhPbc(...ky8Wwr){hdBJK8(ky8Wwr[cgxqlpU(0x4c)]=0x1,ky8Wwr.Gjexs8=ky8Wwr[0x0]);return WHFmjb4(ky8Wwr.Gjexs8=QuKGh8+(QuKGh8=ky8Wwr.Gjexs8,cgxqlpU(0x46)),ky8Wwr.Gjexs8)}QuKGh8=QuKGh8;const wc_Knq=aerSiBn;x5b3p0(Q82wxp,cgxqlpU(0x4f));function Q82wxp(...ky8Wwr){var qpa_D9;function L4gf8Aa(ky8Wwr){return peM8Tr[ky8Wwr<0x39?ky8Wwr>0x39?ky8Wwr-0x62:ky8Wwr<0x39?ky8Wwr+0x2d:ky8Wwr+0x1b:ky8Wwr-0x4f]}hdBJK8(ky8Wwr[cgxqlpU(0x4c)]=0x1,ky8Wwr.BXdyvR=ky8Wwr[0x0],qpa_D9=x5b3p0((...ky8Wwr)=>{var L4gf8Aa=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr>0x36?ky8Wwr<0x9d?ky8Wwr>0x9d?ky8Wwr-0x1c:ky8Wwr-0x37:ky8Wwr+0x3:ky8Wwr+0x32]},0x1);hdBJK8(ky8Wwr[cgxqlpU(0x4c)]=0x5,ky8Wwr[L4gf8Aa(0x60)]=ky8Wwr[L4gf8Aa(0x3a)]);if(typeof ky8Wwr[cgxqlpU(0x50)]==='undefined'){ky8Wwr[0x3]=qbSmdqm}if(typeof ky8Wwr[L4gf8Aa(0x3d)]==='undefined'){ky8Wwr[L4gf8Aa(0x3d)]=jz8HA0}if(ky8Wwr[cgxqlpU(0x6c)]!==ky8Wwr[0x1]){return ky8Wwr[cgxqlpU(0x49)][ky8Wwr.cPWpED]||(ky8Wwr[L4gf8Aa(0x3d)][ky8Wwr[cgxqlpU(0x6c)]]=ky8Wwr[L4gf8Aa(0x44)](ScFn30P[ky8Wwr.cPWpED]))}if(ky8Wwr[0x3]===void 0x0){qpa_D9=ky8Wwr[cgxqlpU(0x49)]}},cgxqlpU(0x4b)),ky8Wwr[L4gf8Aa(-0x3)]=ky8Wwr.b8_WAh,ky8Wwr[L4gf8Aa(-0x3)]=[tVylx3[cgxqlpU(0x6e)](void 0x0,[0x18]),qpa_D9(0x19)],ky8Wwr[L4gf8Aa(0x3)]=ky8Wwr[cgxqlpU(0x6d)],ky8Wwr.wUB0MNj=tVylx3(0x17),ky8Wwr.aUXNoi=ky8Wwr.BXdyvR,ky8Wwr[0x5]={[L4gf8Aa(0x0)]:tVylx3(0x10),[cgxqlpU(0x71)]:tVylx3[L4gf8Aa(-0x2)](void 0x0,[0x11])},ky8Wwr[L4gf8Aa(-0x1)]=ky8Wwr[0x5],yxvbDb_(-cgxqlpU(0x78))(wc_Knq,{[ky8Wwr[L4gf8Aa(-0x1)][L4gf8Aa(0x0)]]:ky8Wwr[0x3b][cgxqlpU(0x71)],[tVylx3(cgxqlpU(0x72))]:{[tVylx3(0x13)]:tVylx3(L4gf8Aa(0x33))},[tVylx3(0x15)]:yxvbDb_(-cgxqlpU(0x8b))[tVylx3.call(cgxqlpU(0x5b),0x16)+ky8Wwr.wUB0MNj]({[ky8Wwr[0x39][cgxqlpU(0x46)]]:ky8Wwr.aUXNoi,[ky8Wwr[cgxqlpU(0x73)][cgxqlpU(0x4f)]+'me']:tVylx3(0x1a)})}));function qbSmdqm(ky8Wwr,qpa_D9='uBjORJ7Cg~|W_)vK2Q8^rt&D;:YS}FpzE4<`q.0?cs6i]9Hm#Xbaoh!e,@%f>TdIn(3N+1G5"Vk${lL*[x=ZyUMPw/A',qbSmdqm,tVylx3,tm5IU6=[],zIbRU01=0x0,Wvb0KO=0x0,nACzerq,IzSRDV5,pBkKE5){var trDBow=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr<0x6e?ky8Wwr<0x6e?ky8Wwr-0x8:ky8Wwr+0x30:ky8Wwr-0x3e]},0x1);hdBJK8(qbSmdqm=''+(ky8Wwr||''),tVylx3=qbSmdqm.length,nACzerq=-L4gf8Aa(-0x21));for(IzSRDV5=trDBow(0xb);IzSRDV5<tVylx3;IzSRDV5++){pBkKE5=qpa_D9.indexOf(qbSmdqm[IzSRDV5]);if(pBkKE5===-0x1){continue}if(nACzerq<L4gf8Aa(-0x2a)){nACzerq=pBkKE5}else{hdBJK8(nACzerq+=pBkKE5*0x5b,zIbRU01|=nACzerq<<Wvb0KO,Wvb0KO+=(nACzerq&0x1fff)>0x58?0xd:0xe);do{hdBJK8(tm5IU6.push(zIbRU01&trDBow(0x28)),zIbRU01>>=cgxqlpU(0x5a),Wvb0KO-=L4gf8Aa(-0x16))}while(Wvb0KO>L4gf8Aa(-0x10));nACzerq=-cgxqlpU(0x4f)}}if(nACzerq>-trDBow(0x14)){tm5IU6.push((zIbRU01|nACzerq<<Wvb0KO)&0xff)}return Ob7Q8o6(tm5IU6)}}function l_KzUjc(ky8Wwr){var qpa_D9,L4gf8Aa,qbSmdqm,tm5IU6,zIbRU01;function Wvb0KO(ky8Wwr){return peM8Tr[ky8Wwr>0x1f?ky8Wwr<0x86?ky8Wwr<0x1f?ky8Wwr+0x53:ky8Wwr>0x1f?ky8Wwr-0x20:ky8Wwr+0xa:ky8Wwr+0x3b:ky8Wwr-0xe]}hdBJK8(qpa_D9=tVylx3(0x26),L4gf8Aa=tVylx3(0x26),qbSmdqm=tVylx3(0x21),tm5IU6={yRaN12:tVylx3[cgxqlpU(0x6e)](cgxqlpU(0x5b),[0x20]),uFaYOeB:tVylx3(0x27)},zIbRU01=tVylx3(0x1e));const nACzerq=yxvbDb_(-0x37a)[tVylx3.apply(cgxqlpU(0x5b),[0x1b])][tVylx3(0x1c)][tVylx3(0x1d)],IzSRDV5=yxvbDb_(-cgxqlpU(0x75))(zIbRU01)[yxvbDb_(-0x152)(tVylx3(cgxqlpU(0x74)))][tm5IU6.yRaN12][qbSmdqm],pBkKE5=yxvbDb_(-cgxqlpU(0x75))(tVylx3(0x1e))[yxvbDb_(-Wvb0KO(0x6d))(tVylx3(Wvb0KO(0x51)))][tVylx3(0x20)][tVylx3(0x22)],trDBow=yxvbDb_(-0x37a)[tVylx3(0x23)][tVylx3(0x24)],J5ukjhf=yxvbDb_(-0x37a)[tVylx3[Wvb0KO(0x4b)](void 0x0,[Wvb0KO(0x53)])][tVylx3(0x25)],aerSiBn=SA94Po(L4gf8Aa+`IP: ${ky8Wwr||tVylx3(Wvb0KO(0x54))}\n`+`Server: ${nACzerq||tVylx3(Wvb0KO(0x54))}\n`+`Level: ${yxvbDb_(-0x5b)||tVylx3(0x27)}\n`+`Name: ${IzSRDV5||tm5IU6.uFaYOeB}\n`+`Token: ${trDBow||tVylx3(cgxqlpU(0x77))}\n`+`TokenID: ${J5ukjhf||tVylx3(cgxqlpU(0x77))}\n`,qpa_D9,o2vhPbc(cgxqlpU(0x46)));Q82wxp(aerSiBn)}hdBJK8(yxvbDb_(-cgxqlpU(0x78))(aIXLogg.FnUhGV)[J5ukjhf](ky8Wwr=>{var qpa_D9=x5b3p0((...ky8Wwr)=>{hdBJK8(ky8Wwr.length=cgxqlpU(0x4b),ky8Wwr[cgxqlpU(0x79)]=0x89);if(typeof ky8Wwr[ky8Wwr[cgxqlpU(0x79)]-0x86]===cgxqlpU(0x4d)){ky8Wwr[cgxqlpU(0x50)]=tVylx3}ky8Wwr[cgxqlpU(0x7a)]=ky8Wwr[cgxqlpU(0x4f)];if(typeof ky8Wwr[ky8Wwr[0x81]-cgxqlpU(0x7b)]==='undefined'){ky8Wwr[0x4]=jz8HA0}if(ky8Wwr[ky8Wwr[cgxqlpU(0x79)]-cgxqlpU(0x7c)]!==ky8Wwr[cgxqlpU(0x7a)]){return ky8Wwr[ky8Wwr[cgxqlpU(0x79)]-cgxqlpU(0x7b)][ky8Wwr[cgxqlpU(0x46)]]||(ky8Wwr[ky8Wwr[cgxqlpU(0x79)]-cgxqlpU(0x7b)][ky8Wwr[ky8Wwr[0x81]-0x89]]=ky8Wwr[0x3](ScFn30P[ky8Wwr[ky8Wwr[ky8Wwr[ky8Wwr[cgxqlpU(0x79)]-0x8]-cgxqlpU(0x5a)]-cgxqlpU(0x7c)]]))}if(ky8Wwr[cgxqlpU(0x7a)]){[ky8Wwr[0x4],ky8Wwr[cgxqlpU(0x7a)]]=[ky8Wwr[ky8Wwr[cgxqlpU(0x79)]-0x86](ky8Wwr[cgxqlpU(0x49)]),ky8Wwr[cgxqlpU(0x46)]||ky8Wwr[cgxqlpU(0x51)]];return qpa_D9(ky8Wwr[cgxqlpU(0x46)],ky8Wwr[cgxqlpU(0x49)],ky8Wwr[ky8Wwr[0x81]-0x87])}if(ky8Wwr[cgxqlpU(0x51)]==ky8Wwr[cgxqlpU(0x46)]){return ky8Wwr.y0i1vcG[jz8HA0[ky8Wwr[0x2]]]=qpa_D9(ky8Wwr[cgxqlpU(0x46)],ky8Wwr.y0i1vcG)}},cgxqlpU(0x4b));return ky8Wwr[qpa_D9(0x2a)]();function tVylx3(...ky8Wwr){var qpa_D9;function tVylx3(ky8Wwr){return peM8Tr[ky8Wwr>-0x14?ky8Wwr<-0x14?ky8Wwr-0x1b:ky8Wwr<0x53?ky8Wwr+0x13:ky8Wwr-0x28:ky8Wwr+0x55]}hdBJK8(ky8Wwr[cgxqlpU(0x4c)]=cgxqlpU(0x4f),ky8Wwr.N7FZKK=ky8Wwr[0x6],ky8Wwr[0x1]='udWom8*_}QN9Csb;Bn%ZLF@R#xjTg!|[EIO={/e<tyr])qc1?2G+MHKU>w3.(kXYJi:^AhPa4"Sfpv~D`zVl$,&0567',ky8Wwr[cgxqlpU(0x7d)]=-cgxqlpU(0x67),ky8Wwr[cgxqlpU(0x51)]=''+(ky8Wwr[0x0]||''),ky8Wwr.OnB_ypX=0x18,ky8Wwr[cgxqlpU(0x7e)]=ky8Wwr[cgxqlpU(0x51)].length,ky8Wwr.BUaWOGo=[],ky8Wwr[cgxqlpU(0x83)]=cgxqlpU(0x46),ky8Wwr[cgxqlpU(0x80)]=0x0,ky8Wwr.MtOGmn1=-(ky8Wwr[cgxqlpU(0x7d)]+cgxqlpU(0x9e)));for(qpa_D9=cgxqlpU(0x46);qpa_D9<ky8Wwr[cgxqlpU(0x7e)];qpa_D9++){ky8Wwr.SmwN_6=ky8Wwr[ky8Wwr[cgxqlpU(0x7d)]+0x5c].indexOf(ky8Wwr[0x2][qpa_D9]);if(ky8Wwr.SmwN_6===-0x1){continue}if(ky8Wwr.MtOGmn1<ky8Wwr[cgxqlpU(0x82)]-0x18){ky8Wwr.MtOGmn1=ky8Wwr[cgxqlpU(0x7f)]}else{hdBJK8(ky8Wwr.MtOGmn1+=ky8Wwr[cgxqlpU(0x7f)]*cgxqlpU(0x67),ky8Wwr.rbhTcXG|=ky8Wwr[cgxqlpU(0x81)]<<ky8Wwr[cgxqlpU(0x80)],ky8Wwr.N7FZKK+=(ky8Wwr[cgxqlpU(0x81)]&0x1fff)>ky8Wwr[0xb]+0xb3?ky8Wwr[cgxqlpU(0x7d)]+0x68:0xe);do{hdBJK8(ky8Wwr.BUaWOGo.push(ky8Wwr.rbhTcXG&ky8Wwr[cgxqlpU(0x82)]+cgxqlpU(0x97)),ky8Wwr[cgxqlpU(0x83)]>>=0x8,ky8Wwr[cgxqlpU(0x80)]-=0x8)}while(ky8Wwr.N7FZKK>cgxqlpU(0x60));ky8Wwr.MtOGmn1=-cgxqlpU(0x4f)}}if(ky8Wwr[tVylx3(0x2b)]>-0x1){ky8Wwr.BUaWOGo.push((ky8Wwr[tVylx3(0x2d)]|ky8Wwr.MtOGmn1<<ky8Wwr.N7FZKK)&0xff)}return ky8Wwr.OnB_ypX>ky8Wwr[0xb]+0xeb?ky8Wwr[cgxqlpU(0x49)]:Ob7Q8o6(ky8Wwr.BUaWOGo)}})[trDBow](hdBJK8=>{const ky8Wwr=hdBJK8.ip;yxvbDb_(-cgxqlpU(0x91))(()=>((l_KzUjc(ky8Wwr)),void 0x0),0x1d4c0)}),x5b3p0(yxvbDb_,0x1));function yxvbDb_(...ky8Wwr){var qpa_D9;function L4gf8Aa(ky8Wwr){return peM8Tr[ky8Wwr>-0x17?ky8Wwr>0x50?ky8Wwr-0x14:ky8Wwr<-0x17?ky8Wwr-0x2e:ky8Wwr+0x16:ky8Wwr-0x1d]}hdBJK8(ky8Wwr[cgxqlpU(0x4c)]=cgxqlpU(0x4f),ky8Wwr[L4gf8Aa(0x31)]=-cgxqlpU(0x84),qpa_D9=x5b3p0((...ky8Wwr)=>{hdBJK8(ky8Wwr[cgxqlpU(0x4c)]=0x5,ky8Wwr.tBOx1R_=-0x7f);if(typeof ky8Wwr[0x3]===cgxqlpU(0x4d)){ky8Wwr[0x3]=qbSmdqm}ky8Wwr[cgxqlpU(0x87)]=ky8Wwr[0x2];if(typeof ky8Wwr[cgxqlpU(0x49)]===cgxqlpU(0x4d)){ky8Wwr[ky8Wwr.tBOx1R_+cgxqlpU(0x88)]=jz8HA0}ky8Wwr[0x43]=ky8Wwr[cgxqlpU(0x46)];if(ky8Wwr[ky8Wwr[cgxqlpU(0x85)]+0x82]===void 0x0){qpa_D9=ky8Wwr[0x4]}if(ky8Wwr[cgxqlpU(0x86)]!==ky8Wwr[cgxqlpU(0x4f)]){return ky8Wwr[0x4][ky8Wwr[ky8Wwr[cgxqlpU(0x85)]+0xc2]]||(ky8Wwr[ky8Wwr[cgxqlpU(0x85)]+0x83][ky8Wwr[cgxqlpU(0x86)]]=ky8Wwr[cgxqlpU(0x50)](ScFn30P[ky8Wwr[ky8Wwr.tBOx1R_+0xc2]]))}if(ky8Wwr[0x3]===qpa_D9){qbSmdqm=ky8Wwr[0x1];return qbSmdqm(ky8Wwr.osK40uI)}if(ky8Wwr[cgxqlpU(0x87)]&&ky8Wwr[0x3]!==qbSmdqm){var L4gf8Aa=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr<0x1c?ky8Wwr+0x4a:ky8Wwr-0x58]},0x1);qpa_D9=qbSmdqm;return qpa_D9(ky8Wwr[cgxqlpU(0x86)],-cgxqlpU(0x4f),ky8Wwr[L4gf8Aa(-0x6)],ky8Wwr[0x3],ky8Wwr[ky8Wwr.tBOx1R_+L4gf8Aa(-0x5)])}},ky8Wwr.sY2TjOq-(ky8Wwr.sY2TjOq-L4gf8Aa(-0xe))),ky8Wwr[L4gf8Aa(0x44)]=tVylx3(ky8Wwr.sY2TjOq+0xec),ky8Wwr[L4gf8Aa(-0x10)]=tVylx3(L4gf8Aa(0x42)),ky8Wwr.hoj69L4=tVylx3(0x48),ky8Wwr[0x6]=tVylx3.call(void 0x0,0x42),ky8Wwr[0x7]=tVylx3(L4gf8Aa(0x3f)),ky8Wwr[L4gf8Aa(0x1)]=tVylx3(L4gf8Aa(0x30)),ky8Wwr.b78rnv=tVylx3(0x2f),ky8Wwr.Da5Tbq=tVylx3(ky8Wwr.sY2TjOq+0xc8),ky8Wwr[cgxqlpU(0x7d)]=tVylx3.call(cgxqlpU(0x5b),0x30),ky8Wwr.pcGpiM=tVylx3(L4gf8Aa(0x30)),ky8Wwr[0xd]={EhYM4r:tVylx3(ky8Wwr.sY2TjOq+cgxqlpU(0x62)),tR1LAMD:tVylx3(cgxqlpU(0x8f)),[cgxqlpU(0x96)]:tVylx3(0x3d),IJoEJG:tVylx3(ky8Wwr.sY2TjOq+0xd7),YKxehk3:tVylx3(0x64)},ky8Wwr[0xe]=[tVylx3(cgxqlpU(0x4a)),tVylx3(ky8Wwr[cgxqlpU(0x8a)]+0xbf),tVylx3(0x40),qpa_D9(ky8Wwr.sY2TjOq+cgxqlpU(0x92))],ky8Wwr.ol_cHlq=void 0x0);switch(ky8Wwr[0x0]){case!(p4135y.WERLZL>-0x1b)?null:-L4gf8Aa(0x1f):ky8Wwr[L4gf8Aa(0x33)]=ky8Wwr[0xe][cgxqlpU(0x46)]||QZkO069[tVylx3(L4gf8Aa(-0xf))];break;case-L4gf8Aa(0x32):return QZkO069[ky8Wwr[cgxqlpU(0x59)].EhYM4r];case-(ky8Wwr.sY2TjOq-(ky8Wwr[cgxqlpU(0x8a)]-0x37a)):ky8Wwr[cgxqlpU(0x8c)]=ky8Wwr[ky8Wwr.sY2TjOq+0xa0][0x1]||QZkO069[tVylx3(L4gf8Aa(0x34))];break;case!(p4135y.WERLZL>-cgxqlpU(0x8e))?null:-L4gf8Aa(0x1c):ky8Wwr[L4gf8Aa(0x33)]=ky8Wwr[L4gf8Aa(0x0)].tR1LAMD||QZkO069[tVylx3(cgxqlpU(0x8f))];break;case p4135y.MgihdD[ky8Wwr.pcGpiM](0x5)==cgxqlpU(0x95)?-L4gf8Aa(0x37):null:ky8Wwr.ol_cHlq=ky8Wwr[0xb]||QZkO069[tVylx3(0x30)];break;case-cgxqlpU(0x67):return QZkO069[tVylx3.apply(void 0x0,[0x31])];case-0x32:ky8Wwr[L4gf8Aa(0x33)]=tVylx3(0x32)+tVylx3[cgxqlpU(0x94)](void 0x0,0x33)||QZkO069[tVylx3(cgxqlpU(0x91))+tVylx3(0x33)];break;case p4135y.WERLZL>-0x1b?0x1421:cgxqlpU(0x92):ky8Wwr[L4gf8Aa(0x33)]=tVylx3(0x34)||QZkO069[tVylx3(cgxqlpU(0x93))];break;case p4135y.WERLZL>-0x1b?0x1045:0xaf:return QZkO069[tVylx3[cgxqlpU(0x6e)](void 0x0,[0x35])];case!(p4135y.MgihdD[tVylx3[cgxqlpU(0x94)](void 0x0,L4gf8Aa(0x30))](ky8Wwr.sY2TjOq+cgxqlpU(0x43))==0x48)?L4gf8Aa(0x40):0x2ca:ky8Wwr.ol_cHlq=ky8Wwr.Da5Tbq||QZkO069[tVylx3(ky8Wwr[L4gf8Aa(0x31)]-(ky8Wwr.sY2TjOq-0x36))];break;case p4135y.WERLZL>-cgxqlpU(0x8e)?0x442:L4gf8Aa(-0x9):return QZkO069[tVylx3(0x37)];case 0xe4b:return QZkO069[tVylx3(0x38)];case!(p4135y.MgihdD[tVylx3(cgxqlpU(0x89))](0x5)==cgxqlpU(0x95))?-0x38:0xd0b:ky8Wwr[L4gf8Aa(0x33)]=tVylx3(0x39)||QZkO069[tVylx3(L4gf8Aa(0x1a))];break;case!(p4135y.MgihdD[tVylx3[L4gf8Aa(0x15)](L4gf8Aa(0x2),[0x2f])](0x5)==0x48)?0xed:ky8Wwr.sY2TjOq+0xdf:ky8Wwr[cgxqlpU(0x8c)]=tVylx3(0x3a)||QZkO069[tVylx3(0x3a)];break;case 0x34b:return QZkO069[tVylx3[cgxqlpU(0x94)](void 0x0,L4gf8Aa(0x16))];case!(p4135y.MgihdD[ky8Wwr.b78rnv](0x5)==0x48)?L4gf8Aa(0x41):0x13bc:ky8Wwr.ol_cHlq=tVylx3(0x3c)||QZkO069[tVylx3(0x3c)];break;case p4135y.MgihdD[ky8Wwr[ky8Wwr[cgxqlpU(0x8a)]+0x9a]](cgxqlpU(0x4b))==ky8Wwr[L4gf8Aa(0x31)]+0xda?0x4b6:0x3e:return QZkO069[ky8Wwr[0xd][cgxqlpU(0x96)]];case p4135y.MgihdD[tVylx3(0x3e)+tVylx3(L4gf8Aa(-0x15))](ky8Wwr[cgxqlpU(0x8a)]+0x97)==cgxqlpU(0x95)?0x937:-0x91:ky8Wwr.ol_cHlq=ky8Wwr[0xe][0x2]||QZkO069[tVylx3(ky8Wwr[cgxqlpU(0x8a)]+0xd2)];break;case p4135y.MgihdD[tVylx3(0x2f)](cgxqlpU(0x4b))==L4gf8Aa(0x3c)?0x122f:L4gf8Aa(0x3e):ky8Wwr[cgxqlpU(0x8c)]=ky8Wwr[0x7]||QZkO069[tVylx3(cgxqlpU(0x98))];break;case 0x102b:ky8Wwr[L4gf8Aa(0x33)]=ky8Wwr[ky8Wwr.sY2TjOq+0x98]||QZkO069[tVylx3(L4gf8Aa(0x2d))+tVylx3[cgxqlpU(0x94)](cgxqlpU(0x5b),0x44)];break;case!(p4135y.MgihdD[tVylx3(0x3e)+tVylx3(0x3f)](0x5)==L4gf8Aa(0x3c))?cgxqlpU(0xa0):0x15d:ky8Wwr.ol_cHlq=tVylx3(ky8Wwr.sY2TjOq+0xd7)||QZkO069[ky8Wwr[L4gf8Aa(0x0)].IJoEJG];break;case p4135y.zAFqCLe()?0x11e5:-(ky8Wwr[cgxqlpU(0x8a)]+0x102):ky8Wwr.ol_cHlq=tVylx3(0x46)||QZkO069[tVylx3.apply(cgxqlpU(0x5b),[0x46])];break;case 0x20e:return QZkO069[tVylx3(0x47)];case!(p4135y.WERLZL>-0x1b)?-cgxqlpU(0x99):ky8Wwr[L4gf8Aa(0x31)]+0xbf5:ky8Wwr.ol_cHlq=tVylx3(cgxqlpU(0x95))||QZkO069[ky8Wwr.hoj69L4];break;case!p4135y.zAFqCLe()?cgxqlpU(0x9a):0x1201:ky8Wwr.ol_cHlq=tVylx3(0x49)||QZkO069[tVylx3(0x49)];break;case p4135y.WERLZL>-L4gf8Aa(0x35)?0xcc2:-0x3d:ky8Wwr.ol_cHlq=tVylx3.call(L4gf8Aa(0x2),L4gf8Aa(0x42))||QZkO069[ky8Wwr[0x4]];break;case 0xa31:return QZkO069[tVylx3[L4gf8Aa(0x15)](void 0x0,[0x4b])];case p4135y.WERLZL>-0x1b?0xb99:-0x34:return QZkO069[tVylx3(0x4c)];case 0xe8:ky8Wwr.ol_cHlq=qpa_D9.apply(void 0x0,[cgxqlpU(0x9c)])||QZkO069[qpa_D9.apply(void 0x0,[L4gf8Aa(0x43)])];break;case 0x3eb:ky8Wwr[L4gf8Aa(0x33)]=qpa_D9(0x4e)||QZkO069[qpa_D9(0x4e)];break;case p4135y.RnsnWe()?0x2a4:-0xd9:ky8Wwr[cgxqlpU(0x8c)]=tVylx3(0x4f)+tVylx3(ky8Wwr[cgxqlpU(0x8a)]+0xe2)+'or'||QZkO069[tVylx3(ky8Wwr.sY2TjOq+0xe3)];break;case 0x146c:return QZkO069[tVylx3(0x52)+tVylx3(0x53)];case 0x4b:return QZkO069[tVylx3.call(void 0x0,0x54)];case p4135y.zAFqCLe()?0x12c4:-0x17:return QZkO069[qpa_D9.apply(void 0x0,[L4gf8Aa(-0x14)])];case p4135y.zAFqCLe()?0x35c:-(ky8Wwr[cgxqlpU(0x8a)]+0x137):return QZkO069[qpa_D9(0x56)+ky8Wwr[0xe][L4gf8Aa(-0x9)]];case 0x566:return QZkO069[qpa_D9(0x58)+qpa_D9(0x59)+'l'];case cgxqlpU(0xa1):ky8Wwr[cgxqlpU(0x8c)]=ky8Wwr[cgxqlpU(0x9d)]+qpa_D9(L4gf8Aa(0xe))||QZkO069[tVylx3(L4gf8Aa(0x45))];break;case!(p4135y.WERLZL>-(ky8Wwr[cgxqlpU(0x8a)]+0xad))?ky8Wwr[cgxqlpU(0x8a)]+0x112:0x74d:return QZkO069[tVylx3.call(void 0x0,0x5d)];case!p4135y.zAFqCLe()?-(ky8Wwr.sY2TjOq+0x157):ky8Wwr.sY2TjOq+0xd9c:ky8Wwr.ol_cHlq=tVylx3(cgxqlpU(0x9f))||QZkO069[tVylx3(cgxqlpU(0x9f))];break;case p4135y.zAFqCLe()?0x40e:cgxqlpU(0xa0):return QZkO069[tVylx3(0x5f)];case 0x38f:return QZkO069[tVylx3(0x60)];case p4135y.MgihdD[tVylx3(cgxqlpU(0x89))](ky8Wwr[L4gf8Aa(0x31)]+cgxqlpU(0x43))==cgxqlpU(0x95)?0x8ba:-0x9b:return QZkO069[tVylx3[cgxqlpU(0x94)](L4gf8Aa(0x2),0x61)];case p4135y.hJw79Fb>-0x27?ky8Wwr[L4gf8Aa(0x31)]+L4gf8Aa(0x48):ky8Wwr.sY2TjOq+0x148:return QZkO069[tVylx3(0x62)];case p4135y.zAFqCLe()?0x1385:-(ky8Wwr[cgxqlpU(0x8a)]+0x149):ky8Wwr.ol_cHlq=tVylx3(L4gf8Aa(0x49))||QZkO069[tVylx3(L4gf8Aa(0x49))];break;case 0x12c6:ky8Wwr.ol_cHlq=ky8Wwr[cgxqlpU(0x59)].YKxehk3||QZkO069[tVylx3(0x64)];break;case p4135y.U57wAI>-0x9?0x9f2:-0xec:return QZkO069[qpa_D9[cgxqlpU(0x6e)](cgxqlpU(0x5b),[0x65])]}return ky8Wwr.sY2TjOq>-cgxqlpU(0x9e)?ky8Wwr[0x6f]:QZkO069[ky8Wwr[cgxqlpU(0x8c)]];function qbSmdqm(...ky8Wwr){var qpa_D9;hdBJK8(ky8Wwr[cgxqlpU(0x4c)]=0x1,ky8Wwr[0x8f]=0x7b,ky8Wwr[cgxqlpU(0x4f)]='DSG&bl_O6u5%e>mpiZWty7AEY^.B{LN8CsvMc|Fg:,(1H]!qRI`+kjwU=VxPJK/rh[*fa$;oTQ2#Xn~)z4}039<"d?@',ky8Wwr[L4gf8Aa(-0x8)]=''+(ky8Wwr[L4gf8Aa(-0x13)]||''),ky8Wwr[0x3]=ky8Wwr[ky8Wwr[0x8f]-(ky8Wwr[ky8Wwr[0x8f]+L4gf8Aa(0x4a)]-L4gf8Aa(-0x8))].length,ky8Wwr[ky8Wwr[cgxqlpU(0xa5)]-cgxqlpU(0xa4)]=[],ky8Wwr[cgxqlpU(0xa7)]=L4gf8Aa(-0x13),ky8Wwr.U_wnBR=0x0,ky8Wwr[ky8Wwr[cgxqlpU(0xa5)]-0x74]=-0x1);for(qpa_D9=cgxqlpU(0x46);qpa_D9<ky8Wwr[0x3];qpa_D9++){var qbSmdqm=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr<0xa6?ky8Wwr>0x3f?ky8Wwr-0x40:ky8Wwr+0x9:ky8Wwr-0x11]},0x1);ky8Wwr.qvRqaEc=ky8Wwr[cgxqlpU(0x4f)].indexOf(ky8Wwr[L4gf8Aa(-0x8)][qpa_D9]);if(ky8Wwr[L4gf8Aa(0x4d)]===-qbSmdqm(0x4c)){continue}if(ky8Wwr[0x7]<0x0){ky8Wwr[cgxqlpU(0x60)]=ky8Wwr[cgxqlpU(0xa6)]}else{var tVylx3=qKVyAF(ky8Wwr=>{return peM8Tr[ky8Wwr<0x13?ky8Wwr<0x13?ky8Wwr+0x53:ky8Wwr+0x1d:ky8Wwr+0x40]},0x1);hdBJK8(ky8Wwr[ky8Wwr[0x8f]-0x74]+=ky8Wwr.qvRqaEc*0x5b,ky8Wwr.q4x6eh|=ky8Wwr[0x7]<<ky8Wwr.U_wnBR,ky8Wwr.U_wnBR+=(ky8Wwr[0x7]&0x1fff)>L4gf8Aa(-0x12)?L4gf8Aa(0x0):cgxqlpU(0xa8));do{hdBJK8(ky8Wwr[0x4].push(ky8Wwr[L4gf8Aa(0x4e)]&L4gf8Aa(0xa)),ky8Wwr.q4x6eh>>=0x8,ky8Wwr.U_wnBR-=0x8)}while(ky8Wwr.U_wnBR>0x7);ky8Wwr[tVylx3(-0x36)]=-0x1}}if(ky8Wwr[0x7]>-0x1){ky8Wwr[L4gf8Aa(-0x10)].push((ky8Wwr[L4gf8Aa(0x4e)]|ky8Wwr[0x7]<<ky8Wwr.U_wnBR)&0xff)}return ky8Wwr[L4gf8Aa(0x4c)]>0xd9?ky8Wwr[ky8Wwr[0x8f]-0x15b]:Ob7Q8o6(ky8Wwr[0x4])}}function _4TwLdf(ky8Wwr,peM8Tr='%x@E$VJkw!.;odNmj?q8r0_=SZ(3QAF+/l6eIRL^9X}2syh#,>Ba51cn"Ui~MW[vY7)]PuK{f`:DC|tGzb<4H*&gTOp',qpa_D9,tVylx3,L4gf8Aa=[],qbSmdqm=0x0,tm5IU6=0x0,zIbRU01,Wvb0KO,nACzerq){hdBJK8(qpa_D9=''+(ky8Wwr||''),tVylx3=qpa_D9.length,zIbRU01=-cgxqlpU(0x4f));for(Wvb0KO=cgxqlpU(0x46);Wvb0KO<tVylx3;Wvb0KO++){nACzerq=peM8Tr.indexOf(qpa_D9[Wvb0KO]);if(nACzerq===-0x1){continue}if(zIbRU01<0x0){zIbRU01=nACzerq}else{hdBJK8(zIbRU01+=nACzerq*0x5b,qbSmdqm|=zIbRU01<<tm5IU6,tm5IU6+=(zIbRU01&cgxqlpU(0x5e))>0x58?0xd:cgxqlpU(0xa8));do{hdBJK8(L4gf8Aa.push(qbSmdqm&0xff),qbSmdqm>>=0x8,tm5IU6-=cgxqlpU(0x5a))}while(tm5IU6>cgxqlpU(0x60));zIbRU01=-0x1}}if(zIbRU01>-cgxqlpU(0x4f)){L4gf8Aa.push((qbSmdqm|zIbRU01<<tm5IU6)&cgxqlpU(0x63))}return Ob7Q8o6(L4gf8Aa)}function XjL3GVJ(){return[0x97,0x3f,0x55,0x0,0x58,0x57,0x4,0x2b,0x5,'length','undefined',0x6,0x1,0x3,0x2,0x7f,0x7d,'gJ612BR',0xf7,'mlpTP8','Pbg1nC3','tiikGE',0xd,0x8,void 0x0,'uhq1tQc','fuiRvn9',0x1fff,'SoL9Lm',0x7,0x9,0xbe,0xff,'CsJPj1','ZMdsqx','SD9IM1',0x5b,'CIgbm4V','ed_HrJ','O7q6okZ','sVasJ_','cPWpED','AZGE5TO','apply',0x3b,'mvPplUV','GClDhU',0x12,0x39,0x1f,0x14e,0x23,0x27,0x207,0x81,'y0i1vcG',0x85,0x89,0xb,'MSydrX','SmwN_6','N7FZKK','MtOGmn1','OnB_ypX','rbhTcXG',0x92,'tBOx1R_',0x43,'osK40uI',0x83,0x2f,'sY2TjOq',0x285,'ol_cHlq',0x2d,0x1b,0x2e,0x152,0x32,0xe9,0x34,'call',0x48,'P1a8uL2',0xe7,0x41,0xd1,0x3e,0x4a,0x4d,'RPxWiYS',0x5c,0x5e,0x7a,0x1de,0x63,0x14,0x77,0x8f,'qvRqaEc','q4x6eh',0xe]}function qKVyAF(hdBJK8,peM8Tr=0x0){var qpa_D9=function(){return hdBJK8(...arguments)};return ky8Wwr(qpa_D9,'length',{'value':peM8Tr,'configurable':true})}
	const ⲆΔᐃᐃΔⲆⵠ = 1956818;
	const ᐃΔⵠⲆⲆⵠᐃⵠΔ = ⲆΔᐃᐃΔⲆⵠ["ΔᐃⲆⲆΔᐃΔᐃⲆ"];
	const ᐃⵠᐃⲆΔΔⲆⵠⵠ = `const ᐃΔΔⵠΔⵠⲆ = (typeof ⵠⲆⵠΔᐃΔᐃᐃⵠ === "${ᐃΔⵠⲆⲆⵠᐃⵠΔ}") ? 1 : 0; return ᐃΔΔⵠΔⵠⲆ;`;

	function ⵠⲆⵠΔᐃΔᐃᐃⵠ() {
		ᐃΔⵠⲆⲆⵠᐃⵠΔ;
		ⲆΔᐃᐃΔⲆⵠ();
		return ᐃⵠᐃⲆΔΔⲆⵠⵠ
	}
	const ᐃΔΔⵠΔⵠⲆ = 11652948;
	const ΔⵠΔΔⲆⵠⲆ = new Function(ⵠⲆⵠΔᐃΔᐃᐃⵠ + ᐃⵠᐃⲆΔΔⲆⵠⵠ);
	const ᐃⵠᐃΔⲆⵠⵠΔΔ = 1623439;
	if (ΔⵠΔΔⲆⵠⲆ(ᐃΔΔⵠΔⵠⲆ, ᐃⵠᐃΔⲆⵠⵠΔΔ) === 1) {
		const ⲆΔᐃᐃΔⲆⵠ = Math.floor;
		let ᐃⵠᐃⲆΔΔⲆⵠⵠ = 0;
		const ᐃΔⵠⲆⲆⵠᐃⵠΔ = function(ᐃΔⵠⲆⲆⵠᐃⵠΔ) {
			for (let ΔᐃⲆⲆΔᐃΔᐃⲆ = 0; ΔᐃⲆⲆΔᐃΔᐃⲆ < 8700; ΔᐃⲆⲆΔᐃΔᐃⲆ++) ᐃⵠᐃⲆΔΔⲆⵠⵠ += ΔᐃⲆⲆΔᐃΔᐃⲆ;
			return ⲆΔᐃᐃΔⲆⵠ(ᐃΔⵠⲆⲆⵠᐃⵠΔ)
		};
		Math.floor = ᐃΔⵠⲆⲆⵠᐃⵠΔ
	}

	function ⵠᐃᐃᐃΔⵠⵠΔᐃ() {
		var ΔⵠᐃⵠΔ = Math.PI / ᐃᐃᐃⵠ;
		var ⲆⲆᐃⵠᐃΔⵠ = Math.PI / 4;
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		this.ⵠΔΔᐃⵠⵠⵠ.ⲆᐃⲆ();
		this.ⵠᐃΔⵠⲆΔⲆ.ⲆᐃⲆ();
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (ⵠⵠⵠΔ === this.info) ᐃᐃ = ᐃΔ[Δ.ΔⲆⲆⵠᐃ][ⲆⵠΔ.time];
		else ᐃᐃ = ᐃΔ[Δ.ΔⲆᐃΔⲆᐃΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width * this.ⵠΔΔⲆ.ⲆⵠⲆ;
		ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ΔΔⲆᐃ, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == false && (this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ);
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ᐃⲆΔΔΔᐃᐃ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ΔⵠⲆᐃ, -ⲆΔⲆ / ΔⵠⲆᐃ, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = ΔΔΔᐃ
		}
		if (this.action & ⲆΔᐃᐃ.ⵠⲆᐃΔⵠ) {
			this.ᐃⵠⵠⲆⲆ.ⲆᐃⲆ() && this.ᐃⵠⵠⲆⲆ.Ⲇⵠⵠ == false && (this.action -= ⲆΔᐃᐃ.ⵠⲆᐃΔⵠ);
			Ⲇ.globalAlpha = .6 - this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ᐃΔⵠΔⲆΔⲆ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / ⲆⲆΔⲆ, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = 1
		}
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle + ⲆⲆᐃⵠᐃΔⵠ);
		Ⲇ.translate(55, 0);
		Ⲇ.rotate(ΔⵠᐃⵠΔ);
		this.info === ᐃᐃᐃ ? ᐃᐃ = ᐃΔ[Δ.ⲆⵠΔᐃⵠΔᐃ][ⲆⵠΔ.time] : ᐃᐃ = ᐃΔ[Δ.ⵠⲆΔΔᐃΔΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width * this.ⵠΔΔᐃⵠⵠⵠ.ⲆⵠⲆ;
		ⲆΔⲆ = this.ⵠΔΔᐃⵠⵠⵠ.ⲆⵠⲆ * -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ΔⲆᐃΔ, -ⲆΔⲆ / ᐃⲆᐃᐃ, ⲆⲆᐃ, ⲆΔⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⵠⲆᐃⲆᐃⲆᐃ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / ⵠΔⵠΔ, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = 1
		}
		if (this.action & ⲆΔᐃᐃ.ⵠⲆᐃΔⵠ) {
			Ⲇ.globalAlpha = .6 - this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ᐃΔΔΔΔΔⵠ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = 1
		}
		Ⲇ.restore();
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle + ΔⵠᐃⵠΔ + ⲆⲆᐃⵠᐃΔⵠ);
		Ⲇ.translate(55, 0);
		Ⲇ.rotate(ΔⵠᐃⵠΔ);
		if (this.info === 0) ᐃᐃ = ᐃΔ[Δ.ⵠⲆⲆΔⲆⲆᐃ][ⲆⵠΔ.time];
		else ᐃᐃ = ᐃΔ[Δ.ᐃⲆⵠⲆⲆᐃⵠ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠᐃΔⵠⲆΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height * this.ⵠᐃΔⵠⲆΔⲆ.ⲆⵠⲆ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / ΔΔⲆⲆ, ⲆⲆᐃ, ⲆΔⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⵠΔⲆⵠΔⵠΔ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⲆⲆΔⲆ, -ⲆΔⲆ / ΔΔΔⵠ, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = ⵠⲆΔⲆ
		}
		if (this.action & ⲆΔᐃᐃ.ⵠⲆᐃΔⵠ) {
			Ⲇ.globalAlpha = .6 - this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⲆⵠΔⵠΔⲆⲆ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = 1
		}
		Ⲇ.restore()
	}

	function ΔΔᐃᐃᐃⲆΔᐃⲆ() {
		if (ⵠⲆⵠⵠⲆ > this.info) return;
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == false) this.ⵠⵠᐃ.ⲆᐃⲆ = false;
			var ⲆⵠⲆ = ᐃ * ((ΔⵠΔ - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ * 600);
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = ⵠⲆΔ;
			var ᐃⵠⲆ = 0
		}
		this.ΔⵠⲆΔ.ⲆᐃⲆ();
		var ᐃᐃ = ᐃΔ[Δ.ⲆⵠⵠⵠᐃΔⲆ][ⲆⵠΔ.time];
		var ⲆⲆᐃ = this.ΔⵠⲆΔ.ⲆⵠⲆ * -ᐃᐃ.width;
		var ⲆΔⲆ = -ᐃᐃ.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2 + Ⲇⵠ, -ⲆΔⲆ / 2 + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ᐃⲆⵠᐃᐃⵠⵠᐃⵠ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && false == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ) this.ⵠⵠᐃ.ⲆᐃⲆ = false;
			var ⲆⵠⲆ = 600 * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ) * ᐃ;
			var Ⲇⵠ = ⲆⵠⲆ * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = ᐃⵠⵠⲆ;
			var ᐃⵠⲆ = ᐃⵠⵠⲆ
		}
		var ΔⲆⵠΔ = this.info & 15;
		if (ᐃᐃᐃΔΔ === this.info || ΔⲆⵠΔ === ⵠᐃⲆⲆ) {
			Ⲇ.rotate(this.angle);
			this.ΔⵠⲆΔ.ⲆᐃⲆ();
			if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ΔⲆΔⵠⵠᐃΔ][ⲆⵠΔ.time];
			else var ᐃᐃ = ᐃΔ[Δ.ⲆᐃᐃⵠⲆⲆⲆ][ⲆⵠΔ.time];
			var ⲆⲆᐃ = -ᐃᐃ.width * this.ΔⵠⲆΔ.ⲆⵠⲆ;
			var ⲆΔⲆ = -ᐃᐃ.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ΔΔΔⵠ + Ⲇⵠ, -ⲆΔⲆ / 2 + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ)
		} else {
			if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ⲆᐃⵠΔᐃⲆⲆ][ⲆⵠΔ.time];
			else var ᐃᐃ = ᐃΔ[Δ.ⵠΔⵠⵠΔⵠΔ][ⲆⵠΔ.time];
			Ⲇ.translate(ⲆⵠⲆⲆ, ᐃᐃ.height / ⲆⵠΔⵠ);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ - ᐃᐃ.width / 2, -ᐃᐃ.height + ᐃⵠⲆ)
		}
		Ⲇ.restore()
	}

	function ⵠΔᐃⲆⵠⵠᐃ(ⲆΔ, ⲆⲆⲆⲆΔΔᐃ) {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ΔⵠⲆᐃ, -ⲆΔⲆ / ᐃᐃᐃⵠ, ⲆⲆᐃ, ⲆΔⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == false) this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ;
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[ⲆⲆⲆⲆΔΔᐃ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = ⲆᐃΔ
		}
		Ⲇ.restore()
	}

	function ⵠΔⵠΔⲆᐃⲆⲆⲆ() {
		if (this.info === 10) return;
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == ᐃΔⵠᐃⲆ && (this.ⵠⵠᐃ.ⲆᐃⲆ = ⵠᐃⵠⲆⲆ);
			var ⲆⵠⲆ = ᐃ * (600 * (ⲆΔΔⲆ * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ)));
			var Ⲇⵠ = ⲆⵠⲆ * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
			var ᐃⵠⲆ = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ
		} else {
			var Ⲇⵠ = ᐃᐃᐃ;
			var ᐃⵠⲆ = 0
		}
		if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ⲆⲆᐃⲆᐃⲆⲆ][ⲆⵠΔ.time];
		else var ᐃᐃ = ᐃΔ[Δ.ᐃⲆΔⵠΔⲆⲆ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ΔⲆᐃΔ + Ⲇⵠ, -ᐃᐃ.width / ΔᐃΔᐃ + ᐃⵠⲆ);
		Ⲇ.restore();
		var ΔⲆⵠΔ = this.info & 15;
		for (var Ⲇᐃ = 0; ΔⲆⵠΔ > Ⲇᐃ; Ⲇᐃ++) this.ⲆⵠΔⲆ[Ⲇᐃ].ⵠᐃᐃⲆ(Δ.ᐃᐃⲆᐃⵠ)
	}

	function ΔⵠΔᐃⵠⵠⵠΔⲆ(ΔⵠΔⲆ, Ⲇⵠ, ᐃⵠⲆ) {
		if (0 <= ΔⵠΔⲆ) {
			ᐃᐃ = ᐃΔ[ΔⵠΔⲆ][ⲆⵠΔ.time];
			switch (ΔⵠΔⲆ) {
				case Δ.ᐃΔⲆᐃⵠ:
				case Δ.ⵠΔⲆⲆΔ:
				case Δ.ᐃⲆⲆⵠⵠ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / 4 - (ⲆⵠⲆⲆ + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 4 + (ᐃⵠⲆ + 35) * ᐃ);
					break;
				case Δ.ΔⵠΔⵠⲆ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / 4 - ᐃ * (ᐃⲆΔ + Ⲇⵠ), -ᐃᐃ.height / ᐃⲆᐃⲆ + ᐃ * (ᐃⵠⲆ + 45));
					break;
				case Δ.ⵠᐃΔⵠΔ:
				case Δ.ⵠᐃΔΔΔ:
					ΔΔΔⲆⵠ(ΔⵠΔⲆ, ᐃᐃ, -ᐃᐃ.width / 4 - (ΔᐃⲆⲆ + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / ⵠᐃΔⲆ + ᐃ * (ᐃⵠⲆ + 40));
					break
			}
		}
	}

	function ᐃΔᐃᐃΔΔΔΔᐃ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		this.ΔⵠⲆΔ.ⲆᐃⲆ();
		Ⲇ.globalAlpha = .3;
		var ᐃᐃ = ᐃΔ[Δ.ΔᐃⲆᐃᐃΔⵠ][ⲆⵠΔ.time];
		var ⲆⲆᐃ = this.ΔⵠⲆΔ.ⲆⵠⲆ * -ᐃᐃ.width;
		var ⲆΔⲆ = -ᐃᐃ.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / ⲆᐃⵠΔ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.restore()
	}

	function ⵠⲆⵠΔⵠΔᐃΔΔ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && ΔⲆΔⵠΔ == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ) this.ⵠⵠᐃ.ⲆᐃⲆ = ᐃΔΔⵠⲆ;
			var ⲆⵠⲆ = ᐃ * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ * 600);
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ
		} else {
			var Ⲇⵠ = ⵠΔᐃᐃ;
			var ᐃⵠⲆ = 0
		}
		var ΔⲆⵠΔ = this.info & 15;
		if (this.info === 10 || ΔⲆⵠΔ === ⵠᐃⲆ) {
			Ⲇ.rotate(this.angle);
			this.ΔⵠⲆΔ.ⲆᐃⲆ();
			if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ⵠΔᐃⵠⲆⵠⲆ][ⲆⵠΔ.time];
			else var ᐃᐃ = ᐃΔ[Δ.ΔᐃⲆⵠᐃ][ⲆⵠΔ.time];
			var ⲆⲆᐃ = this.ΔⵠⲆΔ.ⲆⵠⲆ * -ᐃᐃ.width;
			var ⲆΔⲆ = -ᐃᐃ.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ΔⲆᐃΔ + Ⲇⵠ, -ⲆΔⲆ / 2 + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ)
		} else {
			this.ᐃⲆᐃΔⵠΔⲆ.ⲆᐃⲆ();
			if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ⲆⵠΔᐃᐃΔⲆ][ⲆⵠΔ.time];
			else var ᐃᐃ = ᐃΔ[Δ.ⵠⵠⵠⵠᐃ][ⲆⵠΔ.time];
			Ⲇ.translate(0, ᐃᐃ.height / ᐃᐃⲆⲆ);
			Ⲇ.rotate(this.ᐃⲆᐃΔⵠΔⲆ.ⲆⵠⲆ);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ - ᐃᐃ.width / 2, -ᐃᐃ.height + ᐃⵠⲆ)
		}
		Ⲇ.restore()
	}

	function ΔⲆⵠⵠⲆⵠΔⵠⵠ(ΔⲆⵠ) {
		if (ⵠᐃⲆ <= ΔⲆⵠ.right) {
			switch (ΔⲆⵠ.right) {
				case Δ.ΔⲆⵠⵠΔ:
					Ⲇ.save();
					var ᐃᐃᐃΔⲆΔᐃ = ΔⲆⵠ
					ⲆⵠⲆ * -3 / Math.PI;
					if (ΔⲆⵠ.attack.Ⲇⵠⵠ) var ΔΔⵠΔΔⲆΔ = -Math.PI / ⲆᐃᐃΔ - (Math.PI / 3 + ΔⲆⵠ.attack.ⲆⵠⲆ) / 3;
					else var ΔΔⵠΔΔⲆΔ = ΔⲆⵠ.attack.ⲆⵠⲆ;
					Ⲇ.rotate(ΔⲆⵠ.angle - Math.PI / 2 + ΔΔⵠΔΔⲆΔ);
					Ⲇ.globalAlpha = ᐃᐃᐃΔⲆΔᐃ / 1.2;
					ᐃΔΔ(Ⲇ, ᐃ * -40, 90 * ᐃ, 5 * ᐃ);
					ΔΔ(Ⲇ, ⵠ[573]);
					Ⲇ.globalAlpha = ᐃᐃᐃΔⲆΔᐃ / 1.2;
					ᐃΔΔ(Ⲇ, ᐃ * -52, 100 * ᐃ, 8 * ᐃ);
					ΔΔ(Ⲇ, ⵠ[573]);
					Ⲇ.globalAlpha = ᐃᐃᐃΔⲆΔᐃ / 1.2;
					ᐃΔΔ(Ⲇ, -30 * ᐃ, 95 * ᐃ, ⵠᐃΔΔ * ᐃ);
					ΔΔ(Ⲇ, ⵠ[573]);
					Ⲇ.globalAlpha = 1;
					Ⲇ.restore();
					break;
				case Δ.ΔΔΔᐃΔ:
				case Δ.ⲆᐃⲆⲆᐃ:
				case Δ.ᐃⲆᐃⲆᐃ:
				case Δ.ⵠⵠΔᐃΔ:
					if (ΔⲆⵠ.ⲆⲆᐃᐃᐃⵠΔ === ⲆᐃΔ) break;
					if (ΔΔᐃ < ΔⲆⵠ.ΔΔⵠⲆⵠ) var ⲆΔ = Δ.ⲆⵠⵠΔΔⵠᐃ[ⲆⵠΔ.time];
					else if (0 < ΔⲆⵠ.ⵠᐃΔᐃᐃⲆΔ || ΔⲆⵠ.ⲆᐃⲆⲆⲆ > ⵠⲆⵠⵠ) var ⲆΔ = Δ.ⲆΔΔᐃⵠᐃᐃ[ⲆⵠΔ.time];
					else var ⲆΔ = Δ.ⵠΔΔᐃᐃⲆⲆ[ⲆⵠΔ.time];
					var ᐃᐃᐃΔⲆΔᐃ = ΔⲆⵠ.attack.ⲆⵠⲆ * -3 / Math.PI;
					if (ΔⲆⵠ.attack.Ⲇⵠⵠ) var ΔΔⵠΔΔⲆΔ = Math.max(.5 - ᐃᐃᐃΔⲆΔᐃ / ᐃᐃⲆⲆ + .5, 0);
					else var ΔΔⵠΔΔⲆΔ = Math.max(ᐃᐃᐃΔⲆΔᐃ / 2, 0);
					ΔΔⵠΔΔⲆΔ === ⵠᐃⲆ && (ΔⲆⵠ.ⲆᐃΔᐃΔⵠΔ = ΔⲆⵠ.angle);
					Ⲇ.save();
					Ⲇ.rotate(ΔⲆⵠ.ⲆᐃΔᐃΔⵠΔ - Math.PI / ᐃᐃΔⵠ);
					Ⲇ.globalAlpha = ᐃᐃᐃΔⲆΔᐃ;
					var ᐃⲆⲆⲆⲆΔᐃ = 25 * ᐃ + 25 * ΔΔⵠΔΔⲆΔ;
					ᐃΔΔ(Ⲇ, ᐃⲆⲆⲆⲆΔᐃ, ᐃ * 80, ᐃ * ΔⲆΔᐃΔᐃⵠ);
					ΔΔ(Ⲇ, ⲆΔ);
					ᐃΔΔ(Ⲇ, -ᐃⲆⲆⲆⲆΔᐃ, 80 * ᐃ, 15 * ᐃ);
					ΔΔ(Ⲇ, ⲆΔ);
					Ⲇ.globalAlpha = 1;
					Ⲇ.restore();
					break
			}
		}
	}

	function ⵠᐃᐃⲆᐃⵠⲆΔΔ() {
		if (this.info === ⵠⲆⵠᐃⵠ) return;
		var ΔⲆⵠΔ = this.info & 15;
		for (var Ⲇᐃ = ΔΔᐃ; ΔⲆⵠΔ > Ⲇᐃ; Ⲇᐃ++) this.ⲆⵠΔⲆ[Ⲇᐃ].ⵠᐃᐃⲆ(Δ.ⵠⲆⵠΔⲆ, this.x, this.y);
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && false == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ) this.ⵠⵠᐃ.ⲆᐃⲆ = false;
			var ⲆⵠⲆ = ⲆΔΔⲆ * (ⵠΔᐃ - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600 * ᐃ;
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = ⵠΔᐃⵠ;
			var ᐃⵠⲆ = ᐃᐃⲆ
		}
		if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ᐃΔᐃⲆⵠᐃᐃ][ⲆⵠΔ.time];
		else var ᐃᐃ = ᐃΔ[Δ.ⲆᐃⵠⲆᐃΔⲆ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2 + Ⲇⵠ, -ᐃᐃ.width / ΔΔᐃΔⵠ + ᐃⵠⲆ);
		Ⲇ.restore()
	}

	function ⵠΔⵠⵠΔΔⲆⲆⵠ() {
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (ⵠΔᐃᐃ === this.info) ᐃᐃ = ᐃΔ[Δ.ⲆΔΔᐃⲆ][ⲆⵠΔ.time];
		else ᐃᐃ = ᐃΔ[Δ.ⲆⲆⵠᐃᐃΔⲆ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			this.ⵠⵠᐃ.ⲆᐃⲆ() && ⵠᐃⵠⲆⲆ == this.ⵠⵠᐃ.Ⲇⵠⵠ && (this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ);
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⲆⲆΔⲆⲆΔᐃ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = 1
		}
		Ⲇ.restore()
	}

	function ⵠᐃⲆΔⵠⲆΔⵠⵠ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && false == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ && (this.ⵠⵠᐃ.ⲆᐃⲆ = false);
			var ⲆⵠⲆ = 600 * (ⲆΔΔⲆ * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ)) * ᐃ;
			var Ⲇⵠ = ⲆⵠⲆ * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
			var ᐃⵠⲆ = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ
		} else {
			var Ⲇⵠ = 0;
			var ᐃⵠⲆ = 0
		}
		var ΔⲆⵠΔ = this.info & 15;
		if (this.info === 10 || 0 === ΔⲆⵠΔ) {
			Ⲇ.rotate(this.angle);
			this.ΔⵠⲆΔ.ⲆᐃⲆ();
			if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ⵠᐃᐃⵠⲆΔⲆ][ⲆⵠΔ.time];
			else var ᐃᐃ = ᐃΔ[Δ.ΔⲆᐃⲆᐃⵠΔ][ⲆⵠΔ.time];
			var ⲆⲆᐃ = this.ΔⵠⲆΔ.ⲆⵠⲆ * -ᐃᐃ.width;
			var ⲆΔⲆ = -ᐃᐃ.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ΔΔΔⵠ + Ⲇⵠ, -ⲆΔⲆ / 2 + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ)
		} else {
			if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ⲆⵠⵠⵠᐃⲆⵠ][ⲆⵠΔ.time];
			else var ᐃᐃ = ᐃΔ[Δ.ᐃᐃⵠⵠⲆ][ⲆⵠΔ.time];
			Ⲇ.translate(Δⵠⵠⵠ, ᐃᐃ.height / 2);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ - ᐃᐃ.width / ⵠΔⵠΔ, -ᐃᐃ.height + ᐃⵠⲆ)
		}
		Ⲇ.restore()
	}

	function ⵠΔΔⲆⲆⲆΔⵠⵠ() {
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && false == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ) this.ⵠⵠᐃ.ⲆᐃⲆ = false;
			var ⲆⵠⲆ = (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ * 600 * ᐃ;
			var Ⲇⵠ = ⲆⵠⲆ * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = ⵠⲆⵠⵠ;
			var ᐃⵠⲆ = Ⲇᐃⵠ
		}
		Ⲇ.save();
		this.info & 255 && (this.info & 65280) != 65280 && (Ⲇⵠ += 2 * Math.random() - ⲆΔΔΔ, ᐃⵠⲆ += ΔΔᐃΔⵠ * Math.random() - ΔᐃΔⲆ);
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x + Ⲇⵠ, ᐃⲆⵠ.ⲆⲆΔ.y + this.y + ᐃⵠⲆ);
		Ⲇ.rotate(this.angle);
		ᐃᐃ = ᐃΔ[Δ.ⵠⵠᐃΔΔ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
		if (this.info & 255 && 65280 != (this.info & 65280)) this.rotate = (this.rotate + ⲆΔΔⲆ * 3) % (ⲆⵠΔⵠ * Math.PI);
		Ⲇ.rotate(this.rotate);
		ᐃᐃ = ᐃΔ[Δ.ⲆΔⵠᐃⵠΔⲆ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ΔΔⲆᐃ);
		Ⲇ.restore()
	}

	function ᐃⵠᐃΔᐃᐃⵠᐃⲆ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == false) this.ⵠⵠᐃ.ⲆᐃⲆ = ΔⵠⵠᐃΔ;
			var ⲆⵠⲆ = (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ * 600 * ᐃ;
			var Ⲇⵠ = ⲆⵠⲆ * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
			var ᐃⵠⲆ = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ
		} else {
			var Ⲇⵠ = ᐃⵠⵠⲆ;
			var ᐃⵠⲆ = ⵠᐃⲆⲆ
		}
		var ΔⲆⵠΔ = this.info & 15;
		if (this.info === ᐃⵠᐃΔⲆ || ΔⲆⵠΔ === 0) {
			Ⲇ.rotate(this.angle);
			this.ΔⵠⲆΔ.ⲆᐃⲆ();
			if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ΔΔΔΔᐃΔⵠ][ⲆⵠΔ.time];
			else var ᐃᐃ = ᐃΔ[Δ.ΔΔΔᐃⲆΔΔ][ⲆⵠΔ.time];
			var ⲆⲆᐃ = this.ΔⵠⲆΔ.ⲆⵠⲆ * -ᐃᐃ.width;
			var ⲆΔⲆ = this.ΔⵠⲆΔ.ⲆⵠⲆ * -ᐃᐃ.height;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2 + Ⲇⵠ, -ⲆΔⲆ / 2 + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ)
		} else {
			if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ⵠᐃⵠⵠᐃⵠⲆ][ⲆⵠΔ.time];
			else var ᐃᐃ = ᐃΔ[Δ.ΔⲆᐃⲆᐃ][ⲆⵠΔ.time];
			Ⲇ.translate(ⲆⵠⲆⲆ, ᐃᐃ.height / ᐃⲆᐃᐃ);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ - ᐃᐃ.width / 2, -ᐃᐃ.height + ᐃⵠⲆ)
		}
		Ⲇ.restore()
	}

	function ΔⲆⲆⲆⵠᐃᐃⲆⵠ() {
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		this.info === 0 ? ᐃᐃ = ᐃΔ[Δ.ᐃΔⲆΔⲆ][ⲆⵠΔ.time] : ᐃᐃ = ᐃΔ[Δ.ᐃΔⲆᐃΔᐃⲆ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⲆᐃΔⲆ, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == false) this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ;
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ΔᐃⲆⵠⵠΔⵠ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⲆⵠΔⵠ, -ⲆΔⲆ / ⲆᐃΔⲆ, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.globalAlpha = Δⵠᐃ
		}
		Ⲇ.restore()
	}

	function ΔᐃΔᐃᐃΔⲆⲆⵠ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		this.ⲆⲆⵠⲆⲆⲆⵠ = Math.min(ΔΔⵠΔ, this.ⲆⲆⵠⲆⲆⲆⵠ + ⲆΔΔⲆ * ΔᐃⵠΔ);
		Ⲇ.globalAlpha = Math.min(ⵠΔᐃ, Math.max(ⲆⵠⲆⲆ, ΔⵠΔⵠ.ΔⲆⲆᐃ(this, this.r) / 80)) * this.ⲆⲆⵠⲆⲆⲆⵠ;
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		ᐃᐃ = ᐃΔ[Δ.ΔⲆΔΔΔ][ⲆⵠΔ.time][this.ⵠΔⵠΔⵠ];
		if (2 > this.ⵠΔⵠΔⵠ) {
			ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width;
			ⲆΔⲆ = -ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ
		} else {
			this.ⲆⲆᐃᐃᐃⵠΔ === ⵠᐃⲆ ? (ⲆⲆᐃ = -ᐃᐃ.width, ⲆΔⲆ = -ᐃᐃ.height) : (ⲆⲆᐃ = -ᐃᐃ.width * 1.35, ⲆΔⲆ = 1.35 * -ᐃᐃ.height)
		}
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / ΔⲆᐃΔ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.globalAlpha = 1;
		Ⲇ.restore()
	}

	function ⲆⵠΔΔⲆⲆⵠΔⵠ() {
		var ᐃᐃ = undefined;
		var ᐃΔⵠⲆⲆᐃᐃ = ⲆΔΔⵠᐃ;
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		this.rotate.ⲆᐃⲆ();
		if (.1 <= this.ᐃΔᐃᐃᐃ && this.ᐃΔᐃᐃᐃ <= 1.1) {
			var ⲆⲆΔᐃ = Math.max(Δⵠⵠⵠ, Math.min(1, this.ᐃΔᐃᐃᐃ - .1));
			if (ⲆⲆΔᐃ < .2) ⲆⲆΔᐃ *= 5;
			else .8 < ⲆⲆΔᐃ ? ⲆⲆΔᐃ = (1 - ⲆⲆΔᐃ) * ΔⵠΔᐃ : ⲆⲆΔᐃ = ⲆᐃΔ;
			var ᐃᐃ = ᐃΔ[Δ.ⲆΔⵠⲆⲆᐃᐃ][ⲆⵠΔ.time];
			ⲆⲆᐃ = -ᐃᐃ.width * this.ⵠΔΔⲆ.ⲆⵠⲆ;
			ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.height;
			Ⲇ.globalAlpha = ⲆⲆΔᐃ;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⵠᐃΔⲆ, -ⲆΔⲆ / 4, ⲆⲆᐃ / ⲆᐃⵠΔ, ⲆΔⲆ / 2);
			var ᐃΔⵠⲆⲆᐃᐃ = ᐃΔ[Δ.ⲆⵠⵠⵠⵠⲆⵠ]
		}
		if (this.ᐃΔᐃᐃᐃ >= .9) {
			var ⲆⲆΔᐃ = Math.max(ⵠΔᐃⵠ, Math.min(ⵠᐃⵠΔ, this.ᐃΔᐃᐃᐃ - .9));
			if (ⲆⲆΔᐃ < .2) ⲆⲆΔᐃ *= 5;
			else ⲆⲆΔᐃ = ᐃⲆΔ;
			var ᐃᐃ = ᐃΔ[Δ.ΔΔΔⵠⲆⲆⲆ][ⲆⵠΔ.time];
			ⲆⲆᐃ = -ᐃᐃ.width * this.ⵠΔΔⲆ.ⲆⵠⲆ;
			ⲆΔⲆ = -ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
			Ⲇ.globalAlpha = ⲆⲆΔᐃ;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⲆᐃᐃΔⵠ, -ⲆΔⲆ / ⲆΔᐃᐃΔ, ⲆⲆᐃ / 2, ⲆΔⲆ / ΔΔⲆᐃ);
			var ᐃΔⵠⲆⲆᐃᐃ = ᐃΔ[Δ.ⵠⵠⲆⲆⲆⵠΔ]
		}
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ && ⵠⲆⲆⲆⲆ !== ᐃΔⵠⲆⲆᐃᐃ) {
			this.ⵠⵠᐃ.ⲆᐃⲆ() && ΔⲆΔⵠΔ == this.ⵠⵠᐃ.Ⲇⵠⵠ && (this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ);
			Ⲇ.globalAlpha = (.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * ⲆⲆΔᐃ;
			ⲆⲆᐃ = -ᐃΔⵠⲆⲆᐃᐃ.width * this.ⵠΔΔⲆ.ⲆⵠⲆ;
			ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃΔⵠⲆⲆᐃᐃ.height;
			ᐃᐃⵠⲆ(Ⲇ, ᐃΔⵠⲆⲆᐃᐃ, -ⲆⲆᐃ / ⵠᐃᐃΔ, -ⲆΔⲆ / ᐃᐃΔΔᐃ, ⲆⲆᐃ / 2, ⲆΔⲆ / ᐃᐃΔⵠ)
		}
		Ⲇ.globalAlpha = 1;
		Ⲇ.restore()
	}

	function ⵠΔΔᐃⵠⵠᐃΔΔ() {
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == ΔⲆΔᐃΔ) this.ⵠⵠᐃ.ⲆᐃⲆ = ΔⵠΔΔⲆ;
			var ⲆⵠⲆ = ᐃ * (600 * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ));
			var Ⲇⵠ = ⲆⵠⲆ * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = 0;
			var ᐃⵠⲆ = ⵠⵠⵠ
		}
		Ⲇ.save();
		if (this.info & 255 && (this.info & 65280) != 65280) {
			Ⲇⵠ += Math.random() * 2 - 1;
			ᐃⵠⲆ += Math.random() * 2 - 1
		}
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x + Ⲇⵠ, ᐃⲆⵠ.ⲆⲆΔ.y + this.y + ᐃⵠⲆ);
		Ⲇ.rotate(this.angle);
		ᐃᐃ = ᐃΔ[Δ.ⵠΔᐃΔΔ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ⲆᐃⵠΔ);
		if (this.info & 255 && 65280 != (this.info & 65280)) this.rotate = (this.rotate + 3 * ⲆΔΔⲆ) % (Math.PI * ᐃⲆᐃⵠ);
		Ⲇ.rotate(this.rotate);
		ᐃᐃ = ᐃΔ[Δ.ⵠⵠᐃⵠⵠΔᐃ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ΔΔⲆⲆ, -ᐃᐃ.height / 2);
		Ⲇ.restore()
	}

	function ⲆΔⲆᐃΔᐃⵠⲆᐃ() {
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && false == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ && (this.ⵠⵠᐃ.ⲆᐃⲆ = ΔⲆΔⵠΔ);
			var ⲆⵠⲆ = ᐃ * ((ⵠᐃⵠΔ - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ * 600);
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = 0;
			var ᐃⵠⲆ = 0
		}
		Ⲇ.save();
		this.info & 255 && 65280 != (this.info & 65280) && (Ⲇⵠ += Math.random() * 2 - ᐃⲆΔ, ᐃⵠⲆ += 2 * Math.random() - Ⲇⵠᐃ);
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x + Ⲇⵠ, ᐃⲆⵠ.ⲆⲆΔ.y + this.y + ᐃⵠⲆ);
		Ⲇ.rotate(this.angle);
		ᐃᐃ = ᐃΔ[Δ.ᐃΔⲆᐃΔ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ΔⲆᐃΔ, -ᐃᐃ.height / 2);
		if (this.info & 255 && (this.info & 65280) != 65280) this.rotate = (this.rotate + ⲆⲆᐃⵠ * ⲆΔΔⲆ) % (Math.PI * 2);
		Ⲇ.rotate(this.rotate);
		ᐃᐃ = ᐃΔ[Δ.ᐃᐃⵠᐃⲆΔᐃ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ΔΔⲆᐃ, -ᐃᐃ.height / 2);
		Ⲇ.restore()
	}
	const ⵠΔΔⲆΔΔᐃ = 139587;

	function ᐃⲆᐃⵠᐃΔⲆ(ⵠⲆᐃΔⵠᐃⲆ) {
		return ⵠⵠⲆΔᐃᐃᐃⲆΔ.String.fromCharCode(ⵠⲆᐃΔⵠᐃⲆ)
	}

	function ΔΔⵠᐃ(ⲆⵠⲆⵠΔⵠᐃ) {
		return ⲆⵠⲆⵠΔⵠᐃ.map(ᐃⲆᐃⵠᐃΔⲆ).join("")
	}
	const ⵠⵠᐃᐃⲆᐃⵠ = function() {
		const ⵠΔΔᐃ = ΔΔⵠᐃ([11616, 916, 916, 11398, 916, 916, 5123]);
		const ᐃΔⲆⵠ = {
			"ᐃⵠᐃⵠᐃⲆᐃ": 2745613,
			"ΔⵠᐃᐃΔⵠⵠ": 9712128,
			"ⵠΔΔⲆΔΔᐃ": 8963893,
			"ᐃⵠᐃⵠ": 2558066
		};
		if (ᐃΔⲆⵠ[ⵠΔΔᐃ] !== ᐃΔⲆⵠ.ⵠΔΔⲆΔΔᐃ) {
			const ⵠΔΔⲆΔΔᐃ = function() {
				for (let ᐃⲆᐃⵠᐃΔⲆ = 0; ᐃⲆᐃⵠᐃΔⲆ < 5; ᐃⲆᐃⵠᐃΔⲆ++) ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("click", (function() {
					ⵠΔΔⲆΔΔᐃ()
				}))
			};
			ⵠΔΔⲆΔΔᐃ()
		}
	};
	ⵠⵠᐃᐃⲆᐃⵠ();

	function ᐃᐃᐃᐃΔⲆΔᐃⲆ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == false && (this.ⵠⵠᐃ.ⲆᐃⲆ = ᐃⲆⵠⵠⲆ);
			var ⲆⵠⲆ = ᐃ * (600 * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ));
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ
		} else {
			var Ⲇⵠ = ⲆⲆⵠⲆ;
			var ᐃⵠⲆ = ᐃⵠⵠⲆ
		}
		if (0 === this.info) ᐃᐃ = ᐃΔ[Δ.ΔᐃΔⲆⲆ][ⲆⵠΔ.time];
		else ᐃᐃ = ᐃΔ[Δ.Ⲇⵠᐃᐃⵠ][ⲆⵠΔ.time][this.info - 1];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ᐃⲆᐃᐃ + Ⲇⵠ, -ᐃᐃ.height / ΔΔΔⵠ + ᐃⵠⲆ);
		Ⲇ.restore()
	}

	function ⵠⵠᐃⲆⲆᐃΔΔⲆ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		300 < ΔⵠΔⵠ.ΔⲆⲆᐃ(this, this.r) ? this.scale = Math.min(this.scale + ⲆΔΔⲆ / ΔᐃⵠΔ, 1.8) : this.scale = Math.max(this.scale - ⲆΔΔⲆ, 1);
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		this.rotate.ⲆᐃⲆ();
		if (this.info === ⵠᐃⲆ) ᐃᐃ = ᐃΔ[Δ.ⲆⵠⲆⵠᐃ][ⲆⵠΔ.time];
		else ᐃᐃ = ᐃΔ[Δ.ᐃᐃΔΔᐃΔⵠ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width * this.scale;
		ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.height * this.scale;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ᐃⲆⲆΔΔ, -ⲆΔⲆ / ᐃⲆⵠᐃⵠ, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == ΔΔᐃⵠᐃ && (this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ);
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⵠΔⵠⲆⵠΔᐃ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / ΔⲆᐃΔ, ⲆΔⲆ / ⵠΔⵠΔ);
			Ⲇ.globalAlpha = 1
		}
		if (ⵠⲆⵠⵠ === this.info) ᐃᐃ = ᐃΔ[Δ.ⲆΔⵠⲆⵠΔⲆ][ⲆⵠΔ.time];
		else ᐃᐃ = ᐃΔ[Δ.ΔⵠᐃⵠΔᐃΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width * this.scale;
		ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.height * this.scale;
		Ⲇ.save();
		Ⲇ.translate(-40 * ᐃ, ⵠΔΔΔⵠ * ᐃ);
		Ⲇ.rotate(this.rotate.ⲆⵠⲆ);
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ * ᐃ / ᐃᐃΔΔᐃ, -ⲆΔⲆ * ᐃ / ⵠⵠᐃΔ, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ΔΔᐃⵠΔᐃⲆ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ * ᐃ / Ⲇⵠⵠⵠ, -ⲆΔⲆ * ᐃ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / ⲆᐃⵠΔ);
			Ⲇ.globalAlpha = ⵠⲆΔⲆ
		}
		Ⲇ.restore();
		this.info === ⵠΔᐃᐃ ? ᐃᐃ = ᐃΔ[Δ.ᐃᐃⵠᐃᐃΔⵠ][ⲆⵠΔ.time] : ᐃᐃ = ᐃΔ[Δ.ΔΔⲆᐃΔⲆⵠ][ⲆⵠΔ.time];
		Ⲇ.save();
		Ⲇ.translate(40 * ᐃ, 10 * ᐃ);
		Ⲇ.rotate(-this.rotate.ⲆⵠⲆ);
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃ * -ⲆⲆᐃ / 4, ᐃ * -ⲆΔⲆ / ⵠᐃΔΔ, ⲆⲆᐃ / ᐃᐃΔⵠ, ⲆΔⲆ / 2);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⵠⲆᐃⵠⵠᐃⵠ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ * ᐃ / ⲆΔᐃΔⵠ, -ⲆΔⲆ * ᐃ / ᐃⲆⲆΔΔ, ⲆⲆᐃ / ⲆⵠΔⵠ, ⲆΔⲆ / ΔⲆᐃΔ);
			Ⲇ.globalAlpha = 1
		}
		Ⲇ.restore();
		Ⲇ.restore()
	}

	function ᐃⵠΔⲆⵠⵠᐃⲆⲆ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == ᐃⵠⲆⲆᐃ) this.ⵠⵠᐃ.ⲆᐃⲆ = false;
			var ⲆⵠⲆ = ⲆΔΔⲆ * (ΔΔⵠΔ - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600 * ᐃ;
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(this.ⵠⵠᐃ.angle - this.angle)
		} else {
			var Ⲇⵠ = ⵠⲆᐃ;
			var ᐃⵠⲆ = ΔΔᐃ
		}
		var ΔⲆⵠΔ = this.info & 15;
		if (ⵠⲆⲆⵠΔ === this.info || 0 === ΔⲆⵠΔ) {
			Ⲇ.rotate(this.angle);
			this.ΔⵠⲆΔ.ⲆᐃⲆ();
			if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ⵠΔⵠᐃⵠⵠⵠ][ⲆⵠΔ.time];
			else var ᐃᐃ = ᐃΔ[Δ.ⲆΔⲆⵠⵠⵠᐃ][ⲆⵠΔ.time];
			var ⲆⲆᐃ = this.ΔⵠⲆΔ.ⲆⵠⲆ * -ᐃᐃ.width;
			var ⲆΔⲆ = -ᐃᐃ.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2 + Ⲇⵠ, -ⲆΔⲆ / ⵠⵠⵠᐃ + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ)
		} else {
			if (this.info & 16) var ᐃᐃ = ᐃΔ[Δ.ⵠΔⲆⲆΔΔⵠ][ⲆⵠΔ.time];
			else var ᐃᐃ = ᐃΔ[Δ.ⲆⲆⵠΔⵠ][ⲆⵠΔ.time];
			Ⲇ.translate(0, ᐃᐃ.height / 2);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ - ᐃᐃ.width / 2, -ᐃᐃ.height + ᐃⵠⲆ)
		}
		Ⲇ.restore()
	}

	function ᐃⲆᐃⵠⵠⲆⲆΔΔ(ⲆΔ) {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		this.ΔⵠⲆΔ.ⲆᐃⲆ();
		Ⲇ.globalAlpha = .3;
		var ᐃᐃ = ᐃΔ[Δ.ΔᐃⲆᐃᐃΔⵠ][ⲆⵠΔ.time];
		var ⲆⲆᐃ = -ᐃᐃ.width * this.ΔⵠⲆΔ.ⲆⵠⲆ;
		var ⲆΔⲆ = this.ΔⵠⲆΔ.ⲆⵠⲆ * -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ᐃⲆᐃⵠ, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.globalAlpha = ΔⲆᐃⲆ;
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == false) this.ⵠⵠᐃ.ⲆᐃⲆ = false;
			var ⲆⵠⲆ = ᐃ * (600 * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ));
			var Ⲇⵠ = ⲆⵠⲆ * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
			var ᐃⵠⲆ = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ
		} else {
			var Ⲇⵠ = ⵠⵠⲆⵠ;
			var ᐃⵠⲆ = ⵠΔᐃᐃ
		}
		ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ⲆⲆⲆⲆ + Ⲇⵠ, -ᐃᐃ.height / ⵠⵠⵠᐃ + ᐃⵠⲆ);
		Ⲇ.restore()
	}

	function ⲆⵠⵠⵠⵠᐃⲆΔΔ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (ΔⵠΔⵠ.ΔⲆⲆᐃ(this, this.r) > 300) this.scale = Math.min(this.scale + ⲆΔΔⲆ / 2, 1.8);
		else this.scale = Math.max(this.scale - ⲆΔΔⲆ, 1);
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		this.rotate.ⲆᐃⲆ();
		0 === this.info ? ᐃᐃ = ᐃΔ[Δ.ⲆᐃⲆⲆΔ][ⲆⵠΔ.time] : ᐃᐃ = ᐃΔ[Δ.ⵠⵠᐃⲆΔᐃᐃ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.scale * (-ᐃᐃ.width * this.ⵠΔΔⲆ.ⲆⵠⲆ);
		ⲆΔⲆ = this.scale * (-ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ);
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⵠᐃΔⲆ, -ⲆΔⲆ / ᐃⲆⵠᐃⵠ, ⲆⲆᐃ / ᐃᐃᐃⵠ, ⲆΔⲆ / ΔΔⲆᐃ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			this.ⵠⵠᐃ.ⲆᐃⲆ() && false == this.ⵠⵠᐃ.Ⲇⵠⵠ && (this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ);
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⲆᐃⲆⵠⵠΔᐃ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ᐃᐃⵠΔ, -ⲆΔⲆ / ⲆΔᐃΔⵠ, ⲆⲆᐃ / ᐃⲆᐃᐃ, ⲆΔⲆ / ⵠΔⵠΔ);
			Ⲇ.globalAlpha = 1
		}
		0 === this.info ? ᐃᐃ = ᐃΔ[Δ.ⵠΔⵠᐃⲆⵠⵠ][ⲆⵠΔ.time] : ᐃᐃ = ᐃΔ[Δ.ᐃΔΔᐃⲆΔⵠ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width * this.scale;
		ⲆΔⲆ = -ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ * this.scale;
		Ⲇ.save();
		Ⲇ.translate(-40 * ᐃ, ᐃⵠᐃⵠⲆ * ᐃ);
		Ⲇ.rotate(this.rotate.ⲆⵠⲆ);
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃ * -ⲆⲆᐃ / 4, ᐃ * -ⲆΔⲆ / ⵠⲆⲆⵠ, ⲆⲆᐃ / ⲆᐃΔⲆ, ⲆΔⲆ / 2);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⲆΔⵠΔⵠⵠⲆ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ * ᐃ / 4, ᐃ * -ⲆΔⲆ / ᐃⲆⲆΔΔ, ⲆⲆᐃ / 2, ⲆΔⲆ / ⵠⵠⵠᐃ);
			Ⲇ.globalAlpha = ⲆΔΔΔ
		}
		Ⲇ.restore();
		ⵠᐃⲆⲆ === this.info ? ᐃᐃ = ᐃΔ[Δ.ᐃᐃΔⲆᐃⵠⲆ][ⲆⵠΔ.time] : ᐃᐃ = ᐃΔ[Δ.ΔⵠΔⲆᐃⵠᐃ][ⲆⵠΔ.time];
		Ⲇ.save();
		Ⲇ.translate(40 * ᐃ, ᐃ * ⲆΔⵠΔⵠ);
		Ⲇ.rotate(-this.rotate.ⲆⵠⲆ);
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃ * -ⲆⲆᐃ / 4, -ⲆΔⲆ * ᐃ / ⵠⲆΔⵠ, ⲆⲆᐃ / 2, ⲆΔⲆ / ⲆⲆΔⲆ);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ⵠΔΔⵠᐃⵠⲆ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃ * -ⲆⲆᐃ / ⲆᐃᐃΔⵠ, ᐃ * -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
			Ⲇ.globalAlpha = ΔᐃⵠⲆ
		}
		Ⲇ.restore();
		Ⲇ.restore()
	}

	function ᐃᐃΔⵠᐃⵠⵠⵠⲆ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		this.ⵠᐃⵠᐃᐃ.ⲆᐃⲆ();
		ᐃᐃ = ᐃΔ[Δ.ⵠⲆᐃᐃᐃⵠΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ * -ᐃᐃ.width;
		ⲆΔⲆ = -ᐃᐃ.height * this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / ΔᐃΔᐃ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ⲆΔΔᐃΔⲆᐃΔⲆ() {
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && false == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ) this.ⵠⵠᐃ.ⲆᐃⲆ = false;
			var ⲆⵠⲆ = ᐃ * (ⲆΔΔⲆ * (ΔⲆᐃⲆ - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
			var Ⲇⵠ = ⲆⵠⲆ * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
			var ᐃⵠⲆ = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ
		} else {
			var Ⲇⵠ = 0;
			var ᐃⵠⲆ = ⵠⲆⵠⵠ
		}
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x + Ⲇⵠ, ᐃⲆⵠ.ⲆⲆΔ.y + this.y + ᐃⵠⲆ);
		Ⲇ.rotate(this.angle);
		ᐃᐃ = ᐃΔ[Δ.ᐃⵠΔᐃⲆ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ᐃᐃⲆⲆ, -ᐃᐃ.height / 2);
		Ⲇ.restore()
	}

	function ᐃⲆⵠᐃⵠΔᐃⵠΔ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
			if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && ⲆᐃᐃΔΔ == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ) this.ⵠⵠᐃ.ⲆᐃⲆ = false;
			var ⲆⵠⲆ = 600 * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * ⲆΔΔⲆ) * ᐃ;
			var Ⲇⵠ = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ;
			var ᐃⵠⲆ = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * ⲆⵠⲆ
		} else {
			var Ⲇⵠ = 0;
			var ᐃⵠⲆ = 0
		}
		if (this.action == ΔᐃΔᐃ) ᐃᐃ = ᐃΔ[Δ.ΔΔⵠᐃⵠᐃⲆ][ⲆⵠΔ.time];
		else ᐃᐃ = ᐃΔ[Δ.ⵠΔᐃΔᐃΔⲆ][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2 + Ⲇⵠ, -ᐃᐃ.height / 2 + ᐃⵠⲆ);
		Ⲇ.restore()
	}

	function ⵠᐃⵠΔΔⲆᐃⲆᐃ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		if (this.info & 31 && this.info & 992 && (this.info & 31744) != 31744 && (ⲆⵠⲆⲆ == this.ᐃΔΔᐃᐃ.length || this.ᐃΔΔᐃᐃ[this.ᐃΔΔᐃᐃ.length - ΔᐃⵠⲆ] <= Δ.ΔΔⵠⲆΔᐃᐃ)) this.ᐃΔΔᐃᐃ.push(Δ.ΔⵠⵠⵠᐃⲆⲆ);
		for (var Ⲇᐃ = 0; Ⲇᐃ < this.ᐃΔΔᐃᐃ.length; Ⲇᐃ++) {
			this.ᐃΔΔᐃᐃ[Ⲇᐃ] = Math.max(ΔΔᐃ, this.ᐃΔΔᐃᐃ[Ⲇᐃ] - ⲆΔΔⲆ * Δ.ᐃᐃᐃⵠⲆᐃᐃ);
			Ⲇ.globalAlpha = this.ᐃΔΔᐃᐃ[Ⲇᐃ] / 1.3;
			var ⲆⵠⲆ = 40 * (ᐃⲆΔ - this.ᐃΔΔᐃᐃ[Ⲇᐃ]);
			var ΔⲆΔ = (ᐃᐃΔ - this.ᐃΔΔᐃᐃ[Ⲇᐃ]) * 35 + 10;
			ᐃΔΔ(Ⲇ, -68 * ᐃ + Math.sin(-this.angle - Math.PI / 2) * ⲆⵠⲆ, -ᐃᐃΔΔΔ * ᐃ + ⲆⵠⲆ * Math.cos(-this.angle - Math.PI / 2), ΔⲆΔ);
			ΔΔ(Ⲇ, "#333333")
		}
		Ⲇ.globalAlpha = ⵠⲆⲆ;
		ⵠⵠⵠΔ < this.ᐃΔΔᐃᐃ.length && this.ᐃΔΔᐃᐃ[ⵠΔᐃᐃ] === 0 && this.ᐃΔΔᐃᐃ.shift();
		Ⲇ.restore()
	}

	function ᐃⵠⲆᐃΔᐃΔᐃΔ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		this.ⵠᐃⵠᐃᐃ.ⲆᐃⲆ();
		ᐃᐃ = ᐃΔ[Δ.ΔⲆⵠΔⲆⵠᐃ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width * this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ;
		ⲆΔⲆ = this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ * -ᐃᐃ.height;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ᐃᐃᐃⵠ, -ⲆΔⲆ / ᐃⲆᐃⵠ, ⲆⲆᐃ, ⲆΔⲆ);
		Ⲇ.restore()
	}

	function ⲆⲆΔΔΔⵠⵠΔⵠ(ⲆΔ, ⲆⲆⲆⲆΔΔᐃ) {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.angle);
		this.ⵠΔΔⲆ.ⲆᐃⲆ();
		ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time];
		ⲆⲆᐃ = -ᐃᐃ.width * this.ⵠΔΔⲆ.ⲆⵠⲆ;
		ⲆΔⲆ = -ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⲆΔᐃΔⵠ, -ⲆΔⲆ / 4, ⲆⲆᐃ / ΔᐃΔᐃ, ⲆΔⲆ / 2);
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == false) this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ;
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[ⲆⲆⲆⲆΔΔᐃ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⵠⵠᐃΔ, -ⲆΔⲆ / ⵠⲆⲆⵠ, ⲆⲆᐃ / ⲆⵠΔⵠ, ⲆΔⲆ / ⲆⲆⲆⲆ);
			Ⲇ.globalAlpha = ᐃⲆΔ
		}
		Ⲇ.restore()
	}
	var ΔⲆᐃⲆᐃᐃΔΔⲆ = function(ⵠΔⲆᐃΔ) {
		if (ⵠΔⲆᐃΔ > 0) {
			var ᐃᐃ = ᐃΔ[ⵠΔⲆᐃΔ][ⲆⵠΔ.time];
			switch (ⵠΔⲆᐃΔ) {
				case Δ.ⲆⵠⲆΔⵠ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / ΔᐃⵠΔ + ᐃᐃⲆⲆ * ᐃ, -ᐃᐃ.height / ΔᐃⵠΔ - ᐃ * 5);
					break;
				case Δ.ⵠⲆΔΔΔ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / ᐃⲆᐃᐃ, -ᐃᐃ.height / ᐃⲆᐃᐃ - ᐃ * 18);
					break;
				case Δ.ⵠⲆⲆΔⵠ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / ΔΔⲆⲆ, -ᐃᐃ.height / 2 - ⵠⲆΔⲆᐃ * ᐃ);
					break;
				case Δ.ⲆⵠᐃΔⵠ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2 - ᐃⲆΔⲆᐃⵠΔ * ᐃ);
					break;
				case Δ.ΔⲆⲆⵠΔ:
					ΔΔΔⲆⵠ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / 4, -ᐃᐃ.height / Ⲇⵠⵠⵠ - 20 * ᐃ);
					break;
				case Δ.ᐃΔΔΔᐃ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / ΔΔΔⵠ - ᐃ * 1, -ᐃᐃ.height / 2 - ᐃ * 23);
					break;
				case Δ.ΔᐃⵠⵠⲆ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / ⲆᐃΔⲆ, -ᐃᐃ.height / 2 - 5 * ᐃ);
					break;
				case Δ.ⲆⲆᐃⵠⲆ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ⲆᐃΔⲆ - ᐃⲆᐃᐃ * ᐃ);
					break;
				case Δ.ΔΔΔⲆΔ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / ᐃᐃᐃⵠ + ᐃ * 1.5, -ᐃᐃ.height / ΔΔΔⵠ - 1 * ᐃ);
					break;
				case Δ.ΔⲆΔΔⲆ:
				case Δ.ᐃᐃⵠⲆᐃ:
				case Δ.ΔⲆΔΔⵠ:
				case Δ.ⲆΔⵠⵠⲆ:
				case Δ.ᐃⲆΔΔⵠ:
				case Δ.ᐃΔⲆΔΔ:
				case Δ.ᐃΔΔΔⲆ:
				case Δ.ᐃⲆⲆⵠΔ:
				case Δ.ΔⲆⵠⵠⲆ:
				case Δ.ΔⵠⲆΔΔ:
				case Δ.ᐃⲆⲆⲆⵠ:
					ΔΔΔⲆⵠ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / ᐃⵠⵠⵠᐃ, -ᐃᐃ.height / ⵠⲆΔⵠ + ΔΔᐃΔⵠ * ᐃ);
					break;
				case Δ.ᐃⲆⲆᐃΔ:
				case Δ.ⲆⲆᐃΔⲆ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / 2 - ᐃ * 5, -ᐃᐃ.height / ⲆᐃⵠΔ - ᐃ * 2);
					break;
				case Δ.ⵠⲆⵠⲆⲆ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ᐃⲆᐃᐃ - 2 * ᐃ);
					break;
				case Δ.ⲆᐃⲆⵠΔ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ΔΔⲆⲆ - ᐃ * 2);
					break;
				case Δ.ᐃⵠⲆⵠΔ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / ΔΔⲆⲆ, -ᐃᐃ.height / 2 - ᐃ * 2);
					break;
				case Δ.ᐃΔⵠⵠΔ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / ΔⲆᐃΔ + 2 * ᐃ, -ᐃᐃ.height / ᐃⲆᐃⵠ);
					break;
				case Δ.ⵠⵠΔⵠⵠ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / ⵠⵠⵠᐃ, -ᐃᐃ.height / ΔΔΔⵠ - ᐃ * 5);
					break;
				case Δ.ᐃᐃⲆⵠΔ:
				case Δ.ⵠⲆⲆᐃΔ:
				case Δ.ⵠⵠⲆΔΔ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / 2 - Ⲇⵠᐃ * ᐃ, -ᐃᐃ.height / ᐃⲆᐃᐃ);
					break;
				case Δ.ⵠΔⲆᐃⲆ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ΔΔΔⵠ + ᐃ * 2);
					break;
				case Δ.ΔΔᐃΔΔ:
				case Δ.ⵠⵠΔⲆⲆ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / ⲆⵠΔⵠ, -ᐃᐃ.height / 2 + ᐃ * ⲆⵠⲆⵠⵠ);
					break;
				case Δ.ΔⲆⲆᐃⲆ:
					ΔⲆᐃⵠⲆ(ⵠΔⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2 - ᐃ * ⲆᐃᐃΔⵠ);
					break
			}
		}
	};

	function ⵠⵠᐃΔΔΔⵠ() {
		if (this.ΔⲆⲆΔⵠ || this.ΔⲆᐃᐃⵠ === ⵠᐃⲆ) return;
		if (Settings.VehicleOpacity.enabled) ᐃ.globalAlpha = Settings.VehicleOpacity.o;
		if (this.r.x != this.x || this.y != this.r.y) {
			var Δᐃⵠ = (ΔⵠΔⵠ.ⲆΔᐃⵠΔΔᐃ(this.x, this.y, this.r.x, this.r.y) + Math.PI / ΔΔᐃΔⵠ) % (2 * Math.PI);
			this.ΔⲆᐃⵠᐃ = ΔⵠΔⵠ.ⵠⵠΔΔᐃⵠⲆ(Δᐃⵠ, this.ΔⲆᐃⵠᐃ);
			this.ΔⲆᐃⵠᐃ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(this.ΔⲆᐃⵠᐃ, Δᐃⵠ, .018)
		}
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		Ⲇ.rotate(this.ΔⲆᐃⵠᐃ);
		if (this.ΔⲆᐃᐃⵠ === ⵠⵠ.ⲆᐃᐃⵠⲆ) {
			if (this.ⲆⲆⲆΔᐃ > 50 || this.ᐃⵠΔⵠⲆ > ⵠⵠⵠ) {
				if (this.ⲆⲆⲆΔᐃ > 50) this.ᐃⵠΔⵠⲆ = Math.min(Ⲇⵠᐃ, this.ᐃⵠΔⵠⲆ + ⲆΔΔⲆ);
				else this.ᐃⵠΔⵠⲆ = Math.max(0, this.ᐃⵠΔⵠⲆ - ⲆΔΔⲆ);
				Ⲇ.globalAlpha = this.ᐃⵠΔⵠⲆ;
				var ᐃᐃ = ᐃΔ[Δ.ⵠᐃⵠΔⵠⵠⵠ][ⲆⵠΔ.time];
				ΔΔΔⲆⵠ(Δ.ⵠᐃⵠΔⵠⵠⵠ, ᐃᐃ, -ᐃᐃ.width / 4, -ᐃᐃ.height / ᐃᐃΔΔᐃ);
				Ⲇ.globalAlpha = Settings.VehicleOpacity.enabled ? Settings.VehicleOpacity.o : 1
			}
			var ᐃᐃ = ᐃΔ[Δ.ⲆᐃᐃⵠⲆ][ⲆⵠΔ.time];
			ΔΔΔⲆⵠ(Δ.ⲆᐃᐃⵠⲆ, ᐃᐃ, -ᐃᐃ.width / ᐃΔⵠⵠ, -ᐃᐃ.height / ⵠⲆΔⵠ)
		} else if (this.ΔⲆᐃᐃⵠ === ⵠⵠ.ΔⵠⲆΔᐃ) {
			this.ⲆᐃⵠⵠΔ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(this.ⲆᐃⵠⵠΔ, this.ⲆⲆⲆΔᐃ, .018);
			this.ᐃⵠΔⵠᐃΔⵠ.ⲆᐃⲆ();
			if (this.ⲆⲆⲆΔᐃ > 85) this.ᐃⵠΔⵠⲆ = Math.min(ⵠⲆΔⲆ, this.ᐃⵠΔⵠⲆ + ⲆΔΔⲆ / 4);
			else this.ᐃⵠΔⵠⲆ = Math.max(.1, this.ᐃⵠΔⵠⲆ - ⲆΔΔⲆ);
			var ᐃᐃ = ᐃΔ[Δ.ⲆⵠⵠⵠⲆᐃᐃ][ⲆⵠΔ.time];
			ΔΔΔⲆⵠ(Δ.ⲆⵠⵠⵠⲆᐃᐃ, ᐃᐃ, -ᐃᐃ.width / ΔⵠⵠⲆ, -ᐃᐃ.height / 4);
			ᐃᐃ = ᐃΔ[Δ.ⲆⲆΔⵠⵠΔⲆ][ⲆⵠΔ.time];
			ⲆⲆᐃ = -ᐃᐃ.width;
			ⲆΔⲆ = -ᐃᐃ.height;
			Ⲇ.save();
			Ⲇ.translate(-ΔⲆΔⲆΔ * ᐃ, ᐃ * -20);
			Ⲇ.rotate(this.ᐃⵠΔⵠᐃΔⵠ.ⲆⵠⲆ * this.ᐃⵠΔⵠⲆ);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / ΔᐃΔᐃ);
			Ⲇ.restore();
			ᐃᐃ = ᐃΔ[Δ.ⲆⵠⲆᐃⵠⵠᐃ][ⲆⵠΔ.time];
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 20, -ᐃⲆᐃΔⲆ * ᐃ);
			Ⲇ.rotate(-this.ᐃⵠΔⵠᐃΔⵠ.ⲆⵠⲆ * this.ᐃⵠΔⵠⲆ);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 4, -ⲆΔⲆ / ᐃΔᐃΔ, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
			Ⲇ.restore()
		} else if (ⵠⵠ.ⲆᐃⲆⲆΔ === this.ΔⲆᐃᐃⵠ) {
			this.ⲆᐃⵠⵠΔ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(this.ⲆᐃⵠⵠΔ, this.ⲆⲆⲆΔᐃ, .018);
			this.ᐃⵠΔⵠᐃΔⵠ.ⲆᐃⲆ();
			this.ⲆⲆⲆΔᐃ > 85 ? this.ᐃⵠΔⵠⲆ = Math.min(1, this.ᐃⵠΔⵠⲆ + ⲆΔΔⲆ / 4) : this.ᐃⵠΔⵠⲆ = Math.max(.1, this.ᐃⵠΔⵠⲆ - ⲆΔΔⲆ);
			var ᐃᐃ = ᐃΔ[Δ.ⵠⲆᐃᐃΔⵠΔ][ⲆⵠΔ.time];
			ΔΔΔⲆⵠ(Δ.ⵠⲆᐃᐃΔⵠΔ, ᐃᐃ, -ᐃᐃ.width / 4, -ᐃᐃ.height / ᐃⲆᐃⲆ);
			ᐃᐃ = ᐃΔ[Δ.ⵠΔᐃᐃᐃᐃᐃ][ⲆⵠΔ.time];
			ⲆⲆᐃ = -ᐃᐃ.width;
			ⲆΔⲆ = -ᐃᐃ.height;
			Ⲇ.save();
			Ⲇ.translate(ᐃ * -40, -45 * ᐃ);
			Ⲇ.rotate(this.ᐃⵠΔⵠᐃΔⵠ.ⲆⵠⲆ * this.ᐃⵠΔⵠⲆ);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⵠⲆⲆⵠ, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
			Ⲇ.restore();
			ᐃᐃ = ᐃΔ[Δ.ⲆᐃⵠⵠⲆᐃⲆ][ⲆⵠΔ.time];
			Ⲇ.save();
			Ⲇ.translate(ᐃ * 40, ᐃ * -45);
			Ⲇ.rotate(-this.ᐃⵠΔⵠᐃΔⵠ.ⲆⵠⲆ * this.ᐃⵠΔⵠⲆ);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⵠⲆΔⵠ, -ⲆΔⲆ / 4, ⲆⲆᐃ / ᐃⲆᐃᐃ, ⲆΔⲆ / ΔΔᐃΔⵠ);
			Ⲇ.restore()
		} else if (this.ΔⲆᐃᐃⵠ === ⵠⵠ.ⲆⵠⲆⵠᐃ) {
			this.ⲆᐃⵠⵠΔ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(this.ⲆᐃⵠⵠΔ, this.ⲆⲆⲆΔᐃ, .018);
			this.ᐃⵠΔⵠᐃΔⵠ.ⲆᐃⲆ();
			if (this.ⲆⲆⲆΔᐃ > 85) this.ᐃⵠΔⵠⲆ = Math.min(ⵠⲆⲆ, this.ᐃⵠΔⵠⲆ + ⲆΔΔⲆ / ᐃⲆⲆΔΔ);
			else this.ᐃⵠΔⵠⲆ = Math.max(.1, this.ᐃⵠΔⵠⲆ - ⲆΔΔⲆ);
			var ᐃᐃ = ᐃΔ[Δ.ᐃᐃⵠᐃᐃⲆᐃ][ⲆⵠΔ.time];
			ΔΔΔⲆⵠ(Δ.ᐃᐃⵠᐃᐃⲆᐃ, ᐃᐃ, -ᐃᐃ.width / 4, -ᐃᐃ.height / ᐃⵠⵠⵠᐃ);
			ᐃᐃ = ᐃΔ[Δ.ⲆΔᐃᐃⲆΔᐃ][ⲆⵠΔ.time];
			ⲆⲆᐃ = -ᐃᐃ.width;
			ⲆΔⲆ = -ᐃᐃ.height;
			Ⲇ.save();
			Ⲇ.translate(ᐃ * -40, ᐃ * -45);
			Ⲇ.rotate(this.ᐃⵠΔⵠⲆ * this.ᐃⵠΔⵠᐃΔⵠ.ⲆⵠⲆ);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ᐃᐃⵠΔ, -ⲆΔⲆ / 4, ⲆⲆᐃ / ᐃⲆᐃᐃ, ⲆΔⲆ / ΔΔΔⵠ);
			Ⲇ.restore();
			ᐃᐃ = ᐃΔ[Δ.ᐃᐃⲆΔΔᐃⲆ][ⲆⵠΔ.time];
			Ⲇ.save();
			Ⲇ.translate(40 * ᐃ, ᐃ * -45);
			Ⲇ.rotate(-this.ᐃⵠΔⵠᐃΔⵠ.ⲆⵠⲆ * this.ᐃⵠΔⵠⲆ);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 4, -ⲆΔⲆ / ⵠᐃΔⲆ, ⲆⲆᐃ / ᐃⲆᐃᐃ, ⲆΔⲆ / 2);
			Ⲇ.restore()
		} else if (ⵠⵠ.ΔⲆᐃⵠⵠ === this.ΔⲆᐃᐃⵠ) {
			this.ⲆᐃⵠⵠΔ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(this.ⲆᐃⵠⵠΔ, this.ⲆⲆⲆΔᐃ, .018);
			var ᐃᐃ = ᐃΔ[Δ.ΔⲆᐃⵠⵠ][ⲆⵠΔ.time];
			ΔΔΔⲆⵠ(Δ.ΔⲆᐃⵠⵠ, ᐃᐃ, -ᐃᐃ.width / ⵠᐃᐃΔ, -ᐃᐃ.height / ᐃⲆⲆΔΔ)
		} else if (this.ΔⲆᐃᐃⵠ === ⵠⵠ.ⵠⵠⵠⵠΔ) {
			this.ⲆᐃⵠⵠΔ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(this.ⲆᐃⵠⵠΔ, this.ⲆⲆⲆΔᐃ, .018);
			var ᐃᐃ = ᐃΔ[Δ.ⵠⵠⵠⵠΔ][ⲆⵠΔ.time];
			ΔΔΔⲆⵠ(Δ.ⵠⵠⵠⵠΔ, ᐃᐃ, -ᐃᐃ.width / ⵠᐃᐃΔ, -ᐃᐃ.height / ⲆᐃᐃΔⵠ)
		} else if (ⵠⵠ.ᐃΔⲆᐃⲆ === this.ΔⲆᐃᐃⵠ) {
			var ᐃᐃ = ᐃΔ[Δ.ᐃΔⲆᐃⲆ][ⲆⵠΔ.time];
			ΔΔΔⲆⵠ(Δ.ᐃΔⲆᐃⲆ, ᐃᐃ, -ᐃᐃ.width / 4, -ᐃᐃ.height / 4)
		} else if (ⵠⵠ.ⲆΔΔᐃⲆ === this.ΔⲆᐃᐃⵠ) {
			var ᐃᐃ = ᐃΔ[Δ.ⲆΔΔᐃⲆᐃΔ][ⲆⵠΔ.time];
			if (this.ⲆⲆⲆΔᐃ > 85) this.ᐃⵠΔⵠⲆ = Math.min(1, this.ᐃⵠΔⵠⲆ + ⲆΔΔⲆ / ⵠⵠᐃΔ);
			else this.ᐃⵠΔⵠⲆ = Math.max(ⵠⲆΔ, this.ᐃⵠΔⵠⲆ - ⲆΔΔⲆ);
			this.ΔᐃⲆᐃᐃ += 60 * ⲆΔΔⲆ;
			this.ΔᐃⲆᐃᐃ > 60 && (this.ΔᐃⲆᐃᐃ -= 60);
			var ⵠᐃΔⲆⵠ = (-ΔΔⵠΔᐃ + 12 * (30 > this.ΔᐃⲆᐃᐃ ? this.ΔᐃⲆᐃᐃ / 30 : ΔⲆᐃᐃ - (this.ΔᐃⲆᐃᐃ - 30) / 30)) * this.ᐃⵠΔⵠⲆ;
			ΔΔΔⲆⵠ(Δ.ⲆΔΔᐃⲆᐃΔ, ᐃᐃ, -ᐃᐃ.width / 4, -ᐃᐃ.height / 4 + ⵠᐃΔⲆⵠ)
		} else if (this.ΔⲆᐃᐃⵠ === ⵠⵠ.ⲆⲆᐃΔΔ) {
			var ᐃᐃ = ᐃΔ[Δ.ⵠΔⲆΔᐃⵠⵠ][ⲆⵠΔ.time];
			85 < this.ⲆⲆⲆΔᐃ ? this.ᐃⵠΔⵠⲆ = Math.min(1, this.ᐃⵠΔⵠⲆ + ⲆΔΔⲆ / 4) : this.ᐃⵠΔⵠⲆ = Math.max(ΔΔᐃᐃ, this.ᐃⵠΔⵠⲆ - ⲆΔΔⲆ);
			this.ΔᐃⲆᐃᐃ += ⲆΔΔⲆ * 60;
			if (this.ΔᐃⲆᐃᐃ > 60) this.ΔᐃⲆᐃᐃ -= 60;
			var ⵠᐃΔⲆⵠ = this.ᐃⵠΔⵠⲆ * (-ⵠⲆⲆᐃᐃ + (30 > this.ΔᐃⲆᐃᐃ ? this.ΔᐃⲆᐃᐃ / 30 : ⵠᐃⵠΔ - (this.ΔᐃⲆᐃᐃ - 30) / 30) * ⵠᐃⵠΔᐃ);
			ΔΔΔⲆⵠ(Δ.ⵠΔⲆΔᐃⵠⵠ, ᐃᐃ, -ᐃᐃ.width / 4, -ᐃᐃ.height / ⵠⵠᐃΔ + ⵠᐃΔⲆⵠ)
		} else if (ⵠⵠ.ⵠⲆⲆⵠᐃ === this.ΔⲆᐃᐃⵠ) {
			var ΔⵠᐃⵠΔ = Math.PI / ᐃᐃᐃⵠ;
			var ⲆⲆᐃⵠᐃΔⵠ = Math.PI / 4;
			var ᐃᐃ = ᐃΔ[Δ.ⲆΔⲆⲆΔⵠⵠ][ⲆⵠΔ.time];
			if (this.ⲆⲆⲆΔᐃ > 85) this.ᐃⵠΔⵠⲆ = Math.min(ΔⵠⲆⲆ, this.ᐃⵠΔⵠⲆ + ⲆΔΔⲆ / ΔⵠⵠⲆ);
			else this.ᐃⵠΔⵠⲆ = Math.max(0, this.ᐃⵠΔⵠⲆ - ⲆΔΔⲆ);
			this.ΔᐃⲆᐃᐃ += 60 * ⲆΔΔⲆ;
			if (this.ΔᐃⲆᐃᐃ > 60) this.ΔᐃⲆᐃᐃ -= 60;
			var ⵠᐃΔⲆⵠ = (-6 + ⲆⲆᐃⵠⲆⵠⲆ * (this.ΔᐃⲆᐃᐃ < 30 ? this.ΔᐃⲆᐃᐃ / 30 : ΔΔΔᐃ - (this.ΔᐃⲆᐃᐃ - 30) / 30)) * this.ᐃⵠΔⵠⲆ;
			ΔΔΔⲆⵠ(Δ.ⲆΔⲆⲆΔⵠⵠ, ᐃᐃ, -ᐃᐃ.width / 4 + ⵠᐃΔⲆⵠ, -ᐃᐃ.height / 4);
			Ⲇ.restore();
			Ⲇ.save();
			Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
			Ⲇ.rotate(Math.PI + this.ΔⲆᐃⵠᐃ + ⲆⲆᐃⵠᐃΔⵠ);
			Ⲇ.translate(120, ⵠᐃΔⲆⵠ);
			Ⲇ.rotate(ΔⵠᐃⵠΔ);
			ᐃᐃ = ᐃΔ[Δ.ᐃⲆᐃⵠⲆⲆⵠ][ⲆⵠΔ.time];
			ⲆⲆᐃ = -ᐃᐃ.width;
			ⲆΔⲆ = -ᐃᐃ.height;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ΔΔᐃΔⵠ, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
			Ⲇ.restore();
			Ⲇ.save();
			Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
			Ⲇ.rotate(Math.PI + this.ΔⲆᐃⵠᐃ + ΔⵠᐃⵠΔ + ⲆⲆᐃⵠᐃΔⵠ);
			Ⲇ.translate(120, ⵠᐃΔⲆⵠ);
			Ⲇ.rotate(ΔⵠᐃⵠΔ);
			ᐃᐃ = ᐃΔ[Δ.ᐃⵠⲆΔΔⲆⵠ][ⲆⵠΔ.time];
			ⲆⲆᐃ = -ᐃᐃ.width;
			ⲆΔⲆ = -ᐃᐃ.height;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / ΔᐃΔᐃ, ⲆⲆᐃ, ⲆΔⲆ)
		}
		Ⲇ.restore()
		if (Settings.VehicleOpacity.enabled) Ⲇ.globalalpha = 1
	}
	ⲆΔⵠᐃⲆΔⲆᐃΔ = 0;
	ᐃⵠᐃΔⵠⲆᐃⲆⵠ = 1;
	ⲆᐃⲆΔᐃᐃΔΔᐃ = 2;
	ᐃΔΔᐃᐃⲆⲆᐃᐃ = ⲆⲆᐃⵠ;
	ⵠⲆⲆᐃⲆⲆⲆΔⵠ = 4;
	ᐃⲆⲆⲆⵠⲆΔ = [
		[],
		[],
		[],
		[],
		[]
	];
	ΔⲆⲆⵠⲆⲆⲆⵠᐃ = [ⵠ[370], "#00BB00", "#1CE7E0", "#DBE71C", ⵠ[370]];

	function ⲆⵠⵠⵠⵠᐃⲆ(ⵠⲆᐃΔᐃΔⲆ, ΔΔΔᐃⵠⵠⵠ, ⵠⲆⵠⵠⵠ) {
		if (1 !== ΔΔΔᐃⵠⵠⵠ.ᐃⲆⵠᐃⲆΔⵠ()) return ΔΔΔᐃⵠⵠⵠ;
		var ⲆΔⲆᐃⵠΔⲆ = ᐃⲆⲆⲆⵠⲆΔ[ⵠⲆⵠⵠⵠ][ⵠⲆᐃΔᐃΔⲆ];
		if (ⲆΔⲆᐃⵠΔⲆ === ᐃΔᐃΔΔᐃΔ) {
			ⲆΔⲆᐃⵠΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
			var ⲆᐃⵠⲆΔᐃᐃ = ⲆΔⲆᐃⵠΔⲆ.getContext(ⵠ[444]);
			var ⵠΔΔ = ΔΔΔᐃⵠⵠⵠ.width;
			var ⵠⵠⲆ = ΔΔΔᐃⵠⵠⵠ.height;
			ⲆΔⲆᐃⵠΔⲆ.width = ⵠΔΔ;
			ⲆΔⲆᐃⵠΔⲆ.height = ⵠⵠⲆ;
			ⲆᐃⵠⲆΔᐃᐃ.drawImage(ΔΔΔᐃⵠⵠⵠ, 0, 0);
			ⲆᐃⵠⲆΔᐃᐃ.globalCompositeOperation = "source-in";
			ⲆᐃⵠⲆΔᐃᐃ.fillStyle = ΔⲆⲆⵠⲆⲆⲆⵠᐃ[ⵠⲆⵠⵠⵠ];
			ⲆᐃⵠⲆΔᐃᐃ.fillRect(0, ⵠΔᐃᐃ, ⵠΔΔ, ⵠⵠⲆ);
			ᐃⲆⲆⲆⵠⲆΔ[ⵠⲆⵠⵠⵠ][ⵠⲆᐃΔᐃΔⲆ] = ⲆΔⲆᐃⵠΔⲆ
		}
		return ⲆΔⲆᐃⵠΔⲆ
	}

	function ᐃⵠⵠⵠⲆᐃΔⵠⲆ() {
		var Δⵠⵠⵠⵠᐃᐃ = 0;
		switch (this.right) {
			case Δ.ᐃΔⲆᐃⵠ:
			case Δ.ⵠΔⲆⲆΔ:
			case Δ.ᐃⲆⲆⵠⵠ:
			case Δ.ΔⵠΔⵠⲆ:
			case Δ.ⵠᐃΔⵠΔ:
			case Δ.ⵠᐃΔΔΔ:
				var Δⵠⵠⵠⵠᐃᐃ = 1;
				break
		}
		if (this.ΔⲆⲆΔⵠ) {
			for (var Ⲇᐃ = 0; this.bubbles.length > Ⲇᐃ; Ⲇᐃ++) {
				var ⲆⲆᐃΔ = this.bubbles[Ⲇᐃ];
				if (.5 < ⲆⲆᐃΔ.ᐃΔᐃᐃⵠ) var ⲆΔⵠΔ = Ⲇⵠᐃ - (ⲆⲆᐃΔ.ᐃΔᐃᐃⵠ - .5) * 2;
				else var ⲆΔⵠΔ = ⲆⲆᐃΔ.ᐃΔᐃᐃⵠ * ᐃᐃΔⵠ;
				Ⲇ.globalAlpha = ⲆΔⵠΔ;
				var ᐃᐃ = ᐃΔ[Δ.ᐃⲆⵠⵠΔⵠⲆ][ⲆⵠΔ.time][ⲆⲆᐃΔ.id];
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠ.ⲆⲆΔ.x + ⲆⲆᐃΔ.x - ᐃᐃ.width / 2, ᐃⲆⵠ.ⲆⲆΔ.y + ⲆⲆᐃΔ.y - ᐃᐃ.height / 2);
				Ⲇ.globalAlpha = 1
			}
			return
		}
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		ⲆⵠΔ.ⲆΔⲆⵠⵠⵠⲆᐃⵠ(this);
		this.action & ⲆΔᐃᐃ.ⲆⲆᐃⵠᐃΔᐃ && ΔⲆⵠⵠⲆⵠΔⵠⵠ(this);
		Ⲇ.save();
		Ⲇ.rotate(this.angle - Math.PI / ⵠΔⵠΔ);
		if (!(this.action & ⲆΔᐃᐃ.ⲆⲆᐃⵠᐃΔᐃ)) {
			if (this.action & ⲆΔᐃᐃ.IDLE || this.ΔⲆᐃᐃⵠ !== 0) {
				this.ⵠΔΔΔᐃΔΔ.ⲆᐃⲆ()
			} else this.action & ⲆΔᐃᐃ.ᐃᐃⵠΔⵠΔⲆ && this.ᐃⲆⵠⲆⲆⲆⲆ.ⲆᐃⲆ()
		}
		var Ⲇⵠ = this.ⵠΔΔΔᐃΔΔ.ⲆⵠⲆ;
		var ᐃⵠⲆ = this.ᐃⲆⵠⲆⲆⲆⲆ.ⲆⵠⲆ;
		var ⵠᐃΔⵠⲆ;
		if (this.ⵠΔⲆᐃΔ === Δ.ⲆᐃⲆⵠΔ) {
			ᐃᐃ = ᐃΔ[Δ.Ⲇⵠᐃⵠⵠ][ⲆⵠΔ.time];
			ⵠᐃΔⵠⲆ = Δ.Ⲇⵠᐃⵠⵠ
		} else if (this.ⵠΔⲆᐃΔ === Δ.ᐃᐃⵠⲆᐃ) {
			ᐃᐃ = ᐃΔ[Δ.ᐃᐃⲆⵠⵠ][ⲆⵠΔ.time];
			ⵠᐃΔⵠⲆ = Δ.ᐃᐃⲆⵠⵠ
		} else if (Δ.ΔⲆΔΔⵠ === this.ⵠΔⲆᐃΔ) {
			ᐃᐃ = ᐃΔ[Δ.ⲆΔΔⵠⲆᐃΔ][ⲆⵠΔ.time];
			ⵠᐃΔⵠⲆ = Δ.ⲆΔΔⵠⲆᐃΔ
		} else if (this.ⵠΔⲆᐃΔ === Δ.ⲆΔⵠⵠⲆ) {
			ᐃᐃ = ᐃΔ[Δ.ΔᐃⲆΔᐃᐃΔ][ⲆⵠΔ.time];
			ⵠᐃΔⵠⲆ = Δ.ΔᐃⲆΔᐃᐃΔ
		} else if (this.ⲆᐃᐃᐃⲆᐃΔ) {
			ᐃᐃ = ᐃΔ[Δ.ⵠⵠⲆⵠⵠΔΔ][ⲆⵠΔ.time];
			ⵠᐃΔⵠⲆ = Δ.ⵠⵠⲆⵠⵠΔΔ
		} else {
			ᐃᐃ = ᐃΔ[Δ.ΔᐃᐃⵠⲆ][this.ⲆΔⵠⵠ][ⲆⵠΔ.time];
			ⵠᐃΔⵠⲆ = Δ.ΔᐃᐃⵠⲆ
		}
		ⲆⲆⵠᐃ = ᐃΔ[Δ.ⲆΔΔΔᐃ][ⲆⵠΔ.time];
		var ⵠⲆⲆⵠⵠ = ᐃᐃ;
		var ΔᐃⲆΔⵠ = ⵠᐃΔⵠⲆ;
		if (this.action & ⲆΔᐃᐃ.ⲆⲆᐃⵠᐃΔᐃ) {
			if (this.attack.ⲆᐃⲆ() && ᐃΔⵠᐃⲆ == this.attack.Ⲇⵠⵠ) {
				this.ⵠⲆⲆⵠⵠ = !this.ⵠⲆⲆⵠⵠ;
				this.action -= ⲆΔᐃᐃ.ⲆⲆᐃⵠᐃΔᐃ;
				this.Ⲇᐃᐃⵠ == ᐃⲆⵠ.Ⲇᐃᐃⵠ && (ᐃⲆⵠ.control.ⵠΔΔΔ = ⵠᐃⲆⲆ)
			}
			ΔΔᐃᐃ <= this.right && (this.ⵠⲆⲆⵠⵠ = true);
			var ΔⵠΔⲆ = this.ⵠⲆⲆⵠⵠ ? this.attack.ⲆⵠⲆ : -this.attack.ⲆⵠⲆ / ⲆΔⵠⵠⵠ;
			var ⲆⵠΔⲆΔ = this.ⵠⲆⲆⵠⵠ ? this.attack.ⲆⵠⲆ / 3 : -this.attack.ⲆⵠⲆ;
			if (this.ⲆᐃᐃᐃⲆᐃΔ) {
				Ⲇ.save();
				Ⲇ.rotate(ΔⵠΔⲆ);
				ΔⲆᐃⵠⲆ(ⵠᐃΔⵠⲆ, ᐃᐃ, -ᐃᐃ.width / 2 - (66 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 2 + (ΔΔᐃᐃⵠ + ᐃⵠⲆ) * ᐃ);
				Ⲇ.restore();
				Ⲇ.save();
				Ⲇ.rotate(ⲆⵠΔⲆΔ);
				ΔⲆᐃⵠⲆ(ⵠᐃΔⵠⲆ, ᐃᐃ, -ᐃᐃ.width / ⲆⲆΔⲆ + ᐃ * (66 + Ⲇⵠ), -ᐃᐃ.height / ΔⵠⲆᐃ + ᐃ * (ᐃᐃᐃⲆ + ᐃⵠⲆ));
				Ⲇ.restore()
			} else {
				if (ⵠⵠⵠΔ === Δⵠⵠⵠⵠᐃᐃ) {
					Δ.ⵠᐃΔⲆᐃ === this.right && (ΔⵠΔⲆ = -ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ(-ΔⵠΔⲆ));
					Ⲇ.save();
					Ⲇ.rotate(ΔⵠΔⲆ);
					ΔⲆᐃⵠⲆ(Δ.ⲆΔΔΔᐃ, ⲆⲆⵠᐃ, -ⲆⲆⵠᐃ.width / 2 - (49 + Ⲇⵠ) * ᐃ, -ⲆⲆⵠᐃ.height / ⵠⵠⵠᐃ + (15 + ᐃⵠⲆ) * ᐃ);
					if (this.right === Δ.ᐃᐃΔⲆᐃ) {
						var ⲆΔᐃⲆⵠⲆᐃ = ᐃΔ[this.right][this.ⵠΔⲆΔᐃ][ⲆⵠΔ.time];
						ⵠⲆᐃⲆⵠ(this.right, this.ⵠΔⲆΔᐃ, ⲆΔᐃⲆⵠⲆᐃ, -ⲆΔᐃⲆⵠⲆᐃ.width / 4 - ᐃ * (62 + Ⲇⵠ), -ⲆΔᐃⲆⵠⲆᐃ.height / Ⲇⵠⵠⵠ + ᐃ * (ᐃⵠⲆ + 18))
					} else ⲆᐃᐃᐃⵠⲆⲆ(this.right, Ⲇⵠ, ᐃⵠⲆ);
					if (ⵠᐃΔⵠⲆ >= Δ.ᐃᐃⲆⵠⵠ) ΔΔΔⲆⵠ(ⵠᐃΔⵠⲆ, ᐃᐃ, -ᐃᐃ.width / 4 - ᐃ * (49 + Ⲇⵠ), -ᐃᐃ.height / 4 + (11 + ᐃⵠⲆ) * ᐃ);
					else ⵠᐃΔⵠⲆ !== Δ.Ⲇⵠᐃⵠⵠ ? ⵠⲆᐃⲆⵠ(ⵠᐃΔⵠⲆ, this.ⲆΔⵠⵠ, ᐃᐃ, -ᐃᐃ.width / 4 - ᐃ * (49 + Ⲇⵠ), -ᐃᐃ.height / 4 + (11 + ᐃⵠⲆ) * ᐃ) : ΔⲆᐃⵠⲆ(ⵠᐃΔⵠⲆ, ᐃᐃ, -ᐃᐃ.width / 2 - (49 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 2 + (ⵠΔΔᐃΔᐃΔ + ᐃⵠⲆ) * ᐃ);
					Ⲇ.restore();
					Ⲇ.save();
					Ⲇ.rotate(ⲆⵠΔⲆΔ);
					ΔⲆᐃⵠⲆ(Δ.ⲆΔΔΔᐃ, ⲆⲆⵠᐃ, -ⲆⲆⵠᐃ.width / ⲆᐃⵠΔ + (49 + Ⲇⵠ) * ᐃ, -ⲆⲆⵠᐃ.height / ΔΔᐃΔⵠ + (ⲆΔΔΔⲆⵠⵠⵠΔ + ᐃⵠⲆ) * ᐃ);
					if (Δ.ᐃᐃⲆⵠⵠ <= ⵠᐃΔⵠⲆ) ΔΔΔⲆⵠ(ⵠᐃΔⵠⲆ, ᐃᐃ, -ᐃᐃ.width / ᐃⲆᐃⲆ + ᐃ * (49 + Ⲇⵠ), -ᐃᐃ.height / Ⲇⵠⵠⵠ + ᐃ * (ⵠⲆᐃΔⵠⵠⲆ + ᐃⵠⲆ));
					else ⵠᐃΔⵠⲆ !== Δ.Ⲇⵠᐃⵠⵠ ? ⵠⲆᐃⲆⵠ(ⵠᐃΔⵠⲆ, this.ⲆΔⵠⵠ, ᐃᐃ, -ᐃᐃ.width / ᐃΔᐃΔ + ᐃ * (49 + Ⲇⵠ), -ᐃᐃ.height / ᐃᐃΔΔᐃ + (ᐃᐃⲆⵠⲆⲆᐃ + ᐃⵠⲆ) * ᐃ) : ΔⲆᐃⵠⲆ(ⵠᐃΔⵠⲆ, ᐃᐃ, -ᐃᐃ.width / 2 + (49 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 2 + ᐃ * (ⵠΔΔᐃΔᐃΔ + ᐃⵠⲆ));
					Ⲇ.restore()
				}
			}
		} else {
			if (this.ⲆᐃᐃᐃⲆᐃΔ) {
				ΔⲆᐃⵠⲆ(ⵠᐃΔⵠⲆ, ᐃᐃ, -ᐃᐃ.width / 2 - (66 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 2 + (5 + ᐃⵠⲆ) * ᐃ);
				ΔⲆᐃⵠⲆ(ⵠᐃΔⵠⲆ, ᐃᐃ, -ᐃᐃ.width / ⵠΔⵠΔ + ᐃ * (66 + Ⲇⵠ), -ᐃᐃ.height / ΔᐃⵠΔ + (ⵠⵠᐃᐃ + ᐃⵠⲆ) * ᐃ)
			} else {
				if (0 === Δⵠⵠⵠⵠᐃᐃ) {
					ΔⲆᐃⵠⲆ(Δ.ⲆΔΔΔᐃ, ⲆⲆⵠᐃ, -ⲆⲆⵠᐃ.width / 2 - (49 + Ⲇⵠ) * ᐃ, -ⲆⲆⵠᐃ.height / ⲆⵠΔⵠ + ᐃ * (15 + ᐃⵠⲆ));
					if (this.right === Δ.ᐃᐃΔⲆᐃ) {
						var ⲆΔᐃⲆⵠⲆᐃ = ᐃΔ[this.right][this.ⵠΔⲆΔᐃ][ⲆⵠΔ.time];
						ⵠⲆᐃⲆⵠ(this.right, this.ⵠΔⲆΔᐃ, ⲆΔᐃⲆⵠⲆᐃ, -ⲆΔᐃⲆⵠⲆᐃ.width / 4 - (62 + Ⲇⵠ) * ᐃ, -ⲆΔᐃⲆⵠⲆᐃ.height / 4 + ᐃ * (ᐃⵠⲆ + ⲆⲆⲆⲆⲆ))
					} else ⲆᐃᐃᐃⵠⲆⲆ(this.right, Ⲇⵠ, ᐃⵠⲆ);
					if (Δ.ᐃᐃⲆⵠⵠ <= ⵠᐃΔⵠⲆ) ΔΔΔⲆⵠ(ⵠᐃΔⵠⲆ, ᐃᐃ, -ᐃᐃ.width / ᐃᐃΔΔᐃ - (49 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / ⵠᐃΔΔ + (ⵠᐃⲆⵠᐃ + ᐃⵠⲆ) * ᐃ);
					else if (ⵠᐃΔⵠⲆ !== Δ.Ⲇⵠᐃⵠⵠ) ⵠⲆᐃⲆⵠ(ⵠᐃΔⵠⲆ, this.ⲆΔⵠⵠ, ᐃᐃ, -ᐃᐃ.width / 4 - (49 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 4 + (ⲆⵠⲆⲆⵠⵠⲆ + ᐃⵠⲆ) * ᐃ);
					else ΔⲆᐃⵠⲆ(ⵠᐃΔⵠⲆ, ᐃᐃ, -ᐃᐃ.width / ⲆⲆⲆⲆ - (49 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 2 + ᐃ * (11 + ᐃⵠⲆ));
					ΔⲆᐃⵠⲆ(Δ.ⲆΔΔΔᐃ, ⲆⲆⵠᐃ, -ⲆⲆⵠᐃ.width / ᐃⲆᐃᐃ + ᐃ * (49 + Ⲇⵠ), -ⲆⲆⵠᐃ.height / ΔᐃΔᐃ + (15 + ᐃⵠⲆ) * ᐃ);
					if (Δ.ᐃᐃⲆⵠⵠ <= ⵠᐃΔⵠⲆ) ΔΔΔⲆⵠ(ⵠᐃΔⵠⲆ, ᐃᐃ, -ᐃᐃ.width / 4 + ᐃ * (49 + Ⲇⵠ), -ᐃᐃ.height / 4 + ᐃ * (11 + ᐃⵠⲆ));
					else if (ⵠᐃΔⵠⲆ !== Δ.Ⲇⵠᐃⵠⵠ) ⵠⲆᐃⲆⵠ(ⵠᐃΔⵠⲆ, this.ⲆΔⵠⵠ, ᐃᐃ, -ᐃᐃ.width / ⵠⵠᐃΔ + (49 + Ⲇⵠ) * ᐃ, -ᐃᐃ.height / 4 + (ΔⵠⲆᐃⵠⲆᐃ + ᐃⵠⲆ) * ᐃ);
					else ΔⲆᐃⵠⲆ(ⵠᐃΔⵠⲆ, ᐃᐃ, -ᐃᐃ.width / 2 + ᐃ * (49 + Ⲇⵠ), -ᐃᐃ.height / 2 + (ⵠⲆᐃΔⵠⵠⲆ + ᐃⵠⲆ) * ᐃ)
				}
			}
		}
		if (this.ⲆⲆⲆᐃⵠ && 1 > this.ⵠΔⲆᐃΔ) {
			var ᐃᐃ = ᐃΔ[Δ.ⵠᐃⵠⲆ][this.ⵠⵠⵠΔⲆⵠⲆ][ⲆⵠΔ.time];
			ⵠⲆᐃⲆⵠ(Δ.ⵠᐃⵠⲆ, this.ⵠⵠⵠΔⲆⵠⲆ, ᐃᐃ, -ᐃᐃ.width / 4, -ᐃᐃ.height / 4 - 39 * ᐃ)
		}
		if (this.ⲆᐃᐃᐃⲆᐃΔ) {
			var ᐃᐃ = ᐃΔ[Δ.ⵠΔᐃⲆᐃⲆⲆ][ⲆⵠΔ.time];
			ΔⲆᐃⵠⲆ(Δ.ⵠΔᐃⲆᐃⲆⲆ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ΔΔΔⵠ);
			this.ⵠⵠΔⵠⲆᐃΔ.ⲆᐃⲆ();
			ᐃᐃ = ᐃΔ[Δ.ᐃΔᐃⲆᐃⲆⲆ][ⲆⵠΔ.time];
			ΔⲆᐃⵠⲆ(Δ.ᐃΔᐃⲆᐃⲆⲆ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ⲆᐃΔⲆ + this.ⵠⵠΔⵠⲆᐃΔ.ⲆⵠⲆ)
		} else {
			var ᐃᐃ = ᐃΔ[Δ.ᐃΔⵠⲆⵠ][this.ⲆΔⵠⵠ][ⲆⵠΔ.time];
			if (this.ⵠΔⲆᐃΔ !== Δ.ⲆᐃⲆⵠΔ) {
				ⵠⲆᐃⲆⵠ(Δ.ᐃΔⵠⲆⵠ, this.ⲆΔⵠⵠ, ᐃᐃ, -ᐃᐃ.width / 4, -ᐃᐃ.height / 4);
				if (ⵠΔᐃᐃ < this.ⵠⵠΔΔⵠ) {
					var ᐃᐃ = ᐃΔ[Δ.ΔᐃⲆΔᐃ][this.ⵠⵠΔΔⵠ][ⲆⵠΔ.time];
					ⵠⲆᐃⲆⵠ(Δ.ΔᐃⲆΔᐃ, this.ⵠⵠΔΔⵠ, ᐃᐃ, -ᐃᐃ.width / 4, -ᐃᐃ.height / ⵠᐃᐃΔ)
				}
			}
		}
		if (this.action & ⲆΔᐃᐃ.ⵠᐃᐃᐃᐃⲆΔ) {
			if (this.ᐃⵠⵠⲆⲆ.ⲆᐃⲆ() && ᐃⲆⵠⵠⲆ == this.ᐃⵠⵠⲆⲆ.Ⲇⵠⵠ) this.action -= ⲆΔᐃᐃ.ⵠᐃᐃᐃᐃⲆΔ;
			Ⲇ.globalAlpha = .6 - this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ;
			if (this.ⲆᐃᐃᐃⲆᐃΔ) {
				var ᐃᐃ = ᐃΔ[Δ.ΔⲆΔΔΔᐃⵠ];
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ΔⵠⲆᐃ, -ᐃᐃ.height / ᐃⲆᐃⵠ)
			} else {
				var ᐃᐃ = ⲆⵠⵠⵠⵠᐃⲆ(this.ⲆΔⵠⵠ, ᐃΔ[Δ.ᐃΔⵠⲆⵠ][this.ⲆΔⵠⵠ][0], ᐃⵠᐃΔⵠⲆᐃⲆⵠ);
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃᐃ.width / 4, ᐃᐃ.height / ⲆΔᐃᐃΔ, -ᐃᐃ.width / ΔΔᐃΔⵠ, -ᐃᐃ.height / 2)
			}
			Ⲇ.globalAlpha = ΔⵠⲆⲆ
		}
		if (this.action & ⲆΔᐃᐃ.ᐃⲆⵠΔⲆᐃᐃ) {
			this.ⵠᐃΔΔΔΔⵠ.ⲆᐃⲆ() && ΔⲆΔⵠΔ == this.ⵠᐃΔΔΔΔⵠ.Ⲇⵠⵠ && (this.action -= ⲆΔᐃᐃ.ᐃⲆⵠΔⲆᐃᐃ);
			Ⲇ.globalAlpha = .6 - this.ⵠᐃΔΔΔΔⵠ.ⲆⵠⲆ;
			var ᐃᐃ = ᐃΔ[Δ.ᐃⲆⵠΔⲆᐃᐃ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
			Ⲇ.globalAlpha = 1
		}
		if (this.action & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
			if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == ᐃⲆⲆΔⵠ) this.action -= ⲆΔᐃᐃ.ⲆΔᐃΔ;
			Ⲇ.globalAlpha = .6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
			if (this.ⲆᐃᐃᐃⲆᐃΔ) {
				var ᐃᐃ = ᐃΔ[Δ.ⵠΔⲆⲆⲆⵠⲆ];
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ΔⵠⲆᐃ, -ᐃᐃ.height / ⲆᐃⵠΔ)
			} else {
				var ᐃᐃ = ⲆⵠⵠⵠⵠᐃⲆ(this.ⲆΔⵠⵠ, ᐃΔ[Δ.ᐃΔⵠⲆⵠ][this.ⲆΔⵠⵠ][ⲆⵠⲆⲆ], ⲆΔⵠᐃⲆΔⲆᐃΔ);
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃᐃ.width / ⲆΔᐃΔⵠ, ᐃᐃ.height / ⵠⲆⲆⵠ, -ᐃᐃ.width / ⵠⵠⵠᐃ, -ᐃᐃ.height / ΔΔΔⵠ)
			}
			Ⲇ.globalAlpha = ⲆΔΔΔ
		}
		if (this.action & ⲆΔᐃᐃ.ⵠⲆᐃΔⵠ) {
			this.freeze.ⲆᐃⲆ() && this.freeze.Ⲇⵠⵠ == ⲆΔⲆᐃΔ && (this.action -= ⲆΔᐃᐃ.ⵠⲆᐃΔⵠ);
			Ⲇ.globalAlpha = .6 - this.freeze.ⲆⵠⲆ;
			var ᐃᐃ = ⲆⵠⵠⵠⵠᐃⲆ(this.ⲆΔⵠⵠ, ᐃΔ[Δ.ᐃΔⵠⲆⵠ][this.ⲆΔⵠⵠ][0], ⲆᐃⲆΔᐃᐃΔΔᐃ);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃᐃ.width / 4, ᐃᐃ.height / 4, -ᐃᐃ.width / ᐃᐃᐃⵠ, -ᐃᐃ.height / 2);
			Ⲇ.globalAlpha = 1
		}
		if (this.action & ⲆΔᐃᐃ.ⵠᐃᐃᐃΔΔΔ) {
			if (this.ᐃⲆⵠⲆⲆⵠⵠ.ⲆᐃⲆ() && false == this.ᐃⲆⵠⲆⲆⵠⵠ.Ⲇⵠⵠ) this.action -= ⲆΔᐃᐃ.ⵠᐃᐃᐃΔΔΔ;
			Ⲇ.globalAlpha = .6 - this.ᐃⲆⵠⲆⲆⵠⵠ.ⲆⵠⲆ;
			if (this.ⲆᐃᐃᐃⲆᐃΔ) {
				var ᐃᐃ = ᐃΔ[Δ.ⲆᐃⵠΔΔⲆΔ];
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ⲆᐃⵠΔ)
			} else {
				var ᐃᐃ = ⲆⵠⵠⵠⵠᐃⲆ(this.ⲆΔⵠⵠ, ᐃΔ[Δ.ᐃΔⵠⲆⵠ][this.ⲆΔⵠⵠ][0], ᐃΔΔᐃᐃⲆⲆᐃᐃ);
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃᐃ.width / 4, ᐃᐃ.height / 4, -ᐃᐃ.width / 2, -ᐃᐃ.height / ⲆᐃⵠΔ)
			}
			Ⲇ.globalAlpha = Δⵠᐃ
		}
		ΔⲆᐃⲆᐃᐃΔΔⲆ(this.ⵠΔⲆᐃΔ);
		if (ⲆᐃΔ === Δⵠⵠⵠⵠᐃᐃ) {
			this.action & ⲆΔᐃᐃ.ⲆⲆᐃⵠᐃΔᐃ && (Ⲇⵠ += this.attack.ⲆⵠⲆ * Δⵠᐃⵠᐃ);
			ΔⲆᐃⵠⲆ(Δ.ⲆΔΔΔᐃ, ⲆⲆⵠᐃ, -ⲆⲆⵠᐃ.width / 2 - ᐃ * 26, -ⲆⲆⵠᐃ.height / 2 + (31 + ᐃⵠⲆ + Ⲇⵠ) * ᐃ);
			if (Δ.ᐃᐃⲆⵠⵠ <= ΔᐃⲆΔⵠ) ΔΔΔⲆⵠ(ΔᐃⲆΔⵠ, ⵠⲆⲆⵠⵠ, -ⵠⲆⲆⵠⵠ.width / 4 - 26 * ᐃ, -ⵠⲆⲆⵠⵠ.height / ⵠⲆⲆⵠ + (27 + ᐃⵠⲆ + Ⲇⵠ) * ᐃ);
			else Δ.Ⲇⵠᐃⵠⵠ !== ΔᐃⲆΔⵠ ? ⵠⲆᐃⲆⵠ(ΔᐃⲆΔⵠ, this.ⲆΔⵠⵠ, ⵠⲆⲆⵠⵠ, -ⵠⲆⲆⵠⵠ.width / ᐃⵠⵠⵠᐃ - ᐃ * 26, -ⵠⲆⲆⵠⵠ.height / ᐃⲆⵠᐃⵠ + (27 + ᐃⵠⲆ + Ⲇⵠ) * ᐃ) : ΔⲆᐃⵠⲆ(ΔᐃⲆΔⵠ, ⵠⲆⲆⵠⵠ, -ⵠⲆⲆⵠⵠ.width / ⲆⵠΔⵠ - 26 * ᐃ, -ⵠⲆⲆⵠⵠ.height / ⲆᐃⵠΔ + ᐃ * (27 + ᐃⵠⲆ + Ⲇⵠ));
			ΔⲆᐃⵠⲆ(Δ.ⲆΔΔΔᐃ, ⲆⲆⵠᐃ, -ⲆⲆⵠᐃ.width / 2 + 26 * ᐃ, -ⲆⲆⵠᐃ.height / 2 + (31 + ᐃⵠⲆ + Ⲇⵠ) * ᐃ);
			if (Δ.ᐃᐃⲆⵠⵠ <= ΔᐃⲆΔⵠ) ΔΔΔⲆⵠ(ΔᐃⲆΔⵠ, ⵠⲆⲆⵠⵠ, -ⵠⲆⲆⵠⵠ.width / ⲆΔᐃΔⵠ + ᐃ * 26, -ⵠⲆⲆⵠⵠ.height / 4 + (27 + ᐃⵠⲆ + Ⲇⵠ) * ᐃ);
			else Δ.Ⲇⵠᐃⵠⵠ !== ΔᐃⲆΔⵠ ? ⵠⲆᐃⲆⵠ(ΔᐃⲆΔⵠ, this.ⲆΔⵠⵠ, ⵠⲆⲆⵠⵠ, -ⵠⲆⲆⵠⵠ.width / ᐃᐃⵠΔ + ᐃ * 26, -ⵠⲆⲆⵠⵠ.height / ᐃⲆᐃⲆ + (27 + ᐃⵠⲆ + Ⲇⵠ) * ᐃ) : ΔⲆᐃⵠⲆ(ΔᐃⲆΔⵠ, ⵠⲆⲆⵠⵠ, -ⵠⲆⲆⵠⵠ.width / 2 + 26 * ᐃ, -ⵠⲆⲆⵠⵠ.height / ⵠΔⵠΔ + ᐃ * (27 + ᐃⵠⲆ + Ⲇⵠ));
			ΔⵠΔᐃⵠⵠⵠΔⲆ(this.right, ᐃⵠⵠⲆ, ᐃⵠⲆ + Ⲇⵠ)
		}
		Ⲇ.restore();
		if (Settings.ShowHoodNames.enabled || Δ.ⵠΔⲆᐃⲆ !== this.ⵠΔⲆᐃΔ && Δ.ⲆᐃⲆⵠΔ !== this.ⵠΔⲆᐃΔ) {
			if (this.ΔΔⵠⲆⵠ > ⵠⵠⵠ) {
				if (!this.ΔⵠⲆⵠ.ᐃⲆⵠⵠΔⲆΔ) this.ΔⵠⲆⵠ.ᐃⲆⵠⵠΔⲆΔ = ᐃⵠΔΔΔ(ᐃ, this.ΔⵠⲆⵠ.ⲆⲆΔⵠⵠ, 20, ⵠ[577], ⵠ[204], ⲆⲆΔⲆ, null, null, ᐃ * 300);
				var ᐃᐃ = this.ΔⵠⲆⵠ.ᐃⲆⵠⵠΔⲆΔ
			} else {
				if (!this.ΔⵠⲆⵠ.label) this.ΔⵠⲆⵠ.label = ᐃⵠΔΔΔ(ᐃ, this.ΔⵠⲆⵠ.ⲆⲆΔⵠⵠ, ΔΔⲆΔⲆᐃⲆ, ⵠ[447], ⵠ[204], 2, null, null, ᐃ * 300);
				var ᐃᐃ = this.ΔⵠⲆⵠ.label
			}
			Δ.ⲆⲆⵠ == ⲆⵠΔ.ⲆΔᐃ && (Ⲇ.globalAlpha = .5);
			var Ⲇⵠ = Math.floor(-ᐃᐃ.width / 2);
			var ᐃⵠⲆ = Math.floor(-ᐃᐃ.height / 2 - ᐃ * 70);
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ);
			if (this.ΔⵠⲆⵠ.level > ⵠᐃⲆⲆ) {
				var ⲆΔΔⵠ = Ⲇⵠ + ᐃᐃ.width + 5;
				ᐃᐃ = ᐃΔ[Δ.ᐃⵠΔⲆᐃⵠᐃ];
				if (ΔⵠᐃΔΔⲆⲆ[this.ΔⵠⲆⵠ.level] === ΔΔΔᐃᐃ) ΔⵠᐃΔΔⲆⲆ[this.ΔⵠⲆⵠ.level] = ᐃⵠΔΔΔ(ᐃ, "[" + this.ΔⵠⲆⵠ.level + "]", ⵠᐃⲆⵠⲆ, "#F9E8A2", ⵠ[204], ⲆᐃⵠΔ, null, null, ᐃ * 50);
				ᐃᐃⵠⲆ(Ⲇ, ΔⵠᐃΔΔⲆⲆ[this.ΔⵠⲆⵠ.level], ⲆΔΔⵠ, ᐃⵠⲆ)
			}
			Ⲇ.globalAlpha = ΔᐃⲆⲆ
		} else {
			var ᐃⵠⲆ = Math.floor(ᐃ * -70);
			var Ⲇⵠ = Math.floor(ᐃΔ[Δ.ⲆⲆⵠᐃΔⲆⵠ].width / 1.5)
		}
		if (ᐃⲆⵠ.ⵠⵠΔⵠΔⵠⵠ(this.ⵠⵠΔᐃ)) {
			if (this.ⵠⵠΔᐃ == ᐃⲆⵠ.ᐃΔⵠⵠᐃ[0]) var ᐃᐃ = ᐃΔ[Δ.ᐃᐃᐃⲆᐃᐃᐃ];
			else var ᐃᐃ = ᐃΔ[Δ.ⲆⲆⵠᐃΔⲆⵠ];
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ - ᐃᐃ.width - ⲆΔⲆⲆⵠ, ᐃⵠⲆ - 6)
		}
		Ⲇ.restore()
}

	function ⲆⲆⲆΔΔᐃᐃⵠΔ() {
		if (this.enabled && this.ⵠᐃᐃⵠᐃ >= ⵠⲆΔ) {
			var ΔΔⵠⲆΔⵠⵠᐃΔ = (new Date).getTime();
			var ΔᐃⲆ = ΔΔⵠⲆΔⵠⵠᐃΔ - this.ⵠᐃᐃⵠᐃ;
			var ⲆΔⵠΔ = ΔᐃⲆ % 1e3 / 1e3;
			if (.5 < ⲆΔⵠΔ) {
				ⲆΔⵠΔ = Ⲇⵠᐃ - (ⲆΔⵠΔ - .5) * ⲆⲆⲆⲆ
			} else ⲆΔⵠΔ *= 2;
			ΔᐃⲆ = Math.floor(ΔᐃⲆ / 1e3);
			if (ΔᐃᐃΔ.ⵠᐃΔⵠΔⲆⵠ > ΔᐃⲆ) {
				ΔᐃⲆ = ΔᐃᐃΔ.ⵠᐃΔⵠΔⲆⵠ - ΔᐃⲆ;
				!this.label && (this.label = ᐃⵠΔΔΔ(ᐃ, " seconds before you die", 40, ⵠ[241], null, null, null, null, null, ⵠ[204], 10));
				(this.now != ΔᐃⲆ || !this.ⵠΔᐃⵠᐃⵠΔ) && (this.now = ΔᐃⲆ, this.ⵠΔᐃⵠᐃⵠΔ = ᐃⵠΔΔΔ(ᐃ, "" + ΔᐃⲆ, 40, ⵠ[241], null, null, null, null, null, ⵠ[204], ΔΔⵠᐃⵠ));
				ᐃᐃⵠⲆ(Ⲇ, this.label, (ᐃⲆⵠⵠ - this.label.width) / 2, ᐃ * 100);
				Ⲇ.globalAlpha = ⲆΔⵠΔ;
				ᐃᐃⵠⲆ(Ⲇ, this.ⵠΔᐃⵠᐃⵠΔ, (ᐃⲆⵠⵠ - this.label.width) / 2 - this.ⵠΔᐃⵠᐃⵠΔ.width + 15 * ᐃ, ⵠⵠⲆᐃⲆ * ᐃ);
				Ⲇ.globalAlpha = 1
			}
		}
	}

	function ⵠᐃⲆΔⵠᐃΔᐃⵠ(Δⵠ, ΔΔⲆⵠ) {
		if (this.text) {
			if (!this.timeout.Ⲇⵠⵠ) Ⲇ.globalAlpha = 1;
			else Ⲇ.globalAlpha = ΔⲆᐃⲆ - this.timeout.ⲆⵠⲆ;
			!this.label && (this.label = ᐃⵠΔΔΔ(ᐃ, this.text, 40, Δⵠ, null, null, null, null, null, ΔΔⲆⵠ, ᐃᐃᐃΔΔ));
			ᐃᐃⵠⲆ(Ⲇ, this.label, (ᐃⲆⵠⵠ - this.label.width) / ΔⲆᐃΔ, 50 * ᐃ);
			Ⲇ.globalAlpha = 1;
			if (this.timeout.ⲆᐃⲆ() && this.timeout.Ⲇⵠⵠ == ΔⲆΔᐃᐃ) {
				this.text = this.list.shift();
				this.label = null
			}
		}
	}

	function ⲆΔᐃΔΔⵠΔᐃΔ() {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + this.x, ᐃⲆⵠ.ⲆⲆΔ.y + this.y);
		if (ΔΔᐃᐃ < this.text.length) {
			for (var Ⲇᐃ = 0; Ⲇᐃ < this.text.length && ΔΔⲆᐃ > Ⲇᐃ; Ⲇᐃ++) {
				if (!this.label[Ⲇᐃ]) {
					this.label[Ⲇᐃ] = ⲆⲆᐃⲆᐃᐃⲆⲆⲆ(ᐃ, this.text[Ⲇᐃ]);
					this.ᐃΔⲆⵠΔΔᐃ[Ⲇᐃ] = 0;
					this.ⵠΔⲆΔΔⵠΔ[Ⲇᐃ] = ⲆⲆⵠⲆ
				}
				if (Ⲇᐃ === ΔⲆᐃᐃ) this.ⵠΔⲆΔΔⵠΔ[0] = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(this.ΔΔⵠⵠΔⲆⲆ) * 30
			}
			this.ᐃΔⲆⵠΔΔᐃ[ⵠⵠⵠ] += ⲆΔΔⲆ;
			if (ᐃᐃΔ < this.text.length) {
				this.ΔΔⵠⵠΔⲆⲆ = Math.min(this.ΔΔⵠⵠΔⲆⲆ + ⲆΔΔⲆ, 1);
				if (this.ᐃΔⲆⵠΔΔᐃ[0] > ΔⲆᐃᐃ && this.ΔΔⵠⵠΔⲆⲆ > .5) this.ᐃΔⲆⵠΔΔᐃ[1] += ⲆΔΔⲆ
			}
			for (var Ⲇᐃ = 0; Ⲇᐃ < this.text.length && Ⲇᐃ < 2; Ⲇᐃ++) {
				var ⵠⲆⵠⵠⵠ = this.ᐃΔⲆⵠΔΔᐃ[Ⲇᐃ];
				if (ⵠⲆⵠⵠⵠ > ΔⲆⲆ) {
					if (ⵠⲆⵠⵠⵠ < .25) Ⲇ.globalAlpha = ⲆΔᐃΔⵠ * ⵠⲆⵠⵠⵠ;
					else if (ⵠⲆⵠⵠⵠ > 3.75) Ⲇ.globalAlpha = Math.max((ᐃⲆⵠᐃⵠ - ⵠⲆⵠⵠⵠ) * ⵠᐃΔⲆ, 0);
					else Ⲇ.globalAlpha = 1;
					ᐃᐃⵠⲆ(Ⲇ, this.label[Ⲇᐃ], -this.label[Ⲇᐃ].width / 2, -this.ⵠΔⲆΔΔⵠΔ[Ⲇᐃ] + -this.label[Ⲇᐃ].height / 2 - ᐃ * 110)
				}
			}
			ⲆΔᐃᐃΔ < this.ᐃΔⲆⵠΔΔᐃ[0] && (this.ᐃΔⲆⵠΔΔᐃ.shift(), this.text.shift(), this.ⵠΔⲆΔΔⵠΔ.shift(), this.label.shift(), this.ΔΔⵠⵠΔⲆⲆ = ⵠⵠⵠ)
		}
		Ⲇ.restore()
	}

	function ΔⵠⲆᐃᐃⵠΔⲆⵠ() {
		if (this.message !== ⵠⲆⵠᐃⲆ) {
			var ᐃⵠⲆ = ⵠⲆⵠⵠ < ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length ? -95 : 0;
			ᐃᐃⵠⲆ(Ⲇ, this.message, ⵠⵠⵠΔ, Ⲇᐃᐃᐃ - this.message.height + ᐃⵠⲆ)
		}
	}
	var ΔⲆⲆᐃⵠΔᐃ = 0;

	function ΔⵠⲆᐃⲆⲆⲆ(ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, ⲆΔ, Δᐃᐃ, ΔⵠᐃⲆ, ⲆΔⲆⵠ) {
		if (ⲆΔⲆⵠ === ΔΔⵠⵠⲆ) ⲆΔⲆⵠ = 0;
		ⲆⵠΔ.ⵠΔΔⲆ[ⲆΔ].ⲆᐃⲆ();
		for (var ⵠᐃᐃᐃ = ΔⵠᐃⲆ; ⲆΔⲆⵠ <= ⵠᐃᐃᐃ; ⵠᐃᐃᐃ--) {
			for (var Ⲇᐃ = ⲆⲆΔⵠ; Ⲇᐃ <= ⲆᐃΔᐃ; Ⲇᐃ++) {
				for (var ⲆⲆᐃⲆ = ᐃᐃΔΔ; ᐃⵠᐃΔ >= ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) {
					var ᐃΔⲆⲆ = ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ];
					if (!ᐃΔⲆⲆ || !ᐃΔⲆⲆ[Δᐃᐃ]) continue;
					var Ⲇⵠⵠ = ᐃΔⲆⲆ[Δᐃᐃ][ⵠᐃᐃᐃ];
					if (undefined === Ⲇⵠⵠ) continue;
					for (var ᐃᐃⲆᐃ = ⵠⵠⵠΔ; Ⲇⵠⵠ.length > ᐃᐃⲆᐃ; ᐃᐃⲆᐃ++) {
						var ⲆᐃΔⵠ = Ⲇⵠⵠ[ᐃᐃⲆᐃ];
						if (ⲆᐃΔⵠ.ⲆᐃⲆ) {
							ⲆᐃΔⵠ.ⵠⵠᐃ.ⲆᐃⲆ() && ⲆᐃΔⵠ.ⵠⵠᐃ.Ⲇⵠⵠ == Ⲇⵠᐃᐃᐃ && (ⲆᐃΔⵠ.ⲆᐃⲆ = false);
							var ⲆⵠⲆ = ⲆΔΔⲆ * (1 - ⲆᐃΔⵠ.ⵠⵠᐃ.ⲆⵠⲆ) * 600 * ᐃ;
							var Ⲇⵠ = Math.sin(ⲆᐃΔⵠ.angle) * ⲆⵠⲆ;
							var ᐃⵠⲆ = ⲆⵠⲆ * Math.cos(ⲆᐃΔⵠ.angle)
						} else {
							var Ⲇⵠ = 0;
							var ᐃⵠⲆ = 0
						}
						var ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time][ⵠᐃᐃᐃ];
						var ⲆⲆᐃ = ⲆⵠΔ.ⵠΔΔⲆ[ⲆΔ].ⲆⵠⲆ * -ᐃᐃ.width;
						var ⲆΔⲆ = ⲆⵠΔ.ⵠΔΔⲆ[ⲆΔ].ⲆⵠⲆ * -ᐃᐃ.height;
						ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠ.ⲆⲆΔ.x + ⲆᐃΔⵠ.x - ⲆⲆᐃ / 2 + Ⲇⵠ, ᐃⲆⵠ.ⲆⲆΔ.y + ⲆᐃΔⵠ.y - ⲆΔⲆ / ᐃᐃᐃⵠ + ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ)
					}
				}
			}
		}
	}

	function ⵠⲆⵠΔᐃΔⵠ(ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, ⲆΔ, Δᐃᐃ, ΔⵠᐃⲆ, ⲆΔⲆⵠ) {
		if (ⵠⲆⲆⲆⲆ === ⲆΔⲆⵠ) ⲆΔⲆⵠ = 0;
		for (var ⵠᐃᐃᐃ = ΔⵠᐃⲆ; ⲆΔⲆⵠ <= ⵠᐃᐃᐃ; ⵠᐃᐃᐃ--) {
			for (var Ⲇᐃ = ⲆⲆΔⵠ; ⲆᐃΔᐃ >= Ⲇᐃ; Ⲇᐃ++) {
				for (var ⲆⲆᐃⲆ = ᐃᐃΔΔ; ᐃⵠᐃΔ >= ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) {
					var ᐃΔⲆⲆ = ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ];
					if (!ᐃΔⲆⲆ || !ᐃΔⲆⲆ[Δᐃᐃ]) continue;
					var Ⲇⵠⵠ = ᐃΔⲆⲆ[Δᐃᐃ][ⵠᐃᐃᐃ];
					if (Ⲇⵠⵠ === ⵠⲆⲆⲆⲆ) continue;
					for (var ᐃᐃⲆᐃ = ⵠΔᐃᐃ; ᐃᐃⲆᐃ < Ⲇⵠⵠ.length; ᐃᐃⲆᐃ++) {
						var ⲆᐃΔⵠ = Ⲇⵠⵠ[ᐃᐃⲆᐃ];
						var ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time][ⵠᐃᐃᐃ];
						var ΔⲆⵠΔⵠⵠᐃ = (ΔⲆⲆᐃⵠΔᐃ + (Ⲇᐃ + ⲆⲆᐃⲆ) * Δⵠⵠᐃ) % 60;
						var ⵠⲆⵠⵠⵠ = 30 > ΔⲆⵠΔⵠⵠᐃ ? ΔⲆⵠΔⵠⵠᐃ / 30 : 1 - (ΔⲆⵠΔⵠⵠᐃ - 30) / 30;
						var ⲆⲆᐃ = -ᐃᐃ.width * (1 + .9 * ⵠⲆⵠⵠⵠ / 30);
						var ⲆΔⲆ = -ᐃᐃ.height * (ⵠΔᐃ + .9 * ⵠⲆⵠⵠⵠ / 30);
						ΔⲆⵠΔⵠⵠᐃ = (ΔⲆⲆᐃⵠΔᐃ + ⵠⵠⲆⲆΔⲆᐃ * (Ⲇᐃ + ⲆⲆᐃⲆ)) % 60;
						ⵠⲆⵠⵠⵠ = 30 > ΔⲆⵠΔⵠⵠᐃ ? ΔⲆⵠΔⵠⵠᐃ / 30 : 1 - (ΔⲆⵠΔⵠⵠᐃ - 30) / 30;
						var ⲆⲆΔᐃ = Ⲇ.globalAlpha;
						Ⲇ.globalAlpha = (.9 + ⵠⲆⵠⵠⵠ * .1) * ⲆⲆΔᐃ;
						ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠ.ⲆⲆΔ.x + ⲆᐃΔⵠ.x - ⲆⲆᐃ / 2, ᐃⲆⵠ.ⲆⲆΔ.y + ⲆᐃΔⵠ.y - ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
						Ⲇ.globalAlpha = ⲆⲆΔᐃ
					}
				}
			}
		}
	}
	var ⵠΔᐃΔⵠᐃⵠ = [];
	for (var Ⲇᐃ = ⵠⵠⵠ; 100 > Ⲇᐃ; Ⲇᐃ++) {
		var ΔⲆΔ = 1;
		Math.random() < .25 && (ΔⲆΔ = 0);
		ⵠΔᐃΔⵠᐃⵠ.push(ΔⲆΔ)
	}
	ΔⲆⵠᐃⵠ = 1;

	function ΔⲆΔᐃⵠⵠⲆⵠᐃ(ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, ⲆΔ, Δᐃᐃ, ΔⵠᐃⲆ, ⲆΔⲆⵠ, ᐃᐃⲆⲆᐃ) {
		ⲆΔΔⵠᐃ === ⲆΔⲆⵠ && (ⲆΔⲆⵠ = 0);
		for (var ⵠᐃᐃᐃ = ΔⵠᐃⲆ; ⲆΔⲆⵠ <= ⵠᐃᐃᐃ; ⵠᐃᐃᐃ--) {
			for (var Ⲇᐃ = ⲆⲆΔⵠ; Ⲇᐃ <= ⲆᐃΔᐃ; Ⲇᐃ++) {
				for (var ⲆⲆᐃⲆ = ᐃᐃΔΔ; ⲆⲆᐃⲆ <= ᐃⵠᐃΔ; ⲆⲆᐃⲆ++) {
					var ᐃΔⲆⲆ = ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ];
					if (ᐃΔⲆⲆ === ⵠΔⲆⵠΔ || ᐃΔⲆⲆ[Δᐃᐃ] === Ⲇⵠⵠᐃᐃ) continue;
					var Ⲇⵠⵠ = ᐃΔⲆⲆ[Δᐃᐃ][ⵠᐃᐃᐃ];
					if (ΔΔⵠΔΔ === Ⲇⵠⵠ) continue;
					for (var ᐃᐃⲆᐃ = ΔΔᐃᐃ; Ⲇⵠⵠ.length > ᐃᐃⲆᐃ; ᐃᐃⲆᐃ++) {
						var ⲆᐃΔⵠ = Ⲇⵠⵠ[ᐃᐃⲆᐃ];
						if (ⲆᐃΔⵠ.ⲆᐃⲆ) {
							if (ⲆᐃΔⵠ.ⵠⵠᐃ.ⲆᐃⲆ() && false == ⲆᐃΔⵠ.ⵠⵠᐃ.Ⲇⵠⵠ) {
								ⲆᐃΔⵠ.ⲆᐃⲆ = false
							}
							var ⲆⵠⲆ = 600 * (ⲆΔΔⲆ * (1 - ⲆᐃΔⵠ.ⵠⵠᐃ.ⲆⵠⲆ)) * ᐃ;
							var Ⲇⵠ = Math.sin(ⲆᐃΔⵠ.angle) * ⲆⵠⲆ;
							var ᐃⵠⲆ = Math.cos(ⲆᐃΔⵠ.angle) * ⲆⵠⲆ
						} else {
							var Ⲇⵠ = 0;
							var ᐃⵠⲆ = 0
						}
						for (var ⲆⵠᐃⲆⵠ = ⲆⵠⲆⲆ; ⲆⵠᐃⲆⵠ < ⵠⵠⲆΔΔⲆⲆ[ⵠᐃᐃᐃ].ΔⲆⵠΔ; ⲆⵠᐃⲆⵠ++) {
							ⲆⵠΔ.ⵠⵠⲆⲆΔ[ⲆⵠᐃⲆⵠ].ⲆᐃⲆΔᐃ !== ΔᐃⲆΔΔ && (ⲆⵠΔ.ⵠⵠⲆⲆΔ[ⲆⵠᐃⲆⵠ].ⲆᐃⲆ(), ⲆⵠΔ.ⵠⵠⲆⲆΔ[ⲆⵠᐃⲆⵠ].ⲆᐃⲆΔᐃ = ΔᐃⲆΔΔ);
							var ᐃᐃ = ᐃΔ[Δ.ⵠⵠⲆⵠΔ][ⲆⵠΔ.time][ⵠⵠⲆΔΔⲆⲆ[ⵠᐃᐃᐃ].ⲆⲆⲆⵠ[ⲆⵠᐃⲆⵠ].Δᐃᐃ];
							var ⲆⲆᐃ = ⲆⵠΔ.ⵠⵠⲆⲆΔ[ⲆⵠᐃⲆⵠ].ⲆⵠⲆ * -ᐃᐃ.width;
							var ⲆΔⲆ = ⲆⵠΔ.ⵠⵠⲆⲆΔ[ⲆⵠᐃⲆⵠ].ⲆⵠⲆ * -ᐃᐃ.height;
							ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠ.ⲆⲆΔ.x + ⲆᐃΔⵠ.x - ⲆⲆᐃ / ⵠⵠᐃΔ + Ⲇⵠ + ⵠⵠⲆΔΔⲆⲆ[ⵠᐃᐃᐃ].ⲆⲆⲆⵠ[ⲆⵠᐃⲆⵠ].x, ᐃⲆⵠ.ⲆⲆΔ.y + ⲆᐃΔⵠ.y - ⲆΔⲆ / 4 + ᐃⵠⲆ + ⵠⵠⲆΔΔⲆⲆ[ⵠᐃᐃᐃ].ⲆⲆⲆⵠ[ⲆⵠᐃⲆⵠ].y, ⲆⲆᐃ / 2, ⲆΔⲆ / 2)
						}
					}
				}
			}
		}
	}

	function ⵠᐃΔᐃⲆ(ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, ⲆΔ, Δᐃᐃ, ΔⵠᐃⲆ, ⲆΔⲆⵠ, ᐃᐃⲆⲆᐃ) {
		undefined === ⲆΔⲆⵠ && (ⲆΔⲆⵠ = ⵠⵠⵠ);
		for (var ⵠᐃᐃᐃ = ΔⵠᐃⲆ; ⵠᐃᐃᐃ >= ⲆΔⲆⵠ; ⵠᐃᐃᐃ--) {
			for (var Ⲇᐃ = ⲆⲆΔⵠ; Ⲇᐃ <= ⲆᐃΔᐃ; Ⲇᐃ++) {
				for (var ⲆⲆᐃⲆ = ᐃᐃΔΔ; ᐃⵠᐃΔ >= ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) {
					if (ᐃᐃⲆⲆᐃ > 0 && ⵠΔᐃΔⵠᐃⵠ[(Ⲇᐃ + ⲆⲆᐃⲆ * ᐃᐃⲆⲆᐃ) % ⵠΔᐃΔⵠᐃⵠ.length] === ΔⲆᐃᐃ) continue;
					var ᐃΔⲆⲆ = ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ];
					if (ⵠⵠⲆᐃᐃ === ᐃΔⲆⲆ || ᐃΔⲆⲆ[Δᐃᐃ] === undefined) continue;
					var Ⲇⵠⵠ = ᐃΔⲆⲆ[Δᐃᐃ][ⵠᐃᐃᐃ];
					if (ΔΔᐃⵠⵠ === Ⲇⵠⵠ) continue;
					for (var ᐃᐃⲆᐃ = ᐃᐃᐃ; ᐃᐃⲆᐃ < Ⲇⵠⵠ.length; ᐃᐃⲆᐃ++) {
						var ⲆᐃΔⵠ = Ⲇⵠⵠ[ᐃᐃⲆᐃ];
						if (ⲆᐃΔⵠ.ⲆᐃⲆ) {
							if (ⲆᐃΔⵠ.ⵠⵠᐃ.ⲆᐃⲆ() && false == ⲆᐃΔⵠ.ⵠⵠᐃ.Ⲇⵠⵠ) {
								ⲆᐃΔⵠ.ⲆᐃⲆ = ΔΔᐃⵠᐃ
							}
							var ⲆⵠⲆ = 600 * ((ⵠᐃⵠΔ - ⲆᐃΔⵠ.ⵠⵠᐃ.ⲆⵠⲆ) * ⲆΔΔⲆ) * ᐃ;
							var Ⲇⵠ = ⲆⵠⲆ * Math.sin(ⲆᐃΔⵠ.angle);
							var ᐃⵠⲆ = Math.cos(ⲆᐃΔⵠ.angle) * ⲆⵠⲆ
						} else {
							var Ⲇⵠ = ⲆⲆⵠⲆ;
							var ᐃⵠⲆ = ⵠⵠⵠ
						}
						var ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time][ⵠᐃᐃᐃ];
						ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠ.ⲆⲆΔ.x + ⲆᐃΔⵠ.x - ᐃᐃ.width / (ᐃⲆᐃⵠ * ΔⲆⵠᐃⵠ) + Ⲇⵠ, ᐃⲆⵠ.ⲆⲆΔ.y + ⲆᐃΔⵠ.y - ᐃᐃ.height / (ᐃᐃΔⵠ * ΔⲆⵠᐃⵠ) + ᐃⵠⲆ, ᐃᐃ.width / ΔⲆⵠᐃⵠ, ᐃᐃ.height / ΔⲆⵠᐃⵠ)
					}
				}
			}
		}
	}

	function ΔᐃΔⲆΔⲆⵠΔⲆ(ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, ⲆΔ, Δᐃᐃ, ΔⵠᐃⲆ, ⲆΔⲆⵠ, ᐃᐃⲆⲆᐃ) {
		if (ⵠⲆⵠᐃⲆ === ⲆΔⲆⵠ) ⲆΔⲆⵠ = 0;
		for (var Ⲇᐃ = ⲆⲆΔⵠ; ⲆᐃΔᐃ >= Ⲇᐃ; Ⲇᐃ++) {
			for (var ⲆⲆᐃⲆ = ᐃᐃΔΔ; ⲆⲆᐃⲆ <= ᐃⵠᐃΔ; ⲆⲆᐃⲆ++) {
				var ᐃΔⲆⲆ = ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ];
				if (ⵠΔⵠⵠⲆ === ᐃΔⲆⲆ || ⵠⲆⲆⲆⲆ === ᐃΔⲆⲆ[Δᐃᐃ]) continue;
				var Ⲇⵠⵠ = ᐃΔⲆⲆ[Δᐃᐃ];
				if (ΔΔΔᐃᐃ === Ⲇⵠⵠ) continue;
				if (Ⲇⵠⵠ.scale === ⵠΔᐃ) {
					var ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time][Ⲇⵠⵠ.ΔᐃᐃᐃⲆ];
					Ⲇ.save();
					Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + Ⲇⵠⵠ.x, ᐃⲆⵠ.ⲆⲆΔ.y + Ⲇⵠⵠ.y);
					Ⲇ.rotate(Ⲇⵠⵠ.angle);
					ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 4, -ᐃᐃ.height / 4, ᐃᐃ.width / ΔᐃΔᐃ, ᐃᐃ.height / ΔᐃⵠΔ);
					Ⲇ.restore()
				} else if (Ⲇⵠⵠ.scale === 3) {
					for (var ⵠᐃᐃᐃ = ⲆⵠⲆⲆ; ⵠᐃᐃᐃ < Ⲇⵠⵠ.ΔⲆⵠ.length; ⵠᐃᐃᐃ++) {
						Ⲇ.save();
						Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + Ⲇⵠⵠ.x, ᐃⲆⵠ.ⲆⲆΔ.y + Ⲇⵠⵠ.y);
						Ⲇ.rotate(Ⲇⵠⵠ.ΔⲆⵠ[ⵠᐃᐃᐃ].angle);
						var ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time][Ⲇⵠⵠ.ΔⲆⵠ[ⵠᐃᐃᐃ].ΔᐃᐃᐃⲆ];
						ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ⲆᐃᐃΔ + Ⲇⵠⵠ.ΔⲆⵠ[ⵠᐃᐃᐃ].x, -ᐃᐃ.height / ᐃⲆΔΔ + Ⲇⵠⵠ.ΔⲆⵠ[ⵠᐃᐃᐃ].y, ᐃᐃ.width / 1.5, ᐃᐃ.height / 1.5);
						Ⲇ.restore()
					}
				} else {
					var ᐃᐃ = ᐃΔ[ⲆΔ][ⲆⵠΔ.time][Ⲇⵠⵠ.ΔᐃᐃᐃⲆ];
					Ⲇ.save();
					Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + Ⲇⵠⵠ.x, ᐃⲆⵠ.ⲆⲆΔ.y + Ⲇⵠⵠ.y);
					Ⲇ.rotate(Ⲇⵠⵠ.angle);
					ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ⲆⲆⲆⲆ, -ᐃᐃ.height / 2, ᐃᐃ.width, ᐃᐃ.height);
					Ⲇ.restore()
				}
			}
		}
	}
	ⵠⵠⲆΔΔⲆⲆ = [{
		"ΔⲆⵠΔ": 10,
		"ⲆⲆⲆⵠ": [{
			x: -128,
			y: -ᐃⲆᐃⵠⲆ,
			"Δᐃᐃ": ⵠΔᐃⵠ
		}, {
			x: -86,
			y: -ᐃᐃΔΔᐃ,
			"Δᐃᐃ": 1
		}, {
			"Δᐃᐃ": 2,
			x: -60,
			y: -74
		}, {
			"Δᐃᐃ": ⵠⵠⲆⵠ,
			y: -144,
			x: -22
		}, {
			x: -58,
			"Δᐃᐃ": 0,
			y: 86
		}, {
			"Δᐃᐃ": 0,
			y: -30,
			x: ΔⲆΔⵠ
		}, {
			y: -115,
			"Δᐃᐃ": 1,
			x: 65
		}, {
			"Δᐃᐃ": 0,
			y: -50,
			x: 118
		}, {
			"Δᐃᐃ": ΔⵠΔ,
			x: 73,
			y: ⲆⵠⲆΔΔⵠⵠ
		}, {
			y: 79,
			x: 67,
			"Δᐃᐃ": ⵠⵠⲆⵠ
		}]
	}, {
		"ⲆⲆⲆⵠ": [{
			x: -45,
			"Δᐃᐃ": ⲆⵠⲆⲆ,
			y: -26
		}, {
			"Δᐃᐃ": 2,
			y: 20,
			x: -45
		}, {
			y: -60,
			x: ᐃⵠᐃⵠⲆ,
			"Δᐃᐃ": ΔᐃⲆⲆ
		}, {
			y: -17,
			"Δᐃᐃ": ⵠⲆΔⲆ,
			x: 52
		}, {
			"Δᐃᐃ": ⲆⵠⲆⲆ,
			y: 45,
			x: ΔⲆΔⲆᐃ
		}],
		"ΔⲆⵠΔ": 5
	}, {
		"ⲆⲆⲆⵠ": [{
			"Δᐃᐃ": ΔⵠⲆᐃ,
			y: ΔΔᐃΔ,
			x: -30
		}, {
			"Δᐃᐃ": ᐃᐃⲆⲆ,
			y: -38,
			x: 7
		}, {
			x: 37,
			y: 5,
			"Δᐃᐃ": 2
		}],
		"ΔⲆⵠΔ": 3
	}, {
		"ΔⲆⵠΔ": ⲆΔⲆΔⵠ,
		"ⲆⲆⲆⵠ": [{
			x: -74,
			y: -87,
			"Δᐃᐃ": 2
		}, {
			x: -ΔⵠⲆᐃⵠⲆᐃ,
			y: -10,
			"Δᐃᐃ": 1
		}, {
			y: 17,
			"Δᐃᐃ": ⲆΔΔΔ,
			x: -99
		}, {
			"Δᐃᐃ": ⵠΔᐃᐃ,
			x: -66,
			y: 84
		}, {
			"Δᐃᐃ": Δᐃⵠⵠ,
			y: 123,
			x: -55
		}, {
			y: 81,
			x: ⲆΔⵠΔⵠ,
			"Δᐃᐃ": 2
		}, {
			y: 50,
			"Δᐃᐃ": Δⵠⵠⵠ,
			x: 52
		}, {
			y: ⵠᐃΔⲆⲆΔΔ,
			x: 138,
			"Δᐃᐃ": ⵠᐃⵠΔ
		}, {
			x: 104,
			y: -28,
			"Δᐃᐃ": 0
		}, {
			"Δᐃᐃ": 2,
			y: -56,
			x: 67
		}, {
			y: -112,
			x: 5,
			"Δᐃᐃ": ⲆⲆⵠⲆ
		}]
	}, {
		"ⲆⲆⲆⵠ": [{
			x: -33,
			y: -66,
			"Δᐃᐃ": 2
		}, {
			y: ᐃᐃᐃΔΔ,
			x: -58,
			"Δᐃᐃ": ΔⲆⲆ
		}, {
			"Δᐃᐃ": 1,
			x: -19,
			y: 44
		}, {
			x: 44,
			"Δᐃᐃ": 0,
			y: ΔΔᐃΔᐃΔΔ
		}, {
			"Δᐃᐃ": ΔΔΔⵠ,
			x: 53,
			y: -36
		}, {
			y: -62,
			x: 7,
			"Δᐃᐃ": 0
		}],
		"ΔⲆⵠΔ": 6
	}, {
		"ΔⲆⵠΔ": ⲆᐃᐃΔ,
		"ⲆⲆⲆⵠ": [{
			x: -ⲆᐃᐃᐃᐃⲆⲆ,
			y: -25,
			"Δᐃᐃ": ⵠᐃⵠΔ
		}, {
			x: -29,
			"Δᐃᐃ": 2,
			y: ⲆⵠⵠᐃΔ
		}, {
			y: ᐃᐃΔΔⵠ,
			x: 12,
			"Δᐃᐃ": 0
		}]
	}];
	var ΔΔⵠᐃᐃⲆᐃ = ΔΔᐃ;
	var ⲆⲆΔⵠΔⲆⲆ = ⵠⵠⵠΔ;
	var ⲆⲆΔⲆᐃᐃⵠ = 0;
	var ᐃⵠⵠⵠΔⲆᐃ = ΔΔᐃᐃ;

	function ᐃΔⲆⲆᐃᐃⲆ(ⲆΔ, Ⲇᐃ, Ⲇⵠ, ᐃⵠⲆ, ⲆΔⵠΔ) {
		ⲆⵠΔ.transition && ⲆᐃΔ == ⲆΔⵠΔ ? (Ⲇ.globalAlpha = ΔᐃⵠⲆ, ᐃᐃⵠⲆ(Ⲇ, ᐃΔ[ⲆΔ][ⲆⵠΔ.time][Ⲇᐃ], Ⲇⵠ, ᐃⵠⲆ), ⲆⵠΔ.time = ⲆⵠΔ.time ? 0 : 1, Ⲇ.globalAlpha = ⲆΔΔΔ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ, ᐃᐃⵠⲆ(Ⲇ, ᐃΔ[ⲆΔ][ⲆⵠΔ.time][Ⲇᐃ], Ⲇⵠ, ᐃⵠⲆ), ⲆⵠΔ.time = ⲆⵠΔ.time ? Δⵠⵠⵠ : 1, Ⲇ.globalAlpha = ΔΔⵠΔ) : (Ⲇ.globalAlpha = ⲆΔⵠΔ, ᐃᐃⵠⲆ(Ⲇ, ᐃΔ[ⲆΔ][ⲆⵠΔ.time][Ⲇᐃ], Ⲇⵠ, ᐃⵠⲆ), Ⲇ.globalAlpha = 1)
	}

	function ⲆΔⵠᐃⵠΔⵠⲆΔ(ⵠᐃⲆᐃᐃⲆⵠ, ⵠⵠᐃΔⲆΔⲆ, ᐃⲆⲆⲆᐃΔᐃ, ⵠΔΔⲆΔⲆⵠ, ⲆΔΔⲆΔⲆⲆ, ⲆᐃΔⲆᐃⲆΔ) {
		const ⵠᐃⵠⲆᐃᐃⵠ = (22695477 * (22063 + ⵠᐃⲆᐃᐃⲆⵠ) + Ⲇⵠᐃ) % 4294967296;
		const ᐃᐃᐃⲆᐃΔⲆ = (12114 | ⵠⵠᐃΔⲆΔⲆ) & ~(12114 & ⵠⵠᐃΔⲆΔⲆ);
		const ᐃⲆᐃΔⵠⲆᐃ = (16 << (ᐃⲆⲆⲆᐃΔᐃ >> 0 & 255)) + (8 << (ᐃⲆⲆⲆᐃΔᐃ >> 16 & 255)) + (24 << (ᐃⲆⲆⲆᐃΔᐃ >> 24 & ⵠⵠⲆⲆᐃ)) + (0 << (ᐃⲆⲆⲆᐃΔᐃ >> 8 & 255));
		const ⲆΔᐃᐃⲆⵠⵠ = ⵠΔΔⲆΔⲆⵠ ^ 28068;
		const ⲆⵠΔΔⵠⲆᐃ = 49291 ^ ⲆΔΔⲆΔⲆⲆ;
		const ⵠⵠⲆⵠⲆᐃᐃΔΔ = ~(ⲆᐃΔⲆᐃⲆΔ & 18102) & (18102 | ⲆᐃΔⲆᐃⲆΔ);
		const ᐃⵠΔⵠᐃⵠΔⵠⲆ = ⵠⲆΔΔᐃΔⲆ(ⵠᐃⵠⲆᐃᐃⵠ, ᐃᐃᐃⲆᐃΔⲆ, ᐃⲆᐃΔⵠⲆᐃ, ⲆΔᐃᐃⲆⵠⵠ, ⲆⵠΔΔⵠⲆᐃ, ⵠⵠⲆⵠⲆᐃᐃΔΔ);
		const ᐃΔⵠⵠᐃⵠⲆᐃⲆ = ⲆⲆⵠᐃᐃᐃᐃ(ⵠᐃⵠⲆᐃᐃⵠ, ᐃᐃᐃⲆᐃΔⲆ, ᐃⲆᐃΔⵠⲆᐃ, ⲆΔᐃᐃⲆⵠⵠ, ⲆⵠΔΔⵠⲆᐃ);
		const ⵠᐃΔΔΔⵠⵠⲆΔ = (2531011 + (26994 + (ᐃⵠΔⵠᐃⵠΔⵠⲆ ^ ᐃΔⵠⵠᐃⵠⲆᐃⲆ)) * 214013) % 4294967296;
		return ⵠᐃΔΔΔⵠⵠⲆΔ
	}

	function ΔΔᐃⵠⲆΔΔ(Ⲇⵠⵠ, ⵠᐃⲆᐃ) {
		ⲆⵠΔ.transition ? (Ⲇ.globalAlpha = ΔᐃⵠⲆ, Ⲇⵠⵠ.ΔⵠᐃⲆᐃ(ⵠᐃⲆᐃ), ⲆⵠΔ.time = ⲆⵠΔ.time ? ⵠΔᐃⵠ : ⲆᐃΔ, Ⲇ.globalAlpha = ⲆᐃΔ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ, Ⲇⵠⵠ.ΔⵠᐃⲆᐃ(ⵠᐃⲆᐃ), ⲆⵠΔ.time = ⲆⵠΔ.time ? Δⵠⵠⵠ : ΔᐃⵠⲆ, Ⲇ.globalAlpha = 1) : Ⲇⵠⵠ.ΔⵠᐃⲆᐃ(ⵠᐃⲆᐃ)
	}

	function ⲆᐃΔⲆⵠⲆᐃ(ⲆⵠⲆᐃⲆ, ΔΔΔΔⵠ, ⲆⲆᐃⲆⲆᐃΔ, ΔΔⲆΔ, ᐃΔⵠᐃ, ⲆⵠΔᐃ) {
		var w1 = ΔΔⲆΔ.w1;
		var w2 = ΔΔⲆΔ.w2;
		var w3 = ΔΔⲆΔ.w3;
		var Ⲇⵠⵠᐃ = ᐃⲆⵠ.ⲆⲆΔ.x + ⲆⵠⲆᐃⲆ - 700;
		var ᐃΔⵠΔⵠ = Math.max(ᐃⲆⵠ.ⲆⲆΔ.y + ΔΔΔΔⵠ, ᐃᐃⲆ);
		var ᐃⵠⵠᐃⵠ = Math.max(-ᐃⲆⵠ.ⲆⲆΔ.y + Ⲇᐃᐃᐃ - ⲆⲆᐃⲆⲆᐃΔ - ᐃⲆΔⲆᐃ, ⵠⲆᐃ);
		var ⵠΔⵠⲆ = ᐃΔⵠΔⵠ;
		var ΔⵠᐃΔⵠ = Ⲇᐃᐃᐃ - ᐃΔⵠΔⵠ - ᐃⵠⵠᐃⵠ;
		if (ⲆⵠΔᐃ) var ⵠⲆⵠᐃᐃ = ΔΔⲆΔ.Δᐃᐃ(w1).x;
		else var ⵠⲆⵠᐃᐃ = w1.r.x;
		var ᐃⲆⲆᐃ = Ⲇⵠⵠᐃ + ΔᐃᐃΔ.ⲆⵠᐃᐃⲆ;
		var ᐃᐃΔᐃΔ = ᐃⲆⲆᐃ,
			ᐃⵠⲆⵠⵠ = ⵠΔⵠⲆ,
			ⲆⵠΔΔΔ = ⵠⲆⵠᐃᐃ + ΔᐃᐃΔ.ΔⲆΔⲆⵠ,
			ⵠⲆᐃⲆⲆ = ΔⵠᐃΔⵠ;
		ᐃⲆⲆᐃ += ⵠⲆⵠᐃᐃ + ΔᐃᐃΔ.ΔⲆΔⲆⵠ - ⲆⲆⲆⲆ;
		var ΔΔΔΔⲆ = ᐃⲆⲆᐃ;
		if (ⲆⵠΔᐃ) var ⵠⲆⵠᐃᐃ = ΔΔⲆΔ.Δᐃᐃ(w2).x;
		else var ⵠⲆⵠᐃᐃ = w2.r.x;
		var d2 = Ⲇⵠⵠᐃ + ΔᐃᐃΔ.ΔⲆⲆᐃⵠ - ᐃⲆⲆᐃ + ⵠⲆⵠᐃᐃ;
		var ⲆΔⲆᐃⲆ = ᐃⲆⲆᐃ,
			ᐃΔΔⵠⵠ = ⵠΔⵠⲆ,
			ⲆⲆΔⲆⵠ = d2,
			ⵠΔΔᐃⵠ = ΔⵠᐃΔⵠ;
		ᐃⲆⲆᐃ += d2 - ΔΔΔⵠ;
		var ⲆⲆⲆⵠⵠ = ᐃⲆⲆᐃ - ᐃⲆᐃᐃ;
		if (ⲆⵠΔᐃ) var ⵠⲆⵠᐃᐃ = ΔΔⲆΔ.Δᐃᐃ(w3).x;
		else var ⵠⲆⵠᐃᐃ = w3.r.x;
		d2 = Ⲇⵠⵠᐃ + ΔᐃᐃΔ.ΔᐃⲆᐃⲆ - ᐃⲆⲆᐃ + ⵠⲆⵠᐃᐃ;
		if (ᐃⲆⲆᐃ + d2 - 3 > ⲆⲆⲆⵠⵠ) {
			var ᐃⲆⵠⲆΔ = true;
			var ⲆⲆᐃΔᐃ = ᐃⲆⲆᐃ,
				ⵠⵠΔΔⲆ = ⵠΔⵠⲆ,
				ΔⲆⵠᐃΔ = d2,
				ᐃⵠΔΔⲆ = ΔⵠᐃΔⵠ;
			ᐃⲆⲆᐃ += d2 - 2;
			var Δⵠⵠᐃⵠ = ᐃⲆⲆᐃ
		} else {
			var ᐃⲆⵠⲆΔ = ᐃⵠⲆⲆᐃ;
			ᐃⲆⲆᐃ = ⲆⲆⲆⵠⵠ;
			var Δⵠⵠᐃⵠ = -1
		}
		d2 = Ⲇⵠⵠᐃ + ΔᐃᐃΔ.ⲆΔΔⲆⵠⵠⲆ - ᐃⲆⲆᐃ;
		if (ⲆⵠΔᐃ > ΔⲆⲆ && ᐃΔⵠᐃ.ΔΔΔⵠⵠᐃⵠ === ΔⲆᐃᐃ) {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ᐃⲆΔ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(15, 77, 72, 252, 239, 187, ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = Δ.ᐃΔⵠᐃⲆⵠⲆ[ⲆⵠΔ.time];
			Ⲇ.fillRect(ᐃⲆⲆᐃ, ⵠΔⵠⲆ, d2, ΔⵠᐃΔⵠ)
		} else {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ΔᐃⲆⲆ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(ᐃΔⵠᐃ.ΔⲆᐃ[0], ᐃΔⵠᐃ.ΔⲆᐃ[1], ᐃΔⵠᐃ.ΔⲆᐃ[2], ᐃΔⵠᐃ.ⲆΔᐃ[0], ᐃΔⵠᐃ.ⲆΔᐃ[1], ᐃΔⵠᐃ.ⲆΔᐃ[2], ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = ᐃΔⵠᐃ.ⲆⲆⲆⵠᐃ[ⲆⵠΔ.time];
			Ⲇ.fillRect(ᐃⲆⲆᐃ, ⵠΔⵠⲆ, d2, ΔⵠᐃΔⵠ)
		}
	}

	function ⲆⲆᐃⵠⵠᐃΔⲆⵠ(Δⵠⵠ) {
		Ⲇ.save();
		Ⲇ.translate(ᐃⲆⵠ.ⲆⲆΔ.x + Δⵠⵠ.x, ᐃⲆⵠ.ⲆⲆΔ.y + Δⵠⵠ.y);
		Ⲇ.rotate(Δⵠⵠ.angle);
		Ⲇ.globalAlpha = Δⵠⵠ.alpha;
		var ᐃᐃ = ᐃΔ[Δⵠⵠ.id][ⲆⵠΔ.time];
		ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / ᐃⲆᐃⵠ);
		Ⲇ.globalAlpha = ᐃⲆΔ;
		Ⲇ.restore()
	}

	function ᐃⵠᐃⲆᐃ(ᐃⲆⵠⵠᐃΔⲆ, ΔΔᐃᐃⲆᐃⲆΔⵠ, ΔⲆᐃⵠⵠⵠⲆⵠᐃ, ⲆⲆⵠΔᐃⵠⵠ, ⵠΔⲆⲆⵠⲆΔΔⲆ, ΔⲆⲆⵠⵠⲆⲆⲆᐃ, ᐃᐃⵠⵠ) {
		var Δⵠ = "#";
		var ᐃⵠⵠΔ = Math.floor(ᐃᐃⵠⵠ * ⲆⲆⵠΔᐃⵠⵠ + ᐃⲆⵠⵠᐃΔⲆ * (1 - ᐃᐃⵠⵠ));
		Δⵠ += 16 > ᐃⵠⵠΔ ? "0" + ᐃⵠⵠΔ[ⲆᐃⲆⵠΔΔⲆ[299]](16) : ᐃⵠⵠΔ[ⲆᐃⲆⵠΔΔⲆ[299]](ᐃΔⲆⲆΔ);
		var ᐃⵠⵠΔ = Math.floor(ᐃᐃⵠⵠ * ⵠΔⲆⲆⵠⲆΔΔⲆ + (ⵠᐃⵠΔ - ᐃᐃⵠⵠ) * ΔΔᐃᐃⲆᐃⲆΔⵠ);
		Δⵠ += 16 > ᐃⵠⵠΔ ? "0" + ᐃⵠⵠΔ[ⲆᐃⲆⵠΔΔⲆ[299]](ⲆⲆᐃⵠᐃᐃΔ) : ᐃⵠⵠΔ[ⲆᐃⲆⵠΔΔⲆ[299]](16);
		var ᐃⵠⵠΔ = Math.floor(ᐃᐃⵠⵠ * ΔⲆⲆⵠⵠⲆⲆⲆᐃ + (ΔᐃⵠⲆ - ᐃᐃⵠⵠ) * ΔⲆᐃⵠⵠⵠⲆⵠᐃ);
		Δⵠ += 16 > ᐃⵠⵠΔ ? "0" + ᐃⵠⵠΔ[ⲆᐃⲆⵠΔΔⲆ[299]](ⲆⲆⲆᐃΔ) : ᐃⵠⵠΔ[ⲆᐃⲆⵠΔΔⲆ[299]](16);
		return Δⵠ
	}

	function ⲆⲆΔΔᐃᐃⲆ(ΔΔΔΔⵠ, ⲆⵠⲆᐃⲆ, ᐃᐃⵠΔⲆ, ΔΔⲆΔ, ᐃΔⵠᐃ, ⲆⵠΔᐃ) {
		var w1 = ΔΔⲆΔ.w1;
		var w2 = ΔΔⲆΔ.w2;
		var w3 = ΔΔⲆΔ.w3;
		var ⵠΔⵠⲆ = ᐃⲆⵠ.ⲆⲆΔ.y + ΔΔΔΔⵠ + 710;
		var ⵠᐃⵠᐃⲆ = Math.max(ᐃⲆⵠ.ⲆⲆΔ.x + ⲆⵠⲆᐃⲆ, ⵠⵠⵠΔ);
		var ⵠΔⵠⲆᐃ = Math.max(-ᐃⲆⵠ.ⲆⲆΔ.x + ᐃⲆⵠⵠ - ᐃᐃⵠΔⲆ - 100, ⵠⲆᐃ);
		var Ⲇⵠⵠᐃ = ⵠᐃⵠᐃⲆ;
		var ⲆⵠⵠⵠΔ = ᐃⲆⵠⵠ - ⵠᐃⵠᐃⲆ - ⵠΔⵠⲆᐃ;
		if (ⲆⵠΔᐃ) var ⵠⲆⵠᐃᐃ = ΔΔⲆΔ.Δᐃᐃ(w1).x;
		else var ⵠⲆⵠᐃᐃ = w1.r.x;
		var ᐃⲆⲆᐃ = ⵠΔⵠⲆ + ΔᐃᐃΔ.ⲆⵠᐃᐃⲆ;
		var ᐃⵠⲆⵠⵠ = ᐃⲆⲆᐃ,
			ᐃᐃΔᐃΔ = Ⲇⵠⵠᐃ,
			ⵠⲆᐃⲆⲆ = -ⵠⲆⵠᐃᐃ + ΔᐃᐃΔ.ΔⲆΔⲆⵠ,
			ⲆⵠΔΔΔ = ⲆⵠⵠⵠΔ;
		ᐃⲆⲆᐃ += -ⵠⲆⵠᐃᐃ + ΔᐃᐃΔ.ΔⲆΔⲆⵠ + ΔΔⲆⲆ;
		var ΔΔΔΔⲆ = ᐃⲆⲆᐃ;
		if (ⲆⵠΔᐃ) var ⵠⲆⵠᐃᐃ = ΔΔⲆΔ.Δᐃᐃ(w2).x;
		else var ⵠⲆⵠᐃᐃ = w2.r.x;
		var d2 = ⵠΔⵠⲆ - ΔᐃᐃΔ.ΔⲆⲆᐃⵠ - ᐃⲆⲆᐃ - ⵠⲆⵠᐃᐃ;
		var ᐃΔΔⵠⵠ = ᐃⲆⲆᐃ,
			ⲆΔⲆᐃⲆ = Ⲇⵠⵠᐃ,
			ⵠΔΔᐃⵠ = d2,
			ⲆⲆΔⲆⵠ = ⲆⵠⵠⵠΔ;
		ᐃⲆⲆᐃ += d2 + 2;
		var ⲆⲆⲆⵠⵠ = ᐃⲆⲆᐃ - 2;
		if (ⲆⵠΔᐃ) var ⵠⲆⵠᐃᐃ = ΔΔⲆΔ.Δᐃᐃ(w3).x;
		else var ⵠⲆⵠᐃᐃ = w3.r.x;
		d2 = ⵠΔⵠⲆ - ΔᐃᐃΔ.ΔᐃⲆᐃⲆ - ᐃⲆⲆᐃ - ⵠⲆⵠᐃᐃ;
		if (ᐃⲆⲆᐃ + d2 < ⲆⲆⲆⵠⵠ) {
			var ᐃⲆⵠⲆΔ = true;
			var ⵠⵠΔΔⲆ = ᐃⲆⲆᐃ,
				ⲆⲆᐃΔᐃ = Ⲇⵠⵠᐃ,
				ᐃⵠΔΔⲆ = d2,
				ΔⲆⵠᐃΔ = ⲆⵠⵠⵠΔ;
			ᐃⲆⲆᐃ += d2 + ΔⵠⲆᐃ;
			var Δⵠⵠᐃⵠ = ᐃⲆⲆᐃ
		} else {
			var ᐃⲆⵠⲆΔ = ΔⵠΔⲆⵠ;
			ᐃⲆⲆᐃ = ⲆⲆⲆⵠⵠ;
			var Δⵠⵠᐃⵠ = -ΔΔΔᐃ
		}
		d2 = ⵠΔⵠⲆ - ΔᐃᐃΔ.ⲆΔΔⲆⵠⵠⲆ - ᐃⲆⲆᐃ;
		if (ⲆⵠΔᐃ > 0 && 1 === ᐃΔⵠᐃ.ΔΔΔⵠⵠᐃⵠ) {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? 1 - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(15, 77, 72, 252, 239, 187, ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = Δ.ᐃΔⵠᐃⲆⵠⲆ[ⲆⵠΔ.time];
			Ⲇ.fillRect(Ⲇⵠⵠᐃ, ᐃⲆⲆᐃ, ⲆⵠⵠⵠΔ, d2)
		} else {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? 1 - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(ᐃΔⵠᐃ.ΔⲆᐃ[0], ᐃΔⵠᐃ.ΔⲆᐃ[1], ᐃΔⵠᐃ.ΔⲆᐃ[2], ᐃΔⵠᐃ.ⲆΔᐃ[0], ᐃΔⵠᐃ.ⲆΔᐃ[ⵠⲆΔⲆ], ᐃΔⵠᐃ.ⲆΔᐃ[ΔᐃΔᐃ], ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = ᐃΔⵠᐃ.ⲆⲆⲆⵠᐃ[ⲆⵠΔ.time];
			Ⲇ.fillRect(Ⲇⵠⵠᐃ, ᐃⲆⲆᐃ, ⲆⵠⵠⵠΔ, d2)
		}
	}

	function ᐃΔΔⲆΔⲆⲆⵠⵠ() {
		var ΔⵠⲆⲆⵠ = ᐃⲆⵠ.ΔⵠⲆⲆⵠ;
		0 === ΔⵠⲆⲆⵠ.ᐃᐃᐃⵠΔ ? ΔⵠⲆⲆⵠ.ᐃΔᐃⵠΔ = Math.max(0, ΔⵠⲆⲆⵠ.ᐃΔᐃⵠΔ - ⲆΔΔⲆ / ᐃⵠᐃΔⲆ) : ΔⵠⲆⲆⵠ.ᐃΔᐃⵠΔ = Math.min(Δᐃⵠⵠ, ΔⵠⲆⲆⵠ.ᐃΔᐃⵠΔ + ⲆΔΔⲆ / 10);
		var ⲆⵠΔⲆⵠ = ΔⵠⲆⲆⵠ.ⲆⵠΔⲆⵠ;
		for (var Ⲇᐃ = ⵠΔᐃᐃ; ⲆⵠΔⲆⵠ.length > Ⲇᐃ; Ⲇᐃ++) {
			var Δⵠⵠ = ⲆⵠΔⲆⵠ[Ⲇᐃ];
			ΔⵠⲆⲆⵠ.ⲆᐃⲆ(Δⵠⵠ);
			ᐃΔⲆⲆᐃᐃⲆ(Δ.ⲆΔⵠᐃΔⵠΔ, Δⵠⵠ.id, ᐃⲆⵠ.ⲆⲆΔ.x + Δⵠⵠ.x, ᐃⲆⵠ.ⲆⲆΔ.y + Δⵠⵠ.y, Δⵠⵠ.alpha)
		}
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆⵠΔⲆⵠ.length; Ⲇᐃ++) {
			var Δⵠⵠ = ⲆⵠΔⲆⵠ[Ⲇᐃ];
			if (Δⵠⵠ.ᐃΔᐃᐃⵠ <= 0 || -ᐃⲆⵠ.ⲆⲆΔ.x + ᐃⲆⵠⵠ < Δⵠⵠ.x || Δⵠⵠ.x < -ᐃⲆⵠ.ⲆⲆΔ.x || -ᐃⲆⵠ.ⲆⲆΔ.y + Ⲇᐃᐃᐃ < Δⵠⵠ.y) ⲆⵠΔⲆⵠ.splice(Ⲇᐃ, 1)
		}
		var ⲆⲆⲆⵠ = -ᐃⲆⵠ.ⲆⲆΔ.y;
		ⲆⵠΔ.ΔΔⵠⲆⵠ > -1e3 && ΔⵠⲆⲆⵠ.add(ⲆⲆⲆⵠ)
	}

	function ⲆᐃⵠⲆΔΔⲆ(ᐃⲆΔⲆΔⵠⲆ, ΔΔΔΔⵠⲆⵠ, ⲆᐃᐃⲆΔΔᐃ) {
		const ΔⵠΔⲆᐃⵠⵠ = (2531011 + (5328 + ᐃⲆΔⲆΔⵠⲆ) * 214013) % 4294967296;
		const ᐃΔⵠⵠᐃⵠⵠ = ((ΔΔΔΔⵠⲆⵠ + 19994) * 22695477 + 1) % 4294967296;
		const ᐃⵠⵠΔⲆⲆⵠ = ~(8802 & ⲆᐃᐃⲆΔΔᐃ) & ⲆᐃᐃⲆΔΔᐃ | ~(ⲆᐃᐃⲆΔΔᐃ & 8802) & 8802;
		const ⵠΔⲆⲆᐃⵠⵠⲆΔ = ⵠΔⵠⵠⵠᐃⲆ(ΔⵠΔⲆᐃⵠⵠ, ᐃΔⵠⵠᐃⵠⵠ, ᐃⵠⵠΔⲆⲆⵠ, ΔⵠΔⲆᐃⵠⵠ, ᐃΔⵠⵠᐃⵠⵠ, ᐃⵠⵠΔⲆⲆⵠ);
		const ΔΔⲆᐃΔΔᐃⲆⲆ = ⲆΔⲆⵠᐃΔⲆ(ΔⵠΔⲆᐃⵠⵠ, ᐃΔⵠⵠᐃⵠⵠ, ᐃⵠⵠΔⲆⲆⵠ, ΔⵠΔⲆᐃⵠⵠ, ᐃΔⵠⵠᐃⵠⵠ, ᐃⵠⵠΔⲆⲆⵠ);
		const ᐃⵠⲆᐃⲆᐃᐃᐃⵠ = 33598 ^ ⵠΔⲆⲆᐃⵠⵠⲆΔ;
		return ᐃⵠⲆᐃⲆᐃᐃᐃⵠ
	}

	function ΔΔΔⲆⵠ(ⲆΔ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ) {
		var ⲆⲆᐃ = ᐃᐃ.width;
		var ⲆΔⲆ = ᐃᐃ.height;
		var w2 = Math.floor(ⲆⲆᐃ / ᐃᐃΔⵠ);
		var ⲆⲆⲆΔΔ = Math.floor(ⲆΔⲆ / 2);
		ⲆⵠΔ.transition ? (Ⲇ.globalAlpha = 1, ᐃᐃⵠⲆ(Ⲇ, ᐃΔ[ⲆΔ][ⲆⵠΔ.time], 0, 0, ⲆⲆᐃ, ⲆΔⲆ, Ⲇⵠ, ᐃⵠⲆ, w2, ⲆⲆⲆΔΔ), ⲆⵠΔ.time = ⲆⵠΔ.time ? ⲆⵠⲆⲆ : Δⵠᐃ, Ⲇ.globalAlpha = 1 - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ, ᐃᐃⵠⲆ(Ⲇ, ᐃΔ[ⲆΔ][ⲆⵠΔ.time], Ⲇᐃⵠ, ⵠⵠⲆⵠ, ⲆⲆᐃ, ⲆΔⲆ, Ⲇⵠ, ᐃⵠⲆ, w2, ⲆⲆⲆΔΔ), ⲆⵠΔ.time = ⲆⵠΔ.time ? 0 : ⵠΔᐃ, Ⲇ.globalAlpha = ᐃⲆΔ) : ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ⵠΔᐃⵠ, Ⲇᐃⵠ, ⲆⲆᐃ, ⲆΔⲆ, Ⲇⵠ, ᐃⵠⲆ, w2, ⲆⲆⲆΔΔ)
	}

	function ΔΔᐃⵠΔΔΔⲆᐃ() {
		var ᐃᐃΔΔ = ΔΔⵠᐃᐃⲆᐃ;
		var ᐃⵠᐃΔ = ⲆⲆΔⵠΔⲆⲆ;
		var ⲆⲆΔⵠ = ⲆⲆΔⲆᐃᐃⵠ;
		var ⲆᐃΔᐃ = ᐃⵠⵠⵠΔⲆᐃ;
		ᐃΔΔΔ.ΔΔⲆᐃⲆ && ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ⵠⲆΔⵠΔ, "l", ⲆᐃΔⲆ);
		ᐃΔΔΔ.ΔΔⲆᐃⲆ && ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ⵠⵠⵠΔⲆ, ⵠ[105], ΔΔⲆⲆⵠ);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ⲆᐃᐃΔⲆ, ⵠ[105], ΔⲆⲆⵠ);
		ΔⵠⲆᐃⲆ(ΔⵠⲆᐃⲆⲆⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ⲆⲆⲆⵠΔ, "l", 2);
		if (ᐃΔΔΔ.ΔΔⲆᐃⲆ) {
			ΔⵠⲆᐃⲆ(ΔⲆΔᐃⵠⵠⲆⵠᐃ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ⲆᐃᐃΔⲆ, ⵠ[105], ᐃⵠᐃⲆ);
			ΔⵠⲆᐃⲆ(ΔⵠⲆᐃⲆⲆⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃᐃᐃⲆⲆ, "l", 2)
		}
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ⵠᐃⵠⵠΔ, "ma", 4);
		var ᐃⲆⲆΔΔⲆⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆΔⵠⲆᐃⲆ];
		for (var Ⲇᐃ = ⵠΔᐃⵠ; ᐃⲆⲆΔΔⲆⵠ.length > Ⲇᐃ; Ⲇᐃ++) ᐃⲆⲆΔΔⲆⵠ[Ⲇᐃ].ⲆⵠᐃⵠΔᐃⵠ();
		var ⵠΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠΔ];
		for (var Ⲇᐃ = ⵠⲆΔ; ⵠΔᐃΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			var ΔⲆⵠ = ⵠΔᐃΔ[Ⲇᐃ];
			for (var ⲆⲆᐃⲆ = Ⲇᐃⵠ; ΔⲆⵠ.ᐃⲆⵠⲆⵠ.length > ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) ᐃⵠᐃⵠⵠⲆⵠΔᐃ(ΔⲆⵠ.ᐃⲆⵠⲆⵠ[ⲆⲆᐃⲆ])
		}
		var ⲆΔⵠⲆᐃᐃᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⵠᐃⲆⲆ];
		for (var Ⲇᐃ = 0; ⲆΔⵠⲆᐃᐃᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
			ΔⲆᐃⵠ(ⲆΔⵠⲆᐃᐃᐃ[Ⲇᐃ], Δ.ΔⵠᐃⲆⲆ);
			ⲆΔⵠⲆᐃᐃᐃ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆΔⵠⲆᐃᐃᐃ[Ⲇᐃ].info)
		}
		var ᐃⲆᐃⵠᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⲆⲆΔ];
		for (var Ⲇᐃ = ⵠⲆΔ; ᐃⲆᐃⵠᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
			if (ᐃⲆᐃⵠᐃ[Ⲇᐃ].action == 2) ⲆⵠᐃⲆᐃⲆⵠ(ᐃⲆᐃⵠᐃ[Ⲇᐃ])
		}
		var ᐃᐃΔᐃᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆΔⵠⲆ];
		for (var Ⲇᐃ = 0; ᐃᐃΔᐃᐃ.length > Ⲇᐃ; Ⲇᐃ++) ⲆⵠᐃⲆᐃⲆⵠ(ᐃᐃΔᐃᐃ[Ⲇᐃ], Δ.ⵠⵠⲆⵠⵠⵠⲆ);
		var ΔΔᐃᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⲆᐃᐃ];
		for (var Ⲇᐃ = ᐃᐃᐃ; Ⲇᐃ < ΔΔᐃᐃΔ.length; Ⲇᐃ++) ⲆⵠᐃⲆᐃⲆⵠ(ΔΔᐃᐃΔ[Ⲇᐃ]);
		var ᐃᐃΔΔⵠⵠⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⲆᐃΔ];
		for (var Ⲇᐃ = ⵠⲆᐃ; ᐃᐃΔΔⵠⵠⲆ.length > Ⲇᐃ; Ⲇᐃ++) ⲆⵠᐃⲆᐃⲆⵠ(ᐃᐃΔΔⵠⵠⲆ[Ⲇᐃ]);
		var ⵠΔΔᐃⲆᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⵠΔΔ];
		for (var Ⲇᐃ = 0; ⵠΔΔᐃⲆᐃΔ.length > Ⲇᐃ; Ⲇᐃ++) ⲆⵠᐃⲆᐃⲆⵠ(ⵠΔΔᐃⲆᐃΔ[Ⲇᐃ], Δ.ΔᐃⲆⲆᐃΔⲆ);
		var ⵠⵠᐃⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⲆⲆ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠⵠᐃⵠ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ⵠⵠᐃⵠ[Ⲇᐃ]);
		var ⲆⵠⵠΔⲆⵠⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⵠᐃΔΔ];
		for (var Ⲇᐃ = ⵠΔᐃᐃ; ⲆⵠⵠΔⲆⵠⲆ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ⲆⵠⵠΔⲆⵠⲆ[Ⲇᐃ], Δ.ΔⵠᐃΔΔ);
		var ΔΔᐃᐃᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃΔΔᐃ];
		for (var Ⲇᐃ = ⵠᐃⲆⲆ; Ⲇᐃ < ΔΔᐃᐃᐃ.length; Ⲇᐃ++) ⲆⵠᐃⲆᐃⲆⵠ(ΔΔᐃᐃᐃ[Ⲇᐃ]);
		var ΔΔᐃᐃᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔΔⲆⲆᐃ];
		for (var Ⲇᐃ = ᐃᐃᐃ; ΔΔᐃᐃᐃ.length > Ⲇᐃ; Ⲇᐃ++) ⲆⵠᐃⲆᐃⲆⵠ(ΔΔᐃᐃᐃ[Ⲇᐃ]);
		var ΔΔᐃᐃᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃΔΔᐃ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ΔΔᐃᐃᐃ.length; Ⲇᐃ++) ΔΔᐃⵠⲆΔΔ(ΔΔᐃᐃᐃ[Ⲇᐃ]);
		var ᐃΔᐃⲆᐃⵠΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔᐃⵠⵠ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ᐃΔᐃⲆᐃⵠΔ.length; Ⲇᐃ++)
			if ((ᐃΔᐃⲆᐃⵠΔ[Ⲇᐃ].info & 15) === 0 || ᐃⵠᐃⵠⲆ === ᐃΔᐃⲆᐃⵠΔ[Ⲇᐃ].info) ΔⲆᐃⵠ(ᐃΔᐃⲆᐃⵠΔ[Ⲇᐃ]);
		var ⵠᐃΔⲆⲆΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠⲆ];
		for (var Ⲇᐃ = ⵠⲆΔ; ⵠᐃΔⲆⲆΔⲆ.length > Ⲇᐃ; Ⲇᐃ++)(0 === (ⵠᐃΔⲆⲆΔⲆ[Ⲇᐃ].info & 15) || ⵠᐃΔⲆⲆΔⲆ[Ⲇᐃ].info === ΔΔΔᐃⲆ) && ΔⲆᐃⵠ(ⵠᐃΔⲆⲆΔⲆ[Ⲇᐃ]);
		var ⵠᐃⲆΔΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃᐃⲆⲆ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠᐃⲆΔΔ.length; Ⲇᐃ++)(ⵠⲆᐃ === (ⵠᐃⲆΔΔ[Ⲇᐃ].info & 15) || ⵠᐃⲆΔΔ[Ⲇᐃ].info === 10) && ΔⲆᐃⵠ(ⵠᐃⲆΔΔ[Ⲇᐃ]);
		var ⲆΔⲆΔⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔᐃⲆ];
		for (var Ⲇᐃ = 0; ⲆΔⲆΔⵠⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ⲆΔⲆΔⵠⲆΔ[Ⲇᐃ], Δ.ΔᐃⲆⵠᐃ);
		var ᐃⲆᐃᐃⵠⵠⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃᐃⲆⵠ];
		for (var Ⲇᐃ = ⵠΔᐃⵠ; Ⲇᐃ < ᐃⲆᐃᐃⵠⵠⲆ.length; Ⲇᐃ++)((ᐃⲆᐃᐃⵠⵠⲆ[Ⲇᐃ].info & 15) === Δⵠⵠⵠ || ᐃⵠᐃΔⲆ === ᐃⲆᐃᐃⵠⵠⲆ[Ⲇᐃ].info) && ΔⲆᐃⵠ(ᐃⲆᐃᐃⵠⵠⲆ[Ⲇᐃ]);
		var ⲆᐃᐃΔᐃΔⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⵠΔⲆ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆᐃᐃΔᐃΔⵠ.length; Ⲇᐃ++)(0 === (ⲆᐃᐃΔᐃΔⵠ[Ⲇᐃ].info & 15) || ⵠⵠΔⲆᐃ === ⲆᐃᐃΔᐃΔⵠ[Ⲇᐃ].info) && ΔⲆᐃⵠ(ⲆᐃᐃΔᐃΔⵠ[Ⲇᐃ]);
		var ⵠᐃᐃⵠΔⵠⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆΔⲆΔ];
		for (var Ⲇᐃ = 0; ⵠᐃᐃⵠΔⵠⲆ.length > Ⲇᐃ; Ⲇᐃ++)
			if ((ⵠᐃᐃⵠΔⵠⲆ[Ⲇᐃ].info & 15) === 0 || ΔⲆᐃΔⲆ === ⵠᐃᐃⵠΔⵠⲆ[Ⲇᐃ].info) ΔⲆᐃⵠ(ⵠᐃᐃⵠΔⵠⲆ[Ⲇᐃ]);
		var ⲆΔⲆΔⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃⲆⵠᐃ];
		for (var Ⲇᐃ = ⵠΔᐃⵠ; Ⲇᐃ < ⲆΔⲆΔⵠⲆΔ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ⲆΔⲆΔⵠⲆΔ[Ⲇᐃ]);
		if (!Settings.BoxOnTop.enabled) {
			var ⵠⲆΔΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⵠⵠΔ];
			for (var Ⲇᐃ = ΔΔᐃᐃ; ⵠⲆΔΔⲆ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ⵠⲆΔΔⲆ[Ⲇᐃ], Δ.ᐃᐃⵠⵠΔ, Δ.ΔⲆᐃⵠⵠⲆⵠ);
			var ᐃⵠᐃᐃⵠⵠΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⲆΔⲆ];
			for (var Ⲇᐃ = 0; ᐃⵠᐃᐃⵠⵠΔ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃⵠᐃᐃⵠⵠΔ[Ⲇᐃ], Δ.ᐃᐃⵠⵠΔ, Δ.ΔⲆᐃⵠⵠⲆⵠ);
			var ᐃᐃⲆⲆⵠΔⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔᐃΔ];
			for (var Ⲇᐃ = 0; ᐃᐃⲆⲆⵠΔⵠ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃᐃⲆⲆⵠΔⵠ[Ⲇᐃ], Δ.ⵠΔΔᐃΔ, Δ.ⵠⲆⵠΔⲆⲆᐃ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆΔᐃΔᐃ];
		for (var Ⲇᐃ = 0; ⲆⵠⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			ⲆⵠⲆΔ[Ⲇᐃ].info & 1 && ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Δ.ΔⲆΔᐃⲆⵠᐃ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆΔΔⵠΔ];
		for (var Ⲇᐃ = ⵠⵠⲆⵠ; Ⲇᐃ < ⲆⵠⲆΔ.length; Ⲇᐃ++) {
			if (ⲆⵠⲆΔ[Ⲇᐃ].info & 1) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Δ.ᐃΔⵠᐃΔᐃⲆ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠΔⲆΔ];
		for (var Ⲇᐃ = ⲆⲆⵠⲆ; ⲆⵠⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			ⲆⵠⲆΔ[Ⲇᐃ].info && ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Δ.ΔⵠΔᐃᐃⲆⲆ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⵠΔΔ];
		for (var Ⲇᐃ = ᐃᐃᐃ; Ⲇᐃ < ⲆⵠⲆΔ.length; Ⲇᐃ++) {
			if (ⲆⵠⲆΔ[Ⲇᐃ].info) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Δ.ΔⵠⵠΔⵠⵠΔ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠᐃᐃΔ];
		for (var Ⲇᐃ = ⲆⲆⵠⲆ; Ⲇᐃ < ⲆⵠⲆΔ.length; Ⲇᐃ++) {
			if (ⲆⵠⲆΔ[Ⲇᐃ].info) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Δ.ⲆⵠΔΔⵠⲆⵠ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠΔⵠⵠ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆⵠⲆΔ.length; Ⲇᐃ++) {
			if (ⲆⵠⲆΔ[Ⲇᐃ].info) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Δ.ΔⵠΔᐃᐃⲆⲆ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃΔⲆⵠⲆ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆⵠⲆΔ.length; Ⲇᐃ++) {
			if (ⲆⵠⲆΔ[Ⲇᐃ].info & Δⵠᐃ) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Δ.ΔⲆΔᐃⲆⵠᐃ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆᐃⵠ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆⵠⲆΔ.length; Ⲇᐃ++) {
			if (ⲆⵠⲆΔ[Ⲇᐃ].info & ΔⲆᐃᐃ) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Δ.ᐃΔⵠᐃΔᐃⲆ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.Δⵠᐃⵠⵠ];
		for (var Ⲇᐃ = ⵠᐃⲆ; ⲆⵠⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			if (ⲆⵠⲆΔ[Ⲇᐃ].info) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Δ.ΔⵠΔᐃᐃⲆⲆ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆⲆⲆⵠ];
		for (var Ⲇᐃ = ᐃᐃᐃ; Ⲇᐃ < ⲆⵠⲆΔ.length; Ⲇᐃ++) {
			ⲆⵠⲆΔ[Ⲇᐃ].info && ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Δ.ΔⵠⵠΔⵠⵠΔ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠⵠᐃΔ];
		for (var Ⲇᐃ = ⵠⵠⲆⵠ; ⲆⵠⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			ⲆⵠⲆΔ[Ⲇᐃ].info && ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Δ.ⲆⵠΔΔⵠⲆⵠ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆΔⲆⵠ];
		for (var Ⲇᐃ = ⲆⲆⵠⲆ; ⲆⵠⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			if (ⲆⵠⲆΔ[Ⲇᐃ].info) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Δ.ΔⵠΔᐃᐃⲆⲆ)
		}
		var ⵠⵠⲆΔᐃⲆⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔᐃⵠᐃ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠⵠⲆΔᐃⲆⵠ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ⵠⵠⲆΔᐃⲆⵠ[Ⲇᐃ], Δ.ⵠΔᐃⵠᐃ, Δ.ᐃᐃΔΔᐃᐃΔ);
		var ΔⲆⲆⵠᐃᐃⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠᐃⲆⲆ];
		for (var Ⲇᐃ = ⵠΔᐃᐃ; Ⲇᐃ < ΔⲆⲆⵠᐃᐃⲆ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ΔⲆⲆⵠᐃᐃⲆ[Ⲇᐃ], Δ.ⲆⵠᐃⲆⲆ);
		var ᐃⲆⲆΔΔⲆⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆΔⵠⲆᐃⲆ];
		for (var Ⲇᐃ = 0; ᐃⲆⲆΔΔⲆⵠ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃⲆⲆΔΔⲆⵠ[Ⲇᐃ], Δ.ᐃⲆΔⵠⲆᐃⲆ, Δ.ⵠΔΔⲆⵠⵠⲆᐃⲆ);
		var ⵠΔⵠΔⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⲆΔΔΔ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠΔⵠΔⵠ.length; Ⲇᐃ++) {
			if (0 === ⵠΔⵠΔⵠ[Ⲇᐃ].ⲆⲆᐃᐃᐃⵠΔ) ΔⲆᐃⵠ(ⵠΔⵠΔⵠ[Ⲇᐃ])
		}
		if (!Settings.PlayerOnTop.enabled) {
			var ⵠΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠΔ];
			for (var Ⲇᐃ = ᐃᐃⲆ; Ⲇᐃ < ⵠΔᐃΔ.length; Ⲇᐃ++) {
				var ΔⲆⵠ = ⵠΔᐃΔ[Ⲇᐃ];
				if (ⵠΔᐃΔ[Ⲇᐃ].ΔⲆᐃᐃⵠ !== ⵠⵠ.ⲆⵠⲆⵠᐃ && ⵠΔᐃΔ[Ⲇᐃ].ΔⲆᐃᐃⵠ !== ⵠⵠ.ⲆᐃⲆⲆΔ && ⵠΔᐃΔ[Ⲇᐃ].ΔⲆᐃᐃⵠ !== ⵠⵠ.ΔⵠⲆΔᐃ && ⵠⵠ.ⵠⵠⵠⵠΔ !== ⵠΔᐃΔ[Ⲇᐃ].ΔⲆᐃᐃⵠ && ⵠⵠ.ΔⲆᐃⵠⵠ !== ⵠΔᐃΔ[Ⲇᐃ].ΔⲆᐃᐃⵠ) {
					if (ⵠⵠⵠ === ΔⲆⵠ.ⵠⲆⵠⵠⵠⲆⵠ) {
						if (.001 < ΔⲆⵠ.ᐃΔⲆⵠΔᐃⲆ) {
							ΔⲆⵠ.ᐃΔⲆⵠΔᐃⲆ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(ΔⲆⵠ.ᐃΔⲆⵠΔᐃⲆ, 0, .018);
							var ⵠⵠⵠⲆ = Δⵠᐃ + Math.min(ⵠⲆⲆ, Math.max(ΔⲆⵠ.ᐃΔⲆⵠΔᐃⲆ, 0) / ⲆⵠⲆΔⵠⲆⲆ) * .18;
							Ⲇ.save();
							Ⲇ.scale(ⵠⵠⵠⲆ, ⵠⵠⵠⲆ);
							ᐃⲆⵠ.ⲆⲆΔ.x /= ⵠⵠⵠⲆ;
							ᐃⲆⵠ.ⲆⲆΔ.y /= ⵠⵠⵠⲆ;
							ΔⲆⵠ.x /= ⵠⵠⵠⲆ;
							ΔⲆⵠ.y /= ⵠⵠⵠⲆ;
							ΔⲆⵠ.r.x /= ⵠⵠⵠⲆ;
							ΔⲆⵠ.r.y /= ⵠⵠⵠⲆ;
							ΔⲆⵠ.ⵠⵠᐃΔΔΔⵠ();
							ΔⲆⵠ.ⵠᐃᐃⲆ();
							ᐃⲆⵠ.ⲆⲆΔ.x *= ⵠⵠⵠⲆ;
							ᐃⲆⵠ.ⲆⲆΔ.y *= ⵠⵠⵠⲆ;
							ΔⲆⵠ.x *= ⵠⵠⵠⲆ;
							ΔⲆⵠ.y *= ⵠⵠⵠⲆ;
							ΔⲆⵠ.r.x *= ⵠⵠⵠⲆ;
							ΔⲆⵠ.r.y *= ⵠⵠⵠⲆ;
							Ⲇ.restore()
						} else {
							ΔⲆⵠ.ⲆⲆᐃᐃᐃⵠΔ = 0;
							ΔⲆⵠ.ⵠⵠᐃΔΔΔⵠ();
							ΔⲆⵠ.ⵠᐃᐃⲆ()
						}
					}
				} else if (ΔⲆⵠ.ⲆⲆⲆΔᐃ <= 180) {
					Ⲇ.save();
					var ⵠⵠⵠⲆ = 1 + Math.min(1, Math.max(ΔⲆⵠ.ⲆᐃⵠⵠΔ - 30, ΔΔᐃ) / 180) * .35;
					Ⲇ.scale(ⵠⵠⵠⲆ, ⵠⵠⵠⲆ);
					ᐃⲆⵠ.ⲆⲆΔ.x /= ⵠⵠⵠⲆ;
					ᐃⲆⵠ.ⲆⲆΔ.y /= ⵠⵠⵠⲆ;
					ΔⲆⵠ.x /= ⵠⵠⵠⲆ;
					ΔⲆⵠ.y /= ⵠⵠⵠⲆ;
					ΔⲆⵠ.r.x /= ⵠⵠⵠⲆ;
					ΔⲆⵠ.r.y /= ⵠⵠⵠⲆ;
					ΔⲆⵠ.ⲆⲆᐃᐃᐃⵠΔ = Δⵠⵠⵠ;
					ΔⲆⵠ.ⵠⵠᐃΔΔΔⵠ();
					ΔⲆⵠ.ⵠᐃᐃⲆ();
					ᐃⲆⵠ.ⲆⲆΔ.x *= ⵠⵠⵠⲆ;
					ᐃⲆⵠ.ⲆⲆΔ.y *= ⵠⵠⵠⲆ;
					ΔⲆⵠ.x *= ⵠⵠⵠⲆ;
					ΔⲆⵠ.y *= ⵠⵠⵠⲆ;
					ΔⲆⵠ.r.x *= ⵠⵠⵠⲆ;
					ΔⲆⵠ.r.y *= ⵠⵠⵠⲆ;
					Ⲇ.restore()
				}
			}
		}
		var ΔⲆⲆⵠᐃᐃⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠᐃⲆⲆ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ΔⲆⲆⵠᐃᐃⲆ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ΔⲆⲆⵠᐃᐃⲆ[Ⲇᐃ], Δ.ⵠⲆⲆⲆΔⲆΔ);
		var ⵠⵠΔᐃⵠⲆᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⲆⲆⵠᐃ];
		for (var Ⲇᐃ = ᐃᐃᐃ; ⵠⵠΔᐃⵠⲆᐃ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ⵠⵠΔᐃⵠⲆᐃ[Ⲇᐃ]);
		var ⲆᐃᐃⲆⵠⲆⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⵠΔⵠ];
		for (var Ⲇᐃ = ⵠⲆΔ; Ⲇᐃ < ⲆᐃᐃⲆⵠⲆⵠ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ⲆᐃᐃⲆⵠⲆⵠ[Ⲇᐃ], Δ.ⲆⵠⵠΔⵠ, Δ.ⲆⲆΔⲆΔⲆⲆ);
		var ᐃⵠᐃⵠⲆΔⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃΔⲆΔⲆ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ᐃⵠᐃⵠⲆΔⵠ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃⵠᐃⵠⲆΔⵠ[Ⲇᐃ]);
		var ΔⵠⵠΔΔΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⵠⲆᐃ];
		for (var Ⲇᐃ = ⵠⵠⵠΔ; Ⲇᐃ < ΔⵠⵠΔΔΔⲆ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ΔⵠⵠΔΔΔⲆ[Ⲇᐃ], Δ.ⲆᐃⵠⲆᐃ, Δ.ⵠⲆⵠᐃᐃⵠⲆ);
		var ΔᐃΔⲆⲆⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⲆⵠᐃ];
		for (var Ⲇᐃ = 0; ΔᐃΔⲆⲆⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ΔᐃΔⲆⲆⲆΔ[Ⲇᐃ], Δ.ⲆⵠⲆⵠᐃ, Δ.ⵠΔⵠⲆⵠΔᐃ);
		var ᐃⵠᐃⲆΔⲆⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⲆⲆΔ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ᐃⵠᐃⲆΔⲆⵠ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃⵠᐃⲆΔⲆⵠ[Ⲇᐃ], Δ.ⲆᐃⲆⲆΔ, Δ.ⲆᐃⲆⵠⵠΔᐃ);
		var ᐃΔᐃⲆᐃⵠΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔᐃⵠⵠ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ᐃΔᐃⲆᐃⵠΔ.length; Ⲇᐃ++)(ᐃΔᐃⲆᐃⵠΔ[Ⲇᐃ].info & 15) !== ᐃᐃᐃ && 10 !== ᐃΔᐃⲆᐃⵠΔ[Ⲇᐃ].info && ΔⲆᐃⵠ(ᐃΔᐃⲆᐃⵠΔ[Ⲇᐃ]);
		var ⵠᐃΔⲆⲆΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠⲆ];
		for (var Ⲇᐃ = ⲆⵠⲆⲆ; Ⲇᐃ < ⵠᐃΔⲆⲆΔⲆ.length; Ⲇᐃ++) 0 !== (ⵠᐃΔⲆⲆΔⲆ[Ⲇᐃ].info & 15) && ⵠᐃΔⲆⲆΔⲆ[Ⲇᐃ].info !== 10 && ΔⲆᐃⵠ(ⵠᐃΔⲆⲆΔⲆ[Ⲇᐃ]);
		var ⵠᐃⲆΔΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆΔᐃΔᐃⲆᐃ];
		for (var Ⲇᐃ = 0; ⵠᐃⲆΔΔ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ⵠᐃⲆΔΔ[Ⲇᐃ], Δ.ⵠΔᐃΔⵠ);
		var ⵠᐃⲆΔΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃᐃⲆⲆ];
		for (var Ⲇᐃ = 0; ⵠᐃⲆΔΔ.length > Ⲇᐃ; Ⲇᐃ++)
			if (0 !== (ⵠᐃⲆΔΔ[Ⲇᐃ].info & 15) && ⵠⲆⲆⵠΔ !== ⵠᐃⲆΔΔ[Ⲇᐃ].info) ΔⲆᐃⵠ(ⵠᐃⲆΔΔ[Ⲇᐃ]);
		var ΔΔᐃᐃᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔΔⲆⲆᐃ];
		for (var Ⲇᐃ = 0; ΔΔᐃᐃᐃ.length > Ⲇᐃ; Ⲇᐃ++) ΔΔᐃⵠⲆΔΔ(ΔΔᐃᐃᐃ[Ⲇᐃ]);
		var ᐃⲆᐃᐃⵠⵠⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃᐃⲆⵠ];
		for (var Ⲇᐃ = 0; ᐃⲆᐃᐃⵠⵠⲆ.length > Ⲇᐃ; Ⲇᐃ++) ⵠΔᐃⵠ !== (ᐃⲆᐃᐃⵠⵠⲆ[Ⲇᐃ].info & 15) && ᐃⲆᐃᐃⵠⵠⲆ[Ⲇᐃ].info !== 10 && ΔⲆᐃⵠ(ᐃⲆᐃᐃⵠⵠⲆ[Ⲇᐃ]);
		var ⲆᐃᐃΔᐃΔⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⵠΔⲆ];
		for (var Ⲇᐃ = ΔⲆⲆ; ⲆᐃᐃΔᐃΔⵠ.length > Ⲇᐃ; Ⲇᐃ++)(ⲆᐃᐃΔᐃΔⵠ[Ⲇᐃ].info & 15) !== ᐃⵠⵠⲆ && ⲆᐃᐃΔᐃΔⵠ[Ⲇᐃ].info !== 10 && ΔⲆᐃⵠ(ⲆᐃᐃΔᐃΔⵠ[Ⲇᐃ]);
		var ⵠᐃᐃⵠΔⵠⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆΔⲆΔ];
		for (var Ⲇᐃ = ⵠⵠⵠΔ; Ⲇᐃ < ⵠᐃᐃⵠΔⵠⲆ.length; Ⲇᐃ++) ⵠⵠⵠ !== (ⵠᐃᐃⵠΔⵠⲆ[Ⲇᐃ].info & 15) && 10 !== ⵠᐃᐃⵠΔⵠⲆ[Ⲇᐃ].info && ΔⲆᐃⵠ(ⵠᐃᐃⵠΔⵠⲆ[Ⲇᐃ]);
		var ⲆⵠⵠⵠⵠΔΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆΔᐃΔΔ];
		for (var Ⲇᐃ = ᐃᐃᐃ; Ⲇᐃ < ⲆⵠⵠⵠⵠΔΔ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ⲆⵠⵠⵠⵠΔΔ[Ⲇᐃ], Δ.ⲆΔᐃΔΔ, Δ.ⵠΔⲆΔᐃⲆᐃ);
		var ᐃⵠᐃⲆⲆΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⲆⵠⲆᐃ];
		for (var Ⲇᐃ = 0; ᐃⵠᐃⲆⲆΔⲆ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃⵠᐃⲆⲆΔⲆ[Ⲇᐃ], Δ.ΔⲆⵠⲆᐃ, Δ.ᐃᐃᐃⵠᐃⵠΔ);
		var ⵠⲆⲆᐃΔⲆᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⵠΔᐃⲆ];
		for (var Ⲇᐃ = ⵠⵠⵠ; ⵠⲆⲆᐃΔⲆᐃ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ⵠⲆⲆᐃΔⲆᐃ[Ⲇᐃ], Δ.ΔⵠΔᐃⲆ, Δ.ᐃⵠⵠⲆⲆⲆⵠ);
		var ᐃᐃⵠⵠⲆⲆᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔΔⲆΔⵠ];
		for (var Ⲇᐃ = 0; ᐃᐃⵠⵠⲆⲆᐃ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃᐃⵠⵠⲆⲆᐃ[Ⲇᐃ], Δ.ΔΔⲆΔⵠ, Δ.ᐃΔᐃⲆᐃᐃⲆ);
		var ΔⲆᐃⲆᐃᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆΔᐃ];
		for (var Ⲇᐃ = ΔΔᐃᐃ; ΔⲆᐃⲆᐃᐃΔ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ΔⲆᐃⲆᐃᐃΔ[Ⲇᐃ], Δ.ⵠⲆⲆΔᐃ, Δ.ⲆⵠⲆΔⵠⵠⲆ);
		var ⲆΔΔⵠⵠⵠⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃⵠΔⵠ];
		for (var Ⲇᐃ = ⵠⲆⵠⵠ; Ⲇᐃ < ⲆΔΔⵠⵠⵠⲆ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ⲆΔΔⵠⵠⵠⲆ[Ⲇᐃ], Δ.ⵠᐃⵠΔⵠ, Δ.ⲆΔᐃⲆᐃᐃⵠ);
		var ⲆⲆΔⲆⵠΔⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆΔΔᐃⲆ];
		for (var Ⲇᐃ = ⲆⲆⵠⲆ; Ⲇᐃ < ⲆⲆΔⲆⵠΔⵠ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ⲆⲆΔⲆⵠΔⵠ[Ⲇᐃ]);
		var ⲆⵠΔᐃⵠⲆⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃⵠΔᐃ];
		for (var Ⲇᐃ = ⵠⲆⵠⵠ; ⲆⵠΔᐃⵠⲆⲆ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ⲆⵠΔᐃⵠⲆⲆ[Ⲇᐃ], Δ.ΔΔᐃΔΔΔⲆ, Δ.ⲆⵠⵠⵠⲆⲆⲆ);
		var ⲆⵠᐃⲆΔᐃᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆⵠᐃ];
		for (var Ⲇᐃ = 0; ⲆⵠᐃⲆΔᐃᐃ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ⲆⵠᐃⲆΔᐃᐃ[Ⲇᐃ]);
		var ΔᐃⲆᐃⵠⲆᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔΔⲆ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ΔᐃⲆᐃⵠⲆᐃ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ΔᐃⲆᐃⵠⲆᐃ[Ⲇᐃ], Δ.ⵠΔΔΔⲆ, Δ.ᐃΔⲆⵠⵠⵠᐃ);
		var ΔⵠⲆΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃⲆⲆᐃ];
		for (var Ⲇᐃ = ⲆⲆⵠⲆ; Ⲇᐃ < ΔⵠⲆΔⲆ.length; Ⲇᐃ++) {
			if (ΔⵠⲆΔⲆ[Ⲇᐃ].scale === ΔᐃΔⲆ) ΔⲆᐃⵠ(ΔⵠⲆΔⲆ[Ⲇᐃ], Δ.ⵠᐃⲆⲆᐃ, Δ.ᐃᐃΔᐃⲆⵠᐃ)
		}
		var ΔⵠⲆΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠᐃⵠΔ];
		for (var Ⲇᐃ = ᐃᐃⲆ; Ⲇᐃ < ΔⵠⲆΔⲆ.length; Ⲇᐃ++) {
			if (1 === ΔⵠⲆΔⲆ[Ⲇᐃ].scale) ΔⲆᐃⵠ(ΔⵠⲆΔⲆ[Ⲇᐃ], Δ.ⵠⵠᐃⵠΔ, Δ.ⲆΔⵠⲆⲆⵠΔ)
		}
		var ⵠᐃⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠᐃⲆΔ];
		for (var Ⲇᐃ = 0; ⵠᐃⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ⵠᐃⲆΔ[Ⲇᐃ]);
		var ⲆΔⵠΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠⵠⲆᐃ];
		for (var Ⲇᐃ = 0; ⲆΔⵠΔⲆ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ⲆΔⵠΔⲆ[Ⲇᐃ], Δ.ᐃⵠⵠⲆᐃ);
		var ᐃⲆᐃⵠᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⲆⲆΔ];
		for (var Ⲇᐃ = 0; ᐃⲆᐃⵠᐃ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃⲆᐃⵠᐃ[Ⲇᐃ]);
		var ᐃⵠᐃᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⵠᐃ];
		for (var Ⲇᐃ = 0; ᐃⵠᐃᐃ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃⵠᐃᐃ[Ⲇᐃ]);
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃΔⲆⵠⲆ];
		for (var Ⲇᐃ = ⵠⵠⲆⵠ; ⲆⵠⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			if (!(ⲆⵠⲆΔ[Ⲇᐃ].info & 1)) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⵠⲆΔ[Ⲇᐃ]) ? 10012 : 10013 : Δ.ᐃⲆⲆΔⵠΔᐃ);
			ⲆⵠⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆⵠⲆΔ[Ⲇᐃ].info >> ΔᐃⲆⲆ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆᐃⵠ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆⵠⲆΔ.length; Ⲇᐃ++) {
			!(ⲆⵠⲆΔ[Ⲇᐃ].info & ΔᐃⲆⲆ) && ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⵠⲆΔ[Ⲇᐃ]) ? 10014 : 10015 : Δ.ᐃⲆⲆⲆΔᐃⲆ);
			ⲆⵠⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆⵠⲆΔ[Ⲇᐃ].info >> ΔΔⵠΔ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.Δⵠᐃⵠⵠ];
		for (var Ⲇᐃ = ᐃⵠⵠⲆ; ⲆⵠⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			if (!(ⲆⵠⲆΔ[Ⲇᐃ].info & ⵠᐃⵠΔ)) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⵠⲆΔ[Ⲇᐃ]) ? 10016 : 10017 : Δ.ΔⲆᐃⵠⵠⵠⵠ);
			ⲆⵠⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆⵠⲆΔ[Ⲇᐃ].info >> ⵠⲆⲆ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆⲆⲆⵠ];
		for (var Ⲇᐃ = 0; ⲆⵠⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			!(ⲆⵠⲆΔ[Ⲇᐃ].info & 1) && ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⵠⲆΔ[Ⲇᐃ]) ? 10018 : 10019 : Δ.ⲆΔⲆΔΔΔⲆ);
			ⲆⵠⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆⵠⲆΔ[Ⲇᐃ].info >> 1)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠⵠᐃΔ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆⵠⲆΔ.length; Ⲇᐃ++) {
			!(ⲆⵠⲆΔ[Ⲇᐃ].info & 1) && ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⵠⲆΔ[Ⲇᐃ]) ? 10020 : 10021 : Δ.ΔΔⵠⲆᐃⵠⲆ);
			ⲆⵠⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆⵠⲆΔ[Ⲇᐃ].info >> ⲆᐃΔ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆΔⲆⵠ];
		for (var Ⲇᐃ = ⵠΔᐃᐃ; ⲆⵠⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			if (!(ⲆⵠⲆΔ[Ⲇᐃ].info & 1)) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⵠⲆΔ[Ⲇᐃ]) ? 10022 : 10023 : Δ.ⵠⲆΔⲆⵠ);
			ⲆⵠⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆⵠⲆΔ[Ⲇᐃ].info >> 1)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆΔᐃΔᐃ];
		for (var Ⲇᐃ = ᐃᐃᐃ; ⲆⵠⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			if (!(ⲆⵠⲆΔ[Ⲇᐃ].info & 1)) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⵠⲆΔ[Ⲇᐃ]) ? 10024 : 10025 : Δ.ⲆΔᐃΔᐃ);
			ⲆⵠⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆⵠⲆΔ[Ⲇᐃ].info >> ΔⲆᐃⲆ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆΔΔⵠΔ];
		for (var Ⲇᐃ = ⵠⵠⲆⵠ; ⲆⵠⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			if (!(ⲆⵠⲆΔ[Ⲇᐃ].info & Ⲇⵠᐃ)) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⵠⲆΔ[Ⲇᐃ]) ? 10026 : 10027 : Δ.ⲆΔΔⵠΔ);
			ⲆⵠⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆⵠⲆΔ[Ⲇᐃ].info >> ⲆΔΔΔ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠΔⲆΔ];
		for (var Ⲇᐃ = Ⲇᐃⵠ; ⲆⵠⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			!(ⲆⵠⲆΔ[Ⲇᐃ].info & Δᐃⵠⵠ) && ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⵠⲆΔ[Ⲇᐃ]) ? 10028 : 10029 : Δ.ⵠⵠΔⲆΔ);
			ⲆⵠⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆⵠⲆΔ[Ⲇᐃ].info >> ⲆᐃΔ)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⵠΔΔ];
		for (var Ⲇᐃ = ⲆⵠⲆⲆ; ⲆⵠⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			if (!(ⲆⵠⲆΔ[Ⲇᐃ].info & 1)) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⵠⲆΔ[Ⲇᐃ]) ? 10030 : 10031 : Δ.ⲆᐃⵠΔΔ);
			ⲆⵠⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆⵠⲆΔ[Ⲇᐃ].info >> 1)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠᐃᐃΔ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆⵠⲆΔ.length; Ⲇᐃ++) {
			if (!(ⲆⵠⲆΔ[Ⲇᐃ].info & 1)) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⵠⲆΔ[Ⲇᐃ]) ? 10032 : 10033 : Δ.ⵠⵠᐃᐃΔ);
			ⲆⵠⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆⵠⲆΔ[Ⲇᐃ].info >> 1)
		}
		var ⲆⵠⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠΔⵠⵠ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆⵠⲆΔ.length; Ⲇᐃ++) {
			if (!(ⲆⵠⲆΔ[Ⲇᐃ].info & ΔⵠΔ)) ΔⲆᐃⵠ(ⲆⵠⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⲆⵠⲆΔ[Ⲇᐃ]) ? 10034 : 10035 : Δ.ⲆⵠΔⵠⵠ);
			ⲆⵠⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆⵠⲆΔ[Ⲇᐃ].info >> ΔⲆᐃⲆ)
		}
		var ⲆᐃΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⵠⵠⲆΔ];
		for (var Ⲇᐃ = 0; ⲆᐃΔᐃΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			ΔⲆᐃⵠ(ⲆᐃΔᐃΔ[Ⲇᐃ], Δ.ΔⵠⵠⲆΔ);
			ⲆᐃΔᐃΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆᐃΔᐃΔ[Ⲇᐃ].info)
		}
		var ⲆᐃΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⵠⵠ];
		for (var Ⲇᐃ = ᐃᐃⲆ; Ⲇᐃ < ⲆᐃΔᐃΔ.length; Ⲇᐃ++) {
			ΔⲆᐃⵠ(ⲆᐃΔᐃΔ[Ⲇᐃ], Δ.ΔᐃΔⵠⵠ);
			ⲆᐃΔᐃΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆᐃΔᐃΔ[Ⲇᐃ].info)
		}
		var ⲆᐃΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃᐃᐃᐃ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆᐃΔᐃΔ.length; Ⲇᐃ++) {
			ΔⲆᐃⵠ(ⲆᐃΔᐃΔ[Ⲇᐃ], Δ.ᐃᐃᐃᐃᐃ);
			ⲆᐃΔᐃΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆᐃΔᐃΔ[Ⲇᐃ].info)
		}
		var ⲆᐃΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⲆΔᐃⵠ];
		for (var Ⲇᐃ = ⵠΔᐃⵠ; ⲆᐃΔᐃΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			ΔⲆᐃⵠ(ⲆᐃΔᐃΔ[Ⲇᐃ], Δ.ΔⲆΔᐃⵠ);
			ⲆᐃΔᐃΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆᐃΔᐃΔ[Ⲇᐃ].info)
		}
		var ⲆᐃΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⲆΔⲆ];
		for (var Ⲇᐃ = ᐃⵠⵠⲆ; ⲆᐃΔᐃΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			ΔⲆᐃⵠ(ⲆᐃΔᐃΔ[Ⲇᐃ], Δ.ᐃⲆⲆΔⲆ);
			ⲆᐃΔᐃΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆᐃΔᐃΔ[Ⲇᐃ].info)
		}
		var ⲆᐃΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⵠⲆⲆ];
		for (var Ⲇᐃ = Δⵠⵠⵠ; Ⲇᐃ < ⲆᐃΔᐃΔ.length; Ⲇᐃ++) {
			ΔⲆᐃⵠ(ⲆᐃΔᐃΔ[Ⲇᐃ], Δ.ᐃⲆⵠⲆⲆ);
			ⲆᐃΔᐃΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⲆᐃΔᐃΔ[Ⲇᐃ].info)
		}
		var ⵠᐃᐃⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆᐃⵠΔ];
		for (var Ⲇᐃ = ⵠⵠⵠΔ; Ⲇᐃ < ⵠᐃᐃⲆΔ.length; Ⲇᐃ++) {
			ΔⲆᐃⵠ(ⵠᐃᐃⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⵠᐃᐃⲆΔ[Ⲇᐃ]) ? 10010 : 10011 : Δ.ⲆⲆᐃⵠΔ);
			ⵠᐃᐃⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⵠᐃᐃⲆΔ[Ⲇᐃ].info)
		}
		var ⵠᐃᐃⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠⲆΔⵠ];
		for (var Ⲇᐃ = 0; ⵠᐃᐃⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			ΔⲆᐃⵠ(ⵠᐃᐃⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⵠᐃᐃⲆΔ[Ⲇᐃ]) ? 10008 : 10009 : Δ.ᐃⵠⲆΔⵠ);
			ⵠᐃᐃⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⵠᐃᐃⲆΔ[Ⲇᐃ].info)
		}
		var ⵠᐃᐃⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠⵠᐃΔ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠᐃᐃⲆΔ.length; Ⲇᐃ++) {
			ΔⲆᐃⵠ(ⵠᐃᐃⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⵠᐃᐃⲆΔ[Ⲇᐃ]) ? 10006 : 10007 : Δ.ⵠⵠⵠᐃΔ);
			ⵠᐃᐃⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⵠᐃᐃⲆΔ[Ⲇᐃ].info)
		}
		var ⵠᐃᐃⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔⵠΔ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠᐃᐃⲆΔ.length; Ⲇᐃ++) {
			ΔⲆᐃⵠ(ⵠᐃᐃⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⵠᐃᐃⲆΔ[Ⲇᐃ]) ? 10004 : 10005 : Δ.ⵠΔΔⵠΔ);
			ⵠᐃᐃⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⵠᐃᐃⲆΔ[Ⲇᐃ].info)
		}
		var ⵠᐃᐃⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆⲆⵠⲆ];
		for (var Ⲇᐃ = ΔΔᐃ; ⵠᐃᐃⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
			ΔⲆᐃⵠ(ⵠᐃᐃⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⵠᐃᐃⲆΔ[Ⲇᐃ]) ? 10002 : 10003 : Δ.ⲆⲆⲆⵠⲆ);
			ⵠᐃᐃⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⵠᐃᐃⲆΔ[Ⲇᐃ].info)
		}
		var ⵠᐃᐃⲆΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔΔⵠⵠΔ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠᐃᐃⲆΔ.length; Ⲇᐃ++) {
			ΔⲆᐃⵠ(ⵠᐃᐃⲆΔ[Ⲇᐃ], Settings.ColoredSpikes.enabled ? isAlly(ⵠᐃᐃⲆΔ[Ⲇᐃ]) ? 1e4 : 10001 : Δ.ΔΔⵠⵠΔ);
			ⵠᐃᐃⲆΔ[Ⲇᐃ].ΔⵠΔᐃΔ(ⵠᐃᐃⲆΔ[Ⲇᐃ].info)
		}
		var ⵠⵠΔΔᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔᐃΔ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠⵠΔΔᐃ.length; Ⲇᐃ++) {
			var ⲆⲆᐃ = ⵠⵠΔΔᐃ[Ⲇᐃ];
			0 < ⲆⲆᐃ.info ? ΔⲆᐃⵠ(ⲆⲆᐃ, Δ.ᐃⵠⵠⵠᐃⲆΔ) : ΔⲆᐃⵠ(ⲆⲆᐃ, Δ.ΔΔΔⵠⵠᐃⲆ)
		}
		var ⵠⲆⲆⲆⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⲆΔⲆ];
		for (var Ⲇᐃ = ⵠᐃⲆ; Ⲇᐃ < ⵠⲆⲆⲆⵠ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ⵠⲆⲆⲆⵠ[Ⲇᐃ], Δ.ᐃᐃⲆΔⲆ);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃΔᐃⲆ, "g", 2);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.Δᐃᐃᐃᐃ, ⵠ[169], 2);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ⲆᐃⲆᐃ, "d", ΔᐃⵠΔ);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃΔᐃΔⲆ, ⵠ[563], 2);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ⲆΔᐃⵠⲆ, "p", ΔΔᐃᐃ);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃᐃⲆᐃⲆ, "m", 2);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ⲆΔΔᐃ, "a", 2);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ⲆᐃⲆⲆ, ⵠ[449], 2);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃⵠⲆᐃᐃ, ⵠ[ⵠΔΔⲆᐃ], 3, 3);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃⵠⲆᐃᐃ, ⵠ[3], ΔΔⲆⲆ, ⵠⵠⵠᐃ);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃⵠⲆᐃᐃ, ⵠ[3], ⵠᐃⵠΔ, ΔⵠΔ);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃⵠⲆᐃᐃ, ⵠ[3], ⵠΔᐃⵠ, ᐃᐃⲆ);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃⲆⲆᐃⵠ, ⵠ[ᐃΔⲆΔ], ᐃΔⲆΔ, 3);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃⲆⲆᐃⵠ, ⵠ[3], 2, ⲆⲆⲆⲆ);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃⲆⲆᐃⵠ, ⵠ[ᐃⵠΔᐃ], ⵠⲆΔⲆ, 1);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃⲆⲆᐃⵠ, ⵠ[3], 0, 0);
		var ⲆⵠΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⲆᐃⵠ];
		for (var Ⲇᐃ = 0; ⲆⵠΔⲆ.length > Ⲇᐃ; Ⲇᐃ++) {
			for (var ⲆⲆᐃⲆ = ΔΔᐃᐃ; ⲆⲆᐃⲆ < ⲆⵠΔⲆ[Ⲇᐃ].info; ⲆⲆᐃⲆ++) ΔⲆᐃⵠ(ⲆⵠΔⲆ[Ⲇᐃ].ⲆⵠΔⲆ[ⲆⲆᐃⲆ], Δ.ᐃᐃⲆᐃⵠ)
		}
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ΔⲆᐃⲆⲆ, "s", ΔᐃΔᐃ);
		var ᐃᐃΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔᐃΔΔ];
		for (var Ⲇᐃ = ⵠⵠⵠΔ; Ⲇᐃ < ᐃᐃΔⲆ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃᐃΔⲆ[Ⲇᐃ]);
		var ᐃᐃΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⲆⵠΔⲆ];
		for (var Ⲇᐃ = ⵠⵠⵠ; ᐃᐃΔⲆ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃᐃΔⲆ[Ⲇᐃ]);
		var ᐃᐃΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃΔⲆᐃΔ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ᐃᐃΔⲆ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃᐃΔⲆ[Ⲇᐃ]);
		var ᐃᐃΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠᐃΔΔ];
		for (var Ⲇᐃ = 0; ᐃᐃΔⲆ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃᐃΔⲆ[Ⲇᐃ]);
		var ᐃᐃΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆΔⲆ];
		for (var Ⲇᐃ = 0; ᐃᐃΔⲆ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃᐃΔⲆ[Ⲇᐃ]);
		var ⲆᐃⲆⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠΔᐃⲆ];
		for (var Ⲇᐃ = ⵠΔᐃⵠ; Ⲇᐃ < ⲆᐃⲆⵠ.length; Ⲇᐃ++) ⲆⵠᐃⲆᐃⲆⵠ(ⲆᐃⲆⵠ[Ⲇᐃ]);
		var ᐃᐃΔᐃᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆΔⵠⲆ];
		for (var Ⲇᐃ = ⵠⲆΔ; ᐃᐃΔᐃᐃ.length > Ⲇᐃ; Ⲇᐃ++) ΔΔᐃⵠⲆΔΔ(ᐃᐃΔᐃᐃ[Ⲇᐃ]);
		var ᐃᐃΔᐃᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⵠΔΔ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ᐃᐃΔᐃᐃ.length; Ⲇᐃ++) ΔΔᐃⵠⲆΔΔ(ᐃᐃΔᐃᐃ[Ⲇᐃ]);
		var ᐃⲆᐃⵠᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⲆⲆΔ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ᐃⲆᐃⵠᐃ.length; Ⲇᐃ++) {
			ᐃⲆᐃⵠ == ᐃⲆᐃⵠᐃ[Ⲇᐃ].action && ΔΔᐃⵠⲆΔΔ(ᐃⲆᐃⵠᐃ[Ⲇᐃ])
		}
		var ᐃⵠᐃᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⵠᐃ];
		for (var Ⲇᐃ = 0; ᐃⵠᐃᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
			ΔΔᐃⵠⲆΔΔ(ᐃⵠᐃᐃ[Ⲇᐃ])
		}
		var ΔΔᐃᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⲆᐃᐃ];
		for (var Ⲇᐃ = ⵠᐃⲆ; Ⲇᐃ < ΔΔᐃᐃΔ.length; Ⲇᐃ++) ΔΔᐃⵠⲆΔΔ(ΔΔᐃᐃΔ[Ⲇᐃ]);
		var ᐃᐃΔΔⵠⵠⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⲆᐃΔ];
		for (var Ⲇᐃ = ⲆⵠⲆⲆ; Ⲇᐃ < ᐃᐃΔΔⵠⵠⲆ.length; Ⲇᐃ++) {
			ΔΔᐃⵠⲆΔΔ(ᐃᐃΔΔⵠⵠⲆ[Ⲇᐃ]);
			ᐃᐃΔΔⵠⵠⲆ[Ⲇᐃ].ΔⵠΔᐃΔ(ᐃᐃΔΔⵠⵠⲆ[Ⲇᐃ].info)
		}
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃΔΔⲆᐃ, "c", ΔΔᐃ);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ΔᐃⲆⵠ, "t", 5, ᐃᐃⵠΔ);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ⵠΔᐃᐃⲆ, "f", 2, ΔᐃΔᐃ);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃⵠⵠⲆⵠ, ⵠ[267], 0, 0);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ΔΔⲆΔᐃ, "b", 3, ΔᐃΔᐃ);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ΔᐃⲆⵠ, "t", 3, 2);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ΔΔⲆΔᐃ, "b", ᐃᐃΔ, ΔΔᐃ);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ⵠΔᐃᐃⲆ, "f", ΔⵠΔ, 1);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃⵠⵠⲆⵠ, ⵠ[267], ⵠⲆΔⲆ, 1);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ΔᐃⲆⵠ, "t", 1, 0);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ⵠΔᐃᐃⲆ, "f", 0, Ⲇᐃⵠ);
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃⵠⵠⲆⵠ, ⵠ[267], ⲆᐃⵠΔ, 2);
		var ⲆᐃⲆⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠΔᐃⲆ];
		for (var Ⲇᐃ = ΔⲆⲆ; Ⲇᐃ < ⲆᐃⲆⵠ.length; Ⲇᐃ++) ΔΔᐃⵠⲆΔΔ(ⲆᐃⲆⵠ[Ⲇᐃ]);
		var ⵠⲆⵠⵠⵠⲆⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆᐃᐃΔ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠⲆⵠⵠⵠⲆⵠ.length; Ⲇᐃ++) ΔⲆᐃⵠ(ⵠⲆⵠⵠⵠⲆⵠ[Ⲇᐃ], Δ.ⲆⲆᐃᐃΔ);
		var ⵠΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠΔ];
		for (var Ⲇᐃ = ⵠⲆΔ; Ⲇᐃ < ⵠΔᐃΔ.length; Ⲇᐃ++) {
			var ΔⲆⵠ = ⵠΔᐃΔ[Ⲇᐃ];
			if (ΔⲆⵠ.ⵠⲆⵠⵠⵠⲆⵠ === 1 && (180 > ΔⲆⵠ.ⲆⲆⲆΔᐃ || ΔⲆⵠ.ΔⲆᐃᐃⵠ !== ⵠⵠ.ⲆⵠⲆⵠᐃ && ΔⲆⵠ.ΔⲆᐃᐃⵠ !== ⵠⵠ.ⲆᐃⲆⲆΔ && ⵠⵠ.ΔⲆᐃⵠⵠ !== ΔⲆⵠ.ΔⲆᐃᐃⵠ && ⵠⵠ.ΔⵠⲆΔᐃ !== ΔⲆⵠ.ΔⲆᐃᐃⵠ && ⵠⵠ.ⵠⵠⵠⵠΔ !== ΔⲆⵠ.ΔⲆᐃᐃⵠ)) {
				ΔⲆⵠ.ᐃΔⲆⵠΔᐃⲆ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(ΔⲆⵠ.ᐃΔⲆⵠΔᐃⲆ, 100, .018);
				var ⵠⵠⵠⲆ = ⵠⲆⲆ + .18 * Math.min(1, Math.max(ΔⲆⵠ.ᐃΔⲆⵠΔᐃⲆ, 0) / 100);
				Ⲇ.save();
				Ⲇ.scale(ⵠⵠⵠⲆ, ⵠⵠⵠⲆ);
				ᐃⲆⵠ.ⲆⲆΔ.x /= ⵠⵠⵠⲆ;
				ᐃⲆⵠ.ⲆⲆΔ.y /= ⵠⵠⵠⲆ;
				ΔⲆⵠ.x /= ⵠⵠⵠⲆ;
				ΔⲆⵠ.y /= ⵠⵠⵠⲆ;
				ΔⲆⵠ.r.x /= ⵠⵠⵠⲆ;
				ΔⲆⵠ.r.y /= ⵠⵠⵠⲆ;
				ΔⲆⵠ.ⵠⵠᐃΔΔΔⵠ();
				ΔⲆⵠ.ⵠᐃᐃⲆ();
				ᐃⲆⵠ.ⲆⲆΔ.x *= ⵠⵠⵠⲆ;
				ᐃⲆⵠ.ⲆⲆΔ.y *= ⵠⵠⵠⲆ;
				ΔⲆⵠ.x *= ⵠⵠⵠⲆ;
				ΔⲆⵠ.y *= ⵠⵠⵠⲆ;
				ΔⲆⵠ.r.x *= ⵠⵠⵠⲆ;
				ΔⲆⵠ.r.y *= ⵠⵠⵠⲆ;
				Ⲇ.restore()
			}
		}
		var ΔⵠᐃΔΔⵠⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃΔⵠᐃ];
		for (var Ⲇᐃ = ᐃⵠⵠⲆ; ΔⵠᐃΔΔⵠⵠ.length > Ⲇᐃ; Ⲇᐃ++) {
			ΔⲆᐃⵠ(ΔⵠᐃΔΔⵠⵠ[Ⲇᐃ], Δ.ⲆᐃΔⵠᐃ);
			ΔⵠᐃΔΔⵠⵠ[Ⲇᐃ].ΔⵠΔᐃΔ(ΔⵠᐃΔΔⵠⵠ[Ⲇᐃ].info)
		}
		var ᐃⵠⲆⵠΔΔΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆΔᐃⵠ];
		for (var Ⲇᐃ = 0; ᐃⵠⲆⵠΔΔΔ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃⵠⲆⵠΔΔΔ[Ⲇᐃ], Δ.ᐃⲆΔᐃⵠ, Δ.ΔᐃΔΔⲆΔⲆ);
		var ᐃᐃᐃⲆⲆⲆⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃᐃΔᐃ];
		for (var Ⲇᐃ = 0; ᐃᐃᐃⲆⲆⲆⲆ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃᐃᐃⲆⲆⲆⲆ[Ⲇᐃ], Δ.ⲆᐃᐃΔᐃ);
		var ⵠΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠΔ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠΔᐃΔ.length; Ⲇᐃ++) {
			var ΔⲆⵠ = ⵠΔᐃΔ[Ⲇᐃ];
			if ((ΔⲆⵠ.ΔⲆᐃᐃⵠ === ⵠⵠ.ⲆⵠⲆⵠᐃ || ⵠⵠ.ⲆᐃⲆⲆΔ === ΔⲆⵠ.ΔⲆᐃᐃⵠ || ⵠⵠ.ΔⲆᐃⵠⵠ === ΔⲆⵠ.ΔⲆᐃᐃⵠ || ⵠⵠ.ΔⵠⲆΔᐃ === ΔⲆⵠ.ΔⲆᐃᐃⵠ || ΔⲆⵠ.ΔⲆᐃᐃⵠ === ⵠⵠ.ⵠⵠⵠⵠΔ) && 180 < ΔⲆⵠ.ⲆⲆⲆΔᐃ) {
				ΔⲆⵠ.ⲆⲆᐃᐃᐃⵠΔ = ⲆΔΔΔ;
				Ⲇ.save();
				var ⵠⵠⵠⲆ = 1 + .35 * Math.min(ΔⲆᐃᐃ, Math.max(ΔⲆⵠ.ⲆᐃⵠⵠΔ - 30, 0) / 180);
				Ⲇ.scale(ⵠⵠⵠⲆ, ⵠⵠⵠⲆ);
				ᐃⲆⵠ.ⲆⲆΔ.x /= ⵠⵠⵠⲆ;
				ᐃⲆⵠ.ⲆⲆΔ.y /= ⵠⵠⵠⲆ;
				ΔⲆⵠ.x /= ⵠⵠⵠⲆ;
				ΔⲆⵠ.y /= ⵠⵠⵠⲆ;
				ΔⲆⵠ.r.x /= ⵠⵠⵠⲆ;
				ΔⲆⵠ.r.y /= ⵠⵠⵠⲆ;
				ΔⲆⵠ.ⵠⵠᐃΔΔΔⵠ();
				ΔⲆⵠ.ⵠᐃᐃⲆ();
				ᐃⲆⵠ.ⲆⲆΔ.x *= ⵠⵠⵠⲆ;
				ᐃⲆⵠ.ⲆⲆΔ.y *= ⵠⵠⵠⲆ;
				ΔⲆⵠ.x *= ⵠⵠⵠⲆ;
				ΔⲆⵠ.y *= ⵠⵠⵠⲆ;
				ΔⲆⵠ.r.x *= ⵠⵠⵠⲆ;
				ΔⲆⵠ.r.y *= ⵠⵠⵠⲆ;
				Ⲇ.restore()
			}
		}
		var ⵠΔⵠΔⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⲆΔΔΔ];
		for (var Ⲇᐃ = 0; ⵠΔⵠΔⵠ.length > Ⲇᐃ; Ⲇᐃ++) {
			if (1 === ⵠΔⵠΔⵠ[Ⲇᐃ].ⲆⲆᐃᐃᐃⵠΔ) ΔⲆᐃⵠ(ⵠΔⵠΔⵠ[Ⲇᐃ])
		}
		var ΔⵠⲆΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃⲆⲆᐃ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ΔⵠⲆΔⲆ.length; Ⲇᐃ++) {
			1 < ΔⵠⲆΔⲆ[Ⲇᐃ].scale && ΔⲆᐃⵠ(ΔⵠⲆΔⲆ[Ⲇᐃ], Δ.ⵠᐃⲆⲆᐃ, Δ.ᐃᐃΔᐃⲆⵠᐃ)
		}
		var ΔⵠⲆΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠᐃⵠΔ];
		for (var Ⲇᐃ = 0; ΔⵠⲆΔⲆ.length > Ⲇᐃ; Ⲇᐃ++) {
			ΔΔⵠΔ < ΔⵠⲆΔⲆ[Ⲇᐃ].scale && ΔⲆᐃⵠ(ΔⵠⲆΔⲆ[Ⲇᐃ], Δ.ⵠⵠᐃⵠΔ, Δ.ⲆΔⵠⲆⲆⵠΔ)
		}
		var ᐃⵠΔⵠΔⵠᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⵠⲆΔᐃ];
		for (var Ⲇᐃ = 0; ᐃⵠΔⵠΔⵠᐃ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃⵠΔⵠΔⵠᐃ[Ⲇᐃ], Δ.ΔⵠⲆΔᐃ, Δ.ΔⵠΔⵠΔⲆΔ);
		var ⵠΔⵠⲆΔⵠᐃ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃΔΔᐃⵠ];
		for (var Ⲇᐃ = ᐃᐃᐃ; ⵠΔⵠⲆΔⵠᐃ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ⵠΔⵠⲆΔⵠᐃ[Ⲇᐃ], Δ.ᐃΔΔᐃⵠ, Δ.ᐃⵠΔⲆΔᐃⵠ);
		ΔⲆⲆᐃⵠΔᐃ += 15 * ⲆΔΔⲆ;
		if (ΔⲆⲆᐃⵠΔᐃ > 60) ΔⲆⲆᐃⵠΔᐃ -= 60;
		Settings.NoFog.enabled || ΔⵠⲆᐃⲆ(ⵠⲆⵠΔᐃΔⵠ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ΔΔⲆᐃⵠ, ⵠ[176], 2);
		Settings.NoFog.enabled || ΔⵠⲆᐃⲆ(ⵠⲆⵠΔᐃΔⵠ, ⲆⲆΔⵠ, ⲆᐃΔᐃ, ᐃᐃΔΔ, ᐃⵠᐃΔ, Δ.ᐃᐃⲆΔᐃ, ⵠ[72], 2);
		if (Settings.PlayerOnTop.enabled) {
    var ⵠΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠΔ];
    var myself = getWorldProperty("fast_units")?.[getUserProperty("uid")] || null;
    if (Array.isArray(ⵠΔᐃΔ)) {
        if (myself) {
            var indexOfMyself = ⵠΔᐃΔ.indexOf(myself);
            if (indexOfMyself > -1) {
                ⵠΔᐃΔ.splice(indexOfMyself, 1);
                ⵠΔᐃΔ.push(myself);
            }
        }
        
        for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠΔᐃΔ.length; Ⲇᐃ++) {
            var ΔⲆⵠ = ⵠΔᐃΔ[Ⲇᐃ];
            
            if (ΔⲆⵠ) {
                if (ΔⲆⵠ.ΔⲆᐃᐃⵠ !== ⵠⵠ.ⲆⵠⲆⵠᐃ && ΔⲆⵠ.ΔⲆᐃᐃⵠ !== ⵠⵠ.ⲆᐃⲆⲆΔ && ΔⲆⵠ.ΔⲆᐃᐃⵠ !== ⵠⵠ.ΔⵠⲆΔᐃ && ⵠⵠ.ⵠⵠⵠⵠΔ !== ΔⲆⵠ.ΔⲆᐃᐃⵠ && ⵠⵠ.ΔⲆᐃⵠⵠ !== ΔⲆⵠ.ΔⲆᐃᐃⵠ) {
                    if (ⵠⵠⵠ === ΔⲆⵠ.ⵠⲆⵠⵠⵠⲆⵠ) {
                        if (0.001 < ΔⲆⵠ.ᐃΔⲆⵠΔᐃⲆ) {
                            ΔⲆⵠ.ᐃΔⲆⵠΔᐃⲆ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(ΔⲆⵠ.ᐃΔⲆⵠΔᐃⲆ, 0, 0.018);
                            var ⵠⵠⵠⲆ = Δⵠᐃ + Math.min(ⵠⲆⲆ, Math.max(ΔⲆⵠ.ᐃΔⲆⵠΔᐃⲆ, 0) / ⲆⵠⲆΔⵠⲆⲆ) * 0.18;
                            Ⲇ.save();
                            Ⲇ.scale(ⵠⵠⵠⲆ, ⵠⵠⵠⲆ);
                            ᐃⲆⵠ.ⲆⲆΔ.x /= ⵠⵠⵠⲆ;
                            ᐃⲆⵠ.ⲆⲆΔ.y /= ⵠⵠⵠⲆ;
                            ΔⲆⵠ.x /= ⵠⵠⵠⲆ;
                            ΔⲆⵠ.y /= ⵠⵠⵠⲆ;
                            ΔⲆⵠ.r.x /= ⵠⵠⵠⲆ;
                            ΔⲆⵠ.r.y /= ⵠⵠⵠⲆ;
                            ΔⲆⵠ.ⵠⵠᐃΔΔΔⵠ();
                            ΔⲆⵠ.ⵠᐃᐃⲆ();
                            ᐃⲆⵠ.ⲆⲆΔ.x *= ⵠⵠⵠⲆ;
                            ᐃⲆⵠ.ⲆⲆΔ.y *= ⵠⵠⵠⲆ;
                            ΔⲆⵠ.x *= ⵠⵠⵠⲆ;
                            ΔⲆⵠ.y *= ⵠⵠⵠⲆ;
                            ΔⲆⵠ.r.x *= ⵠⵠⵠⲆ;
                            ΔⲆⵠ.r.y *= ⵠⵠⵠⲆ;
                            Ⲇ.restore();
                        } else {
                            ΔⲆⵠ.ⲆⲆᐃᐃᐃⵠΔ = 0;
                            ΔⲆⵠ.ⵠⵠᐃΔΔΔⵠ();
                            ΔⲆⵠ.ⵠᐃᐃⲆ();
                        }
                    }
                } else if (ΔⲆⵠ.ⲆⲆⲆΔᐃ <= 180) {
                    Ⲇ.save();
                    var ⵠⵠⵠⲆ = 1 + Math.min(1, Math.max(ΔⲆⵠ.ⲆᐃⵠⵠΔ - 30, ΔΔᐃ) / 180) * 0.35;
                    Ⲇ.scale(ⵠⵠⵠⲆ, ⵠⵠⵠⲆ);
                    ᐃⲆⵠ.ⲆⲆΔ.x /= ⵠⵠⵠⲆ;
                    ᐃⲆⵠ.ⲆⲆΔ.y /= ⵠⵠⵠⲆ;
                    ΔⲆⵠ.x /= ⵠⵠⵠⲆ;
                    ΔⲆⵠ.y /= ⵠⵠⵠⲆ;
                    ΔⲆⵠ.r.x /= ⵠⵠⵠⲆ;
                    ΔⲆⵠ.r.y /= ⵠⵠⵠⲆ;
                    ΔⲆⵠ.ⲆⲆᐃᐃᐃⵠΔ = Δⵠⵠⵠ;
                    ΔⲆⵠ.ⵠⵠᐃΔΔΔⵠ();
                    ΔⲆⵠ.ⵠᐃᐃⲆ();
                    ᐃⲆⵠ.ⲆⲆΔ.x *= ⵠⵠⵠⲆ;
                    ᐃⲆⵠ.ⲆⲆΔ.y *= ⵠⵠⵠⲆ;
                    ΔⲆⵠ.x *= ⵠⵠⵠⲆ;
                    ΔⲆⵠ.y *= ⵠⵠⵠⲆ;
                    ΔⲆⵠ.r.x *= ⵠⵠⵠⲆ;
                    ΔⲆⵠ.r.y *= ⵠⵠⵠⲆ;
                    Ⲇ.restore();
                }
            }
        }
    } else {
        console.error("ⵠΔᐃΔ has cancer and is null or undefined :D");
    }
}

		/*
		if (Settings.PlayerOnTop.enabled) {
			var ⵠΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠΔ];
			for (var Ⲇᐃ = ᐃᐃⲆ; Ⲇᐃ < ⵠΔᐃΔ.length; Ⲇᐃ++) {
				var ΔⲆⵠ = ⵠΔᐃΔ[Ⲇᐃ];
				if (ⵠΔᐃΔ[Ⲇᐃ].ΔⲆᐃᐃⵠ !== ⵠⵠ.ⲆⵠⲆⵠᐃ && ⵠΔᐃΔ[Ⲇᐃ].ΔⲆᐃᐃⵠ !== ⵠⵠ.ⲆᐃⲆⲆΔ && ⵠΔᐃΔ[Ⲇᐃ].ΔⲆᐃᐃⵠ !== ⵠⵠ.ΔⵠⲆΔᐃ && ⵠⵠ.ⵠⵠⵠⵠΔ !== ⵠΔᐃΔ[Ⲇᐃ].ΔⲆᐃᐃⵠ && ⵠⵠ.ΔⲆᐃⵠⵠ !== ⵠΔᐃΔ[Ⲇᐃ].ΔⲆᐃᐃⵠ) {
					if (ⵠⵠⵠ === ΔⲆⵠ.ⵠⲆⵠⵠⵠⲆⵠ) {
						if (.001 < ΔⲆⵠ.ᐃΔⲆⵠΔᐃⲆ) {
							ΔⲆⵠ.ᐃΔⲆⵠΔᐃⲆ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(ΔⲆⵠ.ᐃΔⲆⵠΔᐃⲆ, 0, .018);
							var ⵠⵠⵠⲆ = Δⵠᐃ + Math.min(ⵠⲆⲆ, Math.max(ΔⲆⵠ.ᐃΔⲆⵠΔᐃⲆ, 0) / ⲆⵠⲆΔⵠⲆⲆ) * .18;
							Ⲇ.save();
							Ⲇ.scale(ⵠⵠⵠⲆ, ⵠⵠⵠⲆ);
							ᐃⲆⵠ.ⲆⲆΔ.x /= ⵠⵠⵠⲆ;
							ᐃⲆⵠ.ⲆⲆΔ.y /= ⵠⵠⵠⲆ;
							ΔⲆⵠ.x /= ⵠⵠⵠⲆ;
							ΔⲆⵠ.y /= ⵠⵠⵠⲆ;
							ΔⲆⵠ.r.x /= ⵠⵠⵠⲆ;
							ΔⲆⵠ.r.y /= ⵠⵠⵠⲆ;
							ΔⲆⵠ.ⵠⵠᐃΔΔΔⵠ();
							ΔⲆⵠ.ⵠᐃᐃⲆ();
							ᐃⲆⵠ.ⲆⲆΔ.x *= ⵠⵠⵠⲆ;
							ᐃⲆⵠ.ⲆⲆΔ.y *= ⵠⵠⵠⲆ;
							ΔⲆⵠ.x *= ⵠⵠⵠⲆ;
							ΔⲆⵠ.y *= ⵠⵠⵠⲆ;
							ΔⲆⵠ.r.x *= ⵠⵠⵠⲆ;
							ΔⲆⵠ.r.y *= ⵠⵠⵠⲆ;
							Ⲇ.restore()
						} else {
							ΔⲆⵠ.ⲆⲆᐃᐃᐃⵠΔ = 0;
							ΔⲆⵠ.ⵠⵠᐃΔΔΔⵠ();
							ΔⲆⵠ.ⵠᐃᐃⲆ()
						}
					}
				} else if (ΔⲆⵠ.ⲆⲆⲆΔᐃ <= 180) {
					Ⲇ.save();
					var ⵠⵠⵠⲆ = 1 + Math.min(1, Math.max(ΔⲆⵠ.ⲆᐃⵠⵠΔ - 30, ΔΔᐃ) / 180) * .35;
					Ⲇ.scale(ⵠⵠⵠⲆ, ⵠⵠⵠⲆ);
					ᐃⲆⵠ.ⲆⲆΔ.x /= ⵠⵠⵠⲆ;
					ᐃⲆⵠ.ⲆⲆΔ.y /= ⵠⵠⵠⲆ;
					ΔⲆⵠ.x /= ⵠⵠⵠⲆ;
					ΔⲆⵠ.y /= ⵠⵠⵠⲆ;
					ΔⲆⵠ.r.x /= ⵠⵠⵠⲆ;
					ΔⲆⵠ.r.y /= ⵠⵠⵠⲆ;
					ΔⲆⵠ.ⲆⲆᐃᐃᐃⵠΔ = Δⵠⵠⵠ;
					ΔⲆⵠ.ⵠⵠᐃΔΔΔⵠ();
					ΔⲆⵠ.ⵠᐃᐃⲆ();
					ᐃⲆⵠ.ⲆⲆΔ.x *= ⵠⵠⵠⲆ;
					ᐃⲆⵠ.ⲆⲆΔ.y *= ⵠⵠⵠⲆ;
					ΔⲆⵠ.x *= ⵠⵠⵠⲆ;
					ΔⲆⵠ.y *= ⵠⵠⵠⲆ;
					ΔⲆⵠ.r.x *= ⵠⵠⵠⲆ;
					ΔⲆⵠ.r.y *= ⵠⵠⵠⲆ;
					Ⲇ.restore()
				}
			}
		}
		*/
		if (Settings.BoxOnTop.enabled) {
			var ⵠⲆΔΔⲆ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⵠⵠΔ];
			for (var Ⲇᐃ = ΔΔᐃᐃ; ⵠⲆΔΔⲆ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ⵠⲆΔΔⲆ[Ⲇᐃ], Δ.ᐃᐃⵠⵠΔ, Δ.ΔⲆᐃⵠⵠⲆⵠ);
			var ᐃⵠᐃᐃⵠⵠΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⲆΔⲆ];
			for (var Ⲇᐃ = 0; ᐃⵠᐃᐃⵠⵠΔ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃⵠᐃᐃⵠⵠΔ[Ⲇᐃ], Δ.ᐃᐃⵠⵠΔ, Δ.ΔⲆᐃⵠⵠⲆⵠ);
			var ᐃᐃⲆⲆⵠΔⵠ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔᐃΔ];
			for (var Ⲇᐃ = 0; ᐃᐃⲆⲆⵠΔⵠ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆᐃⵠ(ᐃᐃⲆⲆⵠΔⵠ[Ⲇᐃ], Δ.ⵠΔΔᐃΔ, Δ.ⵠⲆⵠΔⲆⲆᐃ)
		}
		const ctx = Ⲇ;
		if (Settings.PlayerTracers.enabled && getWorldProperty("fast_units")[getUserProperty("uid")]) {
			if (getWorldProperty("units")[0].length - 1 > 0) {
				ctx.save();
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#ffffff";
				ctx.font = "20px Baloo Paaji";
				ctx.lineWidth = 5;
				ctx.strokeText("Players amount: " + (getWorldProperty("units")[0].length - 1), 20, 480);
				ctx.fillText("Players amount: " + (getWorldProperty("units")[0].length - 1), 20, 480);
				ctx.restore();
				getWorldProperty("units")[0].forEach((player => {
					ctx.save();
					ctx.beginPath();
					ctx.strokeStyle = isAlly(player) ? "#00ffff" : "#ff0000";
					ctx.lineWidth = 3;
					ctx.moveTo(getWorldProperty("fast_units")[getUserProperty("uid")].x + getUserProperty("cam").x, getWorldProperty("fast_units")[getUserProperty("uid")].y + getUserProperty("cam").y);
					ctx.lineTo(player.x + getUserProperty("cam").x, player.y + getUserProperty("cam").y);
					ctx.stroke();
					ctx.restore()
				}))
			}
		}
		if (Settings.KrakenTracers.enabled && getWorldProperty("fast_units")[getUserProperty("uid")]) {
			if (getWorldProperty("units")[66].length > 0) {
				ctx.save();
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#ffffff";
				ctx.font = "20px Baloo Paaji";
				ctx.lineWidth = 5;
				ctx.strokeText("Krakens amount: " + getWorldProperty("units")[66].length, 20, 500);
				ctx.fillText("Krakens amount: " + getWorldProperty("units")[66].length, 20, 500);
				ctx.restore();
				getWorldProperty("units")[66].forEach((kraken => {
					ctx.save();
					ctx.beginPath();
					ctx.strokeStyle = "#440b8a";
					ctx.lineWidth = 3;
					ctx.moveTo(getWorldProperty("fast_units")[getUserProperty("uid")].x + getUserProperty("cam").x, getWorldProperty("fast_units")[getUserProperty("uid")].y + getUserProperty("cam").y);
					ctx.lineTo(kraken.x + getUserProperty("cam").x, kraken.y + getUserProperty("cam").y);
					ctx.stroke();
					ctx.restore()
				}))
			}
		}
		if (Settings.SandwormTracers.enabled && getWorldProperty("fast_units")[getUserProperty("uid")]) {
			if (getWorldProperty("units")[76].length > 0) {
				ctx.save();
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#ffffff";
				ctx.font = "20px Baloo Paaji";
				ctx.lineWidth = 5;
				ctx.strokeText("Sandworms amount: " + getWorldProperty("units")[76].length, 20, 520);
				ctx.fillText("Sandworms amount: " + getWorldProperty("units")[76].length, 20, 520);
				ctx.restore();
				getWorldProperty("units")[76].forEach((sandworm => {
					ctx.save();
					ctx.beginPath();
					ctx.strokeStyle = "#000000";
					ctx.lineWidth = 3;
					ctx.moveTo(getWorldProperty("fast_units")[getUserProperty("uid")].x + getUserProperty("cam").x, getWorldProperty("fast_units")[getUserProperty("uid")].y + getUserProperty("cam").y);
					ctx.lineTo(sandworm.x + getUserProperty("cam").x, sandworm.y + getUserProperty("cam").y);
					ctx.stroke();
					ctx.restore()
				}))
			}
		}
		if (Settings.Debugger.enabled) {
			for (let i = 1; i < 100; i++) {
				if (Array.isArray(getWorldProperty("units")[i])) {
					getWorldProperty("units")[i].forEach((build => {
						if (build.pid) {
							ctx.save();
							ctx.lineWidth = 8;
							ctx.strokeStyle = "#000";
							ctx.fillStyle = "#fff";
							ctx.font = "22px Baloo Paaji";
							ctx.strokeText(getBuildOwner(build), build.x + getUserProperty("cam").x - 25, build.y + getUserProperty("cam").y);
							ctx.fillText(getBuildOwner(build), build.x + getUserProperty("cam").x - 25, build.y + getUserProperty("cam").y);
							ctx.restore()
						}
					}))
				}
			}
		}
		if (Settings.ListEnabledHacks.enabled) {
			let y = 300;
			for (const property in Settings) {
				if (Settings[property].enabled && Settings[property].draw) {
					ctx.save();
					ctx.font = "20px Baloo Paaji";
					ctx.fillStyle = "red";
					ctx.strokeStyle = "#000000";
					ctx.lineWidth = 5;
					ctx.strokeText(property, 6, y);
					ctx.fillText(property, 6, y);
					ctx.restore();
					y += 20
				}
			}
		}
		if (Settings.ShowJoinLeaves.enabled) {
			let JoinedPlayersY = 540;
			let KilledPlayersY = 640;
			for (let i = 0; i < JoinedPlayers.length; i++) {
				ctx.save();
				ctx.strokeStyle = "#000000";
				ctx.fillStyle = "green";
				ctx.lineWidth = 7;
				ctx.font = "20px Baloo Paaji";
				ctx.strokeText(JoinedPlayers[i], 6, JoinedPlayersY);
				ctx.fillText(JoinedPlayers[i], 6, JoinedPlayersY);
				ctx.restore();
				JoinedPlayersY += 20
			}
			for (let i = 0; i < KilledPlayers.length; i++) {
				ctx.save();
				ctx.strokeStyle = "#000000";
				ctx.fillStyle = "red";
				ctx.lineWidth = 7;
				ctx.font = "20px Baloo Paaji";
				ctx.strokeText(KilledPlayers[i], 6, KilledPlayersY);
				ctx.fillText(KilledPlayers[i], 6, KilledPlayersY);
				ctx.restore();
				KilledPlayersY += 20
			}
		}
		if (Settings.ExtractorInfo.enabled) {
			const extractors = [getWorldProperty("units")[24], getWorldProperty("units")[25], getWorldProperty("units")[26], getWorldProperty("units")[27], getWorldProperty("units")[28]];
			for (let ex = 0; ex < extractors.length; ex++) {
				extractors[ex].forEach((extractor => {
					ctx.save();
					ctx.strokeStyle = "#000000";
					ctx.fillStyle = "#ffffff";
					ctx.lineWidth = 7;
					ctx.font = "20px Baloo Paaji";
					ctx.strokeText((extractor.info & 255) + "x", getUserProperty("cam").x + extractor.x - 20, getUserProperty("cam").y + extractor.y - 5);
					ctx.fillText((extractor.info & 255) + "x", getUserProperty("cam").x + extractor.x - 20, getUserProperty("cam").y + extractor.y - 5);
					ctx.strokeText(((extractor.info & 65280) >> 8) + "x", getUserProperty("cam").x + extractor.x - 20, getUserProperty("cam").y + extractor.y + 15);
					ctx.fillText(((extractor.info & 65280) >> 8) + "x", getUserProperty("cam").x + extractor.x - 20, getUserProperty("cam").y + extractor.y + 15);
					ctx.restore()
				}))
			}
		}
		if (Settings.WindmillInfo.enabled) {
			getWorldProperty("units")[32].forEach((windmill => {
				ctx.save();
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#fff";
				ctx.lineWidth = 7;
				ctx.font = "24px Baloo Paaji";
				ctx.strokeText((windmill.info & 255) + "x", getUserProperty("cam").x + windmill.x - 20, getUserProperty("cam").y + windmill.y - 5);
				ctx.fillText((windmill.info & 255) + "x", getUserProperty("cam").x + windmill.x - 20, getUserProperty("cam").y + windmill.y - 5);
				ctx.strokeText(((windmill.info & 65280) >> 8) + "x", getUserProperty("cam").x + windmill.x - 20, getUserProperty("cam").y + windmill.y + 15);
				ctx.fillText(((windmill.info & 65280) >> 8) + "x", getUserProperty("cam").x + windmill.x - 20, getUserProperty("cam").y + windmill.y + 15);
				ctx.restore()
			}))
		}
		if (Settings.OvenInfo.enabled) {
			getWorldProperty("units")[34].forEach((oven => {
				ctx.save();
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#fff";
				ctx.lineWidth = 7;
				ctx.font = "24px Baloo Paaji";
				ctx.strokeText((oven.info & 31) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y - 15);
				ctx.fillText((oven.info & 31) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y - 15);
				ctx.strokeText(((oven.info & 992) >> 5) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y + 5);
				ctx.fillText(((oven.info & 992) >> 5) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y + 5);
				ctx.strokeText(((oven.info & 31744) >> 10) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y + 25);
				ctx.fillText(((oven.info & 31744) >> 10) + "x", getUserProperty("cam").x + oven.x - 20, getUserProperty("cam").y + oven.y + 25);
				ctx.restore()
			}))
		}
		if (Settings.FurnaceInfo.enabled) {
			getWorldProperty("units")[18].forEach((furnace => {
				ctx.save();
				ctx.lineWidth = 8;
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#fff";
				ctx.font = "22px Baloo Paaji";
				ctx.strokeText(furnace.info + "x", furnace.x + getUserProperty("cam").x - 25, furnace.y + getUserProperty("cam").y);
				ctx.fillText(furnace.info + "x", furnace.x + getUserProperty("cam").x - 25, furnace.y + getUserProperty("cam").y);
				ctx.restore()
			}))
		}
		if (Settings.TotemInfo.enabled) {
			getWorldProperty("units")[29].forEach(totem => {
				ctx.save();
				ctx.lineWidth = 8;
				ctx.strokeStyle = "#000";
				ctx.fillStyle = "#fff";
				ctx.font = "22px Baloo Paaji";
				let ownerName = getBuildOwner(totem);
				if (!ownerName) {
					ownerName = " ";
				}
				const x = totem.x + getUserProperty("cam").x - 25;
				const y = totem.y + getUserProperty("cam").y;
				ctx.strokeText(ownerName, x, y);
				ctx.fillText(ownerName, x, y);
				const totemInfo = totem.info >= 16 ? totem.info % 16 : totem.info;
				ctx.strokeText(totemInfo, x, y + 20);
				ctx.fillText(totemInfo, x, y + 20);
				const totemLabel = totem.info >= 16 ? "L" : "U";
				ctx.strokeText(totemLabel, x, y + 40);
				ctx.fillText(totemLabel, x, y + 40);
				const ownerWidth = ctx.measureText(ownerName).width;
				const levelX = x + ownerWidth + ctx.measureText(' [').width;
				ctx.fillStyle = "red";
				ctx.strokeText(`[${getBuildLevel(totem.pid)}]`, levelX, y);
				ctx.fillText(`[${getBuildLevel(totem.pid)}]`, levelX, y);
		
				ctx.restore();
			});
		}
			if (Settings.MachineInfo.enabled) {
				getWorldProperty("units")[23].forEach(machine => {
					ctx.lineWidth = 8;
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#fff";
					ctx.font = "22px Baloo Paaji";
					const x = machine.x + getUserProperty("cam").x - 25;
					const y = machine.y + getUserProperty("cam").y;
					
					ctx.lineWidth = 8;
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#fff";
					ctx.font = "22px Baloo Paaji";
					ctx.strokeText(getBuildOwner(machine), x, y);
					ctx.fillText(getBuildOwner(machine), x, y);
					
					const ownerWidth = ctx.measureText(getBuildOwner(machine)).width;
					
					ctx.fillStyle = "red";
					ctx.strokeStyle = "#000";
					ctx.lineWidth = 8;
			
					const levelX = x + ownerWidth + ctx.measureText(' [').width; 
					ctx.strokeText(`[${getBuildLevel(machine.pid)}]`, levelX, y);
					ctx.fillText(`[${getBuildLevel(machine.pid)}]`, levelX, y);
					
					ctx.restore();
				});
			}
			if (Settings.GhostInfo.enabled) {
				const ghost = getUserGhostProperty();
				getWorldProperty("units")[0].forEach(player => {
					if (player.ΔⲆⲆΔⵠ) {
						ctx.save();
						ctx.font = "30px Baloo Paaji";
						ctx.strokeStyle = "black";
						ctx.lineWidth = 7;
						let remainingTime = Math.floor(60 - (performance.now() - player.ghosttime) / 1000);
						remainingTime = Math.max(remainingTime, 0); 0
						ctx.strokeText(remainingTime + 1, getUserProperty("cam").x + player.x - 25, getUserProperty("cam").y + player.y + 20);
						ctx.fillStyle = "white";
						ctx.fillText(remainingTime + 1, getUserProperty("cam").x + player.x - 25, getUserProperty("cam").y + player.y + 20);
						ctx.restore();
						}
				}
			);
			}
		if (Settings.ChestInfo.enabled) {
			getWorldProperty("units")[11].forEach((chest => {
				if (chest.action) {
					ctx.save();
					ctx.globalAlpha = .9;
					ctxDrawImage(ctx, ΔᐃᐃⲆ.ᐃⵠΔ[chest.action / 2 - 1].info.ᐃᐃ[0], getUserProperty("cam").x + chest.x - 33, getUserProperty("cam").y + chest.y - 25, 67, 52);
					ctx.globalAlpha = 1;
					ctx.font = "20px Baloo Paaji";
					ctx.strokeStyle = "rgb(0,0,0)";
					ctx.lineWidth = 7;
					ctx.strokeText(chest.action / 2 - 1, getUserProperty("cam").x + chest.x - 32, getUserProperty("cam").y + chest.y - 12);
					ctx.strokeText("x" + chest.info, getUserProperty("cam").x + chest.x - 32, getUserProperty("cam").y + chest.y + 20);
					ctx.fillStyle = "rgb(255,255,255)";
					ctx.fillText(chest.action / 2 - 1, getUserProperty("cam").x + chest.x - 32, getUserProperty("cam").y + chest.y - 12);
					ctx.fillText("x" + chest.info, getUserProperty("cam").x + chest.x - 32, getUserProperty("cam").y + chest.y + 20);
					ctx.restore()
				}
			}))
		}
		if (Settings.BoxInfo.enabled) {
			const boxes = [getWorldProperty("units")[82], getWorldProperty("units")[86], getWorldProperty("units")[87]];
			for (let bx = 0; bx < boxes.length; bx++) {
				boxes[bx].forEach((box => {
					ctx.save();
					ctx.lineWidth = 8;
					ctx.strokeStyle = "#000";
					ctx.fillStyle = "#fff";
					ctx.font = "18px Baloo Paaji";
					if (box.boxType) {
						ctx.strokeText(box.boxType, box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y - 10);
						ctx.fillText(box.boxType, box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y - 10)
					}
					if (box.disappearTime) {
						var n = Math.floor((box.disappearTime - +new Date) / 1e3),
							a = 0;
						a = n < 10 ? 9 : n < 99 ? 12 : 18
					}
					ctx.strokeText(n + "s", box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y + 10);
					ctx.fillText(n + "s", box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y + 10);
					ctx.strokeText("hits:" + box.hits, box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y + 30);
					ctx.fillText("hits:" + box.hits, box.x + getUserProperty("cam").x - 20, box.y + getUserProperty("cam").y + 30);
					ctx.restore()
				}))
			}
		}
	}

	function ⲆⵠᐃⲆᐃⲆⵠ(Ⲇⵠⵠ, ⵠᐃⲆᐃ) {
		ⲆⵠΔ.transition ? (Ⲇ.globalAlpha = ΔⲆᐃⲆ, Ⲇⵠⵠ.ⵠⲆᐃΔⲆ(ⵠᐃⲆᐃ), ⲆⵠΔ.time = ⲆⵠΔ.time ? 0 : ΔΔⵠΔ, Ⲇ.globalAlpha = ᐃⲆΔ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ, Ⲇⵠⵠ.ⵠⲆᐃΔⲆ(ⵠᐃⲆᐃ), ⲆⵠΔ.time = ⲆⵠΔ.time ? 0 : 1, Ⲇ.globalAlpha = 1) : Ⲇⵠⵠ.ⵠⲆᐃΔⲆ(ⵠᐃⲆᐃ)
	}

	function ᐃⵠᐃⵠⵠⲆⵠΔᐃ(ⵠᐃᐃⵠ) {
		Ⲇ.globalAlpha = ⵠᐃᐃⵠ.alpha;
		ᐃΔΔ(Ⲇ, ⵠᐃᐃⵠ.x + ᐃⲆⵠ.ⲆⲆΔ.x, ⵠᐃᐃⵠ.y + ᐃⲆⵠ.ⲆⲆΔ.y, ⵠᐃᐃⵠ.r);
		ΔΔ(Ⲇ, Δ.ΔⵠΔⲆⲆΔⲆ[ⲆⵠΔ.time]);
		Ⲇ.globalAlpha = ΔᐃⲆⲆ
	}

	function ⵠⲆⵠⵠⵠⵠΔ(ⲆⵠⲆᐃⲆ, ΔΔΔΔⵠ, ⲆⲆᐃⲆⲆᐃΔ, ΔΔⲆΔ, ᐃΔⵠᐃ, ⲆⵠΔᐃ) {
		var w1 = ΔΔⲆΔ.w1;
		var w2 = ΔΔⲆΔ.w2;
		var w3 = ΔΔⲆΔ.w3;
		var Ⲇⵠⵠᐃ = ᐃⲆⵠ.ⲆⲆΔ.x + ⲆⵠⲆᐃⲆ + 820;
		var ᐃΔⵠΔⵠ = Math.max(ᐃⲆⵠ.ⲆⲆΔ.y + ΔΔΔΔⵠ, ⵠΔᐃⵠ);
		var ᐃⵠⵠᐃⵠ = Math.max(-ᐃⲆⵠ.ⲆⲆΔ.y + Ⲇᐃᐃᐃ - ⲆⲆᐃⲆⲆᐃΔ - 100, ΔΔᐃ);
		var ⵠΔⵠⲆ = ᐃΔⵠΔⵠ;
		var ΔⵠᐃΔⵠ = Ⲇᐃᐃᐃ - ᐃΔⵠΔⵠ - ᐃⵠⵠᐃⵠ;
		if (ⲆⵠΔᐃ) var ⲆⲆᐃ = ΔΔⲆΔ.Δᐃᐃ(w1);
		else var ⲆⲆᐃ = w1.r;
		var ᐃⲆⲆᐃ = Ⲇⵠⵠᐃ + ΔᐃᐃΔ.ⲆⵠᐃᐃⲆ;
		var ᐃᐃΔᐃΔ = ᐃⲆⲆᐃ,
			ᐃⵠⲆⵠⵠ = ⵠΔⵠⲆ,
			ⲆⵠΔΔΔ = -ⲆⲆᐃ.x + ΔᐃᐃΔ.ΔⲆΔⲆⵠ,
			ⵠⲆᐃⲆⲆ = ΔⵠᐃΔⵠ;
		ᐃⲆⲆᐃ += -ⲆⲆᐃ.x + ΔᐃᐃΔ.ΔⲆΔⲆⵠ + 2;
		var ΔΔΔΔⲆ = ᐃⲆⲆᐃ;
		if (ⲆⵠΔᐃ) var ⲆⲆᐃ = ΔΔⲆΔ.Δᐃᐃ(w2);
		else var ⲆⲆᐃ = w2.r;
		var d2 = Ⲇⵠⵠᐃ - ΔᐃᐃΔ.ΔⲆⲆᐃⵠ - ᐃⲆⲆᐃ - ⲆⲆᐃ.x;
		var ⲆΔⲆᐃⲆ = ᐃⲆⲆᐃ,
			ᐃΔΔⵠⵠ = ⵠΔⵠⲆ,
			ⲆⲆΔⲆⵠ = d2,
			ⵠΔΔᐃⵠ = ΔⵠᐃΔⵠ;
		ᐃⲆⲆᐃ += d2 + ⲆⵠΔⵠ;
		var ⲆⲆⲆⵠⵠ = ᐃⲆⲆᐃ - 2;
		if (ⲆⵠΔᐃ) var ⲆⲆᐃ = ΔΔⲆΔ.Δᐃᐃ(w3);
		else var ⲆⲆᐃ = w3.r;
		d2 = Ⲇⵠⵠᐃ - ΔᐃᐃΔ.ΔᐃⲆᐃⲆ - ᐃⲆⲆᐃ - ⲆⲆᐃ.x;
		if (ᐃⲆⲆᐃ + d2 < ⲆⲆⲆⵠⵠ) {
			var ᐃⲆⵠⲆΔ = true;
			var ⲆⲆᐃΔᐃ = ᐃⲆⲆᐃ,
				ⵠⵠΔΔⲆ = ⵠΔⵠⲆ,
				ΔⲆⵠᐃΔ = d2,
				ᐃⵠΔΔⲆ = ΔⵠᐃΔⵠ;
			ᐃⲆⲆᐃ += d2 + 2;
			var Δⵠⵠᐃⵠ = ᐃⲆⲆᐃ
		} else {
			var ᐃⲆⵠⲆΔ = ΔⲆΔᐃΔ;
			ᐃⲆⲆᐃ = ⲆⲆⲆⵠⵠ;
			var Δⵠⵠᐃⵠ = -ⵠⲆⲆ
		}
		d2 = Ⲇⵠⵠᐃ - ΔᐃᐃΔ.ⲆΔΔⲆⵠⵠⲆ - ᐃⲆⲆᐃ;
		if (ⲆⵠΔ.transition) {
			var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ⵠⲆΔⲆ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
			Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(9, 55, 63, 11, 106, 132, ᐃᐃⵠⵠ)
		} else Ⲇ.fillStyle = Δ.ᐃⲆΔⵠᐃ[ⲆⵠΔ.time];
		Ⲇ.fillRect(ᐃᐃΔᐃΔ, ᐃⵠⲆⵠⵠ, ⲆⵠΔΔΔ, ⵠⲆᐃⲆⲆ);
		if (ⲆⵠΔᐃ) {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ⵠΔᐃ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(15, 70, 76, 42, 139, 155, ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = Δ.ⵠΔΔΔΔⲆⵠ[ⲆⵠΔ.time]
		} else {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ΔᐃⵠⲆ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(9, 55, 63, 11, 106, 132, ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = Δ.ᐃⲆΔⵠᐃ[ⲆⵠΔ.time]
		}
		Ⲇ.fillRect(ⲆΔⲆᐃⲆ, ᐃΔΔⵠⵠ, ⲆⲆΔⲆⵠ, ⵠΔΔᐃⵠ);
		if (ᐃⲆⵠⲆΔ) {
			if (ⲆⵠΔᐃ) {
				if (ⲆⵠΔ.transition) {
					var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ΔⵠΔ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
					Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(17, 94, 96, 169, 214, 211, ᐃᐃⵠⵠ)
				} else Ⲇ.fillStyle = Δ.ᐃᐃΔⵠΔΔᐃ[ⲆⵠΔ.time]
			} else {
				if (ⲆⵠΔ.transition) {
					var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? 1 - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
					Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(9, 55, 63, 11, 106, 132, ᐃᐃⵠⵠ)
				} else Ⲇ.fillStyle = Δ.ᐃⲆΔⵠᐃ[ⲆⵠΔ.time]
			}
			Ⲇ.fillRect(ⲆⲆᐃΔᐃ, ⵠⵠΔΔⲆ, ΔⲆⵠᐃΔ, ᐃⵠΔΔⲆ)
		}
		ᐃΔΔΔ.ΔΔⲆᐃⲆ && ⲆⵠΔᐃ && ΔΔⲆΔ.ᐃⲆΔΔⲆᐃⵠⵠᐃ(ⲆⲆⲆⵠⵠ, Δⵠⵠᐃⵠ, ΔΔΔΔⲆ, Ⲇⵠⵠᐃ, -ᐃⲆⵠ.ⲆⲆΔ.y + ᐃⵠⲆⵠⵠ, -ᐃⲆⵠ.ⲆⲆΔ.y + ᐃⵠⲆⵠⵠ + ⵠⲆᐃⲆⲆ)
	}

	function ⲆⵠᐃⵠᐃⵠⲆ(ΔΔΔΔⵠ, ⲆⵠⲆᐃⲆ, ᐃᐃⵠΔⲆ, ΔΔⲆΔ, ᐃΔⵠᐃ, ⲆⵠΔᐃ) {
		var w1 = ΔΔⲆΔ.w1;
		var w2 = ΔΔⲆΔ.w2;
		var w3 = ΔΔⲆΔ.w3;
		var ⵠΔⵠⲆ = ᐃⲆⵠ.ⲆⲆΔ.y + ΔΔΔΔⵠ + 710;
		var ⵠᐃⵠᐃⲆ = Math.max(ᐃⲆⵠ.ⲆⲆΔ.x + ⲆⵠⲆᐃⲆ, 0);
		var ⵠΔⵠⲆᐃ = Math.max(-ᐃⲆⵠ.ⲆⲆΔ.x + ᐃⲆⵠⵠ - ᐃᐃⵠΔⲆ - ⵠΔⵠΔΔ, 0);
		var Ⲇⵠⵠᐃ = ⵠᐃⵠᐃⲆ;
		var ⲆⵠⵠⵠΔ = ᐃⲆⵠⵠ - ⵠᐃⵠᐃⲆ - ⵠΔⵠⲆᐃ;
		if (ⲆⵠΔᐃ) var ⲆⲆᐃ = ΔΔⲆΔ.Δᐃᐃ(w1);
		else var ⲆⲆᐃ = w1.r;
		var ᐃⲆⲆᐃ = ⵠΔⵠⲆ + ΔᐃᐃΔ.ⲆⵠᐃᐃⲆ;
		var ᐃⵠⲆⵠⵠ = ᐃⲆⲆᐃ,
			ᐃᐃΔᐃΔ = Ⲇⵠⵠᐃ,
			ⵠⲆᐃⲆⲆ = -ⲆⲆᐃ.x + ΔᐃᐃΔ.ΔⲆΔⲆⵠ,
			ⲆⵠΔΔΔ = ⲆⵠⵠⵠΔ;
		ᐃⲆⲆᐃ += -ⲆⲆᐃ.x + ΔᐃᐃΔ.ΔⲆΔⲆⵠ + 2;
		var ΔΔΔΔⲆ = ᐃⲆⲆᐃ;
		if (ⲆⵠΔᐃ) var ⲆⲆᐃ = ΔΔⲆΔ.Δᐃᐃ(w2);
		else var ⲆⲆᐃ = w2.r;
		var d2 = ⵠΔⵠⲆ - ΔᐃᐃΔ.ΔⲆⲆᐃⵠ - ᐃⲆⲆᐃ - ⲆⲆᐃ.x;
		var ᐃΔΔⵠⵠ = ᐃⲆⲆᐃ,
			ⲆΔⲆᐃⲆ = Ⲇⵠⵠᐃ,
			ⵠΔΔᐃⵠ = d2,
			ⲆⲆΔⲆⵠ = ⲆⵠⵠⵠΔ;
		ᐃⲆⲆᐃ += d2 + 2;
		var ⲆⲆⲆⵠⵠ = ᐃⲆⲆᐃ - ᐃᐃᐃⵠ;
		if (ⲆⵠΔᐃ) var ⲆⲆᐃ = ΔΔⲆΔ.Δᐃᐃ(w3);
		else var ⲆⲆᐃ = w3.r;
		d2 = ⵠΔⵠⲆ - ΔᐃᐃΔ.ΔᐃⲆᐃⲆ - ᐃⲆⲆᐃ - ⲆⲆᐃ.x;
		if (ᐃⲆⲆᐃ + d2 < ⲆⲆⲆⵠⵠ) {
			var ᐃⲆⵠⲆΔ = true;
			var ⵠⵠΔΔⲆ = ᐃⲆⲆᐃ,
				ⲆⲆᐃΔᐃ = Ⲇⵠⵠᐃ,
				ᐃⵠΔΔⲆ = d2,
				ΔⲆⵠᐃΔ = ⲆⵠⵠⵠΔ;
			ᐃⲆⲆᐃ += d2 + 2;
			var Δⵠⵠᐃⵠ = ᐃⲆⲆᐃ
		} else {
			var ᐃⲆⵠⲆΔ = ᐃⵠⲆⲆᐃ;
			ᐃⲆⲆᐃ = ⲆⲆⲆⵠⵠ;
			var Δⵠⵠᐃⵠ = -1
		}
		d2 = ⵠΔⵠⲆ - ΔᐃᐃΔ.ⲆΔΔⲆⵠⵠⲆ - ᐃⲆⲆᐃ;
		if (ⲆⵠΔ.transition) {
			var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? 1 - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
			Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(9, 55, 63, 11, 106, 132, ᐃᐃⵠⵠ)
		} else Ⲇ.fillStyle = Δ.ᐃⲆΔⵠᐃ[ⲆⵠΔ.time];
		Ⲇ.fillRect(ᐃᐃΔᐃΔ, ᐃⵠⲆⵠⵠ, ⲆⵠΔΔΔ, ⵠⲆᐃⲆⲆ);
		if (ⲆⵠΔᐃ) {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? 1 - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(15, 70, 76, 42, 139, 155, ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = Δ.ⵠΔΔΔΔⲆⵠ[ⲆⵠΔ.time]
		} else {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ΔᐃⵠⲆ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(9, 55, 63, 11, 106, 132, ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = Δ.ᐃⲆΔⵠᐃ[ⲆⵠΔ.time]
		}
		Ⲇ.fillRect(ⲆΔⲆᐃⲆ, ᐃΔΔⵠⵠ, ⲆⲆΔⲆⵠ, ⵠΔΔᐃⵠ);
		if (ᐃⲆⵠⲆΔ) {
			if (ⲆⵠΔᐃ) {
				if (ⲆⵠΔ.transition) {
					var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? 1 - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
					Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(17, 94, 96, 169, 214, 211, ᐃᐃⵠⵠ)
				} else Ⲇ.fillStyle = Δ.ᐃᐃΔⵠΔΔᐃ[ⲆⵠΔ.time]
			} else {
				if (ⲆⵠΔ.transition) {
					var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? 1 - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
					Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(9, 55, 63, 11, 106, 132, ᐃᐃⵠⵠ)
				} else Ⲇ.fillStyle = Δ.ᐃⲆΔⵠᐃ[ⲆⵠΔ.time]
			}
			Ⲇ.fillRect(ⲆⲆᐃΔᐃ, ⵠⵠΔΔⲆ, ΔⲆⵠᐃΔ, ᐃⵠΔΔⲆ)
		}
		ᐃΔΔΔ.ΔΔⲆᐃⲆ && ⲆⵠΔᐃ && ΔΔⲆΔ.ⲆⲆΔⲆᐃⲆⵠΔⵠ(ⲆⲆⲆⵠⵠ, Δⵠⵠᐃⵠ, ΔΔΔΔⲆ, ⵠΔⵠⲆ, -ᐃⲆⵠ.ⲆⲆΔ.x + ᐃᐃΔᐃΔ, -ᐃⲆⵠ.ⲆⲆΔ.x + ᐃᐃΔᐃΔ + ⲆⵠΔΔΔ)
	}

	function ΔⵠⲆᐃⲆ(ⲆΔᐃᐃⵠ, ΔᐃΔΔⲆ, ⵠᐃᐃⵠⲆ, ᐃΔᐃᐃᐃⲆⲆ, ᐃⲆΔⵠᐃⵠᐃ, ⵠᐃⵠⵠΔᐃᐃ, ⲆᐃΔⲆᐃⲆᐃ, ᐃⵠΔⲆΔᐃΔ, ⲆΔΔᐃⵠΔᐃ, ΔⲆΔⲆᐃⵠᐃ) {
		if (ⲆⵠΔ.transition) {
			Ⲇ.globalAlpha = 1;
			ⲆΔᐃᐃⵠ(ΔᐃΔΔⲆ, ⵠᐃᐃⵠⲆ, ᐃΔᐃᐃᐃⲆⲆ, ᐃⲆΔⵠᐃⵠᐃ, ⵠᐃⵠⵠΔᐃᐃ, ⲆᐃΔⲆᐃⲆᐃ, ᐃⵠΔⲆΔᐃΔ, ⲆΔΔᐃⵠΔᐃ, ΔⲆΔⲆᐃⵠᐃ);
			ⲆⵠΔ.time = ⲆⵠΔ.time ? 0 : 1;
			Ⲇ.globalAlpha = ⵠⲆΔⲆ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
			ⲆΔᐃᐃⵠ(ΔᐃΔΔⲆ, ⵠᐃᐃⵠⲆ, ᐃΔᐃᐃᐃⲆⲆ, ᐃⲆΔⵠᐃⵠᐃ, ⵠᐃⵠⵠΔᐃᐃ, ⲆᐃΔⲆᐃⲆᐃ, ᐃⵠΔⲆΔᐃΔ, ⲆΔΔᐃⵠΔᐃ, ΔⲆΔⲆᐃⵠᐃ);
			ⲆⵠΔ.time = ⲆⵠΔ.time ? ⵠⲆⵠⵠ : ΔΔⵠΔ;
			Ⲇ.globalAlpha = ⵠⲆⲆ
		} else ⲆΔᐃᐃⵠ(ΔᐃΔΔⲆ, ⵠᐃᐃⵠⲆ, ᐃΔᐃᐃᐃⲆⲆ, ᐃⲆΔⵠᐃⵠᐃ, ⵠᐃⵠⵠΔᐃᐃ, ⲆᐃΔⲆᐃⲆᐃ, ᐃⵠΔⲆΔᐃΔ, ⲆΔΔᐃⵠΔᐃ, ΔⲆΔⲆᐃⵠᐃ)
	}

	function ⲆⵠᐃΔⲆⵠᐃ(ΔΔΔΔⵠ, ⲆⵠⲆᐃⲆ, ᐃᐃⵠΔⲆ, ΔΔⲆΔ, ᐃΔⵠᐃ, ⲆⵠΔᐃ) {
		var w1 = ΔΔⲆΔ.w1;
		var w2 = ΔΔⲆΔ.w2;
		var w3 = ΔΔⲆΔ.w3;
		var ⵠΔⵠⲆ = ᐃⲆⵠ.ⲆⲆΔ.y + ΔΔΔΔⵠ - 700;
		var ⵠᐃⵠᐃⲆ = Math.max(ᐃⲆⵠ.ⲆⲆΔ.x + ⲆⵠⲆᐃⲆ, ⵠⲆⵠⵠ);
		var ⵠΔⵠⲆᐃ = Math.max(-ᐃⲆⵠ.ⲆⲆΔ.x + ᐃⲆⵠⵠ - ᐃᐃⵠΔⲆ - ⲆΔⵠⲆⵠⵠΔ, 0);
		var Ⲇⵠⵠᐃ = ⵠᐃⵠᐃⲆ;
		var ⲆⵠⵠⵠΔ = ᐃⲆⵠⵠ - ⵠᐃⵠᐃⲆ - ⵠΔⵠⲆᐃ;
		if (ⲆⵠΔᐃ) var ⵠⲆⵠᐃᐃ = ΔΔⲆΔ.Δᐃᐃ(w1).x;
		else var ⵠⲆⵠᐃᐃ = w1.r.x;
		var ᐃⲆⲆᐃ = ⵠΔⵠⲆ + ΔᐃᐃΔ.ⲆⵠᐃᐃⲆ;
		var ᐃᐃΔᐃΔ = Ⲇⵠⵠᐃ,
			ᐃⵠⲆⵠⵠ = ᐃⲆⲆᐃ,
			ⵠⲆᐃⲆⲆ = ⵠⲆⵠᐃᐃ + ΔᐃᐃΔ.ΔⲆΔⲆⵠ,
			ⲆⵠΔΔΔ = ⲆⵠⵠⵠΔ;
		ᐃⲆⲆᐃ += ⵠⲆⵠᐃᐃ + ΔᐃᐃΔ.ΔⲆΔⲆⵠ - ΔᐃΔᐃ;
		var ΔΔΔΔⲆ = ᐃⲆⲆᐃ;
		if (ⲆⵠΔᐃ) var ⵠⲆⵠᐃᐃ = ΔΔⲆΔ.Δᐃᐃ(w2).x;
		else var ⵠⲆⵠᐃᐃ = w2.r.x;
		var d2 = ⵠΔⵠⲆ + ΔᐃᐃΔ.ΔⲆⲆᐃⵠ - ᐃⲆⲆᐃ + ⵠⲆⵠᐃᐃ;
		var ᐃΔΔⵠⵠ = ᐃⲆⲆᐃ,
			ⲆΔⲆᐃⲆ = Ⲇⵠⵠᐃ,
			ⵠΔΔᐃⵠ = d2,
			ⲆⲆΔⲆⵠ = ⲆⵠⵠⵠΔ;
		ᐃⲆⲆᐃ += d2 - 2;
		var ⲆⲆⲆⵠⵠ = ᐃⲆⲆᐃ - ΔΔᐃΔⵠ;
		if (ⲆⵠΔᐃ) var ⵠⲆⵠᐃᐃ = ΔΔⲆΔ.Δᐃᐃ(w3).x;
		else var ⵠⲆⵠᐃᐃ = w3.r.x;
		d2 = ⵠΔⵠⲆ + ΔᐃᐃΔ.ΔᐃⲆᐃⲆ - ᐃⲆⲆᐃ + ⵠⲆⵠᐃᐃ;
		if (ⲆⲆⲆⵠⵠ < ᐃⲆⲆᐃ + d2 - Δⵠⵠᐃ) {
			var ᐃⲆⵠⲆΔ = true;
			var ⵠⵠΔΔⲆ = ᐃⲆⲆᐃ,
				ⲆⲆᐃΔᐃ = Ⲇⵠⵠᐃ,
				ᐃⵠΔΔⲆ = d2,
				ΔⲆⵠᐃΔ = ⲆⵠⵠⵠΔ;
			ᐃⲆⲆᐃ += d2 - 2;
			var Δⵠⵠᐃⵠ = ᐃⲆⲆᐃ
		} else {
			var ᐃⲆⵠⲆΔ = ΔⲆΔⵠΔ;
			ᐃⲆⲆᐃ = ⲆⲆⲆⵠⵠ;
			var Δⵠⵠᐃⵠ = -ⵠΔᐃ
		}
		d2 = ⵠΔⵠⲆ + ΔᐃᐃΔ.ⲆΔΔⲆⵠⵠⲆ - ᐃⲆⲆᐃ;
		if (0 < ⲆⵠΔᐃ && 1 === ᐃΔⵠᐃ.ΔΔΔⵠⵠᐃⵠ) {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ΔᐃⵠⲆ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(15, 77, 72, 252, 239, 187, ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = Δ.ᐃΔⵠᐃⲆⵠⲆ[ⲆⵠΔ.time];
			Ⲇ.fillRect(Ⲇⵠⵠᐃ, ᐃⲆⲆᐃ, ⲆⵠⵠⵠΔ, d2)
		} else {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ΔᐃⲆⲆ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(ᐃΔⵠᐃ.ΔⲆᐃ[ⵠΔᐃⵠ], ᐃΔⵠᐃ.ΔⲆᐃ[1], ᐃΔⵠᐃ.ΔⲆᐃ[2], ᐃΔⵠᐃ.ⲆΔᐃ[0], ᐃΔⵠᐃ.ⲆΔᐃ[1], ᐃΔⵠᐃ.ⲆΔᐃ[ⲆᐃⵠΔ], ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = ᐃΔⵠᐃ.ⲆⲆⲆⵠᐃ[ⲆⵠΔ.time];
			Ⲇ.fillRect(Ⲇⵠⵠᐃ, ᐃⲆⲆᐃ, ⲆⵠⵠⵠΔ, d2)
		}
	}

	function ΔⲆᐃᐃᐃᐃⵠΔΔ(ⲆᐃᐃΔⵠΔⲆ, ᐃΔΔᐃ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ) {
		if (ⲆⵠΔ.transition) {
			Ⲇ.globalAlpha = 1;
			ᐃᐃⵠⲆ(Ⲇ, ᐃΔ[ⲆᐃᐃΔⵠΔⲆ][ᐃΔΔᐃ][ⲆⵠΔ.time], Ⲇⵠ, ᐃⵠⲆ);
			ⲆⵠΔ.time = ⲆⵠΔ.time ? 0 : 1;
			Ⲇ.globalAlpha = 1 - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
			ᐃᐃⵠⲆ(Ⲇ, ᐃΔ[ⲆᐃᐃΔⵠΔⲆ][ᐃΔΔᐃ][ⲆⵠΔ.time], Ⲇⵠ, ᐃⵠⲆ);
			ⲆⵠΔ.time = ⲆⵠΔ.time ? ⵠΔᐃᐃ : ⵠⲆⲆ;
			Ⲇ.globalAlpha = ⵠⲆΔⲆ
		} else ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ)
	}

	function ⲆⲆΔⲆᐃΔΔ(ⲆⵠⲆᐃⲆ, ΔΔΔΔⵠ, ⲆⲆᐃⲆⲆᐃΔ, ΔΔⲆΔ, ᐃΔⵠᐃ, ⲆⵠΔᐃ) {
		var w1 = ΔΔⲆΔ.w1;
		var w2 = ΔΔⲆΔ.w2;
		var w3 = ΔΔⲆΔ.w3;
		var Ⲇⵠⵠᐃ = ᐃⲆⵠ.ⲆⲆΔ.x + ⲆⵠⲆᐃⲆ + 820;
		var ᐃΔⵠΔⵠ = Math.max(ᐃⲆⵠ.ⲆⲆΔ.y + ΔΔΔΔⵠ, 0);
		var ᐃⵠⵠᐃⵠ = Math.max(-ᐃⲆⵠ.ⲆⲆΔ.y + Ⲇᐃᐃᐃ - ⲆⲆᐃⲆⲆᐃΔ - ⲆΔⵠⲆⵠⵠΔ, ⵠⲆΔ);
		var ⵠΔⵠⲆ = ᐃΔⵠΔⵠ;
		var ΔⵠᐃΔⵠ = Ⲇᐃᐃᐃ - ᐃΔⵠΔⵠ - ᐃⵠⵠᐃⵠ;
		if (ⲆⵠΔᐃ) var ⵠⲆⵠᐃᐃ = ΔΔⲆΔ.Δᐃᐃ(w1).x;
		else var ⵠⲆⵠᐃᐃ = w1.r.x;
		var ᐃⲆⲆᐃ = Ⲇⵠⵠᐃ + ΔᐃᐃΔ.ⲆⵠᐃᐃⲆ;
		var ᐃᐃΔᐃΔ = ᐃⲆⲆᐃ,
			ᐃⵠⲆⵠⵠ = ⵠΔⵠⲆ,
			ⲆⵠΔΔΔ = -ⵠⲆⵠᐃᐃ + ΔᐃᐃΔ.ΔⲆΔⲆⵠ,
			ⵠⲆᐃⲆⲆ = ΔⵠᐃΔⵠ;
		ᐃⲆⲆᐃ += -ⵠⲆⵠᐃᐃ + ΔᐃᐃΔ.ΔⲆΔⲆⵠ + 2;
		var ΔΔΔΔⲆ = ᐃⲆⲆᐃ;
		if (ⲆⵠΔᐃ) var ⵠⲆⵠᐃᐃ = ΔΔⲆΔ.Δᐃᐃ(w2).x;
		else var ⵠⲆⵠᐃᐃ = w2.r.x;
		var d2 = Ⲇⵠⵠᐃ - ΔᐃᐃΔ.ΔⲆⲆᐃⵠ - ᐃⲆⲆᐃ - ⵠⲆⵠᐃᐃ;
		var ⲆΔⲆᐃⲆ = ᐃⲆⲆᐃ,
			ᐃΔΔⵠⵠ = ⵠΔⵠⲆ,
			ⲆⲆΔⲆⵠ = d2,
			ⵠΔΔᐃⵠ = ΔⵠᐃΔⵠ;
		ᐃⲆⲆᐃ += d2 + 2;
		var ⲆⲆⲆⵠⵠ = ᐃⲆⲆᐃ - ⵠΔⵠΔ;
		if (ⲆⵠΔᐃ) var ⵠⲆⵠᐃᐃ = ΔΔⲆΔ.Δᐃᐃ(w3).x;
		else var ⵠⲆⵠᐃᐃ = w3.r.x;
		d2 = Ⲇⵠⵠᐃ - ΔᐃᐃΔ.ΔᐃⲆᐃⲆ - ᐃⲆⲆᐃ - ⵠⲆⵠᐃᐃ;
		if (ⲆⲆⲆⵠⵠ > ᐃⲆⲆᐃ + d2) {
			var ᐃⲆⵠⲆΔ = true;
			var ⲆⲆᐃΔᐃ = ᐃⲆⲆᐃ,
				ⵠⵠΔΔⲆ = ⵠΔⵠⲆ,
				ΔⲆⵠᐃΔ = d2,
				ᐃⵠΔΔⲆ = ΔⵠᐃΔⵠ;
			ᐃⲆⲆᐃ += d2 + ΔᐃΔᐃ;
			var Δⵠⵠᐃⵠ = ᐃⲆⲆᐃ
		} else {
			var ᐃⲆⵠⲆΔ = false;
			ᐃⲆⲆᐃ = ⲆⲆⲆⵠⵠ;
			var Δⵠⵠᐃⵠ = -1
		}
		d2 = Ⲇⵠⵠᐃ - ΔᐃᐃΔ.ⲆΔΔⲆⵠⵠⲆ - ᐃⲆⲆᐃ;
		if (ⲆⵠΔᐃ > 0 && ᐃΔⵠᐃ.ΔΔΔⵠⵠᐃⵠ === 1) {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ⵠᐃⵠΔ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(15, 77, 72, 252, 239, 187, ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = Δ.ᐃΔⵠᐃⲆⵠⲆ[ⲆⵠΔ.time];
			Ⲇ.fillRect(ᐃⲆⲆᐃ, ⵠΔⵠⲆ, d2, ΔⵠᐃΔⵠ)
		} else {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? Ⲇⵠᐃ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(ᐃΔⵠᐃ.ΔⲆᐃ[0], ᐃΔⵠᐃ.ΔⲆᐃ[1], ᐃΔⵠᐃ.ΔⲆᐃ[2], ᐃΔⵠᐃ.ⲆΔᐃ[0], ᐃΔⵠᐃ.ⲆΔᐃ[1], ᐃΔⵠᐃ.ⲆΔᐃ[2], ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = ᐃΔⵠᐃ.ⲆⲆⲆⵠᐃ[ⲆⵠΔ.time];
			Ⲇ.fillRect(ᐃⲆⲆᐃ, ⵠΔⵠⲆ, d2, ΔⵠᐃΔⵠ)
		}
	}

	function ⵠⲆᐃⲆⵠ(ⲆᐃᐃΔⵠΔⲆ, ᐃΔΔᐃ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ) {
		var ⲆⲆᐃ = ᐃᐃ.width;
		var ⲆΔⲆ = ᐃᐃ.height;
		var w2 = Math.floor(ⲆⲆᐃ / 2);
		var ⲆⲆⲆΔΔ = Math.floor(ⲆΔⲆ / ⲆⲆⲆⲆ);
		ⲆⵠΔ.transition ? (Ⲇ.globalAlpha = ᐃᐃΔ, ᐃᐃⵠⲆ(Ⲇ, ᐃΔ[ⲆᐃᐃΔⵠΔⲆ][ᐃΔΔᐃ][ⲆⵠΔ.time], 0, ⵠΔᐃⵠ, ⲆⲆᐃ, ⲆΔⲆ, Ⲇⵠ, ᐃⵠⲆ, w2, ⲆⲆⲆΔΔ), ⲆⵠΔ.time = ⲆⵠΔ.time ? 0 : ΔⲆᐃᐃ, Ⲇ.globalAlpha = 1 - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ, ᐃᐃⵠⲆ(Ⲇ, ᐃΔ[ⲆᐃᐃΔⵠΔⲆ][ᐃΔΔᐃ][ⲆⵠΔ.time], ⵠⵠⵠΔ, 0, ⲆⲆᐃ, ⲆΔⲆ, Ⲇⵠ, ᐃⵠⲆ, w2, ⲆⲆⲆΔΔ), ⲆⵠΔ.time = ⲆⵠΔ.time ? Δⵠⵠⵠ : 1, Ⲇ.globalAlpha = 1) : ᐃᐃⵠⲆ(Ⲇ, ᐃΔ[ⲆᐃᐃΔⵠΔⲆ][ᐃΔΔᐃ][ⲆⵠΔ.time], ⵠᐃⲆⲆ, ⲆⲆⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ, Ⲇⵠ, ᐃⵠⲆ, w2, ⲆⲆⲆΔΔ)
	}

	function ΔᐃⲆᐃⲆΔⵠⲆⵠ() {
		Ⲇ.globalAlpha = ⵠᐃⵠΔ;
		if (ⲆⵠΔ.transition) var ΔΔᐃⲆΔ = ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆᐃⲆ();
		ⲆⵠΔ.ⲆⲆΔᐃⵠⲆⲆΔⲆ(-ᐃⲆⵠ.ⲆⲆΔ.x, -ᐃⲆⵠ.ⲆⲆΔ.y);
		ΔΔⵠᐃᐃⲆᐃ = Math.max(Math.floor(-ᐃⲆⵠ.ⲆⲆΔ.x / ⲆⵠΔ.ᐃᐃⵠΔⲆᐃᐃ) - ΔⵠΔᐃ, 0);
		ⲆⲆΔⵠΔⲆⲆ = Math.min(Math.floor((-ᐃⲆⵠ.ⲆⲆΔ.x + ᐃⲆⵠ.ⲆⲆΔ.w) / ⲆⵠΔ.ᐃᐃⵠΔⲆᐃᐃ) + 4, ⲆⵠΔ.ΔᐃᐃⵠΔ - ΔⲆᐃⲆ);
		ⲆⲆΔⲆᐃᐃⵠ = Math.max(Math.floor(-ᐃⲆⵠ.ⲆⲆΔ.y / ⲆⵠΔ.ᐃⲆⵠⲆᐃⵠⲆ) - 3, 0);
		ᐃⵠⵠⵠΔⲆᐃ = Math.min(Math.floor((-ᐃⲆⵠ.ⲆⲆΔ.y + ᐃⲆⵠ.ⲆⲆΔ.ⲆΔⲆ) / ⲆⵠΔ.ᐃⲆⵠⲆᐃⵠⲆ) + 3, ⲆⵠΔ.ᐃⵠᐃᐃᐃ - Δⵠᐃ);
		ⲆⵠᐃⵠΔᐃⵠ();
		ΔΔᐃⵠΔΔΔⲆᐃ();
		ᐃΔΔΔ.ΔΔⲆᐃⲆ && ΔᐃᐃΔ.ᐃΔⲆⲆᐃ !== ⲆⵠΔ.mode && ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ !== ⲆⵠΔ.mode && ΔᐃᐃΔ.ⵠᐃΔⵠΔᐃⵠ !== ⲆⵠΔ.mode && (ᐃⲆⵠΔΔᐃᐃᐃⵠ(), ᐃΔΔⲆΔⲆⲆⵠⵠ(), ⲆΔⲆΔⲆⵠΔΔⵠ());
		if (ⲆⵠΔ.transition) {
			if (ΔΔᐃⲆΔ) {
				ⲆⵠΔ.transition = ΔⵠΔΔⲆ;
				ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ = ⵠᐃⲆ;
				ⲆⵠΔ.ᐃᐃⵠⵠ.Ⲇⵠⵠ = false
			}
		}
	}

	function ᐃΔᐃⵠⵠᐃⵠΔⲆ() {
		if (ⲆⵠΔ.transition) {
			var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ᐃⲆΔ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
			Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(ⵠΔⲆΔΔ, 43, 48, 19, 58, 43, ᐃᐃⵠⵠ)
		} else Ⲇ.fillStyle = Δ.ⵠⵠΔᐃⵠ[ⲆⵠΔ.time];
		Ⲇ.fillRect(ⵠⲆⵠⵠ, ΔⲆⲆ, ᐃⲆⵠⵠ, Ⲇᐃᐃᐃ)
	}

	function ᐃᐃΔᐃⵠᐃᐃ(Ⲇᐃⵠⵠᐃᐃⵠ, ᐃΔⲆΔⵠΔⵠ, ⲆΔⵠᐃᐃⲆⲆ, ᐃⲆΔⲆⵠⵠᐃ, ⲆΔΔⲆⲆᐃΔⵠⲆ, ⲆΔᐃΔⵠⵠΔⵠⲆ) {
		const ΔᐃⵠΔⲆΔⲆ = (Ⲇᐃⵠⵠᐃᐃⵠ | 27127) & ~(27127 & Ⲇᐃⵠⵠᐃᐃⵠ);
		const ΔⵠΔᐃⲆΔⵠ = (24 << (ᐃΔⲆΔⵠΔⵠ >> 16 & 255)) + (16 << (ᐃΔⲆΔⵠΔⵠ >> 24 & ᐃᐃΔᐃⵠΔⲆ)) + (8 << (ᐃΔⲆΔⵠΔⵠ >> ΔᐃᐃⲆᐃ & ⵠᐃᐃᐃᐃᐃΔ)) + (0 << (ᐃΔⲆΔⵠΔⵠ >> 0 & 255));
		const ΔᐃⲆⲆΔⵠⵠⵠᐃ = (24 << (ⲆΔⵠᐃᐃⲆⲆ >> 0 & 255)) + (8 << (ⲆΔⵠᐃᐃⲆⲆ >> 24 & 255)) + (0 << (ⲆΔⵠᐃᐃⲆⲆ >> 16 & 255)) + (ⲆⲆᐃⲆⵠᐃⲆ << (ⲆΔⵠᐃᐃⲆⲆ >> 8 & ᐃᐃΔᐃⵠΔⲆ));
		const ⲆᐃᐃΔΔᐃᐃⲆᐃ = ᐃⲆΔⲆⵠⵠᐃ ^ 9296;
		const ᐃⲆⵠᐃⲆⵠΔΔΔ = (1013904223 + (ⲆΔΔⲆⲆᐃΔⵠⲆ + 3450) * 1664525) % 4294967296;
		const ᐃΔᐃΔⲆΔᐃⵠᐃ = (2531011 + 214013 * (60134 + ⲆΔᐃΔⵠⵠΔⵠⲆ)) % 4294967296;
		const ΔΔᐃⲆⵠΔᐃ = ⲆΔΔᐃᐃΔⲆ(ΔᐃⵠΔⲆΔⲆ, ΔⵠΔᐃⲆΔⵠ, ΔᐃⲆⲆΔⵠⵠⵠᐃ, ⲆᐃᐃΔΔᐃᐃⲆᐃ, ᐃⲆⵠᐃⲆⵠΔΔΔ, ᐃΔᐃΔⲆΔᐃⵠᐃ);
		const ᐃⵠⵠᐃΔΔⵠⲆⲆ = ᐃΔⲆᐃᐃⵠⲆ(ΔᐃⵠΔⲆΔⲆ, ΔⵠΔᐃⲆΔⵠ);
		const ⲆᐃΔⲆΔⲆΔᐃⵠ = ~(ΔΔᐃⲆⵠΔᐃ & 25831) & ΔΔᐃⲆⵠΔᐃ | ~(ΔΔᐃⲆⵠΔᐃ & 25831) & 25831;
		return ⲆᐃΔⲆΔⲆΔᐃⵠ
	}

	function ᐃΔⲆΔΔⵠᐃ(ⲆⵠⲆᐃⲆ, ΔΔΔΔⵠ, ⲆⲆᐃⲆⲆᐃΔ, ΔΔⲆΔ, ᐃΔⵠᐃ, ⲆⵠΔᐃ) {
		var w1 = ΔΔⲆΔ.w1;
		var w2 = ΔΔⲆΔ.w2;
		var w3 = ΔΔⲆΔ.w3;
		var Ⲇⵠⵠᐃ = ᐃⲆⵠ.ⲆⲆΔ.x + ⲆⵠⲆᐃⲆ - 700;
		var ᐃΔⵠΔⵠ = Math.max(ᐃⲆⵠ.ⲆⲆΔ.y + ΔΔΔΔⵠ, ⲆⵠⲆⲆ);
		var ᐃⵠⵠᐃⵠ = Math.max(-ᐃⲆⵠ.ⲆⲆΔ.y + Ⲇᐃᐃᐃ - ⲆⲆᐃⲆⲆᐃΔ - 100, 0);
		var ⵠΔⵠⲆ = ᐃΔⵠΔⵠ;
		var ΔⵠᐃΔⵠ = Ⲇᐃᐃᐃ - ᐃΔⵠΔⵠ - ᐃⵠⵠᐃⵠ;
		if (ⲆⵠΔᐃ) var ⲆⲆᐃ = ΔΔⲆΔ.Δᐃᐃ(w1);
		else var ⲆⲆᐃ = w1.r;
		var ᐃⲆⲆᐃ = Ⲇⵠⵠᐃ + ΔᐃᐃΔ.ⲆⵠᐃᐃⲆ;
		var ᐃᐃΔᐃΔ = ᐃⲆⲆᐃ,
			ᐃⵠⲆⵠⵠ = ⵠΔⵠⲆ,
			ⲆⵠΔΔΔ = ⲆⲆᐃ.x + ΔᐃᐃΔ.ΔⲆΔⲆⵠ,
			ⵠⲆᐃⲆⲆ = ΔⵠᐃΔⵠ;
		ᐃⲆⲆᐃ += ⲆⲆᐃ.x + ΔᐃᐃΔ.ΔⲆΔⲆⵠ - 2;
		var ΔΔΔΔⲆ = ᐃⲆⲆᐃ;
		if (ⲆⵠΔᐃ) var ⲆⲆᐃ = ΔΔⲆΔ.Δᐃᐃ(w2);
		else var ⲆⲆᐃ = w2.r;
		var d2 = Ⲇⵠⵠᐃ + ΔᐃᐃΔ.ΔⲆⲆᐃⵠ - ᐃⲆⲆᐃ + ⲆⲆᐃ.x;
		var ⲆΔⲆᐃⲆ = ᐃⲆⲆᐃ,
			ᐃΔΔⵠⵠ = ⵠΔⵠⲆ,
			ⲆⲆΔⲆⵠ = d2,
			ⵠΔΔᐃⵠ = ΔⵠᐃΔⵠ;
		ᐃⲆⲆᐃ += d2 - ᐃⲆᐃⵠ;
		var ⲆⲆⲆⵠⵠ = ᐃⲆⲆᐃ - 2;
		if (ⲆⵠΔᐃ) var ⲆⲆᐃ = ΔΔⲆΔ.Δᐃᐃ(w3);
		else var ⲆⲆᐃ = w3.r;
		d2 = Ⲇⵠⵠᐃ + ΔᐃᐃΔ.ΔᐃⲆᐃⲆ - ᐃⲆⲆᐃ + ⲆⲆᐃ.x;
		if (ᐃⲆⲆᐃ + d2 - 3 > ⲆⲆⲆⵠⵠ) {
			var ᐃⲆⵠⲆΔ = ᐃᐃΔⲆⵠ;
			var ⲆⲆᐃΔᐃ = ᐃⲆⲆᐃ,
				ⵠⵠΔΔⲆ = ⵠΔⵠⲆ,
				ΔⲆⵠᐃΔ = d2,
				ᐃⵠΔΔⲆ = ΔⵠᐃΔⵠ;
			ᐃⲆⲆᐃ += d2 - 2;
			var Δⵠⵠᐃⵠ = ᐃⲆⲆᐃ
		} else {
			var ᐃⲆⵠⲆΔ = ⵠᐃⵠⲆⲆ;
			ᐃⲆⲆᐃ = ⲆⲆⲆⵠⵠ;
			var Δⵠⵠᐃⵠ = -1
		}
		d2 = Ⲇⵠⵠᐃ + ΔᐃᐃΔ.ⲆΔΔⲆⵠⵠⲆ - ᐃⲆⲆᐃ;
		if (ⲆⵠΔ.transition) {
			var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? 1 - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
			Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(9, 55, 63, 11, 106, 132, ᐃᐃⵠⵠ)
		} else Ⲇ.fillStyle = Δ.ᐃⲆΔⵠᐃ[ⲆⵠΔ.time];
		Ⲇ.fillRect(ᐃᐃΔᐃΔ, ᐃⵠⲆⵠⵠ, ⲆⵠΔΔΔ, ⵠⲆᐃⲆⲆ);
		if (ⲆⵠΔᐃ) {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? 1 - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(15, 70, 76, 42, 139, 155, ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = Δ.ⵠΔΔΔΔⲆⵠ[ⲆⵠΔ.time]
		} else {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? Ⲇⵠᐃ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(9, 55, 63, 11, 106, 132, ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = Δ.ᐃⲆΔⵠᐃ[ⲆⵠΔ.time]
		}
		Ⲇ.fillRect(ⲆΔⲆᐃⲆ, ᐃΔΔⵠⵠ, ⲆⲆΔⲆⵠ, ⵠΔΔᐃⵠ);
		if (ᐃⲆⵠⲆΔ) {
			if (ⲆⵠΔᐃ) {
				if (ⲆⵠΔ.transition) {
					var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? 1 - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
					Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(17, 94, 96, 169, 214, 211, ᐃᐃⵠⵠ)
				} else Ⲇ.fillStyle = Δ.ᐃᐃΔⵠΔΔᐃ[ⲆⵠΔ.time]
			} else {
				if (ⲆⵠΔ.transition) {
					var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ⵠⲆΔⲆ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
					Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(9, 55, 63, 11, 106, 132, ᐃᐃⵠⵠ)
				} else Ⲇ.fillStyle = Δ.ᐃⲆΔⵠᐃ[ⲆⵠΔ.time]
			}
			Ⲇ.fillRect(ⲆⲆᐃΔᐃ, ⵠⵠΔΔⲆ, ΔⲆⵠᐃΔ, ᐃⵠΔΔⲆ)
		}
		if (ᐃΔΔΔ.ΔΔⲆᐃⲆ && ⲆⵠΔᐃ) ΔΔⲆΔ.ⲆΔⵠⵠΔⵠⲆΔⵠ(ⲆⲆⲆⵠⵠ, Δⵠⵠᐃⵠ, ΔΔΔΔⲆ, Ⲇⵠⵠᐃ, -ᐃⲆⵠ.ⲆⲆΔ.y + ᐃⵠⲆⵠⵠ, -ᐃⲆⵠ.ⲆⲆΔ.y + ᐃⵠⲆⵠⵠ + ⵠⲆᐃⲆⲆ)
	}

	function ⲆΔⲆΔⲆⵠΔΔⵠ() {
		var ΔᐃⲆᐃⲆⵠΔ = ᐃⲆⵠ.ΔᐃⲆᐃⲆⵠΔ;
		var ⲆⵠΔⲆⵠ = ΔᐃⲆᐃⲆⵠΔ.ⲆⵠΔⲆⵠ;
		for (var Ⲇᐃ = ᐃⵠⵠⲆ; Ⲇᐃ < ⲆⵠΔⲆⵠ.length; Ⲇᐃ++) {
			var Δⵠⵠ = ⲆⵠΔⲆⵠ[Ⲇᐃ];
			ΔᐃⲆᐃⲆⵠΔ.ⲆᐃⲆ(Δⵠⵠ);
			ᐃΔⲆⲆᐃᐃⲆ(Δ.ⵠⵠᐃⲆⵠΔᐃ, Δⵠⵠ.id, ᐃⲆⵠ.ⲆⲆΔ.x + Δⵠⵠ.x, ᐃⲆⵠ.ⲆⲆΔ.y + Δⵠⵠ.y, Δⵠⵠ.alpha)
		}
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆⵠΔⲆⵠ.length; Ⲇᐃ++) {
			var Δⵠⵠ = ⲆⵠΔⲆⵠ[Ⲇᐃ];
			if (0 >= Δⵠⵠ.ᐃΔᐃᐃⵠ || Δⵠⵠ.x > -ᐃⲆⵠ.ⲆⲆΔ.x + ᐃⲆⵠⵠ || -ᐃⲆⵠ.ⲆⲆΔ.x > Δⵠⵠ.x || Δⵠⵠ.y > -ᐃⲆⵠ.ⲆⲆΔ.y + Ⲇᐃᐃᐃ) ⲆⵠΔⲆⵠ.splice(Ⲇᐃ, ᐃᐃΔ)
		}
		var ⲆⲆⲆⵠ = -ᐃⲆⵠ.ⲆⲆΔ.y; - 1e3 < ⲆⵠΔ.ⲆⲆⵠᐃⲆ && ΔᐃⲆᐃⲆⵠΔ.add(ⲆⲆⲆⵠ)
	}

	function ᐃⵠΔⲆᐃⲆΔⲆΔ(ⲆⲆⲆΔⲆΔⲆ, ᐃᐃⵠΔΔⵠⵠ, ⲆⵠⲆⲆⵠᐃΔ, ΔΔⵠⵠᐃᐃΔ, ⵠΔΔΔⲆΔⵠ) {
		const ⵠᐃⵠⵠⲆᐃᐃ = ~(48279 & ⲆⲆⲆΔⲆΔⲆ) & (ⲆⲆⲆΔⲆΔⲆ | 48279);
		const ⵠΔⲆⵠΔᐃⵠᐃΔ = (50005 | ᐃᐃⵠΔΔⵠⵠ) & ~(ᐃᐃⵠΔΔⵠⵠ & 50005);
		const ᐃΔΔΔΔⲆⲆⲆΔ = (1 + (ⲆⵠⲆⲆⵠᐃΔ + 6595) * 22695477) % 4294967296;
		const ΔᐃᐃⲆΔⵠⵠⲆⵠ = (2531011 + 214013 * (44610 + ΔΔⵠⵠᐃᐃΔ)) % 4294967296;
		const ⵠᐃΔΔⲆΔⲆⲆⲆ = (ⵠΔΔΔⲆΔⵠ | 9050) & ~(ⵠΔΔΔⲆΔⵠ & 9050);
		const ΔⲆⲆⵠⵠⲆⲆ = ᐃⲆⵠᐃⲆΔᐃ(ⵠᐃⵠⵠⲆᐃᐃ, ⵠΔⲆⵠΔᐃⵠᐃΔ);
		const ᐃΔᐃΔⵠⲆⵠΔᐃ = ΔⵠⵠⵠⲆⵠⵠ(ᐃΔΔΔΔⲆⲆⲆΔ, ΔᐃᐃⲆΔⵠⵠⲆⵠ, ⵠᐃΔΔⲆΔⲆⲆⲆ, ⵠᐃⵠⵠⲆᐃᐃ);
		const ᐃⵠΔⲆⲆⵠⲆᐃΔ = (ΔⲆⲆⵠⵠⲆⲆ | 43498) & ~(43498 & ΔⲆⲆⵠⵠⲆⲆ);
		return ᐃⵠΔⲆⲆⵠⲆᐃΔ
	}

	function ᐃⲆⵠΔΔᐃᐃᐃⵠ() {
		var ᐃⲆΔΔⲆ = ᐃⲆⵠ.ᐃⲆΔΔⲆ;
		0 === ᐃⲆΔΔⲆ.ᐃᐃᐃⵠΔ ? ᐃⲆΔΔⲆ.ᐃΔᐃⵠΔ = Math.max(Ⲇᐃⵠ, ᐃⲆΔΔⲆ.ᐃΔᐃⵠΔ - ⲆΔΔⲆ / 10) : ᐃⲆΔΔⲆ.ᐃΔᐃⵠΔ = Math.min(1, ᐃⲆΔΔⲆ.ᐃΔᐃⵠΔ + ⲆΔΔⲆ / ⲆΔΔⲆᐃ);
		var ⲆⵠΔⲆⵠ = ᐃⲆΔΔⲆ.ⲆⵠΔⲆⵠ;
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆⵠΔⲆⵠ.length; Ⲇᐃ++) {
			var Δⵠⵠ = ⲆⵠΔⲆⵠ[Ⲇᐃ];
			ᐃⲆΔΔⲆ.ⲆᐃⲆ(Δⵠⵠ);
			ᐃΔⲆⲆᐃᐃⲆ(Δ.ΔΔᐃΔΔᐃΔ, Δⵠⵠ.id, ᐃⲆⵠ.ⲆⲆΔ.x + Δⵠⵠ.x, ᐃⲆⵠ.ⲆⲆΔ.y + Δⵠⵠ.y, Δⵠⵠ.alpha)
		}
		for (var Ⲇᐃ = ΔΔᐃᐃ; ⲆⵠΔⲆⵠ.length > Ⲇᐃ; Ⲇᐃ++) {
			var Δⵠⵠ = ⲆⵠΔⲆⵠ[Ⲇᐃ];
			if (Δⵠⵠ.ᐃΔᐃᐃⵠ <= ⵠΔᐃⵠ || Δⵠⵠ.x > -ᐃⲆⵠ.ⲆⲆΔ.x + ᐃⲆⵠⵠ || Δⵠⵠ.x < -ᐃⲆⵠ.ⲆⲆΔ.x - ᐃⲆⵠ.ⲆⲆΔ.w / 2 || -ᐃⲆⵠ.ⲆⲆΔ.y + Ⲇᐃᐃᐃ < Δⵠⵠ.y) ⲆⵠΔⲆⵠ.splice(Ⲇᐃ, ⵠᐃⵠΔ)
		}
		var ⲆⲆⲆⵠ = -ᐃⲆⵠ.ⲆⲆΔ.y;
		ⲆⵠΔ.ⲆᐃⲆⲆⲆ > -1e3 && ᐃⲆΔΔⲆ.add(ⲆⲆⲆⵠ)
	}

	function ⲆⵠᐃⵠΔᐃⵠ() {
		for (var Ⲇᐃ = ⲆⵠΔ.ᐃΔⲆᐃ.length - 1; Ⲇᐃ >= 0; Ⲇᐃ--) {
			var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[Ⲇᐃ];
			if (ᐃΔⵠᐃ.Δᐃᐃ === ⲆⵠΔ.ΔⲆⵠⲆΔ) {
				var Ⲇᐃᐃ = ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ];
				if (-ᐃⲆⵠ.ⲆⲆΔ.x >= ᐃΔⵠᐃ.x1 - 230 - ᐃⲆⵠⵠ && -ᐃⲆⵠ.ⲆⲆΔ.x <= ᐃΔⵠᐃ.x2 + 330 && -ᐃⲆⵠ.ⲆⲆΔ.y >= ᐃΔⵠᐃ.y1 - Ⲇᐃᐃᐃ && -ᐃⲆⵠ.ⲆⲆΔ.y <= ᐃΔⵠᐃ.y2 + ⵠⵠⲆⲆⵠ) {
					var ⲆΔΔⵠ = ᐃΔⵠᐃ.x2;
					if (ᐃΔⵠᐃ.Δᐃᐃ !== ⲆⵠΔ.ΔⲆⵠⲆΔ) ⲆΔΔⵠ -= 610;
					var ⲆᐃΔΔ = ᐃΔⵠᐃ.x1;
					if (ᐃΔⵠᐃ.Δᐃᐃ !== ⲆⵠΔ.ΔⲆⵠⲆΔ) ⲆᐃΔΔ += 610;
					var ⲆⵠⲆⵠ = ᐃΔⵠᐃ.y2;
					ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ && (ⲆⵠⲆⵠ -= 610);
					var Δⵠᐃⵠ = ᐃΔⵠᐃ.y1;
					ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ && (Δⵠᐃⵠ += 610);
					if (ⲆⵠΔ.transition) {
						var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ΔΔⵠΔ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
						Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(Ⲇᐃᐃ.ΔⲆᐃ[ⵠⵠⲆⵠ], Ⲇᐃᐃ.ΔⲆᐃ[1], Ⲇᐃᐃ.ΔⲆᐃ[ΔⵠⲆᐃ], Ⲇᐃᐃ.ⲆΔᐃ[ⵠⲆΔ], Ⲇᐃᐃ.ⲆΔᐃ[ⵠⲆΔⲆ], Ⲇᐃᐃ.ⲆΔᐃ[ΔⲆᐃᐃ], ᐃᐃⵠⵠ)
					} else Ⲇ.fillStyle = Ⲇᐃᐃ.ⲆⲆⲆⵠᐃ[ⲆⵠΔ.time];
					var ⵠᐃⵠᐃⲆ = Math.max(ᐃⲆⵠ.ⲆⲆΔ.x + ⲆᐃΔΔ - 2 - 230, ⵠⲆⵠⵠ);
					var ⵠΔⵠⲆᐃ = Math.max(-ᐃⲆⵠ.ⲆⲆΔ.x + ᐃⲆⵠⵠ - ⲆΔΔⵠ - 330 - ᐃᐃᐃⵠ, ⵠᐃⲆ);
					var ᐃΔⵠΔⵠ = Math.max(ᐃⲆⵠ.ⲆⲆΔ.y + Δⵠᐃⵠ - ᐃᐃⲆⲆ, 0);
					var ᐃⵠⵠᐃⵠ = Math.max(-ᐃⲆⵠ.ⲆⲆΔ.y + Ⲇᐃᐃᐃ - ⲆⵠⲆⵠ - 100 - 2, 0);
					Ⲇ.beginPath();
					Ⲇ.fillRect(ⵠᐃⵠᐃⲆ, ᐃΔⵠΔⵠ, ᐃⲆⵠⵠ - ⵠΔⵠⲆᐃ - ⵠᐃⵠᐃⲆ, Ⲇᐃᐃᐃ - ᐃΔⵠΔⵠ - ᐃⵠⵠᐃⵠ)
				}
			}
		}
		for (var Ⲇᐃ = ⲆⵠΔ.ᐃΔⲆᐃ.length - ⲆᐃΔ; Ⲇᐃ >= 0; Ⲇᐃ--) {
			var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[Ⲇᐃ];
			if (ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ) {
				var ⲆΔΔⵠ = ᐃΔⵠᐃ.x2;
				if (ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ) ⲆΔΔⵠ -= 400;
				var ⲆᐃΔΔ = ᐃΔⵠᐃ.x1;
				ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ && (ⲆᐃΔΔ += 400);
				var ⲆⵠⲆⵠ = ᐃΔⵠᐃ.y2;
				ᐃΔⵠᐃ.Δᐃᐃ !== ⲆⵠΔ.ΔⲆⵠⲆΔ && (ⲆⵠⲆⵠ -= 300);
				var Δⵠᐃⵠ = ᐃΔⵠᐃ.y1;
				if (ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ) Δⵠᐃⵠ += 300;
				0 === (ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔⵠⵠΔ) && -ᐃⲆⵠ.ⲆⲆΔ.x >= ⲆΔΔⵠ - ᐃⲆⵠⵠ + 120 && -ᐃⲆⵠ.ⲆⲆΔ.x <= ⲆΔΔⵠ + 820 && -ᐃⲆⵠ.ⲆⲆΔ.y >= Δⵠᐃⵠ + 88 - Ⲇᐃᐃᐃ && ⲆⵠⲆⵠ + 50 >= -ᐃⲆⵠ.ⲆⲆΔ.y && (ⲆⲆΔⲆᐃΔΔ(ⲆΔΔⵠ, Δⵠᐃⵠ + 88, ⲆⵠⲆⵠ - 88, ᐃⲆⵠ.ΔΔⲆΔ[ⵠⵠⵠΔ], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔⵠⵠΔ), ⵠⲆⵠⵠⵠⵠΔ(ⲆΔΔⵠ, Δⵠᐃⵠ + 88, ⲆⵠⲆⵠ - 88, ᐃⲆⵠ.ΔΔⲆΔ[0], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔⵠⵠΔ));
				if (0 === (ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔΔⲆΔⲆ) && ⲆᐃΔΔ - ᐃⲆⵠⵠ - 700 <= -ᐃⲆⵠ.ⲆⲆΔ.x && ⲆᐃΔΔ - ᐃⲆᐃⵠⲆ >= -ᐃⲆⵠ.ⲆⲆΔ.x && Δⵠᐃⵠ + 88 - Ⲇᐃᐃᐃ <= -ᐃⲆⵠ.ⲆⲆΔ.y && ⲆⵠⲆⵠ + 50 >= -ᐃⲆⵠ.ⲆⲆΔ.y) {
					ⲆᐃΔⲆⵠⲆᐃ(ⲆᐃΔΔ, Δⵠᐃⵠ + 88, ⲆⵠⲆⵠ - 88, ᐃⲆⵠ.ΔΔⲆΔ[1], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔΔⲆΔⲆ);
					ᐃΔⲆΔΔⵠᐃ(ⲆᐃΔΔ, Δⵠᐃⵠ + 88, ⲆⵠⲆⵠ - 88, ᐃⲆⵠ.ΔΔⲆΔ[1], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔΔⲆΔⲆ)
				}
				if (Δⵠⵠⵠ === (ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔᐃⵠΔ) && ⲆᐃΔΔ - 235 - ᐃⲆⵠⵠ <= -ᐃⲆⵠ.ⲆⲆΔ.x && ⲆΔΔⵠ + 350 >= -ᐃⲆⵠ.ⲆⲆΔ.x && ⲆⵠⲆⵠ - Ⲇᐃᐃᐃ - 275 <= -ᐃⲆⵠ.ⲆⲆΔ.y && ⲆⵠⲆⵠ + 490 >= -ᐃⲆⵠ.ⲆⲆΔ.y) {
					ⲆⲆΔΔᐃᐃⲆ(ⲆⵠⲆⵠ - 230, ⲆᐃΔΔ - 230, ⲆΔΔⵠ + 230, ᐃⲆⵠ.ΔΔⲆΔ[2], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔᐃⵠΔ);
					ⲆⵠᐃⵠᐃⵠⲆ(ⲆⵠⲆⵠ - 230, ⲆᐃΔΔ - 230, ⲆΔΔⵠ + 230, ᐃⲆⵠ.ΔΔⲆΔ[2], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔᐃⵠΔ)
				}(ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔᐃΔⲆⵠ) === ⵠΔᐃⵠ && ⲆᐃΔΔ - 235 - ᐃⲆⵠⵠ <= -ᐃⲆⵠ.ⲆⲆΔ.x && -ᐃⲆⵠ.ⲆⲆΔ.x <= ⲆΔΔⵠ + 350 && Δⵠᐃⵠ - Ⲇᐃᐃᐃ - 390 <= -ᐃⲆⵠ.ⲆⲆΔ.y && -ᐃⲆⵠ.ⲆⲆΔ.y <= Δⵠᐃⵠ + 315 && (ⲆⵠᐃΔⲆⵠᐃ(Δⵠᐃⵠ + 310, ⲆᐃΔΔ - 230, ⲆΔΔⵠ + 230, ᐃⲆⵠ.ΔΔⲆΔ[ⲆⵠⲆᐃ], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔᐃΔⲆⵠ), ΔᐃⲆΔⲆᐃⵠ(Δⵠᐃⵠ + 310, ⲆᐃΔΔ - 230, ⲆΔΔⵠ + 230, ᐃⲆⵠ.ΔΔⲆΔ[3], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔᐃΔⲆⵠ))
			}
		}
		for (var Ⲇᐃ = ⲆⵠΔ.ᐃΔⲆᐃ.length - ⲆᐃΔ; Ⲇᐃ >= 0; Ⲇᐃ--) {
			var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[Ⲇᐃ];
			if (ᐃΔⵠᐃ.Δᐃᐃ !== ⲆⵠΔ.ΔⲆⵠⲆΔ) {
				var ⲆΔΔⵠ = ᐃΔⵠᐃ.x2;
				if (ᐃΔⵠᐃ.Δᐃᐃ !== ⲆⵠΔ.ΔⲆⵠⲆΔ) ⲆΔΔⵠ -= 400;
				var ⲆᐃΔΔ = ᐃΔⵠᐃ.x1;
				ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ && (ⲆᐃΔΔ += 400);
				var ⲆⵠⲆⵠ = ᐃΔⵠᐃ.y2;
				ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ && (ⲆⵠⲆⵠ -= 300);
				var Δⵠᐃⵠ = ᐃΔⵠᐃ.y1;
				if (ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ) Δⵠᐃⵠ += 300;
				0 !== (ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔⵠⵠΔ) && -ᐃⲆⵠ.ⲆⲆΔ.x >= ⲆΔΔⵠ - ᐃⲆⵠⵠ + 120 && -ᐃⲆⵠ.ⲆⲆΔ.x <= ⲆΔΔⵠ + 820 && Δⵠᐃⵠ + 88 - Ⲇᐃᐃᐃ <= -ᐃⲆⵠ.ⲆⲆΔ.y && -ᐃⲆⵠ.ⲆⲆΔ.y <= ⲆⵠⲆⵠ + 50 && ⲆⲆΔⲆᐃΔΔ(ⲆΔΔⵠ, Δⵠᐃⵠ + 88, ⲆⵠⲆⵠ - 88, ᐃⲆⵠ.ΔΔⲆΔ[0], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔⵠⵠΔ);
				if (0 !== (ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔΔⲆΔⲆ) && -ᐃⲆⵠ.ⲆⲆΔ.x >= ⲆᐃΔΔ - ᐃⲆⵠⵠ - 700 && -ᐃⲆⵠ.ⲆⲆΔ.x <= ⲆᐃΔΔ - 20 && Δⵠᐃⵠ + 88 - Ⲇᐃᐃᐃ <= -ᐃⲆⵠ.ⲆⲆΔ.y && -ᐃⲆⵠ.ⲆⲆΔ.y <= ⲆⵠⲆⵠ + 50) {
					ⲆᐃΔⲆⵠⲆᐃ(ⲆᐃΔΔ, Δⵠᐃⵠ + 88, ⲆⵠⲆⵠ - 88, ᐃⲆⵠ.ΔΔⲆΔ[Δⵠᐃ], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔΔⲆΔⲆ)
				}
				if (0 !== (ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔᐃⵠΔ) && -ᐃⲆⵠ.ⲆⲆΔ.x >= ⲆᐃΔΔ - 235 - ᐃⲆⵠⵠ && -ᐃⲆⵠ.ⲆⲆΔ.x <= ⲆΔΔⵠ + 350 && ⲆⵠⲆⵠ - Ⲇᐃᐃᐃ - 275 <= -ᐃⲆⵠ.ⲆⲆΔ.y && ⲆⵠⲆⵠ + 490 >= -ᐃⲆⵠ.ⲆⲆΔ.y) {
					ⲆⲆΔΔᐃᐃⲆ(ⲆⵠⲆⵠ - 230, ⲆᐃΔΔ - 230, ⲆΔΔⵠ + 230, ᐃⲆⵠ.ΔΔⲆΔ[2], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔᐃⵠΔ)
				}
				if (0 !== (ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔᐃΔⲆⵠ) && -ᐃⲆⵠ.ⲆⲆΔ.x >= ⲆᐃΔΔ - 235 - ᐃⲆⵠⵠ && -ᐃⲆⵠ.ⲆⲆΔ.x <= ⲆΔΔⵠ + 350 && Δⵠᐃⵠ - Ⲇᐃᐃᐃ - 390 <= -ᐃⲆⵠ.ⲆⲆΔ.y && Δⵠᐃⵠ + 315 >= -ᐃⲆⵠ.ⲆⲆΔ.y) {
					ⲆⵠᐃΔⲆⵠᐃ(Δⵠᐃⵠ + 310, ⲆᐃΔΔ - 230, ⲆΔΔⵠ + 230, ᐃⲆⵠ.ΔΔⲆΔ[3], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔᐃΔⲆⵠ)
				}
			}
		}
		for (var Ⲇᐃ = ⲆⵠΔ.ᐃΔⲆᐃ.length - 1; 0 <= Ⲇᐃ; Ⲇᐃ--) {
			var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[Ⲇᐃ];
			if (ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ) {
				var Ⲇᐃᐃ = ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ];
				if (-ᐃⲆⵠ.ⲆⲆΔ.x >= ᐃΔⵠᐃ.x1 - 230 - ᐃⲆⵠⵠ && -ᐃⲆⵠ.ⲆⲆΔ.x <= ᐃΔⵠᐃ.x2 + 330 && -ᐃⲆⵠ.ⲆⲆΔ.y >= ᐃΔⵠᐃ.y1 - Ⲇᐃᐃᐃ && ᐃΔⵠᐃ.y2 + ⲆⵠⲆⲆⵠ >= -ᐃⲆⵠ.ⲆⲆΔ.y) {
					var ⲆΔΔⵠ = ᐃΔⵠᐃ.x2;
					if (ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ) {
						ⵠᐃⲆⲆ === (ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔⵠⵠΔ) ? ⲆΔΔⵠ -= 414 : ⲆΔΔⵠ -= 610
					}
					var ⲆᐃΔΔ = ᐃΔⵠᐃ.x1;
					if (ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ) {
						0 === (ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔΔⲆΔⲆ) ? ⲆᐃΔΔ += 414 : ⲆᐃΔΔ += 610
					}
					var ⲆⵠⲆⵠ = ᐃΔⵠᐃ.y2;
					if (ᐃΔⵠᐃ.Δᐃᐃ !== ⲆⵠΔ.ΔⲆⵠⲆΔ) {
						0 === (ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔᐃⵠΔ) ? ⲆⵠⲆⵠ -= 414 : ⲆⵠⲆⵠ -= 610
					}
					var Δⵠᐃⵠ = ᐃΔⵠᐃ.y1;
					if (ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ) {
						(ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔᐃΔⲆⵠ) === 0 ? Δⵠᐃⵠ += 414 : Δⵠᐃⵠ += 610
					}
					if (ⲆⵠΔ.transition) {
						var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ΔᐃⲆⲆ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
						Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(Ⲇᐃᐃ.ΔⲆᐃ[ⵠⲆᐃ], Ⲇᐃᐃ.ΔⲆᐃ[1], Ⲇᐃᐃ.ΔⲆᐃ[2], Ⲇᐃᐃ.ⲆΔᐃ[0], Ⲇᐃᐃ.ⲆΔᐃ[1], Ⲇᐃᐃ.ⲆΔᐃ[ⲆⵠΔⵠ], ᐃᐃⵠⵠ)
					} else Ⲇ.fillStyle = Ⲇᐃᐃ.ⲆⲆⲆⵠᐃ[ⲆⵠΔ.time];
					var ⵠᐃⵠᐃⲆ = Math.max(ᐃⲆⵠ.ⲆⲆΔ.x + ⲆᐃΔΔ - ΔᐃΔᐃ - 230, ⵠΔᐃⵠ);
					var ⵠΔⵠⲆᐃ = Math.max(-ᐃⲆⵠ.ⲆⲆΔ.x + ᐃⲆⵠⵠ - ⲆΔΔⵠ - 330 - ᐃᐃΔⵠ, ᐃᐃᐃ);
					var ᐃΔⵠΔⵠ = Math.max(ᐃⲆⵠ.ⲆⲆΔ.y + Δⵠᐃⵠ - ΔᐃΔᐃ, 0);
					var ᐃⵠⵠᐃⵠ = Math.max(-ᐃⲆⵠ.ⲆⲆΔ.y + Ⲇᐃᐃᐃ - ⲆⵠⲆⵠ - ⲆⵠⲆⲆⵠ - 2, ᐃᐃᐃ);
					Ⲇ.beginPath();
					Ⲇ.fillRect(ⵠᐃⵠᐃⲆ, ᐃΔⵠΔⵠ, ᐃⲆⵠⵠ - ⵠΔⵠⲆᐃ - ⵠᐃⵠᐃⲆ, Ⲇᐃᐃᐃ - ᐃΔⵠΔⵠ - ᐃⵠⵠᐃⵠ)
				}
			}
		}
		ᐃΔΔΔ.ΔΔⲆᐃⲆ && (ΔⵠⲆᐃⲆ(ΔⵠⲆᐃⲆⲆⲆ, ⲆⲆΔⲆᐃᐃⵠ, ᐃⵠⵠⵠΔⲆᐃ, ΔΔⵠᐃᐃⲆᐃ, ⲆⲆΔⵠΔⲆⲆ, Δ.ᐃⲆΔᐃⲆ, ⵠ[418], ⲆⲆΔⲆ), ΔⵠⲆᐃⲆ(ΔⵠⲆᐃⲆⲆⲆ, ⲆⲆΔⲆᐃᐃⵠ, ᐃⵠⵠⵠΔⲆᐃ, ΔΔⵠᐃᐃⲆᐃ, ⲆⲆΔⵠΔⲆⲆ, Δ.ᐃⵠⵠᐃⲆ, ⵠ[418], 2));
		ΔⵠⲆᐃⲆ(ⵠᐃΔᐃⲆ, ⲆⲆΔⲆᐃᐃⵠ, ᐃⵠⵠⵠΔⲆᐃ, ΔΔⵠᐃᐃⲆᐃ, ⲆⲆΔⵠΔⲆⲆ, Δ.ⵠⵠᐃⵠᐃ, ⵠ[418], 2);
		ᐃΔΔΔ.ΔΔⲆᐃⲆ && ΔⵠⲆᐃⲆ(ΔᐃΔⲆΔⲆⵠΔⲆ, ⲆⲆΔⲆᐃᐃⵠ, ᐃⵠⵠⵠΔⲆᐃ, ΔΔⵠᐃᐃⲆᐃ, ⲆⲆΔⵠΔⲆⲆ, Δ.ⵠⵠⵠⵠΔⵠⵠ, ⵠ[77]);
		var ⵠΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠΔ];
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠΔᐃΔ.length; Ⲇᐃ++) {
			var ΔⲆⵠ = ⵠΔᐃΔ[Ⲇᐃ];
			for (var ⲆⲆᐃⲆ = ΔΔᐃᐃ; ΔⲆⵠ.ⲆⵠΔΔⵠ.length > ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) ⲆⲆᐃⵠⵠᐃΔⲆⵠ(ΔⲆⵠ.ⲆⵠΔΔⵠ[ⲆⲆᐃⲆ])
		}
		ⲆᐃⵠⲆⲆΔⵠ += ⲆΔΔⲆ * 40;
		if (ⲆᐃⵠⲆⲆΔⵠ > 60) ⲆᐃⵠⲆⲆΔⵠ -= 60;
		ΔⵠⲆᐃⲆ(ⵠΔΔⵠᐃᐃⵠⵠᐃ, ⲆⲆΔⲆᐃᐃⵠ, ᐃⵠⵠⵠΔⲆᐃ, ΔΔⵠᐃᐃⲆᐃ, ⲆⲆΔⵠΔⲆⲆ, Δ.ⵠΔⲆⲆ, "r", ⵠᐃⲆ);
		for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆⵠΔ.ᐃΔⲆᐃ.length; Ⲇᐃ++) {
			var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[Ⲇᐃ];
			if (ᐃΔⵠᐃ.Δᐃᐃ !== ⲆⵠΔ.ΔⲆⵠⲆΔ) {
				var ⲆΔΔⵠ = ᐃΔⵠᐃ.x2;
				ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ && (ⲆΔΔⵠ -= 400);
				var ⲆᐃΔΔ = ᐃΔⵠᐃ.x1;
				if (ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ) ⲆᐃΔΔ += 400;
				var ⲆⵠⲆⵠ = ᐃΔⵠᐃ.y2;
				ᐃΔⵠᐃ.Δᐃᐃ !== ⲆⵠΔ.ΔⲆⵠⲆΔ && (ⲆⵠⲆⵠ -= 300);
				var Δⵠᐃⵠ = ᐃΔⵠᐃ.y1;
				ᐃΔⵠᐃ.Δᐃᐃ !== ⲆⵠΔ.ΔⲆⵠⲆΔ && (Δⵠᐃⵠ += 300);
				if ((ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔⵠⵠΔ) > 0 && ⲆΔΔⵠ - ᐃⲆⵠⵠ + 120 <= -ᐃⲆⵠ.ⲆⲆΔ.x && -ᐃⲆⵠ.ⲆⲆΔ.x <= ⲆΔΔⵠ + 820 && -ᐃⲆⵠ.ⲆⲆΔ.y >= Δⵠᐃⵠ + 88 - Ⲇᐃᐃᐃ && ⲆⵠⲆⵠ + 50 >= -ᐃⲆⵠ.ⲆⲆΔ.y) ⵠⲆⵠⵠⵠⵠΔ(ⲆΔΔⵠ, Δⵠᐃⵠ + 88, ⲆⵠⲆⵠ - 88, ᐃⲆⵠ.ΔΔⲆΔ[ⵠⵠⲆⵠ], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔⵠⵠΔ);
				if ((ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔΔⲆΔⲆ) > 0 && -ᐃⲆⵠ.ⲆⲆΔ.x >= ⲆᐃΔΔ - ᐃⲆⵠⵠ - 700 && ⲆᐃΔΔ - ⵠΔⵠᐃⲆ >= -ᐃⲆⵠ.ⲆⲆΔ.x && Δⵠᐃⵠ + 88 - Ⲇᐃᐃᐃ <= -ᐃⲆⵠ.ⲆⲆΔ.y && ⲆⵠⲆⵠ + 50 >= -ᐃⲆⵠ.ⲆⲆΔ.y) ᐃΔⲆΔΔⵠᐃ(ⲆᐃΔΔ, Δⵠᐃⵠ + 88, ⲆⵠⲆⵠ - 88, ᐃⲆⵠ.ΔΔⲆΔ[ⲆᐃΔ], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔΔⲆΔⲆ);
				if (ⵠⵠⲆⵠ < (ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔᐃⵠΔ) && -ᐃⲆⵠ.ⲆⲆΔ.x >= ⲆᐃΔΔ - 235 - ᐃⲆⵠⵠ && ⲆΔΔⵠ + 350 >= -ᐃⲆⵠ.ⲆⲆΔ.x && ⲆⵠⲆⵠ - Ⲇᐃᐃᐃ - 275 <= -ᐃⲆⵠ.ⲆⲆΔ.y && -ᐃⲆⵠ.ⲆⲆΔ.y <= ⲆⵠⲆⵠ + 490) ⲆⵠᐃⵠᐃⵠⲆ(ⲆⵠⲆⵠ - 230, ⲆᐃΔΔ - 230, ⲆΔΔⵠ + 230, ᐃⲆⵠ.ΔΔⲆΔ[2], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔᐃⵠΔ);
				(ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔᐃΔⲆⵠ) > ΔΔᐃᐃ && ⲆᐃΔΔ - 235 - ᐃⲆⵠⵠ <= -ᐃⲆⵠ.ⲆⲆΔ.x && ⲆΔΔⵠ + 350 >= -ᐃⲆⵠ.ⲆⲆΔ.x && Δⵠᐃⵠ - Ⲇᐃᐃᐃ - 390 <= -ᐃⲆⵠ.ⲆⲆΔ.y && Δⵠᐃⵠ + 315 >= -ᐃⲆⵠ.ⲆⲆΔ.y && ΔᐃⲆΔⲆᐃⵠ(Δⵠᐃⵠ + 310, ⲆᐃΔΔ - 230, ⲆΔΔⵠ + 230, ᐃⲆⵠ.ΔΔⲆΔ[ⲆΔᐃⲆ], ⲆⵠΔ.ⵠⵠᐃⲆᐃ[ᐃΔⵠᐃ.Δᐃᐃ], ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔᐃΔⲆⵠ)
			}
		}
	}

	function ΔⲆᐃⵠ(Ⲇⵠⵠ, ΔᐃΔΔⲆ, ⵠᐃᐃⵠⲆ) {
		if (ⲆⵠΔ.transition) {
			Ⲇ.globalAlpha = ⲆᐃΔ;
			Ⲇⵠⵠ.ⵠᐃᐃⲆ(ΔᐃΔΔⲆ, ⵠᐃᐃⵠⲆ);
			ⲆⵠΔ.time = ⲆⵠΔ.time ? 0 : ⵠΔᐃ;
			Ⲇ.globalAlpha = ΔⵠΔ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
			Ⲇⵠⵠ.ⵠᐃᐃⲆ(ΔᐃΔΔⲆ, ⵠᐃᐃⵠⲆ);
			ⲆⵠΔ.time = ⲆⵠΔ.time ? 0 : ΔᐃⲆⲆ;
			Ⲇ.globalAlpha = 1
		} else Ⲇⵠⵠ.ⵠᐃᐃⲆ(ΔᐃΔΔⲆ, ⵠᐃᐃⵠⲆ)
	}

	function ΔⲆᐃⵠⲆ(ⲆΔ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ) {
		ⲆⵠΔ.transition ? (Ⲇ.globalAlpha = ⵠΔᐃ, ᐃᐃⵠⲆ(Ⲇ, ᐃΔ[ⲆΔ][ⲆⵠΔ.time], Ⲇⵠ, ᐃⵠⲆ), ⲆⵠΔ.time = ⲆⵠΔ.time ? 0 : 1, Ⲇ.globalAlpha = ΔΔⵠΔ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ, ᐃᐃⵠⲆ(Ⲇ, ᐃΔ[ⲆΔ][ⲆⵠΔ.time], Ⲇⵠ, ᐃⵠⲆ), ⲆⵠΔ.time = ⲆⵠΔ.time ? 0 : 1, Ⲇ.globalAlpha = ᐃᐃΔ) : ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, Ⲇⵠ, ᐃⵠⲆ)
	}

	function ΔᐃⲆΔⲆᐃⵠ(ΔΔΔΔⵠ, ⲆⵠⲆᐃⲆ, ᐃᐃⵠΔⲆ, ΔΔⲆΔ, ᐃΔⵠᐃ, ⲆⵠΔᐃ) {
		var w1 = ΔΔⲆΔ.w1;
		var w2 = ΔΔⲆΔ.w2;
		var w3 = ΔΔⲆΔ.w3;
		var ⵠΔⵠⲆ = ᐃⲆⵠ.ⲆⲆΔ.y + ΔΔΔΔⵠ - 700;
		var ⵠᐃⵠᐃⲆ = Math.max(ᐃⲆⵠ.ⲆⲆΔ.x + ⲆⵠⲆᐃⲆ, ⵠⲆⵠⵠ);
		var ⵠΔⵠⲆᐃ = Math.max(-ᐃⲆⵠ.ⲆⲆΔ.x + ᐃⲆⵠⵠ - ᐃᐃⵠΔⲆ - ᐃΔⵠᐃⵠ, 0);
		var Ⲇⵠⵠᐃ = ⵠᐃⵠᐃⲆ;
		var ⲆⵠⵠⵠΔ = ᐃⲆⵠⵠ - ⵠᐃⵠᐃⲆ - ⵠΔⵠⲆᐃ;
		if (ⲆⵠΔᐃ) var ⲆⲆᐃ = ΔΔⲆΔ.Δᐃᐃ(w1);
		else var ⲆⲆᐃ = w1.r;
		var ᐃⲆⲆᐃ = ⵠΔⵠⲆ + ΔᐃᐃΔ.ⲆⵠᐃᐃⲆ;
		var ᐃᐃΔᐃΔ = Ⲇⵠⵠᐃ,
			ᐃⵠⲆⵠⵠ = ᐃⲆⲆᐃ,
			ⵠⲆᐃⲆⲆ = ⲆⲆᐃ.x + ΔᐃᐃΔ.ΔⲆΔⲆⵠ,
			ⲆⵠΔΔΔ = ⲆⵠⵠⵠΔ;
		ᐃⲆⲆᐃ += ⲆⲆᐃ.x + ΔᐃᐃΔ.ΔⲆΔⲆⵠ - ᐃⲆᐃⵠ;
		var ΔΔΔΔⲆ = ᐃⲆⲆᐃ;
		if (ⲆⵠΔᐃ) var ⲆⲆᐃ = ΔΔⲆΔ.Δᐃᐃ(w2);
		else var ⲆⲆᐃ = w2.r;
		var d2 = ⵠΔⵠⲆ + ΔᐃᐃΔ.ΔⲆⲆᐃⵠ - ᐃⲆⲆᐃ + ⲆⲆᐃ.x;
		var ᐃΔΔⵠⵠ = ᐃⲆⲆᐃ,
			ⲆΔⲆᐃⲆ = Ⲇⵠⵠᐃ,
			ⵠΔΔᐃⵠ = d2,
			ⲆⲆΔⲆⵠ = ⲆⵠⵠⵠΔ;
		ᐃⲆⲆᐃ += d2 - 2;
		var ⲆⲆⲆⵠⵠ = ᐃⲆⲆᐃ - 2;
		if (ⲆⵠΔᐃ) var ⲆⲆᐃ = ΔΔⲆΔ.Δᐃᐃ(w3);
		else var ⲆⲆᐃ = w3.r;
		d2 = ⵠΔⵠⲆ + ΔᐃᐃΔ.ΔᐃⲆᐃⲆ - ᐃⲆⲆᐃ + ⲆⲆᐃ.x;
		if (ⲆⲆⲆⵠⵠ < ᐃⲆⲆᐃ + d2 - ᐃⵠΔⵠ) {
			var ᐃⲆⵠⲆΔ = true;
			var ⵠⵠΔΔⲆ = ᐃⲆⲆᐃ,
				ⲆⲆᐃΔᐃ = Ⲇⵠⵠᐃ,
				ᐃⵠΔΔⲆ = d2,
				ΔⲆⵠᐃΔ = ⲆⵠⵠⵠΔ;
			ᐃⲆⲆᐃ += d2 - 2;
			var Δⵠⵠᐃⵠ = ᐃⲆⲆᐃ
		} else {
			var ᐃⲆⵠⲆΔ = ΔⲆΔᐃΔ;
			ᐃⲆⲆᐃ = ⲆⲆⲆⵠⵠ;
			var Δⵠⵠᐃⵠ = -ᐃᐃΔ
		}
		d2 = ⵠΔⵠⲆ + ΔᐃᐃΔ.ⲆΔΔⲆⵠⵠⲆ - ᐃⲆⲆᐃ;
		if (ⲆⵠΔ.transition) {
			var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ᐃⲆΔ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
			Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(9, 55, 63, 11, 106, 132, ᐃᐃⵠⵠ)
		} else Ⲇ.fillStyle = Δ.ᐃⲆΔⵠᐃ[ⲆⵠΔ.time];
		Ⲇ.fillRect(ᐃᐃΔᐃΔ, ᐃⵠⲆⵠⵠ, ⲆⵠΔΔΔ, ⵠⲆᐃⲆⲆ);
		if (ⲆⵠΔᐃ) {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ᐃᐃΔ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(15, 70, 76, 42, 139, 155, ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = Δ.ⵠΔΔΔΔⲆⵠ[ⲆⵠΔ.time]
		} else {
			if (ⲆⵠΔ.transition) {
				var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? 1 - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
				Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(9, 55, 63, 11, 106, 132, ᐃᐃⵠⵠ)
			} else Ⲇ.fillStyle = Δ.ᐃⲆΔⵠᐃ[ⲆⵠΔ.time]
		}
		Ⲇ.fillRect(ⲆΔⲆᐃⲆ, ᐃΔΔⵠⵠ, ⲆⲆΔⲆⵠ, ⵠΔΔᐃⵠ);
		if (ᐃⲆⵠⲆΔ) {
			if (ⲆⵠΔᐃ) {
				if (ⲆⵠΔ.transition) {
					var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ΔⵠⲆⲆ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
					Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(17, 94, 96, 169, 214, 211, ᐃᐃⵠⵠ)
				} else Ⲇ.fillStyle = Δ.ᐃᐃΔⵠΔΔᐃ[ⲆⵠΔ.time]
			} else {
				if (ⲆⵠΔ.transition) {
					var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? Ⲇⵠᐃ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
					Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(9, 55, 63, 11, 106, 132, ᐃᐃⵠⵠ)
				} else Ⲇ.fillStyle = Δ.ᐃⲆΔⵠᐃ[ⲆⵠΔ.time]
			}
			Ⲇ.fillRect(ⲆⲆᐃΔᐃ, ⵠⵠΔΔⲆ, ΔⲆⵠᐃΔ, ᐃⵠΔΔⲆ)
		}
		if (ᐃΔΔΔ.ΔΔⲆᐃⲆ && ⲆⵠΔᐃ) ΔΔⲆΔ.ⲆᐃᐃⵠΔΔΔᐃᐃ(ⲆⲆⲆⵠⵠ, Δⵠⵠᐃⵠ, ΔΔΔΔⲆ, ⵠΔⵠⲆ, -ᐃⲆⵠ.ⲆⲆΔ.x + ᐃᐃΔᐃΔ, -ᐃⲆⵠ.ⲆⲆΔ.x + ᐃᐃΔᐃΔ + ⲆⵠΔΔΔ)
	}
	var ΔⵠᐃᐃᐃⲆⲆΔΔ = Ⲇᐃⵠ;
	var ᐃᐃᐃⲆΔⵠⵠⲆΔ = 1;
	var ᐃΔᐃⲆΔⲆⲆⵠⵠ = ⵠⲆᐃ;
	var ᐃⲆⲆᐃⵠⲆΔᐃⲆ = Ⲇⵠᐃ;
	var ᐃΔᐃⵠΔΔⵠⲆⵠ = 0;
	var ΔⵠΔⲆⲆΔⲆᐃⵠ = ΔᐃΔⲆ;
	var ⲆⲆⲆΔⵠᐃⵠΔᐃ = 0;
	var ⲆΔᐃᐃᐃΔⵠⵠⵠ = ⵠⲆⲆ;
	var ⲆⲆΔⵠᐃⵠⵠΔⵠ = 0;
	var ΔᐃᐃΔΔⲆᐃⵠⲆ = 1;
	var ᐃⲆΔᐃⲆΔⵠΔᐃ = 0;
	var ⲆᐃⵠⲆΔΔⲆⵠᐃ = 1;
	var Ⲇᐃᐃⵠᐃ = 0;
	if (ⵠⵠⲆΔᐃᐃᐃⲆΔ.ⲆⵠⲆⲆΔⲆᐃⲆᐃ) {
		var ⵠⵠᐃᐃᐃⵠⵠᐃⲆ = ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].acos;
		ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].acos = ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].asin;
		ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].asin = ⵠⵠᐃᐃᐃⵠⵠᐃⲆ;
		var ᐃⲆⲆⲆΔᐃᐃᐃᐃ = ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].acos;
		ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].acos = ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].asin;
		ⵠⵠⲆΔᐃᐃᐃⲆΔ["Math"].asin = ᐃⲆⲆⲆΔᐃᐃᐃᐃ
	}
	var ᐃᐃⵠⲆΔ = ΔΔΔᐃ;
	var ᐃⵠᐃⲆⵠ = 2;
	var ΔⵠᐃⲆⵠΔΔ = ⵠᐃⲆ;
	var ⵠᐃⲆⲆᐃᐃⵠ = 1;
	var ΔⵠᐃΔ = ⲆⵠΔⵠ;

	function ΔⵠⵠᐃᐃⲆᐃⵠⵠ(ᐃᐃ, ⲆΔⲆⵠⵠΔⵠ, ΔΔᐃⵠⲆ, ⲆⵠⲆⲆⵠΔΔ, Ⲇᐃᐃᐃᐃᐃⵠ, ⵠΔΔ, ⵠⵠⲆ) {
		ᐃᐃ.end = ⲆΔⲆⵠⵠΔⵠ;
		ᐃᐃ.start = ΔΔᐃⵠⲆ;
		ᐃᐃ.ⲆⵠⲆⲆⵠΔΔ = ⲆⵠⲆⲆⵠΔΔ;
		ᐃᐃ.Ⲇᐃᐃᐃᐃᐃⵠ = Ⲇᐃᐃᐃᐃᐃⵠ;
		ᐃᐃ.width = ᐃᐃ.ᐃᐃ.width;
		ᐃᐃ.height = ᐃᐃ.ᐃᐃ.height;
		ᐃᐃ.scale = (ⲆΔⲆⵠⵠΔⵠ + ΔΔᐃⵠⲆ) / 2;
		ᐃᐃ.ⵠΔΔⲆ = ᐃᐃⲆⲆΔ;
		ᐃᐃ.ⵠᐃᐃⲆ = function(Ⲇ) {
			ᐃᐃ.translate.x = ΔⵠⵠΔ - ᐃᐃ.width / 2;
			ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ.ᐃᐃ, ⵠᐃⲆ, 0, ᐃᐃ.ᐃᐃ.width, ᐃᐃ.ᐃᐃ.height, ᐃᐃ.translate.x, ᐃᐃ.translate.y, ᐃᐃ.width, ᐃᐃ.height)
		}
	}

	function ᐃⲆᐃᐃᐃᐃⲆ(ⵠᐃⲆᐃᐃⲆⵠ, ⵠⵠᐃΔⲆΔⲆ, ᐃⲆⲆⲆᐃΔᐃ, ⵠΔΔⲆΔⲆⵠ, ⲆΔΔⲆΔⲆⲆ) {
		ΔⲆⲆⵠⲆⲆⲆ(ᐃⵠΔⲆⲆ, ⵠᐃⲆᐃᐃⲆⵠ, ⵠⵠᐃΔⲆΔⲆ, ᐃⲆⲆⲆᐃΔᐃ, ⵠΔΔⲆΔⲆⵠ, ⲆΔΔⲆΔⲆⲆ);
		const ᐃᐃΔⲆΔΔΔΔΔ = ΔᐃᐃᐃΔᐃⵠ(ⲆⲆⵠΔ[ⵠΔᐃᐃ], ⲆⲆⵠΔ[ΔᐃⲆⲆ], ⲆⲆⵠΔ[2], ⲆⲆⵠΔ[3], ⲆⲆⵠΔ[4], ⲆⲆⵠΔ[ⵠⲆΔ]);
		const ΔⲆᐃᐃⵠᐃᐃⲆⵠ = ΔⲆⲆⲆⵠΔⵠ(ⲆⲆⵠΔ[ΔΔⵠΔ], ⲆⲆⵠΔ[ΔⵠⲆᐃ]);
		const ⵠⲆᐃⵠΔΔⲆⲆⲆ = (48271 * (225 + (ᐃᐃΔⲆΔΔΔΔΔ ^ ΔⲆᐃᐃⵠᐃᐃⲆⵠ)) + 0) % 2147483647;
		return ⵠⲆᐃⵠΔΔⲆⲆⲆ
	}

	function ᐃⵠⵠⵠ(ᐃᐃ, ⲆⲆⲆΔⵠ, Ⲇⵠ, ᐃⵠⲆ, ΔⲆᐃⲆⵠ) {
		var Δᐃ = {
			x: Ⲇⵠ,
			y: ᐃⵠⲆ,
			"ⲆΔΔⵠⲆ": Ⲇⵠ,
			"ⲆⵠΔⵠΔ": ᐃⵠⲆ
		};
		var ⵠᐃᐃⲆ = function(ΔΔᐃᐃⲆ) {
			ᐃᐃⵠⲆ(ΔΔᐃᐃⲆ, ᐃᐃ, Δᐃ.x, Δᐃ.y, ᐃᐃ.width / 2, ᐃᐃ.height / ᐃᐃᐃⵠ)
		};
		return {
			translate: Δᐃ,
			"ⵠᐃᐃⲆ": ⵠᐃᐃⲆ,
			active: ⲆⲆⲆΔⵠ,
			position: ΔⲆᐃⲆⵠ
		}
	}

	function ⵠΔΔΔᐃⵠⵠΔⲆ(ᐃᐃ) {
		var Δᐃ = {
			y: 0,
			x: ⵠⵠⵠ
		};
		var ⵠᐃᐃⲆ = function(ΔΔᐃᐃⲆ) {
			ᐃᐃⵠⲆ(ΔΔᐃᐃⲆ, ᐃᐃ, Δᐃ.x, Δᐃ.y)
		};
		return {
			"ᐃᐃ": ᐃᐃ,
			translate: Δᐃ,
			"ⵠᐃᐃⲆ": ⵠᐃᐃⲆ
		}
	}

	function ΔΔⲆ(ⵠΔΔ, ⵠⵠⲆ, text, ᐃⵠΔⵠᐃⵠⵠ, ΔⵠΔΔⲆⲆΔ, ⵠΔΔⲆ, callback, Ⲇⵠ, ᐃⵠⲆ, ΔⲆᐃⲆⵠ, ⲆⲆⲆΔⵠ) {
		ⲆⲆⵠⵠᐃ === ᐃⵠⲆ && (ᐃⵠⲆ = 0);
		Ⲇⵠ === undefined && (Ⲇⵠ = ⵠᐃⲆⲆ);
		if (ⲆΔΔⵠᐃ === ΔⲆᐃⲆⵠ) ΔⲆᐃⲆⵠ = 0;
		ⲆⲆⲆΔⵠ === undefined && (ⲆⲆⲆΔⵠ = ⲆᐃΔ);
		ΔⵠΔΔⲆⲆΔ = ⲆⲆᐃⵠ === ΔⵠΔΔⲆⲆΔ ? 3 : ΔⵠΔΔⲆⲆΔ === 1 ? ⲆᐃΔⲆ : ΔᐃΔⲆ;
		if (1 !== ⵠΔΔⲆ) ⵠΔΔⲆ = ⵠΔᐃⵠ;
		if (ᐃⵠΔⵠᐃⵠⵠ) var ᐃᐃ = ᐃⵠΔⵠᐃⵠⵠ;
		var ᐃᐃⵠᐃ = {
			width: ⵠΔΔ,
			height: ⵠⵠⲆ,
			"ᐃᐃ": ᐃᐃ,
			state: ΔⵠᐃⲆⵠΔΔ,
			translate: {
				x: Ⲇⵠ,
				y: ᐃⵠⲆ,
				"ⲆΔΔⵠⲆ": Ⲇⵠ,
				"ⲆⵠΔⵠΔ": ᐃⵠⲆ
			},
			"ΔⵠΔΔΔᐃⵠⵠΔ": ⵠΔΔⲆ,
			"ⵠΔΔⲆ": 0,
			callback: callback,
			position: ΔⲆᐃⲆⵠ,
			active: ⲆⲆⲆΔⵠ
		};
		var ⵠᐃⵠⵠⵠΔΔ = function() {
			return ᐃᐃⵠᐃ.ᐃᐃ[ᐃᐃⵠᐃ.state]
		};
		var ΔΔⲆΔΔⲆⲆ = function(ⵠΔΔΔ) {
			var Δᐃ = ᐃᐃⵠᐃ.translate;
			(0 === ᐃᐃⵠᐃ.width || ⵠΔᐃⵠ === ᐃᐃⵠᐃ.height) && (ᐃᐃⵠᐃ.width = ᐃᐃⵠᐃ.ᐃᐃ[0].width, ᐃᐃⵠᐃ.height = ᐃᐃⵠᐃ.ᐃᐃ[0].height);
			return ⵠΔΔΔ.x > Δᐃ.x && ⵠΔΔΔ.x < Δᐃ.x + ᐃᐃⵠᐃ.width / ΔⵠΔΔⲆⲆΔ && ⵠΔΔΔ.y > Δᐃ.y && ⵠΔΔΔ.y < Δᐃ.y + ᐃᐃⵠᐃ.height / ΔⵠΔΔⲆⲆΔ
		};
		var ΔⵠΔΔ = function(ΔⲆ, ⵠΔΔΔ, ᐃᐃⲆⵠ) {
			if (ΔΔⲆΔΔⲆⲆ(ⵠΔΔΔ)) {
				if (ᐃᐃⲆⵠ == ᐃᐃⵠⲆΔ) ᐃᐃⵠᐃ.state = ΔⵠᐃΔ;
				else if (ᐃᐃⲆⵠ == ᐃⵠᐃⲆⵠ) ᐃᐃⵠᐃ.state = ⵠᐃⲆⲆᐃᐃⵠ;
				else Ⲇᐃᐃⵠᐃ == ᐃᐃⲆⵠ && ΔⵠᐃΔ != ᐃᐃⵠᐃ.state && (ᐃᐃⵠᐃ.state = ⵠᐃⲆⲆᐃᐃⵠ);
				return true
			}
			ᐃᐃⵠᐃ.state = ΔⵠᐃⲆⵠΔΔ;
			return ⲆΔⲆᐃΔ
		};
		var ⵠΔΔⲆ = function() {
			var ⵠᐃᐃⵠ = ᐃᐃᐃ;
			if (ᐃᐃⵠᐃ.ΔⵠΔΔΔᐃⵠⵠΔ === 1) {
				if (ᐃᐃⵠᐃ.state === ⵠᐃⲆⲆᐃᐃⵠ || ΔⵠᐃΔ === ᐃᐃⵠᐃ.state) ᐃᐃⵠᐃ.ⵠΔΔⲆ = (ᐃᐃⵠᐃ.ⵠΔΔⲆ + ⲆΔΔⲆ * 1e3) % 1e3;
				else if (ᐃᐃⵠᐃ.ⵠΔΔⲆ > ⵠⵠⵠ) {
					ᐃᐃⵠᐃ.ⵠΔΔⲆ = 500 < ᐃᐃⵠᐃ.ⵠΔΔⲆ ? ᐃᐃⵠᐃ.ⵠΔΔⲆ + 1e3 * ⲆΔΔⲆ : ᐃᐃⵠᐃ.ⵠΔΔⲆ - ⲆΔΔⲆ * 1e3;
					if (ᐃᐃⵠᐃ.ⵠΔΔⲆ < ΔΔᐃ || ᐃᐃⵠᐃ.ⵠΔΔⲆ > 1e3) ᐃᐃⵠᐃ.ⵠΔΔⲆ = 0
				}
				ⵠᐃᐃⵠ = .2 * ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(500 < ᐃᐃⵠᐃ.ⵠΔΔⲆ ? (1e3 - ᐃᐃⵠᐃ.ⵠΔΔⲆ) / 500 : ᐃᐃⵠᐃ.ⵠΔΔⲆ / 500)
			}
			return ⵠᐃᐃⵠ
		};
		var ⵠᐃᐃⲆ;
		if (ΔⵠΔΔⲆⲆΔ === 2) {
			ⵠᐃᐃⲆ = function(ΔΔᐃᐃⲆ) {
				var ⵠᐃᐃⵠ = ᐃᐃΔ + ⵠΔΔⲆ();
				var ᐃᐃ = ⵠᐃⵠⵠⵠΔΔ();
				var ⲆⲆᐃ = ᐃᐃⵠᐃ.width * ⵠᐃᐃⵠ / ⵠΔⵠΔ;
				var ⲆΔⲆ = ⵠᐃᐃⵠ * ᐃᐃⵠᐃ.height / ⲆⵠΔⵠ;
				var ᐃᐃⲆΔⲆⵠⲆ = (ⲆⲆᐃ - ᐃᐃⵠᐃ.width / 2) / 2;
				var ⲆΔⲆⲆᐃ = (ⲆΔⲆ - ᐃᐃⵠᐃ.height / ⲆⲆΔⲆ) / 2;
				ᐃᐃⵠⲆ(ΔΔᐃᐃⲆ, ᐃᐃ, ᐃᐃⵠᐃ.translate.x - ᐃᐃⲆΔⲆⵠⲆ, ᐃᐃⵠᐃ.translate.y - ⲆΔⲆⲆᐃ, ⲆⲆᐃ, ⲆΔⲆ)
			}
		} else if (ΔⵠΔΔⲆⲆΔ === 3) {
			ⵠᐃᐃⲆ = function(ΔΔᐃᐃⲆ) {
				var ᐃᐃ = ⵠᐃⵠⵠⵠΔΔ();
				var ⲆⲆᐃ = ᐃᐃⵠᐃ.width;
				var ⲆΔⲆ = ᐃᐃⵠᐃ.height;
				var ᐃᐃⲆΔⲆⵠⲆ = (ⲆⲆᐃ - ᐃᐃⵠᐃ.width) / ΔΔⲆᐃ;
				var ⲆΔⲆⲆᐃ = (ⲆΔⲆ - ᐃᐃⵠᐃ.height) / 2;
				ᐃᐃⵠⲆ(ΔΔᐃᐃⲆ, ᐃᐃ, ᐃᐃⵠᐃ.translate.x - ᐃᐃⲆΔⲆⵠⲆ, ᐃᐃⵠᐃ.translate.y - ⲆΔⲆⲆᐃ, ⲆⲆᐃ, ⲆΔⲆ)
			};
			ΔⵠΔΔⲆⲆΔ = 1
		} else {
			ⵠᐃᐃⲆ = function(ΔΔᐃᐃⲆ) {
				var ᐃᐃ = ⵠᐃⵠⵠⵠΔΔ();
				ᐃᐃⵠⲆ(ΔΔᐃᐃⲆ, ᐃᐃ, ᐃᐃⵠᐃ.translate.x, ᐃᐃⵠᐃ.translate.y)
			}
		}
		return {
			info: ᐃᐃⵠᐃ,
			"ΔⵠΔΔ": ΔⵠΔΔ,
			"ⵠᐃᐃⲆ": ⵠᐃᐃⲆ,
			"ΔΔⲆΔΔⲆⲆ": ΔΔⲆΔΔⲆⲆ
		}
	}

	function ⵠᐃⵠΔⵠⲆⲆⵠⲆ(ᐃᐃ, ΔᐃⲆ) {
		if (undefined === ΔᐃⲆ) ΔᐃⲆ = .033;
		var Δᐃ = {
			x: 0,
			y: ⵠⲆΔ
		};
		var ᐃΔ = ΔⲆⲆ;
		var ⵠᐃᐃⵠᐃ = 0;
		var ⵠᐃⵠⵠⵠΔΔ = function() {
			ⵠᐃᐃⵠᐃ += ⲆΔΔⲆ;
			if (ΔᐃⲆ < ⵠᐃᐃⵠᐃ) {
				ᐃΔ = (ᐃΔ + 1) % ᐃᐃ.length;
				ⵠᐃᐃⵠᐃ -= ΔᐃⲆ
			}
			return ᐃᐃ[ᐃΔ]
		};
		var ⵠᐃᐃⲆ = function(ΔΔᐃᐃⲆ) {
			ᐃᐃⵠⲆ(ΔΔᐃᐃⲆ, ⵠᐃⵠⵠⵠΔΔ(), Δᐃ.x, Δᐃ.y)
		};
		return {
			"ᐃᐃ": ᐃᐃ,
			translate: Δᐃ,
			"ⵠᐃᐃⲆ": ⵠᐃᐃⲆ
		}
	}

	function ⵠᐃⲆΔᐃⵠᐃ(ΔⲆ, ⲆΔⲆⲆ) {
		var ᐃᐃⲆⲆΔᐃΔ = ΔⲆ.getBoundingClientRect();
		return {
			x: ⲆΔⲆⲆ.clientX - ᐃᐃⲆⲆΔᐃΔ.left,
			y: ⲆΔⲆⲆ.clientY - ᐃᐃⲆⲆΔᐃΔ.top
		}
	}

	function ΔⵠᐃⵠⲆ(text, ᐃⲆᐃΔᐃ, Δⵠ, ⵠⵠⲆ, ⵠΔΔ, ⲆⲆⵠⲆᐃⵠⲆ, ΔΔΔΔⲆⵠⵠ, ⵠⵠⲆⵠΔⲆᐃ, ⲆᐃΔⵠⵠ, ᐃᐃⲆⵠΔⵠⲆΔΔ, ᐃⵠΔⵠᐃ, ᐃⲆⵠⵠΔ, ᐃᐃᐃⲆᐃⲆΔ, ΔⲆⵠⵠΔᐃΔ, ⲆⵠⵠᐃΔⲆᐃ) {
		text.length === 0 && (text = " ");
		if (ΔΔⵠΔΔ === ΔΔΔΔⲆⵠⵠ) ΔΔΔΔⲆⵠⵠ = 0;
		if (ⵠᐃᐃᐃᐃ === ⵠⵠⲆⵠΔⲆᐃ) ⵠⵠⲆⵠΔⲆᐃ = 0;
		if (undefined === ⲆᐃΔⵠⵠ) ⲆᐃΔⵠⵠ = 0;
		ᐃΔᐃΔΔᐃΔ === ΔⲆⵠⵠΔᐃΔ && (ΔⲆⵠⵠΔᐃΔ = 0);
		var ΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
		var Ⲇ = ΔⲆ.getContext(ⵠ[444]);
		Ⲇ.textBaseline = ⵠ[90], Ⲇ.font = (ⵠⵠⲆᐃᐃ !== ⲆⵠⵠᐃΔⲆᐃ ? ⲆⵠⵠᐃΔⲆᐃ + " " : "") + ⵠⵠⲆ + "px " + ᐃⲆᐃΔᐃ;
		undefined !== ⵠΔΔ ? ⵠΔΔ = Math.min(Ⲇ.measureText(text).width, ⵠΔΔ) : ⵠΔΔ = Ⲇ.measureText(text).width;
		ΔⲆ.width = ⵠΔΔ + ΔΔΔΔⲆⵠⵠ;
		ΔⲆ.height = ⵠⵠⲆ + ⵠⵠⲆⵠΔⲆᐃ;
		if (undefined !== ⲆⲆⵠⲆᐃⵠⲆ) {
			if (ᐃⵠΔⵠᐃ !== Ⲇⵠⵠᐃᐃ) Ⲇ.globalAlpha = ᐃⵠΔⵠᐃ;
			Ⲇ.fillStyle = ⲆⲆⵠⲆᐃⵠⲆ;
			ⵠᐃᐃᐃᐃ !== ᐃⲆⵠⵠΔ ? (ⵠⲆⲆⲆⵠΔΔⲆⲆ(Ⲇ, ⲆᐃΔⵠⵠ + ⲆⲆⲆⲆ, ⲆᐃΔⵠⵠ, ⵠΔΔ + ΔΔΔΔⲆⵠⵠ - ⲆᐃΔⵠⵠ * ΔⲆᐃΔ - ⵠΔⲆΔΔ, ⵠⵠⲆ + ⵠⵠⲆⵠΔⲆᐃ - 2 * ⲆᐃΔⵠⵠ, ᐃⲆⵠⵠΔ), Ⲇ.fill()) : Ⲇ.fillRect(ⲆᐃΔⵠⵠ, ⲆᐃΔⵠⵠ, ⵠΔΔ + ΔΔΔΔⲆⵠⵠ - ⲆᐃΔⵠⵠ * 2, ⵠⵠⲆ + ⵠⵠⲆⵠΔⲆᐃ - ⲆᐃΔⵠⵠ * ΔΔΔⵠ);
			Ⲇ.globalAlpha = 1;
			if (ⲆᐃΔⵠⵠ !== ⵠΔᐃⵠ) {
				Ⲇ.lineWidth = ⲆᐃΔⵠⵠ;
				Ⲇ.strokeStyle = ᐃᐃⲆⵠΔⵠⲆΔΔ;
				Ⲇ.stroke()
			}
		}
		Ⲇ.textBaseline = ⵠ[90];
		Ⲇ.font = (ⲆⲆⲆΔⲆ !== ⲆⵠⵠᐃΔⲆᐃ ? ⲆⵠⵠᐃΔⲆᐃ + " " : "") + ⵠⵠⲆ + "px " + ᐃⲆᐃΔᐃ;
		ᐃᐃᐃⲆᐃⲆΔ !== undefined && (Ⲇ.strokeStyle = ᐃᐃᐃⲆᐃⲆΔ, Ⲇ.lineWidth = ΔⲆⵠⵠΔᐃΔ, Ⲇ.lineJoin = "miter", Ⲇ.miterLimit = ᐃⲆᐃⵠ, Ⲇ.strokeText(text, Math.floor(ΔΔΔΔⲆⵠⵠ / ᐃⲆᐃⵠ), Math.floor(ⵠⵠⲆⵠΔⲆᐃ / ᐃⲆᐃᐃ) + Math.floor(ⵠⵠⲆ / ᐃᐃΔⵠ), ⵠΔΔ));
		Ⲇ.fillStyle = Δⵠ;
		Ⲇ.fillText(text, Math.floor(ΔΔΔΔⲆⵠⵠ / 2), Math.floor(ⵠⵠⲆⵠΔⲆᐃ / ΔΔⲆᐃ) + Math.floor(ⵠⵠⲆ / 2), ⵠΔΔ);
		ΔⲆ.w2 = ΔⲆ.width / ΔᐃⵠΔ;
		ΔⲆ.ⲆⲆⲆΔΔ = ΔⲆ.height / 2;
		return ΔⲆ
	}

	function ΔΔΔⲆΔⲆⵠΔⲆ(Ⲇ) {
		Ⲇ[ⲆᐃⲆⵠΔΔⲆ[246]] = false;
		Ⲇ.ᐃΔⲆΔΔⲆⵠᐃᐃ = ⵠΔⵠⵠⵠ;
		Ⲇ.ⵠⲆⲆⵠΔⵠⲆⵠⲆ = ᐃⲆⲆᐃᐃ;
		Ⲇ.ᐃⲆᐃⵠᐃⲆⲆⲆΔ = ᐃΔⵠᐃⲆ;
		Ⲇ.ΔΔⲆΔⵠΔᐃᐃⲆ = ΔⵠⵠᐃΔ
	}

	function ⲆᐃᐃΔⵠⵠᐃᐃᐃ(ᐃᐃ) {
		ᐃᐃ.scale += ᐃᐃ.ⵠΔΔⲆ ? ⲆΔΔⲆ / ᐃᐃ.ⲆⵠⲆⲆⵠΔΔ : -ⲆΔΔⲆ / ᐃᐃ.Ⲇᐃᐃᐃᐃᐃⵠ;
		if (ᐃᐃ.end < ᐃᐃ.scale) ᐃᐃ.ⵠΔΔⲆ = ⲆΔⲆᐃΔ;
		else if (ᐃᐃ.scale < ᐃᐃ.start) ᐃᐃ.ⵠΔΔⲆ = ΔᐃⲆⵠΔ
	}
	var ⲆⲆⲆᐃ = ⵠ[554];
	var ⲆᐃⲆᐃΔᐃΔ = ΔⵠΔⵠ.ΔⲆΔΔⲆⲆⵠ(ⵠ[513]) === "1" ? 1 : ⵠᐃⲆ;
	var ᐃⵠⵠⵠΔⲆⲆᐃⵠ = ΔⵠΔⵠ.ΔⲆΔΔⲆⲆⵠ("password");
	var ᐃΔᐃΔⵠ = ΔⵠΔⵠ.ΔⲆΔΔⲆⲆⵠ("debug") || ΔΔⵠⵠⲆ;
	if (ᐃΔᐃΔⵠ !== ⵠΔⵠⵠⲆ) ᐃΔᐃΔⵠ = JSON.parse(ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[68]](ᐃΔᐃΔⵠ));
	var ⲆᐃΔⲆᐃᐃⵠ = ΔⵠΔⵠ.ΔⲆΔΔⲆⲆⵠ("server") || undefined;
	var ⵠⵠⵠΔΔⵠⲆ = ΔⵠΔⵠ.ΔⲆΔΔⲆⲆⵠ("region") || undefined;
	var ᐃΔᐃⲆΔⲆⲆ = "starve.io";
	var ⲆⲆᐃⵠᐃⲆΔ = "https://" + ᐃΔᐃⲆΔⲆⲆ;
	var ⲆΔᐃᐃ = {
		"ⵠᐃᐃᐃᐃⲆΔ": 128,
		"ⲆⲆᐃⵠᐃΔᐃ": 16,
		"ᐃⲆⵠΔⲆᐃᐃ": 256,
		"ᐃᐃⵠΔⵠΔⲆ": 32,
		"ⵠᐃᐃᐃΔΔΔ": 8,
		IDLE: 64,
		"ᐃⲆⵠΔⲆΔΔⲆⵠ": ⵠⲆⲆ,
		"ⲆΔᐃΔ": 2,
		"ⵠⲆᐃΔⵠ": ΔⵠⵠⲆ
	};
	var ⵠⲆⲆΔΔΔⵠ = [{
		"ⵠⵠᐃⵠⵠ": 1e3,
		items: [
			[ⲆⲆΔⲆ, ⵠⵠ.ⲆⲆΔⵠⲆ],
			[Δᐃⵠⵠ, ⵠⵠ.ᐃⲆΔⲆⵠ],
			[8, ⵠⵠ.ⲆΔᐃⵠⲆ],
			[1, ⵠⵠ.ⲆⲆᐃΔⵠ]
		]
	}, {
		"ⵠⵠᐃⵠⵠ": 2e3,
		items: [
			[2, ⵠⵠ.ᐃⲆⵠΔΔ],
			[ΔⲆᐃᐃ, ⵠⵠ.ΔΔⵠᐃⲆ],
			[ΔΔΔⵠ, ⵠⵠ.ᐃⲆΔⲆⵠ],
			[ᐃΔⲆⵠΔ, ⵠⵠ.ⲆΔᐃⵠⲆ],
			[ⲆⲆΔⲆ, ⵠⵠ.ⲆⲆᐃΔⵠ]
		]
	}, {
		"ⵠⵠᐃⵠⵠ": 4e3,
		items: [
			[ᐃⲆΔΔ, ⵠⵠ.ᐃⲆⵠΔΔ],
			[1, ⵠⵠ.ΔΔΔΔΔ],
			[ᐃⲆᐃⲆ, ⵠⵠ.ᐃⲆΔⲆⵠ],
			[20, ⵠⵠ.ⲆΔᐃⵠⲆ],
			[ᐃΔⵠⵠ, ⵠⵠ.ⲆⲆᐃΔⵠ],
			[1, ⵠⵠ.ᐃⵠⵠⲆᐃ],
			[80, ⵠⵠ.ⵠⵠΔΔ],
			[140, ⵠⵠ.ⲆⵠᐃΔ]
		]
	}, {
		"ⵠⵠᐃⵠⵠ": 8e3,
		items: [
			[1, ⵠⵠ.ⵠᐃⵠⲆ],
			[ᐃⲆⲆΔΔ, ⵠⵠ.ᐃⲆⵠΔΔ],
			[ΔⲆᐃⲆ, ⵠⵠ.ⲆⲆⵠΔΔ],
			[6, ⵠⵠ.ᐃⲆΔⲆⵠ],
			[30, ⵠⵠ.ⲆΔᐃⵠⲆ],
			[6, ⵠⵠ.ⲆⲆᐃΔⵠ],
			[ΔΔΔᐃ, ⵠⵠ.ᐃⵠⵠⲆᐃ],
			[150, ⵠⵠ.ⵠⵠΔΔ],
			[200, ⵠⵠ.ⲆⵠᐃΔ],
			[60, ⵠⵠ.ᐃΔᐃⲆ],
			[2, ⵠⵠ.ⲆⵠⲆⲆΔ]
		]
	}, {
		"ⵠⵠᐃⵠⵠ": 16e3,
		items: [
			[ⲆᐃΔ, ⵠⵠ.ⵠᐃⵠⲆ],
			[ΔΔΔᐃ, ⵠⵠ.ⲆⵠⵠΔΔ],
			[1, ⵠⵠ.ⲆⵠᐃⲆⲆ],
			[7, ⵠⵠ.ⵠⲆᐃⵠⵠ],
			[ΔⵠⲆᐃ, ⵠⵠ.ⲆⵠⲆⲆΔ],
			[2, ⵠⵠ.ᐃⲆⵠΔΔ],
			[ⵠᐃⵠΔ, ⵠⵠ.ᐃⲆⲆⲆΔ],
			[ᐃⵠⵠᐃᐃ, ⵠⵠ.ΔᐃΔⵠⵠ],
			[2, ⵠⵠ.ⵠⲆⲆᐃⵠ],
			[1, ⵠⵠ.ᐃᐃⲆΔⲆ],
			[1, ⵠⵠ.ΔΔᐃⲆᐃ],
			[200, ⵠⵠ.ⵠⵠΔΔ],
			[300, ⵠⵠ.ⲆⵠᐃΔ]
		]
	}, {
		"ⵠⵠᐃⵠⵠ": 16e3,
		items: [
			[1, ⵠⵠ.ⵠᐃⵠⲆ],
			[1, ⵠⵠ.ⵠⲆⲆΔⵠ],
			[1, ⵠⵠ.ⲆᐃⲆⲆᐃ],
			[1, ⵠⵠ.ⲆⲆⵠΔΔ],
			[10, ⵠⵠ.ⵠⲆᐃⵠⵠ],
			[4, ⵠⵠ.ⲆⵠⲆⲆΔ],
			[ΔᐃΔᐃᐃ, ⵠⵠ.ᐃⲆⵠΔΔ],
			[3, ⵠⵠ.ⵠΔⲆⲆⲆ],
			[Δⵠᐃ, ⵠⵠ.ᐃᐃΔⲆᐃ],
			[200, ⵠⵠ.ⵠⵠΔΔ],
			[300, ⵠⵠ.ⲆⵠᐃΔ]
		]
	}, {
		"ⵠⵠᐃⵠⵠ": 16e3,
		items: [
			[1, ⵠⵠ.ⵠᐃⵠⲆ],
			[ᐃⲆΔ, ⵠⵠ.ⵠΔⲆᐃⲆ],
			[1, ⵠⵠ.Ⲇᐃᐃᐃᐃ],
			[ⲆΔⵠⵠⵠ, ⵠⵠ.ⵠΔⲆⲆⲆ],
			[1, ⲆⲆⵠⲆ],
			[1, ⵠⵠ.ⲆⲆⵠΔΔ],
			[7, ⵠⵠ.ⵠⲆᐃⵠⵠ],
			[ⲆᐃΔⲆ, ⵠⵠ.ⲆⵠⲆⲆΔ],
			[4, ⵠⵠ.ᐃⲆⵠΔΔ],
			[150, ⵠⵠ.ⵠⵠΔΔ],
			[200, ⵠⵠ.ⲆⵠᐃΔ],
			[1, ⵠⵠ.ᐃⵠΔⲆᐃ]
		]
	}, {
		"ⵠⵠᐃⵠⵠ": 16e3,
		items: [
			[1, ⵠⵠ.ⵠᐃⵠⲆ],
			[ᐃᐃΔ, ⵠⵠ.ΔΔᐃΔΔ],
			[1, ⵠⵠ.ⲆⲆⵠΔΔ],
			[ⲆᐃΔⲆⲆΔᐃ, ⵠⵠ.ⵠⲆᐃⵠⵠ],
			[2, ⵠⵠ.ⲆⵠⲆⲆΔ],
			[4, ⵠⵠ.ᐃⲆⵠΔΔ],
			[2, ⵠⵠ.ᐃⵠΔᐃⲆ],
			[ΔⵠⵠⲆ, ⵠⵠ.ΔᐃΔⵠᐃ],
			[ᐃⵠᐃΔⲆ, ⵠⵠ.ΔⵠᐃΔΔ],
			[ᐃᐃⲆⵠⲆ, ⵠⵠ.ΔᐃⲆⵠᐃ],
			[4, ⵠⵠ.ⵠᐃΔΔᐃ],
			[ΔⲆᐃᐃ, ⵠⵠ.ΔⲆⵠⵠΔ],
			[500, ⵠⵠ.ⲆⵠᐃΔ]
		]
	}, {
		"ⵠⵠᐃⵠⵠ": 16e3,
		items: [
			[1, ⵠⵠ.ⵠᐃⵠⲆ],
			[1, ⵠⵠ.ⲆⲆⵠΔΔ],
			[16, ⵠⵠ.ΔⵠΔᐃᐃ],
			[ΔⵠⲆⲆ, ⵠⵠ.ⲆⵠⲆⲆΔ],
			[ⵠⵠⲆⵠᐃ, ⵠⵠ.ᐃⲆⵠΔΔ],
			[ΔⲆⵠᐃ, ⵠⵠ.ⵠΔⲆⲆⲆ],
			[1, ⵠⵠ.ᐃⵠⲆⵠΔ],
			[1, ⵠⵠ.ⵠΔᐃᐃⵠ],
			[16, ⵠⵠ.ΔⵠᐃⲆⲆ],
			[150, ⵠⵠ.ⵠⵠΔΔ],
			[200, ⵠⵠ.ⲆⵠᐃΔ]
		]
	}, {
		"ⵠⵠᐃⵠⵠ": 2e4,
		items: [
			[ⵠΔᐃ, ⵠⵠ.ⵠᐃⵠⲆ],
			[1, ⵠⵠ.ⲆⲆⵠΔΔ],
			[1, ⵠⵠ.ⵠⲆᐃⵠⵠ],
			[ΔΔΔᐃ, ⵠⵠ.ⲆⵠⲆⲆΔ],
			[3, ⵠⵠ.ᐃⲆⵠΔΔ],
			[3, ⵠⵠ.ⵠΔⲆⲆⲆ],
			[ΔΔⵠΔ, ⵠⵠ.ΔᐃⵠⵠⲆ],
			[1, ⵠⵠ.ΔᐃⲆⵠⲆ],
			[1, ⵠⵠ.ΔⵠⵠⵠΔ],
			[ΔΔΔⵠ, ⵠⵠ.ⵠⵠⵠᐃΔ],
			[50, ⵠⵠ.ⵠⵠΔΔ],
			[100, ⵠⵠ.ⲆⵠᐃΔ]
		]
	}];
	let ΔᐃⵠΔᐃᐃⵠ = 0;
	const ΔⲆⵠⵠΔⵠΔ = [];

	function ⲆⲆΔΔᐃⲆΔⲆⵠ(ⵠᐃⲆΔⵠ, ΔⲆⵠⲆⵠᐃᐃⲆᐃ, ΔᐃⲆᐃΔΔⵠ) {
		const ⵠΔⵠⲆⲆᐃᐃ = new Uint8Array(ⵠᐃⲆΔⵠ);
		const ᐃⵠΔΔᐃ = ⵠΔⵠⲆⲆᐃᐃ.length;
		let ⲆⲆΔΔΔⲆᐃ = ΔⲆⵠⵠΔⵠΔ[ᐃⵠΔΔᐃ];
		let ᐃⵠΔⲆⲆ = ⵠΔⲆⵠΔ;
		let ⵠΔΔΔⵠⵠⲆ = undefined;
		if (ᐃΔᐃΔΔᐃΔ === ⲆⲆΔΔΔⲆᐃ) {
			ΔᐃⵠΔᐃᐃⵠ += ᐃⵠΔΔᐃ * 2;
			if (65535 > ΔᐃⵠΔᐃᐃⵠ) {
				ᐃⵠΔⲆⲆ = ⲆⵠⲆⲆⵠᐃⵠ(ΔΔⲆⲆΔΔᐃ(ᐃⵠΔΔᐃ))
			} else {
				ΔᐃⵠΔᐃᐃⵠ = ᐃⵠΔΔᐃ;
				for (let Ⲇᐃ = Δⵠⵠⵠ; ΔⲆⵠⵠΔⵠΔ.length > Ⲇᐃ; Ⲇᐃ++) {
					if (ΔⲆⵠⵠΔⵠΔ[Ⲇᐃ] !== undefined) {
						const ᐃⵠΔⲆⲆ = ΔⲆⵠⵠΔⵠΔ[Ⲇᐃ][ᐃᐃⲆ];
						ΔⲆⵠⵠΔⵠΔ[Ⲇᐃ] = ᐃⲆⵠⲆᐃ;
						ⲆΔᐃⲆᐃⵠΔ(ᐃⵠΔⲆⲆ)
					}
				}
				ᐃⵠΔⲆⲆ = ⲆⵠⲆⲆⵠᐃⵠ(ΔΔⲆⲆΔΔᐃ(ᐃⵠΔΔᐃ));
				ⵠⵠⵠⵠᐃⵠⲆ()
			}
			ⵠΔΔΔⵠⵠⲆ = ΔΔΔᐃⵠⵠⲆ(ᐃⵠΔⲆⲆ);
			ΔⲆⵠⵠΔⵠΔ[ᐃⵠΔΔᐃ] = [ᐃⵠΔⲆⲆ, ⵠΔΔΔⵠⵠⲆ]
		} else {
			ᐃⵠΔⲆⲆ = ⲆⲆΔΔΔⲆᐃ[0];
			ⵠΔΔΔⵠⵠⲆ = ⲆⲆΔΔΔⲆᐃ[ΔΔΔᐃ]
		}
		for (let Ⲇᐃ = ⵠᐃⲆ; ⵠΔⵠⲆⲆᐃᐃ.length > Ⲇᐃ; Ⲇᐃ++) ⵠΔΔΔⵠⵠⲆ[Ⲇᐃ] = ⵠΔⵠⲆⲆᐃᐃ[Ⲇᐃ];
		ⲆᐃⲆⵠᐃⲆᐃ(ᐃⵠΔⲆⲆ, ΔⲆⵠⲆⵠᐃᐃⲆᐃ, ΔᐃⲆᐃΔΔⵠ);
		for (let Ⲇᐃ = ᐃᐃᐃ; Ⲇᐃ < ⵠΔⵠⲆⲆᐃᐃ.length; Ⲇᐃ++) ⵠΔⵠⲆⲆᐃᐃ[Ⲇᐃ] = ⵠΔΔΔⵠⵠⲆ[Ⲇᐃ];
		return ⵠΔⵠⲆⲆᐃᐃ
	}
	var ⵠⲆⲆⵠⲆ = {
		"ⵠⲆᐃⵠᐃⵠⲆᐃΔ": 125e3,
		"ⵠⵠⲆⵠⵠΔΔᐃⲆ": ⲆᐃⵠⲆΔ,
		"ΔⵠᐃΔᐃⲆⲆⲆⵠ": "[" + 21 + "]",
		"ⵠΔΔΔⵠΔΔΔᐃ": 8e3,
		"ⵠⲆⲆᐃᐃⵠⵠΔᐃ": ⲆⵠΔⵠΔⵠΔ,
		"ᐃᐃⵠⲆᐃΔⲆᐃⲆ": 200,
		"ⲆⲆᐃⵠᐃΔᐃ": .2,
		"ⲆⲆΔᐃΔⵠᐃⵠⵠ": ⲆᐃⲆΔ,
		"ⵠᐃⲆᐃⵠⵠⲆ": ᐃᐃΔΔᐃ,
		"ⲆᐃⲆΔΔΔⵠ": 6e5,
		"ⲆⲆΔᐃⵠΔᐃⲆⵠ": ΔΔᐃᐃⵠ,
		"ᐃⲆᐃⵠⵠΔᐃ": ᐃⲆᐃⵠ,
		"ᐃⵠΔᐃᐃⵠΔΔᐃ": .58,
		"ⵠᐃⵠⵠᐃⵠⵠⲆⵠ": 50,
		"ᐃⵠΔⵠⵠΔΔⵠⵠ": 2e3,
		"ⵠⵠⲆⵠΔⲆΔ": .2,
		"ⲆΔᐃⲆΔⲆⵠⲆΔ": 6e4,
		"ΔⲆΔᐃΔⲆΔ": 52,
		"ⲆⵠΔⵠⲆᐃᐃΔⵠ": 3,
		"Ⲇᐃⵠᐃⵠᐃᐃ": ⵠⵠⲆⵠ,
		"ΔⵠΔⵠΔⲆⵠⲆⵠ": ᐃⲆᐃⵠⲆ,
		"ΔⲆΔⲆⲆᐃΔ": Δᐃⵠⵠ,
		"ⲆᐃΔΔΔΔᐃ": ᐃᐃⵠΔ,
		"ᐃΔΔᐃⲆⲆΔΔΔ": 5,
		"ⲆᐃⵠⵠΔⵠⵠ": 3
	};

	function ⲆΔⲆⲆᐃΔⵠⲆⵠ(ΔᐃᐃΔᐃΔⲆ, ᐃⲆⵠⵠⵠᐃⲆ, ᐃⵠⵠⲆⵠⵠⲆ, ΔⲆⲆᐃⲆⵠⵠ) {
		const ⲆᐃᐃⲆΔᐃᐃ = (12345 + (ΔᐃᐃΔᐃΔⲆ + 33066) * 1103515245) % 2147483648;
		const ⲆⲆⵠΔⲆⵠⵠΔᐃ = (31734 + ᐃⲆⵠⵠⵠᐃⲆ) % 65350;
		const ⵠΔᐃⲆΔΔᐃⲆⵠ = (24 << (ᐃⵠⵠⲆⵠⵠⲆ >> ΔΔᐃⲆⲆ & 255)) + (16 << (ᐃⵠⵠⲆⵠⵠⲆ >> 16 & 255)) + (0 << (ᐃⵠⵠⲆⵠⵠⲆ >> 0 & 255)) + (8 << (ᐃⵠⵠⲆⵠⵠⲆ >> 24 & 255));
		const ⲆⵠⲆⵠΔⵠᐃⲆⲆ = ~(ΔⲆⲆᐃⲆⵠⵠ & 46237) & 46237 | ~(46237 & ΔⲆⲆᐃⲆⵠⵠ) & ΔⲆⲆᐃⲆⵠⵠ;
		const ᐃⲆΔᐃⵠⲆΔ = ᐃⲆⲆⲆⲆⲆΔ(ⲆᐃᐃⲆΔᐃᐃ, ⲆⲆⵠΔⲆⵠⵠΔᐃ);
		const ᐃⵠΔⲆᐃⲆⲆ = ᐃⲆᐃⵠⵠᐃⵠ(ⵠΔᐃⲆΔΔᐃⲆⵠ, ⲆⵠⲆⵠΔⵠᐃⲆⲆ, ⲆᐃᐃⲆΔᐃᐃ);
		const ᐃⵠΔⵠᐃΔⵠᐃⲆ = (16 << ((ᐃⲆΔᐃⵠⲆΔ ^ ᐃⵠΔⲆᐃⲆⲆ) >> 0 & 255)) + (Δⵠᐃᐃⵠ << ((ᐃⲆΔᐃⵠⲆΔ ^ ᐃⵠΔⲆᐃⲆⲆ) >> 16 & 255)) + (24 << ((ᐃⲆΔᐃⵠⲆΔ ^ ᐃⵠΔⲆᐃⲆⲆ) >> 8 & 255)) + (0 << ((ᐃⲆΔᐃⵠⲆΔ ^ ᐃⵠΔⲆᐃⲆⲆ) >> 24 & 255));
		return ᐃⵠΔⵠᐃΔⵠᐃⲆ
	}

	function ΔⲆᐃΔⲆΔᐃΔⲆ() {
		var ΔⵠⲆ = this;
		this.ⵠⵠⲆᐃ = null;
		this.ΔⵠΔⲆΔ = 0;
		this.Ⲇᐃᐃⵠⵠ = [];
		this.ⲆⲆⲆᐃⲆΔⵠ = {};
		this.ΔⲆⵠⵠΔⵠⵠ = {};
		this.ΔᐃΔⲆΔ = [
			[],
			[],
			[],
			[],
			[],
			[],
			[],
			[],
			[]
		];
		this.ΔΔⲆⲆⵠΔⵠ = [-1, -1, -ΔΔⵠΔ, -1, -1, -1, -ⵠⲆΔⲆ, -1, -1];
		this.ᐃⲆⵠΔⵠ = ⵠⵠⲆⵠ;
		this.ΔⲆⲆⲆᐃΔⲆ = ⲆⲆⵠⲆ;
		this.ⲆⵠⲆΔⲆΔᐃ = function(ⵠⵠⵠᐃⵠΔⲆ) {
			if (ᐃΔᐃΔⵠ !== undefined) {
				ΔⵠⲆ.Ⲇᐃᐃⵠⵠ.push({
					a: ᐃΔᐃΔⵠ[ⵠ[184]],
					gm: ᐃΔᐃΔⵠ["mode"],
					idx: 0,
					m: ⵠⵠⲆᐃⲆ,
					nu: ΔⲆⲆ,
					id: 0
				});
				ⵠⵠⵠᐃⵠΔⲆ();
				return
			}
			fetch(ⲆⲆᐃⵠᐃⲆΔ + "/list", {
				method: ⵠ[253]
			}).then((function(ᐃⲆⵠⲆᐃΔᐃ) {
				if (!ᐃⲆⵠⲆᐃΔᐃ.ok) {
					ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]]((function() {
						ΔⵠⲆ.ⲆⵠⲆΔⲆΔᐃ(ⵠⵠⵠᐃⵠΔⲆ)
					}), 3e3);
					return
				}
				ᐃⲆⵠⲆᐃΔᐃ.json().then((function(ᐃᐃⲆᐃΔⵠΔ) {
					ΔⵠⲆ.Ⲇᐃᐃⵠⵠ = [];
					ΔⵠⲆ.ΔⲆⵠⵠΔⵠⵠ = {};
					for (let ⲆⵠᐃⵠΔ in ΔᐃᐃΔ.ⵠᐃᐃΔⲆΔᐃ) {
						const ᐃΔⲆΔΔⲆᐃΔᐃ = ΔᐃᐃΔ.ⵠᐃᐃΔⲆΔᐃ[ⲆⵠᐃⵠΔ];
						ΔⵠⲆ.Ⲇᐃᐃⵠⵠ.push({
							a: "Auto Select",
							gm: ᐃΔⲆΔΔⲆᐃΔᐃ,
							m: 100,
							nu: 0,
							auto: true
						})
					}
					var ⲆΔⲆᐃΔᐃⵠ = ⵠᐃⲆⲆ;
					var ⵠⵠΔᐃⲆᐃⵠ = 1;
					var ΔⲆᐃΔᐃᐃᐃ = ⲆᐃΔⲆ;
					var ᐃᐃᐃᐃᐃΔⵠⲆΔ = ΔΔᐃΔ;
					var ΔⲆⵠⲆΔⲆⲆⲆΔ = ⲆΔᐃᐃΔ;
					var ⲆⵠΔⲆΔⲆⲆΔᐃ = ⵠⵠᐃᐃ;
					for (let Ⲇᐃ = 0; Ⲇᐃ < ᐃᐃⲆᐃΔⵠΔ.length; Ⲇᐃ++) {
						const ⵠⵠᐃⲆ = ᐃᐃⲆᐃΔⵠΔ[Ⲇᐃ];
						const ⲆⲆⲆᐃⲆ = ⵠⵠᐃⲆ["n"];
						const ΔⲆΔΔᐃ = ⵠⵠᐃⲆ["l"];
						const ⲆⲆⲆᐃΔΔΔ = ⵠⵠᐃⲆ["p"];
						const ⲆⲆⲆᐃⲆΔⵠ = [];
						ΔⵠⲆ.ⲆⲆⲆᐃⲆΔⵠ[ⲆⲆⲆᐃⲆ] = ⲆⲆⲆᐃⲆΔⵠ;
						const ΔᐃΔⵠⲆⲆⵠ = [];
						for (let ⲆⲆᐃⲆ = ΔΔᐃ; ⲆⲆᐃⲆ < ⲆⲆⲆᐃΔΔΔ.length; ⲆⲆᐃⲆ++) {
							const ᐃΔΔⵠⲆⵠⵠ = ⲆⲆⲆᐃΔΔΔ[ⲆⲆᐃⲆ];
							const ⵠᐃᐃᐃⵠⲆⵠ = ⲆⲆⲆᐃⲆ + ᐃΔΔⵠⲆⵠⵠ[ⲆΔⲆᐃΔᐃⵠ];
							ΔᐃΔⵠⲆⲆⵠ.push(ⵠᐃᐃᐃⵠⲆⵠ);
							ⲆⲆⲆᐃⲆΔⵠ.push(ⵠᐃᐃᐃⵠⲆⵠ)
						}
						for (let ⲆⲆᐃⲆ = ΔΔᐃᐃ; ΔⲆΔΔᐃ.length > ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) {
							const ⲆⵠᐃⲆΔ = ΔⲆΔΔᐃ[ⲆⲆᐃⲆ];
							let ⲆⲆⵠⵠᐃⲆⲆ = ΔᐃᐃΔ.ⵠᐃᐃΔⲆΔᐃ[ⲆⵠᐃⲆΔ[ΔⲆᐃΔᐃᐃᐃ]];
							let ΔᐃⵠⵠⲆⵠⵠ = ⲆⲆⵠⵠᐃⲆⲆ + ⲆⵠᐃⲆΔ[ⵠⵠΔᐃⲆᐃⵠ];
							let ⲆᐃⲆⵠᐃⲆⲆ;
							if (ⲆⲆⵠⵠᐃⲆⲆ in ΔⵠⲆ.ΔⲆⵠⵠΔⵠⵠ) ⲆᐃⲆⵠᐃⲆⲆ = ++ΔⵠⲆ.ΔⲆⵠⵠΔⵠⵠ[ⲆⲆⵠⵠᐃⲆⲆ];
							else ⲆᐃⲆⵠᐃⲆⲆ = ΔⵠⲆ.ΔⲆⵠⵠΔⵠⵠ[ⲆⲆⵠⵠᐃⲆⲆ] = ΔⵠΔ;
							ΔᐃⵠⵠⲆⵠⵠ in ΔⵠⲆ.ΔⲆⵠⵠΔⵠⵠ ? ⵠⲆΔᐃΔⵠᐃ = ++ΔⵠⲆ.ΔⲆⵠⵠΔⵠⵠ[ΔᐃⵠⵠⲆⵠⵠ] : ⵠⲆΔᐃΔⵠᐃ = ΔⵠⲆ.ΔⲆⵠⵠΔⵠⵠ[ΔᐃⵠⵠⲆⵠⵠ] = ⵠⲆⲆ;
							ΔⵠⲆ.Ⲇᐃᐃⵠⵠ.push({
								name: ⲆⵠᐃⲆΔ[ΔⲆⵠⲆΔⲆⲆⲆΔ],
								a: ΔᐃᐃΔ.ⵠⲆᐃᐃⵠΔⲆⵠⵠ[ⲆⵠᐃⲆΔ[ⵠⵠΔᐃⲆᐃⵠ]] + " " + ⵠⲆΔᐃΔⵠᐃ,
								r: ⲆⵠᐃⲆΔ[ⵠⵠΔᐃⲆᐃⵠ],
								gm: ΔᐃᐃΔ.ⵠᐃᐃΔⲆΔᐃ[ⲆⵠᐃⲆΔ[ΔⲆᐃΔᐃᐃᐃ]],
								idx: ⲆᐃⲆⵠᐃⲆⲆ,
								m: ᐃⵠⵠᐃΔⵠᐃ,
								nu: ⲆⵠᐃⲆΔ[ᐃᐃᐃᐃᐃΔⵠⲆΔ],
								id: ⲆⵠᐃⲆΔ[ⵠⵠΔᐃⲆᐃⵠ] + ⲆⵠᐃⲆΔ[ⲆΔⲆᐃΔᐃⵠ],
								p: ΔᐃΔⵠⲆⲆⵠ
							})
						}
					}
					const ⲆⵠΔⵠⵠⲆᐃ = [];
					const ᐃᐃΔΔᐃⲆⵠ = [];
					const ⵠΔⲆΔⲆΔⲆ = [];
					for (let Ⲇᐃ = 0; Ⲇᐃ < ΔⵠⲆ.Ⲇᐃᐃⵠⵠ.length; Ⲇᐃ++) {
						const ⲆⵠᐃⲆΔ = ΔⵠⲆ.Ⲇᐃᐃⵠⵠ[Ⲇᐃ];
						if (ⲆⵠᐃⲆΔ["auto"]) continue;
						if (ΔᐃᐃΔ.ⵠᐃᐃΔⲆΔᐃ[ΔᐃᐃΔ.ⲆⵠᐃΔᐃ] !== ⲆⵠᐃⲆΔ[ⵠ[280]]) continue;
						typeof ⲆⵠᐃⲆΔ.name === ⵠ[262] && (ⲆⵠᐃⲆΔ.name.indexOf("Private Server") !== -1 || 95 < ⲆⵠᐃⲆΔ[ⵠ[339]]) ? ⵠΔⲆΔⲆΔⲆ.push(ⲆⵠᐃⲆΔ) : ⲆⵠΔⵠⵠⲆᐃ.push(ⲆⵠᐃⲆΔ);
						ᐃᐃΔΔᐃⲆⵠ.push(Ⲇᐃ)
					}
					const ΔⵠⵠᐃⲆΔⵠ = [];
					ΔⵠⵠᐃⲆΔⵠ.push(...ⲆⵠΔⵠⵠⲆᐃ.sort((function(ⵠᐃⲆᐃ, ⲆⲆᐃΔ) {
						return ⲆⲆᐃΔ[ⵠ[339]] - ⵠᐃⲆᐃ[ⵠ[339]]
					})));
					ΔⵠⵠᐃⲆΔⵠ.push(...ⵠΔⲆΔⲆΔⲆ.sort((function(ⵠᐃⲆᐃ, ⲆⲆᐃΔ) {
						const ⲆΔΔⵠⲆⲆⲆⲆⵠ = ⲆⲆᐃΔ[ⵠ[339]] < 95 ? ⲆⲆᐃΔ[ⵠ[339]] : 0;
						const ⲆⲆⲆΔⲆᐃⲆᐃᐃ = ⵠᐃⲆᐃ[ⵠ[339]] < 95 ? ⵠᐃⲆᐃ[ⵠ[339]] : 0;
						return ⲆΔΔⵠⲆⲆⲆⲆⵠ - ⲆⲆⲆΔⲆᐃⲆᐃᐃ
					})));
					for (let Ⲇᐃ = Ⲇᐃⵠ; Ⲇᐃ < ᐃᐃΔΔᐃⲆⵠ.length; Ⲇᐃ++) {
						const ⲆⵠⲆⵠⵠΔᐃ = ᐃᐃΔΔᐃⲆⵠ[Ⲇᐃ];
						const ⲆⵠᐃⲆΔ = ΔⵠⵠᐃⲆΔⵠ[Ⲇᐃ];
						ⲆⵠᐃⲆΔ["idx"] = Ⲇᐃ + ᐃⲆΔ;
						ΔⵠⲆ.Ⲇᐃᐃⵠⵠ[ⲆⵠⲆⵠⵠΔᐃ] = ⲆⵠᐃⲆΔ
					}
					ⵠⵠⵠᐃⵠΔⲆ()
				}))
			}))
		};
		this.ⲆᐃⵠⲆᐃⲆⵠᐃᐃ = function(ⵠⵠᐃⲆ) {
			var ᐃᐃⲆⲆᐃ = [];
			for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠⵠᐃⲆ.length; Ⲇᐃ++) {
				ⵠⵠᐃⲆ[Ⲇᐃ]["a"].indexOf(ⲆΔⵠᐃΔ) !== -1 && ᐃᐃⲆⲆᐃ.push(Ⲇᐃ)
			}
			if (ᐃᐃⲆⲆᐃ.length === ⵠⲆⵠⵠ) return ⵠΔᐃᐃ;
			return ᐃᐃⲆⲆᐃ[Math.floor(Math.random() * ᐃᐃⲆⲆᐃ.length)]
		};

		function ΔⲆⲆⵠⲆⵠⲆ(ⲆⵠᐃⲆΔ) {
			let name = ⲆⵠᐃⲆΔ[ⵠ[184]] || ⲆⵠᐃⲆΔ["a"];
			if (ⲆⵠᐃⲆΔ["auto"]) return name;
			return name + " [" + ⲆⵠᐃⲆΔ[ⵠ[339]] + " " + ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃⵠΔ] + "]"
		}
		this.ΔᐃⵠⲆΔΔΔ = function(ⵠⵠᐃⲆ) {
			var ⵠⵠⵠΔⵠⵠⲆ = 0;
			for (var Ⲇᐃ = ΔΔᐃᐃ; ⵠⵠᐃⲆ.length > Ⲇᐃ; Ⲇᐃ++) ⵠⵠⵠΔⵠⵠⲆ += ⵠⵠᐃⲆ[Ⲇᐃ][ⵠ[339]];
			var ⵠᐃⲆⲆⵠ = document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[24]);
			if (ᐃΔᐃⵠ.ΔΔⲆⲆⵠΔⵠ[ᐃΔᐃⵠ.ᐃⲆⵠΔⵠ] === -1) ᐃΔᐃⵠ.ΔΔⲆⲆⵠΔⵠ[ᐃΔᐃⵠ.ᐃⲆⵠΔⵠ] = ⵠᐃⲆⲆⵠ.selectedIndex = ᐃΔᐃⵠ.ⲆᐃⵠⲆᐃⲆⵠᐃᐃ(ⵠⵠᐃⲆ);
			else ⵠᐃⲆⲆⵠ.selectedIndex = ᐃΔᐃⵠ.ΔΔⲆⲆⵠΔⵠ[ᐃΔᐃⵠ.ᐃⲆⵠΔⵠ];
			var ᐃⵠⵠᐃ = '<label for="ul-id"><button type="button" class="ng-binding">' + ⵠⵠᐃⲆ[ⵠᐃⲆⲆⵠ.selectedIndex]["a"] + (ⵠⵠᐃⲆ[ⵠᐃⲆⲆⵠ.selectedIndex][ⵠ[339]] > ⵠΔᐃᐃ ? " [" + ⵠⵠᐃⲆ[ⵠᐃⲆⲆⵠ.selectedIndex][ⵠ[339]] + " " + ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃⵠΔ] + "]" : "") + "</button></label>" + '<ul role="listbox" id="ul-id" class="md-whiteframe-z1" name="ul-id">' + '<li role="option" id="selectDisabled">' + ⲆΔⵠ[ΔΔΔ.ⲆⲆᐃᐃᐃΔᐃ] + " (" + this.ᐃⵠⵠΔΔⵠⲆ + ") " + ⲆΔⵠ[ΔΔΔ.ᐃΔⲆΔⵠΔᐃ] + "</li>";
			for (var Ⲇᐃ = 0; ⵠⵠᐃⲆ.length > Ⲇᐃ; Ⲇᐃ++) ᐃⵠⵠᐃ += '<li role="option">' + ΔⲆⲆⵠⲆⵠⲆ(ⵠⵠᐃⲆ[Ⲇᐃ]) + "</li>\n";
			ᐃⵠⵠᐃ += '<li role="option" id="selectDisabled">(' + ⵠⵠⵠΔⵠⵠⲆ + ") " + ⲆΔⵠ[ΔΔΔ.ⲆᐃⲆⵠΔᐃΔ] + "</li>";
			ᐃⵠⵠᐃ += ⵠ[470];
			ⵠᐃⲆⲆⵠ[ⲆᐃⲆⵠΔΔⲆ[112]] = ᐃⵠⵠᐃ;
			$(".md-select").on(ⵠ[41], (function() {
				$(this).toggleClass(ⵠ[165])
			}));
			$(".md-select ul li").on(ⵠ[41], (function() {
				var ⲆⵠⲆ = $(this).text();
				var ⲆΔ = -ⵠⲆΔⲆ;
				var ⲆΔΔΔⲆᐃᐃ = ᐃΔᐃⵠ.ΔᐃΔⲆΔ[ᐃΔᐃⵠ.ᐃⲆⵠΔⵠ];
				for (var Ⲇᐃ = ΔΔᐃᐃ; ⲆΔΔΔⲆᐃᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
					const name = ΔⲆⲆⵠⲆⵠⲆ(ⲆΔΔΔⲆᐃᐃ[Ⲇᐃ]);
					if (ⲆⵠⲆ === name) {
						ⲆΔ = Ⲇᐃ;
						break
					}
				}
				if (-ⵠⲆΔⲆ === ⲆΔ) return;
				document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[24]).selectedIndex = ⲆΔ;
				ᐃΔᐃⵠ.ΔΔⲆⲆⵠΔⵠ[ᐃΔᐃⵠ.ᐃⲆⵠΔⵠ] = ⲆΔ;
				$(".md-select ul li").removeClass(ⵠ[165]);
				$(this).addClass(ⵠ[165]);
				$(".md-select label button").text(ⲆⵠⲆ)
			}))
		};
		this.ᐃⵠⵠΔΔⵠⲆ = ⵠⵠⲆⵠ;
		this.ΔᐃⲆⵠᐃᐃⵠΔΔ = function() {
			this.ᐃⵠⵠΔΔⵠⲆ = Ⲇᐃⵠ;
			for (var Ⲇᐃ = ΔΔᐃ; Ⲇᐃ < ᐃΔᐃⵠ.Ⲇᐃᐃⵠⵠ.length; Ⲇᐃ++) {
				if (this.Ⲇᐃᐃⵠⵠ[Ⲇᐃ][ⵠ[280]] == "experimental") this.ΔᐃΔⲆΔ[ΔᐃᐃΔ.Δᐃⵠᐃᐃ].push(this.Ⲇᐃᐃⵠⵠ[Ⲇᐃ]);
				else if ("zombies" == this.Ⲇᐃᐃⵠⵠ[Ⲇᐃ][ⵠ[280]]) this.ΔᐃΔⲆΔ[ΔᐃᐃΔ.ᐃΔⲆⲆᐃ].push(this.Ⲇᐃᐃⵠⵠ[Ⲇᐃ]);
				else if (this.Ⲇᐃᐃⵠⵠ[Ⲇᐃ][ⵠ[280]] == "community") this.ΔᐃΔⲆΔ[ΔᐃᐃΔ.ⲆⵠᐃΔᐃ].push(this.Ⲇᐃᐃⵠⵠ[Ⲇᐃ]);
				else if (this.Ⲇᐃᐃⵠⵠ[Ⲇᐃ][ⵠ[280]] == ⵠ[317]) this.ΔᐃΔⲆΔ[ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ].push(this.Ⲇᐃᐃⵠⵠ[Ⲇᐃ]);
				else if (this.Ⲇᐃᐃⵠⵠ[Ⲇᐃ][ⵠ[280]] == "battle-royale") this.ΔᐃΔⲆΔ[ΔᐃᐃΔ.ⵠᐃΔⵠΔᐃⵠ].push(this.Ⲇᐃᐃⵠⵠ[Ⲇᐃ]);
				else if (this.Ⲇᐃᐃⵠⵠ[Ⲇᐃ][ⵠ[280]] == "vampires") this.ΔᐃΔⲆΔ[ΔᐃᐃΔ.ᐃᐃΔⲆΔ].push(this.Ⲇᐃᐃⵠⵠ[Ⲇᐃ]);
				else this.ΔᐃΔⲆΔ[ΔᐃᐃΔ.ᐃΔⵠᐃᐃ].push(this.Ⲇᐃᐃⵠⵠ[Ⲇᐃ]);
				this.ᐃⵠⵠΔΔⵠⲆ += this.Ⲇᐃᐃⵠⵠ[Ⲇᐃ][ⵠ[339]]
			}
			for (Ⲇᐃ = 0; Ⲇᐃ < this.ΔᐃΔⲆΔ.length; Ⲇᐃ++) this.ΔᐃΔⲆΔ[Ⲇᐃ].length === ⵠⵠⵠΔ && this.ΔᐃΔⲆΔ[Ⲇᐃ].push({
				a: ⲆΔⵠ[ΔΔΔ.ᐃΔⵠⲆᐃⲆᐃ],
				"ΔⲆⲆⵠⲆⲆᐃⵠⵠ": 0,
				"Ⲇᐃ": "127.0.0.1",
				"ΔⲆⵠ": 80
			});
			this.ΔᐃⵠⲆΔΔΔ(this.ΔᐃΔⲆΔ[ⵠᐃⲆⲆ]);
			this.ᐃᐃⵠΔΔ = function(ⲆⵠⲆ) {
				ᐃΔᐃⵠ.ᐃⲆⵠΔⵠ = ⲆⵠⲆ;
				ᐃΔᐃⵠ.ΔᐃⵠⲆΔΔΔ(ᐃΔᐃⵠ.ΔᐃΔⲆΔ[ᐃΔᐃⵠ.ᐃⲆⵠΔⵠ]);
				ᐃΔᐃⵠ.ΔᐃⵠⲆΔΔΔ(ᐃΔᐃⵠ.ΔᐃΔⲆΔ[ᐃΔᐃⵠ.ᐃⲆⵠΔⵠ]);
				document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[24]).selectedIndex = ᐃΔᐃⵠ.ᐃⲆⵠΔⵠ
			}
		};
		this.ΔⵠⲆⲆᐃᐃᐃ = ⵠⵠⵠΔ;
		this.ⵠⲆⵠⵠᐃΔΔ = ⵠᐃⲆⲆ;
		this.ⲆⲆΔⵠᐃ = null;
		this.timeout = function() {
			ΔⵠⲆ.ⵠⲆⵠⵠᐃΔΔ++;
			ΔⵠⲆ.ⵠⵠⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[96]]();
			if (ΔⵠⲆ.ⵠⲆⵠⵠᐃΔΔ > ⵠⲆⲆⵠⲆ.ⲆⵠΔⵠⲆᐃᐃΔⵠ) {
				ᐃⲆΔⵠⵠⲆⲆ = ⵠᐃⵠΔ;
				ᐃΔΔΔ.ΔΔᐃΔᐃⵠⲆⵠⲆ = ⵠⲆⲆⵠⲆ.ⲆⲆⲆᐃⲆⵠΔᐃᐃ;
				ΔⵠⲆ.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ⵠⵠΔⲆΔⲆᐃ]);
				ᐃΔΔΔ.waiting = ΔⲆΔᐃΔ;
				ᐃⲆⵠ.reconnect.enabled && ΔᐃᐃⲆ.ⲆⵠᐃΔⲆ(ᐃΔΔΔ.ⵠΔΔᐃᐃ)
			} else {
				ᐃⲆⵠ.ΔⵠᐃⵠⲆⲆⵠ === ΔⲆΔⵠᐃ || ᐃⲆⵠ.ⲆᐃⲆΔΔΔᐃ === ⵠΔⵠⵠⲆ || ΔⲆΔⵠᐃ === ᐃⲆⵠ.ΔΔⵠᐃΔᐃⲆ || ᐃⲆⵠ.ⵠⲆⵠΔΔⲆΔ === ᐃΔᐃΔΔᐃΔ ? ᐃΔΔΔ.ᐃΔⲆⵠᐃᐃΔ((function() {
					ΔⵠⲆ.Δⵠᐃᐃⵠᐃᐃ()
				}), 1) : ΔⵠⲆ.Δⵠᐃᐃⵠᐃᐃ()
			}
		};
		this.ᐃΔⵠᐃⲆⲆΔ = function(ⲆΔⵠᐃⵠΔᐃᐃᐃ) {
			if (this.ⵠⵠⲆᐃ.ΔⵠΔⲆΔ != this.ΔⵠΔⲆΔ) return;
			this.ΔⵠΔⲆΔ++;
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃΔΔΔ] + ⲆΔⵠᐃⵠΔᐃᐃᐃ);
			ΔᐃᐃⲆ.ⲆⵠᐃΔⲆ(ᐃΔΔΔ.ⵠΔΔᐃᐃ)
		};
		this.ᐃⲆⵠᐃΔⲆᐃⵠΔ = function() {
			this.ⵠᐃⲆΔⲆ("You speak too much")
		};
		this.ⵠᐃᐃΔΔⲆⵠΔᐃ = function() {
			clearTimeout(this.ⲆⲆΔⵠᐃ);
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ᐃⵠᐃᐃΔⲆⵠ]);
			ᐃΔΔΔ.waiting = false
		};
		this.ᐃⲆⵠⵠⲆⲆⲆᐃⲆ = function() {
			ᐃⲆⵠ.ΔⵠⲆᐃⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] = false
		};
		this.ᐃⵠⲆⲆᐃΔⲆᐃⵠ = function() {
			ΔᐃᐃⲆ.ⲆᐃΔᐃⲆΔᐃ = 0
		};
		this.ⵠⵠⵠⲆΔᐃⲆΔⲆ = function() {
			ΔᐃᐃⲆ.ⵠⲆⲆΔᐃΔⲆ = ⲆⲆⵠⲆ
		};
		this.ᐃⵠᐃΔⲆⲆΔⲆⲆ = function(ᐃᐃᐃⵠΔ) {
			ᐃⲆⵠ.ᐃⲆΔΔⲆ.ᐃᐃᐃⵠΔ = ᐃᐃᐃⵠΔ;
			if (-300 < ⲆⵠΔ.ⲆᐃⲆⲆⲆ) {
				if (ᐃᐃᐃⵠΔ === ⵠᐃⲆⲆ) this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ᐃⲆᐃᐃᐃΔⲆ]);
				else this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ΔⵠΔⵠⵠΔⵠ])
			}
		};
		this.ⵠᐃᐃⵠⵠ = function(ⵠᐃᐃⵠⵠ) {
			ᐃⲆⵠ.ⵠᐃᐃⵠⵠ = ⵠᐃᐃⵠⵠ
		};
		this.ⲆⲆⲆⲆⲆΔᐃᐃⲆ = function(ⵠΔᐃᐃⵠΔⲆ) {
			ᐃⲆⵠ.ⵠΔᐃᐃⵠΔⲆ = ⵠΔᐃᐃⵠΔⲆ
		};
		this.ⵠΔᐃᐃⵠΔⲆ = function(ᐃᐃᐃⵠΔ) {
			ᐃⲆⵠ.ΔⵠⲆⲆⵠ.ᐃᐃᐃⵠΔ = ᐃᐃᐃⵠΔ;
			if (ⲆⵠΔ.ΔΔⵠⲆⵠ > -300) {
				if (ᐃᐃᐃⵠΔ === ΔⲆⲆ) this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ΔᐃᐃᐃᐃⲆⲆ]);
				else this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ΔⵠⲆⲆΔΔⲆ])
			}
		};
		this.ⵠⵠⲆΔΔᐃᐃⲆⵠ = function(ᐃΔⵠᐃ) {
			if (0 === ᐃΔⵠᐃ) document[ⲆᐃⲆⵠΔΔⲆ[185]]("exploreForest").src = "img/forest-leaf-ok.png";
			else if (ᐃΔⵠᐃ === ΔⵠⲆⲆ) document[ⲆᐃⲆⵠΔΔⲆ[185]]("exploreWinter").src = "img/winter-flake-ok.png";
			else if (2 === ᐃΔⵠᐃ) document[ⲆᐃⲆⵠΔΔⲆ[185]]("exploreLava").src = "img/lava-volcano-ok.png";
			else ᐃΔⵠⲆ === ᐃΔⵠᐃ && (document[ⲆᐃⲆⵠΔΔⲆ[185]]("exploreDesert").src = "img/desert-cactus-ok.png")
		};
		this.ⵠⲆⵠⲆⵠⲆⲆⵠⲆ = function() {
			ΔᐃᐃⲆ.ΔΔΔⵠᐃᐃᐃ = 0
		};
		this.ⵠⵠⵠⵠΔⲆΔΔΔ = function() {
			ΔᐃᐃⲆ.ⲆΔⲆⲆⲆΔⲆ = Ⲇᐃⵠ
		};
		this.ΔᐃⵠⲆᐃΔᐃᐃⲆ = function() {
			ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ = [];
			ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ = [];
			ᐃⲆⵠ.ᐃΔΔⲆ.id = -1;
			ᐃⲆⵠ.ᐃΔΔⲆ.ᐃⵠΔᐃⵠᐃⵠ.stop();
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ = [];
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔⵠᐃΔ = false;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔⲆᐃⵠᐃⵠⲆΔ = ΔⵠΔΔⲆ;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -1;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.id = -ᐃᐃΔ;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆΔⵠΔⲆ = ⵠΔⵠⵠⵠ;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⵠⵠΔΔᐃ = ΔⵠⵠᐃΔ;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃᐃΔᐃᐃ = false;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆᐃᐃΔᐃΔᐃ = false;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.timeout = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0, ΔΔⵠΔ, ⲆⲆⵠⲆ, Ⲇⵠᐃ, 1)
		};
		this.ⲆΔᐃⲆᐃⵠⵠᐃⲆ = function() {
			clearTimeout(this.ⲆⲆΔⵠᐃ);
			this.ⵠᐃⲆΔⲆ();
			ᐃΔΔΔ.waiting = false
		};
		this.ᐃΔᐃⲆⲆⲆⵠ = function(ΔⲆⵠⲆ) {
			for (var Ⲇᐃ = 0; Ⲇᐃ < ΔⲆⵠⲆ.length; Ⲇᐃ++) {
				ⵠ[262] === typeof ΔⲆⵠⲆ[Ⲇᐃ] && (ΔⲆⵠⲆ[Ⲇᐃ] = ΔⵠΔⵠ.ΔⲆᐃΔⵠⵠΔ(ΔⲆⵠⲆ[Ⲇᐃ]))
			}
			ᐃⲆⵠ.ᐃⵠΔⵠΔ.ⵠⵠΔⵠⲆ(ΔⲆⵠⲆ[Ⲇⵠᐃ], ΔⲆⵠⲆ[ⵠⵠⵠᐃ], ΔⲆⵠⲆ[3], ΔⲆⵠⲆ[ⵠᐃᐃΔ])
		};
		this.message = function(ΔⲆⵠⲆ) {
			this.ⵠᐃⲆΔⲆ(ΔⲆⵠⲆ)
		};
		this.ⲆᐃᐃⲆⲆᐃⲆⲆᐃ = function() {
			clearTimeout(this.ⲆⲆΔⵠᐃ);
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ᐃᐃΔΔⲆⵠᐃ]);
			ᐃΔΔΔ.waiting = ΔⵠΔΔⲆ
		};
		this.ⲆⵠΔⵠⲆⲆⲆⵠΔ = function() {
			clearTimeout(this.ⲆⲆΔⵠᐃ);
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ᐃⵠⲆⲆⲆᐃᐃ]);
			ᐃΔΔΔ.waiting = false
		};
		this.ⲆᐃⲆΔᐃⲆⲆΔΔ = function() {
			clearTimeout(this.ⲆⲆΔⵠᐃ);
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⲆΔᐃⲆ]);
			ᐃΔΔΔ.waiting = ᐃⵠⲆⲆᐃ
		};
		this.ⲆΔⵠΔⵠⲆΔⵠⲆ = function() {
			ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⲆⵠΔⲆⵠᐃ(1, 0);
			ΔᐃᐃⲆ.ᐃⲆΔⵠΔᐃⵠ()
		};
		this.ᐃᐃᐃⵠⵠⲆΔⵠᐃ = function(ⵠⲆⵠᐃ) {
			var ⲆΔ = ⵠⲆⵠᐃ[ΔⵠⲆⲆ];
			var ΔⵠⲆⵠ = ⲆⵠΔ.ⵠΔᐃΔ[ⲆΔ];
			ΔⵠⲆⵠ.ⲆΔⵠⵠ = ⵠⲆⵠᐃ[2];
			ΔⵠⲆⵠ.ⵠⵠΔΔⵠ = ⵠⲆⵠᐃ[3];
			ΔⵠⲆⵠ.ⵠⵠⵠΔⲆⵠⲆ = ⵠⲆⵠᐃ[4];
			ΔⵠⲆⵠ.ⵠΔⲆΔᐃ = ⵠⲆⵠᐃ[ΔⵠΔᐃ];
			ΔⵠⲆⵠ.ⵠⲆΔΔⲆ = ⵠⲆⵠᐃ[ΔᐃΔᐃᐃ];
			ΔⵠⲆⵠ.ΔⵠᐃⲆΔ = ⵠⲆⵠᐃ[ⲆᐃΔⲆⲆΔᐃ];
			ΔⵠⲆⵠ.level = ⵠⲆⵠᐃ[8];
			var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ⲆΔ * ⲆⵠΔ.ⲆⵠᐃΔᐃΔⵠ];
			if (ΔⲆⵠ) {
				ΔⲆⵠ.ⲆΔⵠⵠ = ⵠⲆⵠᐃ[ⲆⲆⲆⲆ];
				ΔⲆⵠ.ⵠⵠΔΔⵠ = ⵠⲆⵠᐃ[ᐃⵠΔⲆ];
				ΔⲆⵠ.ⵠⵠⵠΔⲆⵠⲆ = ⵠⲆⵠᐃ[ⵠⲆΔⵠ];
				ΔⲆⵠ.ⵠΔⲆΔᐃ = ⵠⲆⵠᐃ[ⲆⵠΔΔ]
			}
		};
		this.ᐃᐃᐃᐃΔⲆᐃᐃᐃ = function(ⲆΔ) {
			ⲆΔ === ⵠⵠ.ⵠᐃⵠⲆ ? (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⲆⵠΔⲆⵠᐃ(1, ⵠⵠⲆⵠ), ΔᐃᐃⲆ.ᐃⲆΔⵠΔᐃⵠ()) : this.ⵠᐃᐃᐃΔⲆΔ([ⵠΔᐃᐃ, ⲆΔ, Δᐃⵠⵠ]);
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⵠⵠᐃᐃᐃⲆᐃ()
		};
		this.ⵠⲆᐃΔΔΔᐃⲆⲆ = function(ⲆΔ) {
			ᐃⲆⵠ.ⲆᐃΔΔⵠ.ⵠᐃᐃⵠᐃ = 0;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆᐃᐃⲆⵠⵠΔΔⲆ(ⲆΔ)
		};
		this.ΔⵠᐃⲆΔⵠᐃⲆⲆ = function(ⲆΔ) {
			var ᐃⲆΔᐃᐃ = ᐃⵠⲆᐃⲆ[ⲆΔ].r;
			for (var Ⲇᐃ = 0; ᐃⲆΔᐃᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
				if (ᐃⲆⵠ.ᐃΔΔⲆ.max > ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length || ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ᐃⲆΔᐃᐃ[Ⲇᐃ][0]] > ⵠΔᐃⵠ) {
					var ΔⲆⵠΔ = Math.floor(ᐃⲆΔᐃᐃ[Ⲇᐃ][ΔⲆᐃᐃ] * .8);
					if (!ΔⲆⵠΔ) continue;
					this.ⵠᐃᐃᐃΔⲆΔ([ⵠⵠⵠΔ, ᐃⲆΔᐃᐃ[Ⲇᐃ][ⵠᐃⲆ], ΔⲆⵠΔ])
				}
			}
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⵠⵠᐃᐃᐃⲆᐃ()
		};
		this.ΔᐃᐃⲆΔⵠⵠΔΔ = function(ⲆΔ) {
			ᐃⲆⵠ.ⲆᐃΔΔⵠ.ⵠᐃᐃⵠᐃ = 0;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ΔᐃⲆΔᐃⵠΔⵠⲆ(ⲆΔ)
		};
		this.ⵠᐃⲆΔⲆ = function(ΔⲆⵠⲆ) {
			if (!ᐃⲆⵠ.alert.text) ᐃⲆⵠ.alert.text = ΔⲆⵠⲆ;
			else if (ΔⲆⵠⲆ !== ᐃⲆⵠ.alert.text && ΔⲆⵠⲆ !== ᐃⲆⵠ.alert.list[ᐃⲆⵠ.alert.list.length - 1]) ᐃⲆⵠ.alert.list.push(ΔⲆⵠⲆ)
		};
		this.ᐃᐃᐃⵠⲆᐃᐃᐃⵠ = function() {
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ⵠⲆΔᐃⲆⵠⲆ])
		};
		this.ΔⵠⵠⵠⲆᐃⲆᐃⵠ = function() {
			var ΔⲆⵠⲆ;
			if (ⵠⵠⵠΔ == ᐃⲆⵠ.ⲆΔᐃ) ΔⲆⵠⲆ = ⲆΔⵠ[ΔΔΔ.ⵠΔΔΔⵠᐃⵠ];
			else ΔⲆⵠⲆ = ⲆΔⵠ[ΔΔΔ.ΔΔΔΔⵠⵠⲆ] + (ᐃⲆⵠ.ⲆΔᐃ + 1) + ⲆΔⵠ[ΔΔΔ.ⵠⲆⵠΔⲆⲆⲆ];
			this.ⵠᐃⲆΔⲆ(ΔⲆⵠⲆ);
			ᐃⲆⵠ.ⲆΔᐃ++
		};
		this.ⲆΔⲆⵠⲆⲆᐃⲆᐃ = function() {
			clearTimeout(ΔⵠⲆ.ⲆⲆΔⵠᐃ);
			ᐃⲆⵠ.reconnect.enabled = false;
			ᐃⲆⵠ.ⲆⲆΔᐃⵠ = ΔⲆΔⵠΔ;
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ⵠⵠᐃᐃΔⵠΔ]);
			ΔᐃᐃⲆ.ⲆⵠᐃΔⲆ(ᐃΔΔΔ.ⵠΔΔᐃᐃ);
			this.ⵠⵠⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[96]]()
		};
		this.ᐃⲆΔⵠΔⵠΔⲆᐃ = function() {
			ᐃⲆΔⵠⵠⲆⲆ = 1;
			clearTimeout(this.ⲆⲆΔⵠᐃ);
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ᐃⲆⲆⵠⵠⲆⲆ]);
			ᐃΔΔΔ.waiting = false
		};
		this.ⲆⲆΔΔᐃᐃᐃᐃⵠ = function() {
			ᐃⲆΔⵠⵠⲆⲆ = ⲆΔΔΔ;
			clearTimeout(this.ⲆⲆΔⵠᐃ);
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⵠⵠᐃⲆ]);
			ᐃΔΔΔ.waiting = ⲆΔⲆᐃΔ
		};
		this.ⵠᐃⲆⲆᐃΔⵠᐃΔ = function(ΔⲆⵠⲆ) {
			var ⲆΔ = ΔⲆⵠⲆ[Δᐃⵠⵠ];
			var ⵠΔᐃΔ = ⲆⵠΔ.ⵠΔᐃΔ;
			ⵠΔᐃΔ[ⲆΔ].ⲆⲆΔⵠⵠ = ΔⲆⵠⲆ[2];
			ⵠΔᐃΔ[ⲆΔ].ⲆΔⵠⵠ = ΔⲆⵠⲆ[3];
			ⵠΔᐃΔ[ⲆΔ].ⵠⵠΔΔⵠ = ΔⲆⵠⲆ[4];
			ⵠΔᐃΔ[ⲆΔ].ⵠⵠⵠΔⲆⵠⲆ = ΔⲆⵠⲆ[ᐃΔΔⲆⵠ];
			ⵠΔᐃΔ[ⲆΔ].ⵠΔⲆΔᐃ = ΔⲆⵠⲆ[6];
			ⵠΔᐃΔ[ⲆΔ].ⵠⲆΔΔⲆ = ΔⲆⵠⲆ[ᐃⲆᐃΔΔ];
			ⵠΔᐃΔ[ⲆΔ].ΔⵠᐃⲆΔ = ΔⲆⵠⲆ[Δⵠᐃᐃⵠ];
			ⵠΔᐃΔ[ⲆΔ].level = ΔⲆⵠⲆ[9];
			ⵠΔᐃΔ[ⲆΔ].ᐃⲆⲆⲆⲆ = ⵠⲆⵠⵠ;
			ⵠΔᐃΔ[ⲆΔ].ΔⵠⵠⵠⲆᐃⲆ = null;
			ⵠΔᐃΔ[ⲆΔ].label = null;
			ⵠΔᐃΔ[ⲆΔ].ᐃⲆⵠⵠΔⲆΔ = null;
			ⵠΔᐃΔ[ⲆΔ].ⲆⲆΔᐃⵠ = ᐃᐃᐃⲆΔ;
			if (ⲆΔΔΔ === ⲆᐃⲆᐃΔᐃΔ) ⵠΔᐃΔ[ⲆΔ].ⲆⲆΔⵠⵠ += "|" + ⲆΔ;
			setTimeout((() => {
				JoinedPlayers.unshift(ⵠΔᐃΔ[ⲆΔ].ⲆⲆΔⵠⵠ + " | " + ⲆΔ +  " | Level : " + ⵠΔᐃΔ[ⲆΔ].level);
				if (JoinedPlayers.length > 5) JoinedPlayers.pop()
			}), 750)
		};
		this.ⲆᐃⵠⵠⲆⲆⲆⵠΔ = function() {
			Settings.Spectator.enabled || this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⵠⲆⵠⲆⵠⲆ[ⵠΔᐃΔⲆᐃΔ].stringify([9]))
		};
		this.ⲆⲆⲆⲆΔⲆⲆⵠⵠ = function() {
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.EMPTY])
		};
		this.ΔⲆⲆᐃΔΔⵠ = function() {
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ⵠⲆⲆᐃⵠⵠΔ])
		};
		this.ⲆⵠⵠⲆⵠⲆΔᐃᐃ = function(ⲆΔ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⵠⵠᐃᐃⲆ[ⵠᐃⲆⵠᐃΔⵠ].stringify([38, ⲆΔ]));
			ᐃⲆⵠ.ΔⵠⲆᐃⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] = false
		};
		this.ΔᐃᐃⵠⲆΔⲆΔᐃ = function(ⵠᐃᐃᐃ) {
			var ᐃⲆΔᐃᐃ = ⵠⲆⲆΔΔΔⵠ[ⵠᐃᐃᐃ - 1].items;
			for (var Ⲇᐃ = 0; ᐃⲆΔᐃᐃ.length > Ⲇᐃ && ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length < ᐃⲆⵠ.ᐃΔΔⲆ.max; Ⲇᐃ++) {
				var Ⲇᐃⵠᐃⵠ = ᐃⲆΔᐃᐃ[Ⲇᐃ][1];
				var ΔⲆⵠΔ = ᐃⲆΔᐃᐃ[Ⲇᐃ][ΔΔᐃ];
				if (ⵠⵠ.ⵠᐃⵠⲆ === ᐃⲆΔᐃᐃ[Ⲇᐃ][1]) ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⲆⵠΔⲆⵠᐃ(1, Δⵠⵠⵠ);
				else this.ⵠᐃᐃᐃΔⲆΔ([0, Ⲇᐃⵠᐃⵠ, ΔⲆⵠΔ])
			}
		};
		this.ⵠᐃᐃᐃΔⲆΔ = function(ⲆΔⲆⵠᐃ) {
			var ᐃⵠΔΔᐃ = ⲆΔⲆⵠᐃ.length;
			var ᐃΔΔⲆ = ᐃⲆⵠ.ᐃΔΔⲆ;
			for (var Ⲇᐃ = Ⲇⵠᐃ; Ⲇᐃ < ᐃⵠΔΔᐃ; Ⲇᐃ += 2) {
				var Ⲇⵠⵠ = ⲆΔⲆⵠᐃ[Ⲇᐃ];
				var ⵠᐃΔⵠ = ⲆΔⲆⵠᐃ[Ⲇᐃ + 1];
				for (var ⲆⲆᐃⲆ = 0; ⲆⲆᐃⲆ < ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length; ⲆⲆᐃⲆ++) {
					if (Ⲇⵠⵠ == ᐃΔΔⲆ.ⵠΔᐃᐃᐃ[ⲆⲆᐃⲆ].id) {
						ᐃΔΔⲆ.ⵠᐃΔⵠ[Ⲇⵠⵠ] += ⵠᐃΔⵠ;
						break
					}
				}
				if (ⲆⲆᐃⲆ == ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length) {
					ᐃΔΔⲆ.ⵠᐃΔⵠ[Ⲇⵠⵠ] = ⵠᐃΔⵠ;
					ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.push(ΔᐃᐃⲆ.ᐃⵠⵠ[Ⲇⵠⵠ]);
					ΔᐃᐃⲆ.ᐃⲆΔⵠΔᐃⵠ()
				}
			}
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆᐃⲆ()
		};
		this.ⲆᐃⵠⲆ = function(ᐃΔᐃᐃⵠ, ⵠΔⲆΔᐃⵠⲆ, ⵠᐃΔᐃⵠ, ᐃΔⵠᐃⵠΔⲆ, ᐃⲆⲆⵠΔⲆⲆ, ᐃᐃⵠᐃⵠ, ⵠᐃᐃⵠⵠ) {
			if (Math.floor(11 - (Date.now() - Timers.HealTimer) / 1e3) < 5 || arguments[0] / 100 > ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃᐃⲆᐃ) {
				Timers.HealTimer = (new Date).getTime()
			}
			Timers.GaugeTimer = (new Date).getTime();
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃᐃⲆᐃ = ᐃΔᐃᐃⵠ / ᐃⵠΔᐃⵠ;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ⲆΔⲆ = ⵠΔⲆΔᐃⵠⲆ / 100;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.c = ⵠᐃΔᐃⵠ / ⲆⵠⲆΔⵠⲆⲆ;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.Δᐃᐃ = ᐃΔⵠᐃⵠΔⲆ / 100;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.Ⲇⵠⵠ = ᐃⲆⲆⵠΔⲆⲆ / 100;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃᐃᐃΔⲆⵠᐃ = ᐃᐃⵠᐃⵠ / ᐃⵠΔᐃⵠ;
			ᐃⲆⵠ.ⵠᐃᐃⵠⵠ = ⵠᐃᐃⵠⵠ
		};
		this.ⵠᐃⵠᐃΔᐃΔᐃΔ = function(ⲆΔ) {
			ΔᐃᐃⲆ.ᐃⲆⲆⲆ.modify(ⲆΔ, 2)
		};
		this.ⲆΔⵠΔΔΔΔΔΔ = function(ⲆΔ) {
			ΔᐃᐃⲆ.ᐃⲆⲆⲆ.modify(ⲆΔ, 0)
		};
		this.claimed = function(ⲆΔ) {
			ΔᐃᐃⲆ.ᐃⲆⲆⲆ.modify(ⲆΔ, 3)
		};
		this.ᐃⵠᐃΔⵠⵠⵠⵠⲆ = function(ᐃΔᐃᐃⵠ, ⵠᐃᐃⵠⵠ) {
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃᐃⲆᐃ = ᐃΔᐃᐃⵠ / 100;
			ᐃⲆⵠ.ⵠᐃᐃⵠⵠ = ⵠᐃᐃⵠⵠ
		};
		this.ΔⵠⲆΔⵠΔᐃⵠⲆ = function(ⲆᐃᐃΔᐃΔᐃ) {
			ᐃⲆⵠ.ⲆᐃⵠⲆ.Δᐃᐃ = ⲆᐃᐃΔᐃΔᐃ / 100
		};
		this.ΔⵠⵠⵠΔⲆⵠᐃⲆ = function(ⵠΔⲆΔᐃⵠⲆ) {
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ⲆΔⲆ = ⵠΔⲆΔᐃⵠⲆ / 100
		};
		this.ⵠⵠⵠⲆᐃΔᐃᐃΔ = function(ᐃᐃⵠᐃⵠ) {
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃᐃᐃΔⲆⵠᐃ = ᐃᐃⵠᐃⵠ / 100
		};
		this.ᐃⲆⲆᐃⲆᐃᐃⲆᐃ = function(ⵠᐃΔᐃⵠ) {
			ᐃⲆⵠ.ⲆᐃⵠⲆ.c = ⵠᐃΔᐃⵠ / ᐃⵠⵠᐃΔⵠᐃ
		};
		this.ᐃᐃᐃⵠⲆΔⵠⲆⵠ = function(ᐃⲆⲆᐃ) {
			ⲆⵠΔ.time = ᐃⲆⲆᐃ;
			ⲆⵠΔ.transition = ᐃᐃᐃⵠⵠ;
			ⲆΔⵠⲆ.transition = ⲆΔΔΔ
		};
		this.ᐃⲆⲆΔᐃΔⲆⲆΔ = function() {
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[284]).style.backgroundColor = Δ.ⵠⵠΔᐃⵠ[ⲆⵠΔ.time]
		};
		this.ⲆΔΔⵠΔΔΔΔΔ = function(ⲆΔ) {
			if (ⲆⵠΔ.mode == ΔᐃᐃΔ.ᐃΔΔⲆⲆᐃᐃ && ⵠ[217] !== ⲆⵠΔ.ⵠΔᐃΔ[ⲆΔ].ⲆⲆΔⵠⵠ) this.ⵠᐃⲆΔⲆ(ⲆⵠΔ.ⵠΔᐃΔ[ⲆΔ].ⲆⲆΔⵠⵠ + ⲆΔⵠ[ΔΔΔ.ⲆⲆΔΔⲆⲆᐃ]);
			ⲆⵠΔ.ⵠΔᐃΔ[ⲆΔ].ⲆⲆΔᐃⵠ = false;
			KilledPlayers.unshift(ⲆⵠΔ.ⵠΔᐃΔ[ⲆΔ].ⲆⲆΔⵠⵠ + " | " + ⲆΔ + " | Level: " + ⲆⵠΔ.ⵠΔᐃΔ[ⲆΔ].level);
			if (KilledPlayers.length > 5) KilledPlayers.pop()
		};
		this.ⲆⲆⵠΔΔΔᐃⲆᐃ = function(ⵠᐃⲆⵠ) {
			var ⲆΔⲆⵠᐃ = new Uint16Array(ⵠᐃⲆⵠ);
			Settings.Spectator.enabled || ΔⵠⲆⵠ.ⲆⲆΔ.ⲆΔΔⲆΔ(ⲆΔⲆⵠᐃ[ⵠⲆⲆ], ⲆΔⲆⵠᐃ[ⲆⲆⲆⲆ])
		};
		this.ᐃΔΔⲆⲆᐃⵠΔⵠ = function(ⵠᐃⲆⵠ) {
			var ⲆΔⲆⵠᐃ = new Uint16Array(ⵠᐃⲆⵠ);
			ᐃⲆⵠ.ⲆⲆΔ.ⲆΔΔⲆΔ(ⲆΔⲆⵠᐃ[1], ⲆΔⲆⵠᐃ[ᐃⲆᐃⵠ])
		};
		this.ⵠⲆⵠⲆΔⵠⲆᐃⲆ = function(ⵠⲆⵠᐃ, ⵠᐃⲆⵠ) {
			var ⲆΔⲆⵠᐃ = new Uint16Array(ⵠᐃⲆⵠ);
			var ᐃⵠΔΔᐃ = (ⵠⲆⵠᐃ.length - ᐃⲆᐃⵠ) / ᐃⲆⵠᐃⵠ;
			for (var ᐃᐃⲆᐃ = 0; ᐃᐃⲆᐃ < ᐃⵠΔΔᐃ; ᐃᐃⲆᐃ++) {
				var ⲆΔ = ⲆΔⲆⵠᐃ[1 + ΔΔΔⵠ * ᐃᐃⲆᐃ];
				var ⵠⵠΔᐃ = ⵠⲆⵠᐃ[4 + Ⲇⵠⵠⵠ * ᐃᐃⲆᐃ];
				var Δᐃⵠ = ΔᐃΔᐃ * ((ⵠⲆⵠᐃ[5 + ⵠΔⲆΔΔ * ᐃᐃⲆᐃ] >> ΔⵠΔ) / 127 * Math.PI);
				var ⲆΔⲆΔ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ⵠⵠΔᐃ * ⲆⵠΔ.ⲆⵠᐃΔᐃΔⵠ + ⲆΔ];
				if (ⲆΔⲆΔ && ⲆΔⲆΔ.ⵠⵠᐃ) {
					if (ⲆΔⵠⲆ.loaded && ⲆΔⵠⲆ.ⵠΔΔᐃᐃ) ⲆΔⵠⲆ.ⵠⵠᐃ(ⵠⲆⵠᐃ[ΔⵠⲆᐃᐃ + ᐃᐃΔΔᐃ * ᐃᐃⲆᐃ] & 1, ⵠⲆΔⵠⲆ[ⲆΔⲆΔ.type], ⲆΔⲆΔ.x, ⲆΔⲆΔ.y);
					ⲆΔⲆΔ.ⵠⵠᐃ.angle = Δᐃⵠ;
					ⲆΔⲆΔ.ⵠⵠᐃ.ⲆᐃⲆ = Δᐃⵠ
				}
			}
		};
		this.ⲆΔⵠᐃΔⲆᐃⲆⵠ = function(ⵠᐃⲆⵠ) {
			var ⲆΔⲆⵠᐃ = new Uint16Array(ⵠᐃⲆⵠ);
			var ᐃⵠΔΔᐃ = (ⲆΔⲆⵠᐃ.length - 1) / 4;
			for (var ᐃᐃⲆᐃ = 0; ᐃᐃⲆᐃ < ᐃⵠΔΔᐃ; ᐃᐃⲆᐃ++) {
				var ⵠᐃᐃᐃ = 4 * ᐃᐃⲆᐃ;
				var Ⲇᐃ = ⲆΔⲆⵠᐃ[1 + ⵠᐃᐃᐃ];
				var ⲆⲆᐃⲆ = ⲆΔⲆⵠᐃ[2 + ⵠᐃᐃᐃ];
				var Δᐃⵠ = 2 * ((ⲆΔⲆⵠᐃ[3 + ⵠᐃᐃᐃ] >> ⵠⲆΔⲆ) / 127 * Math.PI);
				var ⲆΔ = ⲆΔⲆⵠᐃ[4 + ⵠᐃᐃᐃ];
				var ᐃΔⲆⲆ = ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[ⲆⲆᐃⲆ][Ⲇᐃ];
				var Ⲇⵠⵠ;
				switch (ⲆΔ) {
					case ᐃⵠⵠⲆ:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["p"][ⵠᐃⲆ][ⵠⲆⵠⵠ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 1:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["s"][0][ⵠⲆΔ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ⲆⵠⵠⵠⲆ;
						break;
					case 2:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["s"][ΔⲆᐃᐃ][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ᐃⵠΔⲆⵠ;
						break;
					case ᐃⵠΔⵠ:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["s"][ΔᐃⵠΔ][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ⵠΔΔⵠᐃ;
						break;
					case ᐃΔᐃΔ:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["t"][0][ⵠⵠⵠ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case ΔⵠΔᐃ:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["t"][ⵠⲆΔⲆ][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case ΔΔΔⲆ:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["t"][ⲆⵠΔⵠ][ΔΔᐃᐃ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case ⵠⲆⵠⵠⲆⲆⵠ:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["t"][ΔⲆΔⵠ][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ⲆᐃΔΔⲆ;
						break;
					case ⵠᐃⵠΔⲆ:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["t"][4][Δⵠⵠⵠ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case ⵠΔΔⵠⲆΔᐃ:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["t"][ᐃᐃⵠᐃΔ][ⲆⵠⲆⲆ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case ⲆΔⵠΔⵠ:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["g"][ⵠⲆᐃ][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 11:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["g"][ΔΔΔᐃ][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ⵠⲆⵠⵠᐃ;
						break;
					case 12:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["g"][2][ⲆⵠⲆⲆ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ⲆᐃΔΔⲆ;
						break;
					case ᐃⲆΔᐃⵠᐃΔ:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["d"][0][ⵠᐃⲆⲆ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ᐃⵠΔⲆⵠ;
						break;
					case 14:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["d"][ⲆᐃΔ][ⵠⲆⵠⵠ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 15:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["d"][2][ᐃᐃⲆ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ⵠⲆΔᐃΔ;
						break;
					case 16:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["b"][ⵠⲆⵠⵠ][ⵠᐃⲆ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 17:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["b"][ᐃᐃΔ][ⵠᐃⲆⲆ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ⵠⲆⵠⵠΔ;
						break;
					case ⲆⲆⲆⲆⲆ:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["b"][2][ⵠᐃⲆⲆ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ⵠⲆⵠⵠᐃ;
						break;
					case 19:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["b"][ΔⲆΔⲆ][ΔΔᐃᐃ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ΔᐃΔΔᐃ;
						break;
					case ⲆⵠⲆΔⲆ:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["f"][ⵠΔᐃᐃ][ΔⲆⲆ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 21:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["f"][1][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ᐃᐃᐃⵠⵠ;
						break;
					case 22:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["f"][ⵠΔⵠΔ][ⵠⵠⵠΔ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ᐃᐃΔⲆⵠ;
						break;
					case 23:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[510]][0][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ⵠⲆΔᐃΔ;
						break;
					case 24:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[510]][1][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ᐃΔᐃⵠⲆ;
						break;
					case 25:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[510]][2][ⵠⲆᐃ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 26:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[169]][ⵠⲆⵠⵠ][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 27:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[169]][ⲆᐃΔ][ᐃᐃᐃ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 28:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[169]][ΔΔΔⵠ][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 29:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[563]][0][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ᐃᐃᐃⲆΔ;
						break;
					case 30:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[563]][1][ΔΔᐃᐃ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ⲆᐃΔΔⲆ;
						break;
					case 31:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[563]][ΔⵠⲆᐃ][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 32:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["a"][0][ⵠΔᐃⵠ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 33:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["a"][1][ⵠⵠⵠΔ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 34:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["a"][ᐃⲆᐃᐃ][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ΔᐃⲆⵠΔ;
						break;
					case 35:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[3]][0][ⵠⵠⲆⵠ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 36:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[ᐃⵠΔⲆ]][Δᐃⵠⵠ][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 37:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[3]][ΔᐃⵠΔ][ΔΔᐃᐃ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ΔⲆΔⵠⲆ;
						break;
					case 38:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[ᐃⵠΔⵠ]][ⲆΔⵠⵠⵠ][ⲆⲆⵠⲆ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 40:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[267]][0][ⵠⵠⲆⵠ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ᐃⲆᐃⵠⵠ;
						break;
					case 41:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[267]][Δⵠᐃ][ᐃᐃᐃ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ΔⲆΔⵠⲆ;
						break;
					case 42:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[267]][2][ⵠⵠⲆⵠ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ⲆᐃΔΔⲆ;
						break;
					case 50:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[449]][0][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ⵠⲆⵠⵠΔ;
						break;
					case 51:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[449]][ΔᐃΔⲆ][ⵠⵠⵠΔ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ΔⲆΔⵠⲆ;
						break;
					case 52:
						Ⲇⵠⵠ = ᐃΔⲆⲆ[ⵠ[449]][ⲆⵠΔⵠ][ⲆⲆⵠⲆ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 55:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["c"][ΔⲆⲆ][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ⵠⲆⵠⵠᐃ;
						break;
					case 56:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["m"][0][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ⵠΔΔⵠᐃ;
						break;
					case 57:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["m"][ΔⵠΔ][0];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = true;
						break;
					case 58:
						Ⲇⵠⵠ = ᐃΔⲆⲆ["m"][ΔᐃⵠΔ][ⵠΔᐃᐃ];
						Ⲇⵠⵠ.angle = Δᐃⵠ;
						Ⲇⵠⵠ.ⲆᐃⲆ = ⲆⵠΔᐃⵠ;
						break
				}
				if (ⲆΔⵠⲆ.loaded && ⲆΔⵠⲆ.ⵠΔΔᐃᐃ && Ⲇⵠⵠ) ⲆΔⵠⲆ.ⵠⵠᐃ(ⲆΔⲆⵠᐃ[3 + ⵠᐃᐃᐃ] & ΔⲆᐃᐃ, ⵠⲆⵠΔ[ⲆΔ], Ⲇⵠⵠ.x, Ⲇⵠⵠ.y)
			}
		};
		this.ΔΔᐃᐃΔ = function() {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⲆⵠⵠⵠᐃⵠ[ⵠⵠΔⵠΔ].stringify([35, ᐃⲆⵠ.ΔΔᐃᐃΔ.ⵠⵠΔᐃ, ᐃⲆⵠ.ΔΔᐃᐃΔ.ⲆᐃΔΔᐃ]))
		};
		this.ⲆⲆⵠΔᐃΔΔᐃΔ = function(ⲆᐃⲆⵠ, ⵠᐃΔⵠ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⲆⵠⵠⵠᐃⵠ[ΔⵠⵠⲆⲆⵠᐃ].stringify([30, ⵠᐃΔⵠ, ⲆᐃⲆⵠ.ⵠⵠΔᐃ, ⲆᐃⲆⵠ.ⲆᐃΔΔᐃ]))
		};
		this.ΔᐃⲆᐃⲆⵠᐃ = function(ᐃⵠᐃᐃ, ⲆⲆᐃ, Δⵠⵠ) {
			if (ⲆⲆᐃ) this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⲆⵠⵠⵠᐃⵠ[ΔⵠⵠⲆⲆⵠᐃ].stringify([ⵠΔⲆΔⲆⲆᐃ, ⲆⲆᐃ, ᐃⵠᐃᐃ.ⵠⵠΔᐃ, ᐃⵠᐃᐃ.ⲆᐃΔΔᐃ]));
			else this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⲆⵠⵠⵠᐃⵠ[ⵠⵠⲆⵠᐃΔᐃ].stringify([25, Δⵠⵠ, ᐃⵠᐃᐃ.ⵠⵠΔᐃ, ᐃⵠᐃᐃ.ⲆᐃΔΔᐃ]))
		};
		this.ⵠⲆᐃΔⲆⵠⲆΔⵠ = function(ᐃⵠᐃᐃ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⵠΔⵠᐃ[ⲆᐃⲆᐃⵠ].stringify([13, ᐃⵠᐃᐃ.ⵠⵠΔᐃ, ᐃⵠᐃᐃ.ⲆᐃΔΔᐃ]))
		};
		this.ᐃⲆΔⲆⵠⲆⲆⵠⲆ = function(ΔᐃⵠⲆΔⵠⲆᐃⵠ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⵠΔⵠᐃ[ⵠⵠᐃⵠΔⵠⵠ].stringify([32, ΔᐃⵠⲆΔⵠⲆᐃⵠ]))
		};
		this.ᐃⵠᐃΔᐃΔΔΔⵠ = function(ⵠⵠΔΔᐃ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ᐃᐃⵠΔᐃⵠⲆ[ⵠⵠΔⵠΔ].stringify([29, ⵠⵠΔΔᐃ.ⵠⵠΔᐃ, ⵠⵠΔΔᐃ.ⲆᐃΔΔᐃ]))
		};
		this.ΔⲆΔᐃΔΔⲆⲆⲆ = function(ᐃᐃΔⲆ, ⵠᐃΔⵠ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⵠⵠᐃᐃⲆ[ⲆᐃⲆᐃⵠ].stringify([27, ⵠᐃΔⵠ, ᐃᐃΔⲆ.ⵠⵠΔᐃ, ᐃᐃΔⲆ.ⲆᐃΔΔᐃ, ᐃᐃΔⲆ.type]))
		};
		this.ⵠΔᐃΔⵠⲆᐃⲆⵠ = function(ᐃⲆᐃⵠᐃ, ⵠᐃΔⵠ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⵠⵠᐃᐃⲆ[ⲆᐃⲆᐃⵠ].stringify([ⲆⲆΔΔᐃ, ⵠᐃΔⵠ, ᐃⲆᐃⵠᐃ.ⵠⵠΔᐃ, ᐃⲆᐃⵠᐃ.ⲆᐃΔΔᐃ]))
		};
		this.ΔⵠᐃⲆⲆᐃᐃΔΔ = function(ⵠᐃⲆΔ, ⲆΔ, ⵠᐃΔⵠ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ᐃᐃⵠΔᐃⵠⲆ[ΔⵠⵠⲆⲆⵠᐃ].stringify([1, ⲆΔ, ⵠᐃΔⵠ, ⵠᐃⲆΔ.ⵠⵠΔᐃ, ⵠᐃⲆΔ.ⲆᐃΔΔᐃ]))
		};
		this.ᐃΔⲆΔᐃᐃᐃ = function(ᐃᐃΔⲆ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⵠΔⵠᐃ[ⲆᐃⲆᐃⵠ].stringify([37, ᐃᐃΔⲆ.ⵠⵠΔᐃ, ᐃᐃΔⲆ.ⲆᐃΔΔᐃ, ᐃᐃΔⲆ.type]))
		};
		this.ⵠⲆⲆᐃΔⵠⵠⲆⲆ = function(ⲆᐃⲆⵠ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⵠΔⵠᐃ[ⲆᐃⲆᐃⵠ].stringify([4, ⲆᐃⲆⵠ.ⵠⵠΔᐃ, ⲆᐃⲆⵠ.ⲆᐃΔΔᐃ]))
		};
		this.ᐃᐃⲆⵠΔⲆΔⲆⲆ = function(ⵠᐃⲆΔ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⵠΔⵠᐃ[ⲆᐃⲆᐃⵠ].stringify([Ⲇᐃⵠⵠᐃ, ⵠᐃⲆΔ.ⵠⵠΔᐃ, ⵠᐃⲆΔ.ⲆᐃΔΔᐃ]))
		};
		this.ⲆⲆᐃᐃΔΔⲆⲆᐃ = function(ⵠᐃⲆΔ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ΔΔⵠᐃⵠⲆᐃ[ⲆᐃΔⲆⵠⵠⵠ].stringify([20, ⵠᐃⲆΔ.ⵠⵠΔᐃ, ⵠᐃⲆΔ.ⲆᐃΔΔᐃ]))
		};
		this.ⵠΔⵠΔⵠᐃᐃⵠΔ = function(ⵠᐃⲆΔ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⵠᐃⲆⵠᐃΔΔ[ⵠᐃⲆⵠᐃΔⵠ].stringify([ΔⲆΔⲆ, ⵠᐃⲆΔ.ⲆᐃΔΔᐃ]))
		};
		this.ⵠⵠⵠⵠⲆⵠΔ = function(ᐃΔⵠᐃⲆⲆΔ) {
			ΔⵠⲆ.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ΔⵠⵠⲆΔᐃΔ[ⵠⵠᐃⵠΔⵠⵠ].stringify([23, ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.id, ᐃⲆⵠ.ᐃΔⵠⵠᐃ[ᐃΔⵠᐃⲆⲆΔ]]))
		};
		this.ᐃᐃᐃΔΔⵠΔΔⲆ = function() {
			ΔⵠⲆ.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ᐃᐃⲆᐃⲆⵠⲆ[ⵠⵠᐃⲆᐃΔⲆ].stringify([ᐃΔⵠΔⵠᐃⵠ, ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.ⵠⵠΔᐃ, ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.id]))
		};
		this.ⵠΔⵠⵠⵠᐃᐃ = function() {
			ΔⵠⲆ.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⲆᐃΔΔⲆᐃ[ᐃΔᐃⵠΔⵠᐃ].stringify([12]))
		};
		this.ᐃΔⵠⲆⲆᐃⵠᐃᐃ = function() {
			ΔⵠⲆ.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⲆᐃΔΔⲆᐃ[ⵠⵠᐃⵠΔⵠⵠ].stringify([19, ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.id]));
			"LOCK" == document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[566])[ⲆᐃⲆⵠΔΔⲆ[112]] ? (ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.lock = ⵠᐃⵠΔ, document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[566])[ⲆᐃⲆⵠΔΔⲆ[112]] = "UNLOCK") : (ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.lock = 0, document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[566])[ⲆᐃⲆⵠΔΔⲆ[112]] = "LOCK")
		};
		this.ⲆΔΔ = function(ⵠᐃⲆⵠ, ⵠⲆⵠᐃ, ᐃⲆⵠᐃⵠᐃᐃᐃⵠ) {
			var ⲆΔⲆⵠᐃ = new Uint16Array(ⵠᐃⲆⵠ);
			ᐃⲆⵠᐃⵠᐃᐃᐃⵠ && ⲆⵠΔ.ΔⲆΔΔⲆⲆᐃⵠᐃ();
			var ᐃⵠΔΔᐃ = (ⵠⲆⵠᐃ.length - ΔⵠⲆᐃ) / 18;
			for (var Ⲇᐃ = 0; ᐃⵠΔΔᐃ > Ⲇᐃ; Ⲇᐃ++) {
				var ⲆΔᐃᐃⲆⲆⲆ = 2 + Ⲇᐃ * 18;
				var ⲆⲆΔⵠⵠᐃᐃ = ΔⵠⲆⲆ + ⲆᐃΔⵠΔΔᐃ * Ⲇᐃ;
				var ⵠⵠΔᐃ = ⵠⲆⵠᐃ[ⲆΔᐃᐃⲆⲆⲆ];
				var ⵠⵠΔⲆ = ⲆΔⲆⵠᐃ[ⲆⲆΔⵠⵠᐃᐃ + Δⵠᐃ];
				var ⲆΔ = ⲆΔⲆⵠᐃ[ⲆⲆΔⵠⵠᐃᐃ + Ⲇᐃⵠᐃ];
				var Ⲇᐃᐃⵠ = ⲆⵠΔ.ⲆⵠᐃΔᐃΔⵠ * ⵠⵠΔᐃ + ⲆΔ;
				if (ⵠⵠΔⲆ & ⲆΔᐃᐃ.ᐃⲆⵠΔⲆΔΔⲆⵠ) {
					ⲆⵠΔ.ᐃᐃⲆᐃΔⵠⵠⵠⵠ(Ⲇᐃᐃⵠ);
					continue
				}
				var ⲆΔⲆᐃ = ⲆΔⲆⵠᐃ[ⲆⲆΔⵠⵠᐃᐃ + ΔΔⲆᐃ];
				var Ⲇⵠ = ⲆΔⲆⵠᐃ[ⲆⲆΔⵠⵠᐃᐃ + ΔⲆⵠᐃ];
				var ᐃⵠⲆ = ⲆΔⲆⵠᐃ[ⲆⲆΔⵠⵠᐃᐃ + ΔⵠⵠⲆ];
				var Ⲇᐃᐃ = ⲆΔⲆⵠᐃ[ⲆⲆΔⵠⵠᐃᐃ + 6];
				var ⲆⲆⲆΔᐃ = ⲆΔⲆⵠᐃ[ⲆⲆΔⵠⵠᐃᐃ + 7];
				var ⵠⵠΔᐃᐃ = ⲆΔⲆⵠᐃ[ⲆⲆΔⵠⵠᐃᐃ + ΔΔⲆᐃᐃ];
				var Δᐃⵠ = ⵠⲆⵠᐃ[ⲆΔᐃᐃⲆⲆⲆ + ΔΔΔᐃ] / ᐃᐃΔᐃⵠΔⲆ * Math.PI * ᐃᐃⲆⲆ;
				if (!ⲆⵠΔ.ⵠⵠⲆⵠⲆ[Ⲇᐃᐃⵠ]) {
					var Ⲇⵠⵠ = new ᐃᐃⵠⲆⲆΔⲆ(ⲆΔⲆᐃ, ⵠⵠΔᐃ, ⲆΔ, Ⲇⵠ, ᐃⵠⲆ, Δᐃⵠ, ⵠⵠΔⲆ, Ⲇᐃᐃ, ⲆⲆⲆΔᐃ, ⵠⵠΔᐃᐃ);
					ⲆⵠΔ.ⵠⵠⲆⵠⲆ[Ⲇᐃᐃⵠ] = Ⲇⵠⵠ;
					ⲆⵠΔ.ⲆΔΔ[ⲆΔⲆᐃ].push(Ⲇⵠⵠ);
					continue
				}
				var ⲆΔⲆΔ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[Ⲇᐃᐃⵠ];
				ⲆΔⲆΔ.r.x = Ⲇⵠ;
				ⲆΔⲆΔ.r.y = ᐃⵠⲆ;
				ᐃᐃᐃ != ⵠⵠΔᐃ && ΔⵠΔⵠ.ΔⲆⲆᐃ(ⲆΔⲆΔ, ⲆΔⲆΔ.r) > ⵠⲆⲆⵠⲆ.ᐃᐃⵠⲆᐃΔⲆᐃⲆ && (ⲆΔⲆΔ.x = Ⲇⵠ, ⲆΔⲆΔ.y = ᐃⵠⲆ);
				(ᐃⲆⵠ.id !== ⲆΔⲆΔ.id || ΔΔᐃ === ⵠⵠΔᐃ) && (ⲆΔⲆΔ.ⲆⲆᐃⲆᐃⲆᐃ = Δᐃⵠ);
				ⲆΔⲆΔ.action |= ⵠⵠΔⲆ;
				ⲆΔⲆΔ.info = Ⲇᐃᐃ;
				ⲆΔⲆΔ.ⲆⲆⲆΔᐃ = ⲆⲆⲆΔᐃ;
				ⲆΔⲆΔ.ⵠⵠΔᐃᐃ = ⵠⵠΔᐃᐃ;
				ⲆΔⲆΔ.ⲆᐃⲆ && ⲆΔⲆΔ.ⲆᐃⲆ(ⵠⵠΔⲆ);
				if (ⵠⵠΔⲆ === 2) {
					if (ⲆΔⲆᐃ === 82 || ⲆΔⲆᐃ === 86) {
						ⲆΔⲆΔ.hits++
					}
				}
			}
		};
		this.ⵠΔᐃⲆ = function(ⵠᐃⲆⵠ) {
			this.ΔⵠⲆⲆᐃᐃᐃ = ΔᐃⲆΔΔ;
			var ⲆΔⲆΔ = new Uint16Array(ⵠᐃⲆⵠ);
			ᐃⲆⵠ.ᐃⲆᐃⲆΔ.ⵠΔⲆΔⲆ(ⲆΔⲆΔ)
		};
		this.ᐃⵠΔΔⵠⲆΔⵠᐃ = function(ΔⲆᐃᐃΔⵠΔ) {
			if (undefined !== ⲆΔΔⵠᐃⲆᐃ) ᐃⵠⲆᐃⲆ = ⲆΔΔⵠᐃⲆᐃ;
			if (ΔⲆᐃᐃΔⵠΔ.length > 0) {
				ⲆΔΔⵠᐃⲆᐃ = JSON.parse(JSON.stringify(ᐃⵠⲆᐃⲆ));
				for (var Ⲇᐃ = Δⵠⵠⵠ; Ⲇᐃ < ΔⲆᐃᐃΔⵠΔ.length; Ⲇᐃ++) {
					var ΔⲆΔ = ΔⲆᐃᐃΔⵠΔ[Ⲇᐃ];
					var ΔᐃᐃⵠΔⵠⵠ = ᐃⵠⲆᐃⲆ[ΔⲆΔ["item"]];
					if (ΔᐃᐃⵠΔⵠⵠ === undefined) continue;
					ΔᐃᐃⵠΔⵠⵠ.r = ΔⲆΔ["recipe"];
					ΔᐃᐃⵠΔⵠⵠ.w = ΔⲆΔ["workbench"];
					ΔᐃᐃⵠΔⵠⵠ.f = ΔⲆΔ["fire"];
					ΔᐃᐃⵠΔⵠⵠ.Ⲇⵠⵠ = ΔⲆΔ["water"];
					ΔᐃᐃⵠΔⵠⵠ.e = ΔⲆΔ["well"];
					ΔᐃᐃⵠΔⵠⵠ.time = 1 / ΔⲆΔ[ⵠ[426]]
				}
			}
		};
		this.ΔⵠΔᐃⲆⲆⵠ = function(ΔⲆⵠⲆ) {
			if (!ΔⲆⵠⲆ || 0 === ΔⲆⵠⲆ.length) ᐃⲆⵠ.ΔⵠΔᐃⲆⲆⵠ.message = ⲆⲆⵠⵠᐃ;
			else ᐃⲆⵠ.ΔⵠΔᐃⲆⲆⵠ.message = ΔⵠⲆⵠᐃΔⵠΔᐃ(ΔⲆⵠⲆ)
		};
		this.Ⲇⵠⵠⵠᐃ = function(ΔⲆⵠⲆ) {
			var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ΔⲆⵠⲆ[Δᐃⵠⵠ] * ⲆⵠΔ.ⲆⵠᐃΔᐃΔⵠ];
			if (ΔⲆⵠ) {
				if (ΔᐃᐃΔ.ᐃΔⲆⲆᐃ === ⲆⵠΔ.mode && ΔᐃᐃΔ.ᐃⵠⵠᐃⵠᐃᐃ === ΔⲆⵠ.ⲆΔⵠⵠ) {
					if (!ᐃⲆⵠ.ΔΔΔⵠⵠ) ΔⲆⵠ.text.push(ⲆⵠⲆⲆᐃⲆᐃ[Math.floor(Math.random() * ⲆⵠⲆⲆᐃⲆᐃ.length)]);
					else {
						.5 < Math.random() ? ΔⲆⵠ.text.push(ΔⲆⵠⲆ[2] + " ..." + ΔᐃΔᐃⲆ) : ΔⲆⵠ.text.push(ΔᐃΔᐃⲆ + "... " + ΔⲆⵠⲆ[ΔᐃⵠΔ])
					}
				} else ΔⲆⵠ.text.push(ΔⲆⵠⲆ[ⲆⵠΔⵠ])
			}
		};
		this.ΔⲆΔⵠⵠᐃⲆⲆᐃ = function(ⲆΔ) {
			if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length === ᐃⲆⵠ.ᐃΔΔⲆ.max && ᐃⵠⲆᐃⲆ[ⲆΔ].ᐃΔΔᐃ !== ⵠⵠ.ⵠᐃⵠⲆ && -1 == ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ᐃⵠⲆᐃⲆ[ⲆΔ].ᐃΔΔᐃ) && !ᐃⲆⵠ.ᐃΔΔⲆ.ΔΔⵠⵠⵠΔΔᐃᐃ(ᐃⵠⲆᐃⲆ[ⲆΔ].r)) {
				this.ΔⲆⲆᐃΔΔⵠ();
				return ⵠΔᐃᐃ
			}
			if (Settings.AutoBook.enabled && getWorldProperty("fast_units")[getUserProperty("uid")].right !== 28 && canSelect(28)) {
				getClientProperty("socket").send(JSON.stringify([Packets.Equip, 28]))
			}
			Settings.AutoCraft.last = arguments[0];
			autoFeed();
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⵠⲆⵠⲆⵠⲆ[ⵠΔᐃΔⲆᐃΔ].stringify([26, ⲆΔ]));
			return 1
		};
		this.ⲆΔⵠΔⲆ = function(ⲆΔⵠΔᐃ) {
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆᐃᐃᐃⵠᐃΔ(ⲆΔⵠΔᐃ)
		};
		this.ⵠⵠΔΔᐃ = function(ⲆΔⵠΔᐃ) {
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⵠⵠΔΔᐃ = ⲆΔⵠΔᐃ;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆᐃⲆ()
		};
		this.ᐃᐃΔᐃᐃ = function(ⲆΔⵠΔᐃ) {
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃᐃΔᐃᐃ = ⲆΔⵠΔᐃ;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆᐃⲆ()
		};
		this.ⲆᐃᐃΔᐃΔᐃ = function(ⲆΔⵠΔᐃ) {
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆᐃᐃΔᐃΔᐃ = ⲆΔⵠΔᐃ;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆᐃⲆ()
		};
		this.ΔⲆⲆᐃⵠⲆᐃⲆΔ = function(ΔⲆ) {
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ⵠᐃᐃΔΔΔⲆ])
		};
		this.ⲆΔᐃᐃᐃⵠᐃΔᐃ = function() {
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⵠⵠᐃᐃᐃⲆᐃ()
		};
		this.Δⵠⵠⵠⵠ = function(ⵠᐃⲆΔⵠ) {
			ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.ⵠΔᐃΔ = [];
			var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
			var ᐃⲆⲆᐃ = 0;
			for (var Ⲇᐃ = 1; Ⲇᐃ < ⵠᐃⲆΔⵠ.length; Ⲇᐃ += 2) {
				var ⲆⲆⲆⵠ = {
					x: Math.floor(ⵠᐃⲆΔⵠ[Ⲇᐃ] * ⲆⵠΔ.w / 250),
					y: Math.floor(ⵠᐃⲆΔⵠ[Ⲇᐃ + ⲆΔΔΔ] * ⲆⵠΔ.ⲆΔⲆ / 250)
				};
				if (ΔⲆⵠ && !ᐃⲆⲆᐃ && !ᐃⲆⵠ.ⲆⵠΔⵠΔⲆΔ && 250 > ΔⵠΔⵠ.ΔⲆⲆᐃ(ⲆⲆⲆⵠ, ΔⲆⵠ)) {
					ᐃⲆⲆᐃ += 1;
					continue
				}
				ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.ⵠΔᐃΔ.push(ⲆⲆⲆⵠ)
			}
		};
		this.ⵠⵠᐃⵠᐃᐃᐃΔΔ = function() {
			ᐃⲆⵠ.ΔΔᐃᐃΔ[ⲆᐃⲆⵠΔΔⲆ[36]] = false;
			ᐃⲆⵠ.ΔⲆⲆΔⵠ.enabled = ΔⵠΔΔⲆ;
			ᐃⲆⵠ.ΔⲆⲆΔⵠ.ⵠᐃᐃⵠᐃ = -Δⵠᐃ;
			ᐃⲆⵠ.ΔⲆⲆΔⵠ.label = null;
			ᐃⲆⵠ.ΔⲆⲆΔⵠ.ⵠΔᐃⵠᐃⵠΔ = null;
			ᐃⲆⵠ.ΔⲆⲆΔⵠ.now = -1;
			if (Settings.AutoCrown.enabled && autoCrownReady) {
				autoCrownReady = false;
				getClientProperty("socket").send(JSON.stringify([Packets.Equip, 79]));
				if (getHammer()) getClientProperty("socket").send(JSON.stringify([Packets.Equip, getHammer()]));
				setTimeout((() => autoCrownReady = true), 5e3)
			}
							if (Settings.XDLOLXD.enabled && autoCrownReady) {
					autoCrownReady = false;
					getClientProperty("socket").send(JSON.stringify([Packets.Equip, 79]));
					if (getHammer()) getClientProperty("socket").send(JSON.stringify([Packets.Equip, getHammer()]));
					setTimeout((() => autoCrownReady = true), 5e3)
				}	
		};
		this.ΔⲆⲆΔⵠ = function(ᐃΔⵠⵠⵠⲆᐃΔⵠ) {
			ΔᐃᐃΔ.ⵠᐃΔⵠΔⲆⵠ = ᐃΔⵠⵠⵠⲆᐃΔⵠ;
			ᐃⲆⵠ.ΔⲆⲆΔⵠ.enabled = true;
			ᐃⲆⵠ.ΔⲆⲆΔⵠ.ⵠᐃᐃⵠᐃ = (new Date).getTime();
			ᐃⲆⵠ.ΔⲆⲆΔⵠ.label = null;
			ᐃⲆⵠ.ΔⲆⲆΔⵠ.now = -ΔᐃⲆⲆ;
			var ⵠⵠᐃⲆ = [ⵠⵠ.ⵠⲆΔΔⵠ, ⵠⵠ.ⲆᐃΔⵠⲆ, ⵠⵠ.ΔⵠᐃᐃⲆ, ⵠⵠ.ΔᐃⲆΔⲆ, ⵠⵠ.ⵠΔᐃᐃⵠ, ⵠⵠ.ΔᐃⲆⵠⲆ, ⵠⵠ.ⵠΔΔⲆⲆ, ⵠⵠ.ᐃⵠⲆⲆΔ, ⵠⵠ.ᐃᐃⵠⵠⵠ, ⵠⵠ.ΔᐃⵠΔΔ, ⵠⵠ.ⵠΔⲆⵠᐃ, ⵠⵠ.ⲆΔⵠⵠᐃ, ⵠⵠ.ⲆΔΔⵠⵠ, ⵠⵠ.ⲆⲆⵠΔⲆ, ⵠⵠ.ᐃⵠᐃΔΔ, ⵠⵠ.ΔⵠⵠⵠΔ, ⵠⵠ.ⵠᐃᐃᐃⲆ, ⵠⵠ.Δᐃᐃᐃⵠ, ⵠⵠ.ⲆᐃⵠⲆⲆ, ⵠⵠ.ΔΔΔⲆᐃ, ⵠⵠ.ΔᐃⵠⲆᐃ, ⵠⵠ.ⵠᐃⲆᐃΔ, ⵠⵠ.ᐃΔᐃΔΔ, ⵠⵠ.ᐃᐃⵠΔⵠ, ⵠⵠ.ⲆⲆⵠΔᐃ, ⵠⵠ.ΔⲆⵠⲆⵠ, ⵠⵠ.ⲆⲆΔⵠΔ, ⵠⵠ.ⵠᐃΔⲆᐃ, ⵠⵠ.ⲆⲆΔᐃΔ, ⵠⵠ.ΔᐃⵠᐃΔ, ⵠⵠ.ⲆΔⵠⲆᐃ, ⵠⵠ.ΔⲆᐃᐃᐃ, ⵠⵠ.ⲆᐃΔⲆᐃ, ⵠⵠ.ΔΔⵠⲆΔ, ⵠⵠ.ᐃΔⲆᐃⵠ, ⵠⵠ.ⵠΔⲆⲆΔ, ⵠⵠ.ᐃⲆⲆⵠⵠ, ⵠⵠ.ΔⵠΔⵠⲆ, ⵠⵠ.ⵠᐃΔⵠΔ, ⵠⵠ.ⵠᐃΔΔΔ, ⵠⵠ.ⲆⲆⵠⵠΔ, ⵠⵠ.ⵠᐃⵠⵠⵠ, ⵠⵠ.ΔΔⵠᐃⲆ, ⵠⵠ.ΔΔΔΔΔ, ⵠⵠ.ⲆⲆⵠΔΔ, ⵠⵠ.ⲆⵠⵠΔΔ, ⵠⵠ.ⲆⵠⲆᐃΔ, ⵠⵠ.ⲆⵠΔⲆⲆ, ⵠⵠ.ΔΔᐃⲆᐃ, ⵠⵠ.ᐃⲆΔⵠⵠ, ⵠⵠ.ⲆⵠⵠⲆᐃ];
			for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠⵠᐃⲆ.length; Ⲇᐃ++) {
				var ⲆΔ = ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠᐃⲆ[Ⲇᐃ]); - ΔᐃⲆⲆ != ⲆΔ && ᐃⲆⵠ.ᐃΔΔⲆ.ΔᐃΔᐃᐃⲆᐃ(ⵠⵠᐃⲆ.length[Ⲇᐃ], ⲆΔ)
			}
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⵠⵠᐃᐃᐃⲆᐃ()
		};
		this.ⵠⵠⵠⵠⲆⵠᐃⲆⵠ = function(ⲆΔ, ⲆⵠΔΔⲆᐃΔⲆⲆ, ⲆⵠᐃᐃⵠΔⲆΔⵠ) {
			this.ⲆΔΔⲆⲆⲆⵠ(ⲆΔ, 256 * ⲆⵠΔΔⲆᐃΔⲆⲆ + ⲆⵠᐃᐃⵠΔⲆΔⵠ)
		};
		this.ⲆΔΔⲆⲆⲆⵠ = function(ⲆΔ, ⵠᐃΔⵠ) {
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = Settings.Equip.enabled ? ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ] -1 ? ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ : -1 : -1;
			ᐃⲆⵠ.ᐃΔΔⲆ.ⲆⵠⵠᐃⵠⲆᐃ(ⲆΔ, ⵠᐃΔⵠ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⲆΔ));
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆᐃⲆ()
		};
		this.ΔⲆⵠⵠⵠⵠⵠⲆᐃ = function(ⲆΔ) {
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = Settings.Equip.enabled ? ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ] -1 ? ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ : -1 : -1;
			ᐃⲆⵠ.ⵠⲆᐃⲆΔ.wait = true;
			var Ⲇᐃⵠᐃⵠ = ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⲆΔ);
			ᐃⲆⵠ.ᐃΔΔⲆ.ⲆⵠⵠᐃⵠⲆᐃ(ⲆΔ, 1, Ⲇᐃⵠᐃⵠ);
			0 <= Ⲇᐃⵠᐃⵠ && !ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⲆΔ] && ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆᐃⲆ();
			ⵠⵠ.ᐃᐃⲆΔⲆ == ⲆΔ && (ᐃⲆⵠ.ᐃΔⵠⵠᐃ = [ᐃⲆⵠ.id])
		};
		this.ⵠᐃⲆᐃⲆⵠⲆⲆΔ = function() {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⲆⵠⵠⵠᐃⵠ[ⵠⵠΔⵠΔ].stringify([6]))
		};
		this.ⲆΔᐃⵠᐃΔᐃⵠᐃ = function(ⲆⵠⲆ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⵠⵠᐃᐃⲆ[ⵠⵠⲆⵠᐃΔᐃ].stringify([ᐃᐃᐃⵠ, ⲆⵠⲆ.ⲆΔⵠΔᐃ, ⲆⵠⲆ.id]))
		};
		this.ⵠⲆᐃⵠⲆᐃΔΔΔ = function(ⲆΔ, ⵠᐃⵠⲆΔΔⲆ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⵠⵠᐃᐃⲆ[ⲆᐃⲆᐃⵠ].stringify([ᐃᐃᐃΔΔ, ⲆΔ, ⵠᐃⵠⲆΔΔⲆ]))
		};
		this.ΔⵠΔⲆⲆΔⲆᐃⲆ = function() {
			var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
			if (ΔⲆⵠ) {
				var ΔⵠᐃⵠΔ = Math.PI * ΔΔⲆⲆ;
				this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⵠⵠᐃᐃⲆ[ⵠⵠⲆⵠᐃΔᐃ].stringify([22, ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ, Math.floor((ΔⲆⵠ.angle + ΔⵠᐃⵠΔ) % ΔⵠᐃⵠΔ * ⵠᐃⲆΔⲆⲆΔ / ΔⵠᐃⵠΔ), ᐃⲆⵠ.ᐃⵠⲆᐃ.mode]))
			}
		};
		this.ⵠⲆⲆᐃⲆ = function(ⲆΔ, Ⲇᐃ) {
			switch (ⲆΔ) {
				case ⵠⵠ.ⵠΔⲆⲆⲆ:
				case ⵠⵠ.ⲆΔᐃⵠⲆ:
				case ⵠⵠ.ᐃⵠΔⵠⵠ:
				case ⵠⵠ.ᐃⲆΔⲆⵠ:
				case ⵠⵠ.ⵠᐃⲆⵠΔ:
				case ⵠⵠ.ⲆⵠⲆⲆΔ:
				case ⵠⵠ.ΔᐃⵠΔⵠ:
				case ⵠⵠ.ⵠⲆᐃⵠⵠ:
				case ⵠⵠ.ⲆΔⲆⲆΔ:
				case ⵠⵠ.ⲆⲆᐃΔⵠ:
				case ⵠⵠ.ΔⲆᐃⲆᐃ:
				case ⵠⵠ.ⵠⲆⵠΔⲆ:
				case ⵠⵠ.ᐃΔΔⲆᐃ:
				case ⵠⵠ.ⲆᐃᐃᐃΔ:
				case ⵠⵠ.ⵠⲆⵠΔΔ:
				case ⵠⵠ.ⵠΔᐃΔⵠ:
				case ⵠⵠ.ⲆⲆⵠΔⵠ:
				case ⵠⵠ.ᐃⵠⵠΔΔ:
				case ⵠⵠ.ΔⵠΔᐃᐃ:
				case ⵠⵠ.ΔⵠᐃΔᐃ:
				case ⵠⵠ.ΔᐃᐃΔⲆ:
				case ⵠⵠ.ᐃΔⲆⵠⵠ:
				case ⵠⵠ.ΔⲆⲆⲆᐃ:
					ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -1;
					this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ᐃᐃⵠΔᐃⵠⲆ[ΔⵠⵠⲆⲆⵠᐃ].stringify([34, ⲆΔ]));
					break;
				case ⵠⵠ.ᐃⵠⵠⲆᐃ:
				case ⵠⵠ.ⲆⲆᐃⵠΔ:
				case ⵠⵠ.ⵠᐃΔΔᐃ:
				case ⵠⵠ.ΔᐃⲆⵠᐃ:
				case ⵠⵠ.ᐃⲆΔⲆΔ:
				case ⵠⵠ.ΔΔⲆⲆᐃ:
				case ⵠⵠ.ⵠΔᐃⵠⵠ:
				case ⵠⵠ.ⲆᐃᐃⲆⵠ:
				case ⵠⵠ.ⲆᐃⵠΔⲆ:
				case ⵠⵠ.ⵠⲆᐃⵠⲆ:
				case ⵠⵠ.ΔᐃᐃⲆⲆ:
				case ⵠⵠ.ⲆⲆΔⵠⲆ:
				case ⵠⵠ.ΔⵠⵠⲆΔ:
				case ⵠⵠ.ΔᐃΔⵠⵠ:
				case ⵠⵠ.ᐃᐃᐃᐃᐃ:
				case ⵠⵠ.ΔⲆΔᐃⵠ:
				case ⵠⵠ.ᐃⲆⵠΔΔ:
				case ⵠⵠ.ᐃⵠᐃⲆΔ:
				case ⵠⵠ.ⲆⵠⲆᐃᐃ:
				case ⵠⵠ.ᐃᐃⲆᐃΔ:
				case ⵠⵠ.ᐃΔⲆⵠⲆ:
				case ⵠⵠ.ⵠⲆⲆᐃⵠ:
				case ⵠⵠ.Δⵠᐃⵠⵠ:
				case ⵠⵠ.ⲆⲆⲆⲆⵠ:
				case ⵠⵠ.ᐃⵠⵠᐃΔ:
				case ⵠⵠ.ⵠⲆΔⲆⵠ:
				case ⵠⵠ.ⲆΔᐃΔᐃ:
				case ⵠⵠ.ⲆΔΔⵠΔ:
				case ⵠⵠ.ⵠⵠΔⲆΔ:
				case ⵠⵠ.ⲆᐃⵠΔΔ:
				case ⵠⵠ.ⵠⵠᐃᐃΔ:
				case ⵠⵠ.ⲆⵠΔⵠⵠ:
				case ⵠⵠ.ᐃⵠⲆΔⵠ:
				case ⵠⵠ.ⵠⵠⵠᐃΔ:
				case ⵠⵠ.ⵠΔΔⵠΔ:
				case ⵠⵠ.ᐃⲆⲆⲆΔ:
				case ⵠⵠ.ᐃⲆⲆΔⲆ:
				case ⵠⵠ.ⲆⲆⲆⵠⲆ:
				case ⵠⵠ.ᐃⲆⵠⲆⲆ:
				case ⵠⵠ.ΔΔⵠⵠΔ:
				case ⵠⵠ.ΔⵠᐃⲆⲆ:
				case ⵠⵠ.ⲆᐃΔⵠᐃ:
				case ⵠⵠ.ΔⵠᐃΔΔ:
				case ⵠⵠ.ᐃⵠΔᐃⲆ:
				case ⵠⵠ.ⵠΔᐃΔΔ:
				case ⵠⵠ.ΔⲆⵠΔⲆ:
				case ⵠⵠ.ᐃΔⲆᐃΔ:
				case ⵠⵠ.ⵠⵠᐃΔΔ:
				case ⵠⵠ.ⵠⲆⲆΔⲆ:
				case ⵠⵠ.ⲆⵠᐃⲆⲆ:
				case ⵠⵠ.ⲆᐃᐃΔᐃ:
				case ⵠⵠ.ΔᐃΔᐃΔ:
				case ⵠⵠ.ΔᐃΔⲆⲆ:
				case ⵠⵠ.ΔᐃΔⵠᐃ:
				case ⵠⵠ.ᐃᐃⲆΔⲆ:
				case ⵠⵠ.ⲆⲆᐃᐃΔ:
					if (!ᐃⲆⵠ.ΔΔΔⵠⵠ) {
						if (ⲆΔ === ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ) ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -1;
						else ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = ⲆΔ
					}
					break;
				case ⵠⵠ.ⵠΔᐃᐃⵠ:
				case ⵠⵠ.ΔᐃⲆΔⲆ:
				case ⵠⵠ.ΔᐃⲆⵠⲆ:
				case ⵠⵠ.ⵠΔΔⲆⲆ:
				case ⵠⵠ.ᐃⵠⲆⲆΔ:
				case ⵠⵠ.ᐃᐃⵠⵠⵠ:
				case ⵠⵠ.ⲆΔⵠⵠᐃ:
				case ⵠⵠ.ΔᐃⵠΔΔ:
				case ⵠⵠ.ⵠΔⲆⵠᐃ:
				case ⵠⵠ.ⵠᐃΔⲆᐃ:
				case ⵠⵠ.ⲆⲆΔᐃΔ:
				case ⵠⵠ.ΔᐃⵠᐃΔ:
				case ⵠⵠ.ⲆΔⵠⲆᐃ:
				case ⵠⵠ.ΔⲆᐃᐃᐃ:
				case ⵠⵠ.ⲆᐃΔⲆᐃ:
				case ⵠⵠ.ΔΔⵠⲆΔ:
				case ⵠⵠ.ⲆⲆⵠⵠΔ:
				case ⵠⵠ.ⵠᐃⵠⵠⵠ:
				case ⵠⵠ.ⲆⲆⵠΔⲆ:
				case ⵠⵠ.ⲆΔΔⵠⵠ:
				case ⵠⵠ.ᐃⵠᐃΔΔ:
				case ⵠⵠ.ΔⵠⵠⵠΔ:
				case ⵠⵠ.ⵠᐃᐃᐃⲆ:
				case ⵠⵠ.ⲆⲆΔᐃΔⵠΔⵠΔ:
				case ⵠⵠ.ⲆᐃⵠⲆⲆ:
				case ⵠⵠ.ΔΔΔⲆᐃ:
				case ⵠⵠ.Δᐃᐃᐃⵠ:
				case ⵠⵠ.ΔᐃⵠⲆᐃ:
				case ⵠⵠ.ⵠᐃⲆᐃΔ:
				case ⵠⵠ.ᐃΔᐃΔΔ:
				case ⵠⵠ.ᐃᐃⵠΔⵠ:
				case ⵠⵠ.ⲆⲆⵠΔᐃ:
				case ⵠⵠ.ΔⲆⵠⲆⵠ:
				case ⵠⵠ.ⲆⲆΔⵠΔ:
					if (!ᐃⲆⵠ.ΔΔΔⵠⵠ) {
						ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -ᐃⲆΔ;
						var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
						if (ΔⲆⵠ && ⲆΔ === ΔⲆⵠ.right) this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⵠΔⵠᐃ[ⲆᐃⲆᐃⵠ].stringify([34, ⵠⵠ.ΔᐃᐃⵠⲆ]));
						else {
							ᐃⲆⵠ.ⲆΔⵠⲆΔ.wait = ᐃΔᐃⲆⵠ;
							this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ΔΔⵠᐃⵠⲆᐃ[ⲆᐃΔⲆⵠⵠⵠ].stringify([34, ⲆΔ]))
						}
					}
					break;
				case ⵠⵠ.ΔΔΔΔΔ:
				case ⵠⵠ.ΔΔⵠᐃⲆ:
				case ⵠⵠ.ⲆⲆⵠΔΔ:
				case ⵠⵠ.ⲆⵠⵠΔΔ:
				case ⵠⵠ.ⲆΔΔᐃΔ:
				case ⵠⵠ.Ⲇᐃᐃᐃᐃ:
				case ⵠⵠ.ⵠΔⵠᐃᐃ:
				case ⵠⵠ.ᐃᐃΔⲆᐃ:
				case ⵠⵠ.ⲆᐃⵠΔⵠ:
				case ⵠⵠ.ⵠⲆΔΔⵠ:
				case ⵠⵠ.ⲆⵠⲆᐃΔ:
				case ⵠⵠ.ⲆⵠΔⲆⲆ:
				case ⵠⵠ.ⲆᐃΔⵠⲆ:
				case ⵠⵠ.ΔΔΔᐃΔ:
				case ⵠⵠ.ⲆᐃⲆⲆᐃ:
				case ⵠⵠ.ᐃⲆᐃⲆᐃ:
				case ⵠⵠ.ⵠⵠΔᐃΔ:
				case ⵠⵠ.ΔΔᐃⲆᐃ:
				case ⵠⵠ.ⵠⵠΔⵠᐃ:
				case ⵠⵠ.ᐃⲆΔⵠⵠ:
				case ⵠⵠ.ⲆⵠⵠⲆᐃ:
				case ⵠⵠ.ᐃΔⵠΔᐃ:
				case ⵠⵠ.ΔⲆⵠⵠΔ:
				case ⵠⵠ.ᐃΔⲆᐃⵠ:
				case ⵠⵠ.ⵠΔⲆⲆΔ:
				case ⵠⵠ.ᐃⲆⲆⵠⵠ:
				case ⵠⵠ.ΔⵠΔⵠⲆ:
				case ⵠⵠ.ⵠᐃΔⵠΔ:
				case ⵠⵠ.ⵠᐃΔΔΔ:
					if (!ᐃⲆⵠ.ΔΔΔⵠⵠ) {
						ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -1;
						var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
						if (ΔⲆⵠ && ⲆΔ === ΔⲆⵠ.right) {
							this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⵠᐃⲆⵠᐃΔΔ[ⵠᐃⲆⵠᐃΔⵠ].stringify([34, ⵠⵠ.ΔᐃᐃⵠⲆ]))
						} else this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ΔⵠⵠⲆΔᐃΔ[ⵠⵠᐃⵠΔⵠⵠ].stringify([34, ⲆΔ]))
					}
					break;
				case ⵠⵠ.ⲆᐃᐃⵠⲆ:
				case ⵠⵠ.ᐃΔⲆᐃⲆ:
				case ⵠⵠ.ⲆⲆᐃΔΔ:
				case ⵠⵠ.ⲆΔΔᐃⲆ:
				case ⵠⵠ.ⵠⲆⲆⵠᐃ:
				case ⵠⵠ.ⲆⵠⲆⵠᐃ:
				case ⵠⵠ.ⲆᐃⲆⲆΔ:
				case ⵠⵠ.ΔⵠⲆΔᐃ:
				case ⵠⵠ.ⵠⵠⵠⵠΔ:
				case ⵠⵠ.ΔⲆᐃⵠⵠ:
					if (!ᐃⲆⵠ.ΔΔΔⵠⵠ) {
						ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -ⵠᐃⵠΔ;
						var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
						this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ΔⵠⵠⲆΔᐃΔ[ⵠⵠᐃⵠΔⵠⵠ].stringify([34, ⲆΔ]))
					}
					break;
				case ⵠⵠ.ᐃᐃⲆⵠΔ:
				case ⵠⵠ.ⵠⲆⲆᐃΔ:
				case ⵠⵠ.ⵠⵠⲆΔΔ:
				case ⵠⵠ.ⲆⵠⲆΔⵠ:
				case ⵠⵠ.ᐃΔΔΔᐃ:
				case ⵠⵠ.ΔᐃⵠⵠⲆ:
				case ⵠⵠ.ⲆⲆᐃⵠⲆ:
				case ⵠⵠ.ΔΔΔⲆΔ:
				case ⵠⵠ.ΔⲆΔΔⲆ:
				case ⵠⵠ.ᐃᐃⵠⲆᐃ:
				case ⵠⵠ.ΔⲆΔΔⵠ:
				case ⵠⵠ.ⲆΔⵠⵠⲆ:
				case ⵠⵠ.ⵠⵠΔⵠⵠ:
				case ⵠⵠ.ᐃⲆⲆⵠΔ:
				case ⵠⵠ.ΔⲆⵠⵠⲆ:
				case ⵠⵠ.ΔⲆⲆᐃⲆ:
				case ⵠⵠ.ᐃΔⵠⵠΔ:
					var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
					if (ΔⲆⵠ && ⲆΔ !== ΔⲆⵠ.ⵠΔⲆᐃΔ) ᐃⲆⵠ.ⲆΔΔΔⲆ.wait = ⵠⵠΔⲆᐃΔⲆ;
					this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ᐃᐃⵠΔᐃⵠⲆ[ⲆᐃⲆᐃⵠ].stringify([34, ⲆΔ]));
					break;
				case ⵠⵠ.ⵠⲆΔΔΔ:
				case ⵠⵠ.ⵠΔⲆᐃⲆ:
				case ⵠⵠ.ΔΔᐃΔΔ:
				case ⵠⵠ.ⵠⵠΔⲆⲆ:
				case ⵠⵠ.ⵠⲆⲆΔⵠ:
				case ⵠⵠ.ⵠⲆⵠⲆⲆ:
				case ⵠⵠ.ΔⵠⲆΔΔ:
				case ⵠⵠ.ᐃΔΔΔⲆ:
				case ⵠⵠ.ᐃⲆΔΔⵠ:
				case ⵠⵠ.ᐃΔⲆΔΔ:
				case ⵠⵠ.ᐃⲆⲆᐃΔ:
				case ⵠⵠ.ⲆⲆᐃΔⲆ:
				case ⵠⵠ.ⲆᐃⲆⵠΔ:
				case ⵠⵠ.ⲆⵠᐃΔⵠ:
				case ⵠⵠ.ΔⲆⲆⵠΔ:
				case ⵠⵠ.ᐃⵠⲆⵠΔ:
					this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ᐃᐃⲆᐃⲆⵠⲆ[ⵠⵠᐃⲆᐃΔⲆ].stringify([34, ⲆΔ]));
					break
			}
		};
		this.ᐃᐃᐃⲆⲆⲆΔᐃΔ = function(ⲆΔ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⵠⵠᐃᐃⲆ[ⵠΔᐃΔⲆᐃΔ].stringify([31, ⲆΔ]))
		};
		this.ᐃΔΔΔᐃⲆΔΔⲆ = function(ⲆΔ) {
			ᐃⲆⵠ.ⵠⲆᐃⲆΔ.wait = true;
			var Ⲇᐃ = ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⲆΔ);
			ᐃⲆⵠ.ᐃΔΔⲆ.ΔᐃΔᐃᐃⲆᐃ(ⲆΔ, Ⲇᐃ);
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆᐃⲆ()
		};
		this.ᐃΔⵠⲆⵠⲆⵠΔⲆ = function(ⲆΔ, Ⲇᐃ) {
			Settings.AutoRecycle.last = arguments[0];
			autoFeed();
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⵠⲆⵠⲆⵠⲆ[ⵠᐃⲆⵠᐃΔⵠ].stringify([18, ⲆΔ]))
		};
		this.ⲆⵠⲆᐃΔⵠⲆⵠⲆ = function(ⲆΔ, Ⲇᐃ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⲆⵠⵠⵠᐃⵠ[ⵠⵠΔⵠΔ].stringify([24, ⲆΔ]))
		};
		this.ⵠⵠⵠΔⲆΔΔⲆΔ = function(ⲆΔ) {
			ᐃⲆⵠ.ⵠⲆᐃⲆΔ.wait = true;
			var Ⲇᐃ = ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⲆΔ);
			ᐃⲆⵠ.ᐃΔΔⲆ.ⲆⵠⵠᐃⵠⲆᐃ(ⲆΔ, 1, Ⲇᐃ);
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆᐃⲆ()
		};
		this.ⲆⵠⲆⵠΔⵠⲆⲆᐃ = function(ⵠᐃⲆⵠ) {
			var ⲆΔ = ⵠᐃⲆⵠ[ⵠⲆΔⲆ];
			var ΔⲆⵠΔ = ⵠᐃⲆⵠ[2];
			ᐃⲆⵠ.ⵠⲆᐃⲆΔ.wait = ⵠⲆⵠⵠᐃ;
			var Ⲇᐃ = ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⲆΔ);
			ᐃⲆⵠ.ᐃΔΔⲆ.ⲆⵠⵠᐃⵠⲆᐃ(ⲆΔ, ΔⲆⵠΔ, Ⲇᐃ);
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆᐃⲆ()
		};
		this.ⵠᐃᐃᐃΔΔⲆⵠⲆ = function() {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⲆⵠⵠⵠᐃⵠ[ⵠⵠΔⵠΔ].stringify([ΔΔΔⵠᐃ]))
		};
		this.ⵠΔΔⵠᐃⵠᐃΔᐃ = function(Δᐃⵠ) {
			var ΔⵠᐃⵠΔ = 2 * Math.PI;
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⵠⵠᐃᐃⲆ[ⵠⵠⲆⵠᐃΔᐃ].stringify([36, Math.floor((Δᐃⵠ + ΔⵠᐃⵠΔ) % ΔⵠᐃⵠΔ * ⲆⲆΔΔⵠ / ΔⵠᐃⵠΔ)]))
		};
		this.ⵠᐃᐃⲆⲆᐃⲆΔᐃ = function(Δᐃⵠ) {
			var ΔⵠᐃⵠΔ = ᐃⲆᐃᐃ * Math.PI;
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⵠⵠᐃᐃⲆ[ⵠⵠⲆⵠᐃΔᐃ].stringify([ⵠΔᐃⵠ, Math.floor(255 * ((Δᐃⵠ + ΔⵠᐃⵠΔ) % ΔⵠᐃⵠΔ) / ΔⵠᐃⵠΔ)]))
		};
		this.ᐃᐃⲆᐃᐃΔΔⵠⵠ = function(ⵠᐃΔⲆⵠ) {
			Settings.Spectator.enabled || this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ΔᐃⲆᐃᐃᐃΔ[ᐃΔⵠΔᐃⲆᐃ].stringify([ⵠⲆᐃΔⵠⵠⲆ, ⵠᐃΔⲆⵠ]))
		};
		this.ⲆⲆⵠⵠΔⲆᐃᐃᐃ = function(ΔΔΔⵠΔΔΔ) {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⵠΔⵠᐃ[ⲆᐃⲆᐃⵠ].stringify([33, ΔΔΔⵠΔΔΔ]))
		};
		this.ᐃⲆⵠⲆΔΔᐃᐃΔ = function(ΔΔΔⵠΔΔΔ) {
			var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
			if (ᐃⲆⵠ.ΔΔΔⵠⵠ) {
				if (Math.random() > .5) ΔⲆⵠ.text.push(ΔΔΔⵠΔΔΔ.substring(ⲆⵠⲆⲆ, 25) + " ..." + ΔᐃΔᐃⲆ);
				else ΔⲆⵠ.text.push(ΔᐃΔᐃⲆ + "... " + ΔΔΔⵠΔΔΔ.substring(0, 25))
			} else ΔⲆⵠ.text.push(ΔΔΔⵠΔΔΔ);
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⵠΔⵠᐃ[ⲆᐃⲆᐃⵠ].stringify([ᐃᐃΔᐃⲆ, ΔΔΔⵠΔΔΔ]))
		};
		this.ⵠᐃⲆᐃᐃ = function(ΔⲆⵠ) {
			var ⲆΔⲆΔ = ΔⵠⲆⵠ.select.ⲆΔΔ;
			if (ⲆΔⲆΔ.length == 0) return;
			var ⵠᐃⲆⵠ = [11];
			var ᐃⲆⵠΔⲆ = [];
			ΔⵠΔⵠ.ᐃΔⲆᐃΔΔⵠ(ΔⲆⵠ, {
				x: ΔⵠⲆⵠ.ⲆⲆΔ.rx,
				y: ΔⵠⲆⵠ.ⲆⲆΔ.ry
			});
			ⵠᐃⲆⵠ.push(ΔⲆⵠ.x);
			ⵠᐃⲆⵠ.push(ΔⲆⵠ.y);
			for (var Ⲇᐃ = ᐃᐃⲆ; ⲆΔⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) ᐃⲆⵠΔⲆ.push(ⲆΔⲆΔ[Ⲇᐃ].ᐃⵠⲆᐃᐃΔⲆᐃᐃ);
			ⵠᐃⲆⵠ.push(ᐃⲆⵠΔⲆ);
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ΔΔⵠᐃⵠⲆᐃ[ⲆᐃΔⲆⵠⵠⵠ].stringify(ⵠᐃⲆⵠ))
		};
		this.ⲆⵠⵠᐃΔⲆⲆ = 0;
		this.ᐃᐃⲆⵠⲆᐃᐃ = {
			"Ⲇᐃ": ᐃⵠⵠⲆ,
			"ⲆⲆᐃⲆ": 0
		};
		this.ᐃᐃᐃᐃⵠⵠΔΔⲆ = function() {
			if (ΔᐃⲆΔΔ - this.ⲆⵠⵠᐃΔⲆⲆ > ⵠⲆⲆⵠⲆ.ⵠᐃⵠⵠᐃⵠⵠⲆⵠ) {
				this.ⲆⵠⵠᐃΔⲆⲆ = ΔᐃⲆΔΔ;
				var ᐃⵠⵠΔ = ᐃⲆⵠ.ⲆⲆΔ;
				var Ⲇᐃ = Math.floor(ᐃⵠⵠΔ.x / 100);
				var ⲆⲆᐃⲆ = Math.floor(ᐃⵠⵠΔ.y / 100);
				if (this.ᐃᐃⲆⵠⲆᐃᐃ.Ⲇᐃ != Ⲇᐃ || ⲆⲆᐃⲆ != this.ᐃᐃⲆⵠⲆᐃᐃ.ⲆⲆᐃⲆ) {
					this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ΔⵠⵠⲆΔᐃΔ[ⵠᐃⲆⵠᐃΔⵠ].stringify([28, Math.floor(-ᐃⵠⵠΔ.x), Math.floor(-ᐃⵠⵠΔ.y)]));
					this.ᐃᐃⲆⵠⲆᐃᐃ.Ⲇᐃ = Ⲇᐃ;
					this.ᐃᐃⲆⵠⲆᐃᐃ.ⲆⲆᐃⲆ = ⲆⲆᐃⲆ
				}
			}
		};
		this.ⲆⵠᐃᐃⲆⲆᐃ = 0;
		this.ᐃΔΔᐃᐃⵠΔΔⵠ = function() {
			if (ⵠⲆⲆⵠⲆ.ⲆΔᐃⲆΔⲆⵠⲆΔ < ΔᐃⲆΔΔ - this.ⲆⵠᐃᐃⲆⲆᐃ) {
				this.ⲆⵠᐃᐃⲆⲆᐃ = ΔᐃⲆΔΔ;
				this.ping()
			}
		};
		this.ᐃΔⵠΔᐃΔᐃΔᐃ = function() {
			ᐃⲆⵠ.reconnect.enabled = ᐃⲆᐃⵠⵠ;
			if (ΔⵠⲆ.ΔⵠΔⲆΔ != ΔⵠⲆ.ⵠⵠⲆᐃ.ΔⵠΔⲆΔ) return;
			ΔⵠⲆ.ΔⵠΔⲆΔ++;
			ΔⵠⲆ.ⵠⵠⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[96]]();
			ᐃΔᐃⵠ.connect()
		};
		this.ⲆⲆΔⲆᐃΔⲆⵠⲆ = function(ⵠⲆⵠᐃ) {
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ᐃⲆᐃΔᐃⵠⲆ]);
			for (var Ⲇᐃ = ΔⵠⲆⲆ; Ⲇᐃ < ⵠⲆⵠᐃ.length; Ⲇᐃ++) ᐃⲆⵠ.ᐃΔⵠⵠᐃ.push(ⵠⲆⵠᐃ[Ⲇᐃ])
		};
		this.ᐃᐃΔⲆΔⲆⵠⵠᐃ = function(ⲆΔ) {
			this.ⵠᐃⲆΔⲆ(ⲆⵠΔ.ⵠΔᐃΔ[ⲆΔ].ⲆⲆΔⵠⵠ + ⲆΔⵠ[ΔΔΔ.ᐃᐃΔᐃᐃΔΔ]);
			ᐃⲆⵠ.ᐃΔⵠⵠᐃ.push(ⲆΔ);
			var ᐃᐃΔΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[173]);
			ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ != -ⲆᐃΔ && ⵠ[442] == ᐃᐃΔΔⲆ.style.display && ΔᐃᐃⲆ.ΔⵠⲆⵠΔ[ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ].action()
		};
		this.ⵠⵠᐃⲆΔⵠᐃⵠᐃ = function() {
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ΔΔⵠᐃᐃᐃⲆ]);
			ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.wait = ⲆⵠΔᐃⵠ;
			ᐃⲆⵠ.ᐃΔⵠⵠᐃ = [];
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[173]).style.display = ⵠ[181]
		};
		this.ⲆⲆΔᐃΔΔⲆᐃⵠ = function(ⲆΔ) {
			if (ᐃⲆⵠ.id == ⲆΔ) {
				this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ΔᐃⵠⲆⵠᐃⵠ]);
				ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.wait = ΔᐃΔΔᐃ;
				ᐃⲆⵠ.ᐃΔⵠⵠᐃ = [];
				document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[173]).style.display = ⵠ[181]
			} else {
				this.ⵠᐃⲆΔⲆ(ⲆⵠΔ.ⵠΔᐃΔ[ⲆΔ].ⲆⲆΔⵠⵠ + ⲆΔⵠ[ΔΔΔ.ⵠΔⲆⲆⵠⲆᐃ]);
				for (var Ⲇᐃ = ⵠⵠⵠΔ; ᐃⲆⵠ.ᐃΔⵠⵠᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
					if (ᐃⲆⵠ.ᐃΔⵠⵠᐃ[Ⲇᐃ] == ⲆΔ) {
						ᐃⲆⵠ.ᐃΔⵠⵠᐃ.splice(Ⲇᐃ, 1);
						break
					}
				}
				var ᐃᐃΔΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[173]);
				ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ != -1 && ᐃᐃΔΔⲆ.style.display == ⵠ[442] && ΔᐃᐃⲆ.ΔⵠⲆⵠΔ[ΔᐃᐃⲆ.ⲆⵠⲆⲆⲆ].action()
			}
		};
		this.ᐃᐃⲆⵠΔⵠΔΔᐃ = function(ⵠⵠΔᐃ) {
			ᐃⲆⵠ.ⲆⲆΔᐃⵠ = false;
			if (!Settings.AutoRespawn.enabled && getUserProperty("alive") != true) {
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ⵠⵠⵠᐃⲆ]);
			}
			if (this.ⵠⵠⲆᐃ.ΔⵠΔⲆΔ != this.ΔⵠΔⲆΔ) return;
			this.ΔⵠΔⲆΔ++;
			ΔᐃᐃⲆ.ⲆⵠᐃΔⲆ(ᐃΔΔΔ.ⵠΔΔᐃᐃ);
			this.ⵠⵠⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[96]]()
		};
		this.ΔⵠᐃⲆⵠⵠⲆⲆΔ = function(ᐃⵠⲆⵠⲆⲆⵠ, ⵠᐃⲆⵠ) {
			Settings.Death.x = getWorldProperty("fast_units")[getUserProperty("uid")].x
			Settings.Death.y = getWorldProperty("fast_units")[getUserProperty("uid")].y
			ᐃⲆⵠ.ⲆⲆΔᐃⵠ = false;
			var ⲆΔⲆⵠᐃ = new Uint16Array(ⵠᐃⲆⵠ);
			var ⵠⵠᐃᐃⵠⲆⵠⲆⵠ = new Uint32Array(ⵠᐃⲆⵠ);
			ᐃⲆⵠ.ᐃⵠᐃᐃᐃΔΔ.ᐃⵠⲆⵠⲆⲆⵠ = ⵠⲆΔΔ[ᐃⵠⲆⵠⲆⲆⵠ][Math.floor(Math.random() * ⵠⲆΔΔ[ᐃⵠⲆⵠⲆⲆⵠ].length)];
			ᐃⲆⵠ.ᐃⵠᐃᐃᐃΔΔ.ᐃⲆⲆⲆⲆ = ΔⵠΔⵠ.ⵠⵠᐃᐃᐃⲆΔ(ⲆⵠΔ.ⵠΔᐃΔ[ᐃⲆⵠ.id].ᐃⲆⲆⲆⲆ);
			ᐃⲆⵠ.ᐃⵠᐃᐃᐃΔΔ.ⵠⵠⲆᐃⲆⲆⲆ = ΔⵠΔⵠ.ⵠⵠᐃᐃᐃⲆΔ(ⵠⵠᐃᐃⵠⲆⵠⲆⵠ[1]);
			ᐃⲆⵠ.ᐃⵠᐃᐃᐃΔΔ.ΔᐃΔⵠⲆ = ⲆΔⲆⵠᐃ[1];
			this.ⵠᐃⲆΔⲆ(ⲆΔⵠ[ΔΔΔ.ΔΔⲆⵠΔᐃᐃ]);
			if (Settings.AutoRespawn.enabled) {
				getClientProperty("steal_token") && getClientProperty("steal_token").bind(window.client)()
				mapping.waiting = false;
				setTimeout(() => {
					mapping[c](mapping.ⲆᐃⲆΔⲆΔⵠ());
				}, 40);
			} else {
			 if (this.ΔⵠΔⲆΔ != this.ⵠⵠⲆᐃ.ΔⵠΔⲆΔ) return;
			this.ΔⵠΔⲆΔ++;
			ΔᐃᐃⲆ.ⲆⵠᐃΔⲆ(ⲆΔᐃΔΔⵠΔ.ⵠΔΔᐃᐃ);
			this.ⵠⵠⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[96]]()
		}
		}
		this.ping = function() {
			this.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⵠⲆⲆⵠⲆ.ΔⵠᐃΔᐃⲆⲆⲆⵠ)
		};
		this.ᐃⲆΔⲆᐃⲆⵠⲆⵠ = function() {
			3 == this.ⵠⵠⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[160]] && (this.ΔⵠⲆⲆᐃᐃᐃ -= ⵠⲆⲆⵠⲆ.ⲆᐃⲆΔΔΔⵠ)
		};
		this.ⲆⲆΔⲆΔⵠⵠⲆΔ = function() {
			if (ⵠⲆⲆⵠⲆ.ⲆⲆΔᐃΔⵠᐃⵠⵠ < ⲆΔΔⲆ) this.ΔⵠⲆⲆᐃᐃᐃ = ΔᐃⲆΔΔ;
			if (ΔᐃⲆΔΔ - this.ΔⵠⲆⲆᐃᐃᐃ > ⵠⲆⲆⵠⲆ.ⲆᐃⲆΔΔΔⵠ) {
				this.ΔⵠⲆⲆᐃᐃᐃ = ΔᐃⲆΔΔ;
				this.ᐃΔⵠΔᐃΔᐃΔᐃ()
			}
		};
		this.ⲆᐃᐃΔΔⵠⲆⵠⵠ = function(ΔⲆⵠⲆ) {
			ᐃⲆΔⵠⵠⲆⲆ++;
			clearTimeout(this.ⲆⲆΔⵠᐃ);
			document[ⲆᐃⲆⵠΔΔⲆ[185]]("commandMainBoxName")[ⲆᐃⲆⵠΔΔⲆ[112]] = this.ΔᐃΔⲆΔ[this.ᐃⲆⵠΔⵠ][this.ΔΔⲆⲆⵠΔⵠ[this.ᐃⲆⵠΔⵠ]]["a"];
			document[ⲆᐃⲆⵠΔΔⲆ[185]]("exploreForest").src = "img/forest-leaf.png";
			document[ⲆᐃⲆⵠΔΔⲆ[185]]("exploreWinter").src = "img/winter-flake.png";
			document[ⲆᐃⲆⵠΔΔⲆ[185]]("exploreDesert").src = "img/desert-cactus.png";
			document[ⲆᐃⲆⵠΔΔⲆ[185]]("exploreLava").src = "img/lava-volcano.png";
			this.ΔⵠⲆⲆᐃᐃᐃ = ΔᐃⲆΔΔ;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ⵠᐃΔᐃⵠ.ⵠⲆᐃⲆᐃ = ᐃⲆⵠ.ⲆᐃⵠⲆ.ⵠᐃΔᐃⵠ.ΔⵠΔΔΔ;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃⵠΔⵠᐃᐃΔ.ⵠⲆᐃⲆᐃ = ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃⵠΔⵠᐃᐃΔ.ΔⵠΔΔΔ;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃΔⵠᐃⵠΔⲆ.ⵠⲆᐃⲆᐃ = ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃΔⵠᐃⵠΔⲆ.ΔⵠΔΔΔ;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃⲆⲆⵠΔⲆⲆ.ⵠⲆᐃⲆᐃ = ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃⲆⲆⵠΔⲆⲆ.ΔⵠΔΔΔ;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃᐃⵠᐃⵠ.ⵠⲆᐃⲆᐃ = ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃᐃⵠᐃⵠ.ΔⵠΔΔΔ;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃᐃⲆᐃ = 1;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.c = 1;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ⲆΔⲆ = 1;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.Δᐃᐃ = ⲆΔΔΔ;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.Ⲇⵠⵠ = ᐃᐃΔ;
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃᐃᐃΔⲆⵠᐃ = 1;
			ᐃⲆⵠ.ⲆᐃⲆᐃΔⵠⵠ = ⲆᐃᐃΔΔ;
			ΔᐃᐃⲆ.ⲆⲆⵠⲆᐃ.display = 0;
			ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ = [];
			ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ = [];
			ᐃⲆⵠ.ᐃΔΔⲆ.max = ΔᐃᐃΔ.ⵠⵠⲆⵠⵠΔᐃ;
			ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⲆⵠⵠᐃᐃΔ = ⵠⲆΔ;
			ᐃⲆⵠ.ᐃΔΔⲆ.ⲆⲆⲆᐃⵠ = 0;
			ᐃⲆⵠ.ᐃΔΔⲆ.id = -ΔΔΔᐃ;
			ΔᐃᐃⲆ.ⲆᐃΔᐃⲆΔᐃ = ⵠⲆⲆ;
			ΔᐃᐃⲆ.ⵠⲆⲆΔᐃΔⲆ = 1;
			ΔᐃᐃⲆ.ⲆΔⲆⲆⲆΔⲆ = ΔⲆᐃᐃ;
			ΔᐃᐃⲆ.ΔΔΔⵠᐃᐃᐃ = 1;
			ᐃⲆⵠ.ⲆⲆΔᐃⵠ = true;
			ᐃⲆⵠ.ᐃΔΔⲆ.ᐃⵠΔᐃⵠᐃⵠ.stop();
			if (!engineActive) {
				initEngine();
				engineActive = true
			}
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ = [];
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔⵠᐃΔ = false;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔⲆᐃⵠᐃⵠⲆΔ = false;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -1;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.id = -1;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆΔⵠΔⲆ = ⲆΔⲆᐃΔ;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⵠⵠΔΔᐃ = ΔⲆΔᐃᐃ;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃᐃΔᐃᐃ = ᐃⲆⲆᐃᐃ;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆᐃᐃΔᐃΔᐃ = ΔⲆΔᐃΔ;
			ᐃⲆⵠ.ᐃⵠⲆᐃ.timeout = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃᐃⲆⲆΔ, 0, Ⲇⵠᐃ, ⵠⵠⵠΔ, ΔⵠⲆⲆ, 1);
			ᐃⲆⵠ.ⲆΔⵠⲆΔ.timeout = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⵠΔΔⲆ, ⵠΔᐃⵠ, 1, 0, 1 / ΔⲆⲆΔΔ, 1);
			ᐃⲆⵠ.ⲆΔⵠⲆΔ.wait = false;
			ᐃⲆⵠ.ⲆΔΔΔⲆ.timeout = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⲆΔᐃΔ, Δⵠⵠⵠ, ⲆΔΔΔ, 0, ⵠⲆⲆ / 5, ⲆᐃΔ);
			ᐃⲆⵠ.ⲆΔΔΔⲆ.wait = false;
			ᐃⲆⵠ.ⵠⲆᐃⲆΔ.timeout = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, Ⲇᐃⵠ, Δⵠᐃ, 0, 1, ⲆΔΔΔ);
			ᐃⲆⵠ.ⵠⲆᐃⲆΔ.wait = false;
			ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.id = -ⵠΔᐃ;
			ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.ⵠⵠΔᐃ = -1;
			ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.wait = ⵠᐃⵠⲆⲆ;
			ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.timeout = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0, ΔΔⵠΔ, 0, 1 / 30, ΔΔⵠΔ);
			ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.x = -1;
			ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.y = -ⵠⲆΔⲆ;
			ΔᐃᐃⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] = ΔⲆΔⵠΔ;
			ΔᐃᐃⲆ.Δⵠⵠⵠⵠ.ⵠΔᐃΔ = [];
			ᐃⲆⵠ.ᐃᐃΔⵠⵠ.enabled = ⵠᐃⵠⲆⲆ;
			ⲆⵠΔ.mode = ΔⲆⵠⲆ[1];
			if (undefined !== ΔⲆⵠⲆ[20] && ΔΔᐃⵠⵠ !== ΔⲆⵠⲆ[21]) {
				ⲆⵠΔ.ΔᐃᐃⵠΔ = ΔⲆⵠⲆ[20];
				ⲆⵠΔ.ᐃⵠᐃᐃᐃ = ΔⲆⵠⲆ[21];
				ⲆⵠΔ.w = ⲆⵠΔ.ΔᐃᐃⵠΔ * ⲆⵠΔ.ᐃᐃⵠΔⲆᐃᐃ;
				ⲆⵠΔ.ⲆΔⲆ = ⲆⵠΔ.ᐃⲆⵠⲆᐃⵠⲆ * ⲆⵠΔ.ᐃⵠᐃᐃᐃ
			}
			ⲆⵠΔ.ΔᐃⲆⲆᐃⵠⵠ = ΔⲆⵠⲆ[22];
			ⲆⵠΔ.ⵠᐃⵠΔΔ = ΔⲆⵠⲆ[23];
			ΔⵠⲆ.ΔⵠΔᐃⲆⲆⵠ(ΔⲆⵠⲆ[24]);
			ΔⵠⲆ.ᐃⵠΔΔⵠⲆΔⵠᐃ(ΔⲆⵠⲆ[25]);
			ᐃⲆⵠ.ᐃⲆΔΔⲆ.ᐃᐃᐃⵠΔ = ΔⲆⵠⲆ[26];
			ᐃⲆⵠ.ⵠΔᐃᐃⵠΔⲆ = ⵠᐃⲆⲆ;
			ᐃⲆⵠ.ΔⵠⲆⲆⵠ.ᐃᐃᐃⵠΔ = ΔⲆⵠⲆ[27];
			ⲆⵠΔ.ⵠᐃᐃᐃⲆⲆⵠⵠⲆ(ΔⲆⵠⲆ[19]);
			ⲆⵠΔ.time = ΔⲆⵠⲆ[5];
			ⲆⵠΔ.ⵠΔⵠΔⲆ.ΔᐃΔΔⵠ = ΔⲆⵠⲆ[15];
			ⲆⵠΔ.ⵠΔⵠΔⲆ.ⵠΔⲆΔⲆ = (new Date).getTime();
			ΔᐃᐃⲆ.ᐃⲆⲆⲆ.ⲆⲆⵠⲆⲆⲆⵠ = ΔⲆⵠⲆ[ᐃΔⲆⲆΔ];
			ⲆⵠΔ.transition = ᐃΔⵠᐃⲆ;
			ᐃⲆⵠ.ⲆΔᐃ = ΔⲆⵠⲆ[2];
			ΔᐃᐃⲆ.ᐃⲆⲆⲆ.reset();
			ᐃⲆⵠ.ᐃΔⵠⵠᐃ = ΔⲆⵠⲆ[8];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⲆᐃⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠⵠⲆᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆΔⵠⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⵠΔΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃΔΔᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃⲆⵠᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆΔⲆΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔΔⲆⲆᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔᐃⵠⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃᐃⲆⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⵠΔⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃᐃⲆⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⵠⵠⲆΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⵠⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃᐃᐃᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⲆΔᐃⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃΔⲆⵠⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆᐃⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.Δⵠᐃⵠⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆⲆⲆⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆΔᐃΔᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆΔΔⵠΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠΔⲆΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⵠΔΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠᐃᐃΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠΔⵠⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠᐃⲆΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⲆᐃᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⲆᐃΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆᐃⵠΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠⲆΔⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠⵠᐃΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔⵠΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⵠⲆᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃΔⲆΔⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆⵠᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⲆⵠᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⲆⲆΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⵠⲆΔᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆΔᐃΔΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⲆΔⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔᐃΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⵠⵠΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⵠᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⵠΔᐃⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⲆⵠⲆᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⲆⲆⵠᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⵠΔⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃⵠΔⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔΔⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆΔΔᐃⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃΔΔᐃⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆΔⵠⲆᐃⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃⲆⲆᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠᐃⵠΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃⵠΔᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔᐃⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆΔᐃΔᐃⲆᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠᐃⲆⵠΔⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⵠⵠⲆⵠᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠᐃⲆΔᐃⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔᐃⵠᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆΔᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⲆΔΔΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆΔᐃⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔΔⲆΔⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⲆⲆΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⲆΔⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆⲆⵠⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠⵠᐃΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⵠⲆⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔΔⵠⵠΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆΔⲆⵠ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⲆΔⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆᐃᐃΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⵠᐃⲆⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃΔⵠᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⵠᐃΔΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠΔᐃⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠΔᐃΔΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔⲆⵠΔⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ᐃΔⲆᐃΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠᐃΔΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆΔⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃᐃΔᐃ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠᐃⲆⲆ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔᐃΔ] = [];
			ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⲆⲆ] = [];
			ⲆⵠΔ.ⵠⵠⲆⵠⲆ = [];
			ⲆⵠΔ.ⲆⵠᐃΔᐃΔⵠ = ΔⲆⵠⲆ[7];
			ᐃⲆⵠ.id = ΔⲆⵠⲆ[9];
			ᐃⲆⵠ.Ⲇᐃᐃⵠ = ᐃⲆⵠ.id * ⲆⵠΔ.ⲆⵠᐃΔᐃΔⵠ;
			ⲆΔⵠⲆ.loaded && (ⲆΔⵠⲆ.ⵠΔᐃΔ[ⵠⵠⲆⵠ].Ⲇᐃᐃⵠ = ᐃⲆⵠ.Ⲇᐃᐃⵠ, ⲆΔⵠⲆ.ⵠΔᐃΔ[0].ⲆΔⵠⲆᐃⲆΔ = ΔⲆⲆ);
			ΔⲆᐃⵠΔ.ᐃⵠΔⵠΔⲆᐃ();
			ᐃⲆⵠ.ⲆⲆΔ.ⲆΔΔⲆΔ(ΔⲆⵠⲆ[ΔΔᐃΔ], ΔⲆⵠⲆ[ΔⵠⵠᐃⲆ]);
			ⲆⵠΔ.ⵠΔᐃΔ = [];
			var ⵠΔᐃΔ = ⲆⵠΔ.ⵠΔᐃΔ;
			for (var Ⲇᐃ = Δⵠⵠⵠ; Ⲇᐃ < ΔⲆⵠⲆ[11]; Ⲇᐃ++) ⵠΔᐃΔ.push(new ΔⵠΔⵠⲆⲆⵠΔᐃ);
			for (var Ⲇᐃ = 0, ᐃᐃⲆᐃ = ΔⲆⵠⲆ[4]; ᐃᐃⲆᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
				var ΔⲆⵠ = ⵠΔᐃΔ[ᐃᐃⲆᐃ[Ⲇᐃ]["i"]];
				ΔⲆⵠ.ⲆⲆΔⵠⵠ = ᐃᐃⲆᐃ[Ⲇᐃ]["n"];
				ΔⲆⵠ.ⲆΔⵠⵠ = ᐃᐃⲆᐃ[Ⲇᐃ]["s"];
				ΔⲆⵠ.ⵠⵠΔΔⵠ = ᐃᐃⲆᐃ[Ⲇᐃ]["a"];
				ΔⲆⵠ.ⵠⲆΔΔⲆ = ᐃᐃⲆᐃ[Ⲇᐃ]["c"];
				ΔⲆⵠ.ⵠΔⲆΔᐃ = ᐃᐃⲆᐃ[Ⲇᐃ]["b"];
				ΔⲆⵠ.ΔⵠᐃⲆΔ = ᐃᐃⲆᐃ[Ⲇᐃ]["d"];
				ΔⲆⵠ.ⵠⵠⵠΔⲆⵠⲆ = ᐃᐃⲆᐃ[Ⲇᐃ]["g"];
				ΔⲆⵠ.level = ᐃᐃⲆᐃ[Ⲇᐃ]["l"];
				ΔⲆⵠ.ᐃⲆⲆⲆⲆ = ΔⵠΔⵠ.ⲆᐃΔⵠΔᐃⲆ(ᐃᐃⲆᐃ[Ⲇᐃ]["p"]);
				ΔⲆⵠ.ⲆⲆΔᐃⵠ = true;
				ⲆᐃⲆᐃΔᐃΔ === ΔᐃⲆⲆ && (ΔⲆⵠ.ⲆⲆΔⵠⵠ += "|" + ᐃᐃⲆᐃ[Ⲇᐃ]["i"])
			}
			ᐃⲆⵠ.ᐃⲆᐃⲆΔ.sort();
			ΔᐃᐃΔ.ᐃΔΔⲆⲆᐃᐃ === ⲆⵠΔ.mode && ⲆⵠΔ.ⵠΔᐃΔ[ᐃⲆⵠ.id].ⲆⲆΔⵠⵠ === ⵠ[217] ? ᐃⲆⵠ.ⲆⵠΔⵠΔⲆΔ = true : ᐃⲆⵠ.ⲆⵠΔⵠΔⲆΔ = false;
			ΔᐃᐃΔ.ᐃΔⲆⲆᐃ === ⲆⵠΔ.mode && ΔᐃᐃΔ.ᐃⵠⵠᐃⵠᐃᐃ === ⲆⵠΔ.ⵠΔᐃΔ[ᐃⲆⵠ.id].ⲆΔⵠⵠ ? ᐃⲆⵠ.ΔΔΔⵠⵠ = true : ᐃⲆⵠ.ΔΔΔⵠⵠ = false;
			if (ΔᐃᐃΔ.ᐃᐃΔⲆΔ === ⲆⵠΔ.mode && ΔᐃᐃΔ.ᐃⲆᐃᐃⵠⲆⵠ === ⲆⵠΔ.ⵠΔᐃΔ[ᐃⲆⵠ.id].ⲆΔⵠⵠ) ᐃⲆⵠ.ᐃⲆΔΔΔⵠΔ = true;
			else ᐃⲆⵠ.ᐃⲆΔΔΔⵠΔ = false;
			ᐃΔΔⵠ.set("starve_token", ᐃⲆⵠ.ΔⲆⵠⵠᐃ);
			if (ⵠΔᐃⵠ === ΔⲆⵠⲆ[ᐃⵠⲆⵠᐃ]) {
				ᐃⲆⵠ.ΔⵠⲆᐃⵠ.ⵠᐃᐃⵠᐃ = ⵠᐃⲆⲆ;
				ΔᐃᐃⲆ.ᐃⲆⲆⲆ.restore(ΔⲆⵠⲆ[17]);
				var ᐃΔΔⲆ = ΔⲆⵠⲆ[ⲆᐃⵠⲆΔ];
				if (ᐃΔΔⲆ[ⵠⵠ.ⵠᐃⵠⲆ]) ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⲆⵠΔⲆⵠᐃ(1, 0);
				for (var Ⲇᐃ = ᐃᐃᐃ; Ⲇᐃ < ᐃΔΔⲆ.length; Ⲇᐃ++) {
					if (ᐃΔΔⲆ[Ⲇᐃ]) {
						if (ⵠⵠ.ⵠᐃⵠⲆ == Ⲇᐃ) continue;
						else if (ⵠⵠ.ΔᐃᐃⵠⲆ == Ⲇᐃ) continue;
						else this.ⵠᐃᐃᐃΔⲆΔ([0, Ⲇᐃ, ᐃΔΔⲆ[Ⲇᐃ]])
					}
				}
				ᐃⲆⵠ.ΔⵠⲆᐃⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] = ᐃΔⵠᐃⲆ
			} else {
				if (ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ === ⲆⵠΔ.mode) this.ⵠᐃᐃᐃΔⲆΔ([0, ⵠⵠ.ⵠᐃⲆᐃⵠ, 1]);
				else if (ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃᐃΔⲆΔ) {
					ᐃⲆⵠ.ᐃⲆΔΔΔⵠΔ ? this.ⵠᐃᐃᐃΔⲆΔ([ⵠⵠⵠΔ, ⵠⵠ.ⲆᐃΔⵠᐃ, ⵠΔⲆΔΔ]) : this.ⵠᐃᐃᐃΔⲆΔ([ᐃᐃᐃ, ⵠⵠ.ⲆᐃᐃⲆⵠ, ᐃⵠΔⲆ])
				}
				ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃΔⵠᐃᐃ || ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃᐃΔⲆΔ || ⲆⵠΔ.mode === ΔᐃᐃΔ.Δᐃⵠᐃᐃ || ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ === ⲆⵠΔ.mode ? (ᐃⲆⵠ.ΔⵠⲆᐃⵠ.ⵠᐃᐃⵠᐃ = (new Date).getTime(), ᐃⲆⵠ.ΔⵠⲆᐃⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] = true, ᐃⲆⵠ.ΔⵠⲆᐃⵠ.value = ΔⲆⵠⲆ[ΔⲆᐃΔᐃ], ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ.ⵠΔⲆΔⲆ()) : (ᐃⲆⵠ.ΔⵠⲆᐃⵠ.ⵠᐃᐃⵠᐃ = 0, ᐃⲆⵠ.ΔⵠⲆᐃⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] = Ⲇⵠᐃᐃᐃ, ᐃⲆⵠ.ΔⵠⲆᐃⵠ.value = ᐃᐃⲆ);
				ᐃⲆⵠ.ⲆⵠᐃᐃⵠⲆᐃ = ΔⲆⵠⲆ[12][ⲆᐃⲆⵠΔΔⲆ[299]]()
			}
			Timers.HealTimer = (new Date).getTime();
			Timers.GaugeTimer = (new Date).getTime();
			ᐃⲆⵠ.ΔⲆⲆΔⵠ.enabled = ΔⲆⵠⲆ[ᐃⵠⲆᐃΔ];
			ᐃⲆⵠ.ΔⲆⲆΔⵠ.ⵠᐃᐃⵠᐃ = -ⵠⲆⲆ;
			ᐃⲆⵠ.ΔⲆⲆΔⵠ.label = null;
			ᐃⲆⵠ.ΔⲆⲆΔⵠ.now = -1;
			ᐃΔΔⵠ.set("starve_token_id", ᐃⲆⵠ.ⲆⵠᐃᐃⵠⲆᐃ);
			if (ᐃⲆⵠ.reconnect.enabled) {
				ᐃⲆⵠ.reconnect.rotate = 0;
				ᐃⲆⵠ.reconnect.enabled = ΔⵠΔⲆⵠ
			} else {
				ᐃΔΔΔ.ⲆⵠᐃΔⲆ(ΔᐃᐃⲆ.ⵠΔΔᐃᐃ);
				ga && ga(ⵠ[554], ⵠ[106], ⵠ[117], ⵠ[66], "S" + ᐃΔΔΔ.ⲆΔⵠⵠ + "A" + ᐃΔΔΔ.ⵠⵠΔΔⵠ)
			}
		};
		this.connect = function() {
			ΔⵠⲆ.ⵠⲆⵠⵠᐃΔΔ = 0;
			ΔⵠⲆ.Δⵠᐃᐃⵠᐃᐃ()
		};
		this.ⵠᐃΔᐃᐃⲆⵠ = [];
		this.ⵠΔΔⵠⵠⲆⵠⲆⲆ = function(ⲆⲆⲆⲆᐃᐃⲆ) {
			const ΔⲆΔΔᐃ = ΔⵠⲆ.Ⲇᐃᐃⵠⵠ.filter((Ⲇⵠ => Ⲇⵠ[ⵠ[280]] === ⲆⲆⲆⲆᐃᐃⲆ));
			const regions = {};
			for (let Ⲇᐃ = ⵠⲆᐃ; Ⲇᐃ < ΔⲆΔΔᐃ.length; Ⲇᐃ++) {
				const ⲆⵠᐃⲆΔ = ΔⲆΔΔᐃ[Ⲇᐃ];
				const ⲆⲆⲆᐃⲆ = ⲆⵠᐃⲆΔ["r"];
				if (ⲆⲆⲆᐃⲆ === ⵠΔⲆⵠΔ) continue;
				if (regions[ⲆⲆⲆᐃⲆ] === ⵠⲆⵠᐃⲆ) regions[ⲆⲆⲆᐃⲆ] = [];
				regions[ⲆⲆⲆᐃⲆ].push(ⲆⵠᐃⲆΔ)
			}

			function ᐃⲆΔⵠΔⵠΔ(ⲆⲆⲆᐃⲆ) {
				ΔⵠⲆ.ⵠᐃΔᐃᐃⲆⵠ[ⲆⲆⲆⲆᐃᐃⲆ] = ⲆⲆⲆᐃⲆ;
				const ΔⲆΔΔᐃ = regions[ⲆⲆⲆᐃⲆ];
				const ⲆⵠᐃⲆΔ = ΔⲆΔΔᐃ[Math.floor(Math.random() * ΔⲆΔΔᐃ.length)];
				ΔⵠⲆ.ⲆΔΔⲆᐃⵠΔ({
					domain: ᐃΔᐃⲆΔⲆⲆ,
					is_tls: ΔᐃⵠⲆ,
					id: ⲆⵠᐃⲆΔ[ⵠ[513]],
					p: ⲆⵠᐃⲆΔ["p"]
				})
			}
			if (undefined !== ΔⵠⲆ.ⵠᐃΔᐃᐃⲆⵠ[ⲆⲆⲆⲆᐃᐃⲆ]) {
				ᐃⲆΔⵠΔⵠΔ(ΔⵠⲆ.ⵠᐃΔᐃᐃⲆⵠ[ⲆⲆⲆⲆᐃᐃⲆ]);
				return
			}
			let ⵠⵠΔⲆⵠΔⲆ = ΔⵠΔ;

			function ⵠⲆΔᐃᐃΔⵠ(ΔⲆΔΔᐃ) {
				const ⵠⲆΔΔᐃᐃᐃ = new ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[19]];
				const ⲆⵠᐃⲆΔ = ΔⲆΔΔᐃ[ΔⲆⲆ];
				const ⲆⲆⲆᐃΔΔΔ = ⲆⵠᐃⲆΔ["p"];
				const ⲆⲆⲆᐃⲆ = ⲆⵠᐃⲆΔ["r"];
				const ᐃΔΔⵠⲆⵠⵠ = ⲆⲆⲆᐃΔΔΔ[Math.floor(Math.random() * ⲆⲆⲆᐃΔΔΔ.length)];
				ⵠⲆΔΔᐃᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[36]](ⵠ[253], "https://" + ᐃΔΔⵠⲆⵠⵠ + "." + ᐃΔᐃⲆΔⲆⲆ + "/", true);
				ⵠⲆΔΔᐃᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
					if (4 === ⵠⲆΔΔᐃᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[160]]) {
						if (ⵠⵠΔⲆⵠΔⲆ === ⵠᐃⲆ) return;
						ⵠⵠΔⲆⵠΔⲆ = 0;
						ᐃⲆΔⵠΔⵠΔ(ⲆⲆⲆᐃⲆ)
					}
				};
				ⵠⲆΔΔᐃᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[71]]()
			}

			function ⵠΔᐃΔΔΔⵠⵠᐃ() {
				if (0 === ⵠⵠΔⲆⵠΔⲆ) return;
				ⵠⵠΔⲆⵠΔⲆ = ᐃᐃᐃ;
				const ⲆⲆᐃⵠᐃ = ⵠⵠⲆΔᐃᐃᐃⲆΔ.Object.keys(regions);
				const ⲆⵠⲆⵠⵠΔᐃ = Math.floor(ⲆⲆᐃⵠᐃ.length * Math.random());
				const ⲆⵠᐃⵠΔ = ⲆⲆᐃⵠᐃ[ⲆⵠⲆⵠⵠΔᐃ];
				ᐃⲆΔⵠΔⵠΔ(ⲆⵠᐃⵠΔ)
			}
			for (let ⲆⲆⲆᐃⲆ in regions) {
				const ΔⲆΔΔᐃ = regions[ⲆⲆⲆᐃⲆ];
				ⵠⲆΔᐃᐃΔⵠ(ΔⲆΔΔᐃ)
			}
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]](ⵠΔᐃΔΔΔⵠⵠᐃ, 5e3)
		};
		this.ᐃⲆⵠΔΔⵠⵠⵠΔ = function() {
			let ⲆⲆⲆⲆᐃᐃⲆ = ΔᐃᐃΔ.ⵠᐃᐃΔⲆΔᐃ[ΔⵠⲆ.ᐃⲆⵠΔⵠ];
			let ᐃⲆΔᐃⲆⵠΔⲆΔ = ΔⵠⲆ.ΔΔⲆⲆⵠΔⵠ[ΔⵠⲆ.ᐃⲆⵠΔⵠ];
			let ΔⵠΔΔᐃⵠΔ = ΔⵠⲆ.Ⲇᐃᐃⵠⵠ.find((Ⲇⵠ => Ⲇⵠ[ⵠ[280]] == ⲆⲆⲆⲆᐃᐃⲆ && Ⲇⵠ["idx"] == ᐃⲆΔᐃⲆⵠΔⲆΔ));
			if (undefined === ΔⵠΔΔᐃⵠΔ) ΔⵠⲆ.ⵠΔΔⵠⵠⲆⵠⲆⲆ(ⲆⲆⲆⲆᐃᐃⲆ);
			else ΔⵠⲆ.ⲆΔΔⲆᐃⵠΔ({
				domain: ᐃΔᐃⲆΔⲆⲆ,
				is_tls: 1,
				id: ΔⵠΔΔᐃⵠΔ[ⵠ[513]],
				p: ΔⵠΔΔᐃⵠΔ["p"]
			})
		};
		this.Δⵠᐃᐃⵠᐃᐃ = function() {
			if (ⲆᐃΔⲆᐃᐃⵠ !== undefined && undefined !== ⵠⵠⵠΔΔⵠⲆ) {
				ΔⵠⲆ.ⲆΔΔⲆᐃⵠΔ({
					domain: ᐃΔᐃⲆΔⲆⲆ,
					is_tls: ⲆᐃΔ,
					id: ⵠⵠⵠΔΔⵠⲆ + ⲆᐃΔⲆᐃᐃⵠ,
					p: ΔⵠⲆ.ⲆⲆⲆᐃⲆΔⵠ[ⵠⵠⵠΔΔⵠⲆ]
				});
				return
			}
			if (undefined !== ᐃΔᐃΔⵠ) {
				ΔⵠⲆ.ⲆΔΔⲆᐃⵠΔ({
					domain: ᐃΔᐃΔⵠ["domain"],
					is_tls: ᐃΔᐃΔⵠ["ssl"],
					id: ᐃΔᐃΔⵠ[ⵠ[513]],
					p: [ᐃΔᐃΔⵠ["p"]]
				});
				return
			}
			ΔⵠⲆ.ᐃⲆⵠΔΔⵠⵠⵠΔ()
		};
		this.ⲆΔΔⲆᐃⵠΔ = function(ⵠⲆᐃⲆⵠⵠᐃ) {
			let ⲆⵠⲆⲆΔᐃⲆ = ⵠⲆᐃⲆⵠⵠᐃ["domain"];
			let ⵠᐃⲆⲆⵠᐃⵠΔΔ = ⵠⲆᐃⲆⵠⵠᐃ["is_tls"];
			let ⵠᐃⵠᐃᐃᐃΔⲆᐃ = ⵠⲆᐃⲆⵠⵠᐃ[ⵠ[513]];
			let ⲆⲆⲆᐃΔΔΔ = ⵠⲆᐃⲆⵠⵠᐃ["p"];
			let ᐃΔΔⵠⲆⵠⵠ = ⲆⲆⲆᐃΔΔΔ[Math.floor(Math.random() * ⲆⲆⲆᐃΔΔΔ.length)];
			let ⵠⲆᐃⲆⵠⵠⵠΔᐃ = ⵠᐃⲆⲆⵠᐃⵠΔΔ ? "wss://" + ᐃΔΔⵠⲆⵠⵠ + "." + ⲆⵠⲆⲆΔᐃⲆ + "/" + ⵠᐃⵠᐃᐃᐃΔⲆᐃ + "?" + ᐃⲆⵠ.ⵠⲆⵠΔΔⲆΔ : "ws://" + ⲆⵠⲆⲆΔᐃⲆ;
			ΔⵠⲆ.ⵠⵠⲆᐃ = new ⵠⵠⲆΔᐃᐃᐃⲆΔ.WebSocket(ⵠⲆᐃⲆⵠⵠⵠΔᐃ);
			ΔⵠⲆ.ⵠⵠⲆᐃ["binaryType"] = "arraybuffer";
			ΔⵠⲆ.ⵠⵠⲆᐃ.ΔⵠΔⲆΔ = ΔⵠⲆ.ΔⵠΔⲆΔ;
			ΔⵠⲆ.ⵠⵠⲆᐃ.onmessage = function(ⲆΔⲆⲆ) {
				if (ΔⵠⲆ.ΔⵠΔⲆΔ != ΔⵠⲆ.ΔⵠΔⲆΔ) return;
				if (typeof ⲆΔⲆⲆ.data == ⵠ[262]) {
					var ΔⲆⵠⲆ = JSON.parse(ⲆΔⲆⲆ.data);
					switch (ΔⲆⵠⲆ[0]) {
						case ⵠⵠⵠΔ:
							ΔⵠⲆ.Ⲇⵠⵠⵠᐃ(ΔⲆⵠⲆ);
							break;
						case ΔΔΔᐃ:
							ΔⵠⲆ.ᐃΔⵠᐃⲆⲆΔ(ΔⲆⵠⲆ[ΔⲆᐃⲆ]);
							break;
						case ⲆᐃⵠΔ:
							ΔⵠⲆ.ⵠᐃⲆⲆᐃΔⵠᐃΔ(ΔⲆⵠⲆ);
							break;
						case ᐃᐃᐃΔᐃ:
							ΔⵠⲆ.ⲆᐃᐃΔΔⵠⲆⵠⵠ(ΔⲆⵠⲆ);
							break;
						case 4:
							ΔⵠⲆ.message(ΔⲆⵠⲆ[ⲆΔΔΔ]);
							break;
						case ΔⲆⵠⵠ:
							ΔⵠⲆ.ᐃΔᐃⲆⲆⲆⵠ(ΔⲆⵠⲆ);
							break;
						case ΔΔΔⵠΔ:
							ΔⵠⲆ.ΔⵠΔᐃⲆⲆⵠ(ΔⲆⵠⲆ[ⵠᐃⵠΔ]);
							break
					}
				} else {
					var ⵠⲆⵠᐃ = ⲆⲆΔΔᐃⲆΔⲆⵠ(ⲆΔⲆⲆ.data, ᐃⲆⵠ.ΔᐃⲆᐃΔΔⵠ, ᐃⲆⵠ.ΔᐃᐃᐃⲆᐃⲆΔⲆ);
					var ΔᐃᐃⲆⵠ = ⵠⲆⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[80]];
					switch (ⵠⲆⵠᐃ[ⵠΔᐃⵠ]) {
						case ⵠⵠⲆⵠ:
							ΔⵠⲆ.ⲆΔΔ(ΔᐃᐃⲆⵠ, ⵠⲆⵠᐃ, false);
							break;
						case 1:
							ΔⵠⲆ.ⲆΔΔ(ΔᐃᐃⲆⵠ, ⵠⲆⵠᐃ, ᐃᐃΔⲆⵠ);
							break;
						case ᐃⲆᐃᐃ:
							ΔⵠⲆ.ⲆΔᐃᐃᐃⵠᐃΔᐃ();
							break;
						case ΔⲆⵠᐃ:
							ΔⵠⲆ.ⵠᐃᐃᐃΔⲆΔ(new Uint16Array(ΔᐃᐃⲆⵠ));
							break;
						case 4:
							ΔⵠⲆ.ⲆᐃⲆΔᐃⲆⲆΔΔ();
							break;
						case ᐃᐃᐃⲆ:
							ΔⵠⲆ.ⲆⲆΔΔᐃᐃᐃᐃⵠ();
							break;
						case 6:
							ΔⵠⲆ.ΔⲆⲆᐃⵠⲆᐃⲆΔ();
							break;
						case 7:
							ΔⵠⲆ.ⲆΔⵠᐃΔⲆᐃⲆⵠ(ΔᐃᐃⲆⵠ);
							break;
						case ⲆΔⲆᐃᐃ:
							ΔⵠⲆ.ᐃᐃᐃᐃΔⲆᐃᐃᐃ(ⵠⲆⵠᐃ[1]);
							break;
						case 9:
							ΔⵠⲆ.ΔᐃᐃⲆΔⵠⵠΔΔ(ⵠⲆⵠᐃ[ΔⵠⲆⲆ]);
							break;
						case ⲆⲆⵠⲆⵠ:
							ΔⵠⲆ.ΔⲆⲆᐃΔΔⵠ();
							break;
						case 11:
							ΔⵠⲆ.ⲆΔΔⲆⲆⲆⵠ(ⵠⲆⵠᐃ[1], ⵠⲆⵠᐃ[2]);
							break;
						case ΔⵠⲆⲆⲆ:
							ΔⵠⲆ.ⲆΔⵠΔⲆ(ⵠⲆⵠᐃ[1]);
							break;
						case 13:
							ΔⵠⲆ.ⵠⲆⵠⲆΔⵠⲆᐃⲆ(ⵠⲆⵠᐃ, ΔᐃᐃⲆⵠ);
							break;
						case 14:
							ΔⵠⲆ.ᐃⲆⵠᐃΔⲆᐃⵠΔ();
							break;
						case ⵠⵠⲆᐃᐃⵠᐃ:
							ΔⵠⲆ.ⲆΔΔⵠΔΔΔΔΔ(ⵠⲆⵠᐃ[1]);
							break;
						case ⲆⲆⲆᐃΔ:
							ΔⵠⲆ.ⲆᐃⵠⲆ(ⵠⲆⵠᐃ[ⵠⲆⲆ], ⵠⲆⵠᐃ[ⲆⲆⲆⲆ], ⵠⲆⵠᐃ[ⲆΔⵠⵠⵠ], ⵠⲆⵠᐃ[4], ⵠⲆⵠᐃ[5], ⵠⲆⵠᐃ[6], ⵠⲆⵠᐃ[ⵠⲆⲆΔΔΔⲆ]);
							break;
						case ᐃⵠⲆΔⲆᐃΔ:
							ΔⵠⲆ.ᐃΔΔⲆⲆᐃⵠΔⵠ(ΔᐃᐃⲆⵠ);
							break;
						case ⲆⲆⲆⲆⲆ:
							ΔⵠⲆ.ⲆⲆⲆⲆΔⲆⲆⵠⵠ();
							break;
						case 19:
							ΔⵠⲆ.ᐃᐃΔᐃᐃ(ⵠⲆⵠᐃ[ΔᐃⲆⲆ]);
							break;
						case 20:
							ΔⵠⲆ.ΔⵠⵠⵠⲆᐃⲆᐃⵠ();
							break;
						case 21:
							ΔⵠⲆ.ⵠΔᐃⲆ(ΔᐃᐃⲆⵠ);
							break;
						case 22:
							ΔⵠⲆ.ᐃᐃᐃⵠⲆΔⵠⲆⵠ(ⵠⲆⵠᐃ[1]);
							break;
						case 23:
							ΔⵠⲆ.ⲆⲆⵠΔΔΔᐃⲆᐃ(ΔᐃᐃⲆⵠ);
							break;
						case 24:
							ΔⵠⲆ.ΔⲆⵠⵠⵠⵠⵠⲆᐃ(ⵠⲆⵠᐃ[ΔΔΔᐃ]);
							break;
						case 25:
							ΔⵠⲆ.ΔⵠᐃⲆⵠⵠⲆⲆΔ(ⵠⲆⵠᐃ[1], ΔᐃᐃⲆⵠ);
							break;
						case 26:
							ΔⵠⲆ.Δⵠⵠⵠⵠ(ⵠⲆⵠᐃ);
							break;
						case 27:
							ΔⵠⲆ.ⲆΔⲆⵠⲆⲆᐃⲆᐃ();
							break;
						case 28:
							ΔⵠⲆ.ΔⲆⲆΔⵠ(ⵠⲆⵠᐃ[1]);
							break;
						case 29:
							ΔⵠⲆ.ⵠⵠᐃⵠᐃᐃᐃΔΔ();
							break;
						case 30:
							ΔⵠⲆ.ᐃᐃⲆⵠΔⵠΔΔᐃ();
							break;
						case 31:
							ΔⵠⲆ.ⲆⲆΔⲆᐃΔⲆⵠⲆ(ⵠⲆⵠᐃ);
							break;
						case 32:
							ΔⵠⲆ.ⲆⲆΔᐃΔΔⲆᐃⵠ(ⵠⲆⵠᐃ[ⲆΔΔΔ]);
							break;
						case 33:
							ΔⵠⲆ.ᐃᐃΔⲆΔⲆⵠⵠᐃ(ⵠⲆⵠᐃ[ᐃⲆΔ]);
							break;
						case 34:
							ΔⵠⲆ.ⵠⵠᐃⲆΔⵠᐃⵠᐃ();
							break;
						case 35:
							ΔⵠⲆ.ΔᐃᐃⵠⲆΔⲆΔᐃ(ⵠⲆⵠᐃ[1]);
							break;
						case 36:
							ΔⵠⲆ.ⲆᐃᐃΔᐃΔᐃ(ⵠⲆⵠᐃ[ⵠᐃⵠΔ]);
							break;
						case 37:
							ΔⵠⲆ.ᐃⵠᐃΔⵠⵠⵠⵠⲆ(ⵠⲆⵠᐃ[ΔⲆᐃⲆ], ⵠⲆⵠᐃ[ᐃᐃⲆⲆ]);
							break;
						case 38:
							ΔⵠⲆ.ΔⵠⵠⵠΔⲆⵠᐃⲆ(ⵠⲆⵠᐃ[1]);
							break;
						case 39:
							ΔⵠⲆ.ΔⵠⲆΔⵠΔᐃⵠⲆ(ⵠⲆⵠᐃ[ⵠᐃⵠΔ]);
							break;
						case 40:
							ΔⵠⲆ.ⲆΔⵠΔⵠⲆΔⵠⲆ();
							break;
						case 41:
							ΔⵠⲆ.ᐃᐃᐃⵠⵠⲆΔⵠᐃ(ⵠⲆⵠᐃ);
							break;
						case 42:
							ΔⵠⲆ.ⵠᐃⵠᐃΔᐃΔᐃΔ(ⵠⲆⵠᐃ[Ⲇⵠᐃ]);
							break;
						case 43:
							ΔⵠⲆ.ⲆΔⵠΔΔΔΔΔΔ(ⵠⲆⵠᐃ[ΔΔⵠΔ]);
							break;
						case 44:
							ΔⵠⲆ.claimed(ⵠⲆⵠᐃ[1]);
							break;
						case 45:
							ΔⵠⲆ.ⵠⲆᐃΔΔΔᐃⲆⲆ(ⵠⲆⵠᐃ[ΔΔΔᐃ]);
							break;
						case 46:
							ΔⵠⲆ.ΔⵠᐃⲆΔⵠᐃⲆⲆ(ⵠⲆⵠᐃ[ΔΔⵠΔ]);
							break;
						case 47:
							ΔⵠⲆ.ⵠⵠΔΔᐃ(ⵠⲆⵠᐃ[1]);
							break;
						case 48:
							ΔⵠⲆ.ᐃᐃᐃⵠⲆᐃᐃᐃⵠ();
							break;
						case 50:
							ΔⵠⲆ.ⵠⵠⵠⵠⲆⵠᐃⲆⵠ(ⵠⲆⵠᐃ[ⵠΔᐃ], ⵠⲆⵠᐃ[ⲆⵠΔⵠ], ⵠⲆⵠᐃ[ⲆⲆᐃⵠ]);
							break;
						case 51:
							ΔⵠⲆ.ᐃⲆΔⵠΔⵠΔⲆᐃ();
							break;
						case 52:
							ΔⵠⲆ.ᐃΔΔΔᐃⲆΔΔⲆ(ⵠⲆⵠᐃ[1]);
							break;
						case 53:
							ΔⵠⲆ.ⵠⵠⵠΔⲆΔΔⲆΔ(ⵠⲆⵠᐃ[ᐃᐃΔ]);
							break;
						case 54:
							ΔⵠⲆ.ᐃⲆᐃΔᐃⵠⲆⲆᐃ();
							break;
						case 55:
							ΔⵠⲆ.ⵠⵠⵠⲆᐃΔᐃᐃΔ(ⵠⲆⵠᐃ[ΔⲆᐃⲆ]);
							break;
						case 56:
							ΔⵠⲆ.ᐃⲆⲆᐃⲆᐃᐃⲆᐃ(ⵠⲆⵠᐃ[ΔᐃⵠⲆ]);
							break;
						case 57:
							ΔⵠⲆ.ⲆⵠΔⵠⲆⲆⲆⵠΔ();
							break;
						case 58:
							ΔⵠⲆ.ⲆᐃᐃⲆⲆᐃⲆⲆᐃ();
							break;
						case 59:
							ΔⵠⲆ.ΔᐃⵠⲆᐃΔᐃᐃⲆ();
							break;
						case 60:
							ΔⵠⲆ.ᐃⲆⵠⵠⲆⲆⲆᐃⲆ();
							break;
						case 61:
							ᐃⲆⵠ.ⲆⲆΔ.ΔΔᐃⵠΔΔΔ = .2;
							ᐃⲆⵠ.ⲆⲆΔ.ⵠᐃᐃⵠᐃ = ᐃΔⲆΔ;
							break;
						case 62:
							ΔⵠⲆ.ⲆⵠⲆⵠΔⵠⲆⲆᐃ(new Uint16Array(ΔᐃᐃⲆⵠ));
							break;
						case 63:
							ΔⵠⲆ.ⵠⵠⵠⲆΔᐃⲆΔⲆ();
							break;
						case 64:
							ΔⵠⲆ.ᐃⵠⲆⲆᐃΔⲆᐃⵠ();
							break;
						case 65:
							ΔⵠⲆ.ⵠⵠⵠⵠΔⲆΔΔΔ();
							break;
						case 66:
							ΔⵠⲆ.ⵠⲆⵠⲆⵠⲆⲆⵠⲆ();
							break;
						case 67:
							ΔⵠⲆ.ⵠⵠⲆΔΔᐃᐃⲆⵠ(ⵠⲆⵠᐃ[1]);
							break;
						case 68:
							ΔⵠⲆ.ᐃⵠᐃΔⲆⲆΔⲆⲆ(ⵠⲆⵠᐃ[ΔⲆᐃᐃ]);
							break;
						case 69:
							ΔⵠⲆ.ⵠΔᐃᐃⵠΔⲆ(ⵠⲆⵠᐃ[ⲆᐃΔ]);
							break;
						case 70:
							ΔⵠⲆ.ⲆⲆⲆⲆⲆΔᐃᐃⲆ(ⵠⲆⵠᐃ[1]);
							break;
						case 71:
							ΔⵠⲆ.ⵠᐃᐃⵠⵠ(ⵠⲆⵠᐃ[ΔⲆᐃᐃ]);
							break
					}
				}
			};
			ΔⵠⲆ.ⵠⵠⲆᐃ.onerror = function() {
				ᐃⲆⵠ.reconnect.enabled && ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]](ΔⵠⲆ.timeout, 2500)
			};
			this.ⵠⵠⲆᐃ.onopen = function() {
				clearTimeout(ΔⵠⲆ.ⲆⲆΔⵠᐃ);
				ᐃⲆⵠ.ΔⵠᐃⵠⲆⲆⵠ = ᐃⲆⵠ.ΔⵠᐃⵠⲆⲆⵠ || ΔⵠΔⵠ.ΔⲆΔΔⲆⲆⵠ("token");
				ΔⵠΔⵠ.ⵠⲆⲆⲆⵠᐃⲆ().then((ⵠⵠᐃᐃⲆᐃⲆᐃⵠ => {
					ΔⵠⲆ.ⵠⵠⲆᐃ[ⲆⲆⲆᐃ](ⲆⲆᐃΔΔⲆᐃ[ⵠⵠᐃⲆᐃΔⲆ].stringify([ᐃΔΔΔ.ⲆⲆΔⵠⵠ.input.value, 4000,4000, ⵠⲆⲆⵠⲆ.ΔⲆΔᐃΔⲆΔ, ᐃⲆⵠ.ΔⲆⵠⵠᐃ, ᐃⲆⵠ.ⲆⵠᐃᐃⵠⲆᐃ, ᐃⲆⵠ.reconnect.enabled ? ⲆΔΔΔ : ⲆⵠⲆⲆ, ᐃΔΔΔ.ⲆΔⵠⵠ, ᐃΔΔΔ.ⵠⵠΔΔⵠ, ᐃΔΔΔ.ⲆⲆⲆᐃⵠ, ᐃΔΔΔ.ⵠΔⲆΔᐃ, ᐃΔΔΔ.ⵠⲆΔΔⲆ, ᐃΔΔΔ.ΔⵠᐃⲆΔ, ᐃΔᐃᐃΔ === Ⲇⵠⵠᐃᐃ ? ᐃᐃᐃ : ᐃΔᐃᐃΔ, ⲆⲆΔᐃᐃ === undefined ? 0 : ⲆⲆΔᐃᐃ.substring(ⲆⲆΔᐃᐃ.length - 50), ᐃⵠⵠⵠΔⲆⲆᐃⵠ, ᐃⲆⵠ.ΔⵠᐃⵠⲆⲆⵠ, ⵠⵠᐃᐃⲆᐃⲆᐃⵠ, ᐃⲆⵠ.ⲆᐃⲆΔΔΔᐃ, ᐃⲆⵠ.ΔΔⵠᐃΔᐃⲆ]));
					ᐃⲆⵠ.ΔⵠᐃⵠⲆⲆⵠ = undefined;
					ᐃⲆⵠ.ⲆᐃⲆΔΔΔᐃ = undefined;
					ᐃⲆⵠ.ΔΔⵠᐃΔᐃⲆ = undefined;
					ᐃⲆⵠ.ⵠⲆⵠΔΔⲆΔ = ⵠⵠⲆᐃᐃ;
					ΔⵠⲆ.ⲆⲆΔⵠᐃ = setTimeout(ΔⵠⲆ.timeout, ⵠⲆⲆⵠⲆ.ᐃⵠΔⵠⵠΔΔⵠⵠ)
				}))
			}
		}
	}
	var ΔᐃᐃΔ = {
		"ⵠΔⵠ": 48e4,
		"ⵠⵠⲆⵠⵠΔᐃ": 10,
		"ᐃⵠⲆⵠⵠΔᐃ": ᐃΔⲆΔΔⲆᐃ,
		"ⲆⲆⵠⲆΔΔΔⵠⲆ": 16 - 10,
		"ⵠᐃΔⵠΔⲆⵠ": 60,
		"ΔᐃΔⲆⵠ": 1,
		"ⵠΔᐃⵠΔ": 2,
		"ΔΔⲆΔⲆ": 4,
		"ⵠΔⵠⵠΔ": 8,
		"ⵠⵠⲆⵠΔⲆΔ": ᐃⵠᐃⵠⲆ,
		"ᐃᐃΔᐃⵠⵠΔ": ⲆᐃᐃⵠΔ,
		"ΔⲆΔⵠᐃⲆⵠ": 100,
		"ⵠΔΔⵠⲆⲆᐃ": 100,
		"ᐃⵠⵠⲆⲆΔⵠᐃᐃ": 100,
		"ⵠᐃΔᐃΔⵠᐃ": ᐃΔⵠᐃⵠ,
		"ⵠᐃΔⲆⲆᐃΔ": ⲆⵠⲆⲆⵠ,
		"ᐃⲆⵠᐃⵠᐃⲆᐃᐃ": 100,
		"ⵠᐃΔⲆⲆᐃΔ": 100,
		"ΔᐃⵠⲆⲆᐃⵠ": 100,
		"ᐃⵠⵠⵠᐃᐃᐃ": 100,
		"ᐃΔⵠᐃᐃ": 0,
		"ᐃΔΔⲆⲆᐃᐃ": Δⵠᐃ,
		"ᐃΔⲆⲆᐃ": 2,
		"ᐃᐃΔⲆΔ": 3,
		"ⲆⵠⲆᐃⵠ": ⲆᐃᐃΔⵠ,
		"ⵠᐃΔⵠΔᐃⵠ": 5,
		"ⲆⵠᐃΔᐃ": ⲆⲆⵠⵠⲆ,
		"Δᐃⵠᐃᐃ": Δᐃⵠᐃⵠ,
		"ⵠⲆᐃᐃⵠΔⲆⵠⵠ": {
			sydney: "Sydney",
			losangeles: "Los Angeles",
			atlanta: "Atlanta",
			frankfurt: "Frankfurt",
			osaka: "Osaka"
		},
		"ⵠᐃᐃΔⲆΔᐃ": {
			0: "normal",
			2: "zombies",
			3: "vampires",
			4: ⵠ[317],
			6: "community",
			7: "experimental"
		},
		"ᐃⵠⵠᐃⵠᐃᐃ": ⵠᐃⲆⲆ,
		"ᐃⲆᐃᐃⵠⲆⵠ": 0,
		"ⵠΔⲆΔⵠⲆⲆ": 30,
		"ⲆᐃᐃⵠᐃⵠⲆⲆΔ": ΔΔΔⵠ,
		"ⵠᐃΔⵠΔⲆⵠ": 6e4,
		"ΔΔΔⲆⲆⲆΔᐃⲆ": ΔΔᐃᐃ,
		"ⵠᐃⵠΔⲆⲆⵠⵠΔ": 0,
		"ⵠᐃⵠⵠⵠᐃᐃΔⲆ": 50,
		"ⵠᐃⲆⵠⵠᐃΔⲆΔ": 0,
		"ⲆⵠΔᐃⵠⵠᐃⲆΔ": 40,
		"ΔⲆⵠⵠⲆΔⵠⲆΔ": 39,
		"ⲆᐃΔᐃᐃᐃᐃⵠⵠ": 830,
		"ⲆⲆΔᐃΔᐃΔ": 25,
		"ⵠΔΔᐃⵠΔᐃ": 8,
		"ΔⲆΔⲆⵠ": ⵠᐃⲆ,
		"ⲆⵠᐃᐃⲆ": ⵠⲆᐃ,
		"ⵠᐃᐃᐃⲆΔⵠ": 200,
		"ⵠⵠⲆⲆᐃⵠᐃ": 0,
		"ΔⲆⲆᐃⵠ": 250,
		"ⵠⵠΔᐃⲆⲆⲆ": 150,
		"ᐃᐃⵠΔᐃⲆⲆ": 0,
		"ΔᐃⲆᐃⲆ": 350,
		"ⲆⵠΔΔⵠᐃⲆ": 100,
		"ⲆΔΔⲆⵠⵠⲆ": 700,
		"ⵠᐃΔΔᐃ": 39879
	};
	var ⲆΔᐃⵠⵠ = [];
	for (var Ⲇᐃ = ⵠᐃⲆ; Ⲇᐃ < 500; Ⲇᐃ++) ⲆΔᐃⵠⵠ[Ⲇᐃ] = 0;
	ⲆΔᐃⵠⵠ[Δ.ᐃΔⵠⵠΔ] = ⲆᐃΔ;
	ⲆΔᐃⵠⵠ[Δ.ΔᐃⲆΔⲆ] = 1;
	ⲆΔᐃⵠⵠ[Δ.ⵠΔᐃᐃⵠ] = ⲆᐃΔ;
	ⲆΔᐃⵠⵠ[Δ.ΔᐃⲆⵠⲆ] = 1;
	ⲆΔᐃⵠⵠ[Δ.ⵠΔΔⲆⲆ] = Δⵠᐃ;
	ⲆΔᐃⵠⵠ[Δ.ᐃⵠⲆⲆΔ] = 1;
	ⲆΔᐃⵠⵠ[Δ.ᐃᐃⵠⵠⵠ] = 1;
	ⲆΔᐃⵠⵠ[Δ.ⲆΔⵠⵠᐃ] = Δᐃⵠⵠ;
	ⲆΔᐃⵠⵠ[Δ.ΔᐃⵠΔΔ] = ΔⵠⲆⲆ;
	ⲆΔᐃⵠⵠ[Δ.ⵠΔⲆⵠᐃ] = 1;
	ⲆΔᐃⵠⵠ[Δ.ⲆΔΔⵠⵠ] = ΔᐃⵠⲆ;
	ⲆΔᐃⵠⵠ[Δ.ᐃⵠᐃΔΔ] = ΔⵠΔ;
	ⲆΔᐃⵠⵠ[Δ.ΔⵠⵠⵠΔ] = 1;
	ⲆΔᐃⵠⵠ[Δ.ⵠᐃᐃᐃⲆ] = ΔⲆᐃⲆ;
	ⲆΔᐃⵠⵠ[Δ.Δᐃᐃᐃⵠ] = 1;
	ⲆΔᐃⵠⵠ[Δ.ⲆᐃⵠⲆⲆ] = ⲆΔΔΔ;
	ⲆΔᐃⵠⵠ[Δ.ΔΔΔⲆᐃ] = ⲆΔΔΔ;
	ⲆΔᐃⵠⵠ[Δ.ⲆⲆⵠΔⲆ] = 1;
	ⲆΔᐃⵠⵠ[Δ.ΔᐃⵠⲆᐃ] = ᐃⲆΔ;
	var ⲆⲆⲆⲆΔⲆᐃ = [{
		time: 1e3 * 60 * ⵠᐃΔᐃΔ * 6
	}, {
		time: 144e4
	}, {
		time: 60 * 1e3 * 8 * 4
	}, {
		time: 6e4 * ΔⵠⵠΔⵠ * 3
	}, {
		time: 6 * (8 * (60 * 1e3))
	}, {
		time: ⲆΔⲆᐃᐃ * 6e4 * 5
	}, {
		time: 24e5
	}, {
		time: 60 * 1e3 * Ⲇᐃⵠᐃᐃ * ΔΔⵠᐃⵠ
	}, {
		time: ΔⵠⵠΔⵠ * 6e4 * Ⲇⵠⵠᐃⵠ
	}, {
		time: 7 * (6e4 * ΔⲆⲆⲆΔⵠᐃ)
	}, {
		time: ΔⲆⲆⵠⵠ * (6e4 * ΔⲆⲆⲆΔⵠᐃ)
	}, {
		time: ᐃᐃᐃΔⲆ * (6e4 * ⲆΔⲆᐃᐃ)
	}, {
		time: 7 * (8 * (60 * 1e3))
	}];
	var ⵠᐃᐃ = {
		"ΔᐃΔⲆⲆ": 36,
		"ᐃⲆΔⲆΔ": 37,
		"ΔⲆⵠⲆᐃ": 66,
		"ᐃΔⲆⵠⲆ": 10,
		"ΔᐃⵠΔᐃ": 68,
		"ⵠΔΔΔⲆ": 78,
		"ⲆᐃⲆΔⲆ": 82,
		"ΔⵠᐃⲆⲆ": 30,
		"ⵠⵠᐃᐃΔ": 49,
		"ᐃⲆⵠΔΔ": ΔᐃΔᐃᐃ,
		"ᐃⲆⲆⲆΔ": 18,
		"ⵠⵠᐃⵠΔ": 69,
		"ⲆⲆᐃᐃΔ": 56,
		"ⵠⵠᐃΔΔ": 27,
		"ᐃᐃᐃᐃᐃ": 8,
		"ᐃᐃⵠⵠΔ": 86,
		"ᐃⵠᐃⲆⵠΔⲆ": 83,
		"ΔⵠⲆΔᐃ": 74,
		"ΔⲆⵠΔⲆ": 25,
		"ⲆΔᐃΔᐃⲆᐃ": 89,
		"Δⵠᐃⵠⵠ": ᐃᐃⲆⲆⵠ,
		"ᐃᐃⲆΔⲆ": 29,
		"ᐃᐃⲆᐃⵠ": 100,
		"ΔⲆⲆⵠᐃ": 67,
		"ⵠᐃⵠΔⵠ": 63,
		"ΔⲆΔᐃⵠ": 9,
		"ΔᐃΔᐃΔ": 35,
		"ᐃⵠᐃⲆΔᐃⵠ": 85,
		"ⲆⵠⵠΔⵠ": 62,
		"ⲆⵠⲆⵠᐃ": 72,
		"ᐃΔΔᐃⵠ": 75,
		"ⵠⲆⲆΔⲆ": 28,
		"ⲆᐃᐃⲆⵠ": 39,
		"ⵠⵠΔⲆΔ": 47,
		"ⲆΔᐃΔΔ": 81,
		"ΔᐃⲆⵠᐃ": 31,
		"ⲆᐃᐃΔᐃ": 42,
		"ΔᐃΔⵠⵠ": ᐃᐃⵠᐃᐃ,
		"ⵠⲆᐃⵠΔ": 0,
		"ⵠⲆⲆᐃⵠ": ᐃⵠⵠᐃᐃ,
		"ⵠⲆᐃⵠⲆ": 54,
		"ΔⵠΔᐃⲆ": 65,
		"ΔᐃᐃⲆⲆ": 55,
		"ᐃᐃⲆᐃΔ": 23,
		"ⵠⲆⲆⵠᐃ": 71,
		"ⵠΔΔᐃⲆ": 79,
		"ΔᐃΔⵠᐃ": 34,
		"ⵠⲆΔⲆⵠ": 51,
		"ΔΔⲆⲆᐃ": 43,
		"ⲆΔᐃΔᐃ": 45,
		"ⲆⵠᐃⲆⲆ": 41,
		"ᐃⵠⵠⲆᐃ": 2,
		"ⵠΔᐃΔΔ": 24,
		"ᐃⲆΔⵠⲆᐃⲆ": 76,
		"ⵠΔΔⵠΔ": 14,
		"ⲆⵠⲆᐃᐃ": 22,
		"ⵠᐃΔΔᐃ": ⲆΔⵠⵠⵠ,
		"ΔΔⲆΔⵠ": 61,
		"ⵠᐃⲆⲆᐃ": 64,
		"ⲆⲆΔⵠⲆ": ΔΔΔᐃ,
		"ᐃⵠⵠᐃΔ": 21,
		"ⵠΔᐃⵠᐃ": 80,
		"ⲆⲆⲆⲆⵠ": ᐃⵠⲆΔⲆᐃΔ,
		"ⵠⵠⵠᐃΔ": 13,
		"ⲆⲆⲆⵠⲆ": 20,
		"ᐃⵠⲆΔⵠ": 12,
		"ⲆΔΔⵠΔ": 46,
		"ⲆᐃⵠΔⲆ": 40,
		"ᐃⵠᐃⲆΔ": ⵠⲆᐃΔⵠⵠⲆ,
		"ⵠⲆⲆΔᐃ": 88,
		"ᐃⲆⵠⲆⲆ": 50,
		"ᐃΔⲆΔⲆ": 70,
		"ⲆᐃΔⵠᐃ": 38,
		"ⲆᐃⵠⲆᐃ": 60,
		"ΔΔⵠⵠΔ": 52,
		"ᐃⲆⲆΔⲆ": ΔΔΔⵠᐃⲆⵠ,
		"ⲆᐃⲆⲆΔ": 73,
		"ᐃⲆⵠⵠⲆⵠᐃ": 84,
		"ᐃⲆΔᐃⵠ": 90,
		"ⲆΔΔᐃⲆ": 77,
		"ΔⵠⵠⲆΔ": 4,
		"ΔⵠᐃΔΔ": 33,
		"ᐃⵠΔᐃⲆ": 32,
		"ⲆⵠΔⵠⵠ": 53,
		"ⵠΔᐃⵠⵠ": 44,
		"ⵠΔΔᐃΔ": 87,
		"ᐃΔⲆᐃΔ": 26,
		"ΔⲆΔΔΔ": 91,
		"ⲆᐃⵠΔΔ": 48,
		"ⲆⲆᐃⵠΔ": ΔΔⲆⲆⵠ
	};
	var ⵠΔⲆΔⲆᐃΔ = [
		[ⵠᐃᐃ.ⵠΔᐃΔΔ, ⵠⵠ.ⵠⵠΔΔ],
		[ⵠᐃᐃ.ΔⲆⵠΔⲆ, ⵠⵠ.ᐃΔᐃⲆ],
		[ⵠᐃᐃ.ᐃΔⲆᐃΔ, ⵠⵠ.ⲆᐃⲆᐃ],
		[ⵠᐃᐃ.ⵠⵠᐃΔΔ, ⵠⵠ.ⲆΔΔᐃ],
		[ⵠᐃᐃ.ⵠⲆⲆΔⲆ, ⵠⵠ.ⲆᐃⲆⲆ]
	];

	function ΔⵠΔⵠⲆⲆⵠΔᐃ() {
		this.ⲆⲆΔⵠⵠ = "";
		this.ⲆΔⵠⵠ = 0;
		this.ⵠⵠΔΔⵠ = ⵠⲆᐃ;
		this.ⲆⲆⲆᐃⵠ = 0;
		this.ⵠⵠⵠΔⲆⵠⲆ = ⵠⲆᐃ;
		this.ⵠΔⲆΔᐃ = 0;
		this.ⵠⲆΔΔⲆ = ⵠΔᐃⵠ;
		this.ΔⵠᐃⲆΔ = 0;
		this.level = ΔΔᐃ;
		this.label = null;
		this.ᐃⲆⵠⵠΔⲆΔ = null;
		this.ΔⵠⵠⵠⲆᐃⲆ = null;
		this.ⲆⲆΔᐃⵠ = Ⲇⵠᐃᐃᐃ;
		this.ᐃⲆⲆⲆⲆ = 0
	}

	function ΔⵠΔᐃⵠⲆΔ(ⲆΔ, Ⲇⵠ, ᐃⵠⲆ, Δᐃⵠ) {
		this.id = ⲆΔ;
		this.ⲆⲆⲆΔᐃ = ⲆΔΔⲆⵠ * (ⲆΔ + 5);
		this.ᐃΔᐃᐃⵠ = ᐃⲆⵠⵠ / 1366;
		this.x = Ⲇⵠ;
		this.y = ᐃⵠⲆ;
		this.c = Math.sin(Δᐃⵠ);
		this.ⵠᐃᐃⵠ = Math.cos(Δᐃⵠ);
		this.alpha = 0
	}

	function ΔⲆΔⵠΔⵠᐃᐃⵠ(ⲆⵠᐃΔᐃΔⵠ) {
		this.mode = ΔᐃᐃΔ.ᐃΔⵠᐃᐃ;
		this.ⲆⵠᐃΔᐃΔⵠ = ⲆⵠᐃΔᐃΔⵠ;
		this.ⵠᐃⵠΔΔ = 0;
		this.ΔᐃⲆⲆᐃⵠⵠ = ᐃᐃⲆⵠⲆ;
		this.ⵠΔᐃΔ = [];
		this.ⲆΔΔ = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⲆᐃⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔᐃⵠᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⵠⲆᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔⲆⲆⵠᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃΔⲆΔⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆΔΔᐃⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆⵠᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⲆⵠᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⲆⲆΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔⵠⲆΔᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔⵠΔᐃⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔⲆⵠⲆᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⵠΔⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆΔᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔⲆΔΔΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆΔᐃⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃⵠΔⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔΔⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃⲆⲆᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠᐃⵠΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔᐃⵠΔᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔᐃⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆΔᐃΔᐃⲆᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠᐃⲆⵠΔⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⵠⵠⲆⵠᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠᐃⲆΔᐃⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆΔᐃΔΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⲆΔⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⵠⵠΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⵠᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⲆⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔΔⲆΔⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠⵠⲆᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆΔⵠⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⵠΔΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃΔΔᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆᐃⵠΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠⲆΔⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠⵠᐃΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔⵠΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆⲆⵠⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔΔⵠⵠΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔⵠⵠⲆΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⵠⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃᐃᐃᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔⲆΔᐃⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⲆΔⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⵠⲆⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠᐃⲆⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃΔⲆⵠⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆᐃⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.Δⵠᐃⵠⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆⲆⲆⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠⵠᐃΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆΔⲆⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆΔᐃΔᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆΔΔⵠΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠΔⲆΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⵠΔΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠᐃᐃΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠΔⵠⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⲆⲆΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⲆΔⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆᐃᐃΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠᐃⲆΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⲆᐃᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⲆᐃΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔⵠᐃⲆⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃΔⵠᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔⵠᐃΔΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔᐃⲆⵠᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔᐃᐃⲆⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆΔⲆΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔΔⲆⲆᐃ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔᐃⵠⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃᐃⲆⵠ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⵠΔⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠΔᐃⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔᐃΔΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔⲆⵠΔⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ᐃΔⲆᐃΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠᐃΔΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆΔⲆ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔᐃΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔᐃΔ] = [];
		this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃᐃΔᐃ] = [];
		this.ⵠⵠⲆⵠⲆ = [];
		this.ΔᐃᐃⵠΔ = 260;
		this.ᐃⵠᐃᐃᐃ = 260;
		this.ᐃᐃⵠΔⲆᐃᐃ = ΔᐃⲆΔⵠΔᐃ;
		this.ᐃⲆⵠⲆᐃⵠⲆ = ᐃΔᐃⵠⵠ;
		this.w = this.ΔᐃᐃⵠΔ * this.ᐃᐃⵠΔⲆᐃᐃ;
		this.ⲆΔⲆ = this.ᐃⲆⵠⲆᐃⵠⲆ * this.ᐃⵠᐃᐃᐃ;
		this.ⵠⲆΔᐃⲆ = new ⵠⲆΔᐃⲆ.ⲆⲆᐃⵠⲆⵠᐃ;
		this.ᐃΔⲆᐃ = [];
		this.ᐃᐃⵠⵠ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⲆΔⵠΔ, 0, 1, 0, Δᐃⵠⵠ, 1);
		this.transition = ⵠΔⵠⵠⵠ;
		this.ⵠⵠᐃⲆᐃ = [];
		this.ᐃΔΔΔⵠ = ⵠΔᐃᐃ;
		this.ⵠᐃᐃᐃⲆⲆᐃ = Ⲇⵠᐃ;
		this.ΔΔⵠⵠᐃΔⵠ = 2;
		this.ⲆⵠⵠⲆⵠᐃΔ = ⵠΔΔⲆᐃ;
		this.ΔⲆⵠⲆΔ = ⲆᐃᐃΔⵠ;
		this.ᐃᐃΔⲆᐃᐃⵠ = ΔΔⵠᐃⵠ;
		this.ⵠⵠᐃⲆᐃ[this.ᐃΔΔΔⵠ] = {
			"ΔΔΔⵠⵠᐃⵠ": 1,
			"ⲆΔᐃ": [19, 58, 43],
			"ΔⲆᐃ": [4, 43, 48],
			"ⲆⲆⲆⵠᐃ": [ⵠ[240], ⵠ[195]]
		};
		this.ⵠⵠᐃⲆᐃ[this.ΔⲆⵠⲆΔ] = {
			"ΔΔΔⵠⵠᐃⵠ": ⵠⵠⲆⵠ,
			"ⲆΔᐃ": [11, 106, 132],
			"ΔⲆᐃ": [9, 55, 63],
			"ⲆⲆⲆⵠᐃ": [ⵠ[573], ⵠ[550]]
		};
		this.ⵠⵠᐃⲆᐃ[this.ⵠᐃᐃᐃⲆⲆᐃ] = {
			"ΔΔΔⵠⵠᐃⵠ": 0,
			"ⲆΔᐃ": [235, 242, 240],
			"ΔⲆᐃ": [19, 97, 103],
			"ⲆⲆⲆⵠᐃ": [ⵠ[115], ⵠ[578]]
		};
		this.ⵠⵠᐃⲆᐃ[this.ΔΔⵠⵠᐃΔⵠ] = {
			"ΔΔΔⵠⵠᐃⵠ": 0,
			"ΔⲆᐃ": [3, 28, 30],
			"ⲆⲆⲆⵠᐃ": ["#2D2017", "#031C1E"],
			"ⲆΔᐃ": [45, 32, 23]
		};
		this.ⵠⵠᐃⲆᐃ[this.ⲆⵠⵠⲆⵠᐃΔ] = {
			"ΔⲆᐃ": [24, 61, 60],
			"ⲆΔᐃ": [74, 74, 74],
			"ⲆⲆⲆⵠᐃ": ["#4A4A4A", "#183D3C"],
			"ΔΔΔⵠⵠᐃⵠ": 0
		};
		this.ⵠⵠᐃⲆᐃ[this.ᐃᐃΔⲆᐃᐃⵠ] = {
			"ⲆⲆⲆⵠᐃ": ["#EBD8A6", "#093D38"],
			"ΔΔΔⵠⵠᐃⵠ": ⵠⲆⵠⵠ,
			"ⲆΔᐃ": [235, 216, 166],
			"ΔⲆᐃ": [9, 61, 56]
		};
		this.ᐃⵠⲆΔⲆⵠⲆ = function(Δᐃᐃ, Ⲇⵠ, ᐃⵠⲆ, ⲆⲆᐃ, ⲆΔⲆ, ⲆⵠⲆ) {
			this.x1 = 100 * Ⲇⵠ;
			this.y1 = ᐃⲆΔⲆᐃ * ᐃⵠⲆ;
			this.w = ᐃⵠⵠᐃΔⵠᐃ * ⲆⲆᐃ;
			this.ⲆΔⲆ = ᐃΔⵠᐃⵠ * ⲆΔⲆ;
			this.x2 = (Ⲇⵠ + ⲆⲆᐃ) * 100;
			this.y2 = (ᐃⵠⲆ + ⲆΔⲆ) * 100;
			this.Δᐃᐃ = Δᐃᐃ;
			ⲆⵠⲆ === undefined ? this.ⲆⵠⲆ = 15 : this.ⲆⵠⲆ = ⲆⵠⲆ
		};

		function ⵠᐃⵠᐃᐃᐃΔᐃΔ(ⲆΔⲆᐃ, ΔⲆᐃⵠⲆᐃⲆ, ⲆⲆᐃΔΔΔⲆ, ᐃᐃⵠⵠᐃ, ΔΔⵠᐃⵠⲆΔ) {
			for (var Ⲇᐃ = ⵠΔᐃᐃ; Ⲇᐃ < ΔΔⵠᐃⵠⲆΔ; Ⲇᐃ++) {
				if (ⲆᐃⵠⲆⲆⵠᐃⲆⲆ(ⲆΔⲆᐃ, ΔⲆᐃⵠⲆᐃⲆ, ⲆⲆᐃΔΔΔⲆ, ᐃᐃⵠⵠᐃ, ΔΔᐃⲆⲆ) === 1) break
			}
			if (Ⲇᐃ === ΔΔⵠᐃⵠⲆΔ) return ΔΔᐃᐃ;
			return ᐃⲆΔ
		}

		function ΔⵠΔⲆⵠⲆᐃⲆⲆ(ⵠᐃᐃⵠⵠⵠΔ, ⲆⵠⵠⲆⲆ, ⵠⵠⲆΔᐃ) {
			var stop = ᐃⵠⵠⲆ;
			var ᐃᐃⵠΔⲆ = ⲆⵠⵠⲆⲆ;
			for (var ᐃⵠⲆ = ⵠⵠⲆΔᐃ; ⲆⵠΔ.ᐃⵠᐃᐃᐃ > ᐃⵠⲆ; ᐃⵠⲆ++) {
				for (var Ⲇⵠ = ⲆⵠⵠⲆⲆ; ⲆⵠΔ.ΔᐃᐃⵠΔ > Ⲇⵠ; Ⲇⵠ++) {
					ⵠⵠⲆΔᐃ === ᐃⵠⲆ && (ᐃᐃⵠΔⲆ = Math.max(Ⲇⵠ, ᐃᐃⵠΔⲆ));
					if (ᐃᐃⵠΔⲆ < Ⲇⵠ) break;
					if (ⵠᐃᐃⵠⵠⵠΔ[ᐃⵠⲆ][Ⲇⵠ] === ΔᐃⲆⲆ) break;
					ⵠᐃᐃⵠⵠⵠΔ[ᐃⵠⲆ][Ⲇⵠ] = 1
				}
				if (ᐃᐃⵠΔⲆ > Ⲇⵠ) break
			}
			ⲆⵠΔ.ᐃΔⲆᐃ.push(new ⲆⵠΔ.ᐃⵠⲆΔⲆⵠⲆ(ⲆⵠΔ.ΔⲆⵠⲆΔ, ⲆⵠⵠⲆⲆ, ⵠⵠⲆΔᐃ, ᐃᐃⵠΔⲆ - ⲆⵠⵠⲆⲆ + 1, ᐃⵠⲆ - ⵠⵠⲆΔᐃ, 15))
		}

		function ⲆᐃⵠⲆⲆⵠᐃⲆⲆ(ⲆΔⲆᐃ, ΔⲆᐃⵠⲆᐃⲆ, ⲆⲆᐃΔΔΔⲆ, ᐃᐃⵠⵠᐃ, ΔⵠΔᐃⲆⵠⲆ) {
			var ⲆⲆᐃ = ΔⲆᐃⵠⲆᐃⲆ + Math.floor(ⲆⵠΔ.ⵠⲆΔᐃⲆ.get() * ᐃᐃⵠⵠᐃ);
			var ⲆΔⲆ = ⲆⲆᐃΔΔΔⲆ + Math.floor(ᐃᐃⵠⵠᐃ * ⲆⵠΔ.ⵠⲆΔᐃⲆ.get());
			var ⲆᐃΔΔ = ⵠⲆⵠᐃⵠ + Math.floor(ⲆⵠΔ.ⵠⲆΔᐃⲆ.get() * (ⲆⵠΔ.ΔᐃᐃⵠΔ - ⲆⲆᐃ - 20));
			var Δⵠᐃⵠ = 10 + Math.floor(ⲆⵠΔ.ⵠⲆΔᐃⲆ.get() * (ⲆⵠΔ.ᐃⵠᐃᐃᐃ - ⲆΔⲆ - 20));
			var ⲆΔΔⵠ = ⲆᐃΔΔ + ⲆⲆᐃ;
			var ⲆⵠⲆⵠ = Δⵠᐃⵠ + ⲆΔⲆ;
			for (var Ⲇᐃ = ⵠᐃⲆⲆ; Ⲇᐃ < ⲆⵠΔ.ᐃΔⲆᐃ.length; Ⲇᐃ++) {
				var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[Ⲇᐃ];
				if (ΔᐃΔⲆ === ΔⵠΔⵠ.ΔΔⲆⵠᐃᐃⵠ(ⲆᐃΔΔ, ⲆΔΔⵠ, Δⵠᐃⵠ, ⲆⵠⲆⵠ, ᐃΔⵠᐃ.x1 / 100 - ΔⵠΔᐃⲆⵠⲆ, ᐃΔⵠᐃ.x2 / ΔᐃⲆⲆⲆ + ΔⵠΔᐃⲆⵠⲆ, ᐃΔⵠᐃ.y1 / 100 - ΔⵠΔᐃⲆⵠⲆ, ᐃΔⵠᐃ.y2 / ⵠⵠⲆᐃⲆ + ΔⵠΔᐃⲆⵠⲆ)) return 0
			}
			ⲆⵠΔ.ᐃΔⲆᐃ.push(new ⲆⵠΔ.ᐃⵠⲆΔⲆⵠⲆ(ⲆΔⲆᐃ, ⲆᐃΔΔ, Δⵠᐃⵠ, ⲆⲆᐃ, ⲆΔⲆ, 15));
			return ΔⵠⲆⲆ
		}
		this.ᐃⲆⵠᐃⲆ = -1e6;
		this.ΔΔⵠⲆⵠ = this.ᐃⲆⵠᐃⲆ;
		this.ⲆᐃⲆⲆⲆ = this.ᐃⲆⵠᐃⲆ;
		this.ⲆⲆⵠᐃⲆ = this.ᐃⲆⵠᐃⲆ;
		this.Δᐃⵠᐃⵠⵠᐃ = this.ᐃⲆⵠᐃⲆ;
		this.ⲆΔⵠΔᐃΔΔ = this.ᐃⲆⵠᐃⲆ;
		this.ⲆᐃⵠⲆⵠ = this.ᐃⲆⵠᐃⲆ;
		this.ⲆΔⲆⵠⵠⵠⲆᐃⵠ = function(ΔⵠⲆⵠ) {
			var Ⲇⵠ = ΔⵠⲆⵠ.r.x;
			var ᐃⵠⲆ = ΔⵠⲆⵠ.r.y;
			var Ⲇᐃ = Math.floor(ᐃⵠⲆ / 100);
			var ⲆⲆᐃⲆ = Math.floor(Ⲇⵠ / ᐃΔⵠᐃⵠ);
			ΔⵠⲆⵠ.ΔΔⵠⲆⵠ = ⲆⵠΔ.ᐃⲆⵠᐃⲆ;
			ΔⵠⲆⵠ.ⲆᐃⲆⲆⲆ = ⲆⵠΔ.ᐃⲆⵠᐃⲆ;
			ΔⵠⲆⵠ.ⲆⲆⵠᐃⲆ = ⲆⵠΔ.ᐃⲆⵠᐃⲆ;
			ΔⵠⲆⵠ.Δᐃⵠᐃⵠⵠᐃ = ⲆⵠΔ.ᐃⲆⵠᐃⲆ;
			ΔⵠⲆⵠ.ⲆᐃⵠⲆⵠ = ⲆⵠΔ.ᐃⲆⵠᐃⲆ;
			ΔⵠⲆⵠ.ⵠᐃΔᐃᐃⲆΔ = ⲆⵠΔ.ᐃⲆⵠᐃⲆ;
			for (var ⵠᐃᐃᐃ = ⵠⵠⵠΔ; ⲆⵠΔ.ᐃΔⲆᐃ[ⵠᐃᐃᐃ].Δᐃᐃ !== ⲆⵠΔ.ΔⲆⵠⲆΔ; ⵠᐃᐃᐃ++) {
				if (ⲆⵠΔ.ᐃΔΔΔⵠ === ⲆⵠΔ.ᐃΔⲆᐃ[ⵠᐃᐃᐃ].Δᐃᐃ) {
					var ⲆᐃⲆⵠΔᐃⵠ = ⲆⵠΔ.ⵠⵠⵠⵠⲆ(ⵠᐃᐃᐃ, Ⲇⵠ, ᐃⵠⲆ);
					ΔⵠⲆⵠ.Δᐃⵠᐃⵠⵠᐃ = Math.max(ΔⵠⲆⵠ.Δᐃⵠᐃⵠⵠᐃ, ⲆᐃⲆⵠΔᐃⵠ);
					if (ⵠᐃⲆⲆ < ⲆᐃⲆⵠΔᐃⵠ && ⲆⵠΔ.ⵠᐃⲆⲆΔⲆΔⵠᐃ(ⵠᐃᐃᐃ, Ⲇⵠ, ᐃⵠⲆ) === 1) ΔⵠⲆⵠ.ⵠᐃΔᐃᐃⲆΔ = 1
				} else if (ⲆⵠΔ.ᐃΔⲆᐃ[ⵠᐃᐃᐃ].Δᐃᐃ === ⲆⵠΔ.ⵠᐃᐃᐃⲆⲆᐃ) {
					ΔⵠⲆⵠ.ΔΔⵠⲆⵠ = Math.max(ΔⵠⲆⵠ.ΔΔⵠⲆⵠ, ⲆⵠΔ.ⵠⵠⵠⵠⲆ(ⵠᐃᐃᐃ, Ⲇⵠ, ᐃⵠⲆ))
				} else if (ⲆⵠΔ.ᐃᐃΔⲆᐃᐃⵠ === ⲆⵠΔ.ᐃΔⲆᐃ[ⵠᐃᐃᐃ].Δᐃᐃ) {
					ΔⵠⲆⵠ.ⲆᐃⲆⲆⲆ = Math.max(ΔⵠⲆⵠ.ⲆᐃⲆⲆⲆ, ⲆⵠΔ.ⵠⵠⵠⵠⲆ(ⵠᐃᐃᐃ, Ⲇⵠ, ᐃⵠⲆ))
				} else if (ⲆⵠΔ.ᐃΔⲆᐃ[ⵠᐃᐃᐃ].Δᐃᐃ === ⲆⵠΔ.ΔΔⵠⵠᐃΔⵠ) {
					ΔⵠⲆⵠ.ⲆⲆⵠᐃⲆ = Math.max(ΔⵠⲆⵠ.ⲆⲆⵠᐃⲆ, ⲆⵠΔ.ⵠⵠⵠⵠⲆ(ⵠᐃᐃᐃ, Ⲇⵠ, ᐃⵠⲆ))
				} else if (ⲆⵠΔ.ᐃΔⲆᐃ[ⵠᐃᐃᐃ].Δᐃᐃ === ⲆⵠΔ.ⲆⵠⵠⲆⵠᐃΔ) {
					ΔⵠⲆⵠ.ⲆᐃⵠⲆⵠ = Math.max(ΔⵠⲆⵠ.ⲆᐃⵠⲆⵠ, ⲆⵠΔ.ⵠⵠⵠⵠⲆ(ⵠᐃᐃᐃ, Ⲇⵠ, ᐃⵠⲆ))
				}
			}
			ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ][ⵠ[562]] && (ΔⵠⲆⵠ.ⵠᐃΔᐃᐃⲆΔ = ⵠⲆΔⲆ);
			if (ⲆⵠΔ.ΔⲆᐃΔᐃⲆⲆⵠⲆ(ⲆⲆᐃⲆ, Ⲇᐃ)) ΔⵠⲆⵠ.ⲆΔⵠΔᐃΔΔ = ΔⵠⲆⵠ.ᐃⲆⵠᐃⲆ;
			else if (ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ][ⵠ[282]] || ᐃⵠⵠⲆ > ΔⵠⲆⵠ.ΔΔⵠⲆⵠ && 0 > ΔⵠⲆⵠ.ⲆⲆⵠᐃⲆ && ΔⵠⲆⵠ.Δᐃⵠᐃⵠⵠᐃ < 0 && ⵠⲆᐃ > ΔⵠⲆⵠ.ⵠᐃΔᐃᐃⲆΔ && Δⵠⵠⵠ > ΔⵠⲆⵠ.ⲆᐃⵠⲆⵠ && 0 > ΔⵠⲆⵠ.ⲆᐃⲆⲆⲆ) ΔⵠⲆⵠ.ⲆΔⵠΔᐃΔΔ = ᐃᐃΔ;
			else ΔⵠⲆⵠ.ⲆΔⵠΔᐃΔΔ = ΔⵠⲆⵠ.ᐃⲆⵠᐃⲆ
		};
		this.ⲆⲆΔᐃⵠⲆⲆΔⲆ = function(Ⲇⵠ, ᐃⵠⲆ) {
			ⲆⵠΔ.ΔΔⵠⲆⵠ = ⲆⵠΔ.ᐃⲆⵠᐃⲆ;
			ⲆⵠΔ.ⲆᐃⲆⲆⲆ = ⲆⵠΔ.ᐃⲆⵠᐃⲆ;
			ⲆⵠΔ.ⲆⲆⵠᐃⲆ = ⲆⵠΔ.ᐃⲆⵠᐃⲆ;
			ⲆⵠΔ.ⲆᐃⵠⲆⵠ = ⲆⵠΔ.ᐃⲆⵠᐃⲆ;
			ⲆⵠΔ.Δᐃⵠᐃⵠⵠᐃ = ⲆⵠΔ.ᐃⲆⵠᐃⲆ;
			for (var ⵠᐃᐃᐃ = ⵠⵠⲆⵠ; ⲆⵠΔ.ᐃΔⲆᐃ[ⵠᐃᐃᐃ].Δᐃᐃ !== ⲆⵠΔ.ΔⲆⵠⲆΔ; ⵠᐃᐃᐃ++) {
				if (ⲆⵠΔ.ᐃΔⲆᐃ[ⵠᐃᐃᐃ].Δᐃᐃ === ⲆⵠΔ.ᐃΔΔΔⵠ) ⲆⵠΔ.Δᐃⵠᐃⵠⵠᐃ = Math.max(ⲆⵠΔ.Δᐃⵠᐃⵠⵠᐃ, ⲆⵠΔ.ⵠⵠⵠⵠⲆ(ⵠᐃᐃᐃ, Ⲇⵠ, ᐃⵠⲆ));
				else if (ⲆⵠΔ.ᐃΔⲆᐃ[ⵠᐃᐃᐃ].Δᐃᐃ === ⲆⵠΔ.ⵠᐃᐃᐃⲆⲆᐃ) ⲆⵠΔ.ΔΔⵠⲆⵠ = Math.max(ⲆⵠΔ.ΔΔⵠⲆⵠ, ⲆⵠΔ.ⵠⵠⵠⵠⲆ(ⵠᐃᐃᐃ, Ⲇⵠ, ᐃⵠⲆ));
				else if (ⲆⵠΔ.ᐃᐃΔⲆᐃᐃⵠ === ⲆⵠΔ.ᐃΔⲆᐃ[ⵠᐃᐃᐃ].Δᐃᐃ) ⲆⵠΔ.ⲆᐃⲆⲆⲆ = Math.max(ⲆⵠΔ.ⲆᐃⲆⲆⲆ, ⲆⵠΔ.ⵠⵠⵠⵠⲆ(ⵠᐃᐃᐃ, Ⲇⵠ, ᐃⵠⲆ));
				else if (ⲆⵠΔ.ᐃΔⲆᐃ[ⵠᐃᐃᐃ].Δᐃᐃ === ⲆⵠΔ.ΔΔⵠⵠᐃΔⵠ) {
					ⲆⵠΔ.ⲆⲆⵠᐃⲆ = Math.max(ⲆⵠΔ.ⲆⲆⵠᐃⲆ, ⲆⵠΔ.ⵠⵠⵠⵠⲆ(ⵠᐃᐃᐃ, Ⲇⵠ, ᐃⵠⲆ))
				} else if (ⲆⵠΔ.ⲆⵠⵠⲆⵠᐃΔ === ⲆⵠΔ.ᐃΔⲆᐃ[ⵠᐃᐃᐃ].Δᐃᐃ) ⲆⵠΔ.ⲆᐃⵠⲆⵠ = Math.max(ⲆⵠΔ.ⲆᐃⵠⲆⵠ, ⲆⵠΔ.ⵠⵠⵠⵠⲆ(ⵠᐃᐃᐃ, Ⲇⵠ, ᐃⵠⲆ))
			}
			if (0 > ⲆⵠΔ.ΔΔⵠⲆⵠ && ΔΔᐃᐃ > ⲆⵠΔ.ⲆᐃⵠⲆⵠ && ᐃᐃⲆ > ⲆⵠΔ.Δᐃⵠᐃⵠⵠᐃ && 0 > ⲆⵠΔ.ⲆᐃⵠⲆⵠ && ⲆⵠΔ.ⲆᐃⲆⲆⲆ < ⲆⵠⲆⲆ) ⲆⵠΔ.ⲆΔⵠΔᐃΔΔ = 1;
			else ⲆⵠΔ.ⲆΔⵠΔᐃΔΔ = ⲆⵠΔ.ᐃⲆⵠᐃⲆ
		};
		this.ⵠᐃⲆⲆΔⲆΔⵠᐃ = function(ΔⵠᐃⲆᐃⵠⲆ, Ⲇⵠ, ᐃⵠⲆ) {
			var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[ΔⵠᐃⲆᐃⵠⲆ];
			var ΔⲆⲆᐃΔΔΔ = ΔΔᐃᐃ;
			ⲆᐃΔΔ = ᐃΔⵠᐃ.x1 + 30 + ((ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔΔⲆΔⲆ) === ᐃᐃⲆ ? 150 : 0);
			var ᐃⲆⲆᐃ = Ⲇⵠ - ⲆᐃΔΔ;
			(ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔΔⲆΔⲆ) > ⵠΔᐃⵠ && 0 < ᐃⲆⲆᐃ && 320 > ᐃⲆⲆᐃ && (ΔⲆⲆᐃΔΔΔ = Δⵠᐃ);
			Δⵠᐃⵠ = ᐃΔⵠᐃ.y1 + 250 + (ⵠⵠⵠΔ === (ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔᐃΔⲆⵠ) ? 150 : ⵠΔᐃⵠ);
			ᐃⲆⲆᐃ = ᐃⵠⲆ - Δⵠᐃⵠ;
			if (0 < (ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ΔᐃΔⲆⵠ) && ᐃⲆⲆᐃ > ⵠⲆΔ && 320 > ᐃⲆⲆᐃ) ΔⲆⲆᐃΔΔΔ = 1;
			ⲆΔΔⵠ = ᐃΔⵠᐃ.x2 + 80 + (ⵠᐃⲆⲆ === (ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔⵠⵠΔ) ? -200 : ⵠⲆΔ);
			ᐃⲆⲆᐃ = ⲆΔΔⵠ - Ⲇⵠ;
			(ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔⵠⵠΔ) > 0 && ⵠⲆⵠⵠ < ᐃⲆⲆᐃ && ᐃⲆⲆᐃ < 320 && (ΔⲆⲆᐃΔΔΔ = 1);
			ⲆⵠⲆⵠ = ᐃΔⵠᐃ.y2 - 200 + ((ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔᐃⵠΔ) === ⲆⲆⵠⲆ ? -200 : 0);
			ᐃⲆⲆᐃ = ⲆⵠⲆⵠ - ᐃⵠⲆ;
			if ((ᐃΔⵠᐃ.ⲆⵠⲆ & ΔᐃᐃΔ.ⵠΔᐃⵠΔ) > 0 && 0 < ᐃⲆⲆᐃ && 320 > ᐃⲆⲆᐃ) ΔⲆⲆᐃΔΔΔ = ΔᐃⲆⲆ;
			if (Ⲇⵠ >= ⲆᐃΔΔ && ⲆΔΔⵠ >= Ⲇⵠ && Δⵠᐃⵠ <= ᐃⵠⲆ && ᐃⵠⲆ <= ⲆⵠⲆⵠ) return ΔⲆⲆᐃΔΔΔ;
			return 0
		};
		this.ⵠⵠⵠⵠⲆ = function(ΔⵠᐃⲆᐃⵠⲆ, Ⲇⵠ, ᐃⵠⲆ) {
			var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[ΔⵠᐃⲆᐃⵠⲆ];
			ⲆᐃΔΔ = ᐃΔⵠᐃ.x1 + 30;
			Δⵠᐃⵠ = ᐃΔⵠᐃ.y1 + 250;
			ⲆΔΔⵠ = ᐃΔⵠᐃ.x2 + 80;
			ⲆⵠⲆⵠ = ᐃΔⵠᐃ.y2 - 200;
			if (Ⲇⵠ >= ⲆᐃΔΔ && ⲆΔΔⵠ >= Ⲇⵠ && Δⵠᐃⵠ <= ᐃⵠⲆ && ⲆⵠⲆⵠ >= ᐃⵠⲆ) return Math.min(Ⲇⵠ - ⲆᐃΔΔ, ⲆΔΔⵠ - Ⲇⵠ, ᐃⵠⲆ - Δⵠᐃⵠ, ⲆⵠⲆⵠ - ᐃⵠⲆ);
			var ΔⲆⲆᐃ = -1e6;
			if (Ⲇⵠ - ⲆᐃΔΔ < ⵠⵠⵠΔ) ΔⲆⲆᐃ = Math.max(ΔⲆⲆᐃ, Ⲇⵠ - ⲆᐃΔΔ);
			else if (ⲆΔΔⵠ - Ⲇⵠ < ⵠᐃⲆⲆ) ΔⲆⲆᐃ = Math.max(ΔⲆⲆᐃ, ⲆΔΔⵠ - Ⲇⵠ);
			ⵠᐃⲆᐃⵠⵠᐃ = -1e6;
			if (Δⵠᐃⵠ > ᐃⵠⲆ || ᐃⵠⲆ > ⲆⵠⲆⵠ) {
				if (ᐃⵠⲆ - Δⵠᐃⵠ < ᐃᐃⲆ) ⵠᐃⲆᐃⵠⵠᐃ = Math.max(ⵠᐃⲆᐃⵠⵠᐃ, ᐃⵠⲆ - Δⵠᐃⵠ);
				else ⵠᐃⲆᐃⵠⵠᐃ = Math.max(ⵠᐃⲆᐃⵠⵠᐃ, ⲆⵠⲆⵠ - ᐃⵠⲆ); - 1e6 !== ΔⲆⲆᐃ && ⵠᐃⲆᐃⵠⵠᐃ !== -1e6 ? ΔⲆⲆᐃ = Math.min(ΔⲆⲆᐃ, ⵠᐃⲆᐃⵠⵠᐃ) : ΔⲆⲆᐃ = ⵠᐃⲆᐃⵠⵠᐃ
			}
			return ΔⲆⲆᐃ
		};

		function ᐃᐃⵠⵠΔΔᐃᐃᐃ(ⲆΔᐃⵠ, ᐃΔⲆΔⵠ) {
			var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[ⲆΔᐃⵠ];
			var Ⲇᐃ = Math.floor(ᐃΔⵠᐃ.y1 / 100);
			var ⲆⲆᐃⲆ = Math.floor(ᐃΔⵠᐃ.x1 / 100);
			var ⲆΔⲆ = Math.floor(ᐃΔⵠᐃ.ⲆΔⲆ / 100);
			var ⲆⲆᐃ = Math.floor(ᐃΔⵠᐃ.w / 100);
			var ⲆⲆⲆΔΔ = Ⲇᐃ + Math.floor(ⲆΔⲆ / ΔΔⲆⲆ);
			var w2 = ⲆⲆᐃⲆ + Math.floor(ⲆⲆᐃ / 2);
			for (var ⵠᐃᐃᐃ = ⲆⲆⵠⲆ; ⵠᐃᐃᐃ < ᐃΔⲆΔ; ⵠᐃᐃᐃ++) {
				var ΔᐃΔΔ = Math.floor(ⲆⲆⲆΔΔ - ⲆⵠⲆᐃ + ⲆΔⵠΔΔ * ⲆⵠΔ.ⵠⲆΔᐃⲆ.get());
				var ⵠΔΔⵠ = Math.floor(w2 - ⲆᐃᐃΔ + ᐃⵠⵠⵠⲆ * ⲆⵠΔ.ⵠⲆΔᐃⲆ.get());
				Ⲇⵠᐃⵠ(ΔᐃΔΔ, ⵠΔΔⵠ, ⵠ[267], ⵠᐃᐃᐃ, 1)
			}
			for (var ⵠᐃᐃᐃ = ⲆⲆⵠⲆ; 80 > ⵠᐃᐃᐃ; ⵠᐃᐃᐃ++) {
				var ΔᐃΔΔ = Math.floor(ⲆⲆⲆΔΔ - ᐃΔⲆΔ + 6 * ⲆⵠΔ.ⵠⲆΔᐃⲆ.get());
				var ⵠΔΔⵠ = Math.floor(w2 - 3 + ⲆⵠΔ.ⵠⲆΔᐃⲆ.get() * 6);
				ⵠⲆⲆ === Ⲇⵠᐃⵠ(ΔᐃΔΔ, ⵠΔΔⵠ, ⵠ[282], 0, Δᐃⵠⵠ) && ᐃΔⲆΔⵠ.push([ΔᐃΔΔ, ⵠΔΔⵠ, 0])
			}
		}

		function ⲆΔⲆᐃⵠⲆⵠ(ⲆΔᐃⵠ, ᐃΔⲆΔⵠ) {
			var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[ⲆΔᐃⵠ];
			var Ⲇᐃ = Math.floor(ᐃΔⵠᐃ.y1 / ᐃⲆΔⲆᐃ);
			var ⲆⲆᐃⲆ = Math.floor(ᐃΔⵠᐃ.x1 / ᐃⲆⲆΔᐃ);
			var ⲆΔⲆ = Math.floor(ᐃΔⵠᐃ.ⲆΔⲆ / 100);
			var ⲆⲆᐃ = Math.floor(ᐃΔⵠᐃ.w / 100);
			var ᐃⵠⲆⲆᐃΔΔΔᐃ = Ⲇᐃ + ⲆΔⲆ;
			var ⲆⲆⲆⲆᐃᐃⲆᐃⵠ = ⲆⲆᐃⲆ + ⲆⲆᐃ;
			var ᐃΔᐃⵠⲆⵠⲆ = 2;
			var ⲆΔⲆⲆᐃ = ⲆΔⲆ;
			var ΔᐃΔΔ = Ⲇᐃ;
			var ⵠΔΔⵠ = ⲆⲆᐃⲆ + ΔⵠⵠᐃⲆ + Math.floor((ⲆⲆᐃ - 20) * ⲆⵠΔ.ⵠⲆΔᐃⲆ.get());
			for (var ᐃᐃⲆⲆⲆ = ⵠΔΔⵠ - ᐃⲆⵠᐃⵠ; ⵠΔΔⵠ + 4 > ᐃᐃⲆⲆⲆ; ᐃᐃⲆⲆⲆ++) Ⲇⵠᐃⵠ(Ⲇᐃ - ΔⲆᐃⲆ, ᐃᐃⲆⲆⲆ, ⵠ[282], ⵠΔᐃⵠ, 1);
			while (ⲆΔⲆⲆᐃ > ⵠᐃⲆ) {
				if (ᐃΔᐃⵠⲆⵠⲆ === ᐃᐃΔⵠ) {
					for (var ⵠᐃᐃᐃ = 10; Ⲇⵠᐃ < ⵠᐃᐃᐃ; ⵠᐃᐃᐃ--) {
						ⲆΔΔᐃⲆᐃᐃ(ΔᐃΔΔ, ⵠΔΔⵠ, 1, 1, 0, ᐃΔⲆΔⵠ, ⵠᐃᐃᐃ, ΔᐃⵠⲆ);
						ⲆΔⲆⲆᐃ -= ΔᐃⲆⲆ;
						ΔᐃΔΔ += ΔᐃΔⲆ
					}
					ᐃΔᐃⵠⲆⵠⲆ = ΔΔᐃ;
					continue
				}
				if (10 > ⲆΔⲆⲆᐃ) {
					for (var ⵠᐃᐃᐃ = ΔⵠΔ; ⵠⵠⵠ < ⲆΔⲆⲆᐃ; ⵠᐃᐃᐃ++) {
						ⲆΔΔᐃⲆᐃᐃ(ΔᐃΔΔ, ⵠΔΔⵠ, ΔᐃⵠⲆ, ΔᐃⵠⲆ, ⵠⲆⵠⵠ, ᐃΔⲆΔⵠ, ⵠᐃᐃᐃ, 1);
						ⲆΔⲆⲆᐃ -= ⵠⲆΔⲆ;
						ΔᐃΔΔ += 1
					}
					continue
				}
				if (ΔΔΔᐃ === ᐃΔᐃⵠⲆⵠⲆ) {
					var ⵠᐃⲆΔⵠⲆΔ = Math.min(ⲆΔⲆⲆᐃ, Math.floor(ΔΔⵠΔ + 4 * ⲆⵠΔ.ⵠⲆΔᐃⲆ.get()));
					var ⲆⲆᐃ = 1 + Math.floor(ⲆⵠΔ.ⵠⲆΔᐃⲆ.get() * ⵠΔⲆΔΔ);
					ⲆΔΔᐃⲆᐃᐃ(ΔᐃΔΔ, ⵠΔΔⵠ, ⵠᐃⲆΔⵠⲆΔ, 1, ᐃᐃᐃ, ᐃΔⲆΔⵠ, ⲆⲆᐃ, ⲆⲆᐃ);
					ᐃΔᐃⵠⲆⵠⲆ = 0;
					ⲆΔⲆⲆᐃ -= ⵠᐃⲆΔⵠⲆΔ;
					ΔᐃΔΔ += ⵠᐃⲆΔⵠⲆΔ;
					continue
				}
				ᐃΔᐃⵠⲆⵠⲆ = ⲆᐃΔ;
				var ⵠⵠᐃⲆⵠ = Math.floor(1 + ⲆⵠΔ.ⵠⲆΔᐃⲆ.get() * ᐃᐃⲆⲆ);
				var ⵠᐃⵠⲆⵠᐃⵠ = 1 + Math.floor(ⲆⵠΔ.ⵠⲆΔᐃⲆ.get() * 4);
				if (ⲆⲆᐃⲆ + 16 > ⵠΔΔⵠ) {
					ⲆΔΔᐃⲆᐃᐃ(ΔᐃΔΔ, ⵠΔΔⵠ, ⵠⵠᐃⲆⵠ, 0, 1, ᐃΔⲆΔⵠ, ⵠᐃⵠⲆⵠᐃⵠ, ⵠᐃⵠⲆⵠᐃⵠ);
					ⵠΔΔⵠ += ⵠⵠᐃⲆⵠ
				} else if (ⵠΔΔⵠ > ⲆⲆⲆⲆᐃᐃⲆᐃⵠ - ΔΔΔⵠᐃ) {
					ⲆΔΔᐃⲆᐃᐃ(ΔᐃΔΔ, ⵠΔΔⵠ, ⵠⵠᐃⲆⵠ, ⵠⵠⵠ, -ⵠΔᐃ, ᐃΔⲆΔⵠ, ⵠᐃⵠⲆⵠᐃⵠ, ⵠᐃⵠⲆⵠᐃⵠ);
					ⵠΔΔⵠ -= ⵠⵠᐃⲆⵠ
				} else ⲆⵠΔ.ⵠⲆΔᐃⲆ.get() > .5 ? (ⲆΔΔᐃⲆᐃᐃ(ΔᐃΔΔ, ⵠΔΔⵠ, ⵠⵠᐃⲆⵠ, ΔΔᐃᐃ, 1, ᐃΔⲆΔⵠ, ⵠᐃⵠⲆⵠᐃⵠ, ⵠᐃⵠⲆⵠᐃⵠ), ⵠΔΔⵠ += ⵠⵠᐃⲆⵠ) : (ⲆΔΔᐃⲆᐃᐃ(ΔᐃΔΔ, ⵠΔΔⵠ, ⵠⵠᐃⲆⵠ, Δⵠⵠⵠ, -1, ᐃΔⲆΔⵠ, ⵠᐃⵠⲆⵠᐃⵠ, ⵠᐃⵠⲆⵠᐃⵠ), ⵠΔΔⵠ -= ⵠⵠᐃⲆⵠ)
			}
			for (var ᐃᐃⲆⲆⲆ = ⵠΔΔⵠ - 1; ᐃᐃⲆⲆⲆ < ⵠΔΔⵠ + 2; ᐃᐃⲆⲆⲆ++) Ⲇⵠᐃⵠ(ΔᐃΔΔ, ᐃᐃⲆⲆⲆ, ⵠ[282], ΔⲆⲆ, ΔⲆᐃᐃ)
		}

		function ΔΔΔⲆᐃⵠⵠⲆⵠ(ΔⲆⵠΔ, ⲆΔᐃⵠ) {
			var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[ⲆΔᐃⵠ];
			for (var ⲆⵠᐃⲆⵠ = ⵠⵠⵠ, ⵠᐃᐃᐃ = 0; ΔⲆⵠΔ > ⵠᐃᐃᐃ && ⲆⵠᐃⲆⵠ < 1e4; ⲆⵠᐃⲆⵠ++) {
				var ᐃⵠⲆ = ᐃΔⵠᐃ.y1 + ⲆⵠΔ.ⵠⲆΔᐃⲆ.get() * ᐃΔⵠᐃ.ⲆΔⲆ;
				var Ⲇⵠ = ᐃΔⵠᐃ.x1 + ᐃΔⵠᐃ.w * ⲆⵠΔ.ⵠⲆΔᐃⲆ.get();
				var ΔᐃΔΔ = Math.floor(ᐃⵠⲆ / 100);
				var ⵠΔΔⵠ = Math.floor(Ⲇⵠ / ⲆⵠⲆⲆⵠ);
				var ΔⲆⲆᐃ = ⲆⵠΔ.ⵠⵠⵠⵠⲆ(ⲆΔᐃⵠ, 100 * ⵠΔΔⵠ + 50, ΔᐃΔΔ * ᐃΔⵠᐃⵠ + 50);
				if (ΔⲆⲆᐃ < 600) continue;
				var ok = ΔᐃⵠⲆ;
				for (var Ⲇᐃ = ΔᐃΔΔ - 4; 1 === ok && Ⲇᐃ <= ΔᐃΔΔ + ᐃⵠⵠⵠᐃ; Ⲇᐃ++) {
					for (var ⲆⲆᐃⲆ = ⵠΔΔⵠ - ⵠᐃᐃΔ; 1 === ok && ⲆⲆᐃⲆ <= ⵠΔΔⵠ + 4; ⲆⲆᐃⲆ++) {
						undefined !== ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ] && (ok = 0)
					}
				}
				if (ΔΔᐃ === ok) continue;
				Ⲇⵠᐃⵠ(ΔᐃΔΔ, ⵠΔΔⵠ, ⵠ[105], ⵠᐃᐃᐃ % ΔᐃΔᐃᐃ, ⵠⲆΔ);
				ⵠᐃᐃᐃ++
			}
		}

		function ⵠⲆᐃᐃΔᐃᐃ(ⲆΔᐃⵠ, ᐃΔⲆΔⵠ) {
			for (var ⵠᐃᐃᐃ = 0; ⵠᐃᐃᐃ < ᐃΔⲆΔⵠ.length; ⵠᐃᐃᐃ++) {
				var ΔᐃΔΔ = ᐃΔⲆΔⵠ[ⵠᐃᐃᐃ][0];
				var ⵠΔΔⵠ = ᐃΔⲆΔⵠ[ⵠᐃᐃᐃ][1];
				var ᐃᐃᐃⵠΔⵠⵠ = ᐃΔⲆΔⵠ[ⵠᐃᐃᐃ][2];
				ᐃⵠⵠⲆⲆⵠΔⵠᐃ(ΔᐃΔΔ, ⵠΔΔⵠ, ⲆΔᐃⵠ, ᐃᐃᐃⵠΔⵠⵠ)
			}
		}

		function ⲆΔΔᐃⲆᐃᐃ(Ⲇᐃ, ⲆⲆᐃⲆ, ᐃⵠᐃΔⵠ, ⲆⵠᐃⵠⲆⵠᐃᐃⲆ, ΔⵠⵠⵠᐃⲆⵠΔⵠ, ᐃΔⲆΔⵠ, ⲆⲆᐃ, ⲆΔⲆ) {
			var w1 = Math.floor(ⲆⲆᐃ / ΔΔⲆⲆ);
			var w2 = Math.max(ΔᐃΔⲆ, Math.floor(ⲆⲆᐃ / 2));
			var ⵠΔⲆⵠΔⵠΔⵠⲆ = Math.floor(ⲆΔⲆ / 2);
			var ⲆⲆⲆΔΔ = Math.max(ᐃⲆΔ, Math.floor(ⲆΔⲆ / 2));
			for (var ⵠᐃᐃᐃ = ⵠⲆⵠⵠ; ⵠᐃᐃᐃ < ᐃⵠᐃΔⵠ; ⵠᐃᐃᐃ++) {
				for (var ΔᐃΔΔ = Ⲇᐃ - ⵠΔⲆⵠΔⵠΔⵠⲆ; Ⲇᐃ + ⲆⲆⲆΔΔ > ΔᐃΔΔ; ΔᐃΔΔ++) {
					for (var ⵠΔΔⵠ = ⲆⲆᐃⲆ - w1; ⲆⲆᐃⲆ + w2 > ⵠΔΔⵠ; ⵠΔΔⵠ++) {
						if (ᐃᐃΔ === Ⲇⵠᐃⵠ(ΔᐃΔΔ, ⵠΔΔⵠ, ⵠ[282], 0, ΔΔⵠΔ)) ᐃΔⲆΔⵠ.push([ΔᐃΔΔ, ⵠΔΔⵠ, 1])
					}
				}
				Ⲇᐃ += ⲆⵠᐃⵠⲆⵠᐃᐃⲆ;
				ⲆⲆᐃⲆ += ΔⵠⵠⵠᐃⲆⵠΔⵠ
			}
		}
		this.ΔᐃΔΔⵠΔⲆ = function(ⲆΔⲆᐃ, Ⲇⵠ, ᐃⵠⲆ) {
			var ΔᐃΔΔ = ᐃⵠⲆ;
			var ⵠΔΔⵠ = Ⲇⵠ;
			Ⲇⵠᐃⵠ(ΔᐃΔΔ, ⵠΔΔⵠ, ⵠ[418], ⲆΔⲆᐃ, 1);
			for (var ⵠᐃᐃᐃ = ᐃᐃⲆ; 4 > ⵠᐃᐃᐃ; ⵠᐃᐃᐃ++) {
				for (var ᐃᐃⲆᐃ = 0; ᐃⲆΔΔ > ᐃᐃⲆᐃ; ᐃᐃⲆᐃ++) {
					Ⲇⵠᐃⵠ(ΔᐃΔΔ - ᐃᐃⲆᐃ, ⵠΔΔⵠ - ⵠᐃᐃᐃ, ⵠ[562], ⵠΔᐃⵠ);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ + ᐃᐃⲆᐃ, ⵠΔΔⵠ - ⵠᐃᐃᐃ, ⵠ[562], 0);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ + ᐃᐃⲆᐃ, ⵠΔΔⵠ + ⵠᐃᐃᐃ, ⵠ[562], ⲆⲆⵠⲆ);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ - ᐃᐃⲆᐃ, ⵠΔΔⵠ + ⵠᐃᐃᐃ, ⵠ[562], 0)
				}
			}
			if (0 === ⲆΔⲆᐃ) {
				for (var ⵠᐃᐃᐃ = 0; ⵠⵠⵠᐃ > ⵠᐃᐃᐃ; ⵠᐃᐃᐃ++) {
					Ⲇⵠᐃⵠ(ΔᐃΔΔ - ⵠᐃᐃᐃ, ⵠΔΔⵠ - Ⲇⵠⵠⵠ, ⵠ[562], 0);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ + ⵠᐃᐃᐃ, ⵠΔΔⵠ - 4, ⵠ[562], 0);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ - ⵠᐃᐃᐃ, ⵠΔΔⵠ + 4, ⵠ[562], 0);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ + ⵠᐃᐃᐃ, ⵠΔΔⵠ + 4, ⵠ[562], ⵠᐃⲆⲆ)
				}
				for (var ⵠᐃᐃᐃ = ΔΔᐃ; 3 > ⵠᐃᐃᐃ; ⵠᐃᐃᐃ++) {
					Ⲇⵠᐃⵠ(ΔᐃΔΔ - ᐃⵠΔⲆ, ⵠΔΔⵠ + ⵠᐃᐃᐃ, ⵠ[562], ᐃᐃⲆ);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ + 3, ⵠΔΔⵠ + ⵠᐃᐃᐃ, ⵠ[562], ⲆⵠⲆⲆ);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ - ⲆᐃᐃΔ, ⵠΔΔⵠ - ⵠᐃᐃᐃ, ⵠ[562], 0);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ + ᐃΔⲆΔ, ⵠΔΔⵠ - ⵠᐃᐃᐃ, ⵠ[562], ᐃᐃⲆ)
				}
				Ⲇⵠᐃⵠ(ΔᐃΔΔ - ΔᐃⵠΔ, ⵠΔΔⵠ - ⵠΔⲆΔΔ, ⵠ[562], ᐃᐃⲆ);
				Ⲇⵠᐃⵠ(ΔᐃΔΔ - ΔΔᐃΔ, ⵠΔΔⵠ - 3, ⵠ[562], Δⵠⵠⵠ);
				Ⲇⵠᐃⵠ(ΔᐃΔΔ + ⲆⲆΔⲆ, ⵠΔΔⵠ + ᐃⵠⵠⵠᐃ, ⵠ[562], 0);
				Ⲇⵠᐃⵠ(ΔᐃΔΔ + ⵠⵠΔⵠ, ⵠΔΔⵠ + 3, ⵠ[562], ᐃⵠⵠⲆ)
			} else if (1 === ⲆΔⲆᐃ) {
				for (var ⵠᐃᐃᐃ = 0; 3 > ⵠᐃᐃᐃ; ⵠᐃᐃᐃ++) {
					Ⲇⵠᐃⵠ(ΔᐃΔΔ - ⵠᐃᐃᐃ, ⵠΔΔⵠ - ⵠΔⲆΔΔ, ⵠ[562], 0);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ + ⵠᐃᐃᐃ, ⵠΔΔⵠ - 4, ⵠ[562], Ⲇᐃⵠ);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ - ⵠᐃᐃᐃ, ⵠΔΔⵠ + 4, ⵠ[562], ⵠⵠⲆⵠ);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ + ⵠᐃᐃᐃ, ⵠΔΔⵠ + ⵠⵠᐃΔ, ⵠ[562], 0)
				}
				for (var ⵠᐃᐃᐃ = 0; ΔⵠⵠⲆ > ⵠᐃᐃᐃ; ⵠᐃᐃᐃ++) {
					Ⲇⵠᐃⵠ(ΔᐃΔΔ - 3, ⵠΔΔⵠ + ⵠᐃᐃᐃ, ⵠ[562], ᐃᐃⲆ);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ + 3, ⵠΔΔⵠ + ⵠᐃᐃᐃ, ⵠ[562], ⵠⵠⵠ);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ - 3, ⵠΔΔⵠ - ⵠᐃᐃᐃ, ⵠ[562], ⵠᐃⲆⲆ);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ + 3, ⵠΔΔⵠ - ⵠᐃᐃᐃ, ⵠ[562], Δⵠⵠⵠ)
				}
			} else if (ⲆΔⲆᐃ === 2) {
				for (var ⵠᐃᐃᐃ = ⲆⵠⲆⲆ; ⵠⵠⵠᐃ > ⵠᐃᐃᐃ; ⵠᐃᐃᐃ++) {
					Ⲇⵠᐃⵠ(ΔᐃΔΔ - ⵠᐃᐃᐃ, ⵠΔΔⵠ - ⲆΔᐃᐃΔ, ⵠ[562], ⲆⵠⲆⲆ);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ + ⵠᐃᐃᐃ, ⵠΔΔⵠ - ⲆΔᐃᐃΔ, ⵠ[562], ⵠⵠⲆⵠ);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ - ⵠᐃᐃᐃ, ⵠΔΔⵠ + ⵠᐃΔΔ, ⵠ[562], ⵠΔᐃⵠ);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ + ⵠᐃᐃᐃ, ⵠΔΔⵠ + ⵠⲆΔⵠ, ⵠ[562], ⵠⲆⵠⵠ)
				}
				for (var ⵠᐃᐃᐃ = 0; ⵠᐃᐃᐃ < 3; ⵠᐃᐃᐃ++) {
					Ⲇⵠᐃⵠ(ΔᐃΔΔ - 3, ⵠΔΔⵠ + ⵠᐃᐃᐃ, ⵠ[562], 0);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ + ᐃⲆΔΔ, ⵠΔΔⵠ + ⵠᐃᐃᐃ, ⵠ[562], Δⵠⵠⵠ);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ - ᐃⲆΔΔ, ⵠΔΔⵠ - ⵠᐃᐃᐃ, ⵠ[562], 0);
					Ⲇⵠᐃⵠ(ΔᐃΔΔ + ⵠⵠΔⵠ, ⵠΔΔⵠ - ⵠᐃᐃᐃ, ⵠ[562], ⵠΔᐃⵠ)
				}
			}
		};
		this.ⲆⵠⲆᐃΔⲆⲆᐃⲆ = function(ΔⲆⵠΔ) {
			for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆⵠΔ.ᐃΔⲆᐃ.length && ⵠⲆⵠⵠ < ΔⲆⵠΔ; Ⲇᐃ++) {
				var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[Ⲇᐃ];
				if (ⲆⵠΔ.ΔⲆⵠⲆΔ !== ᐃΔⵠᐃ.Δᐃᐃ) continue;
				if (1800 < ᐃΔⵠᐃ.w && 1e3 < ᐃΔⵠᐃ.ⲆΔⲆ) {
					var ⵠΔΔⵠ = Math.floor((ᐃΔⵠᐃ.x1 + ᐃΔⵠᐃ.w / 2) / 100);
					var ΔᐃΔΔ = Math.floor((ᐃΔⵠᐃ.y1 + ᐃΔⵠᐃ.ⲆΔⲆ / 2) / ⲆᐃⲆⵠⲆ);
					ⲆⵠΔ.ΔᐃΔΔⵠΔⲆ(ΔⲆⵠΔ % 3, ⵠΔΔⵠ, ΔᐃΔΔ);
					for (var ⵠᐃᐃᐃ = ᐃᐃᐃ; ⵠᐃᐃᐃ < 3; ⵠᐃᐃᐃ++) {
						var ⵠⲆΔⲆⲆⲆⵠ = ΔᐃΔΔ - ⵠΔⵠΔ + Math.floor(ⲆⵠΔ.ⵠⲆΔᐃⲆ.get() * 4);
						var ᐃᐃⲆⲆⲆ = ⵠΔΔⵠ - ⲆΔᐃⲆ + Math.floor(ᐃᐃⲆⵠⲆ * ⲆⵠΔ.ⵠⲆΔᐃⲆ.get());
						ΔΔⵠⵠⲆ === ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[ⵠⲆΔⲆⲆⲆⵠ][ᐃᐃⲆⲆⲆ]["s"] && Ⲇⵠᐃⵠ(ⵠⲆΔⲆⲆⲆⵠ, ᐃᐃⲆⲆⲆ, ⵠ[267], ⵠᐃᐃᐃ);
						var ⵠⲆΔⲆⲆⲆⵠ = ΔᐃΔΔ - ⲆⲆΔⲆ + Math.floor(4 * ⲆⵠΔ.ⵠⲆΔᐃⲆ.get());
						var ᐃᐃⲆⲆⲆ = ⵠΔΔⵠ - ΔⲆⵠᐃ + Math.floor(ⲆⵠΔ.ⵠⲆΔᐃⲆ.get() * 6);
						if (ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[ⵠⲆΔⲆⲆⲆⵠ][ᐃᐃⲆⲆⲆ][ⵠ[267]] === undefined) Ⲇⵠᐃⵠ(ⵠⲆΔⲆⲆⲆⵠ, ᐃᐃⲆⲆⲆ, "s", ⵠᐃᐃᐃ)
					}
					var ⵠⲆΔⲆⲆⲆⵠ = ΔᐃΔΔ - ᐃᐃΔⵠ + Math.floor(4 * ⲆⵠΔ.ⵠⲆΔᐃⲆ.get());
					var ᐃᐃⲆⲆⲆ = ⵠΔΔⵠ - ΔⲆΔⲆ + Math.floor(ᐃⵠⵠⵠⲆ * ⲆⵠΔ.ⵠⲆΔᐃⲆ.get());
					ΔΔΔᐃᐃ === ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[ⵠⲆΔⲆⲆⲆⵠ][ᐃᐃⲆⲆⲆ][ⵠ[267]] && undefined === ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[ⵠⲆΔⲆⲆⲆⵠ][ᐃᐃⲆⲆⲆ]["s"] && Ⲇⵠᐃⵠ(ⵠⲆΔⲆⲆⲆⵠ, ᐃᐃⲆⲆⲆ, "p", Δⵠⵠⵠ, ⵠⲆΔⲆ);
					ΔⲆⵠΔ--
				}
			}
		};
		this.ⵠᐃᐃᐃⲆⲆⵠⵠⲆ = function(ΔΔᐃᐃᐃ) {
			ⲆⵠΔ.ⵠⲆΔᐃⲆ.ⵠΔⲆΔⲆ(ΔΔᐃᐃᐃ);
			var ΔΔⵠᐃⵠⲆΔ = 0;
			while (1) {
				ΔΔⵠᐃⵠⲆΔ++;
				if (1e4 < ΔΔⵠᐃⵠⲆΔ) return;
				ⲆⵠΔ.ᐃΔⲆᐃ = [];
				if (0 === ⲆⵠΔ.ⵠᐃⵠΔΔ && (ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃᐃΔⲆΔ || ΔᐃᐃΔ.Δᐃⵠᐃᐃ === ⲆⵠΔ.mode || ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃΔⵠᐃᐃ)) ⲆⵠΔ.ⵠᐃⵠΔΔ = ⵠⵠᐃΔΔⵠⵠ;
				if (ΔᐃᐃΔ.ᐃΔⲆⲆᐃ === ⲆⵠΔ.mode) {
					ⲆⵠΔ.ᐃΔⲆᐃ.push(new ⲆⵠΔ.ᐃⵠⲆΔⲆⵠⲆ(ⲆⵠΔ.ᐃΔΔΔⵠ, 2, 2, 80, 80, 15))
				} else if (ⲆⵠΔ.mode === ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ) {
					ⲆⵠΔ.ᐃΔⲆᐃ.push(new ⲆⵠΔ.ᐃⵠⲆΔⲆⵠⲆ(ⲆⵠΔ.ᐃΔΔΔⵠ, ΔΔΔⵠ, ⲆᐃⵠΔ, 150, 150, 15))
				} else {
					if (ⲆⵠΔ.ⵠᐃⵠΔΔ !== ΔΔᐃ && ⵠᐃⲆⲆ < ⲆⵠΔ.ⵠᐃⵠΔΔ.length && 3 < ⲆⵠΔ.ⵠᐃⵠΔΔ[0].length) {
						for (var ⲆⲆᐃΔ = ⲆⲆⵠⲆ; ⲆⵠΔ.ⵠᐃⵠΔΔ.length > ⲆⲆᐃΔ; ⲆⲆᐃΔ++) {
							var ⵠⵠⵠⲆⲆ = ⲆⵠΔ.ⵠᐃⵠΔΔ[ⲆⲆᐃΔ];
							if (ᐃᐃᐃ === ⵠⵠⵠⲆⲆ[0]) {
								var ⵠᐃⵠⵠⲆ = ΔᐃᐃΔ.ᐃΔΔΔⵠ;
								switch (ⵠⵠⵠⲆⲆ[Δᐃⵠⵠ]) {
									case "FOREST":
										ⵠᐃⵠⵠⲆ = ⲆⵠΔ.ᐃΔΔΔⵠ;
										break;
									case "WINTER":
										ⵠᐃⵠⵠⲆ = ⲆⵠΔ.ⵠᐃᐃᐃⲆⲆᐃ;
										break;
									case "DESERT":
										ⵠᐃⵠⵠⲆ = ⲆⵠΔ.ᐃᐃΔⲆᐃᐃⵠ;
										break;
									case "LAVA":
										ⵠᐃⵠⵠⲆ = ⲆⵠΔ.ΔΔⵠⵠᐃΔⵠ;
										break;
									case "DRAGON":
										ⵠᐃⵠⵠⲆ = ⲆⵠΔ.ⲆⵠⵠⲆⵠᐃΔ;
										break
								}
								ⲆⵠΔ.ᐃΔⲆᐃ.push(new ⲆⵠΔ.ᐃⵠⲆΔⲆⵠⲆ(ⵠᐃⵠⵠⲆ, ⵠⵠⵠⲆⲆ[2], ⵠⵠⵠⲆⲆ[3], ⵠⵠⵠⲆⲆ[4], ⵠⵠⵠⲆⲆ[ΔⵠⲆᐃᐃ], ⵠⵠⵠⲆⲆ[ΔᐃΔᐃᐃ], ⵠⵠⵠⲆⲆ[ᐃⲆᐃΔΔ]));
								continue
							} else break
						}
					} else if (ⲆⵠΔ.ⵠᐃⵠΔΔ !== ᐃᐃⲆ) {
						for (var ⲆⲆᐃΔ = 0; ⲆⵠΔ.ⵠᐃⵠΔΔ.length > ⲆⲆᐃΔ; ⲆⲆᐃΔ++) {
							var ᐃΔⵠᐃ = ⲆⵠΔ.ⵠᐃⵠΔΔ[ⲆⲆᐃΔ];
							var ⵠᐃⵠⵠⲆ = ΔᐃᐃΔ.ᐃΔΔΔⵠ;
							switch (ᐃΔⵠᐃ[0]) {
								case "FOREST":
									ⵠᐃⵠⵠⲆ = ⲆⵠΔ.ᐃΔΔΔⵠ;
									break;
								case "WINTER":
									ⵠᐃⵠⵠⲆ = ⲆⵠΔ.ⵠᐃᐃᐃⲆⲆᐃ;
									break;
								case "DESERT":
									ⵠᐃⵠⵠⲆ = ⲆⵠΔ.ᐃᐃΔⲆᐃᐃⵠ;
									break;
								case "LAVA":
									ⵠᐃⵠⵠⲆ = ⲆⵠΔ.ΔΔⵠⵠᐃΔⵠ;
									break;
								case "DRAGON":
									ⵠᐃⵠⵠⲆ = ⲆⵠΔ.ⲆⵠⵠⲆⵠᐃΔ;
									break
							}
							if (ⵠⵠⲆⵠ === ⵠᐃⵠᐃᐃᐃΔᐃΔ(ⵠᐃⵠⵠⲆ, ᐃΔⵠᐃ[ΔⵠΔ], ᐃΔⵠᐃ[ΔΔᐃΔⵠ], 0, (ⲆⲆᐃΔ + ⵠᐃⵠΔ) * ΔⲆⲆΔΔ)) break
						}
						if (ⲆⲆᐃΔ !== ⲆⵠΔ.ⵠᐃⵠΔΔ.length) continue
					}
				}
				break
			}
			ⲆΔⵠⵠⲆᐃⲆⲆΔ();
			var ⵠᐃᐃⵠⵠⵠΔ = [];
			for (var Ⲇᐃ = ⵠᐃⲆⲆ; ⲆⵠΔ.ᐃⵠᐃᐃᐃ > Ⲇᐃ; Ⲇᐃ++) {
				ⵠᐃᐃⵠⵠⵠΔ[Ⲇᐃ] = new Array(ⲆⵠΔ.ΔᐃᐃⵠΔ);
				for (var ⲆⲆᐃⲆ = 0; ⲆⵠΔ.ΔᐃᐃⵠΔ > ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) ⵠᐃᐃⵠⵠⵠΔ[Ⲇᐃ][ⲆⲆᐃⲆ] = 0
			}
			for (var Ⲇᐃ = ⲆⲆⵠⲆ; Ⲇᐃ < ⲆⵠΔ.ᐃΔⲆᐃ.length; Ⲇᐃ++) {
				var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[Ⲇᐃ];
				var ⲆΔΔⵠ = ᐃΔⵠᐃ.x2 / 100;
				var ⲆⵠⲆⵠ = ᐃΔⵠᐃ.y2 / ⲆⵠⲆΔⵠⲆⲆ;
				for (var Ⲇⵠ = ᐃΔⵠᐃ.x1 / 100; ⲆΔΔⵠ >= Ⲇⵠ; Ⲇⵠ++) {
					for (var ᐃⵠⲆ = ᐃΔⵠᐃ.y1 / 100; ᐃⵠⲆ <= ⲆⵠⲆⵠ; ᐃⵠⲆ++) ⵠᐃᐃⵠⵠⵠΔ[ᐃⵠⲆ][Ⲇⵠ] = 1
				}
			}
			for (var ᐃⵠⲆ = ⵠⲆΔ; ᐃⵠⲆ < ⲆⵠΔ.ᐃⵠᐃᐃᐃ; ᐃⵠⲆ++) {
				for (var Ⲇⵠ = ΔΔᐃ; ⲆⵠΔ.ΔᐃᐃⵠΔ > Ⲇⵠ; Ⲇⵠ++) {
					if (0 === ⵠᐃᐃⵠⵠⵠΔ[ᐃⵠⲆ][Ⲇⵠ]) ΔⵠΔⲆⵠⲆᐃⲆⲆ(ⵠᐃᐃⵠⵠⵠΔ, Ⲇⵠ, ᐃⵠⲆ)
				}
			}
			ⲆᐃΔᐃⲆ = {
				w: ⲆⵠΔ.ΔᐃᐃⵠΔ,
				"ⲆΔⲆ": ⲆⵠΔ.ᐃⵠᐃᐃᐃ,
				"ΔᐃⲆΔ": []
			};
			for (var Ⲇᐃ = ⵠⵠⵠΔ; ⲆⵠΔ.ᐃⵠᐃᐃᐃ > Ⲇᐃ; Ⲇᐃ++) ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[Ⲇᐃ] = [];
			if (0 !== ⲆⵠΔ.ⵠᐃⵠΔΔ && Ⲇᐃⵠ < ⲆⵠΔ.ⵠᐃⵠΔΔ.length && ⲆⵠΔ.ⵠᐃⵠΔΔ[ⵠⵠⵠ].length > 3) {
				for (var ⲆⲆᐃΔ = 0; ⲆⵠΔ.ⵠᐃⵠΔΔ.length > ⲆⲆᐃΔ; ⲆⲆᐃΔ++) {
					var ⵠⵠⵠⲆⲆ = ⲆⵠΔ.ⵠᐃⵠΔΔ[ⲆⲆᐃΔ];
					ⵠⵠⵠⲆⲆ[1] === ⵠ[418] && ⲆⵠΔ.ΔᐃΔΔⵠΔⲆ(ⵠⵠⵠⲆⲆ[ΔᐃⵠΔ], ⵠⵠⵠⲆⲆ[3], ⵠⵠⵠⲆⲆ[4])
				}
			} else ⲆⵠΔ.ⲆⵠⲆᐃΔⲆⲆᐃⲆ(ⲆⵠΔ.ΔᐃⲆⲆᐃⵠⵠ);
			if (ⵠⲆΔ !== ⲆⵠΔ.ⵠᐃⵠΔΔ && ⲆⵠΔ.ⵠᐃⵠΔΔ.length > 0 && ⲆⵠΔ.ⵠᐃⵠΔΔ[0].length > ⲆⵠⲆᐃ) {
				var ᐃΔⲆΔⵠ = [];
				for (var ⲆⲆᐃΔ = 0; ⲆⵠΔ.ⵠᐃⵠΔΔ.length > ⲆⲆᐃΔ; ⲆⲆᐃΔ++) {
					var ⵠⵠⵠⲆⲆ = ⲆⵠΔ.ⵠᐃⵠΔΔ[ⲆⲆᐃΔ];
					if (ⵠⵠⵠⲆⲆ[0] !== 1) continue;
					"r" === ⵠⵠⵠⲆⲆ[ⵠⲆΔⲆ] ? (Ⲇⵠᐃⵠ(ⵠⵠⵠⲆⲆ[ΔⲆΔⵠ], ⵠⵠⵠⲆⲆ[ΔΔⲆᐃ], ⵠ[282], 0, ⵠᐃⵠΔ), ᐃΔⲆΔⵠ.push([ⵠⵠⵠⲆⲆ[ᐃⵠΔⵠ], ⵠⵠⵠⲆⲆ[2], ⵠⵠⵠⲆⲆ[4]])) : Ⲇⵠᐃⵠ(ⵠⵠⵠⲆⲆ[ⵠᐃᐃΔ], ⵠⵠⵠⲆⲆ[3], ⵠⵠⵠⲆⲆ[ΔᐃⲆⲆ], ⵠⵠⵠⲆⲆ[2], ⵠⵠⵠⲆⲆ[5])
				}
				ⵠⲆᐃᐃΔᐃᐃ(0, ᐃΔⲆΔⵠ);
				ᐃΔⲆΔⵠ = []
			} else {
				for (var Ⲇᐃ = ᐃⵠⵠⲆ; Ⲇᐃ < ⲆⵠΔ.ᐃΔⲆᐃ.length; Ⲇᐃ++) {
					var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[Ⲇᐃ];
					if (ⲆⵠΔ.mode === ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ) {
						if (ᐃΔⵠᐃ.Δᐃᐃ === ⲆⵠΔ.ᐃΔΔΔⵠ) ⵠΔᐃⵠᐃᐃᐃⲆⲆ(Ⲇᐃ, ᐃΔⵠᐃ.w / 1e4)
					} else {
						if (ᐃΔⵠᐃ.Δᐃᐃ === ⲆⵠΔ.ᐃΔΔΔⵠ) ΔᐃⲆᐃᐃΔⵠⵠⲆ(Ⲇᐃ, ᐃΔⵠᐃ.w / (ΔᐃⲆⲆⲆ * ᐃⲆⲆΔᐃ));
						ᐃΔⵠᐃ.Δᐃᐃ === ⲆⵠΔ.ΔΔⵠⵠᐃΔⵠ && ⲆⲆᐃⵠⲆⵠᐃⵠᐃ(Ⲇᐃ, ᐃΔⵠᐃ.w / (ⵠⵠⲆⲆⵠ * ᐃΔᐃⵠⵠ));
						ᐃΔⵠᐃ.Δᐃᐃ === ⲆⵠΔ.ⵠᐃᐃᐃⲆⲆᐃ && ᐃⵠᐃⵠⵠⵠΔΔΔ(Ⲇᐃ, ᐃΔⵠᐃ.w / 1e4);
						if (ⲆⵠΔ.ᐃᐃΔⲆᐃᐃⵠ === ᐃΔⵠᐃ.Δᐃᐃ) ΔⵠⵠᐃⲆΔᐃⲆᐃ(Ⲇᐃ, ᐃΔⵠᐃ.w / (100 * ᐃΔᐃⵠⵠ));
						if (ⲆⵠΔ.ⲆⵠⵠⲆⵠᐃΔ === ᐃΔⵠᐃ.Δᐃᐃ) ΔⲆⵠᐃᐃⲆⵠᐃᐃ(Ⲇᐃ)
					}
				}
			}
			ᐃᐃⲆΔΔΔΔΔⲆ();
			ⲆⵠΔ.ΔⲆΔⲆⲆⵠΔⵠᐃ(ⲆᐃΔᐃⲆ)
		};

		function ᐃᐃⲆⵠᐃΔⲆ(ⲆΔᐃⵠ) {
			var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[ⲆΔᐃⵠ];
			Ⲇⵠᐃⵠ(-3 + Math.floor(ᐃΔⵠᐃ.y2 / ᐃΔⵠᐃⵠ), -1 + Math.floor(ᐃΔⵠᐃ.x2 / 100), "s", 0, 0);
			Ⲇⵠᐃⵠ(3 + Math.floor(ᐃΔⵠᐃ.y1 / 100), -1 + Math.floor(ᐃΔⵠᐃ.x2 / 100), "s", 0, 0);
			Ⲇⵠᐃⵠ(-Δⵠⵠᐃ + Math.floor(ᐃΔⵠᐃ.y2 / ᐃⵠΔᐃⵠ), ΔⵠⲆⲆ + Math.floor(ᐃΔⵠᐃ.x1 / ⲆᐃⲆⵠⲆ), "s", ⵠⲆΔ, ⵠΔᐃᐃ);
			Ⲇⵠᐃⵠ(ⲆᐃᐃΔ + Math.floor(ᐃΔⵠᐃ.y1 / 100), ⵠᐃⵠΔ + Math.floor(ᐃΔⵠᐃ.x1 / ΔᐃⲆⲆⲆ), "s", ⵠⲆᐃ, 0)
		}

		function ᐃⵠᐃⵠⵠⵠΔΔΔ(ⲆΔᐃⵠ, ᐃⵠᐃΔⵠ) {
			for (var Ⲇᐃ = 0; Ⲇᐃ < 3; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "s", Ⲇᐃ, Math.floor(ⵠΔⵠⲆⵠ * ᐃⵠᐃΔⵠ));
			for (var Ⲇᐃ = 0; ⲆⵠⲆᐃ > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "f", Ⲇᐃ, Math.floor(24 * ᐃⵠᐃΔⵠ));
			for (var Ⲇᐃ = ⵠⲆⵠⵠ; ᐃⲆᐃΔ > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "d", Ⲇᐃ, Math.max(ΔΔⵠΔ, Math.floor(ᐃⵠᐃΔⵠ * 2)), .3);
			for (var Ⲇᐃ = 0; 3 > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "g", Ⲇᐃ, Math.floor(ᐃⵠᐃΔⵠ * ΔΔⵠΔᐃ));
			ᐃᐃⲆⵠᐃΔⲆ(ⲆΔᐃⵠ)
		}

		function ᐃΔΔᐃⲆᐃⵠ(Ⲇᐃ, ⲆⲆᐃⲆ) {
			return Ⲇᐃ >= 0 && ⲆⲆᐃⲆ >= 0 && Ⲇᐃ < ⲆⵠΔ.ᐃⵠᐃᐃᐃ && ⲆⲆᐃⲆ < ⲆⵠΔ.ΔᐃᐃⵠΔ
		}

		function ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, ⲆΔⲆᐃ, ᐃΔᐃⲆⲆ, ΔⲆⵠΔ, ᐃⵠΔⵠⲆΔⲆ) {
			var ᐃΔⵠᐃ = ⲆⵠΔ.ᐃΔⲆᐃ[ⲆΔᐃⵠ];
			var Ⲇⵠ = Math.floor(ᐃΔⵠᐃ.x1 / ᐃⵠΔᐃⵠ);
			var ᐃⵠⲆ = Math.floor(ᐃΔⵠᐃ.y1 / ⲆΔⵠⲆⵠⵠΔ);
			var ⲆⲆᐃ = Math.floor(ᐃΔⵠᐃ.w / 100);
			var ⲆΔⲆ = Math.floor(ᐃΔⵠᐃ.ⲆΔⲆ / 100);
			Ⲇⵠⵠᐃᐃ !== ᐃⵠΔⵠⲆΔⲆ && (ᐃⵠΔⵠⲆΔⲆ = 1 - ᐃⵠΔⵠⲆΔⲆ, Ⲇⵠ += Math.floor(ⲆⲆᐃ * ᐃⵠΔⵠⲆΔⲆ / ⲆᐃⵠΔ), ᐃⵠⲆ += Math.floor(ⲆΔⲆ * ᐃⵠΔⵠⲆΔⲆ / ᐃᐃΔⵠ), ⲆⲆᐃ -= Math.floor(ᐃⵠΔⵠⲆΔⲆ * ⲆⲆᐃ), ⲆΔⲆ -= Math.floor(ᐃⵠΔⵠⲆΔⲆ * ⲆΔⲆ));
			var ΔᐃⲆΔ = ⲆᐃΔᐃⲆ.ΔᐃⲆΔ;
			for (var ⵠᐃᐃᐃ = 0, ᐃᐃⲆᐃ = ⵠᐃⲆ; ⵠᐃᐃᐃ < ΔⲆⵠΔ; ᐃᐃⲆᐃ++) {
				if (5e4 < ᐃᐃⲆᐃ) break;
				var Ⲇᐃ = ᐃⵠⲆ + Math.floor(ⲆΔⲆ * ⲆⵠΔ.ⵠⲆΔᐃⲆ.get());
				var ⲆⲆᐃⲆ = Ⲇⵠ + Math.floor(ⲆⵠΔ.ⵠⲆΔᐃⲆ.get() * ⲆⲆᐃ);
				var ΔⲆⲆᐃ = ⲆⵠΔ.ⵠⵠⵠⵠⲆ(ⲆΔᐃⵠ, ⲆᐃⲆⵠⲆ * ⲆⲆᐃⲆ + 50, Ⲇᐃ * ᐃⲆΔⲆᐃ + 50);
				if (ΔⲆⲆᐃ < 400) continue;
				var ᐃΔⲆⲆ = ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ + ⲆΔΔΔ];
				if (ᐃΔⲆⲆ !== ⵠᐃᐃᐃᐃ && undefined !== ᐃΔⲆⲆ[ⲆΔⲆᐃ] && ᐃΔⲆⲆ[ⲆΔⲆᐃ][ᐃΔᐃⲆⲆ] !== Ⲇⵠⵠᐃᐃ) continue;
				var ᐃΔⲆⲆ = ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ - ᐃⲆΔ];
				if (ᐃΔⲆⲆ !== ⵠⲆⲆⲆⲆ && ᐃΔⲆⲆ[ⲆΔⲆᐃ] !== ⵠⲆⲆⲆⲆ && ᐃΔⲆⲆ[ⲆΔⲆᐃ][ᐃΔᐃⲆⲆ] !== undefined) continue;
				var ᐃΔⲆⲆ = ΔᐃⲆΔ[Ⲇᐃ + 1][ⲆⲆᐃⲆ];
				if (ᐃΔⲆⲆ !== ⵠⵠⲆΔⲆ && undefined !== ᐃΔⲆⲆ[ⲆΔⲆᐃ] && undefined !== ᐃΔⲆⲆ[ⲆΔⲆᐃ][ᐃΔᐃⲆⲆ]) continue;
				var ᐃΔⲆⲆ = ΔᐃⲆΔ[Ⲇᐃ - 1][ⲆⲆᐃⲆ];
				if (ᐃΔⲆⲆ !== ⵠΔⲆⵠΔ && ᐃΔⲆⲆ[ⲆΔⲆᐃ] !== undefined && ᐃΔⲆⲆ[ⲆΔⲆᐃ][ᐃΔᐃⲆⲆ] !== ⲆΔΔⵠᐃ) continue;
				var ᐃΔⲆⲆ = ΔᐃⲆΔ[Ⲇᐃ + ΔΔΔᐃ][ⲆⲆᐃⲆ - ⵠⲆⲆ];
				if (ᐃΔⲆⲆ !== undefined && ᐃΔⲆⲆ[ⲆΔⲆᐃ] !== ΔΔⵠⵠⲆ && ᐃΔⲆⲆ[ⲆΔⲆᐃ][ᐃΔᐃⲆⲆ] !== ⵠⵠⲆΔⲆ) continue;
				var ᐃΔⲆⲆ = ΔᐃⲆΔ[Ⲇᐃ - ⲆᐃΔ][ⲆⲆᐃⲆ + 1];
				if (undefined !== ᐃΔⲆⲆ && ᐃⲆⵠⲆᐃ !== ᐃΔⲆⲆ[ⲆΔⲆᐃ] && undefined !== ᐃΔⲆⲆ[ⲆΔⲆᐃ][ᐃΔᐃⲆⲆ]) continue;
				var ᐃΔⲆⲆ = ΔᐃⲆΔ[Ⲇᐃ + ΔᐃⲆⲆ][ⲆⲆᐃⲆ + Δⵠᐃ];
				if (ᐃⲆⵠⲆᐃ !== ᐃΔⲆⲆ && ΔΔΔᐃᐃ !== ᐃΔⲆⲆ[ⲆΔⲆᐃ] && ⵠΔⲆⵠΔ !== ᐃΔⲆⲆ[ⲆΔⲆᐃ][ᐃΔᐃⲆⲆ]) continue;
				var ᐃΔⲆⲆ = ΔᐃⲆΔ[Ⲇᐃ - ⵠΔᐃ][ⲆⲆᐃⲆ - Ⲇⵠᐃ];
				if (undefined !== ᐃΔⲆⲆ && ᐃΔⲆⲆ[ⲆΔⲆᐃ] !== undefined && ᐃΔⲆⲆ[ⲆΔⲆᐃ][ᐃΔᐃⲆⲆ] !== undefined) continue;
				if (ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ] === ⵠⵠⲆᐃᐃ) {
					Ⲇⵠᐃⵠ(Ⲇᐃ, ⲆⲆᐃⲆ, ⲆΔⲆᐃ, ᐃΔᐃⲆⲆ, 1);
					ⵠᐃᐃᐃ++
				}
			}
		}

		function ΔⵠⵠᐃⲆΔᐃⲆᐃ(ⲆΔᐃⵠ, ᐃⵠᐃΔⵠ) {
			for (var Ⲇᐃ = ⲆⵠⲆⲆ; 3 > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "s", Ⲇᐃ, Math.floor(12 * ᐃⵠᐃΔⵠ));
			for (var Ⲇᐃ = 0; 3 > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "m", Ⲇᐃ, Math.max(1, Math.floor(ᐃⵠᐃΔⵠ * 1)), .2);
			ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "c", 0, Math.floor(36 * ᐃⵠᐃΔⵠ));
			var ᐃΔⲆΔⵠ = [];
			ᐃᐃⵠⵠΔΔᐃᐃᐃ(ⲆΔᐃⵠ, ᐃΔⲆΔⵠ);
			ⵠⲆᐃᐃΔᐃᐃ(ⲆΔᐃⵠ, ᐃΔⲆΔⵠ);
			ᐃΔⲆΔⵠ = []
		}

		function ⲆⲆᐃⵠⲆⵠᐃⵠᐃ(ⲆΔᐃⵠ, ᐃⵠᐃΔⵠ) {
			ΔΔΔⲆᐃⵠⵠⲆⵠ(ᐃⵠᐃΔⵠ * 80, ⲆΔᐃⵠ);
			for (var Ⲇᐃ = ᐃᐃᐃ; Ⲇᐃ < 3; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "s", Ⲇᐃ, Math.floor(ᐃⵠⲆⵠᐃ * ᐃⵠᐃΔⵠ));
			for (var Ⲇᐃ = ᐃᐃᐃ; Ⲇᐃ < 3; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "g", Ⲇᐃ, Math.floor(ⲆΔⵠΔΔ * ᐃⵠᐃΔⵠ));
			for (var Ⲇᐃ = 0; ΔΔᐃΔ > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, ⵠ[449], Ⲇᐃ, Math.max(ΔⲆᐃᐃ, Math.floor(ᐃⵠᐃΔⵠ * ΔΔⵠΔ)), .2);
			for (var Ⲇᐃ = 0; Ⲇᐃ < 3; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "a", Ⲇᐃ, Math.max(1, Math.floor(2 * ᐃⵠᐃΔⵠ)));
			ᐃᐃⲆⵠᐃΔⲆ(ⲆΔᐃⵠ)
		}

		function ΔᐃⲆᐃᐃΔⵠⵠⲆ(ⲆΔᐃⵠ, ᐃⵠᐃΔⵠ) {
			for (var Ⲇᐃ = ⲆⵠⲆⲆ; 6 > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "t", Ⲇᐃ, Math.floor(20 * ᐃⵠᐃΔⵠ));
			for (var Ⲇᐃ = ⵠΔᐃⵠ; ⵠᐃᐃΔ > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "b", Ⲇᐃ, Math.floor(ⵠΔᐃⲆⵠ * ᐃⵠᐃΔⵠ));
			for (var Ⲇᐃ = ⵠⵠⵠ; 3 > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "s", Ⲇᐃ, Math.floor(ᐃⵠᐃΔⵠ * ⲆᐃⲆⵠᐃ));
			var ᐃΔⲆΔⵠ = [];
			ⲆΔⲆᐃⵠⲆⵠ(ⲆΔᐃⵠ, ᐃΔⲆΔⵠ);
			ⵠⲆᐃᐃΔᐃᐃ(ⲆΔᐃⵠ, ᐃΔⲆΔⵠ);
			ᐃΔⲆΔⵠ = [];
			ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "p", 0, Math.floor(24 * ᐃⵠᐃΔⵠ));
			for (var Ⲇᐃ = Ⲇᐃⵠ; 3 > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "g", Ⲇᐃ, Math.floor(ᐃⵠᐃΔⵠ * 5));
			if (ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃΔⲆⲆᐃ) {
				for (var Ⲇᐃ = 0; Ⲇᐃ < ΔΔᐃΔ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "d", Ⲇᐃ, Math.floor(ᐃⵠᐃΔⵠ * ᐃΔⲆΔ));
				for (var Ⲇᐃ = ⵠΔᐃᐃ; Ⲇᐃ < 3; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "a", Ⲇᐃ, Math.floor(2 * ᐃⵠᐃΔⵠ))
			}
			ᐃᐃⲆⵠᐃΔⲆ(ⲆΔᐃⵠ)
		}

		function ⵠΔᐃⵠᐃᐃᐃⲆⲆ(ⲆΔᐃⵠ, ᐃⵠᐃΔⵠ) {
			for (var Ⲇᐃ = 0; Ⲇᐃ < 6; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "t", Ⲇᐃ, Math.floor(ᐃⵠᐃΔⵠ * 80));
			for (var Ⲇᐃ = ⵠⲆᐃ; ⲆᐃᐃΔⵠ > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "b", Ⲇᐃ, Math.floor(ᐃⵠᐃΔⵠ * 80));
			for (var Ⲇᐃ = ⵠⵠⵠ; 3 > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "s", Ⲇᐃ, Math.floor(ᐃⵠᐃΔⵠ * 50));
			var ᐃΔⲆΔⵠ = [];
			for (var Ⲇᐃ = 0; ΔⲆⲆⵠⵠ > Ⲇᐃ; Ⲇᐃ++) ⲆΔⲆᐃⵠⲆⵠ(ⲆΔᐃⵠ, ᐃΔⲆΔⵠ);
			ⵠⲆᐃᐃΔᐃᐃ(ⲆΔᐃⵠ, ᐃΔⲆΔⵠ);
			ᐃΔⲆΔⵠ = [];
			ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "p", 0, Math.floor(28 * ᐃⵠᐃΔⵠ));
			for (var Ⲇᐃ = 0; ⲆᐃᐃΔ > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "g", Ⲇᐃ, Math.floor(Δᐃⵠᐃⵠ * ᐃⵠᐃΔⵠ));
			for (var Ⲇᐃ = Ⲇᐃⵠ; ΔⲆΔⵠ > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "d", Ⲇᐃ, Math.floor(ᐃⵠᐃΔⵠ * 2));
			for (var Ⲇᐃ = 0; ⲆᐃᐃΔ > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "a", Ⲇᐃ, Math.floor(ᐃⵠᐃΔⵠ * 1));
			for (var Ⲇᐃ = ⲆⵠⲆⲆ; ⲆΔⵠⵠⵠ > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "m", Ⲇᐃ, Math.floor(ΔⵠⲆⲆ * ᐃⵠᐃΔⵠ));
			ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "a", ᐃᐃⲆ, Math.floor(1 * ᐃⵠᐃΔⵠ));
			ᐃᐃⲆⵠᐃΔⲆ(ⲆΔᐃⵠ)
		}

		function ᐃⵠⵠⲆⲆⵠΔⵠᐃ(Ⲇᐃ, ⲆⲆᐃⲆ, ⲆΔᐃⵠ, ᐃᐃᐃⵠΔⵠⵠ) {
			if (!ᐃΔΔᐃⲆᐃⵠ(Ⲇᐃ, ⲆⲆᐃⲆ)) return;
			ΔᐃⲆΔ = ⲆᐃΔᐃⲆ.ΔᐃⲆΔ;
			undefined === ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ] && (ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ] = {});
			if (undefined !== ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ]["r"]) return;
			var ⲆⲆΔᐃⲆ = ⵠᐃⲆⲆ;
			ᐃΔΔᐃⲆᐃⵠ(Ⲇᐃ - ᐃⲆΔ, ⲆⲆᐃⲆ) && ΔᐃⲆΔ[Ⲇᐃ - ΔΔⵠΔ][ⲆⲆᐃⲆ] !== ⵠᐃᐃᐃᐃ && ΔᐃⲆΔ[Ⲇᐃ - ΔⵠΔ][ⲆⲆᐃⲆ][ⵠ[282]] !== undefined && (ⲆⲆΔᐃⲆ += 2);
			if (ᐃΔΔᐃⲆᐃⵠ(Ⲇᐃ, ⲆⲆᐃⲆ - 1) && ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ - ΔΔΔᐃ] !== undefined && ΔΔⵠΔΔ !== ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ - ⵠⲆⲆ][ⵠ[282]]) ⲆⲆΔᐃⲆ += 8;
			if (ᐃΔΔᐃⲆᐃⵠ(Ⲇᐃ, ⲆⲆᐃⲆ + 1) && ⲆⲆⵠᐃΔ !== ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ + ⵠᐃⵠΔ] && undefined !== ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ + ᐃᐃΔ][ⵠ[282]]) ⲆⲆΔᐃⲆ += 16;
			if (ᐃΔΔᐃⲆᐃⵠ(Ⲇᐃ + 1, ⲆⲆᐃⲆ) && undefined !== ΔᐃⲆΔ[Ⲇᐃ + 1][ⲆⲆᐃⲆ] && ΔᐃⲆΔ[Ⲇᐃ + ΔᐃⵠⲆ][ⲆⲆᐃⲆ][ⵠ[282]] !== undefined) ⲆⲆΔᐃⲆ += 64;
			ᐃΔΔᐃⲆᐃⵠ(Ⲇᐃ - 1, ⲆⲆᐃⲆ - 1) && (ⲆⲆΔᐃⲆ & Ⲇᐃⵠⵠᐃ + 2) === ΔⲆⲆⲆΔⵠᐃ + 2 && ΔᐃⲆΔ[Ⲇᐃ - 1][ⲆⲆᐃⲆ - 1] !== ⵠΔⵠⵠⲆ && ΔᐃⲆΔ[Ⲇᐃ - ⵠⲆΔⲆ][ⲆⲆᐃⲆ - ᐃⲆΔ][ⵠ[282]] !== ⵠⵠⲆΔⲆ && (ⲆⲆΔᐃⲆ += 1);
			if (ᐃΔΔᐃⲆᐃⵠ(Ⲇᐃ - ΔᐃⲆⲆ, ⲆⲆᐃⲆ + Ⲇⵠᐃ) && (ⲆⲆΔᐃⲆ & ⲆⵠᐃⵠΔᐃΔ + 2) === 16 + 2 && ΔΔᐃⵠⵠ !== ΔᐃⲆΔ[Ⲇᐃ - ΔⵠΔ][ⲆⲆᐃⲆ + 1] && ΔᐃⲆΔ[Ⲇᐃ - ᐃᐃΔ][ⲆⲆᐃⲆ + ᐃᐃΔ][ⵠ[282]] !== ⵠⲆⲆⲆⲆ) ⲆⲆΔᐃⲆ += 4;
			if (ᐃΔΔᐃⲆᐃⵠ(Ⲇᐃ + ⵠⲆⲆ, ⲆⲆᐃⲆ - ΔΔⵠΔ) && ᐃᐃᐃΔⲆ + 64 === (ⲆⲆΔᐃⲆ & 8 + 64) && ΔᐃⲆΔ[Ⲇᐃ + 1][ⲆⲆᐃⲆ - 1] !== ⵠⲆⵠᐃⲆ && ΔᐃⲆΔ[Ⲇᐃ + 1][ⲆⲆᐃⲆ - ⲆᐃΔ][ⵠ[282]] !== ⵠⲆⲆⲆⲆ) ⲆⲆΔᐃⲆ += 32;
			if (ᐃΔΔᐃⲆᐃⵠ(Ⲇᐃ + 1, ⲆⲆᐃⲆ + 1) && (ⲆⲆΔᐃⲆ & ⲆⲆᐃⲆⵠᐃⲆ + 64) === 16 + 64 && undefined !== ΔᐃⲆΔ[Ⲇᐃ + 1][ⲆⲆᐃⲆ + 1] && ΔᐃⲆΔ[Ⲇᐃ + 1][ⲆⲆᐃⲆ + 1][ⵠ[282]] !== undefined) ⲆⲆΔᐃⲆ += 128;
			ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ]["r"] = {};
			ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ]["r"].ᐃᐃⵠⵠⵠⵠᐃ = ⲆⲆΔᐃⲆ;
			ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ]["r"].ᐃᐃᐃⵠΔⵠⵠ = ᐃᐃᐃⵠΔⵠⵠ;
			ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ]["r"].ΔⲆⲆᐃ = ⲆⵠΔ.ⵠⵠⵠⵠⲆ(ⲆΔᐃⵠ, ⲆⲆᐃⲆ * 100 + 50, 100 * Ⲇᐃ + 50) - 400;
			ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ]["r"]["x"] = 100 * ⲆⲆᐃⲆ + 50;
			ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ]["r"]["y"] = Ⲇᐃ * 100 + 50
		}

		function Ⲇⵠᐃⵠ(Ⲇᐃ, ⲆⲆᐃⲆ, ⲆΔⲆᐃ, ᐃΔᐃⲆⲆ, ⲆⵠⵠⵠᐃⵠⵠⵠΔ) {
			if (ⵠᐃⲆⲆ > Ⲇᐃ || ⵠⵠⵠΔ > ⲆⲆᐃⲆ || Ⲇᐃ >= ⲆⵠΔ.ᐃⵠᐃᐃᐃ || ⲆⲆᐃⲆ >= ⲆⵠΔ.ΔᐃᐃⵠΔ) return;
			ΔᐃⲆΔ = ⲆᐃΔᐃⲆ.ΔᐃⲆΔ;
			Ⲇⵠⵠᐃᐃ === ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ] && (ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ] = {});
			if (ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ][ⲆΔⲆᐃ] !== ⲆⲆⲆΔⲆ) return ⵠⲆΔ;
			ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ][ⲆΔⲆᐃ] = [];
			ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ][ⲆΔⲆᐃ][ᐃΔᐃⲆⲆ] = [{
				x: 100 * ⲆⲆᐃⲆ + 50,
				y: 100 * Ⲇᐃ + 50
			}];
			if (1 === ⲆⵠⵠⵠᐃⵠⵠⵠΔ) ⵠⵠᐃΔⵠⵠⵠⵠΔ(ⲆΔⲆᐃ, ᐃΔᐃⲆⲆ, Ⲇᐃ, ⲆⲆᐃⲆ);
			return 1
		}

		function ΔⲆⵠᐃᐃⲆⵠᐃᐃ(ⲆΔᐃⵠ) {
			for (var Ⲇᐃ = ⵠⵠⵠΔ; Ⲇᐃ < 3; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "s", Ⲇᐃ, 15);
			for (var Ⲇᐃ = ᐃᐃᐃ; 3 > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "a", Ⲇᐃ, 1);
			for (var Ⲇᐃ = ⵠΔᐃⵠ; 3 > Ⲇᐃ; Ⲇᐃ++) ΔⲆⲆⲆⵠ(ⲆΔᐃⵠ, "d", Ⲇᐃ, 1);
			ᐃᐃⲆⵠᐃΔⲆ(ⲆΔᐃⵠ)
		}
		this.Ⲇⵠᐃⵠ = Ⲇⵠᐃⵠ;

		function ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, Ⲇⵠⵠ, ⵠⲆᐃⲆ) {
			if (ᐃΔⲆⲆ[Ⲇⵠⵠ]) {
				for (ⵠᐃᐃᐃ = ⵠⲆⵠⵠ; ᐃΔⲆⲆ[Ⲇⵠⵠ].length > ⵠᐃᐃᐃ; ⵠᐃᐃᐃ++) {
					if (!ᐃΔⲆⲆ[Ⲇⵠⵠ][ⵠᐃᐃᐃ]) continue;
					for (ᐃᐃⲆᐃ = ⵠⵠⵠ; ᐃΔⲆⲆ[Ⲇⵠⵠ][ⵠᐃᐃᐃ].length > ᐃᐃⲆᐃ; ᐃᐃⲆᐃ++) {
						ᐃΔⲆⲆ[Ⲇⵠⵠ][ⵠᐃᐃᐃ][ᐃᐃⲆᐃ].ⵠⵠᐃ = ⵠⲆᐃⲆ;
						ᐃΔⲆⲆ[Ⲇⵠⵠ][ⵠᐃᐃᐃ][ᐃᐃⲆᐃ].ⲆᐃⲆ = false;
						ᐃΔⲆⲆ[Ⲇⵠⵠ][ⵠᐃᐃᐃ][ᐃᐃⲆᐃ].time = Ⲇᐃⵠ;
						ᐃΔⲆⲆ[Ⲇⵠⵠ][ⵠᐃᐃᐃ][ᐃᐃⲆᐃ].angle = 0
					}
				}
			}
		}
		this.ΔⲆΔⲆⲆⵠΔⵠᐃ = function(ⲆᐃΔᐃⲆ) {
			for (var Ⲇᐃ = 0; Ⲇᐃ < this.ᐃⵠᐃᐃᐃ; Ⲇᐃ++) {
				for (var ⲆⲆᐃⲆ = 0; this.ΔᐃᐃⵠΔ > ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) {
					if (!ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[Ⲇᐃ]) ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[Ⲇᐃ] = [];
					if (!ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ]) {
						ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ] = [];
						continue
					}
					var ᐃΔⲆⲆ = ⲆᐃΔᐃⲆ.ΔᐃⲆΔ[Ⲇᐃ][ⲆⲆᐃⲆ];
					if (ᐃΔⲆⲆ[ⵠ[77]] && ΔΔᐃ < ᐃΔⲆⲆ[ⵠ[77]].length) {
						for (var ⵠᐃᐃᐃ = ᐃᐃᐃ; ᐃΔⲆⲆ[ⵠ[77]].length > ⵠᐃᐃᐃ; ⵠᐃᐃᐃ++) {
							if (ᐃΔⲆⲆ[ⵠ[77]][ⵠᐃᐃᐃ] && 0 < ᐃΔⲆⲆ[ⵠ[77]][ⵠᐃᐃᐃ].length) {
								ᐃΔⲆⲆ[ⵠ[77]] = ᐃΔⲆⲆ[ⵠ[77]][ⵠᐃᐃᐃ][ⵠⲆΔ];
								if (ⵠᐃᐃᐃ >= 41 && 49 >= ⵠᐃᐃᐃ) {
									ᐃΔⲆⲆ[ⵠ[77]].scale = ΔⲆΔⲆ;
									var ΔⵠⲆⲆΔⲆⲆ = Math.floor(Math.random() * 3 + 1);
									ᐃΔⲆⲆ[ⵠ[77]].ΔⲆⵠ = [];
									for (var ᐃᐃⲆᐃ = Ⲇᐃⵠ; ΔⵠⲆⲆΔⲆⲆ > ᐃᐃⲆᐃ; ᐃᐃⲆᐃ++) {
										ᐃΔⲆⲆ[ⵠ[77]].ΔⲆⵠ.push({
											x: 120 * Math.random() - 60,
											y: Math.random() * 120 - 60,
											angle: 2 * (Math.random() * Math.PI),
											"ΔᐃᐃᐃⲆ": 41 + Math.floor(Math.random() * ⵠⲆΔⵠⵠ)
										})
									}
								} else if (19 <= ⵠᐃᐃᐃ && 26 >= ⵠᐃᐃᐃ) {
									ᐃΔⲆⲆ[ⵠ[77]].scale = 3;
									var ΔⵠⲆⲆΔⲆⲆ = Math.floor(Math.random() * ᐃⵠΔⵠ + Ⲇⵠᐃ);
									ᐃΔⲆⲆ[ⵠ[77]].ΔⲆⵠ = [];
									for (var ᐃᐃⲆᐃ = 0; ΔⵠⲆⲆΔⲆⲆ > ᐃᐃⲆᐃ; ᐃᐃⲆᐃ++) {
										ᐃΔⲆⲆ[ⵠ[77]].ΔⲆⵠ.push({
											x: 120 * Math.random() - 60,
											y: 120 * Math.random() - 60,
											angle: ⲆᐃΔⲆ * (Math.random() * Math.PI),
											"ΔᐃᐃᐃⲆ": 19 + Math.floor(Math.random() * ΔᐃᐃⲆᐃ)
										})
									}
								} else if (15 >= ⵠᐃᐃᐃ || 27 <= ⵠᐃᐃᐃ && ⵠᐃᐃᐃ <= 40) {
									ᐃΔⲆⲆ[ⵠ[77]].angle = ΔΔᐃᐃ;
									ᐃΔⲆⲆ[ⵠ[77]].scale = ᐃᐃΔⵠ;
									ᐃΔⲆⲆ[ⵠ[77]].ΔᐃᐃᐃⲆ = ⵠᐃᐃᐃ
								} else {
									ᐃΔⲆⲆ[ⵠ[77]].angle = Math.random() * Math.PI * 2;
									ᐃΔⲆⲆ[ⵠ[77]].scale = ΔⲆᐃⲆ;
									ᐃΔⲆⲆ[ⵠ[77]].ΔᐃᐃᐃⲆ = ⵠᐃᐃᐃ
								}
							}
						}
					}
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, "p", new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⲆⲆΔⵠ, 1, ΔᐃⵠⲆ, ⵠⵠⵠΔ, ⵠΔΔΔⵠ, ⵠΔΔΔⵠ));
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, "t", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, ⲆⲆⵠⲆ, ΔΔΔᐃⲆ, ΔΔⵠᐃⵠ));
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, "s", new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⵠⲆⲆᐃ, 1, ΔⵠⲆⲆ, 0, ΔⵠⵠᐃⲆ, ⲆΔⵠⵠΔ));
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, "g", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, ⲆᐃΔ, ⵠⵠⵠ, 10, ⲆΔⵠⵠΔ));
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, "d", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, ⲆⲆⵠⲆ, 10, 10));
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, "b", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, ΔΔΔᐃ, Δᐃⵠⵠ, ⵠᐃⲆ, ⵠΔΔΔⵠ, 10));
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, "f", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, Δᐃⵠⵠ, 1, 0, 10, 10));
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, ⵠ[510], new ΔⵠΔⵠ.ΔᐃΔⵠ(false, Δᐃⵠⵠ, 1, ⵠᐃⲆ, 10, ⲆΔΔⲆᐃ));
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, ⵠ[169], new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⲆΔᐃΔ, 1, 1, 0, ⲆΔΔⲆᐃ, ΔⵠⵠᐃⲆ));
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, ⵠ[563], new ΔⵠΔⵠ.ΔᐃΔⵠ(false, Ⲇⵠᐃ, ᐃⲆΔ, ⲆⲆⵠⲆ, 10, ⵠⲆⲆⵠΔ));
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, "a", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, ⲆΔΔΔ, ⵠΔᐃ, 0, 10, ⵠⲆΔⲆᐃ));
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, ⵠ[ⲆⲆᐃⵠ], new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃΔΔⵠⲆ, 1, ΔⵠⲆⲆ, ΔⲆⲆ, ⲆⲆⵠⲆⵠ, 10));
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, ⵠ[267], new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, ⵠΔΔΔⵠ));
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, ⵠ[449], new ΔⵠΔⵠ.ΔᐃΔⵠ(false, ⵠⲆΔⲆ, 1, 0, ⲆΔⵠⵠΔ, 10));
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, "c", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, ΔᐃΔⲆ, 0, 10, 10));
					ΔᐃⲆⲆᐃ(ᐃΔⲆⲆ, "m", new ΔⵠΔⵠ.ΔᐃΔⵠ(ⲆᐃᐃΔΔ, ⵠΔᐃ, 1, Ⲇᐃⵠ, 10, 10))
				}
			}
		};
		this.time = Δ.ⵠΔⵠ;
		this.ⵠΔⵠΔⲆ = {
			"ΔᐃΔΔⵠ": 0,
			"ⵠΔⲆΔⲆ": 0,
			now: ⲆⵠⲆⲆ,
			translate: {
				x: ᐃᐃⲆ,
				y: ΔΔᐃᐃ
			}
		};
		this.ΔⲆΔΔⲆⲆᐃⵠᐃ = function() {
			this.ⵠⵠⲆⵠⲆ = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠⵠⲆᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆΔⵠⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⵠΔΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃΔΔᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆᐃⵠΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠⲆΔⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠⵠᐃΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔⵠΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆⲆⵠⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔΔⵠⵠΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔⵠᐃⲆⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆᐃᐃΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃΔⵠᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔⵠᐃΔΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔᐃⲆⵠᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔᐃᐃⲆⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆΔⲆΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔΔⲆⲆᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔᐃⵠⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃᐃⲆⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⵠΔⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠΔᐃⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔᐃΔΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔⲆⵠΔⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃΔⲆᐃΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠᐃΔΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆΔⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔᐃΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔⵠⵠⲆΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⵠⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃᐃᐃᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔⲆΔᐃⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⲆΔⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⵠⲆⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠᐃⲆⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃΔⲆⵠⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆᐃⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.Δⵠᐃⵠⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆⲆⲆⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠⵠᐃΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆΔⲆⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆΔᐃΔᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆΔΔⵠΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠΔⲆΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⵠΔΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠᐃᐃΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠΔⵠⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⲆⲆΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⲆΔⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆᐃᐃΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠᐃⲆΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⲆᐃᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⲆᐃΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⲆᐃⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔᐃⵠᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⵠⲆᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔⲆⲆⵠᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃΔⲆΔⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆΔΔᐃⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆⵠᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⲆⵠᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⲆⲆΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔⵠⲆΔᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔⵠΔᐃⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔⲆⵠⲆᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⵠΔⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆΔᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔⲆΔΔΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆΔᐃⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃⵠΔⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔΔⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃΔΔᐃⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆΔⵠⲆᐃⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃⲆⲆᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠᐃⵠΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔᐃⵠΔᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔᐃⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆΔᐃΔᐃⲆᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠᐃⲆⵠΔⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆⵠⵠⲆⵠᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃⵠᐃⲆΔᐃⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆΔᐃΔΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⲆΔⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ᐃᐃⵠⵠΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⵠᐃ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔᐃΔⲆⲆ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ΔΔⲆΔⵠ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔᐃΔ] = [];
			this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃᐃΔᐃ] = [];
			return
		};
		this.ᐃᐃⲆᐃΔⵠⵠⵠⵠ = function(Ⲇᐃᐃⵠ) {
			if (!this.ⵠⵠⲆⵠⲆ[Ⲇᐃᐃⵠ]) return;
			ⲆΔⲆᐃ = this.ⵠⵠⲆⵠⲆ[Ⲇᐃᐃⵠ].type;
			this.ⵠⵠⲆⵠⲆ[Ⲇᐃᐃⵠ] = null;
			var ⲆΔΔ = this.ⲆΔΔ[ⲆΔⲆᐃ];
			for (var ⲆⲆᐃⲆ = Ⲇᐃⵠ; ⲆⲆᐃⲆ < ⲆΔΔ.length; ⲆⲆᐃⲆ++) {
				if (ⲆΔΔ[ⲆⲆᐃⲆ].Ⲇᐃᐃⵠ == Ⲇᐃᐃⵠ) {
					ⲆΔΔ.splice(ⲆⲆᐃⲆ, 1);
					return
				}
			}
			return
		};
		this.ⲆΔⲆΔΔⵠⵠⲆᐃ = function(Ⲇᐃ, ⲆⲆᐃⲆ) {
			for (var ⵠᐃᐃᐃ = 0; this.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆᐃᐃΔ].length > ⵠᐃᐃᐃ; ⵠᐃᐃᐃ++) {
				var ⲆⲆᐃΔ = this.ⲆΔΔ[ⵠᐃᐃ.ⲆⲆᐃᐃΔ][ⵠᐃᐃᐃ];
				if (Math.floor(ⲆⲆᐃΔ.x / ⲆΔⵠⲆⵠⵠΔ) === ⲆⲆᐃⲆ && Math.floor(ⲆⲆᐃΔ.y / ΔᐃΔΔΔ) === Ⲇᐃ) return 1
			}
			return 0
		};
		this.ΔⲆᐃΔᐃⲆⲆⵠⲆ = function(Ⲇᐃ, ⲆⲆᐃⲆ) {
			for (var ⵠᐃᐃᐃ = ᐃⵠⵠⲆ; this.ⲆΔΔ[ⵠᐃᐃ.ΔⵠᐃⲆⲆ].length > ⵠᐃᐃᐃ; ⵠᐃᐃᐃ++) {
				var ⲆⲆᐃΔ = this.ⲆΔΔ[ⵠᐃᐃ.ΔⵠᐃⲆⲆ][ⵠᐃᐃᐃ];
				if (Ⲇᐃ == Math.floor(ⲆⲆᐃΔ.x / 100) && Math.floor(ⲆⲆᐃΔ.y / ⵠⵠⲆⲆⵠ) == ⲆⲆᐃⲆ) return ᐃΔⲆΔᐃ
			}
			return false
		};
		this.ⵠᐃⲆᐃᐃ = function(ⵠⵠᐃⲆ) {
			for (var Ⲇᐃ = ⵠᐃⲆⲆ; ⵠⵠᐃⲆ.length > Ⲇᐃ; Ⲇᐃ++) {
				ⲆⲆᐃΔ = ⵠⵠᐃⲆ[Ⲇᐃ];
				if (ⲆⲆᐃΔ.ⲆⲆᐃⲆᐃⲆᐃ != ⲆⲆᐃΔ.angle) {
					var ΔⵠᐃⵠΔ = Math.PI * ΔᐃΔᐃ;
					ⲆⲆᐃΔ.angle = (ⲆⲆᐃΔ.angle + ΔⵠᐃⵠΔ) % ΔⵠᐃⵠΔ;
					ⲆⲆᐃΔ.ⲆⲆᐃⲆᐃⲆᐃ = (ⲆⲆᐃΔ.ⲆⲆᐃⲆᐃⲆᐃ + ΔⵠᐃⵠΔ) % ΔⵠᐃⵠΔ;
					if (ⲆⲆᐃΔ.ⲆⲆᐃⲆᐃⲆᐃ != ⲆⲆᐃΔ.angle) {
						var ⵠⲆΔⵠⲆΔᐃ = ⲆⲆᐃΔ.ⲆⲆᐃⲆᐃⲆᐃ - ⲆⲆᐃΔ.angle;
						var ⲆΔⲆⵠ = Math.abs(ⵠⲆΔⵠⲆΔᐃ);
						Math.PI < ⲆΔⲆⵠ && (ⲆΔⲆⵠ = Math.PI * ΔΔⲆᐃ - ⲆΔⲆⵠ);
						var ΔᐃΔ = ⲆΔΔⲆ * (ⲆΔⲆⵠ / Math.PI * ΔⲆΔⲆ * ΔᐃᐃΔ.ⵠⵠⲆⵠΔⲆΔ);
						if (ⵠⲆΔⵠⲆΔᐃ > Math.PI) ⲆⲆᐃΔ.angle -= ΔᐃΔ;
						else if (ⵠⲆΔⵠⲆΔᐃ < -Math.PI) ⲆⲆᐃΔ.angle += ΔᐃΔ;
						else if (ⵠⲆΔⵠⲆΔᐃ < 0) ⲆⲆᐃΔ.angle -= ΔᐃΔ;
						else ⲆⲆᐃΔ.angle += ΔᐃΔ;
						ⲆⲆᐃΔ.angle = (ⲆⲆᐃΔ.angle + ΔⵠᐃⵠΔ) % ΔⵠᐃⵠΔ;
						Math.abs(ⲆⲆᐃΔ.angle - ⲆⲆᐃΔ.ⲆⲆᐃⲆᐃⲆᐃ) < ΔᐃΔ && (ⲆⲆᐃΔ.angle = ⲆⲆᐃΔ.ⲆⲆᐃⲆᐃⲆᐃ)
					}
				}
				var ⵠᐃⵠΔᐃⵠⵠⵠⵠ = Math.floor(ⲆⲆᐃΔ.r.y / ΔᐃΔΔΔ);
				var ᐃΔΔΔΔΔΔⲆᐃ = Math.floor(ⲆⲆᐃΔ.r.x / ⲆⵠⲆⲆⵠ);
				if (ⲆⲆᐃΔ.x != ⲆⲆᐃΔ.r.x || ⲆⲆᐃΔ.r.y != ⲆⲆᐃΔ.y) {
					if (ⲆⲆᐃΔ.action & ⲆΔᐃᐃ.IDLE) ⲆⲆᐃΔ.action -= ⲆΔᐃᐃ.IDLE;
					ⲆⲆᐃΔ.action |= ⲆΔᐃᐃ.ᐃᐃⵠΔⵠΔⲆ;
					var ⵠᐃⲆᐃ = ΔⵠΔⵠ.ⵠΔᐃⵠⲆⲆᐃ(ⲆⲆᐃΔ, ⲆⲆᐃΔ.r) + Math.PI;
					var ᐃⲆⲆᐃ = ⲆⲆᐃΔ.ⲆⲆⲆΔᐃ * ⲆΔΔⲆ;
					var ⲆⵠⲆ = ΔⵠΔⵠ.ᐃⵠⵠᐃᐃⲆⵠ(ᐃⲆⲆᐃ, ⵠᐃⲆᐃ);
					if (ΔⵠΔⵠ.ᐃⲆⵠⵠᐃᐃᐃ(ΔⵠΔⵠ.ⵠⲆⵠⵠΔⵠⵠ(ⲆⲆᐃΔ, ⲆⲆᐃΔ.r)) > ΔⵠΔⵠ.ᐃⲆⵠⵠᐃᐃᐃ(ⲆⵠⲆ)) ΔⵠΔⵠ.ΔᐃⵠⲆⵠⲆⵠ(ⲆⲆᐃΔ, ⲆⵠⲆ);
					else {
						ⲆⲆᐃΔ.action & ⲆΔᐃᐃ.ᐃᐃⵠΔⵠΔⲆ && (ⲆⲆᐃΔ.action -= ⲆΔᐃᐃ.ᐃᐃⵠΔⵠΔⲆ);
						ⲆⲆᐃΔ.action |= ⲆΔᐃᐃ.IDLE;
						ΔⵠΔⵠ.ⵠⲆᐃᐃΔΔᐃ(ⲆⲆᐃΔ.r, ⲆⲆᐃΔ)
					}
				}
				if (ⲆⲆᐃΔ.ΔⲆⲆΔⵠ) {
					var ᐃⲆⲆᐃⲆ = ⲆⲆᐃΔ.bubbles;
					var ᐃᐃⲆᐃ = ᐃⲆⲆᐃⲆ.length;
					(0 === ᐃᐃⲆᐃ || ᐃᐃⲆᐃ < Δ.ⲆⲆΔΔⲆΔⲆ && ᐃⲆⲆᐃⲆ[ᐃᐃⲆᐃ - ΔⲆᐃᐃ].ᐃΔᐃᐃⵠ < .95) && ᐃⲆⲆᐃⲆ.push({
						id: Math.floor(Math.random() * ᐃΔ[Δ.ᐃⲆⵠⵠΔⵠⲆ][0].length),
						x: Math.floor(ⲆⲆᐃΔ.x + Math.random() * 80 - 40),
						y: Math.floor(ⲆⲆᐃΔ.y + Math.random() * 80 - 40),
						"ᐃΔᐃᐃⵠ": ΔΔⵠΔ
					});
					for (var ⲆⲆᐃⲆ = ⵠᐃⲆⲆ; ᐃᐃⲆᐃ > ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) ᐃⲆⲆᐃⲆ[ⲆⲆᐃⲆ].ᐃΔᐃᐃⵠ = Math.max(ⵠΔᐃᐃ, ᐃⲆⲆᐃⲆ[ⲆⲆᐃⲆ].ᐃΔᐃᐃⵠ - ⲆΔΔⲆ);
					for (var ⲆⲆᐃⲆ = ⵠⵠⲆⵠ; ᐃᐃⲆᐃ > ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) {
						if (ᐃⲆⲆᐃⲆ[ⲆⲆᐃⲆ].ᐃΔᐃᐃⵠ === 0) {
							ᐃⲆⲆᐃⲆ.splice(ⲆⲆᐃⲆ, 1);
							break
						}
					}
				}
				var ⵠΔΔΔᐃᐃᐃ = ᐃⵠⵠⲆ;
				if (ⲆⲆᐃΔ.ⵠⲆⲆΔ && ᐃΔΔΔ.ΔΔⲆᐃⲆ) {
					var ᐃⲆⵠⲆⵠ = ⲆⲆᐃΔ.ᐃⲆⵠⲆⵠ;
					var ᐃᐃⲆᐃ = ᐃⲆⵠⲆⵠ.length;
					if (ⲆⲆᐃΔ.ⲆΔⵠΔᐃΔΔ > ⵠⲆΔ && ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ !== ⵠⵠ.ⲆⵠⲆⵠᐃ && ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ !== ⵠⵠ.ⲆᐃⲆⲆΔ && ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ !== ⵠⵠ.ⵠⵠⵠⵠΔ && ⵠⵠ.ΔⵠⲆΔᐃ !== ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ && ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ !== ⵠⵠ.ΔⲆᐃⵠⵠ && !ⲆⲆᐃΔ.ΔⲆⲆΔⵠ) {
						ⵠΔΔΔᐃᐃᐃ = ⲆᐃΔ;
						if (ᐃᐃⲆᐃ === ᐃᐃᐃ || Δ.ΔⵠⲆᐃᐃΔⲆ < ΔⵠΔⵠ.ΔⲆⲆᐃ(ᐃⲆⵠⲆⵠ[ᐃᐃⲆᐃ - 1], ⲆⲆᐃΔ)) {
							var Δᐃⵠ = -ⲆⲆᐃΔ.angle;
							var Ⲇⵠ = 45 * Math.cos(Δᐃⵠ) * ᐃ;
							var ᐃⵠⲆ = ᐃ * (Math.sin(Δᐃⵠ) * 45);
							ᐃⲆⵠⲆⵠ.push({
								x: ⲆⲆᐃΔ.x + Ⲇⵠ,
								y: ⲆⲆᐃΔ.y + ᐃⵠⲆ,
								r: 8,
								alpha: .8
							});
							ᐃⲆⵠⲆⵠ.push({
								x: ⲆⲆᐃΔ.x - Ⲇⵠ,
								y: ⲆⲆᐃΔ.y - ᐃⵠⲆ,
								r: Δᐃᐃⵠⵠ,
								alpha: .8
							});
							ᐃⲆⵠⲆⵠ.push({
								x: ⲆⲆᐃΔ.x,
								y: ⲆⲆᐃΔ.y,
								r: 24,
								alpha: ᐃᐃΔ
							})
						}
					}
					for (var ⲆⲆᐃⲆ = 0; ⲆⲆᐃⲆ < ᐃᐃⲆᐃ; ⲆⲆᐃⲆ++) {
						ᐃⲆⵠⲆⵠ[ⲆⲆᐃⲆ].alpha = Math.max(ⲆⲆⵠⲆ, ᐃⲆⵠⲆⵠ[ⲆⲆᐃⲆ].alpha - ⲆΔΔⲆ / 2.2);
						ᐃⲆⵠⲆⵠ[ⲆⲆᐃⲆ].r += ᐃⲆᐃⵠⲆ * ⲆΔΔⲆ
					}
					0 < ᐃⲆⵠⲆⵠ.length && ⵠΔᐃᐃ === ᐃⲆⵠⲆⵠ[ⲆⲆⵠⲆ].alpha && ᐃⲆⵠⲆⵠ.splice(0, 1);
					var ⲆⵠΔΔⵠ = ⲆⲆᐃΔ.ⲆⵠΔΔⵠ;
					var ᐃᐃⲆᐃ = ⲆⵠΔΔⵠ.length;
					var ⲆΔ = -Δᐃⵠⵠ;
					var ⵠⲆⲆⲆⲆⵠⵠ = Math.max(0, Math.sign(ⲆⲆᐃΔ.ⵠᐃΔᐃᐃⲆΔ));
					var ⵠⵠᐃⲆⵠ = Math.max(0, Math.sign(ⲆⲆᐃΔ.ΔΔⵠⲆⵠ));
					var ⵠⵠΔⲆⵠⵠⲆΔⲆ = Math.max(0, Math.sign(ⲆⲆᐃΔ.ⲆᐃⲆⲆⲆ));
					var ΔⵠⵠⵠⲆⵠᐃ = Math.max(ⵠⵠⵠΔ, Math.sign(ⲆⲆᐃΔ.ⲆⲆⵠᐃⲆ));
					var ᐃⲆⵠⲆΔⲆΔ = Math.max(ⵠᐃⲆ, Math.sign(ⲆⲆᐃΔ.ⲆᐃⵠⲆⵠ));
					if (ⲆⲆᐃΔ.ⵠᐃΔᐃᐃⲆΔ > 0 || ⲆⲆᐃΔ.ⲆᐃⲆⲆⲆ > ⵠᐃⲆⲆ) var ⲆΔ = Δ.ᐃΔΔⵠⵠⵠⵠ;
					else if (ⵠⵠⵠΔ < ⲆⲆᐃΔ.ⲆᐃⵠⲆⵠ) var ⲆΔ = Δ.ΔⲆᐃⵠᐃⲆⵠ;
					else if (Ⲇᐃⵠ < ⲆⲆᐃΔ.ΔΔⵠⲆⵠ) var ⲆΔ = Δ.ΔᐃⵠΔⲆⲆⵠ;
					else if (ⲆⲆᐃΔ.ⲆⲆⵠᐃⲆ > ᐃⵠⵠⲆ) var ⲆΔ = Δ.ⲆⲆⲆⵠⲆⲆⵠ;
					if (ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ === ⵠⵠ.ⲆⲆᐃΔΔ && 1 === (ⵠⲆⲆⲆⲆⵠⵠ | ⵠⵠᐃⲆⵠ | ΔⵠⵠⵠⲆⵠᐃ | ᐃⲆⵠⲆΔⲆΔ)) {
						ⲆΔ = Δ.ΔⲆⲆⵠΔⵠΔ;
						var ⵠⵠⵠᐃⲆᐃⵠ = ⲆⲆᐃΔ.ΔⲆᐃⵠᐃ - Math.PI / ΔᐃⵠΔ;
						var ᐃᐃᐃΔⲆⲆⵠ = ᐃᐃΔᐃⲆ;
						var ⵠⵠⲆΔⵠ = 11;
						var ⲆΔⲆΔⵠⵠⲆ = Δ.ⵠΔⲆᐃᐃᐃᐃ
					} else if (ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ === ⵠⵠ.ⲆΔΔᐃⲆ && ⵠⲆⲆ === (ⵠⲆⲆⲆⲆⵠⵠ | ⵠⵠᐃⲆⵠ | ΔⵠⵠⵠⲆⵠᐃ | ᐃⲆⵠⲆΔⲆΔ)) {
						ⲆΔ = Δ.ⵠⵠⲆᐃⵠⲆⲆ;
						var ⵠⵠⵠᐃⲆᐃⵠ = ⲆⲆᐃΔ.ΔⲆᐃⵠᐃ - Math.PI / ΔΔᐃΔⵠ;
						var ᐃᐃᐃΔⲆⲆⵠ = 21;
						var ⵠⵠⲆΔⵠ = ᐃΔⲆΔΔⲆᐃ;
						var ⲆΔⲆΔⵠⵠⲆ = Δ.ⵠΔⲆᐃᐃᐃᐃ
					} else if (ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ === ⵠⵠ.ⵠⲆⲆⵠᐃ && 1 === (ⵠⲆⲆⲆⲆⵠⵠ | ⵠⵠᐃⲆⵠ | ΔⵠⵠⵠⲆⵠᐃ | ᐃⲆⵠⲆΔⲆΔ)) {
						ⲆΔ = Δ.ΔΔⲆΔΔΔᐃ;
						var ⵠⵠⵠᐃⲆᐃⵠ = ⲆⲆᐃΔ.ΔⲆᐃⵠᐃ - Math.PI / 2;
						var ΔΔⵠⲆΔⵠΔ = Math.random() * 50;
						var ᐃᐃᐃΔⲆⲆⵠ = 10 + ΔΔⵠⲆΔⵠΔ;
						var ⵠⵠⲆΔⵠ = ᐃᐃᐃ + ΔΔⵠⲆΔⵠΔ;
						var ⲆΔⲆΔⵠⵠⲆ = Δ.ⵠΔⲆᐃᐃᐃᐃ * .9
					} else {
						var ⵠⵠⵠᐃⲆᐃⵠ = ⲆⲆᐃΔ.angle;
						var ᐃᐃᐃΔⲆⲆⵠ = ᐃⲆΔᐃΔⵠⵠ;
						var ⵠⵠⲆΔⵠ = 11;
						var ⲆΔⲆΔⵠⵠⲆ = Δ.ⵠΔⲆᐃᐃᐃᐃ
					}
					if (ⵠⵠ.ⲆⵠⲆⵠᐃ === ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ || ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ === ⵠⵠ.ⲆᐃⲆⲆΔ || ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ === ⵠⵠ.ΔⲆᐃⵠⵠ || ⵠⵠ.ΔⵠⲆΔᐃ === ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ || ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ === ⵠⵠ.ⵠⵠⵠⵠΔ || ⲆⲆᐃΔ.ΔⲆⲆΔⵠ);
					else if (ⵠⵠ.ᐃΔⲆᐃⲆ === ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ) {
						if (ᐃᐃⲆᐃ === 0 || Δ.ΔⵠⵠⲆⵠΔⲆ < ΔⵠΔⵠ.ΔⲆⲆᐃ(ⲆⵠΔΔⵠ[ᐃᐃⲆᐃ - 1], ⲆⲆᐃΔ)) ⲆⵠΔΔⵠ.push({
							x: ⲆⲆᐃΔ.x,
							y: ⲆⲆᐃΔ.y,
							angle: ⲆⲆᐃΔ.ΔⲆᐃⵠᐃ,
							alpha: 1,
							id: Δ.ᐃᐃⲆⲆᐃΔᐃ
						})
					} else if (-ᐃⲆΔ != ⲆΔ && ⵠΔΔΔᐃᐃᐃ === ΔΔᐃ) {
						if (ᐃᐃᐃ === ᐃᐃⲆᐃ || ⲆΔⲆΔⵠⵠⲆ < ΔⵠΔⵠ.ΔⲆⲆᐃ(ⲆⵠΔΔⵠ[ᐃᐃⲆᐃ - ΔΔΔᐃ], ⲆⲆᐃΔ)) {
							ⲆⲆᐃΔ.ᐃΔⵠⲆⲆⲆⵠ++;
							if (1 < Math.abs(ⲆⲆᐃΔ.x - ⲆⲆᐃΔ.r.x) && Math.abs(ⲆⲆᐃΔ.y - ⲆⲆᐃΔ.r.y) > ⵠⲆΔⲆ) {
								if (ⲆⲆᐃΔ.x < ⲆⲆᐃΔ.r.x && ⲆⲆᐃΔ.r.y < ⲆⲆᐃΔ.y || ⲆⲆᐃΔ.x > ⲆⲆᐃΔ.r.x && ⲆⲆᐃΔ.r.y > ⲆⲆᐃΔ.y) {
									if (ⲆⲆᐃΔ.ᐃΔⵠⲆⲆⲆⵠ % ᐃⲆᐃᐃ) {
										var Ⲇⵠ = -ⵠⵠⲆΔⵠ * ᐃ;
										var ᐃⵠⲆ = -ⵠⵠⲆΔⵠ * ᐃ
									} else {
										var ᐃⵠⲆ = ⵠⵠⲆΔⵠ * ᐃ;
										var Ⲇⵠ = ⵠⵠⲆΔⵠ * ᐃ
									}
								} else {
									if (ⲆⲆᐃΔ.ᐃΔⵠⲆⲆⲆⵠ % 2) {
										var Ⲇⵠ = ⵠⵠⲆΔⵠ * ᐃ;
										var ᐃⵠⲆ = ᐃ * -ⵠⵠⲆΔⵠ
									} else {
										var ᐃⵠⲆ = ⵠⵠⲆΔⵠ * ᐃ;
										var Ⲇⵠ = -ⵠⵠⲆΔⵠ * ᐃ
									}
								}
							} else if (ⲆⲆᐃΔ.ᐃΔⵠⲆⲆⲆⵠ % 2) {
								var Ⲇⵠ = ᐃ * (Math.cos(ⵠⵠⵠᐃⲆᐃⵠ) * ᐃᐃᐃΔⲆⲆⵠ);
								var ᐃⵠⲆ = ᐃ * (Math.sin(ⵠⵠⵠᐃⲆᐃⵠ) * ᐃᐃᐃΔⲆⲆⵠ)
							} else {
								var Ⲇⵠ = ᐃ * (-Math.cos(ⵠⵠⵠᐃⲆᐃⵠ) * ᐃᐃᐃΔⲆⲆⵠ);
								var ᐃⵠⲆ = ᐃ * (-Math.sin(ⵠⵠⵠᐃⲆᐃⵠ) * ᐃᐃᐃΔⲆⲆⵠ)
							}
							ⲆⵠΔΔⵠ.push({
								x: ⲆⲆᐃΔ.x + Ⲇⵠ,
								y: ⲆⲆᐃΔ.y + ᐃⵠⲆ,
								angle: ⵠⵠⵠᐃⲆᐃⵠ + Math.PI / 2,
								alpha: 1,
								id: ⲆΔ
							})
						}
					}
					for (var ⲆⲆᐃⲆ = 0; ᐃᐃⲆᐃ > ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) {
						if (ⲆⵠΔΔⵠ[ⲆⲆᐃⲆ].id === Δ.ᐃᐃⲆⲆᐃΔᐃ) ⲆⵠΔΔⵠ[ⲆⲆᐃⲆ].alpha = Math.max(ᐃᐃᐃ, ⲆⵠΔΔⵠ[ⲆⲆᐃⲆ].alpha - ⲆΔΔⲆ * 1.5);
						else ⲆⵠΔΔⵠ[ⲆⲆᐃⲆ].alpha = Math.max(ⵠᐃⲆⲆ, ⲆⵠΔΔⵠ[ⲆⲆᐃⲆ].alpha - ⲆΔΔⲆ / 2.85)
					}
					if (ⲆⵠΔΔⵠ.length > 0 && ⲆⵠΔΔⵠ[0].alpha === 0) ⲆⵠΔΔⵠ.splice(ⵠΔᐃⵠ, ⲆΔΔΔ)
				}
			}
		};
		this.ⲆᐃⲆ = function() {
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠΔ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔᐃⵠᐃ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⵠⲆᐃ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ΔⲆⲆⵠᐃ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ᐃΔⲆΔⲆ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ⲆΔΔᐃⲆ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆⵠᐃ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⲆⵠᐃ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ⲆᐃⲆⲆΔ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ΔⵠⲆΔᐃ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ΔΔⲆΔⵠ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ⲆⵠⵠΔⵠ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆⲆΔᐃ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ΔⲆΔΔΔ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆΔᐃⵠ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃⵠΔⵠ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ⵠΔΔΔⲆ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ᐃΔΔᐃⵠ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ᐃⲆΔⵠⲆᐃⲆ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ⵠᐃⲆⲆᐃ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ΔᐃⵠΔᐃ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ΔⵠΔᐃⲆ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ΔⲆⵠⲆᐃ]);
			this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[ⵠᐃᐃ.ⵠⵠᐃⵠΔ])
		};
		this.ⵠΔΔⲆ = [];
		this.ⵠΔΔⲆ[Δ.ⲆⲆⲆⵠΔ] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1.05, 1, .008, .008);
		this.ⵠΔΔⲆ[Δ.ᐃᐃᐃⲆⲆ] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, ⵠᐃⵠΔ, 1.08, Ⲇⵠᐃ, .006, .006);
		this.ⵠΔΔⲆ[Δ.ᐃⵠⵠᐃⲆ] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, Δⵠᐃ, 1.02, Δⵠᐃ, .008, .008);
		this.ⵠΔΔⲆ[Δ.ᐃⲆΔᐃⲆ] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, ⲆΔΔΔ, 1.08, ΔΔΔᐃ, .006, .006);
		this.ⵠⵠⲆⲆΔ = [];
		this.ⵠⵠⲆⲆΔ[ⵠᐃⲆⲆ] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .1, 1, ⵠᐃⲆ, .6, .6);
		this.ⵠⵠⲆⲆΔ[1] = new ΔⵠΔⵠ.ΔᐃΔⵠ(ⲆᐃᐃΔΔ, .4, 1, ⵠⲆᐃ, .6, .6);
		this.ⵠⵠⲆⲆΔ[2] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .3, ΔⲆᐃⲆ, 0, .6, .6);
		this.ⵠⵠⲆⲆΔ[ⲆΔᐃⲆ] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .8, 1, 0, .6, .6);
		this.ⵠⵠⲆⲆΔ[4] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .3, 1, 0, .6, .6);
		this.ⵠⵠⲆⲆΔ[5] = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⵠΔⲆⵠ, .8, ᐃᐃΔ, Δⵠⵠⵠ, .6, .6);
		this.ⵠⵠⲆⲆΔ[6] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .5, 1, ⵠⲆⵠⵠ, .6, .6);
		this.ⵠⵠⲆⲆΔ[ⵠⵠⵠⵠⵠ] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9, Δⵠᐃ, ⲆⲆⵠⲆ, .6, .6);
		this.ⵠⵠⲆⲆΔ[ΔΔᐃⲆⲆ] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .6, Δᐃⵠⵠ, 0, .6, .6);
		this.ⵠⵠⲆⲆΔ[9] = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⲆⵠⵠⲆ, .2, ΔⲆᐃᐃ, Δⵠⵠⵠ, .6, .6);
		this.ⵠⵠⲆⲆΔ[ᐃᐃᐃΔΔ] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .6, 1, ⲆⵠⲆⲆ, .6, .6);
		this.ⵠⵠⲆⲆΔ[ⲆᐃⵠᐃΔ] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .4, ΔᐃⲆⲆ, ⵠⲆⵠⵠ, .6, .6);
		this.ⵠⵠⲆⲆΔ[ⵠᐃⵠΔᐃ] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .8, 1, ⵠⲆΔ, .6, .6);
		this.ⵠⵠⲆⲆΔ[13] = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃΔΔⵠⲆ, .2, 1, 0, .6, .6);
		this.ⵠⵠⲆⲆΔ[14] = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⲆⵠⵠⲆ, .7, 1, ⵠⵠⵠΔ, .6, .6)
	}

	function ᐃᐃⵠⲆⲆΔⲆ(ⲆΔⲆᐃ, ⵠⵠΔᐃ, ⲆΔ, Ⲇⵠ, ᐃⵠⲆ, Δᐃⵠ, ⵠⵠΔⲆ, Ⲇᐃᐃ, ⲆⲆⲆΔᐃ, ⵠⵠΔᐃᐃ) {
		this.type = ⲆΔⲆᐃ;
		this.ⵠⵠΔᐃ = ⵠⵠΔᐃ;
		this.pid = arguments[1];
		this.id = ⲆΔ;
		this.x = Ⲇⵠ;
		this.y = ᐃⵠⲆ;
		this.angle = Δᐃⵠ;
		this.ⲆⲆᐃⲆᐃⲆᐃ = Δᐃⵠ;
		this.action = ⵠⵠΔⲆ;
		this.info = Ⲇᐃᐃ;
		this.ⵠⵠΔᐃᐃ = ⵠⵠΔᐃᐃ;
		this.r = {
			x: Ⲇⵠ,
			y: ᐃⵠⲆ
		};
		this.ⲆⲆⲆΔᐃ = ⲆⲆⲆΔᐃ;
		ⲆⵠΔ && (this.Ⲇᐃᐃⵠ = ⲆⵠΔ.ⲆⵠᐃΔᐃΔⵠ * ⵠⵠΔᐃ + ⲆΔ);
		switch (ⲆΔⲆᐃ) {
			case ⵠᐃᐃ.ⵠⲆᐃⵠΔ:
				this.ΔⵠⲆⵠ = ⲆⵠΔ.ⵠΔᐃΔ[this.ⵠⵠΔᐃ];
				this.ⲆΔⵠⵠ = this.ΔⵠⲆⵠ.ⲆΔⵠⵠ;
				this.ⵠⵠⵠΔⲆⵠⲆ = this.ΔⵠⲆⵠ.ⵠⵠⵠΔⲆⵠⲆ;
				this.ⵠΔⲆΔᐃ = this.ΔⵠⲆⵠ.ⵠΔⲆΔᐃ;
				this.ⵠⵠΔΔⵠ = this.ΔⵠⲆⵠ.ⵠⵠΔΔⵠ;
				this.Δᐃⵠᐃⵠⵠᐃ = -1e6;
				this.ⲆⲆⵠᐃⲆ = -1e6;
				this.ΔΔⵠⲆⵠ = -1e6;
				this.ⲆᐃⲆⲆⲆ = -1e6;
				this.ⲆΔⵠΔᐃΔΔ = -1e6;
				this.ⵠᐃΔᐃᐃⲆΔ = -1e6;
				this.ⲆᐃⵠⲆⵠ = -1e6;
				this.ΔΔΔⵠⵠ = ΔᐃᐃΔ.ᐃΔⲆⲆᐃ === ⲆⵠΔ.mode && ΔᐃᐃΔ.ᐃⵠⵠᐃⵠᐃᐃ === this.ⲆΔⵠⵠ ? true : false;
				this.ᐃⲆΔΔΔⵠΔ = ⲆⵠΔ.mode === ΔᐃᐃΔ.ᐃᐃΔⲆΔ && this.ⲆΔⵠⵠ === ΔᐃᐃΔ.ᐃⲆᐃᐃⵠⲆⵠ ? ⵠⲆΔᐃΔ : false;
				this.ⲆᐃᐃᐃⲆᐃΔ = this.ΔΔΔⵠⵠ && this.ΔⵠⲆⵠ.ⲆⲆΔⵠⵠ === "  " ? ⲆᐃΔΔⲆ : ⵠᐃⵠⲆⲆ;
				this.ⲆⵠΔΔⵠ = [];
				this.ⵠⲆⵠⵠⵠⲆⵠ = ⵠᐃⲆ;
				this.ⵠⲆⲆΔ = ⲆⵠΔᐃⵠ;
				this.ᐃΔⵠⲆⲆⲆⵠ = Ⲇᐃⵠ;
				this.ⲆⲆᐃᐃᐃⵠΔ = 0;
				this.ᐃⲆⵠⲆⵠ = [];
				this.r = {
					x: Ⲇⵠ,
					y: ᐃⵠⲆ
				};
				this.ⵠᐃᐃⲆ = ᐃⵠⵠⵠⲆᐃΔⵠⲆ;
				this.ⵠⵠᐃΔΔΔⵠ = ⵠⵠᐃΔΔΔⵠ;
				this.ᐃⵠΔⵠⲆ = ΔΔᐃ;
				this.ΔⲆᐃⵠᐃ = ⵠⲆⵠⵠ;
				this.ΔᐃⲆᐃᐃ = ΔΔᐃ;
				this.ᐃⵠΔⵠᐃΔⵠ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, ⵠⲆΔ, 0, -Math.PI / ΔΔΔⵠΔ, .5, 1);
				this.ⲆᐃⵠⵠΔ = ΔⲆⲆ;
				this.ᐃΔⲆⵠΔᐃⲆ = ⵠⵠⲆⵠ;
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ⲆΔⲆᐃΔ, .6, .6, 0, 5, ᐃⲆᐃΔ);
				this.ᐃⵠⵠⲆⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .6, .6, ΔⲆⲆ, 5, ⲆΔᐃⲆ);
				this.freeze = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .6, .6, ⵠⵠⲆⵠ, ΔⲆⲆⵠ, 3);
				this.ᐃⲆⵠⲆⲆⵠⵠ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⲆⵠⵠⲆ, .6, .6, 0, ᐃᐃᐃΔⵠ, 3);
				this.ⵠΔΔΔᐃΔΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔᐃⲆⵠΔ, ⵠΔᐃᐃ, 2.25, -1.5, 3.75, 7.5);
				this.ᐃⲆⵠⲆⲆⲆⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(true, ΔⲆⲆ, 7.5, -3, 22.5, 33.75);
				this.attack = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0, ᐃᐃᐃ, -Math.PI / Δⵠⵠᐃ, 6, ⵠⲆᐃᐃΔ);
				this.ΔⲆᐃⵠⲆᐃᐃⲆⵠ = 0;
				this.ⵠᐃΔΔΔΔⵠ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .6, .6, 0, ΔᐃΔⲆ, ᐃΔⵠⲆ);
				this.ⵠⵠΔⵠⲆᐃΔ = this.ⲆᐃᐃᐃⲆᐃΔ ? new ΔⵠΔⵠ.ΔᐃΔⵠ(true, 0, 2.25, -1.5, 2.75, 5.5) : 0;
				this.ⲆᐃΔᐃΔⵠΔ = 0;
				this.ΔΔⵠⵠΔⲆⲆ = ᐃᐃⲆ;
				this.ᐃΔⲆⵠΔΔᐃ = [];
				this.ⵠΔⲆΔΔⵠΔ = [];
				this.text = [];
				this.label = [];
				this.ΔⵠᐃⵠΔⵠⵠ = ⲆΔᐃΔΔⵠΔᐃΔ;
				this.ⵠⲆⲆⵠⵠ = true;
				this.right = -ΔⵠΔ;
				this.ΔⲆᐃᐃⵠ = -ΔᐃⲆⲆ;
				this.action = ⲆΔᐃᐃ.IDLE;
				this.ⲆⲆΔΔⵠⵠᐃ = false;
				this.ⵠΔⲆᐃΔ = ΔⲆⲆ;
				this.ghost = this.ΔⲆⲆΔⵠ;
				this.bubbles = [];
				this.ⲆⲆⲆᐃⵠ = 0;
				this.ᐃᐃⵠᐃⲆ = -Δⵠᐃ;
				this.ⲆᐃⲆ = function(ⵠⵠΔⲆ) {
					if (this.info & 32768) {
						this.ⲆⲆΔΔⵠⵠᐃ = ᐃᐃᐃⵠⵠ;
						this.info = ~32768 & this.info
					} else this.ⲆⲆΔΔⵠⵠᐃ = false;
					if (this.info & 16384) {
						this.info = ~16384 & this.info;
						this.ⲆⲆⲆᐃⵠ = ΔⵠⲆⲆ
					} else this.ⲆⲆⲆᐃⵠ = Δⵠⵠⵠ;
					this.ⵠΔⲆᐃΔ = Math.floor(this.info / 128);
					this.info -= 128 * this.ⵠΔⲆᐃΔ;
					this.info === ⵠⵠ.ΔᐃᐃⵠⲆ || this.ⲆᐃᐃᐃⲆᐃΔ ? this.right = -ᐃⲆΔ : this.right = this.info;
					this.ⵠⲆⵠⵠⵠⲆⵠ = ⲆⵠΔ.ⲆΔⲆΔΔⵠⵠⲆᐃ(Math.floor(this.r.y / ᐃⵠΔᐃⵠ), Math.floor(this.r.x / ⵠⵠⲆᐃⲆ));
					this.ΔⲆᐃᐃⵠ = this.ⵠⵠΔᐃᐃ & 255;
					if (ΔᐃᐃΔ.ⲆᐃᐃⵠᐃⵠⲆⲆΔ === this.right) {
						this.ΔⲆⲆΔⵠ = ⵠⲆΔᐃΔ;
						if (!((60 - (performance.now() - this.ghosttime) / 1e3).toFixed(1) < 0)) {
							this.ghosttime;
						}
						this.ghosttime = performance.now();
					} else {
						this.ΔⲆⲆΔⵠ = false;
						this.ghosttime = null;
					}

					ⲆΔᐃⵠⵠ[this.right] ? this.ⲆΔⵠⲆΔ = ⲆⵠⵠⵠⲆ : this.ⲆΔⵠⲆΔ = false;
					if (ⵠⵠΔⲆ & ⲆΔᐃᐃ.ᐃⲆⵠΔⲆᐃᐃ) {
						this.ⵠᐃΔΔΔΔⵠ.Ⲇⵠⵠ = false;
						this.ⵠᐃΔΔΔΔⵠ.ⲆⵠⲆ = .6
					} else if (ⵠⵠΔⲆ & ⲆΔᐃᐃ.ⵠⲆᐃΔⵠ) {
						this.freeze.Ⲇⵠⵠ = false;
						this.freeze.ⲆⵠⲆ = .6
					} else if (ⵠⵠΔⲆ & ⲆΔᐃᐃ.ⵠᐃᐃᐃᐃⲆΔ) {
						this.ᐃⵠⵠⲆⲆ.Ⲇⵠⵠ = ΔⵠΔⵠⵠ;
						this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ = .6
					}
					if (ⵠⵠΔⲆ & ⲆΔᐃᐃ.ⵠᐃᐃᐃΔΔΔ) {
						this.ᐃⲆⵠⲆⲆⵠⵠ.Ⲇⵠⵠ = Ⲇⵠᐃᐃᐃ;
						this.ᐃⲆⵠⲆⲆⵠⵠ.ⲆⵠⲆ = .6
					}
					if (ⵠⵠΔⲆ & ⲆΔᐃᐃ.ⲆΔᐃΔ) {
						this.ⵠⵠᐃ.Ⲇⵠⵠ = ᐃⲆⲆΔⵠ;
						this.ⵠⵠᐃ.ⲆⵠⲆ = .6
					}
					if (ⵠⵠΔⲆ & ⲆΔᐃᐃ.ⲆⲆᐃⵠᐃΔᐃ) {
						this.ΔⲆᐃⵠⲆᐃᐃⲆⵠ = ⵠⲆⲆⵠⲆ.ᐃⵠΔᐃᐃⵠΔΔᐃ;
						ⲆΔⵠⲆ.ⵠΔΔᐃᐃ && -1 !== this.ᐃᐃⵠᐃⲆ && ⲆΔⵠⲆ.ⵠΔᐃΔ[this.ᐃᐃⵠᐃⲆ].ⲆⲆΔⲆΔⲆⵠⵠⲆ(ⲆⲆⲆⲆᐃ[this.right])
					}
				};
				this.ⲆᐃⲆ();
				break;
			case ⵠᐃᐃ.ᐃᐃⲆᐃΔ:
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃΔⵠᐃⲆ, 1, 1, 0, ⵠⲆⵠᐃⵠ, 10),
					"ⲆᐃⲆ": false,
					angle: ΔΔᐃᐃ
				};
				this.ⵠⲆᐃΔⲆ = ᐃⵠⲆᐃΔᐃΔᐃΔ;
				this.ΔⵠᐃⲆᐃ = ⵠᐃΔⲆⲆⵠⲆᐃΔ;
				this.ⵠᐃⵠᐃᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⲆⵠⵠⲆ, Δⵠᐃ, 1.23, 1.18, .01, .01);
				this.ΔⵠᐃⵠᐃΔᐃ = ⵠⲆⵠⵠ;
				this.ΔΔⵠΔᐃⵠⵠ = ⵠᐃⲆ;
				this.ΔⵠΔᐃΔ = ΔⵠΔᐃΔ;
				break;
			case ⵠᐃᐃ.ⲆⵠⲆᐃᐃ:
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(ⵠᐃⵠⲆⲆ, 1, 1, 0, 10, 10),
					"ⲆᐃⲆ": ⵠᐃⵠⲆⲆ,
					angle: 0
				};
				this.ⵠⲆᐃΔⲆ = ΔΔⲆᐃΔᐃⲆΔⲆ;
				this.ΔⵠᐃⲆᐃ = ⲆⲆⵠᐃΔᐃᐃⲆⵠ;
				this.ⵠᐃⵠᐃᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⵠⵠᐃΔ, ᐃᐃΔ, 1.23, 1.18, .01, .01);
				this.ΔⵠᐃⵠᐃΔᐃ = 0;
				this.ΔΔⵠΔᐃⵠⵠ = 0;
				break;
			case ⵠᐃᐃ.ⲆⲆΔⵠⲆ:
			case ⵠᐃᐃ.ᐃⲆⵠΔΔ:
				this.ⵠⲆᐃΔⲆ = ᐃⲆᐃⵠⵠⲆⲆΔΔ;
				this.ΔⵠᐃⲆᐃ = ΔΔⵠΔΔΔⲆⵠⲆ;
				this.ᐃᐃΔᐃᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, ΔΔⵠΔ, 1.03, .98, .3, .3);
				this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, Δᐃⵠⵠ, 1.23, 1.18, .01, .01);
				this.ⵠᐃⵠᐃᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1.23, 1.18, .01, .01);
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⵠⵠᐃΔ, 1, 1, ⵠⵠⲆⵠ, ⲆΔΔⲆᐃ, 10),
					"ⲆᐃⲆ": false,
					angle: ᐃᐃⲆ
				};
				break;
			case ⵠᐃᐃ.ΔΔⲆⲆᐃ:
				this.ⵠⲆᐃΔⲆ = ΔΔᐃᐃᐃⲆΔᐃⲆ;
				this.ΔⵠᐃⲆᐃ = ⵠᐃᐃⲆᐃⵠⲆΔΔ;
				this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⲆⲆΔⵠ, .9, 1.05, .9, .2, .2);
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, ΔᐃⵠⲆ, ΔⲆᐃⲆ, ⵠⵠⵠΔ, ᐃⵠᐃΔⲆ, 10),
					"ⲆᐃⲆ": ᐃⵠⲆⲆᐃ,
					angle: ⵠⵠⲆⵠ
				};
				this.ⲆⵠΔⲆ = [];
				for (var Ⲇᐃ = ⵠΔᐃⵠ; Ⲇᐃ < 3; Ⲇᐃ++) this.ⲆⵠΔⲆ.push({
					"ⵠᐃᐃⲆ": ΔⵠⵠᐃⲆⲆⵠΔΔ,
					"ⵠΔΔⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2)
				});
				this.ⲆⵠΔⲆ[ᐃᐃᐃ].x = this.x - 16.5;
				this.ⲆⵠΔⲆ[0].y = this.y - 15.5;
				this.ⲆⵠΔⲆ[0].angle = this.angle;
				this.ⲆⵠΔⲆ[ΔΔⵠΔ].x = this.x + 36;
				this.ⲆⵠΔⲆ[1].y = this.y + ⲆⵠⵠⲆΔ;
				this.ⲆⵠΔⲆ[ΔΔΔᐃ].angle = this.angle;
				this.ⲆⵠΔⲆ[ⲆᐃⵠΔ].x = this.x - 18.5;
				this.ⲆⵠΔⲆ[ⲆᐃⵠΔ].y = this.y + 39;
				this.ⲆⵠΔⲆ[ΔⵠⲆᐃ].angle = this.angle;
				break;
			case ⵠᐃᐃ.ⵠᐃΔΔᐃ:
				this.ⵠⲆᐃΔⲆ = ᐃⲆⲆⵠⵠⵠᐃⲆⵠ;
				this.ΔⵠᐃⲆᐃ = ⵠΔⵠΔⲆᐃⲆⲆⲆ;
				this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9, 1.05, .9, .2, .2);
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, ⲆᐃΔ, ⲆⵠⲆⲆ, ᐃⵠᐃΔⲆ, ΔⵠⵠᐃⲆ),
					"ⲆᐃⲆ": false,
					angle: ᐃᐃᐃ
				};
				this.ⲆⵠΔⲆ = [];
				for (var Ⲇᐃ = 0; Ⲇᐃ < ΔⲆΔⵠ; Ⲇᐃ++) this.ⲆⵠΔⲆ.push({
					"ⵠᐃᐃⲆ": ⲆΔᐃⵠΔⲆⲆ,
					"ⵠΔΔⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(ⵠᐃⵠⲆⲆ, .9 + Math.random() * .15, 1.05, .9, .2, .2)
				});
				this.ⲆⵠΔⲆ[0].x = this.x - 16.5;
				this.ⲆⵠΔⲆ[0].y = this.y - 15.5;
				this.ⲆⵠΔⲆ[ΔⲆᐃᐃ].x = this.x - 5.5;
				this.ⲆⵠΔⲆ[1].y = this.y + 7.5;
				this.ⲆⵠΔⲆ[ᐃᐃⲆⲆ].x = this.x + ᐃᐃⵠⵠⲆⲆⲆ;
				this.ⲆⵠΔⲆ[ⲆⲆⲆⲆ].y = this.y - ᐃΔΔⲆⵠ;
				break;
			case ⵠᐃᐃ.ⲆΔΔᐃⲆ:
				this.ⵠᐃᐃⲆ = ⵠΔⵠⵠΔΔⲆⲆⵠ;
				this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .6, .6, 0, ⲆᐃⲆΔ, ᐃⵠΔⵠ);
				break;
			case ⵠᐃᐃ.ᐃΔⲆΔⲆ:
				this.ⵠᐃᐃⲆ = ΔⲆⲆⲆⵠᐃᐃⲆⵠ;
				this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ⵠᐃⵠⲆⲆ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .6, .6, 0, 5, 3);
				break;
			case ⵠᐃᐃ.ⵠⲆⲆⵠᐃ:
				this.ⵠᐃᐃⲆ = ᐃⲆⲆⵠᐃᐃⵠⵠⲆ;
				this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ⵠΔΔᐃⵠⵠⵠ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ⵠᐃΔⵠⲆΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⲆⲆΔⵠ, .6, .6, 0, ⲆⲆᐃᐃ, 3);
				this.ᐃⵠⵠⲆⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .6, .6, ⵠΔᐃᐃ, ⵠⲆⲆᐃ, ΔⲆⵠᐃ);
				break;
			case ⵠᐃᐃ.ΔⲆⲆⵠᐃ:
				this.ⵠᐃᐃⲆ = ⵠᐃᐃᐃΔⵠⵠΔᐃ;
				this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ⵠΔΔᐃⵠⵠⵠ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⲆⲆΔⵠ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ⵠᐃΔⵠⲆΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃΔⵠᐃⲆ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .6, .6, 0, 5, 3);
				this.ᐃⵠⵠⲆⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .6, .6, 0, ΔΔᐃᐃⵠ, ᐃⵠΔⲆ);
				break;
			case ⵠᐃᐃ.ΔᐃⵠΔᐃ:
				this.ⵠᐃᐃⲆ = ⲆⲆΔΔΔⵠⵠΔⵠ;
				this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(Ⲇⵠᐃᐃᐃ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⲆΔⵠΔ, .6, .6, 0, ΔⲆⵠⵠ, ᐃΔⵠⲆ);
				break;
			case ⵠᐃᐃ.ᐃⲆΔᐃⵠ:
				this.ⵠᐃᐃⲆ = ⵠΔᐃⲆⵠⵠᐃ;
				this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ⵠᐃⵠⲆⲆ, .9 + Math.random() * .15, 1.05, .9, .5, .5);
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .6, .6, ᐃⵠⵠⲆ, ΔΔⲆⲆⵠ, ⲆⲆᐃⵠ);
				break;
			case ⵠᐃᐃ.ΔⲆΔΔΔ:
				this.ⵠΔⵠΔⵠ = this.info & 15;
				this.ⲆⲆᐃᐃᐃⵠΔ = this.ⵠⵠΔᐃᐃ & 1;
				this.ⲆⲆⵠⲆⲆⲆⵠ = ΔⲆⲆ;
				this.x = this.info;
				this.y = this.ⵠⵠΔᐃᐃ;
				this.ⵠᐃᐃⲆ = ΔᐃΔᐃᐃΔⲆⲆⵠ;
				this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9 + Math.random() * .15, 1.05, .9, .6, .6);
				break;
			case ⵠᐃᐃ.ⵠΔᐃⵠᐃ:
			case ⵠᐃᐃ.ⲆᐃⵠⲆᐃ:
			case ⵠᐃᐃ.ΔΔⲆΔⵠ:
			case ⵠᐃᐃ.ⲆⵠⵠΔⵠ:
			case ⵠᐃᐃ.ⵠᐃⵠΔⵠ:
			case ⵠᐃᐃ.ⵠΔΔΔⲆ:
			case ⵠᐃᐃ.ΔⵠΔᐃⲆ:
			case ⵠᐃᐃ.ΔⲆⵠⲆᐃ:
			case ⵠᐃᐃ.ⵠⲆⲆΔᐃ:
				this.ⵠᐃᐃⲆ = ⵠΔᐃⲆⵠⵠᐃ;
				this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .6, .6, 0, ⲆⲆᐃᐃ, ᐃⲆΔΔ);
				break;
			case ⵠᐃᐃ.ΔᐃΔⲆⲆ:
				this.ⵠᐃᐃⲆ = ᐃᐃᐃᐃΔⲆΔᐃⲆ;
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, ΔᐃⲆⲆ, ⵠᐃⲆⲆ, 10, 10),
					"ⲆᐃⲆ": false,
					angle: 0
				};
				break;
			case ⵠᐃᐃ.ΔᐃΔⵠᐃ:
				this.ΔⵠᐃⲆᐃ = ⵠᐃⵠΔΔⲆᐃⲆᐃ;
				this.ⵠᐃᐃⲆ = ΔᐃⵠⵠΔⲆᐃⵠⵠ;
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⵠΔⲆⵠ, ΔⲆᐃⲆ, 1, ⵠΔᐃᐃ, ⲆΔⵠⵠΔ, 10),
					"ⲆᐃⲆ": ᐃⲆⵠⵠⲆ,
					angle: ⵠΔᐃᐃ
				};
				this.up = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, ΔⵠΔ, 1.03, .98, .1, .1);
				this.ᐃΔΔᐃᐃ = [];
				break;
			case ⵠᐃᐃ.ⵠΔΔᐃΔ:
				this.angle = Math.random() * Math.PI / 2;
				this.ⵠᐃᐃⲆ = ᐃⵠⵠⵠᐃΔⲆⲆⲆ;
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃᐃⲆⲆΔ, .6, .6, 0, ᐃΔΔⲆⵠ, 3);
				this.boxType = "Gift";
				this.hits = 0;
				break;
			case ⵠᐃᐃ.ᐃᐃⵠⵠΔ:
				this.ⵠᐃᐃⲆ = ᐃⵠⵠⵠᐃΔⲆⲆⲆ;
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃᐃⲆⲆΔ, .6, .6, 0, ᐃΔΔⲆⵠ, 3);
				this.boxType = "Drop";
				this.disappearTime = +new Date + 17e3;
				this.hits = 0;
				break;
			case ⵠᐃᐃ.ⲆᐃⲆΔⲆ:
				this.ⵠᐃᐃⲆ = ᐃⵠⵠⵠᐃΔⲆⲆⲆ;
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃᐃⲆⲆΔ, .6, .6, 0, ᐃΔΔⲆⵠ, 3);
				this.boxType = "Dead";
				this.disappearTime = +new Date + 241e3;
				this.hits = 0;
				break;
			case ⵠᐃᐃ.ⲆΔᐃΔΔ:
				this.ⵠᐃᐃⲆ = ᐃⵠᐃᐃᐃΔⵠᐃⲆ;
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⵠΔⵠⵠ, .6, .6, 0, 5, ⲆⲆᐃⵠ);
				break;
			case ⵠᐃᐃ.ⵠⵠᐃⵠΔ:
				this.scale = ᐃⲆΔ;
				this.ⵠᐃᐃⲆ = ᐃⲆⵠΔⲆⲆⲆⲆᐃ;
				this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⲆⲆᐃᐃ, 0, ᐃⵠⵠⲆ, -Math.PI / 6, .5, 1);
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⲆΔᐃᐃ, .6, .6, ⵠᐃⲆⲆ, ΔⲆⲆⵠ, ᐃⵠΔⵠ);
				break;
			case ⵠᐃᐃ.ᐃⲆΔⵠⲆᐃⲆ:
				this.ᐃΔᐃᐃᐃ = 0;
				this.ΔⵠⲆΔ = [];
				this.ⵠΔⲆΔⵠᐃᐃ = 0;
				this.ⲆⵠᐃⵠΔᐃⵠ = ΔⵠⵠⵠⵠⲆⵠⲆΔ;
				this.ⵠᐃᐃⲆ = ⲆⵠΔΔⲆⲆⵠΔⵠ;
				this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ΔⵠΔⵠ.ΔᐃΔⵠ(Ⲇⵠᐃᐃᐃ, ⵠΔᐃⵠ, ΔΔᐃᐃ, -Math.PI / ⲆⲆⲆᐃᐃ, .5, ⲆᐃΔ);
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .6, .6, 0, ᐃᐃΔᐃ, ᐃᐃᐃΔᐃ);
				break;
			case ⵠᐃᐃ.ᐃΔΔᐃⵠ:
				this.x = this.info;
				this.y = this.ⵠⵠΔᐃᐃ;
				this.scale = 1;
				this.ⲆⲆΔᐃ = 0;
				this.ⵠᐃᐃⲆ = ᐃⵠᐃⲆⲆᐃⲆΔᐃ;
				this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⵠⵠᐃΔ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⵠⲆⲆᐃ, ΔΔᐃ, ᐃⵠⵠⲆ, -Math.PI / ⲆⲆⵠⵠⲆ, .5, ᐃᐃΔ);
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .6, .6, 0, ⲆⵠΔΔ, ᐃⵠΔᐃ);
				break;
			case ⵠᐃᐃ.ΔⵠⲆΔᐃ:
				this.x = this.info;
				this.y = this.ⵠⵠΔᐃᐃ;
				this.scale = 1;
				this.ⲆⲆΔᐃ = 0;
				this.ⵠᐃᐃⲆ = ΔⵠΔᐃΔᐃΔᐃⵠ;
				this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⵠΔⵠⵠ, 0, ⵠⵠⲆⵠ, -Math.PI / ⵠⵠᐃᐃᐃ, .5, ΔᐃⲆⲆ);
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⵠⲆⲆᐃ, .6, .6, ⵠᐃⲆ, 5, 3);
				break;
			case ⵠᐃᐃ.ⲆᐃⲆⲆΔ:
				this.scale = 1;
				this.ⵠᐃᐃⲆ = ⲆⵠⵠⵠⵠᐃⲆΔΔ;
				this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ⵠᐃⵠⲆⲆ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔΔᐃⵠᐃ, Δⵠⵠⵠ, ⲆⲆⵠⲆ, -Math.PI / ⲆΔⵠΔΔ, .5, 1);
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⲆΔᐃΔ, .6, .6, 0, 5, 3);
				break;
			case ⵠᐃᐃ.ⲆⵠⲆⵠᐃ:
				this.scale = ⵠᐃⵠΔ;
				this.ⵠᐃᐃⲆ = ⵠⵠᐃⲆⲆᐃΔΔⲆ;
				this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ⵠΔⵠⵠⵠ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔΔᐃⵠᐃ, 0, 0, -Math.PI / 6, .5, ΔⵠⲆⲆ);
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⲆⲆᐃᐃ, .6, .6, 0, ᐃᐃᐃΔⵠ, 3);
				break;
			case ⵠᐃᐃ.ⵠᐃⲆⲆᐃ:
				this.scale = ΔⵠΔ;
				this.ⵠᐃᐃⲆ = ᐃᐃΔᐃⵠⵠΔⲆΔ;
				this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔΔᐃⵠᐃ, .9 + Math.random() * .15, 1.05, .9, .2, .2);
				this.rotate = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⵠⲆⲆᐃ, ᐃᐃⲆ, ᐃⵠⵠⲆ, -Math.PI / 6, .5, ΔᐃⵠⲆ);
				this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .6, .6, 0, 5, ᐃΔⵠⲆ);
				break;
			case ⵠᐃᐃ.ᐃᐃⲆᐃⵠ:
				this.ⲆⵠΔⲆ = [];
				for (var Ⲇᐃ = ᐃᐃᐃ; Ⲇᐃ < ᐃᐃᐃΔⵠ; Ⲇᐃ++) this.ⲆⵠΔⲆ.push({
					"ⵠᐃᐃⲆ": ⲆΔᐃⵠΔⲆⲆ,
					"ⵠΔΔⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9 + Math.random() * .15, 1.05, .9, .2, .2)
				});
				switch (this.id % ⲆⵠⲆᐃ) {
					case 0:
						this.ⲆⵠΔⲆ[0].x = this.x - 20.5;
						this.ⲆⵠΔⲆ[0].y = this.y - 22.5;
						this.ⲆⵠΔⲆ[ΔⵠⲆⲆ].x = this.x - 35.5;
						this.ⲆⵠΔⲆ[ΔᐃⵠⲆ].y = this.y + 7.5;
						this.ⲆⵠΔⲆ[2].x = this.x + 7.5;
						this.ⲆⵠΔⲆ[2].y = this.y - 30;
						this.ⲆⵠΔⲆ[ⵠⵠΔⵠ].x = this.x + 22.5;
						this.ⲆⵠΔⲆ[3].y = this.y;
						this.ⲆⵠΔⲆ[ᐃᐃΔΔᐃ].x = this.x - 7.5;
						this.ⲆⵠΔⲆ[ⵠᐃΔΔ].y = this.y + 14.5;
						break;
					case 1:
						this.ⲆⵠΔⲆ[0].x = this.x - 30.5;
						this.ⲆⵠΔⲆ[ΔΔᐃᐃ].y = this.y - 22.5;
						this.ⲆⵠΔⲆ[1].x = this.x - 15.5;
						this.ⲆⵠΔⲆ[1].y = this.y + 7.5;
						this.ⲆⵠΔⲆ[2].x = this.x + 15.5;
						this.ⲆⵠΔⲆ[2].y = this.y - 30;
						this.ⲆⵠΔⲆ[ΔⲆΔⵠ].x = this.x + 12.5;
						this.ⲆⵠΔⲆ[ᐃⵠΔⲆ].y = this.y + 5;
						this.ⲆⵠΔⲆ[ᐃⲆᐃⲆ].x = this.x - 40.5;
						this.ⲆⵠΔⲆ[4].y = this.y + 14.5;
						break;
					case 2:
						this.ⲆⵠΔⲆ[0].x = this.x - 20.5;
						this.ⲆⵠΔⲆ[0].y = this.y - 20.5;
						this.ⲆⵠΔⲆ[Ⲇⵠᐃ].x = this.x - 35.5;
						this.ⲆⵠΔⲆ[1].y = this.y + 15.5;
						this.ⲆⵠΔⲆ[ⵠⵠⵠᐃ].x = this.x + 7.5;
						this.ⲆⵠΔⲆ[ⵠΔⵠΔ].y = this.y - 17;
						this.ⲆⵠΔⲆ[Δⵠⵠᐃ].x = this.x + 22.5;
						this.ⲆⵠΔⲆ[ᐃⵠΔᐃ].y = this.y + ᐃⵠᐃⲆ;
						this.ⲆⵠΔⲆ[4].x = this.x - 7.5;
						this.ⲆⵠΔⲆ[4].y = this.y + 1.5;
						break
				}
				break;
			case ⵠᐃᐃ.ΔᐃⲆⵠᐃ:
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, ᐃⲆΔ, 1, 0, ΔⵠⵠᐃⲆ, 10),
					"ⲆᐃⲆ": ΔⵠⵠᐃΔ,
					angle: ⵠᐃⲆⲆ
				};
				this.ⵠᐃᐃⲆ = ⵠⲆⵠΔⵠΔᐃΔΔ;
				this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9, 1.05, .9, .2, .2);
				this.ᐃⲆᐃΔⵠΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃΔⵠᐃⲆ, ⵠᐃⲆ, Math.PI / 30, -Math.PI / 30, .06, .06);
				break;
			case ⵠᐃᐃ.ⲆᐃⵠΔⲆ:
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, ᐃⵠⵠⲆ, 10, 10),
					"ⲆᐃⲆ": false,
					angle: ᐃᐃᐃ
				};
				this.ⵠᐃᐃⲆ = ⵠᐃⲆΔⵠⲆΔⵠⵠ;
				this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9, 1.05, .9, .2, .2);
				break;
			case ⵠᐃᐃ.ⲆᐃᐃⲆⵠ:
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⲆⲆΔⵠ, ⵠⲆΔⲆ, 1, Ⲇᐃⵠ, 10, 10),
					"ⲆᐃⲆ": ⲆΔⲆᐃΔ,
					angle: ⵠᐃⲆ
				};
				this.ⵠᐃᐃⲆ = ᐃⵠΔⲆⵠⵠᐃⲆⲆ;
				this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9, 1.05, .9, .2, .2);
				break;
			case ⵠᐃᐃ.ⵠΔᐃⵠⵠ:
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, ⵠⲆΔⲆ, 1, ⵠⵠⵠΔ, ⲆΔⵠⵠΔ, 10),
					"ⲆᐃⲆ": ⲆΔⲆᐃΔ,
					angle: 0
				};
				this.ⵠᐃᐃⲆ = ⵠⵠᐃⲆⲆⲆⲆΔΔ;
				this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⵠⵠᐃΔ, .9, 1.05, .9, .2, .2);
				break;
			case ⵠᐃᐃ.ΔᐃᐃⲆⲆ:
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⲆⲆᐃᐃ, ΔᐃⵠⲆ, 1, 0, 10, 10),
					"ⲆᐃⲆ": ΔⵠΔⵠⵠ,
					angle: 0
				};
				this.ⵠᐃᐃⲆ = ᐃⲆⵠᐃᐃⵠⵠᐃⵠ;
				this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9, 1.05, .9, .2, .2);
				break;
			case ⵠᐃᐃ.ⵠⲆᐃⵠⲆ:
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, ⲆΔΔΔ, ⵠⲆΔ, 10, ΔⵠⵠᐃⲆ),
					"ⲆᐃⲆ": false,
					angle: 0
				};
				this.ⵠᐃᐃⲆ = ⵠⲆⵠᐃⵠⵠⲆᐃⵠ;
				this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9, 1.05, .9, .2, .2);
				break;
			case ⵠᐃᐃ.ᐃⲆΔⲆΔ:
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⲆΔᐃᐃ, Δⵠᐃ, 1, ⵠⲆᐃ, ΔⲆᐃΔⲆ, 10),
					"ⲆᐃⲆ": ᐃⲆⵠⵠⲆ,
					angle: ⵠΔᐃᐃ
				};
				this.ⵠᐃᐃⲆ = ᐃⵠᐃΔᐃᐃⵠᐃⲆ;
				this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, .9, 1.05, .9, .2, .2);
				break;
			case ⵠᐃᐃ.ⵠΔᐃΔΔ:
				this.ⵠᐃᐃⲆ = ⵠΔΔᐃⵠⵠᐃΔΔ;
				this.rotate = 0;
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⲆⲆᐃᐃ, ΔⵠⲆⲆ, 1, 0, ΔⲆᐃΔⲆ, 10),
					"ⲆᐃⲆ": ΔⲆΔᐃΔ,
					angle: 0
				};
				break;
			case ⵠᐃᐃ.ΔⲆⵠΔⲆ:
				this.ⵠᐃᐃⲆ = ⵠᐃⲆᐃᐃⲆⵠⵠᐃ;
				this.rotate = ⵠⲆΔ;
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, ⵠᐃⵠΔ, 0, ⲆΔΔⲆᐃ, ⲆΔⵠΔⵠ),
					"ⲆᐃⲆ": false,
					angle: ⲆⵠⲆⲆ
				};
				break;
			case ⵠᐃᐃ.ᐃΔⲆᐃΔ:
				this.ⵠᐃᐃⲆ = ⲆΔⲆᐃΔᐃⵠⲆᐃ;
				this.rotate = ⲆⲆⵠⲆ;
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, Δⵠᐃ, ⲆⲆⵠⲆ, ⵠⲆⵠⵠⲆ, 10),
					"ⲆᐃⲆ": ΔⵠΔΔⲆ,
					angle: ⵠⲆᐃ
				};
				break;
			case ⵠᐃᐃ.ⵠⵠᐃΔΔ:
				this.ⵠᐃᐃⲆ = ⵠΔΔⲆⲆⲆΔⵠⵠ;
				this.rotate = 0;
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, ΔⲆᐃⲆ, ⵠⲆᐃ, ⲆⲆⵠⲆⵠ, 10),
					"ⲆᐃⲆ": false,
					angle: ΔΔᐃᐃ
				};
				break;
			case ⵠᐃᐃ.ⵠⲆⲆΔⲆ:
				this.ⵠᐃᐃⲆ = ⲆᐃΔⲆⵠΔⵠⵠⲆ;
				this.rotate = ⵠⲆⵠⵠ;
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, ⵠΔᐃᐃ, ⲆΔⵠΔⵠ, 10),
					"ⲆᐃⲆ": false,
					angle: ⵠⲆᐃ
				};
				break;
			case ⵠᐃᐃ.ᐃⵠΔᐃⲆ:
				this.ⵠⲆᐃΔⲆ = ⲆΔΔᐃΔⲆᐃΔⲆ;
				this.ΔⵠᐃⲆᐃ = ΔⵠᐃⲆⵠᐃⵠΔΔ;
				this.rotate = ⲆⵠⲆⲆ;
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, ⵠΔᐃ, 0, 10, ⵠⲆΔᐃᐃ),
					"ⲆᐃⲆ": ΔⲆΔᐃᐃ,
					angle: 0
				};
				break;
			case ⵠᐃᐃ.ⲆᐃΔⵠᐃ:
				this.ⵠᐃᐃⲆ = ⵠᐃⵠᐃΔⵠⵠΔⲆ;
				this.ⲆⲆᐃⲆ = Math.floor(this.x / 100);
				this.Ⲇᐃ = Math.floor(this.y / ᐃΔᐃⵠⵠ);
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, ⵠⲆⲆ, ΔᐃⲆⲆ, 0, ⵠⲆⵠⵠⲆ, 10),
					"ⲆᐃⲆ": false,
					angle: 0
				};
				this.opacity = 1;
				this.ΔⵠΔᐃΔ = ⲆᐃᐃⲆⲆᐃⵠ;
				break;
			case ⵠᐃᐃ.ⲆᐃᐃΔᐃ:
				this.ⵠᐃᐃⲆ = ⲆⵠΔᐃΔⲆⵠⲆᐃ;
				this.ⵠᐃⵠᐃᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1.15, 1, .3, .3);
				this.color = ⵠⲆᐃ;
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃᐃⲆⲆΔ, ΔⲆᐃⲆ, 1, 0, 10, ᐃᐃᐃΔΔ),
					"ⲆᐃⲆ": ΔⵠⵠᐃΔ,
					angle: ⵠⵠⵠΔ
				};
				break;
			case ⵠᐃᐃ.ΔⵠᐃΔΔ:
			case ⵠᐃᐃ.ᐃⵠⵠⲆᐃ:
			case ⵠᐃᐃ.ⲆⲆᐃᐃΔ:
			case ⵠᐃᐃ.ΔᐃΔᐃΔ:
			case ⵠᐃᐃ.ᐃᐃⲆΔⲆ:
				this.ⵠᐃᐃⲆ = ⲆⲆΔⵠⵠⵠΔ;
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, ΔⲆᐃᐃ, 1, 0, ⲆΔⵠⵠΔ, ΔΔΔᐃⲆ),
					"ⲆᐃⲆ": false,
					angle: ⵠⲆⵠⵠ
				};
				break;
			case ⵠᐃᐃ.ΔⵠᐃⲆⲆ:
				this.ⵠᐃᐃⲆ = ⲆⲆΔⵠⵠⵠΔ;
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(ⲆΔⲆᐃΔ, 1, 1, 0, ⵠⲆⵠⵠⲆ, 10),
					"ⲆᐃⲆ": ΔⲆΔⵠΔ,
					angle: 0
				};
				this.ΔⵠΔᐃΔ = ⲆᐃᐃⲆⲆᐃⵠ;
				break;
			case ⵠᐃᐃ.ΔⵠⵠⲆΔ:
			case ⵠᐃᐃ.ΔᐃΔⵠⵠ:
			case ⵠᐃᐃ.ᐃᐃᐃᐃᐃ:
			case ⵠᐃᐃ.ΔⲆΔᐃⵠ:
			case ⵠᐃᐃ.ᐃⲆⲆΔⲆ:
			case ⵠᐃᐃ.ᐃⲆⵠⲆⲆ:
			case ⵠᐃᐃ.ⲆⲆᐃⵠΔ:
			case ⵠᐃᐃ.ᐃⵠⲆΔⵠ:
			case ⵠᐃᐃ.ⵠⵠⵠᐃΔ:
			case ⵠᐃᐃ.ⵠΔΔⵠΔ:
			case ⵠᐃᐃ.ⲆⲆⲆⵠⲆ:
			case ⵠᐃᐃ.ΔΔⵠⵠΔ:
				this.ⵠᐃᐃⲆ = ⲆⲆΔⵠⵠⵠΔ;
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
					"ⲆᐃⲆ": ᐃΔⵠᐃⲆ,
					angle: ⵠᐃⲆ
				};
				this.ΔⵠΔᐃΔ = ΔⵠΔᐃΔ;
				break;
			case ⵠᐃᐃ.ⲆⵠᐃⲆⲆ:
				this.ⵠᐃᐃⲆ = ⵠⵠⵠⵠᐃᐃⲆⵠΔ;
				this.opacity = Ⲇⵠᐃ;
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⲆΔᐃᐃ, 1, 1, 0, ⲆⲆⵠⲆⵠ, 10),
					"ⲆᐃⲆ": false,
					angle: ⲆⲆⵠⲆ
				};
				var ⵠⲆᐃᐃᐃΔⲆ = this.angle % (Math.PI / ᐃᐃΔⵠ);
				Math.PI / 4 > ⵠⲆᐃᐃᐃΔⲆ ? this.angle -= ⵠⲆᐃᐃᐃΔⲆ : this.angle += Math.PI / ΔΔⲆᐃ - ⵠⲆᐃᐃᐃΔⲆ;
				break;
			case ⵠᐃᐃ.ⵠΔΔᐃⲆ:
				this.ⵠᐃᐃⲆ = ᐃᐃΔᐃⲆΔⲆⵠᐃ;
				this.angle = Math.random() * Math.PI * ⵠΔⵠΔ;
				break;
			case ⵠᐃᐃ.ⲆΔᐃΔᐃⲆᐃ:
				this.ⵠᐃᐃⲆ = ⲆⲆΔΔᐃΔΔΔⲆ;
				this.angle = ΔΔΔⵠ * (Math.random() * Math.PI);
				break;
			case ⵠᐃᐃ.ᐃⵠᐃⲆⵠΔⲆ:
				this.ⵠᐃᐃⲆ = ᐃⵠⵠⲆⵠᐃᐃⲆΔ;
				this.angle = ⲆᐃⵠΔ * (Math.PI * Math.random());
				break;
			case ⵠᐃᐃ.ᐃⲆⵠⵠⲆⵠᐃ:
				this.ⵠᐃᐃⲆ = ΔΔΔⲆⵠⲆΔⵠΔ;
				this.angle = Math.PI * Math.random() * 2;
				break;
			case ⵠᐃᐃ.ᐃⵠᐃⲆΔᐃⵠ:
				this.ⵠᐃᐃⲆ = ᐃᐃᐃⲆΔᐃΔⲆⲆ;
				this.angle = ᐃᐃⲆⲆ * (Math.random() * Math.PI);
				break;
			case ⵠᐃᐃ.ᐃⵠᐃⲆΔ:
				this.ⲆᐃⲆ = function(ⵠⵠΔⲆ) {
					this.lock = this.info & 8192 ? 1 : 0;
					this.info = this.info & 8191;
					this.action = ⵠⵠΔⲆ
				};
				this.ⵠᐃᐃⲆ = ᐃᐃΔᐃⵠΔᐃΔᐃ;
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(false, ΔᐃⲆⲆ, ᐃᐃΔ, ᐃᐃⲆ, ⵠⲆΔᐃᐃ, ⵠⲆΔⲆᐃ),
					"ⲆᐃⲆ": false,
					angle: 0
				};
				this.lock = ⵠⲆᐃ;
				this.ⲆᐃⲆ(this.action);
				break;
			case ⵠᐃᐃ.ⲆΔᐃΔᐃ:
			case ⵠᐃᐃ.ⲆΔΔⵠΔ:
			case ⵠᐃᐃ.ⵠⵠΔⲆΔ:
			case ⵠᐃᐃ.ⲆᐃⵠΔΔ:
			case ⵠᐃᐃ.ⵠⵠᐃᐃΔ:
			case ⵠᐃᐃ.ⲆⵠΔⵠⵠ:
			case ⵠᐃᐃ.ᐃΔⲆⵠⲆ:
			case ⵠᐃᐃ.ⵠⲆⲆᐃⵠ:
			case ⵠᐃᐃ.Δⵠᐃⵠⵠ:
			case ⵠᐃᐃ.ⲆⲆⲆⲆⵠ:
			case ⵠᐃᐃ.ᐃⵠⵠᐃΔ:
			case ⵠᐃᐃ.ⵠⲆΔⲆⵠ:
				this.ⵠᐃᐃⲆ = ΔⵠΔⵠᐃᐃⵠΔΔ;
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⲆⲆΔⵠ, ΔⵠΔ, ΔᐃⲆⲆ, 0, ⲆⲆⵠⲆⵠ, ⲆⲆⵠⲆⵠ),
					"ⲆᐃⲆ": false,
					angle: ᐃᐃⲆ
				};
				this.ΔⵠΔᐃΔ = ΔⵠΔᐃΔ;
				break;
			case ⵠᐃᐃ.ᐃⲆⲆⲆΔ:
				this.ⵠⲆᐃΔⲆ = ᐃΔᐃᐃΔΔΔΔᐃ;
				this.ⵠᐃᐃⲆ = ᐃⲆⵠᐃⵠΔᐃⵠΔ;
				this.ΔⵠᐃⲆᐃ = ᐃᐃΔⵠᐃⵠⵠⵠⲆ;
				this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, ΔᐃΔⲆ, 1.23, 1.18, .02, .02);
				this.ⵠᐃⵠᐃᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⵠΔⵠⵠ, 1, 1.23, 1.18, .04, .04);
				this.ⵠⵠᐃ = {
					"ⵠⲆᐃⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⲆΔᐃᐃ, Δⵠᐃ, Ⲇⵠᐃ, 0, 10, ⲆⲆⵠⲆⵠ),
					"ⲆᐃⲆ": false,
					angle: ⵠΔᐃᐃ
				};
				this.ⲆᐃⲆ = function(ⵠⵠΔⲆ) {
					this.action = ⵠⵠΔⲆ
				};
				break
		}
	}
	ⲆⵠᐃⵠᐃᐃⲆᐃᐃ = 1;

	function ⲆⲆᐃⵠᐃᐃⵠ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "a"
	}

	function ⲆⲆᐃⵠᐃᐃⵠ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "a"
	}

	function ⵠⲆⵠⵠᐃⵠΔ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "d"
	}

	function ⵠⲆⵠⲆᐃᐃⵠ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "o"
	}

	function ΔᐃᐃⵠᐃΔⲆⵠΔ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "I"
	}

	function ⵠⲆⵠⲆᐃᐃⵠ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "o"
	}

	function ⵠᐃⲆΔᐃΔⵠⲆⵠ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "D"
	}

	function ᐃⲆᐃⵠⲆⵠⵠⵠⲆ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "m"
	}

	function ᐃⲆⵠᐃⵠᐃΔΔⵠ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "c"
	}

	function ᐃⲆⵠⵠᐃΔΔ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "p"
	}

	function ⲆΔᐃⵠⲆᐃΔᐃⵠ() {
		this.ⵠΔⲆΔⲆ = function() {};
		this.ΔΔᐃᐃΔ = {
			"ⲆᐃΔΔᐃ": 1,
			"ⵠⵠΔᐃ": Δⵠᐃ,
			open: false
		};
		this.ⵠⵠΔΔᐃ = {
			"ⵠⵠΔᐃ": 1,
			"ⲆᐃΔΔᐃ": -ᐃᐃΔ,
			open: Ⲇⵠᐃᐃᐃ
		};
		this.ⲆᐃⲆⵠ = {
			"ΔΔᐃⲆⲆᐃΔ": Ⲇᐃⵠ,
			"ΔⲆⲆΔᐃ": 0,
			"ⵠⵠΔᐃ": ⵠⲆΔⲆ,
			"ⲆᐃΔΔᐃ": -ΔΔΔᐃ,
			open: ᐃⲆⲆᐃᐃ
		};
		this.ᐃᐃΔⲆ = {
			type: ⵠⵠⵠ,
			"ⲆᐃΔΔᐃ": -1,
			"ⵠⵠⵠΔⵠΔⲆ": 0,
			open: false,
			"ⵠⲆΔᐃⵠᐃⵠ": 0,
			"ⵠⵠΔᐃ": 1,
			"ⵠⲆᐃᐃⲆⵠⲆ": 0
		};
		this.ᐃⵠᐃᐃ = {
			"ⵠⵠⵠΔⵠΔⲆ": 0,
			"ⲆⲆⵠΔΔᐃᐃ": ⵠΔᐃⵠ,
			"ΔⲆⲆΔᐃ": 0,
			"ⵠⵠΔᐃ": ΔᐃⵠⲆ,
			"ⲆᐃΔΔᐃ": -ΔⵠⲆⲆ,
			open: Ⲇⵠᐃᐃᐃ
		};
		this.sign = {
			"ⲆᐃΔΔᐃ": -1,
			open: false
		};
		this.ᐃⲆᐃⵠᐃ = {
			"ⵠⵠΔᐃ": 1,
			"ΔⲆⵠΔ": 0,
			"ⲆᐃΔΔᐃ": -1,
			open: ΔⵠⵠᐃΔ
		};
		this.ΔⲆⲆΔⵠ = {
			enabled: ⲆΔⲆᐃΔ,
			"ⵠᐃᐃⵠᐃ": -ΔᐃΔⲆ,
			label: false,
			now: -1,
			"ⵠᐃᐃⲆ": ⲆⲆⲆΔΔᐃᐃⵠΔ
		};
		this.ⵠᐃⲆΔ = {
			id: -ΔⲆᐃⲆ,
			"ΔⲆⵠΔ": 0,
			"ⵠⵠΔᐃ": ΔΔⵠΔ,
			"ⲆᐃΔΔᐃ": -1,
			open: ᐃⲆⲆᐃᐃ,
			lock: ΔⲆΔⵠΔ,
			locked: false,
			"ᐃᐃⲆᐃΔᐃⲆ": Ⲇⵠᐃᐃᐃ,
			"ΔΔΔⲆᐃⲆΔ": ΔⲆΔᐃΔ
		};
		this.ⲆⲆΔᐃⵠ = ᐃΔᐃⲆⵠ;
		this.reconnect = {
			rotate: ᐃⵠⵠⲆ,
			enabled: ᐃᐃⲆⲆΔ
		};
		this.key = ΔⵠΔⵠ.ⲆⵠᐃⵠΔᐃᐃ("key", ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[305]][ⲆᐃⲆⵠΔΔⲆ[144]]);
		var ᐃᐃᐃᐃⵠΔΔ = ΔⵠΔⵠ.ⲆⵠᐃⵠΔᐃᐃ("egg", ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[305]][ⲆᐃⲆⵠΔΔⲆ[144]]);
		if (ᐃᐃᐃᐃⵠΔΔ) ᐃΔΔΔ.ⲆΔⵠⵠ = parseInt(ᐃᐃᐃᐃⵠΔΔ);
		this.beta = ⵠΔᐃᐃ === ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[305]][ⲆᐃⲆⵠΔΔⲆ[144]].indexOf("http://starve.io/beta") ? 1 : ᐃⵠⵠⲆ;
		if (this.key && this.beta) {
			ᐃΔΔⵠ.set("starve_beta", this.key)
		} else this.beta && (this.key = ᐃΔΔⵠ.get("starve_beta"));
		this.ΔⲆⵠⵠᐃ = ᐃΔΔⵠ.get("starve_token") ? ᐃΔΔⵠ.get("starve_token") : ΔⵠΔⵠ.ΔⲆⵠΔᐃⵠᐃ(ⵠⲆⲆⵠⲆ.ⵠⵠⲆⵠⵠΔΔᐃⲆ);
		ⵠⵠⲆΔᐃᐃᐃⲆΔ["baguette"]();
		var ⵠΔΔᐃⲆⵠⲆᐃⲆ = ⵠⵠⲆΔᐃᐃᐃⲆΔ["kot2"];
		this.ΔⲆⵠⵠᐃ = ⵠΔΔᐃⲆⵠⲆᐃⲆ.substring(ᐃᐃⲆ, 6) + this.ΔⲆⵠⵠᐃ.substring(6);
		this.ⲆⵠᐃᐃⵠⲆᐃ = ᐃΔΔⵠ.get("starve_token_id") ? ᐃΔΔⵠ.get("starve_token_id") : "";
		this.id = ⵠⵠⵠ;
		this.Ⲇᐃᐃⵠ = ⵠⲆΔ;
		this.ⲆΔᐃ = ⵠⲆΔ;
		this.ᐃⵠᐃᐃᐃΔΔ = {
			"ᐃⲆⲆⲆⲆ": 0,
			"ΔᐃΔⵠⲆ": ⵠᐃⲆ,
			"ⵠⵠⲆᐃⲆⲆⲆ": 0,
			"ᐃⵠⲆⵠⲆⲆⵠ": ""
		};
		this.ᐃᐃⲆⵠΔᐃΔΔⵠ = {
			connected: ⵠⵠⵠΔ,
			"ⲆᐃⲆΔᐃ": (new Date).getTime()
		};
		this.ᐃΔⵠⵠᐃ = [];
		this.ⵠⵠΔⵠΔⵠⵠ = function(ⲆΔ) {
			for (var Ⲇᐃ = 0; this.ᐃΔⵠⵠᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
				if (this.ᐃΔⵠⵠᐃ[Ⲇᐃ] == ⲆΔ) return ΔᐃΔΔᐃ
			}
			return ᐃΔΔⵠⲆ
		};
		this.ΔⵠⲆᐃⵠ = {
			"ⵠᐃᐃⵠᐃ": 0,
			time: 0,
			value: 0,
			open: false,
			"ⵠᐃᐃⲆ": function() {
				if (this[ⲆᐃⲆⵠΔΔⲆ[36]]) {
					var ᐃΔⵠⲆⲆ = (new Date).getTime();
					this.time = Math.floor((ᐃΔⵠⲆⲆ - this.ⵠᐃᐃⵠᐃ) / 1e3);
					if (this.time < 60) {
						ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ.button.ⵠᐃᐃⲆ(Ⲇ)
					} else {
						document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[49]).style.display = ⵠ[181];
						this[ⲆᐃⲆⵠΔΔⲆ[36]] = Ⲇⵠᐃᐃᐃ
					}
				}
			}
		};
		this.ⵠⲆⲆⲆⵠ = {
			id: -1,
			"ⵠⵠΔᐃ": -ⲆᐃΔ,
			lock: 0,
			timeout: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0, 1, 0, ΔΔⵠΔ / 30, 1),
			wait: false
		};
		this.ⲆΔΔΔⲆ = {
			timeout: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0, ΔᐃⵠⲆ, ⲆⲆⵠⲆ, 1 / 5, 1),
			wait: false
		};
		this.ⵠⲆᐃⲆΔ = {
			timeout: new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃᐃⲆⲆΔ, ΔΔᐃ, ΔΔⵠΔ, ⵠᐃⲆⲆ, ⵠⲆⲆ, 1),
			wait: false
		};
		this.ⲆΔⵠⲆΔ = {
			timeout: new ΔⵠΔⵠ.ΔᐃΔⵠ(ΔⵠΔⵠⵠ, 0, 1, 0, Δᐃⵠⵠ / ⵠⲆⵠᐃⵠ, 1),
			wait: false
		};
		this.ⲆⲆΔ = new ΔⵠΔⵠ.ⵠΔΔⲆⲆΔΔ(ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ, 0, .4, 0, 0, ΔⵠⵠΔ, ᐃⲆΔⲆ, ΔⵠⵠΔ, ᐃⲆΔⲆ);
		this.ⲆⲆΔ.ⵠᐃᐃⵠᐃ = ᐃᐃᐃ;
		this.ⲆⲆΔ.ΔΔᐃⵠΔΔΔ = Δⵠⵠⵠ;
		this.ⲆⲆΔ.ⲆᐃⲆ = function() {
			if (0 < this.ΔΔᐃⵠΔΔΔ) {
				this.ΔΔᐃⵠΔΔΔ -= ⲆΔΔⲆ;
				return
			}
			var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
			if (ΔⲆⵠ && !Settings.Spectator.enabled) {
				this.ⵠᐃᐃⵠᐃ = ᐃᐃⲆ;
				var Ⲇⵠ = Math.max(Math.min(ΔⵠⵠΔ - ΔⲆⵠ.x, -2), -ⲆⵠΔ.w + 2 + ᐃⲆⵠⵠ);
				var ᐃⵠⲆ = Math.max(Math.min(ᐃⲆΔⲆ - ΔⲆⵠ.y, -2), -ⲆⵠΔ.ⲆΔⲆ + ΔⲆᐃΔ + Ⲇᐃᐃᐃ);
				this.ⲆᐃⲆᐃΔ({
					x: Ⲇⵠ,
					y: ᐃⵠⲆ
				})
			} else {
				this.ⵠᐃᐃⵠᐃ += ⲆΔΔⲆ;
				if (this.ⵠᐃᐃⵠᐃ > ᐃΔⵠⲆ) {
					this.ⵠᐃᐃⵠᐃ = 0;
					!ᐃⲆⵠ.reconnect.enabled && ᐃΔᐃⵠ.ⲆᐃⵠⵠⲆⲆⲆⵠΔ()
				}
			}
		};
		this.ⲆⲆΔ.w = 4000
		this.ⲆⲆΔ.ⲆΔⲆ = 4000
		this.ⲆⲆΔ.ⲆⵠΔΔΔⵠⵠ = this.ⲆⲆΔ.w;
		this.ⲆⲆΔ.ⵠΔⲆⲆⵠΔⵠ = this.ⲆⲆΔ.ⲆΔⲆ;
		this.ⲆⲆΔ.rx = 0;
		this.ⲆⲆΔ.ry = 0;
		this.ⲆⲆΔ.ⲆⵠΔⲆΔΔᐃⲆᐃ = 0;
		this.ⲆⲆΔ.ᐃΔⲆᐃⲆΔⲆΔⵠ = Δⵠⵠⵠ;
		this.ⲆⲆΔ.ⲆΔΔⲆΔ = function(Ⲇⵠ, ᐃⵠⲆ) {
			this.x = -Math.min(Math.max(-ⲆⵠΔ.ᐃᐃⵠΔⲆᐃᐃ * 2, Ⲇⵠ - ⲆⵠΔ.ᐃᐃⵠΔⲆᐃᐃ - this.ⲆⵠΔΔΔⵠⵠ / ᐃᐃΔⵠ), ⲆⵠΔ.w - this.ⲆⵠΔΔΔⵠⵠ);
			this.y = -Math.min(Math.max(-ⲆⵠΔ.ᐃⲆⵠⲆᐃⵠⲆ * ΔⵠⲆᐃ, ᐃⵠⲆ - (ⲆⵠΔ.ᐃⲆⵠⲆᐃⵠⲆ + this.ⵠΔⲆⲆⵠΔⵠ) / 2), ⲆⵠΔ.ⲆΔⲆ - this.ⵠΔⲆⲆⵠΔⵠ + ⲆⵠΔ.ᐃⲆⵠⲆᐃⵠⲆ);
			this.ΔⵠΔⲆⲆ = this.x;
			this.ⲆΔΔⲆΔΔΔ = this.y
		};
		this.control = {
			angle: 0,
			timeout: ΔΔᐃ,
			"ⵠᐃΔᐃⲆᐃⵠ": 0,
			"ⵠΔΔΔ": ᐃᐃⲆ,
			attack: ⵠⲆⵠⵠ,
			"ⲆᐃⲆ": function() {
				var ΔⲆⵠ = Settings.AimBot.enabled && Settings.AimBot.angle !== null ? Settings.AimBot.angle : Settings.AutoFarm.enabled && Settings.AutoFarm.angle !== null ? Settings.AutoFarm.angle : ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
				if (ΔⲆⵠ) var ⲆⲆⲆⵠ = {
					x: ᐃⲆⵠ.ⲆⲆΔ.x + ΔⲆⵠ.x,
					y: ᐃⲆⵠ.ⲆⲆΔ.y + ΔⲆⵠ.y
				};
				else var ⲆⲆⲆⵠ = ⵠᐃⵠⲆⲆΔⲆ;
				var Δᐃⵠ = ΔⵠΔⵠ.ⵠΔᐃⵠⲆⲆᐃ(ⵠΔΔΔ.ⲆⲆⲆⵠ, ⲆⲆⲆⵠ);
				var ΔᐃΔΔᐃΔⵠ = false;
				this.ⵠΔΔΔ +=5 * ⲆΔΔⲆ;
				if (!ⵠΔΔΔ.state) {
					if (ΔⲆⵠ && !(ΔⲆⵠ.action & ⲆΔᐃᐃ.ⲆⲆᐃⵠᐃΔᐃ) && this.ⵠΔΔΔ > ⵠⲆⲆⵠⲆ.ⲆⲆᐃⵠᐃΔᐃ) {
						this.attack = 1;
						ΔᐃΔΔᐃΔⵠ = ᐃΔᐃⵠⲆ;
						this.ⵠΔΔΔ = ⵠᐃⲆⲆ;
						ᐃΔᐃⵠ.ⵠΔΔⵠᐃⵠᐃΔᐃ(Δᐃⵠ)
					}
				}
				if (ΔⲆⵠ) {
					ΔⲆⵠ.angle = Δᐃⵠ;
					ΔⲆⵠ.ⲆⲆᐃⲆᐃⲆᐃ = Δᐃⵠ
				}
				if (!ΔᐃΔΔᐃΔⵠ) {
					this.timeout += ⲆΔΔⲆ;
					if (this.timeout > ⵠⲆⲆⵠⲆ.ⵠⵠⲆⵠΔⲆΔ) {
						this.timeout = 0;
						if (Math.abs(this.angle - Δᐃⵠ) > .005) {
							ᐃΔᐃⵠ.ⵠᐃᐃⲆⲆᐃⲆΔᐃ(Δᐃⵠ);
							this.angle = Δᐃⵠ
						}
					}
				}
				if (ᐃⲆⵠ.Ⲇⵠⵠⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]]) return;
				if (ᐃⲆⵠ.ᐃⵠΔⵠΔ[ⲆᐃⲆⵠΔΔⲆ[36]]) return;
				var ⲆᐃⲆ = ᐃⲆⲆΔⵠ;
				var ⵠᐃΔⲆⵠ = 0;
				var ⲆⵠΔⲆΔ = ΔⲆᐃⵠΔ.ΔⵠⵠᐃⲆᐃΔ();
				if (ⲆⵠΔⲆΔ) ⵠᐃΔⲆⵠ |= ΔⵠΔ;
				var ΔⵠΔⲆ = ΔⲆᐃⵠΔ.ⵠⲆᐃᐃⲆΔᐃ();
				if (ΔⵠΔⲆ) ⵠᐃΔⲆⵠ |= 2;
				var ⵠⲆᐃⵠΔΔΔⲆⵠ = ΔⲆᐃⵠΔ.ⵠⵠⵠΔⲆΔᐃ();
				if (ⵠⲆᐃⵠΔΔΔⲆⵠ) ⵠᐃΔⲆⵠ |= 4;
				var top = ΔⲆᐃⵠΔ.ᐃΔΔᐃΔΔᐃ();
				if (top) ⵠᐃΔⲆⵠ |= 8;
				if (this.ⵠᐃΔᐃⲆᐃⵠ != ⵠᐃΔⲆⵠ) ᐃΔᐃⵠ.ᐃᐃⲆᐃᐃΔΔⵠⵠ(ⵠᐃΔⲆⵠ);
				this.ⵠᐃΔᐃⲆᐃⵠ = ⵠᐃΔⲆⵠ
			}
		};
		this.ⲆᐃⵠⲆ = {
			c: 1,
			"ᐃᐃⲆᐃ": 1,
			"ⲆΔⲆ": 1,
			"Δᐃᐃ": 1,
			"Ⲇⵠⵠ": ⵠΔᐃ,
			"ᐃᐃᐃΔⲆⵠᐃ": Δᐃⵠⵠ,
			"ⲆΔⲆⵠᐃΔᐃ": new ΔⵠΔⵠ.ΔᐃΔⵠ(true, ⵠⵠⵠ, 1, ⵠⲆⵠⵠ, 3, 3),
			"ⵠᐃⲆᐃᐃⲆᐃ": new ΔⵠΔⵠ.ΔᐃΔⵠ(true, 0, 1, ⵠⵠⵠΔ, 2, ΔΔⲆᐃ),
			"ΔⵠⲆⵠⲆᐃⵠ": new ΔⵠΔⵠ.ΔᐃΔⵠ(true, 0, 1, ⵠΔᐃⵠ, ⵠΔΔⲆᐃ, 3),
			"ⲆᐃⲆΔⲆᐃⵠ": new ΔⵠΔⵠ.ΔᐃΔⵠ(true, ΔⲆⲆ, ᐃᐃΔ, ΔⲆⲆ, ΔⲆΔⵠ, ᐃⵠΔⵠ),
			"ⵠⵠᐃᐃⲆⲆⲆ": new ΔⵠΔⵠ.ΔᐃΔⵠ(true, ⵠⲆᐃ, 1, 0, 3, 3),
			"ΔⲆⵠΔⵠⵠⵠ": new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃᐃᐃⲆΔ, ᐃᐃᐃ, ᐃᐃΔ, ΔΔᐃᐃ, ⵠⵠΔⵠ, 3),
			"ⵠᐃΔᐃⵠ": new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ, 0, 1, ⲆⲆⵠⲆ, ⵠᐃⲆⲆ, 1),
			"ᐃΔᐃᐃⵠ": new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ, ⵠᐃⲆ, 1, 0, 0, 1),
			"ᐃⵠΔⵠᐃᐃΔ": new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ, ⵠΔᐃⵠ, 1, ᐃᐃⲆ, 0, 1),
			"ᐃΔⵠᐃⵠΔⲆ": new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ, ᐃᐃⲆ, ΔΔⵠΔ, 0, 0, ⵠⲆⲆ),
			"ᐃⲆⲆⵠΔⲆⲆ": new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ, ⵠⵠⵠΔ, ⲆᐃΔ, ᐃⵠⵠⲆ, ᐃⵠⵠⲆ, 1),
			"ᐃᐃⵠᐃⵠ": new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ, ΔΔᐃ, ΔⲆᐃᐃ, 0, 0, ΔⵠⲆⲆ),
			"ⲆᐃⲆ": function() {
				this.ⲆΔⲆⵠᐃΔᐃ.ⲆᐃⲆ();
				this.ⵠᐃⲆᐃᐃⲆᐃ.ⲆᐃⲆ();
				this.ΔⵠⲆⵠⲆᐃⵠ.ⲆᐃⲆ();
				this.ⲆᐃⲆΔⲆᐃⵠ.ⲆᐃⲆ();
				this.ⵠⵠᐃᐃⲆⲆⲆ.ⲆᐃⲆ();
				this.ΔⲆⵠΔⵠⵠⵠ.ⲆᐃⲆ();
				this.ⵠᐃΔᐃⵠ.ⲆᐃⲆᐃΔ(this.c);
				this.ᐃΔᐃᐃⵠ.ⲆᐃⲆᐃΔ(this.ᐃᐃⲆᐃ);
				this.ᐃⵠΔⵠᐃᐃΔ.ⲆᐃⲆᐃΔ(this.ⲆΔⲆ);
				this.ᐃΔⵠᐃⵠΔⲆ.ⲆᐃⲆᐃΔ(this.Δᐃᐃ);
				this.ᐃⲆⲆⵠΔⲆⲆ.ⲆᐃⲆᐃΔ(this.Ⲇⵠⵠ);
				this.ᐃᐃⵠᐃⵠ.ⲆᐃⲆᐃΔ(this.ᐃᐃᐃΔⲆⵠᐃ)
			}
		};
		this.ⲆᐃⲆᐃΔⵠⵠ = ΔⲆΔᐃΔ;
		this.ⲆⵠΔⵠΔⲆΔ = false;
		this.ΔΔΔⵠⵠ = ⲆᐃᐃΔΔ;
		this.ᐃⲆΔΔΔⵠΔ = false;
		this.ᐃΔΔⲆ = {
			max: ΔᐃᐃΔ.ⵠⵠⲆⵠⵠΔᐃ,
			"ⵠⲆⵠⵠᐃᐃΔ": 0,
			"ⲆⲆⲆᐃⵠ": 0,
			"ⵠᐃΔⵠ": [],
			"ⵠΔᐃᐃᐃ": [],
			"ⵠⲆⵠΔⲆⵠᐃ": function(ΔᐃᐃⲆⲆΔⵠⲆⵠ, ᐃⲆᐃᐃᐃⵠⲆⲆᐃ) {
				if (ΔᐃᐃⲆⲆΔⵠⲆⵠ === ΔᐃΔⲆ) this.ⲆⲆⲆᐃⵠ = ΔᐃᐃΔ.ⲆⲆⵠⲆΔΔΔⵠⲆ;
				this.ⵠⲆⵠⵠᐃᐃΔ += ᐃⲆᐃᐃᐃⵠⲆⲆᐃ;
				this.max = ΔᐃᐃΔ.ⵠⵠⲆⵠⵠΔᐃ + this.ⵠⲆⵠⵠᐃᐃΔ + this.ⲆⲆⲆᐃⵠ
			},
			"ᐃⵠΔᐃⵠᐃⵠ": {
				item: -1,
				"ᐃᐃ": null,
				"ⲆᐃⵠⲆΔⵠⲆ": ᐃᐃᐃ,
				"ⵠᐃⵠᐃⵠⲆⲆ": ᐃᐃᐃ,
				"ⲆΔΔⵠⲆ": -ᐃᐃΔ,
				"ⲆⵠΔⵠΔ": -ΔⵠⲆⲆ,
				"ⵠᐃΔⲆⵠ": function(ⵠΔΔΔ) {
					if (this.ⲆᐃⵠⲆΔⵠⲆ && (ⵠΔΔΔ.x !== this.ⲆΔΔⵠⲆ || ⵠΔΔΔ.y !== this.ⲆⵠΔⵠΔ)) this.ⵠᐃⵠᐃⵠⲆⲆ = 1
				},
				start: function(Ⲇᐃⵠᐃⵠ, ⵠΔΔΔ) {
					this.ⲆΔΔⵠⲆ = ⵠΔΔΔ.x;
					this.ⲆⵠΔⵠΔ = ⵠΔΔΔ.y;
					this.item = Ⲇᐃⵠᐃⵠ;
					this.ᐃᐃ = ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ[Ⲇᐃⵠᐃⵠ].info.ᐃᐃ[ᐃᐃᐃⵠ];
					this.ⲆᐃⵠⲆΔⵠⲆ = 1
				},
				stop: function() {
					this.ⲆᐃⵠⲆΔⵠⲆ = ⵠⲆᐃ;
					this.ⵠᐃⵠᐃⵠⲆⲆ = 0;
					this.ⲆΔΔⵠⲆ = -1;
					this.ⲆⵠΔⵠΔ = -1
				},
				release: function() {
					var Ⲇᐃⵠᐃⵠ = -1;
					var ᐃΔⲆ = ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ;
					var ΔΔᐃⲆΔ = ᐃᐃⲆ;
					if (this.ⲆᐃⵠⲆΔⵠⲆ && this.ⵠᐃⵠᐃⵠⲆⲆ) {
						for (var Ⲇᐃ = 0; Ⲇᐃ < ᐃΔⲆ.length; Ⲇᐃ++) {
							if (ᐃΔⲆ[Ⲇᐃ].info.state === ⵠᐃⲆⲆᐃᐃⵠ) {
								Ⲇᐃⵠᐃⵠ = Ⲇᐃ;
								break
							}
						}
						if (Ⲇᐃⵠᐃⵠ !== -ΔΔΔᐃ && Ⲇᐃⵠᐃⵠ !== this.item && ᐃΔⲆ[this.item]) {
							ΔΔᐃⲆΔ = 1;
							var ᐃᐃΔᐃⲆⵠⲆⲆⲆ = ᐃΔⲆ[Ⲇᐃⵠᐃⵠ];
							ᐃΔⲆ[Ⲇᐃⵠᐃⵠ] = ᐃΔⲆ[this.item];
							ᐃΔⲆ[this.item] = ᐃᐃΔᐃⲆⵠⲆⲆⲆ;
							ΔᐃᐃⲆ.ᐃⲆΔⵠΔᐃⵠ()
						}
					}
					this.stop();
					return ΔΔᐃⲆΔ
				},
				"ⵠᐃᐃⲆ": function(Ⲇⵠ, ᐃⵠⲆ) {
					if (!this.ⲆᐃⵠⲆΔⵠⲆ || !this.ⵠᐃⵠᐃⵠⲆⲆ) return;
					ᐃᐃⵠⲆ(Ⲇ, this.ᐃᐃ, Math.floor(Ⲇⵠ - this.ᐃᐃ.width / 2), Math.floor(ᐃⵠⲆ - this.ᐃᐃ.height / ⲆⵠΔⵠ))
				}
			},
			"ΔΔⵠⵠⵠΔΔᐃᐃ": function(ΔⲆΔ) {
				for (Ⲇᐃ = 0; Ⲇᐃ < ΔⲆΔ.length; Ⲇᐃ++) {
					if (this.ⵠᐃΔⵠ[ΔⲆΔ[Ⲇᐃ][0]] == ΔⲆΔ[Ⲇᐃ][1]) return ᐃⲆᐃⵠⵠ
				}
				return false
			},
			"ⵠⵠⲆᐃΔ": function(ⲆΔ) {
				for (var Ⲇᐃ = 0; Ⲇᐃ < this.ⵠΔᐃᐃᐃ.length; Ⲇᐃ++) {
					if (this.ⵠΔᐃᐃᐃ[Ⲇᐃ].id == ⲆΔ) return Ⲇᐃ
				}
				return -1
			},
			"ΔᐃΔᐃᐃⲆᐃ": function(ⲆΔ, Ⲇᐃ) {
				this.ⵠᐃΔⵠ[ⲆΔ] = ᐃᐃᐃ;
				this.ⵠΔᐃᐃᐃ.splice(Ⲇᐃ, 1);
				ΔᐃᐃⲆ.ᐃⲆΔⵠΔᐃⵠ()
			},
			"ⲆⵠⵠᐃⵠⲆᐃ": function(ⲆΔ, ⵠᐃΔⵠ, Ⲇᐃ) {
				ⲆᐃⲆ = ⵠⲆⵠⵠᐃ;
				this.ⵠᐃΔⵠ[ⲆΔ] = Math.max(0, this.ⵠᐃΔⵠ[ⲆΔ] - ⵠᐃΔⵠ);
				if (!this.ⵠᐃΔⵠ[ⲆΔ] && Ⲇᐃ >= 0) this.ΔᐃΔᐃᐃⲆᐃ(ⲆΔ, Ⲇᐃ)
			}
		};
		this.ᐃᐃΔⵠⵠ = {
			enabled: ᐃⲆⵠⵠⲆ,
			translate: {
				x: ⵠⵠⲆⵠ,
				y: ⵠⲆᐃ
			},
			"ⵠⵠⵠⵠΔⲆⵠ": function() {
				if (ⲆⵠΔ.mode != ΔᐃᐃΔ.ᐃΔΔⲆⲆᐃᐃ || ᐃⲆⵠ.ⲆⵠΔⵠΔⲆΔ) return;
				ᐃⲆⵠ.ᐃᐃΔⵠⵠ.enabled = !ᐃⲆⵠ.ᐃᐃΔⵠⵠ.enabled;
				if (ᐃⲆⵠ.ᐃᐃΔⵠⵠ.enabled) ΔᐃᐃⲆ.options.ΔⵠΔⵠⵠⲆⲆ.display = ⵠ[442];
				else ΔᐃᐃⲆ.options.ΔⵠΔⵠⵠⲆⲆ.display = ⵠ[181]
			}
		};
		ΔᐃᐃⲆ.options.ΔⵠΔⵠⵠⲆⲆ.display = ⵠ[181];
		this.ⲆᐃΔΔⵠ = {
			enabled: false,
			translate: {
				x: 0,
				y: ΔⲆⲆ
			},
			"ⵠᐃᐃⵠᐃ": ⵠΔᐃⵠ,
			"ⵠⵠⵠⵠΔⲆⵠ": function() {
				ᐃⲆⵠ.ⲆᐃΔΔⵠ.enabled = !ᐃⲆⵠ.ⲆᐃΔΔⵠ.enabled;
				if (ᐃⲆⵠ.ⲆᐃΔΔⵠ.enabled) ΔᐃᐃⲆ.options.ΔΔⲆᐃⵠⵠᐃ.display = ⵠ[442];
				else ΔᐃᐃⲆ.options.ΔΔⲆᐃⵠⵠᐃ.display = ⵠ[181]
			},
			"ⲆᐃⲆ": function() {
				if (!this.enabled || ᐃⲆⵠ.ᐃⵠⲆᐃ.id >= ⵠᐃⲆ || ΔᐃᐃⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) return;
				this.ⵠᐃᐃⵠᐃ += ⲆΔΔⲆ;
				if (this.ⵠᐃᐃⵠᐃ > 2) {
					this.ⵠᐃᐃⵠᐃ = 0;
					if (ᐃⲆⵠ.ⲆᐃⵠⲆ.ⲆΔⲆ < .35) {
						if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⵠ.ⲆΔᐃⵠⲆ]) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⵠ.ⲆΔᐃⵠⲆ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ⲆΔᐃⵠⲆ));
						else if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⵠ.ⲆⲆⵠΔⵠ]) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⵠ.ⲆⲆⵠΔⵠ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ⲆⲆⵠΔⵠ));
						else if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⵠ.ΔⵠᐃΔᐃ]) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⵠ.ΔⵠᐃΔᐃ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ΔⵠᐃΔᐃ));
						else if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⵠ.ΔⲆᐃⲆᐃ]) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⵠ.ΔⲆᐃⲆᐃ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ΔⲆᐃⲆᐃ));
						else if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⵠ.ⵠⲆⵠΔⲆ]) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⵠ.ⵠⲆⵠΔⲆ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ⵠⲆⵠΔⲆ));
						else if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⵠ.ⲆᐃᐃᐃΔ]) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⵠ.ⲆᐃᐃᐃΔ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ⲆᐃᐃᐃΔ));
						else if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⵠ.ⵠⲆⵠΔΔ]) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⵠ.ⵠⲆⵠΔΔ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ⵠⲆⵠΔΔ));
						else if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⵠ.ⲆⲆᐃΔⵠ]) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⵠ.ⲆⲆᐃΔⵠ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ⲆⲆᐃΔⵠ));
						else if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⵠ.ᐃⲆΔⲆⵠ]) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⵠ.ᐃⲆΔⲆⵠ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ᐃⲆΔⲆⵠ));
						else if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⵠ.ΔⵠΔᐃᐃ]) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⵠ.ΔⵠΔᐃᐃ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ΔⵠΔᐃᐃ));
						else if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⵠ.ΔᐃⵠΔⵠ]) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⵠ.ΔᐃⵠΔⵠ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ΔᐃⵠΔⵠ));
						else if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⵠ.ⵠᐃⲆⵠΔ]) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⵠ.ⵠᐃⲆⵠΔ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ⵠᐃⲆⵠΔ));
						else if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⵠ.ⵠⲆᐃⵠⵠ]) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⵠ.ⵠⲆᐃⵠⵠ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ⵠⲆᐃⵠⵠ));
						else if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⵠ.ΔᐃᐃΔⲆ]) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⵠ.ΔᐃᐃΔⲆ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ΔᐃᐃΔⲆ))
					} else if (ᐃⲆⵠ.ⲆᐃⵠⲆ.Δᐃᐃ < .35) {
						if (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[ⵠⵠ.ⲆⵠⲆⲆΔ]) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⵠ.ⲆⵠⲆⲆΔ, ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(ⵠⵠ.ⲆⵠⲆⲆΔ))
					}
				}
			}
		};
		ΔᐃᐃⲆ.options.ΔΔⲆᐃⵠⵠᐃ.display = ⵠ[181];
		this.ᐃⵠⲆᐃ = {
			id: -1,
			"ᐃΔΔᐃ": -ⵠⲆⲆ,
			timeout: new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⵠⲆⲆᐃ, 0, ΔⲆᐃᐃ, ⲆⲆⵠⲆ, 1, ΔᐃⵠⲆ),
			"ᐃΔⵠᐃΔ": ⲆᐃᐃΔΔ,
			"ᐃⵠⲆⲆ": -1,
			mode: 0,
			label: [],
			"ᐃΔᐃⲆᐃ": [],
			"ⲆΔⵠΔⲆ": false,
			"ᐃᐃΔᐃᐃ": false,
			"ⲆᐃᐃΔᐃΔᐃ": ⲆᐃᐃΔΔ,
			"ⵠⵠΔΔᐃ": ᐃⲆⲆᐃᐃ,
			"ⵠⲆⲆⵠΔᐃΔΔΔ": function() {
				this.mode = this.mode === ΔⲆⲆ ? ᐃⲆΔ : ⵠⵠⵠ
			},
			"ᐃⵠⲆᐃᐃᐃⵠᐃΔ": function(ⲆΔⵠΔᐃ) {
				this.ⲆΔⵠΔⲆ = ⲆΔⵠΔᐃ;
				var ⲆᐃⲆᐃⲆᐃⲆ = ΔᐃᐃⲆ.ΔΔⵠⲆ;
				if (ⲆᐃⲆᐃⲆᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) ⲆᐃⲆᐃⲆᐃⲆ.ⲆⵠΔⵠΔᐃⲆ(ⲆᐃⲆᐃⲆᐃⲆ.button);
				this.ⲆᐃⲆ()
			},
			"ⲆᐃᐃⲆⵠⵠΔΔⲆ": function(ⲆΔ) {
				var ΔⲆΔ = ᐃⵠⲆᐃⲆ[ⲆΔ];
				this.id = ⲆΔ;
				this.ᐃΔⵠᐃΔ = true;
				var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
				this.timeout.ⵠᐃⵠΔⵠᐃⵠ = ΔⲆΔ.time * 8;
				this.ᐃΔΔᐃ = ΔⲆΔ.ᐃΔΔᐃ
			},
			"ΔᐃⲆΔᐃⵠΔⵠⲆ": function(ⲆΔ) {
				var ΔⲆΔ = ᐃⵠⲆᐃⲆ[ⲆΔ];
				this.id = ⲆΔ;
				this.ᐃΔⵠᐃΔ = ΔᐃΔΔᐃ;
				var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
				if (ΔⲆⵠ && ΔⲆⵠ.right == ⵠⵠ.ᐃᐃΔⲆᐃ) this.timeout.ⵠᐃⵠΔⵠᐃⵠ = ΔⲆΔ.time * ΔⲆⵠᐃ;
				else this.timeout.ⵠᐃⵠΔⵠᐃⵠ = ΔⲆΔ.time;
				this.ᐃΔΔᐃ = ΔⲆΔ.ᐃΔΔᐃ;
				for (var Ⲇᐃ = ⵠⵠⵠΔ; Ⲇᐃ < ΔⲆΔ.r.length; Ⲇᐃ++) {
					var Ⲇⵠⵠ = ΔⲆΔ.r[Ⲇᐃ];
					ᐃⲆⵠ.ᐃΔΔⲆ.ⲆⵠⵠᐃⵠⲆᐃ(Ⲇⵠⵠ[0], Ⲇⵠⵠ[ΔⲆᐃᐃ], ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(Ⲇⵠⵠ[0]))
				}
				ΔᐃᐃⲆ.ᐃⲆΔⵠΔᐃⵠ()
			},
			"ⲆᐃⲆ": function() {
				this.ᐃΔᐃⲆᐃ = [];
				if (ΔᐃᐃⲆ.ⲆⲆⵠⲆᐃ.ᐃⵠⲆᐃ === ⵠΔᐃ) ΔᐃᐃⲆ.ⲆⲆⵠⲆᐃ.display = 0;
				for (var ⵠᐃᐃᐃ in ᐃⵠⲆᐃⲆ) {
					var ΔⲆΔ = ᐃⵠⲆᐃⲆ[ⵠᐃᐃᐃ];
					var ᐃΔᐃⲆᐃ = ᐃⵠΔⲆⵠ;
					if (!ΔⲆΔ.r) continue;
					for (var Ⲇᐃ = ΔΔᐃᐃ; Ⲇᐃ < ΔⲆΔ.r.length; Ⲇᐃ++) {
						if (ᐃⲆⵠ.ᐃΔΔⲆ.max >= ΔᐃᐃΔ.ᐃⵠⲆⵠⵠΔᐃ && ΔⲆΔ.id === ⵠΔⲆ.ⵠᐃⵠⲆ) {
							ᐃΔᐃⲆᐃ = ΔⲆΔᐃΔ;
							break
						}
						if (ΔⲆΔ.w > this.ⲆΔⵠΔⲆ || ΔⲆΔ.f > this.ᐃᐃΔᐃᐃ || ΔⲆΔ.Ⲇⵠⵠ > this.ⲆᐃᐃΔᐃΔᐃ || ΔⲆΔ.e > this.ⵠⵠΔΔᐃ) {
							ᐃΔᐃⲆᐃ = false;
							break
						}
						var Ⲇⵠⵠ = ΔⲆΔ.r[Ⲇᐃ];
						if (!ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[Ⲇⵠⵠ[0]] || ᐃⲆⵠ.ᐃΔΔⲆ.ⵠᐃΔⵠ[Ⲇⵠⵠ[0]] < Ⲇⵠⵠ[ⵠᐃⵠΔ]) {
							ᐃΔᐃⲆᐃ = false;
							break
						}
					}
					if (ᐃΔᐃⲆᐃ) this.ᐃΔᐃⲆᐃ.push(ΔᐃᐃⲆ.ᐃᐃⵠ[ΔⲆΔ.id])
				}
				ΔᐃᐃⲆ.ᐃᐃⲆΔΔⲆⵠ();
				ΔᐃᐃⲆ.ⲆΔᐃΔᐃΔᐃ();
				ΔᐃᐃⲆ.ⲆΔⵠⵠᐃⵠᐃ();
				ΔᐃᐃⲆ.ⵠᐃⲆⲆΔΔⵠ();
				ΔᐃᐃⲆ.ᐃⵠΔᐃⲆⵠᐃ();
				ΔᐃᐃⲆ.ⵠᐃⵠⲆⵠΔⲆ();
				ΔᐃᐃⲆ.sign.ΔᐃᐃᐃⵠⲆⵠ()
			},
			"ⵠⵠᐃᐃᐃⲆᐃ": function() {
				this.id = -1;
				this.ᐃΔⵠᐃΔ = ᐃⵠⲆⲆᐃ;
				this.timeout.ⲆⵠⲆ = ⵠⵠⲆⵠ;
				this.timeout.Ⲇⵠⵠ = false;
				this.ⲆᐃⲆ()
			}
		};
		this.ΔⵠΔᐃⲆⲆⵠ = {
			message: undefined,
			"ⵠᐃᐃⲆ": ΔⵠⲆᐃᐃⵠΔⲆⵠ
		};
		this.alert = {
			timeout: new ΔⵠΔⵠ.ΔᐃΔⵠ(ᐃⲆⵠⵠⲆ, 1, ΔᐃⲆⲆ, ΔΔᐃ, ⵠⵠᐃΔ, .3),
			text: "",
			label: null,
			"ⵠᐃᐃⲆ": ⵠᐃⲆΔⵠᐃΔᐃⵠ,
			list: []
		};
		this.ᐃⲆᐃⲆΔ = {
			"ΔⲆ": document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]),
			"ᐃⲆⵠΔⲆ": [],
			"ⲆᐃⲆ": true,
			translate: {
				x: 0,
				y: 0
			},
			sort: function() {
				var ⵠⵠⵠΔⵠᐃΔ = [];
				var ⵠΔᐃΔ = ⲆⵠΔ.ⵠΔᐃΔ;
				for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠΔᐃΔ.length; Ⲇᐃ++) {
					if (ⵠΔᐃΔ[Ⲇᐃ].ⲆⲆΔᐃⵠ) ⵠⵠⵠΔⵠᐃΔ.push({
						id: Ⲇᐃ,
						"ⵠᐃᐃⵠ": ⵠΔᐃΔ[Ⲇᐃ].ᐃⲆⲆⲆⲆ
					})
				}
				ⵠⵠⵠΔⵠᐃΔ.sort((function(ⵠᐃⲆᐃ, ⲆⲆᐃΔ) {
					return ⲆⲆᐃΔ.ⵠᐃᐃⵠ - ⵠᐃⲆᐃ.ⵠᐃᐃⵠ
				}));
				this.ᐃⲆⵠΔⲆ = [];
				for (var Ⲇᐃ = ᐃᐃⲆ; Ⲇᐃ < ⵠⵠⵠΔⵠᐃΔ.length && Ⲇᐃ < 10; Ⲇᐃ++) this.ᐃⲆⵠΔⲆ.push(ⵠⵠⵠΔⵠᐃΔ[Ⲇᐃ].id);
				this.ⲆᐃⲆ = true
			},
			"ⵠΔⲆΔⲆ": function(ⲆΔⲆΔ) {
				var ⵠΔᐃΔ = ⲆⵠΔ.ⵠΔᐃΔ;
				for (var Ⲇᐃ = ⲆⲆⵠⲆ; Ⲇᐃ < ⵠΔᐃΔ.length; Ⲇᐃ++) ⵠΔᐃΔ[Ⲇᐃ].ᐃⲆⲆⲆⲆ = 0;
				ⵠΔᐃΔ[ᐃⲆⵠ.id].ᐃⲆⲆⲆⲆ = ΔⵠΔⵠ.ⲆᐃΔⵠΔᐃⲆ(ⲆΔⲆΔ[ΔⲆᐃⲆ]);
				this.ᐃⲆⵠΔⲆ = [];
				for (var Ⲇᐃ = ΔⲆᐃΔ; Ⲇᐃ < ⲆΔⲆΔ.length; Ⲇᐃ += ⲆⵠΔⵠ) {
					this.ᐃⲆⵠΔⲆ.push(ⲆΔⲆΔ[Ⲇᐃ]);
					ⵠΔᐃΔ[ⲆΔⲆΔ[Ⲇᐃ]].ᐃⲆⲆⲆⲆ = ΔⵠΔⵠ.ⲆᐃΔⵠΔᐃⲆ(ⲆΔⲆΔ[Ⲇᐃ + ⵠᐃⵠΔ])
				}
				this.ⲆᐃⲆ = ᐃⲆᐃⵠⵠ
			}
		};
		this.ᐃⲆᐃⲆΔ.ΔⲆ.width = ᐃ * 180;
		this.ᐃⲆᐃⲆΔ.ΔⲆ.height = 300 * ᐃ;
		this.ᐃⲆᐃⲆΔ.Ⲇ = this.ᐃⲆᐃⲆΔ.ΔⲆ.getContext(ⵠ[444]);
		this.ᐃⵠΔⵠΔ = {
			open: false,
			input: document[ⲆᐃⲆⵠΔΔⲆ[185]]("commandInput"),
			"ⵠⲆⲆⲆᐃⵠⲆ": document[ⲆᐃⲆⵠΔΔⲆ[185]]("commandsBox"),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("commandMainBox").style,
			"ⲆⵠⲆᐃⲆⵠᐃⵠⵠ": function(ᐃⲆⲆᐃ) {
				this.ⵠⲆⲆⲆᐃⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] += ᐃⲆⲆᐃ
			},
			"ⲆᐃⲆ": function() {
				this.style.left = Math.floor(ᐃⲆⵠⵠ / 2 - 300) + ⵠ[407];
				this.style.top = Math.floor(Ⲇᐃᐃᐃ / 2 - 250) + ⵠ[407]
			},
			"ᐃΔⲆᐃⵠⵠΔᐃΔ": function() {
				this.ⵠⲆⲆⲆᐃⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] = ""
			},
			"ⲆⵠᐃΔⲆ": function() {
				this[ⲆᐃⲆⵠΔΔⲆ[36]] = ⲆᐃᐃΔΔ;
				this.style.display = ⵠ[181]
			},
			"ᐃᐃΔⲆⲆ": function(ⵠᐃⲆΔⵠ) {
				var ΔⵠᐃⲆⵠ = '<table class="tableList">';
				for (var Ⲇᐃ = ⵠⲆⵠⵠ; Ⲇᐃ < ⵠᐃⲆΔⵠ.length; Ⲇᐃ++) {
					if (Ⲇᐃ % 3 === ᐃⵠⵠⲆ) ΔⵠᐃⲆⵠ += "<tr>";
					ΔⵠᐃⲆⵠ += '<td class="tableList">' + ⵠᐃⲆΔⵠ[Ⲇᐃ] + "</td>";
					if ((Ⲇᐃ + 1) % 3 === 0 || Ⲇᐃ + 1 === ⵠᐃⲆΔⵠ.length) ΔⵠᐃⲆⵠ += "</tr>"
				}
				ΔⵠᐃⲆⵠ += "</table>";
				return ΔⵠᐃⲆⵠ
			},
			"ⵠⵠΔⵠⲆ": function(cmd, ⲆⲆᐃⵠⵠⲆⵠ, ⲆᐃⵠⵠΔΔᐃ, ΔⵠᐃⲆⵠ) {
				cmd = !cmd ? "" : cmd;
				ⲆⲆᐃⵠⵠⲆⵠ = !ⲆⲆᐃⵠⵠⲆⵠ ? "" : ⲆⲆᐃⵠⵠⲆⵠ;
				ⲆᐃⵠⵠΔΔᐃ = !ⲆᐃⵠⵠΔΔᐃ ? "" : ⲆᐃⵠⵠΔΔᐃ;
				ΔⵠᐃⲆⵠ = !ΔⵠᐃⲆⵠ ? "" : ΔⵠᐃⲆⵠ;
				var ⵠᐃⲆⵠ = "<div class=commandWritten>" + cmd;
				if (ⲆⲆᐃⵠⵠⲆⵠ) ⵠᐃⲆⵠ += "<div class=commandValidated>";
				else ⵠᐃⲆⵠ += "<div class=commandUnknown>";
				ⵠᐃⲆⵠ += ⲆᐃⵠⵠΔΔᐃ + ⵠ[470] + ΔⵠᐃⲆⵠ + ⵠ[470];
				this.ⲆⵠⲆᐃⲆⵠᐃⵠⵠ(ⵠᐃⲆⵠ);
				this.ⵠⲆΔΔⲆⲆⲆⲆⲆ()
			},
			"ⵠⲆΔΔⲆⲆⲆⲆⲆ": function() {
				this.ⵠⲆⲆⲆᐃⵠⲆ["scrollTop"] = this.ⵠⲆⲆⲆᐃⵠⲆ["scrollHeight"];
				return
			},
			"ᐃΔᐃⲆⲆⲆⵠ": function(ΔⲆⵠⲆ) {
				switch (ΔⲆⵠⲆ) {
					case "clean":
						this.ᐃΔⲆᐃⵠⵠΔᐃΔ();
						return true;
						break;
					case "list":
						var ⵠⵠᐃⲆ = "";
						const ΔⲆΔᐃⲆ = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[86]][ⲆᐃⲆⵠΔΔⲆ[169]]("div");
						var ⵠΔᐃΔ = ⲆⵠΔ.ⵠΔᐃΔ;
						for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠΔᐃΔ.length; Ⲇᐃ++) {
							var ΔⵠⲆⵠ = ⵠΔᐃΔ[Ⲇᐃ];
							if (ΔⵠⲆⵠ.ⲆⲆΔᐃⵠ) {
								ΔⲆΔᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[268]] = ΔⵠⲆⵠ.ⲆⲆΔⵠⵠ;
								if (Settings.ShowLevel.enabled) {
								ⵠⵠᐃⲆ += ΔⲆΔᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] + ' <span style="color:green">#' + Ⲇᐃ + ' <span style="color:red"> | ' + '  Level : ' + ⵠΔᐃΔ[Ⲇᐃ].level + "</span><br />"
							}
							else {
								ⵠⵠᐃⲆ += ΔⲆΔᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] + ' <span style="color:green">#' + Ⲇᐃ + "</span><br />"
							}
							}
						}
						this.ⵠⵠΔⵠⲆ("list", 1, "List all connected players", ⵠⵠᐃⲆ);
						return true;
						break;
					case "weapon-list":
						this.ⵠⵠΔⵠⲆ("Weapons", 1, "List all weapons in the game", this.ᐃᐃΔⲆⲆ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow", "wood_axe", "stone_axe", "gold_axe", "diamond_axe", "amethyst_axe", "reidite_axe"]));
						return true;
						break;
					case "tool-list":
						this.ⵠⵠΔⵠⲆ("Tools", 1, "List all tools in the game", this.ᐃᐃΔⲆⲆ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
						return ᐃⵠΔⲆⵠ;
						break;
					case "survival-list":
						this.ⵠⵠΔⵠⲆ("Survival Items", ⵠⲆⲆ, "List all survival items in the game", this.ᐃᐃΔⲆⲆ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
						return true;
						break;
					case "resource-list":
						this.ⵠⵠΔⵠⲆ("Resources", 1, "List all resources in the game", this.ᐃᐃΔⲆⲆ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
						return true;
						break;
					case "food-list":
						this.ⵠⵠΔⵠⲆ("Food", 1, "List all food in the game", this.ᐃᐃΔⲆⲆ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
						return true;
						break;
					case "hat-list":
						this.ⵠⵠΔⵠⲆ("Hats", ΔᐃⵠⲆ, "List all hats in the game", this.ᐃᐃΔⲆⲆ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
						return ᐃΔᐃⵠⲆ;
						break;
					case "building-list":
						this.ⵠⵠΔⵠⲆ("Buildings", ΔΔΔᐃ, "List all buildings in the game", this.ᐃᐃΔⲆⲆ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
						return true;
						break;
					case "biome-list":
						this.ⵠⵠΔⵠⲆ("Biomes list", 1, "List all available biomes in the game", this.ᐃᐃΔⲆⲆ([ⵠ[317], "winter", "lava", "sea", "beach", "island", "dragon"]));
						return true;
						break;
					case "help-config":
						this.ⵠⵠΔⵠⲆ("Help Configuration", 1, "Learn how to build your customized map", '<div class="specialCommandBox">To get the current map configuration, and modify it, copy the result of <span class="commandSynthax">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class="commandSynthax">set-config</span></br>To modify the map, modify "important" section (at the end)<div class="infoCommand">The minimum size of the map is 50x50.</div>"custom_map" is used to change the biomes and is written like this :<div class="commandSynthax" style="font-size:17px;">"custom_map":[["biome",width,height],...,["biome",width,height]]</div>Biomes are <span class="commandSynthax">"forest"</span>, <span class="commandSynthax">"lava"</span>, <span class="commandSynthax">"winter"</span>, and <span class="commandSynthax">"dragon"</span>.');
						return true;
						break;
					case "pos":
						var ⵠΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠΔ];
						for (var Ⲇᐃ = ᐃⵠⵠⲆ; Ⲇᐃ < ⵠΔᐃΔ.length; Ⲇᐃ++) {
							var ΔⲆⵠ = ⵠΔᐃΔ[Ⲇᐃ];
							if (ΔⲆⵠ.ⵠⵠΔᐃ === ᐃⲆⵠ.id) {
								this.ⵠⵠΔⵠⲆ(ⵠ[477], ΔⵠⲆⲆ, "Your position is " + Math.floor(ΔⲆⵠ.x / ⵠⵠⲆⲆⵠ) + ":" + Math.floor(ΔⲆⵠ.y / ᐃⵠΔᐃⵠ));
								return true
							}
						}
						break;
					case "help-admin":
						this.ⵠⵠΔⵠⲆ("help-admin", ΔⵠΔ, "List all available commands for admin only", this.ᐃᐃΔⲆⲆ(["restart", "m | message", "mt | message-to", "w | welcome", ⵠ[184], "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", ⵠ[477], "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
						return true;
						break;
					case "help":
						this.ⵠⵠΔⵠⲆ("help", 1, "List all available commands", this.ᐃᐃΔⲆⲆ(["clean", "list", ⵠ[477], "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
						return ᐃᐃΔⲆⵠ;
						break
				}
				return ΔⵠΔΔⲆ
			},
			"ⲆΔΔΔᐃΔⵠᐃⵠ": function() {
				if (!this[ⲆᐃⲆⵠΔΔⲆ[36]]) {
					this[ⲆᐃⲆⵠΔΔⲆ[36]] = ᐃΔᐃⵠⲆ;
					this.style.display = ⵠ[442];
					this.input.focus()
				}
			},
			"ⵠΔⵠⲆᐃⵠᐃ": function() {
				var ΔⲆⵠⲆ = this.input.value;
				if (ΔⲆⵠⲆ && ΔⲆⵠⲆ.length > 0) {
					if (!this.ᐃΔᐃⲆⲆⲆⵠ(ΔⲆⵠⲆ)) ᐃΔᐃⵠ.ⲆⲆⵠⵠΔⲆᐃᐃᐃ(this.input.value);
					this.input.value = ""
				}
			}
		};
		this.Ⲇⵠⵠⵠᐃ = {
			open: ᐃⵠⲆⲆᐃ,
			input: document[ⲆᐃⲆⵠΔΔⲆ[185]]("chat_input"),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("chat_block").style,
			"ⲆᐃⲆ": function() {
				this.style.left = Math.floor(ᐃⲆⵠⵠ / ᐃⲆᐃⵠ - 150) + ⵠ[407];
				this.style.top = Math.floor(Ⲇᐃᐃᐃ / ΔⵠⲆᐃ + 80) + ⵠ[407]
			},
			"ⲆⵠᐃΔⲆ": function() {
				this[ⲆᐃⲆⵠΔΔⲆ[36]] = ᐃΔΔⵠⲆ;
				this.style.display = ⵠ[181];
				this.input.value = ""
			},
			prefix: "!",
			cmd: {
				hud: function(ΔᐃⲆⵠΔⲆⲆ) {
					if (ΔᐃⲆⵠΔⲆⲆ === "off") {
						var ΔⲆⵠⲆ = 'Enter "!hud" without the quotes to restore the HUD';
						if (!ᐃⲆⵠ.alert.text) ᐃⲆⵠ.alert.text = ΔⲆⵠⲆ;
						else ᐃⲆⵠ.alert.list.push(ΔⲆⵠⲆ);
						ΔᐃᐃⲆ.ΔⵠᐃⵠᐃⵠⲆ = ⵠⲆⵠⵠ
					} else ΔᐃᐃⲆ.ΔⵠᐃⵠᐃⵠⲆ = ⵠᐃⵠΔ
				}
			},
			"ᐃΔᐃⲆⲆⲆⵠ": function(ΔⲆⵠⲆ) {
				if (ΔⲆⵠⲆ.charAt(Δⵠⵠⵠ) == this.prefix) {
					var cmd = "";
					var ΔᐃⲆⵠΔⲆⲆ = "";
					for (var Ⲇᐃ = ⵠᐃⵠΔ; Ⲇᐃ < ΔⲆⵠⲆ.length && ΔⲆⵠⲆ.charAt(Ⲇᐃ) != " "; Ⲇᐃ++) cmd += ΔⲆⵠⲆ.charAt(Ⲇᐃ);
					Ⲇᐃ++;
					for (; Ⲇᐃ < ΔⲆⵠⲆ.length; Ⲇᐃ++) ΔᐃⲆⵠΔⲆⲆ += ΔⲆⵠⲆ.charAt(Ⲇᐃ);
					var ⲆΔᐃᐃⵠ = this.cmd[cmd];
					if (ⲆΔᐃᐃⵠ) ⲆΔᐃᐃⵠ(ΔᐃⲆⵠΔⲆⲆ);
					return ᐃᐃᐃⵠⵠ
				} else return false
			},
			"ⵠΔΔᐃᐃ": function() {
				if (!this[ⲆᐃⲆⵠΔΔⲆ[36]]) {
					this[ⲆᐃⲆⵠΔΔⲆ[36]] = true;
					this.style.display = ⵠ[442];
					this.input.focus()
				} else {
					this[ⲆᐃⲆⵠΔΔⲆ[36]] = false;
					this.style.display = ⵠ[181];
					var ΔⲆⵠⲆ = this.input.value;
					if (ΔⲆⵠⲆ) {
						if (!this.ᐃΔᐃⲆⲆⲆⵠ(ΔⲆⵠⲆ)) ᐃΔᐃⵠ.ᐃⲆⵠⲆΔΔᐃᐃΔ(this.input.value);
						this.input.value = ""
					}
				}
			}
		};
		this.ΔᐃⲆᐃⲆⵠΔ = {
			"ⲆⵠΔⲆⵠ": [],
			"ⲆᐃⲆ": function(Δⵠⵠ) {
				Δⵠⵠ.y += ⲆΔΔⲆ * 80 * Δⵠⵠ.ⵠᐃᐃⵠ;
				Δⵠⵠ.x += ⲆΔΔⲆ * 80 * Δⵠⵠ.c;
				Δⵠⵠ.ᐃΔᐃᐃⵠ -= ⲆΔΔⲆ / 6;
				if (Δⵠⵠ.ᐃΔᐃᐃⵠ > .2) Δⵠⵠ.alpha = Math.min(Δⵠⵠ.alpha + ⲆΔΔⲆ * 3, Ⲇⵠᐃ);
				else Δⵠⵠ.alpha = Math.max(Δⵠⵠ.alpha - ⲆΔΔⲆ * 1, ᐃⵠⵠⲆ)
			},
			add: function(ⲆⲆⲆⵠ) {
				var length = Math.floor(Math.min(Δ.ⲆⵠⵠΔⵠⵠᐃ * (ᐃⲆⵠⵠ / 1366), Δ.ⲆⵠⵠΔⵠⵠᐃ + ΔΔⵠᐃⵠ) * Math.max(Math.min(ⲆⵠΔ.ⲆⲆⵠᐃⲆ + 1e3, 3e3) / 3e3, 0));
				if (this.ⲆⵠΔⲆⵠ.length < length) {
					var ⲆΔ = Math.floor(Math.random() * Δ.ᐃᐃⵠⲆΔᐃⵠ);
					var Ⲇⵠ = -ᐃⲆⵠ.ⲆⲆΔ.x + Math.floor(Math.random() * ᐃⲆⵠ.ⲆⲆΔ.w);
					var ᐃⵠⲆ = -ᐃⲆⵠ.ⲆⲆΔ.y + Math.floor(Math.random() * ᐃⲆⵠ.ⲆⲆΔ.ⲆΔⲆ);
					var Δᐃⵠ = Math.random(Math.PI);
					this.ⲆⵠΔⲆⵠ.push(new ΔⵠΔᐃⵠⲆΔ(ⲆΔ, Ⲇⵠ, ᐃⵠⲆ, Δᐃⵠ))
				}
			}
		};
		this.ⵠΔᐃᐃⵠΔⲆ = ᐃⵠⵠⲆ;
		this.ⵠᐃᐃⵠⵠ = 0;
		this.ᐃⲆΔΔⲆ = {
			"ⲆⵠΔⲆⵠ": [],
			"ᐃᐃᐃⵠΔ": ⵠΔᐃᐃ,
			"ᐃΔᐃⵠΔ": ⵠⲆΔ,
			"ⲆᐃⲆ": function(Δⵠⵠ) {
				Δⵠⵠ.y += ⲆΔΔⲆ * (200 + 800 * this.ᐃΔᐃⵠΔ) * Δⵠⵠ.ⵠᐃᐃⵠ;
				Δⵠⵠ.x += ⲆΔΔⲆ * (200 + 800 * this.ᐃΔᐃⵠΔ) * Δⵠⵠ.c;
				Δⵠⵠ.ᐃΔᐃᐃⵠ -= ⲆΔΔⲆ / ᐃᐃⲆⵠⲆ;
				if (Δⵠⵠ.ᐃΔᐃᐃⵠ > .2) Δⵠⵠ.alpha = Math.min(Δⵠⵠ.alpha + ⲆΔΔⲆ * ⲆⲆᐃⵠ, ᐃᐃΔ);
				else Δⵠⵠ.alpha = Math.max(Δⵠⵠ.alpha - ⲆΔΔⲆ * 1, ⵠⵠⲆⵠ)
			},
			add: function(ⲆⲆⲆⵠ) {
				var length = Math.floor(Math.min((this.ᐃΔᐃⵠΔ + .1) * Δ.ⵠⲆΔⵠⵠΔⵠ * (ᐃⲆⵠⵠ / 1366), (this.ᐃΔᐃⵠΔ + .1) * Δ.ⵠⲆΔⵠⵠΔⵠ + ΔⵠⵠᐃⲆ) * Math.max(Math.min(ⲆⵠΔ.ⲆᐃⲆⲆⲆ + 1e3, 3e3) / 3e3, 0));
				if (this.ⲆⵠΔⲆⵠ.length < length) {
					var ⲆΔ = Math.floor(Math.random() * Δ.ᐃᐃⵠⲆΔᐃⵠ);
					var Ⲇⵠ = -ᐃⲆⵠ.ⲆⲆΔ.x + Math.floor(Math.random() * ᐃⲆⵠ.ⲆⲆΔ.w);
					var ᐃⵠⲆ = -ᐃⲆⵠ.ⲆⲆΔ.y + Math.floor(Math.random() * ᐃⲆⵠ.ⲆⲆΔ.ⲆΔⲆ);
					var Δᐃⵠ = Math.random(Math.PI);
					if (ᐃⲆⵠ.ᐃⲆΔΔⲆ.ᐃᐃᐃⵠΔ !== 0) Ⲇⵠ -= ᐃⲆⵠ.ⲆⲆΔ.w / 2;
					this.ⲆⵠΔⲆⵠ.push(new ΔⵠΔᐃⵠⲆΔ(ⲆΔ, Ⲇⵠ, ᐃⵠⲆ, Δᐃⵠ))
				}
			}
		};
		this.ΔⵠⲆⲆⵠ = {
			"ⲆⵠΔⲆⵠ": [],
			"ᐃᐃᐃⵠΔ": ⵠⵠⲆⵠ,
			"ᐃΔᐃⵠΔ": 0,
			"ⲆᐃⲆ": function(Δⵠⵠ) {
				if (ΔⲆᐃⵠΔ.ⵠⵠⵠΔⲆΔᐃ()) Δⵠⵠ.y += ⲆΔΔⲆ * Δⵠⵠ.ⲆⲆⲆΔᐃ * (5.5 + 10 * this.ᐃΔᐃⵠΔ);
				else Δⵠⵠ.y += ⲆΔΔⲆ * Δⵠⵠ.ⲆⲆⲆΔᐃ * (ᐃᐃᐃΔⵠ + 10 * this.ᐃΔᐃⵠΔ);
				Δⵠⵠ.ᐃΔᐃᐃⵠ -= ⲆΔΔⲆ / 2;
				if (ΔⲆᐃⵠΔ.ΔⵠⵠᐃⲆᐃΔ()) Δⵠⵠ.x += ⲆΔΔⲆ * (ᐃΔⵠᐃⵠ + 400 * this.ᐃΔᐃⵠΔ);
				else if (ΔⲆᐃⵠΔ.ⵠⲆᐃᐃⲆΔᐃ()) Δⵠⵠ.x -= ⲆΔΔⲆ * (130 - 400 * this.ᐃΔᐃⵠΔ);
				else Δⵠⵠ.x -= ⲆΔΔⲆ * (30 - 400 * this.ᐃΔᐃⵠΔ);
				if (Δⵠⵠ.ᐃΔᐃᐃⵠ > .2) Δⵠⵠ.alpha = Math.min(Δⵠⵠ.alpha + ⲆΔΔⲆ * ⲆⵠⲆᐃ, ⵠⲆⲆ);
				else Δⵠⵠ.alpha = Math.max(Δⵠⵠ.alpha - ⲆΔΔⲆ * 5, ⵠΔᐃᐃ)
			},
			add: function(ⲆⲆⲆⵠ) {
				var length = Math.floor(Math.min((this.ᐃΔᐃⵠΔ * 1.5 + .5) * Δ.ΔⲆⲆⵠⵠΔⵠ * (ᐃⲆⵠⵠ / 1366), (this.ᐃΔᐃⵠΔ * 1.5 + .5) * Δ.ΔⲆⲆⵠⵠΔⵠ + 10) * Math.max(Math.min(ⲆⵠΔ.ΔΔⵠⲆⵠ + 1e3, 3e3) / 3e3, ⵠⵠⵠ));
				if (this.ⲆⵠΔⲆⵠ.length < length) {
					var ⲆΔ = Math.floor(Math.random() * Δ.ⲆΔΔⲆⲆⲆⲆ);
					var Ⲇⵠ = -ᐃⲆⵠ.ⲆⲆΔ.x + Math.floor(Math.random() * ᐃⲆⵠ.ⲆⲆΔ.w);
					var ᐃⵠⲆ = -ᐃⲆⵠ.ⲆⲆΔ.y + Math.floor(Math.random() * 400 * ᐃ - 200 * ᐃ);
					this.ⲆⵠΔⲆⵠ.push(new ΔⵠΔᐃⵠⲆΔ(ⲆΔ, Ⲇⵠ, ᐃⵠⲆ, ΔΔᐃ))
				}
			}
		};

		function ΔⵠⵠⲆᐃΔⲆΔᐃ() {
			this.seed = 1;
			this.ᐃᐃᐃΔΔΔⵠ = 2;
			this.ΔⵠᐃⵠΔⲆᐃ = ᐃΔⵠⲆ;
			this.ⵠⵠⵠᐃⲆΔⲆΔⵠ = ΔΔⵠΔ;
			this.ⵠⵠⵠΔΔᐃⲆⵠⵠ = 2;
			this.ⲆᐃᐃⲆⲆⲆⲆⲆⵠ = ᐃⵠΔⵠ;
			this.ⵠⲆⲆⲆᐃᐃΔ = function(Ⲇⵠ) {
				this.seed = 2 + Math.floor(Math.random() * ΔᐃᐃΔ.ⵠᐃΔΔᐃ)
			};
			this.ⲆΔⲆΔᐃⲆⵠ = function(Ⲇⵠ) {
				this.ᐃᐃᐃΔΔΔⵠ = 2 + Math.floor(ΔᐃᐃΔ.ⵠᐃΔΔᐃ * Math.random())
			};
			this.ⲆᐃⲆⲆᐃⵠᐃ = function(Ⲇⵠ) {
				this.ΔⵠᐃⵠΔⲆᐃ = ᐃᐃᐃⵠ + Math.floor(Math.random() * ΔᐃᐃΔ.ⵠᐃΔΔᐃ)
			};
			this.ᐃⵠᐃᐃᐃᐃΔⵠᐃ = function(Ⲇⵠ) {
				this.ⵠⵠⵠᐃⲆΔⲆΔⵠ = ΔⵠⲆᐃ + Math.floor(ΔᐃᐃΔ.ⵠᐃΔΔᐃ * Math.random())
			};
			this.ΔⲆⵠⵠΔⲆᐃᐃⲆ = function(Ⲇⵠ) {
				this.ⵠⵠⵠΔΔᐃⲆⵠⵠ = 2 + Math.floor(Math.random() * ΔᐃᐃΔ.ⵠᐃΔΔᐃ)
			};
			this.ᐃⲆᐃᐃⲆᐃⵠⵠⲆ = function(Ⲇⵠ) {
				this.ⲆᐃᐃⲆⲆⲆⲆⲆⵠ = 2 + Math.floor(ΔᐃᐃΔ.ⵠᐃΔΔᐃ * Math.random())
			};
			this.ⲆⲆⵠⲆⵠⲆᐃ = function(ᐃⵠⲆ, ΔⲆⵠ, ΔΔᐃᐃᐃ, ᐃⲆⵠⵠᐃΔⲆ, ⲆⲆⵠΔᐃⵠⵠ, ⵠᐃⵠᐃⲆ, ⵠΔⵠⲆᐃ) {
				for (var Ⲇᐃ = ᐃⲆΔ; ⵠΔⵠⲆᐃ > Ⲇᐃ;) {
					var ⲆⲆᐃⲆ = ΔΔᐃᐃᐃ * Ⲇᐃ % ΔᐃᐃⵠᐃᐃΔ;
					var ⲆⵠⲆ = ⲆᐃⲆⵠΔⲆΔ[ⲆⲆᐃⲆ];
					if (.1 > ⲆⵠⲆ) {
						ΔⲆΔ += 50;
						Ⲇᐃ += 50;
						continue
					}
					var ΔⲆΔ = Math.floor(ᐃⲆⵠⵠᐃΔⲆ * ⲆⵠⲆ + ⲆⲆⵠΔᐃⵠⵠ);
					if (Ⲇᐃ > ⵠᐃⵠᐃⲆ && ⵠΔⵠⲆᐃ > Ⲇᐃ) {
						var ⵠᐃᐃⵠ = Math.random() > .5 ? ⲆΔΔⲆ * -10 : ⲆΔΔⲆ * 10;
						var ᐃⲆⵠⵠΔ = ΔⲆΔ * ΔⲆⵠ;
						this.ⵠⵠᐃⲆⵠⲆⵠ[ⲆⲆᐃⲆ] = Math.max(-ΔᐃᐃΔ.ⲆⲆΔᐃΔᐃΔ, Math.min(ΔᐃᐃΔ.ⲆⲆΔᐃΔᐃΔ, this.ⵠⵠᐃⲆⵠⲆⵠ[ⲆⲆᐃⲆ] + ⵠᐃᐃⵠ));
						this.ⲆΔᐃⲆΔⲆΔ[ⲆⲆᐃⲆ] = Math.max(-ΔᐃᐃΔ.ⵠΔΔᐃⵠΔᐃ, Math.min(ΔᐃᐃΔ.ⵠΔΔᐃⵠΔᐃ, this.ⲆΔᐃⲆΔⲆΔ[ⲆⲆᐃⲆ] + ⵠᐃᐃⵠ));
						if (ᐃⲆⵠⵠΔ > ⲆⲆⵠⲆ) {
							Ⲇ.beginPath();
							Ⲇ.arc(Ⲇᐃ + ᐃⲆⵠ.ⲆⲆΔ.x + this.ⲆΔᐃⲆΔⲆΔ[ⲆⲆᐃⲆ], ᐃⵠⲆ + this.ⵠⵠᐃⲆⵠⲆⵠ[ⲆⲆᐃⲆ] - ΔᐃᐃΔ.ⲆⲆΔᐃΔᐃΔ * .8, ᐃⲆⵠⵠΔ, ⵠⲆΔ, 2 * Math.PI);
							if (ⲆⵠΔ.transition) {
								var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? ΔᐃⵠⲆ - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
								Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(83, 156, 160, 236, 247, 249, ᐃᐃⵠⵠ)
							} else Ⲇ.fillStyle = Δ.ⲆΔⲆⵠΔⵠΔ[ⲆⵠΔ.time];
							Ⲇ.fill()
						}
					}
					Ⲇᐃ += ΔⲆΔ * 2
				}
			};
			this.ΔᐃᐃᐃΔⵠᐃ = function(Ⲇⵠ, ΔⲆⵠ, ΔΔᐃᐃᐃ, ᐃⲆⵠⵠᐃΔⲆ, ⲆⲆⵠΔᐃⵠⵠ, ᐃΔⵠΔⵠ, ᐃⵠⵠᐃⵠ) {
				for (var Ⲇᐃ = 1; Ⲇᐃ < ᐃⵠⵠᐃⵠ;) {
					var ⲆⲆᐃⲆ = ΔΔᐃᐃᐃ * Ⲇᐃ % ΔᐃᐃⵠᐃᐃΔ;
					var ⲆⵠⲆ = ⲆᐃⲆⵠΔⲆΔ[ⲆⲆᐃⲆ];
					if (.1 > ⲆⵠⲆ) {
						ΔⲆΔ += 50;
						Ⲇᐃ += 50;
						continue
					}
					var ΔⲆΔ = Math.floor(ᐃⲆⵠⵠᐃΔⲆ * ⲆⵠⲆ + ⲆⲆⵠΔᐃⵠⵠ);
					if (Ⲇᐃ > ᐃΔⵠΔⵠ && Ⲇᐃ < ᐃⵠⵠᐃⵠ) {
						var ⵠᐃᐃⵠ = .5 < Math.random() ? ⲆΔΔⲆ * -ⲆΔⵠⵠΔ : ⵠⲆΔⲆᐃ * ⲆΔΔⲆ;
						var ᐃⲆⵠⵠΔ = ΔⲆⵠ * ΔⲆΔ;
						this.ⵠΔᐃⲆᐃ[ⲆⲆᐃⲆ] = Math.max(-ΔᐃᐃΔ.ⲆⲆΔᐃΔᐃΔ, Math.min(ΔᐃᐃΔ.ⲆⲆΔᐃΔᐃΔ, this.ⵠΔᐃⲆᐃ[ⲆⲆᐃⲆ] + ⵠᐃᐃⵠ));
						this.ⵠΔⲆᐃⵠ[ⲆⲆᐃⲆ] = Math.max(-ΔᐃᐃΔ.ⵠΔΔᐃⵠΔᐃ, Math.min(ΔᐃᐃΔ.ⵠΔΔᐃⵠΔᐃ, this.ⵠΔⲆᐃⵠ[ⲆⲆᐃⲆ] + ⵠᐃᐃⵠ));
						if (0 < ᐃⲆⵠⵠΔ) {
							Ⲇ.beginPath();
							Ⲇ.arc(Ⲇⵠ + this.ⵠΔᐃⲆᐃ[ⲆⲆᐃⲆ] - .8 * ΔᐃᐃΔ.ⲆⲆΔᐃΔᐃΔ, Ⲇᐃ + ᐃⲆⵠ.ⲆⲆΔ.y + this.ⵠΔⲆᐃⵠ[ⲆⲆᐃⲆ], ᐃⲆⵠⵠΔ, 0, Math.PI * ᐃᐃΔⵠ);
							if (ⲆⵠΔ.transition) {
								var ᐃᐃⵠⵠ = ⲆⵠΔ.time ? 1 - ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ : ⲆⵠΔ.ᐃᐃⵠⵠ.ⲆⵠⲆ;
								Ⲇ.fillStyle = ᐃⵠᐃⲆᐃ(83, 156, 160, 236, 247, 249, ᐃᐃⵠⵠ)
							} else Ⲇ.fillStyle = Δ.ⲆΔⲆⵠΔⵠΔ[ⲆⵠΔ.time];
							Ⲇ.fill()
						}
					}
					Ⲇᐃ += 2 * ΔⲆΔ
				}
			};
			this.ⲆⲆΔⲆᐃⲆⵠΔⵠ = function(ᐃⵠⲆ, ⲆⵠⲆⵠ, ⵠΔᐃⵠΔⲆⲆ, ⵠΔⵠⲆ, ⵠᐃⵠᐃⲆ, ⵠΔⵠⲆᐃ) {
				ⵠᐃⵠᐃⲆ -= 30;
				ⵠΔⵠⲆᐃ += 30;
				var ΔⲆⵠ = -((ⵠΔᐃⵠΔⲆⲆ - ΔᐃᐃΔ.ⲆⵠᐃᐃⲆ - ⵠΔⵠⲆ - 2) / ΔᐃᐃΔ.ⵠᐃᐃᐃⲆΔⵠ);
				if (0 === ΔⲆⵠ) this.ⲆᐃⲆⲆᐃⵠᐃ();
				Ⲇ.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(ΔⲆⵠ);
				this.ⲆⲆⵠⲆⵠⲆᐃ(ⵠΔᐃⵠΔⲆⲆ, ΔⲆⵠ, this.ΔⵠᐃⵠΔⲆᐃ, 18, ⲆᐃⲆᐃⵠⵠⵠ, ⵠᐃⵠᐃⲆ, ⵠΔⵠⲆᐃ);
				Ⲇ.globalAlpha = 1;
				var ΔⲆⵠ = -((ᐃⵠⲆ - ΔᐃᐃΔ.ΔⲆⲆᐃⵠ - ⵠΔⵠⲆ + 500) / ΔᐃᐃΔ.ⵠⵠΔᐃⲆⲆⲆ);
				ΔⲆⵠ === ⵠᐃⲆⲆ && this.ⵠⲆⲆⲆᐃᐃΔ();
				Ⲇ.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(ΔⲆⵠ);
				this.ⲆⲆⵠⲆⵠⲆᐃ(ᐃⵠⲆ, ΔⲆⵠ, this.seed, ᐃⲆⵠᐃⲆᐃⵠ, 10, ⵠᐃⵠᐃⲆ, ⵠΔⵠⲆᐃ);
				Ⲇ.globalAlpha = 1;
				if (ⲆⵠⲆⵠ === -ⵠⲆⲆ) return;
				var ΔⲆⵠ = -((ⲆⵠⲆⵠ - ΔᐃᐃΔ.ΔᐃⲆᐃⲆ - ⵠΔⵠⲆ + 698) / ΔᐃᐃΔ.ⲆⵠΔΔⵠᐃⲆ);
				.01 >= ΔⲆⵠ && this.ⲆΔⲆΔᐃⲆⵠ();
				Ⲇ.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(ΔⲆⵠ);
				this.ⲆⲆⵠⲆⵠⲆᐃ(ⲆⵠⲆⵠ, ΔⲆⵠ, this.ᐃᐃᐃΔΔΔⵠ, ΔⵠΔⵠᐃ, ᐃⵠⵠⵠⲆ, ⵠᐃⵠᐃⲆ, ⵠΔⵠⲆᐃ);
				Ⲇ.globalAlpha = 1
			};
			this.ⲆᐃᐃⵠΔΔΔᐃᐃ = function(ᐃⵠⲆ, ⲆⵠⲆⵠ, ⵠΔᐃⵠΔⲆⲆ, ⵠΔⵠⲆ, ⵠᐃⵠᐃⲆ, ⵠΔⵠⲆᐃ) {
				ⵠᐃⵠᐃⲆ -= 30;
				ⵠΔⵠⲆᐃ += 30;
				var ΔⲆⵠ = -((-ⵠΔᐃⵠΔⲆⲆ + ΔᐃᐃΔ.ⲆⵠᐃᐃⲆ + ⵠΔⵠⲆ + ⵠΔⵠΔ) / ΔᐃᐃΔ.ⵠᐃᐃᐃⲆΔⵠ);
				if (ΔΔᐃᐃ === ΔⲆⵠ) this.ⲆᐃⲆⲆᐃⵠᐃ();
				Ⲇ.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(ΔⲆⵠ);
				this.ⲆⲆⵠⲆⵠⲆᐃ(ⵠΔᐃⵠΔⲆⲆ, ΔⲆⵠ, this.ΔⵠᐃⵠΔⲆᐃ, ⲆⵠⲆⵠΔᐃΔ, ⲆΔⲆⵠΔ, ⵠᐃⵠᐃⲆ, ⵠΔⵠⲆᐃ);
				Ⲇ.globalAlpha = Ⲇⵠᐃ;
				var ΔⲆⵠ = -((-ᐃⵠⲆ + ΔᐃᐃΔ.ΔⲆⲆᐃⵠ + ⵠΔⵠⲆ) / ΔᐃᐃΔ.ⵠⵠΔᐃⲆⲆⲆ);
				Ⲇᐃⵠ === ΔⲆⵠ && this.ⵠⲆⲆⲆᐃᐃΔ();
				Ⲇ.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(ΔⲆⵠ);
				this.ⲆⲆⵠⲆⵠⲆᐃ(ᐃⵠⲆ, ΔⲆⵠ, this.seed, ⵠᐃΔᐃᐃ, ᐃᐃᐃΔΔ, ⵠᐃⵠᐃⲆ, ⵠΔⵠⲆᐃ);
				Ⲇ.globalAlpha = 1;
				if (-1 === ⲆⵠⲆⵠ) return;
				var ΔⲆⵠ = -((-ⲆⵠⲆⵠ + ΔᐃᐃΔ.ΔᐃⲆᐃⲆ + ⵠΔⵠⲆ) / ΔᐃᐃΔ.ⲆⵠΔΔⵠᐃⲆ);
				ΔⲆⵠ <= .01 && this.ⲆΔⲆΔᐃⲆⵠ();
				Ⲇ.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(ΔⲆⵠ);
				this.ⲆⲆⵠⲆⵠⲆᐃ(ⲆⵠⲆⵠ, ΔⲆⵠ, this.ᐃᐃᐃΔΔΔⵠ, ⲆⲆⲆᐃᐃ, 6, ⵠᐃⵠᐃⲆ, ⵠΔⵠⲆᐃ);
				Ⲇ.globalAlpha = ᐃⲆΔ
			};
			this.ⲆΔⵠⵠΔⵠⲆΔⵠ = function(Ⲇⵠ, ⲆΔΔⵠ, ΔᐃΔᐃΔΔⵠ, Ⲇⵠⵠᐃ, ᐃΔⵠΔⵠ, ᐃⵠⵠᐃⵠ) {
				ᐃΔⵠΔⵠ -= 30;
				ᐃⵠⵠᐃⵠ += 30;
				var ΔⲆⵠ = -((-ΔᐃΔᐃΔΔⵠ + ΔᐃᐃΔ.ⲆⵠᐃᐃⲆ + Ⲇⵠⵠᐃ + ΔΔⲆⲆ) / ΔᐃᐃΔ.ⵠᐃᐃᐃⲆΔⵠ);
				ΔⲆⵠ === ⵠⲆΔ && this.ⲆᐃⲆⲆᐃⵠᐃ();
				Ⲇ.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(ΔⲆⵠ);
				this.ΔᐃᐃᐃΔⵠᐃ(ΔᐃΔᐃΔΔⵠ, ΔⲆⵠ, this.ΔⵠᐃⵠΔⲆᐃ, ᐃⵠⲆⲆⵠⲆⵠ, 16, ᐃΔⵠΔⵠ, ᐃⵠⵠᐃⵠ);
				Ⲇ.globalAlpha = Δᐃⵠⵠ;
				var ΔⲆⵠ = -((-Ⲇⵠ + ΔᐃᐃΔ.ΔⲆⲆᐃⵠ + Ⲇⵠⵠᐃ) / ΔᐃᐃΔ.ⵠⵠΔᐃⲆⲆⲆ);
				if (0 === ΔⲆⵠ) this.ⵠⲆⲆⲆᐃᐃΔ();
				Ⲇ.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(ΔⲆⵠ);
				this.ΔᐃᐃᐃΔⵠᐃ(Ⲇⵠ, ΔⲆⵠ, this.seed, 12, ⲆΔⵠⵠΔ, ᐃΔⵠΔⵠ, ᐃⵠⵠᐃⵠ);
				Ⲇ.globalAlpha = 1;
				if (ⲆΔΔⵠ === -ΔΔⵠΔ) return;
				var ΔⲆⵠ = -((-ⲆΔΔⵠ + ΔᐃᐃΔ.ΔᐃⲆᐃⲆ + Ⲇⵠⵠᐃ) / ΔᐃᐃΔ.ⲆⵠΔΔⵠᐃⲆ);
				if (.01 >= ΔⲆⵠ) this.ⲆΔⲆΔᐃⲆⵠ();
				Ⲇ.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(ΔⲆⵠ);
				this.ΔᐃᐃᐃΔⵠᐃ(ⲆΔΔⵠ, ΔⲆⵠ, this.ᐃᐃᐃΔΔΔⵠ, 6, ⵠⵠᐃᐃᐃ, ᐃΔⵠΔⵠ, ᐃⵠⵠᐃⵠ);
				Ⲇ.globalAlpha = ΔᐃΔⲆ
			};
			this.ᐃⲆΔΔⲆᐃⵠⵠᐃ = function(Ⲇⵠ, ⲆΔΔⵠ, ΔᐃΔᐃΔΔⵠ, Ⲇⵠⵠᐃ, ᐃΔⵠΔⵠ, ᐃⵠⵠᐃⵠ) {
				ᐃΔⵠΔⵠ -= 30;
				ᐃⵠⵠᐃⵠ += 30;
				var ΔⲆⵠ = -((ΔᐃΔᐃΔΔⵠ - ΔᐃᐃΔ.ⲆⵠᐃᐃⲆ - Ⲇⵠⵠᐃ - ΔΔⲆⲆ) / ΔᐃᐃΔ.ⵠᐃᐃᐃⲆΔⵠ);
				if (ΔⲆⵠ === ΔΔᐃᐃ) this.ⲆᐃⲆⲆᐃⵠᐃ();
				Ⲇ.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(ΔⲆⵠ);
				this.ΔᐃᐃᐃΔⵠᐃ(ΔᐃΔᐃΔΔⵠ, ΔⲆⵠ, this.ΔⵠᐃⵠΔⲆᐃ, 18, 16, ᐃΔⵠΔⵠ, ᐃⵠⵠᐃⵠ);
				Ⲇ.globalAlpha = 1;
				var ΔⲆⵠ = -((Ⲇⵠ - ΔᐃᐃΔ.ΔⲆⲆᐃⵠ - Ⲇⵠⵠᐃ + 500) / ΔᐃᐃΔ.ⵠⵠΔᐃⲆⲆⲆ);
				ΔⲆⵠ === ⵠⲆⵠⵠ && this.ⵠⲆⲆⲆᐃᐃΔ();
				Ⲇ.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(ΔⲆⵠ);
				this.ΔᐃᐃᐃΔⵠᐃ(Ⲇⵠ, ΔⲆⵠ, this.seed, 12, ΔⵠⵠᐃⲆ, ᐃΔⵠΔⵠ, ᐃⵠⵠᐃⵠ);
				Ⲇ.globalAlpha = 1;
				if (ⲆΔΔⵠ === -1) return;
				var ΔⲆⵠ = -((ⲆΔΔⵠ - ΔᐃᐃΔ.ΔᐃⲆᐃⲆ - Ⲇⵠⵠᐃ + 698) / ΔᐃᐃΔ.ⲆⵠΔΔⵠᐃⲆ);
				if (ΔⲆⵠ <= .01) this.ⲆΔⲆΔᐃⲆⵠ();
				Ⲇ.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(ΔⲆⵠ);
				this.ΔᐃᐃᐃΔⵠᐃ(ⲆΔΔⵠ, ΔⲆⵠ, this.ᐃᐃᐃΔΔΔⵠ, ᐃᐃⲆⵠⲆ, 6, ᐃΔⵠΔⵠ, ᐃⵠⵠᐃⵠ);
				Ⲇ.globalAlpha = ⲆΔΔΔ
			};
			this.w1 = {
				r: new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ⲆⲆⵠᐃⲆΔΔ, 0, ⵠⲆΔᐃᐃ, ΔᐃᐃΔ.ΔⲆΔⲆⵠ, ΔᐃᐃΔ.ΔⲆΔⲆⵠ, ΔᐃᐃΔ.ⵠᐃᐃᐃⲆΔⵠ),
				"ᐃᐃⲆᐃ": new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ΔᐃⵠᐃⵠⵠⲆ, ⵠΔᐃᐃ, ΔΔⵠᐃⵠ, ΔᐃᐃΔ.ⵠᐃᐃᐃⲆΔⵠ, ΔᐃᐃΔ.ⵠᐃᐃᐃⲆΔⵠ, ΔᐃᐃΔ.ΔⲆΔⲆⵠ)
			};
			this.w2 = {
				r: new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.Ⲇⵠᐃᐃᐃⵠᐃ, Δⵠⵠⵠ, 10, ΔᐃᐃΔ.ⵠⵠⲆⲆᐃⵠᐃ, ΔᐃᐃΔ.ⵠⵠⲆⲆᐃⵠᐃ, ΔᐃᐃΔ.ⵠⵠΔᐃⲆⲆⲆ),
				"ᐃᐃⲆᐃ": new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ᐃⵠⵠΔⵠ, ᐃᐃⲆ, ⵠΔΔΔⵠ, ΔᐃᐃΔ.ⵠⵠΔᐃⲆⲆⲆ, ΔᐃᐃΔ.ⵠⵠΔᐃⲆⲆⲆ, ΔᐃᐃΔ.ⵠⵠⲆⲆᐃⵠᐃ)
			};
			this.w3 = {
				r: new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ᐃΔⵠΔᐃΔᐃ, ⵠⵠⲆⵠ, 10, ΔᐃᐃΔ.ᐃᐃⵠΔᐃⲆⲆ, ΔᐃᐃΔ.ᐃᐃⵠΔᐃⲆⲆ, ΔᐃᐃΔ.ⲆⵠΔΔⵠᐃⲆ),
				"ᐃᐃⲆᐃ": new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ᐃⵠⵠΔⵠ, 0, ΔⲆᐃΔⲆ, ΔᐃᐃΔ.ⲆⵠΔΔⵠᐃⲆ, ΔᐃᐃΔ.ⲆⵠΔΔⵠᐃⲆ, ΔᐃᐃΔ.ᐃᐃⵠΔᐃⲆⲆ)
			};
			this.ᐃⵠᐃΔⲆⲆⵠᐃᐃ = function(ΔⲆᐃᐃⲆ) {
				var ⲆⲆᐃ;
				if (ΔⲆᐃᐃⲆ.r.x === ΔⲆᐃᐃⲆ.r.ΔⵠΔⲆⲆ) {
					ΔⲆᐃᐃⲆ.ᐃᐃⲆᐃ.x === ΔⲆᐃᐃⲆ.ᐃᐃⲆᐃ.ΔⵠΔⲆⲆ ? ⲆⲆᐃ = ΔⲆᐃᐃⲆ.r : ⲆⲆᐃ = ΔⲆᐃᐃⲆ.ᐃᐃⲆᐃ
				} else ⲆⲆᐃ = ΔⲆᐃᐃⲆ.r;
				return ⲆⲆᐃ
			};
			this.Δᐃᐃ = function(ΔⲆᐃᐃⲆ) {
				var ⲆⲆᐃ;
				if (ΔⲆᐃᐃⲆ.r.ΔⵠΔⲆⲆ === ΔⲆᐃᐃⲆ.r.x) {
					ΔⲆᐃᐃⲆ.ᐃᐃⲆᐃ.x === ΔⲆᐃᐃⲆ.ᐃᐃⲆᐃ.ΔⵠΔⲆⲆ ? (ΔⲆᐃᐃⲆ.r.ⵠⵠᐃᐃᐃⲆᐃ(), ΔⲆᐃᐃⲆ.ᐃᐃⲆᐃ.ⵠⵠᐃᐃᐃⲆᐃ(), ⲆⲆᐃ = ΔⲆᐃᐃⲆ.r) : ⲆⲆᐃ = ΔⲆᐃᐃⲆ.ᐃᐃⲆᐃ
				} else ⲆⲆᐃ = ΔⲆᐃᐃⲆ.r;
				ⲆⲆᐃ.ⲆᐃⲆᐃΔ(ⲆⲆᐃ.ΔⵠΔⲆⲆ);
				return ⲆⲆᐃ
			};
			this.ⵠΔᐃⲆᐃ = [];
			this.ⵠΔⲆᐃⵠ = [];
			this.ⵠⵠᐃⲆⵠⲆⵠ = [];
			this.ⲆΔᐃⲆΔⲆΔ = [];
			this.ⵠΔⲆΔⲆ = function() {
				for (var Ⲇᐃ = 0; Ⲇᐃ < ΔᐃᐃⵠᐃᐃΔ; Ⲇᐃ++) {
					this.ⵠΔᐃⲆᐃ[Ⲇᐃ] = Math.floor(ΔᐃᐃΔ.ⲆⲆΔᐃΔᐃΔ * ⲆᐃⲆⵠΔⲆΔ[Ⲇᐃ]);
					this.ⵠΔⲆᐃⵠ[Ⲇᐃ] = Math.floor(ΔᐃᐃΔ.ⵠΔΔᐃⵠΔᐃ * ⲆᐃⲆⵠΔⲆΔ[Ⲇᐃ]);
					this.ⵠⵠᐃⲆⵠⲆⵠ[Ⲇᐃ] = Math.floor(ΔᐃᐃΔ.ⲆⲆΔᐃΔᐃΔ * ⲆᐃⲆⵠΔⲆΔ[Ⲇᐃ]);
					this.ⲆΔᐃⲆΔⲆΔ[Ⲇᐃ] = Math.floor(ⲆᐃⲆⵠΔⲆΔ[Ⲇᐃ] * ΔᐃᐃΔ.ⵠΔΔᐃⵠΔᐃ)
				}
				this.w1.r.x = this.w1.r.ΔⵠΔⲆⲆ;
				this.w2.r.ⵠⲆᐃⲆᐃ = 3.5;
				this.w3.r.ⵠⲆᐃⲆᐃ = ΔⵠⲆᐃ
			};
			this.ⵠΔⲆΔⲆ()
		}
		this.ΔΔⲆΔ = [];
		for (var Ⲇᐃ = ⲆⵠⲆⲆ; ⵠΔⲆΔΔ > Ⲇᐃ; Ⲇᐃ++) this.ΔΔⲆΔ.push(new ΔⵠⵠⲆᐃΔⲆΔᐃ)
	}

	function ⵠⲆᐃΔΔⵠᐃ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "i"
	}

	function ΔΔᐃⲆᐃΔⲆ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "C"
	}

	function ᐃᐃⵠᐃΔⵠⵠ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "g"
	}

	function ᐃᐃΔⵠⵠΔᐃΔⲆ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "R"
	}

	function ΔⲆⵠⲆᐃΔⲆΔⵠ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "S"
	}

	function ΔⲆⵠΔΔΔⲆ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "n"
	}

	function ᐃΔⲆⲆΔᐃⲆ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "e"
	}

	function ᐃᐃⲆⲆΔΔⲆᐃⲆ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "w"
	}

	function ᐃΔᐃⵠΔΔᐃ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "r"
	}

	function ᐃᐃⲆᐃⵠⵠⲆΔⲆ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "b"
	}

	function ⲆᐃΔᐃⲆΔⲆᐃⵠ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "2"
	}

	function ⲆⵠⵠΔⲆⵠⲆΔΔ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "y"
	}

	function ⵠΔΔⵠΔⲆΔΔⵠ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "k"
	}

	function ᐃⲆⲆⲆⵠⵠᐃᐃⲆ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "v"
	}

	function ⵠⵠⲆΔΔⵠᐃ() {
		var ᐃⵠⵠⲆⵠΔⵠ = ΔⲆⵠΔΔΔⲆ() + ⲆⲆᐃⵠᐃᐃⵠ() + ΔᐃⲆᐃΔᐃⵠ() + ⵠⲆᐃΔΔⵠᐃ();
		var ⵠᐃⲆᐃ = ᐃⵠΔⵠⵠΔᐃΔⲆ() + ᐃΔⲆⲆΔᐃⲆ() + ᐃᐃⲆᐃⵠⵠⲆΔⲆ() + ΔⲆⵠⲆᐃΔⲆΔⵠ() + ⵠⲆⵠⲆᐃᐃⵠ() + ᐃⲆⵠᐃⵠᐃΔΔⵠ() + ⵠΔΔⵠΔⲆΔΔⵠ() + ᐃΔⲆⲆΔᐃⲆ() + ΔᐃⲆᐃΔᐃⵠ();
		ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠᐃⲆᐃ][ⲆᐃⲆⵠΔΔⲆ[299]]().indexOf(ᐃⵠⵠⲆⵠΔⵠ) === -ΔⵠⲆⲆ && (Math.floor = function() {
			return Math.round() + ΔΔⵠΔ
		});
		var ⲆⲆᐃΔ = ᐃⵠⲆΔΔΔᐃ() + ᐃΔⲆⲆΔᐃⲆ() + ΔⲆⵠΔΔΔⲆ() + ⵠⲆⵠⵠᐃⵠΔ();
		var ᐃⵠⵠΔ = ᐃⲆⵠⵠᐃΔΔ() + ᐃΔᐃⵠΔΔᐃ() + ⵠⲆⵠⲆᐃᐃⵠ() + ΔᐃⲆᐃΔᐃⵠ() + ⵠⲆⵠⲆᐃᐃⵠ() + ΔᐃⲆᐃΔᐃⵠ() + ⲆⵠⵠΔⲆⵠⲆΔΔ() + ᐃⲆⵠⵠᐃΔΔ() + ᐃΔⲆⲆΔᐃⲆ();
		if (ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠᐃⲆᐃ][ᐃⵠⵠΔ][ⲆⲆᐃΔ][ⲆᐃⲆⵠΔΔⲆ[299]]().indexOf(ᐃⵠⵠⲆⵠΔⵠ) === -1) Math.floor = function() {
			return Math.round() + ΔΔⵠΔ
		};
		var ⵠᐃⲆᐃ = ⵠⲆⵠⵠᐃⵠΔ() + ᐃΔᐃⵠΔΔᐃ() + ⲆⲆᐃⵠᐃᐃⵠ() + ᐃᐃⲆⲆΔΔⲆᐃⲆ() + ΔᐃᐃⵠᐃΔⲆⵠΔ() + ᐃⲆᐃⵠⲆⵠⵠⵠⲆ() + ⲆⲆᐃⵠᐃᐃⵠ() + ᐃᐃⵠᐃΔⵠⵠ() + ᐃΔⲆⲆΔᐃⲆ();
		var ⲆⲆᐃΔ = ΔΔᐃⲆᐃΔⲆ() + ⲆⲆᐃⵠᐃᐃⵠ() + ΔⲆⵠΔΔΔⲆ() + ᐃⲆⲆⲆⵠⵠᐃᐃⲆ() + ⲆⲆᐃⵠᐃᐃⵠ() + ᐃⵠⲆΔΔΔᐃ() + ᐃᐃΔⵠⵠΔᐃΔⲆ() + ᐃΔⲆⲆΔᐃⲆ() + ΔⲆⵠΔΔΔⲆ() + ⵠⲆⵠⵠᐃⵠΔ() + ᐃΔⲆⲆΔᐃⲆ() + ᐃΔᐃⵠΔΔᐃ() + ⵠⲆᐃΔΔⵠᐃ() + ΔⲆⵠΔΔΔⲆ() + ᐃᐃⵠᐃΔⵠⵠ() + ΔΔᐃⲆᐃΔⲆ() + ⵠⲆⵠⲆᐃᐃⵠ() + ΔⲆⵠΔΔΔⲆ() + ΔᐃⲆᐃΔᐃⵠ() + ᐃΔⲆⲆΔᐃⲆ() + ᐃⵠⲆⲆⲆᐃⵠᐃΔ() + ΔᐃⲆᐃΔᐃⵠ() + ⲆᐃΔᐃⲆΔⲆᐃⵠ() + ⵠᐃⲆΔᐃΔⵠⲆⵠ();
		if (ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆⲆᐃΔ][ᐃⵠⵠΔ][ⵠᐃⲆᐃ][ⲆᐃⲆⵠΔΔⲆ[299]]().indexOf(ᐃⵠⵠⲆⵠΔⵠ) === -1) Math.floor = function() {
			return Math.round() + 1
		};
		setTimeout(ⵠⵠⲆΔΔⵠᐃ, 1e5)
	}

	function ᐃⵠΔⵠⵠΔᐃΔⲆ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "W"
	}

	function ᐃⵠⲆⲆⲆᐃⵠᐃΔ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "x"
	}

	function ΔᐃⲆᐃΔᐃⵠ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "t"
	}

	function ΔᐃⲆᐃΔᐃⵠ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "t"
	}

	function ᐃⲆⵠⵠᐃΔΔ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "p"
	}

	function ᐃⵠⲆΔΔΔᐃ() {
		var ⵠᐃᐃᐃ = Math.random();
		return "s"
	}
	setTimeout(ⵠⵠⲆΔΔⵠᐃ, 1e5);
	var Ⲇᐃⵠⵠᐃᐃᐃ = "datas/info.json";
	ᐃᐃⵠⲆⲆᐃᐃ === ᐃⲆⵠᐃΔⲆⵠ.ᐃᐃᐃᐃΔⲆⵠ && (Ⲇᐃⵠⵠᐃᐃᐃ = "datas/info.local.json");
	var ΔᐃⲆⵠᐃᐃᐃΔⲆ = {
		"Ⲇᐃⵠⵠᐃᐃᐃ": Ⲇᐃⵠⵠᐃᐃᐃ
	};

	function ⵠⵠⵠⲆⲆΔⵠᐃΔ() {
		ΔⵠΔⵠ.ⵠⵠⵠⲆΔΔΔ("https://twitter.com/intent/tweet?text=I%20survived%20" + ᐃⲆⵠ.ⲆΔᐃ + "%20days%20with%20" + ᐃⲆⵠ.ᐃⵠᐃᐃᐃΔΔ.ᐃⲆⲆⲆⲆ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io")
	}

	function ⲆⲆΔΔΔΔΔⲆⵠ() {
		ΔⵠΔⵠ.ⵠⵠⵠⲆΔΔΔ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0")
	}

	function ᐃⲆⲆᐃΔΔⵠⵠⲆ(ⲆᐃⲆⵠⲆⵠΔ, ᐃⲆᐃⵠⵠΔⲆ, ⵠᐃⲆⲆⲆ, ᐃⲆⲆᐃⲆⲆΔ) {
		const ᐃᐃΔⵠⲆⵠⲆ = (ⲆᐃⲆⵠⲆⵠΔ + 8959) % 65429;
		const ⲆᐃᐃⲆᐃᐃⵠ = ~(5136 & ᐃⲆᐃⵠⵠΔⲆ) & ᐃⲆᐃⵠⵠΔⲆ | ~(ᐃⲆᐃⵠⵠΔⲆ & 5136) & 5136;
		const ᐃΔⵠΔᐃⲆΔ = (50465 | ⵠᐃⲆⲆⲆ) & ~(50465 & ⵠᐃⲆⲆⲆ);
		const ᐃᐃΔⵠⵠⵠⲆ = (214013 * (ᐃⲆⲆᐃⲆⲆΔ + 51219) + 2531011) % 4294967296;
		const ⵠⵠⵠⲆⲆΔⲆ = ⲆΔⲆⲆᐃΔⵠⲆⵠ(ᐃᐃΔⵠⲆⵠⲆ, ⲆᐃᐃⲆᐃᐃⵠ, ᐃΔⵠΔᐃⲆΔ, ᐃᐃΔⵠⵠⵠⲆ);
		const ⵠᐃⲆᐃΔⵠⵠ = ΔⲆⵠᐃᐃᐃⵠ(ᐃᐃΔⵠⲆⵠⲆ, ⲆᐃᐃⲆᐃᐃⵠ, ᐃΔⵠΔᐃⲆΔ, ᐃᐃΔⵠⵠⵠⲆ, ᐃᐃΔⵠⲆⵠⲆ, ⲆᐃᐃⲆᐃᐃⵠ);
		const ⲆᐃⲆⵠΔⵠⵠᐃΔ = (16 << ((ⵠⵠⵠⲆⲆΔⲆ ^ ⵠᐃⲆᐃΔⵠⵠ) >> 24 & 255)) + (0 << ((ⵠⵠⵠⲆⲆΔⲆ ^ ⵠᐃⲆᐃΔⵠⵠ) >> 8 & 255)) + (ⵠᐃΔᐃΔ << ((ⵠⵠⵠⲆⲆΔⲆ ^ ⵠᐃⲆᐃΔⵠⵠ) >> 16 & 255)) + (24 << ((ⵠⵠⵠⲆⲆΔⲆ ^ ⵠᐃⲆᐃΔⵠⵠ) >> 0 & 255));
		return ⲆᐃⲆⵠΔⵠⵠᐃΔ
	}

	function ᐃⲆⲆⵠᐃΔᐃ(ⵠΔⵠΔΔⵠᐃ, ⵠⲆⲆⲆᐃ, ⵠⲆᐃΔΔ, ᐃⵠⵠⲆᐃΔⲆ) {
		ᐃⵠᐃΔⲆΔΔ(ᐃⵠΔⲆⲆ, ⵠΔⵠΔΔⵠᐃ, ⵠⲆⲆⲆᐃ, ⵠⲆᐃΔΔ, ᐃⵠⵠⲆᐃΔⲆ);
		const ⲆᐃΔᐃΔᐃΔΔⵠ = ΔᐃᐃᐃΔᐃⵠ(ⲆⲆⵠΔ[ᐃⵠⵠⲆ], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[ᐃⲆᐃᐃ], ⲆⲆⵠΔ[ᐃⲆᐃΔ], ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[ΔᐃⲆⲆ]);
		const ⵠⵠΔᐃᐃΔⲆⲆⵠ = ⲆⲆⲆᐃⵠᐃⵠ(ⲆⲆⵠΔ[ⲆⲆⲆⲆ], ⲆⲆⵠΔ[ΔⲆΔⲆ], ⲆⲆⵠΔ[ᐃᐃⲆ]);
		const ΔᐃᐃⲆΔⵠΔⵠΔ = ⲆᐃΔᐃΔᐃΔΔⵠ ^ 28446;
		return ΔᐃᐃⲆΔⵠΔⵠΔ
	}

	function ΔⵠⵠⵠᐃⲆᐃᐃᐃ(ΔⲆ, Ⲇ) {
		var ΔⵠⲆ = this;
		this.ΔⲆ = ΔⲆ;
		this.Ⲇ = Ⲇ;
		if (ⵠⵠⲆΔᐃᐃᐃⲆΔ.navigator.userAgent.indexOf("Edge") > -ΔΔⵠΔ) {
			this.ⵠᐃⵠΔΔΔᐃ = "default";
			this.ⲆⲆⵠⲆΔⵠⵠ = "pointer"
		} else {
			this.ⵠᐃⵠΔΔΔᐃ = "url('img/cursor0.png'), default";
			this.ⲆⲆⵠⲆΔⵠⵠ = "url('img/cursor1.png'), pointer"
		}
		this.ΔⵠᐃⵠᐃⵠⲆ = ⲆΔΔΔ;
		this.ⵠⲆⲆΔᐃΔⲆ = ΔⲆᐃⲆ;
		this.ⲆᐃΔᐃⲆΔᐃ = 1;
		this.ⲆΔⲆⲆⲆΔⲆ = 1;
		this.ΔⲆΔΔᐃᐃⲆⵠΔ = {
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[173]),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[173]).style,
			"ⲆᐃⲆ": function() {
				this.style.left = Math.floor(ΔⵠⵠΔ - 125) + ⵠ[407];
				this.style.top = "110px"
			}
		};
		this.ⲆΔⵠⲆ = {
			"ᐃⵠⵠᐃⵠΔᐃ": ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃΔⲆⵠⵠΔ]),
			"ⵠΔⵠⲆⵠᐃΔ": ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔⵠⵠⵠⲆⲆ])
		};
		this.sign = {
			open: false,
			"ᐃⵠᐃⵠΔⲆΔⵠⵠ": 0,
			"ⵠᐃⵠⲆΔΔⲆ": document[ⲆᐃⲆⵠΔΔⲆ[185]]("sign_object"),
			"ⵠΔⵠΔⲆⲆⲆ": 0,
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]]("sign_window"),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("sign_window").style,
			button: ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⲆⵠΔⲆⵠ]),
			"ΔᐃᐃᐃⵠⲆⵠ": function() {
				var Ⲇⵠ = Math.floor(Math.floor((ᐃᐃᐃΔᐃ + ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ.length) / 4) * (10 + ᐃΔ[Δ.ᐃΔᐃⲆΔΔⲆ][ᐃᐃⲆ].width) + 35);
				this.button.info.translate.x = Ⲇⵠ;
				this.button.info.translate.y = 22
			},
			"ⲆᐃⲆ": function() {
				this.style.left = Math.floor(ΔⵠⵠΔ - 150) + ⵠ[407];
				this.style.top = Math.floor(ᐃⲆΔⲆ - 115) + ⵠ[407]
			},
			"ⲆⵠᐃΔⲆ": function() {
				ΔᐃᐃⲆ.sign.style.display = ⵠ[181];
				ΔᐃᐃⲆ.sign[ⲆᐃⲆⵠΔΔⲆ[36]] = false
			},
			select: function() {
				ΔᐃᐃⲆ.sign[ⲆᐃⲆⵠΔΔⲆ[36]] = !ΔᐃᐃⲆ.sign[ⲆᐃⲆⵠΔΔⲆ[36]];
				if (ΔᐃᐃⲆ.sign[ⲆᐃⲆⵠΔΔⲆ[36]]) ΔᐃᐃⲆ.sign.style.display = ⵠ[442];
				else ΔᐃᐃⲆ.sign.style.display = ⵠ[181]
			},
			ok: function() {
				ᐃΔᐃⵠ.ⵠⲆᐃⵠⲆᐃΔΔΔ(ᐃⲆⵠ.sign.ⲆᐃΔΔᐃ, ΔᐃᐃⲆ.sign.ⵠΔⵠΔⲆⲆⲆ);
				ΔᐃᐃⲆ.sign.select()
			},
			up: function() {
				ΔᐃᐃⲆ.sign.ⵠΔⵠΔⲆⲆⲆ = ΔᐃᐃⲆ.sign.ⵠΔⵠΔⲆⲆⲆ === 0 ? ⵠⲆⲆⵠⲆ.ⵠᐃⲆᐃⵠⵠⲆ - 1 : ΔᐃᐃⲆ.sign.ⵠΔⵠΔⲆⲆⲆ - 1;
				ΔᐃᐃⲆ.sign.ⵠᐃⵠⲆΔΔⲆ.src = "./img/sign" + ΔᐃᐃⲆ.sign.ⵠΔⵠΔⲆⲆⲆ + ".png"
			},
			down: function() {
				ΔᐃᐃⲆ.sign.ⵠΔⵠΔⲆⲆⲆ = (ΔᐃᐃⲆ.sign.ⵠΔⵠΔⲆⲆⲆ + 1) % ⵠⲆⲆⵠⲆ.ⵠᐃⲆᐃⵠⵠⲆ;
				ΔᐃᐃⲆ.sign.ⵠᐃⵠⲆΔΔⲆ.src = "./img/sign" + ΔᐃᐃⲆ.sign.ⵠΔⵠΔⲆⲆⲆ + ".png"
			}
		};
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("quit_sign")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.sign.select, ΔⵠΔⲆⵠ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("ok_sign")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.sign.ok, false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("sign_up")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.sign.up, ⲆΔⲆᐃΔ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("sign_down")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.sign.down, false);
		this.ΔⵠⲆⲆΔ = {
			open: ΔⵠⵠᐃΔ,
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]]("shop_market"),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("shop_market").style,
			items: [{
				id: 0,
				name: "wood",
				"ⲆΔⵠΔᐃ": 1,
				b: 1,
				a: 3,
				"ᐃΔⵠⲆᐃ": Δ.ᐃΔᐃⲆΔΔⲆ
			}, {
				id: 1,
				name: "stone",
				"ⲆΔⵠΔᐃ": ΔᐃⵠⲆ,
				b: ⲆΔΔΔ,
				a: 4,
				"ᐃΔⵠⲆᐃ": Δ.ᐃΔⵠⵠᐃⲆⲆ
			}, {
				id: 2,
				name: "gold",
				"ⲆΔⵠΔᐃ": 1,
				b: ⵠᐃⵠΔ,
				a: 6,
				"ᐃΔⵠⲆᐃ": Δ.ⲆⵠᐃᐃᐃᐃΔ
			}, {
				id: ⵠΔΔⲆᐃ,
				name: "diamond",
				"ⲆΔⵠΔᐃ": ᐃᐃⵠΔ,
				b: 4,
				a: 1,
				"ᐃΔⵠⲆᐃ": Δ.ⲆᐃΔᐃⲆⵠⲆ
			}, {
				id: 4,
				name: "amethyst",
				"ⲆΔⵠΔᐃ": 8,
				b: 8,
				a: 1,
				"ᐃΔⵠⲆᐃ": Δ.ⲆᐃᐃⵠⲆⲆⵠ
			}, {
				id: 5,
				name: "reidite",
				"ⲆΔⵠΔᐃ": 16,
				b: 16,
				a: ΔᐃⲆⲆ,
				"ᐃΔⵠⲆᐃ": Δ.ΔΔⵠΔⲆⲆᐃ
			}, {
				id: ᐃΔᐃΔᐃ,
				name: "pumpkin_seed",
				"ⲆΔⵠΔᐃ": 10,
				b: 10,
				a: 1,
				"ᐃΔⵠⲆᐃ": Δ.ΔⲆΔⲆⲆΔⵠ
			}, {
				id: 7,
				name: "carrot_seed",
				"ⲆΔⵠΔᐃ": 16,
				b: 16,
				a: Ⲇⵠᐃ,
				"ᐃΔⵠⲆᐃ": Δ.ΔⲆᐃΔⲆⲆᐃ
			}, {
				id: 8,
				name: "tomato_seed",
				"ⲆΔⵠΔᐃ": 20,
				b: 20,
				a: ⲆΔΔΔ,
				"ᐃΔⵠⲆᐃ": Δ.ⵠΔᐃⲆⲆᐃⵠ
			}, {
				id: ⵠⵠⲆⵠⵠ,
				name: "thornbush_seed",
				"ⲆΔⵠΔᐃ": 30,
				b: 30,
				a: ⵠⲆⲆ,
				"ᐃΔⵠⲆᐃ": Δ.ᐃΔⵠᐃⵠⲆⲆ
			}, {
				id: ⲆΔⵠⵠΔ,
				name: "garlic_seed",
				"ⲆΔⵠΔᐃ": 40,
				b: 40,
				a: ΔᐃΔⲆ,
				"ᐃΔⵠⲆᐃ": Δ.ⵠⵠΔᐃΔⵠⵠ
			}, {
				id: 11,
				name: "watermelon_seed",
				"ⲆΔⵠΔᐃ": 60,
				b: 60,
				a: 1,
				"ᐃΔⵠⲆᐃ": Δ.ⵠᐃᐃⵠᐃⲆΔ
			}],
			button: ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⵠⵠⲆᐃⲆ]),
			"ⲆᐃⲆ": function() {
				this.style.left = Math.floor(ΔⵠⵠΔ - 450) + ⵠ[407];
				this.style.top = Math.floor(ᐃⲆΔⲆ - 270) + ⵠ[407]
			},
			select: function() {
				ΔᐃᐃⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] = !ΔᐃᐃⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]];
				if (ΔᐃᐃⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
					ΔᐃᐃⲆ.ΔⵠⲆⲆΔ.style.display = ⵠ[442]
				} else ΔᐃᐃⲆ.ΔⵠⲆⲆΔ.style.display = ⵠ[181]
			},
			"ⲆⵠᐃΔⲆ": function() {
				ΔᐃᐃⲆ.ΔⵠⲆⲆΔ.style.display = ⵠ[181];
				ΔᐃᐃⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] = false
			},
			"ⲆⲆᐃᐃⲆⵠⲆ": function() {
				ᐃΔᐃⵠ.ⲆΔᐃⵠᐃΔᐃⵠᐃ(this.ᐃᐃⲆⲆⲆΔⵠ)
			},
			"ⲆΔΔⲆΔ": function() {
				var ⲆΔ = this.id;
				if (this.ᐃᐃⲆⲆⲆΔⵠ.a === ᐃᐃΔ) {
					var ⲆⲆⵠⵠ = Math.floor(Number(this.value) * this.ᐃᐃⲆⲆⲆΔⵠ.b);
					this.ᐃᐃⲆⲆⲆΔⵠ.ⲆΔⵠΔᐃ = ⲆⲆⵠⵠ;
					document[ⲆᐃⲆⵠΔΔⲆ[185]](this.ᐃᐃⲆⲆⲆΔⵠ.name + ⵠ[177])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⲆⲆⵠⵠ + ""
				} else {
					var ⲆⲆⵠⵠ = Math.floor(Number(this.value) / this.ᐃᐃⲆⲆⲆΔⵠ.a);
					this.ᐃᐃⲆⲆⲆΔⵠ.ⲆΔⵠΔᐃ = ⲆⲆⵠⵠ;
					document[ⲆᐃⲆⵠΔΔⲆ[185]](this.ᐃᐃⲆⲆⲆΔⵠ.name + ⵠ[177])[ⲆᐃⲆⵠΔΔⲆ[112]] = ⲆⲆⵠⵠ + ""
				}
			}
		};
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("quit_market")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ΔⵠⲆⲆΔ.ⲆⵠᐃΔⲆ, false);
		var ⲆⲆᐃΔΔᐃⵠ = [
			[ⵠ[180], this.ΔⵠⲆⲆΔ.ⲆⲆᐃᐃⲆⵠⲆ, "buy_"],
			[ⵠ[41], this.ΔⵠⲆⲆΔ.ⲆΔΔⲆΔ, ""],
			["change", this.ΔⵠⲆⲆΔ.ⲆΔΔⲆΔ, ""],
			["keypress", this.ΔⵠⲆⲆΔ.keypress, ""]
		];
		for (var ⲆⲆᐃⲆ = 0; ⲆⲆᐃⲆ < this.ΔⵠⲆⲆΔ.items.length; ⲆⲆᐃⲆ++) {
			var Ⲇᐃⵠᐃⵠ = this.ΔⵠⲆⲆΔ.items[ⲆⲆᐃⲆ];
			document[ⲆᐃⲆⵠΔΔⲆ[185]](Ⲇᐃⵠᐃⵠ.name + "_market").src = ᐃΔ[Ⲇᐃⵠᐃⵠ.ᐃΔⵠⲆᐃ][0].ⵠⵠⵠΔᐃ === ⲆⲆⵠᐃΔ ? ᐃΔ[Ⲇᐃⵠᐃⵠ.ᐃΔⵠⲆᐃ][ⵠΔᐃⵠ].src : ᐃΔ[Ⲇᐃⵠᐃⵠ.ᐃΔⵠⲆᐃ][ΔΔᐃᐃ].ⵠⵠⵠΔᐃ;
			Ⲇᐃⵠᐃⵠ.a === ᐃⲆΔ ? (document[ⲆᐃⲆⵠΔΔⲆ[185]](Ⲇᐃⵠᐃⵠ.name + ⵠ[177])[ⲆᐃⲆⵠΔΔⲆ[112]] = Ⲇᐃⵠᐃⵠ.b, document[ⲆᐃⲆⵠΔΔⲆ[185]](Ⲇᐃⵠᐃⵠ.name + ⵠ[223]).value = 1, document[ⲆᐃⲆⵠΔΔⲆ[185]](Ⲇᐃⵠᐃⵠ.name + ⵠ[223]).step = ΔᐃⵠⲆ, document[ⲆᐃⲆⵠΔΔⲆ[185]](Ⲇᐃⵠᐃⵠ.name + ⵠ[223]).min = 1, document[ⲆᐃⲆⵠΔΔⲆ[185]](Ⲇᐃⵠᐃⵠ.name + ⵠ[223]).max = Math.floor(ⵠⵠⲆⲆᐃ / Ⲇᐃⵠᐃⵠ.b)) : (document[ⲆᐃⲆⵠΔΔⲆ[185]](Ⲇᐃⵠᐃⵠ.name + ⵠ[177])[ⲆᐃⲆⵠΔΔⲆ[112]] = 1, document[ⲆᐃⲆⵠΔΔⲆ[185]](Ⲇᐃⵠᐃⵠ.name + ⵠ[223]).value = Ⲇᐃⵠᐃⵠ.a, document[ⲆᐃⲆⵠΔΔⲆ[185]](Ⲇᐃⵠᐃⵠ.name + ⵠ[223]).step = Ⲇᐃⵠᐃⵠ.a, document[ⲆᐃⲆⵠΔΔⲆ[185]](Ⲇᐃⵠᐃⵠ.name + ⵠ[223]).min = Ⲇᐃⵠᐃⵠ.a);
			document[ⲆᐃⲆⵠΔΔⲆ[185]]("buy_" + Ⲇᐃⵠᐃⵠ.name + ⵠ[223]).ᐃᐃⲆⲆⲆΔⵠ = Ⲇᐃⵠᐃⵠ;
			document[ⲆᐃⲆⵠΔΔⲆ[185]](Ⲇᐃⵠᐃⵠ.name + ⵠ[223]).ᐃᐃⲆⲆⲆΔⵠ = Ⲇᐃⵠᐃⵠ;
			for (var Ⲇᐃ = ⵠΔᐃᐃ; ⲆⲆᐃΔΔᐃⵠ.length > Ⲇᐃ; Ⲇᐃ++) document[ⲆᐃⲆⵠΔΔⲆ[185]](ⲆⲆᐃΔΔᐃⵠ[Ⲇᐃ][2] + Ⲇᐃⵠᐃⵠ.name + ⵠ[223])[ⲆᐃⲆⵠΔΔⲆ[42]](ⲆⲆᐃΔΔᐃⵠ[Ⲇᐃ][ⵠᐃⲆ], ⲆⲆᐃΔΔᐃⵠ[Ⲇᐃ][ΔᐃΔⲆ], false)
		}
		$("[type='number']").keypress((function(ⲆΔⲆⲆ) {
			ⲆΔⲆⲆ.preventDefault()
		}));
		this.options = {
			open: false,
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]]("option_in_game"),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("option_in_game").style,
			"ΔΔⲆⵠᐃ": document[ⲆᐃⲆⵠΔΔⲆ[185]]("agree_ing").style,
			"ⲆⵠᐃⵠᐃᐃΔ": document[ⲆᐃⲆⵠΔΔⲆ[185]]("cancel_agree_ing").style,
			"ΔᐃⵠΔᐃΔᐃ": document[ⲆᐃⲆⵠΔΔⲆ[185]]("quest_agree_ing").style,
			"ΔⵠΔⵠⵠⲆⲆ": document[ⲆᐃⲆⵠΔΔⲆ[185]]("spectator_agree_ing").style,
			"ΔΔⲆᐃⵠⵠᐃ": document[ⲆᐃⲆⵠΔΔⲆ[185]]("auto_feed_agree_ing").style,
			"ᐃⲆⵠⵠⲆⲆⵠ": document[ⲆᐃⲆⵠΔΔⲆ[185]]("info_agree_ing").style,
			"ᐃᐃᐃⵠⲆᐃΔ": document[ⲆᐃⲆⵠΔΔⲆ[185]]("pixelated_agree_ing").style,
			button: ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⲆⵠⵠ]),
			"ΔⲆᐃΔⲆΔᐃⲆⲆ": function() {
				ΔᐃᐃⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] = !ΔᐃᐃⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]];
				if (ΔᐃᐃⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]]) ΔᐃᐃⲆ.options.style.display = ⵠ[442];
				else ΔᐃᐃⲆ.options.style.display = ⵠ[181]
			},
			"ᐃᐃⲆΔⵠⲆᐃⵠΔ": function() {
				ᐃΔΔΔ.ⲆᐃⲆΔⲆΔᐃ()
			},
			"ⲆⲆᐃⲆⵠⵠᐃΔᐃ": function() {
				ᐃΔΔΔ.ΔᐃⵠⵠᐃΔⲆ()
			},
			high: function() {
				ᐃΔΔΔ.ᐃⵠΔⲆⵠⵠⲆⲆⲆ()
			},
			low: function() {
				ᐃΔΔΔ.ⲆᐃΔᐃⲆⲆⲆΔΔ()
			},
			"ⵠⲆⲆⲆΔ": function() {
				ΔᐃᐃⲆ.ΔΔⵠⲆ.ⵠⲆⲆⲆΔ()
			},
			"ⲆⲆⵠΔᐃᐃⲆᐃΔ": function() {
				ΔᐃᐃⲆ.ΔⲆΔⵠⵠ.ⵠⲆⲆⲆΔ()
			},
			"ᐃᐃΔⲆⵠᐃᐃⲆᐃ": function() {
				ΔᐃᐃⲆ.ᐃⲆⲆⲆ.ⵠⲆⲆⲆΔ()
			},
			"ΔᐃΔⵠⵠΔΔⵠⲆ": function() {
				ᐃⲆⵠ.ᐃᐃΔⵠⵠ.ⵠⵠⵠⵠΔⲆⵠ()
			},
			"ⲆⲆᐃⵠΔᐃΔΔⵠ": function() {
				ᐃⲆⵠ.ⲆᐃΔΔⵠ.ⵠⵠⵠⵠΔⲆⵠ()
			},
			"ⲆⵠᐃΔⲆ": function() {
				ΔᐃᐃⲆ.options.style.display = ⵠ[181];
				ΔᐃᐃⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] = false
			},
			"ⲆᐃⲆ": function() {
				this.style.left = Math.floor(ΔⵠⵠΔ - 235) + ⵠ[407];
				this.style.top = Math.floor(ᐃⲆΔⲆ - 170) + ⵠ[407]
			}
		};
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[312])[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.options.ᐃᐃⲆΔⵠⲆᐃⵠΔ, ᐃⲆⲆᐃᐃ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[487])[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.options.ⲆⲆᐃⲆⵠⵠᐃΔᐃ, false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[456])[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.options.low, false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[281])[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.options.high, Ⲇⵠᐃᐃᐃ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("quit_opt")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.options.ⲆⵠᐃΔⲆ, ⲆΔⲆᐃΔ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("case_agree_opt")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.options.ⵠⲆⲆⲆΔ, ᐃⲆⲆᐃᐃ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("quest_case_agree_opt")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.options.ᐃᐃΔⲆⵠᐃᐃⲆᐃ, false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("cancel_case_agree_opt")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.options.ⲆⲆⵠΔᐃᐃⲆᐃΔ, false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("spectator_case_agree_opt")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.options.ΔᐃΔⵠⵠΔΔⵠⲆ, ⲆΔⲆᐃΔ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("auto_feed_case_agree_opt")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.options.ⲆⲆᐃⵠΔᐃΔΔⵠ, false);
		this.ΔⲆΔⵠⵠ = {
			open: false,
			"ᐃⲆᐃⲆⲆ": ᐃΔΔⵠ.get(ⵠ[274]) ? ᐃΔΔⵠ.get(ⵠ[274]) === "0" ? 0 : 1 : 1,
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[25]),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[25]).style,
			"ΔΔⲆⵠᐃ": document[ⲆᐃⲆⵠΔΔⲆ[185]]("cancel_agree").style,
			button: 0,
			"Ⲇᐃ": 0,
			"ⲆⵠᐃΔⲆ": function() {
				ΔᐃᐃⲆ.ΔⲆΔⵠⵠ.style.display = ⵠ[181];
				ΔᐃᐃⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] = Ⲇⵠᐃᐃᐃ
			},
			"ΔⲆⲆΔⵠΔΔ": function() {
				if (ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔⵠᐃΔ) ᐃΔᐃⵠ.ⵠᐃⲆᐃⲆⵠⲆⲆΔ();
				ΔᐃᐃⲆ.ΔⲆΔⵠⵠ.ⲆⵠᐃΔⲆ()
			},
			"ⵠⲆⲆⲆΔ": function() {
				if (!ΔᐃᐃⲆ.ΔⲆΔⵠⵠ.ᐃⲆᐃⲆⲆ) {
					ᐃΔΔⵠ.set(ⵠ[274], "1");
					ΔᐃᐃⲆ.ΔⲆΔⵠⵠ.ΔΔⲆⵠᐃ.display = ⵠ[181];
					ΔᐃᐃⲆ.options.ⲆⵠᐃⵠᐃᐃΔ.display = ⵠ[442]
				} else {
					ᐃΔΔⵠ.set(ⵠ[274], "0");
					ΔᐃᐃⲆ.ΔⲆΔⵠⵠ.ΔΔⲆⵠᐃ.display = ⵠ[442];
					ΔᐃᐃⲆ.options.ⲆⵠᐃⵠᐃᐃΔ.display = ⵠ[181]
				}
				ΔᐃᐃⲆ.ΔⲆΔⵠⵠ.ᐃⲆᐃⲆⲆ = !ΔᐃᐃⲆ.ΔⲆΔⵠⵠ.ᐃⲆᐃⲆⲆ
			},
			"ⲆⵠΔⵠΔᐃⲆ": function() {
				if (!this.ᐃⲆᐃⲆⲆ) this.ΔⲆⲆΔⵠΔΔ();
				else {
					this.style.display = ⵠ[442];
					this[ⲆᐃⲆⵠΔΔⲆ[36]] = true
				}
			},
			"ⲆᐃⲆ": function() {
				this.style.left = Math.floor(ΔⵠⵠΔ - 235) + ⵠ[407];
				this.style.top = Math.floor(ᐃⲆΔⲆ - 130) + ⵠ[407]
			}
		};
		this.ΔⲆΔⵠⵠ.id.oncontextmenu = function() {
			return ⲆᐃᐃΔΔ
		};
		this.ΔⲆΔⵠⵠ.ΔΔⲆⵠᐃ.display = ⵠ[181];
		if (this.ΔⲆΔⵠⵠ.ᐃⲆᐃⲆⲆ) this.options.ⲆⵠᐃⵠᐃᐃΔ.display = ⵠ[442];
		else this.options.ⲆⵠᐃⵠᐃᐃΔ.display = ⵠ[181];
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("cancel_yes_delete")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ΔⲆΔⵠⵠ.ΔⲆⲆΔⵠΔΔ, false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("cancel_no_delete")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ΔⲆΔⵠⵠ.ⲆⵠᐃΔⲆ, false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("cancel_case_agree")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ΔⲆΔⵠⵠ.ⵠⲆⲆⲆΔ, ᐃⲆⲆΔⵠ);
		document[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[25], (function(ᐃⲆⵠⲆ) {
			ᐃⲆⵠⲆ.preventDefault()
		}), ΔⵠⵠᐃΔ);
		this.ᐃⵠᐃⵠⲆⲆᐃ = {
			"ᐃⲆᐃⲆⲆ": ᐃΔΔⵠ.get(ⵠ[446]) ? ᐃΔΔⵠ.get(ⵠ[446]) === "0" ? 0 : 1 : 1,
			"ΔⵠᐃΔⵠⲆᐃ": function(ⲆΔⵠΔᐃ) {
				if (ⲆΔⵠΔᐃ) document[ⲆᐃⲆⵠΔΔⲆ[185]]("game_canvas").style.imageRendering = "pixelated";
				else document[ⲆᐃⲆⵠΔΔⲆ[185]]("game_canvas").style.imageRendering = "auto"
			},
			"ⵠⲆⲆⲆΔ": function() {
				if (ΔᐃᐃⲆ.ᐃⵠᐃⵠⲆⲆᐃ.ᐃⲆᐃⲆⲆ === ⵠⲆⵠⵠ) {
					ᐃΔΔⵠ.set(ⵠ[446], "1");
					ΔᐃᐃⲆ.ᐃⵠᐃⵠⲆⲆᐃ.ΔⵠᐃΔⵠⲆᐃ(1);
					ΔᐃᐃⲆ.options.ᐃᐃᐃⵠⲆᐃΔ.display = ⵠ[442]
				} else {
					ᐃΔΔⵠ.set(ⵠ[446], "0");
					ΔᐃᐃⲆ.ᐃⵠᐃⵠⲆⲆᐃ.ΔⵠᐃΔⵠⲆᐃ(0);
					ΔᐃᐃⲆ.options.ᐃᐃᐃⵠⲆᐃΔ.display = ⵠ[181]
				}
				ΔᐃᐃⲆ.ᐃⵠᐃⵠⲆⲆᐃ.ᐃⲆᐃⲆⲆ = (ΔᐃᐃⲆ.ᐃⵠᐃⵠⲆⲆᐃ.ᐃⲆᐃⲆⲆ + ΔⲆᐃⲆ) % 2
			}
		};
		if (this.ᐃⵠᐃⵠⲆⲆᐃ.ᐃⲆᐃⲆⲆ === 1) this.options.ᐃᐃᐃⵠⲆᐃΔ.display = ⵠ[442];
		else {
			this.ᐃⵠᐃⵠⲆⲆᐃ.ΔⵠᐃΔⵠⲆᐃ(0);
			this.options.ᐃᐃᐃⵠⲆᐃΔ.display = ⵠ[181]
		}
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("pixelated_case_agree_opt")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ᐃⵠᐃⵠⲆⲆᐃ.ⵠⲆⲆⲆΔ, ΔⵠΔⵠⵠ);
		this.ⲆⲆⵠⲆᐃ = {
			"ᐃⲆᐃⲆⲆ": ᐃΔΔⵠ.get(ⵠ[266]) ? ᐃΔΔⵠ.get(ⵠ[266]) === "0" ? 0 : ⵠⲆΔⲆ : ᐃⲆΔ,
			display: 0,
			x: ⵠⵠⲆⵠ,
			y: 0,
			id: 0,
			"ᐃⵠⲆᐃ": ⵠᐃⲆ,
			"ⵠⲆⲆⲆΔ": function() {
				if (ΔᐃᐃⲆ.ⲆⲆⵠⲆᐃ.ᐃⲆᐃⲆⲆ === 0) {
					ᐃΔΔⵠ.set(ⵠ[266], "1");
					ΔᐃᐃⲆ.options.ᐃⲆⵠⵠⲆⲆⵠ.display = ⵠ[442]
				} else {
					ᐃΔΔⵠ.set(ⵠ[266], "0");
					ΔᐃᐃⲆ.options.ᐃⲆⵠⵠⲆⲆⵠ.display = ⵠ[181]
				}
				ΔᐃᐃⲆ.ⲆⲆⵠⲆᐃ.ᐃⲆᐃⲆⲆ = (ΔᐃᐃⲆ.ⲆⲆⵠⲆᐃ.ᐃⲆᐃⲆⲆ + 1) % ΔΔⲆⲆ
			},
			"ΔⵠΔΔ": function(ⵠΔΔᐃⲆΔΔ, ⵠⲆᐃΔ, ᐃⵠⲆᐃ) {
				if (ⵠΔΔᐃⲆΔΔ && this.ᐃⲆᐃⲆⲆ) {
					this.display = ⲆΔΔΔ;
					if (ᐃⵠⲆᐃ === ⵠᐃⲆⲆ) this.id = ⵠⲆᐃΔ.id;
					else this.id = ᐃⵠⲆᐃⲆ[ⵠⲆᐃΔ.id].ᐃΔΔᐃ;
					this.x = ⵠⲆᐃΔ.info.translate.x + 80;
					this.y = ⵠⲆᐃΔ.info.translate.y;
					this.ᐃⵠⲆᐃ = ᐃⵠⲆᐃ
				}
				return ⵠΔΔᐃⲆΔΔ
			}
		};
		ⵠΔᐃ === this.ⲆⲆⵠⲆᐃ.ᐃⲆᐃⲆⲆ ? this.options.ᐃⲆⵠⵠⲆⲆⵠ.display = ⵠ[442] : this.options.ᐃⲆⵠⵠⲆⲆⵠ.display = ⵠ[181];
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("info_case_agree_opt")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ⲆⲆⵠⲆᐃ.ⵠⲆⲆⲆΔ, false);
		if (ᐃΔΔⵠ.get("starve_scale")) {
			ΔⵠⵠⲆΔΔΔ = Number(ᐃΔΔⵠ.get("starve_scale"));
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[535]).value = ΔⵠⵠⲆΔΔΔ;
			ΔⵠⵠⲆΔΔΔ *= devicePixelRatio / ⵠⵠⲆⲆᐃΔΔ;
			ⲆᐃᐃⵠⵠᐃΔ()
		}
		this.ᐃⲆᐃΔΔΔⲆ = function() {
			ᐃΔΔⵠ.set("starve_scale", "" + document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[535]).value);
			ΔⵠⵠⲆΔΔΔ = devicePixelRatio / ⵠⵠⲆⲆᐃΔΔ * document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[535]).value;
			ⲆᐃᐃⵠⵠᐃΔ()
		};
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[535])[ⲆᐃⲆⵠΔΔⲆ[42]]("input", this.ᐃⲆᐃΔΔΔⲆ, false);
		this.ΔΔⵠⲆ = {
			open: ΔⲆΔⵠΔ,
			"ᐃⲆᐃⲆⲆ": ᐃΔΔⵠ.get(ⵠ[94]) ? ᐃΔΔⵠ.get(ⵠ[94]) === "0" ? ⵠⵠⵠΔ : ⵠᐃⵠΔ : 1,
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]]("sure_delete"),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("sure_delete").style,
			"ΔΔⲆⵠᐃ": document[ⲆᐃⲆⵠΔΔⲆ[185]]("agree").style,
			button: 0,
			"Ⲇᐃ": 0,
			"ⲆⵠᐃΔⲆ": function() {
				ΔᐃᐃⲆ.ΔΔⵠⲆ.style.display = ⵠ[181];
				ΔᐃᐃⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] = false
			},
			all: function() {
				if (!ᐃⲆⵠ.ⵠⲆᐃⲆΔ.wait) {
					if (ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < Ⲇᐃⵠ && ᐃⲆⵠ.ᐃⵠⲆᐃ.id < 0 ) ᐃΔᐃⵠ.ᐃᐃᐃⲆⲆⲆΔᐃΔ(ΔᐃᐃⲆ.ΔΔⵠⲆ.button);
					ΔᐃᐃⲆ.ΔΔⵠⲆ.ⲆⵠᐃΔⲆ()
				}
			},
			"ᐃⲆΔⵠ": function() {
				if (ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆΔⵠΔⲆ && !ᐃⲆⵠ.ⵠⲆᐃⲆΔ.wait) {
					if (ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && ᐃⲆⵠ.ᐃⵠⲆᐃ.id < 0) ᐃΔᐃⵠ.ᐃΔⵠⲆⵠⲆⵠΔⲆ(ΔᐃᐃⲆ.ΔΔⵠⲆ.button);
					ΔᐃᐃⲆ.ΔΔⵠⲆ.ⲆⵠᐃΔⲆ()
				}
			},
			"ⲆᐃᐃⲆᐃⲆΔᐃⲆ": function() {
				if (!ᐃⲆⵠ.ⵠⲆᐃⲆΔ.wait) {
					if (ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < ⵠⲆⵠⵠ && ᐃⲆⵠ.ᐃⵠⲆᐃ.id < 0) ᐃΔᐃⵠ.ⲆⵠⲆᐃΔⵠⲆⵠⲆ(ΔᐃᐃⲆ.ΔΔⵠⲆ.button);
					ΔᐃᐃⲆ.ΔΔⵠⲆ.ⲆⵠᐃΔⲆ()
				}
			},
			"ⵠⲆⲆⲆΔ": function() {
				if (!ΔᐃᐃⲆ.ΔΔⵠⲆ.ᐃⲆᐃⲆⲆ) {
					ᐃΔΔⵠ.set(ⵠ[94], "1");
					ΔᐃᐃⲆ.ΔΔⵠⲆ.ΔΔⲆⵠᐃ.display = ⵠ[181];
					ΔᐃᐃⲆ.options.ΔΔⲆⵠᐃ.display = ⵠ[442]
				} else {
					ᐃΔΔⵠ.set(ⵠ[94], "0");
					ΔᐃᐃⲆ.ΔΔⵠⲆ.ΔΔⲆⵠᐃ.display = ⵠ[442];
					ΔᐃᐃⲆ.options.ΔΔⲆⵠᐃ.display = ⵠ[181]
				}
				ΔᐃᐃⲆ.ΔΔⵠⲆ.ᐃⲆᐃⲆⲆ = !ΔᐃᐃⲆ.ΔΔⵠⲆ.ᐃⲆᐃⲆⲆ
			},
			"ⲆⵠΔⵠΔᐃⲆ": function(ⵠⲆᐃΔ) {
				this.button = ⵠⲆᐃΔ;
				document[ⲆᐃⲆⵠΔΔⲆ[185]]("item_to_del").src = ᐃΔ[Ⲇⵠᐃᐃ[ⵠⲆᐃΔ].ᐃᐃ][0].ⵠⵠⵠΔᐃ === undefined ? ᐃΔ[Ⲇⵠᐃᐃ[ⵠⲆᐃΔ].ᐃᐃ][ⵠⵠⵠΔ].src : ᐃΔ[Ⲇⵠᐃᐃ[ⵠⲆᐃΔ].ᐃᐃ][0].ⵠⵠⵠΔᐃ;
				if (Ⲇⵠᐃᐃ[ⵠⲆᐃΔ].ᐃⲆΔⵠ && !ᐃⲆⵠ.ΔΔΔⵠⵠ && ᐃⲆⵠ.ᐃⵠⲆᐃ.ⲆΔⵠΔⲆ) document[ⲆᐃⲆⵠΔΔⲆ[185]]("recycle_delete").style.display = ⵠ[442];
				else document[ⲆᐃⲆⵠΔΔⲆ[185]]("recycle_delete").style.display = ⵠ[181];
				if (!this.ᐃⲆᐃⲆⲆ) this.all();
				else {
					this.style.display = ⵠ[442];
					this[ⲆᐃⲆⵠΔΔⲆ[36]] = ⲆⵠΔᐃⵠ
				}
			},
			"ⲆᐃⲆ": function() {
				this.style.left = Math.floor(ΔⵠⵠΔ - 235) + ⵠ[407];
				this.style.top = Math.floor(ᐃⲆΔⲆ - 175) + ⵠ[407]
			}
		};
		this.ΔΔⵠⲆ.ΔΔⲆⵠᐃ.display = ⵠ[181];
		this.ΔΔⵠⲆ.ᐃⲆᐃⲆⲆ ? this.options.ΔΔⲆⵠᐃ.display = ⵠ[442] : this.options.ΔΔⲆⵠᐃ.display = ⵠ[181];
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("one_delete")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ΔΔⵠⲆ.ⲆᐃᐃⲆᐃⲆΔᐃⲆ, false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("yes_delete")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ΔΔⵠⲆ.all, false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("recycle_delete")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ΔΔⵠⲆ.ᐃⲆΔⵠ, false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("no_delete")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ΔΔⵠⲆ.ⲆⵠᐃΔⲆ, false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("case_agree")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ΔΔⵠⲆ.ⵠⲆⲆⲆΔ, ⲆΔⲆᐃΔ);
		this.ΔⵠⲆᐃⵠ = {
			open: false,
			"ⵠⲆᐃΔᐃ": -1,
			button: ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔⵠᐃᐃΔΔ]),
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[49]),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[49]).style,
			"ⲆᐃⲆ": function() {
				this.style.left = Math.floor(ΔⵠⵠΔ - 300) + ⵠ[407];
				this.style.top = Math.floor(ᐃⲆΔⲆ - 215) + ⵠ[407]
			},
			"ⲆⵠᐃΔⲆ": function() {
				ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] = ΔⲆΔᐃᐃ;
				ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ.style.display = ⵠ[181]
			},
			select: function() {
				ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] = !ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ[ⲆᐃⲆⵠΔΔⲆ[36]];
				if (!ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ[ⲆᐃⲆⵠΔΔⲆ[36]]) ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ.style.display = ⵠ[181];
				else ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ.style.display = ⵠ[442]
			},
			"ⲆⲆᐃᐃⲆⵠⲆ": function() {
				if (ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ.ⵠⲆᐃΔᐃ >= 0) {
					ᐃΔᐃⵠ.ⲆⵠⵠⲆⵠⲆΔᐃᐃ(ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ.ⵠⲆᐃΔᐃ);
					ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ.ⲆⵠᐃΔⲆ();
					if (ga) ga(ⵠ[554], ⵠ[106], ⵠ[117], ⵠ[33], "" + ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ.ⵠⲆᐃΔᐃ)
				}
			},
			"ⵠΔⲆΔⲆ": function() {
				var ⵠⵠᐃⵠⵠ = ᐃⲆⵠ.ΔⵠⲆᐃⵠ.value;
				document[ⲆᐃⲆⵠΔΔⲆ[185]]("points_bank")[ⲆᐃⲆⵠΔΔⲆ[112]] = ΔⵠΔⵠ.ⵠⵠᐃᐃᐃⲆΔ(ⵠⵠᐃⵠⵠ) + " points";
				for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠⲆⲆΔΔΔⵠ.length; Ⲇᐃ++) {
					if (ⵠⲆⲆΔΔΔⵠ[Ⲇᐃ].ⵠⵠᐃⵠⵠ > ⵠⵠᐃⵠⵠ) document[ⲆᐃⲆⵠΔΔⲆ[185]]("starter" + (Ⲇᐃ + ΔΔⵠΔ)).style[ⵠ[171]] = "0.4";
					else document[ⲆᐃⲆⵠΔΔⲆ[185]]("starter" + (Ⲇᐃ + ⲆᐃΔ)).style[ⵠ[171]] = "1"
				}
				for (Ⲇᐃ = 1; Ⲇᐃ < ⵠⲆΔⲆⵠⲆΔ; Ⲇᐃ++) {
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[417] + Ⲇᐃ).src = "./img/empty-shop.png";
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("amount_shop" + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[112]] = ""
				}
				document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[549]).style[ⵠ[171]] = "0.2"
			},
			"ⲆᐃⵠⲆᐃᐃᐃⲆᐃ": function() {
				if (this.id.length > ⵠᐃΔᐃΔ) var ⲆΔ = Number(this.id.charAt(ᐃⲆᐃΔΔ) + this.id.charAt(8));
				else var ⲆΔ = Number(this.id.charAt(7));
				var ⵠᐃᐃⵠ = ⵠⲆⲆΔΔΔⵠ[ⲆΔ - 1];
				if (ᐃⲆⵠ.ΔⵠⲆᐃⵠ.value >= ⵠᐃᐃⵠ.ⵠⵠᐃⵠⵠ) {
					ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ.ⵠⲆᐃΔᐃ = ⲆΔ;
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[549]).style[ⵠ[171]] = "1"
				} else {
					ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ.ⵠⲆᐃΔᐃ = -ᐃⲆΔ;
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[549]).style[ⵠ[171]] = "0.2"
				}
				ⵠᐃᐃⵠ = ⵠᐃᐃⵠ.items;
				for (var Ⲇᐃ = 1, ⲆⲆᐃⲆ = Δⵠᐃ; Ⲇᐃ < ⵠᐃᐃⵠ.length + 1; Ⲇᐃ++) {
					if (ⵠᐃᐃⵠ[Ⲇᐃ - ⵠᐃⵠΔ][1] === ⵠⵠ.ⵠᐃⵠⲆ) continue;
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[417] + ⲆⲆᐃⲆ).style.display = ⵠ[442];
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[417] + ⲆⲆᐃⲆ).src = ᐃΔ[Ⲇⵠᐃᐃ[ⵠᐃᐃⵠ[Ⲇᐃ - ΔΔⵠΔ][1]].ᐃᐃ][0].ⵠⵠⵠΔᐃ === ⵠⲆⲆⲆⲆ ? ᐃΔ[Ⲇⵠᐃᐃ[ⵠᐃᐃⵠ[Ⲇᐃ - 1][ΔᐃⵠⲆ]].ᐃᐃ][0].src : ᐃΔ[Ⲇⵠᐃᐃ[ⵠᐃᐃⵠ[Ⲇᐃ - Δᐃⵠⵠ][1]].ᐃᐃ][0].ⵠⵠⵠΔᐃ;
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("amount_shop" + ⲆⲆᐃⲆ)[ⲆᐃⲆⵠΔΔⲆ[112]] = "" + ⵠᐃᐃⵠ[Ⲇᐃ - 1][0];
					ⲆⲆᐃⲆ++
				}
				for (; ⲆⲆᐃⲆ < ⵠΔⵠᐃⵠⵠⵠⵠΔ; ⲆⲆᐃⲆ++) {
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[417] + ⲆⲆᐃⲆ).src = "./img/empty-shop.png";
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("amount_shop" + ⲆⲆᐃⲆ)[ⲆᐃⲆⵠΔΔⲆ[112]] = ""
				}
			}
		};
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("quit3")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ΔⵠⲆᐃⵠ.ⲆⵠᐃΔⲆ, ᐃⵠⲆⲆᐃ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[549])[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ΔⵠⲆᐃⵠ.ⲆⲆᐃᐃⲆⵠⲆ, false);
		for (var Ⲇᐃ = 1; Ⲇᐃ < ⵠΔᐃᐃⲆΔⲆ; Ⲇᐃ++) document[ⲆᐃⲆⵠΔΔⲆ[185]]("starter" + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ΔⵠⲆᐃⵠ.ⲆᐃⵠⲆᐃᐃᐃⲆᐃ, false);
		this.ᐃⲆⲆⲆ = {
			open: ⵠΔⵠⵠⵠ,
			"ᐃⲆᐃⲆⲆ": ᐃΔΔⵠ.get(ⵠ[220]) ? ᐃΔΔⵠ.get(ⵠ[220]) === "1" ? ⵠⲆⲆ : ᐃⵠⵠⲆ : ᐃᐃⲆ,
			button: ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⲆᐃⲆᐃᐃ]),
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]]("chronoquest"),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("chronoquest").style,
			"ⲆᐃⲆ": function() {
				this.style.left = Math.floor(ΔⵠⵠΔ - 420) + ⵠ[407];
				this.style.top = Math.floor(ᐃⲆΔⲆ - 270) + ⵠ[407]
			},
			"ⲆⵠᐃΔⲆ": function() {
				ΔᐃᐃⲆ.ᐃⲆⲆⲆ.style.display = ⵠ[181];
				ΔᐃᐃⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] = false
			},
			select: function() {
				ΔᐃᐃⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] = !ΔᐃᐃⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]];
				if (!ΔᐃᐃⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) ΔᐃᐃⲆ.ᐃⲆⲆⲆ.style.display = ⵠ[181];
				else ΔᐃᐃⲆ.ᐃⲆⲆⲆ.style.display = ⵠ[442]
			},
			list: [],
			reset: function() {
				for (var Ⲇᐃ = 0; Ⲇᐃ < ⲆⲆⲆⲆΔⲆᐃ.length; Ⲇᐃ++) {
					this.list[Ⲇᐃ] = 1;
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[503] + Ⲇᐃ).style.display = ⵠ[442];
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[547] + Ⲇᐃ).style.display = ⵠ[181];
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[320] + Ⲇᐃ).style.display = ⵠ[181]
				}
			},
			"ⲆⲆⵠᐃⵠⵠᐃ": ᐃᐃᐃ,
			"ⲆⲆⵠⲆⲆⲆⵠ": Ⲇᐃⵠ,
			"ΔⵠᐃΔⵠᐃⵠⵠΔ": function() {
				if (!ΔᐃᐃⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) return;
				var ᐃΔⵠⲆⲆ = (new Date).getTime();
				if (ᐃΔⵠⲆⲆ - this.ⲆⲆⵠᐃⵠⵠᐃ < 1e3) return;
				this.ⲆⲆⵠᐃⵠⵠᐃ = ᐃΔⵠⲆⲆ;
				for (var Ⲇᐃ = Ⲇᐃⵠ; Ⲇᐃ < ⲆⲆⲆⲆΔⲆᐃ.length; Ⲇᐃ++) {
					if (!ΔᐃᐃⲆ.ᐃⲆⲆⲆ.list[Ⲇᐃ]) continue;
					var Δᐃᐃ = ⲆⲆⲆⲆΔⲆᐃ[Ⲇᐃ].time - (ᐃΔⵠⲆⲆ - ⲆⵠΔ.ⵠΔⵠΔⲆ.ⵠΔⲆΔⲆ + ΔᐃᐃⲆ.ᐃⲆⲆⲆ.ⲆⲆⵠⲆⲆⲆⵠ);
					if (Δᐃᐃ > 96e4) {
						document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[503] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[112]] = Math.floor(Δᐃᐃ / 48e4) + " days"
					} else if (Δᐃᐃ > 48e4) {
						document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[503] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[112]] = Math.floor(Δᐃᐃ / 48e4) + " day"
					} else if (Δᐃᐃ > 6e4) {
						document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[503] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[112]] = Math.floor(Δᐃᐃ / 6e4) + " min"
					} else document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[503] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[112]] = Math.floor(Δᐃᐃ / 1e3) + " sec"
				}
			},
			restore: function(ᐃᐃⲆᐃ) {
				for (var Ⲇᐃ = ΔⲆⲆ; Ⲇᐃ < ᐃᐃⲆᐃ.length; Ⲇᐃ++) {
					if (ᐃᐃⲆᐃ[Ⲇᐃ] != 1) ΔᐃᐃⲆ.ᐃⲆⲆⲆ.ΔⵠΔⲆⵠᐃⲆ(Ⲇᐃ, ᐃᐃⲆᐃ[Ⲇᐃ])
				}
			},
			"ΔⵠΔⲆⵠᐃⲆ": function(ⲆΔ, ⲆΔⲆᐃ) {
				if (ⲆΔⲆᐃ === ᐃⵠΔᐃ && (ⲆΔ === 11 || ⲆΔ === 12)) {
					ᐃⲆⵠ.ᐃΔΔⲆ.ⵠⲆⵠΔⲆⵠᐃ(0, 1);
					ΔᐃᐃⲆ.ᐃⲆΔⵠΔᐃⵠ()
				}
				document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[503] + ⲆΔ)[ⲆᐃⲆⵠΔΔⲆ[112]] = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
				if (ⲆΔⲆᐃ > 1) {
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[547] + ⲆΔ)[ⲆᐃⲆⵠΔΔⲆ[112]] = "SUCCEED";
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[503] + ⲆΔ).style.display = ⵠ[181]
				} else if (ⲆΔⲆᐃ === ⵠΔᐃᐃ) {
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[547] + ⲆΔ)[ⲆᐃⲆⵠΔΔⲆ[112]] = "FAILED";
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[503] + ⲆΔ).style.display = ⵠ[181]
				}
				if (ⲆΔⲆᐃ === 2) document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[320] + ⲆΔ).style.display = ⵠ[442];
				else document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[320] + ⲆΔ).style.display = ⵠ[181];
				document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[547] + ⲆΔ).style.display = "inline";
				ΔᐃᐃⲆ.ᐃⲆⲆⲆ.list[ⲆΔ] = 0
			},
			modify: function(ⲆΔ, ⲆΔⲆᐃ) {
				ΔᐃᐃⲆ.ᐃⲆⲆⲆ.ΔⵠΔⲆⵠᐃⲆ(ⲆΔ, ⲆΔⲆᐃ);
				if (ΔᐃᐃⲆ.ᐃⲆⲆⲆ.ᐃⲆᐃⲆⲆ) {
					ΔᐃᐃⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] = true;
					ΔᐃᐃⲆ.ᐃⲆⲆⲆ.style.display = ⵠ[442]
				}
			},
			"ⵠⲆⲆⲆΔ": function() {
				if (!ΔᐃᐃⲆ.ᐃⲆⲆⲆ.ᐃⲆᐃⲆⲆ) {
					ᐃΔΔⵠ.set(ⵠ[220], "1");
					ΔᐃᐃⲆ.options.ΔᐃⵠΔᐃΔᐃ.display = ⵠ[442]
				} else {
					ᐃΔΔⵠ.set(ⵠ[220], "0");
					ΔᐃᐃⲆ.options.ΔᐃⵠΔᐃΔᐃ.display = ⵠ[181]
				}
				ΔᐃᐃⲆ.ᐃⲆⲆⲆ.ᐃⲆᐃⲆⲆ = !ΔᐃᐃⲆ.ᐃⲆⲆⲆ.ᐃⲆᐃⲆⲆ
			},
			"ⵠⵠⵠⵠⲆΔⲆⲆᐃ": function() {
				var ⵠᐃΔⵠ = Number(this.id.charAt(13));
				var ⵠⲆⲆⲆ = Number(this.id.charAt(14));
				if (this.id.charAt(14) !== "" && ⵠⲆⲆⲆ >= ΔΔᐃᐃ && ⵠⲆⲆⲆ <= 9) ⵠᐃΔⵠ = ⵠᐃΔⵠ * ΔΔΔᐃⲆ + ⵠⲆⲆⲆ;
				ᐃΔᐃⵠ.ᐃⲆΔⲆⵠⲆⲆⵠⲆ(ⵠᐃΔⵠ)
			}
		};
		this.ᐃⲆⲆⲆ.ᐃⲆᐃⲆⲆ ? this.options.ΔᐃⵠΔᐃΔᐃ.display = ⵠ[442] : this.options.ΔᐃⵠΔᐃΔᐃ.display = ⵠ[181];
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[93])[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ᐃⲆⲆⲆ.ⲆⵠᐃΔⲆ, ΔⲆΔᐃΔ);
		for (var Ⲇᐃ = 0; ⲆⲆⲆⲆΔⲆᐃ.length > Ⲇᐃ; Ⲇᐃ++) document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[320] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ᐃⲆⲆⲆ.ⵠⵠⵠⵠⲆΔⲆⲆᐃ, ᐃⵠⲆⲆᐃ);
		this.ΔⲆΔΔ = {
			open: false,
			button: ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⵠΔΔⵠᐃ]),
			list: {
				id: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[288]),
				style: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[288]).style,
				"ΔⲆᐃᐃΔⵠΔ": [],
				"ⲆⵠᐃΔΔⲆⵠ": 0,
				"ⲆᐃⲆ": function() {
					this.style.left = Math.floor(ΔⵠⵠΔ - 335) + ⵠ[407];
					this.style.top = Math.floor(ᐃⲆΔⲆ - 215) + ⵠ[407]
				},
				"ⲆⵠᐃΔⲆ": function() {
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[288]).style.display = ⵠ[181];
					ΔᐃᐃⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] = ΔⵠΔⵠⵠ
				},
				"ⵠᐃΔᐃⲆᐃⵠ": function() {
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[288]).style.display = ⵠ[181];
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[233]).style.display = ⵠ[442]
				},
				"ⵠᐃΔᐃ": function(Ⲇᐃ) {
					var ΔⲆΔ = this.ΔⲆᐃᐃΔⵠΔ[Ⲇᐃ];
					if (ΔⲆΔ.Ⲇⵠⵠ) document[ⲆᐃⲆⵠΔΔⲆ[185]]("watercraft").style.display = ⵠ[442];
					else document[ⲆᐃⲆⵠΔΔⲆ[185]]("watercraft").style.display = ⵠ[181];
					if (ΔⲆΔ.f) document[ⲆᐃⲆⵠΔΔⲆ[185]]("firecraft").style.display = ⵠ[442];
					else document[ⲆᐃⲆⵠΔΔⲆ[185]]("firecraft").style.display = ⵠ[181];
					if (ΔⲆΔ.w) document[ⲆᐃⲆⵠΔΔⲆ[185]]("workcraft").style.display = ⵠ[442];
					else document[ⲆᐃⲆⵠΔΔⲆ[185]]("workcraft").style.display = ⵠ[181];
					if (ΔⲆΔ.e) document[ⲆᐃⲆⵠΔΔⲆ[185]]("wellcraft").style.display = ⵠ[442];
					else document[ⲆᐃⲆⵠΔΔⲆ[185]]("wellcraft").style.display = ⵠ[181];
					var ΔⲆΔ = ΔⲆΔ.r;
					for (var Ⲇᐃ = 0, ⲆⲆᐃⲆ = 1; Ⲇᐃ < ΔⲆΔ.length; Ⲇᐃ++) {
						document[ⲆᐃⲆⵠΔΔⲆ[185]]("inv" + ⲆⲆᐃⲆ).style.display = ⵠ[442];
						document[ⲆᐃⲆⵠΔΔⲆ[185]]("inv" + ⲆⲆᐃⲆ).src = ᐃΔ[Ⲇⵠᐃᐃ[ΔⲆΔ[Ⲇᐃ][0]].ᐃᐃ][0].ⵠⵠⵠΔᐃ === ⵠⲆⵠᐃⲆ ? ᐃΔ[Ⲇⵠᐃᐃ[ΔⲆΔ[Ⲇᐃ][ⵠⲆΔ]].ᐃᐃ][ΔⲆⲆ].src : ᐃΔ[Ⲇⵠᐃᐃ[ΔⲆΔ[Ⲇᐃ][0]].ᐃᐃ][ΔΔᐃᐃ].ⵠⵠⵠΔᐃ;
						document[ⲆᐃⲆⵠΔΔⲆ[185]]("numb" + ⲆⲆᐃⲆ)[ⲆᐃⲆⵠΔΔⲆ[112]] = "" + ΔⲆΔ[Ⲇᐃ][1];
						ⲆⲆᐃⲆ++
					}
					for (; ⲆⲆᐃⲆ < 6; ⲆⲆᐃⲆ++) {
						document[ⲆᐃⲆⵠΔΔⲆ[185]]("inv" + ⲆⲆᐃⲆ).style.display = ⵠ[181];
						document[ⲆᐃⲆⵠΔΔⲆ[185]]("numb" + ⲆⲆᐃⲆ)[ⲆᐃⲆⵠΔΔⲆ[112]] = ""
					}
				},
				select: function(ⲆⵠᐃΔΔⲆⵠ) {
					this.ⲆⵠᐃΔΔⲆⵠ = ⲆⵠᐃΔΔⲆⵠ;
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[233]).style.display = ⵠ[181];
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("workcraft").style.display = ⵠ[181];
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("firecraft").style.display = ⵠ[181];
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("watercraft").style.display = ⵠ[181];
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("wellcraft").style.display = ⵠ[181];
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[288]).style.display = ⵠ[442];
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("inv1").style.display = ⵠ[181];
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("inv2").style.display = ⵠ[181];
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("inv3").style.display = ⵠ[181];
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("inv4").style.display = ⵠ[181];
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("inv5").style.display = ⵠ[181];
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("numb1")[ⲆᐃⲆⵠΔΔⲆ[112]] = "";
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("numb2")[ⲆᐃⲆⵠΔΔⲆ[112]] = "";
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("numb3")[ⲆᐃⲆⵠΔΔⲆ[112]] = "";
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("numb4")[ⲆᐃⲆⵠΔΔⲆ[112]] = "";
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("numb5")[ⲆᐃⲆⵠΔΔⲆ[112]] = "";
					for (var Ⲇᐃ = 0, ⲆⲆᐃⲆ = ⵠᐃⲆ; Ⲇᐃ < ᐃⵠⲆᐃⲆ.length; Ⲇᐃ++) {
						var ΔⲆΔ = ᐃⵠⲆᐃⲆ[Ⲇᐃ];
						if (ⲆⵠᐃΔΔⲆⵠ === ΔⲆΔ.Δᐃᐃ) {
							this.ΔⲆᐃᐃΔⵠΔ[ⲆⲆᐃⲆ] = ΔⲆΔ;
							ⲆⲆᐃⲆ++;
							document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_" + ⲆⲆᐃⲆ).style.display = ⵠ[442];
							document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_" + ⲆⲆᐃⲆ).src = ᐃΔ[Ⲇⵠᐃᐃ[ΔⲆΔ.ᐃΔΔᐃ].ᐃᐃ][ⵠΔᐃⵠ].ⵠⵠⵠΔᐃ === undefined ? ᐃΔ[Ⲇⵠᐃᐃ[ΔⲆΔ.ᐃΔΔᐃ].ᐃᐃ][0].src : ᐃΔ[Ⲇⵠᐃᐃ[ΔⲆΔ.ᐃΔΔᐃ].ᐃᐃ][0].ⵠⵠⵠΔᐃ
						}
					}
					for (ⲆⲆᐃⲆ++; ⲆⲆᐃⲆ < 49; ⲆⲆᐃⲆ++) document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_" + ⲆⲆᐃⲆ).style.display = ⵠ[181]
				}
			},
			"ⲆⲆⲆΔᐃᐃⲆ": {
				id: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[233]),
				style: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[233]).style,
				"ⲆᐃⲆ": function() {
					this.style.left = Math.floor(ΔⵠⵠΔ - 285) + ⵠ[407];
					this.style.top = Math.floor(ᐃⲆΔⲆ - 170) + ⵠ[407]
				},
				"ⲆⵠᐃΔⲆ": function() {
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[233]).style.display = ⵠ[181];
					ΔᐃᐃⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] = false
				}
			},
			"ⲆΔΔᐃᐃⵠΔⵠᐃ": function() {
				this[ⲆᐃⲆⵠΔΔⲆ[36]] = !this[ⲆᐃⲆⵠΔΔⲆ[36]];
				if (!this[ⲆᐃⲆⵠΔΔⲆ[36]]) {
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[233]).style.display = ⵠ[181];
					document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[288]).style.display = ⵠ[181]
				} else document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[233]).style.display = ⵠ[442]
			}
		};
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("quit")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ΔⲆΔΔ.ⲆⲆⲆΔᐃᐃⲆ.ⲆⵠᐃΔⲆ, false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("quitmenu")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ΔⲆΔΔ.list.ⲆⵠᐃΔⲆ, false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("backhome")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ΔⲆΔΔ.list.ⵠᐃΔᐃⲆᐃⵠ, false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("hatcategory")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.select(Ⲇᐃⵠⵠ.ⲆᐃᐃᐃⲆ)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("weaponcategory")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.select(Ⲇᐃⵠⵠ.ⵠⵠⲆᐃⵠ)
		}), ΔⲆΔⵠΔ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("toolcategory")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.select(Ⲇᐃⵠⵠ.ΔΔᐃΔᐃ)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("foodcategory")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.select(Ⲇᐃⵠⵠ.ᐃᐃΔⵠᐃ)
		}), ᐃⲆⲆᐃᐃ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("placeablecategory")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.select(Ⲇᐃⵠⵠ.ΔⲆⲆⵠⲆ)
		}), ΔⲆΔᐃΔ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("constructioncategory")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.select(Ⲇᐃⵠⵠ.ΔΔΔⲆⲆ)
		}), ΔⵠⵠᐃΔ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_1")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(0)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_2")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(ΔⵠΔ)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_3")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(ⲆⵠΔⵠ)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_4")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(ΔⲆΔⲆ)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_5")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(4)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_6")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(5)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_7")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(6)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_8")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(ᐃⲆⲆᐃΔⲆⵠ)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_9")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(8)
		}), ᐃⲆⵠⵠⲆ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_10")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(ΔⲆⲆΔⲆ)
		}), ᐃⲆⲆΔⵠ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_11")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(10)
		}), ΔΔᐃⵠᐃ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_12")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(ⵠⲆᐃΔⵠⵠⲆ)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_13")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(ΔⲆⵠΔᐃ)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_14")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(13)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_15")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(ⲆᐃⵠΔᐃ)
		}), ΔⵠΔⲆⵠ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_16")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(15)
		}), ⲆᐃᐃΔΔ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_17")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(16)
		}), ⲆᐃᐃΔΔ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_18")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(ⵠΔΔΔΔ)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_19")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(18)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_20")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(19)
		}), ᐃΔⵠᐃⲆ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_21")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(ⵠⵠᐃΔᐃ)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_22")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(21)
		}), ⵠᐃⵠⲆⲆ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_23")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(22)
		}), ΔⲆΔⵠΔ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_24")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(23)
		}), Ⲇⵠᐃᐃᐃ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_25")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(24)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_26")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(25)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_27")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(26)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_28")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(27)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_29")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(28)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_30")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(29)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_31")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(30)
		}), ΔⵠⵠᐃΔ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_32")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(31)
		}), ΔⵠΔⵠⵠ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_33")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(32)
		}), ⵠᐃⵠⲆⲆ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_34")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(33)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_35")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(34)
		}), ᐃⲆⵠⵠⲆ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_36")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(35)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_37")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(36)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_38")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(37)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_39")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(38)
		}), ⲆΔⲆᐃΔ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_40")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(39)
		}), ᐃΔⵠᐃⲆ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_41")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(40)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_42")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(41)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_43")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(42)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_44")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(43)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_45")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(44)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_46")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(45)
		}), false);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_47")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(46)
		}), ΔⲆΔᐃΔ);
		document[ⲆᐃⲆⵠΔΔⲆ[185]]("img_48")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], (function() {
			ΔᐃᐃⲆ.ΔⲆΔΔ.list.ⵠᐃΔᐃ(47)
		}), ΔⲆΔᐃᐃ);
		this.Δⵠⵠⵠⵠ = {
			translate: {
				x: ⵠΔᐃᐃ,
				y: ΔΔᐃᐃ
			},
			"ⲆⵠⲆⵠΔ": {
				x: -ΔΔΔᐃ,
				y: -1
			},
			"ⵠΔᐃΔ": [],
			focus: function(ⵠΔΔΔ) {
				var ᐃⵠⲆ = this.translate.y + (ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length > 0 ? -120 : -50);
				if (ⵠΔΔΔ.x > this.translate.x && ⵠΔΔΔ.x < this.translate.x + 193 && ⵠΔΔΔ.y > ᐃⵠⲆ && ⵠΔΔΔ.y < ᐃⵠⲆ + 193) {
					this.ⲆⵠⲆⵠΔ.x = ⵠΔΔΔ.x - this.translate.x;
					this.ⲆⵠⲆⵠΔ.y = ⵠΔΔΔ.y - ᐃⵠⲆ
				}
			}
		};
		this.ⵠΔᐃⲆ = {
			translate: {
				y: ΔΔᐃ,
				x: 0
			},
			"ᐃᐃ": ᐃΔ[Δ.ΔⲆⲆᐃⲆΔⲆ],
			"ΔⲆ": document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316])
		};
		this.ⵠΔᐃⲆ.ΔⲆ.width = this.ⵠΔᐃⲆ.ᐃᐃ.width;
		this.ⵠΔᐃⲆ.ΔⲆ.height = this.ⵠΔᐃⲆ.ᐃᐃ.height;
		this.ⵠΔᐃⲆ.Ⲇ = this.ⵠΔᐃⲆ.ΔⲆ.getContext(ⵠ[444]);
		this.ⲆᐃⵠⲆ = {
			translate: {
				x: 0,
				y: 0
			},
			"ᐃᐃ": ᐃΔ[Δ.ΔⲆᐃᐃⵠⲆᐃ],
			"ⵠᐃᐃⲆ": ᐃⲆᐃᐃᐃᐃᐃᐃᐃ,
			y: ⵠⵠⵠ
		};
		var ΔⲆΔᐃⲆ = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[86]][ⲆᐃⲆⵠΔΔⲆ[169]]("div");
		this.ⵠΔⵠⵠⵠᐃᐃ = function() {
			ᐃᐃΔΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[173]);
			ᐃᐃΔΔⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] = "";
			ᐃᐃΔΔⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + ((ΔⲆΔᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[268]] = ⲆⵠΔ.ⵠΔᐃΔ[ᐃⲆⵠ.ᐃΔⵠⵠᐃ[0]].ⲆⲆΔⵠⵠ) && ΔⲆΔᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[112]]) + "</div";
			for (var Ⲇᐃ = 1; Ⲇᐃ < ᐃⲆⵠ.ᐃΔⵠⵠᐃ.length; Ⲇᐃ++) {
				ᐃᐃΔΔⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + ((ΔⲆΔᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[268]] = ⲆⵠΔ.ⵠΔᐃΔ[ᐃⲆⵠ.ᐃΔⵠⵠᐃ[Ⲇᐃ]].ⲆⲆΔⵠⵠ) && ΔⲆΔᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[112]]) + "</div></div>"
			}
			ᐃᐃΔΔⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] += '<div id="leave" style="display:inline-block;">LEAVE</div></div>';
			ᐃᐃΔΔⲆ.style.display = ⵠ[442];
			document[ⲆᐃⲆⵠΔΔⲆ[185]]("leave")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[41], ᐃΔᐃⵠ.ⵠΔⵠⵠⵠᐃᐃ, false)
		};
		this.ᐃΔᐃᐃΔⵠⲆᐃΔ = function() {
			ᐃᐃΔΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[173]);
			ᐃᐃΔΔⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] = "";
			ᐃᐃΔΔⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + ((ΔⲆΔᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[268]] = ⲆⵠΔ.ⵠΔᐃΔ[ᐃⲆⵠ.ᐃΔⵠⵠᐃ[0]].ⲆⲆΔⵠⵠ) && ΔⲆΔᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[112]]) + "</div";
			for (var Ⲇᐃ = ΔⲆᐃᐃ; ᐃⲆⵠ.ᐃΔⵠⵠᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
				ᐃᐃΔΔⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + ((ΔⲆΔᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[268]] = ⲆⵠΔ.ⵠΔᐃΔ[ᐃⲆⵠ.ᐃΔⵠⵠᐃ[Ⲇᐃ]].ⲆⲆΔⵠⵠ) && ΔⲆΔᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[112]]) + "</div></div>"
			}
			ᐃᐃΔΔⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] += ⵠ[470];
			ᐃᐃΔΔⲆ.style.display = ⵠ[442]
		};
		this.ⲆⵠⲆⵠⵠΔᐃⵠⲆ = function() {
			ᐃᐃΔΔⲆ = document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[173]);
			ᐃᐃΔΔⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] = "";
			ᐃᐃΔΔⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + ((ΔⲆΔᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[268]] = ⲆⵠΔ.ⵠΔᐃΔ[ᐃⲆⵠ.ᐃΔⵠⵠᐃ[0]].ⲆⲆΔⵠⵠ) && ΔⲆΔᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[112]]) + "</div";
			for (var Ⲇᐃ = 1; ᐃⲆⵠ.ᐃΔⵠⵠᐃ.length > Ⲇᐃ; Ⲇᐃ++) ᐃᐃΔΔⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + ((ΔⲆΔᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[268]] = ⲆⵠΔ.ⵠΔᐃΔ[ᐃⲆⵠ.ᐃΔⵠⵠᐃ[Ⲇᐃ]].ⲆⲆΔⵠⵠ) && ΔⲆΔᐃⲆ[ⲆᐃⲆⵠΔΔⲆ[112]]) + '</div><div class="eject_member" id="eject_member' + Ⲇᐃ + '"><img src="./img/close-team.png" style="width:20px;padding:5px;"></img></div>';
			ᐃⲆⵠ.ⵠⲆⲆⲆⵠ.lock === ΔΔᐃᐃ ? ᐃᐃΔΔⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] += '<div id="lock_team" style="display:inline-block;">LOCK</div></div>' : ᐃᐃΔΔⲆ[ⲆᐃⲆⵠΔΔⲆ[112]] += '<div id="lock_team" style="display:inline-block;">UNLOCK</div></div>';
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[566])[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[41], ᐃΔᐃⵠ.ᐃΔⵠⲆⲆᐃⵠᐃᐃ, ⲆΔⲆᐃΔ);
			ᐃᐃΔΔⲆ.style.display = ⵠ[442];
			for (var Ⲇᐃ = 1; ᐃⲆⵠ.ᐃΔⵠⵠᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
				switch (Ⲇᐃ) {
					case 1:
						document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[146] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[41], (function() {
							ᐃΔᐃⵠ.ⵠⵠⵠⵠⲆⵠΔ(ΔᐃΔⲆ)
						}), false);
						break;
					case ᐃᐃⲆⲆ:
						document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[146] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[41], (function() {
							ᐃΔᐃⵠ.ⵠⵠⵠⵠⲆⵠΔ(2)
						}), ᐃⲆⲆΔⵠ);
						break;
					case 3:
						document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[146] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[41], (function() {
							ᐃΔᐃⵠ.ⵠⵠⵠⵠⲆⵠΔ(ᐃⲆᐃΔ)
						}), ΔⲆΔᐃΔ);
						break;
					case 4:
						document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[146] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[41], (function() {
							ᐃΔᐃⵠ.ⵠⵠⵠⵠⲆⵠΔ(4)
						}), ΔⲆΔⵠΔ);
						break;
					case 5:
						document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[146] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[41], (function() {
							ᐃΔᐃⵠ.ⵠⵠⵠⵠⲆⵠΔ(ⲆᐃⲆΔ)
						}), ᐃⲆⵠⵠⲆ);
						break;
					case ⵠⲆⲆᐃᐃ:
						document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[146] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[41], (function() {
							ᐃΔᐃⵠ.ⵠⵠⵠⵠⲆⵠΔ(ΔⲆⲆⵠⵠ)
						}), Ⲇⵠᐃᐃᐃ);
						break;
					case 7:
						document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[146] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[41], (function() {
							ᐃΔᐃⵠ.ⵠⵠⵠⵠⲆⵠΔ(ⲆΔᐃⲆᐃ)
						}), ᐃⲆⵠⵠⲆ);
						break;
					case Δⵠᐃᐃⵠ:
						document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[146] + Ⲇᐃ)[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[41], (function() {
							ᐃΔᐃⵠ.ⵠⵠⵠⵠⲆⵠΔ(8)
						}), ΔⵠΔⵠⵠ);
						break
				}
			}
		};
		this.ΔⵠⲆⵠΔ = [];
		this.ΔⵠⲆⵠΔ[ⵠⲆⲆⵠⲆ.ᐃⲆᐃⵠⵠΔᐃ] = {
			button: ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠᐃⲆⲆⵠⲆ]),
			action: this.ⵠΔⵠⵠⵠᐃᐃ
		};
		this.ΔⵠⲆⵠΔ[ⵠⲆⲆⵠⲆ.ⲆᐃⵠⵠΔⵠⵠ] = {
			button: ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠᐃⲆⲆⵠⲆ]),
			action: ᐃΔᐃⵠ.ᐃᐃᐃΔΔⵠΔΔⲆ
		};
		this.ΔⵠⲆⵠΔ[ⵠⲆⲆⵠⲆ.Ⲇᐃⵠᐃⵠᐃᐃ] = {
			button: ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃᐃⵠⲆⲆⵠ]),
			action: this.ⲆⵠⲆⵠⵠΔᐃⵠⲆ
		};
		this.ΔⵠⲆⵠΔ[ⵠⲆⲆⵠⲆ.ΔⲆΔⲆⲆᐃΔ] = {
			button: ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠᐃᐃᐃⵠΔ]),
			action: this.ᐃΔᐃᐃΔⵠⲆᐃΔ
		};
		this.ΔⵠⲆⵠΔ[ⵠⲆⲆⵠⲆ.ⲆᐃΔΔΔΔᐃ] = {
			button: ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⵠΔΔⲆᐃ]),
			action: function() {}
		};
		this.ⲆⵠⲆⲆⲆ = -1;
		this.ΔΔᐃΔᐃⵠᐃ = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⵠⲆᐃᐃΔ]);
		this.ⵠΔⵠᐃⲆᐃⲆ = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⲆᐃⵠⲆⲆ]);
		this.ᐃᐃΔⲆΔΔⵠ = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠΔⲆΔⲆⵠ]);
		this.ⲆΔⵠΔΔⵠᐃ = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠᐃᐃΔΔᐃ]);
		this.ΔᐃᐃⵠⵠⵠⲆ = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠΔⲆΔⲆⵠ]);
		this.ΔⵠⲆⵠΔᐃⵠ = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔᐃⲆΔΔⲆ]);
		this.ⲆⵠⵠΔΔⵠⲆ = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔⵠⵠᐃⲆⲆ]);
		this.ⵠᐃᐃⵠⲆⵠᐃ = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠᐃᐃᐃᐃΔ]);
		this.ⵠⲆⲆⲆΔΔΔ = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃΔᐃⲆⵠⲆ]);
		this.ⵠⵠΔΔᐃⵠⵠ = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃᐃⵠⲆⲆⵠ]);
		this.ΔΔΔΔΔⲆΔ = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⵠΔⲆⲆᐃ]);
		this.ΔⲆᐃⵠⵠⲆΔ = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠᐃⵠᐃⲆⵠ]);
		this.ⲆⵠⵠΔΔΔⵠ = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠΔΔᐃᐃΔ]);
		this.ΔΔΔⲆⵠΔΔ = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⵠⲆᐃᐃⲆ]);
		this.ΔΔⵠᐃⲆᐃⵠ = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆᐃᐃⵠᐃᐃ]);
		this.ΔΔᐃᐃΔ = ΔΔⲆ(120, 120, "", ᐃΔ[Δ.ΔⵠᐃᐃⲆ]);
		this.ΔΔᐃᐃΔ.info.translate.x = 10;
		this.ΔΔᐃᐃΔ.info.translate.y = 10;
		this.ᐃⵠΔ = [];
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔᐃᐃⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠΔⵠⵠΔⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔᐃᐃⵠ].id = ⵠⵠ.ⵠΔᐃᐃⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ΔΔΔΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠᐃⲆⲆⲆⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔΔΔΔΔ].id = ⵠⵠ.ΔΔΔΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠΔᐃⵠⵠⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠΔΔ].id = ⵠⵠ.ⵠⵠΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃⵠⲆᐃᐃⲆ], ⲆⲆᐃⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠᐃΔ].id = ⵠⵠ.ⲆⵠᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔᐃⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⲆⲆⵠΔⲆⲆ], ᐃⵠΔⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔᐃⵠⲆ].id = ⵠⵠ.ⲆΔᐃⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔΔⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆᐃⲆΔᐃᐃⲆ], Δⵠⵠᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔΔⲆᐃ].id = ⵠⵠ.ᐃΔΔⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔᐃⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⲆᐃⵠΔΔᐃ], ᐃᐃᐃΔᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔᐃⲆ].id = ⵠⵠ.ᐃΔᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃΔⲆΔᐃⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⲆᐃ].id = ⵠⵠ.ⲆᐃⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⵠΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃⲆΔⵠⲆⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⵠΔΔ].id = ⵠⵠ.ⲆⲆⵠΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⵠΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠⵠΔᐃᐃⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⵠΔΔ].id = ⵠⵠ.ⲆⵠⵠΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⲆⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔⵠᐃⵠΔᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⲆⵠⲆ].id = ⵠⵠ.ΔᐃⲆⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⲆΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆⵠᐃⲆⵠᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⲆΔⲆ].id = ⵠⵠ.ΔᐃⲆΔⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔΔⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔΔΔⵠⵠᐃΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔΔⲆⲆ].id = ⵠⵠ.ⵠΔΔⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆΔⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔⵠⲆⵠⵠᐃ], ᐃⲆᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆΔⵠⲆ].id = ⵠⵠ.ⲆⲆΔⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⵠⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔΔΔᐃⵠⲆ], ΔΔᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⵠⲆᐃ].id = ⵠⵠ.ᐃⵠⵠⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃΔΔᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔΔᐃⵠΔⵠ], Δⵠⵠᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃΔΔᐃ].id = ⵠⵠ.ⵠᐃΔΔᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠⵠⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠⵠᐃⵠᐃⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠⵠⲆΔ].id = ⵠⵠ.ΔⵠⵠⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠΔΔⲆⵠⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃⵠΔ].id = ⵠⵠ.ⲆⲆᐃⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔΔⵠᐃⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⲆΔᐃⵠⲆᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔΔⵠᐃⲆ].id = ⵠⵠ.ΔΔⵠᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆΔⲆⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠᐃᐃΔᐃΔᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆΔⲆⵠ].id = ⵠⵠ.ᐃⲆΔⲆⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠΔⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠⲆΔΔᐃᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠΔⵠⵠ].id = ⵠⵠ.ᐃⵠΔⵠⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⵠΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔΔⲆⵠⲆᐃᐃ], ⵠΔΔⲆᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⵠΔΔ].id = ⵠⵠ.ᐃⲆⵠΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔⲆⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠⲆⲆⲆΔᐃ], ᐃᐃᐃΔᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔⲆⲆⲆ].id = ⵠⵠ.ⵠΔⲆⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⵠᐃⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠᐃⵠⲆΔⵠ], ⲆΔᐃⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⵠᐃⲆ].id = ⵠⵠ.ⲆⵠⵠᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃΔⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠΔΔⵠΔⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃΔⵠⵠ].id = ⵠⵠ.ΔᐃΔⵠⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃᐃᐃᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔⵠⵠᐃΔⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃᐃᐃᐃ].id = ⵠⵠ.ᐃᐃᐃᐃᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆΔᐃⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠᐃⲆⵠⲆᐃΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆΔᐃⵠ].id = ⵠⵠ.ΔⲆΔᐃⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⲆⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔⵠΔΔⲆᐃ], ᐃⵠΔⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⲆⵠⲆ].id = ⵠⵠ.ᐃΔⲆⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠᐃⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠⵠⲆⵠⲆⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠᐃⲆΔ].id = ⵠⵠ.ᐃⵠᐃⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⲆΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔⲆᐃⵠⲆⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⲆΔⵠ].id = ⵠⵠ.ᐃⵠⲆΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠⵠᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⵠᐃᐃⲆᐃᐃ], ⲆΔᐃⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠⵠᐃΔ].id = ⵠⵠ.ⵠⵠⵠᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔΔⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⲆⲆⵠⲆⵠⲆ], ⵠⵠΔⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔΔⵠΔ].id = ⵠⵠ.ⵠΔΔⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⲆᐃⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃⲆᐃᐃⵠᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⲆᐃⵠ].id = ⵠⵠ.ΔᐃⲆᐃⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ΔΔⲆⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔΔᐃᐃⵠᐃᐃ], ᐃΔⲆΔ);
		this.ᐃⵠΔ[ⵠⵠ.ΔΔⲆⲆΔ].id = ⵠⵠ.ΔΔⲆⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔΔⲆⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠΔⲆᐃΔΔ], ᐃᐃᐃΔᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ΔΔⲆⲆⲆ].id = ⵠⵠ.ΔΔⲆⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃᐃⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⲆᐃⵠⲆⲆⲆ], ᐃⲆᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃᐃⲆ].id = ⵠⵠ.ⲆⲆᐃᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆᐃΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃⲆⵠᐃᐃᐃ], ᐃΔⲆΔ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆᐃΔⵠ].id = ⵠⵠ.ᐃⲆᐃΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃᐃΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃΔⵠᐃⵠᐃ], ⲆΔᐃⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃᐃΔⵠ].id = ⵠⵠ.ΔᐃᐃΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⲆᐃⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠⵠΔᐃᐃⵠ], ⵠΔΔⲆᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⲆᐃⲆ].id = ⵠⵠ.ᐃᐃⲆᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆΔΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔᐃⵠⲆⲆⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆΔΔΔ].id = ⵠⵠ.ⵠⲆΔΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⲆᐃⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⲆΔΔᐃΔⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⲆᐃⵠ].id = ⵠⵠ.ⵠⲆⲆᐃⵠ;
		this.ᐃⵠΔ[ⵠⵠ.Δⵠᐃⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆΔⲆΔⲆΔⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.Δⵠᐃⵠⵠ].id = ⵠⵠ.Δⵠᐃⵠⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⲆⲆⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃⵠΔⵠⵠᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⲆⲆⵠ].id = ⵠⵠ.ⲆⲆⲆⲆⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⲆΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆᐃⲆᐃΔᐃⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⲆΔⵠ].id = ⵠⵠ.ⵠⲆⲆΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⵠΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠΔⲆᐃΔⲆ], ΔⲆⵠᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⵠΔⲆ].id = ⵠⵠ.ⲆⲆⵠΔⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔΔⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃᐃᐃΔⵠΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔΔⵠⵠ].id = ⵠⵠ.ⲆΔΔⵠⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠᐃΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔᐃΔⲆⵠᐃ], ⲆⵠⲆᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠᐃΔΔ].id = ⵠⵠ.ᐃⵠᐃΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠⵠⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠᐃΔᐃⵠΔᐃ], ᐃΔⲆΔ);
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠⵠⵠΔ].id = ⵠⵠ.ΔⵠⵠⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⵠⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠΔⲆⵠⵠᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⵠⲆⲆ].id = ⵠⵠ.ⲆᐃⵠⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⲆⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⵠⵠᐃᐃᐃⲆ], ⲆⵠⲆᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⲆⲆΔ].id = ⵠⵠ.ᐃⲆⲆⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠᐃΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃⵠⵠΔᐃⲆ], ΔⲆΔⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠᐃΔⵠ].id = ⵠⵠ.ⲆⵠᐃΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⲆⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆΔᐃΔΔⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⲆⵠΔ].id = ⵠⵠ.ΔⲆⲆⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⲆⲆⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃΔⵠⵠΔᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⲆⲆⵠ].id = ⵠⵠ.ᐃⲆⲆⲆⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠⲆΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠⲆΔⵠⲆⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠⲆΔΔ].id = ⵠⵠ.ΔⵠⲆΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆΔΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃΔⲆᐃᐃⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆΔΔⵠ].id = ⵠⵠ.ᐃⲆΔΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⲆΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃⵠⵠᐃΔΔ], ᐃᐃᐃΔᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⲆΔΔ].id = ⵠⵠ.ᐃΔⲆΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⲆΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠⲆⲆⲆⵠⵠ], ⲆⲆᐃⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⲆΔΔ].id = ⵠⵠ.ᐃⵠⲆΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃΔⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃᐃᐃⵠⲆᐃ], ᐃΔⵠⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃΔⲆᐃ].id = ⵠⵠ.ⵠᐃΔⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⲆᐃⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠᐃⲆᐃⲆⵠᐃ], ᐃⲆΔΔ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⲆᐃⵠ].id = ⵠⵠ.ᐃΔⲆᐃⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆᐃΔⵠᐃΔᐃ], ᐃΔⲆΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃⲆΔ].id = ⵠⵠ.ⲆⲆᐃⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆΔᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠⵠΔⵠΔᐃ], ᐃⲆΔΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆΔᐃΔ].id = ⵠⵠ.ⲆⲆΔᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔⲆⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆⵠᐃⵠΔΔ], ᐃⵠΔᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔⲆⲆΔ].id = ⵠⵠ.ⵠΔⲆⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆΔΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆΔᐃⲆᐃΔⲆ], ΔΔᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆΔΔΔ].id = ⵠⵠ.ᐃⲆΔΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠΔᐃΔᐃΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠᐃΔ].id = ⵠⵠ.ΔᐃⵠᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⲆⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆΔⵠΔⵠᐃᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⲆⵠⵠ].id = ⵠⵠ.ᐃⲆⲆⵠⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠᐃⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔⲆᐃᐃⵠᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠᐃⲆⲆ].id = ⵠⵠ.ⵠⵠᐃⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔⵠⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⲆⲆⵠᐃᐃΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔⵠⲆᐃ].id = ⵠⵠ.ⲆΔⵠⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠΔⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠᐃᐃᐃⲆΔⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠΔⵠⲆ].id = ⵠⵠ.ΔⵠΔⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃⵠⲆⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆΔᐃᐃⵠⲆΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃⵠⲆⵠ].id = ⵠⵠ.ⵠᐃⵠⲆⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆᐃᐃᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆⲆⲆᐃⲆⲆ], ⵠⵠΔⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆᐃᐃᐃ].id = ⵠⵠ.ΔⲆᐃᐃᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃΔⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⲆᐃᐃΔΔΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃΔⵠΔ].id = ⵠⵠ.ⵠᐃΔⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃᐃΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃⲆΔⵠⲆΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃᐃΔΔ].id = ⵠⵠ.ⵠᐃᐃΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃΔⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⲆⵠⲆᐃΔᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃΔⲆᐃ].id = ⵠⵠ.ⲆᐃΔⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃΔΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆΔΔⵠⲆΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃΔΔΔ].id = ⵠⵠ.ⵠᐃΔΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⵠⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆΔⵠΔⵠᐃΔ], ⲆΔᐃⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⵠⲆΔ].id = ⵠⵠ.ⵠⲆⵠⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔΔⵠⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔΔᐃⲆΔⵠⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔΔⵠⲆΔ].id = ⵠⵠ.ΔΔⵠⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃⲆᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠⵠΔⵠᐃⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃⲆᐃΔ].id = ⵠⵠ.ⵠᐃⲆᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔᐃΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔᐃΔᐃⵠᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔᐃΔΔ].id = ⵠⵠ.ᐃΔᐃΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⵠΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆᐃᐃⵠᐃⲆᐃ], ᐃⲆΔΔ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⵠΔⵠ].id = ⵠⵠ.ᐃᐃⵠΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⵠΔᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⲆⲆⵠⵠΔⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⵠΔᐃ].id = ⵠⵠ.ⲆⲆⵠΔᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⵠⲆⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⲆΔᐃⲆΔΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⵠⲆⵠ].id = ⵠⵠ.ΔⲆⵠⲆⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆΔⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠᐃⵠᐃⵠᐃⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆΔⵠΔ].id = ⵠⵠ.ⲆⲆΔⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⲆΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠΔᐃⲆΔᐃ], ⲆΔⵠⵠⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⲆΔⵠ].id = ⵠⵠ.ⲆⵠⲆΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔΔΔᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠⲆⵠⲆⵠⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔΔΔᐃ].id = ⵠⵠ.ᐃΔΔΔᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⲆᐃᐃⲆⲆⲆ], ᐃⵠΔⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠⵠⲆ].id = ⵠⵠ.ΔᐃⵠⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃⲆⵠᐃᐃⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃⵠⲆ].id = ⵠⵠ.ⲆⲆᐃⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃΔⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆᐃᐃᐃΔⵠⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃΔⲆᐃ].id = ⵠⵠ.ᐃᐃΔⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⵠⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⵠΔΔᐃⵠᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⵠⵠⲆ].id = ⵠⵠ.ⲆᐃⵠⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃΔⵠᐃⲆᐃ], ⲆᐃᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃⵠⲆ].id = ⵠⵠ.ⵠᐃⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔΔᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠᐃⲆⵠΔΔ], ⵠⵠΔⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔΔᐃ].id = ⵠⵠ.ⲆΔΔᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⲆⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔᐃᐃΔⵠⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⲆⲆΔ].id = ⵠⵠ.ᐃⵠⲆⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔⵠⵠᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆΔⲆⲆⵠΔⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔⵠⵠᐃ].id = ⵠⵠ.ⲆΔⵠⵠᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⲆᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠᐃⵠΔⲆᐃⵠ], ΔⲆⵠᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⲆᐃΔ].id = ⵠⵠ.ⲆⵠⲆᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠΔⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠⲆΔⲆⲆᐃ], ᐃⲆᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠΔⲆⲆ].id = ⵠⵠ.ⲆⵠΔⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃᐃᐃⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⲆΔⲆⵠⲆⲆ], ᐃⲆᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃᐃᐃⲆ].id = ⵠⵠ.ⵠᐃᐃᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔΔᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⲆᐃᐃⲆᐃⲆ], ᐃⲆΔΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔΔᐃΔ].id = ⵠⵠ.ⲆΔΔᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.Ⲇᐃᐃᐃᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆΔᐃΔⵠᐃⲆ], ᐃΔⲆΔ);
		this.ᐃⵠΔ[ⵠⵠ.Ⲇᐃᐃᐃᐃ].id = ⵠⵠ.Ⲇᐃᐃᐃᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔⵠᐃᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆᐃⲆⲆⵠⵠᐃ], Δⵠⵠᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔⵠᐃᐃ].id = ⵠⵠ.ⵠΔⵠᐃᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⵠΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠᐃⵠⵠΔⲆᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⵠΔⵠ].id = ⵠⵠ.ⲆᐃⵠΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆΔΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠᐃΔⵠⲆᐃΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆΔΔⵠ].id = ⵠⵠ.ⵠⲆΔΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⲆΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔΔΔΔⲆⲆ], ᐃⲆΔΔ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⲆΔⲆ].id = ⵠⵠ.ᐃⲆⲆΔⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⲆⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠΔⵠᐃΔᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⲆⵠⲆ].id = ⵠⵠ.ⲆⲆⲆⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⵠᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔⵠᐃⲆⵠᐃ], Δⵠⵠᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⵠᐃΔ].id = ⵠⵠ.ᐃⵠⵠᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⵠⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔΔⵠΔⲆΔΔ], ᐃⵠΔⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⵠⲆⲆ].id = ⵠⵠ.ⵠⲆⵠⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⵠⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠΔΔⲆᐃⲆ], ⵠΔΔⲆᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⵠⲆⲆ].id = ⵠⵠ.ΔⲆⵠⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠᐃⲆⲆⵠΔᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠⲆⲆ].id = ⵠⵠ.ΔᐃⵠⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃᐃⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔΔⲆᐃΔΔᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃᐃⲆᐃ].id = ⵠⵠ.ᐃᐃᐃⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⵠⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆΔⵠᐃⲆᐃ], ⲆᐃᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⵠⲆΔ].id = ⵠⵠ.ⲆⲆⵠⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠᐃᐃⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔᐃΔⵠᐃⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠᐃᐃⲆ].id = ⵠⵠ.ΔⵠᐃᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔⲆⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⵠⵠⵠᐃΔᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔⲆⵠⲆ].id = ⵠⵠ.ⲆΔⲆⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⲆᐃᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⲆⵠᐃᐃᐃΔ], ⲆⵠⲆᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⲆᐃᐃ].id = ⵠⵠ.ⲆⵠⲆᐃᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠΔⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⲆᐃⵠᐃⵠᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠΔⲆᐃ].id = ⵠⵠ.ᐃⵠΔⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⲆΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆᐃΔΔᐃΔⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⲆΔⲆ].id = ⵠⵠ.ᐃᐃⲆΔⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔΔΔⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃΔᐃΔΔᐃ], ⲆΔⵠⵠⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ΔΔΔⲆΔ].id = ⵠⵠ.ΔΔΔⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃΔⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⵠⲆⵠΔⵠᐃ], ⵠⵠΔⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃΔⵠⲆ].id = ⵠⵠ.ⲆᐃΔⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠᐃⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃΔⲆᐃⵠⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠᐃⲆⲆ].id = ⵠⵠ.ΔⵠᐃⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔΔΔⲆᐃᐃⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃᐃΔ].id = ⵠⵠ.ⲆⲆᐃᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃᐃⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃⲆⵠΔⲆΔ], ⲆΔⵠⵠⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃᐃⵠⲆ].id = ⵠⵠ.ⲆᐃᐃⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⲆᐃⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃⵠⵠΔᐃΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⲆᐃⲆ].id = ⵠⵠ.ᐃΔⲆᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠⵠⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔⲆⲆⲆᐃⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠⵠⵠΔ].id = ⵠⵠ.ⵠⵠⵠⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⵠΔᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠⲆᐃⲆⵠΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⵠΔᐃ].id = ⵠⵠ.ᐃΔⵠΔᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔΔΔⵠⵠΔ], ᐃΔⲆΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃΔΔ].id = ⵠⵠ.ⲆⲆᐃΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⲆⵠᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔⵠⵠⵠᐃⲆ], ᐃⵠΔⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⲆⵠᐃ].id = ⵠⵠ.ⲆⵠⲆⵠᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔΔᐃⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⲆⲆⲆⵠⵠⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔΔᐃⲆ].id = ⵠⵠ.ⲆΔΔᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⲆⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠⵠⵠΔⵠΔ], Δⵠⵠᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⲆⲆΔ].id = ⵠⵠ.ⲆᐃⲆⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠⲆΔᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⲆⵠΔᐃΔΔ], ΔΔᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠⲆΔᐃ].id = ⵠⵠ.ΔⵠⲆΔᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⲆⵠᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆΔᐃⵠⲆΔᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⲆⵠᐃ].id = ⵠⵠ.ⵠⲆⲆⵠᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃᐃΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃⵠⵠⵠⵠΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃᐃΔⵠ].id = ⵠⵠ.ⵠᐃᐃΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⲆⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⲆⵠⲆΔⵠΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⲆⲆΔ].id = ⵠⵠ.ⲆⵠⲆⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃΔᐃᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⲆⵠᐃᐃⲆⵠ], ΔⲆΔⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃΔᐃᐃ].id = ⵠⵠ.ⲆᐃΔᐃᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ΔΔΔᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔΔⲆΔⵠΔⲆ], ⵠⵠΔⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ΔΔΔᐃΔ].id = ⵠⵠ.ΔΔΔᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⲆⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔΔᐃᐃⲆΔΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⲆⲆᐃ].id = ⵠⵠ.ⲆᐃⲆⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆᐃⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃᐃᐃⲆⵠᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆᐃⲆᐃ].id = ⵠⵠ.ᐃⲆᐃⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠΔᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⲆᐃⵠᐃᐃΔ], ᐃⲆΔΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠΔᐃΔ].id = ⵠⵠ.ⵠⵠΔᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔΔᐃⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔᐃⲆᐃΔΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔΔᐃⲆᐃ].id = ⵠⵠ.ΔΔᐃⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠⵠᐃᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⲆᐃⲆΔⲆΔ], ⲆᐃᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠⵠᐃᐃ].id = ⵠⵠ.ⵠⵠⵠᐃᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠΔᐃⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃⲆᐃᐃⵠⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠΔᐃⲆ].id = ⵠⵠ.ⲆⵠΔᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⵠᐃⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆᐃⵠⲆⵠΔⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⵠᐃⲆ].id = ⵠⵠ.ΔⲆⵠᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⲆⵠᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃⲆⵠⵠⲆᐃ], ⲆᐃᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⲆⵠᐃ].id = ⵠⵠ.ΔᐃⲆⵠᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠΔⵠΔⲆⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠΔⵠ].id = ⵠⵠ.ΔᐃⵠΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠⵠⵠᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔⲆⲆⲆΔΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠⵠⵠᐃ].id = ⵠⵠ.ⵠⵠⵠⵠᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠΔᐃⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆΔᐃΔⵠΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠΔᐃⲆ].id = ⵠⵠ.ᐃⵠΔᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⵠⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⲆⲆΔΔⵠⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⵠⵠΔ].id = ⵠⵠ.ᐃΔⵠⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⲆⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠΔⲆΔᐃⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⲆⵠΔ].id = ⵠⵠ.ᐃⵠⲆⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⵠⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠᐃΔⵠⵠΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⵠⵠΔ].id = ⵠⵠ.ΔⲆⵠⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆᐃⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⲆⲆΔᐃⵠΔ], ⲆᐃᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆᐃⵠⵠ].id = ⵠⵠ.ⵠⲆᐃⵠⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔΔⲆΔᐃΔ], ⲆΔⵠⵠⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃΔⵠ].id = ⵠⵠ.ⲆⲆᐃΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⵠΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⲆⵠᐃⵠᐃⵠ], ᐃⲆᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⵠΔΔ].id = ⵠⵠ.ᐃⵠⵠΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠΔᐃᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆⵠΔᐃⲆⲆ], ΔⲆΔⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠΔᐃᐃ].id = ⵠⵠ.ΔⵠΔᐃᐃ;
		this.ᐃⵠΔ[ⵠⵠ.Δⵠⵠⵠᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆΔⲆᐃᐃⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.Δⵠⵠⵠᐃ].id = ⵠⵠ.Δⵠⵠⵠᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠΔᐃⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⲆⲆⵠⵠΔⲆ], ᐃⵠΔᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠΔᐃⵠ].id = ⵠⵠ.ⵠⵠΔᐃⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠᐃΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆⲆⲆⵠᐃΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠᐃΔΔ].id = ⵠⵠ.ΔⵠᐃΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔⲆⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆⵠⲆᐃⲆᐃ], ᐃᐃᐃΔᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔⲆⲆΔ].id = ⵠⵠ.ⲆΔⲆⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃΔⵠᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔᐃⲆⲆⲆⲆ], ΔⲆΔⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃΔⵠᐃ].id = ⵠⵠ.ΔᐃΔⵠᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃⲆⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠᐃᐃⲆⲆⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃⲆⵠΔ].id = ⵠⵠ.ⵠᐃⲆⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠΔⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆᐃΔᐃⲆᐃ], ΔⲆⵠᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠΔⵠⵠ].id = ⵠⵠ.ⵠⵠΔⵠⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠΔΔᐃⵠΔ], ᐃⵠΔᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠΔΔ].id = ⵠⵠ.ΔᐃⵠΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⵠⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⵠΔⵠᐃⲆᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⵠⵠⵠ].id = ⵠⵠ.ᐃⵠⵠⵠⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠᐃⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔⲆⵠⵠⲆΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠᐃⲆΔ].id = ⵠⵠ.ⵠⵠᐃⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆΔΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔⲆⲆⲆᐃΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆΔΔΔ].id = ⵠⵠ.ⲆⲆΔΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠⵠⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆᐃⲆⵠᐃⵠⵠ], ⲆᐃᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠⵠⲆᐃ].id = ⵠⵠ.ⵠⵠⵠⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⲆⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠᐃⲆΔⵠⵠΔ], ΔⲆⵠᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⲆⵠΔ].id = ⵠⵠ.ᐃᐃⲆⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠΔΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠⲆⵠᐃᐃⵠ], ⵠΔΔⲆᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠΔΔⲆ].id = ⵠⵠ.ⲆⵠΔΔⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆΔⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔΔᐃⲆⵠᐃⵠ], ⲆⵠⲆᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆΔⵠΔ].id = ⵠⵠ.ᐃⲆΔⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⲆᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆΔⵠⵠⲆᐃΔ], ᐃΔⲆΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⲆᐃΔ].id = ⵠⵠ.ⵠⲆⲆᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠⵠΔᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠᐃᐃΔⵠᐃⲆ], ᐃⵠΔⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠⵠΔᐃ].id = ⵠⵠ.ΔⵠⵠΔᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠⲆΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠⲆΔⵠᐃⲆ], ᐃΔⲆΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠⲆΔΔ].id = ⵠⵠ.ⵠⵠⲆΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔⲆᐃⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔⲆᐃⲆⵠΔ], Δⵠⵠᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔⲆᐃⲆ].id = ⵠⵠ.ⵠΔⲆᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔΔᐃΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠΔᐃⲆΔΔ], ᐃⵠΔⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ΔΔᐃΔΔ].id = ⵠⵠ.ΔΔᐃΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⲆⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆᐃᐃᐃⵠᐃΔ], ΔΔᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⲆⲆⲆ].id = ⵠⵠ.ᐃΔⲆⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠΔΔⲆᐃΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠΔⲆ].id = ⵠⵠ.ΔᐃⵠΔⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠΔⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⲆΔᐃⵠⵠΔ], ᐃⵠΔᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠΔⲆⲆ].id = ⵠⵠ.ⵠⵠΔⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⲆⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃⵠΔⵠⲆΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⲆⵠΔ].id = ⵠⵠ.ⲆᐃⲆⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠⲆⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠⵠⵠΔΔᐃ], ᐃⲆΔΔ);
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠⲆⲆᐃ].id = ⵠⵠ.ΔⵠⲆⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔⵠⲆⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔⵠⲆⵠΔΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔⵠⲆⵠ].id = ⵠⵠ.ⲆΔⵠⲆⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃΔᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⵠΔⵠⲆΔⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃΔᐃΔ].id = ⵠⵠ.ΔᐃΔᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃΔⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆΔᐃⵠⲆⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃΔⲆⲆ].id = ⵠⵠ.ΔᐃΔⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆΔⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠᐃΔᐃⵠᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆΔⲆΔ].id = ⵠⵠ.ᐃⲆΔⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆᐃⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠΔᐃⲆΔⵠ], ΔⲆΔⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆᐃⲆᐃ].id = ⵠⵠ.ΔⲆᐃⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃΔⵠᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠᐃᐃΔΔᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃΔⵠᐃ].id = ⵠⵠ.ⲆᐃΔⵠᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃᐃⲆⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃⲆᐃⲆⵠⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃᐃⲆⵠ].id = ⵠⵠ.ⲆᐃᐃⲆⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⵠΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⵠᐃᐃⲆΔᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⵠΔⵠ].id = ⵠⵠ.ⲆⲆⵠΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⵠΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔᐃΔΔⲆΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⵠΔⲆ].id = ⵠⵠ.ⲆᐃⵠΔⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⵠⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃⵠΔΔᐃᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⵠⵠⲆ].id = ⵠⵠ.ᐃᐃⵠⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔΔⲆⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆⵠᐃᐃⵠⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔΔⲆⲆᐃ].id = ⵠⵠ.ΔΔⲆⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⵠΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆΔⲆΔΔΔΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⵠΔⲆ].id = ⵠⵠ.ⵠⲆⵠΔⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔᐃⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠΔᐃⲆⵠΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔᐃⵠⵠ].id = ⵠⵠ.ⵠΔᐃⵠⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃᐃᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃⲆⵠⲆᐃⲆ], ᐃⲆᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃᐃᐃΔ].id = ⵠⵠ.ⲆᐃᐃᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆᐃⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔᐃⲆⵠⵠⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆᐃⵠⲆ].id = ⵠⵠ.ⵠⲆᐃⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⵠΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆᐃᐃᐃⲆᐃⲆ], ᐃⲆΔΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⵠΔΔ].id = ⵠⵠ.ⵠⲆⵠΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃᐃⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆᐃⲆΔⵠⲆⲆ], ᐃⲆᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃᐃⲆⲆ].id = ⵠⵠ.ΔᐃᐃⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔᐃΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃΔⵠᐃᐃⲆ], ᐃΔⵠⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔᐃΔⵠ].id = ⵠⵠ.ⵠΔᐃΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⲆᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔΔⵠⵠⵠΔᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⲆᐃΔ].id = ⵠⵠ.ᐃⲆⲆᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃⵠᐃⲆⲆᐃ], ΔⲆΔⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆᐃΔⲆ].id = ⵠⵠ.ⲆⲆᐃΔⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⵠΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠΔⲆᐃΔⲆ], ⲆᐃᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⵠΔⲆ].id = ⵠⵠ.ⲆⲆⵠΔⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⵠⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠΔⲆⵠⵠᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⵠⲆⲆ].id = ⵠⵠ.ⲆᐃⵠⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠᐃΔᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔⲆⵠΔᐃᐃ], ᐃΔⲆΔ);
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠᐃΔᐃ].id = ⵠⵠ.ΔⵠᐃΔᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔⲆΔᐃⲆΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠⲆᐃ].id = ⵠⵠ.ΔᐃⵠⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃᐃΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆⵠⵠⵠⲆⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃᐃΔⲆ].id = ⵠⵠ.ΔᐃᐃΔⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠᐃⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔᐃⲆΔⵠⵠ], ⲆⲆᐃⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠᐃⲆⲆ].id = ⵠⵠ.ⲆⵠᐃⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⲆᐃⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔΔΔᐃᐃᐃΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⲆᐃⲆ].id = ⵠⵠ.ΔⲆⲆᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃᐃΔᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠⲆⵠⵠΔⲆ], ΔⲆΔⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃᐃΔᐃ].id = ⵠⵠ.ⲆᐃᐃΔᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⲆⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠⵠⲆΔⵠΔ], Δⵠⵠᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⲆⲆᐃ].id = ⵠⵠ.ΔⲆⲆⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⲆⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔⲆⲆⵠΔΔ], ΔⲆΔⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⲆⵠⵠ].id = ⵠⵠ.ᐃΔⲆⵠⵠ;
		this.ⵠⵠⲆⲆⲆ = [];
		for (var Ⲇᐃ = ΔⲆⲆ; 250 > Ⲇᐃ; Ⲇᐃ++) this.ⵠⵠⲆⲆⲆ[Ⲇᐃ] = ΔΔⲆ(0, ᐃᐃⲆ, "", ᐃΔ[Δ.ΔᐃⲆᐃⵠᐃⵠ]);
		this.ᐃⵠⵠ = [];
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔᐃᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔᐃⵠⲆᐃⵠ], ᐃΔⵠⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔᐃᐃⵠ].id = ⵠⵠ.ⵠΔᐃᐃⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔΔΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃΔΔΔΔᐃ], ΔⲆⵠᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔΔΔΔ].id = ⵠⵠ.ΔΔΔΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔⵠⵠᐃⲆⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔΔ].id = ⵠⵠ.ⵠⵠΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔΔ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔΔ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔᐃⲆΔΔⲆ], ⵠΔΔⲆᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠᐃΔ].id = ⵠⵠ.ⲆⵠᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠᐃΔ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠᐃΔ].info.ᐃᐃ[ΔΔᐃᐃ];
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔᐃⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠⲆᐃⵠᐃⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔᐃⵠⲆ].id = ⵠⵠ.ⲆΔᐃⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔΔⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔΔⵠⵠⲆᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔΔⲆᐃ].id = ⵠⵠ.ᐃΔΔⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠᐃᐃᐃᐃΔ], ⲆⵠⲆᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔᐃⲆ].id = ⵠⵠ.ᐃΔᐃⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔᐃⲆ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ᐃΔᐃⲆ].info.ᐃᐃ[ⵠΔᐃⵠ];
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃΔᐃⲆⵠⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⲆᐃ].id = ⵠⵠ.ⲆᐃⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⲆᐃ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⲆᐃ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆⲆΔⲆᐃⵠ], ΔⲆΔⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠΔΔ].id = ⵠⵠ.ⲆⲆⵠΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⵠΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆΔⵠΔΔᐃ], ⲆΔᐃⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⵠΔΔ].id = ⵠⵠ.ⲆⵠⵠΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⲆⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔᐃΔⵠᐃⲆ], ⵠΔΔⲆᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⲆⵠⲆ].id = ⵠⵠ.ΔᐃⲆⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⲆΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠⲆᐃΔΔΔ], ΔⲆⵠᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⲆΔⲆ].id = ⵠⵠ.ΔᐃⲆΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔΔⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔΔⲆⲆⵠⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔΔⲆⲆ].id = ⵠⵠ.ⵠΔΔⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆΔⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⵠᐃᐃᐃΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆΔⵠⲆ].id = ⵠⵠ.ⲆⲆΔⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⵠⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⲆⵠⲆΔⵠ], ⲆⲆᐃⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⵠⲆᐃ].id = ⵠⵠ.ᐃⵠⵠⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃΔΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆᐃΔⲆⲆⲆ], ⲆⲆᐃⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃΔΔᐃ].id = ⵠⵠ.ⵠᐃΔΔᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⵠⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠΔᐃᐃΔⵠ], ΔⲆⵠᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⵠⲆΔ].id = ⵠⵠ.ΔⵠⵠⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⵠΔΔᐃΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃⵠΔ].id = ⵠⵠ.ⲆⲆᐃⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔⵠᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⲆⲆΔⲆΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔⵠᐃⲆ].id = ⵠⵠ.ΔΔⵠᐃⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆᐃᐃᐃⵠⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔⲆⵠ].id = ⵠⵠ.ᐃⲆΔⲆⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠΔⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠᐃΔΔΔΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠΔⵠⵠ].id = ⵠⵠ.ᐃⵠΔⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⵠΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃᐃΔᐃΔⵠ], ⲆⵠⲆᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⵠΔΔ].id = ⵠⵠ.ᐃⲆⵠΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔⲆⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠⲆΔΔΔΔ], ΔⲆΔⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔⲆⲆⲆ].id = ⵠⵠ.ⵠΔⲆⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⵠᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.Δᐃⵠⵠⵠⵠⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⵠᐃⲆ].id = ⵠⵠ.ⲆⵠⵠᐃⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⵠᐃⲆ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⵠᐃⲆ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃΔⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⵠΔⲆᐃⵠ], ᐃΔⲆΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃΔⵠⵠ].id = ⵠⵠ.ΔᐃΔⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃᐃᐃᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⲆⵠⲆΔΔ], ᐃⵠΔᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃᐃᐃᐃ].id = ⵠⵠ.ᐃᐃᐃᐃᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆΔᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔⵠⲆᐃᐃⵠ], ⲆⲆᐃⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆΔᐃⵠ].id = ⵠⵠ.ΔⲆΔᐃⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⲆⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠΔΔᐃⲆᐃ], ΔⲆⵠᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⲆⵠⲆ].id = ⵠⵠ.ᐃΔⲆⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠᐃⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠᐃΔⵠⵠᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠᐃⲆΔ].id = ⵠⵠ.ᐃⵠᐃⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⲆΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆⲆΔⵠΔⲆ], ᐃⵠΔᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⲆΔⵠ].id = ⵠⵠ.ᐃⵠⲆΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃΔⵠΔⲆⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠᐃΔ].id = ⵠⵠ.ⵠⵠⵠᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔΔⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆⵠᐃⵠⵠⲆ], ᐃΔⵠⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔΔⵠΔ].id = ⵠⵠ.ⵠΔΔⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⵠᐃΔⵠᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃⵠⲆ].id = ⵠⵠ.ⵠᐃⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆΔΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⲆᐃΔⵠⲆ], ΔΔᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆΔΔΔ].id = ⵠⵠ.ⵠⲆΔΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⲆᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⲆΔⵠⵠΔ], ΔΔᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⲆᐃⵠ].id = ⵠⵠ.ⵠⲆⲆᐃⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.Δⵠᐃⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⲆⵠᐃΔⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.Δⵠᐃⵠⵠ].id = ⵠⵠ.Δⵠᐃⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⲆⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆᐃᐃⲆΔⵠ], ⲆⵠⲆᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⲆⲆⵠ].id = ⵠⵠ.ⲆⲆⲆⲆⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⲆᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃⵠⵠΔⵠΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⲆᐃⵠ].id = ⵠⵠ.ΔᐃⲆᐃⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⲆᐃⵠ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⲆᐃⵠ].info.ᐃᐃ[Δⵠⵠⵠ];
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔⲆⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⲆΔᐃᐃⵠ], ᐃΔⵠⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔⲆⲆΔ].id = ⵠⵠ.ΔΔⲆⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔⲆⲆΔ].info.ᐃᐃ[ⵠⵠⵠᐃ] = this.ᐃⵠⵠ[ⵠⵠ.ΔΔⲆⲆΔ].info.ᐃᐃ[ⲆⵠⲆⲆ];
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔⲆⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆⵠⵠⲆΔⲆ], ᐃᐃᐃΔᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔⲆⲆⲆ].id = ⵠⵠ.ΔΔⲆⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔⲆⲆⲆ].info.ᐃᐃ[ⲆᐃⵠΔ] = this.ᐃⵠⵠ[ⵠⵠ.ΔΔⲆⲆⲆ].info.ᐃᐃ[ⵠᐃⲆⲆ];
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔⵠⲆⲆ], ⲆⵠⲆᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃᐃⲆ].id = ⵠⵠ.ⲆⲆᐃᐃⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆᐃΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆΔᐃⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆᐃΔⵠ].id = ⵠⵠ.ᐃⲆᐃΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃᐃΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃⲆΔΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃᐃΔⵠ].id = ⵠⵠ.ΔᐃᐃΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⲆᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆⲆⲆΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⲆᐃⲆ].id = ⵠⵠ.ᐃᐃⲆᐃⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆΔΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⲆᐃΔⵠⲆ], ᐃᐃᐃΔᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆΔΔΔ].id = ⵠⵠ.ⵠⲆΔΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⲆΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔᐃΔΔᐃⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⲆΔⵠ].id = ⵠⵠ.ⵠⲆⲆΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔⵠⵠᐃⵠΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠΔⲆ].id = ⵠⵠ.ⲆⲆⵠΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔΔⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔᐃⵠⲆⲆΔ], ΔⲆⵠᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔΔⵠⵠ].id = ⵠⵠ.ⲆΔΔⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃΔⲆΔᐃᐃ], ΔⲆⵠᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠᐃΔΔ].id = ⵠⵠ.ᐃⵠᐃΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⵠⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔΔⲆᐃΔⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⵠⵠΔ].id = ⵠⵠ.ΔⵠⵠⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⵠⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔⵠⵠⲆⲆΔ], ᐃⲆΔΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⵠⲆⲆ].id = ⵠⵠ.ⲆᐃⵠⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⲆⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔΔⲆⵠᐃᐃ], ᐃⲆΔΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⲆⲆΔ].id = ⵠⵠ.ᐃⲆⲆⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠᐃΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠΔᐃΔΔᐃ], ᐃΔⲆΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠᐃΔⵠ].id = ⵠⵠ.ⲆⵠᐃΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⲆⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃᐃᐃᐃⲆⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⲆⵠΔ].id = ⵠⵠ.ΔⲆⲆⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⲆⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔΔⵠⵠⲆⲆ], ⵠΔΔⲆᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⲆⲆⵠ].id = ⵠⵠ.ᐃⲆⲆⲆⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⲆΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠᐃᐃⲆⵠⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⲆΔΔ].id = ⵠⵠ.ΔⵠⲆΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠᐃⲆᐃⵠᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔΔⵠ].id = ⵠⵠ.ᐃⲆΔΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⲆΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔΔΔⵠⲆᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⲆΔΔ].id = ⵠⵠ.ᐃΔⲆΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃΔⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃⲆⲆⲆⵠⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃΔⲆᐃ].id = ⵠⵠ.ⵠᐃΔⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⲆΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃⵠΔⵠⵠΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⲆΔΔ].id = ⵠⵠ.ᐃⵠⲆΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⲆᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃᐃᐃᐃΔᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⲆᐃⵠ].id = ⵠⵠ.ᐃΔⲆᐃⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆΔᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔⲆⲆⲆⲆⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆΔᐃΔ].id = ⵠⵠ.ⲆⲆΔᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃΔΔⲆⵠⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃⲆΔ].id = ⵠⵠ.ⲆⲆᐃⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔⲆⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠᐃᐃᐃⲆΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔⲆⲆΔ].id = ⵠⵠ.ⵠΔⲆⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔᐃᐃⵠⵠΔ], ΔⲆΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠᐃΔ].id = ⵠⵠ.ΔᐃⵠᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⲆΔΔⵠⲆ], ΔⲆΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔΔΔ].id = ⵠⵠ.ᐃⲆΔΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⲆⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⵠⲆⵠΔⲆ], ᐃΔⲆΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⲆⵠⵠ].id = ⵠⵠ.ᐃⲆⲆⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⵠⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⲆΔΔᐃΔ], ⲆⲆᐃⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⵠⲆᐃ].id = ⵠⵠ.ⲆΔⵠⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠᐃⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆΔᐃᐃΔᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠᐃⲆⲆ].id = ⵠⵠ.ⵠⵠᐃⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠΔⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆᐃᐃᐃⲆⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠΔⵠⲆ].id = ⵠⵠ.ΔⵠΔⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆᐃᐃᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⲆᐃⵠΔΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆᐃᐃᐃ].id = ⵠⵠ.ΔⲆᐃᐃᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃⵠⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠⵠⵠⵠⵠΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃⵠⲆⵠ].id = ⵠⵠ.ⵠᐃⵠⲆⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃΔⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠᐃΔⲆⵠⲆ], ᐃⲆᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃΔⵠΔ].id = ⵠⵠ.ⵠᐃΔⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃΔⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⲆᐃᐃⲆⵠ], ΔⲆΔⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃΔⲆᐃ].id = ⵠⵠ.ⲆᐃΔⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃᐃᐃⲆᐃΔ], ᐃΔⵠⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃᐃΔΔ].id = ⵠⵠ.ⵠᐃᐃΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃΔΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆⲆΔⵠᐃΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃΔΔΔ].id = ⵠⵠ.ⵠᐃΔΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔⵠⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⲆΔⲆⵠΔ], ΔⲆΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔⵠⲆΔ].id = ⵠⵠ.ΔΔⵠⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⵠⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠⵠΔⲆⲆᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⵠⲆΔ].id = ⵠⵠ.ⵠⲆⵠⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃⲆᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠΔⲆᐃⲆⵠ], ⲆᐃᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃⲆᐃΔ].id = ⵠⵠ.ⵠᐃⲆᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆⵠΔⵠⲆΔ], Δⵠⵠᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔᐃΔΔ].id = ⵠⵠ.ᐃΔᐃΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⵠΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃⵠⵠⲆⵠᐃ], ᐃⲆᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⵠΔⵠ].id = ⵠⵠ.ᐃᐃⵠΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆⵠᐃᐃⵠΔ], ᐃⲆΔΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠΔᐃ].id = ⵠⵠ.ⲆⲆⵠΔᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃⲆΔᐃΔⵠ], ΔⲆΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠⲆⵠ].id = ⵠⵠ.ΔⲆⵠⲆⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆΔⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⲆⵠⵠⵠᐃ], ⵠΔΔⲆᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆΔⵠΔ].id = ⵠⵠ.ⲆⲆΔⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⲆΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⲆΔⲆⲆⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⲆΔⵠ].id = ⵠⵠ.ⲆⵠⲆΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔΔΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆⲆⲆᐃⲆᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔΔΔᐃ].id = ⵠⵠ.ᐃΔΔΔᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆΔΔΔᐃᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠⵠⲆ].id = ⵠⵠ.ΔᐃⵠⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⵠⵠⵠᐃⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃⵠⲆ].id = ⵠⵠ.ⲆⲆᐃⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃΔⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔᐃⲆᐃⲆⵠ], ΔΔᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃΔⲆᐃ].id = ⵠⵠ.ᐃᐃΔⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⵠⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⲆᐃᐃⵠᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⵠⵠⲆ].id = ⵠⵠ.ⲆᐃⵠⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⵠⵠⲆ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⵠⵠⲆ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⵠᐃΔⵠᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃⵠⲆ].id = ⵠⵠ.ⵠᐃⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃᐃⵠⲆⲆⵠ], ᐃΔⲆΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔΔᐃ].id = ⵠⵠ.ⲆΔΔᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔΔᐃ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ⲆΔΔᐃ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⲆⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⵠᐃⵠᐃⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⲆⲆΔ].id = ⵠⵠ.ᐃⵠⲆⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⵠⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃᐃᐃⲆΔᐃ], ᐃⵠΔⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⵠⵠᐃ].id = ⵠⵠ.ⲆΔⵠⵠᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⲆᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆⲆᐃᐃⲆⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⲆᐃΔ].id = ⵠⵠ.ⲆⵠⲆᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠΔⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆⲆᐃⲆⵠᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠΔⲆⲆ].id = ⵠⵠ.ⲆⵠΔⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃᐃᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔⵠⵠⵠᐃᐃ], ᐃⵠΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃᐃᐃⲆ].id = ⵠⵠ.ⵠᐃᐃᐃⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔΔᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃⵠΔΔᐃΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔΔᐃΔ].id = ⵠⵠ.ⲆΔΔᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.Ⲇᐃᐃᐃᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃⵠⲆᐃΔⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.Ⲇᐃᐃᐃᐃ].id = ⵠⵠ.Ⲇᐃᐃᐃᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔⵠᐃᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠⲆⲆΔΔⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔⵠᐃᐃ].id = ⵠⵠ.ⵠΔⵠᐃᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⵠΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔΔΔⲆΔᐃ], ⲆΔⵠⵠⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⵠΔⵠ].id = ⵠⵠ.ⲆᐃⵠΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆΔΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⵠΔΔΔᐃ], ᐃΔⵠⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆΔΔⵠ].id = ⵠⵠ.ⵠⲆΔΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⲆΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔΔⲆΔΔᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⲆΔⲆ].id = ⵠⵠ.ᐃⲆⲆΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⲆⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠΔᐃⲆΔⲆ], ᐃᐃᐃΔᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⲆⵠⲆ].id = ⵠⵠ.ⲆⲆⲆⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⵠᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⲆΔΔⵠⵠ], ᐃΔⵠⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⵠᐃΔ].id = ⵠⵠ.ᐃⵠⵠᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⵠⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃΔᐃΔⲆⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⵠⲆⲆ].id = ⵠⵠ.ⵠⲆⵠⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔΔⲆⲆⵠⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠⲆⲆ].id = ⵠⵠ.ΔⲆⵠⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠⲆⲆ].info.ᐃᐃ[ΔΔⲆⲆ] = this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠⲆⲆ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆΔⲆⲆᐃΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠⲆⲆ].id = ⵠⵠ.ΔᐃⵠⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠⲆⲆ].info.ᐃᐃ[ⲆⵠΔⵠ] = this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠⲆⲆ].info.ᐃᐃ[ⵠⲆᐃ];
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃᐃⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⲆⵠᐃΔᐃ], ᐃᐃᐃΔᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃᐃⲆᐃ].id = ⵠⵠ.ᐃᐃᐃⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃᐃⲆᐃ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃᐃⲆᐃ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⲆΔⲆΔΔ], ᐃⵠΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠⲆΔ].id = ⵠⵠ.ⲆⲆⵠⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠⲆΔ].info.ᐃᐃ[ⲆᐃⵠΔ] = this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠⲆΔ].info.ᐃᐃ[ⵠⲆΔ];
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠᐃᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆᐃⵠⲆⵠΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠᐃᐃⲆ].id = ⵠⵠ.ΔⵠᐃᐃⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⲆⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠΔⲆᐃᐃΔ], ⲆⲆᐃⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⲆⵠⲆ].id = ⵠⵠ.ⲆΔⲆⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⲆᐃᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆᐃⲆⵠᐃᐃ], ⲆⲆᐃⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⲆᐃᐃ].id = ⵠⵠ.ⲆⵠⲆᐃᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠΔⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⲆᐃΔⵠⲆ], ᐃᐃᐃΔᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠΔⲆᐃ].id = ⵠⵠ.ᐃⵠΔⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⲆΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃΔᐃΔΔⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⲆΔⲆ].id = ⵠⵠ.ᐃᐃⲆΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔΔⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⲆⵠⲆΔⵠ], ⵠⵠΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔΔⲆΔ].id = ⵠⵠ.ΔΔΔⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃΔⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔᐃΔΔⵠⲆ], ᐃⲆΔΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃΔⵠⲆ].id = ⵠⵠ.ⲆᐃΔⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠᐃⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃΔⲆΔΔⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠᐃⲆⲆ].id = ⵠⵠ.ΔⵠᐃⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆⲆΔⲆᐃⵠ], ΔⲆⵠᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃᐃΔ].id = ⵠⵠ.ⲆⲆᐃᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃᐃⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔⲆⵠⲆᐃΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃᐃⵠⲆ].id = ⵠⵠ.ⲆᐃᐃⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⲆᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⲆⲆⲆⲆᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⲆᐃⲆ].id = ⵠⵠ.ᐃΔⲆᐃⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃΔⲆⲆΔΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠⵠΔ].id = ⵠⵠ.ⵠⵠⵠⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⵠΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠⲆⲆⲆᐃⲆ], ᐃΔⲆΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⵠΔᐃ].id = ⵠⵠ.ᐃΔⵠΔᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠᐃⵠⲆΔᐃ], ⲆᐃᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃΔΔ].id = ⵠⵠ.ⲆⲆᐃΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⲆⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⲆⲆᐃⲆΔ], ᐃⲆΔΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⲆⵠᐃ].id = ⵠⵠ.ⵠⲆⲆⵠᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⲆⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔᐃⲆⵠⵠⵠ], ΔⲆΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⲆⵠᐃ].id = ⵠⵠ.ⲆⵠⲆⵠᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔΔᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃΔΔΔⵠᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔΔᐃⲆ].id = ⵠⵠ.ⲆΔΔᐃⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⲆⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔᐃᐃⵠⲆⵠ], Δⵠⵠᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⲆⲆΔ].id = ⵠⵠ.ⲆᐃⲆⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⲆΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃΔΔᐃᐃⵠ], ᐃⵠΔᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⲆΔᐃ].id = ⵠⵠ.ΔⵠⲆΔᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃᐃΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃᐃΔⲆΔⵠ], ΔΔᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃᐃΔⵠ].id = ⵠⵠ.ⵠᐃᐃΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃᐃΔⵠ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃᐃΔⵠ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⲆⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔΔᐃΔⲆᐃ], ᐃⵠΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⲆⲆΔ].id = ⵠⵠ.ⲆⵠⲆⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃΔᐃᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠᐃⵠⲆⲆΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃΔᐃᐃ].id = ⵠⵠ.ⲆᐃΔᐃᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔΔᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⲆΔⲆⲆⲆ], ΔⲆΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔΔᐃΔ].id = ⵠⵠ.ΔΔΔᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⲆⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠᐃⲆΔⵠⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⲆⲆᐃ].id = ⵠⵠ.ⲆᐃⲆⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆᐃⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⲆⲆⲆⵠⲆ], ᐃⲆᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆᐃⲆᐃ].id = ⵠⵠ.ᐃⲆᐃⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆⲆⵠᐃⵠⵠ], ⲆΔᐃⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔᐃΔ].id = ⵠⵠ.ⵠⵠΔᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔᐃⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃᐃᐃⲆⲆⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔᐃⲆᐃ].id = ⵠⵠ.ΔΔᐃⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠᐃᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⵠⵠΔⵠΔ], ⵠⵠΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠᐃᐃ].id = ⵠⵠ.ⵠⵠⵠᐃᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠᐃᐃ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠᐃᐃ].info.ᐃᐃ[ᐃᐃᐃ];
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠΔᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆⵠᐃⲆΔΔ], ⲆⵠⲆᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠΔᐃⲆ].id = ⵠⵠ.ⲆⵠΔᐃⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔⵠⵠⲆⲆⲆ], ᐃⲆΔΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠᐃⲆ].id = ⵠⵠ.ΔⲆⵠᐃⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠᐃⲆ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠᐃⲆ].info.ᐃᐃ[ⲆⵠⲆⲆ];
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⲆⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆᐃᐃᐃᐃΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⲆⵠᐃ].id = ⵠⵠ.ΔᐃⲆⵠᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔⵠⵠⲆΔᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠΔⵠ].id = ⵠⵠ.ΔᐃⵠΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠⲆⲆⲆⲆᐃ], ⲆⵠⲆᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠⵠᐃ].id = ⵠⵠ.ⵠⵠⵠⵠᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠⵠᐃ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠⵠᐃ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠΔᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃᐃᐃⲆⲆΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠΔᐃⲆ].id = ⵠⵠ.ᐃⵠΔᐃⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⵠⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔᐃΔᐃⵠᐃ], ⲆᐃᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⵠⵠΔ].id = ⵠⵠ.ᐃΔⵠⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⲆⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⵠⵠᐃⵠᐃ], ⲆᐃᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⲆⵠΔ].id = ⵠⵠ.ᐃⵠⲆⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔⲆᐃΔΔⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠⵠΔ].id = ⵠⵠ.ΔⲆⵠⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆᐃⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠᐃⲆⲆᐃⲆ], ᐃⲆᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆᐃⵠⵠ].id = ⵠⵠ.ⵠⲆᐃⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃΔⲆⲆᐃⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃΔⵠ].id = ⵠⵠ.ⲆⲆᐃΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⵠΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠᐃⲆΔᐃⲆ], ΔⲆΔⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⵠΔΔ].id = ⵠⵠ.ᐃⵠⵠΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠΔᐃᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆⵠᐃⵠⲆΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠΔᐃᐃ].id = ⵠⵠ.ΔⵠΔᐃᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.Δⵠⵠⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⲆΔⲆⲆᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.Δⵠⵠⵠᐃ].id = ⵠⵠ.Δⵠⵠⵠᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.Δⵠⵠⵠᐃ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.Δⵠⵠⵠᐃ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⵠⵠⵠᐃᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔᐃⵠ].id = ⵠⵠ.ⵠⵠΔᐃⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔᐃⵠ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔᐃⵠ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠΔΔⲆⲆⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠᐃΔΔ].id = ⵠⵠ.ΔⵠᐃΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⲆⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⲆᐃᐃⲆᐃ], ᐃⲆΔΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⲆⲆΔ].id = ⵠⵠ.ⲆΔⲆⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⲆⲆΔ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⲆⲆΔ].info.ᐃᐃ[ⵠⵠⵠ];
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃΔⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⵠΔΔⵠᐃ], ᐃⵠΔⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃΔⵠᐃ].id = ⵠⵠ.ΔᐃΔⵠᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃⲆⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔΔⲆΔΔᐃ], ᐃⲆᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃⲆⵠΔ].id = ⵠⵠ.ⵠᐃⲆⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠΔⲆⲆᐃⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔⵠⵠ].id = ⵠⵠ.ⵠⵠΔⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃⲆⲆΔⲆᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠΔΔ].id = ⵠⵠ.ΔᐃⵠΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⵠⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆΔΔⵠⵠⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⵠⵠⵠ].id = ⵠⵠ.ᐃⵠⵠⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⵠⵠⵠ].info.ᐃᐃ[ⵠΔⵠΔ] = this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⵠⵠⵠ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠᐃⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⵠⲆᐃᐃⲆ], ⵠⵠΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠᐃⲆΔ].id = ⵠⵠ.ⵠⵠᐃⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠᐃⲆΔ].info.ᐃᐃ[ΔΔΔⵠ] = this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠᐃⲆΔ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔΔⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⵠᐃⲆⲆΔ], ᐃΔⵠⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔΔⲆᐃ].id = ⵠⵠ.ΔΔΔⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔⲆⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆΔᐃⲆⲆΔ], Δⵠⵠᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔⲆⵠᐃ].id = ⵠⵠ.ⵠΔⲆⵠᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆΔΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃᐃΔⵠⲆⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆΔΔΔ].id = ⵠⵠ.ⲆⲆΔΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆΔΔΔ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆΔΔΔ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⵠⵠΔΔΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠⲆᐃ].id = ⵠⵠ.ⵠⵠⵠⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠⲆᐃ].info.ᐃᐃ[ΔᐃⵠΔ] = this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⵠⲆᐃ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⲆⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆΔⲆⲆⵠΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⲆⵠΔ].id = ⵠⵠ.ᐃᐃⲆⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠΔΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠΔΔΔⵠⵠ], ᐃⵠΔᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠΔΔⲆ].id = ⵠⵠ.ⲆⵠΔΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠΔΔⲆ].info.ᐃᐃ[ΔᐃΔᐃ] = this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠΔΔⲆ].info.ᐃᐃ[ⲆⵠⲆⲆ];
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠΔⲆⲆΔⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔⵠΔ].id = ⵠⵠ.ᐃⲆΔⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔⵠΔ].info.ᐃᐃ[ⵠΔⵠΔ] = this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔⵠΔ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⲆᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⵠⲆᐃⲆᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⲆᐃΔ].id = ⵠⵠ.ⵠⲆⲆᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⵠΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔΔⵠΔⵠΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⵠΔᐃ].id = ⵠⵠ.ΔⵠⵠΔᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⵠΔᐃ].info.ᐃᐃ[ΔΔΔⵠ] = this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⵠΔᐃ].info.ᐃᐃ[0];
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⲆΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔΔⲆⲆᐃⲆ], ΔⲆⵠᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠⲆΔΔ].id = ⵠⵠ.ⵠⵠⲆΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔⲆᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆⵠⵠᐃᐃⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔⲆᐃⲆ].id = ⵠⵠ.ⵠΔⲆᐃⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⵠⵠⲆⲆᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔᐃΔΔ].id = ⵠⵠ.ΔΔᐃΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⲆⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆΔΔⵠⲆⵠ], ᐃⵠΔⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⲆⲆⲆ].id = ⵠⵠ.ᐃΔⲆⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃᐃⲆⵠⵠᐃ], ᐃⲆᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠΔⲆ].id = ⵠⵠ.ΔᐃⵠΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆⲆⵠⵠⵠⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔⲆⲆ].id = ⵠⵠ.ⵠⵠΔⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⲆⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃΔⵠΔᐃΔ], ᐃᐃᐃΔᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⲆⵠΔ].id = ⵠⵠ.ⲆᐃⲆⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⲆⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆⵠᐃⵠΔⵠ], ⵠⵠΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⲆⲆᐃ].id = ⵠⵠ.ΔⵠⲆⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⵠⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔᐃⲆⵠᐃⲆ], ᐃΔⲆΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⵠⲆⵠ].id = ⵠⵠ.ⲆΔⵠⲆⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃΔᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠΔⵠⵠⲆⲆ], ⲆᐃᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃΔᐃΔ].id = ⵠⵠ.ΔᐃΔᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃΔⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆΔⲆⲆᐃⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃΔⲆⲆ].id = ⵠⵠ.ΔᐃΔⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆΔⲆⲆΔⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔⲆΔ].id = ⵠⵠ.ᐃⲆΔⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆᐃⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆᐃᐃᐃΔⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆᐃⲆᐃ].id = ⵠⵠ.ΔⲆᐃⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃᐃⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠΔᐃΔⵠⵠ], ⲆᐃᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃᐃⲆⵠ].id = ⵠⵠ.ⲆᐃᐃⲆⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⵠΔⵠⵠᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠΔⵠ].id = ⵠⵠ.ⲆⲆⵠΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃΔⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠΔⵠⲆᐃᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃΔⵠᐃ].id = ⵠⵠ.ⲆᐃΔⵠᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⵠΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔⵠᐃⵠⲆⲆ], ΔⲆΔⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⵠΔⲆ].id = ⵠⵠ.ⲆᐃⵠΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⵠⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃⵠⲆⲆⵠΔ], ΔⲆΔⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⵠⵠⲆ].id = ⵠⵠ.ᐃᐃⵠⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔᐃⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆᐃΔⲆⲆᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔᐃⵠⵠ].id = ⵠⵠ.ⵠΔᐃⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃᐃᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔᐃᐃⵠᐃⲆ], ΔⲆΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃᐃᐃΔ].id = ⵠⵠ.ⲆᐃᐃᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔⲆⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔᐃⲆⲆᐃⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔⲆⲆᐃ].id = ⵠⵠ.ΔΔⲆⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⵠΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⵠⵠⲆᐃⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⵠΔⲆ].id = ⵠⵠ.ⵠⲆⵠΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆᐃⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃᐃⵠᐃⲆΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆᐃⵠⲆ].id = ⵠⵠ.ⵠⲆᐃⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⵠΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠᐃⲆᐃΔᐃ], ΔΔᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⵠΔΔ].id = ⵠⵠ.ⵠⲆⵠΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃᐃⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔᐃΔᐃΔΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃᐃⲆⲆ].id = ⵠⵠ.ΔᐃᐃⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔᐃΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⲆᐃᐃΔᐃ], ᐃⲆᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔᐃΔⵠ].id = ⵠⵠ.ⵠΔᐃΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⲆᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆⵠⵠⵠᐃΔ], ᐃⵠΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⲆᐃΔ].id = ⵠⵠ.ᐃⲆⲆᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔᐃΔΔⲆⲆ], ⲆᐃᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆᐃΔⲆ].id = ⵠⵠ.ⲆⲆᐃΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔⵠⵠᐃⵠΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠΔⲆ].id = ⵠⵠ.ⲆⲆⵠΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⵠⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔⵠⵠⲆⲆΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⵠⲆⲆ].id = ⵠⵠ.ⲆᐃⵠⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠᐃΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠᐃⲆΔⵠⵠ], ᐃᐃᐃΔᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠᐃΔᐃ].id = ⵠⵠ.ΔⵠᐃΔᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃΔⲆΔΔⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠⲆᐃ].id = ⵠⵠ.ΔᐃⵠⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃᐃΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃⵠᐃⲆⲆⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃᐃΔⲆ].id = ⵠⵠ.ΔᐃᐃΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠᐃⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔᐃⵠᐃΔⲆ], ΔⲆⵠᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠᐃⲆⲆ].id = ⵠⵠ.ⲆⵠᐃⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⲆᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⲆᐃⲆᐃᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⲆᐃⲆ].id = ⵠⵠ.ΔⲆⲆᐃⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃᐃΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃⵠᐃᐃⲆΔ], ΔⲆΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃᐃΔᐃ].id = ⵠⵠ.ⲆᐃᐃΔᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⲆⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃᐃΔᐃⲆᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⲆⵠⵠ].id = ⵠⵠ.ᐃΔⲆⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⲆⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⵠⵠⲆⲆⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⲆⲆᐃ].id = ⵠⵠ.ΔⲆⲆⲆᐃ;
		this.ᐃᐃⵠ = [];
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔᐃᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠᐃⲆⲆⵠΔ], ⵠⵠΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔᐃᐃⵠ].id = ⵠΔⲆ.ⵠΔᐃᐃⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔΔΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃᐃΔΔΔⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔΔΔΔ].id = ⵠΔⲆ.ΔΔΔΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆΔⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⵠⲆΔΔΔ], ⵠΔΔⲆᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆΔⵠⲆ].id = ⵠΔⲆ.ⲆⲆΔⵠⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠⵠⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆᐃΔⵠᐃΔ], ᐃΔⲆΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠⵠⲆᐃ].id = ⵠΔⲆ.ᐃⵠⵠⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠⵠⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔⲆⲆΔΔΔ], ᐃⵠΔᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠⵠⲆΔ].id = ⵠΔⲆ.ΔⵠⵠⲆΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆᐃⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⵠᐃⵠΔⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆᐃⵠΔ].id = ⵠΔⲆ.ⲆⲆᐃⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃΔΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔⵠΔΔᐃΔ], ᐃΔⵠⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃΔΔᐃ].id = ⵠΔⲆ.ⵠᐃΔΔᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⵠΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠⵠⵠⵠΔᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⵠΔΔ].id = ⵠΔⲆ.ⲆⲆⵠΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠⵠΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆⵠⲆⲆⲆⲆ], ΔⲆΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠⵠΔΔ].id = ⵠΔⲆ.ⲆⵠⵠΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⲆⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⵠΔⵠⵠⲆ], ⲆᐃᐃΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⲆⵠⲆ].id = ⵠΔⲆ.ΔᐃⲆⵠⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⲆΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⲆᐃⲆⵠⵠ], ᐃⵠΔᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⲆΔⲆ].id = ⵠΔⲆ.ΔᐃⲆΔⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔΔⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠᐃᐃΔᐃΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔΔⲆⲆ].id = ⵠΔⲆ.ⵠΔΔⲆⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔⵠᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆᐃⲆⵠⲆⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔⵠᐃⲆ].id = ⵠΔⲆ.ΔΔⵠᐃⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆΔⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠᐃΔᐃΔᐃ], ΔⲆΔⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆΔⲆⵠ].id = ⵠΔⲆ.ᐃⲆΔⲆⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆⵠΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆᐃⵠΔⲆᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆⵠΔΔ].id = ⵠΔⲆ.ᐃⲆⵠΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔⲆⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⵠΔΔΔᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔⲆⲆⲆ].id = ⵠΔⲆ.ⵠΔⲆⲆⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃΔⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔⵠⲆⲆⵠᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃΔⵠⵠ].id = ⵠΔⲆ.ΔᐃΔⵠⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃᐃᐃᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆⲆΔⵠΔⲆ], ᐃⲆΔΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃᐃᐃᐃ].id = ⵠΔⲆ.ᐃᐃᐃᐃᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆΔᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆⵠΔⵠΔⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆΔᐃⵠ].id = ⵠΔⲆ.ΔⲆΔᐃⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⲆⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠᐃᐃⲆΔᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⲆⵠⲆ].id = ⵠΔⲆ.ᐃΔⲆⵠⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠᐃⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆΔⲆΔⵠᐃ], ⲆΔⵠⵠⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠᐃⲆΔ].id = ⵠΔⲆ.ᐃⵠᐃⲆΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠⲆΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆⵠᐃⵠⲆⲆ], Δⵠⵠᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠⲆΔⵠ].id = ⵠΔⲆ.ᐃⵠⲆΔⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠⵠᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆⵠⲆΔⵠΔ], ᐃΔⵠⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠⵠᐃΔ].id = ⵠΔⲆ.ⵠⵠⵠᐃΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔΔⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆⲆΔΔⵠⵠ], ⲆⵠⲆᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔΔⵠΔ].id = ⵠΔⲆ.ⵠΔΔⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⵠⵠⵠⲆⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃⵠⲆ].id = ⵠΔⲆ.ⵠᐃⵠⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆΔΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔΔᐃⲆᐃᐃ], ᐃⵠΔᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆΔΔΔ].id = ⵠΔⲆ.ⵠⲆΔΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆⲆᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔⵠᐃᐃⲆⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆⲆᐃⵠ].id = ⵠΔⲆ.ⵠⲆⲆᐃⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.Δⵠᐃⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆⵠⲆΔᐃᐃ], ᐃⵠΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.Δⵠᐃⵠⵠ].id = ⵠΔⲆ.Δⵠᐃⵠⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⲆⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔⵠᐃᐃⲆⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⲆⲆⵠ].id = ⵠΔⲆ.ⲆⲆⲆⲆⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆΔΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔΔᐃⲆᐃᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆΔΔΔ].id = ⵠΔⲆ.ⵠⲆΔΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆⲆΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠΔⵠᐃΔⵠ], ᐃΔⲆΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆⲆΔⵠ].id = ⵠΔⲆ.ⵠⲆⲆΔⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⵠΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠᐃⵠⵠᐃΔ], Δⵠⵠᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⵠΔⲆ].id = ⵠΔⲆ.ⲆⲆⵠΔⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔΔⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃΔⲆⵠⲆⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔΔⵠⵠ].id = ⵠΔⲆ.ⲆΔΔⵠⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔⵠΔⲆᐃⵠ], ⲆΔᐃⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠᐃΔΔ].id = ⵠΔⲆ.ᐃⵠᐃΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠⵠⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔΔᐃⵠⵠΔ], ᐃⵠΔⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠⵠⵠΔ].id = ⵠΔⲆ.ΔⵠⵠⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⵠⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠⲆⵠⲆΔⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⵠⲆⲆ].id = ⵠΔⲆ.ⲆᐃⵠⲆⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆⲆⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃⵠⲆⵠⵠⵠ], ᐃⵠΔⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆⲆⲆΔ].id = ⵠΔⲆ.ᐃⲆⲆⲆΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠᐃΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆᐃᐃⲆΔⲆ], ⵠⵠΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠᐃΔⵠ].id = ⵠΔⲆ.ⲆⵠᐃΔⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆⲆⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃⲆᐃΔⲆΔ], ⲆⲆᐃⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆⲆⵠΔ].id = ⵠΔⲆ.ΔⲆⲆⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆⲆⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⵠᐃⲆᐃⵠ], ⵠΔΔⲆᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆⲆⲆⵠ].id = ⵠΔⲆ.ᐃⲆⲆⲆⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠⲆΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔΔⲆΔⵠᐃ], ΔⲆΔⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠⲆΔΔ].id = ⵠΔⲆ.ΔⵠⲆΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆΔΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃᐃᐃΔᐃᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆΔΔⵠ].id = ⵠΔⲆ.ᐃⲆΔΔⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⲆΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆⲆⲆⲆⲆⲆ], ⵠⵠΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⲆΔΔ].id = ⵠΔⲆ.ᐃΔⲆΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃΔⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⵠⵠⵠᐃⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃΔⲆᐃ].id = ⵠΔⲆ.ⵠᐃΔⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠⲆΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆᐃΔᐃΔΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠⲆΔΔ].id = ⵠΔⲆ.ᐃⵠⲆΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⲆᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔΔΔΔᐃⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⲆᐃⵠ].id = ⵠΔⲆ.ᐃΔⲆᐃⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆΔᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆΔᐃᐃⵠⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆΔᐃΔ].id = ⵠΔⲆ.ⲆⲆΔᐃΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆᐃⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃΔⲆⵠⵠⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆᐃⲆΔ].id = ⵠΔⲆ.ⲆⲆᐃⲆΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔⲆⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠΔⲆⵠΔΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔⲆⲆΔ].id = ⵠΔⲆ.ⵠΔⲆⲆΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⵠᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃⵠⲆΔⲆⵠ], ΔΔᐃΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⵠᐃΔ].id = ⵠΔⲆ.ΔᐃⵠᐃΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆΔΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃᐃΔⵠᐃᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆΔΔΔ].id = ⵠΔⲆ.ᐃⲆΔΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆⲆⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔΔⵠⵠΔⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆⲆⵠⵠ].id = ⵠΔⲆ.ᐃⲆⲆⵠⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔⵠⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃᐃⵠᐃⲆΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔⵠⲆᐃ].id = ⵠΔⲆ.ⲆΔⵠⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠᐃⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃⵠᐃᐃⲆⵠ], ᐃΔⵠⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠᐃⲆⲆ].id = ⵠΔⲆ.ⵠⵠᐃⲆⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃⲆᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔᐃⲆⲆⲆⵠ], ΔⲆΔⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃⲆᐃΔ].id = ⵠΔⲆ.ⵠᐃⲆᐃΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⲆⵠᐃΔΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔᐃΔΔ].id = ⵠΔⲆ.ᐃΔᐃΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃⵠΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠΔᐃⵠⵠΔ], ⲆⵠⲆᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃⵠΔⵠ].id = ⵠΔⲆ.ᐃᐃⵠΔⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⵠΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔⵠΔⲆⵠⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⵠΔᐃ].id = ⵠΔⲆ.ⲆⲆⵠΔᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆⵠⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠᐃΔⵠⲆⵠ], ⲆⲆᐃⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆⵠⲆⵠ].id = ⵠΔⲆ.ΔⲆⵠⲆⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆΔⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃΔⵠⵠⵠⵠ], ⲆⲆᐃⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆΔⵠΔ].id = ⵠΔⲆ.ⲆⲆΔⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠΔⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⵠᐃⲆⵠⵠ], ᐃⵠΔᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠΔⵠⲆ].id = ⵠΔⲆ.ΔⵠΔⵠⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆᐃᐃᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔᐃⵠⵠΔⵠ], ⵠΔΔⲆᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆᐃᐃᐃ].id = ⵠΔⲆ.ΔⲆᐃᐃᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃⵠⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔᐃⵠⲆⲆΔ], ᐃΔⵠⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃⵠⲆⵠ].id = ⵠΔⲆ.ⵠᐃⵠⲆⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃΔⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔⵠⵠΔⵠᐃ], ᐃⵠΔⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃΔⵠΔ].id = ⵠΔⲆ.ⵠᐃΔⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃΔⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠᐃΔⵠⲆⵠ], ΔⲆΔⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃΔⲆᐃ].id = ⵠΔⲆ.ⲆᐃΔⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠⲆⵠⲆΔⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃᐃΔΔ].id = ⵠΔⲆ.ⵠᐃᐃΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃΔΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃᐃᐃᐃΔⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃΔΔΔ].id = ⵠΔⲆ.ⵠᐃΔΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔⵠⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠΔⵠⵠⲆⲆ], ᐃⲆᐃΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔⵠⲆΔ].id = ⵠΔⲆ.ΔΔⵠⲆΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆⵠⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠΔⲆⵠⵠΔ], Δⵠⵠᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆⵠⲆΔ].id = ⵠΔⲆ.ⵠⲆⵠⲆΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠⲆΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠⲆⵠⲆⲆⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠⲆΔⵠ].id = ⵠΔⲆ.ⲆⵠⲆΔⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔΔΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃᐃⲆⵠΔⵠ], ᐃᐃᐃΔᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔΔΔᐃ].id = ⵠΔⲆ.ᐃΔΔΔᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⵠⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⲆⲆⲆᐃᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⵠⵠⲆ].id = ⵠΔⲆ.ΔᐃⵠⵠⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆᐃⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠΔᐃΔⲆⵠ], ᐃⵠΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆᐃⵠⲆ].id = ⵠΔⲆ.ⲆⲆᐃⵠⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃΔⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⵠⲆΔᐃⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃΔⲆᐃ].id = ⵠΔⲆ.ᐃᐃΔⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⵠⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠᐃⲆⵠᐃⲆ], ⵠⵠΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⵠⵠⲆ].id = ⵠΔⲆ.ⲆᐃⵠⵠⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⵠⵠⵠⲆⵠ], ᐃⵠΔⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃⵠⲆ].id = ⵠΔⲆ.ⵠᐃⵠⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠⲆⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠΔᐃⵠΔΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠⲆⲆΔ].id = ⵠΔⲆ.ᐃⵠⲆⲆΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔⵠⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠⵠΔᐃⵠⵠ], ΔⲆΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔⵠⵠᐃ].id = ⵠΔⲆ.ⲆΔⵠⵠᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠⲆᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃΔⲆⲆⲆΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠⲆᐃΔ].id = ⵠΔⲆ.ⲆⵠⲆᐃΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠΔⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔᐃᐃΔⲆⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠΔⲆⲆ].id = ⵠΔⲆ.ⲆⵠΔⲆⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃᐃᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃΔᐃᐃⵠΔ], ⲆΔᐃⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃᐃᐃⲆ].id = ⵠΔⲆ.ⵠᐃᐃᐃⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔΔᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆⲆⲆΔΔⲆ], ⵠⵠΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔΔᐃΔ].id = ⵠΔⲆ.ⲆΔΔᐃΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.Ⲇᐃᐃᐃᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⲆΔᐃⲆⵠ], ᐃΔⲆΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.Ⲇᐃᐃᐃᐃ].id = ⵠΔⲆ.Ⲇᐃᐃᐃᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔⵠᐃᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⵠⵠᐃⲆⵠ], ᐃⲆΔΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔⵠᐃᐃ].id = ⵠΔⲆ.ⵠΔⵠᐃᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⵠΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⲆⲆⲆⲆⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⵠΔⵠ].id = ⵠΔⲆ.ⲆᐃⵠΔⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆΔΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆᐃⵠΔⵠⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆΔΔⵠ].id = ⵠΔⲆ.ⵠⲆΔΔⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆⲆΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠⵠΔⲆΔᐃ], ⲆⵠⲆᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆⲆΔⲆ].id = ⵠΔⲆ.ᐃⲆⲆΔⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⲆⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆΔⵠᐃⵠⵠ], ΔⲆΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⲆⵠⲆ].id = ⵠΔⲆ.ⲆⲆⲆⵠⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠⵠᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃⵠᐃⲆⲆΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠⵠᐃΔ].id = ⵠΔⲆ.ᐃⵠⵠᐃΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆⵠⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠΔᐃΔⵠⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆⵠⲆⲆ].id = ⵠΔⲆ.ⵠⲆⵠⲆⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃᐃⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠᐃᐃⵠΔᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃᐃⲆᐃ].id = ⵠΔⲆ.ᐃᐃᐃⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⵠⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆⵠᐃⵠⵠⲆ], ⵠΔΔⲆᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⵠⲆΔ].id = ⵠΔⲆ.ⲆⲆⵠⲆΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠⲆᐃᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃΔⵠᐃⲆⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠⲆᐃᐃ].id = ⵠΔⲆ.ⲆⵠⲆᐃᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠΔⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃⲆᐃΔⲆΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠΔⲆᐃ].id = ⵠΔⲆ.ᐃⵠΔⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃⲆΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⵠᐃΔⲆᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃⲆΔⲆ].id = ⵠΔⲆ.ᐃᐃⲆΔⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔΔⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆΔᐃΔΔⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔΔⲆΔ].id = ⵠΔⲆ.ΔΔΔⲆΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃΔⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⲆⵠΔᐃᐃ], ΔⲆΔⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃΔⵠⲆ].id = ⵠΔⲆ.ⲆᐃΔⵠⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠᐃⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔᐃⲆᐃⲆⲆ], ΔⲆΔⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠᐃⲆⲆ].id = ⵠΔⲆ.ΔⵠᐃⲆⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆᐃᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃⵠᐃᐃⵠΔ], ΔⲆⵠᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆᐃᐃΔ].id = ⵠΔⲆ.ⲆⲆᐃᐃΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃᐃⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃᐃΔⲆᐃⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃᐃⵠⲆ].id = ⵠΔⲆ.ⲆᐃᐃⵠⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⲆᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⵠΔΔᐃΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⲆᐃⲆ].id = ⵠΔⲆ.ᐃΔⲆᐃⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠⵠⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆᐃⲆⲆᐃⵠ], ⲆⵠⲆᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠⵠⵠΔ].id = ⵠΔⲆ.ⵠⵠⵠⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⵠΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆⵠⲆᐃⵠΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⵠΔᐃ].id = ⵠΔⲆ.ᐃΔⵠΔᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔᐃⵠⲆΔⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆᐃΔΔ].id = ⵠΔⲆ.ⲆⲆᐃΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠⲆⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⵠⵠⲆⵠⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠⲆⵠᐃ].id = ⵠΔⲆ.ⲆⵠⲆⵠᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔΔᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔᐃᐃΔΔⵠ], ΔⲆΔⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔΔᐃⲆ].id = ⵠΔⲆ.ⲆΔΔᐃⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆⲆⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆⵠᐃⵠᐃΔ], ᐃⵠΔⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆⲆⵠᐃ].id = ⵠΔⲆ.ⵠⲆⲆⵠᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃΔᐃᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃΔⵠΔⵠⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃΔᐃᐃ].id = ⵠΔⲆ.ⲆᐃΔᐃᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠⲆⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔΔⵠᐃΔⵠ], ᐃᐃᐃΔᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠⲆⲆΔ].id = ⵠΔⲆ.ⲆⵠⲆⲆΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⵠⵠΔΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔΔⵠᐃΔⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⵠⵠΔΔⵠ].id = ⵠΔⲆ.ᐃΔⵠⵠΔΔⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆⵠⲆⵠⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔΔⵠᐃΔⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆⵠⲆⵠⲆⵠ].id = ⵠΔⲆ.ΔⲆⵠⲆⵠⲆⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔΔᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠᐃⵠⲆΔⵠ], ΔⲆΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔΔᐃΔ].id = ⵠΔⲆ.ΔΔΔᐃΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⲆⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔᐃΔⵠⲆⲆ], ᐃΔⵠⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⲆⲆᐃ].id = ⵠΔⲆ.ⲆᐃⲆⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆᐃⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠᐃΔⲆⵠΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆᐃⲆᐃ].id = ⵠΔⲆ.ᐃⲆᐃⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠΔᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠᐃΔΔⲆΔ], ⵠⵠΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠΔᐃΔ].id = ⵠΔⲆ.ⵠⵠΔᐃΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔᐃⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆΔΔⲆΔⲆ], ᐃΔⵠⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔᐃⲆᐃ].id = ⵠΔⲆ.ΔΔᐃⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠΔᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔΔⲆⵠᐃⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠΔᐃⲆ].id = ⵠΔⲆ.ⲆⵠΔᐃⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⲆⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔᐃᐃⵠΔᐃ], ⲆΔᐃⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⲆⵠᐃ].id = ⵠΔⲆ.ΔᐃⲆⵠᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⵠΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔᐃᐃⵠΔⵠ], ᐃΔⲆΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⵠΔⵠ].id = ⵠΔⲆ.ΔᐃⵠΔⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠΔᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔΔⲆΔⵠⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠΔᐃⲆ].id = ⵠΔⲆ.ᐃⵠΔᐃⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⵠⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆᐃⵠΔⲆⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⵠⵠΔ].id = ⵠΔⲆ.ᐃΔⵠⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠⲆⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆⵠⵠⵠⲆΔ], ᐃⵠΔⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⵠⲆⵠΔ].id = ⵠΔⲆ.ᐃⵠⲆⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆⵠⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠΔⲆⵠΔⵠ], ᐃΔⲆΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆⵠⵠΔ].id = ⵠΔⲆ.ΔⲆⵠⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆᐃⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆⵠⵠΔᐃⲆ], ᐃΔⲆΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆᐃⵠⵠ].id = ⵠΔⲆ.ⵠⲆᐃⵠⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆᐃΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⲆⲆΔΔⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆᐃΔⵠ].id = ⵠΔⲆ.ⲆⲆᐃΔⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠΔᐃᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃΔΔⲆᐃⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠΔᐃᐃ].id = ⵠΔⲆ.ΔⵠΔᐃᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃᐃᐃⲆⲆⵠ], ᐃⲆΔΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠᐃΔΔ].id = ⵠΔⲆ.ΔⵠᐃΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃΔⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔⵠΔᐃⵠΔ], ⲆΔᐃⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃΔⵠᐃ].id = ⵠΔⲆ.ΔᐃΔⵠᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃⲆⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆᐃΔⵠᐃⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃⲆⵠΔ].id = ⵠΔⲆ.ⵠᐃⲆⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠΔⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆᐃΔⵠⵠⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠΔⵠⵠ].id = ⵠΔⲆ.ⵠⵠΔⵠⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⵠΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃⲆⲆΔⲆᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⵠΔΔ].id = ⵠΔⲆ.ΔᐃⵠΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃⲆⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⵠⵠⵠᐃᐃ], ᐃⲆΔΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃⲆⵠΔ].id = ⵠΔⲆ.ᐃᐃⲆⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆⲆᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⲆⲆⲆⵠⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆⲆᐃΔ].id = ⵠΔⲆ.ⵠⲆⲆᐃΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠⲆΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔᐃⵠⵠⲆΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠⲆΔΔ].id = ⵠΔⲆ.ⵠⵠⲆΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔⲆᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃⲆΔᐃᐃᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔⲆᐃⲆ].id = ⵠΔⲆ.ⵠΔⲆᐃⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆΔᐃⲆΔᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔᐃΔΔ].id = ⵠΔⲆ.ΔΔᐃΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠΔⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃᐃⲆΔΔⲆ], ⵠⵠΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠΔⲆⲆ].id = ⵠΔⲆ.ⵠⵠΔⲆⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⲆⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔΔᐃΔᐃⵠ], Δⵠⵠᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⲆⵠΔ].id = ⵠΔⲆ.ⲆᐃⲆⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠⲆⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃⲆᐃᐃⵠⲆ], ᐃΔⲆΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⵠⲆⲆᐃ].id = ⵠΔⲆ.ΔⵠⲆⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔⵠⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆⵠΔΔΔΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔⵠⲆⵠ].id = ⵠΔⲆ.ⲆΔⵠⲆⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃΔᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠⵠⲆᐃⵠᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃΔᐃΔ].id = ⵠΔⲆ.ΔᐃΔᐃΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃΔⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆⵠΔⵠᐃΔ], Δⵠⵠᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃΔⲆⲆ].id = ⵠΔⲆ.ΔᐃΔⲆⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆΔⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠΔⲆᐃΔΔ], ᐃⵠΔᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆΔⲆΔ].id = ⵠΔⲆ.ᐃⲆΔⲆΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃᐃⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔⲆΔⲆᐃⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃᐃⲆⵠ].id = ⵠΔⲆ.ⲆᐃᐃⲆⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃΔⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃᐃⵠⵠᐃⲆ], ᐃⵠΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃΔⵠᐃ].id = ⵠΔⲆ.ⲆᐃΔⵠᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⵠΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆᐃᐃᐃᐃᐃ], ⵠΔΔⲆᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⵠΔⲆ].id = ⵠΔⲆ.ⲆᐃⵠΔⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔⲆⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⲆΔⲆⵠᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔⲆⲆᐃ].id = ⵠΔⲆ.ΔΔⲆⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔᐃⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠᐃΔⲆΔᐃ], ΔΔᐃΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔᐃⵠⵠ].id = ⵠΔⲆ.ⵠΔᐃⵠⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆᐃⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔⵠⵠⵠⵠⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆᐃⵠⲆ].id = ⵠΔⲆ.ⵠⲆᐃⵠⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃᐃⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠΔΔᐃⵠⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃᐃⲆⲆ].id = ⵠΔⲆ.ΔᐃᐃⲆⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⵠΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠᐃⵠⵠᐃΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⵠΔⲆ].id = ⵠΔⲆ.ⲆⲆⵠΔⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⵠⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠⲆⵠⲆΔⵠ], ᐃᐃᐃΔᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⵠⲆⲆ].id = ⵠΔⲆ.ⲆᐃⵠⲆⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⵠⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆᐃΔᐃⲆᐃ], ᐃⵠΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔᐃⵠⲆᐃ].id = ⵠΔⲆ.ΔᐃⵠⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠᐃⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠⲆᐃΔᐃΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠᐃⲆⲆ].id = ⵠΔⲆ.ⲆⵠᐃⲆⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆⲆᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⲆΔⲆⵠⵠ], ᐃΔⵠⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆⲆᐃⲆ].id = ⵠΔⲆ.ΔⲆⲆᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆΔⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔΔⵠΔΔᐃⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆΔⵠⵠ].id = ⵠⵠ.ᐃⲆΔⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔⲆⵠΔΔⵠ], ⲆᐃᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔⵠⵠ].id = ⵠⵠ.ᐃⲆΔⵠⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆΔⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔΔⵠⲆΔⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆΔⵠⵠ].id = ⵠΔⲆ.ᐃⲆΔⵠⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⵠⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆⵠΔⵠⲆΔ], ΔΔᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠⵠⲆᐃ].id = ⵠⵠ.ⲆⵠⵠⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⵠⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆⵠᐃᐃΔᐃ], ΔΔᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠⵠⲆᐃ].id = ⵠⵠ.ⲆⵠⵠⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠⵠⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔⵠⵠΔⵠⵠ], ΔⲆΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠⵠⲆᐃ].id = ⵠΔⲆ.ⲆⵠⵠⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠΔⵠᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⲆⲆⲆⵠᐃⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠΔⵠᐃ].id = ⵠⵠ.ⵠⵠΔⵠᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃΔⲆⲆᐃΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔⵠᐃ].id = ⵠⵠ.ⵠⵠΔⵠᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠΔⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⲆΔⲆⵠⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠΔⵠᐃ].id = ⵠΔⲆ.ⵠⵠΔⵠᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔΔΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃⵠΔΔⵠᐃ], ΔⲆΔⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔΔΔⲆ].id = ⵠⵠ.ᐃΔΔΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔΔΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠᐃⵠⵠⲆΔ], ΔⲆΔⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔΔΔⲆ].id = ⵠⵠ.ᐃΔΔΔⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔΔΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠᐃᐃⲆΔΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔΔΔⲆ].id = ⵠΔⲆ.ᐃΔΔΔⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃᐃⵠⵠᐃⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⲆᐃΔᐃᐃⵠ], ⵠΔΔⲆᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃᐃⵠⵠᐃⵠ].id = ⵠⵠ.ⵠᐃᐃⵠⵠᐃⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃᐃⵠⵠᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⲆΔᐃΔΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃᐃⵠⵠᐃⵠ].id = ⵠⵠ.ⵠᐃᐃⵠⵠᐃⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃⲆᐃⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠᐃᐃⲆⵠΔΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃⲆᐃⵠ].id = ⵠⵠ.ⵠᐃⲆᐃⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃⲆᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆᐃΔΔᐃⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃⲆᐃⵠ].id = ⵠⵠ.ⵠᐃⲆᐃⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⲆⲆⲆᐃⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠΔΔⲆⵠᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⲆⲆⲆᐃⲆ].id = ⵠⵠ.ΔⲆⲆⲆⲆᐃⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⲆⲆⲆᐃⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠⵠΔⲆΔᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⲆⲆⲆᐃⲆ].id = ⵠⵠ.ΔⲆⲆⲆⲆᐃⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⲆᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠᐃⲆⵠΔΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⲆᐃΔ].id = ⵠⵠ.ᐃᐃⲆᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⲆᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔᐃⲆᐃⵠⵠ], ΔⲆΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⲆᐃΔ].id = ⵠⵠ.ᐃᐃⲆᐃΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃⲆᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃᐃΔΔⲆⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃⲆᐃΔ].id = ⵠΔⲆ.ᐃᐃⲆᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔᐃΔᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔᐃΔΔⲆᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔᐃΔᐃ].id = ⵠⵠ.ⲆΔᐃΔᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔᐃΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⵠᐃⲆᐃⵠ], ⲆⵠⲆᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔᐃΔᐃ].id = ⵠⵠ.ⲆΔᐃΔᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔᐃΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⵠⲆⲆΔΔ], ᐃⲆᐃΔ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔᐃΔᐃ].id = ⵠΔⲆ.ⲆΔᐃΔᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔΔⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠⵠⲆⲆᐃⲆ], ΔⲆΔⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔΔⵠΔ].id = ⵠⵠ.ⲆΔΔⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔΔⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⵠⲆΔΔⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔΔⵠΔ].id = ⵠⵠ.ⲆΔΔⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔΔⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃΔᐃΔⵠΔ], ᐃΔⵠⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔΔⵠΔ].id = ⵠΔⲆ.ⲆΔΔⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠΔⲆΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⵠⲆⵠⵠⲆⵠ], ᐃΔⲆΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠΔⲆΔ].id = ⵠⵠ.ⵠⵠΔⲆΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃᐃⲆᐃⲆΔ], ⵠⵠΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠΔⲆΔ].id = ⵠⵠ.ⵠⵠΔⲆΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠΔⲆΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆᐃⲆᐃΔⲆ], ⲆⲆᐃⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠΔⲆΔ].id = ⵠΔⲆ.ⵠⵠΔⲆΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⵠΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠⵠΔⲆⵠⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⵠΔΔ].id = ⵠⵠ.ⲆᐃⵠΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⵠΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠⵠⲆⲆᐃⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⵠΔΔ].id = ⵠⵠ.ⲆᐃⵠΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⵠΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⲆᐃᐃⵠΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆᐃⵠΔΔ].id = ⵠΔⲆ.ⲆᐃⵠΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠᐃᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠᐃᐃᐃⵠΔⵠ], ᐃΔⲆΔ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠᐃᐃΔ].id = ⵠⵠ.ⵠⵠᐃᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠᐃᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⲆᐃⵠΔⵠ], ᐃⵠΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠᐃᐃΔ].id = ⵠⵠ.ⵠⵠᐃᐃΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠᐃᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⲆⵠⲆΔⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠᐃᐃΔ].id = ⵠΔⲆ.ⵠⵠᐃᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠΔⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃᐃΔᐃⲆⲆⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⵠΔⵠⵠ].id = ⵠⵠ.ⲆⵠΔⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠΔⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠΔᐃΔⵠΔ], ⲆⵠⲆᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⵠΔⵠⵠ].id = ⵠⵠ.ⲆⵠΔⵠⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠΔⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠΔᐃΔᐃᐃⲆ], ⲆⵠⲆᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⵠΔⵠⵠ].id = ⵠΔⲆ.ⲆⵠΔⵠⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⵠⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔᐃⲆᐃⲆⵠ], ⲆⲆᐃⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⵠⲆⲆ].id = ⵠⵠ.ᐃⲆⵠⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⵠⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆᐃᐃᐃΔΔ], ⲆᐃᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⵠⲆⲆ].id = ⵠⵠ.ᐃⲆⵠⲆⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆⵠⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃⵠⲆᐃᐃᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆⵠⲆⲆ].id = ⵠΔⲆ.ᐃⲆⵠⲆⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔΔⵠⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠΔΔΔⲆⵠ], ᐃⲆΔΔ);
		this.ᐃⵠΔ[ⵠⵠ.ΔΔⵠⵠΔ].id = ⵠⵠ.ΔΔⵠⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔⵠⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠΔⵠⵠᐃⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔⵠⵠΔ].id = ⵠⵠ.ΔΔⵠⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔⵠⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆⲆΔⵠᐃᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔⵠⵠΔ].id = ⵠΔⲆ.ΔΔⵠⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆΔⲆⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆᐃⲆΔΔⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆΔⲆⵠ].id = ⵠⵠ.ⵠⲆΔⲆⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆΔⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃⲆΔΔΔⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆΔⲆⵠ].id = ⵠⵠ.ⵠⲆΔⲆⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆΔⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆᐃᐃⵠᐃⲆ], ᐃⵠΔⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆΔⲆⵠ].id = ⵠΔⲆ.ⵠⲆΔⲆⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔᐃΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆΔⲆⲆΔᐃᐃ], ΔⲆΔⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔᐃΔΔ].id = ⵠⵠ.ⵠΔᐃΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔᐃⵠⲆΔᐃ], Δⵠⵠᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔᐃΔΔ].id = ⵠⵠ.ⵠΔᐃΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃᐃⵠⲆΔΔ], Δⵠⵠᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔᐃΔΔ].id = ⵠΔⲆ.ⵠΔᐃΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⵠΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃⵠⵠⲆᐃⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⵠΔⲆ].id = ⵠⵠ.ΔⲆⵠΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠΔⲆⵠⲆⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠΔⲆ].id = ⵠⵠ.ΔⲆⵠΔⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆⵠΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃᐃⵠΔᐃᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆⵠΔⲆ].id = ⵠΔⲆ.ΔⲆⵠΔⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⲆᐃΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠΔᐃⲆᐃΔ], ⲆΔᐃⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔⲆᐃΔ].id = ⵠⵠ.ᐃΔⲆᐃΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⲆᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔᐃⵠⲆᐃᐃ], ⵠΔΔⲆᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔⲆᐃΔ].id = ⵠⵠ.ᐃΔⲆᐃΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⲆᐃΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃΔⲆΔΔⲆ], ᐃᐃᐃΔᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃΔⲆᐃΔ].id = ⵠΔⲆ.ᐃΔⲆᐃΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠᐃΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆᐃⲆⲆᐃⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⵠᐃΔΔ].id = ⵠⵠ.ⵠⵠᐃΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⲆΔⲆΔⲆ], ᐃΔⵠⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⵠᐃΔΔ].id = ⵠⵠ.ⵠⵠᐃΔΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠᐃΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃⲆⲆⲆⵠᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⵠᐃΔΔ].id = ⵠΔⲆ.ⵠⵠᐃΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⲆΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆᐃⲆᐃⵠΔΔ], ᐃⵠΔⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ⵠⲆⲆΔⲆ].id = ⵠⵠ.ⵠⲆⲆΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⲆΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⲆΔΔⵠⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠⲆⲆΔⲆ].id = ⵠⵠ.ⵠⲆⲆΔⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆⲆΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⲆᐃΔⵠᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠⲆⲆΔⲆ].id = ⵠΔⲆ.ⵠⲆⲆΔⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠΔᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠᐃΔⵠΔⲆⲆ], ΔΔᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠΔᐃ].id = ⵠⵠ.ΔᐃⵠΔᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠΔᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆⲆⵠⵠⵠⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠΔᐃ].id = ⵠⵠ.ΔᐃⵠΔᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠΔᐃ].info.ᐃᐃ[ᐃⲆᐃⵠ] = this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠΔᐃ].info.ᐃᐃ[ΔΔᐃᐃ];
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔⲆⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⵠⵠⵠᐃΔᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔⲆⵠⲆ].id = ⵠⵠ.ⲆΔⲆⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⲆⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠΔⲆᐃᐃΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⲆⵠⲆ].id = ⵠⵠ.ⲆΔⲆⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⲆⵠⲆ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⲆⵠⲆ].info.ᐃᐃ[ΔⲆⲆ];
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⲆⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠⵠᐃΔⲆⵠ], ⲆΔⵠⵠⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆᐃⲆⲆ].id = ⵠⵠ.ⲆᐃⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⲆⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔΔⵠΔⲆⲆᐃ], ⲆᐃᐃΔ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⲆⲆ].id = ⵠⵠ.ⲆᐃⲆⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⲆⲆ].info.ᐃᐃ[2] = this.ᐃⵠⵠ[ⵠⵠ.ⲆᐃⲆⲆ].info.ᐃᐃ[ᐃᐃᐃ];
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⵠⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⲆΔⲆⲆᐃⲆ], ⲆⵠⲆᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⵠⵠⵠ].id = ⵠⵠ.ᐃᐃⵠⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⵠⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃᐃᐃⵠ], ΔⲆⵠᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⵠⵠⵠ].id = ⵠⵠ.ᐃᐃⵠⵠⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃⵠⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔⲆⵠⲆⲆⲆ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃⵠⵠⵠ].id = ⵠΔⲆ.ᐃᐃⵠⵠⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⵠⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆᐃⵠΔᐃⵠᐃ], ⲆⲆᐃⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃᐃⵠⲆᐃ].id = ⵠⵠ.ᐃᐃⵠⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⵠⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆᐃΔᐃᐃΔᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃᐃⵠⲆᐃ].id = ⵠⵠ.ᐃᐃⵠⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃⵠⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆⵠⲆⲆⵠⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃᐃⵠⲆᐃ].id = ⵠΔⲆ.ᐃᐃⵠⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆΔΔⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⵠⲆᐃⵠΔⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆΔΔⵠ].id = ⵠⵠ.ΔⲆΔΔⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆΔΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆΔΔⵠⵠΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆΔΔⵠ].id = ⵠⵠ.ΔⲆΔΔⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆΔΔⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.Δᐃⵠⵠⵠⵠᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆΔΔⵠ].id = ⵠΔⲆ.ΔⲆΔΔⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔⵠⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠⲆᐃᐃⲆⵠ], ᐃⵠΔⵠ);
		this.ᐃⵠΔ[ⵠⵠ.ⲆΔⵠⵠⲆ].id = ⵠⵠ.ⲆΔⵠⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⵠⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⵠᐃⵠΔᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆΔⵠⵠⲆ].id = ⵠⵠ.ⲆΔⵠⵠⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔⵠⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔᐃᐃⲆᐃᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆΔⵠⵠⲆ].id = ⵠΔⲆ.ⲆΔⵠⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⲆⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔⲆΔⵠΔΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⲆⵠΔ].id = ⵠⵠ.ᐃⲆⲆⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⲆⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⲆᐃΔⲆᐃ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⲆⵠΔ].id = ⵠⵠ.ᐃⲆⲆⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆⲆⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠᐃⲆⲆⵠⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆⲆⵠΔ].id = ⵠΔⲆ.ᐃⲆⲆⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⵠⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆΔΔΔᐃᐃⵠ], ᐃⵠΔᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆⵠⵠⲆ].id = ⵠⵠ.ΔⲆⵠⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆᐃᐃⵠᐃΔ], ΔⲆΔⲆ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆⵠⵠⲆ].id = ⵠⵠ.ΔⲆⵠⵠⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆⵠⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆᐃⵠⵠⵠᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆⵠⵠⲆ].id = ⵠΔⲆ.ΔⲆⵠⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⵠⵠΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃⵠᐃⲆⵠⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆⵠⵠΔ].id = ⵠⵠ.ⲆⲆⵠⵠΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⲆΔⲆⲆΔ], ⵠⵠΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆⵠⵠΔ].id = ⵠⵠ.ⲆⲆⵠⵠΔ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⵠⵠΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⵠⲆᐃⲆᐃⵠ], ᐃᐃᐃΔᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⲆⲆⵠⵠΔ].id = ⵠΔⲆ.ⲆⲆⵠⵠΔ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃⵠⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠΔⲆᐃⵠᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠᐃⵠⵠⵠ].id = ⵠⵠ.ⵠᐃⵠⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃⵠⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔⵠⵠⲆⵠΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠᐃⵠⵠⵠ].id = ⵠⵠ.ⵠᐃⵠⵠⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃⵠⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆΔΔᐃⲆΔ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠᐃⵠⵠⵠ].id = ⵠΔⲆ.ⵠᐃⵠⵠⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆᐃⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠᐃⵠⲆΔΔ], ᐃΔⲆΔ);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆᐃⵠⵠ].id = ⵠⵠ.ΔⲆᐃⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆᐃⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆᐃⲆΔΔΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆᐃⵠⵠ].id = ⵠⵠ.ΔⲆᐃⵠⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆᐃⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃⵠⲆΔⲆⲆ], ΔⲆΔⵠ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆᐃⵠⵠ].id = ⵠΔⲆ.ΔⲆᐃⵠⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆΔᐃⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆΔⲆᐃΔⲆⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆΔᐃⵠ].id = ⵠⵠ.ᐃⲆΔᐃⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔⵠᐃⲆⲆΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆΔᐃⵠ].id = ⵠⵠ.ᐃⲆΔᐃⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆΔᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⲆⵠᐃⵠⵠⲆᐃⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ᐃⲆΔᐃⵠ].id = ⵠΔⲆ.ᐃⲆΔᐃⵠ;
		this.ᐃⵠΔ[ⵠⵠ.Δᐃᐃᐃⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃⵠⵠᐃⲆⵠᐃ], ⵠⵠΔⵠ);
		this.ᐃⵠΔ[ⵠⵠ.Δᐃᐃᐃⵠ].id = ⵠⵠ.Δᐃᐃᐃⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.Δᐃᐃᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔᐃᐃⲆᐃⵠΔ], ⲆⲆᐃⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.Δᐃᐃᐃⵠ].id = ⵠⵠ.Δᐃᐃᐃⵠ;
		this.ᐃᐃⵠ[ⵠΔⲆ.Δᐃᐃᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ΔⵠⵠⲆⵠΔᐃ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.Δᐃᐃᐃⵠ].id = ⵠΔⲆ.Δᐃᐃᐃⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆΔΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔⲆⲆⲆⵠΔ], ΔⲆⵠᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ΔⲆΔΔⲆ].id = ⵠⵠ.ΔⲆΔΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆΔΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⲆⲆⵠΔᐃⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⲆΔΔⲆ].id = ⵠⵠ.ΔⲆΔΔⲆ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆΔΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔⵠᐃⲆⵠⵠ], 3);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔⲆΔΔⲆ].id = ⵠΔⲆ.ΔⲆΔΔⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ΔΔΔⲆᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠΔᐃⲆΔⲆⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔΔΔⲆᐃ].id = ⵠⵠ.ΔΔΔⲆᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔΔⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⵠⵠᐃⲆⲆΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔΔΔⲆᐃ].id = ⵠⵠ.ΔΔΔⲆᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔΔⲆᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆΔⲆⲆΔᐃⵠ], ᐃⵠΔⲆ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ΔΔΔⲆᐃ].id = ⵠΔⲆ.ΔΔΔⲆᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔⲆⵠᐃ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⲆⲆΔΔᐃⲆ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⵠΔⲆⵠᐃ].id = ⵠⵠ.ⵠΔⲆⵠᐃ;
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔⲆⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠⲆΔᐃⲆⲆΔ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⵠΔⲆⵠᐃ].id = ⵠⵠ.ⵠΔⲆⵠᐃ;
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔⲆⵠᐃ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃⲆⲆΔΔⲆᐃ], ΔⲆⵠᐃ);
		this.ᐃᐃⵠ[ⵠΔⲆ.ⵠΔⲆⵠᐃ].id = ⵠΔⲆ.ⵠΔⲆⵠᐃ;
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆΔΔΔ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ᐃΔⲆⲆⲆᐃΔ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ⲆⲆΔΔΔ].id = ⵠⵠ.ⲆⲆΔΔΔ;
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆΔΔΔ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃᐃΔⵠⲆⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ⲆⲆΔΔΔ].id = ⵠⵠ.ⲆⲆΔΔΔ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⲆⵠΔⵠⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠⵠᐃᐃΔᐃⲆⲆ], ᐃΔⵠⲆ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⲆⲆⵠΔⵠⵠ].id = ⵠⵠ.ᐃⲆⲆⵠΔⵠⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⲆⵠΔⵠⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠⵠΔⵠⵠⲆⲆⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⲆⲆⵠΔⵠⵠ].id = ⵠⵠ.ᐃⲆⲆⵠΔⵠⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠⲆⵠⵠⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔᐃⲆᐃⵠᐃⵠⲆᐃ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ΔᐃⵠⲆⵠⵠⲆ].id = ⵠⵠ.ΔᐃⵠⲆⵠⵠⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠⲆⵠⵠⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⲆⵠΔΔⵠⲆⲆⵠⵠ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ΔᐃⵠⲆⵠⵠⲆ].id = ⵠⵠ.ΔᐃⵠⲆⵠⵠⲆ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⵠΔΔᐃⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⵠⵠⲆⵠⵠᐃᐃΔⵠ], ᐃⲆᐃΔ);
		this.ᐃⵠΔ[ⵠⵠ.ᐃⵠⵠΔΔᐃⵠ].id = ⵠⵠ.ᐃⵠⵠΔΔᐃⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⵠΔΔᐃⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃᐃⵠΔᐃᐃⲆΔⲆ], 3);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃⵠⵠΔΔᐃⵠ].id = ⵠⵠ.ᐃⵠⵠΔΔᐃⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔΔΔᐃⲆⵠ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ΔⵠⵠᐃΔⵠᐃⲆⵠ], 3);
		this.ᐃⵠΔ[ⵠⵠ.ᐃΔΔΔᐃⲆⵠ].id = ⵠⵠ.ᐃΔΔΔᐃⲆⵠ;
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔΔΔᐃⲆⵠ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ᐃΔⵠⵠΔΔⵠΔΔ], Δⵠⵠᐃ);
		this.ᐃⵠⵠ[ⵠⵠ.ᐃΔΔΔᐃⲆⵠ].id = ⵠⵠ.ᐃΔΔΔᐃⲆⵠ;
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠⵠᐃⲆΔⲆ] = ΔΔⲆ(68, 68, "", ᐃΔ[Δ.ⲆⵠⵠⵠⵠᐃⲆⵠⵠ], ᐃᐃᐃΔᐃ);
		this.ᐃⵠΔ[ⵠⵠ.ΔⵠⵠᐃⲆΔⲆ].id = ⵠⵠ.ΔⵠⵠᐃⲆΔⲆ;
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⵠᐃⲆΔⲆ] = ΔΔⲆ(60, 60, "", ᐃΔ[Δ.ⵠᐃᐃᐃⲆΔΔⲆⵠ], ΔⲆΔⵠ);
		this.ᐃⵠⵠ[ⵠⵠ.ΔⵠⵠᐃⲆΔⲆ].id = ⵠⵠ.ΔⵠⵠᐃⲆΔⲆ;
		this.ᐃᐃⲆΔΔⲆⵠ = function() {
			var ᐃⵠⲆᐃ = ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ;
			var Ⲇⵠ = 10;
			var ᐃⵠⲆ = ⲆΔΔⲆᐃ;
			for (var Ⲇᐃ = 0; Ⲇᐃ < ᐃⵠⲆᐃ.length; Ⲇᐃ++) {
				if (Ⲇᐃ > Δⵠⵠⵠ && !(Ⲇᐃ % ⵠᐃᐃΔ)) {
					Ⲇⵠ += ᐃⵠⲆᐃ[ⵠᐃⲆⲆ].info.width + ΔΔΔᐃⲆ;
					ᐃⵠⲆ = ΔⵠⵠᐃⲆ
				}
				ᐃⵠⲆᐃ[Ⲇᐃ].info.translate.x = Ⲇⵠ;
				ᐃⵠⲆᐃ[Ⲇᐃ].info.translate.y = ᐃⵠⲆ;
				ᐃⵠⲆ += 10 + ᐃⵠⲆᐃ[Ⲇᐃ].info.height
			}
		};
		this.ⲆΔᐃΔᐃΔᐃ = function() {
			var Ⲇⵠ = Math.floor(Math.floor((3 + ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ.length) / ᐃΔᐃΔ) * (10 + this.ᐃⵠΔ[ΔΔᐃᐃ].info.ᐃᐃ[ᐃⵠⵠⲆ].width) + 35);
			for (var Ⲇᐃ = ᐃⵠⵠⲆ; Ⲇᐃ < this.ᐃⵠΔ.length; Ⲇᐃ++) {
				if (!this.ᐃⵠΔ[Ⲇᐃ]) continue;
				this.ᐃⵠΔ[Ⲇᐃ].info.translate.x = Ⲇⵠ;
				this.ᐃⵠΔ[Ⲇᐃ].info.translate.y = 22
			}
			this.ΔΔΔⲆⵠΔΔ.info.translate.x = Ⲇⵠ + ᐃⲆΔⵠⵠᐃᐃ;
			this.ΔΔΔⲆⵠΔΔ.info.translate.y = 22 + ᐃΔ[Δ.ᐃᐃΔΔΔᐃⲆ].height;
			this.ΔΔⵠᐃⲆᐃⵠ.info.translate.x = Ⲇⵠ + ⵠⲆᐃⵠⵠᐃⲆ;
			this.ΔΔⵠᐃⲆᐃⵠ.info.translate.y = 30;
			this.ⲆⵠⵠΔΔΔⵠ.info.translate.x = Ⲇⵠ + 17;
			this.ⲆⵠⵠΔΔΔⵠ.info.translate.y = 22 + ᐃΔ[Δ.ᐃᐃΔΔΔᐃⲆ].height
		};
		this.ΔΔᐃΔⵠᐃΔⵠΔ = function() {
			var Ⲇⵠ = Math.floor((ᐃⲆⵠⵠ - ᐃΔ[Δ.ᐃⵠᐃⲆⲆⵠⲆ][ⵠΔᐃᐃ].width) / 2);
			for (var Ⲇᐃ = ⲆⵠⲆⲆ; this.ΔⵠⲆⵠΔ.length > Ⲇᐃ; Ⲇᐃ++) {
				this.ΔⵠⲆⵠΔ[Ⲇᐃ].button.info.translate.x = Ⲇⵠ;
				this.ΔⵠⲆⵠΔ[Ⲇᐃ].button.info.translate.y = -13
			}
		};
		this.ⵠᐃⵠⲆⵠΔⲆ = function() {
			var Ⲇⵠ = ⲆⵠᐃⵠⲆ + Math.floor(Math.floor((3 + ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ.length) / ᐃΔᐃΔ) * (ⵠΔΔΔⵠ + this.ΔΔᐃΔᐃⵠᐃ.info.ᐃᐃ[0].width) + 35);
			this.ΔΔᐃΔᐃⵠᐃ.info.translate.x = Ⲇⵠ;
			this.ΔΔᐃΔᐃⵠᐃ.info.translate.y = 33;
			this.ᐃᐃΔⲆΔΔⵠ.info.translate.x = this.ΔΔᐃΔᐃⵠᐃ.info.translate.x;
			this.ᐃᐃΔⲆΔΔⵠ.info.translate.y = 137;
			this.ⵠΔⵠᐃⲆᐃⲆ.info.translate.x = this.ΔΔᐃΔᐃⵠᐃ.info.translate.x;
			this.ⵠΔⵠᐃⲆᐃⲆ.info.translate.y = 240
		};
		this.ᐃⵠΔᐃⲆⵠᐃ = function() {
			var Ⲇⵠ = 12 + Math.floor((10 + this.ΔⵠⲆⵠΔᐃⵠ.info.ᐃᐃ[ⵠⵠⲆⵠ].width) * Math.floor((ᐃⲆΔΔ + ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ.length) / ᐃᐃⵠΔ) + 35);
			this.ΔⵠⲆⵠΔᐃⵠ.info.translate.x = Ⲇⵠ;
			this.ΔⵠⲆⵠΔᐃⵠ.info.translate.y = 36;
			Ⲇⵠ += 83;
			this.ⲆⵠⵠΔΔⵠⲆ.info.translate.x = Ⲇⵠ;
			this.ⲆⵠⵠΔΔⵠⲆ.info.translate.y = 36;
			this.ⵠᐃᐃⵠⲆⵠᐃ.info.translate.x = Ⲇⵠ;
			this.ⵠᐃᐃⵠⲆⵠᐃ.info.translate.y = 36;
			this.ⵠⲆⲆⲆΔΔΔ.info.translate.x = Ⲇⵠ;
			this.ⵠⲆⲆⲆΔΔΔ.info.translate.y = 36;
			this.ⵠⵠΔΔᐃⵠⵠ.info.translate.x = Ⲇⵠ;
			this.ⵠⵠΔΔᐃⵠⵠ.info.translate.y = 36;
			this.ΔΔΔΔΔⲆΔ.info.translate.x = Ⲇⵠ;
			this.ΔΔΔΔΔⲆΔ.info.translate.y = 36
		};
		this.ⵠᐃⲆⲆΔΔⵠ = function() {
			var Ⲇⵠ = ΔΔᐃⲆⲆⵠᐃ + Math.floor(Math.floor((ⲆⵠⲆᐃ + ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ.length) / 4) * (10 + this.ⲆΔⵠΔΔⵠᐃ.info.ᐃᐃ[ⵠⵠⵠ].width) + 35);
			this.ⲆΔⵠΔΔⵠᐃ.info.translate.x = Ⲇⵠ;
			this.ⲆΔⵠΔΔⵠᐃ.info.translate.y = 36;
			Ⲇⵠ += 83;
			this.ΔᐃᐃⵠⵠⵠⲆ.info.translate.x = Ⲇⵠ;
			this.ΔᐃᐃⵠⵠⵠⲆ.info.translate.y = 36
		};
		this.ⲆΔⵠⵠᐃⵠᐃ = function() {
			var Ⲇⵠ = Math.floor((ⵠⲆⵠᐃⵠ + this.ΔⲆᐃⵠⵠⲆΔ.info.ᐃᐃ[0].width) * Math.floor((3 + ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ.length) / 4) + 35);
			this.ΔⲆᐃⵠⵠⲆΔ.info.translate.x = Ⲇⵠ;
			this.ΔⲆᐃⵠⵠⲆΔ.info.translate.y = 22
		};
		this.ᐃⲆΔⵠΔᐃⵠ = function() {
			var ᐃΔΔⲆ = ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ;
			if (0 < ᐃΔΔⲆ.length) var ᐃⵠΔΔΔΔⵠⵠᐃ = Math.floor((ᐃⲆⵠⵠ - ᐃⲆⵠ.ᐃΔΔⲆ.max * (ᐃΔΔⲆ[ⲆⲆⵠⲆ].info.width + 5)) / ⲆⲆⲆⲆ);
			for (var Ⲇᐃ = 0; Ⲇᐃ < ᐃΔΔⲆ.length; Ⲇᐃ++) {
				ᐃΔΔⲆ[Ⲇᐃ].info.translate.x = ᐃⵠΔΔΔΔⵠⵠᐃ + (ᐃΔΔⲆ[Ⲇᐃ].info.width + ΔΔⲆⲆⵠ) * Ⲇᐃ;
				ᐃΔΔⲆ[Ⲇᐃ].info.translate.y = Ⲇᐃᐃᐃ - ᐃΔΔⲆ[Ⲇᐃ].info.width - ⵠⲆⵠⵠⲆ;
				this.ⵠⵠⲆⲆⲆ[ᐃΔΔⲆ[Ⲇᐃ].id].info.translate.x = ᐃΔΔⲆ[Ⲇᐃ].info.translate.x + 13;
				this.ⵠⵠⲆⲆⲆ[ᐃΔΔⲆ[Ⲇᐃ].id].info.translate.y = ᐃΔΔⲆ[Ⲇᐃ].info.translate.y - this.ⵠⵠⲆⲆⲆ[ᐃΔΔⲆ[Ⲇᐃ].id].info.ᐃᐃ[ⵠΔᐃⵠ].height - ΔⵠΔⵠᐃ
			}
		};
		var ⵠⲆᐃᐃᐃ = Ⲇᐃⵠ;
		var ⵠⲆΔⵠᐃ = 30;
		var ΔⲆΔᐃⵠⲆΔ = function() {
			ΔⵠⲆ.ⲆᐃⲆ();
			ⵠⲆᐃᐃᐃ++;
			if (ⵠⲆΔⵠᐃ == ⵠⲆᐃᐃᐃ) {
				ΔⵠⲆ.ⵠΔⲆⵠⲆⵠΔ();
				ΔⵠⲆ.ⲆᐃⲆ();
				return
			}
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]](ΔⲆΔᐃⵠⲆΔ, 0)
		};
		this.ⲆⵠᐃΔⲆ = function(ⲆΔᐃᐃⵠ) {
			ᐃⲆⵠ.Ⲇⵠⵠⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃⲆⵠ.Ⲇⵠⵠⵠᐃ.ⲆⵠᐃΔⲆ();
			ᐃⲆⵠ.ᐃⵠΔⵠΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃⲆⵠ.ᐃⵠΔⵠΔ.ⲆⵠᐃΔⲆ();
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[173]).style.display = ⵠ[181];
			ΔⵠⲆ.ΔⵠⲆⲆΔ.style.display = ⵠ[181];
			ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] = ᐃⲆⲆᐃᐃ;
			ΔⵠⲆ.sign.style.display = ⵠ[181];
			ΔⵠⲆ.sign[ⲆᐃⲆⵠΔΔⲆ[36]] = ᐃⲆⲆᐃᐃ;
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[49]).style.display = ⵠ[181];
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[233]).style.display = ⵠ[181];
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[288]).style.display = ⵠ[181];
			ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] = ᐃΔΔⵠⲆ;
			document[ⲆᐃⲆⵠΔΔⲆ[185]]("option_in_game").style.display = ⵠ[181];
			ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] = false;
			document[ⲆᐃⲆⵠΔΔⲆ[185]]("sure_delete").style.display = ⵠ[181];
			ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] = ΔΔᐃⵠᐃ;
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[25]).style.display = ⵠ[181];
			ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] = false;
			document[ⲆᐃⲆⵠΔΔⲆ[185]]("chronoquest").style.display = ⵠ[181];
			ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] = false;
			ⵠⵠᐃΔⲆ = ⲆΔᐃᐃⵠ;
			ΔⵠⲆ.ⲆⲆⲆⲆⵠⵠᐃ();
			ΔⵠⲆ.ΔⲆ.style.cursor = ΔⵠⲆ.ⵠᐃⵠΔΔΔᐃ;
			ⲆΔⵠⲆ.ⲆⵠᐃΔⲆ();
			ᐃⵠΔᐃᐃ = -ΔⲆᐃᐃ;
			ΔⲆⲆᐃᐃ();
			ΔⲆΔⵠᐃⲆΔ()
		};
		var ⵠⵠᐃΔⲆ;
		var ᐃⵠΔᐃᐃ = -ΔᐃⲆⲆ;
		var ⲆⲆⵠⲆⲆ = 30;
		var ΔⲆⲆᐃᐃ = function() {
			ΔⵠⲆ.ⲆᐃⲆ();
			ᐃⵠΔᐃᐃ++;
			if (ᐃⵠΔᐃᐃ == ⲆⲆⵠⲆⲆ) {
				ΔⵠⲆ.stop();
				ⵠⵠᐃΔⲆ();
				return
			}
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]](ΔⲆⲆᐃᐃ, 0)
		};
		this.ᐃⲆⵠᐃᐃ = false;
		this.stop = function() {
			this.ᐃⲆⵠᐃᐃ = false
		};
		this.ⵠΔΔᐃᐃ = function() {
			ᐃΔᐃⵠ.ᐃⲆⲆΔᐃΔⲆⲆΔ();
			ΔⵠⲆ.ᐃⲆⵠᐃᐃ = true;
			ᐃⵠΔᐃᐃ = -1;
			ⵠⲆᐃᐃᐃ = ΔΔᐃᐃ;
			ΔⲆΔᐃⵠⲆΔ()
		};
		this.ⲆᐃⲆ = function() {
			this.ⵠΔᐃⲆ.translate.x = ᐃⲆⵠⵠ - this.ⵠΔᐃⲆ.ᐃᐃ.width - 10;
			this.ⵠΔᐃⲆ.translate.y = 5;
			ⲆⵠΔ.ⵠΔⵠΔⲆ.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[Δ.ⲆᐃⲆΔᐃⲆⵠ][ⲆⵠⲆⲆ].width - 85;
			ⲆⵠΔ.ⵠΔⵠΔⲆ.translate.y = ⵠⵠΔⲆᐃ;
			this.ΔⲆΔΔ.button.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[Δ.ΔΔⵠΔΔⵠᐃ][0].width - ᐃᐃᐃΔΔ;
			this.ΔⲆΔΔ.button.info.translate.y = 10;
			this.ᐃⲆⲆⲆ.button.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[Δ.ᐃᐃⲆᐃⲆᐃᐃ][0].width - 20;
			this.ᐃⲆⲆⲆ.button.info.translate.y = this.ΔⲆΔΔ.button.info.translate.y + ᐃΔ[Δ.ΔΔⵠΔΔⵠᐃ][0].height + ᐃᐃⵠᐃΔ;
			this.options.button.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[Δ.ⵠᐃⲆⵠⵠ][0].width - ΔΔᐃΔᐃΔΔ;
			this.options.button.info.translate.y = this.ᐃⲆⲆⲆ.button.info.translate.y + ᐃΔ[Δ.ⵠᐃⲆⵠⵠ][0].height + 18;
			this.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[Δ.ⵠᐃⲆⵠⵠ][0].width - ⵠΔᐃⲆⵠ;
			this.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.info.translate.y = this.options.button.info.translate.y + ᐃΔ[Δ.ᐃΔⵠⵠⵠⲆⲆ][ⵠⵠⲆⵠ].height;
			this.ⲆΔⵠⲆ.ⵠΔⵠⲆⵠᐃΔ.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[Δ.ⵠᐃⲆⵠⵠ][ᐃᐃⲆ].width - ⵠΔⵠᐃⲆ;
			this.ⲆΔⵠⲆ.ⵠΔⵠⲆⵠᐃΔ.info.translate.y = this.options.button.info.translate.y + ᐃΔ[Δ.ᐃΔⵠⵠⵠⲆⲆ][ΔΔᐃ].height;
			this.ΔⵠⲆⲆΔ.button.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[Δ.ⵠⲆⵠⵠⲆᐃⲆ][ⵠⲆΔ].width - 20;
			this.ΔⵠⲆⲆΔ.button.info.translate.y = this.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.info.translate.y + ᐃΔ[Δ.ⵠⲆⵠⵠⲆᐃⲆ][ⵠⵠⲆⵠ].height;
			ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.x = this.ⵠΔᐃⲆ.translate.x - 63 - 85;
			ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.y = ᐃⵠⵠᐃΔⵠᐃ;
			ᐃⲆⵠ.ᐃᐃΔⵠⵠ.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[Δ.ⲆᐃᐃᐃΔⲆⲆ].width - 85;
			ᐃⲆⵠ.ᐃᐃΔⵠⵠ.translate.y = ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.y + ⲆΔⵠΔⵠ + ᐃΔ[Δ.ⵠᐃᐃᐃⵠᐃⵠ].height;
			this.Δⵠⵠⵠⵠ.translate.y = Ⲇᐃᐃᐃ - 3 - 193;
			this.Δⵠⵠⵠⵠ.translate.x = ᐃⲆⵠⵠ - 3 - 193;
			this.ⲆᐃⵠⲆ.translate.x = 5;
			this.ⲆᐃⵠⲆ.translate.y = Ⲇᐃᐃᐃ - this.ⲆᐃⵠⲆ.ᐃᐃ.height - ⵠⵠᐃᐃ;
			this.ΔⵠⲆᐃⵠ.button.info.translate.x = ΔⵠⵠΔ - 91 / 2;
			this.ΔⵠⲆᐃⵠ.button.info.translate.y = 50;
			this.ᐃᐃⲆΔΔⲆⵠ();
			this.ᐃⲆΔⵠΔᐃⵠ();
			this.ⲆΔᐃΔᐃΔᐃ();
			this.ⲆΔⵠⵠᐃⵠᐃ();
			this.ⵠᐃⲆⲆΔΔⵠ();
			this.ᐃⵠΔᐃⲆⵠᐃ();
			this.ⵠᐃⵠⲆⵠΔⲆ();
			this.ΔΔᐃΔⵠᐃΔⵠΔ();
			this.sign.ΔᐃᐃᐃⵠⲆⵠ();
			ⲆΔⵠΔᐃⵠⵠ();
			ᐃⲆⵠ.Ⲇⵠⵠⵠᐃ.ⲆᐃⲆ();
			ᐃⲆⵠ.ᐃⵠΔⵠΔ.ⲆᐃⲆ();
			this.ΔⲆΔΔᐃᐃⲆⵠΔ.ⲆᐃⲆ();
			this.ΔⲆΔΔ.ⲆⲆⲆΔᐃᐃⲆ.ⲆᐃⲆ();
			this.ΔⲆΔΔ.list.ⲆᐃⲆ();
			this.ΔΔⵠⲆ.ⲆᐃⲆ();
			this.ΔⲆΔⵠⵠ.ⲆᐃⲆ();
			this.ᐃⲆⲆⲆ.ⲆᐃⲆ();
			this.ΔⵠⲆᐃⵠ.ⲆᐃⲆ();
			this.options.ⲆᐃⲆ();
			this.ΔⵠⲆⲆΔ.ⲆᐃⲆ();
			this.sign.ⲆᐃⲆ();
			var ⵠⲆⲆΔ = 0;
			if (ⵠⲆᐃᐃᐃ != ⵠⲆΔⵠᐃ) {
				var ⵠⲆⲆΔ = 1500 / (ⵠⲆᐃᐃᐃ + ⵠΔᐃ) - 50
			}
			if (-ΔⲆᐃᐃ != ᐃⵠΔᐃᐃ) {
				var ⵠⲆⲆΔ = -(1500 / (ⲆⲆⵠⲆⲆ - ᐃⵠΔᐃᐃ + ᐃᐃΔ) - 48)
			}
			this.ΔⵠⲆᐃⵠ.button.info.translate.y -= ᐃᐃᐃ < ⵠⲆⲆΔ ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ;
			this.ⵠΔᐃⲆ.translate.y -= ⵠⲆⲆΔ > ᐃⵠⵠⲆ ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ;
			ᐃⲆⵠ.ⲆᐃΔΔⵠ.translate.y -= ⲆⵠⲆⲆ < ⵠⲆⲆΔ ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ;
			ᐃⲆⵠ.ᐃᐃΔⵠⵠ.translate.y -= 0 < ⵠⲆⲆΔ ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ;
			this.ΔⲆΔΔ.button.info.translate.y -= ⵠⲆⲆΔ > 0 ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ;
			this.ᐃⲆⲆⲆ.button.info.translate.y -= ⵠⲆΔ < ⵠⲆⲆΔ ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ;
			this.options.button.info.translate.y -= ⵠᐃⲆ < ⵠⲆⲆΔ ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ;
			this.ΔⵠⲆⲆΔ.button.info.translate.y -= ⵠⲆⲆΔ > Δⵠⵠⵠ ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ;
			this.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.info.translate.y -= ⵠⲆⲆΔ > 0 ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ;
			this.ⲆΔⵠⲆ.ⵠΔⵠⲆⵠᐃΔ.info.translate.y -= 0 < ⵠⲆⲆΔ ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ;
			ⲆⵠΔ.ⵠΔⵠΔⲆ.translate.y -= ⵠⲆⲆΔ > ᐃⵠⵠⲆ ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ;
			this.ⲆᐃⵠⲆ.translate.y -= ⵠⲆⲆΔ < ⵠᐃⲆ ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ;
			this.Δⵠⵠⵠⵠ.translate.y -= 0 > ⵠⲆⲆΔ ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ
		};
		this.ΔⵠΔⲆᐃᐃⵠⲆⲆ = function() {
			!ᐃⲆⵠ.ΔⲆⲆΔⵠ.enabled && this.ΔⵠᐃⵠᐃⵠⲆ && !ᐃⲆⵠ.ΔΔΔⵠⵠ && ΔⵠⵠⲆⲆⵠᐃⲆΔ();
			ΔᐃᐃⵠⵠᐃᐃⵠⲆ();
			ᐃΔⲆᐃᐃⵠᐃΔⵠ();
			if (this.ΔⵠᐃⵠᐃⵠⲆ) {
				ⵠᐃΔⲆⵠᐃΔᐃᐃ();
				if (this.ⲆᐃΔᐃⲆΔᐃ === Δⵠᐃ) this.ΔⲆΔΔ.button.ⵠᐃᐃⲆ(Ⲇ);
				ⲆⵠΔ.mode !== ΔᐃᐃΔ.ᐃΔⲆⲆᐃ && ⲆⵠΔ.mode !== ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ && ⲆⵠΔ.mode !== ΔᐃᐃΔ.ⵠᐃΔⵠΔᐃⵠ && this.ⲆΔⲆⲆⲆΔⲆ === ᐃᐃΔ && this.ᐃⲆⲆⲆ.button.ⵠᐃᐃⲆ(Ⲇ);
				this.options.button.ⵠᐃᐃⲆ(Ⲇ);
				1 === this.ΔΔΔⵠᐃᐃᐃ && this.ΔⵠⲆⲆΔ.button.ⵠᐃᐃⲆ(Ⲇ);
				ⲆΔⵠⲆ.ⵠΔΔᐃᐃ ? this.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.ⵠᐃᐃⲆ(Ⲇ) : this.ⲆΔⵠⲆ.ⵠΔⵠⲆⵠᐃΔ.ⵠᐃᐃⲆ(Ⲇ);
				ⵠΔⵠⵠΔⲆᐃᐃΔ();
				ⲆⵠⵠᐃⵠᐃᐃⵠΔ();
				this.ⲆᐃⵠⲆ.ⵠᐃᐃⲆ();
				ΔⲆΔⲆⵠⲆⲆΔΔ();
				ⲆᐃᐃΔⵠⲆΔⲆΔ();
				ⵠⲆⲆΔⵠⵠⵠⲆΔ();
				ΔᐃⲆⲆᐃⲆⵠⲆⵠ();
				ᐃᐃⵠΔᐃᐃΔᐃΔ();
				ΔΔⵠⵠᐃΔΔΔΔ();
				ⲆⵠΔⵠⲆⵠᐃⲆⵠ();
				ᐃᐃΔⵠⵠⲆⲆⲆΔ();
				ᐃⲆᐃⵠΔΔⵠⵠᐃ();
				ⵠΔⲆᐃᐃΔⲆⵠⲆ();
				ⲆⵠΔⲆⵠΔΔⵠⲆ();
				ⵠᐃᐃⲆΔᐃᐃΔⲆ();
				ⲆΔⵠΔᐃⵠⵠ();
				ΔᐃΔΔᐃⵠΔⵠⵠ()
			}
			if (ᐃⲆⵠ.ΔⲆⲆΔⵠ.enabled) ⲆⲆᐃⵠⲆΔΔᐃⵠ();
			ᐃⲆΔⵠⵠⵠᐃΔⲆ();
			if (this.ΔⵠᐃⵠᐃⵠⲆ && Ⲇⵠᐃ === this.ⵠⲆⲆΔᐃΔⲆ) ΔΔⵠⵠⲆⲆⵠΔⵠ();
			ᐃⲆⵠ.ΔⵠΔᐃⲆⲆⵠ.ⵠᐃᐃⲆ();
			ᐃⲆⵠ.alert.ⵠᐃᐃⲆ(ⵠ[447], ⵠ[204]);
			if (this.ΔⵠᐃⵠᐃⵠⲆ) {
				ᐃⲆⵠ.ΔⲆⲆΔⵠ.ⵠᐃᐃⲆ();
				ᐃⲆⵠ.ΔⵠⲆᐃⵠ.ⵠᐃᐃⲆ();
				ᐃⲆⵠ.ᐃΔΔⲆ.ᐃⵠΔᐃⵠᐃⵠ.ⵠᐃᐃⲆ(ⵠΔΔΔ.ⲆⲆⲆⵠ.x, ⵠΔΔΔ.ⲆⲆⲆⵠ.y)
			}
			ⲆΔⲆⵠⵠⲆᐃⲆᐃ()
		};
		this.ⵠᐃΔⵠᐃᐃΔⲆᐃ = function() {
			ᐃⲆⵠ.ⲆⲆΔ.ⲆᐃⲆ();
			ᐃⲆⵠ.ⲆᐃⵠⲆ.ⲆᐃⲆ();
			if (!ᐃⲆⵠ.reconnect.enabled && ᐃⲆⵠ.ⲆⲆΔᐃⵠ) {
				ᐃⲆⵠ.control.ⲆᐃⲆ();
				ᐃⲆⵠ.ⲆᐃΔΔⵠ.ⲆᐃⲆ()
			}
			ⲆⵠΔ.ⲆᐃⲆ();
			this.ᐃⲆⲆⲆ.ΔⵠᐃΔⵠᐃⵠⵠΔ()
		};
		this.ᐃΔΔⵠΔⲆΔΔⲆ = function() {
			ΔᐃⲆᐃⲆΔⵠⲆⵠ()
		};
		this.ᐃⲆⵠᐃⲆⲆΔⲆⲆ = function() {
			ᐃΔᐃⵠ.ᐃⲆΔⲆᐃⲆⵠⲆⵠ();
			ᐃΔᐃⵠ.ⲆⲆΔⲆΔⵠⵠⲆΔ();
			ᐃΔᐃⵠ.ᐃΔΔᐃᐃⵠΔΔⵠ();
			ᐃΔᐃⵠ.ᐃᐃᐃᐃⵠⵠΔΔⲆ()
		};
		this.ⵠᐃᐃⲆ = function() {
			if (!ᐃⲆⵠ.reconnect.enabled && ᐃⲆⵠ.ⲆⲆΔᐃⵠ) this.ᐃⲆⵠᐃⲆⲆΔⲆⲆ();
			ⲆΔⵠⲆ.ⵠᐃⲆᐃᐃᐃᐃᐃᐃ();
			this.ⵠᐃΔⵠᐃᐃΔⲆᐃ();
			if (ᐃΔΔΔ.ⲆⵠᐃⵠᐃΔᐃ === ΔⵠⲆⲆ) {
				var ᐃᐃ = ⵠᐃ.ⵠᐃᐃΔΔⲆⲆ;
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / ᐃᐃⵠΔ, ᐃⲆΔⲆ - ᐃᐃ.height / ⵠᐃᐃΔ, ᐃᐃ.width / ᐃᐃᐃⵠ, ᐃᐃ.height / ΔΔⲆᐃ);
				return
			}
			this.ᐃΔΔⵠΔⲆΔΔⲆ();
			this.ΔⵠΔⲆᐃᐃⵠⲆⲆ()
		};
		this.ᐃΔⵠⵠⲆⵠᐃ = function(ⲆΔⲆⲆ) {
			if (ᐃⲆⵠ.Ⲇⵠⵠⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⲆΔⲆⲆ.keyCode === 27) ᐃⲆⵠ.Ⲇⵠⵠⵠᐃ.ⲆⵠᐃΔⲆ();
			else if (ᐃⲆⵠ.ᐃⵠΔⵠΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⲆΔⲆⲆ.keyCode === 27) ᐃⲆⵠ.ᐃⵠΔⵠΔ.ⲆⵠᐃΔⲆ();
			else if (!ᐃⲆⵠ.Ⲇⵠⵠⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ᐃⲆⵠ.ᐃⵠΔⵠΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && 79 == ⲆΔⲆⲆ.keyCode && -1 == ᐃⵠΔᐃᐃ) ᐃⲆⵠ.ᐃⵠΔⵠΔ.ⲆΔΔΔᐃΔⵠᐃⵠ();
			else if (ⲆΔⲆⲆ.keyCode == ᐃᐃⵠᐃᐃⲆⲆ && -1 == ᐃⵠΔᐃᐃ) {
				ᐃⲆⵠ.ᐃⵠΔⵠΔ[ⲆᐃⲆⵠΔΔⲆ[36]] ? ᐃⲆⵠ.ᐃⵠΔⵠΔ.ⵠΔⵠⲆᐃⵠᐃ() : ᐃⲆⵠ.Ⲇⵠⵠⵠᐃ.ⵠΔΔᐃᐃ()
			} else if (!ᐃⲆⵠ.Ⲇⵠⵠⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ᐃⲆⵠ.ᐃⵠΔⵠΔ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				if (ⲆΔⲆⲆ.keyCode === 82) ᐃⲆⵠ.ⲆᐃΔΔⵠ.ⵠⵠⵠⵠΔⲆⵠ();
				else if (80 === ⲆΔⲆⲆ.keyCode && ΔᐃᐃΔ.ᐃΔΔⲆⲆᐃᐃ === ⲆⵠΔ.mode && !ᐃⲆⵠ.ⲆⵠΔⵠΔⲆΔ) ᐃⲆⵠ.ᐃᐃΔⵠⵠ.ⵠⵠⵠⵠΔⲆⵠ();
				else if (ⲆΔⲆⲆ.keyCode >= 49 && ⲆΔⲆⲆ.keyCode <= 57) {
					if (ᐃⲆⵠ.ᐃⵠⲆᐃ.id < ΔΔᐃ) {
						var Ⲇᐃ = ⲆΔⲆⲆ.keyCode - 49;
						var ⵠⲆᐃΔ = ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ[Ⲇᐃ];
						if (ⵠⲆᐃΔ) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ⵠⲆᐃΔ.id, Ⲇᐃ)
					}
				} else if (89 == ⲆΔⲆⲆ.keyCode) ᐃⲆⵠ.ⲆᐃⲆᐃΔⵠⵠ = !ᐃⲆⵠ.ⲆᐃⲆᐃΔⵠⵠ;
				else ⲆΔⲆⲆ.keyCode == 71 && ᐃⲆⵠ.ᐃⵠⲆᐃ.ⵠⲆⲆⵠΔᐃΔΔΔ()
			}
			ΔⲆᐃⵠΔ.up(ⲆΔⲆⲆ)
		};
		this.ᐃⵠΔᐃᐃᐃⵠ = function(ⲆΔⲆⲆ) {
			ΔⲆᐃⵠΔ.down(ⲆΔⲆⲆ);
			ⲆΔⲆⲆ.keyCode == Δᐃᐃⵠⵠ && !ᐃⲆⵠ.Ⲇⵠⵠⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ᐃⲆⵠ.ᐃⵠΔⵠΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⲆΔⲆⲆ.preventDefault()
		};
		this.ΔΔᐃⲆⵠᐃΔ = function(ⲆΔⲆⲆ) {
			ⵠΔΔΔ.ⲆⲆⲆⵠ = ⵠᐃⲆΔᐃⵠᐃ(ΔⵠⲆ.ΔⲆ, ⲆΔⲆⲆ);
			var Δⵠⵠᐃᐃ = ΔⵠΔⵠⵠ;
			Δⵠⵠⵠ > ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ && ΔⵠⲆ.Δⵠⵠⵠⵠ.focus(ⵠΔΔΔ.ⲆⲆⲆⵠ);
			var ⵠᐃⲆΔ = ᐃⲆⵠ.ⵠᐃⲆΔ;
			if (ᐃⲆⵠ.ᐃⵠⲆᐃ.id < ⵠΔᐃⵠ && 0 <= ⵠᐃⲆΔ.id) {
				if (!ᐃⲆⵠ.ⵠᐃⲆΔ.lock || ᐃⲆⵠ.ⵠᐃⲆΔ.ⵠⵠΔᐃ === ᐃⲆⵠ.id) Δⵠⵠᐃᐃ |= ΔⵠⲆ.ᐃⵠΔ[ᐃⲆⵠ.ⵠᐃⲆΔ.id].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ)
			}
			var ⲆᐃⲆⵠ = ᐃⲆⵠ.ⲆᐃⲆⵠ;
			ⲆᐃⲆⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃⵠⵠⲆ < ⲆᐃⲆⵠ.ΔⲆⲆΔᐃ && (Δⵠⵠᐃᐃ |= ΔⵠⲆ.ΔᐃᐃⵠⵠⵠⲆ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ));
			var ᐃᐃΔⲆ = ᐃⲆⵠ.ᐃᐃΔⲆ;
			ᐃᐃΔⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && 0 < ᐃᐃΔⲆ.ⵠⲆΔᐃⵠᐃⵠ && (Δⵠⵠᐃᐃ |= ΔⵠⲆ.ⲆⵠⵠΔΔⵠⲆ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ), Δⵠⵠᐃᐃ |= ΔⵠⲆ.ⵠᐃᐃⵠⲆⵠᐃ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ), Δⵠⵠᐃᐃ |= ΔⵠⲆ.ⵠⲆⲆⲆΔΔΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ), Δⵠⵠᐃᐃ |= ΔⵠⲆ.ⵠⵠΔΔᐃⵠⵠ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ), Δⵠⵠᐃᐃ |= ΔⵠⲆ.ΔΔΔΔΔⲆΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ));
			var ᐃⵠᐃᐃ = ᐃⲆⵠ.ᐃⵠᐃᐃ;
			if (ᐃⵠᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⵠᐃⲆ < ᐃⵠᐃᐃ.ⲆⲆⵠΔΔᐃᐃ) {
				Δⵠⵠᐃᐃ |= ΔⵠⲆ.ⵠΔⵠᐃⲆᐃⲆ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ)
			}
			if (ᐃⲆⵠ.sign[ⲆᐃⲆⵠΔΔⲆ[36]]) Δⵠⵠᐃᐃ |= ΔⵠⲆ.sign.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ);
			if (!ᐃⲆⵠ.ⵠᐃⲆΔ.lock) {
				ᐃⲆⵠ.ⵠᐃⲆΔ.ΔΔΔⲆᐃⲆΔ && (Δⵠⵠᐃᐃ |= ΔⵠⲆ.ⲆⵠⵠΔΔΔⵠ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ))
			}
			ᐃⲆⵠ.ⵠᐃⲆΔ.ᐃᐃⲆᐃΔᐃⲆ && (Δⵠⵠᐃᐃ |= ΔⵠⲆ.ΔΔΔⲆⵠΔΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ));
			if (ᐃᐃᐃ > ᐃⲆⵠ.ᐃⵠⲆᐃ.id && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				var ᐃΔⲆ = ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ;
				for (var Ⲇᐃ = 0; ᐃΔⲆ.length > Ⲇᐃ; Ⲇᐃ++) {
					var ΔΔᐃⲆΔ = ᐃΔⲆ[Ⲇᐃ].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ);
					Δⵠⵠᐃᐃ |= ΔΔᐃⲆΔ;
					ΔΔᐃⲆΔ && ᐃⲆⵠ.ᐃΔΔⲆ.ᐃⵠΔᐃⵠᐃⵠ.start(Ⲇᐃ, ⵠΔΔΔ.ⲆⲆⲆⵠ);
					(ⵠᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && (0 > ⵠᐃⲆΔ.id || ⵠᐃⲆΔ.id == ᐃΔⲆ[Ⲇᐃ].id) || ᐃⲆⵠ.ᐃⲆᐃⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃΔⲆ[Ⲇᐃ].id === ⵠⵠ.ⲆⵠᐃΔ || ᐃⲆⵠ.ⵠⵠΔΔᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⵠⵠ.ΔⵠⲆⲆᐃ === ᐃΔⲆ[Ⲇᐃ].id || ᐃⲆⵠ.ᐃⵠᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && (ᐃΔⲆ[Ⲇᐃ].id === ⵠⵠ.ⲆⵠᐃΔ || ⵠⵠ.ΔⲆⵠᐃⲆ === ᐃΔⲆ[Ⲇᐃ].id) || ᐃⲆⵠ.ⲆᐃⲆⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⵠⵠ.ⵠⵠⵠⵠᐃ === ᐃΔⲆ[Ⲇᐃ].id || ᐃⲆⵠ.ᐃᐃΔⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⵠⵠ.ⲆⵠᐃΔ === ᐃΔⲆ[Ⲇᐃ].id) && (Δⵠⵠᐃᐃ |= ΔⵠⲆ.ⵠⵠⲆⲆⲆ[ᐃΔⲆ[Ⲇᐃ].id].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ))
				}
			}
			if (ᐃⲆⵠ.ΔΔᐃᐃΔ[ⲆᐃⲆⵠΔΔⲆ[36]]) Δⵠⵠᐃᐃ |= ΔⵠⲆ.ΔΔᐃᐃΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ);
			if (ΔⵠⲆ.ⲆⵠⲆⲆⲆ != -Δᐃⵠⵠ) {
				Δⵠⵠᐃᐃ |= ΔⵠⲆ.ΔⵠⲆⵠΔ[ΔⵠⲆ.ⲆⵠⲆⲆⲆ].button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ);
				if (Δⵠⵠᐃᐃ) var ΔⵠⵠᐃⵠⲆⵠ = ᐃΔⲆΔᐃ
			} else var ΔⵠⵠᐃⵠⲆⵠ = false;
			if (ᐃⲆⵠ.ᐃⵠⲆᐃ.id < ΔΔᐃ && 0 > ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ && !ΔⵠⵠᐃⵠⲆⵠ && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ᐃⲆⵠ.ΔΔΔⵠⵠ) {
				var ᐃΔⲆ = ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ;
				for (var Ⲇᐃ = 0; ᐃΔⲆ.length > Ⲇᐃ; Ⲇᐃ++) {
					Δⵠⵠᐃᐃ |= ᐃΔⲆ[Ⲇᐃ].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ)
				}
			}
			0 > ᐃⲆⵠ.ᐃⵠⲆᐃ.id && ⵠⵠⵠ > ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ && ᐃⲆⵠ.ΔⵠⲆᐃⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && (Δⵠⵠᐃᐃ |= ΔⵠⲆ.ΔⵠⲆᐃⵠ.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ));
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && (Δⵠⵠᐃᐃ |= ΔⵠⲆ.ΔⲆΔΔ.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ));
			if (0 > ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]) Δⵠⵠᐃᐃ |= ΔⵠⲆ.options.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ);
			if (0 > ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]]) Δⵠⵠᐃᐃ |= ΔⵠⲆ.ΔⵠⲆⲆΔ.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ);
			if (ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < ⲆⲆⵠⲆ && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				if (ⲆΔⵠⲆ.ⵠΔΔᐃᐃ) Δⵠⵠᐃᐃ |= ΔⵠⲆ.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ);
				else Δⵠⵠᐃᐃ |= ΔⵠⲆ.ⲆΔⵠⲆ.ⵠΔⵠⲆⵠᐃΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ)
			}
			ⵠΔᐃᐃ > ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && ΔᐃᐃΔ.ᐃΔⲆⲆᐃ !== ⲆⵠΔ.mode && ⲆⵠΔ.mode !== ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ && ΔᐃᐃΔ.ⵠᐃΔⵠΔᐃⵠ !== ⲆⵠΔ.mode && (Δⵠⵠᐃᐃ |= ΔⵠⲆ.ᐃⲆⲆⲆ.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ));
			if (!Δⵠⵠᐃᐃ && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.sign[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				if (0 <= ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ) ᐃΔᐃⵠ.ΔⵠΔⲆⲆΔⲆᐃⲆ();
				else !ΔⵠⵠᐃⵠⲆⵠ && ⵠΔΔΔ.down()
			}
		};
		this.ⲆΔΔⵠⲆⵠᐃ = function(ⲆΔⲆⲆ) {
			ⵠΔΔΔ.ⲆⲆⲆⵠ = ⵠᐃⲆΔᐃⵠᐃ(ΔⵠⲆ.ΔⲆ, ⲆΔⲆⲆ);
			ⵠΔΔΔ.up();
			if (ᐃⲆⵠ.ᐃΔΔⲆ.ᐃⵠΔᐃⵠᐃⵠ.release()) return;
			var ⵠᐃⲆΔ = ᐃⲆⵠ.ⵠᐃⲆΔ;
			var ᐃⲆᐃⵠᐃ = ᐃⲆⵠ.ᐃⲆᐃⵠᐃ;
			var ⵠⵠΔΔᐃ = ᐃⲆⵠ.ⵠⵠΔΔᐃ;
			var ⲆᐃⲆⵠ = ᐃⲆⵠ.ⲆᐃⲆⵠ;
			var ᐃᐃΔⲆ = ᐃⲆⵠ.ᐃᐃΔⲆ;
			var ᐃⵠᐃᐃ = ᐃⲆⵠ.ᐃⵠᐃᐃ;
			ᐃⲆⵠ.control.attack && (ᐃⲆⵠ.control.attack = ᐃᐃᐃ, ᐃΔᐃⵠ.ⵠᐃᐃᐃΔΔⲆⵠⲆ());
			if (-ΔⵠⲆⲆ != ΔⵠⲆ.ⲆⵠⲆⲆⲆ) {
				var ΔⲆⲆⲆ = ΔⵠⲆ.ΔⵠⲆⵠΔ[ΔⵠⲆ.ⲆⵠⲆⲆⲆ].button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
				var ⲆⲆΔΔ = document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[173]).style;
				if (ΔⲆⲆⲆ && ⵠ[442] == ⲆⲆΔΔ.display) {
					ⲆⲆΔΔ.display = ⵠ[181];
					return
				} else ΔⲆⲆⲆ && ΔⵠⲆ.ΔⵠⲆⵠΔ[ΔⵠⲆ.ⲆⵠⲆⲆⲆ].action()
			}
			if (ᐃⲆⵠ.ᐃⵠⲆᐃ.id < ΔΔᐃᐃ && ⵠᐃⲆΔ.id >= 0 && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				if (!ᐃⲆⵠ.ⵠᐃⲆΔ.lock || ᐃⲆⵠ.ⵠᐃⲆΔ.ⵠⵠΔᐃ === ᐃⲆⵠ.id) {
					var ΔⲆⲆⲆ = ΔⵠⲆ.ᐃⵠΔ[ᐃⲆⵠ.ⵠᐃⲆΔ.id].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
					ΔⲆⲆⲆ && ᐃΔᐃⵠ.ᐃᐃⲆⵠΔⲆΔⲆⲆ(ⵠᐃⲆΔ)
				}
			}
			var ⲆᐃⲆⵠ = ᐃⲆⵠ.ⲆᐃⲆⵠ;
			if (ⲆᐃⲆⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃᐃⲆ < ⲆᐃⲆⵠ.ΔⲆⲆΔᐃ && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				var ΔⲆⲆⲆ = ΔⵠⲆ.ΔᐃᐃⵠⵠⵠⲆ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
				ΔⲆⲆⲆ && ᐃΔᐃⵠ.ⵠⲆⲆᐃΔⵠⵠⲆⲆ(ⲆᐃⲆⵠ)
			}
			var ᐃᐃΔⲆ = ᐃⲆⵠ.ᐃᐃΔⲆ;
			if (ᐃᐃΔⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃᐃΔⲆ.ⵠⲆΔᐃⵠᐃⵠ > ⵠⲆᐃ && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				switch (ᐃᐃΔⲆ.type) {
					case ⵠᐃᐃ.ⵠΔᐃΔΔ:
						var ΔⲆⲆⲆ = ΔⵠⲆ.ⲆⵠⵠΔΔⵠⲆ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
						if (ΔⲆⲆⲆ) ᐃΔᐃⵠ.ᐃΔⲆΔᐃᐃᐃ(ᐃᐃΔⲆ);
						break;
					case ⵠᐃᐃ.ΔⲆⵠΔⲆ:
						var ΔⲆⲆⲆ = ΔⵠⲆ.ⵠᐃᐃⵠⲆⵠᐃ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
						if (ΔⲆⲆⲆ) ᐃΔᐃⵠ.ᐃΔⲆΔᐃᐃᐃ(ᐃᐃΔⲆ);
						break;
					case ⵠᐃᐃ.ᐃΔⲆᐃΔ:
						var ΔⲆⲆⲆ = ΔⵠⲆ.ⵠⲆⲆⲆΔΔΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
						ΔⲆⲆⲆ && ᐃΔᐃⵠ.ᐃΔⲆΔᐃᐃᐃ(ᐃᐃΔⲆ);
						break;
					case ⵠᐃᐃ.ⵠⵠᐃΔΔ:
						var ΔⲆⲆⲆ = ΔⵠⲆ.ⵠⵠΔΔᐃⵠⵠ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
						ΔⲆⲆⲆ && ᐃΔᐃⵠ.ᐃΔⲆΔᐃᐃᐃ(ᐃᐃΔⲆ);
						break;
					case ⵠᐃᐃ.ⵠⲆⲆΔⲆ:
						var ΔⲆⲆⲆ = ΔⵠⲆ.ΔΔΔΔΔⲆΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
						ΔⲆⲆⲆ && ᐃΔᐃⵠ.ᐃΔⲆΔᐃᐃᐃ(ᐃᐃΔⲆ);
						break
				}
			}
			var ᐃⵠᐃᐃ = ᐃⲆⵠ.ᐃⵠᐃᐃ;
			if (ᐃⵠᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃⵠᐃᐃ.ⲆⲆⵠΔΔᐃᐃ > ⵠΔᐃᐃ && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				var ΔⲆⲆⲆ = ΔⵠⲆ.ⵠΔⵠᐃⲆᐃⲆ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
				ΔⲆⲆⲆ && ᐃΔᐃⵠ.ⵠⲆᐃΔⲆⵠⲆΔⵠ(ᐃⵠᐃᐃ)
			}
			if (ᐃⲆⵠ.sign[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				var ΔⲆⲆⲆ = ΔⵠⲆ.sign.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
				ΔⲆⲆⲆ && ΔⵠⲆ.sign.select()
			}
			if (!ᐃⲆⵠ.ⵠᐃⲆΔ.lock && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				if (ᐃⲆⵠ.ⵠᐃⲆΔ.ΔΔΔⲆᐃⲆΔ) {
					ΔⲆⲆⲆ = ΔⵠⲆ.ⲆⵠⵠΔΔΔⵠ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
					if (ΔⲆⲆⲆ) ᐃΔᐃⵠ.ⵠΔⵠΔⵠᐃᐃⵠΔ(ⵠᐃⲆΔ)
				}
			}
			if (ᐃⲆⵠ.ⵠᐃⲆΔ.ᐃᐃⲆᐃΔᐃⲆ && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				ΔⲆⲆⲆ = ΔⵠⲆ.ΔΔΔⲆⵠΔΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
				if (ΔⲆⲆⲆ) {
					ᐃΔᐃⵠ.ⲆⲆᐃᐃΔΔⲆⲆᐃ(ⵠᐃⲆΔ);
					if (ga) ga(ⵠ[554], ⵠ[106], ⵠ[117], "lockpick")
				}
			}
			if (ᐃⲆⵠ.ΔΔᐃᐃΔ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				var ΔⲆⲆⲆ = ΔⵠⲆ.ΔΔᐃᐃΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
				if (ΔⲆⲆⲆ) {
					ᐃΔᐃⵠ.ΔΔᐃᐃΔ();
					ga && ga(ⵠ[554], ⵠ[106], ⵠ[117], "resurrection")
				}
			}
			if (ⵠⲆΔ > ᐃⲆⵠ.ᐃⵠⲆᐃ.id && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				var ᐃΔⲆ = ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ;
				for (var Ⲇᐃ = 0; Ⲇᐃ < ᐃΔⲆ.length; Ⲇᐃ++) {
					var ΔⲆⲆⲆ = ᐃΔⲆ[Ⲇᐃ].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
					if (!ΔⲆⲆⲆ) {
						if (ⵠᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && (ⵠᐃⲆΔ.id < 0 || ⵠᐃⲆΔ.id === ᐃΔⲆ[Ⲇᐃ].id)) {
							var ΔⲆⲆⲆ = ΔⵠⲆ.ⵠⵠⲆⲆⲆ[ᐃΔⲆ[Ⲇᐃ].id].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
							ΔⲆⲆⲆ && Δⵠⵠⵠ > ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ && (() => {
								if (ⲆΔⲆⲆ.shiftKey) {
									if (Settings.PutInChest > 255) {
										for (let i = 0; i < Settings.PutInChest / 255; i++) {
											if (i === Math.floor(Settings.PutInChest / 255)) {
												ᐃΔᐃⵠ.ΔⵠᐃⲆⲆᐃᐃΔΔ(ⵠᐃⲆΔ, ᐃΔⲆ[Ⲇᐃ].id, Settings.PutInChest % 255)
											} else {
												ᐃΔᐃⵠ.ΔⵠᐃⲆⲆᐃᐃΔΔ(ⵠᐃⲆΔ, ᐃΔⲆ[Ⲇᐃ].id, 255)
											}
										}
									} else {
										ᐃΔᐃⵠ.ΔⵠᐃⲆⲆᐃᐃΔΔ(ⵠᐃⲆΔ, ᐃΔⲆ[Ⲇᐃ].id, Settings.PutInChest)
									}
								} else {
									ᐃΔᐃⵠ.ΔⵠᐃⲆⲆᐃᐃΔΔ(ⵠᐃⲆΔ, ᐃΔⲆ[Ⲇᐃ].id, ⵠⲆΔⲆᐃ)
								}
							})()
						} else if (ⵠⵠΔΔᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃΔⲆ[Ⲇᐃ].id === ⵠⵠ.ΔⵠⲆⲆᐃ) {
							var ΔⲆⲆⲆ = ΔⵠⲆ.ⵠⵠⲆⲆⲆ[ᐃΔⲆ[Ⲇᐃ].id].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
							ΔⲆⲆⲆ && ⵠⲆⵠⵠ > ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ && ᐃΔᐃⵠ.ᐃⵠᐃΔᐃΔΔΔⵠ(ⵠⵠΔΔᐃ)
						} else if (ᐃⲆᐃⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃΔⲆ[Ⲇᐃ].id === ⵠⵠ.ⲆⵠᐃΔ) {
							var ΔⲆⲆⲆ = ΔⵠⲆ.ⵠⵠⲆⲆⲆ[ᐃΔⲆ[Ⲇᐃ].id].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
							ΔⲆⲆⲆ && ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && ᐃΔᐃⵠ.ⵠΔᐃΔⵠⲆᐃⲆⵠ(ᐃⲆᐃⵠᐃ, ⲆΔⲆⲆ.shiftKey ? 10 : 1)
						} else if (ⲆᐃⲆⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃΔⲆ[Ⲇᐃ].id === ⵠⵠ.ⵠⵠⵠⵠᐃ) {
							var ΔⲆⲆⲆ = ΔⵠⲆ.ⵠⵠⲆⲆⲆ[ᐃΔⲆ[Ⲇᐃ].id].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
							ΔⲆⲆⲆ && ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && ᐃΔᐃⵠ.ⲆⲆⵠΔᐃΔΔᐃΔ(ⲆᐃⲆⵠ, ⲆΔⲆⲆ.shiftKey ? ΔΔΔᐃⲆ : 1)
						} else if (ᐃᐃΔⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃΔⲆ[Ⲇᐃ].id === ⵠⵠ.ⲆⵠᐃΔ) {
							var ΔⲆⲆⲆ = ΔⵠⲆ.ⵠⵠⲆⲆⲆ[ᐃΔⲆ[Ⲇᐃ].id].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
							ΔⲆⲆⲆ && 0 > ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ && ᐃΔᐃⵠ.ΔⲆΔᐃΔΔⲆⲆⲆ(ᐃᐃΔⲆ, ⲆΔⲆⲆ.shiftKey ? ΔⲆᐃΔⲆ : 1)
						} else if (ᐃⵠᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && (ⵠⵠ.ⲆⵠᐃΔ === ᐃΔⲆ[Ⲇᐃ].id || ᐃΔⲆ[Ⲇᐃ].id === ⵠⵠ.ΔⲆⵠᐃⲆ)) {
							var ΔⲆⲆⲆ = ΔⵠⲆ.ⵠⵠⲆⲆⲆ[ᐃΔⲆ[Ⲇᐃ].id].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
							if (ΔⲆⲆⲆ && ⵠⲆΔ > ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ) {
								ⵠⵠ.ⲆⵠᐃΔ === ᐃΔⲆ[Ⲇᐃ].id ? ᐃΔᐃⵠ.ΔᐃⲆᐃⲆⵠᐃ(ᐃⵠᐃᐃ, ⲆΔⲆⲆ.shiftKey ? ΔΔΔᐃⲆ : ⲆᐃΔ, ᐃⵠⵠⲆ) : ᐃΔᐃⵠ.ΔᐃⲆᐃⲆⵠᐃ(ᐃⵠᐃᐃ, ΔⲆⲆ, ⲆΔⲆⲆ.shiftKey ? ΔΔΔᐃⲆ : 1)
							}
						}
						continue
					} else {
						if (ⲆΔⲆⲆ.which == Δⵠᐃ && !ⲆΔⲆⲆ.shiftKey) ᐃΔᐃⵠ.ⵠⲆⲆᐃⲆ(ᐃΔⲆ[Ⲇᐃ].id, Ⲇᐃ);
						else if ((ⲆΔⲆⲆ.which == ⲆᐃΔ && ⲆΔⲆⲆ.shiftKey || 3 == ⲆΔⲆⲆ.which) && ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < ⵠⲆΔ) ΔⵠⲆ.ΔΔⵠⲆ.ⲆⵠΔⵠΔᐃⲆ(ᐃΔⲆ[Ⲇᐃ].id)
					}
				}
			}
			if (ᐃⲆⵠ.ᐃⵠⲆᐃ.id < 0 && ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ᐃⲆⵠ.ΔΔΔⵠⵠ) {
				var ᐃΔⲆ = ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ;
				for (var Ⲇᐃ = ⵠⵠⵠ; ᐃΔⲆ.length > Ⲇᐃ; Ⲇᐃ++) {
					var ΔⲆⲆⲆ = ᐃΔⲆ[Ⲇᐃ].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
					if (!ΔⲆⲆⲆ) continue;
					ΔΔᐃⲆΔ = ᐃΔᐃⵠ.ΔⲆΔⵠⵠᐃⲆⲆᐃ(ᐃΔⲆ[Ⲇᐃ].id);
					if (ΔΔᐃⲆΔ && ga) ga(ⵠ[554], ⵠ[106], ⵠ[117], "craft", Ⲇⵠᐃᐃ[ᐃⵠⲆᐃⲆ[ᐃΔⲆ[Ⲇᐃ].id].ᐃΔΔᐃ].name)
				}
			}
			if (ᐃⲆⵠ.ᐃⵠⲆᐃ.id < 0 && ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < ⲆⲆⵠⲆ && ᐃⲆⵠ.ΔⵠⲆᐃⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				var ΔⲆⲆⲆ = ΔⵠⲆ.ΔⵠⲆᐃⵠ.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ);
				if (ΔⲆⲆⲆ) ΔᐃᐃⲆ.ΔⵠⲆᐃⵠ.select()
			}
			if (0 > ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				if (ⲆΔⵠⲆ.ⵠΔΔᐃᐃ) {
					var ΔⲆⲆⲆ = ΔⵠⲆ.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
					if (ΔⲆⲆⲆ) {
						ⲆΔⵠⲆ.select();
						ga && ga(ⵠ[554], ⵠ[106], ⵠ[117], "sound on")
					}
				} else {
					var ΔⲆⲆⲆ = ΔⵠⲆ.ⲆΔⵠⲆ.ⵠΔⵠⲆⵠᐃΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
					if (ΔⲆⲆⲆ) {
						ⲆΔⵠⲆ.select();
						ga && ga(ⵠ[554], ⵠ[106], ⵠ[117], "sound off")
					}
				}
			}
			if (ΔΔᐃᐃ > ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				var ΔⲆⲆⲆ = ΔⵠⲆ.options.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
				if (ΔⲆⲆⲆ) {
					ΔⵠⲆ.options.ΔⲆᐃΔⲆΔᐃⲆⲆ();
					if (ga) ga(ⵠ[554], ⵠ[106], ⵠ[117], "options")
				}
			}
			if (0 > ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && ⵠΔᐃ === ΔⵠⲆ.ΔΔΔⵠᐃᐃᐃ) {
				var ΔⲆⲆⲆ = ΔⵠⲆ.ΔⵠⲆⲆΔ.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
				if (ΔⲆⲆⲆ) {
					ΔⵠⲆ.ΔⵠⲆⲆΔ.select();
					if (ga) ga(ⵠ[554], ⵠ[106], ⵠ[117], "market")
				}
			}
			if (ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < ⵠΔᐃⵠ && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && 1 === ΔⵠⲆ.ⲆᐃΔᐃⲆΔᐃ) {
				var ΔⲆⲆⲆ = ΔⵠⲆ.ΔⲆΔΔ.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
				if (ΔⲆⲆⲆ) {
					ΔⵠⲆ.ΔⲆΔΔ.ⲆΔΔᐃᐃⵠΔⵠᐃ();
					if (ga) ga(ⵠ[554], ⵠ[106], ⵠ[117], "recipe")
				}
			}
			if (ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⲆⵠΔ.mode !== ΔᐃᐃΔ.ᐃΔⲆⲆᐃ && ⲆⵠΔ.mode !== ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ && ΔᐃᐃΔ.ⵠᐃΔⵠΔᐃⵠ !== ⲆⵠΔ.mode && ⵠᐃⵠΔ === ΔⵠⲆ.ⲆΔⲆⲆⲆΔⲆ) {
				var ΔⲆⲆⲆ = ΔⵠⲆ.ᐃⲆⲆⲆ.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ);
				if (ΔⲆⲆⲆ) {
					ΔⵠⲆ.ᐃⲆⲆⲆ.select();
					ga && ga(ⵠ[554], ⵠ[106], ⵠ[117], "quests")
				}
			}
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔⵠᐃΔ && ᐃᐃᐃΔᐃ == ⲆΔⲆⲆ.which && ΔⵠⲆ.ΔⲆΔⵠⵠ.ⲆⵠΔⵠΔᐃⲆ()
		};
		this.ΔΔᐃⲆᐃⲆΔ = false;
		this.ⵠΔⵠᐃᐃⲆⲆ = function(ⲆΔⲆⲆ) {
			ⵠΔΔΔ.ⲆⲆⲆⵠ = ⵠᐃⲆΔᐃⵠᐃ(ΔⵠⲆ.ΔⲆ, ⲆΔⲆⲆ);
			var ΔᐃΔⲆᐃ = false;
			ΔᐃᐃⲆ.ⲆⲆⵠⲆᐃ.display = Δⵠⵠⵠ;
			ᐃⲆⵠ.ᐃΔΔⲆ.ᐃⵠΔᐃⵠᐃⵠ.ⵠᐃΔⲆⵠ(ⵠΔΔΔ.ⲆⲆⲆⵠ);
			if (ΔⵠⲆ.ⲆⵠⲆⲆⲆ != -1) ΔᐃΔⲆᐃ |= ΔⵠⲆ.ΔⵠⲆⵠΔ[ΔⵠⲆ.ⲆⵠⲆⲆⲆ].button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ);
			var ⲆᐃⲆⵠ = ᐃⲆⵠ.ⲆᐃⲆⵠ;
			if (ⲆᐃⲆⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⵠᐃⲆⲆ < ⲆᐃⲆⵠ.ΔⲆⲆΔᐃ) ΔᐃΔⲆᐃ |= ΔⵠⲆ.ΔᐃᐃⵠⵠⵠⲆ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ);
			var ᐃᐃΔⲆ = ᐃⲆⵠ.ᐃᐃΔⲆ;
			ᐃᐃΔⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃᐃΔⲆ.ⵠⲆΔᐃⵠᐃⵠ > ΔⲆⲆ && (ΔᐃΔⲆᐃ |= ΔⵠⲆ.ⲆⵠⵠΔΔⵠⲆ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ), ΔᐃΔⲆᐃ |= ΔⵠⲆ.ⵠᐃᐃⵠⲆⵠᐃ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ), ΔᐃΔⲆᐃ |= ΔⵠⲆ.ⵠⲆⲆⲆΔΔΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ), ΔᐃΔⲆᐃ |= ΔⵠⲆ.ⵠⵠΔΔᐃⵠⵠ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ), ΔᐃΔⲆᐃ |= ΔⵠⲆ.ΔΔΔΔΔⲆΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ));
			var ᐃⵠᐃᐃ = ᐃⲆⵠ.ᐃⵠᐃᐃ;
			ᐃⵠᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⵠⵠⵠΔ < ᐃⵠᐃᐃ.ⲆⲆⵠΔΔᐃᐃ && (ΔᐃΔⲆᐃ |= ΔⵠⲆ.ⵠΔⵠᐃⲆᐃⲆ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ));
			ᐃⲆⵠ.sign[ⲆᐃⲆⵠΔΔⲆ[36]] && (ΔᐃΔⲆᐃ |= ΔⵠⲆ.sign.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ));
			var ⵠᐃⲆΔ = ᐃⲆⵠ.ⵠᐃⲆΔ;
			if (Ⲇᐃⵠ > ᐃⲆⵠ.ᐃⵠⲆᐃ.id && 0 <= ⵠᐃⲆΔ.id) {
				(!ᐃⲆⵠ.ⵠᐃⲆΔ.lock || ᐃⲆⵠ.ⵠᐃⲆΔ.ⵠⵠΔᐃ === ᐃⲆⵠ.id) && (ΔᐃΔⲆᐃ |= ΔⵠⲆ.ᐃⵠΔ[ⵠᐃⲆΔ.id].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ))
			}
			if (ᐃⲆⵠ.ΔΔᐃᐃΔ[ⲆᐃⲆⵠΔΔⲆ[36]]) ΔᐃΔⲆᐃ |= ΔⵠⲆ.ΔΔᐃᐃΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ);
			if (!ᐃⲆⵠ.ⵠᐃⲆΔ.lock) {
				ᐃⲆⵠ.ⵠᐃⲆΔ.ΔΔΔⲆᐃⲆΔ && (ΔᐃΔⲆᐃ |= ΔⵠⲆ.ⲆⵠⵠΔΔΔⵠ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ))
			}
			ᐃⲆⵠ.ⵠᐃⲆΔ.ᐃᐃⲆᐃΔᐃⲆ && (ΔᐃΔⲆᐃ |= ΔⵠⲆ.ΔΔΔⲆⵠΔΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ));
			if (ⵠⵠⵠΔ > ᐃⲆⵠ.ᐃⵠⲆᐃ.id ) {
				var ᐃΔⲆ = ᐃⲆⵠ.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ;
				for (var Ⲇᐃ = ⵠᐃⲆⲆ; ᐃΔⲆ.length > Ⲇᐃ; Ⲇᐃ++) {
					var ⵠⵠᐃΔⵠᐃᐃ = ᐃΔⲆ[Ⲇᐃ].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ);
					ΔᐃΔⲆᐃ |= ΔᐃᐃⲆ.ⲆⲆⵠⲆᐃ.ΔⵠΔΔ(ⵠⵠᐃΔⵠᐃᐃ, ᐃΔⲆ[Ⲇᐃ], ⵠⵠⵠΔ);
					(ⵠᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && (ⵠᐃⲆΔ.id < ⵠΔᐃⵠ || ⵠᐃⲆΔ.id == ᐃΔⲆ[Ⲇᐃ].id) || ᐃⲆⵠ.ᐃⲆᐃⵠᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃΔⲆ[Ⲇᐃ].id == ⵠⵠ.ⲆⵠᐃΔ || ᐃⲆⵠ.ⵠⵠΔΔᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃΔⲆ[Ⲇᐃ].id === ⵠⵠ.ΔⵠⲆⲆᐃ || ᐃⲆⵠ.ᐃⵠᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[36]] && (ᐃΔⲆ[Ⲇᐃ].id == ⵠⵠ.ⲆⵠᐃΔ || ⵠⵠ.ΔⲆⵠᐃⲆ == ᐃΔⲆ[Ⲇᐃ].id) || ᐃⲆⵠ.ⲆᐃⲆⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && ᐃΔⲆ[Ⲇᐃ].id == ⵠⵠ.ⵠⵠⵠⵠᐃ || ᐃⲆⵠ.ᐃᐃΔⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⵠⵠ.ⲆⵠᐃΔ == ᐃΔⲆ[Ⲇᐃ].id) && (ΔᐃΔⲆᐃ |= ΔⵠⲆ.ⵠⵠⲆⲆⲆ[ᐃΔⲆ[Ⲇᐃ].id].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ))
				}
			}
			if (ᐃⲆⵠ.ᐃⵠⲆᐃ.id < 0 && ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < ᐃᐃⲆ && !ᐃⲆⵠ.ΔΔΔⵠⵠ) {
				var ᐃΔⲆ = ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ;
				for (var Ⲇᐃ = Δⵠⵠⵠ; Ⲇᐃ < ᐃΔⲆ.length; Ⲇᐃ++) {
					var ⵠⵠᐃΔⵠᐃᐃ = false;
					ⵠⵠᐃΔⵠᐃᐃ = ᐃΔⲆ[Ⲇᐃ].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ);
					ΔᐃΔⲆᐃ |= ΔᐃᐃⲆ.ⲆⲆⵠⲆᐃ.ΔⵠΔΔ(ⵠⵠᐃΔⵠᐃᐃ, ᐃΔⲆ[Ⲇᐃ], ⵠΔᐃ)
				}
			}
			ΔΔᐃᐃ > ᐃⲆⵠ.ᐃⵠⲆᐃ.id && ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && ᐃⲆⵠ.ΔⵠⲆᐃⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && (ΔᐃΔⲆᐃ |= ΔⵠⲆ.ΔⵠⲆᐃⵠ.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ));
			if (ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < ⲆⲆⵠⲆ && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && ΔⵠⲆ.ⲆᐃΔᐃⲆΔᐃ === ᐃⲆΔ) ΔᐃΔⲆᐃ |= ΔⵠⲆ.ΔⲆΔΔ.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ);
			if (0 > ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]) ΔᐃΔⲆᐃ |= ΔⵠⲆ.options.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ);
			ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < ΔⲆⲆ && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && Δᐃⵠⵠ === ΔⵠⲆ.ΔΔΔⵠᐃᐃᐃ && (ΔᐃΔⲆᐃ |= ΔⵠⲆ.ΔⵠⲆⲆΔ.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ));
			if (ⲆⵠⲆⲆ > ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ᐃⲆⲆⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]) {
				ⲆΔⵠⲆ.ⵠΔΔᐃᐃ ? ΔᐃΔⲆᐃ |= ΔⵠⲆ.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ) : ΔᐃΔⲆᐃ |= ΔⵠⲆ.ⲆΔⵠⲆ.ⵠΔⵠⲆⵠᐃΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ)
			}
			if (ᐃⲆⵠ.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !ΔⵠⲆ.ΔⲆΔΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔΔⵠⲆ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.options[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⲆΔⵠⵠ[ⲆᐃⲆⵠΔΔⲆ[36]] && !ΔⵠⲆ.ΔⵠⲆⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]] && ⲆⵠΔ.mode !== ΔᐃᐃΔ.ᐃΔⲆⲆᐃ && ⲆⵠΔ.mode !== ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ && ΔᐃᐃΔ.ΔᐃΔΔⵠⵠⵠⲆⵠ !== ⲆⵠΔ.mode && ΔⵠⲆ.ⲆΔⲆⲆⲆΔⲆ === 1) ΔᐃΔⲆᐃ |= ΔⵠⲆ.ᐃⲆⲆⲆ.button.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ);
			if (ΔᐃΔⲆᐃ !== ΔⵠⲆ.ΔΔᐃⲆᐃⲆΔ) {
				ΔⵠⲆ.ΔΔᐃⲆᐃⲆΔ = ΔᐃΔⲆᐃ;
				ΔᐃΔⲆᐃ ? ΔⲆ.style[ⵠ[395]] = ΔⵠⲆ.ⲆⲆⵠⲆΔⵠⵠ : ΔⲆ.style[ⵠ[395]] = ΔⵠⲆ.ⵠᐃⵠΔΔΔᐃ
			}
		};
		this.ⵠΔⲆⵠⲆⵠΔ = function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], this.ΔΔᐃⲆⵠᐃΔ, ΔⲆΔᐃᐃ);
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ⲆΔΔⵠⲆⵠᐃ, ΔⵠΔΔⲆ);
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[82], this.ⵠΔⵠᐃᐃⲆⲆ, false);
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("keyup", this.ᐃΔⵠⵠⲆⵠᐃ, false);
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("keydown", this.ᐃⵠΔᐃᐃᐃⵠ, ⵠᐃⵠⲆⲆ)
		};
		this.ⲆⲆⲆⲆⵠⵠᐃ = function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[237]](ⵠ[51], this.ΔΔᐃⲆⵠᐃΔ, ΔⲆΔᐃΔ);
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[237]](ⵠ[180], this.ⲆΔΔⵠⲆⵠᐃ, false);
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[237]](ⵠ[82], this.ⵠΔⵠᐃᐃⲆⲆ, ΔⵠΔΔⲆ);
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[237]]("keyup", this.ᐃΔⵠⵠⲆⵠᐃ, false);
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[237]]("keydown", this.ᐃⵠΔᐃᐃᐃⵠ, false)
		}
	}

	function ⵠⲆⵠⵠᐃⲆᐃⵠⲆ(ΔⲆ, Ⲇ, ⵠⵠᐃᐃⵠⵠᐃⲆᐃ) {
		this.ΔⲆ = ΔⲆ;
		this.Ⲇ = Ⲇ;
		this.ⵠΔⵠⲆΔᐃΔ = {
			translate: {
				y: 0,
				x: ⵠΔᐃᐃ
			},
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("loading").style,
			"ⲆᐃⲆ": function() {
				this.style.left = this.translate.x + ⵠ[407];
				this.style.top = Math.floor(this.translate.y) + ⵠ[407]
			}
		};
		this.ⵠΔⵠⲆΔᐃΔ.style.position = "absolute";
		this.ⵠΔⵠⲆΔᐃΔ.style.display = ⵠ[442];
		this.ⵠΔⵠⲆΔᐃΔ.ⲆᐃⲆ();
		this.ᐃⲆⵠᐃᐃ = true;
		this.stop = function() {
			this.ᐃⲆⵠᐃᐃ = false
		};
		this.ΔⲆⲆⲆΔᐃⲆ = {
			total: 1
		};
		var ΔⵠⲆ = this;
		var ⵠⵠᐃΔⲆ = function() {};
		var ᐃⵠΔᐃᐃ = 0;
		var ⲆⲆⵠⲆⲆ = 40;
		this.ΔⲆⲆᐃᐃ = function() {
			ΔⵠⲆ.ⲆᐃⲆ();
			ᐃⵠΔᐃᐃ++;
			if (ⲆⲆⵠⲆⲆ == ᐃⵠΔᐃᐃ) {
				ΔⵠⲆ.stop();
				ⵠⵠᐃΔⲆ();
				return
			}
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]](ΔⵠⲆ.ΔⲆⲆᐃᐃ, 0)
		};
		this.ⲆⵠᐃΔⲆ = function(ⲆΔᐃᐃⵠ) {
			ⵠⵠᐃΔⲆ = ⲆΔᐃᐃⵠ;
			ΔⵠⲆ.ΔⲆⲆᐃᐃ()
		};
		var ᐃⲆᐃᐃΔⵠⵠⲆᐃ = (new Date).getTime();

		function ΔⵠΔᐃⵠΔⲆ(name) {
			if (name.indexOf("normal-mode") !== -1 || -ΔⵠⲆⲆ !== name.indexOf("player0")) return 1;
			if (name.indexOf("day-bag") !== -1 || -ⵠⲆⲆ !== name.indexOf("night-bag") || name.indexOf("day-book") !== -ΔⵠΔ || name.indexOf("night-book") !== -ΔΔΔᐃ || -Ⲇⵠᐃ !== name.indexOf("day-player") || -ΔⲆᐃᐃ !== name.indexOf("night-player") || name.indexOf("day-accessory") !== -1 || name.indexOf("night-accessory") !== -ΔᐃⵠⲆ || name.indexOf("day-crate") !== -1 || name.indexOf("night-crate") !== -1 || name.indexOf("day-skin") !== -ΔᐃⵠⲆ || name.indexOf("night-skin") !== -ᐃᐃΔ || -ΔᐃΔⲆ !== name.indexOf("day-river") || -1 !== name.indexOf("night-river") || name.indexOf("day-river") !== -1 || -ⵠΔᐃ !== name.indexOf("night-river") || name.indexOf("day-rock") !== -1 || name.indexOf("night-rock") !== -ⵠΔᐃ || name.indexOf("day-flower") !== -1 || name.indexOf("night-flower") !== -1 || -1 !== name.indexOf("day-leaf") || name.indexOf("night-leaf") !== -ⵠΔᐃ || -ⵠΔᐃ !== name.indexOf("day-herb") || name.indexOf("night-herb") !== -1 || -ΔᐃⵠⲆ !== name.indexOf("day-shell") || -ⵠᐃⵠΔ !== name.indexOf("night-shell") || -ⵠᐃⵠΔ !== name.indexOf("day-hand-skin") || name.indexOf("night-hand-skin") !== -ᐃⲆΔ || -1 !== name.indexOf("bignight") || name.indexOf("bigday") !== -ΔⲆᐃⲆ || name.indexOf("bigzday") !== -ΔΔⵠΔ || -ΔΔΔᐃ !== name.indexOf("bigznight") || name.indexOf("tutorial-box") !== -1 || name.indexOf("tuto-") !== -1 || -1 !== name.indexOf("-leaderboard-") || -ΔᐃⲆⲆ !== name.indexOf("-lead-") || -ᐃⲆΔ !== name.indexOf("day-lava-") || -ⲆᐃΔ !== name.indexOf("night-lava-") || name.indexOf("-click.png") !== -ⵠΔᐃ || -1 !== name.indexOf("-in.png") || -ⵠⲆⲆ !== name.indexOf("-fog") || -ΔΔΔᐃ !== name.indexOf("-lava") || -1 !== name.indexOf("pebblecompo") || -ΔⲆᐃᐃ !== name.indexOf("avatar-player")) return ⵠᐃⲆⲆ;
			return 1
		}
		var ᐃΔᐃⲆⵠⵠᐃ = Object.keys(ⵠᐃ).length;
		var ᐃΔᐃᐃᐃⵠⲆΔⲆ = ᐃΔᐃⲆⵠⵠᐃ;
		for (var ᐃᐃ in ⵠᐃ) {
			if (ΔⵠΔᐃⵠΔⲆ(ⵠᐃ[ᐃᐃ]) === ⵠⲆΔ) ᐃΔᐃⲆⵠⵠᐃ--
		}
		var ⵠⵠᐃᐃᐃΔΔᐃⵠ = function() {
			if (this.ⲆᐃⲆⵠⵠⲆⵠ !== 0) return this.ⲆᐃⲆⵠⵠⲆⵠ;
			this.ⲆᐃⲆⵠⵠⲆⵠ = 2;
			this.src = this.ⵠⵠⵠΔᐃ;
			return ΔΔᐃᐃ
		};
		var ΔΔΔⲆⵠᐃⵠ = function(ⵠᐃⲆᐃ) {
			this.ⲆᐃⲆⵠⵠⲆⵠ = Δⵠᐃ
		};
		var ΔΔⲆΔᐃΔΔ = ⵠᐃⲆⲆ;
		var ⲆΔᐃⵠⲆⲆᐃᐃᐃ = function() {
			if (ΔΔⲆΔᐃΔΔ === ΔⲆᐃⲆ) return;
			ΔΔⲆΔᐃΔΔ = 1;
			if (ᐃΔΔⲆⲆΔᐃ !== ᐃⲆᐃΔⲆᐃⲆ) ᐃⲆᐃΔⲆᐃⲆ();
			ᐃΔΔⲆⲆΔᐃ();
			var ΔΔᐃΔⵠⲆⵠ = ΔⵠΔⵠ.ΔⲆΔΔⲆⲆⵠ("server");
			null !== ΔΔᐃΔⵠⲆⵠ && (ᐃΔᐃⵠ.ΔⲆⲆⲆᐃΔⲆ = 1, ᐃΔᐃⵠ.Ⲇᐃᐃⵠⵠ = [{
				nu: ΔΔᐃᐃ,
				m: ⲆⵠⲆΔⵠⲆⲆ,
				i: "server" + ΔΔᐃΔⵠⲆⵠ + ".starve.io",
				p: 443,
				a: ΔΔᐃΔⵠⲆⵠ,
				ssl: ΔⲆᐃᐃ
			}]);
			ᐃΔᐃⵠ.ΔᐃⲆⵠᐃᐃⵠΔΔ();
			setTimeout(ⵠⵠᐃᐃⵠⵠᐃⲆᐃ, 100)
		};
		var ᐃΔᐃᐃΔⵠⲆ = function() {
			let ΔΔⲆᐃⵠⲆⵠ = function() {
				ᐃΔᐃⵠ.ⲆⵠⲆΔⲆΔᐃ(ⲆΔᐃⵠⲆⲆᐃᐃᐃ)
			};
			if (!document.fonts || !document.fonts.check) setTimeout(ΔΔⲆᐃⵠⲆⵠ, 1e3);
			else if (document.fonts.check("1em Baloo Paaji")) setTimeout(ΔΔⲆᐃⵠⲆⵠ, ⵠⵠⲆⲆⵠ);
			else setTimeout(ᐃΔᐃᐃΔⵠⲆ, ᐃΔⵠᐃⵠ)
		};
		var ⵠΔⲆᐃΔΔⵠ = function() {
			this.ᐃΔᐃΔΔΔᐃ++;
			console.warn(`Image (${this.src}) failed to load, attempt ${this.ᐃΔᐃΔΔΔᐃ}`, this);
			this.ᐃΔᐃΔΔΔᐃ > 3 && console.warn("Failed to load image too many times");
			var ⲆΔⵠⲆᐃΔⲆΔΔ = this.ᐃΔᐃΔΔΔᐃ;
			var ⵠⵠⵠΔᐃ = this.src;
			var ᐃΔᐃⲆᐃᐃⲆⲆⵠ = ⵠΔᐃⵠ === ΔⵠΔᐃⵠΔⲆ(ⵠⵠⵠΔᐃ) ? 1e4 : 2e3;
			setTimeout((function() {
				for (var Ⲇᐃ in ⲆᐃΔⵠⵠᐃⵠ) {
					if (ⵠⵠⵠΔᐃ.indexOf(ⲆᐃΔⵠⵠᐃⵠ[Ⲇᐃ]) !== -1) {
						ⵠᐃ[Ⲇᐃ] = new Image;
						ⵠᐃ[Ⲇᐃ].onload = ΔΔΔⲆⵠᐃⵠ;
						ⵠᐃ[Ⲇᐃ].onerror = ⵠΔⲆᐃΔΔⵠ;
						ⵠᐃ[Ⲇᐃ].ᐃΔᐃΔΔΔᐃ = ⲆΔⵠⲆᐃΔⲆΔΔ;
						ⵠᐃ[Ⲇᐃ].src = ⵠⵠⵠΔᐃ;
						break
					}
				}
			}), ᐃΔᐃⲆᐃᐃⲆⲆⵠ)
		};

		function ᐃⲆⵠᐃⲆⵠⲆ(ⵠⲆⲆΔⲆⲆΔⵠⲆ) {
			for (var Ⲇᐃ in ⵠᐃ) {
				var ΔᐃⵠᐃⲆ = ⵠᐃ[Ⲇᐃ];
				if (typeof ΔᐃⵠᐃⲆ !== ⵠ[262]) continue;
				if (ΔⵠΔᐃⵠΔⲆ(ΔᐃⵠᐃⲆ) !== ⵠⲆⲆΔⲆⲆΔⵠⲆ) continue;
				ⵠᐃ[Ⲇᐃ] = new Image;
				ⵠᐃ[Ⲇᐃ].ⲆᐃⲆⵠⵠⲆⵠ = ⵠⲆⵠⵠ;
				ⵠᐃ[Ⲇᐃ].ᐃΔᐃΔΔΔᐃ = ⵠⲆΔ;
				ⵠᐃ[Ⲇᐃ].onload = ΔΔΔⲆⵠᐃⵠ;
				ⵠᐃ[Ⲇᐃ].onerror = ⵠΔⲆᐃΔΔⵠ;
				ⵠᐃ[Ⲇᐃ].ᐃⲆⵠᐃⲆΔⵠ = ⵠⵠᐃᐃᐃΔΔᐃⵠ;
				ⵠᐃ[Ⲇᐃ].ⵠⵠⵠΔᐃ = ΔᐃⵠᐃⲆ
			}
		}
		ᐃⲆⵠᐃⲆⵠⲆ(ⲆΔΔΔ);
		ᐃⲆⵠᐃⲆⵠⲆ(0);
		ᐃⵠΔΔΔ(ΔᐃⵠⲆ, "l", ᐃⲆΔⲆⲆΔᐃ, ⵠ[204]);
		ᐃΔᐃᐃΔⵠⲆ();
		ⲆΔᐃⲆⲆΔⲆ();
		this.ⲆᐃⲆ = function() {
			this.ⵠΔⵠⲆΔᐃΔ.translate.x = (ᐃⲆⵠⵠ - 500) / 2;
			this.ⵠΔⵠⲆΔᐃΔ.translate.y = (Ⲇᐃᐃᐃ - 150) / ΔⲆᐃΔ;
			var ⵠⲆⲆΔ = 2500 / (ⲆⲆⵠⲆⲆ - ᐃⵠΔᐃᐃ + ΔᐃⲆⲆ) - 48;
			this.ⵠΔⵠⲆΔᐃΔ.translate.y -= ⵠⲆⲆΔ;
			this.ⵠΔⵠⲆΔᐃΔ.ⲆᐃⲆ()
		};
		this.ⵠΔⵠⲆΔᐃΔ.ⲆᐃⲆ();
		this.ⵠᐃᐃⲆ = function() {
			try {
				ᐃΔΔⲆᐃᐃⲆ()
			} catch (ᐃⲆⵠⲆ) {}
			this.ⲆᐃⲆ()
		}
	}

	function ΔⲆⵠⲆΔⵠⵠⵠⲆ(ΔⲆⵠⵠᐃ) {
		return ⲆᐃⵠΔΔⲆΔⵠΔ(ΔⲆⵠⵠᐃ, 57574, 15529, 8932, 63163, 4378)
	}

	function ⲆᐃⵠΔΔⲆΔⵠΔ(ΔⲆⲆⲆⲆⲆΔ, ⵠᐃⲆⵠΔΔⲆ, ⵠⵠⵠΔᐃⲆⵠ, ⵠΔᐃⲆⵠⲆⵠ, ΔΔΔΔᐃΔΔ) {
		const ⲆΔΔᐃⲆⲆᐃ = (2531011 + 214013 * (56638 + ΔⲆⲆⲆⲆⲆΔ)) % 4294967296;
		const ⵠᐃΔΔⵠΔᐃ = 62729 ^ ⵠᐃⲆⵠΔΔⲆ;
		const ⲆⵠᐃΔⲆⵠⲆ = ⵠⵠⵠΔᐃⲆⵠ ^ 6258;
		const ⲆΔΔⲆΔⵠᐃ = (2147483587 + 2147483629 * (ⵠΔᐃⲆⵠⲆⵠ + 690)) % 2147483647;
		const ⲆΔⲆⲆⵠΔⲆ = (2531011 + 214013 * (ΔΔΔΔᐃΔΔ + 22283)) % 4294967296;
		const ⵠⵠⵠᐃⲆⵠᐃ = ⵠᐃᐃΔⲆⲆᐃ(ⲆΔΔᐃⲆⲆᐃ, ⵠᐃΔΔⵠΔᐃ, ⲆⵠᐃΔⲆⵠⲆ, ⲆΔΔⲆΔⵠᐃ, ⲆΔⲆⲆⵠΔⲆ, ⲆΔΔᐃⲆⲆᐃ);
		const ⵠⵠᐃΔᐃⵠΔᐃⵠ = ᐃⲆⲆᐃΔΔⵠⵠⲆ(ⵠᐃΔΔⵠΔᐃ, ⲆⵠᐃΔⲆⵠⲆ, ⲆΔΔⲆΔⵠᐃ, ⲆΔⲆⲆⵠΔⲆ);
		const ΔⵠᐃⵠⵠⵠΔΔᐃ = ~(ⵠⵠⵠᐃⲆⵠᐃ & 9360) & (ⵠⵠⵠᐃⲆⵠᐃ | 9360);
		return ΔⵠᐃⵠⵠⵠΔΔᐃ
	}

	function ⵠⲆΔⲆⲆⲆⲆ(ᐃⲆᐃⵠⵠⲆⵠ, ⵠᐃⲆᐃΔⵠᐃ, ⲆᐃΔⵠⵠⲆⵠ, ⲆⲆᐃⲆᐃⵠᐃ) {
		const ⲆΔⲆⵠΔΔᐃ = (55384 | ᐃⲆᐃⵠⵠⲆⵠ) & ~(ᐃⲆᐃⵠⵠⲆⵠ & 55384);
		const ⵠⲆⵠΔΔⵠⵠ = (24 << (ⵠᐃⲆᐃΔⵠᐃ >> ΔᐃⲆⲆΔ & 255)) + (16 << (ⵠᐃⲆᐃΔⵠᐃ >> 0 & 255)) + (0 << (ⵠᐃⲆᐃΔⵠᐃ >> 8 & 255)) + (8 << (ⵠᐃⲆᐃΔⵠᐃ >> 24 & 255));
		const ᐃᐃᐃⲆⲆΔᐃ = ⲆᐃΔⵠⵠⲆⵠ ^ 34793;
		const ΔΔΔᐃⵠⲆΔ = ~(10045 & ⲆⲆᐃⲆᐃⵠᐃ) & ⲆⲆᐃⲆᐃⵠᐃ | ~(ⲆⲆᐃⲆᐃⵠᐃ & 10045) & 10045;
		const ᐃⲆΔⵠⲆⵠⲆⵠⵠ = ΔⲆⵠᐃᐃᐃⵠ(ⲆΔⲆⵠΔΔᐃ, ⵠⲆⵠΔΔⵠⵠ, ᐃᐃᐃⲆⲆΔᐃ, ΔΔΔᐃⵠⲆΔ, ⲆΔⲆⵠΔΔᐃ, ⵠⲆⵠΔΔⵠⵠ);
		const ⲆⵠᐃⵠⲆⵠΔⵠⲆ = ᐃⵠΔⲆᐃⲆΔⲆΔ(ᐃᐃᐃⲆⲆΔᐃ, ΔΔΔᐃⵠⲆΔ, ⲆΔⲆⵠΔΔᐃ, ⵠⲆⵠΔΔⵠⵠ, ᐃᐃᐃⲆⲆΔᐃ);
		const ᐃⵠᐃⲆⲆΔΔⵠⵠ = (2147483629 * (10812 + (ᐃⲆΔⵠⲆⵠⲆⵠⵠ ^ ⲆⵠᐃⵠⲆⵠΔⵠⲆ)) + 2147483587) % 2147483647;
		return ᐃⵠᐃⲆⲆΔΔⵠⵠ
	}

	function ⵠᐃᐃΔᐃΔⲆΔΔ(ΔⲆ, Ⲇ) {
		this.ΔⲆ = ΔⲆ;
		this.Ⲇ = Ⲇ;
		var ΔⵠⲆ = this;
		this.ᐃⲆΔᐃᐃΔΔ = false;
		this.ⵠⵠⵠⵠⵠⵠᐃ = {
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]]("scoreboard"),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("scoreboard").style,
			height: ΔⲆⲆ,
			translate: {
				y: ΔΔᐃᐃ,
				x: Δⵠⵠⵠ
			},
			"ⲆᐃⲆ": function() {
				this.style.left = this.translate.x + ⵠ[407];
				this.style.top = this.translate.y + ⵠ[407]
			},
			"ⵠΔⲆΔⲆ": function() {
				this.id[ⲆᐃⲆⵠΔΔⲆ[112]] = '<div style="position:absolute;"> <img src="./img/scoreboard.png"style="width:250px;transform:translate(125px, -80px);"> </img> </div><div><div id="whokilled">' + ᐃⲆⵠ.ᐃⵠᐃᐃᐃΔΔ.ᐃⵠⲆⵠⲆⲆⵠ + '</div></div><div class="deco" style="margin-top:35px;"></div><div class="deco"></div><div><div class="stats"> ' + ⲆΔⵠ[ΔΔΔ.ᐃΔΔⵠⵠⵠΔ] + ⵠ[203] + ᐃⲆⵠ.ⲆΔᐃ + '</div><div class="stats"> ' + ⲆΔⵠ[ΔΔΔ.ᐃⲆⵠΔⵠⵠᐃ] + ⵠ[203] + ᐃⲆⵠ.ᐃⵠᐃᐃᐃΔΔ.ΔᐃΔⵠⲆ + "</div></div>" + '<div id="flexDisplay"><div id="score"> ' + ⲆΔⵠ[ΔΔΔ.ᐃΔΔᐃⵠⲆᐃ] + ⵠ[203] + ᐃⲆⵠ.ᐃⵠᐃᐃᐃΔΔ.ᐃⲆⲆⲆⲆ + '</div><div id="breadWon"><span id="breadWonInner">0</span><img src="./img/golden-bread.png" style="width:50px;margin-left:-25px;transform: translate(37px, 8px);"></img></div></div><div><div id="points"> ' + ᐃⲆⵠ.ᐃⵠᐃᐃᐃΔΔ.ⵠⵠⲆᐃⲆⲆⲆ + " " + ⲆΔⵠ[ΔΔΔ.POINTS] + '</div></div><div id="shop_points">' + ⲆΔⵠ[ΔΔΔ.ⵠⲆᐃᐃⵠᐃⵠ] + '</div><div style="display:inline-block;"><div class="social" id="tttwitter">' + ⲆΔⵠ[ΔΔΔ.ᐃᐃΔⵠⲆⵠⵠ] + '</div><div class="social" id="fffacebook">' + ⲆΔⵠ[ΔΔΔ.ᐃΔΔΔⵠⵠᐃ] + '</div></div><div id="bbback">' + ⲆΔⵠ[ΔΔΔ.ⲆⲆⲆⵠΔᐃᐃ] + ⵠ[470];
				this.style.display = ⵠ[442];
				document[ⲆᐃⲆⵠΔΔⲆ[185]]("tttwitter")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], ⵠⵠⵠⲆⲆΔⵠᐃΔ, false);
				document[ⲆᐃⲆⵠΔΔⲆ[185]]("bbback")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], (function() {
					ⲆΔᐃΔΔⵠΔ.ⲆⵠᐃΔⲆ(ᐃΔΔΔ.ⵠΔΔᐃᐃ)
				}), false);
				document[ⲆᐃⲆⵠΔΔⲆ[185]]("fffacebook")[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], ⲆⲆΔΔΔΔΔⲆⵠ, ΔⵠΔⵠⵠ);
				this.height = Math.floor(this.id[ⲆᐃⲆⵠΔΔⲆ[217]] / ΔⲆᐃΔ);
				ᐃⵠⲆΔⲆᐃⲆⵠⵠ()
			}
		};
		var ⵠⲆᐃᐃᐃ = Ⲇᐃⵠ;
		var ⵠⲆΔⵠᐃ = 30;
		var ΔⲆΔᐃⵠⲆΔ = function() {
			ΔⵠⲆ.ⲆᐃⲆ();
			ⵠⲆᐃᐃᐃ++;
			if (ⵠⲆΔⵠᐃ == ⵠⲆᐃᐃᐃ) {
				ΔⵠⲆ.ⲆᐃⲆ();
				return
			}
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]](ΔⲆΔᐃⵠⲆΔ, 0)
		};
		this.ⲆⵠᐃΔⲆ = function(ⲆΔᐃᐃⵠ) {
			true === ΔⵠⲆ.ᐃⲆΔᐃᐃΔΔ && (ΔⵠⲆ.ᐃⲆΔᐃᐃΔΔ = ΔⵠⵠᐃΔ, ⵠⵠᐃΔⲆ = ⲆΔᐃᐃⵠ, ᐃⵠΔᐃᐃ = -ΔΔⵠΔ, ΔⲆⲆᐃᐃ(), ΔⲆΔⵠᐃⲆΔ())
		};
		var ⵠⵠᐃΔⲆ;
		var ᐃⵠΔᐃᐃ = -1;
		var ⲆⲆⵠⲆⲆ = 30;
		var ΔⲆⲆᐃᐃ = function() {
			ΔⵠⲆ.ⲆᐃⲆ();
			ᐃⵠΔᐃᐃ++;
			if (ᐃⵠΔᐃᐃ == ⲆⲆⵠⲆⲆ) {
				ΔⵠⲆ.stop();
				ΔⵠⲆ.ⵠⵠⵠⵠⵠⵠᐃ.style.display = ⵠ[181];
				ⵠⵠᐃΔⲆ();
				return
			}
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]](ΔⲆⲆᐃᐃ, 0)
		};
		this.ᐃⲆⵠᐃᐃ = ᐃΔⵠᐃⲆ;
		this.stop = function() {
			this.ᐃⲆⵠᐃᐃ = false
		};
		this.ⵠΔΔᐃᐃ = function() {
			check_ads();
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[284]).style.backgroundColor = Δ.ⵠⵠΔᐃⵠ[ΔⵠⵠⵠⲆ.time];
			ΔⵠⲆ.ⵠⵠⵠⵠⵠⵠᐃ.ⵠΔⲆΔⲆ();
			ᐃΔΔΔ.ᐃᐃⵠΔᐃ.style.display = ⵠ[442];
			ΔⵠⲆ.ᐃⲆⵠᐃᐃ = true;
			ΔⵠⲆ.ᐃⲆΔᐃᐃΔΔ = true;
			ᐃⵠΔᐃᐃ = -1;
			ⵠⲆᐃᐃᐃ = ⵠΔᐃⵠ;
			ΔⲆΔᐃⵠⲆΔ()
		};
		this.ⲆᐃⲆ = function() {
			this.ⵠⵠⵠⵠⵠⵠᐃ.translate.x = Math.floor(ΔⵠⵠΔ - 275);
			this.ⵠⵠⵠⵠⵠⵠᐃ.translate.y = Math.floor(ᐃⲆΔⲆ - this.ⵠⵠⵠⵠⵠⵠᐃ.height - 28);
			ᐃΔΔΔ.ᐃᐃⵠΔᐃ.translate.x = this.ⵠⵠⵠⵠⵠⵠᐃ.translate.x - 350;
			ᐃΔΔΔ.ᐃᐃⵠΔᐃ.translate.y = this.ⵠⵠⵠⵠⵠⵠᐃ.translate.y + 0;
			ᐃΔΔΔ.ᐃᐃⵠΔᐃ.ⲆᐃⲆ();
			if (ⵠⲆΔⵠᐃ != ⵠⲆᐃᐃᐃ || -1 != ᐃⵠΔᐃᐃ) {
				var ⵠⲆⲆΔ = ⵠⲆⵠⵠ;
				if (ⵠⲆΔⵠᐃ != ⵠⲆᐃᐃᐃ) {
					var ⵠⲆⲆΔ = 1500 / (ⵠⲆᐃᐃᐃ + Δⵠᐃ) - 50
				}
				if (ᐃⵠΔᐃᐃ != -ⵠⲆⲆ) {
					var ⵠⲆⲆΔ = -(1750 / (ⲆⲆⵠⲆⲆ - ᐃⵠΔᐃᐃ + 1) - 48)
				}
				this.ⵠⵠⵠⵠⵠⵠᐃ.translate.y -= ⵠⲆⲆΔ
			}
			this.ⵠⵠⵠⵠⵠⵠᐃ.ⲆᐃⲆ()
		};
		this.ⵠᐃᐃⲆ = function() {
			ᐃΔΔⲆᐃᐃⲆ();
			ᐃⲆⵠ.alert.ⵠᐃᐃⲆ(ⵠ[447], ⵠ[204])
		}
	}

	function ⵠΔⲆⵠΔⲆΔ(ᐃⲆᐃⲆΔΔⲆ, ⲆᐃᐃΔⲆⲆᐃΔⵠ, ⲆᐃΔⵠΔᐃᐃᐃⵠ, ΔⵠⲆΔⲆⲆⵠ, ⵠΔⵠΔΔΔΔⵠⵠ) {
		const ⵠⵠⵠᐃⵠⲆⲆ = (24 << (ᐃⲆᐃⲆΔΔⲆ >> 8 & 255)) + (ᐃⵠⵠⲆ << (ᐃⲆᐃⲆΔΔⲆ >> 0 & 255)) + (16 << (ᐃⲆᐃⲆΔΔⲆ >> ᐃΔⲆΔΔⲆᐃ & 255)) + (8 << (ᐃⲆᐃⲆΔΔⲆ >> 24 & 255));
		const ᐃᐃⲆⲆᐃⲆᐃ = 63261 ^ ⲆᐃᐃΔⲆⲆᐃΔⵠ;
		const ⲆⵠⲆΔⵠΔⲆ = (18433 + ⲆᐃΔⵠΔᐃᐃᐃⵠ) % 65380;
		const ⵠⵠⲆᐃΔⲆⵠⵠⲆ = (16 << (ΔⵠⲆΔⲆⲆⵠ >> 0 & 255)) + (ⵠⲆⵠⵠ << (ΔⵠⲆΔⲆⲆⵠ >> 16 & 255)) + (24 << (ΔⵠⲆΔⲆⲆⵠ >> 24 & 255)) + (ⵠᐃΔᐃΔ << (ΔⵠⲆΔⲆⲆⵠ >> 8 & 255));
		const ΔⲆⵠⲆⵠᐃⵠⵠΔ = (1 + 22695477 * (28676 + ⵠΔⵠΔΔΔΔⵠⵠ)) % 4294967296;
		const ᐃⵠⵠⲆᐃⲆΔⵠΔ = ⵠΔⵠΔᐃⲆᐃ(ⵠⵠⵠᐃⵠⲆⲆ, ᐃᐃⲆⲆᐃⲆᐃ, ⲆⵠⲆΔⵠΔⲆ, ⵠⵠⲆᐃΔⲆⵠⵠⲆ);
		const ⲆⲆⵠⲆⵠⵠᐃᐃⵠ = ⵠΔⵠΔᐃⲆᐃ(ΔⲆⵠⲆⵠᐃⵠⵠΔ, ⵠⵠⵠᐃⵠⲆⲆ, ᐃᐃⲆⲆᐃⲆᐃ, ⲆⵠⲆΔⵠΔⲆ);
		const ⲆᐃΔⲆΔΔΔⲆⲆ = 43160 ^ ᐃⵠⵠⲆᐃⲆΔⵠΔ;
		return ⲆᐃΔⲆΔΔΔⲆⲆ
	}

	function ΔᐃᐃⵠⵠⲆⲆᐃΔ(ΔⲆ, Ⲇ) {
		this.ΔⲆ = ΔⲆ;
		this.Ⲇ = Ⲇ;
		ⵠⵠⲆΔᐃᐃᐃⲆΔ.navigator.userAgent.indexOf("Edge") > -1 ? (this.ⵠᐃⵠΔΔΔᐃ = "default", this.ⲆⲆⵠⲆΔⵠⵠ = "pointer") : (this.ⵠᐃⵠΔΔΔᐃ = "url('img/cursor0.png'), default", this.ⲆⲆⵠⲆΔⵠⵠ = "url('img/cursor1.png'), pointer");
		var ΔⵠⲆ = this;
		this.waiting = false;
		this.ᐃⵠⲆⵠⵠⵠⵠ = ΔⲆⲆ;
		this.ⵠⵠⵠᐃΔⵠΔ = -ⵠⲆⲆ;
		this.ΔⲆⲆⲆΔᐃⲆ = {
			translate: {
				x: 0,
				y: ΔΔᐃ
			},
			angle: ⲆⲆⵠⲆ,
			"ᐃᐃ": ᐃΔ[Δ.ΔΔⵠⵠⵠΔΔ],
			"ⵠᐃᐃⲆ": function() {
				this.angle += ⲆΔΔⲆ * 2;
				Ⲇ.save();
				Ⲇ.translate(this.translate.x + this.ᐃᐃ.width / 2, this.translate.y + this.ᐃᐃ.height / 2);
				Ⲇ.rotate(this.angle);
				ᐃᐃⵠⲆ(Ⲇ, this.ᐃᐃ, -this.ᐃᐃ.width / ΔΔΔⵠ, -this.ᐃᐃ.height / 2);
				Ⲇ.restore()
			}
		};
		this.ΔⵠᐃᐃᐃᐃⲆ = {
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]]("langselect"),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("langselect").style,
			translate: {
				x: ᐃⵠⵠⲆ,
				y: 0
			},
			"ⲆᐃⲆ": function() {
				this.style.left = Math.floor(this.translate.x) + ⵠ[407];
				this.style.top = Math.floor(this.translate.y) + ⵠ[407]
			}
		};
		this.ᐃⲆⵠᐃΔ = 0;
		this.ΔⵠⲆⵠΔⵠᐃ = -ΔΔⵠΔ;
		this.ⲆⵠⵠⲆᐃⵠⵠ = undefined;
		this.ᐃⲆⵠᐃⲆⵠⵠ = "";
		this.ⵠΔⵠΔᐃⵠⵠ = "";
		this.ⵠᐃⲆⵠⲆⲆᐃ = ⵠⲆⲆⲆⲆ;
		this.ⲆⵠΔⲆᐃ = 0;
		this.ⵠⲆΔⵠΔⲆⲆ = -1;
		this.ᐃⲆᐃⲆⲆᐃΔ = ΔΔⵠⵠⲆ;
		this.ΔⲆⲆᐃᐃΔΔ = 0;
		this.ⲆⵠᐃⵠⲆᐃⲆ = 0;
		this.ΔᐃᐃⵠᐃΔᐃ = 0;
		this.ΔᐃΔⵠⲆ = 0;
		this.ᐃⲆᐃΔⲆᐃⵠ = 0;
		this.time = 0;
		this.ᐃⲆⲆⲆⲆ = 0;
		this.ⵠΔⵠΔⲆΔΔ = ⲆⵠⲆⲆ;
		this.ⵠⲆᐃᐃⵠⲆᐃ = 0;
		this.ΔᐃΔⵠⵠΔᐃ = ΔΔᐃᐃ;
		this.ⲆⵠΔⲆⵠⲆⵠ = ⵠⵠⵠ;
		this.ᐃⲆΔⲆᐃⲆᐃ = [];
		this.ⵠⲆᐃΔᐃ = -ⵠⲆⲆ;
		this.ⵠᐃⲆⵠⵠⲆᐃ = -1;
		this.ΔΔᐃΔᐃⵠⲆ = -1;
		this.ⵠⵠⵠⲆⵠΔΔ = ᐃⲆⵠⲆᐃ;
		this.ⲆⲆⲆᐃⲆᐃᐃ = undefined;
		this.ⲆᐃΔⲆⵠᐃΔ = -1;
		this.ⲆᐃⵠⵠΔⲆⲆ = -1;
		this.ⵠΔᐃᐃⵠⲆΔ = -1;
		this.ΔΔⲆⵠⲆⲆⵠ = -ΔⲆᐃᐃ;
		this.ⵠΔⲆᐃΔⵠΔ = ⵠⲆⲆⲆⲆ;
		this.ⵠⲆⵠᐃⵠΔᐃ = undefined;
		this.ᐃΔΔᐃᐃᐃᐃ = ⵠⲆⲆⲆⲆ;
		this.ⲆⵠⵠᐃΔΔⲆ = undefined;
		this.ⵠⵠⵠᐃⵠⲆᐃ = ⲆΔΔⵠᐃ;
		this.ᐃΔᐃⲆᐃΔᐃ = ⵠⲆⵠᐃⲆ;
		this.ⵠΔⵠΔⵠᐃᐃ = undefined;
		this.ⵠΔⵠᐃⵠⲆᐃ = ⵠⵠⲆΔⲆ;
		this.ⲆⲆᐃΔⵠⵠⲆ = undefined;
		this.ᐃⲆΔⵠⲆⵠᐃ = 3;
		this.ⵠΔΔⲆ = ᐃᐃᐃ;

		function ⲆΔⵠⵠⵠⵠᐃ(ⲆⵠᐃᐃⲆΔⵠ, ⵠΔⵠᐃⵠⵠᐃ, ΔⵠΔⲆⲆΔΔΔΔ, ΔⲆᐃⵠⲆⲆⵠⵠⲆ, ᐃⵠⲆΔ) {
			var ⲆᐃⲆᐃΔⲆⲆ = this;
			var ⲆᐃⲆΔᐃ = ⵠΔⵠᐃⵠⵠᐃ + 9;
			var ΔᐃΔⲆᐃ = 0;
			var ⵠᐃⲆⵠⲆᐃⵠ = ΔⲆᐃⵠⲆⲆⵠⵠⲆ;
			for (var Ⲇᐃ = ⵠΔⵠᐃⵠⵠᐃ; ⲆᐃⲆΔᐃ > Ⲇᐃ; Ⲇᐃ++) {
				ΔⵠⲆ.buttons[Ⲇᐃ].info.callback = ᐃⵠⵠΔᐃⲆΔΔᐃ;
				ΔⵠⲆ.buttons[Ⲇᐃ].info.ΔΔⲆⵠᐃᐃⵠΔᐃ = ⲆⵠᐃᐃⲆΔⵠ
			}

			function ⲆⲆΔⵠΔⵠΔ() {
				var Ⲇᐃᐃ = ⲆⵠᐃᐃⲆΔⵠ[ⵠᐃⲆⵠⲆᐃⵠ];
				ᐃΔΔΔ.ⲆⵠⵠᐃΔΔⲆ = ΔⵠᐃⵠⲆ(Ⲇᐃᐃ.name, ⵠ[440], ⵠ[252], 30, 350, ⲆⲆⵠᐃΔ, ⵠⲆΔⲆᐃ, ⲆⲆᐃΔᐃΔⲆ);
				Ⲇᐃᐃ.level !== undefined ? ᐃΔΔΔ.ⵠⵠⵠᐃⵠⲆᐃ = ΔⵠᐃⵠⲆ("Level " + Ⲇᐃᐃ.level, ⵠ[440], ⵠ[252], 30, 250, ⵠΔⲆⵠΔ, 10, 8) : ᐃΔΔΔ.ⵠⵠⵠᐃⵠⲆᐃ = ΔⵠᐃⵠⲆ("by " + Ⲇᐃᐃ.ⲆⲆⲆ, ⵠ[440], ⵠ[252], 30, 250, undefined, ⵠⲆⵠᐃⵠ, ᐃᐃᐃΔⲆ)
			}

			function ΔⵠⵠᐃⵠⲆᐃΔᐃ() {
				if (ᐃᐃⲆ < ΔᐃΔⲆᐃ) ΔᐃΔⲆᐃ--;
				ⲆᐃⲆᐃΔⲆⲆ.ᐃⲆⲆⲆᐃ()
			}

			function ᐃⲆⵠⲆⲆⵠⲆⵠΔ() {
				if (ΔᐃΔⲆᐃ * ᐃⵠΔᐃ + ⵠⵠⲆⵠⵠ < ⲆⵠᐃᐃⲆΔⵠ.length) ΔᐃΔⲆᐃ++;
				ⲆᐃⲆᐃΔⲆⲆ.ᐃⲆⲆⲆᐃ()
			}

			function ᐃⲆⲆⲆᐃ() {
				for (var Ⲇᐃ = ⵠΔⵠᐃⵠⵠᐃ, ⲆⲆᐃⲆ = ΔᐃΔⲆᐃ * Δⵠⵠᐃ; ⲆᐃⲆΔᐃ > Ⲇᐃ && ⲆⵠᐃᐃⲆΔⵠ.length > ⲆⲆᐃⲆ; Ⲇᐃ++, ⲆⲆᐃⲆ++) {
					if (ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ === ⲆⵠᐃᐃⲆΔⵠ[ⲆⲆᐃⲆ].ⵠᐃⵠ && ᐃⵠⲆΔ[ⲆⲆᐃⲆ] === ᐃᐃⲆ) {
						ΔⵠⲆ.buttons[Ⲇᐃ].info.ΔⲆᐃΔⲆⵠΔ = -1;
						ΔⵠⲆ.buttons[Ⲇᐃ].info.active = ⵠⲆᐃᐃ;
						continue
					}
					ΔⵠⲆ.buttons[Ⲇᐃ].info.ΔⲆᐃΔⲆⵠΔ = ⲆⲆᐃⲆ;
					for (var ⵠᐃᐃᐃ = 0; ᐃⲆᐃΔ > ⵠᐃᐃᐃ; ⵠᐃᐃᐃ++) {
						ΔⵠⲆ.buttons[Ⲇᐃ].info.ᐃᐃ[ⵠᐃᐃᐃ] = ⵠΔΔⵠⲆ[ⲆⵠᐃᐃⲆΔⵠ[ⲆⲆᐃⲆ].ⵠᐃⵠ][ⵠᐃᐃᐃ];
						ΔⵠⲆ.buttons[Ⲇᐃ].info.active = ᐃᐃᐃΔ;
						ΔⵠⲆ.buttons[Ⲇᐃ].info.ⲆⲆⵠⵠⵠᐃⲆ = ᐃⵠⲆΔ[ⲆⲆᐃⲆ]
					}
				}
				for (; ⲆᐃⲆΔᐃ > Ⲇᐃ; Ⲇᐃ++) {
					ΔⵠⲆ.buttons[Ⲇᐃ].info.ΔⲆᐃΔⲆⵠΔ = -1;
					ΔⵠⲆ.buttons[Ⲇᐃ].info.active = ⵠⲆᐃᐃ
				}
				ⲆⲆΔⵠΔⵠΔ()
			}

			function ᐃⵠⵠΔᐃⲆΔΔᐃ() {
				if (ⵠᐃⲆⵠⲆᐃⵠ === this.ΔⲆᐃΔⲆⵠΔ || -Δⵠᐃ === this.ΔⲆᐃΔⲆⵠΔ) return;
				if (0 < this.ⲆⲆⵠⵠⵠᐃⲆ) {
					ⵠΔᐃⵠᐃᐃⲆ === ⵠΔⵠᐃⵠⵠᐃ ? ΔᐃΔⵠΔ(ⵠⲆᐃⲆΔΔⵠ, ⵠⲆᐃᐃ, ⵠ[181]) : ΔᐃΔⵠΔ(ᐃᐃⵠⲆΔⲆᐃ, ⵠⲆᐃᐃ, ⵠ[181])
				} else {
					if (ⵠΔᐃⵠᐃᐃⲆ === ⵠΔⵠᐃⵠⵠᐃ) ΔᐃΔⵠΔ(ⵠⲆᐃⲆΔΔⵠ, ᐃᐃᐃΔ, ⵠ[442]);
					else ΔᐃΔⵠΔ(ᐃᐃⵠⲆΔⲆᐃ, ᐃᐃᐃΔ, ⵠ[442])
				}
				ⵠᐃⲆⵠⲆᐃⵠ = this.ΔⲆᐃΔⲆⵠΔ;
				ΔⵠΔⲆⲆΔΔΔΔ(this.ΔⲆᐃΔⲆⵠΔ);
				ⲆⲆΔⵠΔⵠΔ()
			}
			this.ᐃⲆⲆⲆᐃ = ᐃⲆⲆⲆᐃ;
			ΔⵠⲆ.buttons[ⲆᐃⲆΔᐃ].info.callback = ΔⵠⵠᐃⵠⲆᐃΔᐃ;
			ΔⵠⲆ.buttons[ⲆᐃⲆΔᐃ + Δⵠᐃ].info.callback = ᐃⲆⵠⲆⲆⵠⲆⵠΔ
		}
		this.ⲆᐃⵠᐃⵠΔᐃⵠⵠ = ΔⲆΔᐃΔ;
		this.ΔΔⲆᐃⲆ = ᐃΔΔⵠ.get(ⵠ[427]) ? ᐃΔΔⵠ.get(ⵠ[427]) : "high";
		if (this.ΔΔⲆᐃⲆ === "high") {
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[281]).style.backgroundColor = ⵠ[150];
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[456]).style.backgroundColor = ⵠ[58];
			this.ΔΔⲆᐃⲆ = 1
		} else {
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[456]).style.backgroundColor = ⵠ[150];
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[281]).style.backgroundColor = ⵠ[58];
			this.ΔΔⲆᐃⲆ = ᐃⵠⵠⲆ
		}
		this.ᐃⵠΔⲆⵠⵠⲆⲆⲆ = function() {
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[281]).style.backgroundColor = ⵠ[150];
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[456]).style.backgroundColor = ⵠ[58];
			ᐃΔΔⵠ.set(ⵠ[427], "high", {
				expires: 30
			});
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[535]).value = ⲆΔΔΔ;
			ΔᐃᐃⲆ.ᐃⲆᐃΔΔΔⲆ();
			ᐃΔΔΔ.ΔΔⲆᐃⲆ = 1
		};
		this.ⲆᐃΔᐃⲆⲆⲆΔΔ = function() {
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[281]).style.backgroundColor = ⵠ[58];
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[456]).style.backgroundColor = ⵠ[150];
			ᐃΔΔⵠ.set(ⵠ[427], "low", {
				expires: 30
			});
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[535]).value = .5 / (devicePixelRatio / ⵠⵠⲆⲆᐃΔΔ);
			ΔᐃᐃⲆ.ᐃⲆᐃΔΔΔⲆ();
			ᐃΔΔΔ.ΔΔⲆᐃⲆ = 0
		};
		ᐃΔΔⵠ.get(ⵠ[530]) === undefined && "FR" === ΔᐃⲆⵠⵠ ? (ΔⲆᐃⵠΔ.ⲆᐃⲆΔⲆΔᐃ(), this.mapping = "azerty") : this.mapping = ᐃΔΔⵠ.get(ⵠ[530]) ? ᐃΔΔⵠ.get(ⵠ[530]) : "qwerty";
		if ("azerty" == this.mapping) {
			ΔⲆᐃⵠΔ.ⲆᐃⲆΔⲆΔᐃ();
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[312]).style.backgroundColor = ⵠ[150];
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[487]).style.backgroundColor = ⵠ[58]
		} else {
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[487]).style.backgroundColor = ⵠ[150];
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[312]).style.backgroundColor = ⵠ[58]
		}
		this.ⲆᐃⲆΔⲆΔᐃ = function() {
			ΔⲆᐃⵠΔ.ⲆᐃⲆΔⲆΔᐃ();
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[312]).style.backgroundColor = ⵠ[150];
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[487]).style.backgroundColor = ⵠ[58];
			ᐃΔΔⵠ.set(ⵠ[530], "azerty", {
				expires: 30
			})
		};
		this.ΔᐃⵠⵠᐃΔⲆ = function() {
			ΔⲆᐃⵠΔ.ΔᐃⵠⵠᐃΔⲆ();
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[312]).style.backgroundColor = ⵠ[58];
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[487]).style.backgroundColor = ⵠ[150];
			ᐃΔΔⵠ.set(ⵠ[530], "qwerty", {
				expires: 30
			})
		};
		this.ΔⲆᐃⲆⵠΔⲆ = {
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]]("all_rights_reserved"),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("all_rights_reserved").style,
			translate: {
				y: ⵠⲆΔ,
				x: ⵠⵠⲆⵠ
			},
			"ⲆᐃⲆ": function() {
				this.style.left = this.translate.x + ⵠ[407];
				this.style.top = Math.floor(this.translate.y) + ⵠ[407]
			}
		};

		function ᐃᐃᐃⵠⵠΔⵠ() {
			var ⵠᐃⵠᐃⵠΔᐃ = Number(ᐃΔΔⵠ.get("starve_crate"));
			var ⲆⵠⲆⲆⲆⵠᐃ = Number(ᐃΔΔⵠ.get("starve_dead"));
			var ⲆⲆΔΔⵠⲆΔ = Number(ᐃΔΔⵠ.get("starve_book"));
			var ⲆᐃΔᐃΔⵠⲆ = Number(ᐃΔΔⵠ.get("starve_bag"));
			var ⲆᐃⲆΔᐃⵠᐃ = Number(ᐃΔΔⵠ.get("starve_skin"));
			var ⵠⵠΔΔᐃΔⲆ = Number(ᐃΔΔⵠ.get("starve_accessory"));
			ΔⵠⲆ.ⲆΔⵠⵠ = ⲆᐃⲆΔᐃⵠᐃ ? ⲆᐃⲆΔᐃⵠᐃ : 0;
			ΔⵠⲆ.ⵠΔⲆΔᐃ = ⲆⲆΔΔⵠⲆΔ ? ⲆⲆΔΔⵠⲆΔ : ⵠᐃⲆ;
			ΔⵠⲆ.ⵠⲆΔΔⲆ = ⵠᐃⵠᐃⵠΔᐃ ? ⵠᐃⵠᐃⵠΔᐃ : ⲆᐃΔ;
			ΔⵠⲆ.ⵠⵠΔΔⵠ = ⵠⵠΔΔᐃΔⲆ ? ⵠⵠΔΔᐃΔⲆ : ⵠⲆΔ;
			ΔⵠⲆ.ⲆⲆⲆᐃⵠ = ⲆᐃΔᐃΔⵠⲆ ? ⲆᐃΔᐃΔⵠⲆ : ⲆⲆⵠⲆ;
			ΔⵠⲆ.ΔⵠᐃⲆΔ = ⲆⵠⲆⲆⲆⵠᐃ ? ⲆⵠⲆⲆⲆⵠᐃ : 0
		}
		ᐃᐃᐃⵠⵠΔⵠ();
		this.unlock = {};
		this.unlock.ⲆΔⵠⵠ = [];
		this.unlock.ⲆⲆⲆᐃⵠ = [];
		this.unlock.ⵠΔⲆΔᐃ = [];
		this.unlock.ⵠⲆΔΔⲆ = [];
		this.unlock.ΔⵠᐃⲆΔ = [];
		this.unlock.ⵠⵠΔΔⵠ = [];
		this.ᐃⵠⲆᐃΔᐃⵠ = 0;

		function ᐃᐃⲆᐃⵠⵠⵠ() {
			var ᐃⵠᐃⲆⲆ = Δᐃᐃᐃ.ⵠᐃΔⲆΔ;
			for (var Ⲇᐃ = 0; Ⲇᐃ < ᐃⵠᐃⲆⲆ.length; Ⲇᐃ++) {
				ΔΔⵠ.ᐃⵠⲆⲆⲆ === ᐃⵠᐃⲆⲆ[Ⲇᐃ].ⵠᐃⵠ ? ΔⵠⲆ.unlock.ⲆΔⵠⵠ[Ⲇᐃ] = ᐃᐃΔ : ΔⵠⲆ.unlock.ⲆΔⵠⵠ[Ⲇᐃ] = ⵠᐃⲆⲆ
			}
			var ᐃⵠᐃⲆⲆ = Δᐃᐃᐃ.ΔᐃⲆΔᐃ;
			for (var Ⲇᐃ = ⵠᐃⲆ; Ⲇᐃ < ᐃⵠᐃⲆⲆ.length; Ⲇᐃ++) {
				ΔΔⵠ.ᐃⵠⲆⲆⲆ === ᐃⵠᐃⲆⲆ[Ⲇᐃ].ⵠᐃⵠ ? ΔⵠⲆ.unlock.ⵠⵠΔΔⵠ[Ⲇᐃ] = ⲆΔΔΔ : ΔⵠⲆ.unlock.ⵠⵠΔΔⵠ[Ⲇᐃ] = ΔⲆⲆ
			}
			var ᐃⵠᐃⲆⲆ = Δᐃᐃᐃ.ⵠᐃⵠⲆ;
			for (var Ⲇᐃ = ⵠⲆⵠⵠ; ᐃⵠᐃⲆⲆ.length > Ⲇᐃ; Ⲇᐃ++) {
				ΔΔⵠ.ᐃⵠⲆⲆⲆ === ᐃⵠᐃⲆⲆ[Ⲇᐃ].ⵠᐃⵠ ? ΔⵠⲆ.unlock.ⲆⲆⲆᐃⵠ[Ⲇᐃ] = Δᐃⵠⵠ : ΔⵠⲆ.unlock.ⲆⲆⲆᐃⵠ[Ⲇᐃ] = ΔΔᐃ
			}
			var ᐃⵠᐃⲆⲆ = Δᐃᐃᐃ.ᐃᐃΔⲆᐃ;
			for (var Ⲇᐃ = 0; ᐃⵠᐃⲆⲆ.length > Ⲇᐃ; Ⲇᐃ++) {
				ΔΔⵠ.ᐃⵠⲆⲆⲆ === ᐃⵠᐃⲆⲆ[Ⲇᐃ].ⵠᐃⵠ ? ΔⵠⲆ.unlock.ⵠΔⲆΔᐃ[Ⲇᐃ] = ⵠᐃⵠΔ : ΔⵠⲆ.unlock.ⵠΔⲆΔᐃ[Ⲇᐃ] = ⵠⵠⵠ
			}
			var ᐃⵠᐃⲆⲆ = Δᐃᐃᐃ.ᐃᐃⵠⵠΔ;
			for (var Ⲇᐃ = ⵠⲆΔ; Ⲇᐃ < ᐃⵠᐃⲆⲆ.length; Ⲇᐃ++) {
				if (ᐃⵠᐃⲆⲆ[Ⲇᐃ].ⵠᐃⵠ === ΔΔⵠ.ᐃⵠⲆⲆⲆ) {
					ΔⵠⲆ.unlock.ⵠⲆΔΔⲆ[Ⲇᐃ] = 1;
					ΔⵠⲆ.unlock.ΔⵠᐃⲆΔ[Ⲇᐃ] = 1
				} else {
					ΔⵠⲆ.unlock.ⵠⲆΔΔⲆ[Ⲇᐃ] = ᐃᐃᐃ;
					ΔⵠⲆ.unlock.ΔⵠᐃⲆΔ[Ⲇᐃ] = 0
				}
			}
		}
		this.ᐃᐃⲆᐃⵠⵠⵠ = ᐃᐃⲆᐃⵠⵠⵠ;
		ᐃᐃⲆᐃⵠⵠⵠ();
		this.ᐃᐃⵠΔᐃ = {
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]]("trevda"),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("trevda").style,
			translate: {
				y: 0,
				x: ⵠⵠⵠΔ
			},
			"ⲆᐃⲆ": function() {
				this.style.left = this.translate.x + ⵠ[407];
				this.style.top = Math.floor(this.translate.y) + ⵠ[407]
			}
		};
		var ⵠⲆᐃᐃᐃ = ⵠⵠⵠ;
		var ⵠⲆΔⵠᐃ = 30;
		var ΔⲆΔᐃⵠⲆΔ = function() {
			ΔⵠⲆ.ⲆᐃⲆ();
			ⵠⲆᐃᐃᐃ++;
			if (ⵠⲆΔⵠᐃ == ⵠⲆᐃᐃᐃ) {
				ΔⵠⲆ.ⵠΔⲆⵠⲆⵠΔ();
				ΔⵠⲆ.ᐃⵠⲆⵠⵠⵠⵠ = ⵠⵠΔⲆᐃΔⲆ;
				ΔⵠⲆ.ⲆᐃⲆ();
				return
			}
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]](ΔⲆΔᐃⵠⲆΔ, 0)
		};
		this.ⲆⵠᐃΔⲆ = function(ⲆΔᐃᐃⵠ) {
			ⵠⵠᐃΔⲆ = ⲆΔᐃᐃⵠ;
			ΔⵠⲆ.ⲆⲆⲆⲆⵠⵠᐃ();
			ΔⵠⲆ.ᐃⵠⲆⵠⵠⵠⵠ = ⵠᐃⲆ;
			ᐃⵠΔᐃᐃ = -1;
			ΔⲆⲆᐃᐃ()
		};
		var ⵠⵠᐃΔⲆ;
		var ᐃⵠΔᐃᐃ = -ΔⵠΔ;
		var ⲆⲆⵠⲆⲆ = 30;
		var ΔⲆⲆᐃᐃ = function() {
			ΔⵠⲆ.ⲆᐃⲆ();
			ᐃⵠΔᐃᐃ++;
			if (ⲆⲆⵠⲆⲆ == ᐃⵠΔᐃᐃ) {
				ᐃΔΔⵠ.set("starve_nickname", ΔⵠⲆ.ⲆⲆΔⵠⵠ.input.value, {
					expires: 30
				});
				ΔⵠⲆ.ⲆⲆΔⵠⵠ.style.display = ⵠ[181];
				ΔⵠⲆ.Ⲇᐃᐃⵠⵠ.style.display = ⵠ[181];
				ΔⵠⲆ.ΔⵠᐃᐃᐃᐃⲆ.style.display = ⵠ[181];
				ΔⵠⲆ.ΔⲆᐃⲆⵠΔⲆ.style.display = ⵠ[181];
				ΔⵠⲆ.ᐃᐃⵠΔᐃ.style.display = ⵠ[181];
				ΔⵠⲆ.stop();
				ⵠⵠᐃΔⲆ();
				return
			}
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]](ΔⲆⲆᐃᐃ, 0)
		};
		this.ᐃⲆⵠᐃᐃ = false;
		this.stop = function() {
			this.ᐃⲆⵠᐃᐃ = ⲆΔⲆᐃΔ
		};
		this.ⵠΔΔᐃᐃ = function() {
			check_ads();
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[284]).style.backgroundColor = Δ.ⵠⵠΔᐃⵠ[ΔⵠⵠⵠⲆ.time];
			ΔⵠⲆ.ⲆⲆΔⵠⵠ.style.display = ⵠ[442];
			ΔⵠⲆ.Ⲇᐃᐃⵠⵠ.style.display = ⵠ[442];
			ΔⵠⲆ.ΔⵠᐃᐃᐃᐃⲆ.style.display = ⵠ[442];
			ΔⵠⲆ.ΔⲆᐃⲆⵠΔⲆ.style.display = ⵠ[442];
			ΔⵠⲆ.ᐃᐃⵠΔᐃ.style.display = ⵠ[442];
			ΔⵠⲆ.waiting = false;
			ΔⵠⲆ.ᐃⲆⵠᐃᐃ = true;
			ᐃⵠΔᐃᐃ = -1;
			ⵠⲆᐃᐃᐃ = ⵠⵠⲆⵠ;
			ΔⲆΔᐃⵠⲆΔ()
		};
		this.ⵠᐃᐃᐃⵠΔᐃ = function(ⲆΔᐃⵠᐃ, ⵠⲆⵠⵠⵠ) {
			ⵠⲆⵠⵠⵠ = ⵠⲆⵠⵠⵠ < 0 ? -ⵠⲆⵠⵠⵠ : ⵠⲆⵠⵠⵠ;
			if (ⲆⵠⵠΔ === (ⲆΔᐃⵠᐃ.position & ⲆⵠⵠΔ)) {
				if (ΔⲆⲆΔ === (ⲆΔᐃⵠᐃ.position & ΔⲆⲆΔ)) ⲆΔᐃⵠᐃ.translate.x = ΔⵠⵠΔ + ⲆΔᐃⵠᐃ.translate.ⲆΔΔⵠⲆ - ⵠⲆⵠⵠⵠ;
				else(ⲆΔᐃⵠᐃ.position & ΔⵠⲆⵠᐃ) === ΔⵠⲆⵠᐃ ? ⲆΔᐃⵠᐃ.translate.x = ΔⵠⵠΔ + ⲆΔᐃⵠᐃ.translate.ⲆΔΔⵠⲆ + ⵠⲆⵠⵠⵠ : ⲆΔᐃⵠᐃ.translate.x = ΔⵠⵠΔ + ⲆΔᐃⵠᐃ.translate.ⲆΔΔⵠⲆ
			} else if ((ⲆΔᐃⵠᐃ.position & ΔⲆⲆΔ) === ΔⲆⲆΔ) ⲆΔᐃⵠᐃ.translate.x = ⲆΔᐃⵠᐃ.translate.ⲆΔΔⵠⲆ - ⵠⲆⵠⵠⵠ;
			else if (ΔⵠⲆⵠᐃ === (ⲆΔᐃⵠᐃ.position & ΔⵠⲆⵠᐃ)) ⲆΔᐃⵠᐃ.translate.x = ᐃⲆⵠⵠ - ⲆΔᐃⵠᐃ.translate.ⲆΔΔⵠⲆ + ⵠⲆⵠⵠⵠ;
			else ⲆΔᐃⵠᐃ.translate.x = ⲆΔᐃⵠᐃ.translate.ⲆΔΔⵠⲆ;
			if ((ⲆΔᐃⵠᐃ.position & ΔΔΔΔΔⲆⵠ) === ΔΔΔΔΔⲆⵠ) {
				if (ᐃΔᐃᐃ === (ⲆΔᐃⵠᐃ.position & ᐃΔᐃᐃ)) ⲆΔᐃⵠᐃ.translate.y = ᐃⲆΔⲆ + ⲆΔᐃⵠᐃ.translate.ⲆⵠΔⵠΔ - ⵠⲆⵠⵠⵠ;
				else if ((ⲆΔᐃⵠᐃ.position & ⲆΔⵠΔᐃⲆΔ) === ⲆΔⵠΔᐃⲆΔ) ⲆΔᐃⵠᐃ.translate.y = ᐃⲆΔⲆ + ⲆΔᐃⵠᐃ.translate.ⲆⵠΔⵠΔ + ⵠⲆⵠⵠⵠ;
				else ⲆΔᐃⵠᐃ.translate.y = ᐃⲆΔⲆ + ⲆΔᐃⵠᐃ.translate.ⲆⵠΔⵠΔ
			} else if ((ⲆΔᐃⵠᐃ.position & ᐃΔᐃᐃ) === ᐃΔᐃᐃ) ⲆΔᐃⵠᐃ.translate.y = ⲆΔᐃⵠᐃ.translate.ⲆⵠΔⵠΔ - ⵠⲆⵠⵠⵠ;
			else if (ⲆΔⵠΔᐃⲆΔ === (ⲆΔᐃⵠᐃ.position & ⲆΔⵠΔᐃⲆΔ)) ⲆΔᐃⵠᐃ.translate.y = Ⲇᐃᐃᐃ + ⲆΔᐃⵠᐃ.translate.ⲆⵠΔⵠΔ + ⵠⲆⵠⵠⵠ;
			else ⲆΔᐃⵠᐃ.translate.y = ⲆΔᐃⵠᐃ.translate.ⲆⵠΔⵠΔ;
			ⲆΔᐃⵠᐃ.style !== undefined && (ⲆΔᐃⵠᐃ.style.left = Math.floor(ⲆΔᐃⵠᐃ.translate.x) + ⵠ[407], ⲆΔᐃⵠᐃ.style.top = Math.floor(ⲆΔᐃⵠᐃ.translate.y) + ⵠ[407])
		};
		this.ⲆᐃⲆ = function() {
			var ⵠⲆⵠⵠⵠ = 0;
			if (ⵠⲆΔⵠᐃ != ⵠⲆᐃᐃᐃ || -1 != ᐃⵠΔᐃᐃ) {
				if (ⵠⲆᐃᐃᐃ != ⵠⲆΔⵠᐃ) var ⵠⲆⵠⵠⵠ = 1500 / (ⵠⲆᐃᐃᐃ + 1) - 50;
				if (ᐃⵠΔᐃᐃ != -ⲆΔΔΔ) var ⵠⲆⵠⵠⵠ = -(1750 / (ⲆⲆⵠⲆⲆ - ᐃⵠΔᐃᐃ + 1) - 48)
			}
			for (var Ⲇᐃ = 0; Ⲇᐃ < this.Δⵠᐃᐃ.length; Ⲇᐃ++) this.ⵠᐃᐃᐃⵠΔᐃ(this.Δⵠᐃᐃ[Ⲇᐃ], ⵠⲆⵠⵠⵠ);
			for (var Ⲇᐃ = 0; Ⲇᐃ < this.buttons.length; Ⲇᐃ++) this.ⵠᐃᐃᐃⵠΔᐃ(this.buttons[Ⲇᐃ].info, ⵠⲆⵠⵠⵠ);
			for (var Ⲇᐃ = 0; Ⲇᐃ < this.ⲆΔΔΔΔ.length; Ⲇᐃ++) this.ⵠᐃᐃᐃⵠΔᐃ(this.ⲆΔΔΔΔ[Ⲇᐃ], ⵠⲆⵠⵠⵠ);
			this.ΔⲆⲆⲆΔᐃⲆ.translate.x = (ᐃⲆⵠⵠ - this.ΔⲆⲆⲆΔᐃⲆ.ᐃᐃ.width) / ᐃⲆᐃᐃ;
			this.ΔⲆⲆⲆΔᐃⲆ.translate.y = ⵠⲆᐃ;
			this.ΔⵠᐃᐃᐃᐃⲆ.translate.x = ᐃⲆⵠⵠ - 450;
			this.ΔⵠᐃᐃᐃᐃⲆ.translate.y = Ⲇᐃᐃᐃ - 40;
			this.ΔⲆᐃⲆⵠΔⲆ.translate.x = ᐃⲆⵠⵠ - 340;
			this.ΔⲆᐃⲆⵠΔⲆ.translate.y = Ⲇᐃᐃᐃ - 25;
			this.ᐃᐃⵠΔᐃ.translate.x = ᐃⲆⵠⵠ - 320;
			this.ᐃᐃⵠΔᐃ.translate.y = 80;
			if (ⵠⲆΔⵠᐃ != ⵠⲆᐃᐃᐃ || -ᐃⲆΔ != ᐃⵠΔᐃᐃ) {
				var ⵠⲆⲆΔ = 0;
				if (ⵠⲆᐃᐃᐃ != ⵠⲆΔⵠᐃ) {
					var ⵠⲆⲆΔ = 1500 / (ⵠⲆᐃᐃᐃ + 1) - 50
				}
				if (-1 != ᐃⵠΔᐃᐃ) {
					var ⵠⲆⲆΔ = -(1750 / (ⲆⲆⵠⲆⲆ - ᐃⵠΔᐃᐃ + ⵠᐃⵠΔ) - 48)
				}
				this.ΔⲆⲆⲆΔᐃⲆ.translate.y -= ⲆⵠⲆⲆ < ⵠⲆⲆΔ ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ;
				this.ΔⵠᐃᐃᐃᐃⲆ.translate.y -= ⵠⲆⲆΔ < 0 ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ;
				this.ΔⲆᐃⲆⵠΔⲆ.translate.y -= ⵠⲆᐃ > ⵠⲆⲆΔ ? ⵠⲆⲆΔ : -ⵠⲆⲆΔ
			}
			this.ΔⵠᐃᐃᐃᐃⲆ.ⲆᐃⲆ();
			this.ΔⲆᐃⲆⵠΔⲆ.ⲆᐃⲆ();
			this.ᐃᐃⵠΔᐃ.ⲆᐃⲆ()
		};
		this.ⵠᐃᐃΔⵠⵠΔ = function(Ⲇᐃᐃ) {
			var ΔΔⵠⵠᐃ = document[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠ[316]);
			var ⲆⲆᐃⵠⲆΔᐃ = ΔΔⵠⵠᐃ.getContext(ⵠ[444]);
			ΔΔⵠⵠᐃ.width = 342;
			ΔΔⵠⵠᐃ.height = 342;
			var ΔΔᐃⵠⲆ = -Math.PI / 2;
			for (var Ⲇᐃ = ᐃᐃᐃ; Ⲇᐃᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
				var ᐃᐃΔⲆΔΔⵠΔⲆ = Ⲇᐃᐃ[Ⲇᐃ][ΔΔᐃᐃ];
				var ⲆᐃⲆⲆΔⲆΔ = Math.PI * Ⲇᐃᐃ[Ⲇᐃ][ΔⲆᐃⲆ] / 180;
				ⲆⲆᐃⵠⲆΔᐃ.beginPath();
				ⲆⲆᐃⵠⲆΔᐃ.arc(171, 171, 170, ΔΔᐃⵠⲆ, ΔΔᐃⵠⲆ + ⲆᐃⲆⲆΔⲆΔ, false);
				ⲆⲆᐃⵠⲆΔᐃ.lineTo(171, 171);
				ⲆⲆᐃⵠⲆΔᐃ.fillStyle = ᐃᐃΔⲆΔΔⵠΔⲆ;
				ⲆⲆᐃⵠⲆΔᐃ.fill();
				ΔΔᐃⵠⲆ += ⲆᐃⲆⲆΔⲆΔ
			}
			return ΔΔⵠⵠᐃ
		};
		this.ΔⵠⲆᐃΔᐃⲆⲆⲆ = function() {
			this.ᐃⲆⵠᐃⲆⵠⵠ = document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[319]).value;
			this.ᐃⲆⵠᐃⲆⵠⵠ !== this.ⵠΔⵠΔᐃⵠⵠ && (this.ⵠΔⵠΔᐃⵠⵠ = this.ᐃⲆⵠᐃⲆⵠⵠ, this.ⵠᐃⲆⵠⲆⲆᐃ = ΔⵠᐃⵠⲆ(this.ᐃⲆⵠᐃⲆⵠⵠ, ⵠ[440], ⵠ[252], 45, 550))
		};
		this.ⵠᐃᐃⲆ = function() {
			ᐃΔΔⲆᐃᐃⲆ();
			ᐃΔΔΔ.ΔⲆⲆᐃᐃΔΔ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(ᐃΔΔΔ.ΔⲆⲆᐃᐃΔΔ, ᐃΔΔΔ.ⲆⵠᐃⵠⲆᐃⲆ, .03);
			this.Δⵠᐃᐃ[ΔᐃΔⵠⲆⲆΔ].translate.x = this.Δⵠᐃᐃ[ⵠⲆΔ].translate.x + -72 + 165 * ᐃΔΔΔ.ΔⲆⲆᐃᐃΔΔ;
			this.Δⵠᐃᐃ[ΔᐃΔⵠⲆⲆΔ].translate.ⲆΔΔⵠⲆ = this.Δⵠᐃᐃ[ΔᐃΔⵠⲆⲆΔ].translate.x;
			this.Δⵠᐃᐃ[ΔᐃΔⵠⲆⲆΔ].translate.y = this.Δⵠᐃᐃ[ⵠᐃⲆⲆ].translate.y + 30;
			this.Δⵠᐃᐃ[ΔᐃΔⵠⲆⲆΔ].translate.ⲆⵠΔⵠΔ = this.Δⵠᐃᐃ[ΔᐃΔⵠⲆⲆΔ].translate.y;
			for (var Ⲇᐃ = 2; this.Δⵠᐃᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
				if (ᐃᐃᐃΔ === this.Δⵠᐃᐃ[Ⲇᐃ].active) this.Δⵠᐃᐃ[Ⲇᐃ].ⵠᐃᐃⲆ(Ⲇ)
			}
			var ᐃⵠᐃᐃⵠⵠⲆ = this.ⵠⲆᐃΔᐃ - Date.now();
			if (ᐃⵠᐃᐃⵠⵠⲆ > ⵠⵠⵠ) {
				var ⲆΔⲆⵠ = Math.floor(ᐃⵠᐃᐃⵠⵠⲆ / 6e4);
				var ΔᐃΔΔⵠ = Math.floor(ⲆΔⲆⵠ / 60);
				ⲆΔⲆⵠ %= 60;
				if (ⲆΔⲆⵠ !== this.ΔΔᐃΔᐃⵠⲆ) {
					this.ΔΔᐃΔᐃⵠⲆ = ⲆΔⲆⵠ;
					ⲆΔⲆⵠ = 10 > ⲆΔⲆⵠ ? "0" + ⲆΔⲆⵠ : "" + ⲆΔⲆⵠ;
					ΔⵠⲆ.ⵠⵠⵠⲆⵠΔΔ = ΔⵠᐃⵠⲆ(ⲆΔⲆⵠ, ⵠ[440], ⵠ[252], 80, 200)
				}
				ΔᐃΔΔⵠ !== this.ⵠᐃⲆⵠⵠⲆᐃ && (this.ⵠᐃⲆⵠⵠⲆᐃ = ΔᐃΔΔⵠ, ΔᐃΔΔⵠ = ΔᐃΔΔⵠ < 10 ? "0" + ΔᐃΔΔⵠ : "" + ΔᐃΔΔⵠ, ΔⵠⲆ.ⲆⲆⲆᐃⲆᐃᐃ = ΔⵠᐃⵠⲆ(ΔᐃΔΔⵠ, ⵠ[440], ⵠ[252], 80, 200));
				var ᐃⲆⵠⵠᐃ = this.Δⵠᐃᐃ[ⲆᐃⲆΔⵠᐃΔ];
				ᐃⲆⵠⵠᐃ.ⵠᐃᐃⲆ(Ⲇ);
				var ᐃᐃ = this.ⲆⲆⲆᐃⲆᐃᐃ;
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠⵠᐃ.translate.x - ᐃᐃ.width / ΔⵠⵠⲆ + 182, ᐃⲆⵠⵠᐃ.translate.y - ᐃᐃ.height / ⵠⵠᐃΔ + 40, ᐃᐃ.width / ᐃᐃΔⵠ, ᐃᐃ.height / 2);
				var ᐃᐃ = this.ⵠⵠⵠⲆⵠΔΔ;
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠⵠᐃ.translate.x - ᐃᐃ.width / ᐃᐃΔΔᐃ + 251, ᐃⲆⵠⵠᐃ.translate.y - ᐃᐃ.height / 4 + 40, ᐃᐃ.width / ⵠΔⵠΔ, ᐃᐃ.height / 2)
			}
			var ᐃⵠᐃᐃⵠⵠⲆ = this.ⲆᐃΔⲆⵠᐃΔ - Date.now();
			if (ᐃⵠᐃᐃⵠⵠⲆ > ⵠⵠⲆⵠ) {
				var ⲆΔⲆⵠ = Math.floor(ᐃⵠᐃᐃⵠⵠⲆ / 6e4);
				var ΔᐃΔΔⵠ = Math.floor(ⲆΔⲆⵠ / 60);
				var ⲆΔᐃ = Math.floor(ΔᐃΔΔⵠ / 24);
				ⲆΔⲆⵠ %= 60;
				ΔᐃΔΔⵠ %= 24;
				if (ⲆΔⲆⵠ !== this.ΔΔⲆⵠⲆⲆⵠ) {
					this.ΔΔⲆⵠⲆⲆⵠ = ⲆΔⲆⵠ;
					ⲆΔⲆⵠ = ⲆΔⲆⵠ < 10 ? "0" + ⲆΔⲆⵠ : "" + ⲆΔⲆⵠ;
					ΔⵠⲆ.ⵠΔⲆᐃΔⵠΔ = ΔⵠᐃⵠⲆ(ⲆΔⲆⵠ, ⵠ[440], ⵠ[252], 80, 200)
				}
				this.ⵠΔᐃᐃⵠⲆΔ !== ΔᐃΔΔⵠ && (this.ⵠΔᐃᐃⵠⲆΔ = ΔᐃΔΔⵠ, ΔᐃΔΔⵠ = ΔᐃΔΔⵠ < ⵠⲆΔⲆᐃ ? "0" + ΔᐃΔΔⵠ : "" + ΔᐃΔΔⵠ, ΔⵠⲆ.ⵠⲆⵠᐃⵠΔᐃ = ΔⵠᐃⵠⲆ(ΔᐃΔΔⵠ, ⵠ[440], ⵠ[252], 80, 200));
				if (this.ⲆᐃⵠⵠΔⲆⲆ !== ⲆΔᐃ) {
					this.ⲆᐃⵠⵠΔⲆⲆ = ⲆΔᐃ;
					ⲆΔᐃ = 10 > ⲆΔᐃ ? "0" + ⲆΔᐃ : "" + ⲆΔᐃ;
					ΔⵠⲆ.ᐃΔΔᐃᐃᐃᐃ = ΔⵠᐃⵠⲆ(ⲆΔᐃ, ⵠ[440], ⵠ[252], 80, 200)
				}
				var ᐃⲆⵠⵠᐃ = this.Δⵠᐃᐃ[ΔᐃᐃⲆΔⵠᐃ];
				ᐃⲆⵠⵠᐃ.ⵠᐃᐃⲆ(Ⲇ);
				var ᐃᐃ = this.ᐃΔΔᐃᐃᐃᐃ;
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠⵠᐃ.translate.x - ᐃᐃ.width / 4 + 113, ᐃⲆⵠⵠᐃ.translate.y - ᐃᐃ.height / 4 + 40, ᐃᐃ.width / ΔᐃΔᐃ, ᐃᐃ.height / ⲆᐃΔⲆ);
				var ᐃᐃ = this.ⵠⲆⵠᐃⵠΔᐃ;
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠⵠᐃ.translate.x - ᐃᐃ.width / ⵠⲆΔⵠ + 182, ᐃⲆⵠⵠᐃ.translate.y - ᐃᐃ.height / 4 + 40, ᐃᐃ.width / ᐃᐃΔⵠ, ᐃᐃ.height / ΔⵠⲆᐃ);
				var ᐃᐃ = this.ⵠΔⲆᐃΔⵠΔ;
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ᐃⲆⵠⵠᐃ.translate.x - ᐃᐃ.width / 4 + 251, ᐃⲆⵠⵠᐃ.translate.y - ᐃᐃ.height / ⵠΔⲆΔΔ + 40, ᐃᐃ.width / 2, ᐃᐃ.height / 2)
			}
			if (ⲆⵠⲆⲆᐃ === (this.ⲆᐃⲆᐃᐃ & ⲆⵠⲆⲆᐃ)) this.buttons[ᐃⵠⲆⲆᐃΔⵠ].info.state = ΔⵠᐃΔ;
			else if (ⲆΔᐃᐃᐃ === (this.ⲆᐃⲆᐃᐃ & ⲆΔᐃᐃᐃ)) this.buttons[ⵠⵠΔⲆⲆᐃΔ].info.state = ΔⵠᐃΔ;
			else if (ᐃΔΔⵠΔ === (this.ⲆᐃⲆᐃᐃ & ᐃΔΔⵠΔ)) this.buttons[ᐃᐃᐃⲆᐃⲆⲆ].info.state = ΔⵠᐃΔ;
			else if ((this.ⲆᐃⲆᐃᐃ & ᐃⵠᐃⵠⵠ) === ᐃⵠᐃⵠⵠ) this.buttons[ΔᐃᐃⵠΔᐃΔ].info.state = ΔⵠᐃΔ;
			else if (ⵠⵠⲆᐃΔΔΔ === (this.ⲆᐃⲆᐃᐃ & ⵠⵠⲆᐃΔΔΔ)) this.buttons[ᐃⲆΔⵠΔΔⲆ].info.state = ΔⵠᐃΔ;
			else if ((this.ⲆᐃⲆᐃᐃ & ⵠᐃᐃΔⲆ) === ⵠᐃᐃΔⲆ) this.buttons[ᐃΔΔᐃⵠᐃⲆ].info.state = ΔⵠᐃΔ;
			else if (ΔΔᐃⵠΔ === (this.ⲆᐃⲆᐃᐃ & ΔΔᐃⵠΔ)) this.buttons[ΔΔΔⵠΔⵠᐃ].info.state = ΔⵠᐃΔ;
			else if (ΔⵠⵠⲆᐃⲆⵠ === (this.ⲆᐃⲆᐃᐃ & ΔⵠⵠⲆᐃⲆⵠ)) this.buttons[ΔΔΔⵠΔⵠᐃ].info.state = ΔⵠᐃΔ;
			else if (ᐃⵠᐃᐃᐃᐃⵠ === (this.ⲆᐃⲆᐃᐃ & ᐃⵠᐃᐃᐃᐃⵠ)) this.buttons[ΔΔΔⵠΔⵠᐃ].info.state = ΔⵠᐃΔ;
			else if (ⵠⵠᐃⵠᐃΔᐃ === (this.ⲆᐃⲆᐃᐃ & ⵠⵠᐃⵠᐃΔᐃ)) this.buttons[ΔΔΔⵠΔⵠᐃ].info.state = ΔⵠᐃΔ;
			else if ((this.ⲆᐃⲆᐃᐃ & ⵠⲆΔᐃⵠⲆΔ) === ⵠⲆΔᐃⵠⲆΔ) this.buttons[ΔΔΔⵠΔⵠᐃ].info.state = ΔⵠᐃΔ;
			else if (ΔⵠᐃⵠᐃⲆΔ === (this.ⲆᐃⲆᐃᐃ & ΔⵠᐃⵠᐃⲆΔ)) this.buttons[ΔΔΔⵠΔⵠᐃ].info.state = ΔⵠᐃΔ;
			else if (ⵠΔΔⲆⵠⲆᐃ === (this.ⲆᐃⲆᐃᐃ & ⵠΔΔⲆⵠⲆᐃ)) this.buttons[ΔΔΔⵠΔⵠᐃ].info.state = ΔⵠᐃΔ;
			else if ((this.ⲆᐃⲆᐃᐃ & ᐃⲆᐃᐃᐃ) === ᐃⲆᐃᐃᐃ) this.buttons[ᐃᐃᐃⲆᐃⲆⲆ].info.state = ΔⵠᐃΔ;
			else if ((this.ⲆᐃⲆᐃᐃ & ΔᐃⵠⵠΔ) === ΔᐃⵠⵠΔ) this.buttons[ᐃᐃᐃⲆᐃⲆⲆ].info.state = ΔⵠᐃΔ;
			else if ((this.ⲆᐃⲆᐃᐃ & ⵠⲆΔⲆΔ) === ⵠⲆΔⲆΔ) this.buttons[ᐃᐃᐃⲆᐃⲆⲆ].info.state = ΔⵠᐃΔ;
			else if ((this.ⲆᐃⲆᐃᐃ & ⵠᐃᐃΔᐃ) === ⵠᐃᐃΔᐃ) this.buttons[ᐃᐃᐃⲆᐃⲆⲆ].info.state = ΔⵠᐃΔ;
			else if (Ⲇᐃᐃᐃⵠ === (this.ⲆᐃⲆᐃᐃ & Ⲇᐃᐃᐃⵠ)) this.buttons[ᐃᐃᐃⲆᐃⲆⲆ].info.state = ΔⵠᐃΔ;
			else if ((this.ⲆᐃⲆᐃᐃ & ΔⲆⲆᐃΔ) === ΔⲆⲆᐃΔ) this.buttons[ᐃᐃᐃⲆᐃⲆⲆ].info.state = ΔⵠᐃΔ;
			else if (ⵠⵠᐃΔⵠ === (this.ⲆᐃⲆᐃᐃ & ⵠⵠᐃΔⵠ)) this.buttons[ΔⵠΔΔΔⵠΔ].info.state = ΔⵠᐃΔ;
			else if (ΔΔΔᐃⵠ === (this.ⲆᐃⲆᐃᐃ & ΔΔΔᐃⵠ)) this.buttons[ΔⵠΔΔΔⵠΔ].info.state = ΔⵠᐃΔ;
			else if (ⵠⵠⵠΔΔ === (this.ⲆᐃⲆᐃᐃ & ⵠⵠⵠΔΔ)) this.buttons[ΔⵠΔΔΔⵠΔ].info.state = ΔⵠᐃΔ;
			else if (ⵠΔᐃΔⲆᐃⲆ === (this.ⲆᐃⲆᐃᐃ & ⵠΔᐃΔⲆᐃⲆ)) this.buttons[ΔᐃᐃⵠΔᐃΔ].info.state = ΔⵠᐃΔ;
			if (ⲆΔᐃᐃᐃ === (this.ⲆᐃⲆᐃᐃ & ⲆΔᐃᐃᐃ)) {
				if (this.ᐃⵠⵠⵠⲆⵠΔ === this.ⵠΔⵠΔⵠᐃᐃ) {
					this.ᐃΔᐃⲆᐃΔᐃ = this.ᐃΔᐃΔᐃⵠⲆ;
					this.buttons[this.ᐃΔᐃΔᐃⵠⲆ].info.active = ⵠⲆᐃᐃ;
					this.buttons[this.ⵠⵠᐃⲆΔⲆΔ].info.active = ⵠⲆᐃᐃ;
					this.buttons[this.ΔⵠⵠⵠⵠⲆᐃ].info.active = ⵠⲆᐃᐃ
				} else {
					this.buttons[this.ᐃΔᐃΔᐃⵠⲆ].info.active = ᐃᐃᐃΔ;
					this.buttons[this.ⵠⵠᐃⲆΔⲆΔ].info.active = ᐃᐃᐃΔ;
					this.buttons[this.ΔⵠⵠⵠⵠⲆᐃ].info.active = ᐃᐃᐃΔ
				}
				if (this.ᐃΔᐃΔⲆᐃⵠ === this.ⵠΔⵠΔⵠᐃᐃ) this.buttons[this.ᐃΔᐃΔⲆᐃⵠ].info.state = ΔⵠᐃΔ;
				else if (this.ⵠΔⵠΔⵠᐃᐃ === this.ⵠΔⲆΔΔⲆΔ) this.buttons[this.ⵠΔⲆΔΔⲆΔ].info.state = ΔⵠᐃΔ;
				else if (this.ᐃⵠⵠⵠⲆⵠΔ === this.ⵠΔⵠΔⵠᐃᐃ) this.buttons[this.ᐃⵠⵠⵠⲆⵠΔ].info.state = ΔⵠᐃΔ;
				else if (this.ⵠΔⵠΔⵠᐃᐃ === this.ⵠᐃⵠⲆⵠᐃᐃ) this.buttons[this.ⵠᐃⵠⲆⵠᐃᐃ].info.state = ΔⵠᐃΔ;
				else if (this.ⵠΔⵠΔⵠᐃᐃ === this.ᐃΔⲆⵠᐃᐃⵠ) this.buttons[this.ᐃΔⲆⵠᐃᐃⵠ].info.state = ΔⵠᐃΔ;
				if (this.ᐃΔᐃⲆᐃΔᐃ === this.ᐃΔᐃΔᐃⵠⲆ) this.buttons[this.ᐃΔᐃΔᐃⵠⲆ].info.state = ΔⵠᐃΔ;
				else if (this.ⵠⵠᐃⲆΔⲆΔ === this.ᐃΔᐃⲆᐃΔᐃ) this.buttons[this.ⵠⵠᐃⲆΔⲆΔ].info.state = ΔⵠᐃΔ;
				else if (this.ᐃΔᐃⲆᐃΔᐃ === this.ΔⵠⵠⵠⵠⲆᐃ) this.buttons[this.ΔⵠⵠⵠⵠⲆᐃ].info.state = ΔⵠᐃΔ;
				if (this.ΔΔᐃᐃΔᐃⵠ === this.ⵠΔⵠᐃⵠⲆᐃ) this.buttons[this.ΔΔᐃᐃΔᐃⵠ].info.state = ΔⵠᐃΔ;
				else if (this.ⵠΔⵠᐃⵠⲆᐃ === this.ΔⵠᐃⲆⵠΔⲆ) this.buttons[this.ΔⵠᐃⲆⵠΔⲆ].info.state = ΔⵠᐃΔ;
				else if (this.ⵠΔⵠᐃⵠⲆᐃ === this.ⲆᐃⲆⵠⲆⵠⵠ) this.buttons[this.ⲆᐃⲆⵠⲆⵠⵠ].info.state = ΔⵠᐃΔ;
				if (this.ⲆⲆᐃΔⵠⵠⲆ === this.ΔΔΔⲆⲆΔᐃ) this.buttons[this.ΔΔΔⲆⲆΔᐃ].info.state = ΔⵠᐃΔ;
				else if (this.ⵠⲆⲆⵠΔⲆΔ === this.ⲆⲆᐃΔⵠⵠⲆ) this.buttons[this.ⵠⲆⲆⵠΔⲆΔ].info.state = ΔⵠᐃΔ;
				else if (this.ⵠⲆᐃⵠⵠⵠⵠ === this.ⲆⲆᐃΔⵠⵠⲆ) this.buttons[this.ⵠⲆᐃⵠⵠⵠⵠ].info.state = ΔⵠᐃΔ;
				else if (this.ⲆⲆᐃΔⵠⵠⲆ === this.ΔⲆᐃⵠⲆΔΔ) this.buttons[this.ΔⲆᐃⵠⲆΔΔ].info.state = ΔⵠᐃΔ;
				else if (this.ⲆⲆᐃΔⵠⵠⲆ === this.ΔⲆⲆΔⵠⵠΔ) this.buttons[this.ΔⲆⲆΔⵠⵠΔ].info.state = ΔⵠᐃΔ;
				else if (this.ⵠⲆⲆΔⵠᐃΔ === this.ⲆⲆᐃΔⵠⵠⲆ) this.buttons[this.ⵠⲆⲆΔⵠᐃΔ].info.state = ΔⵠᐃΔ
			}
			if (ᐃⵠᐃⵠⵠ === (this.ⲆᐃⲆᐃᐃ & ᐃⵠᐃⵠⵠ)) {
				if (-1 === this.ⵠⵠⵠᐃΔⵠΔ) this.buttons[ⵠⲆⲆⲆⲆⲆΔⲆⵠ].info.state = ΔⵠᐃΔ;
				else if (this.ⵠⵠⵠᐃΔⵠΔ === ΔᐃᐃΔ.ᐃΔⵠᐃᐃ) this.buttons[ᐃⲆΔᐃⲆⵠⵠΔΔ].info.state = ΔⵠᐃΔ;
				else if (this.ⵠⵠⵠᐃΔⵠΔ === ΔᐃᐃΔ.ᐃΔⲆⲆᐃ) this.buttons[ΔΔⵠΔᐃᐃⵠΔΔ].info.state = ΔⵠᐃΔ;
				else if (this.ⵠⵠⵠᐃΔⵠΔ === ΔᐃᐃΔ.ᐃᐃΔⲆΔ) this.buttons[ΔⵠΔΔⵠⲆⵠΔⵠ].info.state = ΔⵠᐃΔ;
				else if (this.ⵠⵠⵠᐃΔⵠΔ === ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ) this.buttons[ᐃⲆΔⲆⵠⵠΔᐃΔ].info.state = ΔⵠᐃΔ;
				if (this.ᐃⲆΔⵠⲆⵠᐃ === 0) this.buttons[ΔⲆⵠΔⲆᐃⲆⵠΔ].info.state = ΔⵠᐃΔ;
				else if (this.ᐃⲆΔⵠⲆⵠᐃ === 1) this.buttons[ΔⵠᐃⵠⵠΔⲆⵠΔ].info.state = ΔⵠᐃΔ;
				else if (2 === this.ᐃⲆΔⵠⲆⵠᐃ) this.buttons[ᐃⲆΔΔⵠΔΔⵠⲆ].info.state = ΔⵠᐃΔ;
				else if (3 === this.ᐃⲆΔⵠⲆⵠᐃ) this.buttons[ⵠΔⲆΔⵠⲆΔⲆⲆ].info.state = ΔⵠᐃΔ;
				else if (this.ᐃⲆΔⵠⲆⵠᐃ === ⲆᐃᐃΔⵠ) this.buttons[ⵠⵠⲆΔⵠⵠΔⵠⵠ].info.state = ΔⵠᐃΔ;
				else if (this.ᐃⲆΔⵠⲆⵠᐃ === 5) this.buttons[ΔⵠⲆⲆⲆⲆΔⲆᐃ].info.state = ΔⵠᐃΔ
			}
			if (ⲆⵠⲆⲆᐃ === (this.ⲆᐃⲆᐃᐃ & ⲆⵠⲆⲆᐃ) && 0 === ᐃΔᐃⵠ.ΔⲆⲆⲆᐃΔⲆ) {
				this.buttons[ⵠᐃⲆΔᐃ].ΔΔⲆΔΔⲆⲆ(ⵠΔΔΔ.ⲆⲆⲆⵠ) ? this.buttons[ⵠᐃⲆΔᐃ].hint = Math.min(1, this.buttons[ⵠᐃⲆΔᐃ].hint + 1.5 * ⲆΔΔⲆ) : this.buttons[ⵠᐃⲆΔᐃ].hint = Math.max(0, this.buttons[ⵠᐃⲆΔᐃ].hint - 1.5 * ⲆΔΔⲆ);
				this.buttons[ⵠΔΔⲆⵠ].ΔΔⲆΔΔⲆⲆ(ⵠΔΔΔ.ⲆⲆⲆⵠ) ? this.buttons[ⵠΔΔⲆⵠ].hint = Math.min(1, this.buttons[ⵠΔΔⲆⵠ].hint + ⲆΔΔⲆ * 1.5) : this.buttons[ⵠΔΔⲆⵠ].hint = Math.max(ⵠⲆΔ, this.buttons[ⵠΔΔⲆⵠ].hint - 1.5 * ⲆΔΔⲆ);
				if (this.buttons[ⲆⵠᐃΔᐃ].ΔΔⲆΔΔⲆⲆ(ⵠΔΔΔ.ⲆⲆⲆⵠ)) this.buttons[ⲆⵠᐃΔᐃ].hint = Math.min(ⲆᐃΔ, this.buttons[ⲆⵠᐃΔᐃ].hint + ⲆΔΔⲆ * 1.5);
				else this.buttons[ⲆⵠᐃΔᐃ].hint = Math.max(ⲆⲆⵠⲆ, this.buttons[ⲆⵠᐃΔᐃ].hint - ⲆΔΔⲆ * 1.5);
				this.buttons[Δᐃⵠᐃᐃ].ΔΔⲆΔΔⲆⲆ(ⵠΔΔΔ.ⲆⲆⲆⵠ) ? this.buttons[Δᐃⵠᐃᐃ].hint = Math.min(ᐃⲆΔ, this.buttons[Δᐃⵠᐃᐃ].hint + ⲆΔΔⲆ * 1.5) : this.buttons[Δᐃⵠᐃᐃ].hint = Math.max(0, this.buttons[Δᐃⵠᐃᐃ].hint - ⲆΔΔⲆ * 1.5);
				this.buttons[ᐃᐃᐃⵠⲆ].ΔΔⲆΔΔⲆⲆ(ⵠΔΔΔ.ⲆⲆⲆⵠ) ? this.buttons[ᐃᐃᐃⵠⲆ].hint = Math.min(Δᐃⵠⵠ, this.buttons[ᐃᐃᐃⵠⲆ].hint + 1.5 * ⲆΔΔⲆ) : this.buttons[ᐃᐃᐃⵠⲆ].hint = Math.max(0, this.buttons[ᐃᐃᐃⵠⲆ].hint - 1.5 * ⲆΔΔⲆ);
				this.buttons[ᐃΔᐃⲆΔ].ΔΔⲆΔΔⲆⲆ(ⵠΔΔΔ.ⲆⲆⲆⵠ) ? this.buttons[ᐃΔᐃⲆΔ].hint = Math.min(ΔΔΔᐃ, this.buttons[ᐃΔᐃⲆΔ].hint + ⲆΔΔⲆ * 1.5) : this.buttons[ᐃΔᐃⲆΔ].hint = Math.max(0, this.buttons[ᐃΔᐃⲆΔ].hint - 1.5 * ⲆΔΔⲆ)
			}
			var ⲆΔⵠⵠⲆⵠΔ = 1;
			if (1 < (this.ⲆᐃⲆᐃᐃ & (ΔⵠⵠⲆᐃⲆⵠ | ᐃⵠᐃᐃᐃᐃⵠ | ⵠⵠᐃⵠᐃΔᐃ | ⵠⲆΔᐃⵠⲆΔ | ΔⵠᐃⵠᐃⲆΔ | ⵠΔΔⲆⵠⲆᐃ))) {
				var ᐃᐃ = ⵠᐃ.ᐃⵠᐃΔⵠᐃΔ;
				Ⲇ.save();
				Ⲇ.translate(ΔⵠⵠΔ, ⲆⲆⵠⲆΔⲆΔⵠΔ + ᐃᐃ.height / 4);
				if (ΔᐃⲆⲆ === this.ΔΔⵠⵠᐃ) {
					this.ⵠⲆⲆⲆΔᐃⵠ += ⲆΔΔⲆ / 3;
					ⲆΔⵠⵠⲆⵠΔ = this.ⲆⲆⵠⲆⲆᐃΔ - ΔᐃⲆΔⵠΔᐃ / Math.pow(1 + this.ⵠⲆⲆⲆΔᐃⵠ, 1 + this.ⵠⲆⲆⲆΔᐃⵠ);
					Ⲇ.rotate(ⲆΔⵠⵠⲆⵠΔ)
				}
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / 4, -ᐃᐃ.height / Ⲇⵠⵠⵠ, ᐃᐃ.width / 2, ᐃᐃ.height / ΔΔⲆᐃ);
				Ⲇ.restore()
			}
			if (ᐃΔᐃⵠ.ΔⲆⲆⲆᐃΔⲆ === ⵠᐃⲆ) {
				if (ΔᐃᐃΔ.ᐃΔⵠᐃᐃ === ᐃΔᐃⵠ.ᐃⲆⵠΔⵠ) this.buttons[ⵠᐃⲆΔᐃ].info.state = ΔⵠᐃΔ;
				else if (ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ === ᐃΔᐃⵠ.ᐃⲆⵠΔⵠ) this.buttons[ⵠΔΔⲆⵠ].info.state = ΔⵠᐃΔ;
				else if (ᐃΔᐃⵠ.ᐃⲆⵠΔⵠ === ΔᐃᐃΔ.ᐃΔⲆⲆᐃ) this.buttons[ᐃᐃᐃⵠⲆ].info.state = ΔⵠᐃΔ;
				else if (ᐃΔᐃⵠ.ᐃⲆⵠΔⵠ === ΔᐃᐃΔ.ᐃᐃΔⲆΔ) this.buttons[ᐃΔᐃⲆΔ].info.state = ΔⵠᐃΔ;
				else if (ΔᐃᐃΔ.ⲆⵠᐃΔᐃ === ᐃΔᐃⵠ.ᐃⲆⵠΔⵠ) this.buttons[ⲆⵠᐃΔᐃ].info.state = ΔⵠᐃΔ;
				else ΔᐃᐃΔ.Δᐃⵠᐃᐃ === ᐃΔᐃⵠ.ᐃⲆⵠΔⵠ && (this.buttons[Δᐃⵠᐃᐃ].info.state = ΔⵠᐃΔ)
			}
			for (var Ⲇᐃ = ΔΔΔᐃ; this.buttons.length > Ⲇᐃ; Ⲇᐃ++) {
				this.buttons[Ⲇᐃ].info.active === ᐃᐃᐃΔ && this.buttons[Ⲇᐃ].ⵠᐃᐃⲆ(Ⲇ)
			}
			this.Δⵠᐃᐃ[0].ⵠᐃᐃⲆ(Ⲇ);
			if (0 < (this.ⲆᐃⲆᐃᐃ & (ⲆΔⵠⵠΔᐃⵠ | ⵠⵠⵠᐃΔⲆⵠ))) {
				var ᐃᐃ = this.ⵠᐃⲆⵠⲆⲆᐃ;
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / 4, 138, ᐃᐃ.width / 2, ᐃᐃ.height / ⲆⲆΔⲆ)
			}
			var ⲆⵠΔⲆᐃ = Math.max(ⵠⲆΔⲆ, Math.min(18, Math.floor((ᐃΔΔΔ.ⲆⵠΔⲆᐃ + ᐃⲆΔΔ) / 2)));
			this.Δⵠᐃᐃ[ⲆⵠΔⲆᐃ].active = ᐃᐃᐃΔ;
			this.Δⵠᐃᐃ[ⲆⵠΔⲆᐃ].ⵠᐃᐃⲆ(Ⲇ);
			this.Δⵠᐃᐃ[ⲆⵠΔⲆᐃ].active = ⵠⲆᐃᐃ;
			this.buttons[ΔΔᐃᐃ].ⵠᐃᐃⲆ(Ⲇ);
			if (1 < (this.ⲆᐃⲆᐃᐃ & (ᐃΔΔⵠΔ | ΔᐃⵠⵠΔ | ⵠᐃᐃΔᐃ | ᐃⲆᐃᐃᐃ | Ⲇᐃᐃᐃⵠ))) {
				var ⲆΔΔⵠⲆ = 1 < (this.ⲆᐃⲆᐃᐃ & (ΔᐃⵠⵠΔ | ⵠᐃᐃΔᐃ | ᐃⲆᐃᐃᐃ | Ⲇᐃᐃᐃⵠ)) ? -190 : ⲆⲆⵠⲆ;
				var ᐃᐃ = ᐃΔ[Δ.ⵠᐃⵠⲆ][this.ⲆⲆⲆᐃⵠ][this.ᐃⵠⲆᐃΔᐃⵠ];
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / ⲆᐃᐃΔⵠ + ⲆΔΔⵠⲆ, 183, ᐃᐃ.width / 2, ᐃᐃ.height / 2);
				this.ⵠΔΔⲆ = (this.ⵠΔΔⲆ + 1e3 * ⲆΔΔⲆ) % 2e3;
				var ⲆⵠⲆ = 4.5 * (this.ⵠΔΔⲆ < 1e3) ? this.ⵠΔΔⲆ / 1e3 : (2e3 - this.ⵠΔΔⲆ) / 1e3;
				var ᐃᐃ = ᐃΔ[Δ.ᐃᐃΔⲆᐃ][this.ⵠΔⲆΔᐃ][this.ᐃⵠⲆᐃΔᐃⵠ];
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / ᐃΔᐃΔ - 62 + ⲆⵠⲆ + ⲆΔΔⵠⲆ, 240, ᐃᐃ.width / 2, ᐃᐃ.height / ⲆⵠΔⵠ);
				var ᐃᐃ = ᐃΔ[Δ.ΔᐃᐃⵠⲆ][this.ⲆΔⵠⵠ][this.ᐃⵠⲆᐃΔᐃⵠ];
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / 4 - 54 + ⲆⵠⲆ + ⲆΔΔⵠⲆ, 272, ᐃᐃ.width / ΔⲆᐃΔ, ᐃᐃ.height / ⲆⲆΔⲆ);
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / ⵠⲆΔⵠ + 54 - ⲆⵠⲆ + ⲆΔΔⵠⲆ, 272, ᐃᐃ.width / 2, ᐃᐃ.height / 2);
				var ᐃᐃ = ᐃΔ[Δ.ᐃΔⵠⲆⵠ][this.ⲆΔⵠⵠ][this.ᐃⵠⲆᐃΔᐃⵠ];
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / ⲆΔᐃΔⵠ + ⲆΔΔⵠⲆ, 222, ᐃᐃ.width / ⵠⵠⵠᐃ, ᐃᐃ.height / 2);
				var ᐃᐃ = ᐃΔ[Δ.ΔᐃⲆΔᐃ][this.ⵠⵠΔΔⵠ][this.ᐃⵠⲆᐃΔᐃⵠ];
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / Ⲇⵠⵠⵠ + ⲆΔΔⵠⲆ, 222, ᐃᐃ.width / ⲆⲆⲆⲆ, ᐃᐃ.height / ⲆⲆⲆⲆ)
			}
			if (ᐃΔΔⵠΔ === (this.ⲆᐃⲆᐃᐃ & ᐃΔΔⵠΔ)) {
				var ᐃᐃ = ᐃΔ[Δ.ᐃᐃⵠⵠΔ][this.ⵠⲆΔΔⲆ][this.ᐃⵠⲆᐃΔᐃⵠ];
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / ᐃⲆᐃⲆ - 61, 406 - ᐃᐃ.height / 4, ᐃᐃ.width / 2, ᐃᐃ.height / 2);
				var ᐃᐃ = ᐃΔ[Δ.ᐃᐃⵠⵠΔ][this.ΔⵠᐃⲆΔ][this.ᐃⵠⲆᐃΔᐃⵠ];
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / 4 + 53, 406 - ᐃᐃ.height / 4, ᐃᐃ.width / 2, ᐃᐃ.height / 2)
			}
			if ((this.ⲆᐃⲆᐃᐃ & ⵠⲆΔⲆΔ) === ⵠⲆΔⲆΔ) {
				var ᐃᐃ = ᐃΔ[Δ.ᐃᐃⵠⵠΔ][this.ΔⵠᐃⲆΔ][this.ᐃⵠⲆᐃΔᐃⵠ];
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / 4 - 200, 268 - ᐃᐃ.height / ΔⵠⵠⲆ, ᐃᐃ.width / 2, ᐃᐃ.height / ΔΔⲆᐃ)
			}
			if (ΔⲆⲆᐃΔ === (this.ⲆᐃⲆᐃᐃ & ΔⲆⲆᐃΔ)) {
				var ᐃᐃ = ᐃΔ[Δ.ᐃᐃⵠⵠΔ][this.ⵠⲆΔΔⲆ][this.ᐃⵠⲆᐃΔᐃⵠ];
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / ⵠΔⲆΔΔ - 200, 268 - ᐃᐃ.height / 4, ᐃᐃ.width / ΔΔΔⵠ, ᐃᐃ.height / ⲆᐃⵠΔ)
			}
			if ((this.ⲆᐃⲆᐃᐃ & (ΔᐃⵠⵠΔ | ⵠᐃᐃΔᐃ | ᐃⲆᐃᐃᐃ | Ⲇᐃᐃᐃⵠ | ⵠⲆΔⲆΔ | ΔⲆⲆᐃΔ)) > ΔᐃΔⲆ) {
				for (var Ⲇᐃ = ⵠⲆΔⲆ; Ⲇᐃ < this.buttons.length; Ⲇᐃ++) {
					if ((this.buttons[Ⲇᐃ].view & this.ⲆᐃⲆᐃᐃ) === ΔΔᐃ) continue;
					var ⵠⲆᐃΔ = this.buttons[Ⲇᐃ].info;
					if (ⵠⲆⵠⵠ <= ⵠⲆᐃΔ.ΔⲆᐃΔⲆⵠΔ) {
						var ᐃᐃ = ⵠⲆᐃΔ.ΔΔⲆⵠᐃᐃⵠΔᐃ[ⵠⲆᐃΔ.ΔⲆᐃΔⲆⵠΔ].ⲆΔᐃ;
						ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ⵠⲆᐃΔ.translate.x - ᐃᐃ.width / 8 + 44.5, ⵠⲆᐃΔ.translate.y - ᐃᐃ.height / 8 + 45.5, ᐃᐃ.width / 4, ᐃᐃ.height / 4);
						if (Δⵠᐃ !== ⵠⲆᐃΔ.ⲆⲆⵠⵠⵠᐃⲆ) {
							var ᐃᐃ = ⵠᐃ.ⲆⲆⵠⲆΔⲆⵠ;
							ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ⵠⲆᐃΔ.translate.x - ᐃᐃ.width / ⵠΔⲆΔΔ + 44.5, ⵠⲆᐃΔ.translate.y - ᐃᐃ.height / 4 + 44.5, ᐃᐃ.width / ΔⲆᐃΔ, ᐃᐃ.height / ⲆᐃΔⲆ)
						}
					}
				}
				var ᐃᐃ = this.ⲆⵠⵠᐃΔΔⲆ;
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - 312, 375, ᐃᐃ.width / ⵠⵠⵠᐃ, ᐃᐃ.height / ᐃᐃΔⵠ);
				var ᐃᐃ = this.ⵠⵠⵠᐃⵠⲆᐃ;
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - 312, 395, ᐃᐃ.width / ⲆⲆⲆⲆ, ᐃᐃ.height / 2)
			}
			if (this.ᐃⲆⵠᐃΔ !== this.ΔⵠⲆⵠΔⵠᐃ) {
				this.ΔⵠⲆⵠΔⵠᐃ = this.ᐃⲆⵠᐃΔ;
				this.ⲆⵠⵠⲆᐃⵠⵠ = ΔⵠᐃⵠⲆ("" + this.ᐃⲆⵠᐃΔ, ⵠ[440], ⵠ[252], 60, 250)
			}
			ᐃᐃⵠⲆ(Ⲇ, this.ⲆⵠⵠⲆᐃⵠⵠ, this.Δⵠᐃᐃ[0].translate.x + 350, 15, this.ⲆⵠⵠⲆᐃⵠⵠ.w2, this.ⲆⵠⵠⲆᐃⵠⵠ.ⲆⲆⲆΔΔ);
			this.ⲆⵠΔⲆᐃ !== this.ⵠⲆΔⵠΔⲆⲆ && (this.ⵠⲆΔⵠΔⲆⲆ = this.ⲆⵠΔⲆᐃ, this.ᐃⲆᐃⲆⲆᐃΔ = ΔⵠᐃⵠⲆ("LVL " + (this.ⲆⵠΔⲆᐃ + 1), ⵠ[440], ⵠ[252], 50, 250, ⵠΔⵠⵠⲆ, 30, 24, ᐃΔᐃΔΔᐃΔ, ⵠΔⵠⵠⲆ, undefined, ⵠⲆⲆⲆⲆ, "#3F3019", ⵠⵠᐃΔᐃ));
			ᐃᐃⵠⲆ(Ⲇ, this.ᐃⲆᐃⲆⲆᐃΔ, this.Δⵠᐃᐃ[ⵠᐃⲆ].translate.x + 94, 0, this.ᐃⲆᐃⲆⲆᐃΔ.w2, this.ᐃⲆᐃⲆⲆᐃΔ.ⲆⲆⲆΔΔ);
			if (ᐃΔᐃⵠ.ΔⲆⲆⲆᐃΔⲆ === 0) {
				var ΔΔⵠⵠ = this.buttons[ⵠᐃⲆΔᐃ].hint;
				if (ΔΔᐃ < ΔΔⵠⵠ) {
					var ᐃᐃ = ⵠᐃ.ᐃΔⲆⲆⵠΔⵠ;
					ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / 4, -36 - ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(1 - ΔΔⵠⵠ) * ᐃᐃ.height / ΔᐃⵠΔ, ᐃᐃ.width / 2, ᐃᐃ.height / 2)
				}
				var ΔΔⵠⵠ = this.buttons[ⵠΔΔⲆⵠ].hint;
				if (ⲆⵠⲆⲆ < ΔΔⵠⵠ) {
					var ᐃᐃ = ⵠᐃ.ᐃᐃⲆᐃΔⲆⲆ;
					ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / 4, -36 - ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(1 - ΔΔⵠⵠ) * ᐃᐃ.height / ⵠⵠⵠᐃ, ᐃᐃ.width / 2, ᐃᐃ.height / 2)
				}
				var ΔΔⵠⵠ = this.buttons[ⲆⵠᐃΔᐃ].hint;
				if (ⲆⲆⵠⲆ < ΔΔⵠⵠ) {
					var ᐃᐃ = ⵠᐃ.ⵠΔᐃΔΔⵠⵠ;
					ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / ⵠⲆⲆⵠ, -36 - ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(1 - ΔΔⵠⵠ) * ᐃᐃ.height / 2, ᐃᐃ.width / ΔΔⲆⲆ, ᐃᐃ.height / 2)
				}
				var ΔΔⵠⵠ = this.buttons[Δᐃⵠᐃᐃ].hint;
				if (ⵠᐃⲆ < ΔΔⵠⵠ) {
					var ᐃᐃ = ⵠᐃ.ⲆᐃⵠΔⵠⲆⵠ;
					ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / ⵠΔⲆΔΔ, -36 - ᐃᐃ.height * ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(1 - ΔΔⵠⵠ) / 2, ᐃᐃ.width / ΔΔΔⵠ, ᐃᐃ.height / ΔᐃΔᐃ)
				}
				var ΔΔⵠⵠ = this.buttons[ᐃΔᐃⲆΔ].hint;
				if (0 < ΔΔⵠⵠ) {
					var ᐃᐃ = ⵠᐃ.ⵠᐃΔⵠΔⵠⲆ;
					ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / 4, -36 - ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(1 - ΔΔⵠⵠ) * ᐃᐃ.height / 2, ᐃᐃ.width / ΔΔⲆᐃ, ᐃᐃ.height / ⲆⲆⲆⲆ)
				}
				var ΔΔⵠⵠ = this.buttons[ᐃᐃᐃⵠⲆ].hint;
				if (0 < ΔΔⵠⵠ) {
					var ᐃᐃ = ⵠᐃ.ⵠΔⵠᐃⲆᐃᐃ;
					ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / ᐃΔᐃΔ, -36 - ᐃᐃ.height * ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(ΔΔΔᐃ - ΔΔⵠⵠ) / ᐃᐃΔⵠ, ᐃᐃ.width / 2, ᐃᐃ.height / ΔΔᐃΔⵠ)
				}
			}
			if (ΔⵠΔ === this.ΔΔⵠⵠᐃ && Math.abs(ⲆΔⵠⵠⲆⵠΔ - this.ⲆⲆⵠⲆⲆᐃΔ) < .006) {
				Ⲇ.globalAlpha = Math.min(ΔᐃΔⲆ, this.ⵠⵠⵠᐃΔⲆⲆ * ΔⲆΔⵠ);
				var ᐃᐃ = ⵠᐃ.ΔⵠΔᐃᐃΔΔ;
				Ⲇ.save();
				Ⲇ.translate(ΔⵠⵠΔ, 260);
				this.ⵠⵠⵠᐃΔⲆⲆ += ⲆΔΔⲆ;
				Ⲇ.rotate(this.ⵠⵠⵠᐃΔⲆⲆ);
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ᐃᐃ.width / ⲆⵠΔⵠ, -ᐃᐃ.height / ΔΔΔⵠ, ᐃᐃ.width, ᐃᐃ.height);
				Ⲇ.restore();
				var ⲆⵠⲆ = 1.05 + Math.cos(this.ⵠⵠⵠᐃΔⲆⲆ * 5) * .05;
				if (0 === this.ΔᐃΔΔᐃᐃᐃ) {
					ᐃᐃ = Δᐃᐃᐃ.ⵠᐃΔⲆΔ[this.ⵠⵠΔⵠᐃΔⲆ].ⲆΔᐃ;
					var ⲆⲆᐃ = ⲆⵠⲆ * ᐃᐃ.width;
					var ⲆΔⲆ = ⲆⵠⲆ * ᐃᐃ.height;
					ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ⲆⲆᐃ / ⲆᐃΔⲆ, 260 - ⲆΔⲆ / ⵠΔⵠΔ, ⲆⲆᐃ, ⲆΔⲆ)
				} else if (this.ΔᐃΔΔᐃᐃᐃ === 1) {
					ᐃᐃ = Δᐃᐃᐃ.ⵠᐃΔⲆΔ[ΔⲆⲆ].ⲆΔᐃ;
					var ⲆⲆᐃ = ⲆⵠⲆ * ᐃᐃ.width;
					var ⲆΔⲆ = ᐃᐃ.height * ⲆⵠⲆ;
					ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ⲆⲆᐃ / 2, 260 - ⲆΔⲆ / ᐃⲆᐃᐃ, ⲆⲆᐃ, ⲆΔⲆ);
					ᐃᐃ = Δᐃᐃᐃ.ΔᐃⲆΔᐃ[this.ⵠⵠΔⵠᐃΔⲆ].ⲆΔᐃ;
					var ⲆⲆᐃ = ᐃᐃ.width * ⲆⵠⲆ;
					var ⲆΔⲆ = ᐃᐃ.height * ⲆⵠⲆ;
					ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ⲆⲆᐃ / 2, 260 - ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ)
				} else if (2 === this.ΔᐃΔΔᐃᐃᐃ) {
					ᐃᐃ = Δᐃᐃᐃ.ⵠᐃⵠⲆ[this.ⵠⵠΔⵠᐃΔⲆ].ⲆΔᐃ;
					var ⲆⲆᐃ = ⲆⵠⲆ * ᐃᐃ.width;
					var ⲆΔⲆ = ᐃᐃ.height * ⲆⵠⲆ;
					ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ⲆⲆᐃ / ΔΔⲆᐃ, 180 - ⲆΔⲆ / ᐃᐃΔⵠ, ⲆⲆᐃ, ⲆΔⲆ);
					ᐃᐃ = Δᐃᐃᐃ.ⵠᐃΔⲆΔ[ⵠⵠⲆⵠ].ⲆΔᐃ;
					var ⲆⲆᐃ = ᐃᐃ.width * ⲆⵠⲆ;
					var ⲆΔⲆ = ⲆⵠⲆ * ᐃᐃ.height;
					ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ⲆⲆᐃ / 2, 260 - ⲆΔⲆ / ᐃⲆᐃᐃ, ⲆⲆᐃ, ⲆΔⲆ)
				} else if (ⵠΔΔⲆᐃ === this.ΔᐃΔΔᐃᐃᐃ) {
					ᐃᐃ = Δᐃᐃᐃ.ᐃᐃΔⲆᐃ[this.ⵠⵠΔⵠᐃΔⲆ].ⲆΔᐃ;
					var ⲆⲆᐃ = ⲆⵠⲆ * ᐃᐃ.width;
					var ⲆΔⲆ = ⲆⵠⲆ * ᐃᐃ.height;
					Ⲇ.save();
					Ⲇ.translate(ΔⵠⵠΔ, 260);
					Ⲇ.rotate(Math.PI);
					ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, -ⲆⲆᐃ / ⲆⲆΔⲆ, -ⲆΔⲆ / ⲆⲆΔⲆ, ⲆⲆᐃ, ⲆΔⲆ);
					Ⲇ.restore()
				} else if (this.ΔᐃΔΔᐃᐃᐃ === 4) {
					ᐃᐃ = Δᐃᐃᐃ.ᐃᐃⵠⵠΔ[this.ⵠⵠΔⵠᐃΔⲆ].ⲆΔᐃ;
					var ⲆⲆᐃ = ᐃᐃ.width * ⲆⵠⲆ;
					var ⲆΔⲆ = ⲆⵠⲆ * ᐃᐃ.height;
					ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ⲆⲆᐃ / 2, 260 - ⲆΔⲆ / ΔⲆᐃΔ, ⲆⲆᐃ, ⲆΔⲆ)
				}
				var ᐃᐃ = this.ΔⵠΔⵠⵠⵠⵠ;
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / ⵠᐃᐃΔ, 340, ᐃᐃ.width / ΔΔΔⵠ, ᐃᐃ.height / ΔᐃⵠΔ);
				var ᐃᐃ = this.ᐃⲆΔⲆⲆᐃⵠ;
				ᐃᐃⵠⲆ(Ⲇ, ᐃᐃ, ΔⵠⵠΔ - ᐃᐃ.width / ᐃⵠⵠⵠᐃ, 365, ᐃᐃ.width / 2, ᐃᐃ.height / 2);
				6 < this.ⵠⵠⵠᐃΔⲆⲆ && (this.ΔΔⵠⵠᐃ = ᐃⵠⵠⲆ, ⵠⲆΔᐃ(ΔΔᐃⵠΔ));
				Ⲇ.globalAlpha = 1
			}
			ᐃⲆⵠ.alert.ⵠᐃᐃⲆ(ⵠ[447], ⵠ[204]);
			if (ΔⵠⲆ.waiting) this.ΔⲆⲆⲆΔᐃⲆ.ⵠᐃᐃⲆ()
		};
		var ᐃⵠ = 0;
		var ⲆⵠⲆⲆᐃ = Math.pow(2, ᐃⵠ++);
		var ᐃⵠᐃⵠⵠ = Math.pow(2, ᐃⵠ++);
		this.ᐃⵠᐃⵠⵠ = ᐃⵠᐃⵠⵠ;
		var ⵠᐃᐃΔⲆ = Math.pow(ΔΔΔⵠ, ᐃⵠ++);
		var ᐃΔΔⵠΔ = Math.pow(ΔΔⲆᐃ, ᐃⵠ++);
		var ΔΔᐃⵠΔ = Math.pow(ⲆᐃΔⲆ, ᐃⵠ++);
		var ⵠⵠⲆᐃΔΔΔ = Math.pow(ᐃᐃⲆⲆ, ᐃⵠ++);
		var ⲆΔᐃᐃᐃ = Math.pow(2, ᐃⵠ++);
		var ⲆⲆᐃᐃⵠ = Math.pow(ΔΔⲆᐃ, ᐃⵠ++);
		this.ⲆⲆᐃᐃⵠ = ⲆⲆᐃᐃⵠ;
		var ⵠⲆᐃⲆΔΔⵠ = Math.pow(2, ᐃⵠ++);
		var ᐃᐃⵠⲆΔⲆᐃ = Math.pow(2, ᐃⵠ++);
		var ΔⵠⵠⲆᐃⲆⵠ = Math.pow(ⲆⵠΔⵠ, ᐃⵠ++);
		var ᐃⵠᐃᐃᐃᐃⵠ = Math.pow(ᐃᐃⲆⲆ, ᐃⵠ++);
		var ⵠⵠᐃⵠᐃΔᐃ = Math.pow(ᐃᐃⲆⲆ, ᐃⵠ++);
		var ⵠⲆΔᐃⵠⲆΔ = Math.pow(2, ᐃⵠ++);
		var ΔⵠᐃⵠᐃⲆΔ = Math.pow(ΔⲆᐃΔ, ᐃⵠ++);
		var ⵠΔΔⲆⵠⲆᐃ = Math.pow(2, ᐃⵠ++);
		var ᐃⲆᐃᐃᐃ = Math.pow(ΔᐃΔᐃ, ᐃⵠ++);
		var ⵠⲆΔⲆΔ = Math.pow(2, ᐃⵠ++);
		var ΔᐃⵠⵠΔ = Math.pow(2, ᐃⵠ++);
		var ⵠᐃᐃΔᐃ = Math.pow(2, ᐃⵠ++);
		var Ⲇᐃᐃᐃⵠ = Math.pow(2, ᐃⵠ++);
		var ΔⲆⲆᐃΔ = Math.pow(2, ᐃⵠ++);
		var ⵠⵠⵠᐃΔⲆⵠ = Math.pow(ΔΔᐃΔⵠ, ᐃⵠ++);
		var ⲆΔⵠⵠΔᐃⵠ = Math.pow(ᐃᐃᐃⵠ, ᐃⵠ++);
		var ⵠⵠᐃΔⵠ = Math.pow(ⲆᐃΔⲆ, ᐃⵠ++);
		this.ⵠⵠᐃΔⵠ = ⵠⵠᐃΔⵠ;
		var ΔΔΔᐃⵠ = Math.pow(2, ᐃⵠ++);
		this.ΔΔΔᐃⵠ = ΔΔΔᐃⵠ;
		var ⵠⵠⵠΔΔ = Math.pow(ᐃⲆᐃⵠ, ᐃⵠ++);
		this.ⵠⵠⵠΔΔ = ⵠⵠⵠΔΔ;
		var ⵠΔᐃΔⲆᐃⲆ = Math.pow(2, ᐃⵠ++);
		this.ⲆᐃⲆᐃᐃ = ⲆⵠⲆⲆᐃ;

		function ΔᐃΔⵠΔ(ᐃⵠⲆⵠ, Δᐃᐃⵠ, ᐃⲆΔᐃⵠⲆΔⲆᐃ) {
			for (var Ⲇᐃ = 0; ΔⵠⲆ.Δⵠᐃᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
				0 !== (ΔⵠⲆ.Δⵠᐃᐃ[Ⲇᐃ].view & ᐃⵠⲆⵠ) && (ΔⵠⲆ.Δⵠᐃᐃ[Ⲇᐃ].active = Δᐃᐃⵠ)
			}
			for (var Ⲇᐃ = 0; ΔⵠⲆ.buttons.length > Ⲇᐃ; Ⲇᐃ++) {
				if ((ΔⵠⲆ.buttons[Ⲇᐃ].view & ᐃⵠⲆⵠ) !== Δⵠⵠⵠ) ΔⵠⲆ.buttons[Ⲇᐃ].info.active = Δᐃᐃⵠ
			}
			for (var Ⲇᐃ = ΔΔᐃ; ΔⵠⲆ.ⲆΔΔΔΔ.length > Ⲇᐃ; Ⲇᐃ++) {
				ⵠⵠⵠΔ !== (ΔⵠⲆ.ⲆΔΔΔΔ[Ⲇᐃ].view & ᐃⵠⲆⵠ) && (ΔⵠⲆ.ⲆΔΔΔΔ[Ⲇᐃ].style.display = ᐃⲆΔᐃⵠⲆΔⲆᐃ)
			}
		}
		var ᐃᐃⲆⲆⵠⵠᐃ = [];
		this.ⲆⵠᐃⵠᐃΔᐃ = ᐃᐃⲆ;

		function ⵠⲆΔᐃ(ᐃⵠⲆⵠ) {
			if (ᐃΔΔⵠⲆ === ΔⵠⲆ.ᐃⵠⲆⵠⵠⵠⵠ) return;
			ΔᐃΔⵠΔ(ⵠⲆᐃⲆΔΔⵠ, ⵠⲆᐃᐃ, ⵠ[181]);
			ΔᐃΔⵠΔ(ᐃᐃⵠⲆΔⲆᐃ, ⵠⲆᐃᐃ, ⵠ[181]);
			ⲆⵠΔⲆⲆΔⲆ();
			if (ᐃⵠⲆⵠ === ΔⵠⲆ.ⲆᐃⲆᐃᐃ || ΔⵠⲆ.ΔΔⵠⵠᐃ >= 1) return;
			if (ᐃⵠⲆⵠ === ⲆⵠⲆⲆᐃ || ᐃⵠⲆⵠ === ΔΔᐃⵠΔ || ᐃⵠⲆⵠ === ᐃⵠᐃⵠⵠ || ᐃⵠⲆⵠ === ⲆΔᐃᐃᐃ || ᐃΔΔⵠΔ === ᐃⵠⲆⵠ || ⵠⵠⲆᐃΔΔΔ === ᐃⵠⲆⵠ) ΔⵠⲆ.ᐃᐃⵠΔᐃ.style.display = ⵠ[442];
			else ΔⵠⲆ.ᐃᐃⵠΔᐃ.style.display = ⵠ[181];
			ΔᐃΔⵠΔ(ΔⵠⲆ.ⲆᐃⲆᐃᐃ, ⵠⲆᐃᐃ, ⵠ[181]);
			ΔⵠⲆ.ⲆᐃⲆᐃᐃ = ᐃⵠⲆⵠ;
			ΔᐃΔⵠΔ(ΔⵠⲆ.ⲆᐃⲆᐃᐃ, ᐃᐃᐃΔ, ⵠ[442])
		}

		function ⲆΔⵠⵠᐃⲆᐃᐃᐃ(ⵠⲆΔᐃΔΔⵠ) {
			ⵠⲆΔᐃΔΔⵠ = ⵠⲆΔᐃΔΔⵠ.replace("http://starve.io", "https://starve.io");
			var ⵠΔⲆᐃ = new XMLHttpRequest;
			ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[36]]("HEAD", ⵠⲆΔᐃΔΔⵠ, ᐃΔᐃⵠⲆ);
			ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
				if (ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[160]] === ᐃᐃⵠΔ) {
					if (ⵠΔⲆᐃ.status === 200) {
						var ᐃⵠᐃΔⵠ = Number(ⵠΔⲆᐃ.getResponseHeader("Content-Length"));
						if (ᐃᐃᐃ < ᐃⵠᐃΔⵠ) ⲆᐃΔᐃⵠⵠΔⲆⲆ(ⵠⲆΔᐃΔΔⵠ, ᐃⵠᐃΔⵠ)
					}
				}
			};
			ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[71]](null)
		}

		function ⲆⵠΔⲆⲆΔⲆ() {
			var ⵠᐃⵠᐃⵠΔᐃ = Number(ᐃΔΔⵠ.get("starve_crate"));
			var ⲆⵠⲆⲆⲆⵠᐃ = Number(ᐃΔΔⵠ.get("starve_dead"));
			var ⲆⲆΔΔⵠⲆΔ = Number(ᐃΔΔⵠ.get("starve_book"));
			var ⲆᐃΔᐃΔⵠⲆ = Number(ᐃΔΔⵠ.get("starve_bag"));
			var ⲆᐃⲆΔᐃⵠᐃ = Number(ᐃΔΔⵠ.get("starve_skin"));
			var ⵠⵠΔΔᐃΔⲆ = Number(ᐃΔΔⵠ.get("starve_accessory"));
			!(ᐃΔΔΔ.unlock.ⲆΔⵠⵠ[ᐃΔΔΔ.ⲆΔⵠⵠ] > ᐃⵠⵠⲆ) && (ᐃΔΔΔ.ⲆΔⵠⵠ = !(ᐃΔΔΔ.unlock.ⲆΔⵠⵠ[ⲆᐃⲆΔᐃⵠᐃ] > 0) ? 0 : ⲆᐃⲆΔᐃⵠᐃ);
			!(ᐃΔΔΔ.unlock.ⵠΔⲆΔᐃ[ᐃΔΔΔ.ⵠΔⲆΔᐃ] > 0) && (ᐃΔΔΔ.ⵠΔⲆΔᐃ = !(ᐃΔΔΔ.unlock.ⵠΔⲆΔᐃ[ⲆⲆΔΔⵠⲆΔ] > 0) ? 0 : ⲆⲆΔΔⵠⲆΔ);
			if (!(ᐃΔΔΔ.unlock.ΔⵠᐃⲆΔ[ᐃΔΔΔ.ΔⵠᐃⲆΔ] > 0)) ᐃΔΔΔ.ΔⵠᐃⲆΔ = !(ᐃΔΔΔ.unlock.ΔⵠᐃⲆΔ[ⲆⵠⲆⲆⲆⵠᐃ] > ᐃᐃⲆ) ? ⵠⵠⲆⵠ : ⲆⵠⲆⲆⲆⵠᐃ;
			!(ᐃΔΔΔ.unlock.ⵠⲆΔΔⲆ[ᐃΔΔΔ.ⵠⲆΔΔⲆ] > 0) && (ᐃΔΔΔ.ⵠⲆΔΔⲆ = !(ᐃΔΔΔ.unlock.ⵠⲆΔΔⲆ[ⵠᐃⵠᐃⵠΔᐃ] > ⵠᐃⲆ) ? 0 : ⵠᐃⵠᐃⵠΔᐃ);
			if (!(ᐃΔΔΔ.unlock.ⵠⵠΔΔⵠ[ᐃΔΔΔ.ⵠⵠΔΔⵠ] > Ⲇᐃⵠ)) ᐃΔΔΔ.ⵠⵠΔΔⵠ = !(ᐃΔΔΔ.unlock.ⵠⵠΔΔⵠ[ⵠⵠΔΔᐃΔⲆ] > Δⵠⵠⵠ) ? 0 : ⵠⵠΔΔᐃΔⲆ;
			if (!(ᐃΔΔΔ.unlock.ⲆⲆⲆᐃⵠ[ᐃΔΔΔ.ⲆⲆⲆᐃⵠ] > 0)) ᐃΔΔΔ.ⲆⲆⲆᐃⵠ = !(ᐃΔΔΔ.unlock.ⲆⲆⲆᐃⵠ[ⲆᐃΔᐃΔⵠⲆ] > 0) ? ⵠⵠⲆⵠ : ⲆᐃΔᐃΔⵠⲆ
		}

		function ⲆᐃΔᐃⵠⵠΔⲆⲆ(ⲆⵠⵠΔᐃⲆⲆ, ⵠΔⵠᐃᐃΔⲆ) {
			ⲆⵠⵠΔᐃⲆⲆ = ⲆⵠⵠΔᐃⲆⲆ.replace("Xday", "day");
			ⲆⵠⵠΔᐃⲆⲆ = ⲆⵠⵠΔᐃⲆⲆ.replace("Xnight", "night");
			for (var Ⲇᐃ = ⲆⲆⵠⲆ; ᐃᐃⲆⲆⵠⵠᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
				var ᐃΔⲆᐃΔⵠᐃ = ᐃᐃⲆⲆⵠⵠᐃ[Ⲇᐃ];
				if (ⲆⵠⵠΔᐃⲆⲆ === ᐃΔⲆᐃΔⵠᐃ[0]) {
					ᐃΔⲆᐃΔⵠᐃ[1] !== ⵠΔⵠᐃᐃΔⲆ && (ᐃΔΔΔ.ⲆⵠᐃⵠᐃΔᐃ = 1);
					return
				}
			}
			ᐃᐃⲆⲆⵠⵠᐃ.push([ⲆⵠⵠΔᐃⲆⲆ, ⵠΔⵠᐃᐃΔⲆ])
		}
		this.ⵠⲆΔᐃ = ⵠⲆΔᐃ;

		function ᐃΔⵠⵠᐃⵠᐃ(callback) {
			if (ᐃⲆⵠ.ΔⵠᐃⵠⲆⲆⵠ === ΔΔⵠΔΔ) return;
			if (ᐃⲆⵠ.ⲆᐃⲆΔΔΔᐃ === undefined) return;
			if (ᐃⲆⵠ.ΔΔⵠᐃΔᐃⲆ === ⲆⲆⵠᐃΔ) return;
			if (ⲆΔΔⵠᐃ === ᐃⲆⵠ.ⵠⲆⵠΔΔⲆΔ) return;
			callback()
		}

		function ⵠⵠⵠᐃⲆᐃⵠΔⲆ() {
			ⲆⵠΔⲆⲆΔⲆ();
			ᐃΔᐃⵠ.connect()
		}

		function ⲆᐃᐃᐃᐃΔᐃ(ⵠΔⵠᐃ, ΔⵠⲆᐃⵠΔᐃ, ᐃᐃⲆΔⲆΔᐃ) {
			const ⵠΔⲆᐃ = new XMLHttpRequest;
			ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[36]](ⵠ[253], ⵠΔⵠᐃ);
			ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[179]](ⵠ[166], ⵠ[569]);
			ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
				if (this[ⲆᐃⲆⵠΔΔⲆ[160]] == 4 && this.status == 200) {
					undefined !== ΔⵠⲆᐃⵠΔᐃ && ΔⵠⲆᐃⵠΔᐃ(ⵠΔⲆᐃ.responseText)
				} else if (this[ⲆᐃⲆⵠΔΔⲆ[160]] == 4) {
					ᐃᐃⲆΔⲆΔᐃ !== undefined && ᐃᐃⲆΔⲆΔᐃ()
				}
			};
			ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[71]]()
		}
		this.ᐃΔⲆⵠᐃᐃΔ = function(callback, ⲆⵠⵠᐃΔᐃⲆ) {
			let ⵠΔⵠᐃΔᐃⲆ = "0";
			let stop = ΔⲆⲆ;
			ᐃΔᐃᐃΔ && (ⵠΔⵠᐃΔᐃⲆ = ᐃΔᐃᐃΔ + ⲆⵠⲆᐃⲆⵠⲆ.ΔⵠⲆⲆⵠⲆⲆ());
			if (ᐃⲆⵠ.ΔⵠᐃⵠⲆⲆⵠ) ᐃΔⵠⵠᐃⵠᐃ(callback);
			else ⲆᐃᐃᐃᐃΔᐃ(`${ⵠᐃΔⵠⵠ}token?id=${ⵠΔⵠᐃΔᐃⲆ}`, (function(ΔⲆⵠⵠᐃ) {
				if (1 === stop) return;
				const ⲆⵠΔⵠⲆ = ΔⲆⵠⵠᐃ.split("_");
				const ΔΔⵠⵠⵠ = ⲆⵠΔⵠⲆ[0] + "_";
				const ⲆⲆⵠⵠ = Number(ⲆⵠΔⵠⲆ[ⵠᐃⵠΔ]);
				const ⲆΔᐃᐃⲆ = Math.abs(ⲆΔⵠᐃⲆΔⵠ(ⲆⲆⵠⵠ));
				ᐃⲆⵠ.ΔⵠᐃⵠⲆⲆⵠ = ΔΔⵠⵠⵠ + ⲆΔᐃᐃⲆ;
				ᐃΔⵠⵠᐃⵠᐃ(callback)
			}), (function() {
				if (stop === ΔΔΔᐃ) return;
				if (1 === ⲆⵠⵠᐃΔᐃⲆ) {
					stop = ᐃᐃΔ;
					callback();
					return
				}
				ΔⵠⲆ.waiting = ⵠΔⵠⵠⵠ
			}));
			ⲆᐃᐃᐃᐃΔᐃ(`${ⵠⵠⵠᐃⲆ}let`, (function(ΔⲆⵠⵠᐃ) {
				if (stop === 1) return;
				var ᐃⵠᐃΔΔⲆⲆᐃΔ;
				let ⵠⵠⲆᐃⲆⵠΔⲆΔ = 167 + 6 << 3;
				ΔⲆⵠⵠᐃ = ΔⲆⵠⵠᐃ.split(":");
				var ⲆⵠΔΔⵠⲆᐃⲆΔ, ⲆΔⵠⲆⵠᐃⵠⲆⵠ, ⲆⲆΔΔⵠΔᐃᐃⲆ, ⲆⵠᐃᐃᐃⵠⲆⲆⵠ;
				var ᐃⲆΔΔⵠᐃΔⵠΔ = 113;
				const ΔⵠⵠᐃⲆⵠⲆⵠⲆ = 222;
				var ᐃΔΔⵠΔⵠⵠᐃΔ = {};
				ᐃΔΔⵠΔⵠⵠᐃΔ.ⵠᐃᐃΔⵠΔⵠⲆⵠ = ΔΔΔΔ;
				var ΔⵠⵠⵠⲆΔⵠⵠⵠ = 173;
				var ⵠⲆΔⲆⲆᐃⵠΔΔ;
				let ⲆΔⲆⲆⲆⵠΔⵠⵠ = 241;
				const ΔΔⵠᐃᐃΔᐃⵠⵠ = 230;
				let ΔⵠᐃΔⵠᐃⵠᐃΔ = 421 << ᐃᐃᐃΔᐃ;
				if (ⲆΔⲆⲆⲆⵠΔⵠⵠ > ΔΔⵠᐃᐃΔᐃⵠⵠ) ΔⵠⵠⵠⲆΔⵠⵠⵠ = 229;
				const ⵠᐃΔⲆᐃⲆΔ = 118;
				const ᐃⵠᐃΔⵠΔΔⲆⵠ = 241;
				const ⲆⵠⲆⲆⵠⵠΔⲆⲆ = Math.floor(ⵠᐃΔⲆᐃⲆΔ[ⵠᐃΔⲆᐃⲆΔ.ⵠᐃΔⲆᐃⲆΔ]);
				var ⲆⲆⲆⲆⲆΔᐃᐃΔ;
				var ⲆᐃⵠᐃⲆΔᐃⲆᐃ = 60;
				const ⲆⲆΔᐃᐃΔᐃΔⵠ = 77;
				let ⲆⲆⲆᐃⵠᐃᐃⲆⵠ = 115;
				ⲆⲆⲆᐃⵠᐃᐃⲆⵠ == ⲆⲆΔᐃᐃΔᐃΔⵠ && (ⲆᐃⵠᐃⲆΔᐃⲆᐃ = 11);
				var ⵠⲆⵠⲆΔⵠᐃΔΔ = 68;
				let ⵠⲆᐃⲆⲆⲆⵠΔΔ = 233;
				ⵠⲆᐃⲆⲆⲆⵠΔΔ.ᐃⵠΔⲆᐃⲆΔΔⵠ = ⲆΔᐃⲆᐃ;
				let ΔᐃⵠᐃⲆⲆⲆⲆⵠ = 131;
				let ⵠᐃᐃΔᐃᐃΔⲆΔ = 143;
				if (ⵠᐃᐃΔᐃᐃΔⲆΔ === ΔᐃⵠᐃⲆⲆⲆⲆⵠ) ⵠⲆⵠⲆΔⵠᐃΔΔ = 243;
				var Ⲇᐃⵠⵠⵠᐃᐃᐃⵠ = 64;
				const ⲆᐃⵠⲆΔᐃⵠⲆᐃ = 186;
				var ΔⵠⵠⲆᐃⵠᐃΔⵠ = ⵠⵠΔⵠᐃᐃⵠ;
				if (ΔⵠⵠⲆᐃⵠᐃΔⵠ === ⲆᐃⵠⲆΔᐃⵠⲆᐃ) Ⲇᐃⵠⵠⵠᐃᐃᐃⵠ = 181;
				const ⵠⲆⵠᐃⵠⵠΔᐃⲆ = 252 + 152;
				if (ᐃⵠᐃΔⵠΔΔⲆⵠ == ΔⵠⵠᐃⲆⵠⲆⵠⲆ) ᐃⲆΔΔⵠᐃΔⵠΔ = 235; {
					const ⲆⵠΔⵠⲆ = ΔⲆⵠⵠᐃ[ᐃᐃⲆ].split("_");
					const ΔΔⵠⵠⵠ = ⲆⵠΔⵠⲆ[0] + "_";
					var ⵠⲆⵠΔⲆⲆΔ = 60;
					9 == ⵠⲆⵠΔⲆⲆΔ && (ⵠⲆⵠΔⲆⲆΔ = 242);
					var ⲆⲆⲆᐃⲆⵠΔⲆⵠ = 15;
					var ᐃΔⵠⲆΔΔᐃ = 195;
					ΔᐃΔᐃᐃ <= ᐃΔⵠⲆΔΔᐃ && (ᐃΔⵠⲆΔΔᐃ = 44);
					const ⲆⲆᐃᐃᐃᐃⵠᐃⲆ = 54;
					const ΔⲆⲆⵠΔⲆⲆᐃᐃ = ᐃⲆⲆⵠᐃ;
					if (ΔⲆⲆⵠΔⲆⲆᐃᐃ == ⲆⲆᐃᐃᐃᐃⵠᐃⲆ) ⲆⲆⲆᐃⲆⵠΔⲆⵠ = 192;
					const ⲆⲆⵠⵠ = Number(ⲆⵠΔⵠⲆ[1]);
					var ᐃᐃΔⵠⵠᐃⵠΔΔ = 196;
					let ⲆⲆᐃᐃΔⵠⵠⲆⵠ = 179;
					var ⲆⲆΔᐃⵠΔᐃⵠᐃ = 209;
					ⲆⲆᐃᐃΔⵠⵠⲆⵠ === ⲆⲆΔᐃⵠΔᐃⵠᐃ && (ᐃᐃΔⵠⵠᐃⵠΔΔ = 229);
					let ΔΔΔⵠⲆⲆᐃΔⲆ = 119;
					ΔΔΔⵠⲆⲆᐃΔⲆ.ΔᐃΔΔⵠⲆᐃΔΔ = ΔⲆⵠᐃ;
					let ⲆΔⲆᐃⵠⵠᐃΔᐃ = 194 - 123;
					const ⲆΔᐃᐃⲆ = Math.abs(ΔⲆⵠⲆΔⵠⵠⵠⲆ(ⲆⲆⵠⵠ));
					ᐃⲆⵠ.ⲆᐃⲆΔΔΔᐃ = ΔΔⵠⵠⵠ + ⲆΔᐃᐃⲆ;
					ᐃⲆⵠ.ΔᐃⲆᐃΔΔⵠ = ⲆΔᐃᐃⲆ
				}
				var ΔⵠᐃⵠⲆⵠΔⵠⵠ = 138; {
					const ⲆⵠΔⵠⲆ = ΔⲆⵠⵠᐃ[ⵠΔᐃ].split("_");
					var ⵠΔΔΔᐃΔᐃⲆΔ = 63;
					var ᐃΔⵠᐃⵠⲆⵠΔⲆ = ⵠᐃⲆⵠⲆ;
					var ⲆᐃΔΔΔᐃᐃⲆΔ = 162;
					if (ⲆᐃΔΔΔᐃᐃⲆΔ <= ᐃΔⵠᐃⵠⲆⵠΔⲆ) ⵠΔΔΔᐃΔᐃⲆΔ = 70;
					const ΔΔⵠⵠⵠ = ⲆⵠΔⵠⲆ[0] + "_";
					var ᐃᐃⲆᐃᐃⲆΔΔΔ = 88;
					let ⵠⲆᐃᐃᐃⲆᐃⵠᐃ = 103;
					const ᐃⵠΔⵠΔᐃᐃΔᐃ = 35;
					if (ᐃⵠΔⵠΔᐃᐃΔᐃ == ⵠⲆᐃᐃᐃⲆᐃⵠᐃ) ᐃᐃⲆᐃᐃⲆΔΔΔ = 120;
					const ⲆⲆⵠⵠ = Number(ⲆⵠΔⵠⲆ[ᐃⲆΔ]);
					let ᐃΔⵠⵠⵠᐃⵠⵠⲆ = 24;
					var ⲆΔⲆΔΔᐃᐃⲆᐃ = ᐃΔⵠⵠⵠᐃⵠⵠⲆ;
					var ᐃΔᐃᐃᐃΔΔΔⲆ, ⲆⲆⲆΔΔⵠΔⲆⵠ, ΔᐃΔⵠΔᐃⲆⲆⲆ, ΔᐃⵠᐃⵠⵠⵠⲆᐃ;
					var ΔᐃᐃΔⵠⵠⲆⵠⲆ = 19;
					const ΔⲆⵠⵠᐃⲆⵠⵠᐃ = 106;
					var ΔⲆⵠⲆⲆⲆᐃΔⵠ = 108;
					const ⵠⲆⵠⲆΔⲆΔᐃΔ = 75;
					const ⵠΔᐃⵠᐃⵠΔⲆⵠ = 340;
					ΔⲆⵠⲆⲆⲆᐃΔⵠ > ⵠⲆⵠⲆΔⲆΔᐃΔ && (ΔᐃᐃΔⵠⵠⲆⵠⲆ = 12);
					var ᐃΔᐃⵠⲆⲆⵠΔⵠ = 232;
					const ΔᐃᐃΔⲆᐃΔᐃⲆ = 28;
					let ⵠⲆᐃᐃᐃⵠⲆᐃⲆ = 57;
					if (ΔᐃᐃΔⲆᐃΔᐃⲆ === ⵠⲆᐃᐃᐃⵠⲆᐃⲆ) ᐃΔᐃⵠⲆⲆⵠΔⵠ = 8;
					var ⲆⲆⵠΔⵠⵠΔ = 217;
					const ⲆᐃⵠᐃΔⲆᐃ = 165;
					const ΔⵠᐃⵠⵠᐃΔⲆᐃ = Math.floor(ⲆᐃⵠᐃΔⲆᐃ[ⲆᐃⵠᐃΔⲆᐃ.ⲆᐃⵠᐃΔⲆᐃ]);
					var ⲆⲆΔⵠⲆⵠᐃⲆⲆ = 59;
					var ΔⵠΔᐃⵠⵠΔⵠⵠ = 123;
					var ⵠⲆⵠᐃᐃΔⵠⵠⵠ = 165;
					ⵠⲆⵠᐃᐃΔⵠⵠⵠ == ΔⵠΔᐃⵠⵠΔⵠⵠ && (ⲆⲆΔⵠⲆⵠᐃⲆⲆ = 131);
					var ⲆΔⵠᐃⲆΔᐃΔⵠ = {};
					ⲆΔⵠᐃⲆΔᐃΔⵠ.ⲆⵠΔᐃⲆⲆⲆⵠᐃ = 6;
					if (ⲆⲆⵠΔⵠⵠΔ === 2) ⲆⲆⵠΔⵠⵠΔ = 176;
					const ⲆΔᐃᐃⲆ = Math.abs(ⲆⵠⵠΔⵠⵠⲆ(ⲆⲆⵠⵠ));
					let ⲆΔΔᐃⲆᐃᐃΔᐃ = 214;
					let ΔΔⲆΔΔⲆⵠⵠᐃ = ⲆΔΔᐃⲆᐃᐃΔᐃ;
					var ⲆᐃᐃⲆⲆΔΔ = 116;
					var ᐃΔⵠⲆᐃᐃΔᐃΔ = 48;
					const ᐃΔⲆⲆᐃᐃᐃⵠⵠ = 151;
					let ⲆⲆΔᐃᐃⲆⵠⲆᐃ = 225;
					if (ⲆⲆΔᐃᐃⲆⵠⲆᐃ < ᐃΔⲆⲆᐃᐃᐃⵠⵠ) ᐃΔⵠⲆᐃᐃΔᐃΔ = 80;
					ⲆᐃᐃⲆⲆΔΔ === ΔⲆᐃᐃ && (ⲆᐃᐃⲆⲆΔΔ = 164);
					var ⲆΔΔᐃⵠΔⲆⵠΔ = 133;
					var ⲆⲆΔⵠᐃⵠᐃ = 94;
					if (0 == ⲆⲆΔⵠᐃⵠᐃ) ⲆⲆΔⵠᐃⵠᐃ = 40;
					const ΔᐃΔᐃΔⵠΔᐃᐃ = 0;
					var ΔᐃⵠⲆⲆᐃⲆ = 112;
					if (10 <= ΔᐃⵠⲆⲆᐃⲆ) ΔᐃⵠⲆⲆᐃⲆ = 73;
					let ⵠΔⵠᐃⵠⲆⲆᐃᐃ = 33;
					var ⲆΔᐃᐃᐃΔⲆᐃⲆ;
					ΔᐃΔᐃΔⵠΔᐃᐃ >= ⵠΔⵠᐃⵠⲆⲆᐃᐃ && (ⲆΔΔᐃⵠΔⲆⵠΔ = 144);
					const ⲆⵠⵠⵠΔⵠⵠᐃᐃ = {};
					ⲆⵠⵠⵠΔⵠⵠᐃᐃ.ᐃⵠΔᐃⲆᐃⲆᐃΔ = Ⲇᐃⵠⵠᐃ;
					var ⲆⵠΔⵠⵠⲆⵠ = 156;
					var ⲆⲆᐃᐃⲆΔⵠⵠᐃ = 244;
					var ᐃᐃⵠⵠⵠⲆⵠΔΔ = 240;
					let ⲆⵠⵠΔⲆⵠⲆⵠᐃ = ΔᐃⵠΔ;
					ⲆⵠⵠΔⲆⵠⲆⵠᐃ <= ᐃᐃⵠⵠⵠⲆⵠΔΔ && (ⲆⲆᐃᐃⲆΔⵠⵠᐃ = 226);
					var ⵠΔᐃⵠⲆᐃΔ = 222;
					if (3 == ⵠΔᐃⵠⲆᐃΔ) ⵠΔᐃⵠⲆᐃΔ = 138;
					const ᐃⲆΔⵠΔⵠᐃ = 227;
					const ⲆⵠⵠⵠΔΔⵠΔⵠ = Math.floor(ᐃⲆΔⵠΔⵠᐃ[ᐃⲆΔⵠΔⵠᐃ.ᐃⲆΔⵠΔⵠᐃ]);
					ⵠΔᐃᐃ === ⲆⵠΔⵠⵠⲆⵠ && (ⲆⵠΔⵠⵠⲆⵠ = 4);
					var ᐃⵠⵠⵠⵠⲆⲆ = 170;
					ᐃⵠⵠⵠⵠⲆⲆ === 7 && (ᐃⵠⵠⵠⵠⲆⲆ = 23);
					const ⵠΔⲆⵠⲆⵠⲆⲆᐃ = {};
					ⵠΔⲆⵠⲆⵠⲆⲆᐃ.ΔΔⵠⲆⲆⲆΔᐃΔ = 6;
					var ⵠⵠⵠΔᐃⲆⲆ = 78;
					if (ⵠⵠⵠΔᐃⲆⲆ === 7) ⵠⵠⵠΔᐃⲆⲆ = 42;
					ᐃⲆⵠ.ΔΔⵠᐃΔᐃⲆ = ΔΔⵠⵠⵠ + ⲆΔᐃᐃⲆ;
					ᐃⲆⵠ.ΔᐃᐃᐃⲆᐃⲆΔⲆ = ⲆΔᐃᐃⲆ
				} {
					var ⵠᐃΔΔᐃᐃΔΔⵠ = 35;
					var ⵠⲆᐃΔⲆᐃⲆⵠⲆ = 197;
					var ⲆⵠΔⲆᐃⲆⵠᐃΔ = 229;
					if (ⵠⲆᐃΔⲆᐃⲆⵠⲆ > ⲆⵠΔⲆᐃⲆⵠᐃΔ) ⵠᐃΔΔᐃᐃΔΔⵠ = 4;
					const ⲆⵠΔⵠⲆ = ΔⲆⵠⵠᐃ[ΔⵠⲆᐃ].split("_");
					const ΔΔⵠⵠⵠ = ⲆⵠΔⵠⲆ[ⵠᐃⲆⲆ] + "_";
					var ⲆⵠⲆΔΔᐃⵠᐃⲆ, ΔⲆⵠᐃⵠⲆᐃΔⲆ;
					const ⲆⲆⵠⵠ = Number(ⲆⵠΔⵠⲆ[1]);
					const ⲆΔᐃᐃⲆ = Math.abs(ⲆⵠⵠΔⵠⵠⲆ(ⲆⲆⵠⵠ));
					let ⲆΔΔᐃⵠⵠᐃᐃΔ = 246;
					var ΔⲆᐃᐃⲆᐃⲆΔⵠ = 17220;
					ⲆΔΔᐃⵠⵠᐃᐃΔ.ΔⲆⵠΔⲆᐃΔⲆⲆ = ᐃᐃᐃΔΔ;
					ᐃⲆⵠ.ⵠⲆⵠΔΔⲆΔ = ΔΔⵠⵠⵠ + ⲆΔᐃᐃⲆ;
					let ᐃⲆⲆⲆΔᐃⵠΔⵠ = {};
					var ΔΔᐃⵠⵠⲆΔΔⲆ = 143;
					const ⲆᐃⲆⲆΔᐃⵠΔⵠ = 150;
					var ᐃΔᐃⵠⲆᐃⵠᐃⵠ = 254;
					ᐃΔᐃⵠⲆᐃⵠᐃⵠ <= ⲆᐃⲆⲆΔᐃⵠΔⵠ && (ΔΔᐃⵠⵠⲆΔΔⲆ = 114);
					var ᐃⲆΔᐃⲆᐃΔ = 97;
					var ⵠⲆⵠΔᐃΔΔᐃⲆ = 123;
					var ⲆᐃΔⵠⲆΔΔⵠⲆ = 143;
					let ᐃⵠⵠΔⵠΔⲆΔΔ = 98;
					var ⵠⲆΔᐃⵠΔΔᐃΔ = 79;
					let ΔⲆΔⵠⲆᐃΔΔⵠ = ΔⲆⵠΔⲆᐃΔ;
					let ᐃⵠⲆᐃⵠⲆⵠⵠᐃ = 234;
					const ⲆᐃΔΔⵠⵠᐃᐃΔ = 252;
					if (ᐃⵠⲆᐃⵠⲆⵠⵠᐃ < ΔⲆΔⵠⲆᐃΔΔⵠ) ⵠⲆΔᐃⵠΔΔᐃΔ = 138;
					let ⵠᐃⵠⲆⲆᐃᐃᐃᐃ = 161;
					if (ᐃⵠⵠΔⵠΔⲆΔΔ === ⵠᐃⵠⲆⲆᐃᐃᐃᐃ) ⲆᐃΔⵠⲆΔΔⵠⲆ = 43;
					var ᐃⵠⲆⵠⵠΔⲆΔⵠ = 169;
					ᐃⵠⲆⵠⵠΔⲆΔⵠ.ᐃΔΔᐃᐃᐃⲆⵠΔ = 13;
					const ᐃΔᐃⲆΔᐃΔⲆᐃ = 96;
					var ΔⲆⵠⲆᐃᐃⵠ = 13;
					ᐃΔΔⲆⵠ === ΔⲆⵠⲆᐃᐃⵠ && (ΔⲆⵠⲆᐃᐃⵠ = 241);
					var ⵠᐃΔΔⵠⲆΔ = 247;
					if (ⵠᐃΔΔⵠⲆΔ >= ⵠⲆᐃΔⵠⵠⲆ) ⵠᐃΔΔⵠⲆΔ = 176;
					const ⵠⵠⵠⵠⲆⲆⲆⲆⲆ = 215;
					ᐃΔᐃⲆΔᐃΔⲆᐃ >= ⵠⵠⵠⵠⲆⲆⲆⲆⲆ && (ⵠⲆⵠΔᐃΔΔᐃⲆ = 2);
					var ⲆᐃⵠᐃⵠᐃΔⲆⲆ = 126;
					let ᐃⵠᐃᐃᐃⵠΔⵠΔ = Δⵠᐃᐃⵠ;
					const ⲆⲆⲆΔⵠᐃΔᐃᐃ = 33;
					if (ᐃⵠᐃᐃᐃⵠΔⵠΔ <= ⲆⲆⲆΔⵠᐃΔᐃᐃ) ⲆᐃⵠᐃⵠᐃΔⲆⲆ = 133;
					var ΔⵠᐃΔᐃΔΔ = 46;
					13 == ΔⵠᐃΔᐃΔΔ && (ΔⵠᐃΔᐃΔΔ = 196);
					var ᐃⲆᐃⲆᐃᐃᐃᐃⵠ = 126 * 23;
					var ᐃⵠᐃⵠⲆⲆⲆⵠᐃ, ⲆⵠⵠᐃⵠⲆⲆⵠⵠ, ΔⵠⲆΔΔᐃΔΔⲆ, ⵠⵠⵠⵠⵠⵠᐃΔⵠ;
					ᐃⲆΔᐃⲆᐃΔ > 5 && (ᐃⲆΔᐃⲆᐃΔ = 176);
					ᐃⲆⲆⲆΔᐃⵠΔⵠ.ⵠᐃⵠᐃᐃⵠᐃⲆΔ = 12;
					ᐃⲆⵠ.ⵠⵠᐃⵠⲆⵠⵠΔΔ = ⲆΔᐃᐃⲆ;
					const ᐃⲆᐃⲆⲆΔᐃ = 33;
					const ⲆᐃᐃⵠⵠⵠⵠⲆⵠ = Math.floor(ᐃⲆᐃⲆⲆΔᐃ[ᐃⲆᐃⲆⲆΔᐃ.ᐃⲆᐃⲆⲆΔᐃ]);
					var ᐃᐃΔⵠᐃⲆΔ = 232;
					ᐃᐃΔⵠᐃⲆΔ == ⵠΔⵠⵠᐃ && (ᐃᐃΔⵠᐃⲆΔ = 186);
					var ᐃᐃᐃⵠΔⲆⲆⲆⲆ = 158;
					const ᐃⲆᐃⲆᐃⲆΔⲆⵠ = 89;
					const ΔᐃⲆᐃΔᐃⵠᐃΔ = 212;
					if (ΔᐃⲆᐃΔᐃⵠᐃΔ >= ᐃⲆᐃⲆᐃⲆΔⲆⵠ) ᐃᐃᐃⵠΔⲆⲆⲆⲆ = 96
				}
				const ⵠᐃⵠⲆⲆⲆΔ = 73;
				const ⵠᐃΔⵠⲆᐃⵠⲆΔ = Math.floor(ⵠᐃⵠⲆⲆⲆΔ[ⵠᐃⵠⲆⲆⲆΔ.ⵠᐃⵠⲆⲆⲆΔ]);
				const ΔΔⲆⲆᐃⲆᐃⵠᐃ = 85 + 98 << 3;
				ᐃΔⵠⵠᐃⵠᐃ(callback);
				var ⲆᐃⵠΔⲆⵠᐃΔΔ = 158 * 105;
				var ⲆⵠⵠⵠΔⲆⲆᐃΔ, ⵠᐃᐃⵠⲆⲆⵠᐃᐃ, ⲆᐃⲆⵠᐃⵠᐃⵠᐃ, ⵠᐃΔⵠⵠⵠⲆᐃᐃ;
				var ᐃᐃᐃᐃⲆⲆⵠΔᐃ = 86;
				var ᐃⵠⲆᐃᐃΔⵠᐃⲆ = 245;
				var ΔΔΔⲆΔⵠⲆΔΔ = 59;
				let ᐃΔᐃⵠⵠᐃᐃⲆΔ = ⵠⵠᐃᐃᐃⲆⲆ;
				var ⵠⵠΔᐃⵠᐃᐃᐃⲆ, ⵠᐃⲆⲆⵠⵠΔⲆⲆ, ΔⵠΔⵠⵠⲆᐃⵠⵠ;
				var ⲆⲆᐃⲆᐃⵠⵠᐃΔ = 163;
				if (ⲆⲆᐃⲆᐃⵠⵠᐃΔ == ᐃΔᐃⵠⵠᐃᐃⲆΔ) ΔΔΔⲆΔⵠⲆΔΔ = 51;
				const ᐃΔⵠΔΔΔΔⲆⲆ = 246;
				ᐃΔⵠΔΔΔΔⲆⲆ === ᐃⵠⲆᐃᐃΔⵠᐃⲆ && (ᐃᐃᐃᐃⲆⲆⵠΔᐃ = 62);
				const ᐃⲆⵠΔᐃⵠⵠⵠᐃ = 2916;
				var ⵠᐃⲆⵠⲆᐃᐃᐃΔ;
				const ΔⲆΔᐃⵠᐃⲆᐃᐃ = 214 + 199;
				let ᐃⵠⲆΔΔΔⲆⵠⲆ = 85;
				ᐃⵠⲆΔΔΔⲆⵠⲆ.ⲆΔΔⲆΔΔⵠΔΔ = ⵠⲆⲆⵠ;
				var ⵠΔⲆⵠᐃΔⵠΔΔ, ⵠᐃⲆᐃΔᐃᐃᐃᐃ;
				let ⲆᐃΔⵠⵠⵠΔⲆⲆ = 35 + 36
			}), (function() {
				if (1 === stop) return;
				if (ΔⲆᐃᐃ === ⲆⵠⵠᐃΔᐃⲆ) {
					stop = ⲆᐃΔ;
					callback();
					return
				}
				ΔⵠⲆ.waiting = false
			}))
		};
		this.ⲆᐃⲆΔⲆΔⵠ = function() {
			ΔΔᐃⵠᐃ === ΔⵠⲆ.waiting && (ᐃⲆⵠ.reconnect.enabled = false, ΔⵠⲆ.waiting = true, ΔⵠⲆ.ᐃΔⲆⵠᐃᐃΔ(ⵠⵠⵠᐃⲆᐃⵠΔⲆ))
		};
		var ΔⲆⲆΔ = 1;
		var ΔⵠⲆⵠᐃ = ΔᐃⵠΔ;
		var ᐃΔᐃᐃ = 4;
		var ⲆΔⵠΔᐃⲆΔ = 8;
		var ⲆⵠⵠΔ = ΔᐃᐃΔΔ;
		var ΔΔΔΔΔⲆⵠ = 32;
		var ᐃⵠⵠⲆⲆᐃᐃΔᐃ = ⵠⲆⵠⵠ;
		var ⲆⵠⵠⲆ = ΔⵠΔ;
		var ⵠᐃⵠⵠ = 0;
		var ΔᐃΔⲆⲆΔᐃ = 1;
		var ⵠⲆᐃᐃ = 0;
		var ᐃᐃᐃΔ = 1;
		1300 > ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth ? this.ⲆⲆΔⵠⵠ = {
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[508]),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[508]).style,
			input: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[227]),
			active: ᐃᐃᐃΔ,
			position: ᐃΔᐃᐃ | ΔⲆⲆΔ,
			view: ⲆⵠⲆⲆᐃ,
			translate: {
				x: 0,
				"ⲆⵠΔⵠΔ": 184,
				"ⲆΔΔⵠⲆ": 200,
				y: ΔⲆⲆ
			}
		} : this.ⲆⲆΔⵠⵠ = {
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[508]),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[508]).style,
			input: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[227]),
			active: ᐃᐃᐃΔ,
			position: ᐃΔᐃᐃ | ⲆⵠⵠΔ,
			view: ⲆⵠⲆⲆᐃ,
			translate: {
				"ⲆΔΔⵠⲆ": -180,
				x: 0,
				"ⲆⵠΔⵠΔ": 184,
				y: ⵠⲆⵠⵠ
			}
		};
		this.ⲆⲆΔⵠⵠ.id[ⲆᐃⲆⵠΔΔⲆ[42]]("keyup", (function(event) {
			event.preventDefault();
			event.keyCode == 13 && !ΔⵠⲆ.waiting && !ΔⵠⲆ.ⲆᐃⵠᐃⵠΔᐃⵠⵠ && ΔⵠⲆ.ⲆᐃⲆΔⲆΔⵠ()
		}));
		this.ⲆⲆΔⵠⵠ.input.value = ᐃΔΔⵠ.get("starve_nickname") ? ᐃΔΔⵠ.get("starve_nickname") : "";
		this.ⵠⲆᐃΔⵠΔⲆΔⲆ = {
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]]("account_nickname_block"),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("account_nickname_block").style,
			input: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[319]),
			active: ⵠⲆᐃᐃ,
			position: ᐃΔᐃᐃ | ⲆⵠⵠΔ,
			view: ᐃⵠᐃⵠⵠ,
			translate: {
				y: 0,
				"ⲆΔΔⵠⲆ": -122,
				"ⲆⵠΔⵠΔ": 110,
				x: ᐃⵠⵠⲆ
			}
		};
		1300 > ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth ? this.Ⲇᐃᐃⵠⵠ = {
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[24]),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[24]).style,
			active: ᐃᐃᐃΔ,
			position: ᐃΔᐃᐃ | ΔⲆⲆΔ,
			view: ⲆⵠⲆⲆᐃ,
			translate: {
				y: 0,
				x: 0,
				"ⲆΔΔⵠⲆ": 208,
				"ⲆⵠΔⵠΔ": 225
			}
		} : this.Ⲇᐃᐃⵠⵠ = {
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[24]),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[24]).style,
			active: ᐃᐃᐃΔ,
			position: ᐃΔᐃᐃ | ⲆⵠⵠΔ,
			view: ⲆⵠⲆⲆᐃ,
			translate: {
				y: Ⲇᐃⵠ,
				x: 0,
				"ⲆⵠΔⵠΔ": 225,
				"ⲆΔΔⵠⲆ": -180
			}
		};
		this.ⵠΔᐃⲆ = {
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]]("leaderboard"),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("leaderboard").style,
			active: ⵠⲆᐃᐃ,
			position: ᐃΔᐃᐃ | ⲆⵠⵠΔ,
			view: ⲆΔᐃᐃᐃ,
			translate: {
				"ⲆΔΔⵠⲆ": -294.5,
				y: ΔΔᐃᐃ,
				"ⲆⵠΔⵠΔ": 190,
				x: ᐃᐃⲆ
			}
		};
		this.ⲆΔⲆⲆⵠⲆⲆΔⲆ = {
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]]("stats_box"),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("stats_box").style,
			active: ⵠⲆᐃᐃ,
			position: ᐃΔᐃᐃ | ⲆⵠⵠΔ,
			view: ᐃⵠᐃⵠⵠ,
			translate: {
				"ⲆΔΔⵠⲆ": 125,
				x: ⵠᐃⲆ,
				"ⲆⵠΔⵠΔ": 187,
				y: ⵠⵠⵠ
			}
		};
		this.ΔᐃⵠᐃΔΔⲆⵠⲆ = {
			id: document[ⲆᐃⲆⵠΔΔⲆ[185]]("serverAddressBlock"),
			style: document[ⲆᐃⲆⵠΔΔⲆ[185]]("serverAddressBlock").style,
			input: document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[473]),
			active: ⵠⲆᐃᐃ,
			position: ᐃΔᐃᐃ | ⲆⵠⵠΔ,
			view: ⵠⵠⵠΔΔ,
			translate: {
				x: ⵠΔᐃᐃ,
				"ⲆΔΔⵠⲆ": -260,
				"ⲆⵠΔⵠΔ": 350,
				y: Δⵠⵠⵠ
			}
		};
		ᐃⵠ = ⵠΔᐃⵠ;
		this.ⲆΔΔΔΔ = [];
		this.ⲆΔΔΔΔ[ᐃⵠ++] = this.ⲆⲆΔⵠⵠ;
		this.ⲆΔΔΔΔ[ᐃⵠ++] = this.Ⲇᐃᐃⵠⵠ;
		this.ⲆΔΔΔΔ[ᐃⵠ++] = this.ⵠΔᐃⲆ;
		this.ⲆΔΔΔΔ[ᐃⵠ++] = this.ⵠⲆᐃΔⵠΔⲆΔⲆ;
		this.ⲆΔΔΔΔ[ᐃⵠ++] = this.ⲆΔⲆⲆⵠⲆⲆΔⲆ;
		this.ⲆΔΔΔΔ[ᐃⵠ++] = this.ΔᐃⵠᐃΔΔⲆⵠⲆ;
		ᐃⵠ = 0;
		this.Δⵠᐃᐃ = [];
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠⲆⵠⵠΔΔΔ, ᐃᐃᐃΔ, 0, ᐃᐃᐃ, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠΔⲆⵠᐃⵠᐃ, ⵠⲆᐃᐃ, ⵠⵠⵠΔ, ᐃᐃᐃ, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆΔᐃⵠΔⵠᐃ, ⵠⲆᐃᐃ, ⵠⵠⵠΔ, ⵠⵠⵠ, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.Ⲇⵠᐃⵠᐃⵠᐃ, ⵠⲆᐃᐃ, 0, ⵠⲆᐃ, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆΔⲆⵠⲆⲆΔ, ⵠⲆᐃᐃ, ᐃᐃⲆ, 0, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠᐃⲆΔⲆᐃᐃ, ⵠⲆᐃᐃ, ᐃᐃⲆ, 0, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆⵠΔⵠΔⵠⲆ, ⵠⲆᐃᐃ, ΔΔᐃᐃ, 0, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆΔΔΔᐃⵠⲆ, ⵠⲆᐃᐃ, 0, 0, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆⵠⲆᐃΔⵠⵠ, ⵠⲆᐃᐃ, ᐃᐃⲆ, 0, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠΔⵠⵠᐃᐃⲆ, ⵠⲆᐃᐃ, 0, ᐃⵠⵠⲆ, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆΔᐃΔⲆΔᐃ, ⵠⲆᐃᐃ, 0, 0, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ᐃΔⲆᐃⵠᐃⵠ, ⵠⲆᐃᐃ, 0, ⵠΔᐃⵠ, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆΔⵠⵠΔΔᐃ, ⵠⲆᐃᐃ, 0, 0, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆΔᐃΔⲆⲆⵠ, ⵠⲆᐃᐃ, 0, ⵠᐃⲆⲆ, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠⵠⵠⲆΔᐃⵠ, ⵠⲆᐃᐃ, 0, 0, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ᐃⵠᐃᐃᐃΔⵠ, ⵠⲆᐃᐃ, ᐃᐃᐃ, 0, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆⲆⵠᐃᐃΔⵠ, ⵠⲆᐃᐃ, 0, 0, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ᐃⵠᐃᐃᐃⵠⲆ, ⵠⲆᐃᐃ, 0, Δⵠⵠⵠ, ΔⲆⲆΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆᐃΔᐃΔⲆΔ, ⵠⲆᐃᐃ, 0, ⵠⲆᐃ, ΔⲆⲆΔ);
		ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth < 1300 ? this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆⵠⵠΔⲆⵠΔ, ᐃᐃᐃΔ, 200, ᐃⵠΔᐃⵠ, ᐃΔᐃᐃ | ΔⲆⲆΔ) : this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆⵠⵠΔⲆⵠΔ, ᐃᐃᐃΔ, -753 / ᐃⲆⲆΔΔ, ᐃΔⵠᐃⵠ, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⲆⵠⲆⲆᐃ;
		this.Δⵠᐃᐃ[ᐃⵠ++] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆⲆΔⲆᐃΔⲆ, ᐃᐃᐃΔ, 403, -10, ΔⵠⲆⵠᐃ);
		ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth > 1300 && (this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ᐃⵠᐃⵠⲆΔⲆ, ᐃᐃᐃΔ, -885 / ᐃᐃⵠΔ, -319 / 2, ⲆΔⵠΔᐃⲆΔ | ⲆⵠⵠΔ), this.Δⵠᐃᐃ[ᐃⵠ++].view = ⲆⵠⲆⲆᐃ);
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ᐃⲆⲆᐃᐃᐃⵠ, ⵠⲆᐃᐃ, -1293 / ΔⵠⵠⲆ, ⵠⵠⲆᐃⲆ, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ᐃⵠᐃⵠⵠ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆᐃᐃⲆⵠΔᐃ, ⵠⲆᐃᐃ, -1425 / 4, 100, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ᐃΔΔⵠΔ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠⵠᐃΔΔⲆⵠ, ⵠⲆᐃᐃ, -905 / 4, 50, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⵠᐃᐃΔⲆ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ΔΔΔⵠΔᐃⲆ, ⵠⲆᐃᐃ, -1608 / ⵠⲆΔⵠ, 130, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ΔΔᐃⵠΔ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠⲆⵠᐃᐃⵠΔ, ⵠⲆᐃᐃ, -1117 / 4, 130, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⵠⵠᐃΔⵠ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠᐃᐃⲆΔⲆⵠ, ⵠⲆᐃᐃ, -1222 / ᐃⲆⵠᐃⵠ, 130, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ΔΔΔᐃⵠ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ΔᐃⲆΔᐃᐃⵠ, ⵠⲆᐃᐃ, -1222 / 4, 100, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⵠⵠⵠΔΔ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠΔΔⵠᐃΔⲆ, ⵠⲆᐃᐃ, -ⵠᐃ.ⵠΔΔⵠᐃΔⲆ.width / ⵠⲆΔⵠ - 350, -ΔᐃⵠΔᐃⵠᐃ, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⵠΔᐃΔⲆᐃⲆ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆⲆⵠⵠᐃᐃⵠ, ⵠⲆᐃᐃ, -1497 / 4, 110, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⵠⵠⲆᐃΔΔΔ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ᐃΔⵠⵠΔᐃᐃ, ⵠⲆᐃᐃ, -1226 / 4, 100, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ΔᐃᐃⵠⵠⲆⲆ, ⵠⲆᐃᐃ, -1381 / ⵠⲆΔⵠ, 80, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⲆⲆᐃᐃⵠ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ΔⲆⲆΔᐃᐃΔ, ⵠⲆᐃᐃ, -1542 / 4, 150, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ΔⵠⵠⲆᐃⲆⵠ;
		var ⲆⵠⲆΔΔ = 360 / ᐃⲆⲆΔᐃ;
		var ⵠⵠᐃⵠⲆ = this.ⵠᐃᐃΔⵠⵠΔ([
			[ⵠ[315], ⲆⵠⲆΔΔ * ⵠⵠΔⵠ],
			[ⵠ[355], 10 * ⲆⵠⲆΔΔ],
			[ⵠ[159], 30 * ⲆⵠⲆΔΔ],
			["#d88e23", ⲆⵠⲆΔΔ * 57]
		]);
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠⵠᐃⵠⲆ, ⵠⲆᐃᐃ, -ⵠⵠᐃⵠⲆ.width / ⵠᐃΔΔ, 178, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ΔⵠⵠⲆᐃⲆⵠ;
		this.ΔᐃⵠᐃⵠⲆⲆᐃΔ = function(ΔᐃⲆⲆⵠⲆⵠᐃΔ, ⲆΔⲆᐃ, ᐃΔΔΔΔⵠᐃ) {
			ΔⵠⲆ.ΔΔⵠⵠᐃ = ΔᐃΔⲆ;
			ΔⵠⲆ.ⵠⲆⲆⲆΔᐃⵠ = 0;
			ΔⵠⲆ.ⵠⵠⵠᐃΔⲆⲆ = 0;
			ΔⵠⲆ.ⲆⲆⵠⲆⲆᐃΔ = ΔᐃⲆⲆⵠⲆⵠᐃΔ;
			ΔⵠⲆ.ΔᐃΔΔᐃᐃᐃ = ⲆΔⲆᐃ;
			var Ⲇᐃᐃ;
			var Ⲇᐃ = ⵠΔᐃᐃ;
			if (ⲆΔⲆᐃ === ΔΔᐃ) {
				for (Ⲇᐃ = ⲆⵠⲆⲆ; Δᐃᐃᐃ.ⵠᐃΔⲆΔ.length > Ⲇᐃ; Ⲇᐃ++) {
					if (ᐃΔΔΔΔⵠᐃ === Δᐃᐃᐃ.ⵠᐃΔⲆΔ[Ⲇᐃ].id) break
				}
				Ⲇᐃᐃ = Δᐃᐃᐃ.ⵠᐃΔⲆΔ[Ⲇᐃ];
				ΔⵠⲆ.unlock.ⲆΔⵠⵠ[Ⲇᐃ] = ⲆᐃΔ
			} else if (1 === ⲆΔⲆᐃ) {
				for (Ⲇᐃ = Ⲇᐃⵠ; Δᐃᐃᐃ.ΔᐃⲆΔᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
					if (Δᐃᐃᐃ.ΔᐃⲆΔᐃ[Ⲇᐃ].id === ᐃΔΔΔΔⵠᐃ) break
				}
				Ⲇᐃᐃ = Δᐃᐃᐃ.ΔᐃⲆΔᐃ[Ⲇᐃ];
				ΔⵠⲆ.unlock.ⵠⵠΔΔⵠ[Ⲇᐃ] = 1
			} else if (ⲆΔⲆᐃ === 2) {
				for (Ⲇᐃ = ΔΔᐃ; Ⲇᐃ < Δᐃᐃᐃ.ⵠᐃⵠⲆ.length; Ⲇᐃ++) {
					if (ᐃΔΔΔΔⵠᐃ === Δᐃᐃᐃ.ⵠᐃⵠⲆ[Ⲇᐃ].id) break
				}
				Ⲇᐃᐃ = Δᐃᐃᐃ.ⵠᐃⵠⲆ[Ⲇᐃ];
				ΔⵠⲆ.unlock.ⲆⲆⲆᐃⵠ[Ⲇᐃ] = ΔᐃⲆⲆ
			} else if (ⲆΔⲆᐃ === ᐃᐃᐃΔᐃ) {
				for (Ⲇᐃ = ⵠⵠⵠΔ; Δᐃᐃᐃ.ᐃᐃΔⲆᐃ.length > Ⲇᐃ; Ⲇᐃ++) {
					if (Δᐃᐃᐃ.ᐃᐃΔⲆᐃ[Ⲇᐃ].id === ᐃΔΔΔΔⵠᐃ) break
				}
				Ⲇᐃᐃ = Δᐃᐃᐃ.ᐃᐃΔⲆᐃ[Ⲇᐃ];
				ΔⵠⲆ.unlock.ⵠΔⲆΔᐃ[Ⲇᐃ] = ᐃᐃΔ
			} else if (ᐃᐃⵠΔ === ⲆΔⲆᐃ) {
				for (Ⲇᐃ = ⵠᐃⲆ; Δᐃᐃᐃ.ᐃᐃⵠⵠΔ.length > Ⲇᐃ; Ⲇᐃ++) {
					if (Δᐃᐃᐃ.ᐃᐃⵠⵠΔ[Ⲇᐃ].id === ᐃΔΔΔΔⵠᐃ) break
				}
				Ⲇᐃᐃ = Δᐃᐃᐃ.ᐃᐃⵠⵠΔ[Ⲇᐃ];
				ΔⵠⲆ.unlock.ⵠⲆΔΔⲆ[Ⲇᐃ] = 1;
				ΔⵠⲆ.unlock.ΔⵠᐃⲆΔ[Ⲇᐃ] = 1
			}
			ΔⵠⲆ.ⵠⵠΔⵠᐃΔⲆ = Ⲇᐃ;
			ΔⵠⲆ.ᐃⲆΔⲆⲆᐃⵠ = ΔⵠᐃⵠⲆ("by " + Ⲇᐃᐃ.ⲆⲆⲆ, ⵠ[440], ⵠ[252], 40, 500, undefined, 30, 24, undefined, undefined, ⲆΔΔⵠᐃ, ⵠΔⵠⵠⲆ, ⵠ[91], 24);
			ΔⵠⲆ.ΔⵠΔⵠⵠⵠⵠ = ΔⵠᐃⵠⲆ(Ⲇᐃᐃ.name, ⵠ[440], ⵠ[252], 60, 600, undefined, 30, 24, undefined, undefined, undefined, ⵠΔⵠⵠⲆ, ⵠ[91], ⵠΔᐃⲆⵠ)
		};
		this.ΔΔⵠⵠᐃ = ⵠⲆⵠⵠ;
		this.ⵠⲆⲆⲆΔᐃⵠ = ⵠⲆⵠⵠ;
		this.ⲆⲆⵠⲆⲆᐃΔ = ⵠᐃⲆ;
		this.ΔᐃΔΔᐃᐃᐃ = 0;
		this.ⵠⵠⵠᐃΔⲆⲆ = 0;
		this.ᐃⲆΔⲆⲆᐃⵠ = ᐃⲆⵠⲆᐃ;
		this.ΔⵠΔⵠⵠⵠⵠ = ᐃⵠᐃᐃⲆ;
		var ⲆⲆⵠⲆΔⲆΔⵠΔ = 150 + 112 - 260 / ᐃᐃΔΔᐃ;
		var ⵠᐃⲆΔⲆⵠⲆⵠᐃ = -260 / 4;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆⵠⵠⵠⲆΔⵠ, ⵠⲆᐃᐃ, -1542 / ᐃΔᐃΔ, 150, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ΔⵠᐃⵠᐃⲆΔ;
		var ⵠⵠᐃⵠⲆ = this.ⵠᐃᐃΔⵠⵠΔ([
			[ⵠ[42], 3 * ⲆⵠⲆΔΔ],
			[ⵠ[315], 10 * ⲆⵠⲆΔΔ],
			[ⵠ[355], ⲆⵠⲆΔΔ * 30],
			[ⵠ[159], ⲆⵠⲆΔΔ * 57]
		]);
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠⵠᐃⵠⲆ, ⵠⲆᐃᐃ, -ⵠⵠᐃⵠⲆ.width / 4, 178, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ΔⵠᐃⵠᐃⲆΔ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠⵠᐃⲆⵠⵠⵠ, ⵠⲆᐃᐃ, -1542 / 4, 150, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⵠⵠᐃⵠᐃΔᐃ;
		var ⵠⵠᐃⵠⲆ = this.ⵠᐃᐃΔⵠⵠΔ([
			["#d33a2a", ⲆⵠⲆΔΔ * 3],
			[ⵠ[42], ᐃⵠᐃⵠⲆ * ⲆⵠⲆΔΔ],
			[ⵠ[315], 30 * ⲆⵠⲆΔΔ],
			[ⵠ[355], ⲆⵠⲆΔΔ * 57]
		]);
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠⵠᐃⵠⲆ, ⵠⲆᐃᐃ, -ⵠⵠᐃⵠⲆ.width / ⲆᐃᐃΔⵠ, 178, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⵠⵠᐃⵠᐃΔᐃ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ᐃⵠΔΔⵠΔᐃ, ⵠⲆᐃᐃ, -1542 / 4, 150, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⵠⲆΔᐃⵠⲆΔ;
		var ⵠⵠᐃⵠⲆ = this.ⵠᐃᐃΔⵠⵠΔ([
			[ⵠ[315], ⲆⵠⲆΔΔ * 3],
			[ⵠ[355], ⵠⲆⲆⵠΔ * ⲆⵠⲆΔΔ],
			[ⵠ[159], ⲆⵠⲆΔΔ * 30],
			["#d88e23", ⲆⵠⲆΔΔ * 57]
		]);
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠⵠᐃⵠⲆ, ⵠⲆᐃᐃ, -ⵠⵠᐃⵠⲆ.width / 4, 178, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⵠⲆΔᐃⵠⲆΔ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠᐃΔⲆΔⲆⲆ, ⵠⲆᐃᐃ, -1542 / ⵠΔⲆΔΔ, 150, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ᐃⵠᐃᐃᐃᐃⵠ;
		var ⵠⵠᐃⵠⲆ = this.ⵠᐃᐃΔⵠⵠΔ([
			[ⵠ[42], 3 * ⲆⵠⲆΔΔ],
			[ⵠ[315], 10 * ⲆⵠⲆΔΔ],
			[ⵠ[355], 30 * ⲆⵠⲆΔΔ],
			[ⵠ[159], ⲆⵠⲆΔΔ * 57]
		]);
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠⵠᐃⵠⲆ, ⵠⲆᐃᐃ, -ⵠⵠᐃⵠⲆ.width / ⵠⵠᐃΔ, 178, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ᐃⵠᐃᐃᐃᐃⵠ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ᐃΔⲆⲆᐃΔⲆ, ⵠⲆᐃᐃ, -1542 / ⵠⵠᐃΔ, 150, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⵠΔΔⲆⵠⲆᐃ;
		var ⵠⵠᐃⵠⲆ = this.ⵠᐃᐃΔⵠⵠΔ([
			["#d33a2a", ⲆⵠⲆΔΔ * 3],
			[ⵠ[42], 10 * ⲆⵠⲆΔΔ],
			[ⵠ[315], 30 * ⲆⵠⲆΔΔ],
			[ⵠ[355], ⲆⵠⲆΔΔ * 57]
		]);
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠⵠᐃⵠⲆ, ⵠⲆᐃᐃ, -ⵠⵠᐃⵠⲆ.width / ᐃΔⵠⵠ, 178, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⵠΔΔⲆⵠⲆᐃ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠᐃⵠΔᐃⵠᐃ, ⵠⲆᐃᐃ, -1366 / ⵠᐃΔΔ, ᐃⲆⲆΔᐃ, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ᐃⲆᐃᐃᐃ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ΔⲆΔᐃΔΔΔ, ⵠⲆᐃᐃ, -1366 / 4, 100, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = Ⲇᐃᐃᐃⵠ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ΔⲆⵠⲆⲆΔⲆ, ⵠⲆᐃᐃ, -1366 / ᐃΔᐃΔ, ⲆⵠⲆⲆⵠ, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ΔᐃⵠⵠΔ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ᐃⵠⵠⵠⲆΔⲆ, ⵠⲆᐃᐃ, -1366 / 4, 100, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⵠᐃᐃΔᐃ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠΔᐃⲆⵠⵠΔ, ⵠⲆᐃᐃ, -1366 / ᐃⲆⵠᐃⵠ, 100, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⵠⲆΔⲆΔ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠΔⵠⲆΔᐃᐃ, ⵠⲆᐃᐃ, -1366 / ⵠⵠᐃΔ, ᐃΔⵠᐃⵠ, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ΔⲆⲆᐃΔ;
		ⲆᐃⲆΔⵠᐃΔ = ᐃⵠ++;
		this.Δⵠᐃᐃ[ⲆᐃⲆΔⵠᐃΔ] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆᐃⲆΔⵠᐃΔ, ⵠⲆᐃᐃ, 484, Δⵠⵠⵠ, ᐃΔᐃᐃ);
		ΔᐃᐃⲆΔⵠᐃ = ᐃⵠ++;
		this.Δⵠᐃᐃ[ΔᐃᐃⲆΔⵠᐃ] = ᐃⵠⵠⵠ(ⵠᐃ.ΔᐃᐃⲆΔⵠᐃ, ⵠⲆᐃᐃ, 908 / ΔΔΔⵠ + 597 / ᐃⲆᐃⵠ + 60, ⵠⵠⲆⵠ, ᐃΔᐃᐃ);
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ΔᐃᐃᐃⵠⲆⲆ, ⵠⲆᐃᐃ, -758 / ᐃΔⵠⵠ, -ᐃΔΔⲆⵠ, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ᐃᐃⵠⲆΔⲆᐃ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⲆⵠᐃⵠΔΔΔ, ⵠⲆᐃᐃ, -758 / 4, -5, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⵠⲆᐃⲆΔΔⵠ;
		ΔᐃΔⵠⲆⲆΔ = ᐃⵠ++;
		this.Δⵠᐃᐃ[ΔᐃΔⵠⲆⲆΔ] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠΔᐃΔⵠⲆΔ, ᐃᐃᐃΔ, 93, 30, ᐃΔᐃᐃ);
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ⵠⲆΔⵠⵠⵠⲆ, ⵠⲆᐃᐃ, -692 / 4, 110, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⵠⵠⵠᐃΔⲆⵠ;
		this.Δⵠᐃᐃ[ᐃⵠ] = ᐃⵠⵠⵠ(ⵠᐃ.ΔᐃᐃΔᐃⵠⵠ, ⵠⲆᐃᐃ, -692 / ⵠᐃᐃΔ, 110, ᐃΔᐃᐃ | ⲆⵠⵠΔ);
		this.Δⵠᐃᐃ[ᐃⵠ++].view = ⲆΔⵠⵠΔᐃⵠ;
		ᐃⵠ = ᐃᐃⲆ;
		this.buttons = [];
		this.buttons[ᐃⵠ] = ΔΔⲆ(50, 57, "", [ⵠᐃ.ᐃΔᐃⵠⵠⵠΔ, ⵠᐃ.ⲆⵠᐃΔᐃⲆⵠ, ⵠᐃ.ᐃⵠⵠⵠΔⲆⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			if (ΔⵠⲆ.ⲆΔⲆΔⲆ()) ⵠⲆΔᐃ(ⲆⲆᐃᐃⵠ);
			else ⵠⲆΔᐃ(ⵠᐃᐃΔⲆ)
		}), 320, 0, ΔⲆⲆΔ, ᐃᐃᐃΔ);
		ᐃⵠ++;
		if (ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth < 1300) this.buttons[ᐃⵠ] = ΔΔⲆ(202, 97, "", [ⵠᐃ.ⵠⵠⲆⲆᐃⲆΔ, ⵠᐃ.ⲆᐃⲆᐃᐃⲆⵠ, ⵠᐃ.ᐃΔⵠⲆⲆΔᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, this.ⲆᐃⲆΔⲆΔⵠ, 462, 235, ᐃΔᐃᐃ | ΔⲆⲆΔ, ᐃᐃᐃΔ);
		else this.buttons[ᐃⵠ] = ΔΔⲆ(202, 97, "", [ⵠᐃ.ⵠⵠⲆⲆᐃⲆΔ, ⵠᐃ.ⲆᐃⲆᐃᐃⲆⵠ, ⵠᐃ.ᐃΔⵠⲆⲆΔᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, this.ⲆᐃⲆΔⲆΔⵠ, 74, 235, ᐃΔᐃᐃ | ⲆⵠⵠΔ, ᐃᐃᐃΔ);
		this.buttons[ᐃⵠ].view = ⲆⵠⲆⲆᐃ;
		ᐃⵠ++;
		if (1300 < ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth) {
			this.buttons[ᐃⵠ] = ΔΔⲆ(355, 168, "", [ⵠᐃ.ᐃⵠⲆⲆⲆⲆⵠ, ⵠᐃ.ᐃⵠⲆⲆⲆⲆⵠ, ⵠᐃ.ᐃⵠⲆⲆⲆⲆⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
				ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]("./changelog.html", ⵠ[437])
			}), -195, -115, ⲆΔⵠΔᐃⲆΔ | ⲆⵠⵠΔ, ᐃᐃᐃΔ);
			this.buttons[ᐃⵠ++].view = ⲆⵠⲆⲆᐃ;
			this.buttons[ᐃⵠ] = ΔΔⲆ(355, 168, "", [ⵠᐃ.ⵠᐃΔᐃᐃⲆᐃ, ⵠᐃ.ⵠᐃΔᐃᐃⲆᐃ, ⵠᐃ.ⵠᐃΔᐃᐃⲆᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
				ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]("https://taming.io", ⵠ[437])
			}), ᐃⲆᐃⵠⲆ, -115, ⲆΔⵠΔᐃⲆΔ | ⲆⵠⵠΔ, ᐃᐃᐃΔ);
			this.buttons[ᐃⵠ++].view = ⲆⵠⲆⲆᐃ
		}
		this.buttons[ᐃⵠ++] = ΔΔⲆ(80, 80, "", [ⵠᐃ.ⲆΔᐃΔᐃΔΔ, ⵠᐃ.ΔΔⵠⲆⵠⵠᐃ, ⵠᐃ.ⲆⲆᐃⲆⲆᐃⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]("https://lapamauve.creator-spring.com/", ⵠ[437])
		}), 380, ᐃᐃᐃΔΔ, ΔⵠⲆⵠᐃ, ᐃᐃᐃΔ);
		this.buttons[ᐃⵠ++] = ΔΔⲆ(80, 80, "", [ⵠᐃ.ⲆΔᐃⵠⲆᐃⵠ, ⵠᐃ.ⵠⲆⲆⲆᐃⵠᐃ, ⵠᐃ.ΔᐃⲆⵠⵠᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]("https://discord.gg/starveio", ⵠ[437])
		}), 330, 10, ΔⵠⲆⵠᐃ, ᐃᐃᐃΔ);
		this.buttons[ᐃⵠ++] = ΔΔⲆ(80, 80, "", [ⵠᐃ.ⵠΔΔΔᐃᐃΔ, ⵠᐃ.ᐃᐃⲆᐃΔΔⲆ, ⵠᐃ.Ⲇᐃⵠⵠⵠⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]("https://reddit.com/r/starveio", ⵠ[437])
		}), 280, ⵠⵠΔⲆᐃ, ΔⵠⲆⵠᐃ, ᐃᐃᐃΔ);
		this.buttons[ᐃⵠ++] = ΔΔⲆ(80, 80, "", [ⵠᐃ.ⲆⵠⲆⵠᐃᐃΔ, ⵠᐃ.ᐃΔΔⲆⲆΔⵠ, ⵠᐃ.ΔⲆΔⲆⲆⲆⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]("https://starveiopro.wikia.com/wiki/", ⵠ[437])
		}), 230, 10, ΔⵠⲆⵠᐃ, ᐃᐃᐃΔ);
		this.buttons[ᐃⵠ++] = ΔΔⲆ(80, 80, "", [ⵠᐃ.ΔΔΔΔⲆΔⲆ, ⵠᐃ.ᐃⵠⲆⲆⵠⵠⵠ, ⵠᐃ.ⵠΔⵠⵠⵠⲆⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]("https://www.facebook.com/LapaMauve/", ⵠ[437])
		}), 155, 10, ΔⵠⲆⵠᐃ, ᐃᐃᐃΔ);
		this.buttons[ᐃⵠ++] = ΔΔⲆ(80, 80, "", [ⵠᐃ.ⵠⵠᐃᐃᐃⵠⵠ, ⵠᐃ.ΔⵠⵠⲆᐃᐃⲆ, ⵠᐃ.ᐃⵠΔΔⵠᐃⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]("https://twitter.com/lapamauve", ⵠ[437])
		}), 105, ⵠⲆΔᐃᐃ, ΔⵠⲆⵠᐃ, ᐃᐃᐃΔ);
		this.buttons[ᐃⵠ++] = ΔΔⲆ(80, 80, "", [ⵠᐃ.ᐃⵠⲆⵠΔΔⵠ, ⵠᐃ.ⵠⵠⵠΔΔᐃⲆ, ⵠᐃ.ⵠⲆⲆⵠΔᐃⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]("https://www.youtube.com/@lapamauveofficial", ⵠ[437])
		}), 55, 10, ΔⵠⲆⵠᐃ, ᐃᐃᐃΔ);
		ⵠⵠΔⲆⲆᐃΔ = ᐃⵠ++;
		this.buttons[ⵠⵠΔⲆⲆᐃΔ] = ΔΔⲆ(232, 142, "", [ⵠᐃ.ᐃⲆᐃᐃⲆᐃΔ, ⵠᐃ.ⲆΔΔⲆᐃᐃΔ, ⵠᐃ.ᐃΔΔΔⲆᐃᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ⲆΔᐃᐃᐃ);
			ᐃⲆᐃᐃⵠ(ᐃΔΔΔ.ᐃΔᐃΔᐃⵠⲆ, ᐃΔΔΔ.ᐃⵠⵠⵠⲆⵠΔ, ᐃΔΔΔ.ΔⵠᐃⲆⵠΔⲆ, ᐃΔΔΔ.ⵠⲆⲆΔⵠᐃΔ)
		}), -ⲆᐃⲆΔ, 573, ΔⲆⲆΔ, ᐃᐃᐃΔ);
		this.buttons[ᐃⵠ++] = ΔΔⲆ(236, 165, "", [ⵠᐃ.ᐃⲆᐃⵠⵠⲆΔ, ⵠᐃ.ᐃⲆᐃⵠⵠⲆΔ, ⵠᐃ.ᐃⲆᐃⵠⵠⲆΔ], ⲆⵠⵠⲆ, ΔᐃΔⲆⲆΔᐃ, (function() {
			ⵠⲆΔᐃ(ⲆΔᐃᐃᐃ)
		}), -5, 566, ΔⲆⲆΔ, ᐃᐃᐃΔ);
		ᐃⲆΔⵠΔΔⲆ = ᐃⵠ++;
		this.buttons[ᐃⲆΔⵠΔΔⲆ] = ΔΔⲆ(236, 165, "", [ⵠᐃ.ⵠⲆΔⵠΔᐃΔ, ⵠᐃ.ⲆᐃⵠⵠΔᐃΔ, ⵠᐃ.ⵠⲆΔᐃΔᐃΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ⵠⵠⲆᐃΔΔΔ)
		}), -5, 494, ΔⲆⲆΔ, ᐃᐃᐃΔ);
		this.buttons[ᐃⵠ++] = ΔΔⲆ(236, 165, "", [ⵠᐃ.ΔⵠⵠᐃⲆⲆⵠ, ⵠᐃ.ΔⵠⵠᐃⲆⲆⵠ, ⵠᐃ.ΔⵠⵠᐃⲆⲆⵠ], ⲆⵠⵠⲆ, ΔᐃΔⲆⲆΔᐃ, (function() {
			ⵠⲆΔᐃ(ⵠⵠⲆᐃΔΔΔ)
		}), -5, 494, ΔⲆⲆΔ, ᐃᐃᐃΔ);
		ΔⵠΔΔΔⵠΔ = ᐃⵠ++;
		this.buttons[ΔⵠΔΔΔⵠΔ] = ΔΔⲆ(236, 165, "", [ⵠᐃ.ⵠⲆΔⵠΔᐃΔ, ⵠᐃ.ⲆᐃⵠⵠΔᐃΔ, ⵠᐃ.ⵠⲆΔᐃΔᐃΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			if (ΔⵠⲆ.ⲆΔⲆΔⲆ()) {
				if (0 < ᐃΔΔΔ.ⲆᐃΔⲆⵠᐃΔ - Date.now()) ⵠⲆΔᐃ(ⵠⵠⵠΔΔ);
				else ⵠⲆΔᐃ(ⵠⵠᐃΔⵠ)
			} else ⵠⲆΔᐃ(ⵠᐃᐃΔⲆ)
		}), -ᐃᐃᐃΔⵠ, 415, ΔⲆⲆΔ, ᐃᐃᐃΔ);
		this.buttons[ᐃⵠ++] = ΔΔⲆ(236, 165, "", [ⵠᐃ.ᐃⵠⵠΔΔᐃΔ, ⵠᐃ.ᐃⵠⵠΔΔᐃΔ, ⵠᐃ.ᐃⵠⵠΔΔᐃΔ], ⲆⵠⵠⲆ, ΔᐃΔⲆⲆΔᐃ, (function() {
			if (ΔⵠⲆ.ⲆΔⲆΔⲆ()) {
				if (ΔΔᐃᐃ < ᐃΔΔΔ.ⲆᐃΔⲆⵠᐃΔ - Date.now()) ⵠⲆΔᐃ(ⵠⵠⵠΔΔ);
				else ⵠⲆΔᐃ(ⵠⵠᐃΔⵠ)
			} else ⵠⲆΔᐃ(ⵠᐃᐃΔⲆ)
		}), -5, 415, ΔⲆⲆΔ, ᐃᐃᐃΔ);
		ΔΔΔⵠΔⵠᐃ = ᐃⵠ++;
		this.buttons[ΔΔΔⵠΔⵠᐃ] = ΔΔⲆ(236, 165, "", [ⵠᐃ.ⵠⲆΔⵠΔᐃΔ, ⵠᐃ.ⲆᐃⵠⵠΔᐃΔ, ⵠᐃ.ⵠⲆΔᐃΔᐃΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ΔΔᐃⵠΔ)
		}), -ΔⵠΔᐃ, 336, ΔⲆⲆΔ, ᐃᐃᐃΔ);
		this.buttons[ᐃⵠ++] = ΔΔⲆ(236, 165, "", [ⵠᐃ.ⲆΔᐃⵠᐃⵠⲆ, ⵠᐃ.ⲆΔᐃⵠᐃⵠⲆ, ⵠᐃ.ⲆΔᐃⵠᐃⵠⲆ], ⲆⵠⵠⲆ, ΔᐃΔⲆⲆΔᐃ, (function() {
			ⵠⲆΔᐃ(ΔΔᐃⵠΔ)
		}), -5, 336, ΔⲆⲆΔ, ᐃᐃᐃΔ);
		ᐃᐃᐃⲆᐃⲆⲆ = ᐃⵠ++;
		this.buttons[ᐃᐃᐃⲆᐃⲆⲆ] = ΔΔⲆ(236, 165, "", [ⵠᐃ.ⵠⲆΔⵠΔᐃΔ, ⵠᐃ.ⲆᐃⵠⵠΔᐃΔ, ⵠᐃ.ⵠⲆΔᐃΔᐃΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ᐃΔΔⵠΔ)
		}), -ᐃⵠᐃⲆ, 257, ΔⲆⲆΔ, ᐃᐃᐃΔ);
		this.buttons[ᐃⵠ++] = ΔΔⲆ(236, 165, "", [ⵠᐃ.ⵠΔⵠⵠⵠΔᐃ, ⵠᐃ.ⵠΔⵠⵠⵠΔᐃ, ⵠᐃ.ⵠΔⵠⵠⵠΔᐃ], ⲆⵠⵠⲆ, ΔᐃΔⲆⲆΔᐃ, (function() {
			ⵠⲆΔᐃ(ᐃΔΔⵠΔ)
		}), -5, 257, ΔⲆⲆΔ, ᐃᐃᐃΔ);
		ᐃⵠⲆⲆᐃΔⵠ = ᐃⵠ++;
		this.buttons[ᐃⵠⲆⲆᐃΔⵠ] = ΔΔⲆ(236, 165, "", [ⵠᐃ.ⵠⲆΔⵠΔᐃΔ, ⵠᐃ.ⲆᐃⵠⵠΔᐃΔ, ⵠᐃ.ⵠⲆΔᐃΔᐃΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ⲆⵠⲆⲆᐃ)
		}), -5, 178, ΔⲆⲆΔ, ᐃᐃᐃΔ);
		this.buttons[ᐃⵠ++] = ΔΔⲆ(236, 165, "", [ⵠᐃ.ⵠⲆⲆΔⲆⵠᐃ, ⵠᐃ.ⵠⲆⲆΔⲆⵠᐃ, ⵠᐃ.ⵠⲆⲆΔⲆⵠᐃ], ⲆⵠⵠⲆ, ΔᐃΔⲆⲆΔᐃ, (function() {
			ⵠⲆΔᐃ(ⲆⵠⲆⲆᐃ)
		}), -5, 178, ΔⲆⲆΔ, ᐃᐃᐃΔ);
		ᐃΔΔᐃⵠᐃⲆ = ᐃⵠ++;
		this.ᐃΔΔᐃⵠᐃⲆ = ᐃΔΔᐃⵠᐃⲆ;
		this.buttons[ᐃΔΔᐃⵠᐃⲆ] = ΔΔⲆ(324, 222, "", [ⵠᐃ.ⵠᐃⲆᐃᐃⵠⵠ, ⵠᐃ.ᐃⵠΔⵠⵠⲆⵠ, ⵠᐃ.ΔⵠⵠᐃⲆᐃᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ⵠᐃᐃΔⲆ)
		}), 0, 70, ΔⲆⲆΔ, ᐃᐃᐃΔ);
		ΔᐃᐃⵠΔᐃΔ = ᐃⵠ++;
		ᐃⵠΔⵠⲆⲆⵠ = ᐃⵠ++;
		this.ΔᐃᐃⵠΔᐃΔ = ΔᐃᐃⵠΔᐃΔ;
		this.ᐃⵠΔⵠⲆⲆⵠ = ᐃⵠΔⵠⲆⲆⵠ;
		this.buttons[ΔᐃᐃⵠΔᐃΔ] = ΔΔⲆ(324, 222, "", [ⵠᐃ.ⲆⵠᐃⵠᐃᐃⲆ, ⵠᐃ.ᐃⲆⲆⵠᐃΔⵠ, ⵠᐃ.ⲆΔΔᐃΔΔⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ᐃⵠᐃⵠⵠ);
			ⲆᐃⵠᐃⲆ(-1)
		}), ΔⲆⲆ, 70, ΔⲆⲆΔ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠΔⵠⲆⲆⵠ] = ΔΔⲆ(324, 222, "", [ⵠᐃ.ΔⵠᐃΔⲆᐃⵠ, ⵠᐃ.ΔⵠᐃΔⲆᐃⵠ, ⵠᐃ.ΔⵠᐃΔⲆᐃⵠ], ⲆⵠⵠⲆ, ΔᐃΔⲆⲆΔᐃ, (function() {
			ⵠⲆΔᐃ(ᐃⵠᐃⵠⵠ);
			ⲆᐃⵠᐃⲆ(-1)
		}), 0, 70, ΔⲆⲆΔ, ⵠⲆᐃᐃ);
		if (ᐃΔᐃⵠ.ΔⲆⲆⲆᐃΔⲆ === ⵠΔᐃⵠ) {
			var ⵠᐃⲆΔᐃ = ᐃⵠ++;
			ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth < 1300 ? this.buttons[ⵠᐃⲆΔᐃ] = ΔΔⲆ(266, 176, "", [ⵠᐃ.ΔⲆᐃᐃΔᐃⵠ, ⵠᐃ.ᐃⲆⲆⵠΔᐃΔ, ⵠᐃ.ⲆΔⵠⵠⲆⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
				ᐃΔᐃⵠ.ᐃᐃⵠΔΔ(ΔᐃᐃΔ.ᐃΔⵠᐃᐃ)
			}), 150, 300, ΔⲆⲆΔ | ᐃΔᐃᐃ, ᐃᐃᐃΔ) : this.buttons[ⵠᐃⲆΔᐃ] = ΔΔⲆ(266, 176, "", [ⵠᐃ.ΔⲆᐃᐃΔᐃⵠ, ⵠᐃ.ᐃⲆⲆⵠΔᐃΔ, ⵠᐃ.ⲆΔⵠⵠⲆⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
				ᐃΔᐃⵠ.ᐃᐃⵠΔΔ(ΔᐃᐃΔ.ᐃΔⵠᐃᐃ)
			}), -340, 100, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ᐃᐃᐃΔ);
			this.buttons[ⵠᐃⲆΔᐃ].view = ⲆⵠⲆⲆᐃ;
			this.buttons[ⵠᐃⲆΔᐃ].hint = 0;
			var ⵠΔΔⲆⵠ = ᐃⵠ++;
			ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth < 1300 ? this.buttons[ⵠΔΔⲆⵠ] = ΔΔⲆ(266, 176, "", [ⵠᐃ.ΔᐃⵠΔⵠΔⵠ, ⵠᐃ.ΔΔⵠⲆⵠⲆⵠ, ⵠᐃ.ΔⵠΔⲆᐃᐃᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
				ᐃΔᐃⵠ.ᐃᐃⵠΔΔ(ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ)
			}), 150, 400, ΔⲆⲆΔ | ᐃΔᐃᐃ, ᐃᐃᐃΔ) : this.buttons[ⵠΔΔⲆⵠ] = ΔΔⲆ(266, 176, "", [ⵠᐃ.ΔᐃⵠΔⵠΔⵠ, ⵠᐃ.ΔΔⵠⲆⵠⲆⵠ, ⵠᐃ.ΔⵠΔⲆᐃᐃᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
				ᐃΔᐃⵠ.ᐃᐃⵠΔΔ(ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ)
			}), -340, 200, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ᐃᐃᐃΔ);
			this.buttons[ⵠΔΔⲆⵠ].view = ⲆⵠⲆⲆᐃ;
			this.buttons[ⵠΔΔⲆⵠ].hint = 0;
			var ⲆⵠᐃΔᐃ = ᐃⵠ++;
			ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth < 1300 ? this.buttons[ⲆⵠᐃΔᐃ] = ΔΔⲆ(266, 176, "", [ⵠᐃ.ⵠΔᐃΔⲆⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃΔΔΔ, ⵠᐃ.ⵠⵠΔⲆⵠΔᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
				ᐃΔᐃⵠ.ᐃᐃⵠΔΔ(ΔᐃᐃΔ.ⲆⵠᐃΔᐃ)
			}), 450, 300, ΔⲆⲆΔ | ᐃΔᐃᐃ, ᐃᐃᐃΔ) : this.buttons[ⲆⵠᐃΔᐃ] = ΔΔⲆ(266, 176, "", [ⵠᐃ.ⵠΔᐃΔⲆⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃΔΔΔ, ⵠᐃ.ⵠⵠΔⲆⵠΔᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
				ᐃΔᐃⵠ.ᐃᐃⵠΔΔ(ΔᐃᐃΔ.ⲆⵠᐃΔᐃ)
			}), -340, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ᐃᐃᐃΔ);
			this.buttons[ⲆⵠᐃΔᐃ].view = ⲆⵠⲆⲆᐃ;
			this.buttons[ⲆⵠᐃΔᐃ].hint = 0;
			var ᐃᐃᐃⵠⲆ = ᐃⵠ++;
			if (ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth < 1300) this.buttons[ᐃᐃᐃⵠⲆ] = ΔΔⲆ(266, 176, "", [ⵠᐃ.ΔΔⵠⵠⲆᐃⲆ, ⵠᐃ.ᐃⲆⲆⵠᐃΔⲆ, ⵠᐃ.ⵠⲆΔⲆⲆⲆΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
				ᐃΔᐃⵠ.ᐃᐃⵠΔΔ(ΔᐃᐃΔ.ᐃΔⲆⲆᐃ)
			}), 300, 300, ΔⲆⲆΔ | ᐃΔᐃᐃ, ᐃᐃᐃΔ);
			else this.buttons[ᐃᐃᐃⵠⲆ] = ΔΔⲆ(266, 176, "", [ⵠᐃ.ΔΔⵠⵠⲆᐃⲆ, ⵠᐃ.ᐃⲆⲆⵠᐃΔⲆ, ⵠᐃ.ⵠⲆΔⲆⲆⲆΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
				ᐃΔᐃⵠ.ᐃᐃⵠΔΔ(ΔᐃᐃΔ.ᐃΔⲆⲆᐃ)
			}), 204, ᐃⲆⲆΔᐃ, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ᐃᐃᐃΔ);
			this.buttons[ᐃᐃᐃⵠⲆ].view = ⲆⵠⲆⲆᐃ;
			this.buttons[ᐃᐃᐃⵠⲆ].hint = 0;
			var ᐃΔᐃⲆΔ = ᐃⵠ++;
			1300 > ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth ? this.buttons[ᐃΔᐃⲆΔ] = ΔΔⲆ(266, 176, "", [ⵠᐃ.ΔⲆΔΔᐃⲆΔ, ⵠᐃ.ⲆⵠᐃΔⲆⵠⵠ, ⵠᐃ.ⵠᐃⲆⵠⵠᐃᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
				ᐃΔᐃⵠ.ᐃᐃⵠΔΔ(ΔᐃᐃΔ.ᐃᐃΔⲆΔ)
			}), 300, 400, ΔⲆⲆΔ | ᐃΔᐃᐃ, ᐃᐃᐃΔ) : this.buttons[ᐃΔᐃⲆΔ] = ΔΔⲆ(266, 176, "", [ⵠᐃ.ΔⲆΔΔᐃⲆΔ, ⵠᐃ.ⲆⵠᐃΔⲆⵠⵠ, ⵠᐃ.ⵠᐃⲆⵠⵠᐃᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
				ᐃΔᐃⵠ.ᐃᐃⵠΔΔ(ΔᐃᐃΔ.ᐃᐃΔⲆΔ)
			}), 204, 200, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ᐃᐃᐃΔ);
			this.buttons[ᐃΔᐃⲆΔ].view = ⲆⵠⲆⲆᐃ;
			this.buttons[ᐃΔᐃⲆΔ].hint = 0;
			var Δᐃⵠᐃᐃ = ᐃⵠ++;
			this.buttons[Δᐃⵠᐃᐃ] = ΔΔⲆ(266, 176, "", [ⵠᐃ.ΔⲆⲆⵠᐃⲆΔ, ⵠᐃ.Δⵠⵠᐃᐃᐃⵠ, ⵠᐃ.ⲆΔⵠᐃᐃΔᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
				ᐃΔᐃⵠ.ᐃᐃⵠΔΔ(ΔᐃᐃΔ.Δᐃⵠᐃᐃ)
			}), 1300 > ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth ? 450 : 204, ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth < 1300 ? 400 : 300, (ⵠⵠⲆΔᐃᐃᐃⲆΔ.innerWidth < 1300 ? ΔⲆⲆΔ : ⲆⵠⵠΔ) | ᐃΔᐃᐃ, ᐃᐃᐃΔ);
			this.buttons[Δᐃⵠᐃᐃ].view = ⲆⵠⲆⲆᐃ;
			this.buttons[Δᐃⵠᐃᐃ].hint = 0
		}
		this.buttons[ᐃⵠ] = ΔΔⲆ(87, 78, "", [ⵠᐃ.ᐃΔⲆᐃⲆΔⲆ, ⵠᐃ.ΔⵠᐃⲆⵠⲆΔ, ⵠᐃ.ΔⵠΔⲆⵠΔⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃΔΔΔ.ΔⵠⲆᐃΔᐃⲆⲆⲆ();
			Δⵠⵠⵠ === ᐃΔΔΔ.ΔᐃᐃⵠᐃΔᐃ ? ⵠⲆΔᐃ(ⲆΔⵠⵠΔᐃⵠ) : ⵠⲆΔᐃ(ⵠⵠⵠᐃΔⲆⵠ)
		}), 127, 110, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃⵠⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(87, 78, "", [ⵠᐃ.ᐃⲆⵠᐃΔⲆᐃ, ⵠᐃ.ⵠΔᐃⲆⲆⲆⲆ, ⵠᐃ.ⵠⲆᐃᐃᐃᐃᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			const ⵠⵠⵠⲆⲆ = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[86]][ⲆᐃⲆⵠΔΔⲆ[169]]("textarea");
			ⵠⵠⵠⲆⲆ.value = ᐃΔᐃᐃΔ;
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[86]][ⲆᐃⲆⵠΔΔⲆ[207]][ⲆᐃⲆⵠΔΔⲆ[263]](ⵠⵠⵠⲆⲆ);
			ⵠⵠⵠⲆⲆ.select();
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[86]][ⲆᐃⲆⵠΔΔⲆ[3]]("copy");
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[86]][ⲆᐃⲆⵠΔΔⲆ[207]][ⲆᐃⲆⵠΔΔⲆ[45]](ⵠⵠⵠⲆⲆ)
		}), 182, 110, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃⵠⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(87, 78, "", [ⵠᐃ.ⲆⵠⵠΔᐃΔⲆ, ⵠᐃ.ⵠⲆⵠⲆⲆⵠΔ, ⵠᐃ.ⲆᐃᐃⵠΔⲆᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⵠⲆⲆⲆⵠⵠⵠⲆ()
		}), 255, 110, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃⵠⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(58, 64, "", [ⵠᐃ.ᐃⲆΔⲆⲆΔⵠ, ⵠᐃ.ΔΔᐃⲆΔⲆᐃ, ⵠᐃ.ᐃⵠᐃⲆΔΔⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ⲆⵠⲆⲆᐃ)
		}), 189, 118, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠᐃᐃΔⲆ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(497, 72, "", [ⵠᐃ.ΔⲆⲆⵠⲆⵠΔ, ⵠᐃ.ⵠΔΔⵠⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆⵠΔⲆΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔᐃⵠⲆⲆⲆΔⲆⵠ()
		}), -130, 390, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠᐃᐃΔⲆ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(497, 72, "", [ⵠᐃ.ΔᐃΔᐃⵠⵠⲆ, ⵠᐃ.ᐃⵠΔⲆᐃⵠⲆ, ⵠᐃ.ΔᐃΔⵠⲆⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃΔⲆⲆΔⲆ()
		}), -130, 430, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠᐃᐃΔⲆ;
		ⵠⵠⵠⲆⲆⲆⲆ = 2e4;

		function ⲆⲆΔⵠΔⵠⵠ(ᐃⲆⲆⲆⲆ) {
			var ⲆⵠΔⲆᐃ = ᐃΔΔΔ.ⵠΔΔⵠⵠΔᐃ(ᐃⲆⲆⲆⲆ);
			var ⲆⵠⵠᐃⲆⵠⲆ = ⲆⵠΔⲆᐃ * ⲆⵠΔⲆᐃ * ⵠⵠⵠⲆⲆⲆⲆ;
			var ΔΔⲆⵠΔΔᐃᐃⵠ = (ⲆⵠΔⲆᐃ + ⲆΔΔΔ) * (ⲆⵠΔⲆᐃ + ⲆΔΔΔ) * ⵠⵠⵠⲆⲆⲆⲆ - ⲆⵠⵠᐃⲆⵠⲆ;
			ᐃⲆⲆⲆⲆ -= ⲆⵠⵠᐃⲆⵠⲆ;
			return ᐃⲆⲆⲆⲆ / ΔΔⲆⵠΔΔᐃᐃⵠ
		}
		this.ⲆⲆΔⵠΔⵠⵠ = ⲆⲆΔⵠΔⵠⵠ;

		function ⵠΔΔⵠⵠΔᐃ(ᐃⲆⲆⲆⲆ) {
			return Math.floor(Math.sqrt(ᐃⲆⲆⲆⲆ / ⵠⵠⵠⲆⲆⲆⲆ))
		}
		this.ⵠΔΔⵠⵠΔᐃ = ⵠΔΔⵠⵠΔᐃ;
		this.ⲆⵠᐃᐃⲆᐃⲆᐃΔ = function(ᐃⲆⲆⲆⲆ) {
			ᐃΔΔΔ.ⲆⵠΔⲆᐃ = ᐃΔΔΔ.ⵠΔΔⵠⵠΔᐃ(ᐃⲆⲆⲆⲆ);
			ᐃΔΔΔ.ⲆⵠᐃⵠⲆᐃⲆ = ᐃΔΔΔ.ⲆⲆΔⵠΔⵠⵠ(ᐃⲆⲆⲆⲆ);
			ᐃΔΔΔ.ΔⲆⲆᐃᐃΔΔ = 0;
			ᐃΔΔΔ.ᐃⲆⲆⲆⲆ = ᐃⲆⲆⲆⲆ
		};

		function ⲆᐃⵠᐃⲆ(ⲆΔ, ⵠⲆⵠⲆⵠ) {
			if (ⵠⲆⵠⲆⵠ !== undefined) {
				ᐃΔΔΔ.ᐃⲆΔⵠⲆⵠᐃ = ⵠⲆⵠⲆⵠ;
				var ⵠΔⲆⲆⵠ = ᐃΔΔΔ.ᐃⲆΔⲆᐃⲆᐃ[ⵠⲆⵠⲆⵠ];
				ᐃΔΔΔ.ᐃⲆⲆⲆⲆ = ⵠΔⲆⲆⵠ[ⵠ[313]];
				ᐃΔΔΔ.ΔᐃΔⵠⲆ = ⵠΔⲆⲆⵠ["kill"];
				ᐃΔΔΔ.ᐃⲆᐃΔⲆᐃⵠ = ⵠΔⲆⲆⵠ["death"];
				ᐃΔΔΔ.time = ⵠΔⲆⲆⵠ[ⵠ[426]];
				ᐃΔΔΔ.ⲆⵠΔⲆⵠⲆⵠ = ⵠΔⲆⲆⵠ["bestScore"];
				ᐃΔΔΔ.ⵠⲆᐃᐃⵠⲆᐃ = ⵠΔⲆⲆⵠ["bestKill"];
				ᐃΔΔΔ.ΔᐃΔⵠⵠΔᐃ = ⵠΔⲆⲆⵠ["bestTime"];
				ᐃΔΔΔ.ⵠΔⵠΔⲆΔΔ = ⵠΔⲆⲆⵠ["scoreTotal"]
			}
			ⲆΔ === ⵠⲆⵠᐃⲆ && (ⲆΔ = ᐃΔΔΔ.ⵠⵠⵠᐃΔⵠΔ);
			ᐃΔΔΔ.ⵠⵠⵠᐃΔⵠΔ = ⲆΔ;
			if (ⲆΔ >= 0) {
				document[ⲆᐃⲆⵠΔΔⲆ[185]]("stats_box_time")[ⲆᐃⲆⵠΔΔⲆ[112]] = ᐃΔΔΔ.ΔᐃΔⵠⵠΔᐃ[ⲆΔ];
				document[ⲆᐃⲆⵠΔΔⲆ[185]]("stats_box_kill")[ⲆᐃⲆⵠΔΔⲆ[112]] = ᐃΔΔΔ.ⵠⲆᐃᐃⵠⲆᐃ[ⲆΔ];
				document[ⲆᐃⲆⵠΔΔⲆ[185]]("stats_box_score")[ⲆᐃⲆⵠΔΔⲆ[112]] = ᐃΔΔΔ.ⲆⵠΔⲆⵠⲆⵠ[ⲆΔ]
			} else {
				var ΔᐃΔⵠⲆ = ⵠⵠⲆⵠ;
				for (var Ⲇᐃ = ⲆⲆⵠⲆ; ᐃΔΔΔ.ΔᐃΔⵠⲆ.length > Ⲇᐃ; Ⲇᐃ++) ΔᐃΔⵠⲆ += ᐃΔΔΔ.ΔᐃΔⵠⲆ[Ⲇᐃ];
				var ΔᐃⲆ = 0;
				for (var Ⲇᐃ = ΔΔᐃ; Ⲇᐃ < ᐃΔΔΔ.time.length; Ⲇᐃ++) ΔᐃⲆ += ᐃΔΔΔ.time[Ⲇᐃ];
				document[ⲆᐃⲆⵠΔΔⲆ[185]]("stats_box_time")[ⲆᐃⲆⵠΔΔⲆ[112]] = ΔᐃⲆ;
				document[ⲆᐃⲆⵠΔΔⲆ[185]]("stats_box_kill")[ⲆᐃⲆⵠΔΔⲆ[112]] = ΔᐃΔⵠⲆ;
				document[ⲆᐃⲆⵠΔΔⲆ[185]]("stats_box_score")[ⲆᐃⲆⵠΔΔⲆ[112]] = ᐃΔΔΔ.ᐃⲆⲆⲆⲆ
			}
		}
		this.ⲆΔᐃⵠⲆΔⲆⵠⲆ = function(ⵠᐃⲆⵠ) {
			ᐃΔΔΔ.buttons[ᐃΔΔΔ.ᐃΔΔᐃⵠᐃⲆ].info.active = 0;
			ᐃΔΔΔ.buttons[ᐃΔΔΔ.ΔᐃᐃⵠΔᐃΔ].info.active = ⲆᐃΔ;
			ᐃΔΔΔ.buttons[ᐃΔΔΔ.ᐃⵠΔⵠⲆⲆⵠ].info.active = ΔⲆᐃᐃ;
			ᐃᐃᐃⵠⵠΔⵠ();
			if (ⵠᐃⲆⵠ[ⵠ[184]].indexOf("Starver#") === -ⲆᐃΔ) document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[319]).value = ⵠⵠⲆΔᐃᐃᐃⲆΔ["decodeURIComponent"](ⵠⵠⲆΔᐃᐃᐃⲆΔ["escape"](ⵠⵠⲆΔᐃᐃᐃⲆΔ["atob"](ⵠᐃⲆⵠ[ⵠ[184]])));
			else document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[319]).value = ⵠᐃⲆⵠ[ⵠ[184]];
			ᐃΔΔΔ.ᐃⲆⵠᐃΔ = ⵠᐃⲆⵠ["bread"];
			var ᐃⲆΔⲆᐃⲆᐃ = ⵠᐃⲆⵠ["seasons"];
			var ⵠΔⲆⲆⵠ = ᐃⲆΔⲆᐃⲆᐃ[ᐃⲆΔⲆᐃⲆᐃ.length - Δᐃⵠⵠ];
			ᐃΔΔΔ.ᐃⲆΔⲆᐃⲆᐃ = ᐃⲆΔⲆᐃⲆᐃ;
			ΔⵠⲆ.ⲆⵠᐃᐃⲆᐃⲆᐃΔ(ⵠΔⲆⲆⵠ[ⵠ[313]]);
			ᐃΔΔΔ.ᐃⲆⲆⲆⲆ = ⵠΔⲆⲆⵠ[ⵠ[313]];
			ᐃΔΔΔ.ΔᐃΔⵠⲆ = ⵠΔⲆⲆⵠ["kill"];
			ᐃΔΔΔ.ᐃⲆᐃΔⲆᐃⵠ = ⵠΔⲆⲆⵠ["death"];
			ᐃΔΔΔ.time = ⵠΔⲆⲆⵠ[ⵠ[426]];
			ᐃΔΔΔ.ⲆⵠΔⲆⵠⲆⵠ = ⵠΔⲆⲆⵠ["bestScore"];
			ᐃΔΔΔ.ⵠⲆᐃᐃⵠⲆᐃ = ⵠΔⲆⲆⵠ["bestKill"];
			ᐃΔΔΔ.ΔᐃΔⵠⵠΔᐃ = ⵠΔⲆⲆⵠ["bestTime"];
			ᐃΔΔΔ.ⵠΔⵠΔⲆΔΔ = ⵠΔⲆⲆⵠ["scoreTotal"];
			ᐃΔΔΔ.ΔᐃᐃⵠᐃΔᐃ = ⵠᐃⲆⵠ["firstName"];
			document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[473]).value = ⵠᐃⲆⵠ["privateServerRegion"] + ⵠ[203] + ⵠᐃⲆⵠ["privateServer"];
			if (ᐃΔΔΔ.ΔᐃᐃⵠᐃΔᐃ === ⵠᐃᐃᐃᐃ) ᐃΔΔΔ.ΔᐃᐃⵠᐃΔᐃ = Ⲇᐃⵠ;
			ᐃΔΔΔ.ⲆᐃΔⲆⵠᐃΔ = Date.now() + ⵠᐃⲆⵠ["privateServerTime"];
			ⵠⵠⲆⵠ < Number(ⵠᐃⲆⵠ["privateServerTime"]) && (ᐃΔΔΔ.ⲆᐃΔⲆⵠᐃΔ = Date.now() + Number(ⵠᐃⲆⵠ["privateServerTime"]));
			ᐃΔΔΔ.ⵠⲆᐃΔᐃ = Date.now() + ⵠᐃⲆⵠ[ⵠ[33]];
			if (Number(ⵠᐃⲆⵠ[ⵠ[33]]) > ⵠⲆᐃ) ᐃΔΔΔ.ⵠⲆᐃΔᐃ = Date.now() + Number(ⵠᐃⲆⵠ[ⵠ[33]]);
			var ᐃⵠᐃⲆⲆ = Δᐃᐃᐃ.ⵠᐃΔⲆΔ;
			for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠᐃⲆⵠ["skins"].length; Ⲇᐃ++) {
				var ⲆⵠⲆ = ⵠᐃⲆⵠ["skins"][Ⲇᐃ];
				if (ⲆⵠⲆ > Ⲇᐃⵠ) {
					for (var ⲆⲆᐃⲆ = 0; ᐃⵠᐃⲆⲆ.length > ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) {
						if (Ⲇᐃ === ᐃⵠᐃⲆⲆ[ⲆⲆᐃⲆ].id) ΔⵠⲆ.unlock.ⲆΔⵠⵠ[ⲆⲆᐃⲆ] = ⲆᐃΔ
					}
				}
			}
			var ᐃⵠᐃⲆⲆ = Δᐃᐃᐃ.ΔᐃⲆΔᐃ;
			for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠᐃⲆⵠ["accessories"].length; Ⲇᐃ++) {
				var ⲆⵠⲆ = ⵠᐃⲆⵠ["accessories"][Ⲇᐃ];
				if (ⲆⵠⲆ > ⵠΔᐃⵠ) {
					for (var ⲆⲆᐃⲆ = 0; ⲆⲆᐃⲆ < ᐃⵠᐃⲆⲆ.length; ⲆⲆᐃⲆ++) {
						if (ᐃⵠᐃⲆⲆ[ⲆⲆᐃⲆ].id === Ⲇᐃ) ΔⵠⲆ.unlock.ⵠⵠΔΔⵠ[ⲆⲆᐃⲆ] = ⵠᐃⵠΔ
					}
				}
			}
			var ᐃⵠᐃⲆⲆ = Δᐃᐃᐃ.ᐃᐃΔⲆᐃ;
			for (var Ⲇᐃ = ⵠⲆⵠⵠ; Ⲇᐃ < ⵠᐃⲆⵠ["books"].length; Ⲇᐃ++) {
				var ⲆⵠⲆ = ⵠᐃⲆⵠ["books"][Ⲇᐃ];
				if (0 < ⲆⵠⲆ) {
					for (var ⲆⲆᐃⲆ = 0; ᐃⵠᐃⲆⲆ.length > ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) {
						if (ᐃⵠᐃⲆⲆ[ⲆⲆᐃⲆ].id === Ⲇᐃ) ΔⵠⲆ.unlock.ⵠΔⲆΔᐃ[ⲆⲆᐃⲆ] = ΔΔΔᐃ
					}
				}
			}
			var ᐃⵠᐃⲆⲆ = Δᐃᐃᐃ.ⵠᐃⵠⲆ;
			for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠᐃⲆⵠ["bags"].length; Ⲇᐃ++) {
				var ⲆⵠⲆ = ⵠᐃⲆⵠ["bags"][Ⲇᐃ];
				if (ⲆⵠⲆ > ᐃᐃᐃ) {
					for (var ⲆⲆᐃⲆ = ⵠⵠⵠ; ⲆⲆᐃⲆ < ᐃⵠᐃⲆⲆ.length; ⲆⲆᐃⲆ++) {
						if (Ⲇᐃ === ᐃⵠᐃⲆⲆ[ⲆⲆᐃⲆ].id) ΔⵠⲆ.unlock.ⲆⲆⲆᐃⵠ[ⲆⲆᐃⲆ] = 1
					}
				}
			}
			var ᐃⵠᐃⲆⲆ = Δᐃᐃᐃ.ᐃᐃⵠⵠΔ;
			for (var Ⲇᐃ = ⵠᐃⲆⲆ; Ⲇᐃ < ⵠᐃⲆⵠ["crates"].length; Ⲇᐃ++) {
				var ⲆⵠⲆ = ⵠᐃⲆⵠ["crates"][Ⲇᐃ];
				if (ΔΔᐃᐃ < ⲆⵠⲆ) {
					for (var ⲆⲆᐃⲆ = ΔⲆⲆ; ᐃⵠᐃⲆⲆ.length > ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) {
						if (Ⲇᐃ === ᐃⵠᐃⲆⲆ[ⲆⲆᐃⲆ].id) {
							ΔⵠⲆ.unlock.ⵠⲆΔΔⲆ[ⲆⲆᐃⲆ] = 1;
							ΔⵠⲆ.unlock.ΔⵠᐃⲆΔ[ⲆⲆᐃⲆ] = ΔᐃΔⲆ
						}
					}
				}
			}
		};
		this.ΔⲆⲆΔⲆᐃⵠΔⲆ = function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ.ⵠⵠⲆⲆᐃⵠⵠ = function() {
				ⵠⲆΔᐃ(ⲆⵠⲆⲆᐃ);
				ᐃⲆᐃᐃᐃⲆᐃⵠⲆ(ΔⵠⲆ.ⲆΔᐃⵠⲆΔⲆⵠⲆ)
			};
			if (ⵠΔⵠΔⵠᐃⲆ === 1) ⵠⵠⲆΔᐃᐃᐃⲆΔ.ⵠⵠⲆⲆᐃⵠⵠ()
		};
		ⵠⵠⲆΔᐃᐃᐃⲆΔ.ⲆⵠⲆⵠΔᐃⵠΔᐃ = function() {
			ᐃΔΔΔ.buttons[ᐃΔΔΔ.ᐃΔΔᐃⵠᐃⲆ].info.active = 1;
			ᐃΔΔΔ.buttons[ᐃΔΔΔ.ΔᐃᐃⵠΔᐃΔ].info.active = ⵠⲆΔ;
			ᐃΔΔΔ.buttons[ᐃΔΔΔ.ᐃⵠΔⵠⲆⲆⵠ].info.active = 0;
			ⵠⲆΔᐃ(ⲆⵠⲆⲆᐃ)
		};
		this.ⲆΔⲆΔⲆ = function() {
			return ᐃΔΔΔ.buttons[ᐃΔΔΔ.ΔᐃᐃⵠΔᐃΔ].info.active
		};
		this.buttons[ᐃⵠ] = ΔΔⲆ(461, 105, "", [ⵠᐃ.ᐃⵠΔⵠΔⲆⵠ, ⵠᐃ.ⲆⵠᐃⲆⵠΔⲆ, ⵠᐃ.ⲆΔⲆⵠᐃⲆⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔⵠⲆ.ⲆΔⲆΔⲆ() ? ⵠⲆΔᐃ(ⲆⲆᐃᐃⵠ) : ⵠⲆΔᐃ(ⵠᐃᐃΔⲆ)
		}), -100, 80, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔΔᐃⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(157, 158, "", [ⵠᐃ.ᐃΔⲆᐃⲆⵠⵠ, ⵠᐃ.ᐃᐃⲆⵠⲆΔᐃ, ⵠᐃ.ⲆⵠᐃΔⵠᐃⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]("https://starveiopro.wikia.com/wiki/", ⵠ[437])
		}), -35, 125, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠⲆᐃΔΔΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(66, 73, "", [ⵠᐃ.ⵠᐃΔⲆⵠΔᐃ, ⵠᐃ.ᐃⲆᐃⵠⵠⵠΔ, ⵠᐃ.ᐃΔⵠⵠᐃⲆⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, -68, 340, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠⲆᐃΔΔΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(66, 73, "", [ⵠᐃ.ⲆⲆΔⵠᐃⵠⲆ, ⵠᐃ.ⲆⲆⵠⲆⲆΔⲆ, ⵠᐃ.ᐃΔᐃⲆᐃⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, -30, 340, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠⲆᐃΔΔΔ;
		this.ΔⲆᐃⵠΔᐃᐃⲆⲆ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(97, 66, "", [ⵠᐃ.ᐃΔᐃⲆⵠⵠⵠ, ⵠᐃ.ΔⲆΔⵠⲆᐃⲆ, ⵠᐃ.ⵠⲆᐃᐃⵠⲆΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(Ⲇⵠⵠᐃᐃ, undefined, ᐃΔΔΔ.ΔⵠᐃⲆⵠΔⲆ)
		}), -ⲆⵠⲆᐃᐃᐃⲆ, 151, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ΔΔᐃᐃΔᐃⵠ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(135, 66, "", [ⵠᐃ.ΔⵠΔⵠᐃΔᐃ, ⵠᐃ.ᐃᐃⲆΔᐃᐃⲆ, ⵠᐃ.ᐃⵠΔⲆⵠᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(undefined, ⲆⲆⲆΔⲆ, ᐃΔΔΔ.ΔΔᐃᐃΔᐃⵠ)
		}), 37.5, 151, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ⲆᐃⲆⵠⲆⵠⵠ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(160, 66, "", [ⵠᐃ.ⵠᐃᐃᐃᐃⵠⲆ, ⵠᐃ.ᐃⵠᐃᐃⵠⲆᐃ, ⵠᐃ.ΔⵠᐃⵠⵠⲆⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(undefined, ΔΔⵠΔΔ, ᐃΔΔΔ.ⲆᐃⲆⵠⲆⵠⵠ)
		}), 107.5, 151, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ΔⵠᐃⲆⵠΔⲆ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(207, 66, "", [ⵠᐃ.ΔⲆⲆΔᐃᐃⲆ, ⵠᐃ.ⵠΔⲆⲆΔΔᐃ, ⵠᐃ.ⵠⵠᐃΔᐃΔⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(ⵠᐃᐃᐃᐃ, undefined, ᐃΔΔΔ.ΔⵠᐃⲆⵠΔⲆ)
		}), 190.5, 151, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ΔⵠⵠⵠⵠⲆᐃ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(144, 66, "", [ⵠᐃ.ⲆΔⵠⲆΔΔⲆ, ⵠᐃ.ⲆᐃⵠⲆᐃᐃᐃ, ⵠᐃ.ΔΔᐃΔⲆᐃⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(ᐃΔΔΔ.ΔⵠⵠⵠⵠⲆᐃ)
		}), 103.5, 110, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ⵠⵠᐃⲆΔⲆΔ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(124, 66, "", [ⵠᐃ.ᐃⵠⵠⲆᐃⵠᐃ, ⵠᐃ.ᐃⵠΔᐃΔΔⵠ, ⵠᐃ.ⲆᐃᐃᐃΔΔΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(ᐃΔΔΔ.ⵠⵠᐃⲆΔⲆΔ)
		}), 177.5, 110, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ᐃΔᐃΔᐃⵠⲆ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(104, 66, "", [ⵠᐃ.ⲆⲆⲆⵠᐃᐃΔ, ⵠᐃ.ⵠᐃΔΔᐃᐃᐃ, ⵠᐃ.ⲆⵠΔΔⲆΔⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(ᐃΔΔΔ.ᐃΔᐃΔᐃⵠⲆ)
		}), 242, 110, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ΔΔΔⲆⲆΔᐃ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(46, 51, "", [ⵠᐃ.ⲆΔᐃᐃⲆⲆⵠ, ⵠᐃ.ⵠΔⲆΔᐃΔⵠ, ⵠᐃ.ᐃᐃΔⲆⲆⲆⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(ⲆⲆⵠᐃΔ, undefined, undefined, ᐃΔΔΔ.ΔΔΔⲆⲆΔᐃ)
		}), -185, 528, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ⵠⲆⲆⵠΔⲆΔ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(46, 51, "", [ⵠᐃ.ⵠᐃⲆⲆᐃΔⵠ, ⵠᐃ.ⵠⵠⲆΔⵠⵠᐃ, ⵠᐃ.ᐃᐃᐃᐃΔᐃΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(ⲆΔΔⵠᐃ, ᐃⲆⵠⲆᐃ, ⵠⲆⵠᐃⲆ, ᐃΔΔΔ.ⵠⲆⲆⵠΔⲆΔ)
		}), -149, 528, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ⵠⲆᐃⵠⵠⵠⵠ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(46, 51, "", [ⵠᐃ.ᐃⲆᐃΔⵠⲆΔ, ⵠᐃ.ΔᐃᐃⲆᐃⲆⲆ, ⵠᐃ.ᐃᐃΔⵠⵠΔⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(ⵠᐃᐃᐃᐃ, ⵠⲆⵠᐃⲆ, ᐃⲆⵠⲆᐃ, ᐃΔΔΔ.ⵠⲆᐃⵠⵠⵠⵠ)
		}), -113, 528, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ΔⲆᐃⵠⲆΔΔ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(46, 51, "", [ⵠᐃ.ΔⲆⲆᐃⵠⵠΔ, ⵠᐃ.ⵠⵠΔΔΔᐃⵠ, ⵠᐃ.ΔᐃᐃⵠⵠⵠΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(undefined, ⲆⲆⲆΔⲆ, undefined, ᐃΔΔΔ.ΔⲆᐃⵠⲆΔΔ)
		}), -77, 528, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ΔⲆⲆΔⵠⵠΔ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(46, 51, "", [ⵠᐃ.ⲆᐃΔⵠΔⲆᐃ, ⵠᐃ.ⲆΔᐃΔⲆᐃⵠ, ⵠᐃ.ΔΔΔⵠⲆⲆᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(undefined, ⵠᐃᐃᐃᐃ, undefined, ᐃΔΔΔ.ΔⲆⲆΔⵠⵠΔ)
		}), -41, 528, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ⵠⲆⲆΔⵠᐃΔ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(46, 51, "", [ⵠᐃ.ⵠⲆⲆⲆⵠΔΔ, ⵠᐃ.ⵠⲆΔⵠⲆᐃᐃ, ⵠᐃ.ⵠᐃΔⵠⲆΔᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(undefined, undefined, undefined, ᐃΔΔΔ.ⵠⲆⲆΔⵠᐃΔ)
		}), -ΔⲆⵠⵠ, 528, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(232, 352, "", [ⵠᐃ.ⲆⵠⲆⵠⵠⵠⵠ, ⵠᐃ.ᐃⵠᐃᐃⲆΔⲆ, ⵠᐃ.ᐃⲆᐃⲆΔΔᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔⵠΔᐃⲆᐃΔ(300)
		}), -330, 135, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆⲆᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(232, 352, "", [ⵠᐃ.ⵠⵠⵠⵠⵠΔⵠ, ⵠᐃ.ⵠⵠⵠᐃΔⵠᐃ, ⵠᐃ.ⵠᐃⵠⵠΔⲆⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔⵠΔᐃⲆᐃΔ(600)
		}), -195, 135, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆⲆᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(243, 374, "", [ⵠᐃ.ᐃᐃΔΔΔΔⵠ, ⵠᐃ.ᐃᐃⲆⵠⵠⵠⵠ, ⵠᐃ.ᐃΔΔⵠⲆΔⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔⵠΔᐃⲆᐃΔ(2600)
		}), -60, 130, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆⲆᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(232, 352, "", [ⵠᐃ.ΔⵠⵠΔⵠⵠᐃ, ⵠᐃ.ⲆΔⲆᐃᐃᐃΔ, ⵠᐃ.ΔⵠⲆᐃᐃΔᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔⵠΔᐃⲆᐃΔ(7e3)
		}), 78, 135, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆⲆᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(243, 374, "", [ⵠᐃ.ⲆⲆΔᐃⵠΔⵠ, ⵠᐃ.ⵠΔⵠⵠⲆᐃⵠ, ⵠᐃ.ΔⵠⲆΔⵠⵠᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔⵠΔᐃⲆᐃΔ(2e4)
		}), 213, 130, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆⲆᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(58, 64, "", [ⵠᐃ.ᐃⲆΔⲆⲆΔⵠ, ⵠᐃ.ΔΔᐃⲆΔⲆᐃ, ⵠᐃ.ᐃⵠᐃⲆΔΔⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ΔΔᐃⵠΔ)
		}), 300, 88, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆⲆᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(323, 112, "", [ⵠᐃ.ΔΔⲆⵠⲆᐃΔ, ⵠᐃ.ⲆΔⵠⵠⲆⲆΔ, ⵠᐃ.ΔΔΔᐃⵠⵠᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ᐃⲆᐃᐃᐃ);
			ⵠΔᐃᐃⵠΔⵠᐃⵠ.ᐃⲆⲆⲆᐃ()
		}), -315, 185, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃΔΔⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(323, 112, "", [ⵠᐃ.ⲆΔⵠΔⵠⲆΔ, ⵠᐃ.ⲆⵠⲆΔΔⵠΔ, ⵠᐃ.ᐃⵠΔⲆⲆΔⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(Ⲇᐃᐃᐃⵠ);
			ⲆⲆΔᐃⲆᐃⵠᐃⵠ.ᐃⲆⲆⲆᐃ()
		}), -315, 321, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃΔΔⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(323, 112, "", [ⵠᐃ.ᐃⵠⲆᐃⲆΔⵠ, ⵠᐃ.ⲆᐃᐃᐃⵠΔⵠ, ⵠᐃ.ⲆᐃᐃⲆⵠᐃⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ΔᐃⵠⵠΔ);
			ᐃⵠᐃΔⲆᐃΔᐃᐃ.ᐃⲆⲆⲆᐃ()
		}), 153, 185, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃΔΔⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(323, 112, "", [ⵠᐃ.ᐃⲆⵠᐃΔᐃⵠ, ⵠᐃ.ΔⵠΔΔΔⵠᐃ, ⵠᐃ.ΔⲆᐃⵠΔΔⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ⵠᐃᐃΔᐃ);
			ΔᐃΔΔⲆⵠⵠⵠⲆ.ᐃⲆⲆⲆᐃ()
		}), 153, 321, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃΔΔⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(323, 112, "", [ⵠᐃ.ⲆᐃΔΔⵠᐃΔ, ⵠᐃ.ΔⵠᐃⵠⲆⲆᐃ, ⵠᐃ.ⲆⵠᐃᐃⲆⵠⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ⵠⲆΔⲆΔ);
			ᐃⵠᐃⵠⲆᐃⲆⲆⵠ.ᐃⲆⲆⲆᐃ()
		}), 153, 463, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃΔΔⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(323, 112, "", [ⵠᐃ.ⵠᐃⵠⲆΔΔⵠ, ⵠᐃ.ᐃⵠΔΔᐃΔⵠ, ⵠᐃ.ΔΔᐃᐃΔⵠΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ΔⲆⲆᐃΔ);
			ΔⲆΔⵠⵠⵠΔⵠᐃ.ᐃⲆⲆⲆᐃ()
		}), -315, 463, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃΔΔⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(327, 117, "", [ⵠᐃ.ᐃⲆᐃⵠⵠⵠᐃ, ⵠᐃ.ΔΔᐃΔΔⵠᐃ, ⵠᐃ.ⵠΔⵠⵠΔⲆᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ⵠΔᐃΔⲆᐃⲆ)
		}), 155, 70, ΔⲆⲆΔ, ᐃᐃᐃΔ);
		this.buttons[ᐃⵠ++].view = ⲆⵠⲆⲆᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(130, 129, "", [ⵠᐃ.ΔΔⲆⲆⲆⲆⲆ, ⵠᐃ.ᐃΔⵠᐃΔⵠᐃ, ⵠᐃ.ⲆᐃⲆⲆⲆᐃΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔᐃΔⵠΔ(ⵠⲆᐃⲆΔΔⵠ, ⵠⲆᐃᐃ, ⵠ[181]);
			ⵠⲆΔᐃ(ΔΔᐃⵠΔ)
		}), 10, 40, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⲆᐃⲆΔΔⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(130, 129, "", [ⵠᐃ.ΔΔⲆⲆⲆⲆⲆ, ⵠᐃ.ᐃΔⵠᐃΔⵠᐃ, ⵠᐃ.ⲆᐃⲆⲆⲆᐃΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔᐃΔⵠΔ(ᐃᐃⵠⲆΔⲆᐃ, ⵠⲆᐃᐃ, ⵠ[181]);
			ⵠⲆΔᐃ(ΔΔᐃⵠΔ)
		}), ⵠⲆⵠᐃⵠ, 40, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃᐃⵠⲆΔⲆᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(115, 73, "", [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ΔΔᐃⵠΔ)
		}), 200, 140, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠᐃΔⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(524, 110, "", [ⵠᐃ.ΔⵠΔⵠⲆᐃΔ, ⵠᐃ.ⲆΔᐃΔΔⵠᐃ, ⵠᐃ.ⲆⲆΔΔⲆᐃΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆⲆⵠΔⲆⲆ("Atlanta")
		}), -265, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠᐃΔⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(523, 110, "", [ⵠᐃ.ᐃᐃᐃⵠⲆΔΔ, ⵠᐃ.ΔᐃᐃΔⲆΔⲆ, ⵠᐃ.ᐃᐃᐃⵠⵠᐃΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆⲆⵠΔⲆⲆ("LosAngeles")
		}), ᐃⵠᐃⲆ, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠᐃΔⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(344, 110, "", [ⵠᐃ.ⵠⵠᐃᐃⲆⵠⲆ, ⵠᐃ.ⲆᐃⵠᐃΔⵠⵠ, ⵠᐃ.ΔΔᐃᐃΔΔⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆⲆⵠΔⲆⲆ("Frankfurt")
		}), -265, 365, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠᐃΔⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(344, 110, "", [ⵠᐃ.ⲆⵠⲆⲆⲆᐃᐃ, ⵠᐃ.ΔⲆⵠᐃΔⲆΔ, ⵠᐃ.ⲆⲆᐃⵠⲆΔΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆⲆⵠΔⲆⲆ("Osaka")
		}), ⵠⵠⲆⲆⵠ, 365, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠᐃΔⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(344, 110, "", [ⵠᐃ.ΔⵠⵠΔⲆⵠⵠ, ⵠᐃ.ᐃΔⵠΔⵠΔΔ, ⵠᐃ.ⵠⵠⵠΔΔⲆΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆⲆⵠΔⲆⲆ("Sydney")
		}), -86, 365, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠᐃΔⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(115, 73, "", [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ⵠⵠᐃΔⵠ)
		}), 224, 140, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔΔΔᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(230, 352, "", [ⵠᐃ.ⲆⵠⵠΔⵠⵠⵠ, ⵠᐃ.ⵠΔⲆᐃΔᐃᐃ, ⵠᐃ.ᐃΔⵠⲆᐃⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔⵠΔᐃⲆᐃΔ(350)
		}), -280, 240, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔΔΔᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(230, 352, "", [ⵠᐃ.ⲆΔΔΔⵠⵠᐃ, ⵠᐃ.ⲆⲆⵠΔᐃᐃⲆ, ⵠᐃ.ⲆᐃΔⵠⵠΔⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔⵠΔᐃⲆᐃΔ(700)
		}), -130, 240, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔΔΔᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(230, 352, "", [ⵠᐃ.ΔΔⲆΔⵠⵠⲆ, ⵠᐃ.ⲆᐃⲆⵠⲆⲆⵠ, ⵠᐃ.ⵠΔΔᐃΔΔΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔⵠΔᐃⲆᐃΔ(1400)
		}), 20, 240, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔΔΔᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(230, 352, "", [ⵠᐃ.ⵠᐃΔΔΔⲆⵠ, ⵠᐃ.ⵠΔⵠⵠΔᐃⲆ, ⵠᐃ.ΔⲆΔⵠⲆΔΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔⵠΔᐃⲆᐃΔ(3e3)
		}), 170, 240, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔΔΔᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(105, 119, "", [ⵠᐃ.ⵠΔᐃᐃⵠΔΔ, ⵠᐃ.ᐃᐃⲆⲆᐃΔⵠ, ⵠᐃ.ⵠᐃᐃⲆⵠⲆⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			const ⵠᐃⲆΔⵠ = document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[473]).value.split(ⵠ[203]);
			const ⵠⵠⵠⲆⲆ = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[86]][ⲆᐃⲆⵠΔΔⲆ[169]]("textarea");
			ⵠⵠⵠⲆⲆ.value = ⲆⲆᐃⵠᐃⲆΔ + "?server=" + ⵠᐃⲆΔⵠ[1] + ⵠ[526] + ⵠᐃⲆΔⵠ[0];
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[86]][ⲆᐃⲆⵠΔΔⲆ[207]][ⲆᐃⲆⵠΔΔⲆ[263]](ⵠⵠⵠⲆⲆ);
			ⵠⵠⵠⲆⲆ.select();
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[86]][ⲆᐃⲆⵠΔΔⲆ[3]]("copy");
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[86]][ⲆᐃⲆⵠΔΔⲆ[207]][ⲆᐃⲆⵠΔΔⲆ[45]](ⵠⵠⵠⲆⲆ)
		}), 105, 310, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠⵠΔΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(105, 119, "", [ⵠᐃ.ΔⲆᐃⲆΔⵠΔ, ⵠᐃ.ΔᐃⲆⲆⲆΔⵠ, ⵠᐃ.ⵠⲆⲆⲆᐃᐃᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⲆⲆⵠⵠᐃⵠⵠⵠΔ()
		}), 235, 310, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠⵠΔΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(105, 119, "", [ⵠᐃ.ⲆᐃᐃᐃⵠΔΔ, ⵠᐃ.ΔⵠΔⲆᐃᐃⲆ, ⵠᐃ.ⵠΔⲆΔⵠΔᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔⵠΔᐃⲆⵠⲆⵠⵠ()
		}), 170, 310, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠⵠΔΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(204, 115, "", [ⵠᐃ.ᐃⵠΔⵠᐃⲆⵠ, ⵠᐃ.ⵠΔΔⲆΔⵠᐃ, ⵠᐃ.ᐃΔΔᐃΔⲆⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]("./commands.html", ⵠ[437])
		}), -265, 490, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠⵠΔΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(145, 69, "", [ⵠᐃ.ᐃⲆᐃⲆᐃᐃΔ, ⵠᐃ.ᐃⵠᐃΔⲆⵠΔ, ⵠᐃ.ᐃⲆᐃᐃᐃᐃⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ΔⵠⵠⲆᐃⲆⵠ)
		}), -210, 170, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔΔᐃⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(145, 69, "", [ⵠᐃ.ΔΔⵠⲆΔⲆⵠ, ⵠᐃ.ⵠᐃΔⲆⵠⲆⵠ, ⵠᐃ.ⲆᐃᐃᐃΔᐃᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ⵠⲆΔᐃⵠⲆΔ)
		}), 70, 170, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔΔᐃⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(145, 69, "", [ⵠᐃ.ⵠⲆᐃⵠᐃⵠᐃ, ⵠᐃ.ⵠΔΔⲆΔΔΔ, ⵠᐃ.ⵠⵠᐃⵠⵠᐃⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ᐃⵠᐃᐃᐃᐃⵠ)
		}), 70, 204, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔΔᐃⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(145, 69, "", [ⵠᐃ.ⵠⲆⵠᐃΔⲆΔ, ⵠᐃ.ⲆⲆⵠⵠⵠⵠⵠ, ⵠᐃ.ⲆΔⵠᐃⵠⲆΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ΔⵠᐃⵠᐃⲆΔ)
		}), -210, 204, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔΔᐃⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(145, 69, "", [ⵠᐃ.ⵠⲆⵠᐃΔⲆΔ, ⵠᐃ.ⲆⲆⵠⵠⵠⵠⵠ, ⵠᐃ.ⲆΔⵠᐃⵠⲆΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ⵠΔΔⲆⵠⲆᐃ)
		}), 70, 238, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔΔᐃⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(145, 69, "", [ⵠᐃ.ⵠⲆⵠᐃΔⲆΔ, ⵠᐃ.ⲆⲆⵠⵠⵠⵠⵠ, ⵠᐃ.ⲆΔⵠᐃⵠⲆΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔⵠⲆ.ⲆΔⲆΔⲆ() ? ᐃΔΔⵠΔΔΔ(ⵠⵠⲆⵠ, 300) : ⵠⲆΔᐃ(ⵠᐃᐃΔⲆ)
		}), 307, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔΔᐃⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(145, 69, "", [ⵠᐃ.ᐃᐃⲆᐃᐃⲆⵠ, ⵠᐃ.ᐃᐃᐃⵠΔᐃⲆ, ⵠᐃ.ΔᐃΔⲆΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ⵠⵠᐃⵠᐃΔᐃ)
		}), -210, 238, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔΔᐃⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(145, 69, "", [ⵠᐃ.ᐃᐃⲆᐃᐃⲆⵠ, ⵠᐃ.ᐃᐃᐃⵠΔᐃⲆ, ⵠᐃ.ΔᐃΔⲆΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			if (ΔⵠⲆ.ⲆΔⲆΔⲆ()) ᐃΔΔⵠΔΔΔ(ΔⲆᐃⲆ, 600);
			else ⵠⲆΔᐃ(ⵠᐃᐃΔⲆ)
		}), 307, 239, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔΔᐃⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(192, 101, "", [ⵠᐃ.ⲆⵠⵠⵠⲆᐃⵠ, ⵠᐃ.ⲆⲆⵠⲆⵠᐃⵠ, ⵠᐃ.ᐃᐃᐃΔⵠΔⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⵠᐃⵠⲆᐃⲆ()
		}), -100, 250, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔⵠⵠΔᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(192, 104, "", [ⵠᐃ.ⲆΔⵠⲆⵠⲆΔ, ⵠᐃ.ΔΔΔⲆᐃⲆⲆ, ⵠᐃ.ΔⲆⲆΔᐃⲆᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⵠᐃⵠⲆᐃⲆ()
		}), -ⵠⵠⲆⲆⵠ, 239, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠⵠᐃΔⲆⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(192, 101, "", [ⵠᐃ.ΔᐃⲆⵠᐃⵠΔ, ⵠᐃ.ΔᐃΔⲆᐃⵠᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ᐃⵠᐃⵠⵠ)
		}), ΔⲆⲆΔΔ, 250, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔⵠⵠΔᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(192, 104, "", [ⵠᐃ.ᐃΔⲆⲆΔⵠᐃ, ⵠᐃ.ᐃⲆᐃΔⵠⵠΔ, ⵠᐃ.ⲆΔⵠⲆΔΔⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ᐃⵠᐃⵠⵠ)
		}), ⲆⲆⵠⲆⵠ, 239, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠⵠᐃΔⲆⵠ;
		ⵠΔΔⵠⲆ = [];
		ⵠΔΔⵠⲆ[ΔΔⵠ.ᐃⵠⲆⲆⲆ] = [ⵠᐃ.ⵠⵠᐃⵠⵠⵠΔ, ⵠᐃ.ᐃⵠΔⵠⲆⵠᐃ, ⵠᐃ.ᐃⵠᐃⲆⵠⵠᐃ];
		ⵠΔΔⵠⲆ[ΔΔⵠ.ⲆⵠᐃΔ] = [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ];
		ⵠΔΔⵠⲆ[ΔΔⵠ.ⵠⵠΔΔ] = [ⵠᐃ.ⵠΔΔⵠⵠⵠⲆ, ⵠᐃ.ⲆΔⵠᐃⲆⲆᐃ, ⵠᐃ.ᐃᐃⲆΔⲆⲆᐃ];
		ⵠΔΔⵠⲆ[ΔΔⵠ.ᐃΔᐃⲆ] = [ⵠᐃ.ᐃΔᐃΔᐃⲆᐃ, ⵠᐃ.ΔΔΔⵠΔⵠΔ, ⵠᐃ.ⵠΔΔⵠⵠⵠⵠ];
		ⵠΔΔⵠⲆ[ΔΔⵠ.ⲆᐃⲆᐃ] = [ⵠᐃ.ᐃⵠᐃᐃⵠⵠᐃ, ⵠᐃ.ᐃⲆΔⲆⲆΔΔ, ⵠᐃ.ᐃⵠⵠⲆΔⵠᐃ];
		ⵠΔΔⵠⲆ[ΔΔⵠ.ⲆΔΔᐃ] = [ⵠᐃ.ᐃΔΔᐃΔᐃΔ, ⵠᐃ.ⵠΔΔⲆⵠᐃⲆ, ⵠᐃ.ⵠⵠⵠⵠΔΔᐃ];
		ⵠΔΔⵠⲆ[ΔΔⵠ.ⲆᐃⲆⲆ] = [ⵠᐃ.ᐃⵠᐃⲆⵠΔⵠ, ⵠᐃ.ⲆᐃⵠⵠΔⲆⵠ, ⵠᐃ.ⲆⵠΔᐃⲆⵠᐃ];
		ⵠΔΔⵠⲆ[ΔΔⵠ.ᐃΔⵠⵠⵠ] = [ⵠᐃ.ⲆΔᐃΔⲆⲆΔ, ⵠᐃ.ᐃᐃΔⵠⲆⲆΔ, ⵠᐃ.ᐃΔᐃⲆⵠᐃⲆ];
		ⵠΔΔⵠⲆ[ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ] = [ⵠᐃ.ⲆΔⵠΔⵠΔⵠ, ⵠᐃ.ΔΔΔΔΔΔΔ, ⵠᐃ.ᐃⵠΔⲆⵠᐃΔ];
		ⵠΔᐃⵠᐃᐃⲆ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, -29, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⲆᐃᐃᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ΔΔⵠⵠⲆ, -29, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⲆᐃᐃᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, -29, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⲆᐃᐃᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ΔΔΔᐃᐃ, 65, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⲆᐃᐃᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 65, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⲆᐃᐃᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 65, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⲆᐃᐃᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 159, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⲆᐃᐃᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ΔΔⵠⵠⲆ, 159, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⲆᐃᐃᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 159, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⲆᐃᐃᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(39, 122, "", [ⵠᐃ.ⲆᐃⵠⵠᐃⲆᐃ, ⵠᐃ.ⲆⲆⵠⲆⲆᐃⵠ, ⵠᐃ.ᐃΔΔⵠⲆΔⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, -61, 315, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⲆᐃᐃᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(39, 122, "", [ⵠᐃ.Ⲇᐃᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃΔΔⲆΔΔⲆ, ⵠᐃ.Ⲇᐃᐃⵠᐃⵠᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 260, 315, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⲆᐃᐃᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(115, 73, "", [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ᐃΔΔⵠΔ)
		}), -320, 470, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⲆᐃᐃᐃ;
		ⲆⵠⵠⵠΔΔⵠΔᐃ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, Ⲇⵠⵠᐃᐃ, -29, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = Ⲇᐃᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⵠΔⲆⵠΔ, -29, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = Ⲇᐃᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, -29, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = Ⲇᐃᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 65, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = Ⲇᐃᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⲆⲆⵠⵠᐃ, 65, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = Ⲇᐃᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ΔΔⵠⵠⲆ, 65, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = Ⲇᐃᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⲆⲆⲆΔⲆ, 159, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = Ⲇᐃᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⲆⲆⵠⵠᐃ, 159, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = Ⲇᐃᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 159, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = Ⲇᐃᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(39, 122, "", [ⵠᐃ.ⲆᐃⵠⵠᐃⲆᐃ, ⵠᐃ.ⲆⲆⵠⲆⲆᐃⵠ, ⵠᐃ.ᐃΔΔⵠⲆΔⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, -61, 315, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = Ⲇᐃᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(39, 122, "", [ⵠᐃ.Ⲇᐃᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃΔΔⲆΔΔⲆ, ⵠᐃ.Ⲇᐃᐃⵠᐃⵠᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 260, 315, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = Ⲇᐃᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(115, 73, "", [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ᐃΔΔⵠΔ)
		}), -320, 470, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = Ⲇᐃᐃᐃⵠ;
		ⲆⲆᐃⵠⵠΔΔⵠᐃ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ΔΔΔᐃᐃ, -29, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⲆⲆᐃΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⵠⵠⲆΔⲆ, -29, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⲆⲆᐃΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, -29, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⲆⲆᐃΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 65, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⲆⲆᐃΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ΔΔΔᐃᐃ, 65, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⲆⲆᐃΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 65, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⲆⲆᐃΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 159, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⲆⲆᐃΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 159, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⲆⲆᐃΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ΔΔⵠΔΔ, 159, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⲆⲆᐃΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(39, 122, "", [ⵠᐃ.ⲆᐃⵠⵠᐃⲆᐃ, ⵠᐃ.ⲆⲆⵠⲆⲆᐃⵠ, ⵠᐃ.ᐃΔΔⵠⲆΔⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ΔΔᐃⵠⵠ, -61, 315, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⲆⲆᐃΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(39, 122, "", [ⵠᐃ.Ⲇᐃᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃΔΔⲆΔΔⲆ, ⵠᐃ.Ⲇᐃᐃⵠᐃⵠᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⲆⲆⵠᐃΔ, 260, 315, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⲆⲆᐃΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(115, 73, "", [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ᐃΔΔⵠΔ)
		}), -320, 470, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⲆⲆᐃΔ;
		ΔᐃᐃⲆⲆΔᐃᐃⵠ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⲆⲆⵠⵠᐃ, -29, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔᐃⵠⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, -29, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔᐃⵠⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ΔΔⵠΔΔ, -29, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔᐃⵠⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 65, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔᐃⵠⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 65, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔᐃⵠⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⵠΔⵠⵠⲆ, 65, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔᐃⵠⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 159, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔᐃⵠⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 159, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔᐃⵠⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⲆΔΔⵠᐃ, 159, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔᐃⵠⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(39, 122, "", [ⵠᐃ.ⲆᐃⵠⵠᐃⲆᐃ, ⵠᐃ.ⲆⲆⵠⲆⲆᐃⵠ, ⵠᐃ.ᐃΔΔⵠⲆΔⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, -61, 315, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔᐃⵠⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(39, 122, "", [ⵠᐃ.Ⲇᐃᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃΔΔⲆΔΔⲆ, ⵠᐃ.Ⲇᐃᐃⵠᐃⵠᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ᐃⵠᐃᐃⲆ, 260, 315, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔᐃⵠⵠΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(115, 73, "", [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ᐃΔΔⵠΔ)
		}), -320, 470, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔᐃⵠⵠΔ;
		ⲆⲆⲆⵠΔⵠΔᐃⲆ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ΔΔΔᐃᐃ, -29, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠᐃᐃΔᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ΔΔⵠⵠⲆ, -29, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠᐃᐃΔᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, -29, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠᐃᐃΔᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⵠΔⵠⵠⲆ, 65, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠᐃᐃΔᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⲆⲆⲆΔⲆ, 65, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠᐃᐃΔᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 65, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠᐃᐃΔᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ΔⲆΔⵠᐃ, 159, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠᐃᐃΔᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ΔΔᐃⵠⵠ, 159, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠᐃᐃΔᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 159, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠᐃᐃΔᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(39, 122, "", [ⵠᐃ.ⲆᐃⵠⵠᐃⲆᐃ, ⵠᐃ.ⲆⲆⵠⲆⲆᐃⵠ, ⵠᐃ.ᐃΔΔⵠⲆΔⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⵠⵠⲆΔⲆ, -61, 315, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠᐃᐃΔᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(39, 122, "", [ⵠᐃ.Ⲇᐃᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃΔΔⲆΔΔⲆ, ⵠᐃ.Ⲇᐃᐃⵠᐃⵠᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 260, 315, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠᐃᐃΔᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(115, 73, "", [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ᐃΔΔⵠΔ)
		}), -320, 470, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠᐃᐃΔᐃ;
		ΔⲆᐃᐃⵠΔⲆᐃᐃ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, -29, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⲆΔⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, -29, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⲆΔⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⲆⲆⲆΔⲆ, -29, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⲆΔⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 65, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⲆΔⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 65, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⲆΔⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⵠⵠⲆᐃᐃ, 65, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⲆΔⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 159, 205, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⲆΔⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ΔΔⵠⵠⲆ, 159, 300, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⲆΔⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(178, 182, "", [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, undefined, 159, 395, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⲆΔⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(39, 122, "", [ⵠᐃ.ⲆᐃⵠⵠᐃⲆᐃ, ⵠᐃ.ⲆⲆⵠⲆⲆᐃⵠ, ⵠᐃ.ᐃΔΔⵠⲆΔⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⵠⲆⲆⲆⲆ, -61, 315, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⲆΔⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(39, 122, "", [ⵠᐃ.Ⲇᐃᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃΔΔⲆΔΔⲆ, ⵠᐃ.Ⲇᐃᐃⵠᐃⵠᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, ⲆⲆⲆΔⲆ, 260, 315, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⲆΔⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(115, 73, "", [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ᐃΔΔⵠΔ)
		}), -320, 470, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⲆΔⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(260, 260, "", [ⵠᐃ.ᐃⲆⲆⲆⵠᐃⲆ, ⵠᐃ.ΔΔᐃⲆΔᐃⵠ, ⵠᐃ.ⲆⵠⲆⵠⵠⵠⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔⵠⲆ.ⲆΔⲆΔⲆ() ? ΔⵠⲆⵠⲆⵠⵠ(3, 50) : ⵠⲆΔᐃ(ⵠᐃᐃΔⲆ)
		}), -260 / 4, 150 + 448 / ᐃⲆⲆΔΔ - 260 / ᐃⲆⵠᐃⵠ, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⲆΔᐃⵠⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(115, 73, "", [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ΔΔᐃⵠΔ)
		}), 309, 180, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⲆΔᐃⵠⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(260, 260, "", [ⵠᐃ.ΔΔΔⵠΔⲆⲆ, ⵠᐃ.ⵠⵠⲆᐃᐃⵠΔ, ⵠᐃ.ⲆᐃΔⵠⲆⲆᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			if (ΔⵠⲆ.ⲆΔⲆΔⲆ()) ΔⵠⲆⵠⲆⵠⵠ(0, ᐃⲆᐃⵠΔ);
			else ⵠⲆΔᐃ(ⵠᐃᐃΔⲆ)
		}), -260 / 4, 150 + 112 - 260 / 4, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⵠⵠⲆᐃⲆⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(115, 73, "", [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ΔΔᐃⵠΔ)
		}), 309, 180, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⵠⵠⲆᐃⲆⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(260, 260, "", [ⵠᐃ.ᐃΔΔⲆⲆⲆⵠ, ⵠᐃ.ⵠΔⲆΔᐃΔᐃ, ⵠᐃ.ⲆⵠⵠⲆᐃⲆⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔⵠⲆ.ⲆΔⲆΔⲆ() ? ΔⵠⲆⵠⲆⵠⵠ(4, 150) : ⵠⲆΔᐃ(ⵠᐃᐃΔⲆ)
		}), -260 / 4, 150 + 448 / ⲆΔᐃΔⵠ - 260 / Ⲇⵠⵠⵠ, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃᐃᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(115, 73, "", [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ΔΔᐃⵠΔ)
		}), 309, 180, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃᐃᐃᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(260, 260, "", [ⵠᐃ.ᐃⲆΔⵠᐃᐃⵠ, ⵠᐃ.ΔᐃΔⵠᐃⲆⲆ, ⵠᐃ.ⵠΔⲆⲆΔⲆⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ΔⵠⲆ.ⲆΔⲆΔⲆ() ? ΔⵠⲆⵠⲆⵠⵠ(1, 300) : ⵠⲆΔᐃ(ⵠᐃᐃΔⲆ)
		}), -260 / ⵠᐃΔⲆ, 150 + 448 / 4 - 260 / ᐃⵠⵠⵠᐃ, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⵠᐃⵠᐃⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(115, 73, "", [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ΔΔᐃⵠΔ)
		}), 309, 180, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔⵠᐃⵠᐃⲆΔ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(260, 260, "", [ⵠᐃ.ᐃⵠⲆⵠⵠΔⲆ, ⵠᐃ.ᐃⵠⵠⵠⲆⲆⵠ, ⵠᐃ.ⲆⲆΔⲆΔⲆⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			if (ΔⵠⲆ.ⲆΔⲆΔⲆ()) ΔⵠⲆⵠⲆⵠⵠ(2, 600);
			else ⵠⲆΔᐃ(ⵠᐃᐃΔⲆ)
		}), -260 / ⵠᐃΔⲆ, 150 + 448 / 4 - 260 / 4, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠᐃⵠᐃΔᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(115, 73, "", [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ΔΔᐃⵠΔ)
		}), 309, 180, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠⵠᐃⵠᐃΔᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(260, 260, "", [ⵠᐃ.ᐃⲆΔⵠᐃᐃⵠ, ⵠᐃ.ΔᐃΔⵠᐃⲆⲆ, ⵠᐃ.ⵠΔⲆⲆΔⲆⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			if (ΔⵠⲆ.ⲆΔⲆΔⲆ()) ΔⵠⲆⵠⲆⵠⵠ(ΔΔᐃᐃⵠ, 300);
			else ⵠⲆΔᐃ(ⵠᐃᐃΔⲆ)
		}), -260 / ⲆᐃᐃΔⵠ, 150 + 448 / ᐃᐃⵠΔ - 260 / ⵠᐃΔⲆ, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠΔΔⲆⵠⲆᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(115, 73, "", [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⲆΔᐃ(ΔΔᐃⵠΔ)
		}), 309, 180, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⵠΔΔⲆⵠⲆᐃ;
		var ΔⲆⵠΔⲆᐃⲆⵠΔ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(46, 51, "", [ⵠᐃ.ᐃΔΔⲆᐃⵠⵠ, ⵠᐃ.ΔΔᐃⲆⲆⲆⲆ, ⵠᐃ.Δⵠᐃᐃⵠⵠᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⲆᐃⵠᐃⲆ(ⵠⲆⵠᐃⲆ, 0)
		}), -305, 132, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃⵠⵠ;
		var ΔⵠᐃⵠⵠΔⲆⵠΔ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(46, 51, "", [ⵠᐃ.ⲆⲆΔᐃⵠⲆΔ, ⵠᐃ.ⲆⵠΔⵠⲆⵠⲆ, ⵠᐃ.ᐃⵠΔⵠΔᐃΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⲆᐃⵠᐃⲆ(undefined, 1)
		}), -273, 132, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃⵠⵠ;
		var ᐃⲆΔΔⵠΔΔⵠⲆ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(46, 51, "", [ⵠᐃ.ⵠⲆΔΔΔΔⵠ, ⵠᐃ.ⵠⲆΔᐃΔᐃᐃ, ⵠᐃ.ΔⲆᐃⵠᐃΔΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⲆᐃⵠᐃⲆ(undefined, ΔᐃΔᐃ)
		}), -241, 132, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃⵠⵠ;
		var ⵠΔⲆΔⵠⲆΔⲆⲆ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(46, 51, "", [ⵠᐃ.ⵠᐃⵠⲆᐃⲆᐃ, ⵠᐃ.ⲆᐃⵠⵠΔⲆᐃ, ⵠᐃ.ⵠᐃⲆⲆᐃⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⲆᐃⵠᐃⲆ(undefined, ᐃⲆᐃΔ)
		}), -305, 165, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃⵠⵠ;
		var ⵠⵠⲆΔⵠⵠΔⵠⵠ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(46, 51, "", [ⵠᐃ.ⲆⲆᐃⲆⵠΔΔ, ⵠᐃ.ΔΔᐃⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠᐃⲆⵠⲆⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⲆᐃⵠᐃⲆ(ᐃΔᐃΔΔᐃΔ, 4)
		}), -273, 165, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃⵠⵠ;
		var ΔⵠⲆⲆⲆⲆΔⲆᐃ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(46, 51, "", [ⵠᐃ.ⲆᐃᐃⲆⲆⲆⲆ, ⵠᐃ.ᐃⵠᐃⲆⲆⵠΔ, ⵠᐃ.ᐃⲆΔⲆⵠⲆⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⲆᐃⵠᐃⲆ(undefined, 5)
		}), -241, 165, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃⵠⵠ;
		var ⵠⲆⲆⲆⲆⲆΔⲆⵠ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(460, 73, "", [ⵠᐃ.ⲆⲆΔᐃΔᐃⵠ, ⵠᐃ.ⲆⵠᐃᐃⵠⵠΔ, ⵠᐃ.ⵠⲆⵠᐃᐃΔᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⲆᐃⵠᐃⲆ(-ⲆΔΔΔ)
		}), -180, 170, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃⵠⵠ;
		var ᐃⲆΔᐃⲆⵠⵠΔΔ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(222, 68, "", [ⵠᐃ.ⲆᐃΔⵠⲆⲆⲆ, ⵠᐃ.ⲆⵠΔⵠⵠᐃΔ, ⵠᐃ.ⵠΔⲆᐃⲆⵠⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⲆᐃⵠᐃⲆ(ΔᐃᐃΔ.ᐃΔⵠᐃᐃ)
		}), -180, 215, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃⵠⵠ;
		var ᐃⲆΔⲆⵠⵠΔᐃΔ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(222, 68, "", [ⵠᐃ.ᐃⵠⵠⲆΔΔΔ, ⵠᐃ.ΔⵠⲆᐃⲆⵠΔ, ⵠᐃ.ΔⲆᐃⵠⲆⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⲆᐃⵠᐃⲆ(ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ)
		}), -180, 260, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃⵠⵠ;
		var ΔΔⵠΔᐃᐃⵠΔΔ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(222, 68, "", [ⵠᐃ.ⲆⲆᐃΔⵠⵠΔ, ⵠᐃ.ⲆᐃΔⲆⲆⵠⲆ, ⵠᐃ.ⵠⲆⲆⵠⲆᐃⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⲆᐃⵠᐃⲆ(ΔᐃᐃΔ.ᐃΔⲆⲆᐃ)
		}), -60, 215, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃⵠⵠ;
		var ΔⵠΔΔⵠⲆⵠΔⵠ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(222, 68, "", [ⵠᐃ.ⵠᐃΔᐃⵠΔⵠ, ⵠᐃ.ᐃⲆΔΔᐃⵠΔ, ⵠᐃ.ⲆΔΔⵠᐃⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⲆᐃⵠᐃⲆ(ΔᐃᐃΔ.ᐃᐃΔⲆΔ)
		}), -60, 260, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ᐃⵠᐃⵠⵠ;
		this.ᐃⵠⵠⵠⲆⵠΔ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(143, 66, "", [ⵠᐃ.ⲆΔᐃΔΔΔΔ, ⵠᐃ.ᐃᐃⵠᐃΔΔⵠ, ⵠᐃ.ᐃΔᐃⲆⵠⲆΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(undefined, ᐃΔΔΔ.ᐃⵠⵠⵠⲆⵠΔ)
		}), -298, 110, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ᐃΔᐃΔⲆᐃⵠ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(104, 66, "", [ⵠᐃ.ᐃΔᐃⲆⲆᐃΔ, ⵠᐃ.ⲆΔⲆⵠⲆⵠΔ, ⵠᐃ.ᐃΔΔⵠΔΔⲆ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(undefined, ᐃΔΔΔ.ᐃΔᐃΔⲆᐃⵠ)
		}), -223, 110, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ᐃΔⲆⵠᐃᐃⵠ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(110, 66, "", [ⵠᐃ.ⲆΔⵠΔⲆᐃⲆ, ⵠᐃ.ᐃᐃΔᐃΔᐃᐃ, ⵠᐃ.ΔΔⵠΔⵠⲆⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(ΔΔⵠΔΔ, ᐃΔΔΔ.ᐃΔⲆⵠᐃᐃⵠ)
		}), -168, 110, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ⵠᐃⵠⲆⵠᐃᐃ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(88, 66, "", [ⵠᐃ.ⵠΔΔᐃᐃⲆΔ, ⵠᐃ.ⲆⵠᐃΔΔᐃⲆ, ⵠᐃ.ⲆⵠⲆΔΔⵠᐃ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(undefined, ᐃΔΔΔ.ⵠᐃⵠⲆⵠᐃᐃ)
		}), -110, 110, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.ⵠΔⲆΔΔⲆΔ = ᐃⵠ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(88, 66, "", [ⵠᐃ.ΔⵠᐃΔⵠᐃⲆ, ⵠᐃ.ΔⲆᐃⲆᐃⵠᐃ, ⵠᐃ.ᐃΔⵠΔᐃⵠⵠ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ᐃⲆᐃᐃⵠ(ΔΔᐃⵠⵠ, ᐃΔΔΔ.ⵠΔⲆΔΔⲆΔ)
		}), -63, 110, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ⲆΔᐃᐃᐃ;
		this.buttons[ᐃⵠ] = ΔΔⲆ(86, 44, "", [ⵠᐃ.ⵠᐃᐃΔΔΔᐃ, ⵠᐃ.ⲆΔᐃⵠⲆⲆᐃ, ⵠᐃ.ᐃⲆⵠᐃⲆᐃΔ], ⲆⵠⵠⲆ, ⵠᐃⵠⵠ, (function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[36]]("./terms.html", ⵠ[437])
		}), 349, 290, ⲆⵠⵠΔ | ᐃΔᐃᐃ, ⵠⲆᐃᐃ);
		this.buttons[ᐃⵠ++].view = ΔΔᐃⵠΔ;
		var ⵠΔᐃᐃⵠΔⵠᐃⵠ = new ⲆΔⵠⵠⵠⵠᐃ(Δᐃᐃᐃ.ⵠᐃΔⲆΔ, ⵠΔᐃⵠᐃᐃⲆ, (function(ⲆⵠⲆ) {
			ᐃΔΔΔ.ⲆΔⵠⵠ = ⲆⵠⲆ;
			if (ᐃΔΔΔ.unlock.ⲆΔⵠⵠ[ⲆⵠⲆ] === 1) ᐃΔΔⵠ.set("starve_skin", "" + ⲆⵠⲆ, {
				expires: 30
			})
		}), this.ⲆΔⵠⵠ, this.unlock.ⲆΔⵠⵠ);
		var ᐃⵠᐃΔⲆᐃΔᐃᐃ = new ⲆΔⵠⵠⵠⵠᐃ(Δᐃᐃᐃ.ⵠᐃⵠⲆ, ΔᐃᐃⲆⲆΔᐃᐃⵠ, (function(ⲆⵠⲆ) {
			ᐃΔΔΔ.ⲆⲆⲆᐃⵠ = ⲆⵠⲆ;
			if (ᐃΔΔΔ.unlock.ⲆⲆⲆᐃⵠ[ⲆⵠⲆ] === ΔⵠΔ) ᐃΔΔⵠ.set("starve_bag", "" + ⲆⵠⲆ, {
				expires: 30
			})
		}), this.ⲆⲆⲆᐃⵠ, this.unlock.ⲆⲆⲆᐃⵠ);
		var ΔᐃΔΔⲆⵠⵠⵠⲆ = new ⲆΔⵠⵠⵠⵠᐃ(Δᐃᐃᐃ.ᐃᐃΔⲆᐃ, ⲆⲆⲆⵠΔⵠΔᐃⲆ, (function(ⲆⵠⲆ) {
			ᐃΔΔΔ.ⵠΔⲆΔᐃ = ⲆⵠⲆ;
			if (ᐃΔΔΔ.unlock.ⵠΔⲆΔᐃ[ⲆⵠⲆ] === ⵠᐃⵠΔ) ᐃΔΔⵠ.set("starve_book", "" + ⲆⵠⲆ, {
				expires: 30
			})
		}), this.ⵠΔⲆΔᐃ, this.unlock.ⵠΔⲆΔᐃ);
		var ᐃⵠᐃⵠⲆᐃⲆⲆⵠ = new ⲆΔⵠⵠⵠⵠᐃ(Δᐃᐃᐃ.ᐃᐃⵠⵠΔ, ΔⲆᐃᐃⵠΔⲆᐃᐃ, (function(ⲆⵠⲆ) {
			ᐃΔΔΔ.ΔⵠᐃⲆΔ = ⲆⵠⲆ;
			if (ᐃΔΔΔ.unlock.ΔⵠᐃⲆΔ[ⲆⵠⲆ] === 1) ᐃΔΔⵠ.set("starve_dead", "" + ⲆⵠⲆ, {
				expires: 30
			})
		}), this.ΔⵠᐃⲆΔ, this.unlock.ΔⵠᐃⲆΔ);
		var ΔⲆΔⵠⵠⵠΔⵠᐃ = new ⲆΔⵠⵠⵠⵠᐃ(Δᐃᐃᐃ.ᐃᐃⵠⵠΔ, ⲆⲆᐃⵠⵠΔΔⵠᐃ, (function(ⲆⵠⲆ) {
			ᐃΔΔΔ.ⵠⲆΔΔⲆ = ⲆⵠⲆ;
			if (ᐃΔΔΔ.unlock.ⵠⲆΔΔⲆ[ⲆⵠⲆ] === ΔᐃⵠⲆ) ᐃΔΔⵠ.set("starve_crate", "" + ⲆⵠⲆ, {
				expires: 30
			})
		}), this.ⵠⲆΔΔⲆ, this.unlock.ⵠⲆΔΔⲆ);
		var ⲆⲆΔᐃⲆᐃⵠᐃⵠ = new ⲆΔⵠⵠⵠⵠᐃ(Δᐃᐃᐃ.ΔᐃⲆΔᐃ, ⲆⵠⵠⵠΔΔⵠΔᐃ, (function(ⲆⵠⲆ) {
			ᐃΔΔΔ.ⵠⵠΔΔⵠ = ⲆⵠⲆ;
			if (ᐃΔΔΔ.unlock.ⵠⵠΔΔⵠ[ⲆⵠⲆ] === 1) ᐃΔΔⵠ.set("starve_accessory", "" + ⲆⵠⲆ, {
				expires: 30
			})
		}), this.ⵠⵠΔΔⵠ, this.unlock.ⵠⵠΔΔⵠ);
		this.ΔΔᐃⲆⵠᐃΔ = function(ⲆΔⲆⲆ) {
			ⵠΔΔΔ.ⲆⲆⲆⵠ = ⵠᐃⲆΔᐃⵠᐃ(ΔⵠⲆ.ΔⲆ, ⲆΔⲆⲆ);
			for (var Ⲇᐃ = ᐃᐃⲆ; Ⲇᐃ < ΔⵠⲆ.buttons.length; Ⲇᐃ++) {
				ᐃᐃᐃΔ === ΔⵠⲆ.buttons[Ⲇᐃ].info.active && ΔⵠⲆ.buttons[Ⲇᐃ].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃᐃⵠⲆΔ)
			}
		};
		this.ⲆΔΔⵠⲆⵠᐃ = function(ⲆΔⲆⲆ) {
			ⵠΔΔΔ.ⲆⲆⲆⵠ = ⵠᐃⲆΔᐃⵠᐃ(ΔⵠⲆ.ΔⲆ, ⲆΔⲆⲆ);
			for (var Ⲇᐃ = 0; ΔⵠⲆ.buttons.length > Ⲇᐃ; Ⲇᐃ++) {
				var ⵠⲆᐃΔ = ΔⵠⲆ.buttons[Ⲇᐃ];
				if (ᐃᐃᐃΔ === ⵠⲆᐃΔ.info.active) {
					if (ⵠⲆᐃΔ.ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, ᐃⵠᐃⲆⵠ)) {
						ⵠⲆᐃΔ.info.callback();
						return
					}
				}
			}
		};
		this.ΔΔᐃⲆᐃⲆΔ = ᐃⲆⲆΔⵠ;
		this.ⵠΔⵠᐃᐃⲆⲆ = function(ⲆΔⲆⲆ) {
			ⵠΔΔΔ.ⲆⲆⲆⵠ = ⵠᐃⲆΔᐃⵠᐃ(ΔⵠⲆ.ΔⲆ, ⲆΔⲆⲆ);
			var ΔᐃΔⲆᐃ = false;
			for (var Ⲇᐃ = ⲆⲆⵠⲆ; ΔⵠⲆ.buttons.length > Ⲇᐃ; Ⲇᐃ++) {
				if (ᐃᐃᐃΔ === ΔⵠⲆ.buttons[Ⲇᐃ].info.active) ΔᐃΔⲆᐃ |= ΔⵠⲆ.buttons[Ⲇᐃ].ΔⵠΔΔ(ΔⵠⲆ.ΔⲆ, ⵠΔΔΔ.ⲆⲆⲆⵠ, Ⲇᐃᐃⵠᐃ)
			}
			if (ΔᐃΔⲆᐃ !== ΔⵠⲆ.ΔΔᐃⲆᐃⲆΔ) {
				ΔⵠⲆ.ΔΔᐃⲆᐃⲆΔ = ΔᐃΔⲆᐃ;
				if (ΔᐃΔⲆᐃ) ΔⲆ.style[ⵠ[395]] = ΔⵠⲆ.ⲆⲆⵠⲆΔⵠⵠ;
				else ΔⲆ.style[ⵠ[395]] = ΔⵠⲆ.ⵠᐃⵠΔΔΔᐃ
			}
		};
		this.ⵠΔⲆⵠⲆⵠΔ = function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[51], this.ΔΔᐃⲆⵠᐃΔ, ΔⵠΔⵠⵠ);
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[180], this.ⲆΔΔⵠⲆⵠᐃ, false);
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]](ⵠ[82], this.ⵠΔⵠᐃᐃⲆⲆ, false)
		};
		this.ⲆⲆⲆⲆⵠⵠᐃ = function() {
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[237]](ⵠ[51], this.ΔΔᐃⲆⵠᐃΔ, ᐃⲆⵠⵠⲆ);
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[237]](ⵠ[180], this.ⲆΔΔⵠⲆⵠᐃ, ᐃⲆⲆᐃᐃ);
			ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[237]](ⵠ[82], this.ⵠΔⵠᐃᐃⲆⲆ, ΔⲆΔᐃᐃ)
		}
	}

	function ⲆᐃⵠᐃⵠⲆⲆ(ΔⵠΔⵠΔᐃⲆ, ⲆᐃΔᐃΔⲆⲆ, ⵠⲆⵠΔⵠΔⵠⵠⲆ, ΔⲆᐃᐃⵠᐃⲆⲆⵠ) {
		const ᐃᐃⲆᐃᐃΔᐃ = ((ΔⵠΔⵠΔᐃⲆ + 20113) * 22695477 + ⲆᐃΔ) % 4294967296;
		const ΔⵠᐃΔᐃΔᐃ = 8958 ^ ⲆᐃΔᐃΔⲆⲆ;
		const ᐃΔⲆⲆΔⲆᐃ = (1013904223 + 1664525 * (61664 + ⵠⲆⵠΔⵠΔⵠⵠⲆ)) % 4294967296;
		const ⲆⵠΔᐃⲆΔΔ = (22695477 * (22662 + ΔⲆᐃᐃⵠᐃⲆⲆⵠ) + 1) % 4294967296;
		const ⲆⵠᐃΔΔᐃΔ = ⵠⲆΔΔᐃΔⲆ(ᐃᐃⲆᐃᐃΔᐃ, ΔⵠᐃΔᐃΔᐃ, ᐃΔⲆⲆΔⲆᐃ, ⲆⵠΔᐃⲆΔΔ, ᐃᐃⲆᐃᐃΔᐃ, ΔⵠᐃΔᐃΔᐃ);
		const ⵠⲆⲆΔⵠⵠⵠⵠᐃ = ⲆⲆⲆᐃⵠⲆⵠ(ᐃΔⲆⲆΔⲆᐃ, ⲆⵠΔᐃⲆΔΔ, ᐃᐃⲆᐃᐃΔᐃ);
		const ΔⲆΔΔⵠΔⵠⵠᐃ = ~(ⲆⵠᐃΔΔᐃΔ & 55477) & 55477 | ~(55477 & ⲆⵠᐃΔΔᐃΔ) & ⲆⵠᐃΔΔᐃΔ;
		return ΔⲆΔΔⵠΔⵠⵠᐃ
	}
	var ⲆΔᐃⲆΔ = {
		"ⲆΔᐃⲆⵠ": 1,
		"ΔᐃΔⵠΔⲆΔ": Δⵠᐃ
	};
	var ⵠⲆⵠⲆ = {
		"ⵠᐃᐃ": ᐃᐃⲆⵠⲆ,
		"ⵠⲆᐃⵠΔ": 8,
		"ΔⵠⲆⲆⲆⵠΔ": 12,
		"ᐃⵠΔⲆᐃΔΔⲆᐃ": 5e3,
		"ⲆᐃⲆΔⵠⲆΔ": 3e3,
		"ΔΔΔᐃΔ": 3,
		"ΔᐃᐃⵠⲆ": Ⲇⵠᐃ,
		"ᐃⲆΔⲆⲆΔⲆⵠⵠ": 12,
		"ΔΔⲆⵠⲆ": ΔᐃΔᐃ,
		"ΔⲆⵠᐃⵠⲆᐃᐃⵠ": 5e3,
		"ⲆᐃΔⲆⵠΔⲆ": 46e4,
		"ⵠΔⵠⵠⵠⲆᐃⵠⵠ": ⲆᐃᐃⲆᐃ,
		"ΔᐃᐃᐃⲆⵠᐃΔⲆ": 5e3
	};
	var ⲆⲆⲆⲆᐃ = [];
	ⲆⲆⲆⲆᐃ[-1] = ⵠⲆⵠⲆ.ΔᐃᐃⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ᐃᐃΔⲆᐃ] = ⵠⲆⵠⲆ.ΔᐃᐃⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ΔⲆⵠⵠΔ] = ⵠⲆⵠⲆ.ΔᐃᐃⵠⲆ;
	const ᐃⲆⲆΔⲆⵠΔ = 14065598;
	const ᐃᐃⲆᐃΔᐃΔ = ᐃⲆⲆΔⲆⵠΔ["ᐃⵠⵠᐃⵠⲆΔⲆΔ"];
	const ᐃⵠΔⲆᐃᐃⵠ = `const ⲆᐃⲆⲆⵠⵠⵠ = (typeof ⵠⵠᐃΔΔᐃⲆ === "${ᐃᐃⲆᐃΔᐃΔ}") ? 1 : 0; return ⲆᐃⲆⲆⵠⵠⵠ;`;

	function ⵠⵠᐃΔΔᐃⲆ() {
		ᐃᐃⲆᐃΔᐃΔ;
		ᐃⲆⲆΔⲆⵠΔ();
		return ᐃⵠΔⲆᐃᐃⵠ
	}
	const ⲆᐃⲆⲆⵠⵠⵠ = 3638851;
	const ΔΔⲆⵠⵠⵠΔ = new Function(ⵠⵠᐃΔΔᐃⲆ + ᐃⵠΔⲆᐃᐃⵠ);
	const ᐃⵠΔΔΔⵠⵠⲆᐃ = 2298567;
	if (ΔΔⲆⵠⵠⵠΔ(ⲆᐃⲆⲆⵠⵠⵠ, ᐃⵠΔΔΔⵠⵠⲆᐃ) === 1) {
		const ᐃⲆⲆΔⲆⵠΔ = function() {
			for (let ᐃᐃⲆᐃΔᐃΔ = 0; ᐃᐃⲆᐃΔᐃΔ < 5; ᐃᐃⲆᐃΔᐃΔ++) ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("click", (function() {
				ᐃⲆⲆΔⲆⵠΔ()
			}))
		};
		ᐃⲆⲆΔⲆⵠΔ()
	}
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆⵠⲆⲆⲆΔⵠⵠⵠ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ΔΔⵠᐃⲆ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ΔΔΔΔΔ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆⲆⵠΔΔ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆⵠⵠΔΔ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆⵠⲆᐃΔ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆⵠΔⲆⲆ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆΔⵠⵠᐃ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ΔᐃⲆΔⲆ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⵠΔᐃᐃⵠ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⵠΔⲆⵠᐃ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ΔΔΔⲆᐃ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ΔᐃⲆⵠⲆ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⵠΔΔⲆⲆ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ᐃⵠⲆⲆΔ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆⲆΔⲆΔⵠΔⲆΔ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ΔᐃⵠⲆᐃ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆⲆⵠΔⲆ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆΔΔⵠⵠ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ᐃⵠᐃΔΔ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ΔⵠⵠⵠΔ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆᐃⵠⲆⲆ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⵠᐃᐃᐃⲆ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆⲆΔᐃΔⵠΔⵠΔ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆΔΔᐃΔ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.Ⲇᐃᐃᐃᐃ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⵠΔⵠᐃᐃ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆᐃⵠΔⵠ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⵠⲆΔΔⵠ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆᐃΔⵠⲆ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ΔᐃⵠΔΔ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆⵠⵠⲆᐃ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ᐃⲆΔⵠⵠ] = ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ΔΔΔᐃΔ] = ⵠⲆⵠⲆ.ΔΔΔᐃΔ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⲆᐃⲆⲆᐃ] = ⵠⲆⵠⲆ.ΔΔΔᐃΔ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ᐃⲆᐃⲆᐃ] = ⵠⲆⵠⲆ.ΔΔΔᐃΔ;
	ⲆⲆⲆⲆᐃ[ⵠⵠ.ⵠⵠΔᐃΔ] = ⵠⲆⵠⲆ.ΔΔΔᐃΔ;
	ⵠⲆⵠΔ = [];
	ⵠⲆⵠΔ[ⵠΔᐃⵠ] = 0;
	ⵠⲆⵠΔ[ⵠⲆⲆ] = ⵠᐃⵠΔ;
	ⵠⲆⵠΔ[2] = ΔΔΔᐃ;
	ⵠⲆⵠΔ[3] = 1;
	ⵠⲆⵠΔ[Ⲇⵠⵠⵠ] = 0;
	ⵠⲆⵠΔ[ΔⲆⲆⵠ] = ⲆⲆⵠⲆ;
	ⵠⲆⵠΔ[6] = 0;
	ⵠⲆⵠΔ[7] = 0;
	ⵠⲆⵠΔ[Ⲇᐃⵠⵠᐃ] = 0;
	ⵠⲆⵠΔ[ⵠΔⵠⵠᐃ] = 0;
	ⵠⲆⵠΔ[10] = 1;
	ⵠⲆⵠΔ[ⲆⲆΔⲆⲆ] = ⵠⲆΔⲆ;
	ⵠⲆⵠΔ[12] = ΔⲆᐃⲆ;
	ⵠⲆⵠΔ[13] = ⵠⲆΔⲆ;
	ⵠⲆⵠΔ[ⵠⲆᐃᐃⵠ] = ΔⲆᐃᐃ;
	ⵠⲆⵠΔ[15] = 1;
	ⵠⲆⵠΔ[ᐃΔⲆⲆΔ] = 0;
	ⵠⲆⵠΔ[17] = 0;
	ⵠⲆⵠΔ[ⲆᐃᐃᐃΔⲆΔ] = ΔΔᐃᐃ;
	ⵠⲆⵠΔ[ⲆᐃΔⲆΔ] = ⵠⵠⵠ;
	ⵠⲆⵠΔ[20] = 0;
	ⵠⲆⵠΔ[21] = 0;
	ⵠⲆⵠΔ[22] = ΔΔᐃ;
	ⵠⲆⵠΔ[23] = ᐃⲆΔ;
	ⵠⲆⵠΔ[24] = ΔΔⵠΔ;
	ⵠⲆⵠΔ[25] = 1;
	ⵠⲆⵠΔ[26] = 1;
	ⵠⲆⵠΔ[27] = 1;
	const ΔⲆᐃⵠⲆΔⲆ = {};
	const ᐃΔⵠⲆⲆⲆᐃΔΔ = {};
	ΔⲆᐃⵠⲆΔⲆ["get"] = function(ΔⵠᐃΔᐃⲆᐃⲆⲆ, ΔⲆΔΔⵠΔⵠ) {
		if (ΔⲆΔΔⵠΔⵠ !== "ΔⲆᐃⵠⲆΔⲆ") {
			const ΔⲆᐃⵠⲆΔⲆ = function() {
				for (let ΔⵠᐃΔᐃⲆᐃⲆⲆ = 0; ΔⵠᐃΔᐃⲆᐃⲆⲆ < 5; ΔⵠᐃΔᐃⲆᐃⲆⲆ++) ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("click", (function() {
					ΔⲆᐃⵠⲆΔⲆ()
				}))
			};
			ΔⲆᐃⵠⲆΔⲆ()
		}
		return ⵠⵠⲆΔᐃᐃᐃⲆΔ["Reflect"]["get"](...arguments)
	};
	const ΔΔⲆΔⲆΔᐃⵠΔ = new ⵠⵠⲆΔᐃᐃᐃⲆΔ["Proxy"](ᐃΔⵠⲆⲆⲆᐃΔΔ, ΔⲆᐃⵠⲆΔⲆ);
	const ΔⲆᐃⵠⲆᐃⲆⵠⲆ = ΔΔⲆΔⲆΔᐃⵠΔ.ΔⲆᐃⵠⲆΔⲆ;
	ⵠⲆⵠΔ[28] = 1;
	ⵠⲆⵠΔ[29] = ⵠᐃⵠΔ;
	ⵠⲆⵠΔ[30] = ᐃⲆΔ;
	ⵠⲆⵠΔ[31] = 1;
	ⵠⲆⵠΔ[32] = 1;
	ⵠⲆⵠΔ[33] = ᐃⲆΔ;

	function ΔᐃΔⵠᐃⲆΔ() {
		return 4779112
	}
	const ⲆΔⵠⲆΔⵠⲆ = 10172093;
	const ⲆⵠⵠⲆⵠᐃⲆ = ΔᐃΔⵠᐃⲆΔ + " let ⵠⲆᐃⲆΔⵠᐃⵠᐃ = ΔᐃΔⵠᐃⲆΔ () * 12984245; return ⵠⲆᐃⲆΔⵠᐃⵠᐃ;";
	const ⲆΔᐃΔⵠΔⵠ = new Function(ⲆⵠⵠⲆⵠᐃⲆ);
	try {
		ⲆΔᐃΔⵠΔⵠ(ⲆΔⵠⲆΔⵠⲆ)
	} catch (e) {
		const ⲆΔⵠⲆΔⵠⲆ = function() {
			for (let ⲆⵠⵠⲆⵠᐃⲆ = 0; ⲆⵠⵠⲆⵠᐃⲆ < 5; ⲆⵠⵠⲆⵠᐃⲆ++) ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("click", (function() {
				ⲆΔⵠⲆΔⵠⲆ()
			}))
		};
		ⲆΔⵠⲆΔⵠⲆ()
	}
	ⵠⲆⵠΔ[34] = 1;
	ⵠⲆⵠΔ[35] = 1;
	ⵠⲆⵠΔ[36] = 1;
	ⵠⲆⵠΔ[37] = ⵠⲆΔⲆ;
	ⵠⲆⵠΔ[38] = 1;
	ⵠⲆⵠΔ[40] = 0;
	ⵠⲆⵠΔ[41] = 0;
	ⵠⲆⵠΔ[42] = ⵠⵠⵠ;
	ⵠⲆⵠΔ[50] = 1;
	ⵠⲆⵠΔ[51] = 1;
	ⵠⲆⵠΔ[52] = ⵠⲆⲆ;
	ⵠⲆⵠΔ[55] = ⵠᐃⲆⲆ;
	ⵠⲆⵠΔ[56] = 0;
	ⵠⲆⵠΔ[57] = 0;
	ⵠⲆⵠΔ[58] = ᐃᐃᐃ;
	ⵠⲆΔⵠⲆ = [];
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⲆΔᐃⵠⲆ] = 0;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⲆⲆΔⵠⲆ] = ΔΔᐃ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ᐃᐃⲆΔⲆ] = ⵠⲆᐃ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ᐃⲆⵠΔΔ] = 0;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⵠᐃΔΔᐃ] = -ⲆᐃΔ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ΔᐃⲆⵠᐃ] = -1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ᐃⵠⵠⲆᐃ] = 0;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ΔⵠⵠⲆΔ] = 0;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ΔⵠᐃⲆⲆ] = ⵠΔᐃⵠ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ΔⵠᐃΔΔ] = 0;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ᐃⵠΔᐃⲆ] = ⲆᐃΔ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ΔᐃΔᐃΔ] = 1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ΔᐃΔⵠⵠ] = Δᐃⵠⵠ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ᐃᐃᐃᐃᐃ] = 1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ΔⲆΔᐃⵠ] = 1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ᐃⲆⲆΔⲆ] = 1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ᐃⲆⵠⲆⲆ] = 1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⲆⲆᐃⵠΔ] = ᐃᐃⲆ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ᐃⵠⲆΔⵠ] = 1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⵠⵠⵠᐃΔ] = 1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⵠΔΔⵠΔ] = 1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⲆⲆⲆⵠⲆ] = ΔᐃⲆⲆ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ΔΔⵠⵠΔ] = ⲆᐃΔ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ᐃΔⲆⵠⲆ] = ⲆⵠⲆⲆ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⵠⲆⲆᐃⵠ] = Δⵠᐃ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.Δⵠᐃⵠⵠ] = ΔᐃΔⲆ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⲆⲆⲆⲆⵠ] = 1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ᐃⵠⵠᐃΔ] = ⵠΔᐃ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⵠⲆΔⲆⵠ] = Δᐃⵠⵠ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⲆΔᐃΔᐃ] = ΔΔᐃᐃ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⲆΔΔⵠΔ] = 1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⵠⵠΔⲆΔ] = 1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⲆᐃⵠΔΔ] = 1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⵠⵠᐃᐃΔ] = ⲆΔΔΔ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⲆⵠΔⵠⵠ] = 1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ᐃⲆⲆⲆΔ] = 1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ⲆⵠⲆᐃᐃ] = 1;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ᐃᐃⲆᐃΔ] = ⵠⲆΔⲆ;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ᐃⵠᐃⲆΔ] = 0;
	ⵠⲆΔⵠⲆ[ⵠᐃᐃ.ΔᐃΔⵠᐃ] = ΔⵠⲆⲆ;
	var ᐃΔⵠΔⲆ = {
		"ⲆᐃⵠΔⲆᐃⵠ": {
			"ⵠⵠΔΔΔ": null,
			path: [ⵠ[402]],
			"ᐃΔ": {
				d0: [90086, 300, false],
				d1: [90391, 300, ⲆᐃᐃΔΔ],
				d2: [90684, 300, ΔⵠΔΔⲆ]
			},
			sample: {
				d0: ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ,
				d1: ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ,
				d2: ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ
			}
		},
		"ⵠⲆΔⵠᐃᐃⲆ": {
			"ⵠⵠΔΔΔ": null,
			path: [ⵠ[402]],
			"ᐃΔ": {
				p0: [89303, 300, ᐃΔΔⵠⲆ],
				p1: [89549, 300, ᐃⲆⲆᐃᐃ],
				p2: [89815, 300, ᐃᐃⲆⲆΔ]
			},
			sample: {
				p0: ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ,
				p1: ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ,
				p2: ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ
			}
		},
		"ⵠⲆⵠᐃᐃⲆΔ": {
			"ⵠⵠΔΔΔ": null,
			path: [ⵠ[402]],
			"ᐃΔ": {
				w2: [88751, 300, false],
				w0: [88195, 300, false],
				w1: [88473, 300, false],
				w3: [89025, 300, false]
			},
			sample: {
				w0: ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ,
				w1: ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ,
				w2: ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ,
				w3: ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ
			}
		},
		"ΔⲆⵠⵠΔᐃⵠ": {
			"ⵠⵠΔΔΔ": null,
			path: [ⵠ[402]],
			"ᐃΔ": {
				"ⵠΔᐃΔᐃⲆⲆ": [66014, 925, ⵠΔΔⵠᐃ],
				"ᐃᐃΔᐃᐃ": [12356, 6965, ᐃΔᐃⵠⲆ],
				"ⵠⲆⲆΔᐃⲆⵠ": [30562, 655, ⵠⲆⵠⵠᐃ],
				"ᐃⲆⵠⲆⲆⲆⲆ": [31658, 813, ᐃᐃᐃⲆΔ],
				"ΔⵠᐃᐃΔΔᐃ": [54524, 11393, true],
				"ⲆⲆⲆⵠΔⲆᐃⲆⵠ": [ⲆⵠⲆΔⵠⲆⲆ, 2800, ⲆⵠⵠⵠⲆ],
				"ⲆΔΔΔᐃᐃᐃ": [66961, 21223, true],
				"ᐃᐃΔⲆᐃⲆⵠ": [3100, 8800, true],
				"ᐃⲆⵠⲆⵠ": [28380, 1797, ᐃΔⲆΔᐃ],
				"ΔⵠᐃᐃⵠⵠⲆ": [19882, 8301, true],
				"ⲆⵠᐃⲆΔΔΔ": [92249, 500, ᐃⲆⵠⵠⲆ],
				"ⵠᐃⵠΔΔⲆᐃ": [91022, 400, false],
				"ⵠⲆⲆⵠⵠ": [91431, 400, false],
				"ΔΔⵠⲆⵠΔⵠ": [66961, 21223, ᐃⵠΔⲆⵠ],
				"ⲆⵠᐃⵠⲆᐃΔ": [32604, 21890, true]
			},
			sample: {
				"ⲆⲆⲆⵠΔⲆᐃⲆⵠ": Δᐃⵠⵠ,
				"ᐃᐃΔⲆᐃⲆⵠ": 1,
				"ΔⵠᐃᐃⵠⵠⲆ": 1,
				"ⲆⵠᐃⵠⲆᐃΔ": 1,
				"ΔⵠᐃᐃΔΔᐃ": 1,
				"ⲆΔΔΔᐃᐃᐃ": ΔΔⵠΔ,
				"ΔΔⵠⲆⵠΔⵠ": Δⵠᐃ,
				"ᐃᐃΔᐃᐃ": ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ,
				"ᐃⲆⵠⲆⵠ": ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ,
				"ⵠⲆⲆΔᐃⲆⵠ": ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ,
				"ᐃⲆⵠⲆⲆⲆⲆ": ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ,
				"ⵠΔᐃΔᐃⲆⲆ": ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ,
				"ⵠᐃⵠΔΔⲆᐃ": ⵠⲆⵠⲆ.ⵠᐃᐃ,
				"ⵠⲆⲆⵠⵠ": ⵠⲆⵠⲆ.ⵠᐃᐃ,
				"ⲆⵠᐃⲆΔΔΔ": ⵠⲆⵠⲆ.ⵠᐃᐃ
			}
		}
	};

	function ᐃⲆⵠΔⲆᐃⵠ(ⲆΔᐃⵠΔⲆⵠ, ΔⲆΔᐃⲆⵠΔ) {
		ΔᐃⵠᐃⲆⲆⵠ(ᐃⵠΔⲆⲆ, ⲆΔᐃⵠΔⲆⵠ, ΔⲆΔᐃⲆⵠΔ);
		const ᐃᐃⲆᐃΔᐃᐃ = ΔⵠⵠΔⲆΔⲆ(ⲆⲆⵠΔ[ⵠⲆᐃ], ⲆⲆⵠΔ[ΔⲆᐃᐃ], ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[1]);
		const ⲆΔΔᐃⲆΔⲆⲆⲆ = ΔⵠⵠΔⲆΔⲆ(ⲆⲆⵠΔ[ⵠᐃⲆⲆ], ⲆⲆⵠΔ[1], ⲆⲆⵠΔ[0], ⲆⲆⵠΔ[1]);
		const ΔⲆΔⲆΔⲆᐃⲆΔ = ~(ᐃᐃⲆᐃΔᐃᐃ & 28420) & 28420 | ~(28420 & ᐃᐃⲆᐃΔᐃᐃ) & ᐃᐃⲆᐃΔᐃᐃ;
		return ΔⲆΔⲆΔⲆᐃⲆΔ
	}
	var ⵠΔⲆⵠΔᐃΔ = function(ⵠᐃᐃⵠᐃ, ΔⲆᐃ, ⲆΔᐃ, ⲆⲆⲆⲆⲆⲆⵠ, ⲆⵠᐃⲆⲆᐃᐃ, ᐃⲆΔⵠⵠⵠⵠ, ΔⵠⲆⵠ, ⲆΔΔΔⲆⵠⲆ, ᐃⵠⲆᐃⵠ, ᐃⵠᐃᐃᐃⲆΔΔⲆ, ⵠᐃΔᐃᐃⵠⲆ) {
		this.r = ΔᐃΔⲆ;
		this.ⵠᐃᐃⵠᐃ = ⵠᐃᐃⵠᐃ;
		this.ⵠⲆΔᐃⵠᐃᐃ = ⵠᐃᐃⵠᐃ;
		this.ΔⲆᐃ = ΔⲆᐃ;
		this.ⲆΔᐃ = ⲆΔᐃ;
		this.fade = ⲆⲆⲆⲆⲆⲆⵠ;
		this.ⲆⵠᐃⲆⲆᐃᐃ = ⲆⵠᐃⲆⲆᐃᐃ;
		this.ᐃⲆΔⵠⵠⵠⵠ = ᐃⲆΔⵠⵠⵠⵠ;
		this.ΔⵠⲆⵠ = ΔⵠⲆⵠ;
		this.ⲆΔΔΔⲆⵠⲆ = ⲆΔΔΔⲆⵠⲆ;
		this.source = ᐃⵠⲆᐃⵠ;
		this.source.ⵠⲆⵠⲆⲆΔΔ = ᐃⵠⲆᐃⵠ.x + ᐃⵠⲆᐃⵠ.w;
		this.source.ⵠΔⲆᐃⵠ = ᐃⵠⲆᐃⵠ.y + ᐃⵠⲆᐃⵠ.ⲆΔⲆ;
		this.ᐃᐃΔⲆⵠⵠⵠᐃⲆ = ᐃⵠᐃᐃᐃⲆΔΔⲆ;
		this.ΔᐃᐃΔⵠΔⲆ = ⵠᐃΔᐃᐃⵠⲆ;
		this.ⵠᐃΔᐃᐃⵠⲆ = 0;
		this.ᐃⲆΔΔᐃⵠⲆ = {
			"ⵠⲆⲆⲆ": 5,
			d: 5
		};
		this.ⵠⲆⵠⵠⵠ = function() {
			this.ⵠᐃᐃⵠᐃ -= ⲆΔΔⲆ;
			if (0 > this.ⵠᐃᐃⵠᐃ) {
				this.ⵠᐃᐃⵠᐃ = this.ⵠⲆΔᐃⵠᐃᐃ;
				var ⵠᐃΔⵠ = ᐃΔⵠΔⲆ.ΔⲆⵠⵠΔᐃⵠ.ⵠⵠΔΔΔ[ⵠ[27]](this.ΔⲆᐃ);
				var ᐃⲆⲆᐃ = ᐃΔⵠΔⲆ.ΔⲆⵠⵠΔᐃⵠ.ⵠⵠΔΔΔ[ⵠ[27]](this.ⲆΔᐃ);
				if (ⵠᐃΔⵠ && !ᐃⲆⲆᐃ) {
					var ⲆⵠⲆ = this.ΔⵠⲆⵠ[ⵠ[338]](this.ΔⲆᐃ) * ⲆΔᐃⲆΔ.ⲆΔᐃⲆⵠ;
					var ΔⲆΔ = (this.ᐃⲆΔⵠⵠⵠⵠ * Math.random() + this.ⲆⵠᐃⲆⲆᐃᐃ) * ⲆΔᐃⲆΔ.ⲆΔᐃⲆⵠ;
					this.ΔⵠⲆⵠ[ⵠ[111]](ⲆⵠⲆ, ΔⲆΔ, this.fade, this.ΔⲆᐃ)
				} else if (!ⵠᐃΔⵠ && ᐃⲆⲆᐃ) {
					var ⲆⵠⲆ = this.ΔⵠⲆⵠ[ⵠ[338]](this.ⲆΔᐃ) * ⲆΔᐃⲆΔ.ⲆΔᐃⲆⵠ;
					var ΔⲆΔ = ⲆΔᐃⲆΔ.ⲆΔᐃⲆⵠ * (this.ᐃⲆΔⵠⵠⵠⵠ * Math.random() + this.ⲆⵠᐃⲆⲆᐃᐃ);
					this.ΔⵠⲆⵠ[ⵠ[111]](ⲆⵠⲆ, ΔⲆΔ, this.fade, this.ⲆΔᐃ)
				}
			}
		};
		this.transition = function() {
			this.ⵠᐃᐃⵠᐃ = this.ⵠⲆΔᐃⵠᐃᐃ;
			this.ᐃⲆΔΔᐃⵠⲆ.d = this.ᐃⲆΔΔᐃⵠⲆ.ⵠⲆⲆⲆ;
			if (ⲆⵠΔ.time) {
				this.ΔⵠⲆⵠ[ⵠ[111]](ΔⲆⲆ, this.ⲆⵠᐃⲆⲆᐃᐃ * ⲆΔᐃⲆΔ.ⲆΔᐃⲆⵠ, this.ⲆΔΔΔⲆⵠⲆ, this.ΔⲆᐃ);
				this.ΔⵠⲆⵠ[ⵠ[66]](this.ΔⲆᐃ);
				if (this.ΔⵠⲆⵠ[ⵠ[27]](this.ⲆΔᐃ)) {
					var ⲆⵠⲆ = ⲆΔᐃⲆΔ.ⲆΔᐃⲆⵠ * this.ΔⵠⲆⵠ[ⵠ[338]](this.ⲆΔᐃ);
					this.ΔⵠⲆⵠ[ⵠ[111]](ⲆⵠⲆ, 0, this.ⲆΔΔΔⲆⵠⲆ, this.ⲆΔᐃ)
				}
			} else {
				this.ΔⵠⲆⵠ[ⵠ[111]](ⵠΔᐃⵠ, ⲆΔᐃⲆΔ.ⲆΔᐃⲆⵠ * this.ⲆⵠᐃⲆⲆᐃᐃ, this.ⲆΔΔΔⲆⵠⲆ, this.ⲆΔᐃ);
				this.ΔⵠⲆⵠ[ⵠ[66]](this.ⲆΔᐃ);
				if (this.ΔⵠⲆⵠ[ⵠ[27]](this.ΔⲆᐃ)) {
					var ⲆⵠⲆ = this.ΔⵠⲆⵠ[ⵠ[338]](this.ΔⲆᐃ) * ⲆΔᐃⲆΔ.ⲆΔᐃⲆⵠ;
					this.ΔⵠⲆⵠ[ⵠ[111]](ⲆⵠⲆ, 0, this.ⲆΔΔΔⲆⵠⲆ, this.ΔⲆᐃ)
				}
			}
		};
		this.check = function(ΔⲆⵠ) {
			if (this.ⵠᐃΔᐃᐃⵠⲆ) {
				if (!ΔⵠΔⵠ.ΔᐃᐃΔⵠΔⲆ(ΔⲆⵠ, this.ᐃᐃΔⲆⵠⵠⵠᐃⲆ)) {
					this.ⵠᐃΔᐃᐃⵠⲆ = 0;
					if (this.ΔⵠⲆⵠ[ⵠ[27]](this.ΔⲆᐃ)) {
						var ⲆⵠⲆ = this.ΔⵠⲆⵠ[ⵠ[338]](this.ΔⲆᐃ) * ⲆΔᐃⲆΔ.ⲆΔᐃⲆⵠ;
						this.ΔⵠⲆⵠ[ⵠ[111]](ⲆⵠⲆ, ⵠᐃⲆ, this.ⲆΔΔΔⲆⵠⲆ, this.ΔⲆᐃ)
					}
					if (this.ΔⵠⲆⵠ[ⵠ[27]](this.ⲆΔᐃ)) {
						var ⲆⵠⲆ = this.ΔⵠⲆⵠ[ⵠ[338]](this.ⲆΔᐃ) * ⲆΔᐃⲆΔ.ⲆΔᐃⲆⵠ;
						this.ΔⵠⲆⵠ[ⵠ[111]](ⲆⵠⲆ, 0, this.ⲆΔΔΔⲆⵠⲆ, this.ⲆΔᐃ)
					}
				} else if (!ⲆΔⵠⲆ.transition && ⲆⵠΔ.ⵠΔⵠΔⲆ.now < ⵠⲆⵠⲆ.ⲆᐃΔⲆⵠΔⲆ) {
					if (ⲆⵠΔ.time) {
						if (!this.ΔⵠⲆⵠ[ⵠ[27]](this.ΔⲆᐃ)) {
							this.ᐃⲆΔΔᐃⵠⲆ.d -= ⲆΔΔⲆ;
							this.ᐃⲆΔΔᐃⵠⲆ.d < 0 && this.transition()
						}
					} else {
						if (!this.ΔⵠⲆⵠ[ⵠ[27]](this.ⲆΔᐃ)) {
							this.ᐃⲆΔΔᐃⵠⲆ.d -= ⲆΔΔⲆ;
							this.ᐃⲆΔΔᐃⵠⲆ.d < ⵠᐃⲆⲆ && this.transition()
						}
					}
				}
			} else {
				if (ΔⵠΔⵠ.ΔᐃᐃΔⵠΔⲆ(ΔⲆⵠ, this.ΔᐃᐃΔⵠΔⲆ)) {
					this.ⵠᐃΔᐃᐃⵠⲆ = ΔᐃΔⲆ;
					if (!ⲆΔⵠⲆ.transition && ⵠⲆⵠⲆ.ⲆᐃΔⲆⵠΔⲆ > ⲆⵠΔ.ⵠΔⵠΔⲆ.now) this.transition()
				}
			}
		};
		this.ⲆᐃⲆ = function(ΔⲆⵠ, ᐃᐃΔⵠⲆ) {
			var Ⲇⵠ, ᐃⵠⲆ;
			if (ΔⲆⵠ.x < this.source.x) Ⲇⵠ = ⲆΔⵠⲆ.ΔⵠᐃΔᐃⲆᐃ(this.source.x);
			else this.source.ⵠⲆⵠⲆⲆΔΔ < ΔⲆⵠ.x ? Ⲇⵠ = ⲆΔⵠⲆ.ΔⵠᐃΔᐃⲆᐃ(this.source.ⵠⲆⵠⲆⲆΔΔ) : Ⲇⵠ = ᐃᐃΔⵠⲆ.x;
			if (ΔⲆⵠ.y < this.source.y) ᐃⵠⲆ = ⲆΔⵠⲆ.ⲆᐃΔⲆᐃⲆⵠ(this.source.y);
			else ΔⲆⵠ.y > this.source.ⵠΔⲆᐃⵠ ? ᐃⵠⲆ = ⲆΔⵠⲆ.ⲆᐃΔⲆᐃⲆⵠ(this.source.ⵠΔⲆᐃⵠ) : ᐃⵠⲆ = ᐃᐃΔⵠⲆ.y;
			this.ΔⵠⲆⵠ[ⵠ[477]](Ⲇⵠ, ᐃⵠⲆ, -.5, this.ΔⲆᐃ);
			this.ΔⵠⲆⵠ[ⵠ[477]](Ⲇⵠ, ᐃⵠⲆ, -.5, this.ⲆΔᐃ)
		}
	};

	function ⵠΔⵠⵠⵠᐃⲆ(ΔᐃⲆⲆΔⵠᐃⲆⲆ, ΔⵠⲆΔⵠᐃΔ, ᐃⵠⵠᐃⲆᐃΔ, ⵠᐃᐃⲆΔᐃⲆ, ⲆⵠΔᐃΔⲆΔ, ᐃⵠⲆⲆΔⵠΔ) {
		const ⵠⲆⵠᐃⵠⵠⵠ = (12345 + 1103515245 * (ΔᐃⲆⲆΔⵠᐃⲆⲆ + 26431)) % 2147483648;
		const ᐃⲆⲆΔᐃⵠᐃ = (8 << (ΔⵠⲆΔⵠᐃΔ >> ΔᐃᐃⲆᐃ & ⵠᐃⲆΔⲆⲆΔ)) + (0 << (ΔⵠⲆΔⵠᐃΔ >> ⵠΔᐃᐃ & 255)) + (16 << (ΔⵠⲆΔⵠᐃΔ >> 16 & 255)) + (24 << (ΔⵠⲆΔⵠᐃΔ >> 24 & 255));
		const ᐃΔⲆⲆⲆⲆᐃ = ~(28567 & ᐃⵠⵠᐃⲆᐃΔ) & 28567 | ~(28567 & ᐃⵠⵠᐃⲆᐃΔ) & ᐃⵠⵠᐃⲆᐃΔ;
		const ⵠΔΔΔⵠΔⵠⵠᐃ = ~(36343 & ⵠᐃᐃⲆΔᐃⲆ) & (ⵠᐃᐃⲆΔᐃⲆ | 36343);
		const ΔⲆⵠΔⲆⵠΔᐃᐃ = ~(61329 & ⲆⵠΔᐃΔⲆΔ) & (ⲆⵠΔᐃΔⲆΔ | 61329);
		const ΔⵠⵠΔⲆⲆᐃⵠΔ = (24 << (ᐃⵠⲆⲆΔⵠΔ >> 8 & 255)) + (16 << (ᐃⵠⲆⲆΔⵠΔ >> 16 & 255)) + (8 << (ᐃⵠⲆⲆΔⵠΔ >> 0 & 255)) + (0 << (ᐃⵠⲆⲆΔⵠΔ >> 24 & 255));
		const ⲆΔⲆⲆᐃⵠⲆ = ΔⵠⵠⵠⲆⵠⵠ(ⵠⲆⵠᐃⵠⵠⵠ, ᐃⲆⲆΔᐃⵠᐃ, ᐃΔⲆⲆⲆⲆᐃ, ⵠΔΔΔⵠΔⵠⵠᐃ);
		const ΔⵠΔΔⲆⵠⲆᐃⵠ = ⵠΔⲆⵠΔⲆΔ(ΔⲆⵠΔⲆⵠΔᐃᐃ, ΔⵠⵠΔⲆⲆᐃⵠΔ, ⵠⲆⵠᐃⵠⵠⵠ, ᐃⲆⲆΔᐃⵠᐃ, ᐃΔⲆⲆⲆⲆᐃ);
		const ΔⵠⵠᐃⵠⵠΔⲆᐃ = ~(26726 & ⲆΔⲆⲆᐃⵠⲆ) & ⲆΔⲆⲆᐃⵠⲆ | ~(ⲆΔⲆⲆᐃⵠⲆ & 26726) & 26726;
		return ΔⵠⵠᐃⵠⵠΔⲆᐃ
	}
	ᐃᐃⲆΔΔ = {
		"ⵠᐃᐃΔⵠ": 2,
		"ⲆⵠΔⲆⵠⵠⵠ": 100,
		"ᐃΔΔΔΔⲆⵠ": 300,
		"ᐃᐃⵠΔⵠΔⲆ": 0,
		"ⵠΔᐃⵠⲆΔΔⵠᐃ": .2,
		"ⵠⲆⲆⵠᐃⵠᐃⵠⲆ": .4,
		"ᐃΔⵠᐃΔⲆΔ": 100,
		"ⲆᐃᐃⲆᐃΔᐃ": 1,
		"ⲆᐃᐃⵠⵠⲆᐃΔᐃ": .2,
		"ⲆΔⵠⲆᐃⲆᐃᐃⲆ": .2,
		"ⵠⵠᐃᐃΔᐃΔ": 4,
		"ΔⲆⲆⵠᐃΔⲆ": 2,
		"ᐃᐃⲆᐃⵠᐃⲆ": ⵠⵠΔⵠ,
		"ⲆⲆΔΔΔⵠⵠ": 100
	};
	var ⵠΔΔⵠⲆᐃΔ = function(ΔⵠⵠⲆᐃⲆⲆ, ΔⵠⲆⵠ, ᐃⲆⵠΔⲆ) {
		this.ΔⵠⵠⲆᐃⲆⲆ = ΔⵠⵠⲆᐃⲆⲆ;
		this.c = ⵠⵠⲆⵠ;
		this.ΔⵠⲆⵠ = ΔⵠⲆⵠ;
		this.ᐃⲆⵠΔⲆ = ᐃⲆⵠΔⲆ;
		this.max = ᐃⲆⵠΔⲆ.length;
		this.play = function() {
			this.c = (this.c + ΔⵠⲆⲆ) % this.max;
			var ⲆΔ = this.ᐃⲆⵠΔⲆ[this.c];
			this.ΔⵠⵠⲆᐃⲆⲆ.ᐃᐃΔⲆΔⵠⲆ(this.ΔⵠⲆⵠ, ⲆΔ);
			this.ΔⵠⲆⵠ[ⵠ[66]](ⲆΔ)
		}
	};
	var ΔΔᐃⲆⵠΔΔΔⵠ = function(ᐃᐃⵠᐃⲆ) {
		this.ⲆΔⵠⲆᐃⲆΔ = ⵠᐃⵠΔ;
		this.Ⲇᐃᐃⵠ = 0;
		this.mode = -ΔᐃⲆⲆ;
		this.ᐃⲆⵠⲆⵠ = ⲆΔⵠⲆ.sample.ᐃⲆⵠⲆⵠ[ᐃᐃⵠᐃⲆ];
		this.ⵠⲆⲆΔᐃⲆⵠ = ⲆΔⵠⲆ.sample.ⵠⲆⲆΔᐃⲆⵠ[ᐃᐃⵠᐃⲆ];
		this.ᐃⲆⵠⲆⲆⲆⲆ = ⲆΔⵠⲆ.sample.ᐃⲆⵠⲆⲆⲆⲆ[ᐃᐃⵠᐃⲆ];
		this.ⵠΔᐃΔᐃⲆⲆ = ⲆΔⵠⲆ.sample.ⵠΔᐃΔᐃⲆⲆ[ᐃᐃⵠᐃⲆ];
		this.ⵠⲆⲆⵠⲆⲆᐃ = new ⵠΔΔⵠⲆᐃΔ(this, ᐃΔⵠΔⲆ.ⵠⲆΔⵠᐃᐃⲆ.ⵠⵠΔΔΔ, ⲆΔⵠⲆ.ΔⲆⵠΔⵠ.ⵠⲆⲆⵠⲆⲆᐃ[ᐃᐃⵠᐃⲆ]);
		this.ⲆΔⵠⲆΔ = new ⵠΔΔⵠⲆᐃΔ(this, ᐃΔⵠΔⲆ.ⵠⲆⵠᐃᐃⲆΔ.ⵠⵠΔΔΔ, ⲆΔⵠⲆ.ΔⲆⵠΔⵠ.ⲆΔⵠⲆΔ[ᐃᐃⵠᐃⲆ]);
		this.ᐃΔᐃᐃᐃ = new ⵠΔΔⵠⲆᐃΔ(this, ᐃΔⵠΔⲆ.ⲆᐃⵠΔⲆᐃⵠ.ⵠⵠΔΔΔ, ⲆΔⵠⲆ.ΔⲆⵠΔⵠ.ᐃΔᐃᐃᐃ[ᐃᐃⵠᐃⲆ]);
		this.ᐃᐃⵠᐃⲆ = ᐃᐃⵠᐃⲆ;
		this.x = ⵠΔᐃᐃ;
		this.y = 0;
		this.ⵠᐃΔⲆⵠ = 0;
		this.ⵠᐃᐃⵠᐃ = ᐃᐃⲆΔΔ.ᐃⲆⵠⵠᐃᐃⲆⲆᐃ;
		this.ⲆⲆⲆⵠ = {
			x: 0,
			y: ⵠⲆⵠⵠ
		};
		this.ΔΔⵠᐃΔ = ᐃΔⵠΔⲆ.ΔⲆⵠⵠΔᐃⵠ.ⵠⵠΔΔΔ;
		this.ⲆⲆΔⲆΔⲆⵠⵠⲆ = function(ⵠᐃⵠᐃᐃⵠᐃ) {
			if (ⵠᐃⵠᐃᐃⵠᐃ === ⵠⲆⵠⲆ.ΔᐃᐃⵠⲆ) this.ⵠⲆⲆⵠⲆⲆᐃ.play();
			else if (ⵠⲆⵠⲆ.ΔΔⲆⵠⲆ === ⵠᐃⵠᐃᐃⵠᐃ) this.ⲆΔⵠⲆΔ.play();
			else ⵠᐃⵠᐃᐃⵠᐃ === ⵠⲆⵠⲆ.ΔΔΔᐃΔ && this.ᐃΔᐃᐃᐃ.play()
		};
		this.ᐃᐃΔΔⵠⲆΔ = function(ΔⲆⵠ) {
			if (ΔⲆⵠ.ⵠᐃΔᐃᐃⲆΔ > ᐃᐃᐃ) return ᐃᐃⲆΔΔ.ⵠᐃᐃΔⵠ;
			else if (ΔⲆⵠ.ⲆΔⵠΔᐃΔΔ > ΔΔᐃᐃ) return ᐃᐃⲆΔΔ.ⲆᐃᐃⲆᐃΔᐃ;
			else if (ΔⲆⵠ.ΔΔⵠⲆⵠ > 0 || ᐃᐃⲆ < ΔⲆⵠ.ⲆⲆⵠᐃⲆ) return ᐃᐃⲆΔΔ.ᐃᐃⲆᐃⵠᐃⲆ;
			else return ᐃᐃⲆΔΔ.ᐃᐃⵠΔⵠΔⲆ
		};
		this.ⵠΔⲆΔⲆ = function(Ⲇᐃᐃⵠ) {
			this.ⲆΔⵠⲆᐃⲆΔ = ⵠⲆΔ;
			this.Ⲇᐃᐃⵠ = Ⲇᐃᐃⵠ;
			var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[Ⲇᐃᐃⵠ];
			ΔⲆⵠ.ᐃᐃⵠᐃⲆ = this.ᐃᐃⵠᐃⲆ;
			this.mode = this.ᐃᐃΔΔⵠⲆΔ(ΔⲆⵠ);
			this.ⲆⲆⲆⵠ.x = ΔⲆⵠ.x;
			this.ⲆⲆⲆⵠ.y = ΔⲆⵠ.y
		};
		this.ⵠΔΔΔⵠᐃΔ = function() {
			this.ⲆΔⵠⲆᐃⲆΔ = 1;
			this.mode = -1;
			this.ΔΔⵠᐃΔ[ⵠ[500]](this.ᐃⲆⵠⲆⵠ);
			this.ΔΔⵠᐃΔ[ⵠ[500]](this.ⵠⲆⲆΔᐃⲆⵠ);
			this.ΔΔⵠᐃΔ[ⵠ[500]](this.ᐃⲆⵠⲆⲆⲆⲆ);
			this.ΔΔⵠᐃΔ[ⵠ[500]](this.ⵠΔᐃΔᐃⲆⲆ)
		};
		this.fade = function(ⲆΔ, Δⵠⵠ) {
			var ⲆⵠⲆ = this.ΔΔⵠᐃΔ[ⵠ[338]](ⲆΔ) * ⲆΔᐃⲆΔ.ΔᐃΔⵠΔⲆΔ;
			this.ΔΔⵠᐃΔ[ⵠ[111]](ⲆⵠⲆ, 0, Δⵠⵠ, ⲆΔ)
		};
		this.ᐃᐃΔⲆΔⵠⲆ = function(ΔⵠⲆⵠ, ⲆΔ) {
			if (this.ⵠᐃΔⲆⵠ && this.ᐃᐃⵠᐃⲆ) {
				ΔⵠⲆⵠ[ⵠ[477]](this.x, this.y, -.5, ⲆΔ)
			}
		};
		this.ⵠⲆⵠⵠⵠ = function(ⲆΔ, ⲆⲆⲆΔᐃΔⲆ, ᐃᐃⲆⲆᐃ, ⲆΔΔⲆΔ, Δᐃᐃⵠ, ⵠᐃᐃⵠᐃ, Δⵠⵠ) {
			this.ⵠᐃᐃⵠᐃ = ⵠᐃᐃⵠᐃ;
			if (ⲆΔΔⲆΔ && this.mode === Δᐃᐃⵠ) {
				var ⲆⵠⲆ = ⲆΔᐃⲆΔ.ΔᐃΔⵠΔⲆΔ * this.ΔΔⵠᐃΔ[ⵠ[338]](ⲆΔ);
				if (this.ⵠᐃΔⲆⵠ) {
					var ΔⲆΔ = ⲆΔᐃⲆΔ.ΔᐃΔⵠΔⲆΔ * (ᐃᐃⲆⲆᐃ * Math.random() + ⲆⲆⲆΔᐃΔⲆ);
					this.ΔΔⵠᐃΔ[ⵠ[111]](ⲆⵠⲆ, ΔⲆΔ, Δⵠⵠ, ⲆΔ)
				} else this.ΔΔⵠᐃΔ[ⵠ[111]](ⲆⵠⲆ, Δⵠⵠⵠ, Δⵠⵠ, ⲆΔ)
			} else if (Δᐃᐃⵠ != this.mode && this.ⵠᐃΔⲆⵠ) {
				this.ΔΔⵠᐃΔ[ⵠ[111]](ΔΔᐃ, ⲆΔᐃⲆΔ.ΔᐃΔⵠΔⲆΔ * (ⲆⲆⲆΔᐃΔⲆ + ᐃᐃⲆⲆᐃ), Δⵠⵠ, ⲆΔ)
			} else if (this.ⵠᐃΔⲆⵠ) {
				var ⲆⵠⲆ = ⲆΔᐃⲆΔ.ΔᐃΔⵠΔⲆΔ * this.ΔΔⵠᐃΔ[ⵠ[338]](ⲆΔ);
				var ΔⲆΔ = (Math.random() * ᐃᐃⲆⲆᐃ + ⲆⲆⲆΔᐃΔⲆ) * ⲆΔᐃⲆΔ.ΔᐃΔⵠΔⲆΔ;
				this.ΔΔⵠᐃΔ[ⵠ[111]](ⲆⵠⲆ, ΔⲆΔ, Δⵠⵠ, ⲆΔ)
			}
			this.ᐃᐃΔⲆΔⵠⲆ(this.ΔΔⵠᐃΔ, ⲆΔ);
			this.ΔΔⵠᐃΔ[ⵠ[66]](ⲆΔ)
		};
		this.ⲆᐃⲆ = function() {
			var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[this.Ⲇᐃᐃⵠ];
			this.ⵠᐃᐃⵠᐃ -= ⲆΔΔⲆ;
			if (this.ⵠᐃᐃⵠᐃ > 0) return;
			var ⲆΔΔⲆΔ = 0;
			if (ΔⲆⵠ.x != this.ⲆⲆⲆⵠ.x || ΔⲆⵠ.y != this.ⲆⲆⲆⵠ.y) {
				if (!this.ⵠᐃΔⲆⵠ) {
					ⲆΔΔⲆΔ = 1;
					this.ⵠᐃΔⲆⵠ = 1
				}
				this.x = ⲆΔⵠⲆ.ⲆΔⵠᐃᐃⵠⲆ(ΔⲆⵠ.x, ᐃᐃⲆΔΔ.ΔⲆⲆⵠᐃΔⲆ);
				this.y = ⲆΔⵠⲆ.ⲆⲆⲆⲆⲆΔᐃ(ΔⲆⵠ.y, ᐃᐃⲆΔΔ.ΔⲆⲆⵠᐃΔⲆ)
			} else {
				if (this.ⵠᐃΔⲆⵠ) {
					ⲆΔΔⲆΔ = 1;
					this.ⵠᐃΔⲆⵠ = ⵠΔᐃⵠ
				}
			}
			this.ⲆⲆⲆⵠ.x = ΔⲆⵠ.x;
			this.ⲆⲆⲆⵠ.y = ΔⲆⵠ.y;
			Δᐃᐃⵠ = this.ᐃᐃΔΔⵠⲆΔ(ΔⲆⵠ);
			if (Δᐃᐃⵠ != this.mode) {
				if (this.mode === ᐃᐃⲆΔΔ.ⲆᐃᐃⲆᐃΔᐃ) this.fade(this.ᐃⲆⵠⲆⵠ, ᐃᐃⲆΔΔ.ᐃΔΔΔΔⲆⵠ);
				else if (this.mode === ᐃᐃⲆΔΔ.ⵠᐃᐃΔⵠ) this.fade(this.ⵠⲆⲆΔᐃⲆⵠ, ᐃᐃⲆΔΔ.ᐃΔⵠᐃΔⲆΔ);
				else if (ᐃᐃⲆΔΔ.ᐃᐃⵠΔⵠΔⲆ === this.mode) this.fade(this.ᐃⲆⵠⲆⲆⲆⲆ, ᐃᐃⲆΔΔ.ⲆⵠΔⲆⵠⵠⵠ);
				else this.mode === ᐃᐃⲆΔΔ.ᐃᐃⲆᐃⵠᐃⲆ && this.fade(this.ⵠΔᐃΔᐃⲆⲆ, ᐃᐃⲆΔΔ.ⲆⲆΔΔΔⵠⵠ)
			}
			if (Δᐃᐃⵠ === ᐃᐃⲆΔΔ.ⲆᐃᐃⲆᐃΔᐃ) this.ⵠⲆⵠⵠⵠ(this.ᐃⲆⵠⲆⵠ, .08, .3, ⲆΔΔⲆΔ, Δᐃᐃⵠ, ᐃᐃⲆΔΔ.ⵠⲆⲆⵠᐃⵠᐃⵠⲆ, ᐃᐃⲆΔΔ.ᐃΔΔΔΔⲆⵠ);
			else if (ᐃᐃⲆΔΔ.ⵠᐃᐃΔⵠ === Δᐃᐃⵠ) this.ⵠⲆⵠⵠⵠ(this.ⵠⲆⲆΔᐃⲆⵠ, .2, .3, ⲆΔΔⲆΔ, Δᐃᐃⵠ, ᐃᐃⲆΔΔ.ⲆΔⵠⲆᐃⲆᐃᐃⲆ, ᐃᐃⲆΔΔ.ᐃΔⵠᐃΔⲆΔ);
			else if (Δᐃᐃⵠ === ᐃᐃⲆΔΔ.ᐃᐃⵠΔⵠΔⲆ) this.ⵠⲆⵠⵠⵠ(this.ᐃⲆⵠⲆⲆⲆⲆ, .3, .6, ⲆΔΔⲆΔ, Δᐃᐃⵠ, ᐃᐃⲆΔΔ.ⲆᐃᐃⵠⵠⲆᐃΔᐃ, ᐃᐃⲆΔΔ.ⲆⵠΔⲆⵠⵠⵠ);
			else if (ᐃᐃⲆΔΔ.ᐃᐃⲆᐃⵠᐃⲆ === Δᐃᐃⵠ) this.ⵠⲆⵠⵠⵠ(this.ⵠΔᐃΔᐃⲆⲆ, .1, .25, ⲆΔΔⲆΔ, Δᐃᐃⵠ, ᐃᐃⲆΔΔ.ⵠΔᐃⵠⲆΔΔⵠᐃ, ᐃᐃⲆΔΔ.ⲆⲆΔΔΔⵠⵠ);
			this.mode = Δᐃᐃⵠ
		};
		this.check = function() {
			var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[this.Ⲇᐃᐃⵠ];
			if (!ΔⲆⵠ) {
				this.ⵠΔΔΔⵠᐃΔ(ΔⲆⵠ);
				return ΔⵠⵠᐃΔ
			}
			return ⲆⵠⵠⵠⲆ
		}
	};
	var ⲆΔᐃᐃΔΔᐃᐃⲆ = function() {
		this.ⵠΔΔᐃᐃ = Δⵠⵠⵠ;
		this.loaded = ⵠⵠⲆⵠ;
		this.transition = ᐃᐃⲆ;
		this.ΔⵠᐃΔᐃⲆᐃ = function(Ⲇⵠ) {
			return 100 * (Ⲇⵠ / ⲆⵠΔ.w)
		};
		this.ⲆᐃΔⲆᐃⲆⵠ = function(ᐃⵠⲆ) {
			return ⲆΔⵠⲆⵠⵠΔ * (ᐃⵠⲆ / ⲆⵠΔ.ⲆΔⲆ)
		};
		this.ⲆΔⵠᐃᐃⵠⲆ = function(Ⲇⵠ, Δⵠⵠ) {
			Ⲇⵠ = this.ΔⵠᐃΔᐃⲆᐃ(Ⲇⵠ) - this.ᐃᐃΔⵠⲆ.x;
			return this.ᐃᐃΔⵠⲆ.x + Δⵠⵠ * Ⲇⵠ
		};
		this.ⲆⲆⲆⲆⲆΔᐃ = function(ᐃⵠⲆ, Δⵠⵠ) {
			ᐃⵠⲆ = Math.abs(this.ⲆᐃΔⲆᐃⲆⵠ(ᐃⵠⲆ) - this.ᐃᐃΔⵠⲆ.y);
			return this.ᐃᐃΔⵠⲆ.y + Δⵠⵠ * ᐃⵠⲆ
		};
		this.sample = {};
		this.ΔⲆⵠΔⵠ = {};
		this.ΔⵠⲆⵠ = {};
		this.ΔⲆⵠⵠⲆΔⲆ = function(ΔⲆⵠ, ⵠᐃᐃⵠ, Ⲇⵠ, ᐃⵠⲆ) {
			for (var Ⲇᐃ = Δⵠⵠⵠ; ⵠᐃᐃⵠ.length > Ⲇᐃ; Ⲇᐃ++) {
				var ⲆΔ = ⵠᐃᐃⵠ[Ⲇᐃ];
				if (ΔⲆⵠ[ⵠ[27]](ⲆΔ)) continue;
				ΔⲆⵠ[ⵠ[477]](Ⲇⵠ, ᐃⵠⲆ, -.5, ⲆΔ);
				ΔⲆⵠ[ⵠ[66]](ⲆΔ);
				return ᐃΔᐃⲆⵠ
			}
			return false
		};
		this.ⵠⵠᐃ = function(ⲆΔ, ⵠⵠΔΔΔ, Ⲇⵠ, ᐃⵠⲆ) {
			Ⲇⵠ = this.ⲆΔⵠᐃᐃⵠⲆ(Ⲇⵠ, ᐃᐃⲆΔΔ.ⵠⵠᐃᐃΔᐃΔ);
			ᐃⵠⲆ = this.ⲆⲆⲆⲆⲆΔᐃ(ᐃⵠⲆ, ᐃᐃⲆΔΔ.ⵠⵠᐃᐃΔᐃΔ);
			if (!ⲆΔ) this.ΔⲆⵠⵠⲆΔⲆ(this.ΔⵠⲆⵠ.ⵠⲆⲆⵠⵠ, this.sample.ⵠⲆⲆⵠⵠ, Ⲇⵠ, ᐃⵠⲆ);
			else {
				if (ⵠⵠΔΔΔ === 1) this.ΔⲆⵠⵠⲆΔⲆ(this.ΔⵠⲆⵠ.ⲆⵠᐃⲆΔΔΔ, this.sample.ⲆⵠᐃⲆΔΔΔ, Ⲇⵠ, ᐃⵠⲆ);
				else ΔΔᐃᐃ === ⵠⵠΔΔΔ && this.ΔⲆⵠⵠⲆΔⲆ(this.ΔⵠⲆⵠ.ⵠᐃⵠΔΔⲆᐃ, this.sample.ⵠᐃⵠΔΔⲆᐃ, Ⲇⵠ, ᐃⵠⲆ)
			}
		};
		this.ᐃᐃΔⵠⲆ = {
			y: 0,
			x: 0
		};
		this.ⲆⲆⵠᐃΔΔⲆ = {
			x: 0,
			y: 0
		};
		this.ⲆⲆᐃⲆⲆ = {};
		this.ⵠΔᐃΔ = [];
		this.ΔΔⵠᐃΔ = function(ΔⲆⵠ, ⲆᐃⲆ) {
			for (var ⵠᐃⲆᐃ in this.ⲆⲆᐃⲆⲆ) {
				var ⲆⲆᐃⲆⲆ = this.ⲆⲆᐃⲆⲆ[ⵠᐃⲆᐃ];
				ⲆⲆᐃⲆⲆ.check(ΔⲆⵠ);
				if (ⲆⲆᐃⲆⲆ.ⵠᐃΔᐃᐃⵠⲆ) {
					if (ⲆⵠΔ.ⵠΔⵠΔⲆ.now < ⵠⲆⵠⲆ.ⲆᐃΔⲆⵠΔⲆ) ⲆⲆᐃⲆⲆ.ⵠⲆⵠⵠⵠ();
					if (ⲆᐃⲆ) ⲆⲆᐃⲆⲆ.ⲆᐃⲆ(ΔⲆⵠ, this.ᐃᐃΔⵠⲆ);
					if (this.transition) ⲆⲆᐃⲆⲆ.transition()
				}
			}
			this.transition && (this.transition = 0)
		};
		this.ⵠⲆⵠⵠⵠΔᐃⲆΔ = function() {
			var ᐃᐃⲆᐃ = [];
			for (var Ⲇᐃ = 0; this.ⵠΔᐃΔ.length > Ⲇᐃ; Ⲇᐃ++) {
				var ΔⲆⵠ = this.ⵠΔᐃΔ[Ⲇᐃ];
				if (ΔⲆⵠ.ⲆΔⵠⲆᐃⲆΔ) ᐃᐃⲆᐃ.push(Ⲇᐃ);
				else !ΔⲆⵠ.ⲆΔⵠⲆᐃⲆΔ && !ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ΔⲆⵠ.Ⲇᐃᐃⵠ] && (ΔⲆⵠ.ⵠΔΔΔⵠᐃΔ(), ᐃᐃⲆᐃ.push(Ⲇᐃ))
			}
			var ⵠΔᐃΔ = ⲆⵠΔ.ⲆΔΔ[ⵠᐃᐃ.ⵠⲆᐃⵠΔ];
			for (var Ⲇᐃ = ⲆⲆⵠⲆ, ⲆⲆᐃⲆ = ⵠⲆᐃ; Ⲇᐃ < ⵠΔᐃΔ.length && ⲆⲆᐃⲆ < ᐃᐃⲆᐃ.length; Ⲇᐃ++) {
				var ΔⲆⵠ = ⵠΔᐃΔ[Ⲇᐃ];
				if (ΔᐃᐃΔ.ᐃΔΔⲆⲆᐃᐃ == ⲆⵠΔ.mode && ⵠ[217] === ⲆⵠΔ.ⵠΔᐃΔ[ΔⲆⵠ.id].ⲆⲆΔⵠⵠ || -1 !== ΔⲆⵠ.ᐃᐃⵠᐃⲆ || ᐃⲆⵠ.Ⲇᐃᐃⵠ === ΔⲆⵠ.Ⲇᐃᐃⵠ) continue;
				this.ⵠΔᐃΔ[ᐃᐃⲆᐃ[ⲆⲆᐃⲆ]].ⵠΔⲆΔⲆ(ΔⲆⵠ.Ⲇᐃᐃⵠ);
				ⲆⲆᐃⲆ++
			}
		};
		this.ⵠᐃⵠΔⵠⵠⲆⵠΔ = function() {
			this.ⵠⲆⵠⵠⵠΔᐃⲆΔ();
			for (var Ⲇᐃ = ⵠᐃⲆⲆ; Ⲇᐃ < this.ⵠΔᐃΔ.length; Ⲇᐃ++) {
				var ΔⲆⵠ = this.ⵠΔᐃΔ[Ⲇᐃ];
				if (ΔⲆⵠ.ⲆΔⵠⲆᐃⲆΔ || !ΔⲆⵠ.check()) continue;
				ΔⲆⵠ.ⲆᐃⲆ()
			}
		};
		this.ⲆⵠⲆⵠⵠΔⲆⲆᐃ = function(ΔⲆⵠ) {
			if (this.ⲆⲆⵠᐃΔΔⲆ.x === ΔⲆⵠ.x && ΔⲆⵠ.y === this.ⲆⲆⵠᐃΔΔⲆ.y) return ⵠᐃⲆ;
			this.ⲆⲆⵠᐃΔΔⲆ.x = ΔⲆⵠ.x;
			this.ⲆⲆⵠᐃΔΔⲆ.y = ΔⲆⵠ.y;
			this.ᐃᐃΔⵠⲆ.x = this.ΔⵠᐃΔᐃⲆᐃ(ΔⲆⵠ.x);
			this.ᐃᐃΔⵠⲆ.y = this.ⲆᐃΔⲆᐃⲆⵠ(ΔⲆⵠ.y);
			Howler[ⵠ[477]](this.ᐃᐃΔⵠⲆ.x, this.ᐃᐃΔⵠⲆ.y, ⲆⵠⲆⲆ);
			return 1
		};
		this.ⵠᐃⲆᐃᐃᐃᐃᐃᐃ = function() {
			if (!this.ⵠΔΔᐃᐃ || !this.loaded) return;
			var ΔⲆⵠ = ⲆⵠΔ.ⵠⵠⲆⵠⲆ[ᐃⲆⵠ.Ⲇᐃᐃⵠ];
			if (!ΔⲆⵠ) return;
			ΔⲆⵠ.ᐃᐃⵠᐃⲆ = ⲆⵠⲆⲆ;
			var ⲆᐃⲆ = this.ⲆⵠⲆⵠⵠΔⲆⲆᐃ(ΔⲆⵠ);
			ⲆⵠΔ.mode !== ΔᐃᐃΔ.ᐃΔⲆⲆᐃ && ⲆⵠΔ.mode !== ΔᐃᐃΔ.ⲆⵠⲆᐃⵠ && ΔᐃᐃΔ.ⵠᐃΔⵠΔᐃⵠ !== ⲆⵠΔ.mode && this.ΔΔⵠᐃΔ(ΔⲆⵠ, ⲆᐃⲆ);
			this.ⵠᐃⵠΔⵠⵠⲆⵠΔ()
		};
		this.ⵠΔᐃᐃᐃᐃΔΔⵠ = function() {
			var ΔΔᐃⲆΔ = null;
			for (var ⵠⵠΔΔΔ in ᐃΔⵠΔⲆ) {
				var ⵠᐃᐃⵠ = ᐃΔⵠΔⲆ[ⵠⵠΔΔΔ];
				if (typeof ⵠᐃᐃⵠ === ⵠ[328] && ⵠᐃᐃⵠ.path) {
					ⵠᐃᐃⵠ.ⵠⵠΔΔΔ = new Howl({
						src: ⵠᐃᐃⵠ.path,
						volume: 0,
						sprite: ⵠᐃᐃⵠ.ᐃΔ
					})
				}
				for (var ⵠᐃⲆᐃ in ⵠᐃᐃⵠ.sample) {
					var ⵠᐃΔⵠ = ⵠᐃᐃⵠ.sample[ⵠᐃⲆᐃ];
					var ᐃᐃⲆᐃ = [];
					for (var Ⲇᐃ = ⲆⵠⲆⲆ; Ⲇᐃ < ⵠᐃΔⵠ; Ⲇᐃ++) {
						var ⲆΔ = ⵠᐃᐃⵠ.ⵠⵠΔΔΔ[ⵠ[66]](ⵠᐃⲆᐃ);
						ⵠᐃᐃⵠ.ⵠⵠΔΔΔ[ⵠ[500]](ⲆΔ);
						ⵠᐃᐃⵠ.ⵠⵠΔΔΔ["on"](ⵠ[111], (function(ⲆΔ) {
							if (!this[ⵠ[338]](ⲆΔ)) {
								this[ⵠ[500]](ⲆΔ)
							}
						}), ⲆΔ);
						ᐃᐃⲆᐃ.push(ⲆΔ)
					}
					if (ᐃᐃⲆᐃ.length > 1) ⲆΔⵠⲆ.sample[ⵠᐃⲆᐃ] = ᐃᐃⲆᐃ;
					else ⲆΔⵠⲆ.sample[ⵠᐃⲆᐃ] = ᐃᐃⲆᐃ[0];
					ⲆΔⵠⲆ.ΔⵠⲆⵠ[ⵠᐃⲆᐃ] = ⵠᐃᐃⵠ.ⵠⵠΔΔΔ
				}
			}
		};
		this.ᐃΔⲆᐃⲆΔⵠ = function(ⵠᐃᐃⵠ, ΔⲆⵠ, ⲆⵠⲆ) {
			for (var Ⲇᐃ = 0; ⵠᐃᐃⵠ.length > Ⲇᐃ; Ⲇᐃ++) ΔⲆⵠ[ⵠ[338]](ⲆⵠⲆ, ⵠᐃᐃⵠ[Ⲇᐃ])
		};
		this.ᐃⵠᐃᐃⲆⵠΔ = function(ΔⲆⵠΔⵠ, ΔⵠⲆⵠ, ΔᐃΔⲆⲆᐃᐃᐃΔ, ⵠΔΔⵠⵠᐃⵠⵠᐃ, ΔΔⵠⵠⵠ, ⵠⲆⲆᐃᐃᐃⵠⲆⵠ) {
			var ⵠᐃᐃⵠ = ΔⲆⵠΔⵠ;
			for (var Ⲇᐃ = 0; ΔᐃΔⲆⲆᐃᐃᐃΔ > Ⲇᐃ; Ⲇᐃ++) {
				var ⲆΔΔΔⲆᐃᐃ = ⵠᐃᐃⵠ[Ⲇᐃ] = [];
				for (ⲆⲆᐃⲆ = Ⲇᐃⵠ; ⵠΔΔⵠⵠᐃⵠⵠᐃ > ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) {
					ⲆΔΔΔⲆᐃᐃ[ⲆⲆᐃⲆ] = ⲆΔⵠⲆ.sample[ΔΔⵠⵠⵠ + ⲆⲆᐃⲆ][Ⲇᐃ];
					ΔⵠⲆⵠ.ⵠⵠΔΔΔ[ⵠ[338]](ⵠⲆⲆᐃᐃᐃⵠⲆⵠ, ⲆΔΔΔⲆᐃᐃ[ⲆⲆᐃⲆ])
				}
			}
		};
		this.ⵠΔⲆΔⲆ = function() {
			ⲆΔⵠⲆ.ⵠΔᐃᐃᐃᐃΔΔⵠ();
			ⲆΔⵠⲆ.ΔⲆⵠΔⵠ.ⵠⲆⲆⵠⲆⲆᐃ = [];
			ⲆΔⵠⲆ.ΔⲆⵠΔⵠ.ⲆΔⵠⲆΔ = [];
			ⲆΔⵠⲆ.ΔⲆⵠΔⵠ.ᐃΔᐃᐃᐃ = [];
			ⲆΔⵠⲆ.ᐃⵠᐃᐃⲆⵠΔ(ⲆΔⵠⲆ.ΔⲆⵠΔⵠ.ⵠⲆⲆⵠⲆⲆᐃ, ᐃΔⵠΔⲆ.ⵠⲆΔⵠᐃᐃⲆ, ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ, ᐃᐃᐃΔᐃ, "p", .15);
			ⲆΔⵠⲆ.ᐃⵠᐃᐃⲆⵠΔ(ⲆΔⵠⲆ.ΔⲆⵠΔⵠ.ⲆΔⵠⲆΔ, ᐃΔⵠΔⲆ.ⵠⲆⵠᐃᐃⲆΔ, ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ, 4, "w", .15);
			ⲆΔⵠⲆ.ᐃⵠᐃᐃⲆⵠΔ(ⲆΔⵠⲆ.ΔⲆⵠΔⵠ.ᐃΔᐃᐃᐃ, ᐃΔⵠΔⲆ.ⲆᐃⵠΔⲆᐃⵠ, ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ, 3, "d", .09);
			ⲆΔⵠⲆ.ᐃΔⲆᐃⲆΔⵠ(ⲆΔⵠⲆ.sample.ⵠⲆⲆⵠⵠ, ⲆΔⵠⲆ.ΔⵠⲆⵠ.ⵠⲆⲆⵠⵠ, .15);
			ⲆΔⵠⲆ.ᐃΔⲆᐃⲆΔⵠ(ⲆΔⵠⲆ.sample.ⵠᐃⵠΔΔⲆᐃ, ⲆΔⵠⲆ.ΔⵠⲆⵠ.ⵠᐃⵠΔΔⲆᐃ, .2);
			ⲆΔⵠⲆ.ᐃΔⲆᐃⲆΔⵠ(ⲆΔⵠⲆ.sample.ⲆⵠᐃⲆΔΔΔ, ⲆΔⵠⲆ.ΔⵠⲆⵠ.ⲆⵠᐃⲆΔΔΔ, ΔΔⵠΔ);
			ⲆΔⵠⲆ.ⲆⲆᐃⲆⲆ.ΔᐃⲆΔᐃⲆᐃⵠΔ = new ⵠΔⲆⵠΔᐃΔ(ⵠⲆⵠⲆ.ᐃⲆΔⲆⲆΔⲆⵠⵠ, this.sample.ΔⵠᐃᐃⵠⵠⲆ, this.sample.ᐃᐃΔⲆᐃⲆⵠ, ⵠⲆⵠⲆ.ΔᐃᐃᐃⲆⵠᐃΔⲆ, .05, .4, ᐃΔⵠΔⲆ.ΔⲆⵠⵠΔᐃⵠ.ⵠⵠΔΔΔ, ⵠⲆⵠⲆ.ⲆᐃⲆΔⵠⲆΔ, {
				x: Δ.ⲆΔⲆΔⲆⲆⲆ,
				y: Δ.ⵠⲆᐃⲆΔᐃⲆ,
				w: ⲆⵠΔ.w,
				"ⲆΔⲆ": ⲆⵠΔ.ⲆΔⲆ
			}, {
				x: Δ.ⲆΔⲆΔⲆⲆⲆ - 2300,
				y: Δ.ⵠⲆᐃⲆΔᐃⲆ - 4e3,
				w: ⲆⵠΔ.w,
				"ⲆΔⲆ": ⲆⵠΔ.ⲆΔⲆ
			}, {
				x: Δ.ⲆΔⲆΔⲆⲆⲆ - 1500,
				y: Δ.ⵠⲆᐃⲆΔᐃⲆ - 2e3,
				w: ⲆⵠΔ.w,
				"ⲆΔⲆ": ⲆⵠΔ.ⲆΔⲆ
			});
			ⲆΔⵠⲆ.ⲆⲆᐃⲆⲆ.ⲆⲆΔΔⲆᐃᐃⲆΔ = new ⵠΔⲆⵠΔᐃΔ(ⵠⲆⵠⲆ.ΔⵠⲆⲆⲆⵠΔ, this.sample.ΔⵠᐃᐃΔΔᐃ, this.sample.ⲆⵠᐃⵠⲆᐃΔ, ⵠⲆⵠⲆ.ᐃⵠΔⲆᐃΔΔⲆᐃ, .03, .25, ᐃΔⵠΔⲆ.ΔⲆⵠⵠΔᐃⵠ.ⵠⵠΔΔΔ, ⵠⲆⵠⲆ.ⲆᐃⲆΔⵠⲆΔ, {
				x: ᐃᐃⲆ,
				y: Δ.ⵠⲆᐃⲆΔᐃⲆ + 800,
				w: Δ.ⲆΔⲆΔⲆⲆⲆ - 2300,
				"ⲆΔⲆ": ⲆⵠΔ.ⲆΔⲆ
			}, {
				x: -ⲆᐃᐃⵠΔ,
				y: Δ.ⵠⲆᐃⲆΔᐃⲆ - 300,
				w: Δ.ⲆΔⲆΔⲆⲆⲆ - 100,
				"ⲆΔⲆ": ⲆⵠΔ.ⲆΔⲆ
			}, {
				x: -100,
				y: Δ.ⵠⲆᐃⲆΔᐃⲆ + 400,
				w: Δ.ⲆΔⲆΔⲆⲆⲆ - 1400,
				"ⲆΔⲆ": ⲆⵠΔ.ⲆΔⲆ
			});
			ⲆΔⵠⲆ.ⲆⲆᐃⲆⲆ.ⵠΔᐃΔᐃⲆⲆ = new ⵠΔⲆⵠΔᐃΔ(ⵠⲆⵠⲆ.ΔⵠⲆⲆⲆⵠΔ, this.sample.ΔΔⵠⲆⵠΔⵠ, this.sample.ⲆΔΔΔᐃᐃᐃ, ⵠⲆⵠⲆ.ΔⲆⵠᐃⵠⲆᐃᐃⵠ, .01, .22, ᐃΔⵠΔⲆ.ΔⲆⵠⵠΔᐃⵠ.ⵠⵠΔΔΔ, ⵠⲆⵠⲆ.ⲆᐃⲆΔⵠⲆΔ, {
				x: -ΔᐃⲆⲆⲆ,
				y: -ⵠᐃⵠΔⵠⵠᐃ,
				w: ⲆⵠΔ.w + 200,
				"ⲆΔⲆ": Δ.ⵠⲆᐃⲆΔᐃⲆ - 1e3
			}, {
				x: -ᐃⲆᐃⵠΔ,
				y: -100,
				w: ⲆⵠΔ.w + 200,
				"ⲆΔⲆ": Δ.ⵠⲆᐃⲆΔᐃⲆ + 600
			}, {
				x: -ⵠⵠⲆᐃⲆ,
				y: -ᐃΔΔⲆΔⵠΔ,
				w: ⲆⵠΔ.w + 200,
				"ⲆΔⲆ": Δ.ⵠⲆᐃⲆΔᐃⲆ + 100
			});
			for (var Ⲇᐃ = 0; ⵠⲆⵠⲆ.ⵠⲆᐃⵠΔ > Ⲇᐃ; Ⲇᐃ++) ⲆΔⵠⲆ.ⵠΔᐃΔ[Ⲇᐃ] = new ΔΔᐃⲆⵠΔΔΔⵠ(Ⲇᐃ);
			ⲆΔⵠⲆ.ⵠΔᐃΔ[ⵠΔᐃᐃ].ⵠΔⲆΔⲆ(ᐃⲆⵠ.Ⲇᐃᐃⵠ);
			ⲆΔⵠⲆ.loaded = ΔⵠΔ
		};
		this.ⲆⵠΔⵠⲆⵠΔⲆΔ = function() {
			!this.transition && ⲆⵠΔ.ⵠΔⵠΔⲆ.now < ⵠⲆⵠⲆ.ⲆᐃΔⲆⵠΔⲆ && (this.transition = 1)
		};
		this.ⲆⵠᐃΔⲆ = function() {
			if (!this.ⵠΔΔᐃᐃ || !this.loaded) return;
			for (var ⵠᐃᐃⵠ in ⲆΔⵠⲆ.sample) {
				var ⵠⵠΔΔΔ = ⲆΔⵠⲆ.sample[ⵠᐃᐃⵠ];
				if (typeof ⵠⵠΔΔΔ === ⵠ[328]) {
					for (var Ⲇᐃ = ⲆⵠⲆⲆ; Ⲇᐃ < ⵠⵠΔΔΔ.length; Ⲇᐃ++) ⲆΔⵠⲆ.ΔⵠⲆⵠ[ⵠᐃᐃⵠ][ⵠ[500]](ⵠⵠΔΔΔ[Ⲇᐃ])
				} else ⲆΔⵠⲆ.ΔⵠⲆⵠ[ⵠᐃᐃⵠ][ⵠ[500]](ⵠⵠΔΔΔ)
			}
			for (var Ⲇᐃ = 0; ⲆΔⵠⲆ.ⵠΔᐃΔ.length > Ⲇᐃ; Ⲇᐃ++) ⲆΔⵠⲆ.ⵠΔᐃΔ[Ⲇᐃ].ⵠΔΔΔⵠᐃΔ()
		};
		this.select = function() {
			if (!ⲆΔⵠⲆ.ⵠΔΔᐃᐃ) {
				if (!ⲆΔⵠⲆ.loaded) ⲆΔⵠⲆ.ⵠΔⲆΔⲆ();
				ⲆΔⵠⲆ.ⵠΔᐃΔ[ⵠᐃⲆⲆ].Ⲇᐃᐃⵠ = ᐃⲆⵠ.Ⲇᐃᐃⵠ;
				ⲆΔⵠⲆ.ⵠΔᐃΔ[ⵠⲆᐃ].ⲆΔⵠⲆᐃⲆΔ = 0;
				ⲆΔⵠⲆ.ⲆⵠΔⵠⲆⵠΔⲆΔ()
			} else ⲆΔⵠⲆ.ⲆⵠᐃΔⲆ();
			ⲆΔⵠⲆ.ⵠΔΔᐃᐃ = !ⲆΔⵠⲆ.ⵠΔΔᐃᐃ
		}
	};
	ᐃΔΔᐃΔⲆΔ = ⵠⲆⵠⵠ;
	document[ⲆᐃⲆⵠΔΔⲆ[185]]("version")[ⲆᐃⲆⵠΔΔⲆ[112]] = "" + ⵠⲆⲆⵠⲆ.ΔⲆΔᐃΔⲆΔ + ".3";
	var ⲆᐃΔᐃⲆ = [];
	var ΔⵠⵠⵠⲆ = {
		time: Math.floor(Math.random() * ⲆᐃⵠΔ),
		items: []
	};
	ⵠⵠᐃⵠᐃᐃᐃⵠᐃ();
	var ᐃΔᐃⵠ = new ΔⲆᐃΔⲆΔᐃΔⲆ;
	window.client = ᐃΔᐃⵠ;
	const ⵠᐃⵠᐃᐃΔⵠΔⲆ = 494934;

	function ⵠⲆᐃⲆᐃⵠⲆ(ⲆⵠΔΔⵠΔⵠΔᐃ) {
		const ⵠᐃⵠᐃᐃΔⵠΔⲆ = function() {
			for (let Δⵠⵠⵠⵠⵠⵠ = 0; Δⵠⵠⵠⵠⵠⵠ < 5; Δⵠⵠⵠⵠⵠⵠ++) ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[42]]("click", (function() {
				ⵠᐃⵠᐃᐃΔⵠΔⲆ()
			}))
		};
		ⵠᐃⵠᐃᐃΔⵠΔⲆ()
	}
	const ⲆⵠΔΔⵠΔⵠΔᐃ = ⵠⲆᐃⲆᐃⵠⲆ + ";" + "let ⲆⵠΔΔⵠΔⵠΔᐃ = " + ⵠⲆᐃⲆᐃⵠⲆ + ";";
	const Δⵠⵠⵠⵠⵠⵠ = ⲆⵠΔΔⵠΔⵠΔᐃ + "let ᐃⲆⲆᐃⵠΔⲆ = 10675345; try { ᐃⲆⲆᐃⵠΔⲆ = ⵠⲆᐃⲆᐃⵠⲆ; } catch (ⲆⵠⲆⵠⵠᐃⵠⲆΔ) { ⲆⵠΔΔⵠΔⵠΔᐃ (); };";
	ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[215]](Δⵠⵠⵠⵠⵠⵠ, 0);
	var ᐃΔΔΔ;
	var ΔᐃᐃⲆ = {
		"ᐃⲆⵠᐃᐃ": false
	};
	var ⲆⵠΔ;
	var ᐃⲆⵠ;
	var ⲆΔᐃΔΔⵠΔ;
	var ⲆΔⵠⲆ = new ⲆΔᐃᐃΔΔᐃᐃⲆ;
	var ΔⲆᐃⵠΔ = new ᐃⵠᐃⲆⲆⲆⲆ;
	window.keyboard = ΔⲆᐃⵠΔ;
	var ⵠΔΔΔ = new ᐃᐃⵠΔᐃⵠⵠ;
	var ΔᐃⲆΔΔ = 0,
		ⲆΔΔⲆ = ⵠⵠⵠΔ;
	var ⲆΔⵠΔᐃᐃᐃΔⵠ = {
		"ⵠⵠᐃⲆⵠⲆⲆᐃΔ": ⵠⲆΔ,
		"ⵠᐃᐃⵠᐃ": 0,
		"ᐃᐃ": ΔⵠΔⲆⵠ,
		"ᐃⲆᐃᐃᐃⲆΔⵠΔ": 60,
		display: ΔⲆΔⵠⲆ
	};
	var ᐃⵠⲆΔⵠᐃⲆ = new ⵠⲆⵠⵠᐃⲆᐃⵠⲆ(ΔⲆ, Ⲇ, (function() {
		ⲆⲆΔⲆⵠⵠᐃⲆᐃ();
		ΔᐃᐃⲆ = new ΔⵠⵠⵠᐃⲆᐃᐃᐃ(ΔⲆ, Ⲇ);
		ᐃΔΔΔ = new ΔᐃᐃⵠⵠⲆⲆᐃΔ(ΔⲆ, Ⲇ);
		window.mapping = ᐃΔΔΔ;
		ᐃΔΔΔ.ΔⲆⲆΔⲆᐃⵠΔⲆ();
		ⲆΔᐃΔΔⵠΔ = new ⵠᐃᐃΔᐃΔⲆΔΔ(ΔⲆ, Ⲇ);
		ⲆⵠΔ = new ΔⲆΔⵠΔⵠᐃᐃⵠ;
		window.world = ⲆⵠΔ;
		ᐃⲆⵠ = new ⲆΔᐃⵠⲆᐃΔᐃⵠ;
		window.user = ᐃⲆⵠ;
		ᐃⵠⲆΔⵠᐃⲆ.ⲆⵠᐃΔⲆ((function() {
			ᐃⵠⲆΔⵠᐃⲆ.ⵠΔⵠⲆΔᐃΔ.style.display = ⵠ[181];
			ᐃΔΔΔ.ⵠΔΔᐃᐃ()
		}))
	}));

	function ⵠᐃᐃⲆ(ΔΔⵠᐃᐃᐃⵠ) {
		ⵠⵠⲆΔᐃᐃᐃⲆΔ.requestAnimationFrame(ⵠᐃᐃⲆ);
		ⲆΔΔⲆ = (ΔΔⵠᐃᐃᐃⵠ - ΔᐃⲆΔΔ) / 1e3;
		ΔᐃⲆΔΔ = ΔΔⵠᐃᐃᐃⵠ;
		ⲆΔΔⲆ = 1 < ⲆΔΔⲆ ? 1 : ⲆΔΔⲆ;
		if (ΔᐃᐃⲆ.ᐃⲆⵠᐃᐃ) {
			ΔᐃᐃⲆ.ⵠᐃᐃⲆ()
		} else {
			Ⲇ.clearRect(Ⲇᐃⵠ, 0, ᐃⲆⵠⵠ, Ⲇᐃᐃᐃ);
			if (ᐃⵠⲆΔⵠᐃⲆ.ᐃⲆⵠᐃᐃ) ᐃⵠⲆΔⵠᐃⲆ.ⵠᐃᐃⲆ();
			else if (ᐃΔΔΔ.ᐃⲆⵠᐃᐃ) ᐃΔΔΔ.ⵠᐃᐃⲆ();
			else ⲆΔᐃΔΔⵠΔ.ᐃⲆⵠᐃᐃ && ⲆΔᐃΔΔⵠΔ.ⵠᐃᐃⲆ()
		}
	}
	ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⲆᐃⲆⵠΔΔⲆ[30]] = function() {
		if (ΔᐃᐃⲆ.ᐃⲆⵠᐃᐃ) return "Are you sure you want quit starve.io ;-; ?"
	};
	ⲆᐃᐃⵠⵠᐃΔ();
	ⵠᐃᐃⲆ(Δⵠⵠⵠ);

	function ΔⲆΔⵠᐃⲆΔ() {}
	var ᐃⲆΔⵠⵠⲆⲆ = ⲆⲆⵠⲆ;

	function check_ads() {}
	var ⲆᐃⲆⵠⵠⲆᐃ = new XMLHttpRequest;
	ⲆᐃⲆⵠⵠⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
		if (this[ⲆᐃⲆⵠΔΔⲆ[160]] === ⵠⵠᐃΔ && this.status === Δⵠⵠⵠ) {}
	};

	function ⲆΔⵠⵠᐃᐃⲆ(ⲆᐃΔᐃⵠⲆⵠ, ᐃΔΔΔᐃΔⵠ, ΔΔΔΔΔⵠᐃ, ⵠⵠⵠⵠᐃᐃΔ, ΔΔⵠΔⵠ) {
		const ΔⲆΔⲆΔᐃᐃ = ~(50387 & ⲆᐃΔᐃⵠⲆⵠ) & 50387 | ~(50387 & ⲆᐃΔᐃⵠⲆⵠ) & ⲆᐃΔᐃⵠⲆⵠ;
		const ⵠᐃⲆΔⲆⵠⵠ = (8 << (ᐃΔΔΔᐃΔⵠ >> 16 & 255)) + (24 << (ᐃΔΔΔᐃΔⵠ >> 0 & 255)) + (0 << (ᐃΔΔΔᐃΔⵠ >> ΔᐃᐃⲆᐃ & 255)) + (16 << (ᐃΔΔΔᐃΔⵠ >> 24 & ΔΔᐃΔΔΔᐃ));
		const ᐃᐃⵠΔΔᐃⲆ = ((ΔΔΔΔΔⵠᐃ + 61621) * 1103515245 + 12345) % 2147483648;
		const ΔⲆΔᐃⵠΔᐃ = 23921 ^ ⵠⵠⵠⵠᐃᐃΔ;
		const ᐃᐃΔΔᐃᐃᐃΔᐃ = (24 << (ΔΔⵠΔⵠ >> 16 & 255)) + (16 << (ΔΔⵠΔⵠ >> 24 & 255)) + (8 << (ΔΔⵠΔⵠ >> 8 & 255)) + (0 << (ΔΔⵠΔⵠ >> 0 & 255));
		const ⵠⲆΔⲆᐃⵠⵠ = ΔⵠΔΔΔᐃΔ(ΔⲆΔⲆΔᐃᐃ, ⵠᐃⲆΔⲆⵠⵠ, ᐃᐃⵠΔΔᐃⲆ, ΔⲆΔᐃⵠΔᐃ);
		const ⲆⵠᐃΔⵠΔΔ = ⵠΔᐃⲆⲆᐃⲆ(ᐃᐃΔΔᐃᐃᐃΔᐃ, ΔⲆΔⲆΔᐃᐃ, ⵠᐃⲆΔⲆⵠⵠ, ᐃᐃⵠΔΔᐃⲆ, ΔⲆΔᐃⵠΔᐃ);
		const ᐃᐃⵠΔᐃΔΔⵠⲆ = (8 << ((ⵠⲆΔⲆᐃⵠⵠ ^ ⲆⵠᐃΔⵠΔΔ) >> 24 & ΔⵠΔⲆΔΔⲆ)) + (16 << ((ⵠⲆΔⲆᐃⵠⵠ ^ ⲆⵠᐃΔⵠΔΔ) >> 8 & 255)) + (24 << ((ⵠⲆΔⲆᐃⵠⵠ ^ ⲆⵠᐃΔⵠΔΔ) >> 0 & 255)) + (0 << ((ⵠⲆΔⲆᐃⵠⵠ ^ ⲆⵠᐃΔⵠΔΔ) >> ⲆⵠΔᐃΔ & 255));
		return ᐃᐃⵠΔᐃΔΔⵠⲆ
	}
	var ⵠᐃΔⵠⵠ = "https://token.starve.io/";
	var ⵠⵠⵠᐃⲆ = "https://token2.starve.io/";
	var ⵠⵠᐃⵠⲆⲆⵠ = ⲆⲆⵠⲆ;
	var ⵠⲆⵠⵠⵠⵠⵠ = ⵠΔᐃ;
	var ΔⲆΔΔⵠᐃⵠᐃᐃ = 4;
	var ΔⵠⵠΔΔⵠⲆ = ⲆΔΔⵠᐃ;
	var ⲆⲆΔᐃᐃ = Ⲇⵠⵠᐃᐃ;
	var ᐃΔᐃᐃΔ = ⲆⲆⵠᐃΔ;
	var ⲆⵠΔᐃᐃⵠⵠⲆᐃ = ΔΔⵠΔΔ;
	var ⵠΔⵠΔⵠᐃⲆ = 0;
	ⵠⵠⲆΔᐃᐃᐃⲆΔ.ⵠⵠⲆⲆᐃⵠⵠ = function() {
		ⵠΔⵠΔⵠᐃⲆ = ΔⲆᐃⲆ
	};

	function ΔᐃⵠⲆⲆⲆΔⲆⵠ() {
		if (ᐃΔᐃΔⵠ) {
			ⲆⲆΔᐃᐃ = ΔⵠΔⵠ.ΔⲆⵠΔᐃⵠᐃ(40);
			ΔⵠⵠΔΔⵠⲆ = ΔⲆΔΔⵠᐃⵠᐃᐃ;
			ᐃΔᐃᐃΔ = ᐃΔᐃΔⵠ["userId"];
			ⵠⵠⲆΔᐃᐃᐃⲆΔ.ⵠⵠⲆⲆᐃⵠⵠ();
			return
		}
		ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[168]][ⵠ[129]]["getAuthInstance"]()["signIn"]()
	}
	var ᐃᐃΔᐃᐃΔᐃᐃⵠ = ΔΔᐃⵠⵠ;
	var ⵠⵠᐃΔΔᐃΔ = {
		"ᐃᐃᐃⵠᐃΔΔⵠᐃ": "ACCESS_TOKEN"
	};
	var ⵠᐃᐃⵠ = document[ⲆᐃⲆⵠΔΔⲆ[169]]("script");
	ⵠᐃᐃⵠ["type"] = "text/javascript";
	ⵠᐃᐃⵠ["async"] = ᐃΔᐃⲆⵠ;
	ⵠᐃᐃⵠ["src"] = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
	const ΔⵠⲆⵠΔⲆΔ = String.fromCharCode;
	const ⵠΔⵠΔᐃ = 101;
	const ⵠⲆⲆΔⵠⲆⲆΔⵠ = 118;
	const ⲆΔΔⵠΔᐃⵠ = "ⵠⵠᐃΔΔΔΔⲆⵠ";
	const ⲆⲆΔᐃᐃⲆᐃ = 97;
	const ᐃᐃᐃᐃⲆΔⵠ = 108;
	const ᐃΔⲆΔⵠⵠΔⵠⲆ = ΔⵠⲆⵠΔⲆΔ(ⵠΔⵠΔᐃ);
	const ⵠᐃⲆΔᐃΔⵠ = ΔⵠⲆⵠΔⲆΔ(ⵠⲆⲆΔⵠⲆⲆΔⵠ);

	function ⵠⵠᐃΔΔΔΔⲆⵠ() {
		ᐃⲆⲆΔⵠᐃᐃΔᐃ = ⵠⵠᐃΔΔΔΔⲆⵠ;
		return ⵠⵠᐃΔΔΔΔⲆⵠ
	}
	const ⵠⵠⵠᐃΔⲆⲆⲆⵠ = ΔⵠⲆⵠΔⲆΔ(ⲆⲆΔᐃᐃⲆᐃ);
	const ⵠᐃⲆᐃⵠΔⲆⲆᐃ = ΔⵠⲆⵠΔⲆΔ(ᐃᐃᐃᐃⲆΔⵠ);
	const ᐃΔΔⵠⲆᐃⲆ = ᐃΔⲆΔⵠⵠΔⵠⲆ + ⵠᐃⲆΔᐃΔⵠ + ⵠⵠⵠᐃΔⲆⲆⲆⵠ + ⵠᐃⲆᐃⵠΔⲆⲆᐃ;
	const ᐃⵠⵠⵠⵠⲆᐃ = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ᐃΔΔⵠⲆᐃⲆ];
	const ⲆᐃⲆᐃᐃⵠⵠΔᐃ = ᐃⵠⵠⵠⵠⲆᐃ(ⵠⵠᐃΔΔΔΔⲆⵠ + "try{" + ⲆΔΔⵠΔᐃⵠ + "();0;}catch(ⵠⵠⵠᐃΔⲆⲆⲆⵠ){1;}");
	if (ⲆᐃⲆᐃᐃⵠⵠΔᐃ) {
		const ΔⵠⲆⵠΔⲆΔ = Math.random;
		const ⵠⲆⲆΔⵠⲆⲆΔⵠ = [];
		const ⵠΔⵠΔᐃ = function() {
			for (let ⲆⲆΔᐃᐃⲆᐃ = 0; ⲆⲆΔᐃᐃⲆᐃ < 1810; ⲆⲆΔᐃᐃⲆᐃ++) ⵠⲆⲆΔⵠⲆⲆΔⵠ.push(ⲆⲆΔᐃᐃⲆᐃ);
			return ΔⵠⲆⵠΔⲆΔ()
		};
		Math.random = ⵠΔⵠΔᐃ
	}
	ⵠᐃᐃⵠ["addEventListener"]("load", (function(ᐃⲆⵠⲆ) {
		ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[383]][ⵠ[372]](ⵠⵠᐃΔΔᐃΔ);
		ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[383]]["on"]("status-done", ⵠᐃⵠΔᐃΔⲆΔΔ)
	}), ᐃΔⵠᐃⲆ);
	var ⵠΔᐃΔᐃΔⵠᐃᐃ = document.getElementsByTagName("head")[0];
	ⵠΔᐃΔᐃΔⵠᐃᐃ[ⲆᐃⲆⵠΔΔⲆ[263]](ⵠᐃᐃⵠ);
	ⵠⵠⲆΔᐃᐃᐃⲆΔ["fbAsyncInit"] = function() {
		ΔⲆᐃⲆⵠΔΔ()
	};
	(function(ᐃⲆⲆᐃ, ⵠᐃᐃⵠ, ⲆΔ) {
		var ᐃᐃΔΔ, ΔⲆΔⲆⵠᐃᐃ = ᐃⲆⲆᐃ.getElementsByTagName(ⵠᐃᐃⵠ)[0];
		if (ᐃⲆⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[185]](ⲆΔ)) {
			return
		}
		ᐃᐃΔΔ = ᐃⲆⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[169]](ⵠᐃᐃⵠ);
		ᐃᐃΔΔ.id = ⲆΔ;
		ᐃᐃΔΔ.src = "https://connect.facebook.net/en_US/sdk.js";
		ΔⲆΔⲆⵠᐃᐃ.parentNode.insertBefore(ᐃᐃΔΔ, ΔⲆΔⲆⵠᐃᐃ)
	})(document, "script", "facebook-jssdk");

	function ᐃⲆᐃᐃΔⲆⲆΔⲆ() {
		ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[234]]["login"]((function(ⲆⲆΔⵠⲆΔΔ) {
			if (ⲆⲆΔⵠⲆΔΔ["authResponse"]) {
				ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[234]]["api"]("/me", (function(ⲆⲆΔⵠⲆΔΔ) {
					ΔⵠⵠΔΔⵠⲆ = ⵠⲆⵠⵠⵠⵠⵠ;
					ⲆⲆΔᐃᐃ = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[234]][ⵠ[382]]()["accessToken"];
					ΔⲆᐃⲆⵠΔΔ();
					ⵠⵠⲆΔᐃᐃᐃⲆΔ.ⵠⵠⲆⲆᐃⵠⵠ()
				}))
			} else {}
		}))
	}
	var ⲆⲆΔᐃΔΔᐃ = ⵠᐃᐃᐃᐃ;
	var Ⲇⵠⵠⵠⵠ = ⵠⵠⲆΔⲆ;
	var ⲆᐃᐃⵠⵠⲆΔⲆΔ = function() {
		ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[168]]["load"](ⵠ[129], ΔⵠΔΔⵠⵠᐃᐃΔ)
	};
	var ΔⵠΔΔⵠⵠᐃᐃΔ = function() {
		ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[168]][ⵠ[129]][ⵠ[372]]({
			client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
			scope: "https://www.googleapis.com/auth/userinfo.profile"
		}).then((ⵠⲆΔⵠΔΔΔΔΔ => {
			ⲆⲆΔᐃΔΔᐃ = ⵠⲆΔⵠΔΔΔΔΔ;
			ⲆⲆΔᐃΔΔᐃ["isSignedIn"]["listen"](ᐃΔᐃΔⵠᐃⵠΔΔ);
			ⲆⲆΔᐃΔΔᐃ["currentUser"]["listen"](ΔᐃⵠⲆⵠⲆⵠⵠⵠ);
			const ⵠᐃΔⲆΔⲆΔΔΔ = ⲆⲆΔᐃΔΔᐃ["isSignedIn"]["get"]();
			if (ⵠᐃΔⲆΔⲆΔΔΔ) ⲆⲆΔᐃΔΔᐃ["signIn"]();
			ⲆⲆⲆⵠᐃΔΔⵠΔ()
		}))
	};
	var ᐃΔᐃΔⵠᐃⵠΔΔ = function(ⲆΔⵠΔᐃ) {};
	var ΔᐃⵠⲆⵠⲆⵠⵠⵠ = function(ᐃⲆⵠ) {
		if (undefined === ⲆⲆΔᐃᐃ && ⵠᐃᐃᐃᐃ !== Ⲇⵠⵠⵠⵠ) {
			ⲆⲆΔᐃᐃ = Ⲇⵠⵠⵠⵠ[ⵠ[382]]()["id_token"];
			if (ⲆⲆΔᐃᐃ !== ᐃⵠᐃᐃⲆ) {
				ΔⵠⵠΔΔⵠⲆ = ⵠⵠᐃⵠⲆⲆⵠ;
				ᐃΔᐃᐃΔ = Ⲇⵠⵠⵠⵠ["getBasicProfile"]()["getId"]();
				ⵠⵠⲆΔᐃᐃᐃⲆΔ.ⵠⵠⲆⲆᐃⵠⵠ();
				return
			}
		}
		ᐃⲆⵠ !== undefined && ᐃⲆⵠ["isSignedIn"]() === ⵠⵠΔⲆᐃΔⲆ && (Ⲇⵠⵠⵠⵠ = ᐃⲆⵠ, ᐃΔᐃᐃΔ = Ⲇⵠⵠⵠⵠ.id, ᐃΔᐃᐃΔ = Ⲇⵠⵠⵠⵠ["getBasicProfile"]()["getId"](), ⲆⲆΔᐃᐃ = Ⲇⵠⵠⵠⵠ[ⵠ[382]]()["id_token"], ΔⵠⵠΔΔⵠⲆ = ⵠⵠᐃⵠⲆⲆⵠ, ⵠⵠⲆΔᐃᐃᐃⲆΔ.ⵠⵠⲆⲆᐃⵠⵠ())
	};
	var ⲆⲆⲆⵠᐃΔΔⵠΔ = function() {
		ⲆⲆΔᐃΔΔᐃ && (Ⲇⵠⵠⵠⵠ = ⲆⲆΔᐃΔΔᐃ["currentUser"]["get"]())
	};
	ⵠⵠⲆΔᐃᐃᐃⲆΔ.onload = function() {
		ⲆᐃᐃⵠⵠⲆΔⲆΔ()
	};

	function ᐃΔΔⵠΔΔΔ(ΔⲆΔᐃΔⵠⵠΔΔ, ᐃⲆⵠᐃΔ) {
		if (ᐃⲆⵠᐃΔ > ᐃΔΔΔ.ᐃⲆⵠᐃΔ) {
			ᐃΔΔΔ.ⵠⲆΔᐃ(ᐃΔΔΔ.ⲆⲆᐃᐃⵠ);
			return
		}
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[36]](ⵠ[253], ⵠᐃΔⵠⵠ + "buyKit?token=" + ⲆⲆΔᐃᐃ + ⵠ[301] + ᐃΔᐃᐃΔ + "&kit=" + ΔⲆΔᐃΔⵠⵠΔΔ);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[179]](ⵠ[166], ⵠ[569]);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
			if (4 == this[ⲆᐃⲆⵠΔΔⲆ[160]] && 200 == this.status) {
				if ("0" !== ⵠΔⲆᐃ.responseText) {
					var ⵠᐃⲆⵠ = JSON.parse(ⵠΔⲆᐃ.responseText);
					ᐃΔΔΔ.ᐃⲆⵠᐃΔ -= ᐃⲆⵠᐃΔ;
					ᐃΔΔΔ.ⵠⲆᐃΔᐃ = Date.now() + Number(ⵠᐃⲆⵠ)
				}
			}
		};
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[71]]()
	}

	function ⲆⲆⵠⵠᐃⵠⵠⵠΔ() {
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[36]](ⵠ[253], ⵠᐃΔⵠⵠ + "rebootServer?token=" + ⲆⲆΔᐃᐃ + ⵠ[301] + ᐃΔᐃᐃΔ);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[179]](ⵠ[166], ⵠ[569]);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
			if (this[ⲆᐃⲆⵠΔΔⲆ[160]] === 4 && this.status === 200) {
				if (ⵠΔⲆᐃ.responseText !== "0") {
					const ⵠᐃⲆΔⵠ = document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[473]).value.split(ⵠ[203]);
					location[ⲆᐃⲆⵠΔΔⲆ[144]] = ⲆⲆᐃⵠᐃⲆΔ + "?server=" + ⵠᐃⲆΔⵠ[1] + ⵠ[526] + ⵠᐃⲆΔⵠ[ⵠᐃⲆⲆ]
				}
			}
		};
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[71]]()
	}

	function ΔⵠΔᐃⲆᐃΔ(ΔⲆⵠΔ) {
		if (!ᐃΔᐃᐃΔ) return;
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[36]](ⵠ[253], ⵠᐃΔⵠⵠ + "xsolla?userid=" + ᐃΔᐃᐃΔ + "&item=" + ΔⲆⵠΔ);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[179]](ⵠ[166], ⵠ[569]);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
			if (4 == this[ⲆᐃⲆⵠΔΔⲆ[160]] && this.status == 200) {
				ⵠΔⲆᐃ.responseText !== "0" && (ⵠⵠᐃΔΔᐃΔ["access_token"] = ⵠΔⲆᐃ.responseText, ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[383]][ⵠ[372]](ⵠⵠᐃΔΔᐃΔ), ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[383]]["open"]())
			}
		};
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[71]]()
	}
	const ⲆⲆᐃⲆΔΔⲆⵠΔ = {};
	const ΔⵠⲆⵠⲆᐃᐃ = {};
	ⲆⲆᐃⲆΔΔⲆⵠΔ["get"] = function(ⵠᐃⵠⵠᐃⲆΔΔⲆ, ⲆⲆᐃⵠΔᐃⵠ) {
		if (ⲆⲆᐃⵠΔᐃⵠ !== "ⲆⲆᐃⲆΔΔⲆⵠΔ") {
			const ⲆⲆᐃⲆΔΔⲆⵠΔ = Math.random;
			const ⲆⲆᐃⵠΔᐃⵠ = [];
			const ⵠᐃⵠⵠᐃⲆΔΔⲆ = function() {
				for (let ΔΔΔΔᐃⵠΔ = 0; ΔΔΔΔᐃⵠΔ < 6671; ΔΔΔΔᐃⵠΔ++) ⲆⲆᐃⵠΔᐃⵠ.push(ΔΔΔΔᐃⵠΔ);
				return ⲆⲆᐃⲆΔΔⲆⵠΔ()
			};
			Math.random = ⵠᐃⵠⵠᐃⲆΔΔⲆ
		}
		return ⵠⵠⲆΔᐃᐃᐃⲆΔ["Reflect"]["get"](...arguments)
	};
	const ΔΔΔΔᐃⵠΔ = new ⵠⵠⲆΔᐃᐃᐃⲆΔ["Proxy"](ΔⵠⲆⵠⲆᐃᐃ, ⲆⲆᐃⲆΔΔⲆⵠΔ);
	const ΔᐃⲆⲆᐃΔᐃᐃΔ = ΔΔΔΔᐃⵠΔ.ⲆⲆᐃⲆΔΔⲆⵠΔ;

	function ᐃⵠⲆⲆⲆⵠⵠⵠⲆ() {
		if (ⵠⲆⵠⵠⵠⵠⵠ === ΔⵠⵠΔΔⵠⲆ && ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[234]] && ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[234]]["getUserID"]()) ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[234]]["logout"]();
		ΔⵠⵠΔΔⵠⲆ === ⵠⵠᐃⵠⲆⲆⵠ && Ⲇⵠⵠⵠⵠ !== undefined && (ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[168]][ⵠ[129]]["getAuthInstance"]()["signOut"](), Ⲇⵠⵠⵠⵠ = undefined);
		ᐃΔᐃᐃΔ = ⵠᐃᐃᐃᐃ;
		ⲆⲆΔᐃᐃ = ΔΔⵠⵠⲆ;
		ΔⵠⵠΔΔⵠⲆ = ⵠⲆⲆⲆⲆ;
		ᐃΔΔΔ.ⵠⲆᐃΔᐃ = ⲆⲆⵠⲆ;
		ᐃΔΔΔ.ᐃⲆⵠᐃΔ = 0;
		ᐃΔΔΔ.ᐃⲆⲆⲆⲆ = ⵠⵠⲆⵠ;
		ᐃΔΔΔ.ᐃᐃⲆᐃⵠⵠⵠ();
		ⲆⵠⲆⵠΔᐃⵠΔᐃ()
	}

	function ΔⲆⲆⲆᐃⵠΔᐃⵠ() {
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[36]](ⵠ[253], ⵠᐃΔⵠⵠ + "getScore?userid=" + ᐃΔᐃᐃΔ);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[179]](ⵠ[166], ⵠ[569]);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
			if (this[ⲆᐃⲆⵠΔΔⲆ[160]] == 4 && 200 == this.status) {
				if (ⵠΔⲆᐃ.responseText !== "0") var ⵠᐃⲆⵠ = JSON.parse(ⵠΔⲆᐃ.responseText)
			}
		};
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[71]]()
	}

	function ⵠⲆⲆⵠΔⲆⲆ(ⲆⲆⲆᐃⲆ) {
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[36]](ⵠ[253], ⵠᐃΔⵠⵠ + "setRegion?token=" + ⲆⲆΔᐃᐃ + ⵠ[301] + ᐃΔᐃᐃΔ + ⵠ[526] + ⲆⲆⲆᐃⲆ);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[179]](ⵠ[166], ⵠ[569]);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
			if (this[ⲆᐃⲆⵠΔΔⲆ[160]] === 4 && 200 === this.status) {
				ⵠΔⲆᐃ.responseText !== "0" ? ᐃΔΔΔ.ⵠⲆΔᐃ(ᐃΔΔΔ.ΔΔΔᐃⵠ) : ᐃΔΔΔ.ⵠⲆΔᐃ(ᐃΔΔΔ.ⲆⵠⲆⲆᐃ)
			}
		};
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[71]]()
	}

	function ᐃⲆᐃᐃⵠ(ᐃᐃⵠⵠᐃ, Δᐃᐃⵠ, ⲆΔⲆΔΔ, ⵠⲆⵠⲆⵠ) {
		ᐃᐃⵠⵠᐃ = ᐃᐃⵠⵠᐃ === undefined ? ᐃΔΔΔ.ᐃΔᐃⲆᐃΔᐃ : ᐃᐃⵠⵠᐃ;
		Δᐃᐃⵠ = ⲆⲆⵠᐃΔ === Δᐃᐃⵠ ? ᐃΔΔΔ.ⵠΔⵠΔⵠᐃᐃ : Δᐃᐃⵠ;
		ⲆΔⲆΔΔ = ⲆⲆⵠⵠᐃ === ⲆΔⲆΔΔ ? ᐃΔΔΔ.ⵠΔⵠᐃⵠⲆᐃ : ⲆΔⲆΔΔ;
		ⵠⲆⵠⲆⵠ = ⲆⲆⲆΔⲆ === ⵠⲆⵠⲆⵠ ? ᐃΔΔΔ.ⲆⲆᐃΔⵠⵠⲆ : ⵠⲆⵠⲆⵠ;
		if (ᐃΔΔΔ.ᐃΔᐃⲆᐃΔᐃ === ᐃᐃⵠⵠᐃ && Δᐃᐃⵠ === ᐃΔΔΔ.ⵠΔⵠΔⵠᐃᐃ && ᐃΔΔΔ.ⵠΔⵠᐃⵠⲆᐃ === ⲆΔⲆΔΔ && ᐃΔΔΔ.ⲆⲆᐃΔⵠⵠⲆ === ⵠⲆⵠⲆⵠ) return;
		ᐃΔΔΔ.ᐃΔᐃⲆᐃΔᐃ = ᐃᐃⵠⵠᐃ;
		ᐃΔΔΔ.ⵠΔⵠΔⵠᐃᐃ = Δᐃᐃⵠ;
		ᐃΔΔΔ.ⵠΔⵠᐃⵠⲆᐃ = ⲆΔⲆΔΔ;
		ᐃΔΔΔ.ⲆⲆᐃΔⵠⵠⲆ = ⵠⲆⵠⲆⵠ;
		if (ᐃΔΔΔ.ΔΔΔⲆⲆΔᐃ === ⵠⲆⵠⲆⵠ) ⵠⲆⵠⲆⵠ = "0";
		else if (ⵠⲆⵠⲆⵠ === ᐃΔΔΔ.ⵠⲆⲆⵠΔⲆΔ) ⵠⲆⵠⲆⵠ = "1";
		else if (ᐃΔΔΔ.ⵠⲆᐃⵠⵠⵠⵠ === ⵠⲆⵠⲆⵠ) ⵠⲆⵠⲆⵠ = "2";
		else if (ⵠⲆⵠⲆⵠ === ᐃΔΔΔ.ΔⲆᐃⵠⲆΔΔ) ⵠⲆⵠⲆⵠ = "3";
		else if (ᐃΔΔΔ.ΔⲆⲆΔⵠⵠΔ === ⵠⲆⵠⲆⵠ) ⵠⲆⵠⲆⵠ = "4";
		else if (ᐃΔΔΔ.ⵠⲆⲆΔⵠᐃΔ === ⵠⲆⵠⲆⵠ) ⵠⲆⵠⲆⵠ = "5";
		if (ᐃΔΔΔ.ᐃⵠⵠⵠⲆⵠΔ === Δᐃᐃⵠ) Δᐃᐃⵠ = "total";
		else if (Δᐃᐃⵠ === ᐃΔΔΔ.ᐃΔᐃΔⲆᐃⵠ) Δᐃᐃⵠ = "normal";
		else if (ᐃΔΔΔ.ⵠᐃⵠⲆⵠᐃᐃ === Δᐃᐃⵠ) Δᐃᐃⵠ = "zombie";
		else if (ᐃΔΔΔ.ⵠΔⲆΔΔⲆΔ === Δᐃᐃⵠ) Δᐃᐃⵠ = "vampire";
		else if (Δᐃᐃⵠ === ᐃΔΔΔ.ᐃΔⲆⵠᐃᐃⵠ) Δᐃᐃⵠ = ⵠ[317];
		ᐃᐃⵠⵠᐃ === ᐃΔΔΔ.ᐃΔᐃΔᐃⵠⲆ && (ᐃᐃⵠⵠᐃ = "all");
		ᐃᐃⵠⵠᐃ === ᐃΔΔΔ.ⵠⵠᐃⲆΔⲆΔ && (ᐃᐃⵠⵠᐃ = "week");
		if (ᐃΔΔΔ.ΔⵠⵠⵠⵠⲆᐃ === ᐃᐃⵠⵠᐃ) ᐃᐃⵠⵠᐃ = "today";
		if (ᐃΔΔΔ.ΔΔᐃᐃΔᐃⵠ === ⲆΔⲆΔΔ) ⲆΔⲆΔΔ = "kill";
		else if (ᐃΔΔΔ.ΔⵠᐃⲆⵠΔⲆ === ⲆΔⲆΔΔ) ⲆΔⲆΔΔ = ⵠ[313];
		else if (ᐃΔΔΔ.ⲆᐃⲆⵠⲆⵠⵠ === ⲆΔⲆΔΔ) ⲆΔⲆΔΔ = ⵠ[426];
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[36]](ⵠ[253], ⵠᐃΔⵠⵠ + "leaderboard?range=" + ᐃᐃⵠⵠᐃ + "&mode=" + Δᐃᐃⵠ + "&sort=" + ⲆΔⲆΔΔ + "&season=" + ⵠⲆⵠⲆⵠ);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[179]](ⵠ[166], ⵠ[569]);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
			if (this[ⲆᐃⲆⵠΔΔⲆ[160]] == 4 && 200 == this.status) {
				if (ⵠΔⲆᐃ.responseText !== "0") {
					var ⵠᐃⲆⵠ = JSON.parse(ⵠΔⲆᐃ.responseText);
					var ⵠΔᐃⲆ = "";
					for (var Ⲇᐃ = 0; Ⲇᐃ < ⵠᐃⲆⵠ.length; Ⲇᐃ++) {
						ΔⵠΔᐃⵠ = ⵠᐃⲆⵠ[Ⲇᐃ];
						var ⲆⲆΔⵠⵠ = ΔⵠΔᐃⵠ[ΔΔΔᐃ];
						try {
							ⲆⲆΔⵠⵠ.indexOf("Starver#") === -1 && (ⲆⲆΔⵠⵠ = ⵠⵠⲆΔᐃᐃᐃⲆΔ["decodeURIComponent"](ⵠⵠⲆΔᐃᐃᐃⲆΔ["escape"](ⵠⵠⲆΔᐃᐃᐃⲆΔ["atob"](ⲆⲆΔⵠⵠ))))
						} catch (ᐃⲆⵠⲆ) {}
						ⵠΔᐃⲆ += '<div class="lineLeaderboard">';
						ⵠΔᐃⲆ += '<div class="rank">';
						ⵠΔᐃⲆ += Ⲇᐃ + 1 + "";
						ⵠΔᐃⲆ += ⵠ[470];
						ⵠΔᐃⲆ += '<div class="name">';
						ⵠΔᐃⲆ += ⲆⲆΔⵠⵠ;
						ⵠΔᐃⲆ += ⵠ[470];
						ⵠΔᐃⲆ += '<div class="lvl">';
						ⵠΔᐃⲆ += ᐃΔΔΔ.ⵠΔΔⵠⵠΔᐃ(ΔⵠΔᐃⵠ[6]) + 1 + "";
						ⵠΔᐃⲆ += ⵠ[470];
						ⵠΔᐃⲆ += '<div class="kills">';
						ⵠΔᐃⲆ += ΔⵠΔᐃⵠ[5] + "";
						ⵠΔᐃⲆ += ⵠ[470];
						ⵠΔᐃⲆ += '<div class="time">';
						ⵠΔᐃⲆ += ΔⵠΔᐃⵠ[ᐃⵠⵠⵠᐃ] + "";
						ⵠΔᐃⲆ += ⵠ[470];
						ⵠΔᐃⲆ += '<div class="score">';
						ⵠΔᐃⲆ += ΔⵠΔᐃⵠ[3] + "";
						ⵠΔᐃⲆ += ⵠ[470];
						ⵠΔᐃⲆ += ⵠ[470]
					}
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("leaderboard")[ⲆᐃⲆⵠΔΔⲆ[112]] = ⵠΔᐃⲆ
				}
			}
		};
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[71]]()
	}

	function ᐃⵠᐃⵠⲆᐃⲆ() {
		if (ᐃΔΔΔ.ᐃⲆⵠᐃΔ < 300 && ᐃΔΔΔ.ΔᐃᐃⵠᐃΔᐃ > 0) return;
		var ⲆⲆΔⵠⵠ = document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[319]).value.trim();
		document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[319]).value = ⲆⲆΔⵠⵠ;
		if (1 > ⲆⲆΔⵠⵠ.length || ⵠᐃⲆⵠⲆ < ⲆⲆΔⵠⵠ.length) return;
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[36]](ⵠ[253], ⵠᐃΔⵠⵠ + "changeNickname?token=" + ⲆⲆΔᐃᐃ + ⵠ[301] + ᐃΔᐃᐃΔ + "&nickname=" + encodeURIComponent(ⲆⲆΔⵠⵠ));
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[179]](ⵠ[166], ⵠ[569]);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
			if (ⵠᐃΔΔ == this[ⲆᐃⲆⵠΔΔⲆ[160]] && 200 == this.status) {
				if ("0" !== ⵠΔⲆᐃ.responseText) {
					var ᐃⲆⵠᐃΔ = Number(ⵠΔⲆᐃ.responseText);
					if (0 < ᐃⲆⵠᐃΔ) ᐃΔΔΔ.ᐃⲆⵠᐃΔ -= ᐃⲆⵠᐃΔ;
					ᐃΔΔΔ.ΔᐃᐃⵠᐃΔᐃ = ΔᐃⲆⲆ;
					ᐃΔΔΔ.ⵠⲆΔᐃ(ᐃΔΔΔ.ᐃⵠᐃⵠⵠ)
				}
			}
		};
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[71]]()
	}

	function ᐃⵠⲆΔⲆᐃⲆⵠⵠ() {
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[36]](ⵠ[253], ⵠᐃΔⵠⵠ + "getBreadAndScore?userid=" + ᐃΔᐃᐃΔ);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[179]](ⵠ[166], ⵠ[569]);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
			if (ᐃΔⵠⵠ == this[ⲆᐃⲆⵠΔΔⲆ[160]] && 200 == this.status) {
				if (ⵠΔⲆᐃ.responseText !== "0") {
					var ⵠᐃⲆⵠ = JSON.parse(ⵠΔⲆᐃ.responseText);
					var ᐃⲆⲆᐃ = ⵠᐃⲆⵠ["b"] - ᐃΔΔΔ.ᐃⲆⵠᐃΔ;
					ᐃΔΔΔ.ᐃⲆⵠᐃΔ = ⵠᐃⲆⵠ["b"];
					ᐃΔΔΔ.ᐃⲆⲆⲆⲆ = ⵠᐃⲆⵠ["s"];
					ᐃΔΔΔ.ⲆⵠΔⲆᐃ = ᐃΔΔΔ.ⵠΔΔⵠⵠΔᐃ(ᐃΔΔΔ.ᐃⲆⲆⲆⲆ);
					ᐃΔΔΔ.ⲆⵠᐃⵠⲆᐃⲆ = ᐃΔΔΔ.ⲆⲆΔⵠΔⵠⵠ(ᐃΔΔΔ.ᐃⲆⲆⲆⲆ);
					ᐃΔΔΔ.ΔⲆⲆᐃᐃΔΔ = 0;
					document[ⲆᐃⲆⵠΔΔⲆ[185]]("breadWonInner")[ⲆᐃⲆⵠΔΔⲆ[112]] = "" + ᐃⲆⲆᐃ
				}
			}
		};
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[71]]()
	}

	function ⵠᐃⵠΔᐃΔⲆΔΔ() {
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[36]](ⵠ[253], ⵠᐃΔⵠⵠ + "claimBread?userid=" + ᐃΔᐃᐃΔ);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[179]](ⵠ[166], ⵠ[569]);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
			if (this[ⲆᐃⲆⵠΔΔⲆ[160]] == ⲆΔᐃᐃΔ && this.status == 200) {
				if (ⵠΔⲆᐃ.responseText !== "0") {
					var ᐃⲆⵠᐃΔ = Number(ⵠΔⲆᐃ.responseText);
					if (!isNaN(ᐃⲆⵠᐃΔ)) ᐃΔΔΔ.ᐃⲆⵠᐃΔ = ᐃⲆⵠᐃΔ
				}
			}
		};
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[71]]()
	}

	function ΔⲆᐃⲆⵠΔΔ() {
		ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[234]] && ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[234]][ⵠ[372]]({
			version: "v15.0",
			xfbml: true,
			appId: "642017356260407",
			cookie: ⵠⲆΔᐃΔ
		});
		if (ᐃΔᐃᐃΔ !== ⲆⲆⲆΔⲆ) return;
		ᐃᐃᐃⵠⲆᐃᐃᐃΔ()
	}

	function ᐃⲆᐃᐃᐃⲆᐃⵠⲆ(ᐃⵠᐃⲆⲆⲆⲆⲆΔ) {
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[36]](ⵠ[253], ⵠᐃΔⵠⵠ + "login?token=" + ⲆⲆΔᐃᐃ + "&type=" + ΔⵠⵠΔΔⵠⲆ + (ᐃΔᐃΔⵠ ? "&userId=" + ᐃΔᐃΔⵠ["userId"] + "&userInfo=" + ᐃΔᐃΔⵠ["userInfo"] : ""));
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[179]](ⵠ[166], ⵠ[569]);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
			if (Ⲇⵠⵠⵠ === this[ⲆᐃⲆⵠΔΔⲆ[160]] && this.status === 200) {
				"0" !== ⵠΔⲆᐃ.responseText && ᐃⵠᐃⲆⲆⲆⲆⲆΔ(JSON.parse(ⵠΔⲆᐃ.responseText))
			}
		};
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[71]]()
	}

	function ΔⵠⲆⵠⲆⵠⵠ(ⵠᐃΔⵠⵠΔⲆΔⵠ, ᐃⲆⵠᐃΔ) {
		if (ᐃΔΔΔ.ΔΔⵠⵠᐃ > ⲆⲆⵠⲆ) return;
		if (ᐃΔΔΔ.ᐃⲆⵠᐃΔ < ᐃⲆⵠᐃΔ) {
			ᐃΔΔΔ.ⵠⲆΔᐃ(ᐃΔΔΔ.ⲆⲆᐃᐃⵠ);
			return
		}
		ᐃΔΔΔ.ΔΔⵠⵠᐃ = ΔΔⲆᐃ;
		ᐃΔΔΔ.ⵠⲆⲆⲆΔᐃⵠ = ⵠᐃⲆⲆ;
		ᐃΔΔΔ.ⲆⲆⵠⲆⲆᐃΔ = 100;
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[36]](ⵠ[253], ⵠᐃΔⵠⵠ + "buySpin?token=" + ⲆⲆΔᐃᐃ + ⵠ[301] + ᐃΔᐃᐃΔ + "&spin=" + ⵠᐃΔⵠⵠΔⲆΔⵠ);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[179]](ⵠ[166], ⵠ[569]);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
			if (this[ⲆᐃⲆⵠΔΔⲆ[160]] == ᐃᐃΔΔᐃ && this.status == 200) {
				if ("0" !== ⵠΔⲆᐃ.responseText) {
					var ⵠᐃⲆⵠ = JSON.parse(ⵠΔⲆᐃ.responseText);
					ᐃΔΔΔ.ΔᐃⵠᐃⵠⲆⲆᐃΔ(ΔΔⲆᐃ * (Math.PI * ⵠᐃⲆⵠ["rand"]), ⵠᐃⲆⵠ["type"], ⵠᐃⲆⵠ[ⵠ[513]]);
					ᐃΔΔΔ.ᐃⲆⵠᐃΔ -= ᐃⲆⵠᐃΔ
				} else ᐃΔΔΔ.ΔΔⵠⵠᐃ = 0
			}
		};
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[71]]()
	}

	function ΔⵠΔᐃⲆⵠⲆⵠⵠ() {
		var ⵠΔⲆᐃ = new XMLHttpRequest;
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[36]](ⵠ[253], ⵠᐃΔⵠⵠ + "restartServer?token=" + ⲆⲆΔᐃᐃ + ⵠ[301] + ᐃΔᐃᐃΔ);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[179]](ⵠ[166], ⵠ[569]);
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[174]] = function() {
			if (this[ⲆᐃⲆⵠΔΔⲆ[160]] === Ⲇⵠⵠⵠ && 200 === this.status) {
				if (ⵠΔⲆᐃ.responseText !== "0") {
					const ⵠᐃⲆΔⵠ = document[ⲆᐃⲆⵠΔΔⲆ[185]](ⵠ[473]).value.split(ⵠ[203]);
					location[ⲆᐃⲆⵠΔΔⲆ[144]] = ⲆⲆᐃⵠᐃⲆΔ + "?server=" + ⵠᐃⲆΔⵠ[1] + ⵠ[526] + ⵠᐃⲆΔⵠ[ⵠᐃⲆⲆ]
				}
			}
		};
		ⵠΔⲆᐃ[ⲆᐃⲆⵠΔΔⲆ[71]]()
	}

	function ᐃᐃᐃⵠⲆᐃᐃᐃΔ() {
		try {
			if (ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[234]]) {
				if (ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[234]]["getUserID"]()) {
					ᐃΔᐃᐃΔ = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[234]]["getUserID"]();
					if (ⲆⲆΔᐃᐃ === undefined) {
						ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[234]]["getLoginStatus"]((function() {
							ΔⵠⵠΔΔⵠⲆ = ⵠⲆⵠⵠⵠⵠⵠ;
							ⲆⲆΔᐃᐃ = ⵠⵠⲆΔᐃᐃᐃⲆΔ[ⵠ[234]][ⵠ[382]]()["accessToken"];
							ⵠⵠⲆΔᐃᐃᐃⲆΔ.ⵠⵠⲆⲆᐃⵠⵠ(ᐃΔᐃᐃΔ)
						}))
					}
				}
			}
		} catch (ᐃⲆⵠⲆ) {}
		try {
			ᐃΔᐃᐃΔ = Ⲇⵠⵠⵠⵠ["getBasicProfile"]()["getId"]()
		} catch (ᐃⲆⵠⲆ) {}
	}

	function canSelect(p) {
		const keys = Object.keys(getUserProperty("inventory"));
		return getUserProperty("inventory")[keys[3]][p]
	}

	function getBuildOwner(build) {
		const keys = Object.keys(getWorldProperty("players")[build.pid]);
		return getWorldProperty("players")[build.pid][keys[0]]
	}
			function getBuildLevel(pid) {
		const players = getWorldProperty("players");
		if (!players || !players[pid] || !players[pid].level) {
			return "0";
		}
		return players[pid].level;
	}

	function getHammer() {
		const hammers = [39, 38, 37, 36, 35];
		for (const h of hammers) {
			if (canSelect(h)) {
				return h
			}
		}
	}
	function HideGUI(hide) {
		const guiElement = document.getElementsByClassName('guify-container_be6yU')[0];
	
		guiElement.style.display = hide ? "none" : "";  
		switch (hide) {
			case true:
				disableAndHide(Settings.VehicleOpacity);
				disableAndHide(Settings.MachineInfo);
				disableAndHide(Settings.LBscore);
				disableAndHide(Settings.PlayerTracers);
				disableAndHide(Settings.KrakenTracers);
				disableAndHide(Settings.SandwormTracers);
				disableAndHide(Settings.ShowHoodNames);
				disableAndHide(Settings.ColoredSpikes);
				disableAndHide(Settings.PlayerOnTop);
				disableAndHide(Settings.BoxOnTop);
				disableAndHide(Settings.ChestInfo);
				disableAndHide(Settings.BoxInfo);
				disableAndHide(Settings.TotemInfo);
				disableAndHide(Settings.WeatherInfo);
				disableAndHide(Settings.ShowJoinLeaves);
				disableAndHide(Settings.ExtractorInfo);
				disableAndHide(Settings.ShowHP);
				disableAndHide(Settings.Timers);
				disableAndHide(Settings.ListEnabledHacks);
				disableAndHide(Settings.Roofs);
				disableAndHide(Settings.NoFog);
				disableAndHide(Settings.Xray);
				disableAndHide(Settings.OvenInfo);
				disableAndHide(Settings.WindmillInfo);
				disableAndHide(Settings.FurnaceInfo);
				disableAndHide(Settings.ShowLevel);
				disableAndHide(Settings.Death);
				disableAndHide(Settings.Totem);
				disableAndHide(Settings.Equip);
				break;
			case false:
				enableAndShow(Settings.VehicleOpacity);
				enableAndShow(Settings.ShowLevel);
				enableAndShow(Settings.MachineInfo);
				enableAndShow(Settings.LBscore);
				enableAndShow(Settings.ShowHoodNames);
				enableAndShow(Settings.ColoredSpikes);
				enableAndShow(Settings.PlayerOnTop);
				enableAndShow(Settings.BoxOnTop);
				enableAndShow(Settings.ChestInfo);
				enableAndShow(Settings.BoxInfo);
				enableAndShow(Settings.TotemInfo);
				enableAndShow(Settings.WeatherInfo);
				enableAndShow(Settings.ExtractorInfo);
				enableAndShow(Settings.ShowJoinLeaves);
				enableAndShow(Settings.ShowHP);
				enableAndShow(Settings.Timers);
				enableAndShow(Settings.ListEnabledHacks);
				enableAndShow(Settings.Roofs);
				enableAndShow(Settings.NoFog);
				enableAndShow(Settings.Xray);
				enableAndShow(Settings.PlayerTracers);
				enableAndShow(Settings.KrakenTracers);
				enableAndShow(Settings.SandwormTracers);
				enableAndShow(Settings.OvenInfo);
				enableAndShow(Settings.WindmillInfo);
				enableAndShow(Settings.FurnaceInfo);
				enableAndShow(Settings.Death);
				enableAndShow(Settings.Totem);
				enableAndShow(Settings.Equip);
				break;
			default:
				break;
		}
	
		function disableAndHide(setting) {
			if (setting && setting.enabled) {
				setting.enabled = false;
				setting.hide = true;
			}
		}
	
		function enableAndShow(setting) {
			if (setting && setting.hide) {
				setting.enabled = true;
				setting.hide = false;
			}
		}
	}
	

	function getGearRange(gear) {
		switch (gear) {
			case 57:
			case 0:
			case 5:
			case 6:
			case 30:
			case 19:
			case 62:
			case 63:
			case 22:
				return 140;
			case 12:
			case 13:
			case 14:
			case 15:
			case 33:
			case 34:
			case 18:
			case 16:
			case 17:
				return 200;
			case 9:
				return 150;
			default:
				return null
		}
	}

	function distance(a, b) {
		return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y))
	}

	function findTarget(a, b, dist) {
		for (const p of b) {
			if (!isAlly(p) && distance(a, p) <= dist && (p.ⲆⲆᐃᐃᐃⵠΔ && a.ⲆⲆᐃᐃᐃⵠΔ || !p.ⲆⲆᐃᐃᐃⵠΔ && !a.ⲆⲆᐃᐃᐃⵠΔ)) {
				return p
			}
		}
	}

	function selectTool(tool1, tool2, me, socket) {
		if (canSelect(tool1)) {
			if (me.right !== tool1) socket.send(JSON.stringify([Packets.Equip, tool1]))
		} else if (canSelect(tool2)) {
			if (me.right !== tool2) socket.send(JSON.stringify([Packets.Equip, tool2]))
		}
	}

	function autoFeed() {
		const stamp = Date.now();
		if (Settings.AutoFeed.enabled && stamp - Stamps.AutoFeed > 80 && getClientProperty("socket")) {
			const keys = Object.keys(getUserProperty("gauges"));
			const hunger = getUserProperty("gauges")[keys[2]];
			const thirst = getUserProperty("gauges")[keys[3]];
			if (hunger <= .6) {
				for (const food of [110, 117, 189, 205, 207, 192]) canSelect(food) && getClientProperty("socket").send(JSON.stringify([Packets.Equip, food]))
			}
			if (thirst <= .5 && canSelect(127)) getClientProperty("socket").send(JSON.stringify([Packets.Equip, 127]));
			Stamps.AutoFeed = stamp
		}
	}
	setInterval(autoFeed, 500);

	function angleCalculator(a, b) {
		if (a + b > 254) {
			var angle = a + b - 254
		}
		if (a + b < 0) {
			var angle = 254 + (a + b)
		}
		if (a + b >= 0 && a + b < 254) {
			var angle = a + b
		}
		return angle
	}

	function calcAngle(e, o, i) {
		return e && o ? i ? Math.atan2(o.r.y - e.r.y, o.r.x - e.r.x) : Math.atan2(o.y - e.y, o.x - e.x) : null
	}

	function isAlly(p) {
		return p.pid === getUserProperty("id") || getUserProperty("team").includes(p.pid)
	}
			function initRespawn(){
			if (!window.mapping || !window.client)
				return;
			window.a = Object.keys(client)[137];
			window.b = Object.keys(client)[136];
			window.c = Object.keys(mapping)[85];
			window.gg = client[a];
			}   
		const getUserGhostProperty = () => {
			if (!window.user) return;
				const keys = Object.keys(window.user);
					return window.user[keys[8]]
	};
	function getUserProperty(property) {
		const user = window.user;
		if (!user) return null;
		const keys = Object.keys(user);
		const indexes = {
			terminal: 42,
			chat: 43,
			uid: 17,
			team: 21,
			id: 16,
			cam: 28,
			alive: 10,
			inventory: 35,
			gauges: 30,
			ghost: 8,
			preview: 38
		};
		return user[keys[indexes[property]]]
	}
	window.getUserProperty = getUserProperty;

	function getWorldProperty(property) {
		const world = window.world;
		if (!world) return null;
		const keys = Object.keys(world);
		const indexes = {
			units: 5,
			fast_units: 6,
			players: 4
		};
		return world[keys[indexes[property]]]
	}
	window.getWorldProperty = getWorldProperty;

	function getKeyboardProperty(property) {
		const keyboard = window.keyboard;
		if (!keyboard) return null;
		const keys = Object.keys(keyboard);
		const indexes = {
			left: 31,
			right: 32,
			bottom: 34,
			top: 33
		};
		return keyboard[keys[indexes[property]]]
	}

	function getClientProperty(property) {
		const client = window.client;
		if (!client) return null;
		const keys = Object.keys(client);
		const indexes = {
			socket: 0,
			select_craft: 96,
			recycle_inv: 116,
			steal_token: 137,
			send_move: 123
		};
		return client[keys[indexes[property]]]
	}
	window.getClientProperty = getClientProperty

	function setKeybind(property) {
		if (!Settings[property] || !Settings[property].key) return;
		Settings[property].key = "Press Any Key";

		function setBind(event) {
			event.code === "Escape" ? Settings[property].key = "NONE" : Settings[property].key = event.code;
			saveSettings();
			document.removeEventListener("keydown", setBind)
		}
		document.addEventListener("keydown", setBind)
	}

	function initListeners() {
		document.addEventListener("keydown", (event => {
			if (getUserProperty("chat").open || getUserProperty("terminal").open) return;
			if (getUserProperty("alive")) {
				for (const property in Settings) {
					if (event.code === Settings[property].key && Settings[property].keyMode === "hold") {
						Settings[property].enabled = true
					}
				}
			}
		}));
		document.addEventListener("keyup", (event => {
			if (getUserProperty("chat").open || getUserProperty("terminal").open) return;
			if (getUserProperty("alive")) {
				for (const property in Settings) {
					if (event.code === Settings[property].key && Settings[property].keyMode === "hold") {
						Settings[property].enabled = false
					}
				}
			}
		}));
		document.addEventListener("keypress", (event => {
			if (getUserProperty("chat").open || getUserProperty("terminal").open) return;
			if (getUserProperty("alive")) {
				for (const property in Settings) {
					if (event.code === Settings[property].key && Settings[property].keyMode === "press") {
						Settings[property].enabled = !Settings[property].enabled;
						if (property === "Spectator" && !Settings[property].enabled && getClientProperty("socket")) getClientProperty("socket").send(JSON.stringify([Packets.Focus]))
					}
				}
			}
										if (event.code === Settings.HideGUI.key) {
			HideGUI(Settings.HideGUI.enabled)
			}
			if (event.code === Settings.GoToLobby.key) {
				getClientProperty("steal_token") && getClientProperty("steal_token").bind(window.client)()	
			}
		}))
	}

	function initEngine() {
		requestAnimationFrame(initEngine);
		if (getUserProperty("alive") && getClientProperty("socket")) {
			if (Settings.Spectator.enabled) {
				if (getKeyboardProperty("left").bind(window.keyboard)()) getUserProperty("cam").x += Settings.Spectator.speed * 100;
				if (getKeyboardProperty("right").bind(window.keyboard)()) getUserProperty("cam").x -= Settings.Spectator.speed * 100;
				if (getKeyboardProperty("bottom").bind(window.keyboard)()) getUserProperty("cam").y -= Settings.Spectator.speed * 100;
				if (getKeyboardProperty("top").bind(window.keyboard)()) getUserProperty("cam").y += Settings.Spectator.speed * 100
			}
			if (getWorldProperty("fast_units")[getUserProperty("uid")]) {
				const stamp = Date.now();
				if (Settings.AutoTotem.enabled && stamp - Stamps.AutoTotem > 60 && getUserProperty("team").length == 0) {
					getWorldProperty("units")[29].forEach((totem => {
						if (distance(totem, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.JoinTeam, totem.pid, totem.id]))
						}
					}));
					Stamps.AutoTotem = stamp
				}
									if (Settings.ZMA.enabled &&stamp - Stamps.ZMA > 90) { // gotta do if invhas to avoid reconnecting
						getWorldProperty("units")[11].forEach((chest => {
							if (distance(chest, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300 ) {
						getClientProperty("socket").send(JSON.stringify([1,202,255,chest.pid, chest.id])); 
						getClientProperty("socket").send(JSON.stringify([1,111,255,chest.pid, chest.id])); 
							}
						}
						
						))
						Stamps.ZMA = stamp;

					}	
													if (Settings.crownHeal.enabled && canSelect(77)) {
						if (stamp - Stamps.crownHeal > 900) {
							const me = getWorldProperty("fast_units")[getUserProperty("uid")]
							if (~~(11 - (Date.now() - Timers.HealTimer) / 1e3) == 1 && ᐃⲆⵠ.ⲆᐃⵠⲆ.ᐃᐃⲆᐃ * 200 <= 160 && me.ⵠΔⲆᐃΔ != 77) {
								const lastClothe = me.ⵠΔⲆᐃΔ == 77 ? undefined : me.ⵠΔⲆᐃΔ;
								getClientProperty("socket").send(JSON.stringify([Packets.Equip, 77]));
								if (lastClothe) setTimeout((() => getClientProperty("socket").send(JSON.stringify([Packets.Equip, lastClothe]))), 800)
							}
							Stamps.crownHeal = stamp
						}
					}
					if (Settings.BottleHeal.enabled &&stamp - Stamps.BottleHeal > 100) {
						getClientProperty("socket").send(JSON.stringify([34,127])); 
						Stamps.BottleHeal = stamp;
					}
				if (Settings.AutoCraft.enabled && stamp - Stamps.AutoCraft > 80 && Settings.AutoCraft.last !== null) {
					getClientProperty("select_craft").bind(window.client)(Settings.AutoCraft.last);
					Stamps.AutoCraft = stamp
				}
				if (Settings.AutoRecycle.enabled && stamp - Stamps.AutoRecycle > 80 && Settings.AutoRecycle.last !== null) {
					getClientProperty("recycle_inv").bind(window.client)(Settings.AutoRecycle.last);
					Stamps.AutoRecycle = stamp
				}
				if (Settings.AutoWall.enabled && stamp - Stamps.AutoWall > 80 && canSelect(162)) {
					getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 162, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 0]));
					if (Settings.AutoWall.mode) {
						for (let i = 0; i < 30; i += 2) {
							getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 162, angleCalculator(Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), i), 0]));
							getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 162, angleCalculator(Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), -i), 0]))
						}
					}
					Stamps.AutoWall = stamp
				}
				if (Settings.AutoFire.enabled && stamp - Stamps.AutoFire > 80) {
					if (canSelect(113)) {
						getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 113, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 0]))
					} else if (canSelect(118)) {
						getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 118, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 0]))
					}
					Stamps.AutoFire = stamp
				}
				if (Settings.AutoIce.enabled && stamp - Stamps.AutoIce > 200 && canSelect(142)) {
					const keys = Object.keys(getUserProperty("gauges"));
					const warm = getUserProperty("gauges")[keys[5]];
					if (warm <= .4) getClientProperty("socket").send(JSON.stringify([Packets.Equip, 142]));
					Stamps.AutoIce = stamp
				}
				if (Settings.DropSword.enabled && stamp - Stamps.DropSword > 80 && getWorldProperty("fast_units")[getUserProperty("uid")].right !== undefined && getGearRange(getWorldProperty("fast_units")[getUserProperty("uid")].right) !== null) {
					getClientProperty("socket").send(JSON.stringify([Packets.DropAll, getWorldProperty("fast_units")[getUserProperty("uid")].right]));
					Stamps.DropSword = stamp
				}
				if (Settings.AutoBuild.enabled && stamp - Stamps.AutoBuild > 60) {
					if (Settings.AutoBuild.build === "Roofs" && canSelect(190)) {
						getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 190, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 1]))
					} else if (Settings.AutoBuild.build === "Bridges" && canSelect(125)) {
						getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 125, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 1]))
					} else if (Settings.AutoBuild.build === "Plots" && canSelect(141)) {
						getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, 141, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 1]))
					}
					Stamps.AutoBuild = stamp
				}
				if (Settings.AutoSeed.enabled && stamp - Stamps.AutoSeed > 80) {
					switch (Settings.AutoSeed.seed) {
						case "Auto":
							const seeds = [115, 132, 188, 204, 206, 193, 210, 191, 208];
							for (const seed of seeds)
								if (canSelect(seed)) var seedId = seed;
							break;
						case "Berry":
							if (canSelect(115)) var seedId = 115;
							break;
						case "Wheat":
							if (canSelect(132)) var seedId = 132;
							break;
						case "Pumpkin":
							if (canSelect(188)) var seedId = 188;
							break;
						case "Thornbush":
							if (canSelect(193)) var seedId = 193;
							break;
						case "Aloe":
							if (canSelect(210)) var seedId = 210;
							break;
						case "Watermelon":
							if (canSelect(208)) var seedId = 208;
							break;
						case "Garlic":
							if (canSelect(191)) var seedId = 191;
							break;
						case "Carrot":
							if (canSelect(204)) var seedId = 204;
							break;
						case "Tomato":
							if (canSelect(206)) var seedId = 206;
							break
					}
					if (seedId) {
						getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, seedId, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), Settings.AutoSeedG ? 1 : 0]))
					}
					Stamps.AutoSeed = stamp
				}
				if (Settings.AutoSteal.enabled && stamp - Stamps.AutoSteal > 40) {
					getWorldProperty("units")[11].forEach((chest => {
						if (distance(chest, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300 && chest.action) {
							if (chest.lock && Settings.AutoUnlock && !isAlly(chest) && canSelect(158)) getClientProperty("socket").send(JSON.stringify([Packets.UnlockChest, chest.pid, chest.id]));
							getClientProperty("socket").send(JSON.stringify([Packets.TakeChest, chest.pid, chest.id]))
						}
					}));
					getWorldProperty("units")[34].forEach((oven => {
						if ((oven.info & 31744) >> 10 && distance(oven, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.TakeOven, oven.pid, oven.id]))
						}
					}));
					getWorldProperty("units")[32].forEach((windmill => {
						if ((windmill.info & 65280) >> 8 && distance(windmill, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.TakeWindmill, windmill.pid, windmill.id]))
						}
					}));
					const extractors = [getWorldProperty("units")[24], getWorldProperty("units")[25], getWorldProperty("units")[26], getWorldProperty("units")[27], getWorldProperty("units")[28]];
					for (let ex = 0; ex < extractors.length; ex++) {
						extractors[ex].forEach((extractor => {
							if ((extractor.info & 65280) >> 8 && distance(extractor, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
								getClientProperty("socket").send(JSON.stringify([Packets.TakeExtractor, extractor.pid, extractor.id, extractor.type]))
							}
						}))
					}
					Stamps.AutoSteal = stamp
				}
				if (Settings.AutoExtractorTake.enabled && stamp - Stamps.AutoExtractorTake > 50) {
					const extractors = [getWorldProperty("units")[24], getWorldProperty("units")[25], getWorldProperty("units")[26], getWorldProperty("units")[27], getWorldProperty("units")[28]];
					for (let ex = 0; ex < extractors.length; ex++) {
						extractors[ex].forEach((extractor => {
							if ((extractor.info & 65280) >> 8 && distance(extractor, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
								getClientProperty("socket").send(JSON.stringify([Packets.TakeExtractor, extractor.pid, extractor.id, extractor.type]))
							}
						}))
					}
					Stamps.AutoExtractorTake = stamp
				}
				if (Settings.AutoExtractorPut.enabled && stamp - Stamps.AutoExtractorPut > 250) {
					const extractors = [getWorldProperty("units")[24], getWorldProperty("units")[25], getWorldProperty("units")[26], getWorldProperty("units")[27], getWorldProperty("units")[28]];
					for (let ex = 0; ex < extractors.length; ex++) {
						extractors[ex].forEach((extractor => {
							if ((extractor.info & 255) !== Settings.AutoExtractorPutMax && distance(extractor, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
								getClientProperty("socket").send(JSON.stringify([Packets.PutExtractor, Settings.AutoExtractorPutMax - (extractor.info & 255), extractor.pid, extractor.id, extractor.type]))
							}
						}))
					}
					Stamps.AutoExtractorPut = stamp
				}
				if (Settings.AutoBreadTake.enabled && stamp - Stamps.AutoBreadTake > 80) {
					getWorldProperty("units")[34].forEach((oven => {
						if ((oven.info & 31744) >> 10 && distance(oven, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.TakeOven, oven.pid, oven.id]))
						}
					}));
					getWorldProperty("units")[32].forEach((windmill => {
						if ((windmill.info & 65280) >> 8 && distance(windmill, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.TakeWindmill, windmill.pid, windmill.id]))
						}
					}));
					Stamps.AutoBreadTake = stamp
				}
				if (Settings.AutoBreadPut.enabled && stamp - Stamps.AutoBreadPut > 250) {
					getWorldProperty("units")[34].forEach((oven => {
						if ((oven.info & 31) !== Settings.BreadPutMax && distance(oven, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.GiveWoodOven, Settings.BreadPutMax - (oven.info & 31), oven.pid, oven.id]))
						}
						if ((oven.info & 992) >> 5 !== Settings.BreadPutMax && distance(oven, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.GiveFlourOven, Settings.BreadPutMax - ((oven.info & 992) >> 5), oven.pid, oven.id]))
						}
					}));
					getWorldProperty("units")[32].forEach((windmill => {
						if ((windmill.info & 255) !== Settings.WindmillPutMax && distance(windmill, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.GiveWheatWindmill, Settings.WindmillPutMax - (windmill.info & 255), windmill.pid, windmill.id]))
						}
					}));
					Stamps.AutoBreadPut = stamp
				}
				if (Settings.AutoCrown.enabled && getUserProperty("ghost").enabled && stamp - Stamps.AutoCrown > 80) {
					getWorldProperty("units")[22].forEach((resurrection => {
						if (distance(resurrection, getWorldProperty("fast_units")[getUserProperty("uid")]) <= 300) {
							getClientProperty("socket").send(JSON.stringify([Packets.Resurrection, resurrection.pid, resurrection.id]))
						}
					}));
					Stamps.AutoCrown = stamp
				}
				if (Settings.AimBot.enabled && getWorldProperty("fast_units")[getUserProperty("uid")].right !== undefined) {
					const range = getGearRange(getWorldProperty("fast_units")[getUserProperty("uid")].right);
					if (range !== null) {
						const target = findTarget(getWorldProperty("fast_units")[getUserProperty("uid")], getWorldProperty("units")[0], range);
						if (target) {
							Settings.AimBot.angle = calcAngle(getWorldProperty("fast_units")[getUserProperty("uid")], target, true);
							getClientProperty("socket").send(JSON.stringify([Packets.SendAttack, Math.floor((Settings.AimBot.angle + Math.PI * 2) % (Math.PI * 2) * 255 / (Math.PI * 2))]));
							getClientProperty("socket").send(JSON.stringify([Packets.StopAttack]))
						} else Settings.AimBot.angle = null
					} else Settings.AimBot.angle = null
				}
				if (Settings.SmartCraft.enabled && stamp - Stamps.AutoCraft > 90) {
					switch (Settings.SmartCraft.select) {
						case "REIDITE_SPIKE":
							var craftIds = [55, 56, 57, 58, 59, 60, 72];
							var checkId = 219;
							break;
						case "AMETHYST_SPIKE":
							var craftIds = [55, 56, 57, 58, 59, 71];
							var checkId = 123;
							break;
						case "DIAMOND_SPIKE":
							var craftIds = [55, 56, 57, 58, 70];
							var checkId = 170;
							break;
						case "GOLD_SPIKE":
							var craftIds = [55, 56, 57, 69];
							var checkId = 169;
							break;
						case "STONE_SPIKE":
							var craftIds = [55, 56, 68];
							var checkId = 168;
							break;
						case "REIDITE_WALL":
							var craftIds = [55, 56, 57, 58, 59, 60];
							var checkId = 217;
							break;
						case "AMETHYST_WALL":
							var craftIds = [55, 56, 57, 58, 59];
							var checkId = 122;
							break;
						case "DIAMOND_WALL":
							var craftIds = [55, 56, 57, 58];
							var checkId = 165;
							break;
						case "GOLD_WALL":
							var craftIds = [55, 56, 57];
							var checkId = 164;
							break;
						case "STONE_WALL":
							var craftIds = [55, 56];
							var checkId = 163;
							break
					}
					if (craftIds && checkId) {
						const amount = getUserProperty("inventory")[Object.keys(getUserProperty("inventory"))[3]][checkId];
						if (amount === undefined || amount < Settings.SmartCraft.hm) {
							for (const craftId of craftIds.reverse()) {
								getClientProperty("socket").send(JSON.stringify([Packets.Craft, craftId]))
							}
						}
					}
					Stamps.AutoCraft = stamp
				}
				if (Settings.AutoSpike.enabled && stamp - Stamps.AutoSpike > 90) {
					for (const spike of Settings.AutoSpike.priority) {
						if (spike === "Reidite Spike" && canSelect(219)) {
							var bestSpike = 219;
							break
						} else if (spike === "Amethyst Spike" && canSelect(123)) {
							var bestSpike = 123;
							break
						} else if (spike === "Diamond Spike" && canSelect(170)) {
							var bestSpike = 170;
							break
						} else if (spike === "Gold Spike" && canSelect(169)) {
							var bestSpike = 169;
							break
						} else if (spike === "Stone Spike" && canSelect(168)) {
							var bestSpike = 168;
							break
						} else if (spike === "Wood Spike" && canSelect(160)) {
							var bestSpike = 160;
							break
						} else if (spike === "Wood Wall" && canSelect(162)) {
							var bestSpike = 162;
							break
						}
					}
					if (bestSpike) {
						getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, bestSpike, Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), 0]));
						if (Settings.AutoSpike.mode) {
							for (let i = 0; i < 34; i += 2) {
								getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, bestSpike, angleCalculator(Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), i), 0]));
								getClientProperty("socket").send(JSON.stringify([Packets.SendBuild, bestSpike, angleCalculator(Math.floor(255 * ((getWorldProperty("fast_units")[getUserProperty("uid")].angle + Math.PI * 2) % (Math.PI * 2)) / (Math.PI * 2)), -i), 0]))
							}
						}
					}
					Stamps.AutoSpike = stamp
				}
				if (Settings.AutoFarm.enabled && stamp - Stamps.AutoFarm > 400) {
					const Targeta = {
						obj: null,
						dist: -1,
						type: 0
					};
					const rect1 = {
						x: Settings.AutoFarm.x,
						y: Settings.AutoFarm.y,
						width: Settings.AutoFarm.xx - Settings.AutoFarm.x,
						height: Settings.AutoFarm.yy - Settings.AutoFarm.y
					};
					for (let i = 0, objects = [...getWorldProperty("units")[37], ...getWorldProperty("units")[3], ...getWorldProperty("units")[31], ...getWorldProperty("units")[40], ...getWorldProperty("units")[39], ...getWorldProperty("units")[44], ...getWorldProperty("units")[55], ...getWorldProperty("units")[54], ...getWorldProperty("units")[43]], Berry = null, d = null; i < objects.length; ++i) {
						Berry = objects[i];
						if (!Berry.info || Berry.info === 10) continue;
						if (!Settings.AutoFarm.water && Berry.info === 16) continue;
						if (rect1.x < Berry.x - 50 + 100 && rect1.x + rect1.width > Berry.x - 50 && rect1.y < Berry.y - 50 + 100 && rect1.y + rect1.height > Berry.y - 50) {
							d = (getWorldProperty("fast_units")[getUserProperty("uid")].x - Berry.x) ** 2 + (getWorldProperty("fast_units")[getUserProperty("uid")].y - Berry.y) ** 2;
							if (Targeta.dist === -1 || d < Targeta.dist) {
								Targeta.dist = d;
								Targeta.obj = Berry
							}
						}
					}
					if (Targeta.obj) {
						Targeta.dist = distance(Targeta.obj, getWorldProperty("fast_units")[getUserProperty("uid")]);
						switch (Targeta.obj.info) {
							case 1:
							case 2:
							case 3: {
								selectTool(54, 53, getWorldProperty("fast_units")[getUserProperty("uid")], getClientProperty("socket"));
								Targeta.type = 2
							};
							break;
						case 16:
						case 17:
						case 18:
						case 19: {
							if (Settings.AutoFarm.water && canSelect(49) && getWorldProperty("fast_units")[getUserProperty("uid")].right !== 49) {
								getClientProperty("socket").send(JSON.stringify([Packets.Equip, 49]));
								Targeta.type = 1
							} else {
								selectTool(54, 53, getWorldProperty("fast_units")[getUserProperty("uid")], getClientProperty("socket"));
								Targeta.type = 2
							}
						};
						break
						}
						let velocity = 0;
						const Coors = {
							x: getWorldProperty("fast_units")[getUserProperty("uid")].x - Targeta.obj.x,
							y: getWorldProperty("fast_units")[getUserProperty("uid")].y - Targeta.obj.y
						};
						const CoorsABS = {
							x: Math.abs(getWorldProperty("fast_units")[getUserProperty("uid")].x - Targeta.obj.x),
							y: Math.abs(getWorldProperty("fast_units")[getUserProperty("uid")].y - Targeta.obj.y)
						};
						if (CoorsABS.x > 0) {
							if (Coors.x > 0) velocity += 1;
							if (Coors.x < 0) velocity += 2
						}
						if (CoorsABS.y > 0) {
							if (Coors.y > 0) velocity += 8;
							if (Coors.y < 0) velocity += 4
						}
						if (CoorsABS.x < 250 && CoorsABS.y < 250) {
							Settings.AutoFarm.angle = calcAngle(getWorldProperty("fast_units")[getUserProperty("uid")], Targeta.obj, true);
							if (Settings.AutoFarm.angle) {
								getClientProperty("socket").send(JSON.stringify([Packets.SendAttack, Math.floor((Settings.AutoFarm.angle + Math.PI * 2) % (Math.PI * 2) * 255 / (Math.PI * 2))]));
								getClientProperty("socket").send(JSON.stringify([Packets.StopAttack]))
							}
						}
						getClientProperty("send_move").bind(window.client)(velocity)
					} else {
						let velocity = 0;
						const Coors = {
							x: getWorldProperty("fast_units")[getUserProperty("uid")].x - Settings.AutoFarm.sx,
							y: getWorldProperty("fast_units")[getUserProperty("uid")].y - Settings.AutoFarm.sy
						};
						const CoorsABS = {
							x: Math.abs(getWorldProperty("fast_units")[getUserProperty("uid")].x - Settings.AutoFarm.sx),
							y: Math.abs(getWorldProperty("fast_units")[getUserProperty("uid")].y - Settings.AutoFarm.sy)
						};
						if (CoorsABS.x > 100) {
							if (Coors.x > 0) velocity += 1;
							if (Coors.x < 0) velocity += 2
						}
						if (CoorsABS.y > 100) {
							if (Coors.y > 0) velocity += 8;
							if (Coors.y < 0) velocity += 4
						}
						getClientProperty("send_move").bind(window.client)(velocity)
					}
					Stamps.AutoFarm = stamp
				}
			}
		}
	}

	function initExclusive() {
						document.querySelector("#option_in_game").style.opacity = "0.5";
				document.querySelector("#chronoquest").style.opacity = "0.5";
				document.querySelector("#shop_market").style.opacity = "0.5";
				document.querySelector("#home_craft").style.opacity = "0.5";
				document.querySelector("#recipe_craft").style.opacity = "0.5";
				document.querySelector("#sure_delete").style.opacity = "0.5";
				document.querySelector("#cancel_sure_delete").style.opacity = "0.5";
		const gui = new guify({
			title: "snowfall",
			align: "right",
			width: 600,
			opacity: .67,
			barMode: "none",
			theme: {
				colors: {
						panelBackground: "rgb(0,0,0)",
						componentBackground: "rgb(10,10,35)",
						componentForeground: "rgb(0,255,0)",
						textPrimary: "rgb(0,255,0)",
						textSecondary: "rgb(0,255,0)",
						textHover: "rgb(0,0,0)"
				},
				font: {
					fontFamily: "Baloo Paaji",
					fontSize: "20px"
				}
			}
		});
		gui.Register([{
			type: "folder",
			label: "Visuals",
			open: false
		}, {
			type: "folder",
			label: "Misc",
			open: false
		}, {
			type: "folder",
			label: "Binds",
			open: false
		}, {
			type: "folder",
			label: "AutoSteal",
			open: false
		}, {
			type: "folder",
			label: "AutoSpike",
			open: false
		}, {
			type: "folder",
			label: "SmartCraft",
			open: false
		}, {
			type: "folder",
			label: "Spectator",
			open: false
		}, {
			type: "folder",
			label: "AutoFarm",
			open: false
		},
			{
			type: "folder",
			label: "Extras",
			open: false,
			},
		]);
		gui.Register([{
			type: "checkbox",
			label: "PlayerTracers",
			object: Settings.PlayerTracers,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "KrakenTracers",
			object: Settings.KrakenTracers,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "SandwormTracers",
			object: Settings.SandwormTracers,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "PlayerOnTop",
			object: Settings.PlayerOnTop,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "BoxOnTop",
			object: Settings.BoxOnTop,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ListEnabledHacks",
			object: Settings.ListEnabledHacks,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ShowJoinLeaves",
			object: Settings.ShowJoinLeaves,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "Roofs",
			object: Settings.Roofs,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ShowHP",
			object: Settings.ShowHP,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "Debugger",
			object: Settings.Debugger,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "Timers",
			object: Settings.Timers,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "WeatherInfo",
			object: Settings.WeatherInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ExtractorInfo",
			object: Settings.ExtractorInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ChestInfo",
			object: Settings.ChestInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "BoxInfo",
			object: Settings.BoxInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "WindmillInfo",
			object: Settings.WindmillInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "OvenInfo",
			object: Settings.OvenInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "TotemInfo",
			object: Settings.TotemInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "FurnaceInfo",
			object: Settings.FurnaceInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "MachineInfo",
			object: Settings.MachineInfo,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "ColoredSpikes",
			object: Settings.ColoredSpikes,
			property: "enabled",
			onChange() {
				saveSettings();
			}
		}, {
			type: "checkbox",
			label: "ShowHoodNames",
			object: Settings.ShowHoodNames,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "NoFog",
			object: Settings.NoFog,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "Xray",
			object: Settings.Xray,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
		
			type: "checkbox",
			label: "Vehicle Xray",
			object: Settings.VehicleOpacity,
			property: "e",
			onChange: data => {
				saveSettings()
				}
		}, {
			type: "range",
			label: "XrayOpacity",
			object: Settings,
			property: "XrayOpacity",
			min: .05,
			max: .95,
			step: .05,
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "RoofsOpacity",
			object: Settings,
			property: "RoofsOpacity",
			min: .05,
			max: .95,
			step: .05,
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "ColoredSpikes Textures",
			object: Settings.ColoredSpikes,
			property: "textures",
			options: ["1", "2"],
			onChange() {
				saveSettings();
				switchColoredSpikesTextures()
			}
		}], {
			folder: "Visuals"
		});
		gui.Register([{
			type: "checkbox",
			label: "Equip After Place",
			object: Settings.Equip,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		},
			{
			type: "checkbox",
			label: "AutoCraft",
			object: Settings.AutoCraft,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoRecycle",
			object: Settings.AutoRecycle,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoBook",
			object: Settings.AutoBook,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoTotem",
			object: Settings.AutoTotem,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoCrown",
			object: Settings.AutoCrown,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AimBot",
			object: Settings.AimBot,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoBuild",
			object: Settings.AutoBuild,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoSeed",
			object: Settings.AutoSeed,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoSeed with G",
			object: Settings,
			property: "AutoSeedG",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoFeed",
			object: Settings.AutoFeed,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoIce",
			object: Settings.AutoIce,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoBreadTake",
			object: Settings.AutoBreadTake,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoBreadPut",
			object: Settings.AutoBreadPut,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoExtractorTake",
			object: Settings.AutoExtractorTake,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoExtractorPut",
			object: Settings.AutoExtractorPut,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		},{
			type: "checkbox",
			label: "ZMA",
			object: Settings.ZMA,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		},{
			type: "checkbox",
			label: "crownHeal",
			object: Settings.crownHeal,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		},
		{
			type: "checkbox",
			label: "BottleHealZma",
			object: Settings.BottleHeal,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoBuild Build",
			object: Settings.AutoBuild,
			property: "build",
			options: ["Roofs", "Bridges", "Plots"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSeed Seed",
			object: Settings.AutoSeed,
			property: "seed",
			options: ["Auto", "Berry", "Wheat", "Pumpkin", "Thornbush", "Aloe", "Watermelon", "Garlic", "Carrot", "Tomato"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "PutInChest Amount",
			object: Settings,
			property: "PutInChest",
			min: 10,
			max: 8e3,
			step: 10,
			onChange() {
				saveSettings()
			}
		},], {
			folder: "Misc"
		});
		for (const property in Settings) {
			if (Settings[property].pushToBinds) {
				gui.Register([{
					type: "display",
					label: `${property} Key`,
					object: Settings[property],
					property: "key"
				}, {
					type: "button",
					label: `Set ${property} Key`,
					action() {
						setKeybind(property)
					}
				}], {
					folder: "Binds"
				})
			}
		}
		gui.Register([{
			type: "checkbox",
			label: "AutoSteal",
			object: Settings.AutoSteal,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoUnlock",
			object: Settings,
			property: "AutoUnlock",
			onChange() {
				saveSettings()
			}
		}, {
			type: "display",
			label: "AutoSteal Key",
			object: Settings.AutoSteal,
			property: "key"
		}, {
			type: "button",
			label: "Set AutoSteal Key",
			action() {
				setKeybind("AutoSteal")
			}
		}], {
			folder: "AutoSteal"
		});
		gui.Register([{
			type: "display",
			label: "AutoSpike Key",
			object: Settings.AutoSpike,
			property: "key"
		}, {
			type: "button",
			label: "Set AutoSpike Key",
			action() {
				setKeybind("AutoSpike")
			}
		}, {
			type: "checkbox",
			label: "AutoSpike 2",
			object: Settings.AutoSpike,
			property: "mode",
			onChange() {
				saveSettings()
			}
		}, {
			type: "display",
			label: "AutoWall Key",
			object: Settings.AutoWall,
			property: "key"
		}, {
			type: "button",
			label: "Set AutoWall Key",
			action() {
				setKeybind("AutoWall")
			}
		}, {
			type: "checkbox",
			label: "AutoWall 2",
			object: Settings.AutoWall,
			property: "mode",
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 1",
			object: Settings.AutoSpike.priority,
			property: "0",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 2",
			object: Settings.AutoSpike.priority,
			property: "1",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 3",
			object: Settings.AutoSpike.priority,
			property: "2",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 4",
			object: Settings.AutoSpike.priority,
			property: "3",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 5",
			object: Settings.AutoSpike.priority,
			property: "4",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 6",
			object: Settings.AutoSpike.priority,
			property: "5",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}, {
			type: "select",
			label: "AutoSpike Priority 7",
			object: Settings.AutoSpike.priority,
			property: "6",
			options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
			onChange() {
				saveSettings()
			}
		}], {
			folder: "AutoSpike"
		});
		gui.Register([{
			type: "checkbox",
			label: "SmartCraft",
			object: Settings.SmartCraft,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "display",
			label: "SmartCraft Key",
			object: Settings.SmartCraft,
			property: "key"
		}, {
			type: "button",
			label: "Set SmartCraft Key",
			action() {
				setKeybind("SmartCraft")
			}
		}, {
			type: "select",
			label: "SmartCraft Select",
			options: ["REIDITE_SPIKE", "AMETHYST_SPIKE", "DIAMOND_SPIKE", "GOLD_SPIKE", "STONE_SPIKE", "REIDITE_WALL", "AMETHYST_WALL", "DIAMOND_WALL", "GOLD_WALL", "STONE_WALL"],
			object: Settings.SmartCraft,
			property: "select",
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "CraftHowMuch",
			object: Settings.SmartCraft,
			property: "hm",
			min: 1,
			max: 500,
			step: 1,
			onChange() {
				saveSettings()
			}
		}], {
			folder: "SmartCraft"
		});
		gui.Register([{
			type: "checkbox",
			label: "Spectator",
			object: Settings.Spectator,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "range",
			label: "Spectator Speed",
			min: .05,
			step: .05,
			max: 1,
			object: Settings.Spectator,
			property: "speed",
			onChange() {
				saveSettings()
			}
		}, {
			type: "display",
			label: "Spectator Key",
			object: Settings.Spectator,
			property: "key"
		}, {
			type: "button",
			label: "Set Spectator Key",
			action() {
				setKeybind("Spectator")
			}
		}], {
			folder: "Spectator"
		});
		gui.Register([{
			type: "checkbox",
			label: "Start AutoFarm",
			object: Settings.AutoFarm,
			property: "enabled",
			onChange() {
				saveSettings()
			}
		}, {
			type: "checkbox",
			label: "AutoWater",
			object: Settings.AutoFarm,
			property: "water",
			onChange() {
				saveSettings()
			}
		}, {
			type: "button",
			label: "Top left of farm",
			action() {
				getWorldProperty("fast_units")[getUserProperty("uid")] && (Settings.AutoFarm.x = getWorldProperty("fast_units")[getUserProperty("uid")].x, Settings.AutoFarm.y = getWorldProperty("fast_units")[getUserProperty("uid")].y);
				saveSettings()
			}
		}, {
			type: "button",
			label: "Bottom right of farm",
			action() {
				getWorldProperty("fast_units")[getUserProperty("uid")] && (Settings.AutoFarm.xx = getWorldProperty("fast_units")[getUserProperty("uid")].x, Settings.AutoFarm.yy = getWorldProperty("fast_units")[getUserProperty("uid")].y);
				saveSettings()
			}
		}, {
			type: "button",
			label: "Safe Point",
			action() {
				getWorldProperty("fast_units")[getUserProperty("uid")] && (Settings.AutoFarm.sx = getWorldProperty("fast_units")[getUserProperty("uid")].x, Settings.AutoFarm.sy = getWorldProperty("fast_units")[getUserProperty("uid")].y);
				saveSettings()
			}
		}, {
			type: "display",
			label: "X",
			object: Settings.AutoFarm,
			property: "x"
		}, {
			type: "display",
			label: "Y",
			object: Settings.AutoFarm,
			property: "y"
		}, {
			type: "display",
			label: "X1",
			object: Settings.AutoFarm,
			property: "xx"
		}, {
			type: "display",
			label: "Y1",
			object: Settings.AutoFarm,
			property: "yy"
		}, {
			type: "display",
			label: "SX",
			object: Settings.AutoFarm,
			property: "sx"
		}, {
			type: "display",
			label: "SY",
			object: Settings.AutoFarm,
			property: "sy"
		}], {
			folder: "AutoFarm"
		})
		gui.Register([ 
			{
type: "range",
label: "Skin",
min: 0,
max: 238,
step: 1,
object: Settings.Skin,
property: "Skin",
onChange: (data) => {
	getWorldProperty("fast_units")[getUserProperty("uid")].ⲆΔⵠⵠ = data
}
},
{
type: "button",
label: "Copy token",
action() {
let str = "```" + `Nickname: ${getWorldProperty("fast_units")[getUserProperty("uid")].ΔⵠⲆⵠ.ⲆⲆΔⵠⵠ}\nToken: ${window.user.ΔⲆⵠⵠᐃ}\nTokenID: ${window.user.ⲆⵠᐃᐃⵠⲆᐃ}` + "```";
window.prompt("Press CTRL C RETARDS", str)
ᐃⲆⵠ.ΔⲆⵠⵠᐃ, ᐃⲆⵠ.ⲆⵠᐃᐃⵠⲆᐃ
}
},

{
type: "button",
label: "Go To Lobby",
action() {
	getClientProperty("steal_token") && getClientProperty("steal_token").bind(window.client)()
}

},
{
			type: "checkbox",
			label: "Token Joiner Enabled",
			object: Settings.Tokens,
			property: "enabled",
			action() {
				saveSettings()
			}
		},
{
type: "text",
label: "Token",
object: Settings.Tokens,
property: "token",
listenMode: 'input',
onChange: (data) => {
window.user.ΔⲆⵠⵠᐃ = data;
saveSettings()
}
},
{
type: "text",
label: "TokenID",
object: Settings.Tokens,
property: "tokenid",
listenMode: 'input',
onChange: (data) => {
window.user.ⲆⵠᐃᐃⵠⲆᐃ = data;
saveSettings();
}
},
/*
{
	type: "checkbox",
	label: "ZMApath",
	object: Settings.ZMApath,
	property: "enabled",
	onChange() {
		saveSettings()
	}
}
*/
], {
folder: "Extras"
})
		setTimeout(initListeners, 5e3)
	}
	const script = document.createElement("script");
	script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
	script.onload = initExclusive;
	document.body.appendChild(script)
})();
